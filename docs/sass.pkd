---
name: Sass
slug: sass
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2006–2022 the Sass team, and numerous contributors
  Licensed under the MIT License.
  https://sass-lang.com/documentation/index.html
homepage: http://sass-lang.com/

---
- name: '@at-root'
  id: at-rules/at-root
  summary: The @at-root rule is usually written @at-root <selector> { ... } and causes everything within it to be emitted at the root of the document instead of using the normal nesting
  description: "# @at-root\n\nThe `@at-root` rule is usually written `@at-root <selector> { ... }` and causes everything within it to be emitted at the root of the document instead of using the normal nesting. It's most often used when doing [advanced nesting](../style-rules/parent-selector#advanced-nesting) with the [SassScript parent selector](../style-rules/parent-selector#in-sassscript) and [selector functions](../modules/selector).\n\nFor example, suppose you want to write a selector that matches the outer selector *and* an element selector. You could write a mixin like this one that uses the [`selector.unify()` function](../modules/selector#unify) to combine `&` with a user’s selector.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n@use \"sass:selector\";\n\n@mixin unify-parent($child) {\n  @at-root #{selector.unify(&, $child)} {\n    @content;\n  }\n}\n\n.wrapper .field {\n  @include unify-parent(\"input\") {\n    /* ... */\n  }\n  @include unify-parent(\"select\") {\n    /* ... */\n  }\n}\n```\n\n``` scss\n@use \"sass:selector\"\n\n@mixin unify-parent($child)\n  @at-root #{selector.unify(&, $child)}\n    @content\n\n\n\n.wrapper .field\n  @include unify-parent(\"input\")\n    /* ... */\n\n  @include unify-parent(\"select\")\n    /* ... */\n```\n\n``` css\n.wrapper input.field {\n  /* ... */\n}\n\n.wrapper select.field {\n  /* ... */\n}\n```\n\nThe `@at-root` rule is necessary here because Sass doesn’t know what interpolation was used to generate a selector when it’s performing selector nesting. This means it will automatically add the outer selector to the inner selector *even if* you used `&` as a SassScript expression. The `@at-root` explicitly tells Sass not to include the outer selector.\n\n### 💡 Fun fact:\n\nThe `@at-root` rule can also be written `@at-root { ... }` to put multiple style rules at the root of the document. In fact, `@at-root <selector> { ... }` is just a shorthand for `@at-root { <selector> { ... } }`!\n\n## Beyond Style Rules\n\nOn its own, `@at-root` only gets rid of [style rules](../style-rules). Any at-rules like [`@media`](css#media) or [`@supports`](css#supports) will be left in. If this isn’t what you want, though, you can control exactly what it includes or excludes using syntax like [media query features](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Targeting_media_features), written `@at-root (with: <rules...>) { ... }` or `@at-root (without: <rules...>) { ... }`. The `(without: ...)` query tells Sass which rules should be excluded; the `(with: ...)` query excludes all rules *except* those that are listed.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n@media print {\n  .page {\n    width: 8in;\n\n    @at-root (without: media) {\n      color: #111;\n    }\n\n    @at-root (with: rule) {\n      font-size: 1.2em;\n    }\n  }\n}\n```\n\n``` scss\n@media print\n  .page\n    width: 8in\n\n    @at-root (without: media)\n      color: #111\n\n\n    @at-root (with: rule)\n      font-size: 1.2em\n```\n\n``` css\n@media print {\n  .page {\n    width: 8in;\n  }\n}\n.page {\n  color: #111;\n}\n.page {\n  font-size: 1.2em;\n}\n```\n\nIn addition to the names of at-rules, there are two special values that can be used in queries:\n\n- `rule` refers to style rules. For example, `@at-root (with: rule)` excludes all at-rules but preserves style rules.\n\n- `all` refers to all at-rules *and* style rules should be excluded.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/at-root](https://sass-lang.com/documentation/at-rules/at-root)"
- name: '@debug'
  id: at-rules/debug
  summary: Sometimes it’s useful to see the value of a variable or expression while you’re developing your stylesheet
  description: "# @debug\n\nSometimes it’s useful to see the value of a [variable](../variables) or [expression](../syntax/structure#expressions) while you’re developing your stylesheet. That’s what the `@debug` rule is for: it’s written `@debug <expression>`, and it prints the value of that expression, along with the filename and line number.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@mixin inset-divider-offset($offset, $padding) {\n  $divider-offset: (2 * $padding) + $offset;\n  @debug \"divider offset: #{$divider-offset}\";\n\n  margin-left: $divider-offset;\n  width: calc(100% - #{$divider-offset});\n}\n```\n\n``` scss\n@mixin inset-divider-offset($offset, $padding)\n  $divider-offset: (2 * $padding) + $offset\n  @debug \"divider offset: #{$divider-offset}\"\n\n  margin-left: $divider-offset\n  width: calc(100% - #{$divider-offset})\n```\n\nThe exact format of the debug message varies from implementation to implementation. This is what it looks like in Dart Sass:\n\n``` highlight\ntest.scss:3 Debug: divider offset: 132px\n```\n\n### 💡 Fun fact:\n\nYou can pass any value to `@debug`, not just a string! It prints the same representation of that value as the [`meta.inspect()` function](../modules/meta#inspect).\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/debug](https://sass-lang.com/documentation/at-rules/debug)"
- name: '@each'
  id: at-rules/control/each
  summary: The @each rule makes it easy to emit styles or evaluate code for each element of a list or each pair in a map
  description: "# @each\n\nThe `@each` rule makes it easy to emit styles or evaluate code for each element of a [list](../../values/lists) or each pair in a [map](../../values/maps). It’s great for repetitive styles that only have a few variations between them. It’s usually written `@each <variable> in <expression> { ... }`, where the [expression](../../syntax/structure#expressions) returns a list. The block is evaluated for each element of the list in turn, which is assigned to the given variable name.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n$sizes: 40px, 50px, 80px;\n\n@each $size in $sizes {\n  .icon-#{$size} {\n    font-size: $size;\n    height: $size;\n    width: $size;\n  }\n}\n```\n\n``` scss\n$sizes: 40px, 50px, 80px\n\n@each $size in $sizes\n  .icon-#{$size}\n    font-size: $size\n    height: $size\n    width: $size\n```\n\n``` css\n.icon-40px {\n  font-size: 40px;\n  height: 40px;\n  width: 40px;\n}\n\n.icon-50px {\n  font-size: 50px;\n  height: 50px;\n  width: 50px;\n}\n\n.icon-80px {\n  font-size: 80px;\n  height: 80px;\n  width: 80px;\n}\n```\n\n## With Maps\n\nYou can also use `@each` to iterate over every key/value pair in a map by writing it `@each <variable>, <variable> in <expression> { ... }`. The key is assigned to the first variable name, and the element is assigned to the second.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n$icons: (\"eye\": \"\\f112\", \"start\": \"\\f12e\", \"stop\": \"\\f12f\");\n\n@each $name, $glyph in $icons {\n  .icon-#{$name}:before {\n    display: inline-block;\n    font-family: \"Icon Font\";\n    content: $glyph;\n  }\n}\n```\n\n``` scss\n$icons: (\"eye\": \"\\f112\", \"start\": \"\\f12e\", \"stop\": \"\\f12f\")\n\n@each $name, $glyph in $icons\n  .icon-#{$name}:before\n    display: inline-block\n    font-family: \"Icon Font\"\n    content: $glyph\n```\n\n``` css\n@charset \"UTF-8\";\n.icon-eye:before {\n  display: inline-block;\n  font-family: \"Icon Font\";\n  content: \"\";\n}\n\n.icon-start:before {\n  display: inline-block;\n  font-family: \"Icon Font\";\n  content: \"\";\n}\n\n.icon-stop:before {\n  display: inline-block;\n  font-family: \"Icon Font\";\n  content: \"\";\n}\n```\n\n## Destructuring\n\nIf you have a list of lists, you can use `@each` to automatically assign variables to each of the values from the inner lists by writing it `@each <variable...> in <expression> { ... }`. This is known as *destructuring*, since the variables match the structure of the inner lists. Each variable name is assigned to the value at the corresponding position in the list, or [`null`](../../values/null) if the list doesn’t have enough values.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n$icons:\n  \"eye\" \"\\f112\" 12px,\n  \"start\" \"\\f12e\" 16px,\n  \"stop\" \"\\f12f\" 10px;\n\n@each $name, $glyph, $size in $icons {\n  .icon-#{$name}:before {\n    display: inline-block;\n    font-family: \"Icon Font\";\n    content: $glyph;\n    font-size: $size;\n  }\n}\n```\n\n``` scss\n$icons: \"eye\" \"\\f112\" 12px, \"start\" \"\\f12e\" 16px, \"stop\" \"\\f12f\" 10px\n\n\n\n\n@each $name, $glyph, $size in $icons\n  .icon-#{$name}:before\n    display: inline-block\n    font-family: \"Icon Font\"\n    content: $glyph\n    font-size: $size\n```\n\n``` css\n@charset \"UTF-8\";\n.icon-eye:before {\n  display: inline-block;\n  font-family: \"Icon Font\";\n  content: \"\";\n  font-size: 12px;\n}\n\n.icon-start:before {\n  display: inline-block;\n  font-family: \"Icon Font\";\n  content: \"\";\n  font-size: 16px;\n}\n\n.icon-stop:before {\n  display: inline-block;\n  font-family: \"Icon Font\";\n  content: \"\";\n  font-size: 10px;\n}\n```\n\n### 💡 Fun fact:\n\nBecause `@each` supports destructuring and [maps count as lists of lists](../../values/maps), `@each`‘s map support works without needing special support for maps in particular.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/control/each](https://sass-lang.com/documentation/at-rules/control/each)"
- name: '@error'
  id: at-rules/error
  summary: When writing mixins and functions that take arguments, you usually want to ensure that those arguments have the types and formats your API expects
  description: "# @error\n\nWhen writing [mixins](mixin) and [functions](function) that take arguments, you usually want to ensure that those arguments have the types and formats your API expects. If they aren't, the user needs to be notified and your mixin/function needs to stop running.\n\nSass makes this easy with the `@error` rule, which is written `@error <expression>`. It prints the value of the [expression](../syntax/structure#expressions) (usually a string) along with a stack trace indicating how the current mixin or function was called. Once the error is printed, Sass stops compiling the stylesheet and tells whatever system is running it that an error occurred.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@mixin reflexive-position($property, $value) {\n  @if $property != left and $property != right {\n    @error \"Property #{$property} must be either left or right.\";\n  }\n\n  $left-value: if($property == right, initial, $value);\n  $right-value: if($property == right, $value, initial);\n\n  left: $left-value;\n  right: $right-value;\n  [dir=rtl] & {\n    left: $right-value;\n    right: $left-value;\n  }\n}\n\n.sidebar {\n  @include reflexive-position(top, 12px);\n  //       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  // Error: Property top must be either left or right.\n}\n```\n\n``` scss\n@mixin reflexive-position($property, $value)\n  @if $property != left and $property != right\n    @error \"Property #{$property} must be either left or right.\"\n\n\n  $left-value: if($property == right, initial, $value)\n  $right-value: if($property == right, $value, initial)\n\n  left: $left-value\n  right: $right-value\n  [dir=rtl] &\n    left: $right-value\n    right: $left-value\n\n\n\n.sidebar\n  @include reflexive-position(top, 12px)\n  //       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  // Error: Property top must be either left or right.\n```\n\nThe exact format of the error and stack trace varies from implementation to implementation, and can also depend on your build system. This is what it looks like in Dart Sass when run from the command line:\n\n``` highlight\nError: \"Property top must be either left or right.\"\n  ╷\n3 │     @error \"Property #{$property} must be either left or right.\";\n  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  ╵\n  example.scss 3:5   reflexive-position()\n  example.scss 19:3  root stylesheet\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/error](https://sass-lang.com/documentation/at-rules/error)"
- name: '@extend'
  id: at-rules/extend
  summary: There are often cases when designing a page when one class should have all the styles of another class, as well as its own specific styles
  description: "# @extend\n\n### Page Sections\n\n- [How It Works](#how-it-works)\n- [Placeholder Selectors](#placeholder-selectors)\n  - [Overview](#placeholder-selectors)\n  - [Private Placeholders](#private-placeholders)\n- [Extension Scope](#extension-scope)\n- [Mandatory and Optional Extends](#mandatory-and-optional-extends)\n- [Extends or Mixins?](#extends-or-mixins)\n- [Limitations](#limitations)\n  - [Overview](#limitations)\n  - [Disallowed Selectors](#disallowed-selectors)\n  - [HTML Heuristics](#html-heuristics)\n  - [Extend in `@media`](#extend-in-media)\n\nThere are often cases when designing a page when one class should have all the styles of another class, as well as its own specific styles. For example, the [BEM methodology](http://getbem.com/naming/) encourages modifier classes that go on the same elements as block or element classes. But this can create cluttered HTML, it's prone to errors from forgetting to include both classes, and it can bring non-semantic style concerns into your markup.\n\n``` highlight\n<div class=\"error error--serious\">\n  Oh no! You've been hacked!\n</div>\n```\n\n``` css\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n\n.error--serious {\n  border-width: 3px;\n}\n```\n\nSass’s `@extend` rule solves this. It’s written `@extend <selector>`, and it tells Sass that one selector should inherit the styles of another.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n\n  &--serious {\n    @extend .error;\n    border-width: 3px;\n  }\n}\n```\n\n``` scss\n.error\n  border: 1px #f00\n  background-color: #fdd\n\n  &--serious\n    @extend .error\n    border-width: 3px\n```\n\n``` css\n.error, .error--serious {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.error--serious {\n  border-width: 3px;\n}\n```\n\nWhen one class extends another, Sass styles all elements that match the extender as though they also match the class being extended. When one class selector extends another, it works exactly as though you added the extended class to every element in your HTML that already had the extending class. You can just write `class=\"error--serious\"`, and Sass will make sure it’s styled as though it had `class=\"error\"` as well.\n\nOf course, selectors aren’t just used on their own in style rules. Sass knows to extend *everywhere* the selector is used. This ensures that your elements are styled exactly as if they matched the extended selector.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n.error:hover {\n  background-color: #fee;\n}\n\n.error--serious {\n  @extend .error;\n  border-width: 3px;\n}\n```\n\n``` scss\n.error:hover\n  background-color: #fee\n\n\n.error--serious\n  @extend .error\n  border-width: 3px\n```\n\n``` css\n.error:hover, .error--serious:hover {\n  background-color: #fee;\n}\n\n.error--serious {\n  border-width: 3px;\n}\n```\n\n### ⚠️ Heads up!\n\nExtends are resolved after the rest of your stylesheet is compiled. In particular, it happens after [parent selectors](../style-rules/parent-selector) are resolved. This means that if you `@extend .error`, it won’t affect the inner selector in `.error { &__icon { ... } }`. It also means that [parent selectors in SassScript](../style-rules/parent-selector#in-sassscript) can’t see the results of extend.\n\n## How It Works\n\nUnlike [mixins](mixin), which copy styles into the current style rule, `@extend` updates style rules that contain the extended selector so that they contain the extending selector as well. When extending selectors, Sass does *intelligent unification*:\n\n- It never generates selectors like `#main#footer` that can’t possibly match any elements.\n\n- It ensures that complex selectors are interleaved so that they work no matter which order the HTML elements are nested.\n\n- It trims redundant selectors as much as possible, while still ensuring that the specificity is greater than or equal to that of the extender.\n\n- It knows when one selector matches everything another does, and can combine them together.\n\n- It intelligently handles [combinators](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors#Combinators), [universal selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors), and [pseudo-classes that contain selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/:not).\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n.content nav.sidebar {\n  @extend .info;\n}\n\n// This won't be extended, because `p` is incompatible with `nav`.\np.info {\n  background-color: #dee9fc;\n}\n\n// There's no way to know whether `<div class=\"guide\">` will be inside or\n// outside `<div class=\"content\">`, so Sass generates both to be safe.\n.guide .info {\n  border: 1px solid rgba(#000, 0.8);\n  border-radius: 2px;\n}\n\n// Sass knows that every element matching \"main.content\" also matches \".content\"\n// and avoids generating unnecessary interleaved selectors.\nmain.content .info {\n  font-size: 0.8em;\n}\n```\n\n``` scss\n.content nav.sidebar\n  @extend .info\n\n\n// This won't be extended, because `p` is incompatible with `nav`.\np.info\n  background-color: #dee9fc\n\n\n// There's no way to know whether `<div class=\"guide\">` will be inside or\n// outside `<div class=\"content\">`, so Sass generates both to be safe.\n.guide .info\n  border: 1px solid rgba(#000, 0.8)\n  border-radius: 2px\n\n\n// Sass knows that every element matching \"main.content\" also matches \".content\"\n// and avoids generating unnecessary interleaved selectors.\nmain.content .info\n  font-size: 0.8em\n```\n\n``` css\np.info {\n  background-color: #dee9fc;\n}\n\n.guide .info, .guide .content nav.sidebar, .content .guide nav.sidebar {\n  border: 1px solid rgba(0, 0, 0, 0.8);\n  border-radius: 2px;\n}\n\nmain.content .info, main.content nav.sidebar {\n  font-size: 0.8em;\n}\n```\n\n### 💡 Fun fact:\n\nYou can directly access Sass’s intelligent unification using [selector functions](../modules/selector)! The [`selector.unify()` function](../modules/selector#unify) returns a selector that matches the intersection of two selectors, while the [`selector.extend()` function](../modules/selector#extend) works just like `@extend`, but on a single selector.\n\n### ⚠️ Heads up!\n\nBecause `@extend` updates style rules that contain the extended selector, their styles have precedence in [the cascade](https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade) based on where the extended selector’s style rules appear, *not* based on where the `@extend` appears. This can be confusing, but just remember: this is the same precedence those rules would have if you added the extended class to your HTML!\n\n## Placeholder Selectors\n\nSometimes you want to write a style rule that’s *only* intended to be extended. In that case, you can use [placeholder selectors](../style-rules/placeholder-selectors), which look like class selectors that start with `%` instead of `.`. Any selectors that include placeholders aren’t included in the CSS output, but selectors that extend them are.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n- [CSS](#example-4-css)\n\n``` scss\n.alert:hover, %strong-alert {\n  font-weight: bold;\n}\n\n%strong-alert:hover {\n  color: red;\n}\n```\n\n``` scss\n.alert:hover, %strong-alert\n  font-weight: bold\n\n\n%strong-alert:hover \n  color: red\n```\n\n``` css\n.alert:hover {\n  font-weight: bold;\n}\n```\n\n### Private Placeholders\n\nLike [module members](use#private-members), a placeholder selector can be marked private by starting its name with either `-` or `_`. A private placeholder selector can only be extended within the stylesheet that defines it. To any other stylesheets, it will look as though that selector doesn’t exist.\n\n## Extension Scope\n\nWhen one stylesheet extends a selector, that extension will only affect style rules written in *upstream* modules—that is, modules that are loaded by that stylesheet using the [`@use` rule](use) or the [`@forward` rule](forward), modules loaded by *those* modules, and so on. This helps make your `@extend` rules more predictable, ensuring that they affect only the styles you were aware of when you wrote them.\n\n### ⚠️ Heads up!\n\nExtensions aren’t scoped at all if you’re using the [`@import` rule](import). Not only will they affect every stylesheet you import, they’ll affect every stylesheet that imports your stylesheet, everything else those stylesheets import, and so on. Without `@use`, extensions are *global*.\n\n## Mandatory and Optional Extends\n\nNormally, if an `@extend` doesn’t match any selectors in the stylesheet, Sass will produce an error. This helps protect from typos or from renaming a selector without renaming the selectors that inherit from it. Extends that require that the extended selector exists are *mandatory*.\n\nThis may not always be what you want, though. If you want the `@extend` to do nothing if the extended selector doesn’t exist, just add `!optional` to the end.\n\n## Extends or Mixins?\n\nExtends and [mixins](mixin) are both ways of encapsulating and re-using styles in Sass, which naturally raises the question of when to use which one. Mixins are obviously necessary when you need to configure the styles using [arguments](mixin#arguments), but what if they’re just a chunk of styles?\n\nAs a rule of thumb, extends are the best option when you’re expressing a relationship between semantic classes (or other semantic selectors). Because an element with class `.error--serious` *is an* error, it makes sense for it to extend `.error`. But for non-semantic collections of styles, writing a mixin can avoid cascade headaches and make it easier to configure down the line.\n\n### 💡 Fun fact:\n\nMost web servers compress the CSS they serve using an algorithm that’s very good at handling repeated chunks of identical text. This means that, although mixins may produce more CSS than extends, they probably won’t substantially increase the amount your users need to download. So choose the feature that makes the most sense for your use-case, not the one that generates the least CSS!\n\n## Limitations\n\n### Disallowed Selectors\n\nCompatibility (No Compound Extensions):\n\nDart Sass  \n✓\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nLibSass and Ruby Sass currently allow compound selectors like `.message.info` to be extended. However, this behavior doesn’t match the definition of `@extend`: instead of styling elements that match the extending selector as though it had `class=\"message info\"`, which would be affected by style rules that included either `.message` *or* `.info`, it only styled them with rules that included both `.message` *and* `info`.\n\nIn order to keep the definition of `@extend` straightforward and understandable, and to keep the implementation clean and efficient, that behavior is now deprecated and will be removed from future versions.\n\nSee [the breaking change page](https://sass-lang.com/documentation/breaking-changes/extend-compound) for more details.\n\nOnly *simple selectors*—individual selectors like `.info` or `a`—can be extended. If `.message.info` could be extended, the definition of `@extend` says that elements matching the extender would be styled as though they matched `.message.info`. That’s just the same as matching both `.message` and `.info`, so there wouldn’t be any benefit in writing that instead of `@extend .message, .info`.\n\nSimilarly, if `.main .info` could be extended, it would do (almost) the same thing as extending `.info` on its own. The subtle differences aren’t worth the confusion of looking like it’s doing something substantially different, so this isn’t allowed either.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n.alert {\n  @extend .message.info;\n  //      ^^^^^^^^^^^^^\n  // Error: Write @extend .message, .info instead.\n\n  @extend .main .info;\n  //      ^^^^^^^^^^^\n  // Error: write @extend .info instead.\n}\n```\n\n``` scss\n.alert\n  @extend .message.info\n  //      ^^^^^^^^^^^^^\n  // Error: Write @extend .message, .info instead.\n\n  @extend .main .info\n  //      ^^^^^^^^^^^\n  // Error: write @extend .info instead.\n```\n\n### HTML Heuristics\n\nWhen `@extend` [interleaves complex selectors](#how-it-works), it doesn’t generate all possible combinations of ancestor selectors. Many of the selectors it could generate are unlikely to actually match real HTML, and generating them all would make stylesheets way too big for very little real value. Instead, it uses a [heuristic](https://en.wikipedia.org/wiki/Heuristic): it assumes that each selector’s ancestors will be self-contained, without being interleaved with any other selector’s ancestors.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n- [CSS](#example-6-css)\n\n``` scss\nheader .warning li {\n  font-weight: bold;\n}\n\naside .notice dd {\n  // Sass doesn't generate CSS to match the <dd> in\n  //\n  // <header>\n  //   <aside>\n  //     <div class=\"warning\">\n  //       <div class=\"notice\">\n  //         <dd>...</dd>\n  //       </div>\n  //     </div>\n  //   </aside>\n  // </header>\n  //\n  // because matching all elements like that would require us to generate nine\n  // new selectors instead of just two.\n  @extend li;\n}\n```\n\n``` scss\nheader .warning li\n  font-weight: bold\n\n\naside .notice dd\n  // Sass doesn't generate CSS to match the <dd> in\n  //\n  // <header>\n  //   <aside>\n  //     <div class=\"warning\">\n  //       <div class=\"notice\">\n  //         <dd>...</dd>\n  //       </div>\n  //     </div>\n  //   </aside>\n  // </header>\n  //\n  // because matching all elements like that would require us to generate nine\n  // new selectors instead of just two.\n  @extend li\n```\n\n``` css\nheader .warning li, header .warning aside .notice dd, aside .notice header .warning dd {\n  font-weight: bold;\n}\n```\n\n### Extend in `@media`\n\nWhile `@extend` is allowed within [`@media` and other CSS at-rules](css), it’s not allowed to extend selectors that appear outside its at-rule. This is because the extending selector only applies within the given media context, and there’s no way to make sure that restriction is preserved in the generated selector without duplicating the entire style rule.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n\n``` scss\n@media screen and (max-width: 600px) {\n  .error--serious {\n    @extend .error;\n    //      ^^^^^^\n    // Error: \".error\" was extended in @media, but used outside it.\n  }\n}\n\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n```\n\n``` scss\n@media screen and (max-width: 600px)\n  .error--serious\n    @extend .error\n    //      ^^^^^^\n    // Error: \".error\" was extended in @media, but used outside it.\n\n\n\n.error\n  border: 1px #f00\n  background-color: #fdd\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/extend](https://sass-lang.com/documentation/at-rules/extend)"
- name: '@for'
  id: at-rules/control/for
  summary: The @for rule, written @for <variable> from <expression> to <expression> { ... } or @for <variable> from <expression> through <expression> { ... }, counts up or down from one number (the result of the first expression) to another (the result of the second) and evaluates a block for each number in between
  description: "# @for\n\nThe `@for` rule, written `@for <variable> from <expression> to <expression> { ... }` or `@for <variable> from <expression> through <expression> { ... }`, counts up or down from one number (the result of the first [expression](../../syntax/structure#expressions)) to another (the result of the second) and evaluates a block for each number in between. Each number along the way is assigned to the given variable name. If `to` is used, the final number is excluded; if `through` is used, it's included.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n$base-color: #036;\n\n@for $i from 1 through 3 {\n  ul:nth-child(3n + #{$i}) {\n    background-color: lighten($base-color, $i * 5%);\n  }\n}\n```\n\n``` scss\n$base-color: #036\n\n@for $i from 1 through 3\n  ul:nth-child(3n + #{$i})\n    background-color: lighten($base-color, $i * 5%)\n```\n\n``` css\nul:nth-child(3n + 1) {\n  background-color: #004080;\n}\n\nul:nth-child(3n + 2) {\n  background-color: #004d99;\n}\n\nul:nth-child(3n + 3) {\n  background-color: #0059b3;\n}\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/control/for](https://sass-lang.com/documentation/at-rules/control/for)"
- name: '@forward'
  id: at-rules/forward
  summary: The @forward rule loads a Sass stylesheet and makes its mixins, functions, and variables available when your stylesheet is loaded with the @use rule
  description: "# @forward\n\nThe `@forward` rule loads a Sass stylesheet and makes its [mixins](mixin), [functions](function), and [variables](../variables) available when your stylesheet is loaded with the [`@use` rule](use). It makes it possible to organize Sass libraries across many files, while allowing their users to load a single entrypoint file.\n\nThe rule is written `@forward \"<url>\"`. It loads the module at the given URL just like `@use`, but it makes the [public](use#private-members) members of the loaded module available to users of your module as though they were defined directly in your module. Those members aren’t available in your module, though—if you want that, you’ll need to write a `@use` rule as well. Don’t worry, it’ll only load the module once!\n\nIf you *do* write both a `@forward` and a `@use` for the same module in the same file, it’s always a good idea to write the `@forward` first. That way, if your users want to [configure the forwarded module](use#configuration), that configuration will be applied to the `@forward` before your `@use` loads it without any configuration.\n\n### 💡 Fun fact:\n\nThe `@forward` rule acts just like `@use` when it comes to a module’s CSS. Styles from a forwarded module will be included in the compiled CSS output, and the module with the `@forward` can [extend](extend) it, even if it isn’t also `@use`d.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n// src/_list.scss\n@mixin list-reset {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n```\n\n``` scss\n// bootstrap.scss\n@forward \"src/list\";\n```\n\n``` scss\n// styles.scss\n@use \"bootstrap\";\n\nli {\n  @include bootstrap.list-reset;\n}\n```\n\n``` scss\n// src/_list.sass\n@mixin list-reset\n  margin: 0\n  padding: 0\n  list-style: none\n```\n\n``` scss\n// bootstrap.sass\n@forward \"src/list\"\n```\n\n``` scss\n// styles.sass\n@use \"bootstrap\"\n\nli\n  @include bootstrap.list-reset\n```\n\n``` css\nli {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n```\n\n## Adding a Prefix\n\nBecause module members are usually used with [a namespace](use#loading-members), short and simple names are usually the most readable option. But those names might not make sense outside the module they’re defined in, so `@forward` has the option of adding an extra prefix to all the members it forwards.\n\nThis is written `@forward \"<url>\" as <prefix>-*`, and it adds the given prefix to the beginning of every mixin, function, and variable name forwarded by the module. For example, if the module defines a member named `reset` and it’s forwarded `as list-*`, downstream stylesheets will refer to it as `list-reset`.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n// src/_list.scss\n@mixin reset {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n```\n\n``` scss\n// bootstrap.scss\n@forward \"src/list\" as list-*;\n```\n\n``` scss\n// styles.scss\n@use \"bootstrap\";\n\nli {\n  @include bootstrap.list-reset;\n}\n```\n\n``` scss\n// src/_list.sass\n@mixin reset\n  margin: 0\n  padding: 0\n  list-style: none\n```\n\n``` scss\n// bootstrap.sass\n@forward \"src/list\" as list-*\n```\n\n``` scss\n// styles.sass\n@use \"bootstrap\"\n\nli\n  @include bootstrap.list-reset\n```\n\n``` css\nli {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n```\n\n## Controlling Visibility\n\nSometimes, you don’t want to forward *every* member from a module. You may want to keep some members private so that only your package can use them, or you may want to require your users to load some members a different way. You can control exactly which members get forwarded by writing `@forward \"<url>\" hide <members...>` or `@forward \"<url>\" show <members...>`.\n\nThe `hide` form means that the listed members shouldn’t be forwarded, but everything else should. The `show` form means that *only* the named members should be forwarded. In both forms, you list the names of mixins, functions, or variables (including the `$`).\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n// src/_list.scss\n$horizontal-list-gap: 2em;\n\n@mixin list-reset {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n@mixin list-horizontal {\n  @include list-reset;\n\n  li {\n    display: inline-block;\n    margin: {\n      left: -2px;\n      right: $horizontal-list-gap;\n    }\n  }\n}\n```\n\n``` scss\n// bootstrap.scss\n@forward \"src/list\" hide list-reset, $horizontal-list-gap;\n```\n\n``` scss\n// src/_list.sass\n$horizontal-list-gap: 2em\n\n@mixin list-reset\n  margin: 0\n  padding: 0\n  list-style: none\n\n\n@mixin list-horizontal\n  @include list-rest\n\n  li\n    display: inline-block\n    margin:\n      left: -2px\n      right: $horizontal-list-gap\n```\n\n``` scss\n// bootstrap.sass\n@forward \"src/list\" hide list-reset, $horizontal-list-gap\n```\n\n## Configuring Modules\n\nCompatibility:\n\nDart Sass  \nsince 1.24.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nThe `@forward` rule can also load a module with [configuration](use#configuration). This mostly works the same as it does for `@use`, with one addition: a `@forward` rule’s configuration can use the `!default` flag in its configuration. This allows a module to change the defaults of an upstream stylesheet while still allowing downstream stylesheets to override them.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n- [CSS](#example-4-css)\n\n``` scss\n// _library.scss\n$black: #000 !default;\n$border-radius: 0.25rem !default;\n$box-shadow: 0 0.5rem 1rem rgba($black, 0.15) !default;\n\ncode {\n  border-radius: $border-radius;\n  box-shadow: $box-shadow;\n}\n```\n\n``` scss\n// _opinionated.scss\n@forward 'library' with (\n  $black: #222 !default,\n  $border-radius: 0.1rem !default\n);\n```\n\n``` scss\n// style.scss\n@use 'opinionated' with ($black: #333);\n```\n\n``` scss\n// _library.sass\n$black: #000 !default\n$border-radius: 0.25rem !default\n$box-shadow: 0 0.5rem 1rem rgba($black, 0.15) !default\n\ncode\n  border-radius: $border-radius\n  box-shadow: $box-shadow\n```\n\n``` scss\n// _opinionated.sass\n@forward 'library' with ($black: #222 !default, $border-radius: 0.1rem !default)\n```\n\n``` scss\n// style.sass\n@use 'opinionated' with ($black: #333)\n```\n\n``` css\ncode {\n  border-radius: 0.1rem;\n  box-shadow: 0 0.5rem 1rem rgba(51, 51, 51, 0.15);\n}\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/forward](https://sass-lang.com/documentation/at-rules/forward)"
- name: '@function'
  id: at-rules/function
  summary: Functions allow you to define complex operations on SassScript values that you can re-use throughout your stylesheet
  description: "# @function\n\n### Page Sections\n\n- [Arguments](#arguments)\n  - [Overview](#arguments)\n  - [Optional Arguments](#optional-arguments)\n  - [Keyword Arguments](#keyword-arguments)\n  - [Taking Arbitrary Arguments](#taking-arbitrary-arguments)\n    - [Overview](#taking-arbitrary-arguments)\n    - [Taking Arbitrary Keyword Arguments](#taking-arbitrary-keyword-arguments)\n    - [Passing Arbitrary Arguments](#passing-arbitrary-arguments)\n- [`@return`](#return)\n- [Other Functions](#other-functions)\n  - [Overview](#other-functions)\n  - [Plain CSS Functions](#plain-css-functions)\n\nFunctions allow you to define complex operations on [SassScript values](../values) that you can re-use throughout your stylesheet. They make it easy to abstract out common formulas and behaviors in a readable way.\n\nFunctions are defined using the `@function` at-rule, which is written `@function <name>(<arguments...>) { ... }`. A function’s name can be any Sass identifier. It can only contain [universal statements](../syntax/structure#universal-statements), as well as the [`@return` at-rule](#return) which indicates the value to use as the result of the function call. Functions are called using the normal CSS function syntax.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n@function pow($base, $exponent) {\n  $result: 1;\n  @for $_ from 1 through $exponent {\n    $result: $result * $base;\n  }\n  @return $result;\n}\n\n.sidebar {\n  float: left;\n  margin-left: pow(4, 3) * 1px;\n}\n```\n\n``` scss\n@function pow($base, $exponent)\n  $result: 1\n  @for $_ from 1 through $exponent\n    $result: $result * $base\n\n  @return $result\n\n\n.sidebar\n  float: left\n  margin-left: pow(4, 3) * 1px\n```\n\n``` css\n.sidebar {\n  float: left;\n  margin-left: 64px;\n}\n```\n\n### 💡 Fun fact:\n\nFunction names, like all Sass identifiers, treat hyphens and underscores as identical. This means that `scale-color` and `scale_color` both refer to the same function. This is a historical holdover from the very early days of Sass, when it *only* allowed underscores in identifier names. Once Sass added support for hyphens to match CSS’s syntax, the two were made equivalent to make migration easier.\n\n### ⚠️ Heads up!\n\nWhile it’s technically possible for functions to have side-effects like setting [global variables](../variables#scope), this is strongly discouraged. Use [mixins](mixin) for side-effects, and use functions just to compute values.\n\n## Arguments\n\nArguments allow functions’ behavior to be customized each time they’re called. The arguments are specified in the `@function` rule after the function’s name, as a list of variable names surrounded by parentheses. The function must be called with the same number of arguments in the form of [SassScript expressions](../syntax/structure#expressions). The values of these expression are available within the function’s body as the corresponding variables.\n\n### 💡 Fun fact:\n\nArgument lists can also have trailing commas! This makes it easier to avoid syntax errors when refactoring your stylesheets.\n\n### Optional Arguments\n\nNormally, every argument a function declares must be passed when that function is included. However, you can make an argument optional by defining a *default value* which will be used if that arguments isn’t passed. Default values use the same syntax as [variable declarations](../variables): the variable name, followed by a colon and a [SassScript expression](../syntax/structure#expressions). This makes it easy to define flexible function APIs that can be used in simple or complex ways.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n@function invert($color, $amount: 100%) {\n  $inverse: change-color($color, $hue: hue($color) + 180);\n  @return mix($inverse, $color, $amount);\n}\n\n$primary-color: #036;\n.header {\n  background-color: invert($primary-color, 80%);\n}\n```\n\n``` scss\n@function invert($color, $amount: 100%)\n  $inverse: change-color($color, $hue: hue($color) + 180)\n  @return mix($inverse, $color, $amount)\n\n\n$primary-color: #036\n.header\n  background-color: invert($primary-color, 80%)\n```\n\n``` css\n.header {\n  background-color: #523314;\n}\n```\n\n### 💡 Fun fact:\n\nDefault values can be any SassScript expression, and they can even refer to earlier arguments!\n\n### Keyword Arguments\n\nWhen a function is called, arguments can be passed by name in addition to passing them by their position in the argument list. This is especially useful for functions with multiple optional arguments, or with [boolean](../values/booleans) arguments whose meanings aren’t obvious without a name to go with them. Keyword arguments use the same syntax as [variable declarations](../variables) and [optional arguments](#optional-arguments).\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n$primary-color: #036;\n.banner {\n  background-color: $primary-color;\n  color: scale-color($primary-color, $lightness: +40%);\n}\n```\n\n``` scss\n$primary-color: #036\n.banner\n  background-color: $primary-color\n  color: scale-color($primary-color, $lightness: +40%)\n```\n\n``` css\n.banner {\n  background-color: #036;\n  color: #0a85ff;\n}\n```\n\n### ⚠️ Heads up!\n\nBecause *any* argument can be passed by name, be careful when renaming a function’s arguments… it might break your users! It can be helpful to keep the old name around as an [optional argument](#optional-arguments) for a while and printing a [warning](warn) if anyone passes it, so they know to migrate to the new argument.\n\n### Taking Arbitrary Arguments\n\nSometimes it’s useful for a function to be able to take any number of arguments. If the last argument in a `@function` declaration ends in `...`, then all extra arguments to that function are passed to that argument as a [list](../values/lists). This argument is known as an [argument list](../values/lists#argument-lists).\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n- [CSS](#example-4-css)\n\n``` scss\n@function sum($numbers...) {\n  $sum: 0;\n  @each $number in $numbers {\n    $sum: $sum + $number;\n  }\n  @return $sum;\n}\n\n.micro {\n  width: sum(50px, 30px, 100px);\n}\n```\n\n``` scss\n@function sum($numbers...)\n  $sum: 0\n  @each $number in $numbers\n    $sum: $sum + $number\n\n  @return $sum\n\n\n.micro\n  width: sum(50px, 30px, 100px)\n```\n\n``` css\n.micro {\n  width: 180px;\n}\n```\n\n#### Taking Arbitrary Keyword Arguments\n\nArgument lists can also be used to take arbitrary keyword arguments. The [`meta.keywords()` function](../modules/meta#keywords) takes an argument list and returns any extra keywords that were passed to the function as a [map](../values/maps) from argument names (not including `$`) to those arguments’ values.\n\n### 💡 Fun fact:\n\nIf you don’t ever pass an argument list to the [`meta.keywords()` function](../modules/meta#keywords), that argument list won’t allow extra keyword arguments. This helps callers of your function make sure they haven’t accidentally misspelled any argument names.\n\n#### Passing Arbitrary Arguments\n\nJust like argument lists allow functions to take arbitrary positional or keyword arguments, the same syntax can be used to *pass* positional and keyword arguments to a function. If you pass a list followed by `...` as the last argument of a function call, its elements will be treated as additional positional arguments. Similarly, a map followed by `...` will be treated as additional keyword arguments. You can even pass both at once!\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n- [CSS](#example-5-css)\n\n``` scss\n$widths: 50px, 30px, 100px;\n.micro {\n  width: min($widths...);\n}\n```\n\n``` scss\n$widths: 50px, 30px, 100px\n.micro\n  width: min($widths...)\n```\n\n``` css\n.micro {\n  width: 30px;\n}\n```\n\n### 💡 Fun fact:\n\nBecause an [argument list](../values/lists#argument-lists) keeps track of both positional and keyword arguments, you use it to pass both at once to another function. That makes it super easy to define an alias for a function!\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@function fg($args...) {\n  @warn \"The fg() function is deprecated. Call foreground() instead.\";\n  @return foreground($args...);\n}\n```\n\n``` scss\n@function fg($args...)\n  @warn \"The fg() function is deprecated. Call foreground() instead.\"\n  @return foreground($args...)\n```\n\n## `@return`\n\nThe `@return` at-rule indicates the value to use as the result of calling a function. It’s only allowed within a `@function` body, and each `@function` must end with a `@return`.\n\nWhen a `@return` is encountered, it immediately ends the function and returns its result. Returning early can be useful for handling edge-cases or cases where a more efficient algorithm is available without wrapping the entire function in an [`@else` block](control/if#else).\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n\n``` scss\n@use \"sass:string\";\n\n@function str-insert($string, $insert, $index) {\n  // Avoid making new strings if we don't need to.\n  @if string.length($string) == 0 {\n    @return $insert;\n  }\n\n  $before: string.slice($string, 0, $index);\n  $after: string.slice($string, $index);\n  @return $before + $insert + $after;\n}\n```\n\n``` scss\n@use \"sass:string\"\n\n@function str-insert($string, $insert, $index)\n  // Avoid making new strings if we don't need to.\n  @if string.length($string) == 0\n    @return $insert\n\n\n  $before: string.slice($string, 0, $index)\n  $after: string.slice($string, $index)\n  @return $before + $insert + $after\n```\n\n## Other Functions\n\nIn addition to user-defined function, Sass provides a substantial [core library](../modules) of built-in functions that are always available to use. Sass implementations also make it possible to define [custom functions](../js-api/interfaces/legacysharedoptions#functions) in the host language. And of course, you can always call [plain CSS functions](#plain-css-functions) (even ones with [weird syntax](../syntax/special-functions)).\n\n### Plain CSS Functions\n\nAny function call that’s not either a user-defined or [built-in](../modules) function is compiled to a plain CSS function (unless it uses [Sass argument syntax](function#arguments)). The arguments will be compiled to CSS and included as-is in the function call. This ensures that Sass supports all CSS functions without needing to release new versions every time a new one is added.\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n\n``` scss\n@debug var(--main-bg-color); // var(--main-bg-color)\n\n$primary: #f2ece4;\n$accent: #e1d7d2;\n@debug radial-gradient($primary, $accent); // radial-gradient(#f2ece4, #e1d7d2)\n```\n\n``` scss\n@debug var(--main-bg-color)  // var(--main-bg-color)\n\n$primary: #f2ece4\n$accent: #e1d7d2\n@debug radial-gradient($primary, $accent)  // radial-gradient(#f2ece4, #e1d7d2)\n```\n\n### ⚠️ Heads up!\n\nBecause any unknown function will be compiled to CSS, it’s easy to miss when you typo a function name. Consider running a [CSS linter](https://stylelint.io/) on your stylesheet’s output to be notified when this happens!\n\n### 💡 Fun fact:\n\nSome CSS functions, like `calc()` and `element()` have unusual syntax. Sass [parses these functions specially](../syntax/special-functions) as [unquoted strings](../values/strings#unquoted).\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/function](https://sass-lang.com/documentation/at-rules/function)"
- name: '@if and @else'
  id: at-rules/control/if
  summary: The @if rule is written @if <expression> { ... }, and it controls whether or not its block gets evaluated (including emitting any styles as CSS)
  description: "# @if and @else\n\n### Page Sections\n\n- [`@else`](#else)\n  - [Overview](#else)\n  - [`@else if`](#else-if)\n- [Truthiness and Falsiness](#truthiness-and-falsiness)\n\nThe `@if` rule is written `@if <expression> { ... }`, and it controls whether or not its block gets evaluated (including emitting any styles as CSS). The [expression](../../syntax/structure#expressions) usually returns either [`true` or `false`](../../values/booleans)—if the expression returns `true`, the block is evaluated, and if the expression returns `false` it’s not.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n@mixin avatar($size, $circle: false) {\n  width: $size;\n  height: $size;\n\n  @if $circle {\n    border-radius: $size / 2;\n  }\n}\n\n.square-av {\n  @include avatar(100px, $circle: false);\n}\n.circle-av {\n  @include avatar(100px, $circle: true);\n}\n```\n\n``` scss\n@mixin avatar($size, $circle: false)\n  width: $size\n  height: $size\n\n  @if $circle\n    border-radius: $size / 2\n\n.square-av\n  @include avatar(100px, $circle: false)\n.circle-av\n  @include avatar(100px, $circle: true)\n```\n\n``` css\n.square-av {\n  width: 100px;\n  height: 100px;\n}\n\n.circle-av {\n  width: 100px;\n  height: 100px;\n  border-radius: 50px;\n}\n```\n\n## `@else`\n\nAn `@if` rule can optionally be followed by an `@else` rule, written `@else { ... }`. This rule’s block is evaluated if the `@if` expression returns `false`.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n$light-background: #f2ece4;\n$light-text: #036;\n$dark-background: #6b717f;\n$dark-text: #d2e1dd;\n\n@mixin theme-colors($light-theme: true) {\n  @if $light-theme {\n    background-color: $light-background;\n    color: $light-text;\n  } @else {\n    background-color: $dark-background;\n    color: $dark-text;\n  }\n}\n\n.banner {\n  @include theme-colors($light-theme: true);\n  body.dark & {\n    @include theme-colors($light-theme: false);\n  }\n}\n```\n\n``` scss\n$light-background: #f2ece4\n$light-text: #036\n$dark-background: #6b717f\n$dark-text: #d2e1dd\n\n@mixin theme-colors($light-theme: true)\n  @if $light-theme\n    background-color: $light-background\n    color: $light-text\n  @else\n    background-color: $dark-background\n    color: $dark-text\n\n\n\n.banner\n  @include theme-colors($light-theme: true)\n  body.dark &\n    @include theme-colors($light-theme: false)\n```\n\n``` css\n.banner {\n  background-color: #f2ece4;\n  color: #036;\n}\nbody.dark .banner {\n  background-color: #6b717f;\n  color: #d2e1dd;\n}\n```\n\nConditional expressions may contain [boolean operators](../../operators/boolean) (`and`, `or`, `not`).\n\n### `@else if`\n\nYou can also choose whether to evaluate an `@else` rule’s block by writing it `@else if <expression> { ... }`. If you do, the block is evaluated only if the preceding `@if`‘s expression returns `false` *and* the `@else if`’s expression returns `true`.\n\nIn fact, you can chain as many `@else if`s as you want after an `@if`. The first block in the chain whose expression returns `true` will be evaluated, and no others. If there’s a plain `@else` at the end of the chain, its block will be evaluated if every other block fails.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n@use \"sass:math\";\n\n@mixin triangle($size, $color, $direction) {\n  height: 0;\n  width: 0;\n\n  border-color: transparent;\n  border-style: solid;\n  border-width: math.div($size, 2);\n\n  @if $direction == up {\n    border-bottom-color: $color;\n  } @else if $direction == right {\n    border-left-color: $color;\n  } @else if $direction == down {\n    border-top-color: $color;\n  } @else if $direction == left {\n    border-right-color: $color;\n  } @else {\n    @error \"Unknown direction #{$direction}.\";\n  }\n}\n\n.next {\n  @include triangle(5px, black, right);\n}\n```\n\n``` scss\n@use \"sass:math\"\n\n@mixin triangle($size, $color, $direction)\n  height: 0\n  width: 0\n\n  border-color: transparent\n  border-style: solid\n  border-width: math.div($size, 2)\n\n  @if $direction == up\n    border-bottom-color: $color\n  @else if $direction == right\n    border-left-color: $color\n  @else if $direction == down\n    border-top-color: $color\n  @else if $direction == left\n    border-right-color: $color\n  @else\n    @error \"Unknown direction #{$direction}.\"\n\n\n\n.next\n  @include triangle(5px, black, right)\n```\n\n``` css\n.next {\n  height: 0;\n  width: 0;\n  border-color: transparent;\n  border-style: solid;\n  border-width: 2.5px;\n  border-left-color: black;\n}\n```\n\n## Truthiness and Falsiness\n\nAnywhere `true` or `false` are allowed, you can use other values as well. The values `false` and [`null`](../../values/null) are *falsey*, which means Sass considers them to indicate falsehood and cause conditions to fail. Every other value is considered *truthy*, so Sass considers them to work like `true` and cause conditions to succeed.\n\nFor example, if you want to check if a string contains a space, you can just write `string.index($string, \" \")`. The [`string.index()` function](../../modules/string#index) returns `null` if the string isn’t found and a number otherwise.\n\n### ⚠️ Heads up!\n\nSome languages consider more values falsey than just `false` and `null`. Sass isn’t one of those languages! Empty strings, empty lists, and the number `0` are all truthy in Sass.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/control/if](https://sass-lang.com/documentation/at-rules/control/if)"
- name: '@import'
  id: at-rules/import
  summary: Sass extends CSS's @import rule with the ability to import Sass and CSS stylesheets, providing access to mixins, functions, and variables and combining multiple stylesheets' CSS together
  description: "# @import\n\n### Page Sections\n\n- [Finding the File](#finding-the-file)\n  - [Overview](#finding-the-file)\n  - [Load Paths](#load-paths)\n  - [Partials](#partials)\n  - [Index Files](#index-files)\n  - [Custom Importers](#custom-importers)\n- [Nesting](#nesting)\n- [Importing CSS](#importing-css)\n- [Plain CSS `@import`s](#plain-css-imports)\n  - [Overview](#plain-css-imports)\n  - [Interpolation](#interpolation)\n- [Import and Modules](#import-and-modules)\n  - [Overview](#import-and-modules)\n  - [Importing a Module-System File](#importing-a-module-system-file)\n    - [Overview](#importing-a-module-system-file)\n    - [Import-Only Files](#import-only-files)\n    - [Configuring Modules Through Imports](#configuring-modules-through-imports)\n  - [Loading a Module That Contains Imports](#loading-a-module-that-contains-imports)\n\nSass extends CSS's [`@import` rule](https://developer.mozilla.org/en-US/docs/Web/CSS/@import) with the ability to import Sass and CSS stylesheets, providing access to [mixins](mixin), [functions](function), and [variables](../variables) and combining multiple stylesheets' CSS together. Unlike plain CSS imports, which require the browser to make multiple HTTP requests as it renders your page, Sass imports are handled entirely during compilation.\n\nSass imports have the same syntax as CSS imports, except that they allow multiple imports to be separated by commas rather than requiring each one to have its own `@import`. Also, in the [indented syntax](../syntax#the-indented-syntax), imported URLs aren’t required to have quotes.\n\n### ⚠️ Heads up!\n\nThe Sass team discourages the continued use of the `@import` rule. Sass will [gradually phase it out](https://github.com/sass/sass/blob/master/accepted/module-system.md#timeline) over the next few years, and eventually remove it from the language entirely. Prefer the [`@use` rule](use) instead. (Note that only Dart Sass currently supports `@use`. Users of other implementations must use the `@import` rule instead.)\n\n#### What’s Wrong With `@import`?\n\nThe `@import` rule has a number of serious issues:\n\n- `@import` makes all variables, mixins, and functions globally accessible. This makes it very difficult for people (or tools) to tell where anything is defined.\n\n- Because everything’s global, libraries must prefix to all their members to avoid naming collisions.\n\n- [`@extend` rules](extend) are also global, which makes it difficult to predict which style rules will be extended.\n\n- Each stylesheet is executed and its CSS emitted *every time* it’s `@import`ed, which increases compilation time and produces bloated output.\n\n- There was no way to define private members or placeholder selectors that were inaccessible to downstream stylesheets.\n\nThe new module system and the `@use` rule address all these problems.\n\n#### How Do I Migrate?\n\nWe’ve written a [migration tool](../cli/migrator) that automatically converts most `@import`-based code to `@use`-based code in a flash. Just point it at your entrypoints and let it run!\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n// foundation/_code.scss\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\n``` scss\n// foundation/_lists.scss\nul, ol {\n  text-align: left;\n\n  & & {\n    padding: {\n      bottom: 0;\n      left: 0;\n    }\n  }\n}\n```\n\n``` scss\n// style.scss\n@import 'foundation/code', 'foundation/lists';\n```\n\n``` scss\n// foundation/_code.sass\ncode\n  padding: .25em\n  line-height: 0\n```\n\n``` scss\n// foundation/_lists.sass\nul, ol\n  text-align: left\n\n  & &\n    padding:\n      bottom: 0\n      left: 0\n```\n\n``` scss\n// style.sass\n@import foundation/code, foundation/lists\n```\n\n``` css\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n\nul, ol {\n  text-align: left;\n}\nul ul, ol ol {\n  padding-bottom: 0;\n  padding-left: 0;\n}\n```\n\nWhen Sass imports a file, that file is evaluated as though its contents appeared directly in place of the `@import`. Any [mixins](mixin), [functions](function), and [variables](../variables) from the imported file are made available, and all its CSS is included at the exact point where the `@import` was written. What’s more, any mixins, functions, or variables that were defined before the `@import` (including from other `@import`s) are available in the imported stylesheet.\n\n### ⚠️ Heads up!\n\nIf the same stylesheet is imported more than once, it will be evaluated again each time. If it just defines functions and mixins, this usually isn’t a big deal, but if it contains style rules they’ll be compiled to CSS more than once.\n\n## Finding the File\n\nIt wouldn’t be any fun to write out absolute URLs for every stylesheet you import, so Sass’s algorithm for finding a file to import makes it a little easier. For starters, you don’t have to explicitly write out the extension of the file you want to import; `@import \"variables\"` will automatically load `variables.scss`, `variables.sass`, or `variables.css`.\n\n### ⚠️ Heads up!\n\nTo ensure that stylesheets work on every operating system, Sass imports files by *URL*, not by *file path*. This means you need to use forward slashes, not backslashes, even when you’re on Windows.\n\n### Load Paths\n\nAll Sass implementations allow users to provide *load paths*: paths on the filesystem that Sass will look in when resolving imports. For example, if you pass `node_modules/susy/sass` as a load path, you can use `@import \"susy\"` to load `node_modules/susy/sass/susy.scss`.\n\nImports will always be resolved relative to the current file first, though. Load paths will only be used if no relative file exists that matches the import. This ensures that you can’t accidentally mess up your relative imports when you add a new library.\n\n### 💡 Fun fact:\n\nUnlike some other languages, Sass doesn’t require that you use `./` for relative imports. Relative imports are always available.\n\n### Partials\n\nAs a convention, Sass files that are only meant to be imported, not compiled on their own, begin with `_` (as in `_code.scss`). These are called *partials*, and they tell Sass tools not to try to compile those files on their own. You can leave off the `_` when importing a partial.\n\n### Index Files\n\nCompatibility:\n\nDart Sass  \n✓\n\nLibSass  \nsince 3.6.0\n\nRuby Sass  \nsince 3.6.0\n\nIf you write an `_index.scss` or `_index.sass` in a folder, when the folder itself is imported that file will be loaded in its place.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n// foundation/_code.scss\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\n``` scss\n// foundation/_lists.scss\nul, ol {\n  text-align: left;\n\n  & & {\n    padding: {\n      bottom: 0;\n      left: 0;\n    }\n  }\n}\n```\n\n``` scss\n// foundation/_index.scss\n@import 'code', 'lists';\n```\n\n``` scss\n// style.scss\n@import 'foundation';\n```\n\n``` scss\n// foundation/_code.sass\ncode\n  padding: .25em\n  line-height: 0\n```\n\n``` scss\n// foundation/_lists.sass\nul, ol\n  text-align: left\n\n  & &\n    padding:\n      bottom: 0\n      left: 0\n```\n\n``` scss\n// foundation/_index.sass\n@import code, lists\n```\n\n``` scss\n// style.sass\n@import foundation\n```\n\n``` css\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n\nul, ol {\n  text-align: left;\n}\nul ul, ol ol {\n  padding-bottom: 0;\n  padding-left: 0;\n}\n```\n\n### Custom Importers\n\nAll Sass implementations provide a way to define custom importers, which control how `@import`s locate stylesheets:\n\n- [Node Sass](https://npmjs.com/package/node-sass) and [Dart Sass on npm](https://npmjs.com/package/sass) provide an [`importer` option](https://github.com/sass/node-sass#importer--v200---experimental) as part of their JS API.\n\n- [Dart Sass on pub](https://pub.dartlang.org/packages/sass) provides an abstract [`Importer` class](https://pub.dartlang.org/documentation/sass/latest/sass/Importer-class.html) that can be extended by a custom importer.\n\n- [Ruby Sass](https://sass-lang.com/ruby-sass) provides an abstract [`Importers::Base` class](https://www.rubydoc.info/gems/sass/Sass/Importers/Base) that can be extended by a custom importer.\n\n## Nesting\n\nImports are usually written at the top level of a stylesheet, but they don’t have to be. They can nested within [style rules](../style-rules) or [plain CSS at-rules](css) as well. The imported CSS is nested in that context, which makes nested imports useful for scoping a chunk of CSS to a particular element or media query. Note that top-level [mixins](mixin), [functions](function), and [variables](../variables) defined in the nested import are still defined globally, though.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n// _theme.scss\npre, code {\n  font-family: 'Source Code Pro', Helvetica, Arial;\n  border-radius: 4px;\n}\n```\n\n``` scss\n// style.scss\n.theme-sample {\n  @import \"theme\";\n}\n```\n\n``` scss\n// _theme.sass\npre, code\n  font-family: 'Source Code Pro', Helvetica, Arial\n  border-radius: 4px\n```\n\n``` scss\n// style.sass\n.theme-sample\n  @import theme\n```\n\n``` css\n.theme-sample pre, .theme-sample code {\n  font-family: 'Source Code Pro', Helvetica, Arial;\n  border-radius: 4px;\n}\n```\n\n### 💡 Fun fact:\n\nNested imports are very useful for scoping third-party stylesheets, but if you’re the author of the stylesheet you’re importing, it’s usually a better idea to write your styles in a [mixin](mixin) and include that mixin in the nested context. A mixin can be used in more flexible ways, and it’s clearer when looking at the imported stylesheet how it’s intended to be used.\n\n### ⚠️ Heads up!\n\nThe CSS in nested imports is evaluated like a mixin, which means that any [parent selectors](../style-rules/parent-selector) will refer to the selector in which the stylesheet is nested.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n- [CSS](#example-4-css)\n\n``` scss\n// _theme.scss\nul li {\n  $padding: 16px;\n  padding-left: $padding;\n  [dir=rtl] & {\n    padding: {\n      left: 0;\n      right: $padding;\n    }\n  }\n}\n```\n\n``` scss\n// style.scss\n.theme-sample {\n  @import \"theme\";\n}\n```\n\n``` scss\n// _theme.sass\nul li\n  $padding: 16px\n  padding-left: $padding\n  [dir=rtl] &\n    padding:\n      left: 0\n      right: $padding\n```\n\n``` scss\n// style.sass\n.theme-sample\n  @import theme\n```\n\n``` css\n.theme-sample ul li {\n  padding-left: 16px;\n}\n[dir=rtl] .theme-sample ul li {\n  padding-left: 0;\n  padding-right: 16px;\n}\n```\n\n## Importing CSS\n\nCompatibility:\n\nDart Sass  \nsince 1.11.0\n\nLibSass  \npartial\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nLibSass supports importing files with the extension `.css`, but contrary to the specification they’re treated as SCSS files rather than being parsed as CSS. This behavior has been deprecated, and an update is in the works to support the behavior described below.\n\nIn addition to importing `.sass` and `.scss` files, Sass can import plain old `.css` files. The only rule is that the import *must not* explicitly include the `.css` extension, because that’s used to indicate a [plain CSS `@import`](#plain-css-imports).\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n- [CSS](#example-5-css)\n\n``` scss\n// code.css\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\n``` scss\n// style.scss\n@import 'code';\n```\n\n``` scss\n// code.css\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\n``` scss\n// style.sass\n@import code\n```\n\n``` css\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\nCSS files imported by Sass don’t allow any special Sass features. In order to make sure authors don’t accidentally write Sass in their CSS, all Sass features that aren’t also valid CSS will produce errors. Otherwise, the CSS will be rendered as-is. It can even be [extended](extend)!\n\n## Plain CSS `@import`s\n\nCompatibility:\n\nDart Sass  \n✓\n\nLibSass  \npartial\n\nRuby Sass  \n✓\n\n[▶](javascript:;)\n\nBy default, LibSass handles plain CSS imports correctly. However, any [custom importers](../js-api/interfaces/legacysharedoptions#importer) will incorrectly apply to plain-CSS `@import` rules, making it possible for those rules to load Sass files.\n\nBecause `@import` is also defined in CSS, Sass needs a way of compiling plain CSS `@import`s without trying to import the files at compile time. To accomplish this, and to ensure SCSS is as much of a superset of CSS as possible, Sass will compile any `@import`s with the following characteristics to plain CSS imports:\n\n- Imports where the URL ends with `.css`.\n- Imports where the URL begins `http://` or `https://`.\n- Imports where the URL is written as a `url()`.\n- Imports that have media queries.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n- [CSS](#example-6-css)\n\n``` scss\n@import \"theme.css\";\n@import \"http://fonts.googleapis.com/css?family=Droid+Sans\";\n@import url(theme);\n@import \"landscape\" screen and (orientation: landscape);\n```\n\n``` scss\n@import \"theme.css\"\n@import \"http://fonts.googleapis.com/css?family=Droid+Sans\"\n@import url(theme)\n@import \"landscape\" screen and (orientation: landscape)\n```\n\n``` css\n@import url(theme.css);\n@import \"http://fonts.googleapis.com/css?family=Droid+Sans\";\n@import url(theme);\n@import \"landscape\" screen and (orientation: landscape);\n```\n\n### Interpolation\n\nAlthough Sass imports can’t use [interpolation](../interpolation) (to make sure it’s always possible to tell where [mixins](mixin), [functions](function), and [variables](../variables) come from), plain CSS imports can. This makes it possible to dynamically generate imports, for example based on mixin parameters.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n- [CSS](#example-7-css)\n\n``` scss\n@mixin google-font($family) {\n  @import url(\"http://fonts.googleapis.com/css?family=#{$family}\");\n}\n\n@include google-font(\"Droid Sans\");\n```\n\n``` scss\n@mixin google-font($family)\n  @import url(\"http://fonts.googleapis.com/css?family=#{$family}\")\n\n\n@include google-font(\"Droid Sans\")\n```\n\n``` css\n@import url(\"http://fonts.googleapis.com/css?family=Droid Sans\");\n```\n\n## Import and Modules\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports `@use`. Users of other implementations must use the [`@import` rule](import) instead.\n\nSass’s [module system](use) integrates seamlessly with `@import`, whether you’re importing a file that contains `@use` rules or loading a file that contains imports as a module. We want to make the transition from `@import` to `@use` as smooth as possible.\n\n### Importing a Module-System File\n\nWhen you import a file that contains `@use` rules, the importing file has access to all members (even private members) defined directly in that file, but *not* any members from modules that file has loaded. However, if that file contains [`@forward` rules](forward), the importing file will have access to forwarded members. This means that you can import a library that was written to be used with the module system.\n\n### ⚠️ Heads up!\n\nWhen a file with `@use` rules is imported, all the CSS transitively loaded by those is included in the resulting stylesheet, even if it’s already been included by another import. If you’re not careful, this can result in bloated CSS output!\n\n#### Import-Only Files\n\nAn API that makes sense for `@use` might not make sense for `@import`. For example, `@use` adds a namespace to all members by default so you can safely use short names, but `@import` doesn’t so you might need something longer. If you’re a library author, you may be concerned that if you update your library to use the new module system, your existing `@import`-based users will break.\n\nTo make this easier, Sass also supports *import-only files*. If you name a file `<name>.import.scss`, it will only be loaded for imports, not for `@use`s. This way, you can retain compatibility for `@import` users while still providing a nice API for users of the new module system.\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n\n``` scss\n// _reset.scss\n\n// Module system users write `@include reset.list()`.\n@mixin list() {\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n}\n```\n\n``` scss\n// _reset.import.scss\n\n// Legacy import users can keep writing `@include reset-list()`.\n@forward \"reset\" as reset-*;\n```\n\n``` scss\n// _reset.sass\n\n// Module system users write `@include reset.list()`.\n@mixin list()\n  ul\n    margin: 0\n    padding: 0\n    list-style: none\n```\n\n``` scss\n// _reset.import.sass\n\n// Legacy import users can keep writing `@include reset-list()`.\n@forward \"reset\" as reset-*\n```\n\n#### Configuring Modules Through Imports\n\nCompatibility:\n\nDart Sass  \nsince 1.24.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nYou can [configure modules](use#configuration) that are loaded through an `@import` by defining global variables prior the `@import` that first loads that module.\n\n- [SCSS](#example-9-scss)\n- [Sass](#example-9-sass)\n- [CSS](#example-9-css)\n\n``` scss\n// _library.scss\n$color: blue !default;\n\na {\n  color: $color;\n}\n```\n\n``` scss\n// _library.import.scss\n@forward 'library' as lib-*;\n```\n\n``` scss\n// style.sass\n$lib-color: green;\n@import \"library\";\n```\n\n``` scss\n$color: blue !default\n\na\n  color: $color\n```\n\n``` scss\n// _library.import.sass\n@forward 'library' as lib-*\n```\n\n``` scss\n// style.sass\n$lib-color: green\n@import \"library\"\n```\n\n``` css\na {\n  color: green;\n}\n```\n\n### ⚠️ Heads up!\n\nModules are only loaded once, so if you change the configuration after you `@import` a module for the first time (even indirectly), the change will be ignored if you `@import` the module again.\n\n### Loading a Module That Contains Imports\n\nWhen you use `@use` (or `@forward`) load a module that uses `@import`, that module will contain all the public members defined by the stylesheet you load *and* everything that stylesheet transitively imports. In other words, everything that’s imported is treated as though it were written in one big stylesheet.\n\nThis makes it easy to convert start using `@use` in a stylesheet even before all the libraries you depend on have converted to the new module system. Be aware, though, that if they do convert their APIs may well change!\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/import](https://sass-lang.com/documentation/at-rules/import)"
- name: '@mixin and @include'
  id: at-rules/mixin
  summary: Mixins allow you to define styles that can be re-used throughout your stylesheet
  description: "# @mixin and @include\n\n### Page Sections\n\n- [Arguments](#arguments)\n  - [Overview](#arguments)\n  - [Optional Arguments](#optional-arguments)\n  - [Keyword Arguments](#keyword-arguments)\n  - [Taking Arbitrary Arguments](#taking-arbitrary-arguments)\n    - [Overview](#taking-arbitrary-arguments)\n    - [Taking Arbitrary Keyword Arguments](#taking-arbitrary-keyword-arguments)\n    - [Passing Arbitrary Arguments](#passing-arbitrary-arguments)\n- [Content Blocks](#content-blocks)\n  - [Overview](#content-blocks)\n  - [Passing Arguments to Content Blocks](#passing-arguments-to-content-blocks)\n- [Indented Mixin Syntax](#indented-mixin-syntax)\n\nMixins allow you to define styles that can be re-used throughout your stylesheet. They make it easy to avoid using non-semantic classes like `.float-left`, and to distribute collections of styles in libraries.\n\nMixins are defined using the `@mixin` at-rule, which is written `@mixin <name> { ... }` or `@mixin name(<arguments...>) { ... }`. A mixin’s name can be any Sass identifier, and it can contain any [statement](../syntax/structure#statements) other than [top-level statements](../syntax/structure#top-level-statements). They can be used to encapsulate styles that can be dropped into a single [style rule](../style-rules); they can contain style rules of their own that can be nested in other rules or included at the top level of the stylesheet; or they can just serve to modify variables.\n\nMixins are included into the current context using the `@include` at-rule, which is written `@include <name>` or `@include <name>(<arguments...>)`, with the name of the mixin being included.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n@mixin reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n@mixin horizontal-list {\n  @include reset-list;\n\n  li {\n    display: inline-block;\n    margin: {\n      left: -2px;\n      right: 2em;\n    }\n  }\n}\n\nnav ul {\n  @include horizontal-list;\n}\n```\n\n``` scss\n@mixin reset-list\n  margin: 0\n  padding: 0\n  list-style: none\n\n\n@mixin horizontal-list\n  @include reset-list\n\n  li\n    display: inline-block\n    margin:\n      left: -2px\n      right: 2em\n\n\n\n\nnav ul\n  @include horizontal-list\n```\n\n``` css\nnav ul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\nnav ul li {\n  display: inline-block;\n  margin-left: -2px;\n  margin-right: 2em;\n}\n```\n\n### 💡 Fun fact:\n\nMixin names, like all Sass identifiers, treat hyphens and underscores as identical. This means that `reset-list` and `reset_list` both refer to the same mixin. This is a historical holdover from the very early days of Sass, when it *only* allowed underscores in identifier names. Once Sass added support for hyphens to match CSS’s syntax, the two were made equivalent to make migration easier.\n\n## Arguments\n\nMixins can also take arguments, which allows their behavior to be customized each time they’re called. The arguments are specified in the `@mixin` rule after the mixin’s name, as a list of variable names surrounded by parentheses. The mixin must then be included with the same number of arguments in the form of [SassScript expressions](../syntax/structure#expressions). The values of these expression are available within the mixin’s body as the corresponding variables.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n@mixin rtl($property, $ltr-value, $rtl-value) {\n  #{$property}: $ltr-value;\n\n  [dir=rtl] & {\n    #{$property}: $rtl-value;\n  }\n}\n\n.sidebar {\n  @include rtl(float, left, right);\n}\n```\n\n``` scss\n@mixin rtl($property, $ltr-value, $rtl-value)\n  #{$property}: $ltr-value\n\n  [dir=rtl] &\n    #{$property}: $rtl-value\n\n\n\n.sidebar\n  @include rtl(float, left, right)\n```\n\n``` css\n.sidebar {\n  float: left;\n}\n[dir=rtl] .sidebar {\n  float: right;\n}\n```\n\n### 💡 Fun fact:\n\nArgument lists can also have trailing commas! This makes it easier to avoid syntax errors when refactoring your stylesheets.\n\n### Optional Arguments\n\nNormally, every argument a mixin declares must be passed when that mixin is included. However, you can make an argument optional by defining a *default value* which will be used if that argument isn’t passed. Default values use the same syntax as [variable declarations](../variables): the variable name, followed by a colon and a [SassScript expression](../syntax/structure#expressions). This makes it easy to define flexible mixin APIs that can be used in simple or complex ways.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n@mixin replace-text($image, $x: 50%, $y: 50%) {\n  text-indent: -99999em;\n  overflow: hidden;\n  text-align: left;\n\n  background: {\n    image: $image;\n    repeat: no-repeat;\n    position: $x $y;\n  }\n}\n\n.mail-icon {\n  @include replace-text(url(\"/images/mail.svg\"), 0);\n}\n```\n\n``` scss\n@mixin replace-text($image, $x: 50%, $y: 50%)\n  text-indent: -99999em\n  overflow: hidden\n  text-align: left\n\n  background:\n    image: $image\n    repeat: no-repeat\n    position: $x $y\n\n.mail-icon\n  @include replace-text(url(\"/images/mail.svg\"), 0)\n```\n\n``` css\n.mail-icon {\n  text-indent: -99999em;\n  overflow: hidden;\n  text-align: left;\n  background-image: url(\"/images/mail.svg\");\n  background-repeat: no-repeat;\n  background-position: 0 50%;\n}\n```\n\n### 💡 Fun fact:\n\nDefault values can be any SassScript expression, and they can even refer to earlier arguments!\n\n### Keyword Arguments\n\nWhen a mixin is included, arguments can be passed by name in addition to passing them by their position in the argument list. This is especially useful for mixins with multiple optional arguments, or with [boolean](../values/booleans) arguments whose meanings aren’t obvious without a name to go with them. Keyword arguments use the same syntax as [variable declarations](../variables) and [optional arguments](#optional-arguments).\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n- [CSS](#example-4-css)\n\n``` scss\n@mixin square($size, $radius: 0) {\n  width: $size;\n  height: $size;\n\n  @if $radius != 0 {\n    border-radius: $radius;\n  }\n}\n\n.avatar {\n  @include square(100px, $radius: 4px);\n}\n```\n\n``` scss\n@mixin square($size, $radius: 0)\n  width: $size\n  height: $size\n\n  @if $radius != 0\n    border-radius: $radius\n\n\n\n.avatar\n  @include square(100px, $radius: 4px)\n```\n\n``` css\n.avatar {\n  width: 100px;\n  height: 100px;\n  border-radius: 4px;\n}\n```\n\n### ⚠️ Heads up!\n\nBecause *any* argument can be passed by name, be careful when renaming a mixin’s arguments… it might break your users! It can be helpful to keep the old name around as an [optional argument](#optional-arguments) for a while and printing a [warning](warn) if anyone passes it, so they know to migrate to the new argument.\n\n### Taking Arbitrary Arguments\n\nSometimes it’s useful for a mixin to be able to take any number of arguments. If the last argument in a `@mixin` declaration ends in `...`, then all extra arguments to that mixin are passed to that argument as a [list](../values/lists). This argument is known as an [argument list](../values/lists#argument-lists).\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n- [CSS](#example-5-css)\n\n``` scss\n@mixin order($height, $selectors...) {\n  @for $i from 0 to length($selectors) {\n    #{nth($selectors, $i + 1)} {\n      position: absolute;\n      height: $height;\n      margin-top: $i * $height;\n    }\n  }\n}\n\n@include order(150px, \"input.name\", \"input.address\", \"input.zip\");\n```\n\n``` scss\n@mixin order($height, $selectors...)\n  @for $i from 0 to length($selectors)\n    #{nth($selectors, $i + 1)}\n      position: absolute\n      height: $height\n      margin-top: $i * $height\n\n\n\n\n@include order(150px, \"input.name\", \"input.address\", \"input.zip\")\n```\n\n``` css\ninput.name {\n  position: absolute;\n  height: 150px;\n  margin-top: 0px;\n}\n\ninput.address {\n  position: absolute;\n  height: 150px;\n  margin-top: 150px;\n}\n\ninput.zip {\n  position: absolute;\n  height: 150px;\n  margin-top: 300px;\n}\n```\n\n#### Taking Arbitrary Keyword Arguments\n\nArgument lists can also be used to take arbitrary keyword arguments. The [`meta.keywords()` function](../modules/meta#keywords) takes an argument list and returns any extra keywords that were passed to the mixin as a [map](../values/maps) from argument names (not including `$`) to those arguments’ values.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n- [CSS](#example-6-css)\n\n``` scss\n@use \"sass:meta\";\n\n@mixin syntax-colors($args...) {\n  @debug meta.keywords($args);\n  // (string: #080, comment: #800, variable: #60b)\n\n  @each $name, $color in meta.keywords($args) {\n    pre span.stx-#{$name} {\n      color: $color;\n    }\n  }\n}\n\n@include syntax-colors(\n  $string: #080,\n  $comment: #800,\n  $variable: #60b,\n)\n```\n\n``` scss\n@use \"sass:meta\"\n\n@mixin syntax-colors($args...)\n  @debug meta.keywords($args)\n  // (string: #080, comment: #800, variable: #60b)\n\n  @each $name, $color in meta.keywords($args)\n    pre span.stx-#{$name}\n      color: $color\n\n\n\n\n@include syntax-colors($string: #080, $comment: #800, $variable: #60b)\n```\n\n``` css\npre span.stx-string {\n  color: #080;\n}\n\npre span.stx-comment {\n  color: #800;\n}\n\npre span.stx-variable {\n  color: #60b;\n}\n```\n\n### 💡 Fun fact:\n\nIf you don’t ever pass an argument list to the [`meta.keywords()` function](../modules/meta#keywords), that argument list won’t allow extra keyword arguments. This helps callers of your mixin make sure they haven’t accidentally misspelled any argument names.\n\n#### Passing Arbitrary Arguments\n\nJust like argument lists allow mixins to take arbitrary positional or keyword arguments, the same syntax can be used to *pass* positional and keyword arguments to a mixin. If you pass a list followed by `...` as the last argument of an include, its elements will be treated as additional positional arguments. Similarly, a map followed by `...` will be treated as additional keyword arguments. You can even pass both at once!\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n\n``` scss\n$form-selectors: \"input.name\", \"input.address\", \"input.zip\" !default;\n\n@include order(150px, $form-selectors...);\n```\n\n``` scss\n$form-selectors: \"input.name\", \"input.address\", \"input.zip\" !default\n\n@include order(150px, $form-selectors...)\n```\n\n### 💡 Fun fact:\n\nBecause an [argument list](../values/lists#argument-lists) keeps track of both positional and keyword arguments, you use it to pass both at once to another mixin. That makes it super easy to define an alias for a mixin!\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n\n``` scss\n@mixin btn($args...) {\n  @warn \"The btn() mixin is deprecated. Include button() instead.\";\n  @include button($args...);\n}\n```\n\n``` scss\n@mixin btn($args...)\n  @warn \"The btn() mixin is deprecated. Include button() instead.\"\n  @include button($args...)\n```\n\n## Content Blocks\n\nIn addition to taking arguments, a mixin can take an entire block of styles, known as a *content block*. A mixin can declare that it takes a content block by including the `@content` at-rule in its body. The content block is passed in using curly braces like any other block in Sass, and it’s injected in place of the `@content` rule.\n\n- [SCSS](#example-9-scss)\n- [Sass](#example-9-sass)\n- [CSS](#example-9-css)\n\n``` scss\n@mixin hover {\n  &:not([disabled]):hover {\n    @content;\n  }\n}\n\n.button {\n  border: 1px solid black;\n  @include hover {\n    border-width: 2px;\n  }\n}\n```\n\n``` scss\n@mixin hover\n  &:not([disabled]):hover\n    @content\n\n\n\n.button\n  border: 1px solid black\n  @include hover\n    border-width: 2px\n```\n\n``` css\n.button {\n  border: 1px solid black;\n}\n.button:not([disabled]):hover {\n  border-width: 2px;\n}\n```\n\n### 💡 Fun fact:\n\nA mixin can include multiple `@content` at-rules. If it does, the content block will be included separately for each `@content`.\n\n### ⚠️ Heads up!\n\nA content block is *lexically scoped*, which means it can only see [local variables](../variables#scope) in the scope where the mixin is included. It can’t see any variables that are defined in the mixin it’s passed to, even if they’re defined before the content block is invoked.\n\n### Passing Arguments to Content Blocks\n\nCompatibility:\n\nDart Sass  \nsince 1.15.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nA mixin can pass arguments to its content block the same way it would pass arguments to another mixin by writing `@content(<arguments...>)`. The user writing the content block can accept arguments by writing `@include <name> using (<arguments...>)`. The argument list for a content block works just like a mixin’s argument list, and the arguments passed to it by `@content` work just like passing arguments to a mixin.\n\n### ⚠️ Heads up!\n\nIf a mixin passes arguments to its content block, that content block *must* declare that it accepts those arguments. This means that it’s a good idea to only pass arguments by position (rather than by name), and it means that passing more arguments is a breaking change.\n\nIf you want to be flexible in what information you pass to a content block, consider passing it a [map](../values/maps) that contains information it may need!\n\n- [SCSS](#example-10-scss)\n- [Sass](#example-10-sass)\n- [CSS](#example-10-css)\n\n``` scss\n@mixin media($types...) {\n  @each $type in $types {\n    @media #{$type} {\n      @content($type);\n    }\n  }\n}\n\n@include media(screen, print) using ($type) {\n  h1 {\n    font-size: 40px;\n    @if $type == print {\n      font-family: Calluna;\n    }\n  }\n}\n```\n\n``` scss\n@mixin media($types...)\n  @each $type in $types\n    @media #{$type}\n      @content($type)\n\n\n\n\n@include media(screen, print) using ($type)\n  h1\n    font-size: 40px\n    @if $type == print\n      font-family: Calluna\n```\n\n``` css\n@media screen {\n  h1 {\n    font-size: 40px;\n  }\n}\n@media print {\n  h1 {\n    font-size: 40px;\n    font-family: Calluna;\n  }\n}\n```\n\n## Indented Mixin Syntax\n\nThe [indented syntax](../syntax#the-indented-syntax) has a special syntax for defining and using mixins, in addition to the standard `@mixin` and `@include`. Mixins are defined using the character `=`, and they’re included using `+`. Although this syntax is terser, it’s also harder to understand at a glance and users are encouraged to avoid it.\n\n- [Sass](#example-11-sass)\n- [CSS](#example-11-css)\n\n``` scss\n=reset-list\n  margin: 0\n  padding: 0\n  list-style: none\n\n=horizontal-list\n  +reset-list\n\n  li\n    display: inline-block\n    margin:\n      left: -2px\n      right: 2em\n\nnav ul\n  +horizontal-list\n```\n\n``` css\nnav ul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\nnav ul li {\n  display: inline-block;\n  margin-left: -2px;\n  margin-right: 2em;\n}\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/mixin](https://sass-lang.com/documentation/at-rules/mixin)"
- name: '@use'
  id: at-rules/use
  summary: Only Dart Sass currently supports @use
  description: "# @use\n\n### Page Sections\n\n- [Loading Members](#loading-members)\n  - [Overview](#loading-members)\n  - [Choosing a Namespace](#choosing-a-namespace)\n  - [Private Members](#private-members)\n- [Configuration](#configuration)\n  - [Overview](#configuration)\n  - [With Mixins](#with-mixins)\n  - [Reassigning Variables](#reassigning-variables)\n- [Finding the Module](#finding-the-module)\n  - [Overview](#finding-the-module)\n  - [Load Paths](#load-paths)\n  - [Partials](#partials)\n  - [Index Files](#index-files)\n- [Loading CSS](#loading-css)\n- [Differences From `@import`](#differences-from-import)\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports `@use`. Users of other implementations must use the [`@import` rule](import) instead.\n\nThe `@use` rule loads [mixins](mixin), [functions](function), and [variables](../variables) from other Sass stylesheets, and combines CSS from multiple stylesheets together. Stylesheets loaded by `@use` are called \"modules\". Sass also provides [built-in modules](../modules) full of useful functions.\n\nThe simplest `@use` rule is written `@use \"<url>\"`, which loads the module at the given URL. Any styles loaded this way will be included exactly once in the compiled CSS output, no matter how many times those styles are loaded.\n\n### ⚠️ Heads up!\n\nA stylesheet’s `@use` rules must come before any rules other than `@forward`, including [style rules](../style-rules). However, you can declare variables before `@use` rules to use when [configuring modules](#configuration).\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n// foundation/_code.scss\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\n``` scss\n// foundation/_lists.scss\nul, ol {\n  text-align: left;\n\n  & & {\n    padding: {\n      bottom: 0;\n      left: 0;\n    }\n  }\n}\n```\n\n``` scss\n// style.scss\n@use 'foundation/code';\n@use 'foundation/lists';\n```\n\n``` scss\n// foundation/_code.sass\ncode\n  padding: .25em\n  line-height: 0\n```\n\n``` scss\n// foundation/_lists.sass\nul, ol\n  text-align: left\n\n  & &\n    padding:\n      bottom: 0\n      left: 0\n```\n\n``` scss\n// style.sass\n@use 'foundation/code'\n@use 'foundation/lists'\n```\n\n``` css\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n\nul, ol {\n  text-align: left;\n}\nul ul, ol ol {\n  padding-bottom: 0;\n  padding-left: 0;\n}\n```\n\n## Loading Members\n\nYou can access variables, functions, and mixins from another module by writing `<namespace>.<variable>`, `<namespace>.<function>()`, or `@include <namespace>.<mixin>()`. By default, the namespace is just the last component of the module’s URL.\n\nMembers (variables, functions, and mixins) loaded with `@use` are only visible in the stylesheet that loads them. Other stylesheets will need to write their own `@use` rules if they also want to access them. This helps make it easy to figure out exactly where each member is coming from. If you want to load members from many files at once, you can use the [`@forward` rule](forward) to forward them all from one shared file.\n\n### 💡 Fun fact:\n\nBecause `@use` adds namespaces to member names, it’s safe to choose very simple names like `$radius` or `$width` when writing a stylesheet. This is different from the old [`@import` rule](import), which encouraged that users write long names like `$mat-corner-radius` to avoid conflicts with other libraries, and it helps keep your stylesheets clear and easy to read!\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n// src/_corners.scss\n$radius: 3px;\n\n@mixin rounded {\n  border-radius: $radius;\n}\n```\n\n``` scss\n// style.scss\n@use \"src/corners\";\n\n.button {\n  @include corners.rounded;\n  padding: 5px + corners.$radius;\n}\n```\n\n``` scss\n// src/_corners.sass\n$radius: 3px\n\n@mixin rounded\n  border-radius: $radius\n```\n\n``` scss\n// style.sass\n@use \"src/corners\"\n\n.button\n  @include corners.rounded\n  padding: 5px + corners.$radius\n```\n\n``` css\n.button {\n  border-radius: 3px;\n  padding: 8px;\n}\n```\n\n### Choosing a Namespace\n\nBy default, a module’s namespace is just the last component of its URL without a file extension. However, sometimes you might want to choose a different namespace—you might want to use a shorter name for a module you refer to a lot, or you might be loading multiple modules with the same filename. You can do this by writing `@use \"<url>\" as <namespace>`.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n// src/_corners.scss\n$radius: 3px;\n\n@mixin rounded {\n  border-radius: $radius;\n}\n```\n\n``` scss\n// style.scss\n@use \"src/corners\" as c;\n\n.button {\n  @include c.rounded;\n  padding: 5px + c.$radius;\n}\n```\n\n``` scss\n// src/_corners.sass\n$radius: 3px\n\n@mixin rounded\n  border-radius: $radius\n```\n\n``` scss\n// style.sass\n@use \"src/corners\" as c\n\n.button\n  @include c.rounded\n  padding: 5px + c.$radius\n```\n\n``` css\n.button {\n  border-radius: 3px;\n  padding: 8px;\n}\n```\n\nYou can even load a module *without* a namespace by writing `@use \"<url>\" as *`. We recommend you only do this for stylesheets written by you, though; otherwise, they may introduce new members that cause name conflicts!\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n- [CSS](#example-4-css)\n\n``` scss\n// src/_corners.scss\n$radius: 3px;\n\n@mixin rounded {\n  border-radius: $radius;\n}\n```\n\n``` scss\n// style.scss\n@use \"src/corners\" as *;\n\n.button {\n  @include rounded;\n  padding: 5px + $radius;\n}\n```\n\n``` scss\n// src/_corners.sass\n$radius: 3px\n\n@mixin rounded\n  border-radius: $radius\n```\n\n``` scss\n// style.sass\n@use \"src/corners\" as *\n\n.button\n  @include rounded\n  padding: 5px + $radius\n```\n\n``` css\n.button {\n  border-radius: 3px;\n  padding: 8px;\n}\n```\n\n### Private Members\n\nAs a stylesheet author, you may not want all the members you define to be available outside your stylesheet. Sass makes it easy to define a private member by starting its name with either `-` or `_`. These members will work just like normal within the stylesheet that defines them, but they won’t be part of a module’s public API. That means stylesheets that load your module can’t see them!\n\n### 💡 Fun fact:\n\nIf you want to make a member private to an entire *package* rather than just a single module, just don’t [forward its module](forward) from any of your package’s entrypoints (the stylesheets you tell your users to load to use your package). You can even [hide that member](forward#controlling-visibility) while forwarding the rest of its module!\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n// src/_corners.scss\n$-radius: 3px;\n\n@mixin rounded {\n  border-radius: $-radius;\n}\n```\n\n``` scss\n// style.scss\n@use \"src/corners\";\n\n.button {\n  @include corners.rounded;\n\n  // This is an error! $-radius isn't visible outside of `_corners.scss`.\n  padding: 5px + corners.$-radius;\n}\n```\n\n``` scss\n// src/_corners.sass\n$-radius: 3px\n\n@mixin rounded\n  border-radius: $-radius\n```\n\n``` scss\n// style.sass\n@use \"src/corners\"\n\n.button\n  @include corners.rounded\n\n  // This is an error! $-radius isn't visible outside of `_corners.scss`.\n  padding: 5px + corners.$-radius\n```\n\n## Configuration\n\nA stylesheet can define variables with the [`!default` flag](../variables#default-values) to make them configurable. To load a module with configuration, write `@use <url> with (<variable>: <value>, <variable>: <value>)`. The configured values will override the variables’ default values.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n- [CSS](#example-6-css)\n\n``` scss\n// _library.scss\n$black: #000 !default;\n$border-radius: 0.25rem !default;\n$box-shadow: 0 0.5rem 1rem rgba($black, 0.15) !default;\n\ncode {\n  border-radius: $border-radius;\n  box-shadow: $box-shadow;\n}\n```\n\n``` scss\n// style.scss\n@use 'library' with (\n  $black: #222,\n  $border-radius: 0.1rem\n);\n```\n\n``` scss\n// _library.sass\n$black: #000 !default\n$border-radius: 0.25rem !default\n$box-shadow: 0 0.5rem 1rem rgba($black, 0.15) !default\n\ncode\n  border-radius: $border-radius\n  box-shadow: $box-shadow\n```\n\n``` scss\n// style.sass\n@use 'library' with ($black: #222, $border-radius: 0.1rem)\n```\n\n``` css\ncode {\n  border-radius: 0.1rem;\n  box-shadow: 0 0.5rem 1rem rgba(34, 34, 34, 0.15);\n}\n```\n\n### With Mixins\n\nConfiguring modules with `@use ... with` can be very handy, especially when using libraries that were originally written to work with the [`@import` rule](import). But it’s not particularly flexible, and we don’t recommend it for more advanced use-cases. If you find yourself wanting to configure many variables at once, pass [maps](../values/maps) as configuration, or update the configuration after the module is loaded, consider writing a mixin to set your variables instead and another mixin to inject your styles.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n- [CSS](#example-7-css)\n\n``` scss\n// _library.scss\n$-black: #000;\n$-border-radius: 0.25rem;\n$-box-shadow: null;\n\n/// If the user has configured `$-box-shadow`, returns their configured value.\n/// Otherwise returns a value derived from `$-black`.\n@function -box-shadow() {\n  @return $-box-shadow or (0 0.5rem 1rem rgba($-black, 0.15));\n}\n\n@mixin configure($black: null, $border-radius: null, $box-shadow: null) {\n  @if $black {\n    $-black: $black !global;\n  }\n  @if $border-radius {\n    $-border-radius: $border-radius !global;\n  }\n  @if $box-shadow {\n    $-box-shadow: $box-shadow !global;\n  }\n}\n\n@mixin styles {\n  code {\n    border-radius: $-border-radius;\n    box-shadow: -box-shadow();\n  }\n}\n```\n\n``` scss\n// style.scss\n@use 'library';\n\n@include library.configure(\n  $black: #222,\n  $border-radius: 0.1rem\n);\n\n@include library.styles;\n```\n\n``` scss\n// _library.sass\n$-black: #000\n$-border-radius: 0.25rem\n$-box-shadow: null\n\n/// If the user has configured `$-box-shadow`, returns their configured value.\n/// Otherwise returns a value derived from `$-black`.\n@function -box-shadow()\n  @return $-box-shadow or (0 0.5rem 1rem rgba($-black, 0.15))\n\n\n@mixin configure($black: null, $border-radius: null, $box-shadow: null)\n  @if $black\n    $-black: $black !global\n  @if $border-radius\n    $-border-radius: $border-radius !global\n  @if $box-shadow\n    $-box-shadow: $box-shadow !global\n\n\n@mixin styles\n  code\n    border-radius: $-border-radius\n    box-shadow: -box-shadow()\n```\n\n``` scss\n// style.sass\n@use 'library'\n@include library.configure($black: #222, $border-radius: 0.1rem)\n@include library.styles\n```\n\n``` css\ncode {\n  border-radius: 0.1rem;\n  box-shadow: 0 0.5rem 1rem rgba(34, 34, 34, 0.15);\n}\n```\n\n### Reassigning Variables\n\nAfter loading a module, you can reassign its variables.\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n\n``` scss\n// _library.scss\n$color: red;\n```\n\n``` scss\n// _override.scss\n@use 'library';\nlibrary.$color: blue;\n```\n\n``` scss\n// style.scss\n@use 'library';\n@use 'override';\n@debug library.$color;  //=> blue\n```\n\n``` scss\n// _library.sass\n$color: red\n```\n\n``` scss\n// _override.sass\n@use 'library'\nlibrary.$color: blue\n```\n\n``` scss\n// style.sass\n@use 'library'\n@use 'override'\n@debug library.$color  //=> blue\n```\n\nThis even works if you import a module without a namespace using `as *`. Assigning to a variable name defined in that module will overwrite its value in that module.\n\n### ⚠️ Heads up!\n\nBuilt-in module variables (such as [`math.$pi`](../modules/math#%24pi)) cannot be reassigned.\n\n## Finding the Module\n\nIt wouldn’t be any fun to write out absolute URLs for every stylesheet you load, so Sass’s algorithm for finding a module makes it a little easier. For starters, you don’t have to explicitly write out the extension of the file you want to load; `@use \"variables\"` will automatically load `variables.scss`, `variables.sass`, or `variables.css`.\n\n### ⚠️ Heads up!\n\nTo ensure that stylesheets work on every operating system, Sass loads files by *URL*, not by *file path*. This means you need to use forward slashes, not backslashes, even on Windows.\n\n### Load Paths\n\nAll Sass implementations allow users to provide *load paths*: paths on the filesystem that Sass will look in when locating modules. For example, if you pass `node_modules/susy/sass` as a load path, you can use `@use \"susy\"` to load `node_modules/susy/sass/susy.scss`.\n\nModules will always be loaded relative to the current file first, though. Load paths will only be used if no relative file exists that matches the module’s URL. This ensures that you can’t accidentally mess up your relative imports when you add a new library.\n\n### 💡 Fun fact:\n\nUnlike some other languages, Sass doesn’t require that you use `./` for relative imports. Relative imports are always available.\n\n### Partials\n\nAs a convention, Sass files that are only meant to be loaded as modules, not compiled on their own, begin with `_` (as in `_code.scss`). These are called *partials*, and they tell Sass tools not to try to compile those files on their own. You can leave off the `_` when importing a partial.\n\n### Index Files\n\nIf you write an `_index.scss` or `_index.sass` in a folder, the index file will be loaded automatically when you load the URL for the folder itself.\n\n- [SCSS](#example-9-scss)\n- [Sass](#example-9-sass)\n- [CSS](#example-9-css)\n\n``` scss\n// foundation/_code.scss\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\n``` scss\n// foundation/_lists.scss\nul, ol {\n  text-align: left;\n\n  & & {\n    padding: {\n      bottom: 0;\n      left: 0;\n    }\n  }\n}\n```\n\n``` scss\n// foundation/_index.scss\n@use 'code';\n@use 'lists';\n```\n\n``` scss\n// style.scss\n@use 'foundation';\n```\n\n``` scss\n// foundation/_code.sass\ncode\n  padding: .25em\n  line-height: 0\n```\n\n``` scss\n// foundation/_lists.sass\nul, ol\n  text-align: left\n\n  & &\n    padding:\n      bottom: 0\n      left: 0\n```\n\n``` scss\n// foundation/_index.sass\n@use 'code'\n@use 'lists'\n```\n\n``` scss\n// style.sass\n@use 'foundation'\n```\n\n``` css\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n\nul, ol {\n  text-align: left;\n}\nul ul, ol ol {\n  padding-bottom: 0;\n  padding-left: 0;\n}\n```\n\n## Loading CSS\n\nIn addition to loading `.sass` and `.scss` files, Sass can load plain old `.css` files.\n\n- [SCSS](#example-10-scss)\n- [Sass](#example-10-sass)\n- [CSS](#example-10-css)\n\n``` scss\n// code.css\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\n``` scss\n// style.scss\n@use 'code';\n```\n\n``` scss\n// code.css\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\n``` scss\n// style.sass\n@use 'code'\n```\n\n``` css\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\nCSS files loaded as modules don’t allow any special Sass features and so can’t expose any Sass variables, functions, or mixins. In order to make sure authors don’t accidentally write Sass in their CSS, all Sass features that aren’t also valid CSS will produce errors. Otherwise, the CSS will be rendered as-is. It can even be [extended](extend)!\n\n## Differences From `@import`\n\nThe `@use` rule is intended to replace the old [`@import` rule](import), but it’s intentionally designed to work differently. Here are some major differences between the two:\n\n- `@use` only makes variables, functions, and mixins available within the scope of the current file. It never adds them to the global scope. This makes it easy to figure out where each name your Sass file references comes from, and means you can use shorter names without any risk of collision.\n\n- `@use` only ever loads each file once. This ensures you don’t end up accidentally duplicating your dependencies’ CSS many times over.\n\n- `@use` must appear at the beginning your file, and cannot be nested in style rules.\n\n- Each `@use` rule can only have one URL.\n\n- `@use` requires quotes around its URL, even when using the [indented syntax](../syntax#the-indented-syntax).\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/use](https://sass-lang.com/documentation/at-rules/use)"
- name: '@warn'
  id: at-rules/warn
  summary: When writing mixins and functions, you may want to discourage users from passing certain arguments or certain values
  description: "# @warn\n\nWhen writing [mixins](mixin) and [functions](function), you may want to discourage users from passing certain arguments or certain values. They may be passing legacy arguments that are now deprecated, or they may be calling your API in a way that’s not quite optimal.\n\nThe `@warn` rule is designed just for that. It’s written `@warn <expression>` and it prints the value of the [expression](../syntax/structure#expressions) (usually a string) for the user, along with a stack trace indicating how the current mixin or function was called. Unlike the [`@error` rule](error), though, it doesn’t stop Sass entirely.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n$known-prefixes: webkit, moz, ms, o;\n\n@mixin prefix($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if not index($known-prefixes, $prefix) {\n      @warn \"Unknown prefix #{$prefix}.\";\n    }\n\n    -#{$prefix}-#{$property}: $value;\n  }\n  #{$property}: $value;\n}\n\n.tilt {\n  // Oops, we typo'd \"webkit\" as \"wekbit\"!\n  @include prefix(transform, rotate(15deg), wekbit ms);\n}\n```\n\n``` scss\n$known-prefixes: webkit, moz, ms, o\n\n@mixin prefix($property, $value, $prefixes)\n  @each $prefix in $prefixes\n    @if not index($known-prefixes, $prefix)\n      @warn \"Unknown prefix #{$prefix}.\"\n\n\n    -#{$prefix}-#{$property}: $value\n\n  #{$property}: $value\n\n\n.tilt\n  // Oops, we typo'd \"webkit\" as \"wekbit\"!\n  @include prefix(transform, rotate(15deg), wekbit ms)\n```\n\n``` css\n.tilt {\n  -wekbit-transform: rotate(15deg);\n  -ms-transform: rotate(15deg);\n  transform: rotate(15deg);\n}\n```\n\nThe exact format of the warning and stack trace varies from implementation to implementation. This is what it looks like in Dart Sass:\n\n``` highlight\nWarning: Unknown prefix wekbit.\n    example.scss 6:7   prefix()\n    example.scss 16:3  root stylesheet\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/warn](https://sass-lang.com/documentation/at-rules/warn)"
- name: '@while'
  id: at-rules/control/while
  summary: The @while rule, written @while <expression> { ... }, evaluates its block if its expression returns true
  description: "# @while\n\nThe `@while` rule, written `@while <expression> { ... }`, evaluates its block if its [expression](../../syntax/structure#expressions) returns `true`. Then, if its expression still returns `true`, it evaluates its block again. This continues until the expression finally returns `false`.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n@use \"sass:math\";\n\n/// Divides `$value` by `$ratio` until it's below `$base`.\n@function scale-below($value, $base, $ratio: 1.618) {\n  @while $value > $base {\n    $value: math.div($value, $ratio);\n  }\n  @return $value;\n}\n\n$normal-font-size: 16px;\nsup {\n  font-size: scale-below(20px, 16px);\n}\n```\n\n``` scss\n@use \"sass:math\"\n\n/// Divides `$value` by `$ratio` until it's below `$base`.\n@function scale-below($value, $base, $ratio: 1.618)\n  @while $value > $base\n    $value: math.div($value, $ratio)\n  @return $value\n\n\n\n$normal-font-size: 16px\nsup\n  font-size: scale-below(20px, 16px)\n```\n\n``` css\nsup {\n  font-size: 12.36094px;\n}\n```\n\n### ⚠️ Heads up!\n\nAlthough `@while` is necessary for a few particularly complex stylesheets, you’re usually better of using either [`@each`](each) or [`@for`](for) if either of them will work. They’re clearer for the reader, and often faster to compile as well.\n\n## Truthiness and Falsiness\n\nAnywhere `true` or `false` are allowed, you can use other values as well. The values `false` and [`null`](../../values/null) are *falsey*, which means Sass considers them to indicate falsehood and cause conditions to fail. Every other value is considered *truthy*, so Sass considers them to work like `true` and cause conditions to succeed.\n\nFor example, if you want to check if a string contains a space, you can just write `string.index($string, \" \")`. The [`string.index()` function](../../modules/string#index) returns `null` if the string isn’t found and a number otherwise.\n\n### ⚠️ Heads up!\n\nSome languages consider more values falsey than just `false` and `null`. Sass isn’t one of those languages! Empty strings, empty lists, and the number `0` are all truthy in Sass.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/control/while](https://sass-lang.com/documentation/at-rules/control/while)"
- name: adjust-hue
  id: modules/color#adjust-hue
  summary: Increases or decreases $color‘s hue
  belongs_to: sass:color
  description: |-
    ``` scss
    adjust-hue($color, $degrees) //=> color
    ```

    Increases or decreases `$color`‘s hue.

    The `$hue` must be a number between `-360deg` and `360deg` (inclusive) to add to `$color`’s hue. It may be [unitless](../values/numbers#units) but it may not have any unit other than `deg`.

    See also [`color.adjust()`](#adjust), which can adjust any property of a color.

    ### ⚠️ Heads up!

    Because `adjust-hue()` is redundant with [`adjust()`](#adjust), it’s not included directly in the new module system. Instead of `adjust-hue($color, $amount)`, you can write [`color.adjust($color, $hue: $amount)`](#adjust).

    - [SCSS](#example-2-scss)
    - [Sass](#example-2-sass)

    ``` scss
    // Hue 222deg becomes 282deg.
    @debug adjust-hue(#6b717f, 60deg); // #796b7f

    // Hue 164deg becomes 104deg.
    @debug adjust-hue(#d2e1dd, -60deg); // #d6e1d2

    // Hue 210deg becomes 255deg.
    @debug adjust-hue(#036, 45); // #1a0066
    ```

    ``` scss
    // Hue 222deg becomes 282deg.
    @debug adjust-hue(#6b717f, 60deg)  // #796b7f

    // Hue 164deg becomes 104deg.
    @debug adjust-hue(#d2e1dd, -60deg)  // #d6e1d2

    // Hue 210deg becomes 255deg.
    @debug adjust-hue(#036, 45)  // #1a0066
    ```
- name: At-Rules
  id: at-rules
  summary: '@use loads mixins, functions, and variables from other Sass stylesheets, and combines CSS from multiple stylesheets together'
  description: "# At-Rules\n\nMuch of Sass’s extra functionality comes in the form of new [at-rules](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule) it adds on top of CSS:\n\n- [`@use`](at-rules/use) loads mixins, functions, and variables from other Sass stylesheets, and combines CSS from multiple stylesheets together.\n\n- [`@forward`](at-rules/forward) loads a Sass stylesheet and makes its mixins, functions, and variables available when your stylesheet is loaded with the `@use` rule.\n\n- [`@import`](at-rules/import) extends the CSS at-rule to load styles, mixins, functions, and variables from other stylesheets.\n\n- [`@mixin` and `@include`](at-rules/mixin) makes it easy to re-use chunks of styles.\n\n- [`@function`](at-rules/function) defines custom functions that can be used in [SassScript expressions](syntax/structure#expressions).\n\n- [`@extend`](at-rules/extend) allows selectors to inherit styles from one another.\n\n- [`@at-root`](at-rules/at-root) puts styles within it at the root of the CSS document.\n\n- [`@error`](at-rules/error) causes compilation to fail with an error message.\n\n- [`@warn`](at-rules/warn) prints a warning without stopping compilation entirely.\n\n- [`@debug`](at-rules/debug) prints a message for debugging purposes.\n\n- Flow control rules like [`@if`](at-rules/control/if), [`@each`](at-rules/control/each), [`@for`](at-rules/control/for), and [`@while`](at-rules/control/while) control whether or how many times styles are emitted.\n\nSass also has some special behavior for [plain CSS at-rules](at-rules/css): they can contain [interpolation](interpolation), and they can be nested in style rules. Some of them, like [`@media`](at-rules/css#media) and [`@supports`](at-rules/css#supports), also allow SassScript to be used directly in the rule itself without interpolation.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules](https://sass-lang.com/documentation/at-rules)"
- name: Boolean Operators
  id: operators/boolean
  summary: Unlike languages like JavaScript, Sass uses words rather than symbols for its boolean operators
  description: "# Boolean Operators\n\nUnlike languages like JavaScript, Sass uses words rather than symbols for its [boolean](../values/booleans) operators.\n\n- `not <expression>` returns the opposite of the expression’s value: it turns `true` into `false` and `false` into `true`.\n- `<expression> and <expression>` returns `true` if *both* expressions’ values are `true`, and `false` if either is `false`.\n- `<expression> or <expression>` returns `true` if *either* expression’s value is `true`, and `false` if both are `false`.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug not true; // false\n@debug not false; // true\n\n@debug true and true; // true\n@debug true and false; // false\n\n@debug true or false; // true\n@debug false or false; // false\n```\n\n``` scss\n@debug not true  // false\n@debug not false  // true\n\n@debug true and true  // true\n@debug true and false  // false\n\n@debug true or false  // true\n@debug false or false  // false\n```\n\n## Truthiness and Falsiness\n\nAnywhere `true` or `false` are allowed, you can use other values as well. The values `false` and [`null`](../values/null) are *falsey*, which means Sass considers them to indicate falsehood and cause conditions to fail. Every other value is considered *truthy*, so Sass considers them to work like `true` and cause conditions to succeed.\n\nFor example, if you want to check if a string contains a space, you can just write `string.index($string, \" \")`. The [`string.index()` function](../modules/string#index) returns `null` if the string isn’t found and a number otherwise.\n\n### ⚠️ Heads up!\n\nSome languages consider more values falsey than just `false` and `null`. Sass isn’t one of those languages! Empty strings, empty lists, and the number `0` are all truthy in Sass.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/operators/boolean](https://sass-lang.com/documentation/operators/boolean)"
- name: Booleans
  id: values/booleans
  summary: Booleans are the logical values true and false
  description: "# Booleans\n\nBooleans are the logical values `true` and `false`. In addition their literal forms, booleans are returned by [equality](../operators/equality) and [relational](../operators/relational) operators, as well as many built-in functions like [`math.comparable()`](../modules/math#comparable) and [`map.has-key()`](../modules/map#has-key).\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@use \"sass:math\";\n\n@debug 1px == 2px; // false\n@debug 1px == 1px; // true\n@debug 10px < 3px; // false\n@debug math.comparable(100px, 3in); // true\n```\n\n``` scss\n@use \"sass:math\"\n\n@debug 1px == 2px  // false\n@debug 1px == 1px  // true\n@debug 10px < 3px  // false\n@debug math.comparable(100px, 3in)  // true\n```\n\nYou can work with booleans using [boolean operators](../operators/boolean). The `and` operator returns `true` if *both* sides are `true`, and the `or` operator returns `true` if *either* side is `true`. The `not` operator returns the opposite of a single boolean value.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n@debug true and true; // true\n@debug true and false; // false\n\n@debug true or false; // true\n@debug false or false; // false\n\n@debug not true; // false\n@debug not false; // true\n```\n\n``` scss\n@debug true and true  // true\n@debug true and false  // false\n\n@debug true or false  // true\n@debug false or false  // false\n\n@debug not true  // false\n@debug not false  // true\n```\n\n## Using Booleans\n\nYou can use booleans to choose whether or not to do various things in Sass. The [`@if` rule](../at-rules/control/if) evaluates a block of styles if its argument is `true`:\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n@mixin avatar($size, $circle: false) {\n  width: $size;\n  height: $size;\n\n  @if $circle {\n    border-radius: $size / 2;\n  }\n}\n\n.square-av {\n  @include avatar(100px, $circle: false);\n}\n.circle-av {\n  @include avatar(100px, $circle: true);\n}\n```\n\n``` scss\n@mixin avatar($size, $circle: false)\n  width: $size\n  height: $size\n\n  @if $circle\n    border-radius: $size / 2\n\n.square-av\n  @include avatar(100px, $circle: false)\n.circle-av\n  @include avatar(100px, $circle: true)\n```\n\n``` css\n.square-av {\n  width: 100px;\n  height: 100px;\n}\n\n.circle-av {\n  width: 100px;\n  height: 100px;\n  border-radius: 50px;\n}\n```\n\nThe [`if()` function](../modules#if) returns one value if its argument is `true` and another if its argument is `false`:\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n@debug if(true, 10px, 30px); // 10px\n@debug if(false, 10px, 30px); // 30px\n```\n\n``` scss\n@debug if(true, 10px, 30px)  // 10px\n@debug if(false, 10px, 30px)  // 30px\n```\n\n## Truthiness and Falsiness\n\nAnywhere `true` or `false` are allowed, you can use other values as well. The values `false` and [`null`](null) are *falsey*, which means Sass considers them to indicate falsehood and cause conditions to fail. Every other value is considered *truthy*, so Sass considers them to work like `true` and cause conditions to succeed.\n\nFor example, if you want to check if a string contains a space, you can just write `string.index($string, \" \")`. The [`string.index()` function](../modules/string#index) returns `null` if the string isn’t found and a number otherwise.\n\n### ⚠️ Heads up!\n\nSome languages consider more values falsey than just `false` and `null`. Sass isn’t one of those languages! Empty strings, empty lists, and the number `0` are all truthy in Sass.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/values/booleans](https://sass-lang.com/documentation/values/booleans)"
- name: Built-In Modules
  id: modules
  summary: Only Dart Sass currently supports loading built-in modules with @use
  description: "# Built-In Modules\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports loading built-in modules with `@use`. Users of other implementations must call functions using their global names instead.\n\nSass provides many built-in modules which contain useful functions (and the occasional mixin). These modules can be loaded with the [`@use` rule](at-rules/use) like any user-defined stylesheet, and their functions can be called [like any other module member](at-rules/use#loading-members). All built-in module URLs begin with `sass:` to indicate that they're part of Sass itself.\n\n### ⚠️ Heads up!\n\nBefore the Sass module system was introduced, all Sass functions were globally available at all times. Many functions still have global aliases (these are listed in their documentation). The Sass team discourages their use and will eventually deprecate them, but for now they remain available for compatibility with older Sass versions and with LibSass (which doesn’t support the module system yet).\n\n[A few functions](#global-functions) are *only* available globally even in the new module system, either because they have special evaluation behavior ([`if()`](#if)) or because they add extra behavior on top of built-in CSS functions ([`rgb()`](#rgb) and [`hsl()`](#hsl)). These will not be deprecated and can be used freely.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n@use \"sass:color\";\n\n.button {\n  $primary-color: #6b717f;\n  color: $primary-color;\n  border: 1px solid color.scale($primary-color, $lightness: 20%);\n}\n```\n\n``` scss\n@use \"sass:color\"\n\n.button\n  $primary-color: #6b717f\n  color: $primary-color\n  border: 1px solid color.scale($primary-color, $lightness: 20%)\n```\n\n``` css\n.button {\n  color: #6b717f;\n  border: 1px solid #878d9a;\n}\n```\n\nSass provides the following built-in modules:\n\n- The [`sass:math` module](modules/math) provides functions that operate on [numbers](values/numbers).\n\n- The [`sass:string` module](modules/string) makes it easy to combine, search, or split apart [strings](values/strings).\n\n- The [`sass:color` module](modules/color) generates new [colors](values/colors) based on existing ones, making it easy to build color themes.\n\n- The [`sass:list` module](modules/list) lets you access and modify values in [lists](values/lists).\n\n- The [`sass:map` module](modules/map) makes it possible to look up the value associated with a key in a [map](values/maps), and much more.\n\n- The [`sass:selector` module](modules/selector) provides access to Sass’s powerful selector engine.\n\n- The [`sass:meta` module](modules/meta) exposes the details of Sass’s inner workings.\n\n## Global Functions\n\n``` scss\nhsl($hue $saturation $lightness)\nhsl($hue $saturation $lightness / $alpha)\nhsl($hue, $saturation, $lightness, $alpha: 1)\nhsla($hue $saturation $lightness)\nhsla($hue $saturation $lightness / $alpha)\nhsla($hue, $saturation, $lightness, $alpha: 1) //=> color\n```\n\nCompatibility (Level 4 Syntax):\n\nDart Sass  \nsince 1.15.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nLibSass and Ruby Sass only support the following signatures:\n\n- `hsl($hue, $saturation, $lightness)`\n- `hsla($hue, $saturation, $lightness, $alpha)`\n\nNote that for these implementations, the `$alpha` argument is *required* if the function name `hsla()` is used, and *forbidden* if the function name `hsl()` is used.\n\nCompatibility (Percent Alpha):\n\nDart Sass  \n✓\n\nLibSass  \n✗\n\nRuby Sass  \nsince 3.7.0\n\n[▶](javascript:;)\n\nLibSass and older versions of Ruby Sass don’t support alpha values specified as percentages.\n\nReturns a color with the given [hue, saturation, and lightness](https://en.wikipedia.org/wiki/HSL_and_HSV) and the given alpha channel.\n\nThe hue is a number between `0deg` and `360deg` (inclusive) and may be unitless. The saturation and lightness are numbers between `0%` and `100%` (inclusive) and may *not* be unitless. The alpha channel can be specified as either a unitless number between 0 and 1 (inclusive), or a percentage between `0%` and `100%` (inclusive).\n\n### 💡 Fun fact:\n\nYou can pass [special functions](syntax/special-functions) like `calc()` or `var()` in place of any argument to `hsl()`. You can even use `var()` in place of multiple arguments, since it might be replaced by multiple values! When a color function is called this way, it returns an unquoted string using the same signature it was called with.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n@debug hsl(210deg 100% 20% / var(--opacity)); // hsl(210deg 100% 20% / var(--opacity))\n@debug hsla(var(--peach), 20%); // hsla(var(--peach), 20%)\n```\n\n``` scss\n@debug hsl(210deg 100% 20% / var(--opacity))  // hsl(210deg 100% 20% / var(--opacity))\n@debug hsla(var(--peach), 20%)  // hsla(var(--peach), 20%)\n```\n\n### ⚠️ Heads up!\n\nSass’s [special parsing rules](operators/numeric#slash-separated-values) for slash-separated values make it difficult to pass variables for `$lightness` or `$alpha` when using the `hsl($hue $saturation $lightness / $alpha)` signature. Consider using `hsl($hue, $saturation, $lightness, $alpha)` instead.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@debug hsl(210deg 100% 20%); // #036\n@debug hsl(34, 35%, 92%); // #f2ece4\n@debug hsl(210deg 100% 20% / 50%); // rgba(0, 51, 102, 0.5)\n@debug hsla(34, 35%, 92%, 0.2); // rgba(242, 236, 228, 0.2)\n```\n\n``` scss\n@debug hsl(210deg 100% 20%) // #036\n@debug hsl(34, 35%, 92%) // #f2ece4\n@debug hsl(210deg 100% 20% / 50%)  // rgba(0, 51, 102, 0.5)\n@debug hsla(34, 35%, 92%, 0.2)  // rgba(242, 236, 228, 0.2)\n```\n\n``` scss\nif($condition, $if-true, $if-false)\n```\n\nReturns `$if-true` if `$condition` is [truthy](at-rules/control/if#truthiness-and-falsiness), and `$if-false` otherwise.\n\nThis function is special in that it doesn’t even evaluate the argument that isn’t returned, so it’s safe to call even if the unused argument would throw an error.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n@debug if(true, 10px, 15px); // 10px\n@debug if(false, 10px, 15px); // 15px\n@debug if(variable-defined($var), $var, null); // null\n```\n\n``` scss\n@debug if(true, 10px, 15px)  // 10px\n@debug if(false, 10px, 15px)  // 15px\n@debug if(variable-defined($var), $var, null)  // null\n```\n\n``` scss\nrgb($red $green $blue)\nrgb($red $green $blue / $alpha)\nrgb($red, $green, $blue, $alpha: 1)\nrgb($color, $alpha)\nrgba($red $green $blue)\nrgba($red $green $blue / $alpha)\nrgba($red, $green, $blue, $alpha: 1)\nrgba($color, $alpha) //=> color\n```\n\nCompatibility (Level 4 Syntax):\n\nDart Sass  \nsince 1.15.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nLibSass and Ruby Sass only support the following signatures:\n\n- `rgb($red, $green, $blue)`\n- `rgba($red, $green, $blue, $alpha)`\n- `rgba($color, $alpha)`\n\nNote that for these implementations, the `$alpha` argument is *required* if the function name `rgba()` is used, and *forbidden* if the function name `rgb()` is used.\n\nCompatibility (Percent Alpha):\n\nDart Sass  \n✓\n\nLibSass  \n✗\n\nRuby Sass  \nsince 3.7.0\n\n[▶](javascript:;)\n\nLibSass and older versions of Ruby Sass don’t support alpha values specified as percentages.\n\nIf `$red`, `$green`, `$blue`, and optionally `$alpha` are passed, returns a color with the given red, green, blue, and alpha channels.\n\nEach channel can be specified as either a [unitless](values/numbers#units) number between 0 and 255 (inclusive), or a percentage between `0%` and `100%` (inclusive). The alpha channel can be specified as either a unitless number between 0 and 1 (inclusive), or a percentage between `0%` and `100%` (inclusive).\n\n### 💡 Fun fact:\n\nYou can pass [special functions](syntax/special-functions) like `calc()` or `var()` in place of any argument to `rgb()`. You can even use `var()` in place of multiple arguments, since it might be replaced by multiple values! When a color function is called this way, it returns an unquoted string using the same signature it was called with.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n@debug rgb(0 51 102 / var(--opacity)); // rgb(0 51 102 / var(--opacity))\n@debug rgba(var(--peach), 0.2); // rgba(var(--peach), 0.2)\n```\n\n``` scss\n@debug rgb(0 51 102 / var(--opacity))  // rgb(0 51 102 / var(--opacity))\n@debug rgba(var(--peach), 0.2)  // rgba(var(--peach), 0.2)\n```\n\n### ⚠️ Heads up!\n\nSass’s [special parsing rules](operators/numeric#slash-separated-values) for slash-separated values make it difficult to pass variables for `$blue` or `$alpha` when using the `rgb($red $green $blue / $alpha)` signature. Consider using `rgb($red, $green, $blue, $alpha)` instead.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@debug rgb(0 51 102); // #036\n@debug rgb(95%, 92.5%, 89.5%); // #f2ece4\n@debug rgb(0 51 102 / 50%); // rgba(0, 51, 102, 0.5)\n@debug rgba(95%, 92.5%, 89.5%, 0.2); // rgba(242, 236, 228, 0.2)\n```\n\n``` scss\n@debug rgb(0 51 102)  // #036\n@debug rgb(95%, 92.5%, 89.5%)  // #f2ece4\n@debug rgb(0 51 102 / 50%)  // rgba(0, 51, 102, 0.5)\n@debug rgba(95%, 92.5%, 89.5%, 0.2)  // rgba(242, 236, 228, 0.2)\n```\n\n------------------------------------------------------------------------\n\nIf `$color` and `$alpha` are passed, this returns `$color` with the given `$alpha` channel instead of its original alpha channel.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n\n``` scss\n@debug rgb(#f2ece4, 50%); // rgba(242, 236, 228, 0.5);\n@debug rgba(rgba(0, 51, 102, 0.5), 1); // #003366\n```\n\n``` scss\n@debug rgb(#f2ece4, 50%)  // rgba(242, 236, 228, 0.5) \n@debug rgba(rgba(0, 51, 102, 0.5), 1)  // #003366\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules](https://sass-lang.com/documentation/modules)"
- name: Calculations
  id: values/calculations
  summary: Calculations are how Sass represents the calc() function, as well as similar functions like clamp(), min(), and max()
  description: "# Calculations\n\nCalculations are how Sass represents the `calc()` function, as well as similar functions like `clamp()`, `min()`, and `max()`. Sass will simplify these as much as possible, even if they're combined with one another.\n\nCompatibility:\n\nDart Sass  \nsince 1.40.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nLibSass, Ruby Sass, and versions of Dart Sass prior to 1.40.0 parse `calc()` as a [special function](../syntax/special-functions#element-progid-and-expression) like `element()`.\n\nLibSass, Ruby Sass, and versions of Dart Sass prior to 1.31.0 parse `clamp()` as a [plain CSS function](../at-rules/function#plain-css-functions) rather than supporting special syntax within it. Versions of Dart Sass between 1.31.0 and 1.40.0 parse `clamp()` as a [special function](../syntax/special-functions#element-progid-and-expression) like `element()`.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug calc(400px + 10%); // calc(400px + 10%)\n@debug calc(400px / 2); // 200px\n@debug min(100px, calc(1rem + 10%)); // min(100px, 1rem + 10%)\n```\n\n``` scss\n@debug calc(400px + 10%)  // calc(400px + 10%)\n@debug calc(400px / 2)  // 200px\n@debug min(100px, calc(1rem + 10%) ; // min(100px, 1rem + 10%)\n```\n\nCalculations use a special syntax that’s different from normal SassScript. It’s the same syntax as the CSS `calc()`, but with the additional ability to use [Sass variables](../variables) and call [Sass functions](../modules). This means that `/` is always a division operator within a calculation!\n\n### 💡 Fun fact:\n\nThe arguments to a Sass function call use the normal Sass syntax, rather than the special calculation syntax!\n\nYou can also use [interpolation](../interpolation) in a calculation. However, if you do, nothing in the parentheses that surround that interpolation will be simplified or type-checked, so it’s easy to end up with extra verbose or even invalid CSS. Rather than writing `calc(10px + #{$var})`, just write `calc(10px + $var)`!\n\n## Simplification\n\nSass will simplify adjacent operations in calculations if they use units that can be combined at compile-time, such as `1in + 10px` or `5s * 2`. If possible, it’ll even simplify the whole calculation to a single number—for example, `clamp(0px, 30px, 20px)` will return `20px`.\n\n### ⚠️ Heads up!\n\nThis means that a calculation expression won’t necessarily always return a calculation! If you’re writing a Sass library, you can always use the [`meta.type-of()`](../modules/meta#type-of) function to determine what type you’re dealing with.\n\nCalculations will also be simplified within other calculations. In particular, if a `calc()` end up inside any other calculation, the function call will be removed and it’ll be replaced by a plain old operation.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n$width: calc(400px + 10%);\n\n.sidebar {\n  width: $width;\n  padding-left: calc($width / 4);\n}\n```\n\n``` scss\n$width: calc(400px + 10%)\n\n.sidebar\n  width: $width\n  padding-left: calc($width / 4)\n==\n.sidebar {\n  width: calc(400px + 10%);\n  padding-left: calc((400px + 10%) / 4);\n}\n```\n\n``` css\n.sidebar {\n  width: calc(400px + 10%);\n  padding-left: calc($width / 4);\n}\n```\n\n## Operations\n\nYou can’t use calculations with normal SassScript operations like `+` and `*`. If you want to write some math functions that allow calculations just write them within their own `calc()` expressions—if they’re passed a bunch of numbers with compatible units, they’ll return plain numbers as well, and if they’re passed calculations they’ll return calculations.\n\nThis restriction is in place to make sure that if calculations *aren’t* wanted, they throw an error as soon as possible. Calculations can’t be used everywhere plain numbers can: they can’t be injected into CSS identifiers (such as `.item-#{$n}`), for example, and they can’t be passed to Sass’s built-in [math functions](../modules/math). Reserving SassScript operations for plain numbers makes it clear exactly where calculations are allowed and where they aren’t.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n$width: calc(100% + 10px);\n@debug $width * 2; // Error!\n@debug calc($width * 2); // calc((100% + 10px) * 2);\n```\n\n``` scss\n$width: calc(100% + 10px);\n@debug $width * 2; // Error!\n@debug calc($width * 2); // calc((100% + 10px) * 2);\n```\n\n## `min()` and `max()`\n\nCompatibility (Special function syntax):\n\nDart Sass  \nsince \\>=1.11.0 \\<1.42.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nLibSass, Ruby Sass, and versions of Dart Sass prior to 1.11.0 *always* parse `min()` and `max()` as Sass functions. To create a plain CSS `min()` or `max()` call for those implementations, you can write something like `unquote(\"min(#{$padding}, env(safe-area-inset-left))\")` instead.\n\nVersions of Dart Sass between 1.11.0 and 1.40.0, and between 1.40.1 and 1.42.0 parse `min()` and `max()` functions as [special functions](../syntax/special-functions) if they’re valid plain CSS, but parse them as Sass functions if they contain Sass features other than interpolation, like variables or function calls.\n\nDart Sass 1.41.0 parses `min()` and `max()` functions as calculations, but doesn’t allow unitless numbers to be combined with numbers with units. This was backwards-incompatible with the global `min()` and `max()` functions, so that behavior was reverted.\n\nCSS added support for [`min()` and `max()` functions](https://drafts.csswg.org/css-values-4/#calc-notation) in Values and Units Level 4, from where they were quickly adopted by Safari [to support the iPhoneX](https://webkit.org/blog/7929/designing-websites-for-iphone-x/). But Sass supported its own [`min()`](../modules/math#min) and [`max()`](../modules/math#max) functions long before this, and it needed to be backwards-compatible with all those existing stylesheets. This led to the need for extra-special syntactic cleverness.\n\nIf a `min()` or `max()` function call is a valid calculation expression, it will be parsed as a calculation. But as soon as any part of the call contains a SassScript feature that isn’t supported in a calculation, like the [modulo operator](../operators/numeric), it’s parsed as a call to Sass’s core `min()` or `max()` function instead.\n\nSince calculations are simplified to numbers when possible anyway, the only substantive difference is that the Sass functions only support units that can be combined at build time, so `min(12px % 10, 10%)` will throw an error.\n\n### ⚠️ Heads up!\n\nOther calculations don’t allow unitless numbers to be added to, subtracted from, or compared to numbers with units. `min()` and `max()` are different, though: for backwards-compatibility with the global Sass `min()` and `max()` functions which allow unit/unitless mixing for historical reasons, these units can be mixed as long as they’re contained directly within a `min()` or `max()` calculation.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n- [CSS](#example-4-css)\n\n``` scss\n$padding: 12px;\n\n.post {\n  // Since these max() calls are valid calculation expressions, they're\n  // parsed as calculations.\n  padding-left: max($padding, env(safe-area-inset-left));\n  padding-right: max($padding, env(safe-area-inset-right));\n}\n\n.sidebar {\n  // Since these use the SassScript-only modulo operator, they're parsed as\n  // SassScript function calls.\n  padding-left: max($padding % 10, 20px);\n  padding-right: max($padding % 10, 20px);\n}\n```\n\n``` scss\n$padding: 12px\n\n.post\n  // Since these max() calls are valid calculation expressions, they're\n  // parsed as calculations.\n  padding-left: max($padding, env(safe-area-inset-left))\n  padding-right: max($padding, env(safe-area-inset-right))\n\n\n.sidebar\n  // Since these use the SassScript-only modulo operator, they're parsed as\n  // SassScript function calls.\n  padding-left: max($padding % 10, 20px)\n  padding-right: max($padding % 10, 20px)\n```\n\n``` css\n.post {\n  padding-left: max(12px, env(safe-area-inset-left));\n  padding-right: max(12px, env(safe-area-inset-right));\n}\n\n.sidebar {\n  padding-left: 20px;\n  padding-right: 20px;\n}\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/values/calculations](https://sass-lang.com/documentation/values/calculations)"
- name: Class Boolean<T>
  id: js-api/classes/types.boolean
  summary: Sass's boolean type
  description: "# Class Boolean\\<T\\>\n\nSass's [boolean type](../../values/booleans).\n\nCustom functions should respect Sass’s notion of [truthiness](../../at-rules/control/if#truthiness-and-falsiness) by treating `false` and `null` as falsey and everything else as truthy.\n\n### ⚠️ Heads up!\n\nBoolean values can't be constructed, they can only be accessed through the [TRUE](types.boolean#TRUE) and [FALSE](types.boolean#FALSE) constants.\n\n### Type parameters\n\n- #### T: boolean = boolean\n\n### Hierarchy\n\n- Boolean\n\n## Index\n\n### Constructors\n\n- [constructor](types.boolean#constructor)\n\n### Properties\n\n- [FALSE](types.boolean#FALSE)\n- [TRUE](types.boolean#TRUE)\n\n### Methods\n\n- [getValue](types.boolean#getValue)\n\n## Constructors\n\n### constructor\n\n- new Boolean\\<T\\>(): [Boolean](types.boolean)\\<T\\>\n\n- #### Type parameters\n\n  - #### T: boolean = boolean\n\n  #### Returns [Boolean](types.boolean)\\<T\\>\n\n## Properties\n\n### Static Readonly FALSE\n\nFALSE: [Boolean](types.boolean)\\<false\\>\n\n- Defined in [js-api-doc/legacy/function.d.ts:401](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L401)\n\nSass's `false` value.\n\n### Static Readonly TRUE\n\nTRUE: [Boolean](types.boolean)\\<true\\>\n\n- Defined in [js-api-doc/legacy/function.d.ts:398](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L398)\n\nSass's `true` value.\n\n## Methods\n\n### getValue\n\n- getValue(): T\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:395](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L395)\n\n  Returns `true` if this is Sass's `true` value and `false` if this is Sass's `false` value.\n\n  example  \n  ``` js\n  // boolean is `true`.\n  boolean.getValue(); // true\n  boolean === sass.types.Boolean.TRUE; // true\n\n  // boolean is `false`.\n  boolean.getValue(); // false\n  boolean === sass.types.Boolean.FALSE; // true\n  ```\n\n  #### Returns T\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [Boolean](types.boolean)\n  - [constructor](types.boolean#constructor)\n  - [FALSE](types.boolean#FALSE)\n  - [TRUE](types.boolean#TRUE)\n  - [getValue](types.boolean#getValue)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/types.Boolean](https://sass-lang.com/documentation/js-api/classes/types.Boolean)"
- name: Class Color
  id: js-api/classes/types.color
  summary: Sass's color type
  description: "# Class Color\n\nSass's [color type](../../values/colors).\n\n### Hierarchy\n\n- Color\n\n## Index\n\n### Constructors\n\n- [constructor](types.color#constructor)\n\n### Methods\n\n- [getA](types.color#getA)\n- [getB](types.color#getB)\n- [getG](types.color#getG)\n- [getR](types.color#getR)\n- [setA](types.color#setA)\n- [setB](types.color#setB)\n- [setG](types.color#setG)\n- [setR](types.color#setR)\n\n## Constructors\n\n### constructor\n\n- new Color(r: number, g: number, b: number, a?: number): [Color](types.color)\n\n- - Defined in [js-api-doc/legacy/function.d.ts:420](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L420)\n\n  Creates a new Sass color with the given red, green, blue, and alpha channels. The red, green, and blue channels must be integers between 0 and 255 (inclusive), and alpha must be between 0 and 1 (inclusive).\n\n  example  \n  ``` js\n  newsass.types.Color(107, 113, 127); // #6b717f\n  newsass.types.Color(0, 0, 0, 0); // rgba(0, 0, 0, 0)\n  ```\n\n  #### Parameters\n\n  - ##### r: number\n\n  - ##### g: number\n\n  - ##### b: number\n\n  - ##### Optional a: number\n\n  #### Returns [Color](types.color)\n\n### constructor\n\n- new Color(argb: number): [Color](types.color)\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:433](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L433)\n\n  Creates a new Sass color with alpha, red, green, and blue channels taken from respective two-byte chunks of a hexidecimal number.\n\n  example  \n  ``` js\n  newsass.types.Color(0xff6b717f); // #6b717f\n  newsass.types.Color(0x00000000); // rgba(0, 0, 0, 0)\n  ```\n\n  #### Parameters\n\n  - ##### argb: number\n\n  #### Returns [Color](types.color)\n\n## Methods\n\n### getA\n\n- getA(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:517](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L517)\n\n  Returns the alpha channel of the color as a number from 0 to 1.\n\n  example  \n  ``` js\n  // color is `#6b717f`.\n  color.getA(); // 1\n\n  // color is `transparent`.\n  color.getA(); // 0\n  ```\n\n  #### Returns number\n\n### getB\n\n- getB(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:494](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L494)\n\n  Returns the blue channel of the color as an integer from 0 to 255.\n\n  example  \n  ``` js\n  // color is `#6b717f`.\n  color.getB(); // 127\n\n  // color is `#b37399`.\n  color.getB(); // 153\n  ```\n\n  #### Returns number\n\n### getG\n\n- getG(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:471](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L471)\n\n  Returns the green channel of the color as an integer from 0 to 255.\n\n  example  \n  ``` js\n  // color is `#6b717f`.\n  color.getG(); // 113\n\n  // color is `#b37399`.\n  color.getG(); // 115\n  ```\n\n  #### Returns number\n\n### getR\n\n- getR(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:448](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L448)\n\n  Returns the red channel of the color as an integer from 0 to 255.\n\n  example  \n  ``` js\n  // color is `#6b717f`.\n  color.getR(); // 107\n\n  // color is `#b37399`.\n  color.getR(); // 179\n  ```\n\n  #### Returns number\n\n### setA\n\n- setA(value: number): void\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:525](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L525)\n\n  Sets the alpha channel of the color. The value must be between 0 and 1 (inclusive).\n\n  deprecated  \n  Use [constructor](types.color#constructor) instead.\n\n  #### Parameters\n\n  - ##### value: number\n\n  #### Returns void\n\n### setB\n\n- setB(value: number): void\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:502](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L502)\n\n  Sets the blue channel of the color. The value must be an integer between 0 and 255 (inclusive).\n\n  deprecated  \n  Use [constructor](types.color#constructor) instead.\n\n  #### Parameters\n\n  - ##### value: number\n\n  #### Returns void\n\n### setG\n\n- setG(value: number): void\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:479](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L479)\n\n  Sets the green channel of the color. The value must be an integer between 0 and 255 (inclusive).\n\n  deprecated  \n  Use [constructor](types.color#constructor) instead.\n\n  #### Parameters\n\n  - ##### value: number\n\n  #### Returns void\n\n### setR\n\n- setR(value: number): void\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:456](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L456)\n\n  Sets the red channel of the color. The value must be an integer between 0 and 255 (inclusive).\n\n  deprecated  \n  Use [constructor](types.color#constructor) instead.\n\n  #### Parameters\n\n  - ##### value: number\n\n  #### Returns void\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [Color](types.color)\n  - [constructor](types.color#constructor)\n  - [getA](types.color#getA)\n  - [getB](types.color#getB)\n  - [getG](types.color#getG)\n  - [getR](types.color#getR)\n  - [setA](types.color#setA)\n  - [setB](types.color#setB)\n  - [setG](types.color#setG)\n  - [setR](types.color#setR)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/types.Color](https://sass-lang.com/documentation/js-api/classes/types.Color)"
- name: Class Error
  id: js-api/classes/types.error
  summary: An error that can be returned from a Sass function to signal that it encountered an error
  description: "# Class Error\n\nAn error that can be returned from a Sass function to signal that it encountered an error. This is the only way to signal an error asynchronously from a [LegacyAsyncFunction](../modules#LegacyAsyncFunction).\n\n### Hierarchy\n\n- Error\n\n## Index\n\n### Constructors\n\n- [constructor](types.error#constructor)\n\n## Constructors\n\n### constructor\n\n- new Error(message: string): [Error](types.error)\n\n- - Defined in [js-api-doc/legacy/function.d.ts:754](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L754)\n\n  #### Parameters\n\n  - ##### message: string\n\n  #### Returns [Error](types.error)\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [Error](types.error)\n  - [constructor](types.error#constructor)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/types.Error](https://sass-lang.com/documentation/js-api/classes/types.Error)"
- name: Class Exception
  id: js-api/classes/exception
  summary: An exception thrown because a Sass compilation failed
  description: "# Class Exception\n\nAn exception thrown because a Sass compilation failed.\n\n### Hierarchy\n\n- Error\n  - Exception\n\n## Index\n\n### Properties\n\n- [message](exception#message)\n- [name](exception#name)\n- [sassMessage](exception#sassMessage)\n- [sassStack](exception#sassStack)\n- [span](exception#span)\n- [stack](exception#stack)\n- [prepareStackTrace](exception#prepareStackTrace)\n- [stackTraceLimit](exception#stackTraceLimit)\n\n### Methods\n\n- [toString](exception#toString)\n- [captureStackTrace](exception#captureStackTrace)\n\n## Properties\n\n### message\n\nmessage: string\n\nOverrides Error.message\n\n- Defined in [js-api-doc/exception.d.ts:20](https://github.com/sass/sass/blob/6d42491/js-api-doc/exception.d.ts#L20)\n\nA human-friendly representation of the exception.\n\nBecause many tools simply print `Error.message` directly, this includes not only the textual description of what went wrong (the [sassMessage](exception#sassMessage)) but also an indication of where in the Sass stylesheet the error occurred (the [span](exception#span)) and the Sass stack trace at the point of error (the [sassStack](exception#sassStack)).\n\n### name\n\nname: string\n\nInherited from Error.name\n\n- Defined in node_modules/typescript/lib/lib.es5.d.ts:973\n\n### Readonly sassMessage\n\nsassMessage: string\n\n- Defined in [js-api-doc/exception.d.ts:28](https://github.com/sass/sass/blob/6d42491/js-api-doc/exception.d.ts#L28)\n\nA textual description of what went wrong.\n\nUnlike [message](exception#message), this does *not* include representations of [span](exception#span) or [sassStack](exception#sassStack).\n\n### Readonly sassStack\n\nsassStack: string\n\n- Defined in [js-api-doc/exception.d.ts:34](https://github.com/sass/sass/blob/6d42491/js-api-doc/exception.d.ts#L34)\n\nA human-friendly representation of the Sass stack trace at the point of error.\n\n### Readonly span\n\nspan: [SourceSpan](../interfaces/sourcespan)\n\n- Defined in [js-api-doc/exception.d.ts:37](https://github.com/sass/sass/blob/6d42491/js-api-doc/exception.d.ts#L37)\n\nThe location the error occurred in the Sass file that triggered it.\n\n### Optional stack\n\nstack?: string\n\nInherited from Error.stack\n\n- Defined in node_modules/typescript/lib/lib.es5.d.ts:975\n\n### Static Optional prepareStackTrace\n\nprepareStackTrace?: (err: Error, stackTraces: CallSite\\[\\]) =\\> any\n\nInherited from Error.prepareStackTrace\n\n- Defined in node_modules/@types/node/globals.d.ts:11\n\n#### Type declaration\n\n- - (err: Error, stackTraces: CallSite\\[\\]): any\n\n  &nbsp;\n\n  - Optional override for formatting stack traces\n\n    see  \n    <https://v8.dev/docs/stack-trace-api#customizing-stack-traces>\n\n    #### Parameters\n\n    - ##### err: Error\n\n    - ##### stackTraces: CallSite\\[\\]\n\n    #### Returns any\n\n### Static stackTraceLimit\n\nstackTraceLimit: number\n\nInherited from Error.stackTraceLimit\n\n- Defined in node_modules/@types/node/globals.d.ts:13\n\n## Methods\n\n### toString\n\n- toString(): string\n\n- - Defined in [js-api-doc/exception.d.ts:40](https://github.com/sass/sass/blob/6d42491/js-api-doc/exception.d.ts#L40)\n\n  Returns the same string as [message](exception#message).\n\n  #### Returns string\n\n### Static captureStackTrace\n\n- captureStackTrace(targetObject: object, constructorOpt?: Function): void\n\n&nbsp;\n\n- Inherited from Error.captureStackTrace\n\n  - Defined in node_modules/@types/node/globals.d.ts:4\n\n  Create .stack property on a target object\n\n  #### Parameters\n\n  - ##### targetObject: object\n\n  - ##### Optional constructorOpt: Function\n\n  #### Returns void\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [Exception](exception)\n  - [message](exception#message)\n  - [name](exception#name)\n  - [sassMessage](exception#sassMessage)\n  - [sassStack](exception#sassStack)\n  - [span](exception#span)\n  - [stack](exception#stack)\n  - [prepareStackTrace](exception#prepareStackTrace)\n  - [stackTraceLimit](exception#stackTraceLimit)\n  - [toString](exception#toString)\n  - [captureStackTrace](exception#captureStackTrace)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/Exception](https://sass-lang.com/documentation/js-api/classes/Exception)"
- name: Class List
  id: js-api/classes/types.list
  summary: Sass's list type
  description: "# Class List\n\nSass's [list type](../../values/lists).\n\n### ⚠️ Heads up!\n\nThis list type’s methods use 0-based indexing, even though within Sass lists use 1-based indexing. These methods also don’t support using negative numbers to index backwards from the end of the list.\n\n### Hierarchy\n\n- List\n\n## Index\n\n### Constructors\n\n- [constructor](types.list#constructor)\n\n### Methods\n\n- [getLength](types.list#getLength)\n- [getSeparator](types.list#getSeparator)\n- [getValue](types.list#getValue)\n- [setSeparator](types.list#setSeparator)\n- [setValue](types.list#setValue)\n\n## Constructors\n\n### constructor\n\n- new List(length: number, commaSeparator?: boolean): [List](types.list)\n\n- - Defined in [js-api-doc/legacy/function.d.ts:557](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L557)\n\n  Creates a new Sass list.\n\n  ### ⚠️ Heads up!\n\n  The initial values of the list elements are undefined. These elements must be set using [setValue](types.list#setValue) before accessing them or passing the list back to Sass.\n\n  example  \n  ``` js\n  constlist = newsass.types.List(3);\n  list.setValue(0, newsass.types.Number(10, \"px\"));\n  list.setValue(1, newsass.types.Number(15, \"px\"));\n  list.setValue(2, newsass.types.Number(32, \"px\"));\n  list; // 10px, 15px, 32px\n  ```\n\n  #### Parameters\n\n  - ##### length: number\n\n    The number of (initially undefined) elements in the list.\n\n  - ##### Optional commaSeparator: boolean\n\n    If `true`, the list is comma-separated; otherwise, it's space-separated. Defaults to `true`.\n\n  #### Returns [List](types.list)\n\n## Methods\n\n### getLength\n\n- getLength(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:629](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L629)\n\n  Returns the number of elements in the list.\n\n  example  \n  ``` js\n  // list is `10px, 15px, 32px`\n  list.getLength(); // 3\n\n  // list is `1px solid`\n  list.getLength(); // 2\n  ```\n\n  #### Returns number\n\n### getSeparator\n\n- getSeparator(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:607](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L607)\n\n  Returns `true` if this list is comma-separated and `false` otherwise.\n\n  example  \n  ``` js\n  // list is `10px, 15px, 32px`\n  list.getSeparator(); // true\n\n  // list is `1px solid`\n  list.getSeparator(); // false\n  ```\n\n  #### Returns boolean\n\n### getValue\n\n- getValue(index: number): undefined \\| [LegacyValue](../modules#LegacyValue)\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:575](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L575)\n\n  Returns the element at `index`, or `undefined` if that value hasn't yet been set.\n\n  example  \n  ``` js\n  // list is `10px, 15px, 32px`\n  list.getValue(0); // 10px\n  list.getValue(2); // 32px\n  ```\n\n  throws  \n  `Error` if `index` is less than 0 or greater than or equal to the number of elements in this list.\n\n  #### Parameters\n\n  - ##### index: number\n\n    A (0-based) index into this list.\n\n  #### Returns undefined \\| [LegacyValue](../modules#LegacyValue)\n\n### setSeparator\n\n- setSeparator(isComma: boolean): void\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:614](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L614)\n\n  Sets whether the list is comma-separated.\n\n  #### Parameters\n\n  - ##### isComma: boolean\n\n    `true` to make the list comma-separated, `false` otherwise.\n\n  #### Returns void\n\n### setValue\n\n- setValue(index: number, value: [LegacyValue](../modules#LegacyValue)): void\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:592](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L592)\n\n  Sets the element at `index` to `value`.\n\n  example  \n  ``` js\n  // list is `10px, 15px, 32px`\n  list.setValue(1, newsass.types.Number(18, \"px\"));\n  list; // 10px, 18px, 32px\n  ```\n\n  throws  \n  `Error` if `index` is less than 0 or greater than or equal to the number of elements in this list.\n\n  #### Parameters\n\n  - ##### index: number\n\n    A (0-based) index into this list.\n\n  - ##### value: [LegacyValue](../modules#LegacyValue)\n\n  #### Returns void\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [List](types.list)\n  - [constructor](types.list#constructor)\n  - [getLength](types.list#getLength)\n  - [getSeparator](types.list#getSeparator)\n  - [getValue](types.list#getValue)\n  - [setSeparator](types.list#setSeparator)\n  - [setValue](types.list#setValue)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/types.List](https://sass-lang.com/documentation/js-api/classes/types.List)"
- name: Class Map
  id: js-api/classes/types.map
  summary: Sass's map type
  description: "# Class Map\n\nSass's [map type](../../values/maps).\n\n### ⚠️ Heads up!\n\nThis map type is represented as a list of key-value pairs rather than a mapping from keys to values. The only way to find the value associated with a given key is to iterate through the map checking for that key. Maps created through this API are still forbidden from having duplicate keys.\n\n### Hierarchy\n\n- Map\n\n## Index\n\n### Constructors\n\n- [constructor](types.map#constructor)\n\n### Methods\n\n- [getKey](types.map#getKey)\n- [getLength](types.map#getLength)\n- [getValue](types.map#getValue)\n- [setKey](types.map#setKey)\n- [setValue](types.map#setValue)\n\n## Constructors\n\n### constructor\n\n- new Map(length: number): [Map](types.map)\n\n- - Defined in [js-api-doc/legacy/function.d.ts:662](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L662)\n\n  Creates a new Sass map.\n\n  ### ⚠️ Heads up!\n\n  The initial keys and values of the map are undefined. They must be set using [setKey](types.map#setKey) and [setValue](types.map#setValue) before accessing them or passing the map back to Sass.\n\n  example  \n  ``` js\n  constmap = newsass.types.Map(2);\n  map.setKey(0, newsass.types.String(\"width\"));\n  map.setValue(0, newsass.types.Number(300, \"px\"));\n  map.setKey(1, newsass.types.String(\"height\"));\n  map.setValue(1, newsass.types.Number(100, \"px\"));\n  map; // (width: 300px, height: 100px)\n  ```\n\n  #### Parameters\n\n  - ##### length: number\n\n    The number of (initially undefined) key/value pairs in the map.\n\n  #### Returns [Map](types.map)\n\n## Methods\n\n### getKey\n\n- getKey(index: number): [LegacyValue](../modules#LegacyValue)\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:713](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L713)\n\n  Returns the key in the key/value pair at `index`.\n\n  example  \n  ``` js\n  // map is `(width: 300px, height: 100px)`\n  map.getKey(0); // width\n  map.getKey(1); // height\n  ```\n\n  throws  \n  `Error` if `index` is less than 0 or greater than or equal to the number of pairs in this map.\n\n  #### Parameters\n\n  - ##### index: number\n\n    A (0-based) index of a key/value pair in this map.\n\n  #### Returns [LegacyValue](../modules#LegacyValue)\n\n### getLength\n\n- getLength(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:745](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L745)\n\n  Returns the number of key/value pairs in this map.\n\n  example  \n  ``` js\n  // map is `(\"light\": 200, \"medium\": 400, \"bold\": 600)`\n  map.getLength(); // 3\n\n  // map is `(width: 300px, height: 100px)`\n  map.getLength(); // 2\n  ```\n\n  #### Returns number\n\n### getValue\n\n- getValue(index: number): [LegacyValue](../modules#LegacyValue)\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:679](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L679)\n\n  Returns the value in the key/value pair at `index`.\n\n  example  \n  ``` js\n  // map is `(width: 300px, height: 100px)`\n  map.getValue(0); // 300px\n  map.getValue(1); // 100px\n  ```\n\n  throws  \n  `Error` if `index` is less than 0 or greater than or equal to the number of pairs in this map.\n\n  #### Parameters\n\n  - ##### index: number\n\n    A (0-based) index of a key/value pair in this map.\n\n  #### Returns [LegacyValue](../modules#LegacyValue)\n\n### setKey\n\n- setKey(index: number, key: [LegacyValue](../modules#LegacyValue)): void\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:730](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L730)\n\n  Sets the value in the key/value pair at `index` to `value`.\n\n  example  \n  ``` js\n  // map is `(\"light\": 200, \"medium\": 400, \"bold\": 600)`\n  map.setValue(1, newsass.types.String(\"lighter\"));\n  map; // (\"lighter\": 200, \"medium\": 300, \"bold\": 600)\n  ```\n\n  throws  \n  `Error` if `index` is less than 0 or greater than or equal to the number of pairs in this map.\n\n  #### Parameters\n\n  - ##### index: number\n\n    A (0-based) index of a key/value pair in this map.\n\n  - ##### key: [LegacyValue](../modules#LegacyValue)\n\n  #### Returns void\n\n### setValue\n\n- setValue(index: number, value: [LegacyValue](../modules#LegacyValue)): void\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:696](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L696)\n\n  Sets the value in the key/value pair at `index` to `value`.\n\n  example  \n  ``` js\n  // map is `(\"light\": 200, \"medium\": 400, \"bold\": 600)`\n  map.setValue(1, newsass.types.Number(300));\n  map; // (\"light\": 200, \"medium\": 300, \"bold\": 600)\n  ```\n\n  throws  \n  `Error` if `index` is less than 0 or greater than or equal to the number of pairs in this map.\n\n  #### Parameters\n\n  - ##### index: number\n\n    A (0-based) index of a key/value pair in this map.\n\n  - ##### value: [LegacyValue](../modules#LegacyValue)\n\n  #### Returns void\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [Map](types.map)\n  - [constructor](types.map#constructor)\n  - [getKey](types.map#getKey)\n  - [getLength](types.map#getLength)\n  - [getValue](types.map#getValue)\n  - [setKey](types.map#setKey)\n  - [setValue](types.map#setValue)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/types.Map](https://sass-lang.com/documentation/js-api/classes/types.Map)"
- name: Class Null
  id: js-api/classes/types.null
  summary: The class for Sass's singleton null value
  description: "# Class Null\n\nThe class for Sass's singleton [`null` value](../../values/null). The value itself can be accessed through the [NULL](types.null#NULL) field.\n\n### Hierarchy\n\n- Null\n\n## Index\n\n### Constructors\n\n- [constructor](types.null#constructor)\n\n### Properties\n\n- [NULL](types.null#NULL)\n\n## Constructors\n\n### constructor\n\n- new Null(): [Null](types.null)\n\n- #### Returns [Null](types.null)\n\n## Properties\n\n### Static Readonly NULL\n\nNULL: [Null](types.null)\n\n- Defined in [js-api-doc/legacy/function.d.ts:233](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L233)\n\nSass's singleton `null` value.\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [Null](types.null)\n  - [constructor](types.null#constructor)\n  - [NULL](types.null#NULL)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/types.Null](https://sass-lang.com/documentation/js-api/classes/types.Null)"
- name: Class Number
  id: js-api/classes/types.number
  summary: Sass's number type
  description: "# Class Number\n\nSass's [number type](../../values/numbers).\n\n### Hierarchy\n\n- Number\n\n## Index\n\n### Constructors\n\n- [constructor](types.number#constructor)\n\n### Methods\n\n- [getUnit](types.number#getUnit)\n- [getValue](types.number#getValue)\n- [setUnit](types.number#setUnit)\n- [setValue](types.number#setValue)\n\n## Constructors\n\n### constructor\n\n- new Number(value: number, unit?: string): [Number](types.number)\n\n- - Defined in [js-api-doc/legacy/function.d.ts:262](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L262)\n\n  example  \n  ``` scss\n  new sass.types.Number(0.5); // == 0.5\n  new sass.types.Number(10, \"px\"); // == 10px\n  new sass.types.Number(10, \"px*px\"); // == 10px * 1px\n  new sass.types.Number(10, \"px/s\"); // == math.div(10px, 1s)\n  new sass.types.Number(10, \"px*px/s*s\"); // == 10px * math.div(math.div(1px, 1s), 1s)\n  ```\n\n  #### Parameters\n\n  - ##### value: number\n\n    The numeric value of the number.\n\n  - ##### Optional unit: string\n\n    If passed, the number's unit.\n\n    Complex units can be represented as `<unit>*<unit>*.../<unit>*<unit>*...`, with numerator units on the left-hand side of the `/` and denominator units on the right. A number with only numerator units may omit the `/` and the units after it, and a number with only denominator units may be represented with no units before the `/`.\n\n  #### Returns [Number](types.number)\n\n## Methods\n\n### getUnit\n\n- getUnit(): string\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:301](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L301)\n\n  Returns a string representation of this number's units. Complex units are returned in the same format that [constructor](types.number#constructor) accepts them.\n\n  example  \n  ``` js\n  // number is `10px`.\n  number.getUnit(); // \"px\"\n\n  // number is `math.div(10px, 1s)`.\n  number.getUnit(); // \"px/s\"\n  ```\n\n  #### Returns string\n\n### getValue\n\n- getValue(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:277](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L277)\n\n  Returns the value of the number, ignoring units.\n\n  ### ⚠️ Heads up!\n\n  This means that `96px` and `1in` will return different values, even though they represent the same length.\n\n  example  \n  ``` js\n  constnumber = newsass.types.Number(10, \"px\");\n  number.getValue(); // 10\n  ```\n\n  #### Returns number\n\n### setUnit\n\n- setUnit(unit: string): void\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:310](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L310)\n\n  Destructively modifies this number by setting its units to `unit`, independent of its numeric value. Complex units are specified in the same format as [constructor](types.number#constructor).\n\n  deprecated  \n  Use [constructor](types.number#constructor) instead.\n\n  #### Parameters\n\n  - ##### unit: string\n\n  #### Returns void\n\n### setValue\n\n- setValue(value: number): void\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:285](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L285)\n\n  Destructively modifies this number by setting its numeric value to `value`, independent of its units.\n\n  deprecated  \n  Use [constructor](types.number#constructor) instead.\n\n  #### Parameters\n\n  - ##### value: number\n\n  #### Returns void\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [Number](types.number)\n  - [constructor](types.number#constructor)\n  - [getUnit](types.number#getUnit)\n  - [getValue](types.number#getValue)\n  - [setUnit](types.number#setUnit)\n  - [setValue](types.number#setValue)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/types.Number](https://sass-lang.com/documentation/js-api/classes/types.Number)"
- name: Class SassArgumentList
  id: js-api/classes/sassargumentlist
  summary: Sass's argument list type
  description: "# Class SassArgumentList\n\nSass's [argument list type](../../values/lists#argument-lists).\n\nAn argument list comes from a rest argument. It's distinct from a normal [SassList](sasslist) in that it may contain a keyword map as well as the positional arguments.\n\n### Hierarchy\n\n- [SassList](sasslist)\n  - SassArgumentList\n\n## Index\n\n### Constructors\n\n- [constructor](sassargumentlist#constructor)\n\n### Accessors\n\n- [asList](sassargumentlist#asList)\n- [hasBrackets](sassargumentlist#hasBrackets)\n- [isTruthy](sassargumentlist#isTruthy)\n- [keywords](sassargumentlist#keywords)\n- [realNull](sassargumentlist#realNull)\n\n### Methods\n\n- [assertBoolean](sassargumentlist#assertBoolean)\n- [assertColor](sassargumentlist#assertColor)\n- [assertFunction](sassargumentlist#assertFunction)\n- [assertMap](sassargumentlist#assertMap)\n- [assertNumber](sassargumentlist#assertNumber)\n- [assertString](sassargumentlist#assertString)\n- [equals](sassargumentlist#equals)\n- [get](sassargumentlist#get)\n- [hashCode](sassargumentlist#hashCode)\n- [sassIndexToListIndex](sassargumentlist#sassIndexToListIndex)\n- [tryMap](sassargumentlist#tryMap)\n\n## Constructors\n\n### constructor\n\n- new SassArgumentList(contents: [Value](value)\\[\\] \\| List\\<[Value](value)\\>, keywords: Record\\<string, [Value](value)\\> \\| OrderedMap\\<string, [Value](value)\\>, separator?: [ListSeparator](../modules#ListSeparator)): [SassArgumentList](sassargumentlist)\n\n- Overrides [SassList](sasslist).[constructor](sasslist#constructor)\n\n  - Defined in [js-api-doc/value/argument_list.d.ts:32](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/argument_list.d.ts#L32)\n\n  Creates a new argument list.\n\n  #### Parameters\n\n  - ##### contents: [Value](value)\\[\\] \\| List\\<[Value](value)\\>\n\n    The positional arguments that make up the primary contents of the list. This may be either a plain JavaScript array or an immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n  - ##### keywords: Record\\<string, [Value](value)\\> \\| OrderedMap\\<string, [Value](value)\\>\n\n    The keyword arguments attached to this argument list, whose names should exclude `$`. This can be either a plain JavaScript object with argument names as fields, or an immutable \\[\\[OrderedMap\\]\\] from the [`immutable` package](https://immutable-js.com/)\n\n  - ##### Optional separator: [ListSeparator](../modules#ListSeparator)\n\n    The separator for this list. Defaults to `','`.\n\n  #### Returns [SassArgumentList](sassargumentlist)\n\n## Accessors\n\n### asList\n\n- get asList(): List\\<[Value](value)\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:47](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L47)\n\n  This value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns List\\<[Value](value)\\>\n\n  An immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n### hasBrackets\n\n- get hasBrackets(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:55](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L55)\n\n  Whether this value as a list has brackets.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns boolean\n\n### isTruthy\n\n- get isTruthy(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:61](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L61)\n\n  Whether the value counts as `true` in an `@if` statement and other contexts.\n\n  #### Returns boolean\n\n### keywords\n\n- get keywords(): OrderedMap\\<string, [Value](value)\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/argument_list.d.ts:46](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/argument_list.d.ts#L46)\n\n  The keyword arguments attached to this argument list.\n\n  The argument names don't include `$`.\n\n  #### Returns OrderedMap\\<string, [Value](value)\\>\n\n  An immutable \\[\\[OrderedMap\\]\\] from the [`immutable` package](https://immutable-js.com/).\n\n### realNull\n\n- get realNull(): null \\| [Value](value)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L67)\n\n  Returns JavaScript's `null` value if this is [sassNull](../modules#sassNull), and returns `this` otherwise.\n\n  #### Returns null \\| [Value](value)\n\n## Methods\n\n### assertBoolean\n\n- assertBoolean(name?: string): [SassBoolean](sassboolean)\n\n&nbsp;\n\n- Inherited from [SassList](sasslist).[assertBoolean](sasslist#assertBoolean)\n\n  - Defined in [js-api-doc/value/index.d.ts:117](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L117)\n\n  Throws if `this` isn't a [SassBoolean](sassboolean).\n\n  ### ⚠️ Heads up!\n\n  Functions should generally use [isTruthy](sassargumentlist#isTruthy) rather than requiring a literal boolean.\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassBoolean](sassboolean)\n\n### assertColor\n\n- assertColor(name?: string): [SassColor](sasscolor)\n\n&nbsp;\n\n- Inherited from [SassList](sasslist).[assertColor](sasslist#assertColor)\n\n  - Defined in [js-api-doc/value/index.d.ts:125](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L125)\n\n  Throws if `this` isn't a [SassColor](sasscolor).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassColor](sasscolor)\n\n### assertFunction\n\n- assertFunction(name?: string): [SassFunction](sassfunction)\n\n&nbsp;\n\n- Inherited from [SassList](sasslist).[assertFunction](sasslist#assertFunction)\n\n  - Defined in [js-api-doc/value/index.d.ts:133](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L133)\n\n  Throws if `this` isn't a [SassFunction](sassfunction).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassFunction](sassfunction)\n\n### assertMap\n\n- assertMap(name?: string): [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [SassList](sasslist).[assertMap](sasslist#assertMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:141](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L141)\n\n  Throws if `this` isn't a [SassMap](sassmap).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassMap](sassmap)\n\n### assertNumber\n\n- assertNumber(name?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- Inherited from [SassList](sasslist).[assertNumber](sasslist#assertNumber)\n\n  - Defined in [js-api-doc/value/index.d.ts:149](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L149)\n\n  Throws if `this` isn't a [SassNumber](sassnumber).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### assertString\n\n- assertString(name?: string): [SassString](sassstring)\n\n&nbsp;\n\n- Inherited from [SassList](sasslist).[assertString](sasslist#assertString)\n\n  - Defined in [js-api-doc/value/index.d.ts:157](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L157)\n\n  Throws if `this` isn't a [SassString](sassstring).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassString](sassstring)\n\n### equals\n\n- equals(other: [Value](value)): boolean\n\n&nbsp;\n\n- Inherited from [SassList](sasslist).[equals](sasslist#equals)\n\n  - Defined in [js-api-doc/value/index.d.ts:166](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L166)\n\n  Returns whether `this` represents the same value as `other`.\n\n  #### Parameters\n\n  - ##### other: [Value](value)\n\n  #### Returns boolean\n\n### get\n\n- get(index: number): undefined \\| [Value](value)\n\n&nbsp;\n\n- Inherited from [SassList](sasslist).[get](sasslist#get)\n\n  - Defined in [js-api-doc/value/index.d.ts:106](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L106)\n\n  Returns the value at index `index` in this value as a list, or `undefined` if `index` isn't valid for this list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  This is a shorthand for `this.asList.get(index)`, although it may be more efficient in some cases.\n\n  ### ⚠️ Heads up!\n\n  This method uses the same indexing conventions as the `immutable` package: unlike Sass the index of the first element is 0, but like Sass negative numbers index from the end of the list.\n\n  #### Parameters\n\n  - ##### index: number\n\n  #### Returns undefined \\| [Value](value)\n\n### hashCode\n\n- hashCode(): number\n\n&nbsp;\n\n- Inherited from [SassList](sasslist).[hashCode](sasslist#hashCode)\n\n  - Defined in [js-api-doc/value/index.d.ts:169](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L169)\n\n  Returns a hash code that can be used to store `this` in a hash map.\n\n  #### Returns number\n\n### sassIndexToListIndex\n\n- sassIndexToListIndex(sassIndex: [Value](value), name?: string): number\n\n&nbsp;\n\n- Inherited from [SassList](sasslist).[sassIndexToListIndex](sasslist#sassIndexToListIndex)\n\n  - Defined in [js-api-doc/value/index.d.ts:90](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L90)\n\n  Converts `sassIndex` into a JavaScript-style index into the list returned by [asList](sassargumentlist#asList).\n\n  Sass indexes are one-based, while JavaScript indexes are zero-based. Sass indexes may also be negative in order to index from the end of the list.\n\n  throws  \n  `Error` If `sassIndex` isn't a number, if that number isn't an integer, or if that integer isn't a valid index for [asList](sassargumentlist#asList).\n\n  #### Parameters\n\n  - ##### sassIndex: [Value](value)\n\n    The Sass-style index into this as a list.\n\n  - ##### Optional name: string\n\n    The name of the function argument `sassIndex` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### tryMap\n\n- tryMap(): null \\| [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [SassList](sasslist).[tryMap](sasslist#tryMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:163](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L163)\n\n  Returns `this` as a map if it counts as one (empty lists count as empty maps) or `null` if it doesn't.\n\n  #### Returns null \\| [SassMap](sassmap)\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [SassArgumentList](sassargumentlist)\n  - [constructor](sassargumentlist#constructor)\n  - [asList](sassargumentlist#asList)\n  - [hasBrackets](sassargumentlist#hasBrackets)\n  - [isTruthy](sassargumentlist#isTruthy)\n  - [keywords](sassargumentlist#keywords)\n  - [realNull](sassargumentlist#realNull)\n  - [assertBoolean](sassargumentlist#assertBoolean)\n  - [assertColor](sassargumentlist#assertColor)\n  - [assertFunction](sassargumentlist#assertFunction)\n  - [assertMap](sassargumentlist#assertMap)\n  - [assertNumber](sassargumentlist#assertNumber)\n  - [assertString](sassargumentlist#assertString)\n  - [equals](sassargumentlist#equals)\n  - [get](sassargumentlist#get)\n  - [hashCode](sassargumentlist#hashCode)\n  - [sassIndexToListIndex](sassargumentlist#sassIndexToListIndex)\n  - [tryMap](sassargumentlist#tryMap)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/SassArgumentList](https://sass-lang.com/documentation/js-api/classes/SassArgumentList)"
- name: Class SassBoolean
  id: js-api/classes/sassboolean
  summary: Sass's boolean type
  description: "# Class SassBoolean\n\nSass's [boolean type](../../values/booleans).\n\n### Hierarchy\n\n- [Value](value)\n  - SassBoolean\n\n## Index\n\n### Accessors\n\n- [asList](sassboolean#asList)\n- [hasBrackets](sassboolean#hasBrackets)\n- [isTruthy](sassboolean#isTruthy)\n- [realNull](sassboolean#realNull)\n- [separator](sassboolean#separator)\n- [value](sassboolean#value)\n\n### Methods\n\n- [assertBoolean](sassboolean#assertBoolean)\n- [assertColor](sassboolean#assertColor)\n- [assertFunction](sassboolean#assertFunction)\n- [assertMap](sassboolean#assertMap)\n- [assertNumber](sassboolean#assertNumber)\n- [assertString](sassboolean#assertString)\n- [equals](sassboolean#equals)\n- [get](sassboolean#get)\n- [hashCode](sassboolean#hashCode)\n- [sassIndexToListIndex](sassboolean#sassIndexToListIndex)\n- [tryMap](sassboolean#tryMap)\n\n## Accessors\n\n### asList\n\n- get asList(): List\\<[Value](value)\\>\n\n- - Defined in [js-api-doc/value/index.d.ts:47](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L47)\n\n  This value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns List\\<[Value](value)\\>\n\n  An immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n### hasBrackets\n\n- get hasBrackets(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:55](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L55)\n\n  Whether this value as a list has brackets.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns boolean\n\n### isTruthy\n\n- get isTruthy(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:61](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L61)\n\n  Whether the value counts as `true` in an `@if` statement and other contexts.\n\n  #### Returns boolean\n\n### realNull\n\n- get realNull(): null \\| [Value](value)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L67)\n\n  Returns JavaScript's `null` value if this is [sassNull](../modules#sassNull), and returns `this` otherwise.\n\n  #### Returns null \\| [Value](value)\n\n### separator\n\n- get separator(): [ListSeparator](../modules#ListSeparator)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:75](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L75)\n\n  The separator for this value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns [ListSeparator](../modules#ListSeparator)\n\n### value\n\n- get value(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/boolean.d.ts:28](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/boolean.d.ts#L28)\n\n  Whether this value is `true` or `false`.\n\n  #### Returns boolean\n\n## Methods\n\n### assertBoolean\n\n- assertBoolean(name?: string): [SassBoolean](sassboolean)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertBoolean](value#assertBoolean)\n\n  - Defined in [js-api-doc/value/index.d.ts:117](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L117)\n\n  Throws if `this` isn't a [SassBoolean](sassboolean).\n\n  ### ⚠️ Heads up!\n\n  Functions should generally use [isTruthy](sassboolean#isTruthy) rather than requiring a literal boolean.\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassBoolean](sassboolean)\n\n### assertColor\n\n- assertColor(name?: string): [SassColor](sasscolor)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertColor](value#assertColor)\n\n  - Defined in [js-api-doc/value/index.d.ts:125](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L125)\n\n  Throws if `this` isn't a [SassColor](sasscolor).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassColor](sasscolor)\n\n### assertFunction\n\n- assertFunction(name?: string): [SassFunction](sassfunction)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertFunction](value#assertFunction)\n\n  - Defined in [js-api-doc/value/index.d.ts:133](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L133)\n\n  Throws if `this` isn't a [SassFunction](sassfunction).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassFunction](sassfunction)\n\n### assertMap\n\n- assertMap(name?: string): [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertMap](value#assertMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:141](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L141)\n\n  Throws if `this` isn't a [SassMap](sassmap).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassMap](sassmap)\n\n### assertNumber\n\n- assertNumber(name?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertNumber](value#assertNumber)\n\n  - Defined in [js-api-doc/value/index.d.ts:149](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L149)\n\n  Throws if `this` isn't a [SassNumber](sassnumber).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### assertString\n\n- assertString(name?: string): [SassString](sassstring)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertString](value#assertString)\n\n  - Defined in [js-api-doc/value/index.d.ts:157](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L157)\n\n  Throws if `this` isn't a [SassString](sassstring).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassString](sassstring)\n\n### equals\n\n- equals(other: [Value](value)): boolean\n\n&nbsp;\n\n- Inherited from [Value](value).[equals](value#equals)\n\n  - Defined in [js-api-doc/value/index.d.ts:166](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L166)\n\n  Returns whether `this` represents the same value as `other`.\n\n  #### Parameters\n\n  - ##### other: [Value](value)\n\n  #### Returns boolean\n\n### get\n\n- get(index: number): undefined \\| [Value](value)\n\n&nbsp;\n\n- Inherited from [Value](value).[get](value#get)\n\n  - Defined in [js-api-doc/value/index.d.ts:106](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L106)\n\n  Returns the value at index `index` in this value as a list, or `undefined` if `index` isn't valid for this list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  This is a shorthand for `this.asList.get(index)`, although it may be more efficient in some cases.\n\n  ### ⚠️ Heads up!\n\n  This method uses the same indexing conventions as the `immutable` package: unlike Sass the index of the first element is 0, but like Sass negative numbers index from the end of the list.\n\n  #### Parameters\n\n  - ##### index: number\n\n  #### Returns undefined \\| [Value](value)\n\n### hashCode\n\n- hashCode(): number\n\n&nbsp;\n\n- Inherited from [Value](value).[hashCode](value#hashCode)\n\n  - Defined in [js-api-doc/value/index.d.ts:169](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L169)\n\n  Returns a hash code that can be used to store `this` in a hash map.\n\n  #### Returns number\n\n### sassIndexToListIndex\n\n- sassIndexToListIndex(sassIndex: [Value](value), name?: string): number\n\n&nbsp;\n\n- Inherited from [Value](value).[sassIndexToListIndex](value#sassIndexToListIndex)\n\n  - Defined in [js-api-doc/value/index.d.ts:90](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L90)\n\n  Converts `sassIndex` into a JavaScript-style index into the list returned by [asList](sassboolean#asList).\n\n  Sass indexes are one-based, while JavaScript indexes are zero-based. Sass indexes may also be negative in order to index from the end of the list.\n\n  throws  \n  `Error` If `sassIndex` isn't a number, if that number isn't an integer, or if that integer isn't a valid index for [asList](sassboolean#asList).\n\n  #### Parameters\n\n  - ##### sassIndex: [Value](value)\n\n    The Sass-style index into this as a list.\n\n  - ##### Optional name: string\n\n    The name of the function argument `sassIndex` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### tryMap\n\n- tryMap(): null \\| [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [Value](value).[tryMap](value#tryMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:163](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L163)\n\n  Returns `this` as a map if it counts as one (empty lists count as empty maps) or `null` if it doesn't.\n\n  #### Returns null \\| [SassMap](sassmap)\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [SassBoolean](sassboolean)\n  - [asList](sassboolean#asList)\n  - [hasBrackets](sassboolean#hasBrackets)\n  - [isTruthy](sassboolean#isTruthy)\n  - [realNull](sassboolean#realNull)\n  - [separator](sassboolean#separator)\n  - [value](sassboolean#value)\n  - [assertBoolean](sassboolean#assertBoolean)\n  - [assertColor](sassboolean#assertColor)\n  - [assertFunction](sassboolean#assertFunction)\n  - [assertMap](sassboolean#assertMap)\n  - [assertNumber](sassboolean#assertNumber)\n  - [assertString](sassboolean#assertString)\n  - [equals](sassboolean#equals)\n  - [get](sassboolean#get)\n  - [hashCode](sassboolean#hashCode)\n  - [sassIndexToListIndex](sassboolean#sassIndexToListIndex)\n  - [tryMap](sassboolean#tryMap)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/SassBoolean](https://sass-lang.com/documentation/js-api/classes/SassBoolean)"
- name: Class SassColor
  id: js-api/classes/sasscolor
  summary: Sass's color type
  description: "# Class SassColor\n\nSass's [color type](../../values/colors).\n\nNo matter what representation was originally used to create this color, all of its channels are accessible.\n\n### Hierarchy\n\n- [Value](value)\n  - SassColor\n\n## Index\n\n### Constructors\n\n- [constructor](sasscolor#constructor)\n\n### Accessors\n\n- [alpha](sasscolor#alpha)\n- [asList](sasscolor#asList)\n- [blackness](sasscolor#blackness)\n- [blue](sasscolor#blue)\n- [green](sasscolor#green)\n- [hasBrackets](sasscolor#hasBrackets)\n- [hue](sasscolor#hue)\n- [isTruthy](sasscolor#isTruthy)\n- [lightness](sasscolor#lightness)\n- [realNull](sasscolor#realNull)\n- [red](sasscolor#red)\n- [saturation](sasscolor#saturation)\n- [separator](sasscolor#separator)\n- [whiteness](sasscolor#whiteness)\n\n### Methods\n\n- [assertBoolean](sasscolor#assertBoolean)\n- [assertColor](sasscolor#assertColor)\n- [assertFunction](sasscolor#assertFunction)\n- [assertMap](sasscolor#assertMap)\n- [assertNumber](sasscolor#assertNumber)\n- [assertString](sasscolor#assertString)\n- [change](sasscolor#change)\n- [equals](sasscolor#equals)\n- [get](sasscolor#get)\n- [hashCode](sasscolor#hashCode)\n- [sassIndexToListIndex](sasscolor#sassIndexToListIndex)\n- [tryMap](sasscolor#tryMap)\n\n## Constructors\n\n### constructor\n\n- new SassColor(options: { alpha?: number; blue: number; green: number; red: number }): [SassColor](sasscolor)\n\n- Overrides Value.constructor\n\n  - Defined in [js-api-doc/value/color.d.ts:18](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L18)\n\n  Creates an RGB color.\n\n  throws  \n  `Error` if `red`, `green`, and `blue` aren't between `0` and `255`, or if `alpha` isn't between `0` and `1`.\n\n  #### Parameters\n\n  - ##### options: { alpha?: number; blue: number; green: number; red: number }\n\n    - ##### Optional alpha?: number\n\n    - ##### blue: number\n\n    - ##### green: number\n\n    - ##### red: number\n\n  #### Returns [SassColor](sasscolor)\n\n### constructor\n\n- new SassColor(options: { alpha?: number; hue: number; lightness: number; saturation: number }): [SassColor](sasscolor)\n\n&nbsp;\n\n- Overrides Value.constructor\n\n  - Defined in [js-api-doc/value/color.d.ts:31](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L31)\n\n  Creates an HSL color.\n\n  throws  \n  `Error` if `saturation` or `lightness` aren't between `0` and `100`, or if `alpha` isn't between `0` and `1`.\n\n  #### Parameters\n\n  - ##### options: { alpha?: number; hue: number; lightness: number; saturation: number }\n\n    - ##### Optional alpha?: number\n\n    - ##### hue: number\n\n    - ##### lightness: number\n\n    - ##### saturation: number\n\n  #### Returns [SassColor](sasscolor)\n\n### constructor\n\n- new SassColor(options: { alpha?: number; blackness: number; hue: number; whiteness: number }): [SassColor](sasscolor)\n\n&nbsp;\n\n- Overrides Value.constructor\n\n  - Defined in [js-api-doc/value/color.d.ts:44](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L44)\n\n  Creates an HWB color.\n\n  throws  \n  `Error` if `whiteness` or `blackness` aren't between `0` and `100`, or if `alpha` isn't between `0` and `1`.\n\n  #### Parameters\n\n  - ##### options: { alpha?: number; blackness: number; hue: number; whiteness: number }\n\n    - ##### Optional alpha?: number\n\n    - ##### blackness: number\n\n    - ##### hue: number\n\n    - ##### whiteness: number\n\n  #### Returns [SassColor](sasscolor)\n\n## Accessors\n\n### alpha\n\n- get alpha(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/color.d.ts:76](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L76)\n\n  This color's alpha channel, between `0` and `1`.\n\n  #### Returns number\n\n### asList\n\n- get asList(): List\\<[Value](value)\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:47](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L47)\n\n  This value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns List\\<[Value](value)\\>\n\n  An immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n### blackness\n\n- get blackness(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/color.d.ts:73](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L73)\n\n  This color's blackness, between `0` and `100`.\n\n  #### Returns number\n\n### blue\n\n- get blue(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/color.d.ts:58](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L58)\n\n  This color's blue channel, between `0` and `255`.\n\n  #### Returns number\n\n### green\n\n- get green(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/color.d.ts:55](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L55)\n\n  This color's green channel, between `0` and `255`.\n\n  #### Returns number\n\n### hasBrackets\n\n- get hasBrackets(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:55](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L55)\n\n  Whether this value as a list has brackets.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns boolean\n\n### hue\n\n- get hue(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/color.d.ts:61](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L61)\n\n  This color's hue, between `0` and `360`.\n\n  #### Returns number\n\n### isTruthy\n\n- get isTruthy(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:61](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L61)\n\n  Whether the value counts as `true` in an `@if` statement and other contexts.\n\n  #### Returns boolean\n\n### lightness\n\n- get lightness(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/color.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L67)\n\n  This color's lightness, between `0` and `100`.\n\n  #### Returns number\n\n### realNull\n\n- get realNull(): null \\| [Value](value)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L67)\n\n  Returns JavaScript's `null` value if this is [sassNull](../modules#sassNull), and returns `this` otherwise.\n\n  #### Returns null \\| [Value](value)\n\n### red\n\n- get red(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/color.d.ts:52](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L52)\n\n  This color's red channel, between `0` and `255`.\n\n  #### Returns number\n\n### saturation\n\n- get saturation(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/color.d.ts:64](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L64)\n\n  This color's saturation, between `0` and `100`.\n\n  #### Returns number\n\n### separator\n\n- get separator(): [ListSeparator](../modules#ListSeparator)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:75](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L75)\n\n  The separator for this value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns [ListSeparator](../modules#ListSeparator)\n\n### whiteness\n\n- get whiteness(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/color.d.ts:70](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L70)\n\n  This color's whiteness, between `0` and `100`.\n\n  #### Returns number\n\n## Methods\n\n### assertBoolean\n\n- assertBoolean(name?: string): [SassBoolean](sassboolean)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertBoolean](value#assertBoolean)\n\n  - Defined in [js-api-doc/value/index.d.ts:117](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L117)\n\n  Throws if `this` isn't a [SassBoolean](sassboolean).\n\n  ### ⚠️ Heads up!\n\n  Functions should generally use [isTruthy](sasscolor#isTruthy) rather than requiring a literal boolean.\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassBoolean](sassboolean)\n\n### assertColor\n\n- assertColor(name?: string): [SassColor](sasscolor)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertColor](value#assertColor)\n\n  - Defined in [js-api-doc/value/index.d.ts:125](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L125)\n\n  Throws if `this` isn't a [SassColor](sasscolor).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassColor](sasscolor)\n\n### assertFunction\n\n- assertFunction(name?: string): [SassFunction](sassfunction)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertFunction](value#assertFunction)\n\n  - Defined in [js-api-doc/value/index.d.ts:133](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L133)\n\n  Throws if `this` isn't a [SassFunction](sassfunction).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassFunction](sassfunction)\n\n### assertMap\n\n- assertMap(name?: string): [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertMap](value#assertMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:141](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L141)\n\n  Throws if `this` isn't a [SassMap](sassmap).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassMap](sassmap)\n\n### assertNumber\n\n- assertNumber(name?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertNumber](value#assertNumber)\n\n  - Defined in [js-api-doc/value/index.d.ts:149](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L149)\n\n  Throws if `this` isn't a [SassNumber](sassnumber).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### assertString\n\n- assertString(name?: string): [SassString](sassstring)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertString](value#assertString)\n\n  - Defined in [js-api-doc/value/index.d.ts:157](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L157)\n\n  Throws if `this` isn't a [SassString](sassstring).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassString](sassstring)\n\n### change\n\n- change(options: { alpha?: number; blue?: number; green?: number; red?: number }): [SassColor](sasscolor)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/color.d.ts:81](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L81)\n\n  Changes one or more of this color's RGB channels and returns the result.\n\n  #### Parameters\n\n  - ##### options: { alpha?: number; blue?: number; green?: number; red?: number }\n\n    - ##### Optional alpha?: number\n\n    - ##### Optional blue?: number\n\n    - ##### Optional green?: number\n\n    - ##### Optional red?: number\n\n  #### Returns [SassColor](sasscolor)\n\n### change\n\n- change(options: { alpha?: number; hue?: number; lightness?: number; saturation?: number }): [SassColor](sasscolor)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/color.d.ts:91](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L91)\n\n  Changes one or more of this color's HSL channels and returns the result.\n\n  #### Parameters\n\n  - ##### options: { alpha?: number; hue?: number; lightness?: number; saturation?: number }\n\n    - ##### Optional alpha?: number\n\n    - ##### Optional hue?: number\n\n    - ##### Optional lightness?: number\n\n    - ##### Optional saturation?: number\n\n  #### Returns [SassColor](sasscolor)\n\n### change\n\n- change(options: { alpha?: number; blackness?: number; hue?: number; whiteness?: number }): [SassColor](sasscolor)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/color.d.ts:101](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/color.d.ts#L101)\n\n  Changes one or more of this color's HWB channels and returns the result.\n\n  #### Parameters\n\n  - ##### options: { alpha?: number; blackness?: number; hue?: number; whiteness?: number }\n\n    - ##### Optional alpha?: number\n\n    - ##### Optional blackness?: number\n\n    - ##### Optional hue?: number\n\n    - ##### Optional whiteness?: number\n\n  #### Returns [SassColor](sasscolor)\n\n### equals\n\n- equals(other: [Value](value)): boolean\n\n&nbsp;\n\n- Inherited from [Value](value).[equals](value#equals)\n\n  - Defined in [js-api-doc/value/index.d.ts:166](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L166)\n\n  Returns whether `this` represents the same value as `other`.\n\n  #### Parameters\n\n  - ##### other: [Value](value)\n\n  #### Returns boolean\n\n### get\n\n- get(index: number): undefined \\| [Value](value)\n\n&nbsp;\n\n- Inherited from [Value](value).[get](value#get)\n\n  - Defined in [js-api-doc/value/index.d.ts:106](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L106)\n\n  Returns the value at index `index` in this value as a list, or `undefined` if `index` isn't valid for this list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  This is a shorthand for `this.asList.get(index)`, although it may be more efficient in some cases.\n\n  ### ⚠️ Heads up!\n\n  This method uses the same indexing conventions as the `immutable` package: unlike Sass the index of the first element is 0, but like Sass negative numbers index from the end of the list.\n\n  #### Parameters\n\n  - ##### index: number\n\n  #### Returns undefined \\| [Value](value)\n\n### hashCode\n\n- hashCode(): number\n\n&nbsp;\n\n- Inherited from [Value](value).[hashCode](value#hashCode)\n\n  - Defined in [js-api-doc/value/index.d.ts:169](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L169)\n\n  Returns a hash code that can be used to store `this` in a hash map.\n\n  #### Returns number\n\n### sassIndexToListIndex\n\n- sassIndexToListIndex(sassIndex: [Value](value), name?: string): number\n\n&nbsp;\n\n- Inherited from [Value](value).[sassIndexToListIndex](value#sassIndexToListIndex)\n\n  - Defined in [js-api-doc/value/index.d.ts:90](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L90)\n\n  Converts `sassIndex` into a JavaScript-style index into the list returned by [asList](sasscolor#asList).\n\n  Sass indexes are one-based, while JavaScript indexes are zero-based. Sass indexes may also be negative in order to index from the end of the list.\n\n  throws  \n  `Error` If `sassIndex` isn't a number, if that number isn't an integer, or if that integer isn't a valid index for [asList](sasscolor#asList).\n\n  #### Parameters\n\n  - ##### sassIndex: [Value](value)\n\n    The Sass-style index into this as a list.\n\n  - ##### Optional name: string\n\n    The name of the function argument `sassIndex` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### tryMap\n\n- tryMap(): null \\| [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [Value](value).[tryMap](value#tryMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:163](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L163)\n\n  Returns `this` as a map if it counts as one (empty lists count as empty maps) or `null` if it doesn't.\n\n  #### Returns null \\| [SassMap](sassmap)\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [SassColor](sasscolor)\n  - [constructor](sasscolor#constructor)\n  - [alpha](sasscolor#alpha)\n  - [asList](sasscolor#asList)\n  - [blackness](sasscolor#blackness)\n  - [blue](sasscolor#blue)\n  - [green](sasscolor#green)\n  - [hasBrackets](sasscolor#hasBrackets)\n  - [hue](sasscolor#hue)\n  - [isTruthy](sasscolor#isTruthy)\n  - [lightness](sasscolor#lightness)\n  - [realNull](sasscolor#realNull)\n  - [red](sasscolor#red)\n  - [saturation](sasscolor#saturation)\n  - [separator](sasscolor#separator)\n  - [whiteness](sasscolor#whiteness)\n  - [assertBoolean](sasscolor#assertBoolean)\n  - [assertColor](sasscolor#assertColor)\n  - [assertFunction](sasscolor#assertFunction)\n  - [assertMap](sasscolor#assertMap)\n  - [assertNumber](sasscolor#assertNumber)\n  - [assertString](sasscolor#assertString)\n  - [change](sasscolor#change)\n  - [equals](sasscolor#equals)\n  - [get](sasscolor#get)\n  - [hashCode](sasscolor#hashCode)\n  - [sassIndexToListIndex](sasscolor#sassIndexToListIndex)\n  - [tryMap](sasscolor#tryMap)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/SassColor](https://sass-lang.com/documentation/js-api/classes/SassColor)"
- name: Class SassFunction
  id: js-api/classes/sassfunction
  summary: Sass's function type
  description: "# Class SassFunction\n\nSass's [function type](../../values/functions).\n\n### ⚠️ Heads up!\n\nAlthough first-class Sass functions can be processed by custom functions, there's no way to invoke them outside of a Sass stylesheet.\n\n### Hierarchy\n\n- [Value](value)\n  - SassFunction\n\n## Index\n\n### Constructors\n\n- [constructor](sassfunction#constructor)\n\n### Accessors\n\n- [asList](sassfunction#asList)\n- [hasBrackets](sassfunction#hasBrackets)\n- [isTruthy](sassfunction#isTruthy)\n- [realNull](sassfunction#realNull)\n- [separator](sassfunction#separator)\n\n### Methods\n\n- [assertBoolean](sassfunction#assertBoolean)\n- [assertColor](sassfunction#assertColor)\n- [assertFunction](sassfunction#assertFunction)\n- [assertMap](sassfunction#assertMap)\n- [assertNumber](sassfunction#assertNumber)\n- [assertString](sassfunction#assertString)\n- [equals](sassfunction#equals)\n- [get](sassfunction#get)\n- [hashCode](sassfunction#hashCode)\n- [sassIndexToListIndex](sassfunction#sassIndexToListIndex)\n- [tryMap](sassfunction#tryMap)\n\n## Constructors\n\n### constructor\n\n- new SassFunction(signature: string, callback: (args: [Value](value)\\[\\]) =\\> [Value](value)): [SassFunction](sassfunction)\n\n- Overrides Value.constructor\n\n  - Defined in [js-api-doc/value/function.d.ts:21](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/function.d.ts#L21)\n\n  Creates a new first-class function that can be invoked using [`meta.call()`](../../modules/meta#call).\n\n  #### Parameters\n\n  - ##### signature: string\n\n    The function signature, like you'd write for the [`@function rule`](../../at-rules/function).\n\n  - ##### callback: (args: [Value](value)\\[\\]) =\\> [Value](value)\n\n    The callback that's invoked when this function is called, just like for a [CustomFunction](../modules#CustomFunction).\n\n    - - (args: [Value](value)\\[\\]): [Value](value)\n\n      &nbsp;\n\n      - #### Parameters\n\n        - ##### args: [Value](value)\\[\\]\n\n        #### Returns [Value](value)\n\n  #### Returns [SassFunction](sassfunction)\n\n## Accessors\n\n### asList\n\n- get asList(): List\\<[Value](value)\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:47](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L47)\n\n  This value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns List\\<[Value](value)\\>\n\n  An immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n### hasBrackets\n\n- get hasBrackets(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:55](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L55)\n\n  Whether this value as a list has brackets.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns boolean\n\n### isTruthy\n\n- get isTruthy(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:61](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L61)\n\n  Whether the value counts as `true` in an `@if` statement and other contexts.\n\n  #### Returns boolean\n\n### realNull\n\n- get realNull(): null \\| [Value](value)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L67)\n\n  Returns JavaScript's `null` value if this is [sassNull](../modules#sassNull), and returns `this` otherwise.\n\n  #### Returns null \\| [Value](value)\n\n### separator\n\n- get separator(): [ListSeparator](../modules#ListSeparator)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:75](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L75)\n\n  The separator for this value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns [ListSeparator](../modules#ListSeparator)\n\n## Methods\n\n### assertBoolean\n\n- assertBoolean(name?: string): [SassBoolean](sassboolean)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertBoolean](value#assertBoolean)\n\n  - Defined in [js-api-doc/value/index.d.ts:117](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L117)\n\n  Throws if `this` isn't a [SassBoolean](sassboolean).\n\n  ### ⚠️ Heads up!\n\n  Functions should generally use [isTruthy](sassfunction#isTruthy) rather than requiring a literal boolean.\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassBoolean](sassboolean)\n\n### assertColor\n\n- assertColor(name?: string): [SassColor](sasscolor)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertColor](value#assertColor)\n\n  - Defined in [js-api-doc/value/index.d.ts:125](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L125)\n\n  Throws if `this` isn't a [SassColor](sasscolor).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassColor](sasscolor)\n\n### assertFunction\n\n- assertFunction(name?: string): [SassFunction](sassfunction)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertFunction](value#assertFunction)\n\n  - Defined in [js-api-doc/value/index.d.ts:133](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L133)\n\n  Throws if `this` isn't a [SassFunction](sassfunction).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassFunction](sassfunction)\n\n### assertMap\n\n- assertMap(name?: string): [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertMap](value#assertMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:141](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L141)\n\n  Throws if `this` isn't a [SassMap](sassmap).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassMap](sassmap)\n\n### assertNumber\n\n- assertNumber(name?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertNumber](value#assertNumber)\n\n  - Defined in [js-api-doc/value/index.d.ts:149](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L149)\n\n  Throws if `this` isn't a [SassNumber](sassnumber).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### assertString\n\n- assertString(name?: string): [SassString](sassstring)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertString](value#assertString)\n\n  - Defined in [js-api-doc/value/index.d.ts:157](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L157)\n\n  Throws if `this` isn't a [SassString](sassstring).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassString](sassstring)\n\n### equals\n\n- equals(other: [Value](value)): boolean\n\n&nbsp;\n\n- Inherited from [Value](value).[equals](value#equals)\n\n  - Defined in [js-api-doc/value/index.d.ts:166](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L166)\n\n  Returns whether `this` represents the same value as `other`.\n\n  #### Parameters\n\n  - ##### other: [Value](value)\n\n  #### Returns boolean\n\n### get\n\n- get(index: number): undefined \\| [Value](value)\n\n&nbsp;\n\n- Inherited from [Value](value).[get](value#get)\n\n  - Defined in [js-api-doc/value/index.d.ts:106](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L106)\n\n  Returns the value at index `index` in this value as a list, or `undefined` if `index` isn't valid for this list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  This is a shorthand for `this.asList.get(index)`, although it may be more efficient in some cases.\n\n  ### ⚠️ Heads up!\n\n  This method uses the same indexing conventions as the `immutable` package: unlike Sass the index of the first element is 0, but like Sass negative numbers index from the end of the list.\n\n  #### Parameters\n\n  - ##### index: number\n\n  #### Returns undefined \\| [Value](value)\n\n### hashCode\n\n- hashCode(): number\n\n&nbsp;\n\n- Inherited from [Value](value).[hashCode](value#hashCode)\n\n  - Defined in [js-api-doc/value/index.d.ts:169](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L169)\n\n  Returns a hash code that can be used to store `this` in a hash map.\n\n  #### Returns number\n\n### sassIndexToListIndex\n\n- sassIndexToListIndex(sassIndex: [Value](value), name?: string): number\n\n&nbsp;\n\n- Inherited from [Value](value).[sassIndexToListIndex](value#sassIndexToListIndex)\n\n  - Defined in [js-api-doc/value/index.d.ts:90](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L90)\n\n  Converts `sassIndex` into a JavaScript-style index into the list returned by [asList](sassfunction#asList).\n\n  Sass indexes are one-based, while JavaScript indexes are zero-based. Sass indexes may also be negative in order to index from the end of the list.\n\n  throws  \n  `Error` If `sassIndex` isn't a number, if that number isn't an integer, or if that integer isn't a valid index for [asList](sassfunction#asList).\n\n  #### Parameters\n\n  - ##### sassIndex: [Value](value)\n\n    The Sass-style index into this as a list.\n\n  - ##### Optional name: string\n\n    The name of the function argument `sassIndex` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### tryMap\n\n- tryMap(): null \\| [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [Value](value).[tryMap](value#tryMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:163](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L163)\n\n  Returns `this` as a map if it counts as one (empty lists count as empty maps) or `null` if it doesn't.\n\n  #### Returns null \\| [SassMap](sassmap)\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [SassFunction](sassfunction)\n  - [constructor](sassfunction#constructor)\n  - [asList](sassfunction#asList)\n  - [hasBrackets](sassfunction#hasBrackets)\n  - [isTruthy](sassfunction#isTruthy)\n  - [realNull](sassfunction#realNull)\n  - [separator](sassfunction#separator)\n  - [assertBoolean](sassfunction#assertBoolean)\n  - [assertColor](sassfunction#assertColor)\n  - [assertFunction](sassfunction#assertFunction)\n  - [assertMap](sassfunction#assertMap)\n  - [assertNumber](sassfunction#assertNumber)\n  - [assertString](sassfunction#assertString)\n  - [equals](sassfunction#equals)\n  - [get](sassfunction#get)\n  - [hashCode](sassfunction#hashCode)\n  - [sassIndexToListIndex](sassfunction#sassIndexToListIndex)\n  - [tryMap](sassfunction#tryMap)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/SassFunction](https://sass-lang.com/documentation/js-api/classes/SassFunction)"
- name: Class SassList
  id: js-api/classes/sasslist
  summary: Sass's list type
  description: "# Class SassList\n\nSass's [list type](../../values/lists).\n\n### Hierarchy\n\n- [Value](value)\n  - SassList\n    - [SassArgumentList](sassargumentlist)\n\n## Index\n\n### Constructors\n\n- [constructor](sasslist#constructor)\n\n### Accessors\n\n- [asList](sasslist#asList)\n- [hasBrackets](sasslist#hasBrackets)\n- [isTruthy](sasslist#isTruthy)\n- [realNull](sasslist#realNull)\n\n### Methods\n\n- [assertBoolean](sasslist#assertBoolean)\n- [assertColor](sasslist#assertColor)\n- [assertFunction](sasslist#assertFunction)\n- [assertMap](sasslist#assertMap)\n- [assertNumber](sasslist#assertNumber)\n- [assertString](sasslist#assertString)\n- [equals](sasslist#equals)\n- [get](sasslist#get)\n- [hashCode](sasslist#hashCode)\n- [sassIndexToListIndex](sasslist#sassIndexToListIndex)\n- [tryMap](sasslist#tryMap)\n\n## Constructors\n\n### constructor\n\n- new SassList(contents: [Value](value)\\[\\] \\| List\\<[Value](value)\\>, options?: { brackets?: boolean; separator?: [ListSeparator](../modules#ListSeparator) }): [SassList](sasslist)\n\n- Overrides Value.constructor\n\n  - Defined in [js-api-doc/value/list.d.ts:33](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/list.d.ts#L33)\n\n  Creates a new list.\n\n  #### Parameters\n\n  - ##### contents: [Value](value)\\[\\] \\| List\\<[Value](value)\\>\n\n    The contents of the list. This may be either a plain JavaScript array or an immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n  - ##### Optional options: { brackets?: boolean; separator?: [ListSeparator](../modules#ListSeparator) }\n\n    - ##### Optional brackets?: boolean\n\n      Whether the list has square brackets. Defaults to `false`.\n\n    - ##### Optional separator?: [ListSeparator](../modules#ListSeparator)\n\n      The separator to use between elements of this list. Defaults to `','`.\n\n  #### Returns [SassList](sasslist)\n\n### constructor\n\n- new SassList(options?: { brackets?: boolean; separator?: [ListSeparator](../modules#ListSeparator) }): [SassList](sasslist)\n\n&nbsp;\n\n- Overrides Value.constructor\n\n  - Defined in [js-api-doc/value/list.d.ts:50](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/list.d.ts#L50)\n\n  Creates an empty list.\n\n  #### Parameters\n\n  - ##### Optional options: { brackets?: boolean; separator?: [ListSeparator](../modules#ListSeparator) }\n\n    - ##### Optional brackets?: boolean\n\n      Whether the list has square brackets. Defaults to `false`.\n\n    - ##### Optional separator?: [ListSeparator](../modules#ListSeparator)\n\n      The separator to use between elements of this list. Defaults to `','`.\n\n  #### Returns [SassList](sasslist)\n\n## Accessors\n\n### asList\n\n- get asList(): List\\<[Value](value)\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:47](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L47)\n\n  This value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns List\\<[Value](value)\\>\n\n  An immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n### hasBrackets\n\n- get hasBrackets(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:55](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L55)\n\n  Whether this value as a list has brackets.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns boolean\n\n### isTruthy\n\n- get isTruthy(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:61](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L61)\n\n  Whether the value counts as `true` in an `@if` statement and other contexts.\n\n  #### Returns boolean\n\n### realNull\n\n- get realNull(): null \\| [Value](value)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L67)\n\n  Returns JavaScript's `null` value if this is [sassNull](../modules#sassNull), and returns `this` otherwise.\n\n  #### Returns null \\| [Value](value)\n\n## Methods\n\n### assertBoolean\n\n- assertBoolean(name?: string): [SassBoolean](sassboolean)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertBoolean](value#assertBoolean)\n\n  - Defined in [js-api-doc/value/index.d.ts:117](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L117)\n\n  Throws if `this` isn't a [SassBoolean](sassboolean).\n\n  ### ⚠️ Heads up!\n\n  Functions should generally use [isTruthy](sasslist#isTruthy) rather than requiring a literal boolean.\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassBoolean](sassboolean)\n\n### assertColor\n\n- assertColor(name?: string): [SassColor](sasscolor)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertColor](value#assertColor)\n\n  - Defined in [js-api-doc/value/index.d.ts:125](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L125)\n\n  Throws if `this` isn't a [SassColor](sasscolor).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassColor](sasscolor)\n\n### assertFunction\n\n- assertFunction(name?: string): [SassFunction](sassfunction)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertFunction](value#assertFunction)\n\n  - Defined in [js-api-doc/value/index.d.ts:133](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L133)\n\n  Throws if `this` isn't a [SassFunction](sassfunction).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassFunction](sassfunction)\n\n### assertMap\n\n- assertMap(name?: string): [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertMap](value#assertMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:141](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L141)\n\n  Throws if `this` isn't a [SassMap](sassmap).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassMap](sassmap)\n\n### assertNumber\n\n- assertNumber(name?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertNumber](value#assertNumber)\n\n  - Defined in [js-api-doc/value/index.d.ts:149](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L149)\n\n  Throws if `this` isn't a [SassNumber](sassnumber).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### assertString\n\n- assertString(name?: string): [SassString](sassstring)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertString](value#assertString)\n\n  - Defined in [js-api-doc/value/index.d.ts:157](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L157)\n\n  Throws if `this` isn't a [SassString](sassstring).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassString](sassstring)\n\n### equals\n\n- equals(other: [Value](value)): boolean\n\n&nbsp;\n\n- Inherited from [Value](value).[equals](value#equals)\n\n  - Defined in [js-api-doc/value/index.d.ts:166](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L166)\n\n  Returns whether `this` represents the same value as `other`.\n\n  #### Parameters\n\n  - ##### other: [Value](value)\n\n  #### Returns boolean\n\n### get\n\n- get(index: number): undefined \\| [Value](value)\n\n&nbsp;\n\n- Inherited from [Value](value).[get](value#get)\n\n  - Defined in [js-api-doc/value/index.d.ts:106](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L106)\n\n  Returns the value at index `index` in this value as a list, or `undefined` if `index` isn't valid for this list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  This is a shorthand for `this.asList.get(index)`, although it may be more efficient in some cases.\n\n  ### ⚠️ Heads up!\n\n  This method uses the same indexing conventions as the `immutable` package: unlike Sass the index of the first element is 0, but like Sass negative numbers index from the end of the list.\n\n  #### Parameters\n\n  - ##### index: number\n\n  #### Returns undefined \\| [Value](value)\n\n### hashCode\n\n- hashCode(): number\n\n&nbsp;\n\n- Inherited from [Value](value).[hashCode](value#hashCode)\n\n  - Defined in [js-api-doc/value/index.d.ts:169](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L169)\n\n  Returns a hash code that can be used to store `this` in a hash map.\n\n  #### Returns number\n\n### sassIndexToListIndex\n\n- sassIndexToListIndex(sassIndex: [Value](value), name?: string): number\n\n&nbsp;\n\n- Inherited from [Value](value).[sassIndexToListIndex](value#sassIndexToListIndex)\n\n  - Defined in [js-api-doc/value/index.d.ts:90](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L90)\n\n  Converts `sassIndex` into a JavaScript-style index into the list returned by [asList](sasslist#asList).\n\n  Sass indexes are one-based, while JavaScript indexes are zero-based. Sass indexes may also be negative in order to index from the end of the list.\n\n  throws  \n  `Error` If `sassIndex` isn't a number, if that number isn't an integer, or if that integer isn't a valid index for [asList](sasslist#asList).\n\n  #### Parameters\n\n  - ##### sassIndex: [Value](value)\n\n    The Sass-style index into this as a list.\n\n  - ##### Optional name: string\n\n    The name of the function argument `sassIndex` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### tryMap\n\n- tryMap(): null \\| [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [Value](value).[tryMap](value#tryMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:163](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L163)\n\n  Returns `this` as a map if it counts as one (empty lists count as empty maps) or `null` if it doesn't.\n\n  #### Returns null \\| [SassMap](sassmap)\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [SassList](sasslist)\n  - [constructor](sasslist#constructor)\n  - [asList](sasslist#asList)\n  - [hasBrackets](sasslist#hasBrackets)\n  - [isTruthy](sasslist#isTruthy)\n  - [realNull](sasslist#realNull)\n  - [assertBoolean](sasslist#assertBoolean)\n  - [assertColor](sasslist#assertColor)\n  - [assertFunction](sasslist#assertFunction)\n  - [assertMap](sasslist#assertMap)\n  - [assertNumber](sasslist#assertNumber)\n  - [assertString](sasslist#assertString)\n  - [equals](sasslist#equals)\n  - [get](sasslist#get)\n  - [hashCode](sasslist#hashCode)\n  - [sassIndexToListIndex](sasslist#sassIndexToListIndex)\n  - [tryMap](sasslist#tryMap)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/SassList](https://sass-lang.com/documentation/js-api/classes/SassList)"
- name: Class SassMap
  id: js-api/classes/sassmap
  summary: Sass's map type
  description: "# Class SassMap\n\nSass's [map type](../../values/maps).\n\n### Hierarchy\n\n- [Value](value)\n  - SassMap\n\n## Index\n\n### Constructors\n\n- [constructor](sassmap#constructor)\n\n### Accessors\n\n- [asList](sassmap#asList)\n- [contents](sassmap#contents)\n- [hasBrackets](sassmap#hasBrackets)\n- [isTruthy](sassmap#isTruthy)\n- [realNull](sassmap#realNull)\n- [separator](sassmap#separator)\n\n### Methods\n\n- [assertBoolean](sassmap#assertBoolean)\n- [assertColor](sassmap#assertColor)\n- [assertFunction](sassmap#assertFunction)\n- [assertMap](sassmap#assertMap)\n- [assertNumber](sassmap#assertNumber)\n- [assertString](sassmap#assertString)\n- [equals](sassmap#equals)\n- [get](sassmap#get)\n- [hashCode](sassmap#hashCode)\n- [sassIndexToListIndex](sassmap#sassIndexToListIndex)\n\n## Constructors\n\n### constructor\n\n- new SassMap(contents?: OrderedMap\\<[Value](value), [Value](value)\\>): [SassMap](sassmap)\n\n- Overrides Value.constructor\n\n  - Defined in [js-api-doc/value/map.d.ts:19](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/map.d.ts#L19)\n\n  Creates a new map.\n\n  #### Parameters\n\n  - ##### Optional contents: OrderedMap\\<[Value](value), [Value](value)\\>\n\n    The contents of the map. This is an immutable \\[\\[OrderedMap\\]\\] from the [`immutable` package](https://immutable-js.com/). Defaults to an empty map.\n\n  #### Returns [SassMap](sassmap)\n\n## Accessors\n\n### asList\n\n- get asList(): List\\<[Value](value)\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:47](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L47)\n\n  This value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns List\\<[Value](value)\\>\n\n  An immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n### contents\n\n- get contents(): OrderedMap\\<[Value](value), [Value](value)\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/map.d.ts:25](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/map.d.ts#L25)\n\n  Returns the contents of this map as an immutable \\[\\[OrderedMap\\]\\] from the [`immutable` package](https://immutable-js.com/).\n\n  #### Returns OrderedMap\\<[Value](value), [Value](value)\\>\n\n### hasBrackets\n\n- get hasBrackets(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:55](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L55)\n\n  Whether this value as a list has brackets.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns boolean\n\n### isTruthy\n\n- get isTruthy(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:61](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L61)\n\n  Whether the value counts as `true` in an `@if` statement and other contexts.\n\n  #### Returns boolean\n\n### realNull\n\n- get realNull(): null \\| [Value](value)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L67)\n\n  Returns JavaScript's `null` value if this is [sassNull](../modules#sassNull), and returns `this` otherwise.\n\n  #### Returns null \\| [Value](value)\n\n### separator\n\n- get separator(): [ListSeparator](../modules#ListSeparator)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:75](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L75)\n\n  The separator for this value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns [ListSeparator](../modules#ListSeparator)\n\n## Methods\n\n### assertBoolean\n\n- assertBoolean(name?: string): [SassBoolean](sassboolean)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertBoolean](value#assertBoolean)\n\n  - Defined in [js-api-doc/value/index.d.ts:117](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L117)\n\n  Throws if `this` isn't a [SassBoolean](sassboolean).\n\n  ### ⚠️ Heads up!\n\n  Functions should generally use [isTruthy](sassmap#isTruthy) rather than requiring a literal boolean.\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassBoolean](sassboolean)\n\n### assertColor\n\n- assertColor(name?: string): [SassColor](sasscolor)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertColor](value#assertColor)\n\n  - Defined in [js-api-doc/value/index.d.ts:125](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L125)\n\n  Throws if `this` isn't a [SassColor](sasscolor).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassColor](sasscolor)\n\n### assertFunction\n\n- assertFunction(name?: string): [SassFunction](sassfunction)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertFunction](value#assertFunction)\n\n  - Defined in [js-api-doc/value/index.d.ts:133](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L133)\n\n  Throws if `this` isn't a [SassFunction](sassfunction).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassFunction](sassfunction)\n\n### assertMap\n\n- assertMap(name?: string): [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertMap](value#assertMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:141](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L141)\n\n  Throws if `this` isn't a [SassMap](sassmap).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassMap](sassmap)\n\n### assertNumber\n\n- assertNumber(name?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertNumber](value#assertNumber)\n\n  - Defined in [js-api-doc/value/index.d.ts:149](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L149)\n\n  Throws if `this` isn't a [SassNumber](sassnumber).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### assertString\n\n- assertString(name?: string): [SassString](sassstring)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertString](value#assertString)\n\n  - Defined in [js-api-doc/value/index.d.ts:157](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L157)\n\n  Throws if `this` isn't a [SassString](sassstring).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassString](sassstring)\n\n### equals\n\n- equals(other: [Value](value)): boolean\n\n&nbsp;\n\n- Inherited from [Value](value).[equals](value#equals)\n\n  - Defined in [js-api-doc/value/index.d.ts:166](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L166)\n\n  Returns whether `this` represents the same value as `other`.\n\n  #### Parameters\n\n  - ##### other: [Value](value)\n\n  #### Returns boolean\n\n### get\n\n- get(key: [Value](value)): undefined \\| [Value](value)\n\n&nbsp;\n\n- Overrides [Value](value).[get](value#get)\n\n  - Defined in [js-api-doc/value/map.d.ts:34](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/map.d.ts#L34)\n\n  Returns the value associated with `key` in this map, or `undefined` if `key` isn't in the map.\n\n  This is a shorthand for `this.contents.get(key)`, although it may be more efficient in some cases.\n\n  #### Parameters\n\n  - ##### key: [Value](value)\n\n  #### Returns undefined \\| [Value](value)\n\n### get\n\n- get(index: number): undefined \\| [SassList](sasslist)\n\n&nbsp;\n\n- Overrides Value.get\n\n  - Defined in [js-api-doc/value/map.d.ts:37](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/map.d.ts#L37)\n\n  Inherited from [Value.get](value#get).\n\n  #### Parameters\n\n  - ##### index: number\n\n  #### Returns undefined \\| [SassList](sasslist)\n\n### hashCode\n\n- hashCode(): number\n\n&nbsp;\n\n- Inherited from [Value](value).[hashCode](value#hashCode)\n\n  - Defined in [js-api-doc/value/index.d.ts:169](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L169)\n\n  Returns a hash code that can be used to store `this` in a hash map.\n\n  #### Returns number\n\n### sassIndexToListIndex\n\n- sassIndexToListIndex(sassIndex: [Value](value), name?: string): number\n\n&nbsp;\n\n- Inherited from [Value](value).[sassIndexToListIndex](value#sassIndexToListIndex)\n\n  - Defined in [js-api-doc/value/index.d.ts:90](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L90)\n\n  Converts `sassIndex` into a JavaScript-style index into the list returned by [asList](sassmap#asList).\n\n  Sass indexes are one-based, while JavaScript indexes are zero-based. Sass indexes may also be negative in order to index from the end of the list.\n\n  throws  \n  `Error` If `sassIndex` isn't a number, if that number isn't an integer, or if that integer isn't a valid index for [asList](sassmap#asList).\n\n  #### Parameters\n\n  - ##### sassIndex: [Value](value)\n\n    The Sass-style index into this as a list.\n\n  - ##### Optional name: string\n\n    The name of the function argument `sassIndex` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [SassMap](sassmap)\n  - [constructor](sassmap#constructor)\n  - [asList](sassmap#asList)\n  - [contents](sassmap#contents)\n  - [hasBrackets](sassmap#hasBrackets)\n  - [isTruthy](sassmap#isTruthy)\n  - [realNull](sassmap#realNull)\n  - [separator](sassmap#separator)\n  - [assertBoolean](sassmap#assertBoolean)\n  - [assertColor](sassmap#assertColor)\n  - [assertFunction](sassmap#assertFunction)\n  - [assertMap](sassmap#assertMap)\n  - [assertNumber](sassmap#assertNumber)\n  - [assertString](sassmap#assertString)\n  - [equals](sassmap#equals)\n  - [get](sassmap#get)\n  - [hashCode](sassmap#hashCode)\n  - [sassIndexToListIndex](sassmap#sassIndexToListIndex)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/SassMap](https://sass-lang.com/documentation/js-api/classes/SassMap)"
- name: Class SassNumber
  id: js-api/classes/sassnumber
  summary: Sass's number type
  description: "# Class SassNumber\n\nSass's [number type](../../values/numbers).\n\n### Hierarchy\n\n- [Value](value)\n  - SassNumber\n\n## Index\n\n### Constructors\n\n- [constructor](sassnumber#constructor)\n\n### Accessors\n\n- [asInt](sassnumber#asInt)\n- [asList](sassnumber#asList)\n- [denominatorUnits](sassnumber#denominatorUnits)\n- [hasBrackets](sassnumber#hasBrackets)\n- [hasUnits](sassnumber#hasUnits)\n- [isInt](sassnumber#isInt)\n- [isTruthy](sassnumber#isTruthy)\n- [numeratorUnits](sassnumber#numeratorUnits)\n- [realNull](sassnumber#realNull)\n- [separator](sassnumber#separator)\n- [value](sassnumber#value)\n\n### Methods\n\n- [assertBoolean](sassnumber#assertBoolean)\n- [assertColor](sassnumber#assertColor)\n- [assertFunction](sassnumber#assertFunction)\n- [assertInRange](sassnumber#assertInRange)\n- [assertInt](sassnumber#assertInt)\n- [assertMap](sassnumber#assertMap)\n- [assertNoUnits](sassnumber#assertNoUnits)\n- [assertNumber](sassnumber#assertNumber)\n- [assertString](sassnumber#assertString)\n- [assertUnit](sassnumber#assertUnit)\n- [coerce](sassnumber#coerce)\n- [coerceToMatch](sassnumber#coerceToMatch)\n- [coerceValue](sassnumber#coerceValue)\n- [coerceValueToMatch](sassnumber#coerceValueToMatch)\n- [compatibleWithUnit](sassnumber#compatibleWithUnit)\n- [convert](sassnumber#convert)\n- [convertToMatch](sassnumber#convertToMatch)\n- [convertValue](sassnumber#convertValue)\n- [convertValueToMatch](sassnumber#convertValueToMatch)\n- [equals](sassnumber#equals)\n- [get](sassnumber#get)\n- [hasUnit](sassnumber#hasUnit)\n- [hashCode](sassnumber#hashCode)\n- [sassIndexToListIndex](sassnumber#sassIndexToListIndex)\n- [tryMap](sassnumber#tryMap)\n\n## Constructors\n\n### constructor\n\n- new SassNumber(value: number, unit?: string \\| { denominatorUnits?: string\\[\\] \\| List\\<string\\>; numeratorUnits?: string\\[\\] \\| List\\<string\\> }): [SassNumber](sassnumber)\n\n- Overrides Value.constructor\n\n  - Defined in [js-api-doc/value/number.d.ts:32](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L32)\n\n  Creates a new number with more complex units than just a single numerator.\n\n  Upon construction, any compatible numerator and denominator units are simplified away according to the conversion factor between them.\n\n  #### Parameters\n\n  - ##### value: number\n\n    The number's numeric value.\n\n  - ##### Optional unit: string \\| { denominatorUnits?: string\\[\\] \\| List\\<string\\>; numeratorUnits?: string\\[\\] \\| List\\<string\\> }\n\n    If this is a string, it's used as the single numerator unit for the number.\n\n  #### Returns [SassNumber](sassnumber)\n\n## Accessors\n\n### asInt\n\n- get asInt(): null \\| number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:52](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L52)\n\n  If [value](sassnumber#value) is an integer according to [isInt](sassnumber#isInt), returns [value](sassnumber#value) rounded to that integer. If it's not an integer, returns `null`.\n\n  #### Returns null \\| number\n\n### asList\n\n- get asList(): List\\<[Value](value)\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:47](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L47)\n\n  This value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns List\\<[Value](value)\\>\n\n  An immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n### denominatorUnits\n\n- get denominatorUnits(): List\\<string\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:64](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L64)\n\n  This number's denominator units as an immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n  #### Returns List\\<string\\>\n\n### hasBrackets\n\n- get hasBrackets(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:55](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L55)\n\n  Whether this value as a list has brackets.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns boolean\n\n### hasUnits\n\n- get hasUnits(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L67)\n\n  Whether this number has any numerator or denominator units.\n\n  #### Returns boolean\n\n### isInt\n\n- get isInt(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:46](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L46)\n\n  Whether [value](sassnumber#value) is an integer according to Sass's equality logic.\n\n  #### Returns boolean\n\n### isTruthy\n\n- get isTruthy(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:61](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L61)\n\n  Whether the value counts as `true` in an `@if` statement and other contexts.\n\n  #### Returns boolean\n\n### numeratorUnits\n\n- get numeratorUnits(): List\\<string\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:58](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L58)\n\n  This number's numerator units as an immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n  #### Returns List\\<string\\>\n\n### realNull\n\n- get realNull(): null \\| [Value](value)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L67)\n\n  Returns JavaScript's `null` value if this is [sassNull](../modules#sassNull), and returns `this` otherwise.\n\n  #### Returns null \\| [Value](value)\n\n### separator\n\n- get separator(): [ListSeparator](../modules#ListSeparator)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:75](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L75)\n\n  The separator for this value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns [ListSeparator](../modules#ListSeparator)\n\n### value\n\n- get value(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:43](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L43)\n\n  This number's numeric value.\n\n  #### Returns number\n\n## Methods\n\n### assertBoolean\n\n- assertBoolean(name?: string): [SassBoolean](sassboolean)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertBoolean](value#assertBoolean)\n\n  - Defined in [js-api-doc/value/index.d.ts:117](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L117)\n\n  Throws if `this` isn't a [SassBoolean](sassboolean).\n\n  ### ⚠️ Heads up!\n\n  Functions should generally use [isTruthy](sassnumber#isTruthy) rather than requiring a literal boolean.\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassBoolean](sassboolean)\n\n### assertColor\n\n- assertColor(name?: string): [SassColor](sasscolor)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertColor](value#assertColor)\n\n  - Defined in [js-api-doc/value/index.d.ts:125](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L125)\n\n  Throws if `this` isn't a [SassColor](sasscolor).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassColor](sasscolor)\n\n### assertFunction\n\n- assertFunction(name?: string): [SassFunction](sassfunction)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertFunction](value#assertFunction)\n\n  - Defined in [js-api-doc/value/index.d.ts:133](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L133)\n\n  Throws if `this` isn't a [SassFunction](sassfunction).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassFunction](sassfunction)\n\n### assertInRange\n\n- assertInRange(min: number, max: number, name?: string): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:86](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L86)\n\n  Returns [value](sassnumber#value) if it's within `min` and `max`. If [value](sassnumber#value) is equal to `min` or `max` according to Sass's equality, returns `min` or `max` respectively. Otherwise, throws an error.\n\n  #### Parameters\n\n  - ##### min: number\n\n  - ##### max: number\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### assertInt\n\n- assertInt(name?: string): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:76](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L76)\n\n  If [value](sassnumber#value) is an integer according to [isInt](sassnumber#isInt), returns it rounded to that integer. Otherwise, throws an error.\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### assertMap\n\n- assertMap(name?: string): [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertMap](value#assertMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:141](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L141)\n\n  Throws if `this` isn't a [SassMap](sassmap).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassMap](sassmap)\n\n### assertNoUnits\n\n- assertNoUnits(name?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:94](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L94)\n\n  If this number has no units, returns it. Otherwise, throws an error.\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### assertNumber\n\n- assertNumber(name?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertNumber](value#assertNumber)\n\n  - Defined in [js-api-doc/value/index.d.ts:149](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L149)\n\n  Throws if `this` isn't a [SassNumber](sassnumber).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### assertString\n\n- assertString(name?: string): [SassString](sassstring)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertString](value#assertString)\n\n  - Defined in [js-api-doc/value/index.d.ts:157](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L157)\n\n  Throws if `this` isn't a [SassString](sassstring).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassString](sassstring)\n\n### assertUnit\n\n- assertUnit(unit: string, name?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:103](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L103)\n\n  If this number has `unit` as its only unit (and as a numerator), returns this number. Otherwise, throws an error.\n\n  #### Parameters\n\n  - ##### unit: string\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### coerce\n\n- coerce(newNumerators: string\\[\\] \\| List\\<string\\>, newDenominators: string\\[\\] \\| List\\<string\\>, name?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:223](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L223)\n\n  Returns a copy of this number, converted to the units represented by `newNumerators` and `newDenominators`.\n\n  Unlike [convert](sassnumber#convert) this does *not* throw an error if this number is unitless and either `newNumerators` or `newDenominators` are not empty, or vice-versa. Instead, it treats all unitless numbers as convertible to and from all units without changing the value.\n\n  throws  \n  `Error` if this number's units are incompatible with `newNumerators` and `newDenominators`.\n\n  #### Parameters\n\n  - ##### newNumerators: string\\[\\] \\| List\\<string\\>\n\n    The numerator units to convert this number to. This may be either a plain JavaScript array or an immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n  - ##### newDenominators: string\\[\\] \\| List\\<string\\>\n\n    The denominator units to convert this number to. This may be either a plain JavaScript array or an immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### coerceToMatch\n\n- coerceToMatch(other: [SassNumber](sassnumber), name?: string, otherName?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:247](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L247)\n\n  Returns a copy of this number, converted to the units represented by `newNumerators` and `newDenominators`.\n\n  Unlike [convertToMatch](sassnumber#convertToMatch) this does *not* throw an error if this number is unitless and either `newNumerators` or `newDenominators` are not empty, or vice-versa. Instead, it treats all unitless numbers as convertible to and from all units without changing the value.\n\n  throws  \n  `Error` if this number's units are incompatible with `other`'s units.\n\n  #### Parameters\n\n  - ##### other: [SassNumber](sassnumber)\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  - ##### Optional otherName: string\n\n    The name of the function argument `other` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### coerceValue\n\n- coerceValue(newNumerators: string\\[\\] \\| List\\<string\\>, newDenominators: string\\[\\] \\| List\\<string\\>, name?: string): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:276](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L276)\n\n  Returns [value](sassnumber#value), converted to the units represented by `newNumerators` and `newDenominators`.\n\n  Unlike [convertValue](sassnumber#convertValue) this does *not* throw an error if this number is unitless and either `newNumerators` or `newDenominators` are not empty, or vice-versa. Instead, it treats all unitless numbers as convertible to and from all units without changing the value.\n\n  throws  \n  `Error` if this number's units are incompatible with `newNumerators` and `newDenominators`.\n\n  #### Parameters\n\n  - ##### newNumerators: string\\[\\] \\| List\\<string\\>\n\n    The numerator units to convert [value](sassnumber#value) to. This may be either a plain JavaScript array or an immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n  - ##### newDenominators: string\\[\\] \\| List\\<string\\>\n\n    The denominator units to convert [value](sassnumber#value) to. This may be either a plain JavaScript array or an immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### coerceValueToMatch\n\n- coerceValueToMatch(other: [SassNumber](sassnumber), name?: string, otherName?: string): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:300](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L300)\n\n  Returns [value](sassnumber#value), converted to the units represented by `newNumerators` and `newDenominators`.\n\n  Unlike [convertValueToMatch](sassnumber#convertValueToMatch) this does *not* throw an error if this number is unitless and either `newNumerators` or `newDenominators` are not empty, or vice-versa. Instead, it treats all unitless numbers as convertible to and from all units without changing the value.\n\n  throws  \n  `Error` if this number's units are incompatible with `other`'s units.\n\n  #### Parameters\n\n  - ##### other: [SassNumber](sassnumber)\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  - ##### Optional otherName: string\n\n    The name of the function argument `other` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### compatibleWithUnit\n\n- compatibleWithUnit(unit: string): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:112](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L112)\n\n  Whether this has exactly one numerator unit, and that unit is compatible with `unit`.\n\n  #### Parameters\n\n  - ##### unit: string\n\n  #### Returns boolean\n\n### convert\n\n- convert(newNumerators: string\\[\\] \\| List\\<string\\>, newDenominators: string\\[\\] \\| List\\<string\\>, name?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:133](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L133)\n\n  Returns a copy of this number, converted to the units represented by `newNumerators` and `newDenominators`.\n\n  throws  \n  `Error` if this number's units are incompatible with `newNumerators` and `newDenominators`; or if this number is unitless and either `newNumerators` or `newDenominators` are not empty, or vice-versa.\n\n  #### Parameters\n\n  - ##### newNumerators: string\\[\\] \\| List\\<string\\>\n\n    The numerator units to convert this number to. This may be either a plain JavaScript array or an immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n  - ##### newDenominators: string\\[\\] \\| List\\<string\\>\n\n    The denominator units to convert this number to. This may be either a plain JavaScript array or an immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### convertToMatch\n\n- convertToMatch(other: [SassNumber](sassnumber), name?: string, otherName?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:151](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L151)\n\n  Returns a copy of this number, converted to the same units as `other`.\n\n  throws  \n  `Error` if this number's units are incompatible with `other`'s units, or if either number is unitless but the other is not.\n\n  #### Parameters\n\n  - ##### other: [SassNumber](sassnumber)\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  - ##### Optional otherName: string\n\n    The name of the function argument `other` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### convertValue\n\n- convertValue(newNumerators: string\\[\\] \\| List\\<string\\>, newDenominators: string\\[\\] \\| List\\<string\\>, name?: string): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:176](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L176)\n\n  Returns [value](sassnumber#value), converted to the units represented by `newNumerators` and `newDenominators`.\n\n  throws  \n  `Error` if this number's units are incompatible with `newNumerators` and `newDenominators`; or if this number is unitless and either `newNumerators` or `newDenominators` are not empty, or vice-versa.\n\n  #### Parameters\n\n  - ##### newNumerators: string\\[\\] \\| List\\<string\\>\n\n    The numerator units to convert [value](sassnumber#value) to. This may be either a plain JavaScript array or an immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n  - ##### newDenominators: string\\[\\] \\| List\\<string\\>\n\n    The denominator units to convert [value](sassnumber#value) to. This may be either a plain JavaScript array or an immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### convertValueToMatch\n\n- convertValueToMatch(other: [SassNumber](sassnumber), name?: string, otherName?: string): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:194](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L194)\n\n  Returns [value](sassnumber#value), converted to the same units as `other`.\n\n  throws  \n  `Error` if this number's units are incompatible with `other`'s units, or if either number is unitless but the other is not.\n\n  #### Parameters\n\n  - ##### other: [SassNumber](sassnumber)\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  - ##### Optional otherName: string\n\n    The name of the function argument `other` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### equals\n\n- equals(other: [Value](value)): boolean\n\n&nbsp;\n\n- Inherited from [Value](value).[equals](value#equals)\n\n  - Defined in [js-api-doc/value/index.d.ts:166](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L166)\n\n  Returns whether `this` represents the same value as `other`.\n\n  #### Parameters\n\n  - ##### other: [Value](value)\n\n  #### Returns boolean\n\n### get\n\n- get(index: number): undefined \\| [Value](value)\n\n&nbsp;\n\n- Inherited from [Value](value).[get](value#get)\n\n  - Defined in [js-api-doc/value/index.d.ts:106](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L106)\n\n  Returns the value at index `index` in this value as a list, or `undefined` if `index` isn't valid for this list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  This is a shorthand for `this.asList.get(index)`, although it may be more efficient in some cases.\n\n  ### ⚠️ Heads up!\n\n  This method uses the same indexing conventions as the `immutable` package: unlike Sass the index of the first element is 0, but like Sass negative numbers index from the end of the list.\n\n  #### Parameters\n\n  - ##### index: number\n\n  #### Returns undefined \\| [Value](value)\n\n### hasUnit\n\n- hasUnit(unit: string): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/number.d.ts:106](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/number.d.ts#L106)\n\n  Whether this number has `unit` as its only unit (and as a numerator).\n\n  #### Parameters\n\n  - ##### unit: string\n\n  #### Returns boolean\n\n### hashCode\n\n- hashCode(): number\n\n&nbsp;\n\n- Inherited from [Value](value).[hashCode](value#hashCode)\n\n  - Defined in [js-api-doc/value/index.d.ts:169](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L169)\n\n  Returns a hash code that can be used to store `this` in a hash map.\n\n  #### Returns number\n\n### sassIndexToListIndex\n\n- sassIndexToListIndex(sassIndex: [Value](value), name?: string): number\n\n&nbsp;\n\n- Inherited from [Value](value).[sassIndexToListIndex](value#sassIndexToListIndex)\n\n  - Defined in [js-api-doc/value/index.d.ts:90](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L90)\n\n  Converts `sassIndex` into a JavaScript-style index into the list returned by [asList](sassnumber#asList).\n\n  Sass indexes are one-based, while JavaScript indexes are zero-based. Sass indexes may also be negative in order to index from the end of the list.\n\n  throws  \n  `Error` If `sassIndex` isn't a number, if that number isn't an integer, or if that integer isn't a valid index for [asList](sassnumber#asList).\n\n  #### Parameters\n\n  - ##### sassIndex: [Value](value)\n\n    The Sass-style index into this as a list.\n\n  - ##### Optional name: string\n\n    The name of the function argument `sassIndex` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### tryMap\n\n- tryMap(): null \\| [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [Value](value).[tryMap](value#tryMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:163](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L163)\n\n  Returns `this` as a map if it counts as one (empty lists count as empty maps) or `null` if it doesn't.\n\n  #### Returns null \\| [SassMap](sassmap)\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [SassNumber](sassnumber)\n  - [constructor](sassnumber#constructor)\n  - [asInt](sassnumber#asInt)\n  - [asList](sassnumber#asList)\n  - [denominatorUnits](sassnumber#denominatorUnits)\n  - [hasBrackets](sassnumber#hasBrackets)\n  - [hasUnits](sassnumber#hasUnits)\n  - [isInt](sassnumber#isInt)\n  - [isTruthy](sassnumber#isTruthy)\n  - [numeratorUnits](sassnumber#numeratorUnits)\n  - [realNull](sassnumber#realNull)\n  - [separator](sassnumber#separator)\n  - [value](sassnumber#value)\n  - [assertBoolean](sassnumber#assertBoolean)\n  - [assertColor](sassnumber#assertColor)\n  - [assertFunction](sassnumber#assertFunction)\n  - [assertInRange](sassnumber#assertInRange)\n  - [assertInt](sassnumber#assertInt)\n  - [assertMap](sassnumber#assertMap)\n  - [assertNoUnits](sassnumber#assertNoUnits)\n  - [assertNumber](sassnumber#assertNumber)\n  - [assertString](sassnumber#assertString)\n  - [assertUnit](sassnumber#assertUnit)\n  - [coerce](sassnumber#coerce)\n  - [coerceToMatch](sassnumber#coerceToMatch)\n  - [coerceValue](sassnumber#coerceValue)\n  - [coerceValueToMatch](sassnumber#coerceValueToMatch)\n  - [compatibleWithUnit](sassnumber#compatibleWithUnit)\n  - [convert](sassnumber#convert)\n  - [convertToMatch](sassnumber#convertToMatch)\n  - [convertValue](sassnumber#convertValue)\n  - [convertValueToMatch](sassnumber#convertValueToMatch)\n  - [equals](sassnumber#equals)\n  - [get](sassnumber#get)\n  - [hasUnit](sassnumber#hasUnit)\n  - [hashCode](sassnumber#hashCode)\n  - [sassIndexToListIndex](sassnumber#sassIndexToListIndex)\n  - [tryMap](sassnumber#tryMap)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/SassNumber](https://sass-lang.com/documentation/js-api/classes/SassNumber)"
- name: Class SassString
  id: js-api/classes/sassstring
  summary: Sass's string type
  description: "# Class SassString\n\nSass's [string type](../../values/strings).\n\n### Hierarchy\n\n- [Value](value)\n  - SassString\n\n## Index\n\n### Constructors\n\n- [constructor](sassstring#constructor)\n\n### Accessors\n\n- [asList](sassstring#asList)\n- [hasBrackets](sassstring#hasBrackets)\n- [hasQuotes](sassstring#hasQuotes)\n- [isTruthy](sassstring#isTruthy)\n- [realNull](sassstring#realNull)\n- [sassLength](sassstring#sassLength)\n- [separator](sassstring#separator)\n- [text](sassstring#text)\n\n### Methods\n\n- [assertBoolean](sassstring#assertBoolean)\n- [assertColor](sassstring#assertColor)\n- [assertFunction](sassstring#assertFunction)\n- [assertMap](sassstring#assertMap)\n- [assertNumber](sassstring#assertNumber)\n- [assertString](sassstring#assertString)\n- [equals](sassstring#equals)\n- [get](sassstring#get)\n- [hashCode](sassstring#hashCode)\n- [sassIndexToListIndex](sassstring#sassIndexToListIndex)\n- [sassIndexToStringIndex](sassstring#sassIndexToStringIndex)\n- [tryMap](sassstring#tryMap)\n\n## Constructors\n\n### constructor\n\n- new SassString(text: string, options?: { quotes?: boolean }): [SassString](sassstring)\n\n- Overrides Value.constructor\n\n  - Defined in [js-api-doc/value/string.d.ts:19](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/string.d.ts#L19)\n\n  Creates a new string.\n\n  #### Parameters\n\n  - ##### text: string\n\n    The contents of the string. For quoted strings, this is the semantic content—any escape sequences that were been written in the source text are resolved to their Unicode values. For unquoted strings, though, escape sequences are preserved as literal backslashes.\n\n  - ##### Optional options: { quotes?: boolean }\n\n    - ##### Optional quotes?: boolean\n\n      Whether the string is quoted. Defaults to `true`.\n\n  #### Returns [SassString](sassstring)\n\n### constructor\n\n- new SassString(options?: { quotes?: boolean }): [SassString](sassstring)\n\n&nbsp;\n\n- Overrides Value.constructor\n\n  - Defined in [js-api-doc/value/string.d.ts:31](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/string.d.ts#L31)\n\n  Creates an empty string.\n\n  #### Parameters\n\n  - ##### Optional options: { quotes?: boolean }\n\n    - ##### Optional quotes?: boolean\n\n      Whether the string is quoted. Defaults to `true`.\n\n  #### Returns [SassString](sassstring)\n\n## Accessors\n\n### asList\n\n- get asList(): List\\<[Value](value)\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:47](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L47)\n\n  This value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns List\\<[Value](value)\\>\n\n  An immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n### hasBrackets\n\n- get hasBrackets(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:55](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L55)\n\n  Whether this value as a list has brackets.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns boolean\n\n### hasQuotes\n\n- get hasQuotes(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/string.d.ts:50](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/string.d.ts#L50)\n\n  Whether this string has quotes.\n\n  #### Returns boolean\n\n### isTruthy\n\n- get isTruthy(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:61](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L61)\n\n  Whether the value counts as `true` in an `@if` statement and other contexts.\n\n  #### Returns boolean\n\n### realNull\n\n- get realNull(): null \\| [Value](value)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L67)\n\n  Returns JavaScript's `null` value if this is [sassNull](../modules#sassNull), and returns `this` otherwise.\n\n  #### Returns null \\| [Value](value)\n\n### sassLength\n\n- get sassLength(): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/string.d.ts:62](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/string.d.ts#L62)\n\n  Sass's notion of this string's length.\n\n  Sass treats strings as a series of Unicode code points while JavaScript treats them as a series of UTF-16 code units. For example, the character U+1F60A SMILING FACE WITH SMILING EYES is a single Unicode code point but is represented in UTF-16 as two code units (`0xD83D` and `0xDE0A`). So in JavaScript, `\"n😊b\".length` returns `4`, whereas in Sass `string.length(\"n😊b\")` returns `3`.\n\n  #### Returns number\n\n### separator\n\n- get separator(): [ListSeparator](../modules#ListSeparator)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:75](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L75)\n\n  The separator for this value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns [ListSeparator](../modules#ListSeparator)\n\n### text\n\n- get text(): string\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/string.d.ts:47](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/string.d.ts#L47)\n\n  The contents of the string.\n\n  For quoted strings, this is the semantic content—any escape sequences that were been written in the source text are resolved to their Unicode values. For unquoted strings, though, escape sequences are preserved as literal backslashes.\n\n  This difference allows us to distinguish between identifiers with escapes, such as `url\\u28 http://example.com\\u29`, and unquoted strings that contain characters that aren't valid in identifiers, such as `url(http://example.com)`. Unfortunately, it also means that we don't consider `foo` and `f\\6F\\6F` the same string.\n\n  #### Returns string\n\n## Methods\n\n### assertBoolean\n\n- assertBoolean(name?: string): [SassBoolean](sassboolean)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertBoolean](value#assertBoolean)\n\n  - Defined in [js-api-doc/value/index.d.ts:117](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L117)\n\n  Throws if `this` isn't a [SassBoolean](sassboolean).\n\n  ### ⚠️ Heads up!\n\n  Functions should generally use [isTruthy](sassstring#isTruthy) rather than requiring a literal boolean.\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassBoolean](sassboolean)\n\n### assertColor\n\n- assertColor(name?: string): [SassColor](sasscolor)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertColor](value#assertColor)\n\n  - Defined in [js-api-doc/value/index.d.ts:125](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L125)\n\n  Throws if `this` isn't a [SassColor](sasscolor).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassColor](sasscolor)\n\n### assertFunction\n\n- assertFunction(name?: string): [SassFunction](sassfunction)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertFunction](value#assertFunction)\n\n  - Defined in [js-api-doc/value/index.d.ts:133](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L133)\n\n  Throws if `this` isn't a [SassFunction](sassfunction).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassFunction](sassfunction)\n\n### assertMap\n\n- assertMap(name?: string): [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertMap](value#assertMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:141](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L141)\n\n  Throws if `this` isn't a [SassMap](sassmap).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassMap](sassmap)\n\n### assertNumber\n\n- assertNumber(name?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertNumber](value#assertNumber)\n\n  - Defined in [js-api-doc/value/index.d.ts:149](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L149)\n\n  Throws if `this` isn't a [SassNumber](sassnumber).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### assertString\n\n- assertString(name?: string): [SassString](sassstring)\n\n&nbsp;\n\n- Inherited from [Value](value).[assertString](value#assertString)\n\n  - Defined in [js-api-doc/value/index.d.ts:157](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L157)\n\n  Throws if `this` isn't a [SassString](sassstring).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassString](sassstring)\n\n### equals\n\n- equals(other: [Value](value)): boolean\n\n&nbsp;\n\n- Inherited from [Value](value).[equals](value#equals)\n\n  - Defined in [js-api-doc/value/index.d.ts:166](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L166)\n\n  Returns whether `this` represents the same value as `other`.\n\n  #### Parameters\n\n  - ##### other: [Value](value)\n\n  #### Returns boolean\n\n### get\n\n- get(index: number): undefined \\| [Value](value)\n\n&nbsp;\n\n- Inherited from [Value](value).[get](value#get)\n\n  - Defined in [js-api-doc/value/index.d.ts:106](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L106)\n\n  Returns the value at index `index` in this value as a list, or `undefined` if `index` isn't valid for this list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  This is a shorthand for `this.asList.get(index)`, although it may be more efficient in some cases.\n\n  ### ⚠️ Heads up!\n\n  This method uses the same indexing conventions as the `immutable` package: unlike Sass the index of the first element is 0, but like Sass negative numbers index from the end of the list.\n\n  #### Parameters\n\n  - ##### index: number\n\n  #### Returns undefined \\| [Value](value)\n\n### hashCode\n\n- hashCode(): number\n\n&nbsp;\n\n- Inherited from [Value](value).[hashCode](value#hashCode)\n\n  - Defined in [js-api-doc/value/index.d.ts:169](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L169)\n\n  Returns a hash code that can be used to store `this` in a hash map.\n\n  #### Returns number\n\n### sassIndexToListIndex\n\n- sassIndexToListIndex(sassIndex: [Value](value), name?: string): number\n\n&nbsp;\n\n- Inherited from [Value](value).[sassIndexToListIndex](value#sassIndexToListIndex)\n\n  - Defined in [js-api-doc/value/index.d.ts:90](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L90)\n\n  Converts `sassIndex` into a JavaScript-style index into the list returned by [asList](sassstring#asList).\n\n  Sass indexes are one-based, while JavaScript indexes are zero-based. Sass indexes may also be negative in order to index from the end of the list.\n\n  throws  \n  `Error` If `sassIndex` isn't a number, if that number isn't an integer, or if that integer isn't a valid index for [asList](sassstring#asList).\n\n  #### Parameters\n\n  - ##### sassIndex: [Value](value)\n\n    The Sass-style index into this as a list.\n\n  - ##### Optional name: string\n\n    The name of the function argument `sassIndex` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### sassIndexToStringIndex\n\n- sassIndexToStringIndex(sassIndex: [Value](value), name?: string): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/string.d.ts:83](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/string.d.ts#L83)\n\n  Converts `sassIndex` to a JavaScript index into [text](sassstring#text).\n\n  Sass indices are one-based, while JavaScript indices are zero-based. Sass indices may also be negative in order to index from the end of the string.\n\n  In addition, Sass indices refer to Unicode code points while JavaScript string indices refer to UTF-16 code units. For example, the character U+1F60A SMILING FACE WITH SMILING EYES is a single Unicode code point but is represented in UTF-16 as two code units (`0xD83D` and `0xDE0A`). So in JavaScript, `\"n😊b\".charCodeAt(1)` returns `0xD83D`, whereas in Sass `string.slice(\"n😊b\", 1, 1)` returns `\"😊\"`.\n\n  This function converts Sass's code point indices to JavaScript's code unit indices. This means it's O(n) in the length of `text`.\n\n  throws  \n  `Error` - If `sassIndex` isn't a number, if that number isn't an integer, or if that integer isn't a valid index for this string.\n\n  #### Parameters\n\n  - ##### sassIndex: [Value](value)\n\n  - ##### Optional name: string\n\n  #### Returns number\n\n### tryMap\n\n- tryMap(): null \\| [SassMap](sassmap)\n\n&nbsp;\n\n- Inherited from [Value](value).[tryMap](value#tryMap)\n\n  - Defined in [js-api-doc/value/index.d.ts:163](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L163)\n\n  Returns `this` as a map if it counts as one (empty lists count as empty maps) or `null` if it doesn't.\n\n  #### Returns null \\| [SassMap](sassmap)\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [SassString](sassstring)\n  - [constructor](sassstring#constructor)\n  - [asList](sassstring#asList)\n  - [hasBrackets](sassstring#hasBrackets)\n  - [hasQuotes](sassstring#hasQuotes)\n  - [isTruthy](sassstring#isTruthy)\n  - [realNull](sassstring#realNull)\n  - [sassLength](sassstring#sassLength)\n  - [separator](sassstring#separator)\n  - [text](sassstring#text)\n  - [assertBoolean](sassstring#assertBoolean)\n  - [assertColor](sassstring#assertColor)\n  - [assertFunction](sassstring#assertFunction)\n  - [assertMap](sassstring#assertMap)\n  - [assertNumber](sassstring#assertNumber)\n  - [assertString](sassstring#assertString)\n  - [equals](sassstring#equals)\n  - [get](sassstring#get)\n  - [hashCode](sassstring#hashCode)\n  - [sassIndexToListIndex](sassstring#sassIndexToListIndex)\n  - [sassIndexToStringIndex](sassstring#sassIndexToStringIndex)\n  - [tryMap](sassstring#tryMap)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/SassString](https://sass-lang.com/documentation/js-api/classes/SassString)"
- name: Class String
  id: js-api/classes/types.string
  summary: Sass's string type
  description: "# Class String\n\nSass's [string type](../../values/strings).\n\n### ⚠️ Heads up!\n\nThis API currently provides no way of distinguishing between a [quoted](../../values/strings#quoted) and [unquoted](../../values/strings#unquoted) string.\n\n### Hierarchy\n\n- String\n\n## Index\n\n### Constructors\n\n- [constructor](types.string#constructor)\n\n### Methods\n\n- [getValue](types.string#getValue)\n- [setValue](types.string#setValue)\n\n## Constructors\n\n### constructor\n\n- new String(value: string): [String](types.string)\n\n- - Defined in [js-api-doc/legacy/function.d.ts:329](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L329)\n\n  Creates an unquoted string with the given contents.\n\n  ### ⚠️ Heads up!\n\n  This API currently provides no way of creating a [quoted](../../values/strings#quoted) string.\n\n  #### Parameters\n\n  - ##### value: string\n\n  #### Returns [String](types.string)\n\n## Methods\n\n### getValue\n\n- getValue(): string\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:354](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L354)\n\n  Returns the contents of the string. If the string contains escapes, those escapes are included literally if it’s [unquoted](../../values/strings#unquoted), while the values of the escapes are included if it’s [quoted](../../values/strings#quoted).\n\n  example  \n      // string is `Arial`.\n      string.getValue(); // \"Arial\"\n\n      // string is `\"Helvetica Neue\"`.\n      string.getValue(); // \"Helvetica Neue\"\n\n      // string is `\\1F46D`.\n      string.getValue(); // \"\\\\1F46D\"\n\n      // string is `\"\\1F46D\"`.\n      string.getValue(); // \"👭\"\n\n  #### Returns string\n\n### setValue\n\n- setValue(value: string): void\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/function.d.ts:365](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L365)\n\n  Destructively modifies this string by setting its numeric value to `value`.\n\n  ### ⚠️ Heads up!\n\n  Even if the string was originally quoted, this will cause it to become unquoted.\n\n  deprecated  \n  Use [constructor](types.string#constructor) instead.\n\n  #### Parameters\n\n  - ##### value: string\n\n  #### Returns void\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [String](types.string)\n  - [constructor](types.string#constructor)\n  - [getValue](types.string#getValue)\n  - [setValue](types.string#setValue)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/types.String](https://sass-lang.com/documentation/js-api/classes/types.String)"
- name: Class Value
  id: js-api/classes/value
  summary: The abstract base class of Sass's value types
  description: "# Class Value\n\nThe abstract base class of Sass's value types.\n\nThis is passed to and returned by [CustomFunction](../modules#CustomFunction)s, which are passed into the Sass implementation using [Options.functions](../interfaces/options#functions).\n\n### Hierarchy\n\n- Value\n  - [SassBoolean](sassboolean)\n  - [SassColor](sasscolor)\n  - [SassFunction](sassfunction)\n  - [SassList](sasslist)\n  - [SassMap](sassmap)\n  - [SassNumber](sassnumber)\n  - [SassString](sassstring)\n\n### Implements\n\n- ValueObject\n\n## Index\n\n### Accessors\n\n- [asList](value#asList)\n- [hasBrackets](value#hasBrackets)\n- [isTruthy](value#isTruthy)\n- [realNull](value#realNull)\n- [separator](value#separator)\n\n### Methods\n\n- [assertBoolean](value#assertBoolean)\n- [assertColor](value#assertColor)\n- [assertFunction](value#assertFunction)\n- [assertMap](value#assertMap)\n- [assertNumber](value#assertNumber)\n- [assertString](value#assertString)\n- [equals](value#equals)\n- [get](value#get)\n- [hashCode](value#hashCode)\n- [sassIndexToListIndex](value#sassIndexToListIndex)\n- [tryMap](value#tryMap)\n\n## Accessors\n\n### asList\n\n- get asList(): List\\<[Value](value)\\>\n\n- - Defined in [js-api-doc/value/index.d.ts:47](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L47)\n\n  This value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns List\\<[Value](value)\\>\n\n  An immutable [List](types.list) from the [`immutable` package](https://immutable-js.com/).\n\n### hasBrackets\n\n- get hasBrackets(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:55](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L55)\n\n  Whether this value as a list has brackets.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns boolean\n\n### isTruthy\n\n- get isTruthy(): boolean\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:61](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L61)\n\n  Whether the value counts as `true` in an `@if` statement and other contexts.\n\n  #### Returns boolean\n\n### realNull\n\n- get realNull(): null \\| [Value](value)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L67)\n\n  Returns JavaScript's `null` value if this is [sassNull](../modules#sassNull), and returns `this` otherwise.\n\n  #### Returns null \\| [Value](value)\n\n### separator\n\n- get separator(): [ListSeparator](../modules#ListSeparator)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:75](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L75)\n\n  The separator for this value as a list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  #### Returns [ListSeparator](../modules#ListSeparator)\n\n## Methods\n\n### assertBoolean\n\n- assertBoolean(name?: string): [SassBoolean](sassboolean)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:117](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L117)\n\n  Throws if `this` isn't a [SassBoolean](sassboolean).\n\n  ### ⚠️ Heads up!\n\n  Functions should generally use [isTruthy](value#isTruthy) rather than requiring a literal boolean.\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassBoolean](sassboolean)\n\n### assertColor\n\n- assertColor(name?: string): [SassColor](sasscolor)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:125](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L125)\n\n  Throws if `this` isn't a [SassColor](sasscolor).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassColor](sasscolor)\n\n### assertFunction\n\n- assertFunction(name?: string): [SassFunction](sassfunction)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:133](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L133)\n\n  Throws if `this` isn't a [SassFunction](sassfunction).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassFunction](sassfunction)\n\n### assertMap\n\n- assertMap(name?: string): [SassMap](sassmap)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:141](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L141)\n\n  Throws if `this` isn't a [SassMap](sassmap).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassMap](sassmap)\n\n### assertNumber\n\n- assertNumber(name?: string): [SassNumber](sassnumber)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:149](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L149)\n\n  Throws if `this` isn't a [SassNumber](sassnumber).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassNumber](sassnumber)\n\n### assertString\n\n- assertString(name?: string): [SassString](sassstring)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:157](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L157)\n\n  Throws if `this` isn't a [SassString](sassstring).\n\n  #### Parameters\n\n  - ##### Optional name: string\n\n    The name of the function argument `this` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns [SassString](sassstring)\n\n### equals\n\n- equals(other: [Value](value)): boolean\n\n&nbsp;\n\n- Implementation of ValueObject.equals\n\n  - Defined in [js-api-doc/value/index.d.ts:166](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L166)\n\n  Returns whether `this` represents the same value as `other`.\n\n  #### Parameters\n\n  - ##### other: [Value](value)\n\n  #### Returns boolean\n\n### get\n\n- get(index: number): undefined \\| [Value](value)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:106](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L106)\n\n  Returns the value at index `index` in this value as a list, or `undefined` if `index` isn't valid for this list.\n\n  All SassScript values can be used as lists. Maps count as lists of pairs, and all other values count as single-value lists.\n\n  This is a shorthand for `this.asList.get(index)`, although it may be more efficient in some cases.\n\n  ### ⚠️ Heads up!\n\n  This method uses the same indexing conventions as the `immutable` package: unlike Sass the index of the first element is 0, but like Sass negative numbers index from the end of the list.\n\n  #### Parameters\n\n  - ##### index: number\n\n  #### Returns undefined \\| [Value](value)\n\n### hashCode\n\n- hashCode(): number\n\n&nbsp;\n\n- Implementation of ValueObject.hashCode\n\n  - Defined in [js-api-doc/value/index.d.ts:169](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L169)\n\n  Returns a hash code that can be used to store `this` in a hash map.\n\n  #### Returns number\n\n### sassIndexToListIndex\n\n- sassIndexToListIndex(sassIndex: [Value](value), name?: string): number\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:90](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L90)\n\n  Converts `sassIndex` into a JavaScript-style index into the list returned by [asList](value#asList).\n\n  Sass indexes are one-based, while JavaScript indexes are zero-based. Sass indexes may also be negative in order to index from the end of the list.\n\n  throws  \n  `Error` If `sassIndex` isn't a number, if that number isn't an integer, or if that integer isn't a valid index for [asList](value#asList).\n\n  #### Parameters\n\n  - ##### sassIndex: [Value](value)\n\n    The Sass-style index into this as a list.\n\n  - ##### Optional name: string\n\n    The name of the function argument `sassIndex` came from (without the `$`) if it came from an argument. Used for error reporting.\n\n  #### Returns number\n\n### tryMap\n\n- tryMap(): null \\| [SassMap](sassmap)\n\n&nbsp;\n\n- - Defined in [js-api-doc/value/index.d.ts:163](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L163)\n\n  Returns `this` as a map if it counts as one (empty lists count as empty maps) or `null` if it doesn't.\n\n  #### Returns null \\| [SassMap](sassmap)\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [Value](value)\n  - [asList](value#asList)\n  - [hasBrackets](value#hasBrackets)\n  - [isTruthy](value#isTruthy)\n  - [realNull](value#realNull)\n  - [separator](value#separator)\n  - [assertBoolean](value#assertBoolean)\n  - [assertColor](value#assertColor)\n  - [assertFunction](value#assertFunction)\n  - [assertMap](value#assertMap)\n  - [assertNumber](value#assertNumber)\n  - [assertString](value#assertString)\n  - [equals](value#equals)\n  - [get](value#get)\n  - [hashCode](value#hashCode)\n  - [sassIndexToListIndex](value#sassIndexToListIndex)\n  - [tryMap](value#tryMap)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/classes/Value](https://sass-lang.com/documentation/js-api/classes/Value)"
- name: color.adjust
  id: modules/color#color.adjust
  summary: Increases or decreases one or more properties of $color by fixed amounts
  belongs_to: sass:color
  description: |-
    ``` scss
    color.adjust($color,
      $red: null, $green: null, $blue: null,
      $hue: null, $saturation: null, $lightness: null,
      $whiteness: null, $blackness: null,
      $alpha: null)
    adjust-color(...) //=> color
    ```

    Compatibility ($whiteness and $blackness):

    Dart Sass

    since 1.28.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Increases or decreases one or more properties of `$color` by fixed amounts.

    Adds the value passed for each keyword argument to the corresponding property of the color, and returns the adjusted color. It’s an error to specify an RGB property (`$red`, `$green`, and/or `$blue`) at the same time as an HSL property (`$hue`, `$saturation`, and/or `$lightness`), or either of those at the same time as an [HWB](https://en.wikipedia.org/wiki/HWB_color_model) property (`$hue`, `$whiteness`, and/or `$blackness`).

    All optional arguments must be numbers. The `$red`, `$green`, and `$blue` arguments must be [unitless](../values/numbers#units) and between -255 and 255 (inclusive). The `$hue` argument must have either the unit `deg` or no unit. The `$saturation`, `$lightness`, `$whiteness`, and `$blackness` arguments must be between `-100%` and `100%` (inclusive), and may not be unitless. The `$alpha` argument must be unitless and between -1 and 1 (inclusive).

    See also:

    - [`color.scale()`](#scale) for fluidly scaling a color’s properties.
    - [`color.change()`](#change) for setting a color’s properties.

    - [SCSS](#example-1-scss)
    - [Sass](#example-1-sass)

    ``` scss
    @debug color.adjust(#6b717f, $red: 15); // #7a717f
    @debug color.adjust(#d2e1dd, $red: -10, $blue: 10); // #c8e1e7
    @debug color.adjust(#998099, $lightness: -30%, $alpha: -0.4); // rgba(71, 57, 71, 0.6)
    ```

    ``` scss
    @debug color.adjust(#6b717f, $red: 15)  // #7a717f
    @debug color.adjust(#d2e1dd, $red: -10, $blue: 10)  // #c8e1e7
    @debug color.adjust(#998099, $lightness: -30%, $alpha: -0.4)  // rgba(71, 57, 71, 0.6)
    ```
- name: color.alpha
  id: modules/color#color.alpha
  summary: Returns the alpha channel of $color as a number between 0 and 1
  belongs_to: sass:color
  description: |-
    ``` scss
    color.alpha($color)
    alpha($color)
    opacity($color) //=> number
    ```

    Returns the alpha channel of `$color` as a number between 0 and 1.

    As a special case, this supports the Internet Explorer syntax `alpha(opacity=20)`, for which it returns an [unquoted string](../values/strings#unquoted).

    See also:

    - [`color.red()`](#red) for getting a color’s red channel.
    - [`color.green()`](#green) for getting a color’s green channel.
    - [`color.blue()`](#blue) for getting a color’s blue channel.
    - [`color.hue()`](#hue) for getting a color’s hue.
    - [`color.saturation()`](#saturation) for getting a color’s saturation.
    - [`color.lightness()`](#lightness) for getting a color’s lightness.

    - [SCSS](#example-3-scss)
    - [Sass](#example-3-sass)

    ``` scss
    @debug color.alpha(#e1d7d2); // 1
    @debug color.opacity(rgb(210, 225, 221, 0.4)); // 0.4
    @debug alpha(opacity=20); // alpha(opacity=20)
    ```

    ``` scss
    @debug color.alpha(#e1d7d2)  // 1
    @debug color.opacity(rgb(210, 225, 221, 0.4))  // 0.4
    @debug alpha(opacity=20)  // alpha(opacity=20)
    ```
- name: color.blackness
  id: modules/color#color.blackness
  summary: color.red() for getting a color’s red channel
  belongs_to: sass:color
  description: |-
    ``` scss
    color.blackness($color) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.28.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the [HWB](https://en.wikipedia.org/wiki/HWB_color_model) blackness of `$color` as a number between `0%` and `100%`.

    See also:

    - [`color.red()`](#red) for getting a color’s red channel.
    - [`color.green()`](#green) for getting a color’s green channel.
    - [`color.hue()`](#hue) for getting a color’s hue.
    - [`color.saturation()`](#saturation) for getting a color’s saturation.
    - [`color.lightness()`](#lightness) for getting a color’s lightness.
    - [`color.whiteness()`](#whiteness) for getting a color’s whiteness.
    - [`color.alpha()`](#alpha) for getting a color’s alpha channel.

    - [SCSS](#example-4-scss)
    - [Sass](#example-4-sass)

    ``` scss
    @debug color.blackness(#e1d7d2); // 11.7647058824%
    @debug color.blackness(white); // 0%
    @debug color.blackness(black); // 100%
    ```

    ``` scss
    @debug color.blackness(#e1d7d2)  // 11.7647058824%
    @debug color.blackness(white)  // 0%
    @debug color.blackness(black)  // 100%
    ```
- name: color.blue
  id: modules/color#color.blue
  summary: Returns the blue channel of $color as a number between 0 and 255
  belongs_to: sass:color
  description: |-
    ``` scss
    color.blue($color)
    blue($color) //=> number
    ```

    Returns the blue channel of `$color` as a number between 0 and 255.

    See also:

    - [`color.red()`](#red) for getting a color’s red channel.
    - [`color.green()`](#green) for getting a color’s green channel.
    - [`color.hue()`](#hue) for getting a color’s hue.
    - [`color.saturation()`](#saturation) for getting a color’s saturation.
    - [`color.lightness()`](#lightness) for getting a color’s lightness.
    - [`color.whiteness()`](#whiteness) for getting a color’s whiteness.
    - [`color.blackness()`](#blackness) for getting a color’s blackness.
    - [`color.alpha()`](#alpha) for getting a color’s alpha channel.

    - [SCSS](#example-5-scss)
    - [Sass](#example-5-sass)

    ``` scss
    @debug color.blue(#e1d7d2); // 210
    @debug color.blue(white); // 255
    @debug color.blue(black); // 0
    ```

    ``` scss
    @debug color.blue(#e1d7d2)  // 210
    @debug color.blue(white)  // 255
    @debug color.blue(black)  // 0
    ```
- name: color.change
  id: modules/color#color.change
  summary: Sets one or more properties of a color to new values
  belongs_to: sass:color
  description: |-
    ``` scss
    color.change($color,
      $red: null, $green: null, $blue: null,
      $hue: null, $saturation: null, $lightness: null,
      $whiteness: null, $blackness: null,
      $alpha: null)
    change-color(...) //=> color
    ```

    Compatibility ($whiteness and $blackness):

    Dart Sass

    since 1.28.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Sets one or more properties of a color to new values.

    Uses the value passed for each keyword argument in place of the corresponding property of the color, and returns the changed color. It’s an error to specify an RGB property (`$red`, `$green`, and/or `$blue`) at the same time as an HSL property (`$hue`, `$saturation`, and/or `$lightness`), or either of those at the same time as an [HWB](https://en.wikipedia.org/wiki/HWB_color_model) property (`$hue`, `$whiteness`, and/or `$blackness`).

    All optional arguments must be numbers. The `$red`, `$green`, and `$blue` arguments must be [unitless](../values/numbers#units) and between 0 and 255 (inclusive). The `$hue` argument must have either the unit `deg` or no unit. The `$saturation`, `$lightness`, `$whiteness`, and `$blackness` arguments must be between `0%` and `100%` (inclusive), and may not be unitless. The `$alpha` argument must be unitless and between 0 and 1 (inclusive).

    See also:

    - [`color.scale()`](#scale) for fluidly scaling a color’s properties.
    - [`color.adjust()`](#adjust) for adjusting a color’s properties by fixed amounts.

    - [SCSS](#example-6-scss)
    - [Sass](#example-6-sass)

    ``` scss
    @debug color.change(#6b717f, $red: 100); // #64717f
    @debug color.change(#d2e1dd, $red: 100, $blue: 50); // #64e132
    @debug color.change(#998099, $lightness: 30%, $alpha: 0.5); // rgba(85, 68, 85, 0.5)
    ```

    ``` scss
    @debug color.change(#6b717f, $red: 100)  // #64717f
    @debug color.change(#d2e1dd, $red: 100, $blue: 50)  // #64e132
    @debug color.change(#998099, $lightness: 30%, $alpha: 0.5)  // rgba(85, 68, 85, 0.5)
    ```
- name: color.complement
  id: modules/color#color.complement
  summary: Returns the RGB complement of $color
  belongs_to: sass:color
  description: |-
    ``` scss
    color.complement($color)
    complement($color) //=> color
    ```

    Returns the RGB [complement](https://en.wikipedia.org/wiki/Complementary_colors) of `$color`.

    This is identical to [`color.adjust($color, $hue: 180deg)`](#adjust).

    - [SCSS](#example-7-scss)
    - [Sass](#example-7-sass)

    ``` scss
    // Hue 222deg becomes 42deg.
    @debug color.complement(#6b717f); // #7f796b

    // Hue 164deg becomes 344deg.
    @debug color.complement(#d2e1dd); // #e1d2d6

    // Hue 210deg becomes 30deg.
    @debug color.complement(#036); // #663300
    ```

    ``` scss
    // Hue 222deg becomes 42deg.
    @debug color.complement(#6b717f)  // #7f796b

    // Hue 164deg becomes 344deg.
    @debug color.complement(#d2e1dd)  // #e1d2d6

    // Hue 210deg becomes 30deg.
    @debug color.complement(#036)  // #663300
    ```
- name: color.grayscale
  id: modules/color#color.grayscale
  summary: Returns a gray color with the same lightness as $color
  belongs_to: sass:color
  description: |-
    ``` scss
    color.grayscale($color)
    grayscale($color) //=> color
    ```

    Returns a gray color with the same lightness as `$color`.

    This is identical to [`color.change($color, $saturation: 0%)`](#change).

    - [SCSS](#example-12-scss)
    - [Sass](#example-12-sass)

    ``` scss
    @debug color.grayscale(#6b717f); // #757575
    @debug color.grayscale(#d2e1dd); // #dadada
    @debug color.grayscale(#036); // #333333
    ```

    ``` scss
    @debug color.grayscale(#6b717f)  // #757575
    @debug color.grayscale(#d2e1dd)  // #dadada
    @debug color.grayscale(#036)  // #333333
    ```
- name: color.green
  id: modules/color#color.green
  summary: Returns the green channel of $color as a number between 0 and 255
  belongs_to: sass:color
  description: |-
    ``` scss
    color.green($color)
    green($color) //=> number
    ```

    Returns the green channel of `$color` as a number between 0 and 255.

    See also:

    - [`color.red()`](#red) for getting a color’s red channel.
    - [`color.blue()`](#blue) for getting a color’s blue channel.
    - [`color.hue()`](#hue) for getting a color’s hue.
    - [`color.saturation()`](#saturation) for getting a color’s saturation.
    - [`color.lightness()`](#lightness) for getting a color’s lightness.
    - [`color.whiteness()`](#whiteness) for getting a color’s whiteness.
    - [`color.blackness()`](#blackness) for getting a color’s blackness.
    - [`color.alpha()`](#alpha) for getting a color’s alpha channel.

    - [SCSS](#example-13-scss)
    - [Sass](#example-13-sass)

    ``` scss
    @debug color.green(#e1d7d2); // 215
    @debug color.green(white); // 255
    @debug color.green(black); // 0
    ```

    ``` scss
    @debug color.green(#e1d7d2)  // 215
    @debug color.green(white)  // 255
    @debug color.green(black)  // 0
    ```
- name: color.hue
  id: modules/color#color.hue
  summary: Returns the hue of $color as a number between 0deg and 360deg
  belongs_to: sass:color
  description: |-
    ``` scss
    color.hue($color)
    hue($color) //=> number
    ```

    Returns the hue of `$color` as a number between `0deg` and `360deg`.

    See also:

    - [`color.red()`](#red) for getting a color’s red channel.
    - [`color.green()`](#green) for getting a color’s green channel.
    - [`color.blue()`](#blue) for getting a color’s blue channel.
    - [`color.saturation()`](#saturation) for getting a color’s saturation.
    - [`color.lightness()`](#lightness) for getting a color’s lightness.
    - [`color.whiteness()`](#whiteness) for getting a color’s whiteness.
    - [`color.blackness()`](#blackness) for getting a color’s blackness.
    - [`color.alpha()`](#alpha) for getting a color’s alpha channel.

    - [SCSS](#example-14-scss)
    - [Sass](#example-14-sass)

    ``` scss
    @debug color.hue(#e1d7d2); // 20deg
    @debug color.hue(#f2ece4); // 34.2857142857deg
    @debug color.hue(#dadbdf); // 228deg
    ```

    ``` scss
    @debug color.hue(#e1d7d2)  // 20deg
    @debug color.hue(#f2ece4)  // 34.2857142857deg
    @debug color.hue(#dadbdf)  // 228deg
    ```
- name: color.hwb
  id: modules/color#color.hwb
  summary: Returns a color with the given hue, whiteness, and blackness and the given alpha channel
  belongs_to: sass:color
  description: |-
    ``` scss
    color.hwb($hue $whiteness $blackness)
    color.hwb($hue $whiteness $blackness / $alpha)
    color.hwb($hue, $whiteness, $blackness, $alpha: 1) //=> color
    ```

    Compatibility:

    Dart Sass

    since 1.28.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns a color with the given [hue, whiteness, and blackness](https://en.wikipedia.org/wiki/HWB_color_model) and the given alpha channel.

    The hue is a number between `0deg` and `360deg` (inclusive). The whiteness and blackness are numbers between `0%` and `100%` (inclusive). The hue may be [unitless](../values/numbers#units), but the whiteness and blackness must have unit `%`. The alpha channel can be specified as either a unitless number between 0 and 1 (inclusive), or a percentage between `0%` and `100%` (inclusive).

    ### ⚠️ Heads up!

    Sass’s [special parsing rules](../operators/numeric#slash-separated-values) for slash-separated values make it difficult to pass variables for `$blackness` or `$alpha` when using the `color.hwb($hue $whiteness $blackness / $alpha)` signature. Consider using `color.hwb($hue, $whiteness, $blackness, $alpha)` instead.

    - [SCSS](#example-15-scss)
    - [Sass](#example-15-sass)

    ``` scss
    @debug color.hwb(210, 0%, 60%); // #036
    @debug color.hwb(34, 89%, 5%); // #f2ece4
    @debug color.hwb(210 0% 60% / 0.5); // rgba(0, 51, 102, 0.5)
    ```

    ``` scss
    @debug color.hwb(210, 0%, 60%)  // #036
    @debug color.hwb(34, 89%, 5%)  // #f2ece4
    @debug color.hwb(210 0% 60% / 0.5)  // rgba(0, 51, 102, 0.5)
    ```
- name: color.ie-hex-str
  id: modules/color#color.ie-hex-str
  summary: 'Returns an unquoted string that represents $color in the #AARRGGBB format expected by Internet Explorer’s -ms-filter property'
  belongs_to: sass:color
  description: |-
    ``` scss
    color.ie-hex-str($color)
    ie-hex-str($color) //=> unquoted string
    ```

    Returns an unquoted string that represents `$color` in the `#AARRGGBB` format expected by Internet Explorer’s [`-ms-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-filter) property.

    - [SCSS](#example-16-scss)
    - [Sass](#example-16-sass)

    ``` scss
    @debug color.ie-hex-str(#b37399); // #FFB37399
    @debug color.ie-hex-str(#808c99); // #FF808C99
    @debug color.ie-hex-str(rgba(242, 236, 228, 0.6)); // #99F2ECE4
    ```

    ``` scss
    @debug color.ie-hex-str(#b37399); // #FFB37399
    @debug color.ie-hex-str(#808c99); // #FF808C99
    @debug color.ie-hex-str(rgba(242, 236, 228, 0.6)); // #99F2ECE4
    ```
- name: color.invert
  id: modules/color#color.invert
  summary: Returns the inverse or negative of $color
  belongs_to: sass:color
  description: |-
    ``` scss
    color.invert($color, $weight: 100%)
    invert($color, $weight: 100%) //=> color
    ```

    Returns the inverse or [negative](https://en.wikipedia.org/wiki/Negative_(photography)) of `$color`.

    The `$weight` must be a number between `0%` and `100%` (inclusive). A higher weight means the result will be closer to the negative, and a lower weight means it will be closer to `$color`. Weight `50%` will always produce `#808080`.

    - [SCSS](#example-17-scss)
    - [Sass](#example-17-sass)

    ``` scss
    @debug color.invert(#b37399); // #4c8c66
    @debug color.invert(black); // white
    @debug color.invert(#550e0c, 20%); // #663b3a
    ```

    ``` scss
    @debug color.invert(#b37399)  // #4c8c66
    @debug color.invert(black)  // white
    @debug color.invert(#550e0c, 20%)  // #663b3a
    ```
- name: color.lightness
  id: modules/color#color.lightness
  summary: color.red() for getting a color’s red channel
  belongs_to: sass:color
  description: |-
    ``` scss
    color.lightness($color)
    lightness($color) //=> number
    ```

    Returns the HSL lightness of `$color` as a number between `0%` and `100%`.

    See also:

    - [`color.red()`](#red) for getting a color’s red channel.
    - [`color.green()`](#green) for getting a color’s green channel.
    - [`color.blue()`](#blue) for getting a color’s blue channel.
    - [`color.hue()`](#hue) for getting a color’s hue.
    - [`color.saturation()`](#saturation) for getting a color’s saturation.
    - [`color.whiteness()`](#whiteness) for getting a color’s whiteness.
    - [`color.blackness()`](#blackness) for getting a color’s blackness.
    - [`color.alpha()`](#alpha) for getting a color’s alpha channel.

    - [SCSS](#example-20-scss)
    - [Sass](#example-20-sass)

    ``` scss
    @debug color.lightness(#e1d7d2); // 85.2941176471%
    @debug color.lightness(#f2ece4); // 92.1568627451%
    @debug color.lightness(#dadbdf); // 86.4705882353%
    ```

    ``` scss
    @debug color.lightness(#e1d7d2)  // 85.2941176471%
    @debug color.lightness(#f2ece4)  // 92.1568627451%
    @debug color.lightness(#dadbdf)  // 86.4705882353%
    ```
- name: color.mix
  id: modules/color#color.mix
  summary: Returns a color that’s a mixture of $color1 and $color2
  belongs_to: sass:color
  description: |-
    ``` scss
    color.mix($color1, $color2, $weight: 50%)
    mix($color1, $color2, $weight: 50%) //=> color
    ```

    Returns a color that’s a mixture of `$color1` and `$color2`.

    Both the `$weight` and the relative opacity of each color determines how much of each color is in the result. The `$weight` must be a number between `0%` and `100%` (inclusive). A larger weight indicates that more of `$color1` should be used, and a smaller weight indicates that more of `$color2` should be used.

    - [SCSS](#example-21-scss)
    - [Sass](#example-21-sass)

    ``` scss
    @debug color.mix(#036, #d2e1dd); // #698aa2
    @debug color.mix(#036, #d2e1dd, 75%); // #355f84
    @debug color.mix(#036, #d2e1dd, 25%); // #9eb6bf
    @debug color.mix(rgba(242, 236, 228, 0.5), #6b717f); // rgba(141, 144, 152, 0.75)
    ```

    ``` scss
    @debug color.mix(#036, #d2e1dd)  // #698aa2
    @debug color.mix(#036, #d2e1dd, 75%)  // #355f84
    @debug color.mix(#036, #d2e1dd, 25%)  // #9eb6bf
    @debug color.mix(rgba(242, 236, 228, 0.5), #6b717f)  // rgba(141, 144, 152, 0.75)
    ```
- name: color.red
  id: modules/color#color.red
  summary: Returns the red channel of $color as a number between 0 and 255
  belongs_to: sass:color
  description: |-
    ``` scss
    color.red($color)
    red($color) //=> number
    ```

    Returns the red channel of `$color` as a number between 0 and 255.

    See also:

    - [`color.green()`](#green) for getting a color’s green channel.
    - [`color.blue()`](#blue) for getting a color’s blue channel.
    - [`color.hue()`](#hue) for getting a color’s hue.
    - [`color.saturation()`](#saturation) for getting a color’s saturation.
    - [`color.lightness()`](#lightness) for getting a color’s lightness.
    - [`color.whiteness()`](#whiteness) for getting a color’s whiteness.
    - [`color.blackness()`](#blackness) for getting a color’s blackness.
    - [`color.alpha()`](#alpha) for getting a color’s alpha channel.

    - [SCSS](#example-24-scss)
    - [Sass](#example-24-sass)

    ``` scss
    @debug color.red(#e1d7d2); // 225
    @debug color.red(white); // 255
    @debug color.red(black); // 0
    ```

    ``` scss
    @debug color.red(#e1d7d2)  // 225
    @debug color.red(white)  // 255
    @debug color.red(black)  // 0
    ```
- name: color.saturation
  id: modules/color#color.saturation
  summary: color.red() for getting a color’s red channel
  belongs_to: sass:color
  description: |-
    ``` scss
    color.saturation($color)
    saturation($color) //=> number
    ```

    Returns the HSL saturation of `$color` as a number between `0%` and `100%`.

    See also:

    - [`color.red()`](#red) for getting a color’s red channel.
    - [`color.green()`](#green) for getting a color’s green channel.
    - [`color.blue()`](#blue) for getting a color’s blue channel.
    - [`color.hue()`](#hue) for getting a color’s hue.
    - [`color.lightness()`](#lightness) for getting a color’s lightness.
    - [`color.whiteness()`](#whiteness) for getting a color’s whiteness.
    - [`color.blackness()`](#blackness) for getting a color’s blackness.
    - [`color.alpha()`](#alpha) for getting a color’s alpha channel.

    - [SCSS](#example-27-scss)
    - [Sass](#example-27-sass)

    ``` scss
    @debug color.saturation(#e1d7d2); // 20%
    @debug color.saturation(#f2ece4); // 30%
    @debug color.saturation(#dadbdf); // 7.2463768116%
    ```

    ``` scss
    @debug color.saturation(#e1d7d2)  // 20%
    @debug color.saturation(#f2ece4)  // 30%
    @debug color.saturation(#dadbdf)  // 7.2463768116%
    ```
- name: color.scale
  id: modules/color#color.scale
  summary: Fluidly scales one or more properties of $color
  belongs_to: sass:color
  description: |-
    ``` scss
    color.scale($color,
      $red: null, $green: null, $blue: null,
      $saturation: null, $lightness: null,
      $whiteness: null, $blackness: null,
      $alpha: null)
    scale-color(...) //=> color
    ```

    Compatibility ($whiteness and $blackness):

    Dart Sass

    since 1.28.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Fluidly scales one or more properties of `$color`.

    Each keyword argument must be a number between `-100%` and `100%` (inclusive). This indicates how far the corresponding property should be moved from its original position towards the maximum (if the argument is positive) or the minimum (if the argument is negative). This means that, for example, `$lightness: 50%` will make all colors `50%` closer to maximum lightness without making them fully white.

    It’s an error to specify an RGB property (`$red`, `$green`, and/or `$blue`) at the same time as an HSL property (`$saturation`, and/or `$lightness`), or either of those at the same time as an [HWB](https://en.wikipedia.org/wiki/HWB_color_model) property (`$whiteness`, and/or `$blackness`).

    See also:

    - [`color.adjust()`](#adjust) for changing a color’s properties by fixed amounts.
    - [`color.change()`](#change) for setting a color’s properties.

    - [SCSS](#example-28-scss)
    - [Sass](#example-28-sass)

    ``` scss
    @debug color.scale(#6b717f, $red: 15%); // #81717f
    @debug color.scale(#d2e1dd, $lightness: -10%, $saturation: 10%); // #b3d4cb
    @debug color.scale(#998099, $alpha: -40%); // rgba(153, 128, 153, 0.6)
    ```

    ``` scss
    @debug color.scale(#6b717f, $red: 15%)  // #81717f
    @debug color.scale(#d2e1dd, $lightness: -10%, $saturation: 10%)  // #b3d4cb
    @debug color.scale(#998099, $alpha: -40%)  // rgba(153, 128, 153, 0.6)
    ```
- name: color.whiteness
  id: modules/color#color.whiteness
  summary: color.red() for getting a color’s red channel
  belongs_to: sass:color
  description: "``` scss\ncolor.whiteness($color) //=> number\n```\n\nCompatibility:\n\nDart Sass\n\nsince 1.28.0\n\nLibSass\n\n✗\n\nRuby Sass\n\n✗\n\nReturns the [HWB](https://en.wikipedia.org/wiki/HWB_color_model) whiteness of `$color` as a number between `0%` and `100%`.\n\nSee also:\n\n- [`color.red()`](#red) for getting a color’s red channel.\n- [`color.green()`](#green) for getting a color’s green channel.\n- [`color.hue()`](#hue) for getting a color’s hue.\n- [`color.saturation()`](#saturation) for getting a color’s saturation.\n- [`color.lightness()`](#lightness) for getting a color’s lightness.\n- [`color.blackness()`](#blackness) for getting a color’s blackness.\n- [`color.alpha()`](#alpha) for getting a color’s alpha channel.\n\n- [SCSS](#example-31-scss)\n- [Sass](#example-31-sass)\n\n``` scss\n@debug color.whiteness(#e1d7d2); // 82.3529411765%\n@debug color.whiteness(white); // 100%\n@debug color.whiteness(black); // 0%\n```\n\n``` scss\n@debug color.whiteness(#e1d7d2)  // 82.3529411765%\n@debug color.whiteness(white)  // 100%\n@debug color.whiteness(black)  // 0%\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/color](https://sass-lang.com/documentation/modules/color)"
- name: Colors
  id: values/colors
  summary: LibSass and older versions of Dart or Ruby Sass don’t support hex colors with an alpha channel
  description: "# Colors\n\nCompatibility (Level 4 Syntax):\n\nDart Sass  \nsince 1.14.0\n\nLibSass  \nsince 3.6.0\n\nRuby Sass  \nsince 3.6.0\n\n[▶](javascript:;)\n\nLibSass and older versions of Dart or Ruby Sass don’t support [hex colors with an alpha channel](https://drafts.csswg.org/css-color/#hex-notation).\n\nSass has built-in support for color values. Just like CSS colors, they represent points in the [sRGB color space](https://en.wikipedia.org/wiki/SRGB), although many Sass [color functions](../modules/color) operate using [HSL coordinates](https://en.wikipedia.org/wiki/HSL_and_HSV) (which are just another way of expressing sRGB colors). Sass colors can be written as hex codes (`#f2ece4` or `#b37399aa`), [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords) (`midnightblue`, `transparent`), or the functions [`rgb()`](../modules#rgb), [`rgba()`](../modules#rgba), [`hsl()`](../modules#hsl), and [`hsla()`](../modules#hsla).\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug #f2ece4; // #f2ece4\n@debug #b37399aa; // rgba(179, 115, 153, 67%)\n@debug midnightblue; // #191970\n@debug rgb(204, 102, 153); // #c69\n@debug rgba(107, 113, 127, 0.8); // rgba(107, 113, 127, 0.8)\n@debug hsl(228, 7%, 86%); // #dadbdf\n@debug hsla(20, 20%, 85%, 0.7); // rgb(225, 215, 210, 0.7)\n```\n\n``` scss\n@debug #f2ece4  // #f2ece4\n@debug #b37399aa  // rgba(179, 115, 153, 67%)\n@debug midnightblue  // #191970\n@debug rgb(204, 102, 153)  // #c69\n@debug rgba(107, 113, 127, 0.8)  // rgba(107, 113, 127, 0.8)\n@debug hsl(228, 7%, 86%)  // #dadbdf\n@debug hsla(20, 20%, 85%, 0.7)  // rgb(225, 215, 210, 0.7)\n```\n\n### 💡 Fun fact:\n\nNo matter how a Sass color is originally written, it can be used with both HSL-based and RGB-based functions!\n\nCSS supports many different formats that can all represent the same color: its name, its hex code, and [functional notation](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Which format Sass chooses to compile a color to depends on the color itself, how it was written in the original stylesheet, and the current output mode. Because it can vary so much, stylesheet authors shouldn’t rely on any particular output format for colors they write.\n\nSass supports many useful [color functions](../modules/color) that can be used to create new colors based on existing ones by [mixing colors together](../modules/color#mix) or [scaling their hue, saturation, or lightness](../modules/color#scale).\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n$venus: #998099;\n\n@debug scale-color($venus, $lightness: +15%); // #a893a8\n@debug mix($venus, midnightblue); // #594d85\n```\n\n``` scss\n$venus: #998099\n\n@debug scale-color($venus, $lightness: +15%)  // #a893a8\n@debug mix($venus, midnightblue)  // #594d85\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/values/colors](https://sass-lang.com/documentation/values/colors)"
- name: Command-Line Interface
  id: cli
  summary: Dart Sass has the same command-line interface no matter how you install it
  description: "# Command-Line Interface\n\nDifferent implementations of Sass have different interfaces when using them from the command line:\n\n- [Dart Sass](cli/dart-sass) has the same command-line interface no matter how you [install it](https://sass-lang.com/dart-sass).\n\n- [Ruby Sass](cli/ruby-sass) is [deprecated](https://sass-lang.com/ruby-sass), and we recommend you move to a different implementation.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/cli](https://sass-lang.com/documentation/cli)"
- name: Comments
  id: syntax/comments
  summary: The way Sass comments work differs substantially between SCSS and the indented syntax
  description: "# Comments\n\nThe way Sass comments work differs substantially between SCSS and the indented syntax. Both syntaxes support two types of comments: comments defined using `/* */` that are (usually) compiled to CSS, and comments defined using `//` that are not.\n\n## In SCSS\n\nComments in SCSS work similarly to comments in other languages like JavaScript. **Single-line comments** start with `//`, and go until the end of the line. Nothing in a single-line comment is emitted as CSS; as far as Sass is concerned, they may as well not exist. They’re also called **silent comments**, because they don’t produce any CSS.\n\n**Multi-line comments** start with `/*` and end at the next `*/`. If a multi-line comment is written somewhere that a [statement](structure#statements) is allowed, it’s compiled to a CSS comment. They’re also called **loud comment**, by contrast with silent comments. A multi-line comment that’s compiled to CSS may contain [interpolation](../interpolation), which will be evaluated before the comment is compiled.\n\nBy default, multi-line comments be stripped from the compiled CSS in [compressed mode](../cli/dart-sass#style). If a comment begins with `/*!`, though, it will always be included in the CSS output.\n\n- [SCSS](#example-1-scss)\n- [CSS](#example-1-css)\n\n``` scss\n// This comment won't be included in the CSS.\n\n/* But this comment will, except in compressed mode. */\n\n/* It can also contain interpolation:\n * 1 + 1 = #{1 + 1} */\n\n/*! This comment will be included even in compressed mode. */\n\np /* Multi-line comments can be written anywhere\n   * whitespace is allowed. */ .sans {\n  font: Helvetica, // So can single-line comments.\n        sans-serif;\n}\n```\n\n``` css\n/* But this comment will, except in compressed mode. */\n/* It can also contain interpolation:\n * 1 + 1 = 2 */\n/*! This comment will be included even in compressed mode. */\np .sans {\n  font: Helvetica, sans-serif;\n}\n```\n\n## In Sass\n\nComments in the indented syntax work a little differently: they’re indentation-based, just like the rest of the syntax. Like SCSS, silent comments written with `//` are never emitted as CSS, but unlike SCSS everything indented beneath the opening `//` is also commented out.\n\nIndented syntax comments that start with `/*` work with indentation the same way, except that they are compiled to CSS. Because the extend of the comment is based on indentation, the closing `*/` is optional. Also like SCSS, `/*` comments can contain [interpolation](../interpolation) and can start with `/*!` to avoid being stripped in compressed mode.\n\nComments can also be used within [expressions](structure#expressions) in the indented syntax. In this case, they have exactly the same syntax as they do in SCSS.\n\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n// This comment won't be included in the CSS.\n   This is also commented out.\n\n/* But this comment will, except in compressed mode.\n\n/* It can also contain interpolation:\n   1 + 1 = #{1 + 1}\n\n/*! This comment will be included even in compressed mode.\n\np .sans\n  font: Helvetica, /* Inline comments must be closed. */ sans-serif\n```\n\n``` css\n/* But this comment will, except in compressed mode. */\n/* It can also contain interpolation:\n * 1 + 1 = 2 */\n/*! This comment will be included even in compressed mode. */\np .sans {\n  font: Helvetica, sans-serif;\n}\n```\n\n## Documentation Comments\n\nWhen writing style libraries using Sass, you can use comments to document the [mixins](../at-rules/mixin), [functions](../at-rules/function), [variables](../variables), and [placeholder selectors](../style-rules/placeholder-selectors) that your library provides, as well as the library itself. These are comments are read by the [SassDoc](http://sassdoc.com) tool, which uses them to generate beautiful documentation. Check out [the Susy grid engine](http://oddbird.net/susy/docs/index.html)’s documentation to see it in action!\n\nDocumentation comments are silent comments, written with three slashes (`///`) directly above the thing you’re documenting. SassDoc parses text in the comments as [Markdown](https://www.markdownguide.org/getting-started), and supports many useful [annotations](http://sassdoc.com/annotations/) to describe it in detail.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n/// Computes an exponent.\n///\n/// @param {number} $base\n///   The number to multiply by itself.\n/// @param {integer (unitless)} $exponent\n///   The number of `$base`s to multiply together.\n/// @return {number} `$base` to the power of `$exponent`.\n@function pow($base, $exponent) {\n  $result: 1;\n  @for $_ from 1 through $exponent {\n    $result: $result * $base;\n  }\n  @return $result;\n}\n```\n\n``` scss\n/// Computes an exponent.\n///\n/// @param {number} $base\n///   The number to multiply by itself.\n/// @param {integer (unitless)} $exponent\n///   The number of `$base`s to multiply together.\n/// @return {number} `$base` to the power of `$exponent`.\n@function pow($base, $exponent)\n  $result: 1\n  @for $_ from 1 through $exponent\n    $result: $result * $base\n\n  @return $result\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/syntax/comments](https://sass-lang.com/documentation/syntax/comments)"
- name: CSS At-Rules
  id: at-rules/css
  summary: LibSass, Ruby Sass, and older versions of Dart Sass don’t support interpolation in at-rule names
  description: "# CSS At-Rules\n\n### Page Sections\n\n- [`@media`](#media)\n- [`@supports`](#supports)\n- [`@keyframes`](#keyframes)\n\nCompatibility (Name Interpolation):\n\nDart Sass  \nsince 1.15.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nLibSass, Ruby Sass, and older versions of Dart Sass don’t support [interpolation](../interpolation) in at-rule names. They do support interpolation in values.\n\nSass supports all the at-rules that are part of CSS proper. To stay flexible and forwards-compatible with future versions of CSS, Sass has general support that covers almost all at-rules by default. A CSS at-rule is written `@<name> <value>`, `@<name> { ... }`, or `@<name> <value> { ... }`. The name must be an identifier, and the value (if one exists) can be pretty much anything. Both the name and the value can contain [interpolation](../interpolation).\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n@namespace svg url(http://www.w3.org/2000/svg);\n\n@font-face {\n  font-family: \"Open Sans\";\n  src: url(\"/fonts/OpenSans-Regular-webfont.woff2\") format(\"woff2\");\n}\n\n@counter-style thumbs {\n  system: cyclic;\n  symbols: \"\\1F44D\";\n}\n```\n\n``` scss\n@namespace svg url(http://www.w3.org/2000/svg)\n\n@font-face\n  font-family: \"Open Sans\"\n  src: url(\"/fonts/OpenSans-Regular-webfont.woff2\") format(\"woff2\")\n\n@counter-style thumbs\n  system: cyclic\n  symbols: \"\\1F44D\"\n```\n\n``` css\n@namespace svg url(http://www.w3.org/2000/svg);\n@font-face {\n  font-family: \"Open Sans\";\n  src: url(\"/fonts/OpenSans-Regular-webfont.woff2\") format(\"woff2\");\n}\n@counter-style thumbs {\n  system: cyclic;\n  symbols: \"\\1F44D\";\n}\n```\n\nIf a CSS at-rule is nested within a style rule, the two automatically swap positions so that the at-rule is at the top level of the CSS output and the style rule is within it. This makes it easy to add conditional styling without having to rewrite the style rule’s selector.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n.print-only {\n  display: none;\n\n  @media print { display: block; }\n}\n```\n\n``` scss\n.print-only\n  display: none\n\n  @media print\n    display: block\n```\n\n``` css\n.print-only {\n  display: none;\n}\n@media print {\n  .print-only {\n    display: block;\n  }\n}\n```\n\n## `@media`\n\nCompatibility (Range Syntax):\n\nDart Sass  \nsince 1.11.0\n\nLibSass  \n✗\n\nRuby Sass  \nsince 3.7.0\n\n[▶](javascript:;)\n\nLibSass and older versions of Dart Sass and Ruby Sass don’t support media queries with features written in a [range context](https://www.w3.org/TR/mediaqueries-4/#mq-range-context). They do support other standard media queries.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n@media (width <= 700px) {\n  body {\n    background: green;\n  }\n}\n```\n\n``` scss\n@media (width <= 700px)\n  body\n    background: green\n```\n\n``` css\n@media (width <= 700px) {\n  body {\n    background: green;\n  }\n}\n```\n\nThe [`@media` rule](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) does all of the above and more. In addition to allowing interpolation, it allows [SassScript expressions](../syntax/structure#expressions) to be used directly in the [feature queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Targeting_media_features).\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n- [CSS](#example-4-css)\n\n``` scss\n$layout-breakpoint-small: 960px;\n\n@media (min-width: $layout-breakpoint-small) {\n  .hide-extra-small {\n    display: none;\n  }\n}\n```\n\n``` scss\n$layout-breakpoint-small: 960px\n\n@media (min-width: $layout-breakpoint-small)\n  .hide-extra-small\n    display: none\n```\n\n``` css\n@media (min-width: 960px) {\n  .hide-extra-small {\n    display: none;\n  }\n}\n```\n\nWhen possible, Sass will also merge media queries that are nested within one another to make it easier to support browsers that don’t yet natively support nested `@media` rules.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n- [CSS](#example-5-css)\n\n``` scss\n@media (hover: hover) {\n  .button:hover {\n    border: 2px solid black;\n\n    @media (color) {\n      border-color: #036;\n    }\n  }\n}\n```\n\n``` scss\n@media (hover: hover)\n  .button:hover\n    border: 2px solid black\n\n    @media (color)\n      border-color: #036\n```\n\n``` css\n@media (hover: hover) {\n  .button:hover {\n    border: 2px solid black;\n  }\n}\n@media (hover: hover) and (color) {\n  .button:hover {\n    border-color: #036;\n  }\n}\n```\n\n## `@supports`\n\nThe [`@supports` rule](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports) also allows [SassScript expressions](../syntax/structure#expressions) to be used in the declaration queries.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n- [CSS](#example-6-css)\n\n``` scss\n@mixin sticky-position {\n  position: fixed;\n  @supports (position: sticky) {\n    position: sticky;\n  }\n}\n\n.banner {\n  @include sticky-position;\n}\n```\n\n``` scss\n@mixin sticky-position\n  position: fixed\n  @supports (position: sticky)\n    position: sticky\n\n\n\n.banner\n  @include sticky-position\n```\n\n``` css\n.banner {\n  position: fixed;\n}\n@supports (position: sticky) {\n  .banner {\n    position: sticky;\n  }\n}\n```\n\n## `@keyframes`\n\nThe [`@keyframes` rule](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes) works just like a general at-rule, except that its child rules must be valid keyframe rules (`<number>%`, `from`, or `to`) rather than normal selectors.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n- [CSS](#example-7-css)\n\n``` scss\n@keyframes slide-in {\n  from {\n    margin-left: 100%;\n    width: 300%;\n  }\n\n  70% {\n    margin-left: 90%;\n    width: 150%;\n  }\n\n  to {\n    margin-left: 0%;\n    width: 100%;\n  }\n}\n```\n\n``` scss\n@keyframes slide-in\n  from\n    margin-left: 100%\n    width: 300%\n\n\n  70%\n    margin-left: 90%\n    width: 150%\n\n\n  to\n    margin-left: 0%\n    width: 100%\n```\n\n``` css\n@keyframes slide-in {\n  from {\n    margin-left: 100%;\n    width: 300%;\n  }\n  70% {\n    margin-left: 90%;\n    width: 150%;\n  }\n  to {\n    margin-left: 0%;\n    width: 100%;\n  }\n}\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/css](https://sass-lang.com/documentation/at-rules/css)"
- name: darken
  id: modules/color#darken
  summary: Makes $color darker
  belongs_to: sass:color
  description: |-
    ``` scss
    darken($color, $amount) //=> color
    ```

    Makes `$color` darker.

    The `$amount` must be a number between `0%` and `100%` (inclusive). Decreases the HSL lightness of `$color` by that amount.

    ### ⚠️ Heads up!

    The `darken()` function decreases lightness by a fixed amount, which is often not the desired effect. To make a color a certain percentage darker than it was before, use [`color.scale()`](#scale) instead.

    Because `darken()` is usually not the best way to make a color darker, it’s not included directly in the new module system. However, if you have to preserve the existing behavior, `darken($color, $amount)` can be written [`color.adjust($color, $lightness: -$amount)`](#adjust).

    - [SCSS](#example-8-scss)
    - [Sass](#example-8-sass)

    ``` scss
    // #036 has lightness 20%, so when darken() subtracts 30% it just returns black.
    @debug darken(#036, 30%); // black

    // scale() instead makes it 30% darker than it was originally.
    @debug color.scale(#036, $lightness: -30%); // #002447
    ```

    ``` scss
    // #036 has lightness 20%, so when darken() subtracts 30% it just returns black.
    @debug darken(#036, 30%)  // black

    // scale() instead makes it 30% darker than it was originally.
    @debug color.scale(#036, $lightness: -30%)  // #002447
    ```

    - [SCSS](#example-9-scss)
    - [Sass](#example-9-sass)

    ``` scss
    // Lightness 92% becomes 72%.
    @debug darken(#b37399, 20%); // #7c4465

    // Lightness 85% becomes 45%.
    @debug darken(#f2ece4, 40%); // #b08b5a

    // Lightness 20% becomes 0%.
    @debug darken(#036, 30%); // black
    ```

    ``` scss
    // Lightness 92% becomes 72%.
    @debug darken(#b37399, 20%)  // #7c4465

    // Lightness 85% becomes 45%.
    @debug darken(#f2ece4, 40%)  // #b08b5a

    // Lightness 20% becomes 0%.
    @debug darken(#036, 30%)  // black
    ```
- name: Dart Sass Command-Line Interface
  id: cli/dart-sass
  summary: The Dart Sass executable can be invoked in one of two modes
  description: "# Dart Sass Command-Line Interface\n\n### Page Sections\n\n- [Usage](#usage)\n  - [Overview](#usage)\n  - [One-to-One Mode](#one-to-one-mode)\n  - [Many-to-many Mode](#many-to-many-mode)\n- [Options](#options)\n  - [Overview](#options)\n  - [Input and Output](#input-and-output)\n    - [Overview](#input-and-output)\n    - [`--stdin`](#stdin)\n    - [`--indented`](#indented)\n    - [`--load-path`](#load-path)\n    - [`--style`](#style)\n    - [`--no-charset`](#no-charset)\n    - [`--error-css`](#error-css)\n    - [`--update`](#update)\n  - [Source Maps](#source-maps)\n    - [Overview](#source-maps)\n    - [`--no-source-map`](#no-source-map)\n    - [`--source-map-urls`](#source-map-urls)\n    - [`--embed-sources`](#embed-sources)\n    - [`--embed-source-map`](#embed-source-map)\n  - [Other Options](#other-options)\n    - [Overview](#other-options)\n    - [`--watch`](#watch)\n    - [`--poll`](#poll)\n    - [`--stop-on-error`](#stop-on-error)\n    - [`--interactive`](#interactive)\n    - [`--color`](#color)\n    - [`--no-unicode`](#no-unicode)\n    - [`--quiet`](#quiet)\n    - [`--quiet-deps`](#quiet-deps)\n    - [`--trace`](#trace)\n    - [`--help`](#help)\n    - [`--version`](#version)\n\n## Usage\n\nThe Dart Sass executable can be invoked in one of two modes.\n\n### One-to-One Mode\n\n``` highlight\nsass <input.scss> [output.css]\n```\n\nOne-to-one mode compiles a single input file (`input.scss`) to a single output location (`output.css`). If no output location is passed, the compiled CSS is printed to the terminal.\n\nThe input file is parsed as [SCSS](../syntax#scss) if its extension is `.scss`, as the [indented syntax](../syntax#the-indented-syntax) if its extension is `.sass`, or as [plain CSS](../at-rules/import#importing-css) if its extension is `.css`. If it doesn’t have one of these three extensions, or if it comes from standard input, it’s parsed as SCSS by default. This can be controlled with the [`--indented` flag](#indented).\n\nThe special string `-` can be passed in place of the input file to tell Sass to read the input file from [standard input](https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)). Sass will default to parsing it as SCSS unless the [`--indented` flag](#indented) is passed.\n\n### Many-to-many Mode\n\nCompatibility:\n\nDart Sass  \nsince 1.4.0\n\n``` highlight\nsass [<input.scss>:<output.css>] [<input/>:<output/>]...\n```\n\nMany-to-many mode compiles one or more input files to one or more output files. The inputs are separated from the outputs with colons. It can also compile all Sass files in a directory to CSS files with the same names in another directory.\n\n``` highlight\n​# Compiles style.scss to style.css.\n$ sass style.scss:style.css\n\n​# Compiles light.scss and dark.scss to light.css and dark.css.\n$ sass light.scss:light.css dark.scss:dark.css\n\n​# Compiles all Sass files in themes/ to CSS files in public/css/.\n$ sass themes:public/css\n```\n\nWhen compiling whole directories, Sass will ignore [partial files](../at-rules/import#partials) whose names begin with `_`. You can use partials to separate out your stylesheets without creating a bunch of unnecessary output files.\n\n## Options\n\n### Input and Output\n\nThese options control how Sass loads its input files and how it produces output files.\n\n#### `--stdin`\n\nThis flag is an alternative way of telling Sass that it should read its input file from [standard input](https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)). When it’s passed, no input file may be passed.\n\n``` highlight\n$ echo \"h1 {font-size: 40px}\" | sass --stdin h1.css\n$ echo \"h1 {font-size: 40px}\" | sass --stdin\nh1 {\n  font-size: 40px;\n}\n```\n\nThe `--stdin` flag may not be used with [many-to-many mode](#many-to-many-mode).\n\n#### `--indented`\n\nThis flag tells Sass to parse the input file as the [indented syntax](../syntax#the-indented-syntax). If it’s used in [many-to-many mode](#many-to-many-mode), all input files are parsed as the indented syntax, although files they [use](../at-rules/use) will have their syntax determined as usual. The inverse, `--no-indented`, can be used to force all input files to be parsed as [SCSS](../syntax#scss) instead.\n\nThe `--indented` flag is mostly useful when the input file is coming from [standard input](https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)), so its syntax can’t be automatically determined.\n\n``` highlight\n$ echo -e 'h1\\n  font-size: 40px' | sass --indented -\nh1 {\n  font-size: 40px;\n}\n```\n\n#### `--load-path`\n\nThis option (abbreviated `-I`) adds an additional [load path](../at-rules/use#load-paths) for Sass to look for stylesheets. It can be passed multiple times to provide multiple load paths. Earlier load paths will take precedence over later ones.\n\n``` highlight\n$ sass --load-path=node_modules/bootstrap/dist/css style.scss style.css\n```\n\n#### `--style`\n\nThis option (abbreviated `-s`) controls the output style of the resulting CSS. Dart Sass supports two output styles:\n\n- `expanded` (the default) writes each selector and declaration on its own line.\n- `compressed` removes as many extra characters as possible, and writes the entire stylesheet on a single line.\n\n``` highlight\n$ sass --style=expanded style.scss\nh1 {\n  font-size: 40px;\n}\n\n$ sass --style=compressed style.scss\nh1{font-size:40px}\n```\n\n#### `--no-charset`\n\nCompatibility:\n\nDart Sass  \nsince 1.19.0\n\nThis flag tells Sass never to emit a `@charset` declaration or a UTF-8 [byte-order mark](https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8). By default, or if `--charset` is passed, Sass will insert either a `@charset` declaration (in expanded output mode) or a byte-order mark (in compressed output mode) if the stylesheet contains any non-ASCII characters.\n\n``` highlight\n$ echo 'h1::before {content: \"👭\"}' | sass --no-charset\nh1::before {\n  content: \"👭\";\n}\n\n$ echo 'h1::before {content: \"👭\"}' | sass --charset\n@charset \"UTF-8\";\nh1::before {\n  content: \"👭\";\n}\n```\n\n#### `--error-css`\n\nCompatibility:\n\nDart Sass  \nsince 1.20.0\n\nThis flag tells Sass whether to emit a CSS file when an error occurs during compilation. This CSS file describes the error in a comment *and* in the `content` property of `body::before`, so that you can see the error message in the browser without needing to switch back to the terminal.\n\nBy default, error CSS is enabled if you’re compiling to at least one file on disk (as opposed to standard output). You can pass `--error-css` explicitly to enable it even when you’re compiling to standard out, or `--no-error-css` to disable it everywhere. When it’s disabled, the [`--update` flag](#update) and [`--watch` flag](#watch) will delete CSS files instead when an error occurs.\n\n``` highlight\n$ sass --error-css style.scss style.css\n/* Error: Incompatible units em and px.\n *   ,\n * 1 | $width: 15px + 2em;\n *   |         ^^^^^^^^^^\n *   '\n *   test.scss 1:9  root stylesheet */\n\nbody::before {\n  font-family: \"Source Code Pro\", \"SF Mono\", Monaco, Inconsolata, \"Fira Mono\",\n      \"Droid Sans Mono\", monospace, monospace;\n  white-space: pre;\n  display: block;\n  padding: 1em;\n  margin-bottom: 1em;\n  border-bottom: 2px solid black;\n  content: \"Error: Incompatible units em and px.\\a   \\2577 \\a 1 \\2502  $width: 15px + 2em;\\a   \\2502          ^^^^^^^^^^\\a   \\2575 \\a   test.scss 1:9  root stylesheet\";\n}\nError: Incompatible units em and px.\n  ╷\n1 │ $width: 15px + 2em;\n  │         ^^^^^^^^^^\n  ╵\n  test.scss 1:9  root stylesheet\n```\n\n#### `--update`\n\nCompatibility:\n\nDart Sass  \nsince 1.4.0\n\nIf the `--update` flag is passed, Sass will only compile stylesheets whose dependencies have been modified more recently than the corresponding CSS file was generated. It will also print status messages when updating stylesheets.\n\n``` highlight\n$ sass --update themes:public/css\nCompiled themes/light.scss to public/css/light.css.\n```\n\n### Source Maps\n\nCompatibility:\n\nDart Sass  \nsince 1.3.0\n\nSource maps are files that tell browsers or other tools that consume CSS how that CSS corresponds to the Sass files from which it was generated. They make it possible to see and even edit your Sass files in browsers. See instructions for using source maps in [Chrome](https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps) and [Firefox](https://developer.mozilla.org/en-US/docs/Tools/Style_Editor#Source_map_support).\n\nDart Sass generates source maps by default for every CSS file it emits.\n\n#### `--no-source-map`\n\nIf the `--no-source-map` flag is passed, Sass won’t generate any source maps. it cannot be passed along with other source map options.\n\n``` highlight\n$ sass --no-source-map style.scss style.css\n```\n\n#### `--source-map-urls`\n\nThis option controls how the source maps that Sass generates link back to the Sass files that contributed to the generated CSS. Dart Sass supports two types of URLs:\n\n- `relative` (the default) uses relative URLs from the location of the source map file to the locations of the Sass source file.\n- `absolute` uses the absolute [`file:` URLs](https://en.wikipedia.org/wiki/File_URI_scheme) of the Sass source files. Note that absolute URLs will only work on the same computer that the CSS was compiled.\n\n``` highlight\n​# Generates a URL like \"../sass/style.scss\".\n$ sass --source-map-urls=relative sass/style.scss css/style.css\n\n​# Generates a URL like \"file:///home/style-wiz/sassy-app/sass/style.scss\".\n$ sass --source-map-urls=absolute sass/style.scss css/style.css\n```\n\n#### `--embed-sources`\n\nThis flag tells Sass to embed the entire contents of the Sass files that contributed to the generated CSS in the source map. This may produce very large source maps, but it guarantees that the source will be available on any computer no matter how the CSS is served.\n\n``` highlight\n$ sass --embed-sources sass/style.scss css.style.css\n```\n\n#### `--embed-source-map`\n\nThis flag tells Sass to embed the contents of the source map file in the generated CSS, rather than creating a separate file and linking to it from the CSS.\n\n``` highlight\n$ sass --embed-source-map sass/style.scss css.style.css\n```\n\n### Other Options\n\n#### `--watch`\n\nCompatibility:\n\nDart Sass  \nsince 1.6.0\n\nThis flag (abbreviated `-w`) acts like the [`--update` flag](#update), but after the first round compilation is done Sass stays open and continues compiling stylesheets whenever they or their dependencies change.\n\nSass watches only the directories that you pass as-is on the command line, parent directories of filenames you pass on the command line, and load paths. It does not watch additional directories based on a file’s `@import`/`@use`/ `@forward` rules.\n\n``` highlight\n$ sass --watch themes:public/css\nCompiled themes/light.scss to public/css/light.css.\n\n​# Then when you edit themes/dark.scss...\nCompiled themes/dark.scss to public/css/dark.css.\n```\n\n#### `--poll`\n\nCompatibility:\n\nDart Sass  \nsince 1.8.0\n\nThis flag, which may only be passed along with `--watch`, tells Sass to manually check for changes to the source files every so often instead of relying on the operating system to notify it when something changes. This may be necessary if you’re editing Sass on a remote drive where the operating system’s notification system doesn’t work.\n\n``` highlight\n$ sass --watch --poll themes:public/css\nCompiled themes/light.scss to public/css/light.css.\n\n​# Then when you edit themes/dark.scss...\nCompiled themes/dark.scss to public/css/dark.css.\n```\n\n#### `--stop-on-error`\n\nCompatibility:\n\nDart Sass  \nsince 1.8.0\n\nThis flag tells Sass to stop compiling immediately when an error is detected, rather than trying to compile other Sass files that may not contain errors. It’s mostly useful in [many-to-many mode](#many-to-many-mode).\n\n``` highlight\n$ sass --stop-on-error themes:public/css\nError: Expected expression.\n   ╷\n42 │ h1 {font-face: }\n   │                ^\n   ╵\n  themes/light.scss 42:16  root stylesheet\n```\n\n#### `--interactive`\n\nCompatibility:\n\nDart Sass  \nsince 1.5.0\n\nThis flag (abbreviated `-i`) tells Sass to run in interactive mode, where you can write [SassScript expressions](../syntax/structure#expressions) and see their results. Interactive mode also supports [variables](../variables) and [`@use` rules](../at-rules/use).\n\n``` highlight\n$ sass --interactive\n>> 1px + 1in\n97px\n>> @use \"sass:map\"\n>> $map: (\"width\": 100px, \"height\": 70px)\n(\"width\": 100px, \"height\": 70px)\n>> map.get($map, \"width\")\n100px\n```\n\n#### `--color`\n\nThis flag (abbreviated `-c`) tells Sass to emit [terminal colors](https://en.wikipedia.org/wiki/ANSI_escape_code#Colors), and the inverse `--no-color` tells it not to emit colors. By default, it will emit colors if it looks like it’s being run on a terminal that supports them.\n\n``` highlight\n$ sass --color style.scss style.css\nError: Incompatible units em and px.\n  ╷\n1 │ $width: 15px + 2em\n  │         ^^^^^^^^^^\n  ╵\n  style.scss 1:9  root stylesheet\n\n$ sass --no-color style.scss style.css\nError: Incompatible units em and px.\n  ╷\n1 │ $width: 15px + 2em\n  │         ^^^^^^^^^^\n  ╵\n  style.scss 1:9  root stylesheet\n```\n\n#### `--no-unicode`\n\nCompatibility:\n\nDart Sass  \nsince 1.17.0\n\nThis flag tells Sass only to emit ASCII characters to the terminal as part of error messages. By default, or if `--unicode` is passed, Sass will emit non-ASCII characters for these messages. This flag does not affect the CSS output.\n\n``` highlight\n$ sass --no-unicode style.scss style.css\nError: Incompatible units em and px.\n  ,\n1 | $width: 15px + 2em;\n  |         ^^^^^^^^^^\n  '\n  test.scss 1:9  root stylesheet\n\n$ sass --unicode style.scss style.css\nError: Incompatible units em and px.\n  ╷\n1 │ $width: 15px + 2em;\n  │         ^^^^^^^^^^\n  ╵\n  test.scss 1:9  root stylesheet\n```\n\n#### `--quiet`\n\nThis flag (abbreviated `-q`) tells Sass not to emit any warnings when compiling. By default, Sass emits warnings when deprecated features are used or when the [`@warn` rule](../at-rules/warn) is encountered. It also silences the [`@debug` rule](../at-rules/debug).\n\n``` highlight\n$ sass --quiet style.scss style.css\n```\n\n#### `--quiet-deps`\n\nThis flag tells Sass not to emit deprecation warnings that come from dependencies. It considers any file that’s transitively imported through a [load path](../at-rules/use#load-paths) to be a “dependency”. This flag doesn’t affect the [`@warn` rule](../at-rules/warn) or the [`@debug` rule](../at-rules/debug).\n\n``` highlight\n$ sass --load-path=node_modules --quiet-deps style.scss style.css\n```\n\n#### `--trace`\n\nThis flag tells Sass to print the full Dart or JavaScript stack trace when an error is encountered. It’s used by the Sass team for debugging errors.\n\n``` highlight\n$ sass --trace style.scss style.css\nError: Expected expression.\n   ╷\n42 │ h1 {font-face: }\n   │                ^\n   ╵\n  themes/light.scss 42:16  root stylesheet\n\npackage:sass/src/visitor/evaluate.dart 1846:7                        _EvaluateVisitor._addExceptionSpan\npackage:sass/src/visitor/evaluate.dart 1128:12                       _EvaluateVisitor.visitBinaryOperationExpression\npackage:sass/src/ast/sass/expression/binary_operation.dart 39:15     BinaryOperationExpression.accept\npackage:sass/src/visitor/evaluate.dart 1097:25                       _EvaluateVisitor.visitVariableDeclaration\npackage:sass/src/ast/sass/statement/variable_declaration.dart 50:15  VariableDeclaration.accept\npackage:sass/src/visitor/evaluate.dart 335:13                        _EvaluateVisitor.visitStylesheet\npackage:sass/src/visitor/evaluate.dart 323:5                         _EvaluateVisitor.run\npackage:sass/src/visitor/evaluate.dart 81:10                         evaluate\npackage:sass/src/executable/compile_stylesheet.dart 59:9             compileStylesheet\npackage:sass/src/executable.dart 62:15                               main\n```\n\n#### `--help`\n\nThis flag (abbreviated `-h`) prints a summary of this documentation.\n\n``` highlight\n$ sass --help\nCompile Sass to CSS.\n\nUsage: sass <input.scss> [output.css]\n       sass <input.scss>:<output.css> <input/>:<output/>\n\n...\n```\n\n#### `--version`\n\nThis flag prints the current version of Sass.\n\n``` highlight\n$ sass --version\n1.56.1\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/cli/dart-sass](https://sass-lang.com/documentation/cli/dart-sass)"
- name: desaturate
  id: modules/color#desaturate
  summary: Makes $color less saturated
  belongs_to: sass:color
  description: |-
    ``` scss
    desaturate($color, $amount) //=> color
    ```

    Makes `$color` less saturated.

    The `$amount` must be a number between `0%` and `100%` (inclusive). Decreases the HSL saturation of `$color` by that amount.

    ### ⚠️ Heads up!

    The `desaturate()` function decreases saturation by a fixed amount, which is often not the desired effect. To make a color a certain percentage less saturated than it was before, use [`color.scale()`](#scale) instead.

    Because `desaturate()` is usually not the best way to make a color less saturated, it’s not included directly in the new module system. However, if you have to preserve the existing behavior, `desaturate($color, $amount)` can be written [`color.adjust($color, $saturation: -$amount)`](#adjust).

    - [SCSS](#example-10-scss)
    - [Sass](#example-10-sass)

    ``` scss
    // #d2e1dd has saturation 20%, so when desaturate() subtracts 30% it just
    // returns gray.
    @debug desaturate(#d2e1dd, 30%); // #dadada

    // scale() instead makes it 30% less saturated than it was originally.
    @debug color.scale(#6b717f, $saturation: -30%); // #6e727c
    ```

    ``` scss
    // #6b717f has saturation 20%, so when desaturate() subtracts 30% it just
    // returns gray.
    @debug desaturate(#d2e1dd, 30%)  // #dadada

    // scale() instead makes it 30% less saturated than it was originally.
    @debug color.scale(#6b717f, $saturation: -30%)  // #6e727c
    ```

    - [SCSS](#example-11-scss)
    - [Sass](#example-11-sass)

    ``` scss
    // Saturation 100% becomes 80%.
    @debug desaturate(#036, 20%); // #0a335c

    // Saturation 35% becomes 15%.
    @debug desaturate(#f2ece4, 20%); // #eeebe8

    // Saturation 20% becomes 0%.
    @debug desaturate(#d2e1dd, 30%); // #dadada
    ```

    ``` scss
    // Saturation 100% becomes 80%.
    @debug desaturate(#036, 20%)  // #0a335c

    // Saturation 35% becomes 15%.
    @debug desaturate(#f2ece4, 20%)  // #eeebe8

    // Saturation 20% becomes 0%.
    @debug desaturate(#d2e1dd, 30%)  // #dadada
    ```
- name: Equality Operators
  id: operators/equality
  summary: LibSass and older versions of Ruby Sass consider numbers without units to be equal to the same numbers with any units
  description: "# Equality Operators\n\nCompatibility (Unitless Equality):\n\nDart Sass  \n✓\n\nLibSass  \n✗\n\nRuby Sass  \nsince 4.0.0 (unreleased)\n\n[▶](javascript:;)\n\nLibSass and older versions of Ruby Sass consider numbers without units to be equal to the same numbers with any units. This behavior was deprecated and has been removed from more recently releases because it violates [transitivity](https://en.wikipedia.org/wiki/Transitive_relation).\n\nThe equality operators return whether or not two values are the same. They’re written `<expression> == <expression>`, which returns whether two [expressions](../syntax/structure#expressions) are equal, and `<expression> != <expression>`, which returns whether two expressions are *not* equal. Two values are considered equal if they’re the same type *and* the same value, which means different things for different types:\n\n- [Numbers](../values/numbers) are equal if they have the same value *and* the same units, or if their values are equal when their units are converted between one another.\n- [Strings](../values/strings) are unusual in that [unquoted](../values/strings#unquoted) and [quoted](../values/strings#quoted) strings with the same contents are considered equal.\n- [Colors](../values/colors) are equal if they have the same red, green, blue, and alpha values.\n- [Lists](../values/lists) are equal if their contents are equal. Comma-separated lists aren’t equal to space-separated lists, and bracketed lists aren’t equal to unbracketed lists.\n- [Maps](../values/maps) are equal if their keys and values are both equal.\n- [Calculations](../values/calculations) are equal if their names and arguments are all equal. Operation arguments are compared textually.\n- [`true`, `false`](../values/booleans), and [`null`](../values/null) are only equal to themselves.\n- [Functions](../values/functions) are equal to the same function. Functions are compared *by reference*, so even if two functions have the same name and definition they’re considered different if they aren’t defined in the same place.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug 1px == 1px; // true\n@debug 1px != 1em; // true\n@debug 1 != 1px; // true\n@debug 96px == 1in; // true\n\n@debug \"Helvetica\" == Helvetica; // true\n@debug \"Helvetica\" != \"Arial\"; // true\n\n@debug hsl(34, 35%, 92.1%) == #f2ece4; // true\n@debug rgba(179, 115, 153, 0.5) != rgba(179, 115, 153, 0.8); // true\n\n@debug (5px 7px 10px) == (5px 7px 10px); // true\n@debug (5px 7px 10px) != (10px 14px 20px); // true\n@debug (5px 7px 10px) != (5px, 7px, 10px); // true\n@debug (5px 7px 10px) != [5px 7px 10px]; // true\n\n$theme: (\"venus\": #998099, \"nebula\": #d2e1dd);\n@debug $theme == (\"venus\": #998099, \"nebula\": #d2e1dd); // true\n@debug $theme != (\"venus\": #998099, \"iron\": #dadbdf); // true\n\n@debug true == true; // true\n@debug true != false; // true\n@debug null != false; // true\n\n@debug get-function(\"rgba\") == get-function(\"rgba\"); // true\n@debug get-function(\"rgba\") != get-function(\"hsla\"); // true\n```\n\n``` scss\n@debug 1px == 1px  // true\n@debug 1px != 1em  // true\n@debug 1 != 1px  // true\n@debug 96px == 1in  // true\n\n@debug \"Helvetica\" == Helvetica  // true\n@debug \"Helvetica\" != \"Arial\"  // true\n\n@debug hsl(34, 35%, 92.1%) == #f2ece4  // true\n@debug rgba(179, 115, 153, 0.5) != rgba(179, 115, 153, 0.8)  // true\n\n@debug (5px 7px 10px) == (5px 7px 10px)  // true\n@debug (5px 7px 10px) != (10px 14px 20px)  // true\n@debug (5px 7px 10px) != (5px, 7px, 10px)  // true\n@debug (5px 7px 10px) != [5px 7px 10px]  // true\n\n$theme: (\"venus\": #998099, \"nebula\": #d2e1dd) \n@debug $theme == (\"venus\": #998099, \"nebula\": #d2e1dd)  // true\n@debug $theme != (\"venus\": #998099, \"iron\": #dadbdf)  // true\n\n@debug calc(10px + 10%) == calc(10px + 10%)  // true\n@debug calc(10% + 10px) == calc(10px + 10%)  // false\n\n@debug true == true  // true\n@debug true != false  // true\n@debug null != false  // true\n\n@debug get-function(\"rgba\") == get-function(\"rgba\")  // true\n@debug get-function(\"rgba\") != get-function(\"hsla\")  // true\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/operators/equality](https://sass-lang.com/documentation/operators/equality)"
- name: Flow Control Rules
  id: at-rules/control
  summary: Sass provides a number of at-rules that make it possible to control whether styles get emitted, or to emit them multiple times with small variations
  description: "# Flow Control Rules\n\nSass provides a number of at-rules that make it possible to control whether styles get emitted, or to emit them multiple times with small variations. They can also be used in [mixins](mixin) and [functions](function) to write small algorithms to make writing your Sass easier. Sass supports four flow control rules:\n\n- [`@if`](control/if) controls whether or not a block is evaluated.\n\n- [`@each`](control/each) evaluates a block for each element in a [list](../values/lists) or each pair in a [map](../values/maps).\n\n- [`@for`](control/for) evaluates a block a certain number of times.\n\n- [`@while`](control/while) evaluates a block until a certain condition is met.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/at-rules/control](https://sass-lang.com/documentation/at-rules/control)"
- name: Functions
  id: values/functions
  summary: In older versions of LibSass and Ruby Sass, the call() function took a string representing a function’s name
  description: "# Functions\n\nCompatibility (Argument Type):\n\nDart Sass  \n✓\n\nLibSass  \nsince 3.5.0\n\nRuby Sass  \nsince 3.5.0\n\n[▶](javascript:;)\n\nIn older versions of LibSass and Ruby Sass, the [`call()` function](../modules/meta#call) took a string representing a function’s name. This was changed to take a function value instead in preparation for a new module system where functions are no longer global and so a given name may not always refer to the same function.\n\nPassing a string to `call()` still works in all implementations, but it’s deprecated and will be disallowed in future versions.\n\n[Functions](../at-rules/function) can be values too! You can’t directly write a function as a value, but you can pass a function’s name to the [`meta.get-function()` function](../modules/meta#get-function) to get it as a value. Once you have a function value, you can pass it to the [`meta.call()` function](../modules/meta#call) to call it. This is useful for writing *higher-order functions* that call other functions.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n@use \"sass:list\";\n@use \"sass:meta\";\n@use \"sass:string\";\n\n/// Return a copy of $list with all elements for which $condition returns `true`\n/// removed.\n@function remove-where($list, $condition) {\n  $new-list: ();\n  $separator: list.separator($list);\n  @each $element in $list {\n    @if not meta.call($condition, $element) {\n      $new-list: list.append($new-list, $element, $separator: $separator);\n    }\n  }\n  @return $new-list;\n}\n\n$fonts: Tahoma, Geneva, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\ncontent {\n  @function contains-helvetica($string) {\n    @return string.index($string, \"Helvetica\");\n  }\n  font-family: remove-where($fonts, meta.get-function(\"contains-helvetica\"));\n}\n```\n\n``` scss\n@use \"sass:list\"\n@use \"sass:meta\"\n@use \"sass:string\"\n\n/// Return a copy of $list with all elements for which $condition returns `true`\n/// removed.\n@function remove-where($list, $condition)\n  $new-list: ()\n  $separator: list.separator($list)\n  @each $element in $list\n    @if not meta.call($condition, $element)\n      $new-list: list.append($new-list, $element, $separator: $separator)\n\n\n  @return $new-list\n\n\n$fonts: Tahoma, Geneva, \"Helvetica Neue\", Helvetica, Arial, sans-serif\n\n.content\n  @function contains-helvetica($string)\n    @return string.index($string, \"Helvetica\")\n\n  font-family: remove-where($fonts, meta.get-function(\"contains-helvetica\"))\n```\n\n``` css\n.content {\n  font-family: Tahoma, Geneva, Arial, sans-serif;\n}\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/values/functions](https://sass-lang.com/documentation/values/functions)"
- name: hsl
  id: modules#hsl
  summary: Note that for these implementations, the $alpha argument is required if the function name hsla() is used, and forbidden if the function name hsl() is used
  belongs_to: Built-In Modules
  description: |-
    ``` scss
    hsl($hue $saturation $lightness)
    hsl($hue $saturation $lightness / $alpha)
    hsl($hue, $saturation, $lightness, $alpha: 1)
    hsla($hue $saturation $lightness)
    hsla($hue $saturation $lightness / $alpha)
    hsla($hue, $saturation, $lightness, $alpha: 1) //=> color
    ```

    Compatibility (Level 4 Syntax):

    Dart Sass

    since 1.15.0

    LibSass

    ✗

    Ruby Sass

    ✗

    [▶](javascript:;)

    LibSass and Ruby Sass only support the following signatures:

    - `hsl($hue, $saturation, $lightness)`
    - `hsla($hue, $saturation, $lightness, $alpha)`

    Note that for these implementations, the `$alpha` argument is *required* if the function name `hsla()` is used, and *forbidden* if the function name `hsl()` is used.

    Compatibility (Percent Alpha):

    Dart Sass

    ✓

    LibSass

    ✗

    Ruby Sass

    since 3.7.0

    [▶](javascript:;)

    LibSass and older versions of Ruby Sass don’t support alpha values specified as percentages.

    Returns a color with the given [hue, saturation, and lightness](https://en.wikipedia.org/wiki/HSL_and_HSV) and the given alpha channel.

    The hue is a number between `0deg` and `360deg` (inclusive) and may be unitless. The saturation and lightness are numbers between `0%` and `100%` (inclusive) and may *not* be unitless. The alpha channel can be specified as either a unitless number between 0 and 1 (inclusive), or a percentage between `0%` and `100%` (inclusive).

    ### 💡 Fun fact:

    You can pass [special functions](syntax/special-functions) like `calc()` or `var()` in place of any argument to `hsl()`. You can even use `var()` in place of multiple arguments, since it might be replaced by multiple values! When a color function is called this way, it returns an unquoted string using the same signature it was called with.

    - [SCSS](#example-2-scss)
    - [Sass](#example-2-sass)

    ``` scss
    @debug hsl(210deg 100% 20% / var(--opacity)); // hsl(210deg 100% 20% / var(--opacity))
    @debug hsla(var(--peach), 20%); // hsla(var(--peach), 20%)
    ```

    ``` scss
    @debug hsl(210deg 100% 20% / var(--opacity))  // hsl(210deg 100% 20% / var(--opacity))
    @debug hsla(var(--peach), 20%)  // hsla(var(--peach), 20%)
    ```

    ### ⚠️ Heads up!

    Sass’s [special parsing rules](operators/numeric#slash-separated-values) for slash-separated values make it difficult to pass variables for `$lightness` or `$alpha` when using the `hsl($hue $saturation $lightness / $alpha)` signature. Consider using `hsl($hue, $saturation, $lightness, $alpha)` instead.

    - [SCSS](#example-3-scss)
    - [Sass](#example-3-sass)

    ``` scss
    @debug hsl(210deg 100% 20%); // #036
    @debug hsl(34, 35%, 92%); // #f2ece4
    @debug hsl(210deg 100% 20% / 50%); // rgba(0, 51, 102, 0.5)
    @debug hsla(34, 35%, 92%, 0.2); // rgba(242, 236, 228, 0.2)
    ```

    ``` scss
    @debug hsl(210deg 100% 20%) // #036
    @debug hsl(34, 35%, 92%) // #f2ece4
    @debug hsl(210deg 100% 20% / 50%)  // rgba(0, 51, 102, 0.5)
    @debug hsla(34, 35%, 92%, 0.2)  // rgba(242, 236, 228, 0.2)
    ```
- name: if
  id: modules#if
  summary: Returns $if-true if $condition is truthy, and $if-false otherwise
  belongs_to: Built-In Modules
  description: |-
    ``` scss
    if($condition, $if-true, $if-false)
    ```

    Returns `$if-true` if `$condition` is [truthy](at-rules/control/if#truthiness-and-falsiness), and `$if-false` otherwise.

    This function is special in that it doesn’t even evaluate the argument that isn’t returned, so it’s safe to call even if the unused argument would throw an error.

    - [SCSS](#example-4-scss)
    - [Sass](#example-4-sass)

    ``` scss
    @debug if(true, 10px, 15px); // 10px
    @debug if(false, 10px, 15px); // 15px
    @debug if(variable-defined($var), $var, null); // null
    ```

    ``` scss
    @debug if(true, 10px, 15px)  // 10px
    @debug if(false, 10px, 15px)  // 15px
    @debug if(variable-defined($var), $var, null)  // null
    ```
- name: Interface CompileResult
  id: js-api/interfaces/compileresult
  summary: The result of compiling Sass to CSS
  description: "# Interface CompileResult\n\nThe result of compiling Sass to CSS. Returned by [compile](../modules#compile), [compileAsync](../modules#compileAsync), [compileString](../modules#compileString), and [compileStringAsync](../modules#compileStringAsync).\n\n### Hierarchy\n\n- CompileResult\n\n## Index\n\n### Properties\n\n- [css](compileresult#css)\n- [loadedUrls](compileresult#loadedUrls)\n- [sourceMap](compileresult#sourceMap)\n\n## Properties\n\n### css\n\ncss: string\n\n- Defined in [js-api-doc/compile.d.ts:19](https://github.com/sass/sass/blob/6d42491/js-api-doc/compile.d.ts#L19)\n\nThe generated CSS.\n\nNote that this *never* includes a `sourceMapUrl` comment—it's up to the caller to determine where to save the source map and how to link to it from the stylesheet.\n\n### loadedUrls\n\nloadedUrls: [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL)\\[\\]\n\n- Defined in [js-api-doc/compile.d.ts:25](https://github.com/sass/sass/blob/6d42491/js-api-doc/compile.d.ts#L25)\n\nThe canonical URLs of all the stylesheets that were loaded during the Sass compilation. The order of these URLs is not guaranteed.\n\n### Optional sourceMap\n\nsourceMap?: RawSourceMap\n\n- Defined in [js-api-doc/compile.d.ts:37](https://github.com/sass/sass/blob/6d42491/js-api-doc/compile.d.ts#L37)\n\nThe object representation of the source map that maps locations in the generated CSS back to locations in the Sass source code.\n\nThis typically uses absolute `file:` URLs to refer to Sass files, although this can be controlled by having a custom [Importer](importer) return [ImporterResult.sourceMapUrl](importerresult#sourceMapUrl).\n\nThis is set if and only if [Options.sourceMap](options#sourceMap) is `true`.\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [CompileResult](compileresult)\n  - [css](compileresult#css)\n  - [loadedUrls](compileresult#loadedUrls)\n  - [sourceMap](compileresult#sourceMap)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/CompileResult](https://sass-lang.com/documentation/js-api/interfaces/CompileResult)"
- name: Interface FileImporter<sync>
  id: js-api/interfaces/fileimporter
  summary: A special type of importer that redirects all loads to existing files on disk
  description: "# Interface FileImporter\\<sync\\>\n\nA special type of importer that redirects all loads to existing files on disk. Although this is less powerful than a full [Importer](importer), it automatically takes care of Sass features like resolving partials and file extensions and of loading the file from disk.\n\nLike all importers, this implements custom Sass loading logic for [`@use` rules](../../at-rules/use) and [`@import` rules](../../at-rules/import). It can be passed to [Options.importers](options#importers) or [StringOptionsWithImporter.importer](stringoptionswithimporter#importer).\n\nexample  \n``` js\nconst {pathToFileURL} = require('url');\n\nsass.compile('style.scss', {\nimporters: [{\n// An importer that redirects relative URLs starting with \"~\" to\n// `node_modules`.\nfindFileUrl(url) {\nif (!url.startsWith('~')) returnnull;\nreturnnewURL(url.substring(1), pathToFileURL('node_modules'));\n    }\n  }]\n});\n```\n\n### Type parameters\n\n- #### sync: \"sync\" \\| \"async\" = \"sync\" \\| \"async\"\n\n  A `FileImporter<'sync'>`'s [findFileUrl](fileimporter#findFileUrl) must return synchronously, but in return it can be passed to [compile](../modules#compile) and [compileString](../modules#compileString) in addition to [compileAsync](../modules#compileAsync) and [compileStringAsync](../modules#compileStringAsync).\n\n  A `FileImporter<'async'>`'s [findFileUrl](fileimporter#findFileUrl) may either return synchronously or asynchronously, but it can only be used with [compileAsync](../modules#compileAsync) and [compileStringAsync](../modules#compileStringAsync).\n\n### Hierarchy\n\n- FileImporter\n\n## Index\n\n### Methods\n\n- [findFileUrl](fileimporter#findFileUrl)\n\n## Methods\n\n### findFileUrl\n\n- findFileUrl(url: string, options: { fromImport: boolean }): [PromiseOr](../modules#PromiseOr)\\<null \\| [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL), sync\\>\n\n- - Defined in [js-api-doc/importer.d.ts:85](https://github.com/sass/sass/blob/6d42491/js-api-doc/importer.d.ts#L85)\n\n  A callback that's called to partially resolve a load (such as [`@use`](../../at-rules/use) or [`@import`](../../at-rules/import)) to a file on disk.\n\n  Unlike an [Importer](importer), the compiler will automatically handle relative loads for a [FileImporter](fileimporter). See [Options.importers](options#importers) for more details on the way loads are resolved.\n\n  throws  \n  any - If this importer recognizes `url` but determines that it's invalid, it may throw an exception that will be wrapped by Sass. If the exception object has a `message` property, it will be used as the wrapped exception's message; otherwise, the exception object's `toString()` will be used. This means it's safe for importers to throw plain strings.\n\n  #### Parameters\n\n  - ##### url: string\n\n    The loaded URL. Since this might be relative, it's represented as a string rather than a \\[\\[URL\\]\\] object.\n\n  - ##### options: { fromImport: boolean }\n\n    - ##### fromImport: boolean\n\n      Whether this is being invoked because of a Sass `@import` rule, as opposed to a `@use` or `@forward` rule.\n\n      This should *only* be used for determining whether or not to load [import-only files](../../at-rules/import#import-only-files).\n\n  #### Returns [PromiseOr](../modules#PromiseOr)\\<null \\| [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL), sync\\>\n\n  An absolute `file:` URL if this importer recognizes the `url`. This may be only partially resolved: the compiler will automatically look for [partials](../../at-rules/use#partials), [index files](../../at-rules/use#index-files), and file extensions based on the returned URL. An importer may also return a fully resolved URL if it so chooses.\n\n  If this importer doesn't recognize the URL, it should return `null` instead to allow other importers or [load paths](options#loadPaths) to handle it.\n\n  This may also return a `Promise`, but if it does the importer may only be passed to [compileAsync](../modules#compileAsync) and [compileStringAsync](../modules#compileStringAsync), not [compile](../modules#compile) or [compileString](../modules#compileString).\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [FileImporter](fileimporter)\n  - [findFileUrl](fileimporter#findFileUrl)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/FileImporter](https://sass-lang.com/documentation/js-api/interfaces/FileImporter)"
- name: Interface Importer<sync>
  id: js-api/interfaces/importer
  summary: An object that implements custom Sass loading logic for @use rules and @import rules
  description: "# Interface Importer\\<sync\\>\n\nAn object that implements custom Sass loading logic for [`@use` rules](../../at-rules/use) and [`@import` rules](../../at-rules/import). It can be passed to [Options.importers](options#importers) or [StringOptionsWithImporter.importer](stringoptionswithimporter#importer).\n\nImporters that simply redirect to files on disk are encouraged to use the [FileImporter](fileimporter) interface instead.\n\nSee [Options.importers](options#importers) for more details on the way loads are resolved.\n\nexample  \nResolving a Load\n\nThis is the process of resolving a load using a custom importer:\n\n- The compiler encounters `@use \"db:foo/bar/baz\"`.\n- It calls [canonicalize](importer#canonicalize) with `\"db:foo/bar/baz\"`.\n- [canonicalize](importer#canonicalize) returns `new URL(\"db:foo/bar/baz/_index.scss\")`.\n- If the compiler has already loaded a stylesheet with this canonical URL, it re-uses the existing module.\n- Otherwise, it calls [load](importer#load) with `new URL(\"db:foo/bar/baz/_index.scss\")`.\n- [load](importer#load) returns an [ImporterResult](importerresult) that the compiler uses as the contents of the module.\n\nexample  \nCode Sample\n\n``` js\nsass.compile('style.scss', {\n// An importer for URLs like `bgcolor:orange` that generates a\n// stylesheet with the given background color.\nimporters: [{\ncanonicalize(url) {\nif (!url.startsWith('bgcolor:')) returnnull;\nreturnnewURL(url);\n    },\nload(canonicalUrl) {\nreturn {\ncontents:`body {background-color: ${canonicalUrl.pathname}}`,\nsyntax:'scss'\n      };\n    }\n  }]\n});\n```\n\n### Type parameters\n\n- #### sync: \"sync\" \\| \"async\" = \"sync\" \\| \"async\"\n\n  An `Importer<'sync'>`'s [canonicalize](importer#canonicalize) and [load](importer#load) must return synchronously, but in return it can be passed to [compile](../modules#compile) and [compileString](../modules#compileString) in addition to [compileAsync](../modules#compileAsync) and [compileStringAsync](../modules#compileStringAsync).\n\n  An `Importer<'async'>`'s [canonicalize](importer#canonicalize) and [load](importer#load) may either return synchronously or asynchronously, but it can only be used with [compileAsync](../modules#compileAsync) and [compileStringAsync](../modules#compileStringAsync).\n\n### Hierarchy\n\n- Importer\n\n## Index\n\n### Methods\n\n- [canonicalize](importer#canonicalize)\n- [load](importer#load)\n\n## Methods\n\n### canonicalize\n\n- canonicalize(url: string, options: { fromImport: boolean }): [PromiseOr](../modules#PromiseOr)\\<null \\| [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL), sync\\>\n\n- - Defined in [js-api-doc/importer.d.ts:239](https://github.com/sass/sass/blob/6d42491/js-api-doc/importer.d.ts#L239)\n\n  If `url` is recognized by this importer, returns its canonical format.\n\n  If Sass has already loaded a stylesheet with the returned canonical URL, it re-uses the existing parse tree (and the loaded module for `@use`). This means that importers **must ensure** that the same canonical URL always refers to the same stylesheet, *even across different importers*. As such, importers are encouraged to use unique URL schemes to disambiguate between one another.\n\n  As much as possible, custom importers should canonicalize URLs the same way as the built-in filesystem importer:\n\n  - The importer should look for stylesheets by adding the prefix `_` to the URL's basename, and by adding the extensions `.sass` and `.scss` if the URL doesn't already have one of those extensions. For example, if the URL was `foo/bar/baz`, the importer would look for:\n\n    - `foo/bar/baz.sass`\n    - `foo/bar/baz.scss`\n    - `foo/bar/_baz.sass`\n    - `foo/bar/_baz.scss`\n\n    If the URL was `foo/bar/baz.scss`, the importer would just look for:\n\n    - `foo/bar/baz.scss`\n    - `foo/bar/_baz.scss`\n\n    If the importer finds a stylesheet at more than one of these URLs, it should throw an exception indicating that the URL is ambiguous. Note that if the extension is explicitly specified, a stylesheet with the opposite extension is allowed to exist.\n\n  - If none of the possible paths is valid, the importer should perform the same resolution on the URL followed by `/index`. In the example above, it would look for:\n\n    - `foo/bar/baz/index.sass`\n    - `foo/bar/baz/index.scss`\n    - `foo/bar/baz/_index.sass`\n    - `foo/bar/baz/_index.scss`\n\n    As above, if the importer finds a stylesheet at more than one of these URLs, it should throw an exception indicating that the import is ambiguous.\n\n  If no stylesheets are found, the importer should return `null`.\n\n  Calling [canonicalize](importer#canonicalize) multiple times with the same URL must return the same result. Calling [canonicalize](importer#canonicalize) with a URL returned by a previous call to [canonicalize](importer#canonicalize) must return that URL.\n\n  Relative loads in stylesheets loaded from an importer are handled by resolving the loaded URL relative to the canonical URL of the stylesheet that contains it, and passing that URL back to the importer's [canonicalize](importer#canonicalize) method. For example, suppose the \"Resolving a Load\" example [above](importer) returned a stylesheet that contained `@use \"mixins\"`:\n\n  - The compiler resolves the URL `mixins` relative to the current stylesheet's canonical URL `db:foo/bar/baz/_index.scss` to get `db:foo/bar/baz/mixins`.\n  - It calls [canonicalize](importer#canonicalize) with `\"db:foo/bar/baz/mixins\"`.\n  - [canonicalize](importer#canonicalize) returns `new URL(\"db:foo/bar/baz/_mixins.scss\")`.\n\n  Because of this, [canonicalize](importer#canonicalize) must return a meaningful result when called with a URL relative to one returned by an earlier call to [canonicalize](importer#canonicalize).\n\n  throws  \n  any - If this importer recognizes `url` but determines that it's invalid, it may throw an exception that will be wrapped by Sass. If the exception object has a `message` property, it will be used as the wrapped exception's message; otherwise, the exception object's `toString()` will be used. This means it's safe for importers to throw plain strings.\n\n  #### Parameters\n\n  - ##### url: string\n\n    The loaded URL. Since this might be relative, it's represented as a string rather than a \\[\\[URL\\]\\] object.\n\n  - ##### options: { fromImport: boolean }\n\n    - ##### fromImport: boolean\n\n      Whether this is being invoked because of a Sass `@import` rule, as opposed to a `@use` or `@forward` rule.\n\n      This should *only* be used for determining whether or not to load [import-only files](../../at-rules/import#import-only-files).\n\n  #### Returns [PromiseOr](../modules#PromiseOr)\\<null \\| [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL), sync\\>\n\n  An absolute URL if this importer recognizes the `url`, or `null` if it doesn't. If this returns `null`, other importers or [load paths](options#loadPaths) may handle the load.\n\n  This may also return a `Promise`, but if it does the importer may only be passed to [compileAsync](../modules#compileAsync) and [compileStringAsync](../modules#compileStringAsync), not [compile](../modules#compile) or [compileString](../modules#compileString).\n\n### load\n\n- load(canonicalUrl: [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL)): [PromiseOr](../modules#PromiseOr)\\<null \\| [ImporterResult](importerresult), sync\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/importer.d.ts:267](https://github.com/sass/sass/blob/6d42491/js-api-doc/importer.d.ts#L267)\n\n  Loads the Sass text for the given `canonicalUrl`, or returns `null` if this importer can't find the stylesheet it refers to.\n\n  throws  \n  any - If this importer finds a stylesheet at `url` but it fails to load for some reason, or if `url` is uniquely associated with this importer but doesn't refer to a real stylesheet, the importer may throw an exception that will be wrapped by Sass. If the exception object has a `message` property, it will be used as the wrapped exception's message; otherwise, the exception object's `toString()` will be used. This means it's safe for importers to throw plain strings.\n\n  #### Parameters\n\n  - ##### canonicalUrl: [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL)\n\n    The canonical URL of the stylesheet to load. This is guaranteed to come from a call to [canonicalize](importer#canonicalize), although not every call to [canonicalize](importer#canonicalize) will result in a call to [load](importer#load).\n\n  #### Returns [PromiseOr](../modules#PromiseOr)\\<null \\| [ImporterResult](importerresult), sync\\>\n\n  The contents of the stylesheet at `canonicalUrl` if it can be loaded, or `null` if it can't.\n\n  This may also return a `Promise`, but if it does the importer may only be passed to [compileAsync](../modules#compileAsync) and [compileStringAsync](../modules#compileStringAsync), not [compile](../modules#compile) or [compileString](../modules#compileString).\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [Importer](importer)\n  - [canonicalize](importer#canonicalize)\n  - [load](importer#load)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/Importer](https://sass-lang.com/documentation/js-api/interfaces/Importer)"
- name: Interface ImporterResult
  id: js-api/interfaces/importerresult
  summary: The result of successfully loading a stylesheet with an Importer
  description: "# Interface ImporterResult\n\nThe result of successfully loading a stylesheet with an [Importer](importer).\n\n### Hierarchy\n\n- ImporterResult\n\n## Index\n\n### Properties\n\n- [contents](importerresult#contents)\n- [sourceMapUrl](importerresult#sourceMapUrl)\n- [syntax](importerresult#syntax)\n\n## Properties\n\n### contents\n\ncontents: string\n\n- Defined in [js-api-doc/importer.d.ts:280](https://github.com/sass/sass/blob/6d42491/js-api-doc/importer.d.ts#L280)\n\nThe contents of the stylesheet.\n\n### Optional sourceMapUrl\n\nsourceMapUrl?: [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL)\n\n- Defined in [js-api-doc/importer.d.ts:293](https://github.com/sass/sass/blob/6d42491/js-api-doc/importer.d.ts#L293)\n\nThe URL to use to link to the loaded stylesheet's source code in source maps. A `file:` URL is ideal because it's accessible to both browsers and other build tools, but an `http:` URL is also acceptable.\n\nIf this isn't set, it defaults to a `data:` URL that contains the contents of the loaded stylesheet.\n\n### syntax\n\nsyntax: [Syntax](../modules#Syntax)\n\n- Defined in [js-api-doc/importer.d.ts:283](https://github.com/sass/sass/blob/6d42491/js-api-doc/importer.d.ts#L283)\n\nThe syntax with which to parse [contents](importerresult#contents).\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [ImporterResult](importerresult)\n  - [contents](importerresult#contents)\n  - [sourceMapUrl](importerresult#sourceMapUrl)\n  - [syntax](importerresult#syntax)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/ImporterResult](https://sass-lang.com/documentation/js-api/interfaces/ImporterResult)"
- name: Interface LegacyException
  id: js-api/interfaces/legacyexception
  summary: The exception type thrown by renderSync and passed as the error to render's callback
  description: "# Interface LegacyException\n\nThe exception type thrown by [renderSync](../modules#renderSync) and passed as the error to [render](../modules#render)'s callback.\n\ndeprecated  \nThis is only thrown by the legacy [render](../modules#render) and [renderSync](../modules#renderSync) APIs. Use [compile](../modules#compile), [compileString](../modules#compileString), [compileAsync](../modules#compileAsync), and [compileStringAsync](../modules#compileStringAsync) instead.\n\n### Hierarchy\n\n- Error\n  - LegacyException\n\n## Index\n\n### Properties\n\n- [column](legacyexception#column)\n- [file](legacyexception#file)\n- [formatted](legacyexception#formatted)\n- [line](legacyexception#line)\n- [message](legacyexception#message)\n- [name](legacyexception#name)\n- [stack](legacyexception#stack)\n- [status](legacyexception#status)\n\n## Properties\n\n### Optional column\n\ncolumn?: number\n\n- Defined in [js-api-doc/legacy/exception.d.ts:35](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/exception.d.ts#L35)\n\nThe (1-based) column number within [line](legacyexception#line) at which the error occurred, if this exception is associated with a specific Sass file location.\n\n### Optional file\n\nfile?: string\n\n- Defined in [js-api-doc/legacy/exception.d.ts:53](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/exception.d.ts#L53)\n\nIf this exception was caused by an error in a Sass file, this will represent the Sass file's location. It can be in one of three formats:\n\n- If the Sass file was loaded from disk, this is the path to that file.\n- If the Sass file was generated by an importer, this is its canonical URL.\n- If the Sass file was passed as [LegacyStringOptions.data](legacystringoptions#data) without a corresponding [LegacyStringOptions.file](legacystringoptions#file), this is the special string `\"stdin\"`.\n\n### formatted\n\nformatted: string\n\n- Defined in [js-api-doc/legacy/exception.d.ts:23](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/exception.d.ts#L23)\n\nThe error message. For Dart Sass, this is the same as the result of calling [toString](../classes/exception#toString), which is itself the same as [message](legacyexception#message) but with the prefix \"Error:\".\n\n### Optional line\n\nline?: number\n\n- Defined in [js-api-doc/legacy/exception.d.ts:29](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/exception.d.ts#L29)\n\nThe (1-based) line number on which the error occurred, if this exception is associated with a specific Sass file location.\n\n### message\n\nmessage: string\n\nOverrides Error.message\n\n- Defined in [js-api-doc/legacy/exception.d.ts:16](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/exception.d.ts#L16)\n\nThe error message. For Dart Sass, when possible this includes a highlighted indication of where in the source file the error occurred as well as the Sass stack trace.\n\n### name\n\nname: string\n\nInherited from Error.name\n\n- Defined in node_modules/typescript/lib/lib.es5.d.ts:973\n\n### Optional stack\n\nstack?: string\n\nInherited from Error.stack\n\n- Defined in node_modules/typescript/lib/lib.es5.d.ts:975\n\n### status\n\nstatus: number\n\n- Defined in [js-api-doc/legacy/exception.d.ts:41](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/exception.d.ts#L41)\n\nAnalogous to the exit code for an executable. `1` for an error caused by a Sass file, `3` for any other type of error.\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [LegacyException](legacyexception)\n  - [column](legacyexception#column)\n  - [file](legacyexception#file)\n  - [formatted](legacyexception#formatted)\n  - [line](legacyexception#line)\n  - [message](legacyexception#message)\n  - [name](legacyexception#name)\n  - [stack](legacyexception#stack)\n  - [status](legacyexception#status)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/LegacyException](https://sass-lang.com/documentation/js-api/interfaces/LegacyException)"
- name: Interface LegacyFileOptions<sync>
  id: js-api/interfaces/legacyfileoptions
  summary: If file is passed without data, Sass will load the stylesheet at file and compile it to CSS
  description: "# Interface LegacyFileOptions\\<sync\\>\n\nIf [file](legacyfileoptions#file) is passed without [data](legacyfileoptions#data), Sass will load the stylesheet at [file](legacyfileoptions#file) and compile it to CSS.\n\n### Type parameters\n\n- #### sync: \"sync\" \\| \"async\"\n\n  This lets the TypeScript checker verify that [LegacyAsyncImporter](../modules#LegacyAsyncImporter)s and [LegacyAsyncFunction](../modules#LegacyAsyncFunction)s aren't passed to [renderSync](../modules#renderSync).\n\n### Hierarchy\n\n- [LegacySharedOptions](legacysharedoptions)\\<sync\\>\n  - LegacyFileOptions\n\n## Index\n\n### Input\n\n- [data](legacyfileoptions#data)\n- [file](legacyfileoptions#file)\n- [includePaths](legacyfileoptions#includePaths)\n\n### Output\n\n- [charset](legacyfileoptions#charset)\n- [indentType](legacyfileoptions#indentType)\n- [indentWidth](legacyfileoptions#indentWidth)\n- [linefeed](legacyfileoptions#linefeed)\n- [outputStyle](legacyfileoptions#outputStyle)\n\n### Plugins\n\n- [functions](legacyfileoptions#functions)\n- [importer](legacyfileoptions#importer)\n\n### Messages\n\n- [logger](legacyfileoptions#logger)\n- [quietDeps](legacyfileoptions#quietDeps)\n- [verbose](legacyfileoptions#verbose)\n\n### Source Maps\n\n- [omitSourceMapUrl](legacyfileoptions#omitSourceMapUrl)\n- [outFile](legacyfileoptions#outFile)\n- [sourceMap](legacyfileoptions#sourceMap)\n- [sourceMapContents](legacyfileoptions#sourceMapContents)\n- [sourceMapEmbed](legacyfileoptions#sourceMapEmbed)\n- [sourceMapRoot](legacyfileoptions#sourceMapRoot)\n\n## Input\n\n### Optional data\n\ndata?: undefined\n\n- Defined in [js-api-doc/legacy/options.d.ts:556](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L556)\n\nSee [LegacyStringOptions.file](legacystringoptions#file) for documentation of passing [file](legacyfileoptions#file) along with [data](legacyfileoptions#data).\n\n### file\n\nfile: string\n\n- Defined in [js-api-doc/legacy/options.d.ts:548](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L548)\n\nCompatibility (Plain CSS files):\n\nDart Sass  \nsince 1.11.0\n\nNode Sass  \nsince partial\n\n[▶](javascript:;)\n\nNode Sass and older versions of Dart Sass support loading files with the extension `.css`, but contrary to the specification they’re treated as SCSS files rather than being parsed as CSS. This behavior has been deprecated and should not be relied on. Any files that use Sass features should use the `.scss` extension.\n\nAll versions of Node Sass and Dart Sass otherwise support the file option as described below.\n\nThe path to the file for Sass to load and compile. If the file’s extension is `.scss`, it will be parsed as SCSS; if it’s `.sass`, it will be parsed as the indented syntax; and if it’s `.css`, it will be parsed as plain CSS. If it has no extension, it will be parsed as SCSS.\n\nexample  \n``` js\nsass.renderSync({file:\"style.scss\"});\n```\n\n### Optional includePaths\n\nincludePaths?: string\\[\\]\n\nInherited from [LegacySharedOptions](legacysharedoptions).[includePaths](legacysharedoptions#includePaths)\n\n- Defined in [js-api-doc/legacy/options.d.ts:47](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L47)\n\nCompatibility (SASS\\_PATH):\n\nDart Sass  \nsince 1.15.0\n\nNode Sass  \nsince 3.9.0\n\n[▶](javascript:;)\n\nEarlier versions of Dart Sass and Node Sass didn’t support the `SASS_PATH` environment variable.\n\nThis array of strings option provides [load paths](../../at-rules/import#load-paths) for Sass to look for stylesheets. Earlier load paths will take precedence over later ones.\n\n``` js\nsass.renderSync({\nfile:\"style.scss\",\nincludePaths: [\"node_modules/bootstrap/dist/css\"]\n});\n```\n\nLoad paths are also loaded from the `SASS_PATH` environment variable, if it’s set. This variable should be a list of paths separated by `;` (on Windows) or `:` (on other operating systems). Load paths from the `includePaths` option take precedence over load paths from `SASS_PATH`.\n\n``` sh\n$ SASS_PATH=node_modules/bootstrap/dist/css sass style.scss style.css\n```\n\n## Output\n\n### Optional charset\n\ncharset?: boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[charset](legacysharedoptions#charset)\n\n- Defined in [js-api-doc/legacy/options.d.ts:462](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L462)\n\nCompatibility:\n\nDart Sass  \nsince 1.39.0\n\nNode Sass  \n✗\n\nBy default, if the CSS document contains non-ASCII characters, Sass adds a `@charset` declaration (in expanded output mode) or a byte-order mark (in compressed mode) to indicate its encoding to browsers or other consumers. If `charset` is `false`, these annotations are omitted.\n\n### Optional indentType\n\nindentType?: \"space\" \\| \"tab\"\n\nInherited from [LegacySharedOptions](legacysharedoptions).[indentType](legacysharedoptions#indentType)\n\n- Defined in [js-api-doc/legacy/options.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L67)\n\nCompatibility:\n\nDart Sass  \n✓\n\nNode Sass  \nsince 3.0.0\n\nWhether the generated CSS should use spaces or tabs for indentation.\n\n``` js\nconstresult = sass.renderSync({\nfile:\"style.scss\",\nindentType:\"tab\",\nindentWidth:1\n});\n\nresult.css.toString();\n// \"h1 {\\n\\tfont-size: 40px;\\n}\\n\"\n```\n\ndefaultvalue  \n`'space'`\n\n### Optional indentWidth\n\nindentWidth?: number\n\nInherited from [LegacySharedOptions](legacysharedoptions).[indentWidth](legacysharedoptions#indentWidth)\n\n- Defined in [js-api-doc/legacy/options.d.ts:78](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L78)\n\nCompatibility:\n\nDart Sass  \n✓\n\nNode Sass  \nsince 3.0.0\n\nHow many spaces or tabs (depending on [indentType](legacyfileoptions#indentType)) should be used per indentation level in the generated CSS. It must be between 0 and 10 (inclusive).\n\ndefaultvalue  \n`2`\n\n### Optional linefeed\n\nlinefeed?: \"cr\" \\| \"crlf\" \\| \"lf\" \\| \"lfcr\"\n\nInherited from [LegacySharedOptions](legacysharedoptions).[linefeed](legacysharedoptions#linefeed)\n\n- Defined in [js-api-doc/legacy/options.d.ts:93](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L93)\n\nCompatibility:\n\nDart Sass  \n✓\n\nNode Sass  \nsince 3.0.0\n\nWhich character sequence to use at the end of each line in the generated CSS. It can have the following values:\n\n- `'lf'` uses U+000A LINE FEED.\n- `'lfcr'` uses U+000A LINE FEED followed by U+000D CARRIAGE RETURN.\n- `'cr'` uses U+000D CARRIAGE RETURN.\n- `'crlf'` uses U+000D CARRIAGE RETURN followed by U+000A LINE FEED.\n\ndefaultvalue  \n`'lf'`\n\n### Optional outputStyle\n\noutputStyle?: \"expanded\" \\| \"compressed\" \\| \"nested\" \\| \"compact\"\n\nInherited from [LegacySharedOptions](legacysharedoptions).[outputStyle](legacysharedoptions#outputStyle)\n\n- Defined in [js-api-doc/legacy/options.d.ts:205](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L205)\n\nThe output style of the compiled CSS. There are four possible output styles:\n\n- `\"expanded\"` (the default for Dart Sass) writes each selector and declaration on its own line.\n\n- `\"compressed\"` removes as many extra characters as possible, and writes the entire stylesheet on a single line.\n\n- `\"nested\"` (the default for Node Sass, not supported by Dart Sass) indents CSS rules to match the nesting of the Sass source.\n\n- `\"compact\"` (not supported by Dart Sass) puts each CSS rule on its own single line.\n\nexample  \n``` js\nconstsource = `\nh1 {\n  font-size: 40px;\n  code {\n    font-face: Roboto Mono;\n  }\n}`;\n\nletresult = sass.renderSync({\ndata:source,\noutputStyle:\"expanded\"\n});\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// h1 code {\n//   font-face: Roboto Mono;\n// }\n\nresult = sass.renderSync({\ndata:source,\noutputStyle:\"compressed\"\n});\nconsole.log(result.css.toString());\n// h1{font-size:40px}h1 code{font-face:Roboto Mono}\n\nresult = sass.renderSync({\ndata:source,\noutputStyle:\"nested\"\n});\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px; }\n//   h1 code {\n//     font-face: Roboto Mono; }\n\nresult = sass.renderSync({\ndata:source,\noutputStyle:\"compact\"\n});\nconsole.log(result.css.toString());\n// h1 { font-size: 40px; }\n// h1 code { font-face: Roboto Mono; }\n```\n\n## Plugins\n\n### Optional functions\n\nfunctions?: {}\n\nInherited from [LegacySharedOptions](legacysharedoptions).[functions](legacysharedoptions#functions)\n\n- Defined in [js-api-doc/legacy/options.d.ts:451](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L451)\n\nAdditional built-in Sass functions that are available in all stylesheets. This option takes an object whose keys are Sass function signatures and whose values are [LegacyFunction](../modules#LegacyFunction)s. Each function should take the same arguments as its signature.\n\nFunctions are passed JavaScript representations of [Sass value types](../../js-api#value-types), and must return the same.\n\n### ⚠️ Heads up!\n\nWhen writing custom functions, it’s important to ensure that all the arguments are the types you expect. Otherwise, users’ stylesheets could crash in hard-to-debug ways or, worse, compile to meaningless CSS.\n\nexample  \n``` js\nsass.render({\ndata:`\nh1 {\n  font-size: pow(2, 5) * 1px;\n}`,\nfunctions: {\n// This function uses the synchronous API, and can be passed to either\n// renderSync() or render().\n'pow($base, $exponent)':function(base, exponent) {\nif (!(baseinstanceofsass.types.Number)) {\nthrow\"$base: Expected a number.\";\n      } elseif (base.getUnit()) {\nthrow\"$base: Expected a unitless number.\";\n      }\n\nif (!(exponentinstanceofsass.types.Number)) {\nthrow\"$exponent: Expected a number.\";\n      } elseif (exponent.getUnit()) {\nthrow\"$exponent: Expected a unitless number.\";\n      }\n\nreturnnewsass.types.Number(\nMath.pow(base.getValue(), exponent.getValue()));\n    },\n\n// This function uses the asynchronous API, and can only be passed to\n// render().\n'sqrt($number)':function(number, done) {\nif (!(numberinstanceofsass.types.Number)) {\nthrow\"$number: Expected a number.\";\n      } elseif (number.getUnit()) {\nthrow\"$number: Expected a unitless number.\";\n      }\n\ndone(newsass.types.Number(Math.sqrt(number.getValue())));\n    }\n  }\n}, function(err, result) {\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 32px;\n// }\n});\n```\n\n#### Type declaration\n\n- ##### \\[key: string\\]: [LegacyFunction](../modules#LegacyFunction)\\<sync\\>\n\n### Optional importer\n\nimporter?: [LegacyImporter](../modules#LegacyImporter)\\<sync\\> \\| [LegacyImporter](../modules#LegacyImporter)\\<sync\\>\\[\\]\n\nInherited from [LegacySharedOptions](legacysharedoptions).[importer](legacysharedoptions#importer)\n\n- Defined in [js-api-doc/legacy/options.d.ts:385](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L385)\n\nCompatibility:\n\nDart Sass  \n✓\n\nNode Sass  \nsince 3.0.0\n\n[▶](javascript:;)\n\nVersions of Node Sass before 3.0.0 don’t support arrays of importers, nor do they support importers that return `Error` objects.\n\nVersions of Node Sass before 2.0.0 don’t support the `importer` option at all.\n\nCompatibility (Import order):\n\nDart Sass  \nsince 1.20.2\n\nNode Sass  \n✗\n\n[▶](javascript:;)\n\nVersions of Dart Sass before 1.20.2 preferred resolving imports using [includePaths](legacyfileoptions#includePaths) before resolving them using custom importers.\n\nAll versions of Node Sass currently pass imports to importers before loading them relative to the file in which the `@import` appears. This behavior is considered incorrect and should not be relied on because it violates the principle of *locality*, which says that it should be possible to reason about a stylesheet without knowing everything about how the entire system is set up. If a user tries to import a stylesheet relative to another stylesheet, that import should *always* work. It shouldn’t be possible for some configuration somewhere else to break it.\n\nAdditional handler(s) for loading files when a [`@use` rule](../../at-rules/use) or an [`@import` rule](../../at-rules/import) is encountered. It can either be a single [LegacyImporter](../modules#LegacyImporter) function, or an array of [LegacyImporter](../modules#LegacyImporter)s.\n\nImporters take the URL of the `@import` or `@use` rule and return a [LegacyImporterResult](../modules#LegacyImporterResult) indicating how to handle that rule. For more details, see [LegacySyncImporter](../modules#LegacySyncImporter) and [LegacyAsyncImporter](../modules#LegacyAsyncImporter).\n\nLoads are resolved by trying, in order:\n\n- Loading a file from disk relative to the file in which the `@use` or `@import` appeared.\n\n- Each custom importer.\n\n- Loading a file relative to the current working directory.\n\n- Each load path in [includePaths](legacyfileoptions#includePaths).\n\n- Each load path specified in the `SASS_PATH` environment variable, which should be semicolon-separated on Windows and colon-separated elsewhere.\n\nexample  \n``` js\nsass.render({\nfile:\"style.scss\",\nimporter: [\n// This importer uses the synchronous API, and can be passed to either\n// renderSync() or render().\nfunction(url, prev) {\n// This generates a stylesheet from scratch for `@use \"big-headers\"`.\nif (url != \"big-headers\") returnnull;\n\nreturn {\ncontents:`\nh1 {\n  font-size: 40px;\n}`\n      };\n    },\n\n// This importer uses the asynchronous API, and can only be passed to\n// render().\nfunction(url, prev, done) {\n// Convert `@use \"foo/bar\"` to \"node_modules/foo/sass/bar\".\nconstcomponents = url.split('/');\nconstinnerPath = components.slice(1).join('/');\ndone({\nfile:`node_modules/${components.first}/sass/${innerPath}`\n      });\n    }\n  ]\n}, function(err, result) {\n// ...\n});\n```\n\n## Messages\n\n### Optional logger\n\nlogger?: [Logger](logger)\n\nInherited from [LegacySharedOptions](legacysharedoptions).[logger](legacysharedoptions#logger)\n\n- Defined in [js-api-doc/legacy/options.d.ts:511](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L511)\n\nCompatibility:\n\nDart Sass  \nsince 1.43.0\n\nNode Sass  \n✗\n\nAn object to use to handle warnings and/or debug messages from Sass.\n\nBy default, Sass emits warnings and debug messages to standard error, but if [Logger.warn](logger#warn) or [Logger.debug](logger#debug) is set, this will invoke them instead.\n\nThe special value [Logger.silent](../modules/logger#silent) can be used to easily silence all messages.\n\n### Optional quietDeps\n\nquietDeps?: boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[quietDeps](legacysharedoptions#quietDeps)\n\n- Defined in [js-api-doc/legacy/options.d.ts:484](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L484)\n\nCompatibility:\n\nDart Sass  \nsince 1.35.0\n\nNode Sass  \n✗\n\nIf this option is set to `true`, Sass won’t print warnings that are caused by dependencies. A “dependency” is defined as any file that’s loaded through [loadPaths](options#loadPaths) or [importer](legacyfileoptions#importer). Stylesheets that are imported relative to the entrypoint are not considered dependencies.\n\nThis is useful for silencing deprecation warnings that you can’t fix on your own. However, please *also* notify your dependencies of the deprecations so that they can get fixed as soon as possible!\n\n### ⚠️ Heads up!\n\nIf [render](../modules#render) or [renderSync](../modules#renderSync) is called without [LegacyFileOptions.file](legacyfileoptions#file) or [LegacyStringOptions.file](legacystringoptions#file), *all* stylesheets it loads will be considered dependencies. Since it doesn’t have a path of its own, everything it loads is coming from a load path rather than a relative import.\n\ndefaultvalue  \n`false`\n\n### Optional verbose\n\nverbose?: boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[verbose](legacysharedoptions#verbose)\n\n- Defined in [js-api-doc/legacy/options.d.ts:496](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L496)\n\nCompatibility:\n\nDart Sass  \nsince 1.35.0\n\nNode Sass  \n✗\n\nBy default, Dart Sass will print only five instances of the same deprecation warning per compilation to avoid deluging users in console noise. If you set `verbose` to `true`, it will instead print every deprecation warning it encounters.\n\ndefaultvalue  \n`false`\n\n## Source Maps\n\n### Optional omitSourceMapUrl\n\nomitSourceMapUrl?: boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[omitSourceMapUrl](legacysharedoptions#omitSourceMapUrl)\n\n- Defined in [js-api-doc/legacy/options.d.ts:113](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L113)\n\nIf `true`, Sass won't add a link from the generated CSS to the source map.\n\n``` js\nconstresult = sass.renderSync({\nfile:\"style.scss\",\nsourceMap:\"out.map\",\nomitSourceMapUrl:true\n})\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n```\n\ndefaultvalue  \n`false`\n\n### Optional outFile\n\noutFile?: string\n\nInherited from [LegacySharedOptions](legacysharedoptions).[outFile](legacysharedoptions#outFile)\n\n- Defined in [js-api-doc/legacy/options.d.ts:138](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L138)\n\nThe location that Sass expects the generated CSS to be saved to. It’s used to determine the URL used to link from the generated CSS to the source map, and from the source map to the Sass source files.\n\n### ⚠️ Heads up!\n\nDespite the name, Sass does *not* write the CSS output to this file. The caller must do that themselves.\n\n``` js\nresult = sass.renderSync({\nfile:\"style.scss\",\nsourceMap:true,\noutFile:\"out.css\"\n})\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// /*# sourceMappingURL=out.css.map * /\n```\n\n### Optional sourceMap\n\nsourceMap?: string \\| boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[sourceMap](legacysharedoptions#sourceMap)\n\n- Defined in [js-api-doc/legacy/options.d.ts:251](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L251)\n\nWhether or not Sass should generate a source map. If it does, the source map will be available as [LegacyResult.map](legacyresult#map) (unless [sourceMapEmbed](legacyfileoptions#sourceMapEmbed) is `true`).\n\nIf this option is a string, it’s the path that the source map is expected to be written to, which is used to link to the source map from the generated CSS and to link *from* the source map to the Sass source files. Note that if `sourceMap` is a string and [outFile](legacyfileoptions#outFile) isn’t passed, Sass assumes that the CSS will be written to the same directory as the file option if it’s passed.\n\nIf this option is `true`, the path is assumed to be [outFile](legacyfileoptions#outFile) with `.map` added to the end. If it’s `true` and [outFile](legacyfileoptions#outFile) isn’t passed, it has no effect.\n\nexample  \n``` js\nletresult = sass.renderSync({\nfile:\"style.scss\",\nsourceMap:\"out.map\"\n})\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// /*# sourceMappingURL=out.map * /\n\nresult = sass.renderSync({\nfile:\"style.scss\",\nsourceMap:true,\noutFile:\"out.css\"\n})\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// /*# sourceMappingURL=out.css.map * /\n```\n\ndefaultvalue  \n`false`\n\n### Optional sourceMapContents\n\nsourceMapContents?: boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[sourceMapContents](legacysharedoptions#sourceMapContents)\n\n- Defined in [js-api-doc/legacy/options.d.ts:272](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L272)\n\nWhether to embed the entire contents of the Sass files that contributed to the generated CSS in the source map. This may produce very large source maps, but it guarantees that the source will be available on any computer no matter how the CSS is served.\n\nexample  \n``` js\nsass.renderSync({\nfile:\"style.scss\",\nsourceMap:\"out.map\",\nsourceMapContents:true\n})\n```\n\ndefaultvalue  \n`false`\n\n### Optional sourceMapEmbed\n\nsourceMapEmbed?: boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[sourceMapEmbed](legacysharedoptions#sourceMapEmbed)\n\n- Defined in [js-api-doc/legacy/options.d.ts:291](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L291)\n\nWhether to embed the contents of the source map file in the generated CSS, rather than creating a separate file and linking to it from the CSS.\n\nexample  \n``` js\nsass.renderSync({\nfile:\"style.scss\",\nsourceMap:\"out.map\",\nsourceMapEmbed:true\n});\n```\n\ndefaultvalue  \n`false`\n\n### Optional sourceMapRoot\n\nsourceMapRoot?: string\n\nInherited from [LegacySharedOptions](legacysharedoptions).[sourceMapRoot](legacysharedoptions#sourceMapRoot)\n\n- Defined in [js-api-doc/legacy/options.d.ts:299](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L299)\n\nIf this is passed, it's prepended to all the links from the source map to the Sass source files.\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [LegacyFileOptions](legacyfileoptions)\n  - Input\n  - [data](legacyfileoptions#data)\n  - [file](legacyfileoptions#file)\n  - [includePaths](legacyfileoptions#includePaths)\n  - Output\n  - [charset](legacyfileoptions#charset)\n  - [indentType](legacyfileoptions#indentType)\n  - [indentWidth](legacyfileoptions#indentWidth)\n  - [linefeed](legacyfileoptions#linefeed)\n  - [outputStyle](legacyfileoptions#outputStyle)\n  - Plugins\n  - [functions](legacyfileoptions#functions)\n  - [importer](legacyfileoptions#importer)\n  - Messages\n  - [logger](legacyfileoptions#logger)\n  - [quietDeps](legacyfileoptions#quietDeps)\n  - [verbose](legacyfileoptions#verbose)\n  - Source Maps\n  - [omitSourceMapUrl](legacyfileoptions#omitSourceMapUrl)\n  - [outFile](legacyfileoptions#outFile)\n  - [sourceMap](legacyfileoptions#sourceMap)\n  - [sourceMapContents](legacyfileoptions#sourceMapContents)\n  - [sourceMapEmbed](legacyfileoptions#sourceMapEmbed)\n  - [sourceMapRoot](legacyfileoptions#sourceMapRoot)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/LegacyFileOptions](https://sass-lang.com/documentation/js-api/interfaces/LegacyFileOptions)"
- name: Interface LegacyImporterThis
  id: js-api/interfaces/legacyimporterthis
  summary: The value of this in the context of a LegacyImporter function
  description: "# Interface LegacyImporterThis\n\nThe value of `this` in the context of a [LegacyImporter](../modules#LegacyImporter) function.\n\ndeprecated  \nThis is only used by the legacy [render](../modules#render) and [renderSync](../modules#renderSync) APIs. Use [Importer](importer) with [compile](../modules#compile), [compileString](../modules#compileString), [compileAsync](../modules#compileAsync), and [compileStringAsync](../modules#compileStringAsync) instead.\n\n### Hierarchy\n\n- [LegacyPluginThis](legacypluginthis)\n  - LegacyImporterThis\n\n## Index\n\n### Properties\n\n- [fromImport](legacyimporterthis#fromImport)\n- [options](legacyimporterthis#options)\n\n## Properties\n\n### fromImport\n\nfromImport: boolean\n\n- Defined in [js-api-doc/legacy/importer.d.ts:21](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/importer.d.ts#L21)\n\nCompatibility:\n\nDart Sass  \nsince 1.33.0\n\nNode Sass  \n✗\n\nWhether the importer is being invoked because of a Sass `@import` rule, as opposed to a `@use` or `@forward` rule.\n\nThis should *only* be used for determining whether or not to load [import-only files](../../at-rules/import#import-only-files).\n\n### options\n\noptions: { context: [LegacyPluginThis](legacypluginthis); data?: string; file?: string; includePaths: string; indentType: 0 \\| 1; indentWidth: number; linefeed: \"\\r\" \\| \"\\r\\n\" \\| \"\\n\" \\| \"\\n\\r\"; precision: 10; result: { stats: { entry: string; start: number } }; style: 1 }\n\nInherited from [LegacyPluginThis](legacypluginthis).[options](legacypluginthis#options)\n\n- Defined in [js-api-doc/legacy/plugin_this.d.ts:15](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/plugin_this.d.ts#L15)\n\nA partial representation of the options passed to [render](../modules#render) or [renderSync](../modules#renderSync).\n\n#### Type declaration\n\n- ##### context: [LegacyPluginThis](legacypluginthis)\n\n  The same [LegacyPluginThis](legacypluginthis) instance that contains this object.\n\n- ##### Optional data?: string\n\n  The value passed to [LegacyStringOptions.data](legacystringoptions#data).\n\n- ##### Optional file?: string\n\n  The value passed to [LegacyFileOptions.file](legacyfileoptions#file) or [LegacyStringOptions.file](legacystringoptions#file).\n\n- ##### includePaths: string\n\n  The value passed to [LegacySharedOptions.includePaths](legacysharedoptions#includePaths) separated by `\";\"` on Windows or `\":\"` on other operating systems. This always includes the current working directory as the first entry.\n\n- ##### indentType: 0 \\| 1\n\n  1 if [LegacySharedOptions.indentType](legacysharedoptions#indentType) was `\"tab\"`, 0 otherwise.\n\n- ##### indentWidth: number\n\n  The value passed to [LegacySharedOptions.indentWidth](legacysharedoptions#indentWidth), or `2` otherwise.\n\n- ##### linefeed: \"\\r\" \\| \"\\r\\n\" \\| \"\\n\" \\| \"\\n\\r\"\n\n  The value passed to [LegacySharedOptions.linefeed](legacysharedoptions#linefeed), or `\"\\n\"` otherwise.\n\n- ##### precision: 10\n\n  Always the number 10.\n\n- ##### result: { stats: { entry: string; start: number } }\n\n  A partially-constructed [LegacyResult](legacyresult) object.\n\n  - ##### stats: { entry: string; start: number }\n\n    Partial information about the compilation in progress.\n\n    - ##### entry: string\n\n      [LegacyFileOptions.file](legacyfileoptions#file) if it was passed, otherwise the string `\"data\"`.\n\n    - ##### start: number\n\n      The number of milliseconds between 1 January 1970 at 00:00:00 UTC and the time at which Sass compilation began.\n\n- ##### style: 1\n\n  Always the number 1.\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [LegacyImporterThis](legacyimporterthis)\n  - [fromImport](legacyimporterthis#fromImport)\n  - [options](legacyimporterthis#options)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/LegacyImporterThis](https://sass-lang.com/documentation/js-api/interfaces/LegacyImporterThis)"
- name: Interface LegacyPluginThis
  id: js-api/interfaces/legacypluginthis
  summary: The value of this in the context of a LegacyImporter or LegacyFunction callback
  description: "# Interface LegacyPluginThis\n\nThe value of `this` in the context of a [LegacyImporter](../modules#LegacyImporter) or [LegacyFunction](../modules#LegacyFunction) callback.\n\ndeprecated  \nThis is only used by the legacy [render](../modules#render) and [renderSync](../modules#renderSync) APIs. Use [compile](../modules#compile), [compileString](../modules#compileString), [compileAsync](../modules#compileAsync), and [compileStringAsync](../modules#compileStringAsync) instead.\n\n### Hierarchy\n\n- LegacyPluginThis\n  - [LegacyImporterThis](legacyimporterthis)\n\n## Index\n\n### Properties\n\n- [options](legacypluginthis#options)\n\n## Properties\n\n### options\n\noptions: { context: [LegacyPluginThis](legacypluginthis); data?: string; file?: string; includePaths: string; indentType: 0 \\| 1; indentWidth: number; linefeed: \"\\r\" \\| \"\\r\\n\" \\| \"\\n\" \\| \"\\n\\r\"; precision: 10; result: { stats: { entry: string; start: number } }; style: 1 }\n\n- Defined in [js-api-doc/legacy/plugin_this.d.ts:15](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/plugin_this.d.ts#L15)\n\nA partial representation of the options passed to [render](../modules#render) or [renderSync](../modules#renderSync).\n\n#### Type declaration\n\n- ##### context: [LegacyPluginThis](legacypluginthis)\n\n  The same [LegacyPluginThis](legacypluginthis) instance that contains this object.\n\n- ##### Optional data?: string\n\n  The value passed to [LegacyStringOptions.data](legacystringoptions#data).\n\n- ##### Optional file?: string\n\n  The value passed to [LegacyFileOptions.file](legacyfileoptions#file) or [LegacyStringOptions.file](legacystringoptions#file).\n\n- ##### includePaths: string\n\n  The value passed to [LegacySharedOptions.includePaths](legacysharedoptions#includePaths) separated by `\";\"` on Windows or `\":\"` on other operating systems. This always includes the current working directory as the first entry.\n\n- ##### indentType: 0 \\| 1\n\n  1 if [LegacySharedOptions.indentType](legacysharedoptions#indentType) was `\"tab\"`, 0 otherwise.\n\n- ##### indentWidth: number\n\n  The value passed to [LegacySharedOptions.indentWidth](legacysharedoptions#indentWidth), or `2` otherwise.\n\n- ##### linefeed: \"\\r\" \\| \"\\r\\n\" \\| \"\\n\" \\| \"\\n\\r\"\n\n  The value passed to [LegacySharedOptions.linefeed](legacysharedoptions#linefeed), or `\"\\n\"` otherwise.\n\n- ##### precision: 10\n\n  Always the number 10.\n\n- ##### result: { stats: { entry: string; start: number } }\n\n  A partially-constructed [LegacyResult](legacyresult) object.\n\n  - ##### stats: { entry: string; start: number }\n\n    Partial information about the compilation in progress.\n\n    - ##### entry: string\n\n      [LegacyFileOptions.file](legacyfileoptions#file) if it was passed, otherwise the string `\"data\"`.\n\n    - ##### start: number\n\n      The number of milliseconds between 1 January 1970 at 00:00:00 UTC and the time at which Sass compilation began.\n\n- ##### style: 1\n\n  Always the number 1.\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [LegacyPluginThis](legacypluginthis)\n  - [options](legacypluginthis#options)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/LegacyPluginThis](https://sass-lang.com/documentation/js-api/interfaces/LegacyPluginThis)"
- name: Interface LegacyResult
  id: js-api/interfaces/legacyresult
  summary: The object returned by render and renderSync after a successful compilation
  description: "# Interface LegacyResult\n\nThe object returned by [render](../modules#render) and [renderSync](../modules#renderSync) after a successful compilation.\n\ndeprecated  \nThis is only used by the legacy [render](../modules#render) and [renderSync](../modules#renderSync) APIs. Use [compile](../modules#compile), [compileString](../modules#compileString), [compileAsync](../modules#compileAsync), and [compileStringAsync](../modules#compileStringAsync) instead.\n\n### Hierarchy\n\n- LegacyResult\n\n## Index\n\n### Properties\n\n- [css](legacyresult#css)\n- [map](legacyresult#map)\n- [stats](legacyresult#stats)\n\n## Properties\n\n### css\n\ncss: [Buffer](https://nodejs.org/api/buffer.html)\n\n- Defined in [js-api-doc/legacy/render.d.ts:26](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/render.d.ts#L26)\n\nThe compiled CSS. This can be converted to a string by calling [Buffer.toString](https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end).\n\nexample  \n``` js\nconstresult = sass.renderSync({file:\"style.scss\"});\n\nconsole.log(result.css.toString());\n```\n\n### Optional map\n\nmap?: [Buffer](https://nodejs.org/api/buffer.html)\n\n- Defined in [js-api-doc/legacy/render.d.ts:56](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/render.d.ts#L56)\n\nThe source map that maps the compiled CSS to the source files from which it was generated. This can be converted to a string by calling [Buffer.toString](https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end).\n\nThis is `undefined` unless either\n\n- [LegacySharedOptions.sourceMap](legacysharedoptions#sourceMap) is a string; or\n- [LegacySharedOptions.sourceMap](legacysharedoptions#sourceMap) is `true` and [LegacySharedOptions.outFile](legacysharedoptions#outFile) is set.\n\nThe source map uses absolute [`file:` URLs](https://en.wikipedia.org/wiki/File_URI_scheme) to link to the Sass source files, except if the source file comes from [LegacyStringOptions.data](legacystringoptions#data) in which case it lists its URL as `\"stdin\"`.\n\nexample  \n``` js\nconstresult = sass.renderSync({\nfile:\"style.scss\",\nsourceMap:true,\noutFile:\"style.css\"\n})\n\nconsole.log(result.map.toString());\n```\n\n### stats\n\nstats: { duration: number; end: number; entry: string; includedFiles: string\\[\\]; start: number }\n\n- Defined in [js-api-doc/legacy/render.d.ts:59](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/render.d.ts#L59)\n\nAdditional information about the compilation.\n\n#### Type declaration\n\n- ##### duration: number\n\n  The number of milliseconds it took to compile the Sass file. This is always equal to `start` minus `end`.\n\n- ##### end: number\n\n  The number of milliseconds between 1 January 1970 at 00:00:00 UTC and the time at which Sass compilation ended.\n\n- ##### entry: string\n\n  The absolute path of [LegacyFileOptions.file](legacyfileoptions#file) or [LegacyStringOptions.file](legacystringoptions#file), or `\"data\"` if [LegacyStringOptions.file](legacystringoptions#file) wasn't set.\n\n- ##### includedFiles: string\\[\\]\n\n  An array of the absolute paths of all Sass files loaded during compilation. If a stylesheet was loaded from a [LegacyImporter](../modules#LegacyImporter) that returned the stylesheet’s contents, the raw string of the `@use` or `@import` that loaded that stylesheet included in this array.\n\n- ##### start: number\n\n  The number of milliseconds between 1 January 1970 at 00:00:00 UTC and the time at which Sass compilation began.\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [LegacyResult](legacyresult)\n  - [css](legacyresult#css)\n  - [map](legacyresult#map)\n  - [stats](legacyresult#stats)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/LegacyResult](https://sass-lang.com/documentation/js-api/interfaces/LegacyResult)"
- name: Interface LegacySharedOptions<sync>
  id: js-api/interfaces/legacysharedoptions
  summary: Options for render and renderSync that are shared between LegacyFileOptions and LegacyStringOptions
  description: "# Interface LegacySharedOptions\\<sync\\>\n\nOptions for [render](../modules#render) and [renderSync](../modules#renderSync) that are shared between [LegacyFileOptions](legacyfileoptions) and [LegacyStringOptions](legacystringoptions).\n\ndeprecated  \nThis only works with the legacy [render](../modules#render) and [renderSync](../modules#renderSync) APIs. Use [Options](options) with [compile](../modules#compile), [compileString](../modules#compileString), [compileAsync](../modules#compileAsync), and [compileStringAsync](../modules#compileStringAsync) instead.\n\n### Type parameters\n\n- #### sync: \"sync\" \\| \"async\"\n\n  This lets the TypeScript checker verify that [LegacyAsyncImporter](../modules#LegacyAsyncImporter)s and [LegacyAsyncFunction](../modules#LegacyAsyncFunction)s aren't passed to [renderSync](../modules#renderSync).\n\n### Hierarchy\n\n- LegacySharedOptions\n  - [LegacyFileOptions](legacyfileoptions)\n  - [LegacyStringOptions](legacystringoptions)\n\n## Index\n\n### Input\n\n- [includePaths](legacysharedoptions#includePaths)\n\n### Output\n\n- [charset](legacysharedoptions#charset)\n- [indentType](legacysharedoptions#indentType)\n- [indentWidth](legacysharedoptions#indentWidth)\n- [linefeed](legacysharedoptions#linefeed)\n- [outputStyle](legacysharedoptions#outputStyle)\n\n### Plugins\n\n- [functions](legacysharedoptions#functions)\n- [importer](legacysharedoptions#importer)\n\n### Messages\n\n- [logger](legacysharedoptions#logger)\n- [quietDeps](legacysharedoptions#quietDeps)\n- [verbose](legacysharedoptions#verbose)\n\n### Source Maps\n\n- [omitSourceMapUrl](legacysharedoptions#omitSourceMapUrl)\n- [outFile](legacysharedoptions#outFile)\n- [sourceMap](legacysharedoptions#sourceMap)\n- [sourceMapContents](legacysharedoptions#sourceMapContents)\n- [sourceMapEmbed](legacysharedoptions#sourceMapEmbed)\n- [sourceMapRoot](legacysharedoptions#sourceMapRoot)\n\n## Input\n\n### Optional includePaths\n\nincludePaths?: string\\[\\]\n\n- Defined in [js-api-doc/legacy/options.d.ts:47](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L47)\n\nCompatibility (SASS\\_PATH):\n\nDart Sass  \nsince 1.15.0\n\nNode Sass  \nsince 3.9.0\n\n[▶](javascript:;)\n\nEarlier versions of Dart Sass and Node Sass didn’t support the `SASS_PATH` environment variable.\n\nThis array of strings option provides [load paths](../../at-rules/import#load-paths) for Sass to look for stylesheets. Earlier load paths will take precedence over later ones.\n\n``` js\nsass.renderSync({\nfile:\"style.scss\",\nincludePaths: [\"node_modules/bootstrap/dist/css\"]\n});\n```\n\nLoad paths are also loaded from the `SASS_PATH` environment variable, if it’s set. This variable should be a list of paths separated by `;` (on Windows) or `:` (on other operating systems). Load paths from the `includePaths` option take precedence over load paths from `SASS_PATH`.\n\n``` sh\n$ SASS_PATH=node_modules/bootstrap/dist/css sass style.scss style.css\n```\n\n## Output\n\n### Optional charset\n\ncharset?: boolean\n\n- Defined in [js-api-doc/legacy/options.d.ts:462](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L462)\n\nCompatibility:\n\nDart Sass  \nsince 1.39.0\n\nNode Sass  \n✗\n\nBy default, if the CSS document contains non-ASCII characters, Sass adds a `@charset` declaration (in expanded output mode) or a byte-order mark (in compressed mode) to indicate its encoding to browsers or other consumers. If `charset` is `false`, these annotations are omitted.\n\n### Optional indentType\n\nindentType?: \"space\" \\| \"tab\"\n\n- Defined in [js-api-doc/legacy/options.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L67)\n\nCompatibility:\n\nDart Sass  \n✓\n\nNode Sass  \nsince 3.0.0\n\nWhether the generated CSS should use spaces or tabs for indentation.\n\n``` js\nconstresult = sass.renderSync({\nfile:\"style.scss\",\nindentType:\"tab\",\nindentWidth:1\n});\n\nresult.css.toString();\n// \"h1 {\\n\\tfont-size: 40px;\\n}\\n\"\n```\n\ndefaultvalue  \n`'space'`\n\n### Optional indentWidth\n\nindentWidth?: number\n\n- Defined in [js-api-doc/legacy/options.d.ts:78](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L78)\n\nCompatibility:\n\nDart Sass  \n✓\n\nNode Sass  \nsince 3.0.0\n\nHow many spaces or tabs (depending on [indentType](legacysharedoptions#indentType)) should be used per indentation level in the generated CSS. It must be between 0 and 10 (inclusive).\n\ndefaultvalue  \n`2`\n\n### Optional linefeed\n\nlinefeed?: \"cr\" \\| \"crlf\" \\| \"lf\" \\| \"lfcr\"\n\n- Defined in [js-api-doc/legacy/options.d.ts:93](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L93)\n\nCompatibility:\n\nDart Sass  \n✓\n\nNode Sass  \nsince 3.0.0\n\nWhich character sequence to use at the end of each line in the generated CSS. It can have the following values:\n\n- `'lf'` uses U+000A LINE FEED.\n- `'lfcr'` uses U+000A LINE FEED followed by U+000D CARRIAGE RETURN.\n- `'cr'` uses U+000D CARRIAGE RETURN.\n- `'crlf'` uses U+000D CARRIAGE RETURN followed by U+000A LINE FEED.\n\ndefaultvalue  \n`'lf'`\n\n### Optional outputStyle\n\noutputStyle?: \"expanded\" \\| \"compressed\" \\| \"nested\" \\| \"compact\"\n\n- Defined in [js-api-doc/legacy/options.d.ts:205](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L205)\n\nThe output style of the compiled CSS. There are four possible output styles:\n\n- `\"expanded\"` (the default for Dart Sass) writes each selector and declaration on its own line.\n\n- `\"compressed\"` removes as many extra characters as possible, and writes the entire stylesheet on a single line.\n\n- `\"nested\"` (the default for Node Sass, not supported by Dart Sass) indents CSS rules to match the nesting of the Sass source.\n\n- `\"compact\"` (not supported by Dart Sass) puts each CSS rule on its own single line.\n\nexample  \n``` js\nconstsource = `\nh1 {\n  font-size: 40px;\n  code {\n    font-face: Roboto Mono;\n  }\n}`;\n\nletresult = sass.renderSync({\ndata:source,\noutputStyle:\"expanded\"\n});\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// h1 code {\n//   font-face: Roboto Mono;\n// }\n\nresult = sass.renderSync({\ndata:source,\noutputStyle:\"compressed\"\n});\nconsole.log(result.css.toString());\n// h1{font-size:40px}h1 code{font-face:Roboto Mono}\n\nresult = sass.renderSync({\ndata:source,\noutputStyle:\"nested\"\n});\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px; }\n//   h1 code {\n//     font-face: Roboto Mono; }\n\nresult = sass.renderSync({\ndata:source,\noutputStyle:\"compact\"\n});\nconsole.log(result.css.toString());\n// h1 { font-size: 40px; }\n// h1 code { font-face: Roboto Mono; }\n```\n\n## Plugins\n\n### Optional functions\n\nfunctions?: {}\n\n- Defined in [js-api-doc/legacy/options.d.ts:451](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L451)\n\nAdditional built-in Sass functions that are available in all stylesheets. This option takes an object whose keys are Sass function signatures and whose values are [LegacyFunction](../modules#LegacyFunction)s. Each function should take the same arguments as its signature.\n\nFunctions are passed JavaScript representations of [Sass value types](../../js-api#value-types), and must return the same.\n\n### ⚠️ Heads up!\n\nWhen writing custom functions, it’s important to ensure that all the arguments are the types you expect. Otherwise, users’ stylesheets could crash in hard-to-debug ways or, worse, compile to meaningless CSS.\n\nexample  \n``` js\nsass.render({\ndata:`\nh1 {\n  font-size: pow(2, 5) * 1px;\n}`,\nfunctions: {\n// This function uses the synchronous API, and can be passed to either\n// renderSync() or render().\n'pow($base, $exponent)':function(base, exponent) {\nif (!(baseinstanceofsass.types.Number)) {\nthrow\"$base: Expected a number.\";\n      } elseif (base.getUnit()) {\nthrow\"$base: Expected a unitless number.\";\n      }\n\nif (!(exponentinstanceofsass.types.Number)) {\nthrow\"$exponent: Expected a number.\";\n      } elseif (exponent.getUnit()) {\nthrow\"$exponent: Expected a unitless number.\";\n      }\n\nreturnnewsass.types.Number(\nMath.pow(base.getValue(), exponent.getValue()));\n    },\n\n// This function uses the asynchronous API, and can only be passed to\n// render().\n'sqrt($number)':function(number, done) {\nif (!(numberinstanceofsass.types.Number)) {\nthrow\"$number: Expected a number.\";\n      } elseif (number.getUnit()) {\nthrow\"$number: Expected a unitless number.\";\n      }\n\ndone(newsass.types.Number(Math.sqrt(number.getValue())));\n    }\n  }\n}, function(err, result) {\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 32px;\n// }\n});\n```\n\n#### Type declaration\n\n- ##### \\[key: string\\]: [LegacyFunction](../modules#LegacyFunction)\\<sync\\>\n\n### Optional importer\n\nimporter?: [LegacyImporter](../modules#LegacyImporter)\\<sync\\> \\| [LegacyImporter](../modules#LegacyImporter)\\<sync\\>\\[\\]\n\n- Defined in [js-api-doc/legacy/options.d.ts:385](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L385)\n\nCompatibility:\n\nDart Sass  \n✓\n\nNode Sass  \nsince 3.0.0\n\n[▶](javascript:;)\n\nVersions of Node Sass before 3.0.0 don’t support arrays of importers, nor do they support importers that return `Error` objects.\n\nVersions of Node Sass before 2.0.0 don’t support the `importer` option at all.\n\nCompatibility (Import order):\n\nDart Sass  \nsince 1.20.2\n\nNode Sass  \n✗\n\n[▶](javascript:;)\n\nVersions of Dart Sass before 1.20.2 preferred resolving imports using [includePaths](legacysharedoptions#includePaths) before resolving them using custom importers.\n\nAll versions of Node Sass currently pass imports to importers before loading them relative to the file in which the `@import` appears. This behavior is considered incorrect and should not be relied on because it violates the principle of *locality*, which says that it should be possible to reason about a stylesheet without knowing everything about how the entire system is set up. If a user tries to import a stylesheet relative to another stylesheet, that import should *always* work. It shouldn’t be possible for some configuration somewhere else to break it.\n\nAdditional handler(s) for loading files when a [`@use` rule](../../at-rules/use) or an [`@import` rule](../../at-rules/import) is encountered. It can either be a single [LegacyImporter](../modules#LegacyImporter) function, or an array of [LegacyImporter](../modules#LegacyImporter)s.\n\nImporters take the URL of the `@import` or `@use` rule and return a [LegacyImporterResult](../modules#LegacyImporterResult) indicating how to handle that rule. For more details, see [LegacySyncImporter](../modules#LegacySyncImporter) and [LegacyAsyncImporter](../modules#LegacyAsyncImporter).\n\nLoads are resolved by trying, in order:\n\n- Loading a file from disk relative to the file in which the `@use` or `@import` appeared.\n\n- Each custom importer.\n\n- Loading a file relative to the current working directory.\n\n- Each load path in [includePaths](legacysharedoptions#includePaths).\n\n- Each load path specified in the `SASS_PATH` environment variable, which should be semicolon-separated on Windows and colon-separated elsewhere.\n\nexample  \n``` js\nsass.render({\nfile:\"style.scss\",\nimporter: [\n// This importer uses the synchronous API, and can be passed to either\n// renderSync() or render().\nfunction(url, prev) {\n// This generates a stylesheet from scratch for `@use \"big-headers\"`.\nif (url != \"big-headers\") returnnull;\n\nreturn {\ncontents:`\nh1 {\n  font-size: 40px;\n}`\n      };\n    },\n\n// This importer uses the asynchronous API, and can only be passed to\n// render().\nfunction(url, prev, done) {\n// Convert `@use \"foo/bar\"` to \"node_modules/foo/sass/bar\".\nconstcomponents = url.split('/');\nconstinnerPath = components.slice(1).join('/');\ndone({\nfile:`node_modules/${components.first}/sass/${innerPath}`\n      });\n    }\n  ]\n}, function(err, result) {\n// ...\n});\n```\n\n## Messages\n\n### Optional logger\n\nlogger?: [Logger](logger)\n\n- Defined in [js-api-doc/legacy/options.d.ts:511](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L511)\n\nCompatibility:\n\nDart Sass  \nsince 1.43.0\n\nNode Sass  \n✗\n\nAn object to use to handle warnings and/or debug messages from Sass.\n\nBy default, Sass emits warnings and debug messages to standard error, but if [Logger.warn](logger#warn) or [Logger.debug](logger#debug) is set, this will invoke them instead.\n\nThe special value [Logger.silent](../modules/logger#silent) can be used to easily silence all messages.\n\n### Optional quietDeps\n\nquietDeps?: boolean\n\n- Defined in [js-api-doc/legacy/options.d.ts:484](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L484)\n\nCompatibility:\n\nDart Sass  \nsince 1.35.0\n\nNode Sass  \n✗\n\nIf this option is set to `true`, Sass won’t print warnings that are caused by dependencies. A “dependency” is defined as any file that’s loaded through [loadPaths](options#loadPaths) or [importer](legacysharedoptions#importer). Stylesheets that are imported relative to the entrypoint are not considered dependencies.\n\nThis is useful for silencing deprecation warnings that you can’t fix on your own. However, please *also* notify your dependencies of the deprecations so that they can get fixed as soon as possible!\n\n### ⚠️ Heads up!\n\nIf [render](../modules#render) or [renderSync](../modules#renderSync) is called without [LegacyFileOptions.file](legacyfileoptions#file) or [LegacyStringOptions.file](legacystringoptions#file), *all* stylesheets it loads will be considered dependencies. Since it doesn’t have a path of its own, everything it loads is coming from a load path rather than a relative import.\n\ndefaultvalue  \n`false`\n\n### Optional verbose\n\nverbose?: boolean\n\n- Defined in [js-api-doc/legacy/options.d.ts:496](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L496)\n\nCompatibility:\n\nDart Sass  \nsince 1.35.0\n\nNode Sass  \n✗\n\nBy default, Dart Sass will print only five instances of the same deprecation warning per compilation to avoid deluging users in console noise. If you set `verbose` to `true`, it will instead print every deprecation warning it encounters.\n\ndefaultvalue  \n`false`\n\n## Source Maps\n\n### Optional omitSourceMapUrl\n\nomitSourceMapUrl?: boolean\n\n- Defined in [js-api-doc/legacy/options.d.ts:113](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L113)\n\nIf `true`, Sass won't add a link from the generated CSS to the source map.\n\n``` js\nconstresult = sass.renderSync({\nfile:\"style.scss\",\nsourceMap:\"out.map\",\nomitSourceMapUrl:true\n})\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n```\n\ndefaultvalue  \n`false`\n\n### Optional outFile\n\noutFile?: string\n\n- Defined in [js-api-doc/legacy/options.d.ts:138](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L138)\n\nThe location that Sass expects the generated CSS to be saved to. It’s used to determine the URL used to link from the generated CSS to the source map, and from the source map to the Sass source files.\n\n### ⚠️ Heads up!\n\nDespite the name, Sass does *not* write the CSS output to this file. The caller must do that themselves.\n\n``` js\nresult = sass.renderSync({\nfile:\"style.scss\",\nsourceMap:true,\noutFile:\"out.css\"\n})\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// /*# sourceMappingURL=out.css.map * /\n```\n\n### Optional sourceMap\n\nsourceMap?: string \\| boolean\n\n- Defined in [js-api-doc/legacy/options.d.ts:251](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L251)\n\nWhether or not Sass should generate a source map. If it does, the source map will be available as [LegacyResult.map](legacyresult#map) (unless [sourceMapEmbed](legacysharedoptions#sourceMapEmbed) is `true`).\n\nIf this option is a string, it’s the path that the source map is expected to be written to, which is used to link to the source map from the generated CSS and to link *from* the source map to the Sass source files. Note that if `sourceMap` is a string and [outFile](legacysharedoptions#outFile) isn’t passed, Sass assumes that the CSS will be written to the same directory as the file option if it’s passed.\n\nIf this option is `true`, the path is assumed to be [outFile](legacysharedoptions#outFile) with `.map` added to the end. If it’s `true` and [outFile](legacysharedoptions#outFile) isn’t passed, it has no effect.\n\nexample  \n``` js\nletresult = sass.renderSync({\nfile:\"style.scss\",\nsourceMap:\"out.map\"\n})\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// /*# sourceMappingURL=out.map * /\n\nresult = sass.renderSync({\nfile:\"style.scss\",\nsourceMap:true,\noutFile:\"out.css\"\n})\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// /*# sourceMappingURL=out.css.map * /\n```\n\ndefaultvalue  \n`false`\n\n### Optional sourceMapContents\n\nsourceMapContents?: boolean\n\n- Defined in [js-api-doc/legacy/options.d.ts:272](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L272)\n\nWhether to embed the entire contents of the Sass files that contributed to the generated CSS in the source map. This may produce very large source maps, but it guarantees that the source will be available on any computer no matter how the CSS is served.\n\nexample  \n``` js\nsass.renderSync({\nfile:\"style.scss\",\nsourceMap:\"out.map\",\nsourceMapContents:true\n})\n```\n\ndefaultvalue  \n`false`\n\n### Optional sourceMapEmbed\n\nsourceMapEmbed?: boolean\n\n- Defined in [js-api-doc/legacy/options.d.ts:291](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L291)\n\nWhether to embed the contents of the source map file in the generated CSS, rather than creating a separate file and linking to it from the CSS.\n\nexample  \n``` js\nsass.renderSync({\nfile:\"style.scss\",\nsourceMap:\"out.map\",\nsourceMapEmbed:true\n});\n```\n\ndefaultvalue  \n`false`\n\n### Optional sourceMapRoot\n\nsourceMapRoot?: string\n\n- Defined in [js-api-doc/legacy/options.d.ts:299](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L299)\n\nIf this is passed, it's prepended to all the links from the source map to the Sass source files.\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [LegacySharedOptions](legacysharedoptions)\n  - Input\n  - [includePaths](legacysharedoptions#includePaths)\n  - Output\n  - [charset](legacysharedoptions#charset)\n  - [indentType](legacysharedoptions#indentType)\n  - [indentWidth](legacysharedoptions#indentWidth)\n  - [linefeed](legacysharedoptions#linefeed)\n  - [outputStyle](legacysharedoptions#outputStyle)\n  - Plugins\n  - [functions](legacysharedoptions#functions)\n  - [importer](legacysharedoptions#importer)\n  - Messages\n  - [logger](legacysharedoptions#logger)\n  - [quietDeps](legacysharedoptions#quietDeps)\n  - [verbose](legacysharedoptions#verbose)\n  - Source Maps\n  - [omitSourceMapUrl](legacysharedoptions#omitSourceMapUrl)\n  - [outFile](legacysharedoptions#outFile)\n  - [sourceMap](legacysharedoptions#sourceMap)\n  - [sourceMapContents](legacysharedoptions#sourceMapContents)\n  - [sourceMapEmbed](legacysharedoptions#sourceMapEmbed)\n  - [sourceMapRoot](legacysharedoptions#sourceMapRoot)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/LegacySharedOptions](https://sass-lang.com/documentation/js-api/interfaces/LegacySharedOptions)"
- name: Interface LegacyStringOptions<sync>
  id: js-api/interfaces/legacystringoptions
  summary: If data is passed, Sass will use it as the contents of the stylesheet to compile
  description: "# Interface LegacyStringOptions\\<sync\\>\n\nIf [data](legacystringoptions#data) is passed, Sass will use it as the contents of the stylesheet to compile.\n\ndeprecated  \nThis only works with the legacy [render](../modules#render) and [renderSync](../modules#renderSync) APIs. Use [StringOptions](../modules#StringOptions) with [compile](../modules#compile), [compileString](../modules#compileString), [compileAsync](../modules#compileAsync), and [compileStringAsync](../modules#compileStringAsync) instead.\n\n### Type parameters\n\n- #### sync: \"sync\" \\| \"async\"\n\n  This lets the TypeScript checker verify that [LegacyAsyncImporter](../modules#LegacyAsyncImporter)s and [LegacyAsyncFunction](../modules#LegacyAsyncFunction)s aren't passed to [renderSync](../modules#renderSync).\n\n### Hierarchy\n\n- [LegacySharedOptions](legacysharedoptions)\\<sync\\>\n  - LegacyStringOptions\n\n## Index\n\n### Input\n\n- [data](legacystringoptions#data)\n- [file](legacystringoptions#file)\n- [includePaths](legacystringoptions#includePaths)\n- [indentedSyntax](legacystringoptions#indentedSyntax)\n\n### Output\n\n- [charset](legacystringoptions#charset)\n- [indentType](legacystringoptions#indentType)\n- [indentWidth](legacystringoptions#indentWidth)\n- [linefeed](legacystringoptions#linefeed)\n- [outputStyle](legacystringoptions#outputStyle)\n\n### Plugins\n\n- [functions](legacystringoptions#functions)\n- [importer](legacystringoptions#importer)\n\n### Messages\n\n- [logger](legacystringoptions#logger)\n- [quietDeps](legacystringoptions#quietDeps)\n- [verbose](legacystringoptions#verbose)\n\n### Source Maps\n\n- [omitSourceMapUrl](legacystringoptions#omitSourceMapUrl)\n- [outFile](legacystringoptions#outFile)\n- [sourceMap](legacystringoptions#sourceMap)\n- [sourceMapContents](legacystringoptions#sourceMapContents)\n- [sourceMapEmbed](legacystringoptions#sourceMapEmbed)\n- [sourceMapRoot](legacystringoptions#sourceMapRoot)\n\n## Input\n\n### data\n\ndata: string\n\n- Defined in [js-api-doc/legacy/options.d.ts:594](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L594)\n\nThe contents of the stylesheet to compile. Unless [file](legacystringoptions#file) is passed as well, the stylesheet’s URL is set to `\"stdin\"`.\n\nBy default, this stylesheet is parsed as SCSS. This can be controlled using [indentedSyntax](legacystringoptions#indentedSyntax).\n\nexample  \n``` js\nsass.renderSync({\ndata:`\nh1 {\n  font-size: 40px;\n}`\n});\n```\n\n### Optional file\n\nfile?: string\n\n- Defined in [js-api-doc/legacy/options.d.ts:604](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L604)\n\nIf `file` and [data](legacystringoptions#data) are both passed, `file` is used as the path of the stylesheet for error reporting, but [data](legacystringoptions#data) is used as the contents of the stylesheet. In this case, `file`’s extension is not used to determine the syntax of the stylesheet.\n\n### Optional includePaths\n\nincludePaths?: string\\[\\]\n\nInherited from [LegacySharedOptions](legacysharedoptions).[includePaths](legacysharedoptions#includePaths)\n\n- Defined in [js-api-doc/legacy/options.d.ts:47](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L47)\n\nCompatibility (SASS\\_PATH):\n\nDart Sass  \nsince 1.15.0\n\nNode Sass  \nsince 3.9.0\n\n[▶](javascript:;)\n\nEarlier versions of Dart Sass and Node Sass didn’t support the `SASS_PATH` environment variable.\n\nThis array of strings option provides [load paths](../../at-rules/import#load-paths) for Sass to look for stylesheets. Earlier load paths will take precedence over later ones.\n\n``` js\nsass.renderSync({\nfile:\"style.scss\",\nincludePaths: [\"node_modules/bootstrap/dist/css\"]\n});\n```\n\nLoad paths are also loaded from the `SASS_PATH` environment variable, if it’s set. This variable should be a list of paths separated by `;` (on Windows) or `:` (on other operating systems). Load paths from the `includePaths` option take precedence over load paths from `SASS_PATH`.\n\n``` sh\n$ SASS_PATH=node_modules/bootstrap/dist/css sass style.scss style.css\n```\n\n### Optional indentedSyntax\n\nindentedSyntax?: boolean\n\n- Defined in [js-api-doc/legacy/options.d.ts:624](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L624)\n\nThis flag controls whether [data](legacystringoptions#data) is parsed as the indented syntax or not.\n\nexample  \n``` js\nsass.renderSync({\ndata:`\nh1\n  font-size: 40px`,\nindentedSyntax:true\n});\n```\n\ndefaultvalue  \n`false`\n\n## Output\n\n### Optional charset\n\ncharset?: boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[charset](legacysharedoptions#charset)\n\n- Defined in [js-api-doc/legacy/options.d.ts:462](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L462)\n\nCompatibility:\n\nDart Sass  \nsince 1.39.0\n\nNode Sass  \n✗\n\nBy default, if the CSS document contains non-ASCII characters, Sass adds a `@charset` declaration (in expanded output mode) or a byte-order mark (in compressed mode) to indicate its encoding to browsers or other consumers. If `charset` is `false`, these annotations are omitted.\n\n### Optional indentType\n\nindentType?: \"space\" \\| \"tab\"\n\nInherited from [LegacySharedOptions](legacysharedoptions).[indentType](legacysharedoptions#indentType)\n\n- Defined in [js-api-doc/legacy/options.d.ts:67](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L67)\n\nCompatibility:\n\nDart Sass  \n✓\n\nNode Sass  \nsince 3.0.0\n\nWhether the generated CSS should use spaces or tabs for indentation.\n\n``` js\nconstresult = sass.renderSync({\nfile:\"style.scss\",\nindentType:\"tab\",\nindentWidth:1\n});\n\nresult.css.toString();\n// \"h1 {\\n\\tfont-size: 40px;\\n}\\n\"\n```\n\ndefaultvalue  \n`'space'`\n\n### Optional indentWidth\n\nindentWidth?: number\n\nInherited from [LegacySharedOptions](legacysharedoptions).[indentWidth](legacysharedoptions#indentWidth)\n\n- Defined in [js-api-doc/legacy/options.d.ts:78](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L78)\n\nCompatibility:\n\nDart Sass  \n✓\n\nNode Sass  \nsince 3.0.0\n\nHow many spaces or tabs (depending on [indentType](legacystringoptions#indentType)) should be used per indentation level in the generated CSS. It must be between 0 and 10 (inclusive).\n\ndefaultvalue  \n`2`\n\n### Optional linefeed\n\nlinefeed?: \"cr\" \\| \"crlf\" \\| \"lf\" \\| \"lfcr\"\n\nInherited from [LegacySharedOptions](legacysharedoptions).[linefeed](legacysharedoptions#linefeed)\n\n- Defined in [js-api-doc/legacy/options.d.ts:93](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L93)\n\nCompatibility:\n\nDart Sass  \n✓\n\nNode Sass  \nsince 3.0.0\n\nWhich character sequence to use at the end of each line in the generated CSS. It can have the following values:\n\n- `'lf'` uses U+000A LINE FEED.\n- `'lfcr'` uses U+000A LINE FEED followed by U+000D CARRIAGE RETURN.\n- `'cr'` uses U+000D CARRIAGE RETURN.\n- `'crlf'` uses U+000D CARRIAGE RETURN followed by U+000A LINE FEED.\n\ndefaultvalue  \n`'lf'`\n\n### Optional outputStyle\n\noutputStyle?: \"expanded\" \\| \"compressed\" \\| \"nested\" \\| \"compact\"\n\nInherited from [LegacySharedOptions](legacysharedoptions).[outputStyle](legacysharedoptions#outputStyle)\n\n- Defined in [js-api-doc/legacy/options.d.ts:205](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L205)\n\nThe output style of the compiled CSS. There are four possible output styles:\n\n- `\"expanded\"` (the default for Dart Sass) writes each selector and declaration on its own line.\n\n- `\"compressed\"` removes as many extra characters as possible, and writes the entire stylesheet on a single line.\n\n- `\"nested\"` (the default for Node Sass, not supported by Dart Sass) indents CSS rules to match the nesting of the Sass source.\n\n- `\"compact\"` (not supported by Dart Sass) puts each CSS rule on its own single line.\n\nexample  \n``` js\nconstsource = `\nh1 {\n  font-size: 40px;\n  code {\n    font-face: Roboto Mono;\n  }\n}`;\n\nletresult = sass.renderSync({\ndata:source,\noutputStyle:\"expanded\"\n});\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// h1 code {\n//   font-face: Roboto Mono;\n// }\n\nresult = sass.renderSync({\ndata:source,\noutputStyle:\"compressed\"\n});\nconsole.log(result.css.toString());\n// h1{font-size:40px}h1 code{font-face:Roboto Mono}\n\nresult = sass.renderSync({\ndata:source,\noutputStyle:\"nested\"\n});\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px; }\n//   h1 code {\n//     font-face: Roboto Mono; }\n\nresult = sass.renderSync({\ndata:source,\noutputStyle:\"compact\"\n});\nconsole.log(result.css.toString());\n// h1 { font-size: 40px; }\n// h1 code { font-face: Roboto Mono; }\n```\n\n## Plugins\n\n### Optional functions\n\nfunctions?: {}\n\nInherited from [LegacySharedOptions](legacysharedoptions).[functions](legacysharedoptions#functions)\n\n- Defined in [js-api-doc/legacy/options.d.ts:451](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L451)\n\nAdditional built-in Sass functions that are available in all stylesheets. This option takes an object whose keys are Sass function signatures and whose values are [LegacyFunction](../modules#LegacyFunction)s. Each function should take the same arguments as its signature.\n\nFunctions are passed JavaScript representations of [Sass value types](../../js-api#value-types), and must return the same.\n\n### ⚠️ Heads up!\n\nWhen writing custom functions, it’s important to ensure that all the arguments are the types you expect. Otherwise, users’ stylesheets could crash in hard-to-debug ways or, worse, compile to meaningless CSS.\n\nexample  \n``` js\nsass.render({\ndata:`\nh1 {\n  font-size: pow(2, 5) * 1px;\n}`,\nfunctions: {\n// This function uses the synchronous API, and can be passed to either\n// renderSync() or render().\n'pow($base, $exponent)':function(base, exponent) {\nif (!(baseinstanceofsass.types.Number)) {\nthrow\"$base: Expected a number.\";\n      } elseif (base.getUnit()) {\nthrow\"$base: Expected a unitless number.\";\n      }\n\nif (!(exponentinstanceofsass.types.Number)) {\nthrow\"$exponent: Expected a number.\";\n      } elseif (exponent.getUnit()) {\nthrow\"$exponent: Expected a unitless number.\";\n      }\n\nreturnnewsass.types.Number(\nMath.pow(base.getValue(), exponent.getValue()));\n    },\n\n// This function uses the asynchronous API, and can only be passed to\n// render().\n'sqrt($number)':function(number, done) {\nif (!(numberinstanceofsass.types.Number)) {\nthrow\"$number: Expected a number.\";\n      } elseif (number.getUnit()) {\nthrow\"$number: Expected a unitless number.\";\n      }\n\ndone(newsass.types.Number(Math.sqrt(number.getValue())));\n    }\n  }\n}, function(err, result) {\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 32px;\n// }\n});\n```\n\n#### Type declaration\n\n- ##### \\[key: string\\]: [LegacyFunction](../modules#LegacyFunction)\\<sync\\>\n\n### Optional importer\n\nimporter?: [LegacyImporter](../modules#LegacyImporter)\\<sync\\> \\| [LegacyImporter](../modules#LegacyImporter)\\<sync\\>\\[\\]\n\nInherited from [LegacySharedOptions](legacysharedoptions).[importer](legacysharedoptions#importer)\n\n- Defined in [js-api-doc/legacy/options.d.ts:385](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L385)\n\nCompatibility:\n\nDart Sass  \n✓\n\nNode Sass  \nsince 3.0.0\n\n[▶](javascript:;)\n\nVersions of Node Sass before 3.0.0 don’t support arrays of importers, nor do they support importers that return `Error` objects.\n\nVersions of Node Sass before 2.0.0 don’t support the `importer` option at all.\n\nCompatibility (Import order):\n\nDart Sass  \nsince 1.20.2\n\nNode Sass  \n✗\n\n[▶](javascript:;)\n\nVersions of Dart Sass before 1.20.2 preferred resolving imports using [includePaths](legacystringoptions#includePaths) before resolving them using custom importers.\n\nAll versions of Node Sass currently pass imports to importers before loading them relative to the file in which the `@import` appears. This behavior is considered incorrect and should not be relied on because it violates the principle of *locality*, which says that it should be possible to reason about a stylesheet without knowing everything about how the entire system is set up. If a user tries to import a stylesheet relative to another stylesheet, that import should *always* work. It shouldn’t be possible for some configuration somewhere else to break it.\n\nAdditional handler(s) for loading files when a [`@use` rule](../../at-rules/use) or an [`@import` rule](../../at-rules/import) is encountered. It can either be a single [LegacyImporter](../modules#LegacyImporter) function, or an array of [LegacyImporter](../modules#LegacyImporter)s.\n\nImporters take the URL of the `@import` or `@use` rule and return a [LegacyImporterResult](../modules#LegacyImporterResult) indicating how to handle that rule. For more details, see [LegacySyncImporter](../modules#LegacySyncImporter) and [LegacyAsyncImporter](../modules#LegacyAsyncImporter).\n\nLoads are resolved by trying, in order:\n\n- Loading a file from disk relative to the file in which the `@use` or `@import` appeared.\n\n- Each custom importer.\n\n- Loading a file relative to the current working directory.\n\n- Each load path in [includePaths](legacystringoptions#includePaths).\n\n- Each load path specified in the `SASS_PATH` environment variable, which should be semicolon-separated on Windows and colon-separated elsewhere.\n\nexample  \n``` js\nsass.render({\nfile:\"style.scss\",\nimporter: [\n// This importer uses the synchronous API, and can be passed to either\n// renderSync() or render().\nfunction(url, prev) {\n// This generates a stylesheet from scratch for `@use \"big-headers\"`.\nif (url != \"big-headers\") returnnull;\n\nreturn {\ncontents:`\nh1 {\n  font-size: 40px;\n}`\n      };\n    },\n\n// This importer uses the asynchronous API, and can only be passed to\n// render().\nfunction(url, prev, done) {\n// Convert `@use \"foo/bar\"` to \"node_modules/foo/sass/bar\".\nconstcomponents = url.split('/');\nconstinnerPath = components.slice(1).join('/');\ndone({\nfile:`node_modules/${components.first}/sass/${innerPath}`\n      });\n    }\n  ]\n}, function(err, result) {\n// ...\n});\n```\n\n## Messages\n\n### Optional logger\n\nlogger?: [Logger](logger)\n\nInherited from [LegacySharedOptions](legacysharedoptions).[logger](legacysharedoptions#logger)\n\n- Defined in [js-api-doc/legacy/options.d.ts:511](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L511)\n\nCompatibility:\n\nDart Sass  \nsince 1.43.0\n\nNode Sass  \n✗\n\nAn object to use to handle warnings and/or debug messages from Sass.\n\nBy default, Sass emits warnings and debug messages to standard error, but if [Logger.warn](logger#warn) or [Logger.debug](logger#debug) is set, this will invoke them instead.\n\nThe special value [Logger.silent](../modules/logger#silent) can be used to easily silence all messages.\n\n### Optional quietDeps\n\nquietDeps?: boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[quietDeps](legacysharedoptions#quietDeps)\n\n- Defined in [js-api-doc/legacy/options.d.ts:484](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L484)\n\nCompatibility:\n\nDart Sass  \nsince 1.35.0\n\nNode Sass  \n✗\n\nIf this option is set to `true`, Sass won’t print warnings that are caused by dependencies. A “dependency” is defined as any file that’s loaded through [loadPaths](options#loadPaths) or [importer](legacystringoptions#importer). Stylesheets that are imported relative to the entrypoint are not considered dependencies.\n\nThis is useful for silencing deprecation warnings that you can’t fix on your own. However, please *also* notify your dependencies of the deprecations so that they can get fixed as soon as possible!\n\n### ⚠️ Heads up!\n\nIf [render](../modules#render) or [renderSync](../modules#renderSync) is called without [LegacyFileOptions.file](legacyfileoptions#file) or [LegacyStringOptions.file](legacystringoptions#file), *all* stylesheets it loads will be considered dependencies. Since it doesn’t have a path of its own, everything it loads is coming from a load path rather than a relative import.\n\ndefaultvalue  \n`false`\n\n### Optional verbose\n\nverbose?: boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[verbose](legacysharedoptions#verbose)\n\n- Defined in [js-api-doc/legacy/options.d.ts:496](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L496)\n\nCompatibility:\n\nDart Sass  \nsince 1.35.0\n\nNode Sass  \n✗\n\nBy default, Dart Sass will print only five instances of the same deprecation warning per compilation to avoid deluging users in console noise. If you set `verbose` to `true`, it will instead print every deprecation warning it encounters.\n\ndefaultvalue  \n`false`\n\n## Source Maps\n\n### Optional omitSourceMapUrl\n\nomitSourceMapUrl?: boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[omitSourceMapUrl](legacysharedoptions#omitSourceMapUrl)\n\n- Defined in [js-api-doc/legacy/options.d.ts:113](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L113)\n\nIf `true`, Sass won't add a link from the generated CSS to the source map.\n\n``` js\nconstresult = sass.renderSync({\nfile:\"style.scss\",\nsourceMap:\"out.map\",\nomitSourceMapUrl:true\n})\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n```\n\ndefaultvalue  \n`false`\n\n### Optional outFile\n\noutFile?: string\n\nInherited from [LegacySharedOptions](legacysharedoptions).[outFile](legacysharedoptions#outFile)\n\n- Defined in [js-api-doc/legacy/options.d.ts:138](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L138)\n\nThe location that Sass expects the generated CSS to be saved to. It’s used to determine the URL used to link from the generated CSS to the source map, and from the source map to the Sass source files.\n\n### ⚠️ Heads up!\n\nDespite the name, Sass does *not* write the CSS output to this file. The caller must do that themselves.\n\n``` js\nresult = sass.renderSync({\nfile:\"style.scss\",\nsourceMap:true,\noutFile:\"out.css\"\n})\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// /*# sourceMappingURL=out.css.map * /\n```\n\n### Optional sourceMap\n\nsourceMap?: string \\| boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[sourceMap](legacysharedoptions#sourceMap)\n\n- Defined in [js-api-doc/legacy/options.d.ts:251](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L251)\n\nWhether or not Sass should generate a source map. If it does, the source map will be available as [LegacyResult.map](legacyresult#map) (unless [sourceMapEmbed](legacystringoptions#sourceMapEmbed) is `true`).\n\nIf this option is a string, it’s the path that the source map is expected to be written to, which is used to link to the source map from the generated CSS and to link *from* the source map to the Sass source files. Note that if `sourceMap` is a string and [outFile](legacystringoptions#outFile) isn’t passed, Sass assumes that the CSS will be written to the same directory as the file option if it’s passed.\n\nIf this option is `true`, the path is assumed to be [outFile](legacystringoptions#outFile) with `.map` added to the end. If it’s `true` and [outFile](legacystringoptions#outFile) isn’t passed, it has no effect.\n\nexample  \n``` js\nletresult = sass.renderSync({\nfile:\"style.scss\",\nsourceMap:\"out.map\"\n})\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// /*# sourceMappingURL=out.map * /\n\nresult = sass.renderSync({\nfile:\"style.scss\",\nsourceMap:true,\noutFile:\"out.css\"\n})\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// /*# sourceMappingURL=out.css.map * /\n```\n\ndefaultvalue  \n`false`\n\n### Optional sourceMapContents\n\nsourceMapContents?: boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[sourceMapContents](legacysharedoptions#sourceMapContents)\n\n- Defined in [js-api-doc/legacy/options.d.ts:272](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L272)\n\nWhether to embed the entire contents of the Sass files that contributed to the generated CSS in the source map. This may produce very large source maps, but it guarantees that the source will be available on any computer no matter how the CSS is served.\n\nexample  \n``` js\nsass.renderSync({\nfile:\"style.scss\",\nsourceMap:\"out.map\",\nsourceMapContents:true\n})\n```\n\ndefaultvalue  \n`false`\n\n### Optional sourceMapEmbed\n\nsourceMapEmbed?: boolean\n\nInherited from [LegacySharedOptions](legacysharedoptions).[sourceMapEmbed](legacysharedoptions#sourceMapEmbed)\n\n- Defined in [js-api-doc/legacy/options.d.ts:291](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L291)\n\nWhether to embed the contents of the source map file in the generated CSS, rather than creating a separate file and linking to it from the CSS.\n\nexample  \n``` js\nsass.renderSync({\nfile:\"style.scss\",\nsourceMap:\"out.map\",\nsourceMapEmbed:true\n});\n```\n\ndefaultvalue  \n`false`\n\n### Optional sourceMapRoot\n\nsourceMapRoot?: string\n\nInherited from [LegacySharedOptions](legacysharedoptions).[sourceMapRoot](legacysharedoptions#sourceMapRoot)\n\n- Defined in [js-api-doc/legacy/options.d.ts:299](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L299)\n\nIf this is passed, it's prepended to all the links from the source map to the Sass source files.\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [LegacyStringOptions](legacystringoptions)\n  - Input\n  - [data](legacystringoptions#data)\n  - [file](legacystringoptions#file)\n  - [includePaths](legacystringoptions#includePaths)\n  - [indentedSyntax](legacystringoptions#indentedSyntax)\n  - Output\n  - [charset](legacystringoptions#charset)\n  - [indentType](legacystringoptions#indentType)\n  - [indentWidth](legacystringoptions#indentWidth)\n  - [linefeed](legacystringoptions#linefeed)\n  - [outputStyle](legacystringoptions#outputStyle)\n  - Plugins\n  - [functions](legacystringoptions#functions)\n  - [importer](legacystringoptions#importer)\n  - Messages\n  - [logger](legacystringoptions#logger)\n  - [quietDeps](legacystringoptions#quietDeps)\n  - [verbose](legacystringoptions#verbose)\n  - Source Maps\n  - [omitSourceMapUrl](legacystringoptions#omitSourceMapUrl)\n  - [outFile](legacystringoptions#outFile)\n  - [sourceMap](legacystringoptions#sourceMap)\n  - [sourceMapContents](legacystringoptions#sourceMapContents)\n  - [sourceMapEmbed](legacystringoptions#sourceMapEmbed)\n  - [sourceMapRoot](legacystringoptions#sourceMapRoot)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/LegacyStringOptions](https://sass-lang.com/documentation/js-api/interfaces/LegacyStringOptions)"
- name: Interface Logger
  id: js-api/interfaces/logger
  summary: An object that can be passed to LegacySharedOptions.logger to control how Sass emits warnings and debug messages
  description: "# Interface Logger\n\nAn object that can be passed to [LegacySharedOptions.logger](legacysharedoptions#logger) to control how Sass emits warnings and debug messages.\n\nexample  \n``` js\nconstfs = require('fs');\nconstsass = require('sass');\n\nletlog = \"\";\nsass.renderSync({\nfile:'input.scss',\nlogger: {\nwarn(message, options) {\nif (options.span) {\nlog += `${span.url}:${span.start.line}:${span.start.column}: ` +\n`${message}\\n`;\n      } else {\nlog += `::: ${message}\\n`;\n      }\n    }\n  }\n});\n\nfs.writeFileSync('log.txt', log);\n```\n\n### Hierarchy\n\n- Logger\n\n## Index\n\n### Methods\n\n- [debug](logger#debug)\n- [warn](logger#warn)\n\n## Methods\n\n### Optional debug\n\n- debug(message: string, options: { span: [SourceSpan](sourcespan) }): void\n\n- - Defined in [js-api-doc/logger/index.d.ts:69](https://github.com/sass/sass/blob/6d42491/js-api-doc/logger/index.d.ts#L69)\n\n  This method is called when Sass emits a debug message due to a [`@debug` rule](../../at-rules/debug).\n\n  If this is `undefined`, Sass will print debug messages to standard error.\n\n  #### Parameters\n\n  - ##### message: string\n\n    The debug message.\n\n  - ##### options: { span: [SourceSpan](sourcespan) }\n\n    - ##### span: [SourceSpan](sourcespan)\n\n      The location in the Sass source code that generated this debug message.\n\n  #### Returns void\n\n### Optional warn\n\n- warn(message: string, options: { deprecation: boolean; span?: [SourceSpan](sourcespan); stack?: string }): void\n\n&nbsp;\n\n- - Defined in [js-api-doc/logger/index.d.ts:50](https://github.com/sass/sass/blob/6d42491/js-api-doc/logger/index.d.ts#L50)\n\n  This method is called when Sass emits a warning, whether due to a [`@warn` rule](../../at-rules/warn) or a warning generated by the Sass compiler.\n\n  If this is `undefined`, Sass will print warnings to standard error.\n\n  #### Parameters\n\n  - ##### message: string\n\n    The warning message.\n\n  - ##### options: { deprecation: boolean; span?: [SourceSpan](sourcespan); stack?: string }\n\n    - ##### deprecation: boolean\n\n      Whether this is a deprecation warning.\n\n    - ##### Optional span?: [SourceSpan](sourcespan)\n\n      The location in the Sass source code that generated this warning.\n\n    - ##### Optional stack?: string\n\n      The Sass stack trace at the point the warning was issued.\n\n  #### Returns void\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n&nbsp;\n\n- [Logger](logger)\n  - [debug](logger#debug)\n  - [warn](logger#warn)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/Logger](https://sass-lang.com/documentation/js-api/interfaces/Logger)"
- name: Interface Options<sync>
  id: js-api/interfaces/options
  summary: Options that can be passed to compile, compileAsync, compileString, or compileStringAsync
  description: "# Interface Options\\<sync\\>\n\nOptions that can be passed to [compile](../modules#compile), [compileAsync](../modules#compileAsync), [compileString](../modules#compileString), or [compileStringAsync](../modules#compileStringAsync).\n\n### Type parameters\n\n- #### sync: \"sync\" \\| \"async\"\n\n  This lets the TypeScript checker verify that asynchronous [Importer](importer)s, [FileImporter](fileimporter)s, and [CustomFunction](../modules#CustomFunction)s aren't passed to [compile](../modules#compile) or [compileString](../modules#compileString).\n\n### Hierarchy\n\n- Options\n  - [StringOptionsWithoutImporter](stringoptionswithoutimporter)\n\n## Index\n\n### Input\n\n- [loadPaths](options#loadPaths)\n\n### Output\n\n- [charset](options#charset)\n- [sourceMap](options#sourceMap)\n- [sourceMapIncludeSources](options#sourceMapIncludeSources)\n- [style](options#style)\n\n### Plugins\n\n- [functions](options#functions)\n- [importers](options#importers)\n\n### Messages\n\n- [alertAscii](options#alertAscii)\n- [alertColor](options#alertColor)\n- [logger](options#logger)\n- [quietDeps](options#quietDeps)\n- [verbose](options#verbose)\n\n## Input\n\n### Optional loadPaths\n\nloadPaths?: string\\[\\]\n\n- Defined in [js-api-doc/options.d.ts:242](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L242)\n\nPaths in which to look for stylesheets loaded by rules like [`@use`](../../at-rules/use) and [`@import`](../../at-rules/import).\n\nA load path `loadPath` is equivalent to the following [FileImporter](fileimporter):\n\n``` js\n{\nfindFileUrl(url) {\n// Load paths only support relative URLs.\nif (/^[a-z]+:/i.test(url)) returnnull;\nreturnnewURL(url, pathToFileURL(loadPath));\n  }\n}\n```\n\n## Output\n\n### Optional charset\n\ncharset?: boolean\n\n- Defined in [js-api-doc/options.d.ts:123](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L123)\n\nCompatibility:\n\nDart Sass  \nsince 1.54.0\n\nNode Sass  \n✗\n\nIf `true`, the compiler may prepend `@charset \"UTF-8\";` or U+FEFF (byte-order marker) if it outputs non-ASCII CSS.\n\nIf `false`, the compiler never emits these byte sequences. This is ideal when concatenating or embedding in HTML `<style>` tags. (The output will still be UTF-8.)\n\ndefaultvalue  \n`true`\n\n### Optional sourceMap\n\nsourceMap?: boolean\n\n- Defined in [js-api-doc/options.d.ts:291](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L291)\n\nWhether or not Sass should generate a source map. If it does, the source map will be available as [CompileResult.sourceMap](compileresult#sourceMap).\n\n### ⚠️ Heads up!\n\nSass doesn't automatically add a `sourceMappingURL` comment to the generated CSS. It's up to callers to do that, since callers have full knowledge of where the CSS and the source map will exist in relation to one another and how they'll be served to the browser.\n\ndefaultvalue  \n`false`\n\n### Optional sourceMapIncludeSources\n\nsourceMapIncludeSources?: boolean\n\n- Defined in [js-api-doc/options.d.ts:301](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L301)\n\nWhether Sass should include the sources in the generated source map.\n\nThis option has no effect if [sourceMap](options#sourceMap) is `false`.\n\ndefaultvalue  \n`false`\n\n### Optional style\n\nstyle?: [OutputStyle](../modules#OutputStyle)\n\n- Defined in [js-api-doc/options.d.ts:333](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L333)\n\nThe [OutputStyle](../modules#OutputStyle) of the compiled CSS.\n\nexample  \n``` js\nconstsource = `\nh1 {\n  font-size: 40px;\n  code {\n    font-face: Roboto Mono;\n  }\n}`;\n\nletresult = sass.compileString(source, {style:\"expanded\"});\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// h1 code {\n//   font-face: Roboto Mono;\n// }\n\nresult = sass.compileString(source, {style:\"compressed\"})\nconsole.log(result.css.toString());\n// h1{font-size:40px}h1 code{font-face:Roboto Mono}\n```\n\n## Plugins\n\n### Optional functions\n\nfunctions?: Record\\<string, [CustomFunction](../modules#CustomFunction)\\<sync\\>\\>\n\n- Defined in [js-api-doc/options.d.ts:200](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L200)\n\nAdditional built-in Sass functions that are available in all stylesheets. This option takes an object whose keys are Sass function signatures like you'd write for the [`@function rule`](../../at-rules/function) and whose values are [CustomFunction](../modules#CustomFunction)s.\n\nFunctions are passed JavaScript representations of [Sass value types](../../js-api#value-types), and must return the same.\n\nWhen writing custom functions, it's important to make them as user-friendly and as close to the standards set by Sass's core functions as possible. Some good guidelines to follow include:\n\n- Use `Value.assert*` methods, like [Value.assertString](../classes/value#assertString), to cast untyped `Value` objects to more specific types. For values that were passed directly as arguments, pass in the argument name as well. This ensures that the user gets good error messages when they pass in the wrong type to your function.\n\n- Individual classes may have more specific `assert*` methods, like [SassNumber.assertInt](../classes/sassnumber#assertInt), which should be used when possible.\n\n- In Sass, every value counts as a list. Rather than trying to detect the [SassList](../classes/sasslist) type, you should use [Value.asList](../classes/value#asList) to treat all values as lists.\n\n- When manipulating values like lists, strings, and numbers that have metadata (comma versus space separated, bracketed versus unbracketed, quoted versus unquoted, units), the output metadata should match the input metadata.\n\n- When in doubt, lists should default to comma-separated, strings should default to quoted, and numbers should default to unitless.\n\n- In Sass, lists and strings use one-based indexing and use negative indices to index from the end of value. Functions should follow these conventions. [Value.sassIndexToListIndex](../classes/value#sassIndexToListIndex) and [SassString.sassIndexToStringIndex](../classes/sassstring#sassIndexToStringIndex) can be used to do this automatically.\n\n- String indexes in Sass refer to Unicode code points while JavaScript string indices refer to UTF-16 code units. For example, the character U+1F60A SMILING FACE WITH SMILING EYES is a single Unicode code point but is represented in UTF-16 as two code units (`0xD83D` and `0xDE0A`). So in JavaScript, `\"a😊b\".charCodeAt(1)` returns `0xD83D`, whereas in Sass `str-slice(\"a😊b\", 1, 1)` returns `\"😊\"`. Functions should follow Sass's convention. [SassString.sassIndexToStringIndex](../classes/sassstring#sassIndexToStringIndex) can be used to do this automatically, and the [SassString.sassLength](../classes/sassstring#sassLength) getter can be used to access a string's length in code points.\n\nexample  \n``` js\nsass.compileString(`\nh1 {\n  font-size: pow(2, 5) * 1px;\n}`, {\nfunctions: {\n// Note: in real code, you should use `math.pow()` from the built-in\n// `sass:math` module.\n'pow($base, $exponent)':function(args) {\nconstbase = args[0].assertNumber('base').assertNoUnits('base');\nconstexponent =\nargs[1].assertNumber('exponent').assertNoUnits('exponent');\n\nreturnnewsass.SassNumber(Math.pow(base.value, exponent.value));\n    }\n  }\n});\n```\n\n### Optional importers\n\nimporters?: ([Importer](importer)\\<sync\\> \\| [FileImporter](fileimporter)\\<sync\\>)\\[\\]\n\n- Defined in [js-api-doc/options.d.ts:221](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L221)\n\nCustom importers that control how Sass resolves loads from rules like [`@use`](../../at-rules/use) and [`@import`](../../at-rules/import).\n\nLoads are resolved by trying, in order:\n\n- The importer that was used to load the current stylesheet, with the loaded URL resolved relative to the current stylesheet's canonical URL.\n\n- Each [Importer](importer) or [FileImporter](fileimporter) in [importers](options#importers), in order.\n\n- Each load path in [loadPaths](options#loadPaths), in order.\n\nIf none of these return a Sass file, the load fails and Sass throws an error.\n\n## Messages\n\n### Optional alertAscii\n\nalertAscii?: boolean\n\n- Defined in [js-api-doc/options.d.ts:99](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L99)\n\nIf this is `true`, the compiler will exclusively use ASCII characters in its error and warning messages. Otherwise, it may use non-ASCII Unicode characters as well.\n\ndefaultvalue  \n`false`\n\n### Optional alertColor\n\nalertColor?: boolean\n\n- Defined in [js-api-doc/options.d.ts:109](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L109)\n\nIf this is `true`, the compiler will use ANSI color escape codes in its error and warning messages. If it's `false`, it won't use these. If it's undefined, the compiler will determine whether or not to use colors depending on whether the user is using an interactive terminal.\n\n### Optional logger\n\nlogger?: [Logger](logger)\n\n- Defined in [js-api-doc/options.d.ts:256](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L256)\n\nAn object to use to handle warnings and/or debug messages from Sass.\n\nBy default, Sass emits warnings and debug messages to standard error, but if [Logger.warn](logger#warn) or [Logger.debug](logger#debug) is set, this will invoke them instead.\n\nThe special value [Logger.silent](../modules/logger#silent) can be used to easily silence all messages.\n\n### Optional quietDeps\n\nquietDeps?: boolean\n\n- Defined in [js-api-doc/options.d.ts:277](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L277)\n\nIf this option is set to `true`, Sass won’t print warnings that are caused by dependencies. A “dependency” is defined as any file that’s loaded through [loadPaths](options#loadPaths) or [importer](stringoptionswithimporter#importer). Stylesheets that are imported relative to the entrypoint are not considered dependencies.\n\nThis is useful for silencing deprecation warnings that you can’t fix on your own. However, please *also* notify your dependencies of the deprecations so that they can get fixed as soon as possible!\n\n### ⚠️ Heads up!\n\nIf [compileString](../modules#compileString) or [compileStringAsync](../modules#compileStringAsync) is called without \\[\\[StringWithoutImporter.url\\]\\], *all* stylesheets it loads will be considered dependencies. Since it doesn’t have a path of its own, everything it loads is coming from a load path rather than a relative import.\n\ndefaultvalue  \n`false`\n\n### Optional verbose\n\nverbose?: boolean\n\n- Defined in [js-api-doc/options.d.ts:344](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L344)\n\nBy default, Dart Sass will print only five instances of the same deprecation warning per compilation to avoid deluging users in console noise. If you set `verbose` to `true`, it will instead print every deprecation warning it encounters.\n\ndefaultvalue  \n`false`\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [Options](options)\n  - Input\n  - [loadPaths](options#loadPaths)\n  - Output\n  - [charset](options#charset)\n  - [sourceMap](options#sourceMap)\n  - [sourceMapIncludeSources](options#sourceMapIncludeSources)\n  - [style](options#style)\n  - Plugins\n  - [functions](options#functions)\n  - [importers](options#importers)\n  - Messages\n  - [alertAscii](options#alertAscii)\n  - [alertColor](options#alertColor)\n  - [logger](options#logger)\n  - [quietDeps](options#quietDeps)\n  - [verbose](options#verbose)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/Options](https://sass-lang.com/documentation/js-api/interfaces/Options)"
- name: Interface SourceLocation
  id: js-api/interfaces/sourcelocation
  summary: A specific location within a source file
  description: "# Interface SourceLocation\n\nA specific location within a source file.\n\nThis is always associated with a [SourceSpan](sourcespan) which indicates *which* file it refers to.\n\n### Hierarchy\n\n- SourceLocation\n\n## Index\n\n### Properties\n\n- [column](sourcelocation#column)\n- [line](sourcelocation#line)\n- [offset](sourcelocation#offset)\n\n## Properties\n\n### column\n\ncolumn: number\n\n- Defined in [js-api-doc/logger/source_location.d.ts:20](https://github.com/sass/sass/blob/6d42491/js-api-doc/logger/source_location.d.ts#L20)\n\nThe 0-based column number of this location.\n\n### line\n\nline: number\n\n- Defined in [js-api-doc/logger/source_location.d.ts:17](https://github.com/sass/sass/blob/6d42491/js-api-doc/logger/source_location.d.ts#L17)\n\nThe 0-based line number of this location.\n\n### offset\n\noffset: number\n\n- Defined in [js-api-doc/logger/source_location.d.ts:14](https://github.com/sass/sass/blob/6d42491/js-api-doc/logger/source_location.d.ts#L14)\n\nThe 0-based index of this location within its source file, in terms of UTF-16 code units.\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [SourceLocation](sourcelocation)\n  - [column](sourcelocation#column)\n  - [line](sourcelocation#line)\n  - [offset](sourcelocation#offset)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/SourceLocation](https://sass-lang.com/documentation/js-api/interfaces/SourceLocation)"
- name: Interface SourceSpan
  id: js-api/interfaces/sourcespan
  summary: A span of text within a source file
  description: "# Interface SourceSpan\n\nA span of text within a source file.\n\n### Hierarchy\n\n- SourceSpan\n\n## Index\n\n### Properties\n\n- [context](sourcespan#context)\n- [end](sourcespan#end)\n- [start](sourcespan#start)\n- [text](sourcespan#text)\n- [url](sourcespan#url)\n\n## Properties\n\n### Optional context\n\ncontext?: string\n\n- Defined in [js-api-doc/logger/source_span.d.ts:33](https://github.com/sass/sass/blob/6d42491/js-api-doc/logger/source_span.d.ts#L33)\n\nText surrounding the span.\n\nIf this is set, it must include only whole lines, and it must include at least all line(s) which are partially covered by this span.\n\n### end\n\nend: [SourceLocation](sourcelocation)\n\n- Defined in [js-api-doc/logger/source_span.d.ts:19](https://github.com/sass/sass/blob/6d42491/js-api-doc/logger/source_span.d.ts#L19)\n\nThe end of this span, exclusive.\n\nIf [start](sourcespan#start) and [end](sourcespan#end) refer to the same location, the span has zero length and refers to the point immediately after [start](sourcespan#start) and before the next character.\n\n### start\n\nstart: [SourceLocation](sourcelocation)\n\n- Defined in [js-api-doc/logger/source_span.d.ts:10](https://github.com/sass/sass/blob/6d42491/js-api-doc/logger/source_span.d.ts#L10)\n\nThe beginning of this span, inclusive.\n\n### text\n\ntext: string\n\n- Defined in [js-api-doc/logger/source_span.d.ts:25](https://github.com/sass/sass/blob/6d42491/js-api-doc/logger/source_span.d.ts#L25)\n\nThe text covered by the span.\n\n### Optional url\n\nurl?: [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL)\n\n- Defined in [js-api-doc/logger/source_span.d.ts:22](https://github.com/sass/sass/blob/6d42491/js-api-doc/logger/source_span.d.ts#L22)\n\nThe canonical URL of the file this span refers to.\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [SourceSpan](sourcespan)\n  - [context](sourcespan#context)\n  - [end](sourcespan#end)\n  - [start](sourcespan#start)\n  - [text](sourcespan#text)\n  - [url](sourcespan#url)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/SourceSpan](https://sass-lang.com/documentation/js-api/interfaces/SourceSpan)"
- name: Interface StringOptionsWithImporter<sync>
  id: js-api/interfaces/stringoptionswithimporter
  summary: Options that can be passed to compileString or compileStringAsync
  description: "# Interface StringOptionsWithImporter\\<sync\\>\n\nOptions that can be passed to [compileString](../modules#compileString) or [compileStringAsync](../modules#compileStringAsync).\n\nIf the [StringOptionsWithImporter.importer](stringoptionswithimporter#importer) field is passed, the entrypoint file uses it to load files relative to itself and the [url](stringoptionswithimporter#url) field is mandatory.\n\n### Type parameters\n\n- #### sync: \"sync\" \\| \"async\"\n\n  This lets the TypeScript checker verify that asynchronous [Importer](importer)s, [FileImporter](fileimporter)s, and [CustomFunction](../modules#CustomFunction)s aren't passed to [compile](../modules#compile) or [compileString](../modules#compileString).\n\n### Hierarchy\n\n- [StringOptionsWithoutImporter](stringoptionswithoutimporter)\\<sync\\>\n  - StringOptionsWithImporter\n\n## Index\n\n### Input\n\n- [importer](stringoptionswithimporter#importer)\n- [loadPaths](stringoptionswithimporter#loadPaths)\n- [syntax](stringoptionswithimporter#syntax)\n- [url](stringoptionswithimporter#url)\n\n### Output\n\n- [charset](stringoptionswithimporter#charset)\n- [sourceMap](stringoptionswithimporter#sourceMap)\n- [sourceMapIncludeSources](stringoptionswithimporter#sourceMapIncludeSources)\n- [style](stringoptionswithimporter#style)\n\n### Plugins\n\n- [functions](stringoptionswithimporter#functions)\n- [importers](stringoptionswithimporter#importers)\n\n### Messages\n\n- [alertAscii](stringoptionswithimporter#alertAscii)\n- [alertColor](stringoptionswithimporter#alertColor)\n- [logger](stringoptionswithimporter#logger)\n- [quietDeps](stringoptionswithimporter#quietDeps)\n- [verbose](stringoptionswithimporter#verbose)\n\n## Input\n\n### importer\n\nimporter: [Importer](importer)\\<sync\\> \\| [FileImporter](fileimporter)\\<sync\\>\n\n- Defined in [js-api-doc/options.d.ts:408](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L408)\n\nThe importer to use to handle loads that are relative to the entrypoint stylesheet.\n\nA relative load's URL is first resolved relative to [url](stringoptionswithimporter#url), then passed to [importer](stringoptionswithimporter#importer). If the importer doesn't recognize it, it's then passed to [importers](stringoptionswithimporter#importers) and [loadPaths](stringoptionswithimporter#loadPaths).\n\n### Optional loadPaths\n\nloadPaths?: string\\[\\]\n\nInherited from [StringOptionsWithoutImporter](stringoptionswithoutimporter).[loadPaths](stringoptionswithoutimporter#loadPaths)\n\n- Defined in [js-api-doc/options.d.ts:242](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L242)\n\nPaths in which to look for stylesheets loaded by rules like [`@use`](../../at-rules/use) and [`@import`](../../at-rules/import).\n\nA load path `loadPath` is equivalent to the following [FileImporter](fileimporter):\n\n``` js\n{\nfindFileUrl(url) {\n// Load paths only support relative URLs.\nif (/^[a-z]+:/i.test(url)) returnnull;\nreturnnewURL(url, pathToFileURL(loadPath));\n  }\n}\n```\n\n### Optional syntax\n\nsyntax?: [Syntax](../modules#Syntax)\n\nInherited from [StringOptionsWithoutImporter](stringoptionswithoutimporter).[syntax](stringoptionswithoutimporter#syntax)\n\n- Defined in [js-api-doc/options.d.ts:369](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L369)\n\nThe [Syntax](../modules#Syntax) to use to parse the entrypoint stylesheet.\n\ndefault  \n`'scss'`\n\n### url\n\nurl: [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL)\n\nOverrides [StringOptionsWithoutImporter](stringoptionswithoutimporter).[url](stringoptionswithoutimporter#url)\n\n- Defined in [js-api-doc/options.d.ts:417](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L417)\n\nThe canonical URL of the entrypoint stylesheet. If this is passed along with [importer](stringoptionswithimporter#importer), it's used to resolve relative loads in the entrypoint stylesheet.\n\n## Output\n\n### Optional charset\n\ncharset?: boolean\n\nInherited from [StringOptionsWithoutImporter](stringoptionswithoutimporter).[charset](stringoptionswithoutimporter#charset)\n\n- Defined in [js-api-doc/options.d.ts:123](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L123)\n\nCompatibility:\n\nDart Sass  \nsince 1.54.0\n\nNode Sass  \n✗\n\nIf `true`, the compiler may prepend `@charset \"UTF-8\";` or U+FEFF (byte-order marker) if it outputs non-ASCII CSS.\n\nIf `false`, the compiler never emits these byte sequences. This is ideal when concatenating or embedding in HTML `<style>` tags. (The output will still be UTF-8.)\n\ndefaultvalue  \n`true`\n\n### Optional sourceMap\n\nsourceMap?: boolean\n\nInherited from [StringOptionsWithoutImporter](stringoptionswithoutimporter).[sourceMap](stringoptionswithoutimporter#sourceMap)\n\n- Defined in [js-api-doc/options.d.ts:291](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L291)\n\nWhether or not Sass should generate a source map. If it does, the source map will be available as [CompileResult.sourceMap](compileresult#sourceMap).\n\n### ⚠️ Heads up!\n\nSass doesn't automatically add a `sourceMappingURL` comment to the generated CSS. It's up to callers to do that, since callers have full knowledge of where the CSS and the source map will exist in relation to one another and how they'll be served to the browser.\n\ndefaultvalue  \n`false`\n\n### Optional sourceMapIncludeSources\n\nsourceMapIncludeSources?: boolean\n\nInherited from [StringOptionsWithoutImporter](stringoptionswithoutimporter).[sourceMapIncludeSources](stringoptionswithoutimporter#sourceMapIncludeSources)\n\n- Defined in [js-api-doc/options.d.ts:301](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L301)\n\nWhether Sass should include the sources in the generated source map.\n\nThis option has no effect if [sourceMap](stringoptionswithimporter#sourceMap) is `false`.\n\ndefaultvalue  \n`false`\n\n### Optional style\n\nstyle?: [OutputStyle](../modules#OutputStyle)\n\nInherited from [StringOptionsWithoutImporter](stringoptionswithoutimporter).[style](stringoptionswithoutimporter#style)\n\n- Defined in [js-api-doc/options.d.ts:333](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L333)\n\nThe [OutputStyle](../modules#OutputStyle) of the compiled CSS.\n\nexample  \n``` js\nconstsource = `\nh1 {\n  font-size: 40px;\n  code {\n    font-face: Roboto Mono;\n  }\n}`;\n\nletresult = sass.compileString(source, {style:\"expanded\"});\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// h1 code {\n//   font-face: Roboto Mono;\n// }\n\nresult = sass.compileString(source, {style:\"compressed\"})\nconsole.log(result.css.toString());\n// h1{font-size:40px}h1 code{font-face:Roboto Mono}\n```\n\n## Plugins\n\n### Optional functions\n\nfunctions?: Record\\<string, [CustomFunction](../modules#CustomFunction)\\<sync\\>\\>\n\nInherited from [StringOptionsWithoutImporter](stringoptionswithoutimporter).[functions](stringoptionswithoutimporter#functions)\n\n- Defined in [js-api-doc/options.d.ts:200](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L200)\n\nAdditional built-in Sass functions that are available in all stylesheets. This option takes an object whose keys are Sass function signatures like you'd write for the [`@function rule`](../../at-rules/function) and whose values are [CustomFunction](../modules#CustomFunction)s.\n\nFunctions are passed JavaScript representations of [Sass value types](../../js-api#value-types), and must return the same.\n\nWhen writing custom functions, it's important to make them as user-friendly and as close to the standards set by Sass's core functions as possible. Some good guidelines to follow include:\n\n- Use `Value.assert*` methods, like [Value.assertString](../classes/value#assertString), to cast untyped `Value` objects to more specific types. For values that were passed directly as arguments, pass in the argument name as well. This ensures that the user gets good error messages when they pass in the wrong type to your function.\n\n- Individual classes may have more specific `assert*` methods, like [SassNumber.assertInt](../classes/sassnumber#assertInt), which should be used when possible.\n\n- In Sass, every value counts as a list. Rather than trying to detect the [SassList](../classes/sasslist) type, you should use [Value.asList](../classes/value#asList) to treat all values as lists.\n\n- When manipulating values like lists, strings, and numbers that have metadata (comma versus space separated, bracketed versus unbracketed, quoted versus unquoted, units), the output metadata should match the input metadata.\n\n- When in doubt, lists should default to comma-separated, strings should default to quoted, and numbers should default to unitless.\n\n- In Sass, lists and strings use one-based indexing and use negative indices to index from the end of value. Functions should follow these conventions. [Value.sassIndexToListIndex](../classes/value#sassIndexToListIndex) and [SassString.sassIndexToStringIndex](../classes/sassstring#sassIndexToStringIndex) can be used to do this automatically.\n\n- String indexes in Sass refer to Unicode code points while JavaScript string indices refer to UTF-16 code units. For example, the character U+1F60A SMILING FACE WITH SMILING EYES is a single Unicode code point but is represented in UTF-16 as two code units (`0xD83D` and `0xDE0A`). So in JavaScript, `\"a😊b\".charCodeAt(1)` returns `0xD83D`, whereas in Sass `str-slice(\"a😊b\", 1, 1)` returns `\"😊\"`. Functions should follow Sass's convention. [SassString.sassIndexToStringIndex](../classes/sassstring#sassIndexToStringIndex) can be used to do this automatically, and the [SassString.sassLength](../classes/sassstring#sassLength) getter can be used to access a string's length in code points.\n\nexample  \n``` js\nsass.compileString(`\nh1 {\n  font-size: pow(2, 5) * 1px;\n}`, {\nfunctions: {\n// Note: in real code, you should use `math.pow()` from the built-in\n// `sass:math` module.\n'pow($base, $exponent)':function(args) {\nconstbase = args[0].assertNumber('base').assertNoUnits('base');\nconstexponent =\nargs[1].assertNumber('exponent').assertNoUnits('exponent');\n\nreturnnewsass.SassNumber(Math.pow(base.value, exponent.value));\n    }\n  }\n});\n```\n\n### Optional importers\n\nimporters?: ([Importer](importer)\\<sync\\> \\| [FileImporter](fileimporter)\\<sync\\>)\\[\\]\n\nInherited from [StringOptionsWithoutImporter](stringoptionswithoutimporter).[importers](stringoptionswithoutimporter#importers)\n\n- Defined in [js-api-doc/options.d.ts:221](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L221)\n\nCustom importers that control how Sass resolves loads from rules like [`@use`](../../at-rules/use) and [`@import`](../../at-rules/import).\n\nLoads are resolved by trying, in order:\n\n- The importer that was used to load the current stylesheet, with the loaded URL resolved relative to the current stylesheet's canonical URL.\n\n- Each [Importer](importer) or [FileImporter](fileimporter) in [importers](stringoptionswithimporter#importers), in order.\n\n- Each load path in [loadPaths](stringoptionswithimporter#loadPaths), in order.\n\nIf none of these return a Sass file, the load fails and Sass throws an error.\n\n## Messages\n\n### Optional alertAscii\n\nalertAscii?: boolean\n\nInherited from [StringOptionsWithoutImporter](stringoptionswithoutimporter).[alertAscii](stringoptionswithoutimporter#alertAscii)\n\n- Defined in [js-api-doc/options.d.ts:99](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L99)\n\nIf this is `true`, the compiler will exclusively use ASCII characters in its error and warning messages. Otherwise, it may use non-ASCII Unicode characters as well.\n\ndefaultvalue  \n`false`\n\n### Optional alertColor\n\nalertColor?: boolean\n\nInherited from [StringOptionsWithoutImporter](stringoptionswithoutimporter).[alertColor](stringoptionswithoutimporter#alertColor)\n\n- Defined in [js-api-doc/options.d.ts:109](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L109)\n\nIf this is `true`, the compiler will use ANSI color escape codes in its error and warning messages. If it's `false`, it won't use these. If it's undefined, the compiler will determine whether or not to use colors depending on whether the user is using an interactive terminal.\n\n### Optional logger\n\nlogger?: [Logger](logger)\n\nInherited from [StringOptionsWithoutImporter](stringoptionswithoutimporter).[logger](stringoptionswithoutimporter#logger)\n\n- Defined in [js-api-doc/options.d.ts:256](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L256)\n\nAn object to use to handle warnings and/or debug messages from Sass.\n\nBy default, Sass emits warnings and debug messages to standard error, but if [Logger.warn](logger#warn) or [Logger.debug](logger#debug) is set, this will invoke them instead.\n\nThe special value [Logger.silent](../modules/logger#silent) can be used to easily silence all messages.\n\n### Optional quietDeps\n\nquietDeps?: boolean\n\nInherited from [StringOptionsWithoutImporter](stringoptionswithoutimporter).[quietDeps](stringoptionswithoutimporter#quietDeps)\n\n- Defined in [js-api-doc/options.d.ts:277](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L277)\n\nIf this option is set to `true`, Sass won’t print warnings that are caused by dependencies. A “dependency” is defined as any file that’s loaded through [loadPaths](stringoptionswithimporter#loadPaths) or [importer](stringoptionswithimporter#importer). Stylesheets that are imported relative to the entrypoint are not considered dependencies.\n\nThis is useful for silencing deprecation warnings that you can’t fix on your own. However, please *also* notify your dependencies of the deprecations so that they can get fixed as soon as possible!\n\n### ⚠️ Heads up!\n\nIf [compileString](../modules#compileString) or [compileStringAsync](../modules#compileStringAsync) is called without \\[\\[StringWithoutImporter.url\\]\\], *all* stylesheets it loads will be considered dependencies. Since it doesn’t have a path of its own, everything it loads is coming from a load path rather than a relative import.\n\ndefaultvalue  \n`false`\n\n### Optional verbose\n\nverbose?: boolean\n\nInherited from [StringOptionsWithoutImporter](stringoptionswithoutimporter).[verbose](stringoptionswithoutimporter#verbose)\n\n- Defined in [js-api-doc/options.d.ts:344](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L344)\n\nBy default, Dart Sass will print only five instances of the same deprecation warning per compilation to avoid deluging users in console noise. If you set `verbose` to `true`, it will instead print every deprecation warning it encounters.\n\ndefaultvalue  \n`false`\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [StringOptionsWithImporter](stringoptionswithimporter)\n  - Input\n  - [importer](stringoptionswithimporter#importer)\n  - [loadPaths](stringoptionswithimporter#loadPaths)\n  - [syntax](stringoptionswithimporter#syntax)\n  - [url](stringoptionswithimporter#url)\n  - Output\n  - [charset](stringoptionswithimporter#charset)\n  - [sourceMap](stringoptionswithimporter#sourceMap)\n  - [sourceMapIncludeSources](stringoptionswithimporter#sourceMapIncludeSources)\n  - [style](stringoptionswithimporter#style)\n  - Plugins\n  - [functions](stringoptionswithimporter#functions)\n  - [importers](stringoptionswithimporter#importers)\n  - Messages\n  - [alertAscii](stringoptionswithimporter#alertAscii)\n  - [alertColor](stringoptionswithimporter#alertColor)\n  - [logger](stringoptionswithimporter#logger)\n  - [quietDeps](stringoptionswithimporter#quietDeps)\n  - [verbose](stringoptionswithimporter#verbose)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/StringOptionsWithImporter](https://sass-lang.com/documentation/js-api/interfaces/StringOptionsWithImporter)"
- name: Interface StringOptionsWithoutImporter<sync>
  id: js-api/interfaces/stringoptionswithoutimporter
  summary: Options that can be passed to compileString or compileStringAsync
  description: "# Interface StringOptionsWithoutImporter\\<sync\\>\n\nOptions that can be passed to [compileString](../modules#compileString) or [compileStringAsync](../modules#compileStringAsync).\n\nIf the [StringOptionsWithImporter.importer](stringoptionswithimporter#importer) field isn't passed, the entrypoint file can load files relative to itself if a `file://` URL is passed to the [url](stringoptionswithoutimporter#url) field.\n\n### Type parameters\n\n- #### sync: \"sync\" \\| \"async\"\n\n  This lets the TypeScript checker verify that asynchronous [Importer](importer)s, [FileImporter](fileimporter)s, and [CustomFunction](../modules#CustomFunction)s aren't passed to [compile](../modules#compile) or [compileString](../modules#compileString).\n\n### Hierarchy\n\n- [Options](options)\\<sync\\>\n  - StringOptionsWithoutImporter\n    - [StringOptionsWithImporter](stringoptionswithimporter)\n\n## Index\n\n### Input\n\n- [loadPaths](stringoptionswithoutimporter#loadPaths)\n- [syntax](stringoptionswithoutimporter#syntax)\n- [url](stringoptionswithoutimporter#url)\n\n### Output\n\n- [charset](stringoptionswithoutimporter#charset)\n- [sourceMap](stringoptionswithoutimporter#sourceMap)\n- [sourceMapIncludeSources](stringoptionswithoutimporter#sourceMapIncludeSources)\n- [style](stringoptionswithoutimporter#style)\n\n### Plugins\n\n- [functions](stringoptionswithoutimporter#functions)\n- [importers](stringoptionswithoutimporter#importers)\n\n### Messages\n\n- [alertAscii](stringoptionswithoutimporter#alertAscii)\n- [alertColor](stringoptionswithoutimporter#alertColor)\n- [logger](stringoptionswithoutimporter#logger)\n- [quietDeps](stringoptionswithoutimporter#quietDeps)\n- [verbose](stringoptionswithoutimporter#verbose)\n\n## Input\n\n### Optional loadPaths\n\nloadPaths?: string\\[\\]\n\nInherited from [Options](options).[loadPaths](options#loadPaths)\n\n- Defined in [js-api-doc/options.d.ts:242](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L242)\n\nPaths in which to look for stylesheets loaded by rules like [`@use`](../../at-rules/use) and [`@import`](../../at-rules/import).\n\nA load path `loadPath` is equivalent to the following [FileImporter](fileimporter):\n\n``` js\n{\nfindFileUrl(url) {\n// Load paths only support relative URLs.\nif (/^[a-z]+:/i.test(url)) returnnull;\nreturnnewURL(url, pathToFileURL(loadPath));\n  }\n}\n```\n\n### Optional syntax\n\nsyntax?: [Syntax](../modules#Syntax)\n\n- Defined in [js-api-doc/options.d.ts:369](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L369)\n\nThe [Syntax](../modules#Syntax) to use to parse the entrypoint stylesheet.\n\ndefault  \n`'scss'`\n\n### Optional url\n\nurl?: [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL)\n\n- Defined in [js-api-doc/options.d.ts:380](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L380)\n\nThe canonical URL of the entrypoint stylesheet.\n\nA relative load's URL is first resolved relative to [url](stringoptionswithoutimporter#url), then resolved to a file on disk if it's a `file://` URL. If it can't be resolved to a file on disk, it's then passed to [importers](stringoptionswithoutimporter#importers) and [loadPaths](stringoptionswithoutimporter#loadPaths).\n\n## Output\n\n### Optional charset\n\ncharset?: boolean\n\nInherited from [Options](options).[charset](options#charset)\n\n- Defined in [js-api-doc/options.d.ts:123](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L123)\n\nCompatibility:\n\nDart Sass  \nsince 1.54.0\n\nNode Sass  \n✗\n\nIf `true`, the compiler may prepend `@charset \"UTF-8\";` or U+FEFF (byte-order marker) if it outputs non-ASCII CSS.\n\nIf `false`, the compiler never emits these byte sequences. This is ideal when concatenating or embedding in HTML `<style>` tags. (The output will still be UTF-8.)\n\ndefaultvalue  \n`true`\n\n### Optional sourceMap\n\nsourceMap?: boolean\n\nInherited from [Options](options).[sourceMap](options#sourceMap)\n\n- Defined in [js-api-doc/options.d.ts:291](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L291)\n\nWhether or not Sass should generate a source map. If it does, the source map will be available as [CompileResult.sourceMap](compileresult#sourceMap).\n\n### ⚠️ Heads up!\n\nSass doesn't automatically add a `sourceMappingURL` comment to the generated CSS. It's up to callers to do that, since callers have full knowledge of where the CSS and the source map will exist in relation to one another and how they'll be served to the browser.\n\ndefaultvalue  \n`false`\n\n### Optional sourceMapIncludeSources\n\nsourceMapIncludeSources?: boolean\n\nInherited from [Options](options).[sourceMapIncludeSources](options#sourceMapIncludeSources)\n\n- Defined in [js-api-doc/options.d.ts:301](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L301)\n\nWhether Sass should include the sources in the generated source map.\n\nThis option has no effect if [sourceMap](stringoptionswithoutimporter#sourceMap) is `false`.\n\ndefaultvalue  \n`false`\n\n### Optional style\n\nstyle?: [OutputStyle](../modules#OutputStyle)\n\nInherited from [Options](options).[style](options#style)\n\n- Defined in [js-api-doc/options.d.ts:333](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L333)\n\nThe [OutputStyle](../modules#OutputStyle) of the compiled CSS.\n\nexample  \n``` js\nconstsource = `\nh1 {\n  font-size: 40px;\n  code {\n    font-face: Roboto Mono;\n  }\n}`;\n\nletresult = sass.compileString(source, {style:\"expanded\"});\nconsole.log(result.css.toString());\n// h1 {\n//   font-size: 40px;\n// }\n// h1 code {\n//   font-face: Roboto Mono;\n// }\n\nresult = sass.compileString(source, {style:\"compressed\"})\nconsole.log(result.css.toString());\n// h1{font-size:40px}h1 code{font-face:Roboto Mono}\n```\n\n## Plugins\n\n### Optional functions\n\nfunctions?: Record\\<string, [CustomFunction](../modules#CustomFunction)\\<sync\\>\\>\n\nInherited from [Options](options).[functions](options#functions)\n\n- Defined in [js-api-doc/options.d.ts:200](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L200)\n\nAdditional built-in Sass functions that are available in all stylesheets. This option takes an object whose keys are Sass function signatures like you'd write for the [`@function rule`](../../at-rules/function) and whose values are [CustomFunction](../modules#CustomFunction)s.\n\nFunctions are passed JavaScript representations of [Sass value types](../../js-api#value-types), and must return the same.\n\nWhen writing custom functions, it's important to make them as user-friendly and as close to the standards set by Sass's core functions as possible. Some good guidelines to follow include:\n\n- Use `Value.assert*` methods, like [Value.assertString](../classes/value#assertString), to cast untyped `Value` objects to more specific types. For values that were passed directly as arguments, pass in the argument name as well. This ensures that the user gets good error messages when they pass in the wrong type to your function.\n\n- Individual classes may have more specific `assert*` methods, like [SassNumber.assertInt](../classes/sassnumber#assertInt), which should be used when possible.\n\n- In Sass, every value counts as a list. Rather than trying to detect the [SassList](../classes/sasslist) type, you should use [Value.asList](../classes/value#asList) to treat all values as lists.\n\n- When manipulating values like lists, strings, and numbers that have metadata (comma versus space separated, bracketed versus unbracketed, quoted versus unquoted, units), the output metadata should match the input metadata.\n\n- When in doubt, lists should default to comma-separated, strings should default to quoted, and numbers should default to unitless.\n\n- In Sass, lists and strings use one-based indexing and use negative indices to index from the end of value. Functions should follow these conventions. [Value.sassIndexToListIndex](../classes/value#sassIndexToListIndex) and [SassString.sassIndexToStringIndex](../classes/sassstring#sassIndexToStringIndex) can be used to do this automatically.\n\n- String indexes in Sass refer to Unicode code points while JavaScript string indices refer to UTF-16 code units. For example, the character U+1F60A SMILING FACE WITH SMILING EYES is a single Unicode code point but is represented in UTF-16 as two code units (`0xD83D` and `0xDE0A`). So in JavaScript, `\"a😊b\".charCodeAt(1)` returns `0xD83D`, whereas in Sass `str-slice(\"a😊b\", 1, 1)` returns `\"😊\"`. Functions should follow Sass's convention. [SassString.sassIndexToStringIndex](../classes/sassstring#sassIndexToStringIndex) can be used to do this automatically, and the [SassString.sassLength](../classes/sassstring#sassLength) getter can be used to access a string's length in code points.\n\nexample  \n``` js\nsass.compileString(`\nh1 {\n  font-size: pow(2, 5) * 1px;\n}`, {\nfunctions: {\n// Note: in real code, you should use `math.pow()` from the built-in\n// `sass:math` module.\n'pow($base, $exponent)':function(args) {\nconstbase = args[0].assertNumber('base').assertNoUnits('base');\nconstexponent =\nargs[1].assertNumber('exponent').assertNoUnits('exponent');\n\nreturnnewsass.SassNumber(Math.pow(base.value, exponent.value));\n    }\n  }\n});\n```\n\n### Optional importers\n\nimporters?: ([Importer](importer)\\<sync\\> \\| [FileImporter](fileimporter)\\<sync\\>)\\[\\]\n\nInherited from [Options](options).[importers](options#importers)\n\n- Defined in [js-api-doc/options.d.ts:221](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L221)\n\nCustom importers that control how Sass resolves loads from rules like [`@use`](../../at-rules/use) and [`@import`](../../at-rules/import).\n\nLoads are resolved by trying, in order:\n\n- The importer that was used to load the current stylesheet, with the loaded URL resolved relative to the current stylesheet's canonical URL.\n\n- Each [Importer](importer) or [FileImporter](fileimporter) in [importers](stringoptionswithoutimporter#importers), in order.\n\n- Each load path in [loadPaths](stringoptionswithoutimporter#loadPaths), in order.\n\nIf none of these return a Sass file, the load fails and Sass throws an error.\n\n## Messages\n\n### Optional alertAscii\n\nalertAscii?: boolean\n\nInherited from [Options](options).[alertAscii](options#alertAscii)\n\n- Defined in [js-api-doc/options.d.ts:99](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L99)\n\nIf this is `true`, the compiler will exclusively use ASCII characters in its error and warning messages. Otherwise, it may use non-ASCII Unicode characters as well.\n\ndefaultvalue  \n`false`\n\n### Optional alertColor\n\nalertColor?: boolean\n\nInherited from [Options](options).[alertColor](options#alertColor)\n\n- Defined in [js-api-doc/options.d.ts:109](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L109)\n\nIf this is `true`, the compiler will use ANSI color escape codes in its error and warning messages. If it's `false`, it won't use these. If it's undefined, the compiler will determine whether or not to use colors depending on whether the user is using an interactive terminal.\n\n### Optional logger\n\nlogger?: [Logger](logger)\n\nInherited from [Options](options).[logger](options#logger)\n\n- Defined in [js-api-doc/options.d.ts:256](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L256)\n\nAn object to use to handle warnings and/or debug messages from Sass.\n\nBy default, Sass emits warnings and debug messages to standard error, but if [Logger.warn](logger#warn) or [Logger.debug](logger#debug) is set, this will invoke them instead.\n\nThe special value [Logger.silent](../modules/logger#silent) can be used to easily silence all messages.\n\n### Optional quietDeps\n\nquietDeps?: boolean\n\nInherited from [Options](options).[quietDeps](options#quietDeps)\n\n- Defined in [js-api-doc/options.d.ts:277](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L277)\n\nIf this option is set to `true`, Sass won’t print warnings that are caused by dependencies. A “dependency” is defined as any file that’s loaded through [loadPaths](stringoptionswithoutimporter#loadPaths) or [importer](stringoptionswithimporter#importer). Stylesheets that are imported relative to the entrypoint are not considered dependencies.\n\nThis is useful for silencing deprecation warnings that you can’t fix on your own. However, please *also* notify your dependencies of the deprecations so that they can get fixed as soon as possible!\n\n### ⚠️ Heads up!\n\nIf [compileString](../modules#compileString) or [compileStringAsync](../modules#compileStringAsync) is called without \\[\\[StringWithoutImporter.url\\]\\], *all* stylesheets it loads will be considered dependencies. Since it doesn’t have a path of its own, everything it loads is coming from a load path rather than a relative import.\n\ndefaultvalue  \n`false`\n\n### Optional verbose\n\nverbose?: boolean\n\nInherited from [Options](options).[verbose](options#verbose)\n\n- Defined in [js-api-doc/options.d.ts:344](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L344)\n\nBy default, Dart Sass will print only five instances of the same deprecation warning per compilation to avoid deluging users in console noise. If you set `verbose` to `true`, it will instead print every deprecation warning it encounters.\n\ndefaultvalue  \n`false`\n\n- [Exports](../modules)\n- [Logger](../modules/logger)\n- [types](../modules/types)\n\n- [StringOptionsWithoutImporter](stringoptionswithoutimporter)\n  - Input\n  - [loadPaths](stringoptionswithoutimporter#loadPaths)\n  - [syntax](stringoptionswithoutimporter#syntax)\n  - [url](stringoptionswithoutimporter#url)\n  - Output\n  - [charset](stringoptionswithoutimporter#charset)\n  - [sourceMap](stringoptionswithoutimporter#sourceMap)\n  - [sourceMapIncludeSources](stringoptionswithoutimporter#sourceMapIncludeSources)\n  - [style](stringoptionswithoutimporter#style)\n  - Plugins\n  - [functions](stringoptionswithoutimporter#functions)\n  - [importers](stringoptionswithoutimporter#importers)\n  - Messages\n  - [alertAscii](stringoptionswithoutimporter#alertAscii)\n  - [alertColor](stringoptionswithoutimporter#alertColor)\n  - [logger](stringoptionswithoutimporter#logger)\n  - [quietDeps](stringoptionswithoutimporter#quietDeps)\n  - [verbose](stringoptionswithoutimporter#verbose)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/interfaces/StringOptionsWithoutImporter](https://sass-lang.com/documentation/js-api/interfaces/StringOptionsWithoutImporter)"
- name: Interpolation
  id: interpolation
  summary: Interpolation can be used almost anywhere in a Sass stylesheet to embed the result of a SassScript expression into a chunk of CSS
  description: "# Interpolation\n\n### Page Sections\n\n- [In SassScript](#in-sassscript)\n- [Quoted Strings](#quoted-strings)\n\nInterpolation can be used almost anywhere in a Sass stylesheet to embed the result of a [SassScript expression](syntax/structure#expressions) into a chunk of CSS. Just wrap an expression in `#{}` in any of the following places:\n\n- [Selectors in style rules](style-rules#interpolation)\n- [Property names in declarations](style-rules/declarations#interpolation)\n- [Custom property values](style-rules/declarations#custom-properties)\n- [CSS at-rules](at-rules/css)\n- [`@extend`s](at-rules/extend)\n- [Plain CSS `@import`s](at-rules/import#plain-css-imports)\n- [Quoted or unquoted strings](values/strings)\n- [Special functions](syntax/special-functions)\n- [Plain CSS function names](at-rules/function#plain-css-functions)\n- [Loud comments](syntax/comments)\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n@mixin corner-icon($name, $top-or-bottom, $left-or-right) {\n  .icon-#{$name} {\n    background-image: url(\"/icons/#{$name}.svg\");\n    position: absolute;\n    #{$top-or-bottom}: 0;\n    #{$left-or-right}: 0;\n  }\n}\n\n@include corner-icon(\"mail\", top, left);\n```\n\n``` scss\n@mixin corner-icon($name, $top-or-bottom, $left-or-right)\n  .icon-#{$name}\n    background-image: url(\"/icons/#{$name}.svg\")\n    position: absolute\n    #{$top-or-bottom}: 0\n    #{$left-or-right}: 0\n\n\n\n@include corner-icon(\"mail\", top, left)\n```\n\n``` css\n.icon-mail {\n  background-image: url(\"/icons/mail.svg\");\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n```\n\n## In SassScript\n\nCompatibility (Modern Syntax):\n\nDart Sass  \n✓\n\nLibSass  \n✗\n\nRuby Sass  \nsince 4.0.0 (unreleased)\n\n[▶](javascript:;)\n\nLibSass and Ruby Sass currently use an older syntax for parsing interpolation in SassScript. For most practical purposes it works the same, but it can behave strangely around [operators](operators). See [this document](https://github.com/sass/language/blob/master/accepted/free-interpolation.md#old-interpolation-rules) for details.\n\nInterpolation can be used in SassScript to inject SassScript into [unquoted strings](values/strings#unquoted). This is particularly useful when dynamically generating names (for example for animations), or when using [slash-separated values](operators/numeric#slash-separated-values). Note that interpolation in SassScript always returns an unquoted string.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n@mixin inline-animation($duration) {\n  $name: inline-#{unique-id()};\n\n  @keyframes #{$name} {\n    @content;\n  }\n\n  animation-name: $name;\n  animation-duration: $duration;\n  animation-iteration-count: infinite;\n}\n\n.pulse {\n  @include inline-animation(2s) {\n    from { background-color: yellow }\n    to { background-color: red }\n  }\n}\n```\n\n``` scss\n@mixin inline-animation($duration)\n  $name: inline-#{unique-id()}\n\n  @keyframes #{$name}\n    @content\n\n\n  animation-name: $name\n  animation-duration: $duration\n  animation-iteration-count: infinite\n\n\n.pulse\n  @include inline-animation(2s)\n    from\n      background-color: yellow\n    to\n      background-color: red\n```\n\n``` css\n.pulse {\n  animation-name: inline-u7rrmuo7b;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n@keyframes inline-u7rrmuo7b {\n  from {\n    background-color: yellow;\n  }\n  to {\n    background-color: red;\n  }\n}\n```\n\n### 💡 Fun fact:\n\nInterpolation is useful for injecting values into strings, but other than that it’s rarely necessary in SassScript expressions. You definitely *don’t* need it to just use a variable in a property value. Instead of writing `color: #{$accent}`, you can just write `color: $accent`!\n\n### ⚠️ Heads up!\n\nIt’s almost always a bad idea to use interpolation with numbers. Interpolation returns unquoted strings that can’t be used for any further math, and it avoids Sass’s built-in safeguards to ensure that units are used correctly.\n\nSass has powerful [unit arithmetic](values/numbers#units) that you can use instead. For example, instead of writing `#{$width}px`, write `$width * 1px`—or better yet, declare the `$width` variable in terms of `px` to begin with. That way if `$width` already has units, you’ll get a nice error message instead of compiling bogus CSS.\n\n## Quoted Strings\n\nIn most cases, interpolation injects the exact same text that would be used if the expression were used as a [property value](style-rules/declarations). But there is one exception: the quotation marks around quoted strings are removed (even if those quoted strings are in lists). This makes it possible to write quoted strings that contain syntax that’s not allowed in SassScript (like selectors) and interpolate them into style rules.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n.example {\n  unquoted: #{\"string\"};\n}\n```\n\n``` scss\n.example\n  unquoted: #{\"string\"}\n```\n\n``` css\n.example {\n  unquoted: string;\n}\n```\n\n### ⚠️ Heads up!\n\nWhile it’s tempting to use this feature to convert quoted strings to unquoted strings, it’s a lot clearer to use the [`string.unquote()` function](modules/string#unquote). Instead of `#{$string}`, write `string.unquote($string)`!\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/interpolation](https://sass-lang.com/documentation/interpolation)"
- name: lighten
  id: modules/color#lighten
  summary: Makes $color lighter
  belongs_to: sass:color
  description: |-
    ``` scss
    lighten($color, $amount) //=> color
    ```

    Makes `$color` lighter.

    The `$amount` must be a number between `0%` and `100%` (inclusive). Increases the HSL lightness of `$color` by that amount.

    ### ⚠️ Heads up!

    The `lighten()` function increases lightness by a fixed amount, which is often not the desired effect. To make a color a certain percentage lighter than it was before, use [`scale()`](#scale) instead.

    Because `lighten()` is usually not the best way to make a color lighter, it’s not included directly in the new module system. However, if you have to preserve the existing behavior, `lighten($color, $amount)` can be written [`adjust($color, $lightness: $amount)`](#adjust).

    - [SCSS](#example-18-scss)
    - [Sass](#example-18-sass)

    ``` scss
    // #e1d7d2 has lightness 85%, so when lighten() adds 30% it just returns white.
    @debug lighten(#e1d7d2, 30%); // white

    // scale() instead makes it 30% lighter than it was originally.
    @debug color.scale(#e1d7d2, $lightness: 30%); // #eae3e0
    ```

    ``` scss
    // #e1d7d2 has lightness 85%, so when lighten() adds 30% it just returns white.
    @debug lighten(#e1d7d2, 30%)  // white

    // scale() instead makes it 30% lighter than it was originally.
    @debug color.scale(#e1d7d2, $lightness: 30%)  // #eae3e0
    ```

    - [SCSS](#example-19-scss)
    - [Sass](#example-19-sass)

    ``` scss
    // Lightness 46% becomes 66%.
    @debug lighten(#6b717f, 20%); // #a1a5af

    // Lightness 20% becomes 80%.
    @debug lighten(#036, 60%); // #99ccff

    // Lightness 85% becomes 100%.
    @debug lighten(#e1d7d2, 30%); // white
    ```

    ``` scss
    // Lightness 46% becomes 66%.
    @debug lighten(#6b717f, 20%)  // #a1a5af

    // Lightness 20% becomes 80%.
    @debug lighten(#036, 60%)  // #99ccff

    // Lightness 85% becomes 100%.
    @debug lighten(#e1d7d2, 30%)  // white
    ```
- name: list.append
  id: modules/list#list.append
  summary: Returns a copy of $list with $val added to the end
  belongs_to: sass:list
  description: |-
    ``` scss
    list.append($list, $val, $separator: auto)
    append($list, $val, $separator: auto) //=> list
    ```

    Returns a copy of `$list` with `$val` added to the end.

    If `$separator` is `comma`, `space`, or `slash`, the returned list is comma-separated, space-separated, or slash-separated, respectively. If it’s `auto` (the default), the returned list will use the same separator as `$list` (or `space` if `$list` doesn’t have a separator). Other values aren’t allowed.

    Note that unlike [`list.join()`](#join), if `$val` is a list it’s nested within the returned list rather than having all its elements added to the returned list.

    - [SCSS](#example-1-scss)
    - [Sass](#example-1-sass)

    ``` scss
    @debug list.append(10px 20px, 30px); // 10px 20px 30px
    @debug list.append((blue, red), green); // blue, red, green
    @debug list.append(10px 20px, 30px 40px); // 10px 20px (30px 40px)
    @debug list.append(10px, 20px, $separator: comma); // 10px, 20px
    @debug list.append((blue, red), green, $separator: space); // blue red green
    ```

    ``` scss
    @debug list.append(10px 20px, 30px)  // 10px 20px 30px
    @debug list.append((blue, red), green)  // blue, red, green
    @debug list.append(10px 20px, 30px 40px)  // 10px 20px (30px 40px)
    @debug list.append(10px, 20px, $separator: comma)  // 10px, 20px
    @debug list.append((blue, red), green, $separator: space)  // blue red green
    ```
- name: list.index
  id: modules/list#list.index
  summary: Returns the index of $value in $list
  belongs_to: sass:list
  description: |-
    ``` scss
    list.index($list, $value)
    index($list, $value) //=> number | null
    ```

    Returns the [index](../values/lists#indexes) of `$value` in `$list`.

    If `$value` doesn’t appear in `$list`, this returns [`null`](../values/null). If `$value` appears multiple times in `$list`, this returns the index of its first appearance.

    - [SCSS](#example-2-scss)
    - [Sass](#example-2-sass)

    ``` scss
    @debug list.index(1px solid red, 1px); // 1
    @debug list.index(1px solid red, solid); // 2
    @debug list.index(1px solid red, dashed); // null
    ```

    ``` scss
    @debug list.index(1px solid red, 1px)  // 1
    @debug list.index(1px solid red, solid)  // 2
    @debug list.index(1px solid red, dashed)  // null
    ```
- name: list.is-bracketed
  id: modules/list#list.is-bracketed
  summary: Returns whether $list has square brackets
  belongs_to: sass:list
  description: |-
    ``` scss
    list.is-bracketed($list)
    is-bracketed($list) //=> boolean
    ```

    Returns whether `$list` has square brackets.

    - [SCSS](#example-3-scss)
    - [Sass](#example-3-sass)

    ``` scss
    @debug list.is-bracketed(1px 2px 3px); // false
    @debug list.is-bracketed([1px, 2px, 3px]); // true
    ```

    ``` scss
    @debug list.is-bracketed(1px 2px 3px)  // false
    @debug list.is-bracketed([1px, 2px, 3px])  // true
    ```
- name: list.join
  id: modules/list#list.join
  summary: Returns a new list containing the elements of $list1 followed by the elements of $list2
  belongs_to: sass:list
  description: |-
    ``` scss
    list.join($list1, $list2, $separator: auto, $bracketed: auto)
    join($list1, $list2, $separator: auto, $bracketed: auto) //=> list
    ```

    Returns a new list containing the elements of `$list1` followed by the elements of `$list2`.

    ### ⚠️ Heads up!

    Because individual values count as single-element lists, it’s possible to use `list.join()` to add a value to the end of a list. However, *this is not recommended*, since if that value is a list it will be concatenated, which is probably not what you’re expecting.

    Use [`list.append()`](#append) instead to add a single value to a list. Only use `list.join()` to combine two lists together into one.

    If `$separator` is `comma`, `space`, or `slash`, the returned list is comma-separated, space-separated, or slash-separated, respectively. If it’s `auto` (the default), the returned list will use the same separator as `$list1` if it has a separator, or else `$list2` if it has a separator, or else `space`. Other values aren’t allowed.

    If `$bracketed` is `auto` (the default), the returned list will be bracketed if `$list1` is. Otherwise, the returned list will have square brackets if `$bracketed` is [truthy](../values/booleans#truthiness-and-falsiness) and no brackets if `$bracketed` is falsey.

    - [SCSS](#example-4-scss)
    - [Sass](#example-4-sass)

    ``` scss
    @debug list.join(10px 20px, 30px 40px); // 10px 20px 30px 40px
    @debug list.join((blue, red), (#abc, #def)); // blue, red, #abc, #def
    @debug list.join(10px, 20px); // 10px 20px
    @debug list.join(10px, 20px, $separator: comma); // 10px, 20px
    @debug list.join((blue, red), (#abc, #def), $separator: space); // blue red #abc #def
    @debug list.join([10px], 20px); // [10px 20px]
    @debug list.join(10px, 20px, $bracketed: true); // [10px 20px]
    ```

    ``` scss
    @debug list.join(10px 20px, 30px 40px)  // 10px 20px 30px 40px
    @debug list.join((blue, red), (#abc, #def))  // blue, red, #abc, #def
    @debug list.join(10px, 20px)  // 10px 20px
    @debug list.join(10px, 20px, comma)  // 10px, 20px
    @debug list.join((blue, red), (#abc, #def), space)  // blue red #abc #def
    @debug list.join([10px], 20px)  // [10px 20px]
    @debug list.join(10px, 20px, $bracketed: true)  // [10px 20px]
    ```
- name: list.length
  id: modules/list#list.length
  summary: Returns the length of $list
  belongs_to: sass:list
  description: |-
    ``` scss
    list.length($list)
    length($list) //=> number
    ```

    Returns the length of `$list`.

    This can also return the number of pairs in a map.

    - [SCSS](#example-5-scss)
    - [Sass](#example-5-sass)

    ``` scss
    @debug list.length(10px); // 1
    @debug list.length(10px 20px 30px); // 3
    @debug list.length((width: 10px, height: 20px)); // 2
    ```

    ``` scss
    @debug list.length(10px)  // 1
    @debug list.length(10px 20px 30px)  // 3
    @debug list.length((width: 10px, height: 20px))  // 2
    ```
- name: list.nth
  id: modules/list#list.nth
  summary: Returns the element of $list at index $n
  belongs_to: sass:list
  description: |-
    ``` scss
    list.nth($list, $n)
    nth($list, $n)
    ```

    Returns the element of `$list` at [index](../values/lists#indexes) `$n`.

    If `$n` is negative, it counts from the end of `$list`. Throws an error if there is no element at index `$n`.

    - [SCSS](#example-7-scss)
    - [Sass](#example-7-sass)

    ``` scss
    @debug list.nth(10px 12px 16px, 2); // 12px
    @debug list.nth([line1, line2, line3], -1); // line3
    ```

    ``` scss
    @debug list.nth(10px 12px 16px, 2)  // 12px
    @debug list.nth([line1, line2, line3], -1)  // line3
    ```
- name: list.separator
  id: modules/list#list.separator
  summary: Returns the name of the separator used by $list, either space, comma, or slash
  belongs_to: sass:list
  description: |-
    ``` scss
    list.separator($list)
    list-separator($list) //=> unquoted string
    ```

    Returns the name of the separator used by `$list`, either `space`, `comma`, or `slash`.

    If `$list` doesn’t have a separator, returns `space`.

    - [SCSS](#example-6-scss)
    - [Sass](#example-6-sass)

    ``` scss
    @debug list.separator(1px 2px 3px); // space
    @debug list.separator(1px, 2px, 3px); // comma
    @debug list.separator('Helvetica'); // space
    @debug list.separator(()); // space
    ```

    ``` scss
    @debug list.separator(1px 2px 3px)  // space
    @debug list.separator(1px, 2px, 3px)  // comma
    @debug list.separator('Helvetica')  // space
    @debug list.separator(())  // space
    ```
- name: list.set-nth
  id: modules/list#list.set-nth
  summary: Returns a copy of $list with the element at index $n replaced with $value
  belongs_to: sass:list
  description: |-
    ``` scss
    list.set-nth($list, $n, $value)
    set-nth($list, $n, $value) //=> list
    ```

    Returns a copy of `$list` with the element at [index](../values/lists#indexes) `$n` replaced with `$value`.

    If `$n` is negative, it counts from the end of `$list`. Throws an error if there is no existing element at index `$n`.

    - [SCSS](#example-8-scss)
    - [Sass](#example-8-sass)

    ``` scss
    @debug list.set-nth(10px 20px 30px, 1, 2em); // 2em 20px 30px
    @debug list.set-nth(10px 20px 30px, -1, 8em); // 10px, 20px, 8em
    @debug list.set-nth((Helvetica, Arial, sans-serif), 3, Roboto); // Helvetica, Arial, Roboto
    ```

    ``` scss
    @debug list.set-nth(10px 20px 30px, 1, 2em); // 2em 20px 30px
    @debug list.set-nth(10px 20px 30px, -1, 8em); // 10px, 20px, 8em
    @debug list.set-nth((Helvetica, Arial, sans-serif), 3, Roboto); // Helvetica, Arial, Roboto
    ```
- name: list.slash
  id: modules/list#list.slash
  summary: Returns a slash-separated list that contains $elements
  belongs_to: sass:list
  description: |-
    ``` scss
    list.slash($elements...) //=> list
    ```

    Returns a slash-separated list that contains `$elements`.

    ### ⚠️ Heads up!

    This function is a temporary solution for creating slash-separated lists. Eventually, they’ll be written literally with slashes, as in `1px / 2px / solid`, but for the time being [slashes are used for division](https://sass-lang.com/documentation/breaking-changes/slash-div) so Sass can’t use them for new syntax until the old syntax is removed.

    - [SCSS](#example-9-scss)
    - [Sass](#example-9-sass)

    ``` scss
    @debug list.slash(1px, 50px, 100px); // 1px / 50px / 100px
    ```

    ``` scss
    @debug list.slash(1px, 50px, 100px)  // 1px / 50px / 100px
    ```
- name: list.zip
  id: modules/list#list.zip
  summary: Combines every list in $lists into a single list of sub-lists
  belongs_to: sass:list
  description: "``` scss\nlist.zip($lists...)\nzip($lists...) //=> list\n```\n\nCombines every list in `$lists` into a single list of sub-lists.\n\nEach element in the returned list contains all the elements at that position in `$lists`. The returned list is as long as the shortest list in `$lists`.\n\nThe returned list is always comma-separated and the sub-lists are always space-separated.\n\n- [SCSS](#example-10-scss)\n- [Sass](#example-10-sass)\n\n``` scss\n@debug list.zip(10px 50px 100px, short mid long); // 10px short, 50px mid, 100px long\n@debug list.zip(10px 50px 100px, short mid); // 10px short, 50px mid\n```\n\n``` scss\n@debug list.zip(10px 50px 100px, short mid long)  // 10px short, 50px mid, 100px long\n@debug list.zip(10px 50px 100px, short mid)  // 10px short, 50px mid\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/list](https://sass-lang.com/documentation/modules/list)"
- name: Lists
  id: values/lists
  summary: Older implementations of LibSass and Ruby Sass didn’t support lists with square brackets
  description: "# Lists\n\n### Page Sections\n\n- [Slash-Separated Lists](#slash-separated-lists)\n- [Using Lists](#using-lists)\n  - [Overview](#using-lists)\n  - [Indexes](#indexes)\n  - [Access an Element](#access-an-element)\n  - [Do Something for Every Element](#do-something-for-every-element)\n  - [Add to a List](#add-to-a-list)\n  - [Find an Element in a List](#find-an-element-in-a-list)\n- [Immutability](#immutability)\n- [Argument Lists](#argument-lists)\n\nCompatibility (Square Brackets):\n\nDart Sass  \n✓\n\nLibSass  \nsince 3.5.0\n\nRuby Sass  \nsince 3.5.0\n\n[▶](javascript:;)\n\nOlder implementations of LibSass and Ruby Sass didn’t support lists with square brackets.\n\nLists contain a sequence of other values. In Sass, elements in lists can be separated by commas (`Helvetica, Arial, sans-serif`), spaces (`10px 15px 0 0`), or [slashes](#slash-separated-lists) as long as it’s consistent within the list. Unlike most other languages, lists in Sass don’t require special brackets; any [expressions](../syntax/structure#expressions) separated with spaces or commas count as a list. However, you’re allowed to write lists with square brackets (`[line1 line2]`), which is useful when using [`grid-template-columns`](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns).\n\nSass lists can contain one or even zero elements. A single-element list can be written either `(<expression>,)` or `[<expression>]`, and a zero-element list can be written either `()` or `[]`. Also, all [list functions](../modules/list) will treat individual values that aren’t in lists as though they’re lists containing that value, which means you rarely need to explicitly create single-element lists.\n\n### ⚠️ Heads up!\n\nEmpty lists without brackets aren’t valid CSS, so Sass won’t let you use one in a property value.\n\n## Slash-Separated Lists\n\nLists in Sass can be separated by slashes, to represent values like the `font: 12px/30px` shorthand for setting `font-size` and `line-height` or the `hsl(80 100% 50% / 0.5)` syntax for creating a color with a given opacity value. However, **slash-separated lists can’t currently be written literally.** Sass historically used the `/` character to indicate division, so while existing stylesheets transition to using [`math.div()`](../modules/math#div) slash-separated lists can only be written using [`list.slash()`](../modules/list#slash).\n\nFor more details, see [Breaking Change: Slash as Division](https://sass-lang.com/documentation/breaking-changes/slash-div).\n\n## Using Lists\n\nSass provides a handful of [functions](../modules/list) that make it possible to use lists to write powerful style libraries, or to make your app’s stylesheet cleaner and more maintainable.\n\n### Indexes\n\nMany of these functions take or return numbers, called *indexes*, that refer to the elements in a list. The index 1 indicates the first element of the list. Note that this is different than many programming languages where indexes start at 0! Sass also makes it easy to refer to the end of a list. The index -1 refers to the last element in a list, -2 refers to the second-to-last, and so on.\n\n### Access an Element\n\nLists aren’t much use if you can’t get values out of them. You can use the [`list.nth($list, $n)` function](../modules/list#nth) to get the element at a given index in a list. The first argument is the list itself, and the second is the index of the value you want to get out.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug list.nth(10px 12px 16px, 2); // 12px\n@debug list.nth([line1, line2, line3], -1); // line3\n```\n\n``` scss\n@debug list.nth(10px 12px 16px, 2)  // 12px\n@debug list.nth([line1, line2, line3], -1)  // line3\n```\n\n### Do Something for Every Element\n\nThis doesn’t actually use a function, but it’s still one of the most common ways to use lists. The [`@each` rule](../at-rules/control/each) evaluates a block of styles for each element in a list, and assigns that element to a variable.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n$sizes: 40px, 50px, 80px;\n\n@each $size in $sizes {\n  .icon-#{$size} {\n    font-size: $size;\n    height: $size;\n    width: $size;\n  }\n}\n```\n\n``` scss\n$sizes: 40px, 50px, 80px\n\n@each $size in $sizes\n  .icon-#{$size}\n    font-size: $size\n    height: $size\n    width: $size\n```\n\n``` css\n.icon-40px {\n  font-size: 40px;\n  height: 40px;\n  width: 40px;\n}\n\n.icon-50px {\n  font-size: 50px;\n  height: 50px;\n  width: 50px;\n}\n\n.icon-80px {\n  font-size: 80px;\n  height: 80px;\n  width: 80px;\n}\n```\n\n### Add to a List\n\nIt’s also useful to add elements to a list. The [`list.append($list, $val)` function](../modules/list#append) takes a list and a value, and returns a copy of the list with the value added to the end. Note that because Sass lists are [immutable](#immutability), it doesn’t modify the original list.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@debug append(10px 12px 16px, 25px); // 10px 12px 16px 25px\n@debug append([col1-line1], col1-line2); // [col1-line1, col1-line2]\n```\n\n``` scss\n@debug append(10px 12px 16px, 25px)  // 10px 12px 16px 25px\n@debug append([col1-line1], col1-line2)  // [col1-line1, col1-line2]\n```\n\n### Find an Element in a List\n\nIf you need to check if an element is in a list or figure out what index it’s at, use the [`list.index($list, $value)` function](../modules/list#index). This takes a list and a value to locate in that list, and returns the index of that value.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n@debug list.index(1px solid red, 1px); // 1\n@debug list.index(1px solid red, solid); // 2\n@debug list.index(1px solid red, dashed); // null\n```\n\n``` scss\n@debug list.index(1px solid red, 1px)  // 1\n@debug list.index(1px solid red, solid)  // 2\n@debug list.index(1px solid red, dashed)  // null\n```\n\nIf the value isn’t in the list at all, `list.index()` returns [`null`](null). Because `null` is [falsey](../at-rules/control/if#truthiness-and-falsiness), you can use `list.index()` with [`@if`](../at-rules/control/if) or [`if()`](../modules#if) to check whether a list does or doesn’t contain a given value.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n@use \"sass:list\";\n\n$valid-sides: top, bottom, left, right;\n\n@mixin attach($side) {\n  @if not list.index($valid-sides, $side) {\n    @error \"#{$side} is not a valid side. Expected one of #{$valid-sides}.\";\n  }\n\n  // ...\n}\n```\n\n``` scss\n@use \"sass:list\"\n\n$valid-sides: top, bottom, left, right\n\n@mixin attach($side)\n  @if not list.index($valid-sides, $side)\n    @error \"#{$side} is not a valid side. Expected one of #{$valid-sides}.\"\n\n\n  // ...\n```\n\n## Immutability\n\nLists in Sass are *immutable*, which means that the contents of a list value never changes. Sass’s list functions all return new lists rather than modifying the originals. Immutability helps avoid lots of sneaky bugs that can creep in when the same list is shared across different parts of the stylesheet.\n\nYou can still update your state over time by assigning new lists to the same variable, though. This is often used in functions and mixins to collect a bunch of values into one list.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@use \"sass:list\";\n@use \"sass:map\";\n\n$prefixes-by-browser: (\"firefox\": moz, \"safari\": webkit, \"ie\": ms);\n\n@function prefixes-for-browsers($browsers) {\n  $prefixes: ();\n  @each $browser in $browsers {\n    $prefixes: list.append($prefixes, map.get($prefixes-by-browser, $browser));\n  }\n  @return $prefixes;\n}\n\n@debug prefixes-for-browsers(\"firefox\" \"ie\"); // moz ms\n```\n\n``` scss\n@use \"sass:list\"\n@use \"sass:map\"\n\n$prefixes-by-browser: (\"firefox\": moz, \"safari\": webkit, \"ie\": ms)\n\n@function prefixes-for-browsers($browsers)\n  $prefixes: ()\n  @each $browser in $browsers\n    $prefixes: list.append($prefixes, map.get($prefixes-by-browser, $browser))\n\n  @return $prefixes\n\n\n@debug prefixes-for-browsers(\"firefox\" \"ie\")  // moz ms\n```\n\n## Argument Lists\n\nWhen you declare a mixin or function that takes [arbitrary arguments](../at-rules/mixin#taking-arbitrary-arguments), the value you get is a special list known as an *argument list*. It acts just like a list that contains all the arguments passed to the mixin or function, with one extra feature: if the user passed keyword arguments, they can be accessed as a map by passing the argument list to the [`meta.keywords()` function](../modules/meta#keywords).\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n- [CSS](#example-7-css)\n\n``` scss\n@use \"sass:meta\";\n\n@mixin syntax-colors($args...) {\n  @debug meta.keywords($args);\n  // (string: #080, comment: #800, variable: #60b)\n\n  @each $name, $color in meta.keywords($args) {\n    pre span.stx-#{$name} {\n      color: $color;\n    }\n  }\n}\n\n@include syntax-colors(\n  $string: #080,\n  $comment: #800,\n  $variable: #60b,\n)\n```\n\n``` scss\n@use \"sass:meta\"\n\n@mixin syntax-colors($args...)\n  @debug meta.keywords($args)\n  // (string: #080, comment: #800, variable: #60b)\n\n  @each $name, $color in meta.keywords($args)\n    pre span.stx-#{$name}\n      color: $color\n\n\n\n\n@include syntax-colors($string: #080, $comment: #800, $variable: #60b)\n```\n\n``` css\npre span.stx-string {\n  color: #080;\n}\n\npre span.stx-comment {\n  color: #800;\n}\n\npre span.stx-variable {\n  color: #60b;\n}\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/values/lists](https://sass-lang.com/documentation/values/lists)"
- name: map.deep-merge
  id: modules/map#map.deep-merge
  summary: Identical to map.merge(), except that nested map values are also recursively merged
  belongs_to: sass:map
  description: |-
    ``` scss
    map.deep-merge($map1, $map2) //=> map
    ```

    Compatibility:

    Dart Sass

    since 1.27.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Identical to [`map.merge()`](#merge), except that nested map values are *also* recursively merged.

    - [SCSS](#example-2-scss)
    - [Sass](#example-2-sass)

    ``` scss
    $helvetica-light: (
      "weights": (
        "lightest": 100,
        "light": 300
      )
    );
    $helvetica-heavy: (
      "weights": (
        "medium": 500,
        "bold": 700
      )
    );

    @debug map.deep-merge($helvetica-light, $helvetica-heavy);
    // (
    //   "weights": (
    //     "lightest": 100,
    //     "light": 300,
    //     "medium": 500,
    //     "bold": 700
    //   )
    // )
    @debug map.merge($helvetica-light, $helvetica-heavy);
    // (
    //   "weights": (
    //     "medium: 500,
    //     "bold": 700
    //   )
    // )
    ```

    ``` scss
    $helvetica-light: ("weights": ("lightest": 100, "light": 300))
    $helvetica-heavy: ("weights": ("medium": 500, "bold": 700))

    @debug map.deep-merge($helvetica-light, $helvetica-heavy)
    // (
    //   "weights": (
    //     "lightest": 100,
    //     "light": 300,
    //     "medium": 500,
    //     "bold": 700
    //   )
    // )
    @debug map.merge($helvetica-light, $helvetica-heavy);
    // (
    //   "weights": (
    //     "medium: 500,
    //     "bold": 700
    //   )
    // )
    ```
- name: map.deep-remove
  id: modules/map#map.deep-remove
  summary: If $keys is empty, returns a copy of $map without a value associated with $key
  belongs_to: sass:map
  description: |-
    ``` scss
    map.deep-remove($map, $key, $keys...) //=> map
    ```

    Compatibility:

    Dart Sass

    since 1.27.0

    LibSass

    ✗

    Ruby Sass

    ✗

    If `$keys` is empty, returns a copy of `$map` without a value associated with `$key`.

    - [SCSS](#example-3-scss)
    - [Sass](#example-3-sass)

    ``` scss
    $font-weights: ("regular": 400, "medium": 500, "bold": 700);

    @debug map.deep-remove($font-weights, "regular");
    // ("medium": 500, "bold": 700)
    ```

    ``` scss
    $font-weights: ("regular": 400, "medium": 500, "bold": 700)

    @debug map.deep-remove($font-weights, "regular")
    // ("medium": 500, "bold": 700)
    ```

    ------------------------------------------------------------------------

    If `$keys` is not empty, follows the set of keys including `$key` and excluding the last key in `$keys`, from left to right, to find the nested map targeted for updating.

    Returns a copy of `$map` where the targeted map does not have a value associated with the last key in `$keys`.

    - [SCSS](#example-4-scss)
    - [Sass](#example-4-sass)

    ``` scss
    $fonts: (
      "Helvetica": (
        "weights": (
          "regular": 400,
          "medium": 500,
          "bold": 700
        )
      )
    );

    @debug map.deep-remove($fonts, "Helvetica", "weights", "regular");
    // (
    //   "Helvetica": (
    //     "weights: (
    //       "medium": 500,
    //       "bold": 700
    //     )
    //   )
    // )
    ```

    ``` scss
    $fonts: ("Helvetica": ("weights": ("regular": 400, "medium": 500, "bold": 700)))

    @debug map.deep-remove($fonts, "Helvetica", "weights", "regular")
    // (
    //   "Helvetica": (
    //     "weights: (
    //       "medium": 500,
    //       "bold": 700
    //     )
    //   )
    // )
    ```
- name: map.get
  id: modules/map#map.get
  summary: If $keys is empty, returns the value in $map associated with $key
  belongs_to: sass:map
  description: |-
    ``` scss
    map.get($map, $key, $keys...)
    map-get($map, $key, $keys...)
    ```

    If `$keys` is empty, returns the value in `$map` associated with `$key`.

    If `$map` doesn’t have a value associated with `$key`, returns [`null`](../values/null).

    - [SCSS](#example-5-scss)
    - [Sass](#example-5-sass)

    ``` scss
    $font-weights: ("regular": 400, "medium": 500, "bold": 700);

    @debug map.get($font-weights, "medium"); // 500
    @debug map.get($font-weights, "extra-bold"); // null
    ```

    ``` scss
    $font-weights: ("regular": 400, "medium": 500, "bold": 700)

    @debug map.get($font-weights, "medium")  // 500
    @debug map.get($font-weights, "extra-bold")  // null
    ```

    ------------------------------------------------------------------------

    Compatibility:

    Dart Sass

    since 1.27.0

    LibSass

    ✗

    Ruby Sass

    ✗

    [▶](javascript:;)

    Only Dart Sass supports calling `map.get()` with more than two arguments.

    If `$keys` is not empty, follows the set of keys including `$key` and excluding the last key in `$keys`, from left to right, to find the nested map targeted for searching.

    Returns the value in the targeted map associated with the last key in `$keys`.

    Returns [`null`](../values/null) if the map does not have a value associated with the key, or if any key in `$keys` is missing from a map or references a value that is not a map.

    - [SCSS](#example-6-scss)
    - [Sass](#example-6-sass)

    ``` scss
    $fonts: (
      "Helvetica": (
        "weights": (
          "regular": 400,
          "medium": 500,
          "bold": 700
        )
      )
    );

    @debug map.get($fonts, "Helvetica", "weights", "regular"); // 400
    @debug map.get($fonts, "Helvetica", "colors"); // null
    ```

    ``` scss
    $fonts: ("Helvetica": ("weights": ("regular": 400, "medium": 500, "bold": 700)))

    @debug map.get($fonts, "Helvetica", "weights", "regular") // 400
    @debug map.get($fonts, "Helvetica", "colors") // null
    ```
- name: map.has-key
  id: modules/map#map.has-key
  summary: If $keys is empty, returns whether $map contains a value associated with $key
  belongs_to: sass:map
  description: |-
    ``` scss
    map.has-key($map, $key, $keys...)
    map-has-key($map, $key, $keys...) //=> boolean
    ```

    If `$keys` is empty, returns whether `$map` contains a value associated with `$key`.

    - [SCSS](#example-7-scss)
    - [Sass](#example-7-sass)

    ``` scss
    $font-weights: ("regular": 400, "medium": 500, "bold": 700);

    @debug map.has-key($font-weights, "regular"); // true
    @debug map.has-key($font-weights, "bolder"); // false
    ```

    ``` scss
    $font-weights: ("regular": 400, "medium": 500, "bold": 700)

    @debug map.has-key($font-weights, "regular") // true
    @debug map.has-key($font-weights, "bolder") // false
    ```

    ------------------------------------------------------------------------

    Compatibility:

    Dart Sass

    since 1.27.0

    LibSass

    ✗

    Ruby Sass

    ✗

    [▶](javascript:;)

    Only Dart Sass supports calling `map.has-key()` with more than two arguments.

    If `$keys` is not empty, follows the set of keys including `$key` and excluding the last key in `$keys`, from left to right, to find the nested map targeted for searching.

    Returns true if the targeted map contains a value associated with the last key in `$keys`.

    Returns false if it does not, or if any key in `$keys` is missing from a map or references a value that is not a map.

    - [SCSS](#example-8-scss)
    - [Sass](#example-8-sass)

    ``` scss
    $fonts: (
      "Helvetica": (
        "weights": (
          "regular": 400,
          "medium": 500,
          "bold": 700
        )
      )
    );

    @debug map.has-key($fonts, "Helvetica", "weights", "regular"); // true
    @debug map.has-key($fonts, "Helvetica", "colors"); // false
    ```

    ``` scss
    $fonts: ("Helvetica": ("weights": ("regular": 400, "medium": 500, "bold": 700)))

    @debug map.has-key($fonts, "Helvetica", "weights", "regular") // true
    @debug map.has-key($fonts, "Helvetica", "colors") // false
    ```
- name: map.keys
  id: modules/map#map.keys
  summary: Returns a comma-separated list of all the keys in $map
  belongs_to: sass:map
  description: |-
    ``` scss
    map.keys($map)
    map-keys($map) //=> list
    ```

    Returns a comma-separated list of all the keys in `$map`.

    - [SCSS](#example-9-scss)
    - [Sass](#example-9-sass)

    ``` scss
    $font-weights: ("regular": 400, "medium": 500, "bold": 700);

    @debug map.keys($font-weights); // "regular", "medium", "bold"
    ```

    ``` scss
    $font-weights: ("regular": 400, "medium": 500, "bold": 700)

    @debug map.keys($font-weights)  // "regular", "medium", "bold"
    ```
- name: map.merge
  id: modules/map#map.merge
  summary: In practice, the actual arguments to map.merge($map1, $keys..., $map2) are passed as map.merge($map1, $args...)
  belongs_to: sass:map
  description: |-
    ``` scss
    map.merge($map1, $map2)
    map-merge($map1, $map2)
    map.merge($map1, $keys..., $map2)
    map-merge($map1, $keys..., $map2) //=> map
    ```

    ### ⚠️ Heads up!

    In practice, the actual arguments to `map.merge($map1, $keys..., $map2)` are passed as `map.merge($map1, $args...)`. They are described here as `$map1, $keys..., $map2` for explanation purposes only.

    If no `$keys` are passed, returns a new map with all the keys and values from both `$map1` and `$map2`.

    If both `$map1` and `$map2` have the same key, `$map2`‘s value takes precedence.

    All keys in the returned map that also appear in `$map1` have the same order as in `$map1`. New keys from `$map2` appear at the end of the map.

    - [SCSS](#example-10-scss)
    - [Sass](#example-10-sass)

    ``` scss
    $light-weights: ("lightest": 100, "light": 300);
    $heavy-weights: ("medium": 500, "bold": 700);

    @debug map.merge($light-weights, $heavy-weights);
    // ("lightest": 100, "light": 300, "medium": 500, "bold": 700)
    ```

    ``` scss
    $light-weights: ("lightest": 100, "light": 300)
    $heavy-weights: ("medium": 500, "bold": 700)

    @debug map.merge($light-weights, $heavy-weights)
    // ("lightest": 100, "light": 300, "medium": 500, "bold": 700)
    ```

    ------------------------------------------------------------------------

    Compatibility:

    Dart Sass

    since 1.27.0

    LibSass

    ✗

    Ruby Sass

    ✗

    [▶](javascript:;)

    Only Dart Sass supports calling `map.merge()` with more than two arguments.

    If `$keys` is not empty, follows the `$keys` to find the nested map targeted for merging. If any key in `$keys` is missing from a map or references a value that is not a map, sets the value at that key to an empty map.

    Returns a copy of `$map1` where the targeted map is replaced by a new map that contains all the keys and values from both the targeted map and `$map2`.

    - [SCSS](#example-11-scss)
    - [Sass](#example-11-sass)

    ``` scss
    $fonts: (
      "Helvetica": (
        "weights": (
          "lightest": 100,
          "light": 300
        )
      )
    );
    $heavy-weights: ("medium": 500, "bold": 700);

    @debug map.merge($fonts, "Helvetica", "weights", $heavy-weights);
    // (
    //   "Helvetica": (
    //     "weights": (
    //       "lightest": 100,
    //       "light": 300,
    //       "medium": 500,
    //       "bold": 700
    //     )
    //   )
    // )
    ```

    ``` scss
    $fonts: ("Helvetica": ("weights": ("lightest": 100, "light": 300)))
    $heavy-weights: ("medium": 500, "bold": 700)

    @debug map.merge($fonts, "Helvetica", "weights", $heavy-weights)
    // (
    //   "Helvetica": (
    //     "weights": (
    //       "lightest": 100,
    //       "light": 300,
    //       "medium": 500,
    //       "bold": 700
    //     )
    //   )
    // )
    ```
- name: map.remove
  id: modules/map#map.remove
  summary: Returns a copy of $map without any values associated with $keys
  belongs_to: sass:map
  description: |-
    ``` scss
    map.remove($map, $keys...)
    map-remove($map, $keys...) //=> map
    ```

    Returns a copy of `$map` without any values associated with `$keys`.

    If a key in `$keys` doesn’t have an associated value in `$map`, it’s ignored.

    - [SCSS](#example-12-scss)
    - [Sass](#example-12-sass)

    ``` scss
    $font-weights: ("regular": 400, "medium": 500, "bold": 700);

    @debug map.remove($font-weights, "regular"); // ("medium": 500, "bold": 700)
    @debug map.remove($font-weights, "regular", "bold"); // ("medium": 500)
    @debug map.remove($font-weights, "bolder");
    // ("regular": 400, "medium": 500, "bold": 700)
    ```

    ``` scss
    $font-weights: ("regular": 400, "medium": 500, "bold": 700)

    @debug map.remove($font-weights, "regular")  // ("medium": 500, "bold": 700)
    @debug map.remove($font-weights, "regular", "bold")  // ("medium": 500)
    @debug map.remove($font-weights, "bolder")
    // ("regular": 400, "medium": 500, "bold": 700)
    ```
- name: map.set
  id: modules/map#map.set
  summary: In practice, the actual arguments to map.set($map, $keys..., $key, $value) are passed as map.set($map, $args...)
  belongs_to: sass:map
  description: |-
    ``` scss
    map.set($map, $key, $value)
    map.set($map, $keys..., $key, $value) //=> map
    ```

    ### ⚠️ Heads up!

    In practice, the actual arguments to `map.set($map, $keys..., $key, $value)` are passed as `map.set($map, $args...)`. They are described here as `$map, $keys..., $key, $value` for explanation purposes only.

    If `$keys` are not passed, returns a copy of `$map` with the value at `$key` set to `$value`.

    - [SCSS](#example-13-scss)
    - [Sass](#example-13-sass)

    ``` scss
    $font-weights: ("regular": 400, "medium": 500, "bold": 700);

    @debug map.set($font-weights, "regular", 300);
    // ("regular": 300, "medium": 500, "bold": 700)
    ```

    ``` scss
    $font-weights: ("regular": 400, "medium": 500, "bold": 700)

    @debug map.set($font-weights, "regular", 300)
    // ("regular": 300, "medium": 500, "bold": 700)
    ```

    ------------------------------------------------------------------------

    Compatibility:

    Dart Sass

    since 1.27.0

    LibSass

    ✗

    Ruby Sass

    ✗

    [▶](javascript:;)

    Only Dart Sass supports calling `map.set()` with more than three arguments.

    If `$keys` are passed, follows the `$keys` to find the nested map targeted for updating. If any key in `$keys` is missing from a map or references a value that is not a map, sets the value at that key to an empty map.

    Returns a copy of `$map` with the targeted map’s value at `$key` set to `$value`.

    - [SCSS](#example-14-scss)
    - [Sass](#example-14-sass)

    ``` scss
    $fonts: (
      "Helvetica": (
        "weights": (
          "regular": 400,
          "medium": 500,
          "bold": 700
        )
      )
    );

    @debug map.set($fonts, "Helvetica", "weights", "regular", 300);
    // (
    //   "Helvetica": (
    //     "weights": (
    //       "regular": 300,
    //       "medium": 500,
    //       "bold": 700
    //     )
    //   )
    // )
    ```

    ``` scss
    $fonts: ("Helvetica": ("weights": ("regular": 400, "medium": 500, "bold": 700)))

    @debug map.set($fonts, "Helvetica", "weights", "regular", 300)
    // (
    //   "Helvetica": (
    //     "weights": (
    //       "regular": 300,
    //       "medium": 500,
    //       "bold": 700
    //     )
    //   )
    // )
    ```
- name: map.values
  id: modules/map#map.values
  summary: Returns a comma-separated list of all the values in $map
  belongs_to: sass:map
  description: "``` scss\nmap.values($map)\nmap-values($map) //=> list\n```\n\nReturns a comma-separated list of all the values in `$map`.\n\n- [SCSS](#example-15-scss)\n- [Sass](#example-15-sass)\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.values($font-weights); // 400, 500, 700\n```\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.values($font-weights)  // 400, 500, 700\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/map](https://sass-lang.com/documentation/modules/map)"
- name: Maps
  id: values/maps
  summary: Maps in Sass hold pairs of keys and values, and make it easy to look up a value by its corresponding key
  description: "# Maps\n\n### Page Sections\n\n- [Using Maps](#using-maps)\n  - [Overview](#using-maps)\n  - [Look Up a Value](#look-up-a-value)\n  - [Do Something for Every Pair](#do-something-for-every-pair)\n  - [Add to a Map](#add-to-a-map)\n- [Immutability](#immutability)\n\nMaps in Sass hold pairs of keys and values, and make it easy to look up a value by its corresponding key. They’re written `(<expression>: <expression>, <expression>: <expression>)`. The [expression](../syntax/structure#expressions) before the `:` is the key, and the expression after is the value associated with that key. The keys must be unique, but the values may be duplicated. Unlike [lists](lists), maps *must* be written with parentheses around them. A map with no pairs is written `()`.\n\n### 💡 Fun fact:\n\nAstute readers may note that an empty map, `()`, is written the same as an empty list. That’s because it counts as both a map and a list. In fact, *all* maps count as lists! Every map counts as a list that contains a two-element list for each key/value pair. For example, `(1: 2, 3: 4)` counts as `(1 2, 3 4)`.\n\nMaps allow any Sass values to be used as their keys. The [`==` operator](../operators/equality) is used to determine whether two keys are the same.\n\n### ⚠️ Heads up!\n\nMost of the time, it’s a good idea to use [quoted strings](strings#quoted) rather than [unquoted strings](strings#unquoted) for map keys. This is because some values, such as color names, may *look* like unquoted strings but actually be other types. To avoid confusing problems down the line, just use quotes!\n\n## Using Maps\n\nSince maps aren’t valid CSS values, they don’t do much of anything on their own. That’s why Sass provides a bunch of [functions](../modules/map) to create maps and access the values they contain.\n\n### Look Up a Value\n\nMaps are all about associating keys and values, so naturally there’s a way to get the value associated with a key: the [`map.get($map, $key)` function](../modules/map#get)! This function returns the value in the map associated with the given key. It returns [`null`](null) if the map doesn’t contain the key.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.get($font-weights, \"medium\"); // 500\n@debug map.get($font-weights, \"extra-bold\"); // null\n```\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.get($font-weights, \"medium\")  // 500\n@debug map.get($font-weights, \"extra-bold\")  // null\n```\n\n### Do Something for Every Pair\n\nThis doesn’t actually use a function, but it’s still one of the most common ways to use maps. The [`@each` rule](../at-rules/control/each) evaluates a block of styles for each key/value pair in a map. The key and the value are assigned to variables so they can easily be accessed in the block.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n$icons: (\"eye\": \"\\f112\", \"start\": \"\\f12e\", \"stop\": \"\\f12f\");\n\n@each $name, $glyph in $icons {\n  .icon-#{$name}:before {\n    display: inline-block;\n    font-family: \"Icon Font\";\n    content: $glyph;\n  }\n}\n```\n\n``` scss\n$icons: (\"eye\": \"\\f112\", \"start\": \"\\f12e\", \"stop\": \"\\f12f\")\n\n@each $name, $glyph in $icons\n  .icon-#{$name}:before\n    display: inline-block\n    font-family: \"Icon Font\"\n    content: $glyph\n```\n\n``` css\n@charset \"UTF-8\";\n.icon-eye:before {\n  display: inline-block;\n  font-family: \"Icon Font\";\n  content: \"\";\n}\n\n.icon-start:before {\n  display: inline-block;\n  font-family: \"Icon Font\";\n  content: \"\";\n}\n\n.icon-stop:before {\n  display: inline-block;\n  font-family: \"Icon Font\";\n  content: \"\";\n}\n```\n\n### Add to a Map\n\nIt’s also useful to add new pairs to a map, or to replace the value for an existing key. The [`map.set($map, $key, $value)` function](../modules/map#set) does this: it returns a copy of `$map` with the value at `$key` set to `$value`.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@use \"sass:map\";\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.set($font-weights, \"extra-bold\", 900);\n// (\"regular\": 400, \"medium\": 500, \"bold\": 700, \"extra-bold\": 900)\n@debug map.set($font-weights, \"bold\", 900);\n// (\"regular\": 400, \"medium\": 500, \"bold\": 900)\n```\n\n``` scss\n@use \"sass:map\"\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.set($font-weights, \"extra-bold\": 900)\n// (\"regular\": 400, \"medium\": 500, \"bold\": 700, \"extra-bold\": 900)\n@debug map.set($font-weights, \"bold\", 900)\n// (\"regular\": 400, \"medium\": 500, \"bold\": 900)\n```\n\nInstead of setting values one-by-one, you can also merge two existing maps using [`map.merge($map1, $map2)`](../modules/map#merge).\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n@use \"sass:map\";\n\n$light-weights: (\"lightest\": 100, \"light\": 300);\n$heavy-weights: (\"medium\": 500, \"bold\": 700);\n\n@debug map.merge($light-weights, $heavy-weights);\n// (\"lightest\": 100, \"light\": 300, \"medium\": 500, \"bold\": 700)\n```\n\n``` scss\n@use \"sass:map\"\n\n$light-weights: (\"lightest\": 100, \"light\": 300)\n$heavy-weights: (\"medium\": 500, \"bold\": 700)\n\n@debug map.merge($light-weights, $heavy-weights)\n// (\"lightest\": 100, \"light\": 300, \"medium\": 500, \"bold\": 700)\n```\n\nIf both maps have the same keys, the second map’s values are used in the map that gets returned.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n@use \"sass:map\";\n\n$weights: (\"light\": 300, \"medium\": 500);\n\n@debug map.merge($weights, (\"medium\": 700));\n// (\"light\": 300, \"medium\": 700)\n```\n\n``` scss\n@use \"sass:map\";\n\n$weights: (\"light\": 300, \"medium\": 500)\n\n@debug map.merge($weights, (\"medium\": 700))\n// (\"light\": 300, \"medium\": 700)\n```\n\nNote that because Sass maps are [immutable](#immutability), `map.set()` and `map.merge()` do not modify the original list.\n\n## Immutability\n\nMaps in Sass are *immutable*, which means that the contents of a map value never changes. Sass’s map functions all return new maps rather than modifying the originals. Immutability helps avoid lots of sneaky bugs that can creep in when the same map is shared across different parts of the stylesheet.\n\nYou can still update your state over time by assigning new maps to the same variable, though. This is often used in functions and mixins to track configuration in a map.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@use \"sass:map\";\n\n$prefixes-by-browser: (\"firefox\": moz, \"safari\": webkit, \"ie\": ms);\n\n@mixin add-browser-prefix($browser, $prefix) {\n  $prefixes-by-browser: map.merge($prefixes-by-browser, ($browser: $prefix)) !global;\n}\n\n@include add-browser-prefix(\"opera\", o);\n@debug $prefixes-by-browser;\n// (\"firefox\": moz, \"safari\": webkit, \"ie\": ms, \"opera\": o)\n```\n\n``` scss\n@use \"sass:map\"\n\n$prefixes-by-browser: (\"firefox\": moz, \"safari\": webkit, \"ie\": ms)\n\n@mixin add-browser-prefix($browser, $prefix)\n  $prefixes-by-browser: map.merge($prefixes-by-browser, ($browser: $prefix)) !global\n\n\n@include add-browser-prefix(\"opera\", o)\n@debug $prefixes-by-browser\n// (\"firefox\": moz, \"safari\": webkit, \"ie\": ms, \"opera\": o)\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/values/maps](https://sass-lang.com/documentation/values/maps)"
- name: math.$e
  id: modules/math#e
  summary: Equal to the value of the mathematical constant e
  belongs_to: sass:math
  description: |-
    ``` scss
    math.$e
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Equal to the value of the [mathematical constant *e*](https://en.wikipedia.org/wiki/E_(mathematical_constant)).

    - [SCSS](#example-1-scss)
    - [Sass](#example-1-sass)

    ``` scss
    @debug math.$e; // 2.7182818285
    ```

    ``` scss
    @debug math.$e // 2.7182818285
    ```
- name: math.$pi
  id: modules/math#pi
  summary: null
  belongs_to: sass:math
  description: |-
    ``` scss
    math.$pi
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Equal to the value of the [mathematical constant *π*](https://en.wikipedia.org/wiki/Pi).

    - [SCSS](#example-2-scss)
    - [Sass](#example-2-sass)

    ``` scss
    @debug math.$pi; // 3.1415926536
    ```

    ``` scss
    @debug math.$pi // 3.1415926536
    ```

    ## Bounding Functions
- name: math.abs
  id: modules/math#math.abs
  summary: Returns the absolute value of $number
  belongs_to: sass:math
  description: |-
    ``` scss
    math.abs($number)
    abs($number) //=> number
    ```

    Returns the [absolute value](https://en.wikipedia.org/wiki/Absolute_value) of `$number`. If `$number` is negative, this returns `-$number`, and if `$number` is positive, it returns `$number` as-is.

    - [SCSS](#example-9-scss)
    - [Sass](#example-9-sass)

    ``` scss
    @debug math.abs(10px); // 10px
    @debug math.abs(-10px); // 10px
    ```

    ``` scss
    @debug math.abs(10px) // 10px
    @debug math.abs(-10px) // 10px
    ```
- name: math.acos
  id: modules/math#math.acos
  summary: Returns the arccosine of $number in deg
  belongs_to: sass:math
  description: |-
    ``` scss
    math.acos($number) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the [arccosine](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties) of `$number` in `deg`.

    `$number` must be unitless.

    - [SCSS](#example-17-scss)
    - [Sass](#example-17-sass)

    ``` scss
    @debug math.acos(0.5); // 60deg
    @debug math.acos(2); // NaNdeg
    ```

    ``` scss
    @debug math.acos(0.5) // 60deg
    @debug math.acos(2) // NaNdeg
    ```
- name: math.asin
  id: modules/math#math.asin
  summary: Returns the arcsine of $number in deg
  belongs_to: sass:math
  description: |-
    ``` scss
    math.asin($number) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the [arcsine](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties) of `$number` in `deg`.

    `$number` must be unitless.

    - [SCSS](#example-18-scss)
    - [Sass](#example-18-sass)

    ``` scss
    @debug math.asin(0.5); // 30deg
    @debug math.asin(2); // NaNdeg
    ```

    ``` scss
    @debug math.asin(0.5) // 30deg
    @debug math.asin(2) // NaNdeg
    ```
- name: math.atan
  id: modules/math#math.atan
  summary: Returns the arctangent of $number in deg
  belongs_to: sass:math
  description: |-
    ``` scss
    math.atan($number) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the [arctangent](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties) of `$number` in `deg`.

    `$number` must be unitless.

    - [SCSS](#example-19-scss)
    - [Sass](#example-19-sass)

    ``` scss
    @debug math.atan(10); // 84.2894068625deg
    ```

    ``` scss
    @debug math.atan(10) // 84.2894068625deg
    ```
- name: math.atan2
  id: modules/math#math.atan2
  summary: Returns the 2-argument arctangent of $y and $x in deg
  belongs_to: sass:math
  description: |-
    ``` scss
    math.atan2($y, $x) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the [2-argument arctangent](https://en.wikipedia.org/wiki/Atan2) of `$y` and `$x` in `deg`.

    `$y` and `$x` must have compatible units or be unitless.

    ### 💡 Fun fact:

    `math.atan2($y, $x)` is distinct from `atan(math.div($y, $x))` because it preserves the quadrant of the point in question. For example, `math.atan2(1, -1)` corresponds to the point `(-1, 1)` and returns `135deg`. In contrast, `math.atan(math.div(1, -1))` and `math.atan(math.div(-1, 1))` resolve first to `atan(-1)`, so both return `-45deg`.

    - [SCSS](#example-20-scss)
    - [Sass](#example-20-sass)

    ``` scss
    @debug math.atan2(-1, 1); // 135deg
    ```

    ``` scss
    @debug math.atan2(-1, 1) // 135deg
    ```

    ## Unit Functions
- name: math.ceil
  id: modules/math#math.ceil
  summary: Rounds $number up to the next highest whole number
  belongs_to: sass:math
  description: |-
    ``` scss
    math.ceil($number)
    ceil($number) //=> number
    ```

    Rounds `$number` up to the next highest whole number.

    - [SCSS](#example-3-scss)
    - [Sass](#example-3-sass)

    ``` scss
    @debug math.ceil(4); // 4
    @debug math.ceil(4.2); // 5
    @debug math.ceil(4.9); // 5
    ```

    ``` scss
    @debug math.ceil(4)  // 4
    @debug math.ceil(4.2)  // 5
    @debug math.ceil(4.9)  // 5
    ```
- name: math.clamp
  id: modules/math#math.clamp
  summary: Restricts $number to the range between $min and $max
  belongs_to: sass:math
  description: |-
    ``` scss
    math.clamp($min, $number, $max) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Restricts `$number` to the range between `$min` and `$max`. If `$number` is less than `$min` this returns `$min`, and if it’s greater than `$max` this returns `$max`.

    `$min`, `$number`, and `$max` must have compatible units, or all be unitless.

    - [SCSS](#example-4-scss)
    - [Sass](#example-4-sass)

    ``` scss
    @debug math.clamp(-1, 0, 1); // 0
    @debug math.clamp(1px, -1px, 10px); // 1px
    @debug math.clamp(-1in, 1cm, 10mm); // 10mm
    ```

    ``` scss
    @debug math.clamp(-1, 0, 1) // 0
    @debug math.clamp(1px, -1px, 10px) // 1px
    @debug math.clamp(-1in, 1cm, 10mm) // 10mm
    ```
- name: math.compatible
  id: modules/math#math.compatible
  summary: Returns whether $number1 and $number2 have compatible units
  belongs_to: sass:math
  description: |-
    ``` scss
    math.compatible($number1, $number2)
    comparable($number1, $number2) //=> boolean
    ```

    Returns whether `$number1` and `$number2` have compatible units.

    If this returns `true`, `$number1` and `$number2` can safely be [added](../operators/numeric), [subtracted](../operators/numeric), and [compared](../operators/relational). Otherwise, doing so will produce errors.

    ### ⚠️ Heads up!

    The global name of this function is `compa`**`ra`**`ble`, but when it was added to the `sass:math` module the name was changed to `compa`**`ti`**`ble` to more clearly convey what the function does.

    - [SCSS](#example-21-scss)
    - [Sass](#example-21-sass)

    ``` scss
    @debug math.compatible(2px, 1px); // true
    @debug math.compatible(100px, 3em); // false
    @debug math.compatible(10cm, 3mm); // true
    ```

    ``` scss
    @debug math.compatible(2px, 1px)  // true
    @debug math.compatible(100px, 3em)  // false
    @debug math.compatible(10cm, 3mm)  // true
    ```
- name: math.cos
  id: modules/math#math.cos
  summary: Returns the cosine of $number
  belongs_to: sass:math
  description: |-
    ``` scss
    math.cos($number) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the [cosine](https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions) of `$number`.

    `$number` must be an angle (its units must be compatible with `deg`) or unitless. If `$number` has no units, it is assumed to be in `rad`.

    - [SCSS](#example-14-scss)
    - [Sass](#example-14-sass)

    ``` scss
    @debug math.cos(100deg); // -0.1736481777
    @debug math.cos(1rad); // 0.5403023059
    @debug math.cos(1); // 0.5403023059
    ```

    ``` scss
    @debug math.cos(100deg) // -0.1736481777
    @debug math.cos(1rad) // 0.5403023059
    @debug math.cos(1) // 0.5403023059
    ```
- name: math.div
  id: modules/math#math.div
  summary: Returns the result of dividing $number1 by $number2
  belongs_to: sass:math
  description: |-
    ``` scss
    math.div($number1, $number2) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.33.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the result of dividing `$number1` by `$number2`.

    Any units shared by both numbers will be canceled out. Units in `$number1` that aren’t in `$number2` will end up in the return value’s numerator, and units in `$number2` that aren’t in `$number1` will end up in its denominator.

    ### ⚠️ Heads up!

    For backwards-compatibility purposes, this returns the *exact same result* as [the deprecated `/` operator](https://sass-lang.com/documentation/breaking-changes/slash-div), including concatenating two strings with a `/` character between them. However, this behavior will be removed eventually and shouldn’t be used in new stylesheets.

    - [SCSS](#example-24-scss)
    - [Sass](#example-24-sass)

    ``` scss
    @debug math.div(1, 2); // 0.5
    @debug math.div(100px, 5px); // 20
    @debug math.div(100px, 5); // 20px
    @debug math.div(100px, 5s); // 20px/s
    ```

    ``` scss
    @debug math.div(1, 2)  // 0.5
    @debug math.div(100px, 5px)  // 20
    @debug math.div(100px, 5)  // 20px
    @debug math.div(100px, 5s)  // 20px/s
    ```
- name: math.floor
  id: modules/math#math.floor
  summary: Rounds $number down to the next lowest whole number
  belongs_to: sass:math
  description: |-
    ``` scss
    math.floor($number)
    floor($number) //=> number
    ```

    Rounds `$number` down to the next lowest whole number.

    - [SCSS](#example-5-scss)
    - [Sass](#example-5-sass)

    ``` scss
    @debug math.floor(4); // 4
    @debug math.floor(4.2); // 4
    @debug math.floor(4.9); // 4
    ```

    ``` scss
    @debug math.floor(4)  // 4
    @debug math.floor(4.2)  // 4
    @debug math.floor(4.9)  // 4
    ```
- name: math.hypot
  id: modules/math#math.hypot
  summary: Returns the length of the n-dimensional vector that has components equal to each $number
  belongs_to: sass:math
  description: |-
    ``` scss
    math.hypot($number...) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the length of the *n*-dimensional [vector](https://en.wikipedia.org/wiki/Euclidean_vector) that has components equal to each `$number`. For example, for three numbers *a*, *b*, and *c*, this returns the square root of *a² + b² + c²*.

    The numbers must either all have compatible units, or all be unitless. And since the numbers’ units may differ, the output takes the unit of the first number.

    - [SCSS](#example-10-scss)
    - [Sass](#example-10-sass)

    ``` scss
    @debug math.hypot(3, 4); // 5

    $lengths: 1in, 10cm, 50px;
    @debug math.hypot($lengths...); // 4.0952775683in
    ```

    ``` scss
    @debug math.hypot(3, 4) // 5

    $lengths: 1in, 10cm, 50px
    @debug math.hypot($lengths...) // 4.0952775683in
    ```

    ## Exponential Functions
- name: math.is-unitless
  id: modules/math#math.is-unitless
  summary: Returns whether $number has no units
  belongs_to: sass:math
  description: |-
    ``` scss
    math.is-unitless($number)
    unitless($number) //=> boolean
    ```

    Returns whether `$number` has no units.

    - [SCSS](#example-22-scss)
    - [Sass](#example-22-sass)

    ``` scss
    @debug math.is-unitless(100); // true
    @debug math.is-unitless(100px); // false
    ```

    ``` scss
    @debug math.is-unitless(100)  // true
    @debug math.is-unitless(100px)  // false
    ```
- name: math.log
  id: modules/math#math.log
  summary: Returns the logarithm of $number with respect to $base
  belongs_to: sass:math
  description: |-
    ``` scss
    math.log($number, $base: null) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the [logarithm](https://en.wikipedia.org/wiki/Logarithm) of `$number` with respect to `$base`. If `$base` is `null`, the [natural log](https://en.wikipedia.org/wiki/Natural_logarithm) is calculated.

    `$number` and `$base` must be unitless.

    - [SCSS](#example-11-scss)
    - [Sass](#example-11-sass)

    ``` scss
    @debug math.log(10); // 2.302585093
    @debug math.log(10, 10); // 1
    ```

    ``` scss
    @debug math.log(10) // 2.302585093
    @debug math.log(10, 10) // 1
    ```
- name: math.max
  id: modules/math#math.max
  summary: Returns the highest of one or more numbers
  belongs_to: sass:math
  description: |-
    ``` scss
    math.max($number...)
    max($number...) //=> number
    ```

    Returns the highest of one or more numbers.

    - [SCSS](#example-6-scss)
    - [Sass](#example-6-sass)

    ``` scss
    @debug math.max(1px, 4px); // 4px

    $widths: 50px, 30px, 100px;
    @debug math.max($widths...); // 100px
    ```

    ``` scss
    @debug math.max(1px, 4px)  // 4px

    $widths: 50px, 30px, 100px
    @debug math.max($widths...)  // 100px
    ```
- name: math.min
  id: modules/math#math.min
  summary: Returns the lowest of one or more numbers
  belongs_to: sass:math
  description: |-
    ``` scss
    math.min($number...)
    min($number...) //=> number
    ```

    Returns the lowest of one or more numbers.

    - [SCSS](#example-7-scss)
    - [Sass](#example-7-sass)

    ``` scss
    @debug math.min(1px, 4px); // 1px

    $widths: 50px, 30px, 100px;
    @debug math.min($widths...); // 30px
    ```

    ``` scss
    @debug math.min(1px, 4px)  // 1px

    $widths: 50px, 30px, 100px
    @debug math.min($widths...)  // 30px
    ```
- name: math.percentage
  id: modules/math#math.percentage
  summary: Converts a unitless $number (usually a decimal between 0 and 1) to a percentage
  belongs_to: sass:math
  description: |-
    ``` scss
    math.percentage($number)
    percentage($number) //=> number
    ```

    Converts a unitless `$number` (usually a decimal between 0 and 1) to a percentage.

    ### 💡 Fun fact:

    This function is identical to `$number * 100%`.

    - [SCSS](#example-25-scss)
    - [Sass](#example-25-sass)

    ``` scss
    @debug math.percentage(0.2); // 20%
    @debug math.percentage(math.div(100px, 50px)); // 200%
    ```

    ``` scss
    @debug math.percentage(0.2)  // 20%
    @debug math.percentage(math.div(100px, 50px))  // 200%
    ```
- name: math.pow
  id: modules/math#math.pow
  summary: Raises $base to the power of $exponent
  belongs_to: sass:math
  description: |-
    ``` scss
    math.pow($base, $exponent) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Raises `$base` [to the power of](https://en.wikipedia.org/wiki/Exponentiation) `$exponent`.

    `$base` and `$exponent` must be unitless.

    - [SCSS](#example-12-scss)
    - [Sass](#example-12-sass)

    ``` scss
    @debug math.pow(10, 2); // 100
    @debug math.pow(100, math.div(1, 3)); // 4.6415888336
    @debug math.pow(5, -2); // 0.04
    ```

    ``` scss
    @debug math.pow(10, 2) // 100
    @debug math.pow(100, math.div(1, 3)) // 4.6415888336
    @debug math.pow(5, -2) // 0.04
    ```
- name: math.random
  id: modules/math#math.random
  summary: If $limit is null, returns a random decimal number between 0 and 1
  belongs_to: sass:math
  description: "``` scss\nmath.random($limit: null)\nrandom($limit: null) //=> number\n```\n\nIf `$limit` is `null`, returns a random decimal number between 0 and 1.\n\n- [SCSS](#example-26-scss)\n- [Sass](#example-26-sass)\n\n``` scss\n@debug math.random(); // 0.2821251858\n@debug math.random(); // 0.6221325814\n```\n\n``` scss\n@debug math.random()  // 0.2821251858\n@debug math.random()  // 0.6221325814\n```\n\n------------------------------------------------------------------------\n\nIf `$limit` is a number greater than or equal to 1, returns a random whole number between 1 and `$limit`.\n\n### ⚠️ Heads up!\n\n`random()` ignores units in `$limit`. [This behavior is deprecated](https://sass-lang.com/documentation/breaking-changes/random-with-units) and `random($limit)` will return a random integer with the same units as the `$limit` argument.\n\n- [SCSS](#example-27-scss)\n- [Sass](#example-27-sass)\n\n``` scss\n@debug math.random(100px); // 42\n```\n\n``` scss\n@debug math.random(100px)  // 42\n```\n\n- [SCSS](#example-28-scss)\n- [Sass](#example-28-sass)\n\n``` scss\n@debug math.random(10); // 4\n@debug math.random(10000); // 5373\n```\n\n``` scss\n@debug math.random(10)  // 4\n@debug math.random(10000)  // 5373\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/math](https://sass-lang.com/documentation/modules/math)"
- name: math.round
  id: modules/math#math.round
  summary: Rounds $number to the nearest whole number
  belongs_to: sass:math
  description: |-
    ``` scss
    math.round($number)
    round($number) //=> number
    ```

    Rounds `$number` to the nearest whole number.

    - [SCSS](#example-8-scss)
    - [Sass](#example-8-sass)

    ``` scss
    @debug math.round(4); // 4
    @debug math.round(4.2); // 4
    @debug math.round(4.9); // 5
    ```

    ``` scss
    @debug math.round(4)  // 4
    @debug math.round(4.2)  // 4
    @debug math.round(4.9)  // 5
    ```

    ## Distance Functions
- name: math.sin
  id: modules/math#math.sin
  summary: Returns the sine of $number
  belongs_to: sass:math
  description: |-
    ``` scss
    math.sin($number) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the [sine](https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions) of `$number`.

    `$number` must be an angle (its units must be compatible with `deg`) or unitless. If `$number` has no units, it is assumed to be in `rad`.

    - [SCSS](#example-15-scss)
    - [Sass](#example-15-sass)

    ``` scss
    @debug math.sin(100deg); // 0.984807753
    @debug math.sin(1rad); // 0.8414709848
    @debug math.sin(1); // 0.8414709848
    ```

    ``` scss
    @debug math.sin(100deg) // 0.984807753
    @debug math.sin(1rad) // 0.8414709848
    @debug math.sin(1) // 0.8414709848
    ```
- name: math.sqrt
  id: modules/math#math.sqrt
  summary: Returns the square root of $number
  belongs_to: sass:math
  description: |-
    ``` scss
    math.sqrt($number) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the [square root](https://en.wikipedia.org/wiki/Square_root) of `$number`.

    `$number` must be unitless.

    - [SCSS](#example-13-scss)
    - [Sass](#example-13-sass)

    ``` scss
    @debug math.sqrt(100); // 10
    @debug math.sqrt(math.div(1, 3)); // 0.5773502692
    @debug math.sqrt(-1); // NaN
    ```

    ``` scss
    @debug math.sqrt(100) // 10
    @debug math.sqrt(math.div(1, 3)) // 0.5773502692
    @debug math.sqrt(-1) // NaN
    ```

    ## Trigonometric Functions
- name: math.tan
  id: modules/math#math.tan
  summary: Returns the tangent of $number
  belongs_to: sass:math
  description: |-
    ``` scss
    math.tan($number) //=> number
    ```

    Compatibility:

    Dart Sass

    since 1.25.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the [tangent](https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions) of `$number`.

    `$number` must be an angle (its units must be compatible with `deg`) or unitless. If `$number` has no units, it is assumed to be in `rad`.

    - [SCSS](#example-16-scss)
    - [Sass](#example-16-sass)

    ``` scss
    @debug math.tan(100deg); // -5.6712818196
    @debug math.tan(1rad); // 1.5574077247
    @debug math.tan(1); // 1.5574077247
    ```

    ``` scss
    @debug math.tan(100deg) // -5.6712818196
    @debug math.tan(1rad) // 1.5574077247
    @debug math.tan(1) // 1.5574077247
    ```
- name: math.unit
  id: modules/math#math.unit
  summary: Returns a string representation of $number‘s units
  belongs_to: sass:math
  description: |-
    ``` scss
    math.unit($number)
    unit($number) //=> quoted string
    ```

    Returns a string representation of `$number`‘s units.

    ### ⚠️ Heads up!

    This function is intended for debugging; its output format is not guaranteed to be consistent across Sass versions or implementations.

    - [SCSS](#example-23-scss)
    - [Sass](#example-23-sass)

    ``` scss
    @debug math.unit(100); // ""
    @debug math.unit(100px); // "px"
    @debug math.unit(5px * 10px); // "px*px"
    @debug math.unit(math.div(5px, 1s)); // "px/s"
    ```

    ``` scss
    @debug math.unit(100)  // ""
    @debug math.unit(100px)  // "px"
    @debug math.unit(5px * 10px)  // "px*px"
    @debug math.unit(math.div(5px, 1s))  // "px/s"
    ```

    ## Other Functions
- name: meta.calc-args
  id: modules/meta#meta.calc-args
  summary: Returns the arguments for the given calculation
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.calc-args($calc) //=> list
    ```

    Compatibility:

    Dart Sass

    since 1.40.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the arguments for the given [calculation](../values/calculations).

    If an argument is a number or a nested calculation, it’s returned as that type. Otherwise, it’s returned as an unquoted string.

    - [SCSS](#example-2-scss)
    - [Sass](#example-2-sass)

    ``` scss
    @debug meta.calc-args(calc(100px + 10%)); // unquote("100px + 10%")
    @debug meta.calc-args(clamp(50px, var(--width), 1000px)); // 50px, unquote("var(--width)"), 1000px
    ```

    ``` scss
    @debug meta.calc-args(calc(100px + 10%))  // unquote("100px + 10%")
    @debug meta.calc-args(clamp(50px, var(--width), 1000px))  // 50px, unquote("var(--width)"), 1000px
    ```
- name: meta.calc-name
  id: modules/meta#meta.calc-name
  summary: Returns the name of the given calculation
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.calc-name($calc) //=> quoted string
    ```

    Compatibility:

    Dart Sass

    since 1.40.0

    LibSass

    ✗

    Ruby Sass

    ✗

    Returns the name of the given [calculation](../values/calculations).

    - [SCSS](#example-3-scss)
    - [Sass](#example-3-sass)

    ``` scss
    @debug meta.calc-name(calc(100px + 10%)); // "calc"
    @debug meta.calc-name(clamp(50px, var(--width), 1000px)); // "clamp"
    ```

    ``` scss
    @debug meta.calc-name(calc(100px + 10%))  // "calc"
    @debug meta.calc-name(clamp(50px, var(--width), 1000px))  // "clamp"
    ```
- name: meta.call
  id: modules/meta#meta.call
  summary: In older versions of LibSass and Ruby Sass, the call() function took a string representing a function’s name
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.call($function, $args...)
    call($function, $args...)
    ```

    Compatibility (Argument Type):

    Dart Sass

    ✓

    LibSass

    since 3.5.0

    Ruby Sass

    since 3.5.0

    [▶](javascript:;)

    In older versions of LibSass and Ruby Sass, the [`call()` function](meta#call) took a string representing a function’s name. This was changed to take a function value instead in preparation for a new module system where functions are no longer global and so a given name may not always refer to the same function.

    Passing a string to `call()` still works in all implementations, but it’s deprecated and will be disallowed in future versions.

    Invokes `$function` with `$args` and returns the result.

    The `$function` should be a [function](../values/functions) returned by [`meta.get-function()`](#get-function).

    - [SCSS](#example-4-scss)
    - [Sass](#example-4-sass)
    - [CSS](#example-4-css)

    ``` scss
    @use "sass:list";
    @use "sass:meta";
    @use "sass:string";

    /// Return a copy of $list with all elements for which $condition returns `true`
    /// removed.
    @function remove-where($list, $condition) {
      $new-list: ();
      $separator: list.separator($list);
      @each $element in $list {
        @if not meta.call($condition, $element) {
          $new-list: list.append($new-list, $element, $separator: $separator);
        }
      }
      @return $new-list;
    }

    $fonts: Tahoma, Geneva, "Helvetica Neue", Helvetica, Arial, sans-serif;

    content {
      @function contains-helvetica($string) {
        @return string.index($string, "Helvetica");
      }
      font-family: remove-where($fonts, meta.get-function("contains-helvetica"));
    }
    ```

    ``` scss
    @use "sass:list"
    @use "sass:meta"
    @use "sass:string"

    /// Return a copy of $list with all elements for which $condition returns `true`
    /// removed.
    @function remove-where($list, $condition)
      $new-list: ()
      $separator: list.separator($list)
      @each $element in $list
        @if not meta.call($condition, $element)
          $new-list: list.append($new-list, $element, $separator: $separator)


      @return $new-list


    $fonts: Tahoma, Geneva, "Helvetica Neue", Helvetica, Arial, sans-serif

    .content
      @function contains-helvetica($string)
        @return string.index($string, "Helvetica")

      font-family: remove-where($fonts, meta.get-function("contains-helvetica"))
    ```

    ``` css
    .content {
      font-family: Tahoma, Geneva, Arial, sans-serif;
    }
    ```
- name: meta.content-exists
  id: modules/meta#meta.content-exists
  summary: Returns whether the current mixin was passed a @content block
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.content-exists()
    content-exists() //=> boolean
    ```

    Returns whether the current mixin was passed a [`@content` block](../at-rules/mixin#content-blocks).

    Throws an error if called outside of a mixin.

    - [SCSS](#example-5-scss)
    - [Sass](#example-5-sass)

    ``` scss
    @mixin debug-content-exists {
      @debug meta.content-exists();
      @content;
    }

    @include debug-content-exists; // false
    @include debug-content-exists { // true
      // Content!
    }
    ```

    ``` scss
    @mixin debug-content-exists
      @debug meta.content-exists()
      @content


    @include debug-content-exists  // false
    @include debug-content-exists   // true
      // Content!
    ```
- name: meta.feature-exists
  id: modules/meta#meta.feature-exists
  summary: Returns whether the current Sass implementation supports $feature
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.feature-exists($feature)
    feature-exists($feature) //=> boolean
    ```

    Returns whether the current Sass implementation supports `$feature`.

    The `$feature` must be a string. The currently recognized features are:

    - `global-variable-shadowing`, which means that a local variable will [shadow](../variables#shadowing) a global variable unless it has the `!global` flag.
    - `extend-selector-pseudoclass`, which means that the [`@extend` rule](../at-rules/extend) will affect selectors nested in pseudo-classes like `:not()`.
    - `units-level3`, which means that [unit arithmetic](../values/numbers#units) supports units defined in [CSS Values and Units Level 3](http://www.w3.org/TR/css3-values).
    - `at-error`, which means that the [`@error` rule](../at-rules/error) is supported.
    - `custom-property`, which means that [custom property declaration](../style-rules/declarations#custom-properties) values don’t support any [expressions](../syntax/structure#expressions) other than [interpolation](../interpolation).

    Returns `false` for any unrecognized `$feature`.

    - [SCSS](#example-6-scss)
    - [Sass](#example-6-sass)

    ``` scss
    @debug meta.feature-exists("at-error"); // true
    @debug meta.feature-exists("unrecognized"); // false
    ```

    ``` scss
    @debug meta.feature-exists("at-error")  // true
    @debug meta.feature-exists("unrecognized")  // false
    ```
- name: meta.function-exists
  id: modules/meta#meta.function-exists
  summary: Returns whether a function named $name is defined, either as a built-in function or a user-defined function
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.function-exists($name, $module: null)
    function-exists($name) //=> boolean
    ```

    Returns whether a function named `$name` is defined, either as a built-in function or a user-defined function.

    If `$module` is passed, this also checks the module named `$module` for the function definition. `$module` must be a string matching the namespace of a \[`@use` rule\]\[\] in the current file.

    - [SCSS](#example-7-scss)
    - [Sass](#example-7-sass)

    ``` scss
    @use "sass:math";

    @debug meta.function-exists("div", "math"); // true
    @debug meta.function-exists("scale-color"); // true
    @debug meta.function-exists("add"); // false

    @function add($num1, $num2) {
      @return $num1 + $num2;
    }
    @debug meta.function-exists("add"); // true
    ```

    ``` scss
    @use "sass:math"

    @debug meta.function-exists("div", "math")  // true
    @debug meta.function-exists("scale-color")  // true
    @debug meta.function-exists("add")  // false

    @function add($num1, $num2)
      @return $num1 + $num2

    @debug meta.function-exists("add")  // true
    ```
- name: meta.get-function
  id: modules/meta#meta.get-function
  summary: Returns the function named $name
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.get-function($name, $css: false, $module: null)
    get-function($name, $css: false, $module: null) //=> function
    ```

    Returns the [function](../values/functions) named `$name`.

    If `$module` is `null`, this returns the function named `$name` without a namespace (including [global built-in functions](../modules#global-functions)). Otherwise, `$module` must be a string matching the namespace of a [`@use` rule](../at-rules/use) in the current file, in which case this returns the function in that module named `$name`.

    By default, this throws an error if `$name` doesn’t refer to Sass function. However, if `$css` is `true`, it instead returns a [plain CSS function](../at-rules/function#plain-css-functions).

    The returned function can be called using [`meta.call()`](#call).

    - [SCSS](#example-8-scss)
    - [Sass](#example-8-sass)
    - [CSS](#example-8-css)

    ``` scss
    @use "sass:list";
    @use "sass:meta";
    @use "sass:string";

    /// Return a copy of $list with all elements for which $condition returns `true`
    /// removed.
    @function remove-where($list, $condition) {
      $new-list: ();
      $separator: list.separator($list);
      @each $element in $list {
        @if not meta.call($condition, $element) {
          $new-list: list.append($new-list, $element, $separator: $separator);
        }
      }
      @return $new-list;
    }

    $fonts: Tahoma, Geneva, "Helvetica Neue", Helvetica, Arial, sans-serif;

    content {
      @function contains-helvetica($string) {
        @return string.index($string, "Helvetica");
      }
      font-family: remove-where($fonts, meta.get-function("contains-helvetica"));
    }
    ```

    ``` scss
    @use "sass:list"
    @use "sass:meta"
    @use "sass:string"

    /// Return a copy of $list with all elements for which $condition returns `true`
    /// removed.
    @function remove-where($list, $condition)
      $new-list: ()
      $separator: list.separator($list)
      @each $element in $list
        @if not meta.call($condition, $element)
          $new-list: list.append($new-list, $element, $separator: $separator)


      @return $new-list


    $fonts: Tahoma, Geneva, "Helvetica Neue", Helvetica, Arial, sans-serif

    .content
      @function contains-helvetica($string)
        @return string.index($string, "Helvetica")

      font-family: remove-where($fonts, meta.get-function("contains-helvetica"))
    ```

    ``` css
    .content {
      font-family: Tahoma, Geneva, Arial, sans-serif;
    }
    ```
- name: meta.global-variable-exists
  id: modules/meta#meta.global-variable-exists
  summary: Returns whether a global variable named $name (without the $) exists
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.global-variable-exists($name, $module: null)
    global-variable-exists($name, $module: null) //=> boolean
    ```

    Returns whether a [global variable](../variables#scope) named `$name` (without the `$`) exists.

    If `$module` is `null`, this returns whether a variable named `$name` without a namespace exists. Otherwise, `$module` must be a string matching the namespace of a [`@use` rule](../at-rules/use) in the current file, in which case this returns whether that module has a variable named `$name`.

    See also [`meta.variable-exists()`](#variable-exists).

    - [SCSS](#example-9-scss)
    - [Sass](#example-9-sass)

    ``` scss
    @debug meta.global-variable-exists("var1"); // false

    $var1: value;
    @debug meta.global-variable-exists("var1"); // true

    h1 {
      // $var2 is local.
      $var2: value;
      @debug meta.global-variable-exists("var2"); // false
    }
    ```

    ``` scss
    @debug meta.global-variable-exists("var1")  // false

    $var1: value
    @debug meta.global-variable-exists("var1")  // true

    h1
      // $var2 is local.
      $var2: value
      @debug meta.global-variable-exists("var2")  // false
    ```
- name: meta.inspect
  id: modules/meta#meta.inspect
  summary: Returns a string representation of $value
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.inspect($value)
    inspect($value) //=> unquoted string
    ```

    Returns a string representation of `$value`.

    Returns a representation of *any* Sass value, not just those that can be represented in CSS. As such, its return value is not guaranteed to be valid CSS.

    ### ⚠️ Heads up!

    This function is intended for debugging; its output format is not guaranteed to be consistent across Sass versions or implementations.

    - [SCSS](#example-10-scss)
    - [Sass](#example-10-sass)

    ``` scss
    @debug meta.inspect(10px 20px 30px); // unquote("10px 20px 30px")
    @debug meta.inspect(("width": 200px)); // unquote('("width": 200px)')
    @debug meta.inspect(null); // unquote("null")
    @debug meta.inspect("Helvetica"); // unquote('"Helvetica"')
    ```

    ``` scss
    @debug meta.inspect(10px 20px 30px)  // unquote("10px 20px 30px")
    @debug meta.inspect(("width": 200px))  // unquote('("width": 200px)')
    @debug meta.inspect(null)  // unquote("null")
    @debug meta.inspect("Helvetica")  // unquote('"Helvetica"')
    ```
- name: meta.keywords
  id: modules/meta#meta.keywords
  summary: Returns the keywords passed to a mixin or function that takes arbitrary arguments
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.keywords($args)
    keywords($args) //=> map
    ```

    Returns the keywords passed to a mixin or function that takes [arbitrary arguments](../at-rules/mixin#taking-arbitrary-arguments). The `$args` argument must be an [argument list](../values/lists#argument-lists).

    The keywords are returned as a map from argument names as unquoted strings (not including `$`) to the values of those arguments.

    - [SCSS](#example-11-scss)
    - [Sass](#example-11-sass)
    - [CSS](#example-11-css)

    ``` scss
    @use "sass:meta";

    @mixin syntax-colors($args...) {
      @debug meta.keywords($args);
      // (string: #080, comment: #800, variable: #60b)

      @each $name, $color in meta.keywords($args) {
        pre span.stx-#{$name} {
          color: $color;
        }
      }
    }

    @include syntax-colors(
      $string: #080,
      $comment: #800,
      $variable: #60b,
    )
    ```

    ``` scss
    @use "sass:meta"

    @mixin syntax-colors($args...)
      @debug meta.keywords($args)
      // (string: #080, comment: #800, variable: #60b)

      @each $name, $color in meta.keywords($args)
        pre span.stx-#{$name}
          color: $color




    @include syntax-colors($string: #080, $comment: #800, $variable: #60b)
    ```

    ``` css
    pre span.stx-string {
      color: #080;
    }

    pre span.stx-comment {
      color: #800;
    }

    pre span.stx-variable {
      color: #60b;
    }
    ```
- name: meta.load-css
  id: modules/meta#meta.load-css
  summary: Only Dart Sass currently supports this mixin
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.load-css($url, $with: null)
    ```

    Compatibility:

    Dart Sass

    since 1.23.0

    LibSass

    ✗

    Ruby Sass

    ✗

    [▶](javascript:;)

    Only Dart Sass currently supports this mixin.

    Loads the [module](../at-rules/use) at `$url` and includes its CSS as though it were written as the contents of this mixin. The `$with` parameter provides [configuration](../at-rules/use#configuration) for the modules; if it’s passed, it must be a map from variable names (without `$`) to the values of those variables to use in the loaded module.

    If `$url` is relative, it’s interpreted as relative to the file in which `meta.load-css()` is included.

    **Like the [`@use` rule](../at-rules/use)**:

    - This will only evaluate the given module once, even if it’s loaded multiple times in different ways.

    - This cannot provide configuration to a module that’s already been loaded, whether or not it was already loaded with configuration.

    **Unlike the [`@use` rule](../at-rules/use)**:

    - This doesn’t make any members from the loaded module available in the current module.

    - This can be used anywhere in a stylesheet. It can even be nested within style rules to create nested styles!

    - The module URL being loaded can come from a variable and include [interpolation](../interpolation).

    ### ⚠️ Heads up!

    The `$url` parameter should be a string containing a URL like you’d pass to the `@use` rule. It shouldn’t be a CSS `url()`!

    - [SCSS](#example-1-scss)
    - [Sass](#example-1-sass)
    - [CSS](#example-1-css)

    ``` scss
    // dark-theme/_code.scss
    $border-contrast: false !default;

    code {
      background-color: #6b717f;
      color: #d2e1dd;
      @if $border-contrast {
        border-color: #dadbdf;
      }
    }
    ```

    ``` scss
    // style.scss
    @use "sass:meta";

    body.dark {
      @include meta.load-css("dark-theme/code",
          $with: ("border-contrast": true));
    }
    ```

    ``` scss
    // dark-theme/_code.sass
    $border-contrast: false !default

    code
      background-color: #6b717f
      color: #d2e1dd
      @if $border-contrast
        border-color: #dadbdf
    ```

    ``` scss
    // style.sass
    @use "sass:meta"

    body.dark
      $configuration: ("border-contrast": true)
      @include meta.load-css("dark-theme/code", $with: $configuration)
    ```

    ``` css
    body.dark code {
      background-color: #6b717f;
      color: #d2e1dd;
      border-color: #dadbdf;
    }
    ```

    ## Functions
- name: meta.mixin-exists
  id: modules/meta#meta.mixin-exists
  summary: Returns whether a mixin named $name exists
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.mixin-exists($name, $module: null)
    mixin-exists($name, $module: null) //=> boolean
    ```

    Returns whether a [mixin](../at-rules/mixin) named `$name` exists.

    If `$module` is `null`, this returns whether a mixin named `$name` without a namespace exists. Otherwise, `$module` must be a string matching the namespace of a [`@use` rule](../at-rules/use) in the current file, in which case this returns whether that module has a mixin named `$name`.

    - [SCSS](#example-12-scss)
    - [Sass](#example-12-sass)

    ``` scss
    @debug meta.mixin-exists("shadow-none"); // false

    @mixin shadow-none {
      box-shadow: none;
    }

    @debug meta.mixin-exists("shadow-none"); // true
    ```

    ``` scss
    @debug meta.mixin-exists("shadow-none")  // false

    @mixin shadow-none
      box-shadow: none


    @debug meta.mixin-exists("shadow-none")  // true
    ```
- name: meta.module-functions
  id: modules/meta#meta.module-functions
  summary: Only Dart Sass currently supports this function
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.module-functions($module) //=> map
    ```

    Compatibility:

    Dart Sass

    since 1.23.0

    LibSass

    ✗

    Ruby Sass

    ✗

    [▶](javascript:;)

    Only Dart Sass currently supports this function.

    Returns all the functions defined in a module, as a map from function names to [function values](../values/functions).

    The `$module` parameter must be a string matching the namespace of a [`@use` rule](../at-rules/use) in the current file.

    - [SCSS](#example-13-scss)
    - [Sass](#example-13-sass)

    ``` scss
    // _functions.scss
    @function pow($base, $exponent) {
      $result: 1;
      @for $_ from 1 through $exponent {
        $result: $result * $base;
      }
      @return $result;
    }
    ```

    ``` scss
    @use "sass:map";
    @use "sass:meta";

    @use "functions";

    @debug meta.module-functions("functions"); // ("pow": get-function("pow"))

    @debug meta.call(map.get(meta.module-variables("functions"), "pow"), 3, 4); // 16
    ```

    ``` scss
    // _functions.sass
    @function pow($base, $exponent)
      $result: 1
      @for $_ from 1 through $exponent
        $result: $result * $base

      @return $result
    ```

    ``` scss
    @use "sass:map"
    @use "sass:meta"

    @use "functions"

    @debug meta.module-functions("functions") // ("pow": get-function("pow"))

    @debug meta.call(map.get(meta.module-variables("functions"), "pow"), 3, 4) // 16
    ```
- name: meta.module-variables
  id: modules/meta#meta.module-variables
  summary: Only Dart Sass currently supports this function
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.module-variables($module) //=> map
    ```

    Compatibility:

    Dart Sass

    since 1.23.0

    LibSass

    ✗

    Ruby Sass

    ✗

    [▶](javascript:;)

    Only Dart Sass currently supports this function.

    Returns all the variables defined in a module, as a map from variable names (without `$`) to the values of those variables.

    The `$module` parameter must be a string matching the namespace of a [`@use` rule](../at-rules/use) in the current file.

    - [SCSS](#example-14-scss)
    - [Sass](#example-14-sass)

    ``` scss
    // _variables.scss
    $hopbush: #c69;
    $midnight-blue: #036;
    $wafer: #e1d7d2;
    ```

    ``` scss
    @use "sass:meta";

    @use "variables";

    @debug meta.module-variables("variables");
    // (
    //   "hopbush": #c69,
    //   "midnight-blue": #036,
    //   "wafer": #e1d7d2
    // )
    ```

    ``` scss
    // _variables.sass
    $hopbush: #c69
    $midnight-blue: #036
    $wafer: #e1d7d2
    ```

    ``` scss
    @use "sass:meta"

    @use "variables"

    @debug meta.module-variables("variables")
    // (
    //   "hopbush": #c69,
    //   "midnight-blue": #036,
    //   "wafer": #e1d7d2
    // )
    ```
- name: meta.type-of
  id: modules/meta#meta.type-of
  summary: Returns the type of $value
  belongs_to: sass:meta
  description: |-
    ``` scss
    meta.type-of($value)
    type-of($value) //=> unquoted string
    ```

    Returns the type of `$value`.

    This can return the following values:

    - [`number`](../values/numbers)
    - [`string`](../values/strings)
    - [`color`](../values/colors)
    - [`list`](../values/lists)
    - [`map`](../values/maps)
    - [`calculation`](../values/calculations)
    - [`bool`](../values/booleans)
    - [`null`](../values/null)
    - [`function`](../values/functions)
    - [`arglist`](../values/lists#argument-lists)

    New possible values may be added in the future. It may return either `list` or `map` for `()`, depending on whether or not it was returned by a [map function](map).

    - [SCSS](#example-15-scss)
    - [Sass](#example-15-sass)

    ``` scss
    @debug meta.type-of(10px); // number
    @debug meta.type-of(10px 20px 30px); // list
    @debug meta.type-of(()); // list
    ```

    ``` scss
    @debug meta.type-of(10px)  // number
    @debug meta.type-of(10px 20px 30px)  // list
    @debug meta.type-of(())  // list
    ```
- name: meta.variable-exists
  id: modules/meta#meta.variable-exists
  summary: Returns whether a variable named $name (without the $) exists in the current scope
  belongs_to: sass:meta
  description: "``` scss\nmeta.variable-exists($name)\nvariable-exists($name) //=> boolean\n```\n\nReturns whether a variable named `$name` (without the `$`) exists in the current [scope](../variables#scope).\n\nSee also [`meta.global-variable-exists()`](#global-variable-exists).\n\n- [SCSS](#example-16-scss)\n- [Sass](#example-16-sass)\n\n``` scss\n@debug meta.variable-exists(\"var1\"); // false\n\n$var1: value;\n@debug meta.variable-exists(\"var1\"); // true\n\nh1 {\n  // $var2 is local.\n  $var2: value;\n  @debug meta.variable-exists(\"var2\"); // true\n}\n```\n\n``` scss\n@debug meta.variable-exists(\"var1\")  // false\n\n$var1: value\n@debug meta.variable-exists(\"var1\")  // true\n\nh1\n  // $var2 is local.\n  $var2: value\n  @debug meta.variable-exists(\"var2\")  // true\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/meta](https://sass-lang.com/documentation/modules/meta)"
- name: Migrator
  id: cli/migrator
  summary: The Sass migrator automatically updates your Sass files to help you move on to the latest and greatest version of the language
  description: "# Migrator\n\n### Page Sections\n\n- [Usage](#usage)\n- [Installation](#installation)\n  - [Overview](#installation)\n  - [Standalone](#standalone)\n  - [npm](#npm)\n  - [Chocolatey](#chocolatey)\n  - [Homebrew](#homebrew)\n- [Global Options](#global-options)\n  - [Overview](#global-options)\n  - [`--migrate-deps`](#migrate-deps)\n  - [`--load-path`](#load-path)\n  - [`--dry-run`](#dry-run)\n    - [Overview](#dry-run)\n    - [`--no-unicode`](#no-unicode)\n  - [`--verbose`](#verbose)\n- [Migrations](#migrations)\n  - [Overview](#migrations)\n  - [Division](#division)\n    - [Overview](#division)\n    - [`--pessimistic`](#pessimistic)\n  - [Module](#module)\n    - [Overview](#module)\n    - [Loading Dependencies](#loading-dependencies)\n    - [`--remove-prefix`](#remove-prefix)\n    - [`--forward`](#forward)\n  - [Namespace](#namespace)\n    - [Overview](#namespace)\n    - [`--rename`](#rename)\n    - [`--force`](#force)\n\nThe Sass migrator automatically updates your Sass files to help you move on to the latest and greatest version of the language. Each of its commands migrates a single feature, to give you as much control as possible over what you update and when.\n\n## Usage\n\nTo use the Sass migrator, tell it [which migration](#migrations) you want to run and what Sass files you want to migrate:\n\n``` highlight\nsass-migrator <migration> <entrypoint.scss...>\n```\n\nBy default, the migrator will only change files that you explicitly pass on the command line. Passing the [`--migrate-deps` option](#migrate-deps) tells the migrator to also change all the stylesheets that are loaded using the [`@use` rule](../at-rules/use), [`@forward` rule](../at-rules/forward), or [`@import` rule](../at-rules/import). And if you want to do a test run to see what changes will be made without actually saving them, you can pass [`--dry-run`](#dry-run)` `[`--verbose`](#verbose) (or `-nv` for short).\n\n``` highlight\n$ cat style.scss\n$body-bg: #000;\n$body-color: #111;\n\n@import \"bootstrap\";\n\n@include media-breakpoint-up(sm) {\n  .navbar {\n    display: block;\n  }\n}\n$ sass-migrator --migrate-deps module style.scss\n$ cat style.scss\n@use \"bootstrap\" with (\n  $body-bg: #000,\n  $body-color: #111\n);\n\n@include bootstrap.media-breakpoint-up(sm) {\n  .navbar {\n    display: block;\n  }\n}\n```\n\n## Installation\n\nYou can install the Sass migrator from most of the same places that you can install [Dart Sass](https://sass-lang.com/dart-sass):\n\n### Standalone\n\nYou can install the Sass migrator on Windows, Mac, or Linux by downloading the package for your operating system [from GitHub](https://github.com/sass/migrator/releases) and [adding it to your `PATH`](https://katiek2.github.io/path-doc/).\n\n### npm\n\nIf you use Node.js, you can also install the Sass migrator using [npm](https://www.npmjs.com) by running\n\n``` highlight\nnpm install -g sass-migrator\n```\n\n### Chocolatey\n\nIf you use [the Chocolatey package manager](https://chocolatey.org) for Windows, you can install the Sass migrator by running\n\n``` highlight\nchoco install sass-migrator\n```\n\n### Homebrew\n\nIf you use [the Homebrew package manager](https://brew.sh) for Mac OS X, you can install Dart Sass by running\n\n``` highlight\nbrew install sass/sass/migrator\n```\n\n## Global Options\n\nThese options are available for all migrators.\n\n### `--migrate-deps`\n\nThis option (abbreviated `-d`) tells the migrator to change not just the stylesheets that are explicitly passed on the command line, but also any stylesheets that they depend on using the [`@use` rule](../at-rules/use), [`@forward` rule](../at-rules/forward), or [`@import` rule](../at-rules/import).\n\n``` highlight\n$ sass-migrator module --verbose style.scss\nMigrating style.scss\n$ sass-migrator module --verbose --migrate-deps style.scss\nMigrating style.scss\nMigrating _theme.scss\nMigrating _fonts.scss\nMigrating _grid.scss\n```\n\n### ⚠️ Heads up!\n\nThe [module migrator](#module) assumes that any stylesheet that is depended on using a [`@use` rule](../at-rules/use) or a [`@forward` rule](../at-rules/forward) has already been migrated to the module system, so it won’t attempt to migrate them, even when the `--migrate-deps` option is passed.\n\n### `--load-path`\n\nThis option (abbreviated `-I`) tells the migrator a [load path](../at-rules/use#load-paths) where it should look for stylesheets. It can be passed multiple times to provide multiple load paths. Earlier load paths will take precedence over later ones.\n\nDependencies loaded from load paths are assumed to be third-party libraries, so the migrator will not migrate them even when the [`--migrate-deps` option](#migrate-deps) is passed.\n\n### `--dry-run`\n\nThis flag (abbreviated `-n`) tells the migrator not to save any changes to disk. It instead prints the list of files that it would have changed. This is commonly paired with the [`--verbose` option](#verbose) to print the contents of the changes that would have been made as well.\n\n``` highlight\n$ sass-migrator module --dry-run --migrate-deps style.scss\nDry run. Logging migrated files instead of overwriting...\n\nstyle.scss\n_theme.scss\n_fonts.scss\n_grid.scss\n```\n\n#### `--no-unicode`\n\nThis flag tells the Sass migrator only to emit ASCII characters to the terminal as part of error messages. By default, or if `--unicode` is passed, the migrator will emit non-ASCII characters for these messages. This flag does not affect the CSS output.\n\n``` highlight\n$ sass-migrator --no-unicode module style.scss\nline 1, column 9 of style.scss: Error: Could not find Sass file at 'typography'.\n  ,\n1 | @import \"typography\";\n  |         ^^^^^^^^^^^^\n  '\nMigration failed!\n$ sass-migrator --unicode module style.scss\nline 1, column 9 of style.scss: Error: Could not find Sass file at 'typography'.\n  ╷\n1 │ @import \"typography\";\n  │         ^^^^^^^^^^^^\n  ╵\nMigration failed!\n```\n\n### `--verbose`\n\nThis flag (abbreviated `-v`) tells the migrator to print extra information to the console. By default, it just prints the name of files that are changed, but when combined with the [`--dry-run` option](#dry-run) it also prints those files’ new contents.\n\n``` highlight\n$ sass-migrator module --verbose --dry-run style.scss\nDry run. Logging migrated files instead of overwriting...\n<==> style.scss\n@use \"bootstrap\" with (\n  $body-bg: #000,\n  $body-color: #111\n);\n\n@include bootstrap.media-breakpoint-up(sm) {\n  .navbar {\n    display: block;\n  }\n}\n$ sass-migrator module --verbose style.scss\nMigrating style.scss\n```\n\n## Migrations\n\n### Division\n\nThis migration converts stylesheets that use [`/` as division](https://sass-lang.com/documentation/breaking-changes/slash-div) to use the built-in `math.div` function instead.\n\n#### `--pessimistic`\n\nBy default, the migrator converts `/` operations to `math.div` even when it isn’t sure that it will be division when evaluated. It only leaves them as-is when it can statically determine that they’re doing something else (such as when there’s no SassScript involved, or when one of the operands is a string). The `math.div` function currently functions identically to the `/` operator, so this is safe to do, but may result in new warnings if one of the arguments to `math.div` at runtime is not a number.\n\nIf you want to avoid this behavior, you can pass the `--pessimistic` flag. With this flag, the migrator will only convert `/` operations that it knows for sure are doing division. This will prevent any unnecessary `math.div` conversions, but it’s likely to leave some division unmigrated if it can’t be statically determined.\n\n### Module\n\nThis migration converts stylesheets that use the old [`@import` rule](../at-rules/import) to load dependencies so that they use the Sass module system via the [`@use` rule](../at-rules/use) instead. It doesn’t just naïvely change `@import`s to `@use`s—it updates stylesheets intelligently so that they keep working the same way they did before, including:\n\n- Adding namespaces to uses of members (variables, mixins, and functions) from other modules.\n\n- Adding new `@use` rules to stylesheets that were using members without importing them.\n\n- Converting overridden default variables to [`with` clauses](../at-rules/use#configuration).\n\n- Automatically removing `-` and `_` prefixes from members that are used from other files (because otherwise they’d be considered [private](../at-rules/use#private-members) and could only be used in the module they’re declared).\n\n- Converting [nested imports](../at-rules/import#nesting) to use the [`meta.load-css()` mixin](../modules/meta#load-css) instead.\n\n### ⚠️ Heads up!\n\nBecause the module migrator may need to modify both member definitions *and* member names, it’s important to either run it with the [`--migrate-deps` option](#migrate-deps) or ensure that you pass it all the stylesheets in your package or application.\n\n``` highlight\n$ cat style.scss\n$body-bg: #000;\n$body-color: #111;\n\n@import \"bootstrap\";\n\n@include media-breakpoint-up(sm) {\n  .navbar {\n    display: block;\n  }\n}\n$ sass-migrator --migrate-deps module style.scss\n$ cat style.scss\n@use \"bootstrap\" with (\n  $body-bg: #000,\n  $body-color: #111\n);\n\n@include bootstrap.media-breakpoint-up(sm) {\n  .navbar {\n    display: block;\n  }\n}\n```\n\n#### Loading Dependencies\n\nThe module migrator needs to be able to read all of the stylesheets depended on by the ones it’s migrating, even if the [`--migrate-deps` option](#migrate-deps) is not passed. If the migrator fails to find a dependency, you’ll get an error.\n\n``` highlight\n$ ls .\nstyle.scss  node_modules\n$ sass-migrator module style.scss\nError: Could not find Sass file at 'dependency'.\n  ,\n1 | @import \"dependency\";\n  |         ^^^^^^^^^^^^\n  '\n  style.scss 1:9  root stylesheet\nMigration failed!\n$ sass-migrator --load-path node_modules module style.scss\n```\n\nIf you use a [load path](../at-rules/use#load-paths) when compiling your stylesheets, make sure to pass that to the migrator using the [`--load-path` option](#load-path).\n\nUnfortunately, the migrator does not support custom importers, but it does have built-in support for resolving URLs starting with `~` by searching in `node_modules`, similar to [what Webpack supports](https://github.com/webpack-contrib/sass-loader#resolving-import-at-rules).\n\n#### `--remove-prefix`\n\nThis option (abbreviated `-p`) takes an identifier prefix to remove from the beginning of all variable, mixin, and function names when they’re migrated. Members that don’t start with this prefix will remain unchanged.\n\nThe [`@import` rule](../at-rules/import) put all top-level members in one global scope, so when it was the standard way of loading stylesheets, everyone was incentivized to add prefixes to all their member names to avoid accidentally redefining some other stylesheet’s. The module system solves this problem, so it’s useful to automatically strip those old prefixes now that they’re unnecessary.\n\n``` highlight\n$ cat style.scss\n@import \"theme\";\n\n@mixin app-inverted {\n  color: $app-bg-color;\n  background-color: $app-color;\n}\n$ sass-migrator --migrate-deps module --remove-prefix=app- style.scss\n$ cat style.scss\n@import \"theme\";\n\n@mixin inverted {\n  color: theme.$bg-color;\n  background-color: theme.$color;\n}\n```\n\nWhen you pass this option, the migrator will also generate an [import-only stylesheet](../at-rules/import#import-only-files) that [forwards](../at-rules/forward) all the members with the prefix added back, to preserve backwards-compatibility for users who were importing the library.\n\nThis option may be passed multiple times, or with multiple values separated by commas. Each prefix will be removed from any members that have it. If a member matches multiple prefixes, the longest matching prefix will be removed.\n\n#### `--forward`\n\nThis option tells the migrator which members to forward using the [`@forward` rule](../at-rules/forward). It supports the following settings:\n\n- `none` (the default) doesn’t forward any members.\n\n- `all` forwards all members except those that started with `-` or `_` in the original stylesheet, since that was commonly used to mark a package-private member before the module system was introduced.\n\n- `prefixed` forwards only members that begin with the prefix passed to the [`--remove-prefix` option](#remove-prefix). This option may only be used in conjunction with the `--remove-prefix` option.\n\nAll files that are passed explicitly on the command line will forward members that are transitively loaded by those files using the `@import` rule. Files loaded using the [`--migrate-deps` option](#migrate-deps) will not forward any new members. This option is particularly useful when migrating a Sass library, because it ensures that users of that library will still be able to access all the members it defines.\n\n``` highlight\n$ cat _index.scss\n@import \"theme\";\n@import \"typography\";\n@import \"components\";\n$ sass-migrator --migrate-deps module --forward=all style.scss\n$ cat _index.scss\n@forward \"theme\";\n@forward \"typography\";\n@forward \"components\";\n```\n\n### Namespace\n\nThis migration allows you to easily change the [namespaces](../at-rules/use#choosing-a-namespace) of the `@use` rules in a stylesheet. This is useful if the namespaces that the module migrator generates to resolve conflicts are non-ideal, or if you don’t want to use the default namespace that Sass determines based on the rule’s URL.\n\n#### `--rename`\n\nYou can tell the migrator which namespace(s) you want it to change by passing expressions to the `--rename` option.\n\nThese expressions are of the form `<old-namespace> to <new-namespace>` or `url <rule-url> to <new-namespace>`. In these expressions, `<old-namespace>` and `<rule-url>` are [regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which match against the entirety of the existing namespace or the `@use` rule’s URL, respectively.\n\nFor simple use cases, this just looks like `--rename 'old to new'`, which would rename a `@use` rule with the namespace `old` to instead be `new`.\n\nHowever, you can also do this to accomplish more complicated renames. For instance, say that you previously had a stylesheet that looked like this:\n\n``` scss\n@import \"components/button/lib/mixins\";\n@import \"components/input/lib/mixins\";\n@import \"components/table/lib/mixins\";\n// ...\n```\n\nSince all of these URLs would have the default namespace `mixins` when migrated to `@use` rules, the module migrator may end up generating something like this:\n\n``` scss\n@use \"components/button/lib/mixins\" as button-lib-mixins;\n@use \"components/input/lib/mixins\" as input-lib-mixins;\n@use \"components/table/lib/mixins\" as table-lib-mixins;\n// ...\n```\n\nThis is valid code since the namespaces don’t conflict, but they’re way more complicated than they need to be. The relevant part of the URL is the component name, so we can use the namespace migrator to extract that part out.\n\nIf we run the namespace migrator with `--rename 'url components/(\\w+)/lib/mixins to \\1'`, we’ll end up with:\n\n``` scss\n@use \"components/button/lib/mixins\" as button;\n@use \"components/input/lib/mixins\" as input;\n@use \"components/table/lib/mixins\" as table;\n// ...\n```\n\nThe rename script here says to find all of the `@use` rules whose URLs look like `components/(\\w+)/lib/mixins` (`\\w+` in a regular expression means to match any word of one or more characters). The `\\1` in the output clause means to substitute in the contents of the first set of parentheses in the regular expression (called a [group](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges)).\n\nIf you wish to apply multiple renames, you can pass the `--rename` option multiple times, or separate them with a semicolon or a line break. Only the first rename that applies to a given rule will be used, so you could pass something like `--rename 'a to b; b to a'` to swap the namespaces `a` and `b`.\n\n#### `--force`\n\nBy default, if two or more `@use` rules have the same namespace after the migration, the migrator will fail, and no changes will be made.\n\nIn this case, you’ll usually want to adjust your `--rename` script to avoid creating conflicts, but if you’d prefer to force the migration, you can instead pass `--force`.\n\nWith `--force`, if any conflicts are encountered, the first `@use` rule will get its preferred namespace, while subsequent `@use` rules with the same preferred namespace will instead have a numerical suffix added to them.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/cli/migrator](https://sass-lang.com/documentation/cli/migrator)"
- name: Namespace Logger
  id: js-api/modules/logger
  summary: A namespace for built-in Loggers
  description: "# Namespace Logger\n\nCompatibility:\n\nDart Sass  \nsince 1.43.0\n\nNode Sass  \n✗\n\nA namespace for built-in [Logger](../interfaces/logger)s.\n\n## Index\n\n### Variables\n\n- [silent](logger#silent)\n\n## Variables\n\n### silent\n\nsilent: [Logger](../interfaces/logger)\n\n- Defined in [js-api-doc/logger/index.d.ts:93](https://github.com/sass/sass/blob/6d42491/js-api-doc/logger/index.d.ts#L93)\n\nA [Logger](../interfaces/logger) that silently ignores all warnings and debug messages.\n\nexample  \n``` js\nconstsass = require('sass');\n\nconstresult = sass.renderSync({\nfile:'input.scss',\nlogger:sass.Logger.silent,\n});\n```\n\n- [Exports](../modules)\n- [Logger](logger)\n- [types](types)\n\n- [silent](logger#silent)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/modules/Logger](https://sass-lang.com/documentation/js-api/modules/Logger)"
- name: Namespace types
  id: js-api/modules/types
  summary: The namespace for value types used in the legacy function API
  description: "# Namespace types\n\nThe namespace for value types used in the legacy function API.\n\ndeprecated  \nThis only works with the legacy [render](../modules#render) and [renderSync](../modules#renderSync) APIs. Use [Value](../classes/value) with [compile](../modules#compile), [compileString](../modules#compileString), [compileAsync](../modules#compileAsync), and [compileStringAsync](../modules#compileStringAsync) instead.\n\n## Index\n\n### Classes\n\n- [Boolean](../classes/types.boolean)\n- [Color](../classes/types.color)\n- [Error](../classes/types.error)\n- [List](../classes/types.list)\n- [Map](../classes/types.map)\n- [Null](../classes/types.null)\n- [Number](../classes/types.number)\n- [String](../classes/types.string)\n\n- [Exports](../modules)\n- [Logger](logger)\n- [types](types)\n\n- [Boolean](../classes/types.boolean)\n- [Color](../classes/types.color)\n- [Error](../classes/types.error)\n- [List](../classes/types.list)\n- [Map](../classes/types.map)\n- [Null](../classes/types.null)\n- [Number](../classes/types.number)\n- [String](../classes/types.string)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/modules/types](https://sass-lang.com/documentation/js-api/modules/types)"
- name: 'null'
  id: values/null
  summary: The value null is the only value of its type
  description: "# null\n\nThe value `null` is the only value of its type. It represents the absence of a value, and is often returned by [functions](../at-rules/function) to indicate the lack of a result.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@use \"sass:map\";\n@use \"sass:string\";\n\n@debug string.index(\"Helvetica Neue\", \"Roboto\"); // null\n@debug map.get((\"large\": 20px), \"small\"); // null\n@debug &; // null\n```\n\n``` scss\n@use \"sass:map\"\n@use \"sass:string\"\n\n@debug string.index(\"Helvetica Neue\", \"Roboto\")  // null\n@debug map.get((\"large\": 20px), \"small\")  // null\n@debug &  // null\n```\n\nIf a [list](lists) contains a `null`, that `null` is omitted from the generated CSS.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n$fonts: (\"serif\": \"Helvetica Neue\", \"monospace\": \"Consolas\");\n\nh3 {\n  font: 18px bold map-get($fonts, \"sans\");\n}\n```\n\n``` scss\n$fonts: (\"serif\": \"Helvetica Neue\", \"monospace\": \"Consolas\")\n\nh3\n  font: 18px bold map-get($fonts, \"sans\")\n```\n\n``` css\nh3 {\n  font: 18px bold;\n}\n```\n\nIf a property value is `null`, that property is omitted entirely.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n$fonts: (\"serif\": \"Helvetica Neue\", \"monospace\": \"Consolas\");\n\nh3 {\n  font: {\n    size: 18px;\n    weight: bold;\n    family: map-get($fonts, \"sans\");\n  }\n}\n```\n\n``` scss\n$fonts: (\"serif\": \"Helvetica Neue\", \"monospace\": \"Consolas\")\n\nh3\n  font:\n    size: 18px\n    weight: bold\n    family: map-get($fonts, \"sans\")\n```\n\n``` css\nh3 {\n  font-size: 18px;\n  font-weight: bold;\n}\n```\n\n`null` is also [*falsey*](../at-rules/control/if#truthiness-and-falsiness), which means it counts as `false` for any rules or [operators](../operators/boolean) that take booleans. This makes it easy to use values that can be `null` as conditions for [`@if`](../at-rules/control/if) and [`if()`](../modules#if).\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n- [CSS](#example-4-css)\n\n``` scss\n@mixin app-background($color) {\n  #{if(&, '&.app-background', '.app-background')} {\n    background-color: $color;\n    color: rgba(#fff, 0.75);\n  }\n}\n\n@include app-background(#036);\n\n.sidebar {\n  @include app-background(#c6538c);\n}\n```\n\n``` scss\n@mixin app-background($color)\n  #{if(&, '&.app-background', '.app-background')}\n    background-color: $color\n    color: rgba(#fff, 0.75)\n\n\n\n@include app-background(#036)\n\n.sidebar\n  @include app-background(#c6538c)\n```\n\n``` css\n.app-background {\n  background-color: #036;\n  color: rgba(255, 255, 255, 0.75);\n}\n\n.sidebar.app-background {\n  background-color: #c6538c;\n  color: rgba(255, 255, 255, 0.75);\n}\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/values/null](https://sass-lang.com/documentation/values/null)"
- name: Numbers
  id: values/numbers
  summary: 'Numbers in Sass have two components: the number itself, and its units'
  description: "# Numbers\n\nNumbers in Sass have two components: the number itself, and its units. For example, in `16px` the number is `16` and the unit is `px`. Numbers can have no units, and they can have complex units. See [Units](#units) below for more details.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug 100; // 100\n@debug 0.8; // 0.8\n@debug 16px; // 16px\n@debug 5px * 2px; // 10px*px (read \"square pixels\")\n```\n\n``` scss\n@debug 100  // 100\n@debug 0.8  // 0.8\n@debug 16px  // 16px\n@debug 5px * 2px  // 10px*px (read \"square pixels\")\n```\n\nSass numbers support the same formats as CSS numbers, including [scientific notation](https://en.wikipedia.org/wiki/Scientific_notation), which is written with an `e` between the number and its power of 10. Because support for scientific notation in browsers has historically been spotty, Sass always compiles it to fully expanded numbers.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n@debug 5.2e3; // 5200\n@debug 6e-2; // 0.06\n```\n\n``` scss\n@debug 5.2e3  // 5200\n@debug 6e-2  // 0.06\n```\n\n### ⚠️ Heads up!\n\nSass doesn’t distinguish between whole numbers and decimals, so for example `math.div(5, 2)` returns `2.5` rather than `2`. This is the same behavior as JavaScript, but different than many other programming languages.\n\n## Units\n\nSass has powerful support for manipulating units based on how [real-world unit calculations](https://en.wikipedia.org/wiki/Unit_of_measurement#Calculations_with_units_of_measurement) work. When two numbers are multiplied, their units are multiplied as well. When one number is divided by another, the result takes its numerator units from the first number and its denominator units from the second. A number can have any number of units in the numerator and/or denominator.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@debug 4px * 6px; // 24px*px (read \"square pixels\")\n@debug math.div(5px, 2s); // 2.5px/s (read \"pixels per second\")\n\n// 3.125px*deg/s*em (read \"pixel-degrees per second-em\")\n@debug 5px * math.div(math.div(30deg, 2s), 24em); \n\n$degrees-per-second: math.div(20deg, 1s);\n@debug $degrees-per-second; // 20deg/s\n@debug math.div(1, $degrees-per-second); // 0.05s/deg\n```\n\n``` scss\n@debug 4px * 6px  // 24px*px (read \"square pixels\")\n@debug math.div(5px, 2s)  // 2.5px/s (read \"pixels per second\")\n\n// 3.125px*deg/s*em (read \"pixel-degrees per second-em\")\n@debug 5px * math.div(math.div(30deg, 2s), 24em)  \n\n$degrees-per-second: math.div(20deg, 1s) \n@debug $degrees-per-second  // 20deg/s\n@debug math.div(1, $degrees-per-second)  // 0.05s/deg\n```\n\n### ⚠️ Heads up!\n\nBecause CSS doesn’t support complex units like square pixels, using a number with complex units as a [property value](../style-rules/declarations) will produce an error. This is a feature in disguise, though; if you aren’t ending up with the right unit, it usually means that something’s wrong with your calculations! And remember, you can always use the [`@debug` rule](../at-rules/debug) to check out the units of any variable or [expression](../syntax/structure#expressions).\n\nSass will automatically convert between compatible units, although which unit it will choose for the result depends on which implementation of Sass you’re using.If you try to combine incompatible units, like `1in + 1em`, Sass will throw an error.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n// CSS defines one inch as 96 pixels.\n@debug 1in + 6px; // 102px or 1.0625in\n\n@debug 1in + 1s;\n//     ^^^^^^^^\n// Error: Incompatible units s and in.\n```\n\n``` scss\n// CSS defines one inch as 96 pixels.\n@debug 1in + 6px  // 102px or 1.0625in\n\n@debug 1in + 1s\n//     ^^^^^^^^\n// Error: Incompatible units s and in.\n```\n\nAs in real-world unit calculations, if the numerator contains units that are compatible with units in the denominator (like `math.div(96px, 1in)`), they’ll cancel out. This makes it easy to define a ratio that you can use for converting between units. In the example below, we set the desired speed to one second per 50 pixels, and then multiply that by the number of pixels the transition covers to get the time it should take.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n- [CSS](#example-5-css)\n\n``` scss\n$transition-speed: math.div(1s, 50px);\n\n@mixin move($left-start, $left-stop) {\n  position: absolute;\n  left: $left-start;\n  transition: left ($left-stop - $left-start) * $transition-speed;\n\n  &:hover {\n    left: $left-stop;\n  }\n}\n\n.slider {\n  @include move(10px, 120px);\n}\n```\n\n``` scss\n$transition-speed: math.div(1s, 50px)\n\n@mixin move($left-start, $left-stop)\n  position: absolute\n  left: $left-start\n  transition: left ($left-stop - $left-start) * $transition-speed\n\n  &:hover\n    left: $left-stop\n\n\n\n.slider\n  @include move(10px, 120px)\n```\n\n``` css\n.slider {\n  position: absolute;\n  left: 10px;\n  transition: left 2.2s;\n}\n.slider:hover {\n  left: 120px;\n}\n```\n\n### ⚠️ Heads up!\n\nIf your arithmetic gives you the wrong unit, you probably need to check your math. You may be leaving off units for a quantity that should have them! Staying unit-clean allows Sass to give you helpful errors when something isn’t right.\n\nYou should especially avoid using interpolation like `#{$number}px`. This doesn’t actually create a number! It creates an [unquoted string](strings#unquoted) that *looks* like a number, but won’t work with any [number operations](../operators/numeric) or [functions](../modules/math). Try to make your math unit-clean so that `$number` already has the unit `px`, or write `$number * 1px`.\n\n### ⚠️ Heads up!\n\nPercentages in Sass work just like every other unit. They are *not* interchangeable with decimals, because in CSS decimals and percentages mean different things. For example, `50%` is a number with `%` as its unit, and Sass considers it different than the number `0.5`.\n\nYou can convert between decimals and percentages using unit arithmetic. `math.div($percentage, 100%)` will return the corresponding decimal, and `$decimal * 100%` will return the corresponding percentage. You can also use the [`math.percentage()` function](../modules/math#percentage) as a more explicit way of writing `$decimal * 100%`.\n\n## Precision\n\nCompatibility (10 Digit Default):\n\nDart Sass  \n✓\n\nLibSass  \n✗\n\nRuby Sass  \nsince 3.5.0\n\n[▶](javascript:;)\n\nLibSass and older versions of Ruby Sass default to 5 digits of numeric precision, but can be configured to use a different number. It’s recommended that users configure them for 10 digits for greater accuracy and forwards-compatibility.\n\nSass numbers support up to 10 digits of precision after the decimal point. This means a few different things:\n\n- Only the first ten digits of a number after the decimal point will be included in the generated CSS.\n\n- Operations like [`==`](../operators/equality) and [`>=`](../operators/relational) will consider two numbers equivalent if they’re the same up to the tenth digit after the decimal point.\n\n- If a number is less than `0.0000000001` away from an integer, it’s considered to be an integer for the purposes of functions like [`list.nth()`](../modules/list#nth) that require integer arguments.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@debug 0.012345678912345; // 0.0123456789\n@debug 0.01234567891 == 0.01234567899; // true\n@debug 1.00000000009; // 1\n@debug 0.99999999991; // 1\n```\n\n``` scss\n@debug 0.012345678912345  // 0.0123456789\n@debug 0.01234567891 == 0.01234567899  // true\n@debug 1.00000000009  // 1\n@debug 0.99999999991  // 1\n```\n\n### 💡 Fun fact:\n\nNumbers are rounded to 10 digits of precision *lazily* when they’re used in a place where precision is relevant. This means that math functions will work with the full number value internally to avoid accumulating extra rounding errors.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/values/numbers](https://sass-lang.com/documentation/values/numbers)"
- name: Numeric Operators
  id: operators/numeric
  summary: Sass supports the standard set of mathematical operators for numbers
  description: "# Numeric Operators\n\n### Page Sections\n\n- [Unary Operators](#unary-operators)\n- [Division](#division)\n  - [Overview](#division)\n  - [Slash-Separated Values](#slash-separated-values)\n- [Units](#units)\n\nSass supports the standard set of mathematical operators for [numbers](../values/numbers). They automatically convert between compatible units.\n\n- `<expression> + <expression>` adds the first [expression](../syntax/structure#expressions)’s value to the second’s.\n- `<expression> - <expression>` subtracts the first [expression](../syntax/structure#expressions)’s value from the second’s.\n- `<expression> * <expression>` multiplies the first [expression](../syntax/structure#expressions)’s value by the second’s.\n- `<expression> % <expression>` returns the remainder of the first [expression](../syntax/structure#expressions)’s value divided by the second’s. This is known as the [*modulo* operator](https://en.wikipedia.org/wiki/Modulo_operation).\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug 10s + 15s; // 25s\n@debug 1in - 10px; // 0.8958333333in\n@debug 5px * 3px; // 15px*px\n@debug 1in % 9px; // 0.0625in\n```\n\n``` scss\n@debug 10s + 15s  // 25s\n@debug 1in - 10px  // 0.8958333333in\n@debug 5px * 3px  // 15px*px\n@debug 1in % 9px  // 0.0625in\n```\n\nUnitless numbers can be used with numbers of any unit.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n@debug 100px + 50; // 150px\n@debug 4s * 10; // 40s\n```\n\n``` scss\n@debug 100px + 50  // 150px\n@debug 4s * 10  // 40s\n```\n\nNumbers with incompatible units can’t be used with addition, subtraction, or modulo.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@debug 100px + 10s;\n//     ^^^^^^^^^^^\n// Error: Incompatible units px and s.\n```\n\n``` scss\n@debug 100px + 10s\n//     ^^^^^^^^^^^\n// Error: Incompatible units px and s.\n```\n\n## Unary Operators\n\nYou can also write `+` and `-` as unary operators, which take only one value:\n\n- `+<expression>` returns the expression’s value without changing it.\n- `-<expression>` returns the negative version of the expression’s value.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n@debug +(5s + 7s); // 12s\n@debug -(50px + 30px); // -80px\n@debug -(10px - 15px); // 5px\n```\n\n``` scss\n@debug +(5s + 7s)  // 12s\n@debug -(50px + 30px)  // -80px\n@debug -(10px - 15px)  // 5px\n```\n\n### ⚠️ Heads up!\n\nBecause `-` can refer to both subtraction and unary negation, it can be confusing which is which in a space-separated list. To be safe:\n\n- Always write spaces on both sides of `-` when subtracting.\n- Write a space before `-` but not after for a negative number or a unary negation.\n- Wrap unary negation in parentheses if it’s in a space-separated list.\n\nThe different meanings of `-` in Sass take precedence in the following order:\n\n1.  `-` as part of an identifier. The only exception are units; Sass normally allows any valid identifier to be used as an identifier, but units may not contain a hyphen followed by a digit.\n2.  `-` between an expression and a literal number with no whitespace, which is parsed as subtraction.\n3.  `-` at the beginning of a literal number, which is parsed as a negative number.\n4.  `-` between two numbers regardless of whitespace, which is parsed as subtraction.\n5.  `-` before a value other than a literal number, which is parsed as unary negation.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n@debug a-1; // a-1\n@debug 5px-3px; // 2px\n@debug 5-3; // 2\n@debug 1 -2 3; // 1 -2 3\n\n$number: 2;\n@debug 1 -$number 3; // -1 3\n@debug 1 (-$number) 3; // 1 -2 3\n```\n\n``` scss\n@debug a-1  // a-1\n@debug 5px-3px  // 2px\n@debug 5-3  // 2\n@debug 1 -2 3  // 1 -2 3\n\n$number: 2\n@debug 1 -$number 3  // -1 3\n@debug 1 (-$number) 3  // 1 -2 3\n```\n\n## Division\n\nCompatibility (math.div()):\n\nDart Sass  \nsince 1.33.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nUnlike other mathematical operations, division in Sass is done with the [`math.div()`](../modules/math#div) function. Although many programming languages use `/` as a division operator, in CSS `/` is used as a separator (as in `font: 15px/32px` or `hsl(120 100% 50% / 0.8)`). While Sass does support the use of `/` as a division operator, this is deprecated and [will be removed](https://sass-lang.com/documentation/breaking-changes/slash-div) in a future version.\n\n### Slash-Separated Values\n\nFor the time being while Sass still supports `/` as a division operator, it has to have a way to disambiguate between `/` as a separator and `/` as division. In order to make this work, if two numbers are separated by `/`, Sass will print the result as slash-separated instead of divided unless one of these conditions is met:\n\n- Either expression is anything other than a literal number.\n- The result is stored in a variable or returned by a function.\n- The operation is surrounded by parentheses, unless those parentheses are outside a list that contains the operation.\n- The result is used as part of another operation (other than `/`).\n\nYou can use \\[`list.slash()`\\] to force `/` to be used as a separator.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@use \"sass:list\";\n\n@debug 15px / 30px; // 15px/30px\n@debug (10px + 5px) / 30px; // 0.5\n@debug list.slash(10px + 5px, 30px); // 15px/30px\n\n$result: 15px / 30px;\n@debug $result; // 0.5\n\n@function fifteen-divided-by-thirty() {\n  @return 15px / 30px;\n}\n@debug fifteen-divided-by-thirty(); // 0.5\n\n@debug (15px/30px); // 0.5\n@debug (bold 15px/30px sans-serif); // bold 15px/30px sans-serif\n@debug 15px/30px + 1; // 1.5\n```\n\n``` scss\n@use \"sass:list\";\n\n@debug 15px / 30px  // 15px/30px\n@debug (10px + 5px) / 30px  // 0.5\n@debug list.slash(10px + 5px, 30px)  // 15px/30px\n\n$result: 15px / 30px\n@debug $result  // 0.5\n\n@function fifteen-divided-by-thirty()\n  @return 15px / 30px\n\n@debug fifteen-divided-by-thirty()  // 0.5\n\n@debug (15px/30px)  // 0.5\n@debug (bold 15px/30px sans-serif)  // bold 15px/30px sans-serif\n@debug 15px/30px + 1  // 1.5\n```\n\n## Units\n\nSass has powerful support for manipulating units based on how [real-world unit calculations](https://en.wikipedia.org/wiki/Unit_of_measurement#Calculations_with_units_of_measurement) work. When two numbers are multiplied, their units are multiplied as well. When one number is divided by another, the result takes its numerator units from the first number and its denominator units from the second. A number can have any number of units in the numerator and/or denominator.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n\n``` scss\n@debug 4px * 6px; // 24px*px (read \"square pixels\")\n@debug math.div(5px, 2s); // 2.5px/s (read \"pixels per second\")\n\n// 3.125px*deg/s*em (read \"pixel-degrees per second-em\")\n@debug 5px * math.div(math.div(30deg, 2s), 24em); \n\n$degrees-per-second: math.div(20deg, 1s);\n@debug $degrees-per-second; // 20deg/s\n@debug math.div(1, $degrees-per-second); // 0.05s/deg\n```\n\n``` scss\n@debug 4px * 6px  // 24px*px (read \"square pixels\")\n@debug math.div(5px, 2s)  // 2.5px/s (read \"pixels per second\")\n\n// 3.125px*deg/s*em (read \"pixel-degrees per second-em\")\n@debug 5px * math.div(math.div(30deg, 2s), 24em)  \n\n$degrees-per-second: math.div(20deg, 1s) \n@debug $degrees-per-second  // 20deg/s\n@debug math.div(1, $degrees-per-second)  // 0.05s/deg\n```\n\n### ⚠️ Heads up!\n\nBecause CSS doesn’t support complex units like square pixels, using a number with complex units as a [property value](../style-rules/declarations) will produce an error. This is a feature in disguise, though; if you aren’t ending up with the right unit, it usually means that something’s wrong with your calculations! And remember, you can always use the [`@debug` rule](../at-rules/debug) to check out the units of any variable or [expression](../syntax/structure#expressions).\n\nSass will automatically convert between compatible units, although which unit it will choose for the result depends on which implementation of Sass you’re using.If you try to combine incompatible units, like `1in + 1em`, Sass will throw an error.\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n\n``` scss\n// CSS defines one inch as 96 pixels.\n@debug 1in + 6px; // 102px or 1.0625in\n\n@debug 1in + 1s;\n//     ^^^^^^^^\n// Error: Incompatible units s and in.\n```\n\n``` scss\n// CSS defines one inch as 96 pixels.\n@debug 1in + 6px  // 102px or 1.0625in\n\n@debug 1in + 1s\n//     ^^^^^^^^\n// Error: Incompatible units s and in.\n```\n\nAs in real-world unit calculations, if the numerator contains units that are compatible with units in the denominator (like `math.div(96px, 1in)`), they’ll cancel out. This makes it easy to define a ratio that you can use for converting between units. In the example below, we set the desired speed to one second per 50 pixels, and then multiply that by the number of pixels the transition covers to get the time it should take.\n\n- [SCSS](#example-9-scss)\n- [Sass](#example-9-sass)\n- [CSS](#example-9-css)\n\n``` scss\n$transition-speed: math.div(1s, 50px);\n\n@mixin move($left-start, $left-stop) {\n  position: absolute;\n  left: $left-start;\n  transition: left ($left-stop - $left-start) * $transition-speed;\n\n  &:hover {\n    left: $left-stop;\n  }\n}\n\n.slider {\n  @include move(10px, 120px);\n}\n```\n\n``` scss\n$transition-speed: math.div(1s, 50px)\n\n@mixin move($left-start, $left-stop)\n  position: absolute\n  left: $left-start\n  transition: left ($left-stop - $left-start) * $transition-speed\n\n  &:hover\n    left: $left-stop\n\n\n\n.slider\n  @include move(10px, 120px)\n```\n\n``` css\n.slider {\n  position: absolute;\n  left: 10px;\n  transition: left 2.2s;\n}\n.slider:hover {\n  left: 120px;\n}\n```\n\n### ⚠️ Heads up!\n\nIf your arithmetic gives you the wrong unit, you probably need to check your math. You may be leaving off units for a quantity that should have them! Staying unit-clean allows Sass to give you helpful errors when something isn’t right.\n\nYou should especially avoid using interpolation like `#{$number}px`. This doesn’t actually create a number! It creates an [unquoted string](../values/strings#unquoted) that *looks* like a number, but won’t work with any [number operations](numeric) or [functions](../modules/math). Try to make your math unit-clean so that `$number` already has the unit `px`, or write `$number * 1px`.\n\n### ⚠️ Heads up!\n\nPercentages in Sass work just like every other unit. They are *not* interchangeable with decimals, because in CSS decimals and percentages mean different things. For example, `50%` is a number with `%` as its unit, and Sass considers it different than the number `0.5`.\n\nYou can convert between decimals and percentages using unit arithmetic. `math.div($percentage, 100%)` will return the corresponding decimal, and `$decimal * 100%` will return the corresponding percentage. You can also use the [`math.percentage()` function](../modules/math#percentage) as a more explicit way of writing `$decimal * 100%`.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/operators/numeric](https://sass-lang.com/documentation/operators/numeric)"
- name: opacify
  id: modules/color#opacify
  summary: Makes $color more opaque
  belongs_to: sass:color
  description: |-
    ``` scss
    opacify($color, $amount)
    fade-in($color, $amount) //=> color
    ```

    Makes `$color` more opaque.

    The `$amount` must be a number between `0` and `1` (inclusive). Increases the alpha channel of `$color` by that amount.

    ### ⚠️ Heads up!

    The `opacify()` function increases the alpha channel by a fixed amount, which is often not the desired effect. To make a color a certain percentage more opaque than it was before, use [`scale()`](#scale) instead.

    Because `opacify()` is usually not the best way to make a color more opaque, it’s not included directly in the new module system. However, if you have to preserve the existing behavior, `opacify($color, $amount)` can be written [`adjust($color, $alpha: -$amount)`](#adjust).

    - [SCSS](#example-22-scss)
    - [Sass](#example-22-sass)

    ``` scss
    // rgba(#036, 0.7) has alpha 0.7, so when opacify() adds 0.3 it returns a fully
    // opaque color.
    @debug opacify(rgba(#036, 0.7), 0.3); // #036

    // scale() instead makes it 30% more opaque than it was originally.
    @debug color.scale(rgba(#036, 0.7), $alpha: 30%); // rgba(0, 51, 102, 0.79)
    ```

    ``` scss
    // rgba(#036, 0.7) has alpha 0.7, so when opacify() adds 0.3 it returns a fully
    // opaque color.
    @debug opacify(rgba(#036, 0.7), 0.3)  // #036

    // scale() instead makes it 30% more opaque than it was originally.
    @debug color.scale(rgba(#036, 0.7), $alpha: 30%)  // rgba(0, 51, 102, 0.79)
    ```

    - [SCSS](#example-23-scss)
    - [Sass](#example-23-sass)

    ``` scss
    @debug opacify(rgba(#6b717f, 0.5), 0.2); // rgba(107, 113, 127, 0.7)
    @debug fade-in(rgba(#e1d7d2, 0.5), 0.4); // rgba(225, 215, 210, 0.9)
    @debug opacify(rgba(#036, 0.7), 0.3); // #036
    ```

    ``` scss
    @debug opacify(rgba(#6b717f, 0.5), 0.2)  // rgba(107, 113, 127, 0.7)
    @debug fade-in(rgba(#e1d7d2, 0.5), 0.4)  // rgba(225, 215, 210, 0.9)
    @debug opacify(rgba(#036, 0.7), 0.3)  // #036
    ```
- name: Operators
  id: operators
  summary: Sass supports a handful of useful operators for working with different values
  description: "# Operators\n\nSass supports a handful of useful `operators` for working with different values. These include the standard mathematical operators like `+` and `*`, as well as operators for various other types:\n\n- [`==` and `!=`](operators/equality) are used to check if two values are the same.\n- [`+`, `-`, `*`, `/`, and `%`](operators/numeric) have their usual mathematical meaning for numbers, with special behaviors for units that matches the use of units in scientific math.\n- [`<`, `<=`, `>`, and `>=`](operators/relational) check whether two numbers are greater or less than one another.\n- [`and`, `or`, and `not`](operators/boolean) have the usual boolean behavior. Sass considers every value “true” except for `false` and `null`.\n- [`+`, `-`, and `/`](operators/string) can be used to concatenate strings.\n\n### ⚠️ Heads up!\n\nEarly on in Sass’s history, it added support for mathematical operations on [colors](values/colors). These operations operated on each of the colors’ RGB channels separately, so adding two colors would produce a color with the sum of their red channels as its red channel and so on.\n\nThis behavior wasn’t very useful, since it channel-by-channel RGB arithmetic didn’t correspond well to how humans perceive color. [Color functions](modules/color) were added which are much more useful, and color operations were deprecated. They’re still supported in LibSass and Ruby Sass, but they’ll produce warnings and users are strongly encouraged to avoid them.\n\n## Order of Operations\n\nSass has a pretty standard [order of operations](https://en.wikipedia.org/wiki/Order_of_operations#Programming_languages), from tightest to loosest:\n\n1.  The unary operators [`not`](operators/boolean), [`+`, `-`](operators/numeric#unary-operators), and [`/`](operators/string#unary-operators).\n2.  The [`*`, `/`, and `%` operators](operators/numeric).\n3.  The [`+` and `-` operators](operators/numeric).\n4.  The [`>`, `>=`, `<` and `<=` operators](operators/relational).\n5.  The [`==` and `!=` operators](operators/equality).\n6.  The [`and` operator](operators/boolean).\n7.  The [`or` operator](operators/boolean).\n8.  The [`=` operator](#single-equals), when it’s available.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug 1 + 2 * 3 == 1 + (2 * 3); // true\n@debug true or false and false == true or (false and false); // true\n```\n\n``` scss\n@debug 1 + 2 * 3 == 1 + (2 * 3)  // true\n@debug true or false and false == true or (false and false)  // true\n```\n\n### Parentheses\n\nYou can explicitly control the order of operations using parentheses. An operation inside parentheses is always evaluated before any operations outside of them. Parentheses can even be nested, in which case the innermost parentheses will be evaluated first.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n@debug (1 + 2) * 3; // 9\n@debug ((1 + 2) * 3 + 4) * 5; // 65\n```\n\n``` scss\n@debug (1 + 2) * 3  // 9\n@debug ((1 + 2) * 3 + 4) * 5  // 65\n```\n\n## Single Equals\n\nSass supports a special `=` operator that’s only allowed in function arguments, which just creates an [unquoted string](values/strings#unquoted) with its two operands separated by `=`. This exists for backwards-compatibility with very old IE-only syntax.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n.transparent-blue {\n  filter: chroma(color=#0000ff);\n}\n```\n\n``` scss\n.transparent-blue\n  filter: chroma(color=#0000ff)\n```\n\n``` css\n.transparent-blue {\n  filter: chroma(color=#0000ff);\n}\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/operators](https://sass-lang.com/documentation/operators)"
- name: Parent Selector
  id: style-rules/parent-selector
  summary: The parent selector, &, is a special selector invented by Sass that’s used in nested selectors to refer to the outer selector
  description: "# Parent Selector\n\nThe parent selector, `&`, is a special selector invented by Sass that’s used in [nested selectors](../style-rules#nesting) to refer to the outer selector. It makes it possible to re-use the outer selector in more complex ways, like adding a [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) or adding a selector *before* the parent.\n\nWhen a parent selector is used in an inner selector, it’s replaced with the corresponding outer selector. This happens instead of the normal nesting behavior.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n.alert {\n  // The parent selector can be used to add pseudo-classes to the outer\n  // selector.\n  &:hover {\n    font-weight: bold;\n  }\n\n  // It can also be used to style the outer selector in a certain context, such\n  // as a body set to use a right-to-left language.\n  [dir=rtl] & {\n    margin-left: 0;\n    margin-right: 10px;\n  }\n\n  // You can even use it as an argument to pseudo-class selectors.\n  :not(&) {\n    opacity: 0.8;\n  }\n}\n```\n\n``` scss\n.alert\n  // The parent selector can be used to add pseudo-classes to the outer\n  // selector.\n  &:hover\n    font-weight: bold\n\n\n  // It can also be used to style the outer selector in a certain context, such\n  // as a body set to use a right-to-left language.\n  [dir=rtl] &\n    margin-left: 0\n    margin-right: 10px\n\n\n  // You can even use it as an argument to pseudo-class selectors.\n  :not(&)\n    opacity: 0.8\n```\n\n``` css\n.alert:hover {\n  font-weight: bold;\n}\n[dir=rtl] .alert {\n  margin-left: 0;\n  margin-right: 10px;\n}\n:not(.alert) {\n  opacity: 0.8;\n}\n```\n\n### ⚠️ Heads up!\n\nBecause the parent selector could be replaced by a type selector like `h1`, it’s only allowed at the beginning of compound selectors where a type selector would also be allowed. For example, `span&` is not allowed.\n\nWe’re looking into loosening this restriction, though. If you’d like to help make that happen, check out [this GitHub issue](https://github.com/sass/sass/issues/1425).\n\n## Adding Suffixes\n\nYou can also use the parent selector to add extra suffixes to the outer selector. This is particularly useful when using a methodology like [BEM](http://getbem.com/) that uses highly structured class names. As long as the outer selector ends with an alphanumeric name (like class, ID, and element selectors), you can use the parent selector to append additional text.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n.accordion {\n  max-width: 600px;\n  margin: 4rem auto;\n  width: 90%;\n  font-family: \"Raleway\", sans-serif;\n  background: #f4f4f4;\n\n  &__copy {\n    display: none;\n    padding: 1rem 1.5rem 2rem 1.5rem;\n    color: gray;\n    line-height: 1.6;\n    font-size: 14px;\n    font-weight: 500;\n\n    &--open {\n      display: block;\n    }\n  }\n}\n```\n\n``` scss\n.accordion\n  max-width: 600px\n  margin: 4rem auto\n  width: 90%\n  font-family: \"Raleway\", sans-serif\n  background: #f4f4f4\n\n  &__copy\n    display: none\n    padding: 1rem 1.5rem 2rem 1.5rem\n    color: gray\n    line-height: 1.6\n    font-size: 14px\n    font-weight: 500\n\n    &--open\n      display: block\n```\n\n``` css\n.accordion {\n  max-width: 600px;\n  margin: 4rem auto;\n  width: 90%;\n  font-family: \"Raleway\", sans-serif;\n  background: #f4f4f4;\n}\n.accordion__copy {\n  display: none;\n  padding: 1rem 1.5rem 2rem 1.5rem;\n  color: gray;\n  line-height: 1.6;\n  font-size: 14px;\n  font-weight: 500;\n}\n.accordion__copy--open {\n  display: block;\n}\n```\n\n## In SassScript\n\nThe parent selector can also be used within SassScript. It’s a special expression that returns the current parent selector in the same format used by [selector functions](../modules/selector#selector-values): a comma-separated list (the selector list) that contains space-separated lists (the complex selectors) that contain unquoted strings (the compound selectors).\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n.main aside:hover,\n.sidebar p {\n  parent-selector: &;\n  // => ((unquote(\".main\") unquote(\"aside:hover\")),\n  //     (unquote(\".sidebar\") unquote(\"p\")))\n}\n```\n\n``` scss\n.main aside:hover,\n.sidebar p\n  parent-selector: &\n  // => ((unquote(\".main\") unquote(\"aside:hover\")),\n  //     (unquote(\".sidebar\") unquote(\"p\")))\n```\n\n``` css\n.main aside:hover,\n.sidebar p {\n  parent-selector: .main aside:hover, .sidebar p;\n}\n```\n\nIf the `&` expression is used outside any style rules, it returns `null`. Since `null` is [falsey](../at-rules/control/if#truthiness-and-falsiness), this means you can easily use it to determine whether a mixin is being called in a style rule or not.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n- [CSS](#example-4-css)\n\n``` scss\n@mixin app-background($color) {\n  #{if(&, '&.app-background', '.app-background')} {\n    background-color: $color;\n    color: rgba(#fff, 0.75);\n  }\n}\n\n@include app-background(#036);\n\n.sidebar {\n  @include app-background(#c6538c);\n}\n```\n\n``` scss\n@mixin app-background($color)\n  #{if(&, '&.app-background', '.app-background')}\n    background-color: $color\n    color: rgba(#fff, 0.75)\n\n\n\n@include app-background(#036)\n\n.sidebar\n  @include app-background(#c6538c)\n```\n\n``` css\n.app-background {\n  background-color: #036;\n  color: rgba(255, 255, 255, 0.75);\n}\n\n.sidebar.app-background {\n  background-color: #c6538c;\n  color: rgba(255, 255, 255, 0.75);\n}\n```\n\n### Advanced Nesting\n\nYou can use `&` as a normal SassScript expression, which means you can pass it to functions or include it in interpolation—even in other selectors! Using it in combination with [selector functions](../modules/selector#selector-values) and the [`@at-root` rule](../at-rules/at-root) allows you to nest selectors in very powerful ways.\n\nFor example, suppose you want to write a selector that matches the outer selector *and* an element selector. You could write a mixin like this one that uses the [`selector.unify()` function](../modules/selector#unify) to combine `&` with a user’s selector.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n- [CSS](#example-5-css)\n\n``` scss\n@use \"sass:selector\";\n\n@mixin unify-parent($child) {\n  @at-root #{selector.unify(&, $child)} {\n    @content;\n  }\n}\n\n.wrapper .field {\n  @include unify-parent(\"input\") {\n    /* ... */\n  }\n  @include unify-parent(\"select\") {\n    /* ... */\n  }\n}\n```\n\n``` scss\n@use \"sass:selector\"\n\n@mixin unify-parent($child)\n  @at-root #{selector.unify(&, $child)}\n    @content\n\n\n\n.wrapper .field\n  @include unify-parent(\"input\")\n    /* ... */\n\n  @include unify-parent(\"select\")\n    /* ... */\n```\n\n``` css\n.wrapper input.field {\n  /* ... */\n}\n\n.wrapper select.field {\n  /* ... */\n}\n```\n\n### ⚠️ Heads up!\n\nWhen Sass is nesting selectors, it doesn’t know what interpolation was used to generate them. This means it will automatically add the outer selector to the inner selector *even if* you used `&` as a SassScript expression. That’s why you need to explicitly use the [`@at-root` rule](../at-rules/at-root) to tell Sass not to include the outer selector.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/style-rules/parent-selector](https://sass-lang.com/documentation/style-rules/parent-selector)"
- name: Parsing a Stylesheet
  id: syntax/parsing
  summary: A Sass stylesheet is parsed from a sequence of Unicode code points
  description: "# Parsing a Stylesheet\n\nA Sass stylesheet is parsed from a sequence of Unicode code points. It's parsed directly, without first being converted to a token stream.\n\n## Input Encoding\n\nCompatibility:\n\nDart Sass  \n✗\n\nLibSass  \n✓\n\nRuby Sass  \n✓\n\n[▶](javascript:;)\n\nDart Sass currently *only* supports the UTF-8 encoding. As such, it’s safest to encode all Sass stylesheets as UTF-8.\n\nIt’s often the case that a document is initially available only as a sequence of bytes, which must be decoded into Unicode. Sass performs this decoding as follows:\n\n- If the sequence of bytes begins with the UTF-8 or UTF-16 encoding of U+FEFF BYTE ORDER MARK, the corresponding encoding is used.\n\n- If the sequence of bytes begins with the plain ASCII string `@charset`, Sass determines the encoding using step 2 of the CSS algorithm for [determining the fallback encoding](https://drafts.csswg.org/css-syntax-3/#input-byte-stream).\n\n- Otherwise, UTF-8 is used.\n\n## Parse Errors\n\nWhen Sass encounters invalid syntax in a stylesheet, parsing will fail and an error will be presented to the user with information about the location of the invalid syntax and the reason it was invalid.\n\nNote that this is different than CSS, which specifies how to recover from most errors rather than failing immediately. This is one of the few cases where SCSS isn’t *strictly* a superset of CSS. However, it’s much more useful to Sass users to see errors immediately, rather than having them passed through to the CSS output.\n\nThe location of parse errors can be accessed through implementation-specific APIs. For example, in Dart Sass you can access [`SassException.span`](https://pub.dartlang.org/documentation/sass/latest/sass/SassException/span.html), and in Node Sass’s and Dart Sass’s JS API you can access the [`file`, `line`, and `column`](https://github.com/sass/node-sass#error-object) properties.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/syntax/parsing](https://sass-lang.com/documentation/syntax/parsing)"
- name: Placeholder Selectors
  id: style-rules/placeholder-selectors
  summary: Sass has a special kind of selector known as a “placeholder”. It looks and acts a lot like a class selector, but it starts with a % and it's not included in the CSS output
  description: "# Placeholder Selectors\n\nSass has a special kind of selector known as a “placeholder”. It looks and acts a lot like a class selector, but it starts with a `%` and it's not included in the CSS output. In fact, any complex selector (the ones between the commas) that even *contains* a placeholder selector isn't included in the CSS, nor is any style rule whose selectors all contain placeholders.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n.alert:hover, %strong-alert {\n  font-weight: bold;\n}\n\n%strong-alert:hover {\n  color: red;\n}\n```\n\n``` scss\n.alert:hover, %strong-alert\n  font-weight: bold\n\n\n%strong-alert:hover \n  color: red\n```\n\n``` css\n.alert:hover {\n  font-weight: bold;\n}\n```\n\nWhat’s the use of a selector that isn’t emitted? It can still be [extended](../at-rules/extend)! Unlike class selectors, placeholders don’t clutter up the CSS if they aren’t extended and they don’t mandate that users of a library use specific class names for their HTML.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n%toolbelt {\n  box-sizing: border-box;\n  border-top: 1px rgba(#000, .12) solid;\n  padding: 16px 0;\n  width: 100%;\n\n  &:hover { border: 2px rgba(#000, .5) solid; }\n}\n\n.action-buttons {\n  @extend %toolbelt;\n  color: #4285f4;\n}\n\n.reset-buttons {\n  @extend %toolbelt;\n  color: #cddc39;\n}\n```\n\n``` scss\n%toolbelt\n  box-sizing: border-box\n  border-top: 1px rgba(#000, .12) solid\n  padding: 16px 0\n  width: 100%\n\n  &:hover\n    border: 2px rgba(#000, .5) solid\n\n.action-buttons\n  @extend %toolbelt\n  color: #4285f4\n\n\n.reset-buttons\n  @extend %toolbelt\n  color: #cddc39\n```\n\n``` css\n.action-buttons, .reset-buttons {\n  box-sizing: border-box;\n  border-top: 1px rgba(0, 0, 0, 0.12) solid;\n  padding: 16px 0;\n  width: 100%;\n}\n.action-buttons:hover, .reset-buttons:hover {\n  border: 2px rgba(0, 0, 0, 0.5) solid;\n}\n\n.action-buttons {\n  color: #4285f4;\n}\n\n.reset-buttons {\n  color: #cddc39;\n}\n```\n\nPlaceholder selectors are useful when writing a Sass library where each style rule may or may not be used. As a rule of thumb, if you’re writing a stylesheet just for your own app, it’s often better to just extend a class selector if one is available.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/style-rules/placeholder-selectors](https://sass-lang.com/documentation/style-rules/placeholder-selectors)"
- name: Property Declarations
  id: style-rules/declarations
  summary: In Sass as in CSS, property declarations define how elements that match a selector are styled
  description: "# Property Declarations\n\n### Page Sections\n\n- [Interpolation](#interpolation)\n- [Nesting](#nesting)\n- [Hidden Declarations](#hidden-declarations)\n- [Custom Properties](#custom-properties)\n\nIn Sass as in CSS, property declarations define how elements that match a selector are styled. But Sass adds extra features to make them easier to write and to automate. First and foremost, a declaration's value can be any [SassScript expression](../syntax/structure#expressions), which will be evaluated and included in the result.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n.circle {\n  $size: 100px;\n  width: $size;\n  height: $size;\n  border-radius: $size * 0.5;\n}\n```\n\n``` scss\n.circle\n  $size: 100px\n  width: $size\n  height: $size\n  border-radius: $size * 0.5\n```\n\n``` css\n.circle {\n  width: 100px;\n  height: 100px;\n  border-radius: 50px;\n}\n```\n\n## Interpolation\n\nA property’s name can include [interpolation](../interpolation), which makes it possible to dynamically generate properties as needed. You can even interpolate the entire property name!\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n@mixin prefix($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    -#{$prefix}-#{$property}: $value;\n  }\n  #{$property}: $value;\n}\n\n.gray {\n  @include prefix(filter, grayscale(50%), moz webkit);\n}\n```\n\n``` scss\n@mixin prefix($property, $value, $prefixes)\n  @each $prefix in $prefixes\n    -#{$prefix}-#{$property}: $value\n\n  #{$property}: $value\n\n\n.gray\n  @include prefix(filter, grayscale(50%), moz webkit)\n```\n\n``` css\n.gray {\n  -moz-filter: grayscale(50%);\n  -webkit-filter: grayscale(50%);\n  filter: grayscale(50%);\n}\n```\n\n## Nesting\n\nMany CSS properties start with the same prefix that acts as a kind of namespace. For example, `font-family`, `font-size`, and `font-weight` all start with `font-`. Sass makes this easier and less redundant by allowing property declarations to be nested. The outer property names are added to the inner, separated by a hyphen.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n.enlarge {\n  font-size: 14px;\n  transition: {\n    property: font-size;\n    duration: 4s;\n    delay: 2s;\n  }\n\n  &:hover { font-size: 36px; }\n}\n```\n\n``` scss\n.enlarge\n  font-size: 14px\n  transition:\n    property: font-size\n    duration: 4s\n    delay: 2s\n\n  &:hover\n    font-size: 36px\n```\n\n``` css\n.enlarge {\n  font-size: 14px;\n  transition-property: font-size;\n  transition-duration: 4s;\n  transition-delay: 2s;\n}\n.enlarge:hover {\n  font-size: 36px;\n}\n```\n\nSome of these CSS properties have shorthand versions that use the namespace as the property name. For these, you can write both the shorthand value *and* the more explicit nested versions.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n- [CSS](#example-4-css)\n\n``` scss\n.info-page {\n  margin: auto {\n    bottom: 10px;\n    top: 2px;\n  }\n}\n```\n\n``` scss\n.info-page\n  margin: auto\n    bottom: 10px\n    top: 2px\n```\n\n``` css\n.info-page {\n  margin: auto;\n  margin-bottom: 10px;\n  margin-top: 2px;\n}\n```\n\n## Hidden Declarations\n\nSometimes you only want a property declaration to show up some of the time. If a declaration’s value is [`null`](../values/null) or an empty [unquoted string](../values/strings#unquoted), Sass won’t compile that declaration to CSS at all.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n- [CSS](#example-5-css)\n\n``` scss\n$rounded-corners: false;\n\n.button {\n  border: 1px solid black;\n  border-radius: if($rounded-corners, 5px, null);\n}\n```\n\n``` scss\n$rounded-corners: false\n\n.button\n  border: 1px solid black\n  border-radius: if($rounded-corners, 5px, null)\n```\n\n``` css\n.button {\n  border: 1px solid black;\n}\n```\n\n## Custom Properties\n\nCompatibility (SassScript Syntax):\n\nDart Sass  \n✓\n\nLibSass  \nsince 3.5.0\n\nRuby Sass  \nsince 3.5.0\n\n[▶](javascript:;)\n\nOlder versions of LibSass and Ruby Sass parsed custom property declarations just like any other property declaration, allowing the full range of SassScript expressions as values. Even when using these versions, it’s recommended that you use interpolation to inject SassScript values for forwards-compatibility.\n\nSee [the breaking change page](https://sass-lang.com/documentation/breaking-changes/css-vars) for more details.\n\n[CSS custom properties](https://developer.mozilla.org/en-US/docs/Web/CSS/--*), also known as CSS variables, have an unusual declaration syntax: they allow almost any text at all in their declaration values. What’s more, those values are accessible to JavaScript, so any value might potentially be relevant to the user. This includes values that would normally be parsed as SassScript.\n\nBecause of this, Sass parses custom property declarations differently than other property declarations. All tokens, including those that look like SassScript, are passed through to CSS as-is. The only exception is [interpolation](../interpolation), which is the only way to inject dynamic values into a custom property.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n- [CSS](#example-6-css)\n\n``` scss\n$primary: #81899b;\n$accent: #302e24;\n$warn: #dfa612;\n\n:root {\n  --primary: #{$primary};\n  --accent: #{$accent};\n  --warn: #{$warn};\n\n  // Even though this looks like a Sass variable, it's valid CSS so it's not\n  // evaluated.\n  --consumed-by-js: $primary;\n}\n```\n\n``` scss\n$primary: #81899b\n$accent: #302e24\n$warn: #dfa612\n\n:root\n  --primary: #{$primary}\n  --accent: #{$accent}\n  --warn: #{$warn}\n\n  // Even though this looks like a Sass variable, it's valid CSS so it's not\n  // evaluated.\n  --consumed-by-js: $primary\n```\n\n``` css\n:root {\n  --primary: #81899b;\n  --accent: #302e24;\n  --warn: #dfa612;\n  --consumed-by-js: $primary;\n}\n```\n\n### ⚠️ Heads up!\n\nUnfortunately, [interpolation](../interpolation) removes quotes from strings, which makes it difficult to use quoted strings as values for custom properties when they come from Sass variables. As a workaround, you can use the [`meta.inspect()` function](../modules/meta#inspect) to preserve the quotes.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n- [CSS](#example-7-css)\n\n``` scss\n@use \"sass:meta\";\n\n$font-family-sans-serif: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto;\n$font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas;\n\n:root {\n  --font-family-sans-serif: #{meta.inspect($font-family-sans-serif)};\n  --font-family-monospace: #{meta.inspect($font-family-monospace)};\n}\n```\n\n``` scss\n@use \"sass:meta\"\n\n$font-family-sans-serif: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto\n$font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas\n\n:root\n  --font-family-sans-serif: #{meta.inspect($font-family-sans-serif)}\n  --font-family-monospace: #{meta.inspect($font-family-monospace)}\n```\n\n``` css\n:root {\n  --font-family-sans-serif: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto;\n  --font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas;\n}\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/style-rules/declarations](https://sass-lang.com/documentation/style-rules/declarations)"
- name: Relational Operators
  id: operators/relational
  summary: Relational operators determine whether numbers are larger or smaller than one another
  description: "# Relational Operators\n\nRelational operators determine whether [numbers](../values/numbers) are larger or smaller than one another. They automatically convert between compatible units.\n\n- `<expression> < <expression>` returns whether the first [expression](../syntax/structure#expressions)’s value is less than the second’s.\n- `<expression> <= <expression>` returns whether the first [expression](../syntax/structure#expressions)’s value is less than or equal to the second’s.\n- `<expression> > <expression>` returns whether the first [expression](../syntax/structure#expressions)’s value is greater than to the second’s.\n- `<expression> >= <expression>`, returns whether the first [expression](../syntax/structure#expressions)’s value is greater than or equal to the second’s.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug 100 > 50; // true\n@debug 10px < 17px; // true\n@debug 96px >= 1in; // true\n@debug 1000ms <= 1s; // true\n```\n\n``` scss\n@debug 100 > 50  // true\n@debug 10px < 17px  // true\n@debug 96px >= 1in  // true\n@debug 1000ms <= 1s  // true\n```\n\nUnitless numbers can be compared with any number. They’re automatically converted to that number’s unit.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n@debug 100 > 50px; // true\n@debug 10px < 17; // true\n```\n\n``` scss\n@debug 100 > 50px  // true\n@debug 10px < 17  // true\n```\n\nNumbers with incompatible units can’t be compared.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@debug 100px > 10s;\n//     ^^^^^^^^^^^\n// Error: Incompatible units px and s.\n```\n\n``` scss\n@debug 100px > 10s\n//     ^^^^^^^^^^^\n// Error: Incompatible units px and s.\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/operators/relational](https://sass-lang.com/documentation/operators/relational)"
- name: rgb
  id: modules#rgb
  summary: Note that for these implementations, the $alpha argument is required if the function name rgba() is used, and forbidden if the function name rgb() is used
  belongs_to: Built-In Modules
  description: "``` scss\nrgb($red $green $blue)\nrgb($red $green $blue / $alpha)\nrgb($red, $green, $blue, $alpha: 1)\nrgb($color, $alpha)\nrgba($red $green $blue)\nrgba($red $green $blue / $alpha)\nrgba($red, $green, $blue, $alpha: 1)\nrgba($color, $alpha) //=> color\n```\n\nCompatibility (Level 4 Syntax):\n\nDart Sass\n\nsince 1.15.0\n\nLibSass\n\n✗\n\nRuby Sass\n\n✗\n\n[▶](javascript:;)\n\nLibSass and Ruby Sass only support the following signatures:\n\n- `rgb($red, $green, $blue)`\n- `rgba($red, $green, $blue, $alpha)`\n- `rgba($color, $alpha)`\n\nNote that for these implementations, the `$alpha` argument is *required* if the function name `rgba()` is used, and *forbidden* if the function name `rgb()` is used.\n\nCompatibility (Percent Alpha):\n\nDart Sass\n\n✓\n\nLibSass\n\n✗\n\nRuby Sass\n\nsince 3.7.0\n\n[▶](javascript:;)\n\nLibSass and older versions of Ruby Sass don’t support alpha values specified as percentages.\n\nIf `$red`, `$green`, `$blue`, and optionally `$alpha` are passed, returns a color with the given red, green, blue, and alpha channels.\n\nEach channel can be specified as either a [unitless](values/numbers#units) number between 0 and 255 (inclusive), or a percentage between `0%` and `100%` (inclusive). The alpha channel can be specified as either a unitless number between 0 and 1 (inclusive), or a percentage between `0%` and `100%` (inclusive).\n\n### 💡 Fun fact:\n\nYou can pass [special functions](syntax/special-functions) like `calc()` or `var()` in place of any argument to `rgb()`. You can even use `var()` in place of multiple arguments, since it might be replaced by multiple values! When a color function is called this way, it returns an unquoted string using the same signature it was called with.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n@debug rgb(0 51 102 / var(--opacity)); // rgb(0 51 102 / var(--opacity))\n@debug rgba(var(--peach), 0.2); // rgba(var(--peach), 0.2)\n```\n\n``` scss\n@debug rgb(0 51 102 / var(--opacity))  // rgb(0 51 102 / var(--opacity))\n@debug rgba(var(--peach), 0.2)  // rgba(var(--peach), 0.2)\n```\n\n### ⚠️ Heads up!\n\nSass’s [special parsing rules](operators/numeric#slash-separated-values) for slash-separated values make it difficult to pass variables for `$blue` or `$alpha` when using the `rgb($red $green $blue / $alpha)` signature. Consider using `rgb($red, $green, $blue, $alpha)` instead.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@debug rgb(0 51 102); // #036\n@debug rgb(95%, 92.5%, 89.5%); // #f2ece4\n@debug rgb(0 51 102 / 50%); // rgba(0, 51, 102, 0.5)\n@debug rgba(95%, 92.5%, 89.5%, 0.2); // rgba(242, 236, 228, 0.2)\n```\n\n``` scss\n@debug rgb(0 51 102)  // #036\n@debug rgb(95%, 92.5%, 89.5%)  // #f2ece4\n@debug rgb(0 51 102 / 50%)  // rgba(0, 51, 102, 0.5)\n@debug rgba(95%, 92.5%, 89.5%, 0.2)  // rgba(242, 236, 228, 0.2)\n```\n\n------------------------------------------------------------------------\n\nIf `$color` and `$alpha` are passed, this returns `$color` with the given `$alpha` channel instead of its original alpha channel.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n\n``` scss\n@debug rgb(#f2ece4, 50%); // rgba(242, 236, 228, 0.5);\n@debug rgba(rgba(0, 51, 102, 0.5), 1); // #003366\n```\n\n``` scss\n@debug rgb(#f2ece4, 50%)  // rgba(242, 236, 228, 0.5) \n@debug rgba(rgba(0, 51, 102, 0.5), 1)  // #003366\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules](https://sass-lang.com/documentation/modules)"
- name: Ruby Sass Command-Line Interface
  id: cli/ruby-sass
  summary: Ruby Sass has reached end of life and is now totally unmaintained
  description: "# Ruby Sass Command-Line Interface\n\n### Page Sections\n\n- [Usage](#usage)\n  - [Overview](#usage)\n  - [One-to-One Mode](#one-to-one-mode)\n  - [Many-to-Many Mode](#many-to-many-mode)\n- [Options](#options)\n  - [Overview](#options)\n  - [Common](#common)\n    - [Overview](#common)\n    - [`--load-path`](#load-path)\n    - [`--require`](#require)\n    - [`--compass`](#compass)\n    - [`--style`](#style)\n    - [`--help`](#help)\n    - [`--version`](#version)\n  - [Watching and Updating](#watching-and-updating)\n    - [Overview](#watching-and-updating)\n    - [`--watch`](#watch)\n    - [`--poll`](#poll)\n    - [`--update`](#update)\n    - [`--force`](#force)\n    - [`--stop-on-error`](#stop-on-error)\n  - [Input and Output](#input-and-output)\n    - [Overview](#input-and-output)\n    - [`--scss`](#scss)\n    - [`--sourcemap`](#sourcemap)\n    - [`--stdin`](#stdin)\n    - [`--default-encoding`](#default-encoding)\n    - [`--unix-newlines`](#unix-newlines)\n    - [`--debug-info`](#debug-info)\n    - [`--line-comments`](#line-comments)\n  - [Other Options](#other-options)\n    - [Overview](#other-options)\n    - [`--interactive`](#interactive)\n    - [`--check`](#check)\n    - [`--precision`](#precision)\n    - [`--cache-location`](#cache-location)\n    - [`--no-cache`](#no-cache)\n    - [`--trace`](#trace)\n    - [`--quiet`](#quiet)\n\n### ⚠️ Heads up!\n\n[Ruby Sass has reached end of life](https://sass-lang.com/blog/ruby-sass-is-unsupported) and is now totally unmaintained. Please switch to [Dart Sass](https://sass-lang.com/dart-sass) or [LibSass](https://sass-lang.com/libsass) at your earliest convenience.\n\n## Usage\n\nThe Ruby Sass executable can be invoked in one of two modes.\n\n### One-to-One Mode\n\n``` highlight\nsass [input.scss] [output.css]\n```\n\nOne-to-one mode compiles a single input file (`input.scss`) to a single output location (`output.css`). If no output location is passed, the compiled CSS is printed to the terminal. If no input *or* output is passed, the CSS is read from [standard input](https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)) and printed to the terminal.\n\nThe input file is parsed as [SCSS](../syntax#scss) if its extension is `.scss` or as the [indented syntax](../syntax#the-indented-syntax) if its extension is `.sass`. If it doesn’t have one of these two extensions, or if it comes from standard input, it’s parsed as the indented syntax by default. This can be controlled with the [`--scss` flag](#scss).\n\n### Many-to-Many Mode\n\n``` highlight\nsass [<input.css>:<output.css>] [<input/>:<output/>] [input.css] [input/]...\n```\n\nMany-to-many mode compiles one or more input files to one or more output files. The inputs are separated from the outputs with colons. It can also compile all Sass files in a directory to CSS files with the same names in another directory. Many-to-many mode is enabled when any argument contains a colon, *or* when the [`--update` flag](#update) or the [`--watch` flag](#watch) is passed.\n\nIf an input file is passed without a corresponding output file, it’s compiled to a CSS file named after the input file, but with the extension replaced with `.css`. If an input directory is passed without a corresponding output directory, all the Sass files within it are compiled to CSS files in the same directory.\n\n``` highlight\n$ sass style.scss:style.css\n      write style.css\n      write style.css.map\n$ sass light.scss:light.css dark.scss:dark.css\n      write light.css\n      write light.css.map\n      write dark.css\n      write dark.css.map\n$ sass themes:public/css\n      write public/css/light.css\n      write public/css/light.css.map\n      write public/css/dark.css\n      write public/css/dark.css.map\n```\n\nWhen compiling whole directories, Sass will ignore [partial files](../at-rules/use#partials) whose names begin with `_`. You can use partials to separate out your stylesheets without creating a bunch of unnecessary output files.\n\nMany-to-many mode will only compile stylesheets whose dependencies have been modified more recently than the corresponding CSS file was generated. It will also print status messages when updating stylesheets.\n\n## Options\n\n### Common\n\n#### `--load-path`\n\nThis option (abbreviated `-I`) adds an additional [load path](../at-rules/use#load-paths) for Sass to look for stylesheets. It can be passed multiple times to provide multiple load paths. Earlier load paths will take precedence over later ones.\n\n``` highlight\n$ sass --load-path=node_modules/bootstrap/dist/css style.scss style.css\n```\n\nLoad paths are also loaded from the `SASS_PATH` [environment variable](https://en.wikipedia.org/wiki/Environment_variable), if it’s set. This variable should be a list of paths separated by `;` (on Windows) or `:` (on other operating systems). Load paths on `SASS_PATH` take precedence over load paths passed on the command line.\n\n``` highlight\n$ SASS_PATH=node_modules/bootstrap/dist/css sass style.scss style.css\n```\n\n#### `--require`\n\nThis option (abbreviated `-r`) loads a [Ruby gem](https://rubygems.org/) before running Sass. It can be used to load functions defined in Ruby into your Sass environment.\n\n``` highlight\n$ sass --require=rails-sass-images style.scss style.css\n```\n\n#### `--compass`\n\nThis flag loads the [Compass framework](http://compass-style.org/) and makes its mixins and functions available for use in Sass.\n\n``` highlight\n$ sass --compass style.scss style.css\n```\n\n#### `--style`\n\nThis option (abbreviated `-t`) controls the output style of the resulting CSS. Ruby Sass supports four output styles:\n\n- `nested` (the default) indents CSS rules to match the nesting of the Sass source.\n- `expanded` writes each selector and declaration on its own line.\n- `compact` puts each CSS rule on its own single line.\n- `compressed` removes as many extra characters as possible, and writes the entire stylesheet on a single line.\n\n``` highlight\n$ sass --style=nested\nh1 {\n  font-size: 40px; }\n  h1 code {\n    font-face: Roboto Mono; }\n\n$ sass --style=expanded style.scss\nh1 {\n  font-size: 40px;\n}\nh1 code {\n  font-face: Roboto Mono;\n}\n\n$ sass --style=compact style.scss\nh1 { font-size: 40px; }\nh1 code { font-face: Roboto Mono; }\n\n$ sass --style=compressed style.scss\nh1{font-size:40px}h1 code{font-face:Roboto Mono}\n```\n\n#### `--help`\n\nThis flag (abbreviated `-h` and `-?`) prints a summary of this documentation.\n\n``` highlight\n$ sass --help\nUsage: sass [options] [INPUT] [OUTPUT]\n\nDescription:\n  Converts SCSS or Sass files to CSS.\n\n...\n```\n\n#### `--version`\n\nThis flag prints the current version of Sass.\n\n``` highlight\n$ sass --version\n```\n\n### Watching and Updating\n\nThese options affect [many-to-many mode](#many-to-many-mode).\n\n#### `--watch`\n\nEnables [many-to-many mode](#many-to-many-mode), and causes Sass to stay open and continue compiling stylesheets whenever they or their dependencies change.\n\n``` highlight\n$ sass --watch themes:public/css\n      write public/css/light.css\n      write public/css/light.css.map\n\n​# Then when you edit themes/dark.scss...\n      write public/css/dark.css\n      write public/css/dark.css.map\n```\n\n#### `--poll`\n\nThis flag, which may only be passed along with `--watch`, tells Sass to manually check for changes to the source files every so often instead of relying on the operating system to notify it when something changes. This may be necessary if you’re editing Sass on a remote drive where the operating system’s notification system doesn’t work.\n\n``` highlight\n$ sass --watch --poll themes:public/css\n      write public/css/light.css\n      write public/css/light.css.map\n\n​# Then when you edit themes/dark.scss...\n      write public/css/dark.css\n      write public/css/dark.css.map\n```\n\n#### `--update`\n\nThis flag enables [many-to-many mode](#many-to-many-mode), even if none of the arguments are colon-separated pairs.\n\n``` highlight\n$ sass --update style.scss\n      write style.css\n      write style.css.map\n```\n\n#### `--force`\n\nThis flag (abbreviated `-f`) may only be passed in [many-to-many mode](#many-to-many-mode). It causes Sass files to *always* be compiled to CSS files, instead of only being compiled when the source files are more up-to-date than the output.\n\nThe `--force` flag may not be passed alongside the [`--watch` flag](#watch).\n\n``` highlight\n$ sass --force style.scss:style.css\n      write style.css\n      write style.css.map\n```\n\n#### `--stop-on-error`\n\nThis flag may only be passed in [many-to-many mode](#many-to-many-mode). It tells Sass to stop compiling immediately when an error is detected, rather than trying to compile other Sass files that may not contain errors.\n\n``` highlight\n$ sass --stop-on-error themes:public/css\nError: Invalid CSS after \"h1 {font-size: \": expected expression (e.g. 1px, bold), was \"}\"\n        on line 1 of test.scss\n  Use --trace for backtrace.\n```\n\n### Input and Output\n\nThese options control how Sass loads its input files and how it produces output files.\n\n#### `--scss`\n\nThis flag tells Sass to parse [standard input](https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)) as [SCSS](../syntax#scss).\n\n``` highlight\n$ echo \"h1 {font-size: 40px}\" | sass --scss\nh1 {\n  font-size: 40px;\n}\n```\n\n#### `--sourcemap`\n\nThis option controls how Sass generates source maps, which are files that tell browsers or other tools that consume CSS how that CSS corresponds to the Sass files from which it was generated. They make it possible to see and even edit your Sass files in browsers. See instructions for using source maps in [Chrome](https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps) and [Firefox](https://developer.mozilla.org/en-US/docs/Tools/Style_Editor#Source_map_support). It has four possible values:\n\n- `auto` (the default) uses relative URLs to link from the source map to the Sass stylesheets where possible, and absolute [`file:` URLs](https://en.wikipedia.org/wiki/File_URI_scheme) otherwise.\n- `file` always uses absolute absolute `file:` URLs to link from the source map to the Sass stylesheets.\n- `inline` includes the text of the Sass stylehseets in the source map directly.\n- `none` doesn’t generate source maps at all.\n\n``` highlight\n​# Generates a URL like \"../sass/style.scss\".\n$ sass --sourcemap=auto sass/style.scss css/style.css\n\n​# Generates a URL like \"file:///home/style-wiz/sassy-app/sass/style.scss\".\n$ sass --sourcemap=file sass/style.scss css/style.css\n\n​# Includes the full text of sass/style.scss in the source map.\n$ sass --sourcemap=inline sass/style.scss css/style.css\n\n​# Doesn't generate a source map.\n$ sass --sourcemap=none sass/style.scss css/style.css\n```\n\n#### `--stdin`\n\nThis flag (abbreviated `-s`) is tells Sass to read its input file from [standard input](https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)). When it’s passed, no input file may be passed.\n\n``` highlight\n$ echo -e 'h1\\n  font-size: 40px' | sass --stdin\nh1 {\n  font-size: 40px;\n}\n```\n\nThe `--stdin` flag may not be used with [many-to-many mode](#many-to-many-mode).\n\n#### `--default-encoding`\n\nThis option (abbreviated `-E`) controls the default [character encoding](https://en.wikipedia.org/wiki/Character_encoding) that Sass will use to load source files that don’t [explicitly specify](../syntax/parsing#input-encoding) a character encoding. It defaults to the operating system’s default encoding.\n\n``` highlight\n$ sass --default-encoding=Shift-JIS style.scss style.css\n```\n\n#### `--unix-newlines`\n\nThis flag tells Sass to generate output files with whose lines are separated with the U+000A LINE FEED character, as opposed to the operating system default (on Windows, this is U+000D CARRIAGE RETURN followed by U+000A LINE FEED). It’s always true on systems that default to Unix-style newlines.\n\n``` highlight\n$ sass --unix-newlines style.scss style.css\n```\n\n#### `--debug-info`\n\nThis flag (abbreviated `-g`) causes Sass to emit dummy `@media` queries that indicate where each style rule was defined in the source stylehseet.\n\n### ⚠️ Heads up!\n\nThis flag only exists for backwards-compatibility. Source maps are now the recommended way of mapping CSS back to the Sass that generated it.\n\n``` highlight\n$ sass --debug-info style.scss\n@media -sass-debug-info{filename{font-family:file\\:\\/\\/\\/home\\/style-wiz\\/sassy-app\\/style\\.scss}line{font-family:\\000031}}\nh1 {\n  font-size: 40px; }\n```\n\n#### `--line-comments`\n\nThis flag (also available as `--line-numbers`, abbreviated as `-l`) causes Sass to emit comments for every style rule that indicate where each style rule was defined in the source stylesheet.\n\n``` highlight\n$ sass --line-numbers style.scss\n/* line 1, style.scss */\nh1 {\n  font-size: 40px; }\n```\n\n### Other Options\n\n#### `--interactive`\n\nThis flag (abbreviated `-i`) tells Sass to run in interactive mode, where you can write [SassScript expressions](../syntax/structure#expressions) and see their results. Interactive mode also supports [variables](../variables).\n\n``` highlight\n$ sass --interactive\n>> 1px + 1in\n97px\n>> $map: (\"width\": 100px, \"height\": 70px)\n(\"width\": 100px, \"height\": 70px)\n>> map-get($map, \"width\")\n100px\n```\n\n#### `--check`\n\nThis flag (abbreviated `-c`) tells Sass to verify that the syntax of its input file is valid without executing that file. If the syntax is valid, it exits with [status](https://en.wikipedia.org/wiki/Exit_status) 0. It can’t be used in [many-to-many mode](#many-to-many-mode).\n\n``` highlight\n$ sass --check style.scss\n```\n\n#### `--precision`\n\nThis option tells Sass how many digits of [precision](../values/numbers#precision) to use when emitting decimal numbers.\n\n``` highlight\n$ echo -e 'h1\\n  font-size: (100px / 3)' | sass --precision=20\nh1 {\n  font-size: 33.333333333333336px; }\n```\n\n#### `--cache-location`\n\nThis option tells Sass where to store its cache of parsed files, so it can run faster in future invocations. It defaults to `.sass-cache`.\n\n``` highlight\n$ sass --cache-location=/tmp/sass-cache style.scss style.css\n```\n\n#### `--no-cache`\n\nThis flag (abbreviated `-C`) tells Sass not to cache parsed files at all.\n\n``` highlight\n$ sass --no-cache style.scss style.css\n```\n\n#### `--trace`\n\nThis flag tells Sass to print the full Ruby stack trace when an error is encountered. It’s used by the Sass team for debugging errors.\n\n``` highlight\nTraceback (most recent call last):\n        25: from /usr/share/gems/sass/bin/sass:13:in `<main>'\n        24: from /usr/share/gems/sass/lib/sass/exec/base.rb:18:in `parse!'\n        23: from /usr/share/gems/sass/lib/sass/exec/base.rb:50:in `parse'\n        22: from /usr/share/gems/sass/lib/sass/exec/sass_scss.rb:63:in `process_result'\n        21: from /usr/share/gems/sass/lib/sass/exec/sass_scss.rb:396:in `run'\n        20: from /usr/share/gems/sass/lib/sass/engine.rb:290:in `render'\n        19: from /usr/share/gems/sass/lib/sass/engine.rb:414:in `_to_tree'\n        18: from /usr/share/gems/sass/lib/sass/scss/parser.rb:41:in `parse'\n        17: from /usr/share/gems/sass/lib/sass/scss/parser.rb:137:in `stylesheet'\n        16: from /usr/share/gems/sass/lib/sass/scss/parser.rb:697:in `block_contents'\n        15: from /usr/share/gems/sass/lib/sass/scss/parser.rb:707:in `block_child'\n        14: from /usr/share/gems/sass/lib/sass/scss/parser.rb:681:in `ruleset'\n        13: from /usr/share/gems/sass/lib/sass/scss/parser.rb:689:in `block'\n        12: from /usr/share/gems/sass/lib/sass/scss/parser.rb:697:in `block_contents'\n        11: from /usr/share/gems/sass/lib/sass/scss/parser.rb:708:in `block_child'\n        10: from /usr/share/gems/sass/lib/sass/scss/parser.rb:743:in `declaration_or_ruleset'\n         9: from /usr/share/gems/sass/lib/sass/scss/parser.rb:820:in `try_declaration'\n         8: from /usr/share/gems/sass/lib/sass/scss/parser.rb:1281:in `rethrow'\n         7: from /usr/share/gems/sass/lib/sass/scss/parser.rb:807:in `block in try_declaration'\n         6: from /usr/share/gems/sass/lib/sass/scss/parser.rb:999:in `value!'\n         5: from /usr/share/gems/sass/lib/sass/scss/parser.rb:1161:in `sass_script'\n         4: from /usr/share/gems/sass/lib/sass/script/parser.rb:68:in `parse'\n         3: from /usr/share/gems/sass/lib/sass/script/parser.rb:855:in `assert_expr'\n         2: from /usr/share/gems/sass/lib/sass/script/lexer.rb:240:in `expected!'\n         1: from /usr/share/gems/sass/lib/sass/scss/parser.rb:1305:in `expected'\ntest.scss:1: Invalid CSS after \"h1 {font-size: \": expected expression (e.g. 1px, bold), was \"}\" (Sass::SyntaxError)\n```\n\n#### `--quiet`\n\nThis flag (abbreviated `-q`) tells Sass not to emit any warnings when compiling. By default, Sass emits warnings when deprecated features are used or when the [`@warn` rule](../at-rules/warn) is encountered. It also silences the [`@debug` rule](../at-rules/debug).\n\n``` highlight\n$ sass --quiet style.scss style.css\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/cli/ruby-sass](https://sass-lang.com/documentation/cli/ruby-sass)"
- name: sass
  id: js-api
  summary: The sass package on npm is a pure-JavaScript package built from the Dart Sass implementation
  description: "# sass\n\nThe [`sass` package](https://www.npmjs.com/package/sass) on npm is a pure-JavaScript package built from the [Dart Sass](https://sass-lang.com/dart-sass) implementation. In addition to Dart Sass's [command-line interface](cli/dart-sass), it provides a JavaScript API that can be used to drive Sass compilations from JavaScript. It even allows an application to control [how stylesheets are loaded](js-api/interfaces/options#importers) and [define custom functions](js-api/interfaces/options#functions).\n\n[](#usage)\n\n## Usage\n\nThe JavaScript API provides two entrypoints for compiling Sass to CSS, each of which has a synchronous variant that returns a plain [CompileResult](js-api/interfaces/compileresult) and an asynchronous variant that returns a `Promise`. **The asynchronous variants are much slower,** but they allow custom importers and functions to run asynchronously.\n\n- [compile](js-api/modules#compile) and [compileAsync](js-api/modules#compileAsync) take a path to a Sass file and return the result of compiling that file to CSS. These functions accept an additional [Options](js-api/interfaces/options) argument.\n\n  ``` js\n  constsass = require('sass');\n\n  constresult = sass.compile(\"style.scss\");\n  console.log(result.css);\n\n  constcompressed = sass.compile(\"style.scss\", {style:\"compressed\"});\n  console.log(compressed.css);\n  ```\n\n- [compileString](js-api/modules#compileString) and [compileStringAsync](js-api/modules#compileStringAsync) take a string that represents the contents of a Sass file and return the result of compiling that file to CSS. These functions accept an additional [StringOptions](js-api/modules#StringOptions) argument.\n\n  ``` js\n  constsass = require('sass');\n\n  constinput = `\n  h1 {\n    font-size: 40px;\n    code {\n      font-face: Roboto Mono;\n    }\n  }`;\n\n  constresult = sass.compileString(input);\n  console.log(result.css);\n\n  constcompressed = sass.compileString(input, {style:\"compressed\"});\n  console.log(compressed.css);\n  ```\n\n[](#integrations)\n\n## Integrations\n\nMost popular Node.js build systems have integrations available for the JS API:\n\n- Webpack uses the [`sass-loader` package](https://www.npmjs.com/package/sass-loader).\n- Gulp uses the [`gulp-sass` package](https://www.npmjs.com/package/gulp-sass).\n- Broccoli uses the [`broccoli-sass-source-maps` package](https://www.npmjs.com/package/broccoli-sass-source-maps).\n- Ember uses the [`ember-cli-sass` package](https://www.npmjs.com/package/ember-cli-sass).\n- Grunt uses the [`grunt-sass` package](https://www.npmjs.com/package/grunt-sass).\n\n[](#legacy-api)\n\n## Legacy API\n\nThe `sass` package also supports an older API. Although this API is deprecated, it will continue to be supported until the release of version 2.0.0 of the `sass` package. The legacy API is also supported by the [`node-sass` package](https://www.npmjs.com/package/node-sass), which is a native extension wrapper for the deprecated [LibSass](https://sass-lang.com/libsass) implementation.\n\nThe legacy API has two entrypoints for compiling Sass to CSS. Each one can compile either a Sass file by passing in [LegacyFileOptions](js-api/interfaces/legacyfileoptions) or a string of Sass code by passing in a [LegacyStringOptions](js-api/interfaces/legacystringoptions).\n\n- [renderSync](js-api/modules#renderSync) runs synchronously. It's **by far the fastest option** when using Dart Sass, but at the cost of only supporting synchronous [importer](js-api/modules#LegacyImporter) and [function](js-api/modules#LegacyFunction) plugins.\n\n  ``` js\n  constsass = require('sass'); // or require('node-sass');\n\n  constresult = sass.renderSync({file:\"style.scss\"});\n  console.log(result.css.toString());\n  ```\n\n- [render](js-api/modules#render) runs asynchronously and calls a callback when it finishes. It's much slower when using Dart Sass, but it supports asynchronous [importer](js-api/modules#LegacyImporter) and [function](js-api/modules#LegacyFunction) plugins.\n\n  ``` js\n  constsass = require('sass'); // or require('node-sass');\n\n  sass.render({\n  file:\"style.scss\"\n  }, function(err, result) {\n  if (err) {\n  // ...\n    } else {\n  console.log(result.css.toString());\n    }\n  });\n  ```\n\n- [Exports](js-api/modules)\n- [Logger](js-api/modules/logger)\n- [types](js-api/modules/types)\n\n- Compile\n- [CompileResult](js-api/interfaces/compileresult)\n- [compile](js-api/modules#compile)\n- [compileAsync](js-api/modules#compileAsync)\n- [compileString](js-api/modules#compileString)\n- [compileStringAsync](js-api/modules#compileStringAsync)\n- Options\n- [Options](js-api/interfaces/options)\n- [StringOptionsWithImporter](js-api/interfaces/stringoptionswithimporter)\n- [StringOptionsWithoutImporter](js-api/interfaces/stringoptionswithoutimporter)\n- [OutputStyle](js-api/modules#OutputStyle)\n- [StringOptions](js-api/modules#StringOptions)\n- [Syntax](js-api/modules#Syntax)\n- Logger\n- [Logger](js-api/modules/logger)\n- [Logger](js-api/interfaces/logger)\n- [SourceLocation](js-api/interfaces/sourcelocation)\n- [SourceSpan](js-api/interfaces/sourcespan)\n- Importer\n- [FileImporter](js-api/interfaces/fileimporter)\n- [Importer](js-api/interfaces/importer)\n- [ImporterResult](js-api/interfaces/importerresult)\n- Custom Function\n- [SassArgumentList](js-api/classes/sassargumentlist)\n- [SassBoolean](js-api/classes/sassboolean)\n- [SassColor](js-api/classes/sasscolor)\n- [SassFunction](js-api/classes/sassfunction)\n- [SassList](js-api/classes/sasslist)\n- [SassMap](js-api/classes/sassmap)\n- [SassNumber](js-api/classes/sassnumber)\n- [SassString](js-api/classes/sassstring)\n- [Value](js-api/classes/value)\n- [CustomFunction](js-api/modules#CustomFunction)\n- [ListSeparator](js-api/modules#ListSeparator)\n- [sassFalse](js-api/modules#sassFalse)\n- [sassNull](js-api/modules#sassNull)\n- [sassTrue](js-api/modules#sassTrue)\n- Other\n- [Exception](js-api/classes/exception)\n- [LegacyFileOptions](js-api/interfaces/legacyfileoptions)\n- [PromiseOr](js-api/modules#PromiseOr)\n- [info](js-api/modules#info)\n- Legacy\n- [types](js-api/modules/types)\n- [LegacyException](js-api/interfaces/legacyexception)\n- [LegacyImporterThis](js-api/interfaces/legacyimporterthis)\n- [LegacyPluginThis](js-api/interfaces/legacypluginthis)\n- [LegacyResult](js-api/interfaces/legacyresult)\n- [LegacySharedOptions](js-api/interfaces/legacysharedoptions)\n- [LegacyStringOptions](js-api/interfaces/legacystringoptions)\n- [LegacyAsyncFunction](js-api/modules#LegacyAsyncFunction)\n- [LegacyAsyncFunctionDone](js-api/modules#LegacyAsyncFunctionDone)\n- [LegacyAsyncImporter](js-api/modules#LegacyAsyncImporter)\n- [LegacyFunction](js-api/modules#LegacyFunction)\n- [LegacyImporter](js-api/modules#LegacyImporter)\n- [LegacyImporterResult](js-api/modules#LegacyImporterResult)\n- [LegacyOptions](js-api/modules#LegacyOptions)\n- [LegacySyncFunction](js-api/modules#LegacySyncFunction)\n- [LegacySyncImporter](js-api/modules#LegacySyncImporter)\n- [LegacyValue](js-api/modules#LegacyValue)\n- [FALSE](js-api/modules#FALSE)\n- [NULL](js-api/modules#NULL)\n- [TRUE](js-api/modules#TRUE)\n- [render](js-api/modules#render)\n- [renderSync](js-api/modules#renderSync)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api](https://sass-lang.com/documentation/js-api)"
- name: sass
  id: js-api/modules
  summary: Synchronously compiles the Sass file at path to CSS
  description: "# sass\n\n## Index\n\n### Compile\n\n- [CompileResult](interfaces/compileresult)\n- [compile](modules#compile)\n- [compileAsync](modules#compileAsync)\n- [compileString](modules#compileString)\n- [compileStringAsync](modules#compileStringAsync)\n\n### Options\n\n- [Options](interfaces/options)\n- [StringOptionsWithImporter](interfaces/stringoptionswithimporter)\n- [StringOptionsWithoutImporter](interfaces/stringoptionswithoutimporter)\n- [OutputStyle](modules#OutputStyle)\n- [StringOptions](modules#StringOptions)\n- [Syntax](modules#Syntax)\n\n### Logger\n\n- [Logger](modules/logger)\n- [Logger](interfaces/logger)\n- [SourceLocation](interfaces/sourcelocation)\n- [SourceSpan](interfaces/sourcespan)\n\n### Importer\n\n- [FileImporter](interfaces/fileimporter)\n- [Importer](interfaces/importer)\n- [ImporterResult](interfaces/importerresult)\n\n### Custom Function\n\n- [SassArgumentList](classes/sassargumentlist)\n- [SassBoolean](classes/sassboolean)\n- [SassColor](classes/sasscolor)\n- [SassFunction](classes/sassfunction)\n- [SassList](classes/sasslist)\n- [SassMap](classes/sassmap)\n- [SassNumber](classes/sassnumber)\n- [SassString](classes/sassstring)\n- [Value](classes/value)\n- [CustomFunction](modules#CustomFunction)\n- [ListSeparator](modules#ListSeparator)\n- [sassFalse](modules#sassFalse)\n- [sassNull](modules#sassNull)\n- [sassTrue](modules#sassTrue)\n\n### Other\n\n- [Exception](classes/exception)\n- [LegacyFileOptions](interfaces/legacyfileoptions)\n- [PromiseOr](modules#PromiseOr)\n- [info](modules#info)\n\n### Legacy\n\n- [types](modules/types)\n- [LegacyException](interfaces/legacyexception)\n- [LegacyImporterThis](interfaces/legacyimporterthis)\n- [LegacyPluginThis](interfaces/legacypluginthis)\n- [LegacyResult](interfaces/legacyresult)\n- [LegacySharedOptions](interfaces/legacysharedoptions)\n- [LegacyStringOptions](interfaces/legacystringoptions)\n- [LegacyAsyncFunction](modules#LegacyAsyncFunction)\n- [LegacyAsyncFunctionDone](modules#LegacyAsyncFunctionDone)\n- [LegacyAsyncImporter](modules#LegacyAsyncImporter)\n- [LegacyFunction](modules#LegacyFunction)\n- [LegacyImporter](modules#LegacyImporter)\n- [LegacyImporterResult](modules#LegacyImporterResult)\n- [LegacyOptions](modules#LegacyOptions)\n- [LegacySyncFunction](modules#LegacySyncFunction)\n- [LegacySyncImporter](modules#LegacySyncImporter)\n- [LegacyValue](modules#LegacyValue)\n- [FALSE](modules#FALSE)\n- [NULL](modules#NULL)\n- [TRUE](modules#TRUE)\n- [render](modules#render)\n- [renderSync](modules#renderSync)\n\n## Compile\n\n### compile\n\n- compile(path: string, options?: [Options](interfaces/options)\\<\"sync\"\\>): [CompileResult](interfaces/compileresult)\n\n- - Defined in [js-api-doc/compile.d.ts:58](https://github.com/sass/sass/blob/6d42491/js-api-doc/compile.d.ts#L58)\n\n  Compatibility:\n\n  Dart Sass  \n  since 1.45.0\n\n  Node Sass  \n  ✗\n\n  Synchronously compiles the Sass file at `path` to CSS. If it succeeds it returns a [CompileResult](interfaces/compileresult), and if it fails it throws an [Exception](classes/exception).\n\n  This only allows synchronous [Importer](interfaces/importer)s and [CustomFunction](modules#CustomFunction)s.\n\n  example  \n  ``` js\n  constsass = require('sass');\n\n  constresult = sass.compile(\"style.scss\");\n  console.log(result.css);\n  ```\n\n  #### Parameters\n\n  - ##### path: string\n\n  - ##### Optional options: [Options](interfaces/options)\\<\"sync\"\\>\n\n  #### Returns [CompileResult](interfaces/compileresult)\n\n### compileAsync\n\n- compileAsync(path: string, options?: [Options](interfaces/options)\\<\"async\"\\>): Promise\\<[CompileResult](interfaces/compileresult)\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/compile.d.ts:84](https://github.com/sass/sass/blob/6d42491/js-api-doc/compile.d.ts#L84)\n\n  Compatibility:\n\n  Dart Sass  \n  since 1.45.0\n\n  Node Sass  \n  ✗\n\n  Asynchronously compiles the Sass file at `path` to CSS. Returns a promise that resolves with a [CompileResult](interfaces/compileresult) if it succeeds and rejects with an [Exception](classes/exception) if it fails.\n\n  This only allows synchronous or asynchronous [Importer](interfaces/importer)s and [CustomFunction](modules#CustomFunction)s.\n\n  ### ⚠️ Heads up!\n\n  When using Dart Sass, **[compile](modules#compile) is almost twice as fast as [compileAsync](modules#compileAsync)**, due to the overhead of making the entire evaluation process asynchronous.\n\n  example  \n  ``` js\n  constsass = require('sass');\n\n  constresult = awaitsass.compileAsync(\"style.scss\");\n  console.log(result.css);\n  ```\n\n  #### Parameters\n\n  - ##### path: string\n\n  - ##### Optional options: [Options](interfaces/options)\\<\"async\"\\>\n\n  #### Returns Promise\\<[CompileResult](interfaces/compileresult)\\>\n\n### compileString\n\n- compileString(source: string, options?: [StringOptions](modules#StringOptions)\\<\"sync\"\\>): [CompileResult](interfaces/compileresult)\n\n&nbsp;\n\n- - Defined in [js-api-doc/compile.d.ts:114](https://github.com/sass/sass/blob/6d42491/js-api-doc/compile.d.ts#L114)\n\n  Compatibility:\n\n  Dart Sass  \n  since 1.45.0\n\n  Node Sass  \n  ✗\n\n  Synchronously compiles a stylesheet whose contents is `source` to CSS. If it succeeds it returns a [CompileResult](interfaces/compileresult), and if it fails it throws an [Exception](classes/exception).\n\n  This only allows synchronous [Importer](interfaces/importer)s and [CustomFunction](modules#CustomFunction)s.\n\n  example  \n  ``` js\n  constsass = require('sass');\n\n  constresult = sass.compileString(`\n  h1 {\n    font-size: 40px;\n    code {\n      font-face: Roboto Mono;\n    }\n  }`);\n  console.log(result.css);\n  ```\n\n  #### Parameters\n\n  - ##### source: string\n\n  - ##### Optional options: [StringOptions](modules#StringOptions)\\<\"sync\"\\>\n\n  #### Returns [CompileResult](interfaces/compileresult)\n\n### compileStringAsync\n\n- compileStringAsync(source: string, options?: [StringOptions](modules#StringOptions)\\<\"async\"\\>): Promise\\<[CompileResult](interfaces/compileresult)\\>\n\n&nbsp;\n\n- - Defined in [js-api-doc/compile.d.ts:149](https://github.com/sass/sass/blob/6d42491/js-api-doc/compile.d.ts#L149)\n\n  Compatibility:\n\n  Dart Sass  \n  since 1.45.0\n\n  Node Sass  \n  ✗\n\n  Asynchronously compiles a stylesheet whose contents is `source` to CSS. Returns a promise that resolves with a [CompileResult](interfaces/compileresult) if it succeeds and rejects with an [Exception](classes/exception) if it fails.\n\n  This only allows synchronous or asynchronous [Importer](interfaces/importer)s and [CustomFunction](modules#CustomFunction)s.\n\n  ### ⚠️ Heads up!\n\n  When using Dart Sass, **[compile](modules#compile) is almost twice as fast as [compileAsync](modules#compileAsync)**, due to the overhead of making the entire evaluation process asynchronous.\n\n  example  \n  ``` js\n  constsass = require('sass');\n\n  constresult = awaitsass.compileStringAsync(`\n  h1 {\n    font-size: 40px;\n    code {\n      font-face: Roboto Mono;\n    }\n  }`);\n  console.log(result.css);\n  ```\n\n  #### Parameters\n\n  - ##### source: string\n\n  - ##### Optional options: [StringOptions](modules#StringOptions)\\<\"async\"\\>\n\n  #### Returns Promise\\<[CompileResult](interfaces/compileresult)\\>\n\n## Options\n\n### OutputStyle\n\nOutputStyle: \"expanded\" \\| \"compressed\"\n\n- Defined in [js-api-doc/options.d.ts:31](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L31)\n\nPossible output styles for the compiled CSS:\n\n- `\"expanded\"` (the default for Dart Sass) writes each selector and declaration on its own line.\n\n- `\"compressed\"` removes as many extra characters as possible, and writes the entire stylesheet on a single line.\n\n### StringOptions\n\nStringOptions\\<sync\\>: [StringOptionsWithImporter](interfaces/stringoptionswithimporter)\\<sync\\> \\| [StringOptionsWithoutImporter](interfaces/stringoptionswithoutimporter)\\<sync\\>\n\n- Defined in [js-api-doc/options.d.ts:433](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L433)\n\nOptions that can be passed to [compileString](modules#compileString) or [compileStringAsync](modules#compileStringAsync).\n\nThis is a [StringOptionsWithImporter](interfaces/stringoptionswithimporter) if it has a [StringOptionsWithImporter.importer](interfaces/stringoptionswithimporter#importer) field, and a [StringOptionsWithoutImporter](interfaces/stringoptionswithoutimporter) otherwise.\n\n#### Type parameters\n\n- #### sync: \"sync\" \\| \"async\"\n\n  This lets the TypeScript checker verify that asynchronous [Importer](interfaces/importer)s, [FileImporter](interfaces/fileimporter)s, and [CustomFunction](modules#CustomFunction)s aren't passed to [compile](modules#compile) or [compileString](modules#compileString).\n\n### Syntax\n\nSyntax: \"scss\" \\| \"indented\" \\| \"css\"\n\n- Defined in [js-api-doc/options.d.ts:18](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L18)\n\nSyntaxes supported by Sass:\n\n- `'scss'` is the [SCSS syntax](../syntax#scss).\n- `'indented'` is the [indented syntax](../syntax#the-indented-syntax)\n- `'css'` is plain CSS, which is parsed like SCSS but forbids the use of any special Sass features.\n\n## Custom Function\n\n### CustomFunction\n\nCustomFunction\\<sync\\>: (args: [Value](classes/value)\\[\\]) =\\> [PromiseOr](modules#PromiseOr)\\<[Value](classes/value), sync\\>\n\n- Defined in [js-api-doc/options.d.ts:76](https://github.com/sass/sass/blob/6d42491/js-api-doc/options.d.ts#L76)\n\n#### Type parameters\n\n- #### sync: \"sync\" \\| \"async\"\n\n  A `CustomFunction<'sync'>` must return synchronously, but in return it can be passed to [compile](modules#compile) and [compileString](modules#compileString) in addition to [compileAsync](modules#compileAsync) and [compileStringAsync](modules#compileStringAsync).\n\n  A `CustomFunction<'async'>` may either return synchronously or asynchronously, but it can only be used with [compileAsync](modules#compileAsync) and [compileStringAsync](modules#compileStringAsync).\n\n#### Type declaration\n\n- - (args: [Value](classes/value)\\[\\]): [PromiseOr](modules#PromiseOr)\\<[Value](classes/value), sync\\>\n\n  &nbsp;\n\n  - A callback that implements a custom Sass function. This can be passed to [Options.functions](interfaces/options#functions).\n\n    ``` js\n    constresult = sass.compile('style.scss', {\n    functions: {\n    \"sum($arg1, $arg2)\": (args) => {\n    constarg1 = args[0].assertNumber('arg1');\n    constvalue1 = arg1.value;\n    constvalue2 = args[1].assertNumber('arg2')\n              .convertValueToMatch(arg1, 'arg2', 'arg1');\n    returnnewsass.SassNumber(value1 + value2).coerceToMatch(arg1);\n        }\n      }\n    });\n    ```\n\n    throws  \n    any - This function may throw an error, which the Sass compiler will treat as the function call failing. If the exception object has a `message` property, it will be used as the wrapped exception's message; otherwise, the exception object's `toString()` will be used. This means it's safe for custom functions to throw plain strings.\n\n    #### Parameters\n\n    - ##### args: [Value](classes/value)\\[\\]\n\n      An array of arguments passed by the function's caller. If the function takes [arbitrary arguments](../at-rules/function#taking-arbitrary-arguments), the last element will be a [SassArgumentList](classes/sassargumentlist).\n\n    #### Returns [PromiseOr](modules#PromiseOr)\\<[Value](classes/value), sync\\>\n\n    The function's result. This may be in the form of a `Promise`, but if it is the function may only be passed to [compileAsync](modules#compileAsync) and [compileStringAsync](modules#compileStringAsync), not [compile](modules#compile) or [compileString](modules#compileString).\n\n### ListSeparator\n\nListSeparator: \",\" \\| \"/\" \\| \" \" \\| null\n\n- Defined in [js-api-doc/value/list.d.ts:12](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/list.d.ts#L12)\n\nPossible separators used by Sass lists. The special separator `null` is only used for lists with fewer than two elements, and indicates that the separator has not yet been decided for this list.\n\n### sassFalse\n\nsassFalse: [SassBoolean](classes/sassboolean)\n\n- Defined in [js-api-doc/value/boolean.d.ts:15](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/boolean.d.ts#L15)\n\nSass's [`false` value](../values/booleans).\n\n### sassNull\n\nsassNull: [Value](classes/value)\n\n- Defined in [js-api-doc/value/index.d.ts:25](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/index.d.ts#L25)\n\nSass's [`null` value](../values/null).\n\n### sassTrue\n\nsassTrue: [SassBoolean](classes/sassboolean)\n\n- Defined in [js-api-doc/value/boolean.d.ts:8](https://github.com/sass/sass/blob/6d42491/js-api-doc/value/boolean.d.ts#L8)\n\nSass's [`true` value](../values/booleans).\n\n## Other\n\n### PromiseOr\n\nPromiseOr\\<T, sync\\>: sync extends \"async\" ? T \\| Promise\\<T\\> : T\n\n- Defined in [js-api-doc/util/promise_or.d.ts:15](https://github.com/sass/sass/blob/6d42491/js-api-doc/util/promise_or.d.ts#L15)\n\nA utility type for choosing between synchronous and asynchronous return values.\n\nThis is used as the return value for plugins like [CustomFunction](modules#CustomFunction), [Importer](interfaces/importer), and [FileImporter](interfaces/fileimporter) so that TypeScript enforces that asynchronous plugins are only passed to [compileAsync](modules#compileAsync) and [compileStringAsync](modules#compileStringAsync), not [compile](modules#compile) or [compileString](modules#compileString).\n\n#### Type parameters\n\n- #### T\n\n- #### sync: \"sync\" \\| \"async\"\n\n  If this is `'sync'`, this can only be a `T`. If it's `'async'`, this can be either a `T` or a `Promise<T>`.\n\n### info\n\ninfo: string\n\n- Defined in [js-api-doc/index.d.ts:80](https://github.com/sass/sass/blob/6d42491/js-api-doc/index.d.ts#L80)\n\nInformation about the Sass implementation. This always begins with a unique identifier for the Sass implementation, followed by U+0009 TAB, followed by its npm package version. Some implementations include additional information as well, but not in any standardized format.\n\n- For Dart Sass, the implementation name is `dart-sass`.\n- For Node Sass, the implementation name is `node-sass`.\n- For the embedded host, the implementation name is `sass-embedded`.\n\n## Legacy\n\n### LegacyAsyncFunction\n\nLegacyAsyncFunction: ((this: [LegacyPluginThis](interfaces/legacypluginthis), done: (result: [LegacyValue](modules#LegacyValue)) =\\> void) =\\> void) \\| ((this: [LegacyPluginThis](interfaces/legacypluginthis), arg1: [LegacyValue](modules#LegacyValue), done: [LegacyAsyncFunctionDone](modules#LegacyAsyncFunctionDone)) =\\> void) \\| ((this: [LegacyPluginThis](interfaces/legacypluginthis), arg1: [LegacyValue](modules#LegacyValue), arg2: [LegacyValue](modules#LegacyValue), done: [LegacyAsyncFunctionDone](modules#LegacyAsyncFunctionDone)) =\\> void) \\| ((this: [LegacyPluginThis](interfaces/legacypluginthis), arg1: [LegacyValue](modules#LegacyValue), arg2: [LegacyValue](modules#LegacyValue), arg3: [LegacyValue](modules#LegacyValue), done: [LegacyAsyncFunctionDone](modules#LegacyAsyncFunctionDone)) =\\> void) \\| ((this: [LegacyPluginThis](interfaces/legacypluginthis), arg1: [LegacyValue](modules#LegacyValue), arg2: [LegacyValue](modules#LegacyValue), arg3: [LegacyValue](modules#LegacyValue), arg4: [LegacyValue](modules#LegacyValue), done: [LegacyAsyncFunctionDone](modules#LegacyAsyncFunctionDone)) =\\> void) \\| ((this: [LegacyPluginThis](interfaces/legacypluginthis), arg1: [LegacyValue](modules#LegacyValue), arg2: [LegacyValue](modules#LegacyValue), arg3: [LegacyValue](modules#LegacyValue), arg4: [LegacyValue](modules#LegacyValue), arg5: [LegacyValue](modules#LegacyValue), done: [LegacyAsyncFunctionDone](modules#LegacyAsyncFunctionDone)) =\\> void) \\| ((this: [LegacyPluginThis](interfaces/legacypluginthis), arg1: [LegacyValue](modules#LegacyValue), arg2: [LegacyValue](modules#LegacyValue), arg3: [LegacyValue](modules#LegacyValue), arg4: [LegacyValue](modules#LegacyValue), arg5: [LegacyValue](modules#LegacyValue), arg6: [LegacyValue](modules#LegacyValue), done: [LegacyAsyncFunctionDone](modules#LegacyAsyncFunctionDone)) =\\> void) \\| ((this: [LegacyPluginThis](interfaces/legacypluginthis), …args: \\[…[LegacyValue](modules#LegacyValue)\\[\\], [LegacyAsyncFunctionDone](modules#LegacyAsyncFunctionDone)\\]) =\\> void)\n\n- Defined in [js-api-doc/legacy/function.d.ts:83](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L83)\n\nAn asynchronous callback that implements a custom Sass function. This can be passed to [LegacySharedOptions.functions](interfaces/legacysharedoptions#functions), but only for [render](modules#render).\n\nAn asynchronous function must return `undefined`. Its final argument will always be a callback, which it should call with the result of the function once it's done running.\n\nIf this throws an error, Sass will treat that as the function failing with that error message.\n\n``` js\nsass.render({\nfile:'style.scss',\nfunctions: {\n\"sum($arg1, $arg2)\": (arg1, arg2, done) => {\nif (!(arg1instanceofsass.types.Number)) {\nthrownewError(\"$arg1: Expected a number\");\n      } elseif (!(arg2instanceofsass.types.Number)) {\nthrownewError(\"$arg2: Expected a number\");\n      }\ndone(newsass.types.Number(arg1.getValue() + arg2.getValue()));\n    }\n  }\n}, (result, error) => {\n// ...\n});\n```\n\nThis is passed one argument for each argument that's declared in the signature that's passed to [LegacySharedOptions.functions](interfaces/legacysharedoptions#functions). If the signature [takes arbitrary arguments](../at-rules/function#taking-arbitrary-arguments), they're passed as a single argument list in the last argument before the callback.\n\ndeprecated  \nThis only works with the legacy [render](modules#render) and [renderSync](modules#renderSync) APIs. Use [CustomFunction](modules#CustomFunction) with [compile](modules#compile), [compileString](modules#compileString), [compileAsync](modules#compileAsync), and [compileStringAsync](modules#compileStringAsync) instead.\n\n### LegacyAsyncFunctionDone\n\nLegacyAsyncFunctionDone: (result: [LegacyValue](modules#LegacyValue) \\| [Error](classes/types.error)) =\\> void\n\n- Defined in [js-api-doc/legacy/function.d.ts:148](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L148)\n\n#### Type declaration\n\n- - (result: [LegacyValue](modules#LegacyValue) \\| [Error](classes/types.error)): void\n\n  &nbsp;\n\n  - The function called by a [LegacyAsyncFunction](modules#LegacyAsyncFunction) to indicate that it's finished.\n\n    deprecated  \n    This only works with the legacy [render](modules#render) and [renderSync](modules#renderSync) APIs. Use [CustomFunction](modules#CustomFunction) with [compile](modules#compile), [compileString](modules#compileString), [compileAsync](modules#compileAsync), and [compileStringAsync](modules#compileStringAsync) instead.\n\n    #### Parameters\n\n    - ##### result: [LegacyValue](modules#LegacyValue) \\| [Error](classes/types.error)\n\n      If this is a [LegacyValue](modules#LegacyValue), that indicates that the function call completed successfully. If it's a [types.Error](classes/types.error), that indicates that the function call failed.\n\n    #### Returns void\n\n### LegacyAsyncImporter\n\nLegacyAsyncImporter: (this: [LegacyImporterThis](interfaces/legacyimporterthis), url: string, prev: string, done: (result: [LegacyImporterResult](modules#LegacyImporterResult)) =\\> void) =\\> void\n\n- Defined in [js-api-doc/legacy/importer.d.ts:144](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/importer.d.ts#L144)\n\n#### Type declaration\n\n- - (this: [LegacyImporterThis](interfaces/legacyimporterthis), url: string, prev: string, done: (result: [LegacyImporterResult](modules#LegacyImporterResult)) =\\> void): void\n\n  &nbsp;\n\n  - An asynchronous callback that implements custom Sass loading logic for [`@import` rules](../at-rules/import) and [`@use` rules](../at-rules/use). This can be passed to [LegacySharedOptions.importer](interfaces/legacysharedoptions#importer) for either [render](modules#render) or [renderSync](modules#renderSync).\n\n    An asynchronous importer must return `undefined`, and then call `done` with the result of its [LegacyImporterResult](modules#LegacyImporterResult) once it's done running.\n\n    See [LegacySharedOptions.importer](interfaces/legacysharedoptions#importer) for more detailed documentation.\n\n    ``` js\n    sass.render({\n    file:\"style.scss\",\n    importer: [\n    function(url, prev, done) {\n    if (url != \"big-headers\") done(null);\n\n    done({\n    contents:'h1 { font-size: 40px; }'\n          });\n        }\n      ]\n    });\n    ```\n\n    deprecated  \n    This only works with the legacy [render](modules#render) and [renderSync](modules#renderSync) APIs. Use [Importer](interfaces/importer) with [compile](modules#compile), [compileString](modules#compileString), [compileAsync](modules#compileAsync), and [compileStringAsync](modules#compileStringAsync) instead.\n\n    #### Parameters\n\n    - ##### this: [LegacyImporterThis](interfaces/legacyimporterthis)\n\n    - ##### url: string\n\n      The `@use` or `@import` rule’s URL as a string, exactly as it appears in the stylesheet.\n\n    - ##### prev: string\n\n      A string identifying the stylesheet that contained the `@use` or `@import`. This string’s format depends on how that stylesheet was loaded:\n\n      - If the stylesheet was loaded from the filesystem, it’s the absolute path of its file.\n      - If the stylesheet was loaded from an importer that returned its contents, it’s the URL of the `@use` or `@import` rule that loaded it.\n      - If the stylesheet came from the data option, it’s the string \"stdin\".\n\n    - ##### done: (result: [LegacyImporterResult](modules#LegacyImporterResult)) =\\> void\n\n      The callback to call once the importer has finished running.\n\n      - - (result: [LegacyImporterResult](modules#LegacyImporterResult)): void\n\n        &nbsp;\n\n        - #### Parameters\n\n          - ##### result: [LegacyImporterResult](modules#LegacyImporterResult)\n\n          #### Returns void\n\n    #### Returns void\n\n### LegacyFunction\n\nLegacyFunction\\<sync\\>: sync extends \"async\" ? [LegacySyncFunction](modules#LegacySyncFunction) \\| [LegacyAsyncFunction](modules#LegacyAsyncFunction) : [LegacySyncFunction](modules#LegacySyncFunction)\n\n- Defined in [js-api-doc/legacy/function.d.ts:165](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L165)\n\nA callback that implements a custom Sass function. For [renderSync](modules#renderSync), this must be a [LegacySyncFunction](modules#LegacySyncFunction) which returns its result directly; for [render](modules#render), it may be either a [LegacySyncFunction](modules#LegacySyncFunction) or a [LegacyAsyncFunction](modules#LegacyAsyncFunction) which calls a callback with its result.\n\nSee [LegacySharedOptions.functions](interfaces/legacysharedoptions#functions) for more details.\n\ndeprecated  \nThis only works with the legacy [render](modules#render) and [renderSync](modules#renderSync) APIs. Use [CustomFunction](modules#CustomFunction) with [compile](modules#compile), [compileString](modules#compileString), [compileAsync](modules#compileAsync), and [compileStringAsync](modules#compileStringAsync) instead.\n\n#### Type parameters\n\n- #### sync: \"sync\" \\| \"async\"\n\n### LegacyImporter\n\nLegacyImporter\\<sync\\>: sync extends \"async\" ? [LegacySyncImporter](modules#LegacySyncImporter) \\| [LegacyAsyncImporter](modules#LegacyAsyncImporter) : [LegacySyncImporter](modules#LegacySyncImporter)\n\n- Defined in [js-api-doc/legacy/importer.d.ts:166](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/importer.d.ts#L166)\n\nA callback that implements custom Sass loading logic for [`@import` rules](../at-rules/import) and [`@use` rules](../at-rules/use). For [renderSync](modules#renderSync), this must be a [LegacySyncImporter](modules#LegacySyncImporter) which returns its result directly; for [render](modules#render), it may be either a [LegacySyncImporter](modules#LegacySyncImporter) or a [LegacyAsyncImporter](modules#LegacyAsyncImporter) which calls a callback with its result.\n\nSee [LegacySharedOptions.importer](interfaces/legacysharedoptions#importer) for more details.\n\ndeprecated  \nThis only works with the legacy [render](modules#render) and [renderSync](modules#renderSync) APIs. Use [Importer](interfaces/importer) with [compile](modules#compile), [compileString](modules#compileString), [compileAsync](modules#compileAsync), and [compileStringAsync](modules#compileStringAsync) instead.\n\n#### Type parameters\n\n- #### sync = \"sync\" \\| \"async\"\n\n### LegacyImporterResult\n\nLegacyImporterResult: { file: string } \\| { contents: string } \\| Error \\| null\n\n- Defined in [js-api-doc/legacy/importer.d.ts:45](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/importer.d.ts#L45)\n\nThe result of running a [LegacyImporter](modules#LegacyImporter). It must be one of the following types:\n\n- An object with the key `contents` whose value is the contents of a stylesheet (in SCSS syntax). This causes Sass to load that stylesheet’s contents.\n\n- An object with the key `file` whose value is a path on disk. This causes Sass to load that file as though it had been imported directly.\n\n- `null`, which indicates that it doesn’t recognize the URL and another importer should be tried instead.\n\n- An [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object, indicating that importing failed.\n\ndeprecated  \nThis only works with the legacy [render](modules#render) and [renderSync](modules#renderSync) APIs. Use [ImporterResult](interfaces/importerresult) with [compile](modules#compile), [compileString](modules#compileString), [compileAsync](modules#compileAsync), and [compileStringAsync](modules#compileStringAsync) instead.\n\n### LegacyOptions\n\nLegacyOptions\\<sync\\>: [LegacyFileOptions](interfaces/legacyfileoptions)\\<sync\\> \\| [LegacyStringOptions](interfaces/legacystringoptions)\\<sync\\>\n\n- Defined in [js-api-doc/legacy/options.d.ts:640](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/options.d.ts#L640)\n\nOptions for [render](modules#render) and [renderSync](modules#renderSync). This can either be [LegacyFileOptions](interfaces/legacyfileoptions) to load a file from disk, or [LegacyStringOptions](interfaces/legacystringoptions) to compile a string of Sass code.\n\nSee [LegacySharedOptions](interfaces/legacysharedoptions) for options that are shared across both file and string inputs.\n\ndeprecated  \nThis only works with the legacy [render](modules#render) and [renderSync](modules#renderSync) APIs. Use [Options](interfaces/options) with [compile](modules#compile), [compileString](modules#compileString), [compileAsync](modules#compileAsync), and [compileStringAsync](modules#compileStringAsync) instead.\n\n#### Type parameters\n\n- #### sync: \"sync\" \\| \"async\"\n\n### LegacySyncFunction\n\nLegacySyncFunction: (this: [LegacyPluginThis](interfaces/legacypluginthis), …args: [LegacyValue](modules#LegacyValue)\\[\\]) =\\> [LegacyValue](modules#LegacyValue)\n\n- Defined in [js-api-doc/legacy/function.d.ts:37](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L37)\n\n#### Type declaration\n\n- - (this: [LegacyPluginThis](interfaces/legacypluginthis), …args: [LegacyValue](modules#LegacyValue)\\[\\]): [LegacyValue](modules#LegacyValue)\n\n  &nbsp;\n\n  - A synchronous callback that implements a custom Sass function. This can be passed to [LegacySharedOptions.functions](interfaces/legacysharedoptions#functions) for either [render](modules#render) or [renderSync](modules#renderSync).\n\n    If this throws an error, Sass will treat that as the function failing with that error message.\n\n    ``` js\n    constresult = sass.renderSync({\n    file:'style.scss',\n    functions: {\n    \"sum($arg1, $arg2)\": (arg1, arg2) => {\n    if (!(arg1instanceofsass.types.Number)) {\n    thrownewError(\"$arg1: Expected a number\");\n          } elseif (!(arg2instanceofsass.types.Number)) {\n    thrownewError(\"$arg2: Expected a number\");\n          }\n    returnnewsass.types.Number(arg1.getValue() + arg2.getValue());\n        }\n      }\n    });\n    ```\n\n    deprecated  \n    This only works with the legacy [render](modules#render) and [renderSync](modules#renderSync) APIs. Use [CustomFunction](modules#CustomFunction) with [compile](modules#compile), [compileString](modules#compileString), [compileAsync](modules#compileAsync), and [compileStringAsync](modules#compileStringAsync) instead.\n\n    #### Parameters\n\n    - ##### this: [LegacyPluginThis](interfaces/legacypluginthis)\n\n    - ##### Rest …args: [LegacyValue](modules#LegacyValue)\\[\\]\n\n      One argument for each argument that's declared in the signature that's passed to [LegacySharedOptions.functions](interfaces/legacysharedoptions#functions). If the signature [takes arbitrary arguments](../at-rules/function#taking-arbitrary-arguments), they're passed as a single argument list in the last argument.\n\n    #### Returns [LegacyValue](modules#LegacyValue)\n\n### LegacySyncImporter\n\nLegacySyncImporter: (this: [LegacyImporterThis](interfaces/legacyimporterthis), url: string, prev: string) =\\> [LegacyImporterResult](modules#LegacyImporterResult)\n\n- Defined in [js-api-doc/legacy/importer.d.ts:92](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/importer.d.ts#L92)\n\n#### Type declaration\n\n- - (this: [LegacyImporterThis](interfaces/legacyimporterthis), url: string, prev: string): [LegacyImporterResult](modules#LegacyImporterResult)\n\n  &nbsp;\n\n  - A synchronous callback that implements custom Sass loading logic for [`@import` rules](../at-rules/import) and [`@use` rules](../at-rules/use). This can be passed to [LegacySharedOptions.importer](interfaces/legacysharedoptions#importer) for either [render](modules#render) or [renderSync](modules#renderSync).\n\n    See [LegacySharedOptions.importer](interfaces/legacysharedoptions#importer) for more detailed documentation.\n\n    ``` js\n    sass.renderSync({\n    file:\"style.scss\",\n    importer: [\n    function(url, prev) {\n    if (url != \"big-headers\") returnnull;\n\n    return {\n    contents:'h1 { font-size: 40px; }'\n          };\n        }\n      ]\n    });\n    ```\n\n    deprecated  \n    This only works with the legacy [render](modules#render) and [renderSync](modules#renderSync) APIs. Use [Importer](interfaces/importer) with [compile](modules#compile), [compileString](modules#compileString), [compileAsync](modules#compileAsync), and [compileStringAsync](modules#compileStringAsync) instead.\n\n    #### Parameters\n\n    - ##### this: [LegacyImporterThis](interfaces/legacyimporterthis)\n\n    - ##### url: string\n\n      The `@use` or `@import` rule’s URL as a string, exactly as it appears in the stylesheet.\n\n    - ##### prev: string\n\n      A string identifying the stylesheet that contained the `@use` or `@import`. This string’s format depends on how that stylesheet was loaded:\n\n      - If the stylesheet was loaded from the filesystem, it’s the absolute path of its file.\n      - If the stylesheet was loaded from an importer that returned its contents, it’s the URL of the `@use` or `@import` rule that loaded it.\n      - If the stylesheet came from the data option, it’s the string \"stdin\".\n\n    #### Returns [LegacyImporterResult](modules#LegacyImporterResult)\n\n### LegacyValue\n\nLegacyValue: [Null](classes/types.null) \\| [Number](classes/types.number) \\| [String](classes/types.string) \\| [Boolean](classes/types.boolean) \\| [Color](classes/types.color) \\| [List](classes/types.list) \\| [Map](classes/types.map)\n\n- Defined in [js-api-doc/legacy/function.d.ts:178](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L178)\n\nA type representing all the possible values that may be passed to or returned from a [LegacyFunction](modules#LegacyFunction).\n\ndeprecated  \nThis only works with the legacy [render](modules#render) and [renderSync](modules#renderSync) APIs. Use [Value](classes/value) with [compile](modules#compile), [compileString](modules#compileString), [compileAsync](modules#compileAsync), and [compileStringAsync](modules#compileStringAsync) instead.\n\n### FALSE\n\nFALSE: [Boolean](classes/types.boolean)\\<false\\>\n\n- Defined in [js-api-doc/legacy/function.d.ts:205](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L205)\n\nA shorthand for `sass.types.Boolean.FALSE`.\n\ndeprecated  \nThis only works with the legacy [render](modules#render) and [renderSync](modules#renderSync) APIs. Use [sassFalse](modules#sassFalse) with [compile](modules#compile), [compileString](modules#compileString), [compileAsync](modules#compileAsync), and [compileStringAsync](modules#compileStringAsync) instead.\n\n### NULL\n\nNULL: [Null](classes/types.null)\n\n- Defined in [js-api-doc/legacy/function.d.ts:215](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L215)\n\nA shorthand for `sass.types.Null.NULL`.\n\ndeprecated  \nThis only works with the legacy [render](modules#render) and [renderSync](modules#renderSync) APIs. Use [sassNull](modules#sassNull) with [compile](modules#compile), [compileString](modules#compileString), [compileAsync](modules#compileAsync), and [compileStringAsync](modules#compileStringAsync) instead.\n\n### TRUE\n\nTRUE: [Boolean](classes/types.boolean)\\<true\\>\n\n- Defined in [js-api-doc/legacy/function.d.ts:195](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/function.d.ts#L195)\n\nA shorthand for `sass.types.Boolean.TRUE`.\n\ndeprecated  \nThis only works with the legacy [render](modules#render) and [renderSync](modules#renderSync) APIs. Use [sassTrue](modules#sassTrue) with [compile](modules#compile), [compileString](modules#compileString), [compileAsync](modules#compileAsync), and [compileStringAsync](modules#compileStringAsync) instead.\n\n### render\n\n- render(options: [LegacyOptions](modules#LegacyOptions)\\<\"async\"\\>, callback: (exception?: [LegacyException](interfaces/legacyexception), result?: [LegacyResult](interfaces/legacyresult)) =\\> void): void\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/render.d.ts:136](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/render.d.ts#L136)\n\n  This function asynchronously compiles a Sass file to CSS, and calls `callback` with a [LegacyResult](interfaces/legacyresult) if compilation succeeds or [LegacyException](interfaces/legacyexception) if it fails.\n\n  ### ⚠️ Heads up!\n\n  When using Dart Sass, **[renderSync](modules#renderSync) is almost twice as fast as [render](modules#render)** by default, due to the overhead of making the entire evaluation process asynchronous.\n\n  ``` js\n  constsass = require('sass'); // or require('node-sass');\n\n  sass.render({\n  file:\"style.scss\"\n  }, function(err, result) {\n  // ...\n  });\n  ```\n\n  deprecated  \n  Use [compileAsync](modules#compileAsync) or [compileStringAsync](modules#compileStringAsync) instead.\n\n  #### Parameters\n\n  - ##### options: [LegacyOptions](modules#LegacyOptions)\\<\"async\"\\>\n\n  - ##### callback: (exception?: [LegacyException](interfaces/legacyexception), result?: [LegacyResult](interfaces/legacyresult)) =\\> void\n\n    - - (exception?: [LegacyException](interfaces/legacyexception), result?: [LegacyResult](interfaces/legacyresult)): void\n\n      &nbsp;\n\n      - #### Parameters\n\n        - ##### Optional exception: [LegacyException](interfaces/legacyexception)\n\n        - ##### Optional result: [LegacyResult](interfaces/legacyresult)\n\n        #### Returns void\n\n  #### Returns void\n\n### renderSync\n\n- renderSync(options: [LegacyOptions](modules#LegacyOptions)\\<\"sync\"\\>): [LegacyResult](interfaces/legacyresult)\n\n&nbsp;\n\n- - Defined in [js-api-doc/legacy/render.d.ts:111](https://github.com/sass/sass/blob/6d42491/js-api-doc/legacy/render.d.ts#L111)\n\n  This function synchronously compiles a Sass file to CSS. If it succeeds, it returns the result, and if it fails it throws an error.\n\n  example  \n  ``` js\n  constsass = require('sass'); // or require('node-sass');\n\n  constresult = sass.renderSync({file:\"style.scss\"});\n  // ...\n  ```\n\n  deprecated  \n  Use [compile](modules#compile) or [compileString](modules#compileString) instead.\n\n  #### Parameters\n\n  - ##### options: [LegacyOptions](modules#LegacyOptions)\\<\"sync\"\\>\n\n  #### Returns [LegacyResult](interfaces/legacyresult)\n\n- [Exports](modules)\n- [Logger](modules/logger)\n- [types](modules/types)\n\n&nbsp;\n\n- Compile\n- [CompileResult](interfaces/compileresult)\n- [compile](modules#compile)\n- [compileAsync](modules#compileAsync)\n- [compileString](modules#compileString)\n- [compileStringAsync](modules#compileStringAsync)\n- Options\n- [Options](interfaces/options)\n- [StringOptionsWithImporter](interfaces/stringoptionswithimporter)\n- [StringOptionsWithoutImporter](interfaces/stringoptionswithoutimporter)\n- [OutputStyle](modules#OutputStyle)\n- [StringOptions](modules#StringOptions)\n- [Syntax](modules#Syntax)\n- Logger\n- [Logger](modules/logger)\n- [Logger](interfaces/logger)\n- [SourceLocation](interfaces/sourcelocation)\n- [SourceSpan](interfaces/sourcespan)\n- Importer\n- [FileImporter](interfaces/fileimporter)\n- [Importer](interfaces/importer)\n- [ImporterResult](interfaces/importerresult)\n- Custom Function\n- [SassArgumentList](classes/sassargumentlist)\n- [SassBoolean](classes/sassboolean)\n- [SassColor](classes/sasscolor)\n- [SassFunction](classes/sassfunction)\n- [SassList](classes/sasslist)\n- [SassMap](classes/sassmap)\n- [SassNumber](classes/sassnumber)\n- [SassString](classes/sassstring)\n- [Value](classes/value)\n- [CustomFunction](modules#CustomFunction)\n- [ListSeparator](modules#ListSeparator)\n- [sassFalse](modules#sassFalse)\n- [sassNull](modules#sassNull)\n- [sassTrue](modules#sassTrue)\n- Other\n- [Exception](classes/exception)\n- [LegacyFileOptions](interfaces/legacyfileoptions)\n- [PromiseOr](modules#PromiseOr)\n- [info](modules#info)\n- Legacy\n- [types](modules/types)\n- [LegacyException](interfaces/legacyexception)\n- [LegacyImporterThis](interfaces/legacyimporterthis)\n- [LegacyPluginThis](interfaces/legacypluginthis)\n- [LegacyResult](interfaces/legacyresult)\n- [LegacySharedOptions](interfaces/legacysharedoptions)\n- [LegacyStringOptions](interfaces/legacystringoptions)\n- [LegacyAsyncFunction](modules#LegacyAsyncFunction)\n- [LegacyAsyncFunctionDone](modules#LegacyAsyncFunctionDone)\n- [LegacyAsyncImporter](modules#LegacyAsyncImporter)\n- [LegacyFunction](modules#LegacyFunction)\n- [LegacyImporter](modules#LegacyImporter)\n- [LegacyImporterResult](modules#LegacyImporterResult)\n- [LegacyOptions](modules#LegacyOptions)\n- [LegacySyncFunction](modules#LegacySyncFunction)\n- [LegacySyncImporter](modules#LegacySyncImporter)\n- [LegacyValue](modules#LegacyValue)\n- [FALSE](modules#FALSE)\n- [NULL](modules#NULL)\n- [TRUE](modules#TRUE)\n- [render](modules#render)\n- [renderSync](modules#renderSync)\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/js-api/modules](https://sass-lang.com/documentation/js-api/modules)"
- name: sass:color
  id: modules/color
  summary: Only Dart Sass currently supports loading built-in modules with @use
  description: "# sass:color\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports loading built-in modules with `@use`. Users of other implementations must call functions using their global names instead.\n\n``` scss\ncolor.adjust($color,\n  $red: null, $green: null, $blue: null,\n  $hue: null, $saturation: null, $lightness: null,\n  $whiteness: null, $blackness: null,\n  $alpha: null)\nadjust-color(...) //=> color\n```\n\nCompatibility ($whiteness and $blackness):\n\nDart Sass  \nsince 1.28.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nIncreases or decreases one or more properties of `$color` by fixed amounts.\n\nAdds the value passed for each keyword argument to the corresponding property of the color, and returns the adjusted color. It’s an error to specify an RGB property (`$red`, `$green`, and/or `$blue`) at the same time as an HSL property (`$hue`, `$saturation`, and/or `$lightness`), or either of those at the same time as an [HWB](https://en.wikipedia.org/wiki/HWB_color_model) property (`$hue`, `$whiteness`, and/or `$blackness`).\n\nAll optional arguments must be numbers. The `$red`, `$green`, and `$blue` arguments must be [unitless](../values/numbers#units) and between -255 and 255 (inclusive). The `$hue` argument must have either the unit `deg` or no unit. The `$saturation`, `$lightness`, `$whiteness`, and `$blackness` arguments must be between `-100%` and `100%` (inclusive), and may not be unitless. The `$alpha` argument must be unitless and between -1 and 1 (inclusive).\n\nSee also:\n\n- [`color.scale()`](#scale) for fluidly scaling a color’s properties.\n- [`color.change()`](#change) for setting a color’s properties.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug color.adjust(#6b717f, $red: 15); // #7a717f\n@debug color.adjust(#d2e1dd, $red: -10, $blue: 10); // #c8e1e7\n@debug color.adjust(#998099, $lightness: -30%, $alpha: -0.4); // rgba(71, 57, 71, 0.6)\n```\n\n``` scss\n@debug color.adjust(#6b717f, $red: 15)  // #7a717f\n@debug color.adjust(#d2e1dd, $red: -10, $blue: 10)  // #c8e1e7\n@debug color.adjust(#998099, $lightness: -30%, $alpha: -0.4)  // rgba(71, 57, 71, 0.6)\n```\n\n``` scss\nadjust-hue($color, $degrees) //=> color\n```\n\nIncreases or decreases `$color`‘s hue.\n\nThe `$hue` must be a number between `-360deg` and `360deg` (inclusive) to add to `$color`’s hue. It may be [unitless](../values/numbers#units) but it may not have any unit other than `deg`.\n\nSee also [`color.adjust()`](#adjust), which can adjust any property of a color.\n\n### ⚠️ Heads up!\n\nBecause `adjust-hue()` is redundant with [`adjust()`](#adjust), it’s not included directly in the new module system. Instead of `adjust-hue($color, $amount)`, you can write [`color.adjust($color, $hue: $amount)`](#adjust).\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n// Hue 222deg becomes 282deg.\n@debug adjust-hue(#6b717f, 60deg); // #796b7f\n\n// Hue 164deg becomes 104deg.\n@debug adjust-hue(#d2e1dd, -60deg); // #d6e1d2\n\n// Hue 210deg becomes 255deg.\n@debug adjust-hue(#036, 45); // #1a0066\n```\n\n``` scss\n// Hue 222deg becomes 282deg.\n@debug adjust-hue(#6b717f, 60deg)  // #796b7f\n\n// Hue 164deg becomes 104deg.\n@debug adjust-hue(#d2e1dd, -60deg)  // #d6e1d2\n\n// Hue 210deg becomes 255deg.\n@debug adjust-hue(#036, 45)  // #1a0066\n```\n\n``` scss\ncolor.alpha($color)\nalpha($color)\nopacity($color) //=> number\n```\n\nReturns the alpha channel of `$color` as a number between 0 and 1.\n\nAs a special case, this supports the Internet Explorer syntax `alpha(opacity=20)`, for which it returns an [unquoted string](../values/strings#unquoted).\n\nSee also:\n\n- [`color.red()`](#red) for getting a color’s red channel.\n- [`color.green()`](#green) for getting a color’s green channel.\n- [`color.blue()`](#blue) for getting a color’s blue channel.\n- [`color.hue()`](#hue) for getting a color’s hue.\n- [`color.saturation()`](#saturation) for getting a color’s saturation.\n- [`color.lightness()`](#lightness) for getting a color’s lightness.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@debug color.alpha(#e1d7d2); // 1\n@debug color.opacity(rgb(210, 225, 221, 0.4)); // 0.4\n@debug alpha(opacity=20); // alpha(opacity=20)\n```\n\n``` scss\n@debug color.alpha(#e1d7d2)  // 1\n@debug color.opacity(rgb(210, 225, 221, 0.4))  // 0.4\n@debug alpha(opacity=20)  // alpha(opacity=20)\n```\n\n``` scss\ncolor.blackness($color) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.28.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the [HWB](https://en.wikipedia.org/wiki/HWB_color_model) blackness of `$color` as a number between `0%` and `100%`.\n\nSee also:\n\n- [`color.red()`](#red) for getting a color’s red channel.\n- [`color.green()`](#green) for getting a color’s green channel.\n- [`color.hue()`](#hue) for getting a color’s hue.\n- [`color.saturation()`](#saturation) for getting a color’s saturation.\n- [`color.lightness()`](#lightness) for getting a color’s lightness.\n- [`color.whiteness()`](#whiteness) for getting a color’s whiteness.\n- [`color.alpha()`](#alpha) for getting a color’s alpha channel.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n@debug color.blackness(#e1d7d2); // 11.7647058824%\n@debug color.blackness(white); // 0%\n@debug color.blackness(black); // 100%\n```\n\n``` scss\n@debug color.blackness(#e1d7d2)  // 11.7647058824%\n@debug color.blackness(white)  // 0%\n@debug color.blackness(black)  // 100%\n```\n\n``` scss\ncolor.blue($color)\nblue($color) //=> number\n```\n\nReturns the blue channel of `$color` as a number between 0 and 255.\n\nSee also:\n\n- [`color.red()`](#red) for getting a color’s red channel.\n- [`color.green()`](#green) for getting a color’s green channel.\n- [`color.hue()`](#hue) for getting a color’s hue.\n- [`color.saturation()`](#saturation) for getting a color’s saturation.\n- [`color.lightness()`](#lightness) for getting a color’s lightness.\n- [`color.whiteness()`](#whiteness) for getting a color’s whiteness.\n- [`color.blackness()`](#blackness) for getting a color’s blackness.\n- [`color.alpha()`](#alpha) for getting a color’s alpha channel.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n@debug color.blue(#e1d7d2); // 210\n@debug color.blue(white); // 255\n@debug color.blue(black); // 0\n```\n\n``` scss\n@debug color.blue(#e1d7d2)  // 210\n@debug color.blue(white)  // 255\n@debug color.blue(black)  // 0\n```\n\n``` scss\ncolor.change($color,\n  $red: null, $green: null, $blue: null,\n  $hue: null, $saturation: null, $lightness: null,\n  $whiteness: null, $blackness: null,\n  $alpha: null)\nchange-color(...) //=> color\n```\n\nCompatibility ($whiteness and $blackness):\n\nDart Sass  \nsince 1.28.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nSets one or more properties of a color to new values.\n\nUses the value passed for each keyword argument in place of the corresponding property of the color, and returns the changed color. It’s an error to specify an RGB property (`$red`, `$green`, and/or `$blue`) at the same time as an HSL property (`$hue`, `$saturation`, and/or `$lightness`), or either of those at the same time as an [HWB](https://en.wikipedia.org/wiki/HWB_color_model) property (`$hue`, `$whiteness`, and/or `$blackness`).\n\nAll optional arguments must be numbers. The `$red`, `$green`, and `$blue` arguments must be [unitless](../values/numbers#units) and between 0 and 255 (inclusive). The `$hue` argument must have either the unit `deg` or no unit. The `$saturation`, `$lightness`, `$whiteness`, and `$blackness` arguments must be between `0%` and `100%` (inclusive), and may not be unitless. The `$alpha` argument must be unitless and between 0 and 1 (inclusive).\n\nSee also:\n\n- [`color.scale()`](#scale) for fluidly scaling a color’s properties.\n- [`color.adjust()`](#adjust) for adjusting a color’s properties by fixed amounts.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@debug color.change(#6b717f, $red: 100); // #64717f\n@debug color.change(#d2e1dd, $red: 100, $blue: 50); // #64e132\n@debug color.change(#998099, $lightness: 30%, $alpha: 0.5); // rgba(85, 68, 85, 0.5)\n```\n\n``` scss\n@debug color.change(#6b717f, $red: 100)  // #64717f\n@debug color.change(#d2e1dd, $red: 100, $blue: 50)  // #64e132\n@debug color.change(#998099, $lightness: 30%, $alpha: 0.5)  // rgba(85, 68, 85, 0.5)\n```\n\n``` scss\ncolor.complement($color)\ncomplement($color) //=> color\n```\n\nReturns the RGB [complement](https://en.wikipedia.org/wiki/Complementary_colors) of `$color`.\n\nThis is identical to [`color.adjust($color, $hue: 180deg)`](#adjust).\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n\n``` scss\n// Hue 222deg becomes 42deg.\n@debug color.complement(#6b717f); // #7f796b\n\n// Hue 164deg becomes 344deg.\n@debug color.complement(#d2e1dd); // #e1d2d6\n\n// Hue 210deg becomes 30deg.\n@debug color.complement(#036); // #663300\n```\n\n``` scss\n// Hue 222deg becomes 42deg.\n@debug color.complement(#6b717f)  // #7f796b\n\n// Hue 164deg becomes 344deg.\n@debug color.complement(#d2e1dd)  // #e1d2d6\n\n// Hue 210deg becomes 30deg.\n@debug color.complement(#036)  // #663300\n```\n\n``` scss\ndarken($color, $amount) //=> color\n```\n\nMakes `$color` darker.\n\nThe `$amount` must be a number between `0%` and `100%` (inclusive). Decreases the HSL lightness of `$color` by that amount.\n\n### ⚠️ Heads up!\n\nThe `darken()` function decreases lightness by a fixed amount, which is often not the desired effect. To make a color a certain percentage darker than it was before, use [`color.scale()`](#scale) instead.\n\nBecause `darken()` is usually not the best way to make a color darker, it’s not included directly in the new module system. However, if you have to preserve the existing behavior, `darken($color, $amount)` can be written [`color.adjust($color, $lightness: -$amount)`](#adjust).\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n\n``` scss\n// #036 has lightness 20%, so when darken() subtracts 30% it just returns black.\n@debug darken(#036, 30%); // black\n\n// scale() instead makes it 30% darker than it was originally.\n@debug color.scale(#036, $lightness: -30%); // #002447\n```\n\n``` scss\n// #036 has lightness 20%, so when darken() subtracts 30% it just returns black.\n@debug darken(#036, 30%)  // black\n\n// scale() instead makes it 30% darker than it was originally.\n@debug color.scale(#036, $lightness: -30%)  // #002447\n```\n\n- [SCSS](#example-9-scss)\n- [Sass](#example-9-sass)\n\n``` scss\n// Lightness 92% becomes 72%.\n@debug darken(#b37399, 20%); // #7c4465\n\n// Lightness 85% becomes 45%.\n@debug darken(#f2ece4, 40%); // #b08b5a\n\n// Lightness 20% becomes 0%.\n@debug darken(#036, 30%); // black\n```\n\n``` scss\n// Lightness 92% becomes 72%.\n@debug darken(#b37399, 20%)  // #7c4465\n\n// Lightness 85% becomes 45%.\n@debug darken(#f2ece4, 40%)  // #b08b5a\n\n// Lightness 20% becomes 0%.\n@debug darken(#036, 30%)  // black\n```\n\n``` scss\ndesaturate($color, $amount) //=> color\n```\n\nMakes `$color` less saturated.\n\nThe `$amount` must be a number between `0%` and `100%` (inclusive). Decreases the HSL saturation of `$color` by that amount.\n\n### ⚠️ Heads up!\n\nThe `desaturate()` function decreases saturation by a fixed amount, which is often not the desired effect. To make a color a certain percentage less saturated than it was before, use [`color.scale()`](#scale) instead.\n\nBecause `desaturate()` is usually not the best way to make a color less saturated, it’s not included directly in the new module system. However, if you have to preserve the existing behavior, `desaturate($color, $amount)` can be written [`color.adjust($color, $saturation: -$amount)`](#adjust).\n\n- [SCSS](#example-10-scss)\n- [Sass](#example-10-sass)\n\n``` scss\n// #d2e1dd has saturation 20%, so when desaturate() subtracts 30% it just\n// returns gray.\n@debug desaturate(#d2e1dd, 30%); // #dadada\n\n// scale() instead makes it 30% less saturated than it was originally.\n@debug color.scale(#6b717f, $saturation: -30%); // #6e727c\n```\n\n``` scss\n// #6b717f has saturation 20%, so when desaturate() subtracts 30% it just\n// returns gray.\n@debug desaturate(#d2e1dd, 30%)  // #dadada\n\n// scale() instead makes it 30% less saturated than it was originally.\n@debug color.scale(#6b717f, $saturation: -30%)  // #6e727c\n```\n\n- [SCSS](#example-11-scss)\n- [Sass](#example-11-sass)\n\n``` scss\n// Saturation 100% becomes 80%.\n@debug desaturate(#036, 20%); // #0a335c\n\n// Saturation 35% becomes 15%.\n@debug desaturate(#f2ece4, 20%); // #eeebe8\n\n// Saturation 20% becomes 0%.\n@debug desaturate(#d2e1dd, 30%); // #dadada\n```\n\n``` scss\n// Saturation 100% becomes 80%.\n@debug desaturate(#036, 20%)  // #0a335c\n\n// Saturation 35% becomes 15%.\n@debug desaturate(#f2ece4, 20%)  // #eeebe8\n\n// Saturation 20% becomes 0%.\n@debug desaturate(#d2e1dd, 30%)  // #dadada\n```\n\n``` scss\ncolor.grayscale($color)\ngrayscale($color) //=> color\n```\n\nReturns a gray color with the same lightness as `$color`.\n\nThis is identical to [`color.change($color, $saturation: 0%)`](#change).\n\n- [SCSS](#example-12-scss)\n- [Sass](#example-12-sass)\n\n``` scss\n@debug color.grayscale(#6b717f); // #757575\n@debug color.grayscale(#d2e1dd); // #dadada\n@debug color.grayscale(#036); // #333333\n```\n\n``` scss\n@debug color.grayscale(#6b717f)  // #757575\n@debug color.grayscale(#d2e1dd)  // #dadada\n@debug color.grayscale(#036)  // #333333\n```\n\n``` scss\ncolor.green($color)\ngreen($color) //=> number\n```\n\nReturns the green channel of `$color` as a number between 0 and 255.\n\nSee also:\n\n- [`color.red()`](#red) for getting a color’s red channel.\n- [`color.blue()`](#blue) for getting a color’s blue channel.\n- [`color.hue()`](#hue) for getting a color’s hue.\n- [`color.saturation()`](#saturation) for getting a color’s saturation.\n- [`color.lightness()`](#lightness) for getting a color’s lightness.\n- [`color.whiteness()`](#whiteness) for getting a color’s whiteness.\n- [`color.blackness()`](#blackness) for getting a color’s blackness.\n- [`color.alpha()`](#alpha) for getting a color’s alpha channel.\n\n- [SCSS](#example-13-scss)\n- [Sass](#example-13-sass)\n\n``` scss\n@debug color.green(#e1d7d2); // 215\n@debug color.green(white); // 255\n@debug color.green(black); // 0\n```\n\n``` scss\n@debug color.green(#e1d7d2)  // 215\n@debug color.green(white)  // 255\n@debug color.green(black)  // 0\n```\n\n``` scss\ncolor.hue($color)\nhue($color) //=> number\n```\n\nReturns the hue of `$color` as a number between `0deg` and `360deg`.\n\nSee also:\n\n- [`color.red()`](#red) for getting a color’s red channel.\n- [`color.green()`](#green) for getting a color’s green channel.\n- [`color.blue()`](#blue) for getting a color’s blue channel.\n- [`color.saturation()`](#saturation) for getting a color’s saturation.\n- [`color.lightness()`](#lightness) for getting a color’s lightness.\n- [`color.whiteness()`](#whiteness) for getting a color’s whiteness.\n- [`color.blackness()`](#blackness) for getting a color’s blackness.\n- [`color.alpha()`](#alpha) for getting a color’s alpha channel.\n\n- [SCSS](#example-14-scss)\n- [Sass](#example-14-sass)\n\n``` scss\n@debug color.hue(#e1d7d2); // 20deg\n@debug color.hue(#f2ece4); // 34.2857142857deg\n@debug color.hue(#dadbdf); // 228deg\n```\n\n``` scss\n@debug color.hue(#e1d7d2)  // 20deg\n@debug color.hue(#f2ece4)  // 34.2857142857deg\n@debug color.hue(#dadbdf)  // 228deg\n```\n\n``` scss\ncolor.hwb($hue $whiteness $blackness)\ncolor.hwb($hue $whiteness $blackness / $alpha)\ncolor.hwb($hue, $whiteness, $blackness, $alpha: 1) //=> color\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.28.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns a color with the given [hue, whiteness, and blackness](https://en.wikipedia.org/wiki/HWB_color_model) and the given alpha channel.\n\nThe hue is a number between `0deg` and `360deg` (inclusive). The whiteness and blackness are numbers between `0%` and `100%` (inclusive). The hue may be [unitless](../values/numbers#units), but the whiteness and blackness must have unit `%`. The alpha channel can be specified as either a unitless number between 0 and 1 (inclusive), or a percentage between `0%` and `100%` (inclusive).\n\n### ⚠️ Heads up!\n\nSass’s [special parsing rules](../operators/numeric#slash-separated-values) for slash-separated values make it difficult to pass variables for `$blackness` or `$alpha` when using the `color.hwb($hue $whiteness $blackness / $alpha)` signature. Consider using `color.hwb($hue, $whiteness, $blackness, $alpha)` instead.\n\n- [SCSS](#example-15-scss)\n- [Sass](#example-15-sass)\n\n``` scss\n@debug color.hwb(210, 0%, 60%); // #036\n@debug color.hwb(34, 89%, 5%); // #f2ece4\n@debug color.hwb(210 0% 60% / 0.5); // rgba(0, 51, 102, 0.5)\n```\n\n``` scss\n@debug color.hwb(210, 0%, 60%)  // #036\n@debug color.hwb(34, 89%, 5%)  // #f2ece4\n@debug color.hwb(210 0% 60% / 0.5)  // rgba(0, 51, 102, 0.5)\n```\n\n``` scss\ncolor.ie-hex-str($color)\nie-hex-str($color) //=> unquoted string\n```\n\nReturns an unquoted string that represents `$color` in the `#AARRGGBB` format expected by Internet Explorer’s [`-ms-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-filter) property.\n\n- [SCSS](#example-16-scss)\n- [Sass](#example-16-sass)\n\n``` scss\n@debug color.ie-hex-str(#b37399); // #FFB37399\n@debug color.ie-hex-str(#808c99); // #FF808C99\n@debug color.ie-hex-str(rgba(242, 236, 228, 0.6)); // #99F2ECE4\n```\n\n``` scss\n@debug color.ie-hex-str(#b37399); // #FFB37399\n@debug color.ie-hex-str(#808c99); // #FF808C99\n@debug color.ie-hex-str(rgba(242, 236, 228, 0.6)); // #99F2ECE4\n```\n\n``` scss\ncolor.invert($color, $weight: 100%)\ninvert($color, $weight: 100%) //=> color\n```\n\nReturns the inverse or [negative](https://en.wikipedia.org/wiki/Negative_(photography)) of `$color`.\n\nThe `$weight` must be a number between `0%` and `100%` (inclusive). A higher weight means the result will be closer to the negative, and a lower weight means it will be closer to `$color`. Weight `50%` will always produce `#808080`.\n\n- [SCSS](#example-17-scss)\n- [Sass](#example-17-sass)\n\n``` scss\n@debug color.invert(#b37399); // #4c8c66\n@debug color.invert(black); // white\n@debug color.invert(#550e0c, 20%); // #663b3a\n```\n\n``` scss\n@debug color.invert(#b37399)  // #4c8c66\n@debug color.invert(black)  // white\n@debug color.invert(#550e0c, 20%)  // #663b3a\n```\n\n``` scss\nlighten($color, $amount) //=> color\n```\n\nMakes `$color` lighter.\n\nThe `$amount` must be a number between `0%` and `100%` (inclusive). Increases the HSL lightness of `$color` by that amount.\n\n### ⚠️ Heads up!\n\nThe `lighten()` function increases lightness by a fixed amount, which is often not the desired effect. To make a color a certain percentage lighter than it was before, use [`scale()`](#scale) instead.\n\nBecause `lighten()` is usually not the best way to make a color lighter, it’s not included directly in the new module system. However, if you have to preserve the existing behavior, `lighten($color, $amount)` can be written [`adjust($color, $lightness: $amount)`](#adjust).\n\n- [SCSS](#example-18-scss)\n- [Sass](#example-18-sass)\n\n``` scss\n// #e1d7d2 has lightness 85%, so when lighten() adds 30% it just returns white.\n@debug lighten(#e1d7d2, 30%); // white\n\n// scale() instead makes it 30% lighter than it was originally.\n@debug color.scale(#e1d7d2, $lightness: 30%); // #eae3e0\n```\n\n``` scss\n// #e1d7d2 has lightness 85%, so when lighten() adds 30% it just returns white.\n@debug lighten(#e1d7d2, 30%)  // white\n\n// scale() instead makes it 30% lighter than it was originally.\n@debug color.scale(#e1d7d2, $lightness: 30%)  // #eae3e0\n```\n\n- [SCSS](#example-19-scss)\n- [Sass](#example-19-sass)\n\n``` scss\n// Lightness 46% becomes 66%.\n@debug lighten(#6b717f, 20%); // #a1a5af\n\n// Lightness 20% becomes 80%.\n@debug lighten(#036, 60%); // #99ccff\n\n// Lightness 85% becomes 100%.\n@debug lighten(#e1d7d2, 30%); // white\n```\n\n``` scss\n// Lightness 46% becomes 66%.\n@debug lighten(#6b717f, 20%)  // #a1a5af\n\n// Lightness 20% becomes 80%.\n@debug lighten(#036, 60%)  // #99ccff\n\n// Lightness 85% becomes 100%.\n@debug lighten(#e1d7d2, 30%)  // white\n```\n\n``` scss\ncolor.lightness($color)\nlightness($color) //=> number\n```\n\nReturns the HSL lightness of `$color` as a number between `0%` and `100%`.\n\nSee also:\n\n- [`color.red()`](#red) for getting a color’s red channel.\n- [`color.green()`](#green) for getting a color’s green channel.\n- [`color.blue()`](#blue) for getting a color’s blue channel.\n- [`color.hue()`](#hue) for getting a color’s hue.\n- [`color.saturation()`](#saturation) for getting a color’s saturation.\n- [`color.whiteness()`](#whiteness) for getting a color’s whiteness.\n- [`color.blackness()`](#blackness) for getting a color’s blackness.\n- [`color.alpha()`](#alpha) for getting a color’s alpha channel.\n\n- [SCSS](#example-20-scss)\n- [Sass](#example-20-sass)\n\n``` scss\n@debug color.lightness(#e1d7d2); // 85.2941176471%\n@debug color.lightness(#f2ece4); // 92.1568627451%\n@debug color.lightness(#dadbdf); // 86.4705882353%\n```\n\n``` scss\n@debug color.lightness(#e1d7d2)  // 85.2941176471%\n@debug color.lightness(#f2ece4)  // 92.1568627451%\n@debug color.lightness(#dadbdf)  // 86.4705882353%\n```\n\n``` scss\ncolor.mix($color1, $color2, $weight: 50%)\nmix($color1, $color2, $weight: 50%) //=> color\n```\n\nReturns a color that’s a mixture of `$color1` and `$color2`.\n\nBoth the `$weight` and the relative opacity of each color determines how much of each color is in the result. The `$weight` must be a number between `0%` and `100%` (inclusive). A larger weight indicates that more of `$color1` should be used, and a smaller weight indicates that more of `$color2` should be used.\n\n- [SCSS](#example-21-scss)\n- [Sass](#example-21-sass)\n\n``` scss\n@debug color.mix(#036, #d2e1dd); // #698aa2\n@debug color.mix(#036, #d2e1dd, 75%); // #355f84\n@debug color.mix(#036, #d2e1dd, 25%); // #9eb6bf\n@debug color.mix(rgba(242, 236, 228, 0.5), #6b717f); // rgba(141, 144, 152, 0.75)\n```\n\n``` scss\n@debug color.mix(#036, #d2e1dd)  // #698aa2\n@debug color.mix(#036, #d2e1dd, 75%)  // #355f84\n@debug color.mix(#036, #d2e1dd, 25%)  // #9eb6bf\n@debug color.mix(rgba(242, 236, 228, 0.5), #6b717f)  // rgba(141, 144, 152, 0.75)\n```\n\n``` scss\nopacify($color, $amount)\nfade-in($color, $amount) //=> color\n```\n\nMakes `$color` more opaque.\n\nThe `$amount` must be a number between `0` and `1` (inclusive). Increases the alpha channel of `$color` by that amount.\n\n### ⚠️ Heads up!\n\nThe `opacify()` function increases the alpha channel by a fixed amount, which is often not the desired effect. To make a color a certain percentage more opaque than it was before, use [`scale()`](#scale) instead.\n\nBecause `opacify()` is usually not the best way to make a color more opaque, it’s not included directly in the new module system. However, if you have to preserve the existing behavior, `opacify($color, $amount)` can be written [`adjust($color, $alpha: -$amount)`](#adjust).\n\n- [SCSS](#example-22-scss)\n- [Sass](#example-22-sass)\n\n``` scss\n// rgba(#036, 0.7) has alpha 0.7, so when opacify() adds 0.3 it returns a fully\n// opaque color.\n@debug opacify(rgba(#036, 0.7), 0.3); // #036\n\n// scale() instead makes it 30% more opaque than it was originally.\n@debug color.scale(rgba(#036, 0.7), $alpha: 30%); // rgba(0, 51, 102, 0.79)\n```\n\n``` scss\n// rgba(#036, 0.7) has alpha 0.7, so when opacify() adds 0.3 it returns a fully\n// opaque color.\n@debug opacify(rgba(#036, 0.7), 0.3)  // #036\n\n// scale() instead makes it 30% more opaque than it was originally.\n@debug color.scale(rgba(#036, 0.7), $alpha: 30%)  // rgba(0, 51, 102, 0.79)\n```\n\n- [SCSS](#example-23-scss)\n- [Sass](#example-23-sass)\n\n``` scss\n@debug opacify(rgba(#6b717f, 0.5), 0.2); // rgba(107, 113, 127, 0.7)\n@debug fade-in(rgba(#e1d7d2, 0.5), 0.4); // rgba(225, 215, 210, 0.9)\n@debug opacify(rgba(#036, 0.7), 0.3); // #036\n```\n\n``` scss\n@debug opacify(rgba(#6b717f, 0.5), 0.2)  // rgba(107, 113, 127, 0.7)\n@debug fade-in(rgba(#e1d7d2, 0.5), 0.4)  // rgba(225, 215, 210, 0.9)\n@debug opacify(rgba(#036, 0.7), 0.3)  // #036\n```\n\n``` scss\ncolor.red($color)\nred($color) //=> number\n```\n\nReturns the red channel of `$color` as a number between 0 and 255.\n\nSee also:\n\n- [`color.green()`](#green) for getting a color’s green channel.\n- [`color.blue()`](#blue) for getting a color’s blue channel.\n- [`color.hue()`](#hue) for getting a color’s hue.\n- [`color.saturation()`](#saturation) for getting a color’s saturation.\n- [`color.lightness()`](#lightness) for getting a color’s lightness.\n- [`color.whiteness()`](#whiteness) for getting a color’s whiteness.\n- [`color.blackness()`](#blackness) for getting a color’s blackness.\n- [`color.alpha()`](#alpha) for getting a color’s alpha channel.\n\n- [SCSS](#example-24-scss)\n- [Sass](#example-24-sass)\n\n``` scss\n@debug color.red(#e1d7d2); // 225\n@debug color.red(white); // 255\n@debug color.red(black); // 0\n```\n\n``` scss\n@debug color.red(#e1d7d2)  // 225\n@debug color.red(white)  // 255\n@debug color.red(black)  // 0\n```\n\n``` scss\nsaturate($color, $amount)\nsaturate($color, $amount) //=> color\n```\n\nMakes `$color` more saturated.\n\nThe `$amount` must be a number between `0%` and `100%` (inclusive). Increases the HSL saturation of `$color` by that amount.\n\n### ⚠️ Heads up!\n\nThe `saturate()` function increases saturation by a fixed amount, which is often not the desired effect. To make a color a certain percentage more saturated than it was before, use [`scale()`](#scale) instead.\n\nBecause `saturate()` is usually not the best way to make a color more saturated, it’s not included directly in the new module system. However, if you have to preserve the existing behavior, `saturate($color, $amount)` can be written [`adjust($color, $saturation: $amount)`](#adjust).\n\n- [SCSS](#example-25-scss)\n- [Sass](#example-25-sass)\n\n``` scss\n// #0e4982 has saturation 80%, so when saturate() adds 30% it just becomes\n// fully saturated.\n@debug saturate(#0e4982, 30%); // #004990\n\n// scale() instead makes it 30% more saturated than it was originally.\n@debug color.scale(#0e4982, $saturation: 30%); // #0a4986\n```\n\n``` scss\n// #0e4982 has saturation 80%, so when saturate() adds 30% it just becomes\n// fully saturated.\n@debug saturate(#0e4982, 30%)  // #004990\n\n// scale() instead makes it 30% more saturated than it was originally.\n@debug color.scale(#0e4982, $saturation: 30%)  // #0a4986\n```\n\n- [SCSS](#example-26-scss)\n- [Sass](#example-26-sass)\n\n``` scss\n// Saturation 50% becomes 70%.\n@debug saturate(#c69, 20%); // #e05299\n\n// Saturation 35% becomes 85%.\n@debug desaturate(#f2ece4, 50%); // #ebebeb\n\n// Saturation 80% becomes 100%.\n@debug saturate(#0e4982, 30%)  // #004990\n```\n\n``` scss\n// Saturation 50% becomes 70%.\n@debug saturate(#c69, 20%); // #e05299\n\n// Saturation 35% becomes 85%.\n@debug desaturate(#f2ece4, 50%); // #ebebeb\n\n// Saturation 80% becomes 100%.\n@debug saturate(#0e4982, 30%)  // #004990\n```\n\n``` scss\ncolor.saturation($color)\nsaturation($color) //=> number\n```\n\nReturns the HSL saturation of `$color` as a number between `0%` and `100%`.\n\nSee also:\n\n- [`color.red()`](#red) for getting a color’s red channel.\n- [`color.green()`](#green) for getting a color’s green channel.\n- [`color.blue()`](#blue) for getting a color’s blue channel.\n- [`color.hue()`](#hue) for getting a color’s hue.\n- [`color.lightness()`](#lightness) for getting a color’s lightness.\n- [`color.whiteness()`](#whiteness) for getting a color’s whiteness.\n- [`color.blackness()`](#blackness) for getting a color’s blackness.\n- [`color.alpha()`](#alpha) for getting a color’s alpha channel.\n\n- [SCSS](#example-27-scss)\n- [Sass](#example-27-sass)\n\n``` scss\n@debug color.saturation(#e1d7d2); // 20%\n@debug color.saturation(#f2ece4); // 30%\n@debug color.saturation(#dadbdf); // 7.2463768116%\n```\n\n``` scss\n@debug color.saturation(#e1d7d2)  // 20%\n@debug color.saturation(#f2ece4)  // 30%\n@debug color.saturation(#dadbdf)  // 7.2463768116%\n```\n\n``` scss\ncolor.scale($color,\n  $red: null, $green: null, $blue: null,\n  $saturation: null, $lightness: null,\n  $whiteness: null, $blackness: null,\n  $alpha: null)\nscale-color(...) //=> color\n```\n\nCompatibility ($whiteness and $blackness):\n\nDart Sass  \nsince 1.28.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nFluidly scales one or more properties of `$color`.\n\nEach keyword argument must be a number between `-100%` and `100%` (inclusive). This indicates how far the corresponding property should be moved from its original position towards the maximum (if the argument is positive) or the minimum (if the argument is negative). This means that, for example, `$lightness: 50%` will make all colors `50%` closer to maximum lightness without making them fully white.\n\nIt’s an error to specify an RGB property (`$red`, `$green`, and/or `$blue`) at the same time as an HSL property (`$saturation`, and/or `$lightness`), or either of those at the same time as an [HWB](https://en.wikipedia.org/wiki/HWB_color_model) property (`$whiteness`, and/or `$blackness`).\n\nSee also:\n\n- [`color.adjust()`](#adjust) for changing a color’s properties by fixed amounts.\n- [`color.change()`](#change) for setting a color’s properties.\n\n- [SCSS](#example-28-scss)\n- [Sass](#example-28-sass)\n\n``` scss\n@debug color.scale(#6b717f, $red: 15%); // #81717f\n@debug color.scale(#d2e1dd, $lightness: -10%, $saturation: 10%); // #b3d4cb\n@debug color.scale(#998099, $alpha: -40%); // rgba(153, 128, 153, 0.6)\n```\n\n``` scss\n@debug color.scale(#6b717f, $red: 15%)  // #81717f\n@debug color.scale(#d2e1dd, $lightness: -10%, $saturation: 10%)  // #b3d4cb\n@debug color.scale(#998099, $alpha: -40%)  // rgba(153, 128, 153, 0.6)\n```\n\n``` scss\ntransparentize($color, $amount)\nfade-out($color, $amount) //=> color\n```\n\nMakes `$color` more transparent.\n\nThe `$amount` must be a number between `0` and `1` (inclusive). Decreases the alpha channel of `$color` by that amount.\n\n### ⚠️ Heads up!\n\nThe `transparentize()` function decreases the alpha channel by a fixed amount, which is often not the desired effect. To make a color a certain percentage more transparent than it was before, use [`color.scale()`](#scale) instead.\n\nBecause `transparentize()` is usually not the best way to make a color more transparent, it’s not included directly in the new module system. However, if you have to preserve the existing behavior, `transparentize($color, $amount)` can be written [`color.adjust($color, $alpha: -$amount)`](#adjust).\n\n- [SCSS](#example-29-scss)\n- [Sass](#example-29-sass)\n\n``` scss\n// rgba(#036, 0.3) has alpha 0.3, so when transparentize() subtracts 0.3 it\n// returns a fully transparent color.\n@debug transparentize(rgba(#036, 0.3), 0.3); // rgba(0, 51, 102, 0)\n\n// scale() instead makes it 30% more transparent than it was originally.\n@debug color.scale(rgba(#036, 0.3), $alpha: -30%); // rgba(0, 51, 102, 0.21)\n```\n\n``` scss\n// rgba(#036, 0.3) has alpha 0.3, so when transparentize() subtracts 0.3 it\n// returns a fully transparent color.\n@debug transparentize(rgba(#036, 0.3), 0.3)  // rgba(0, 51, 102, 0)\n\n// scale() instead makes it 30% more transparent than it was originally.\n@debug color.scale(rgba(#036, 0.3), $alpha: -30%)  // rgba(0, 51, 102, 0.21)\n```\n\n- [SCSS](#example-30-scss)\n- [Sass](#example-30-sass)\n\n``` scss\n@debug transparentize(rgba(#6b717f, 0.5), 0.2)  // rgba(107, 113, 127, 0.3)\n@debug fade-out(rgba(#e1d7d2, 0.5), 0.4)  // rgba(225, 215, 210, 0.1)\n@debug transparentize(rgba(#036, 0.3), 0.3)  // rgba(0, 51, 102, 0)\n```\n\n``` scss\n@debug transparentize(rgba(#6b717f, 0.5), 0.2)  // rgba(107, 113, 127, 0.3)\n@debug fade-out(rgba(#e1d7d2, 0.5), 0.4)  // rgba(225, 215, 210, 0.1)\n@debug transparentize(rgba(#036, 0.3), 0.3)  // rgba(0, 51, 102, 0)\n```\n\n``` scss\ncolor.whiteness($color) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.28.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the [HWB](https://en.wikipedia.org/wiki/HWB_color_model) whiteness of `$color` as a number between `0%` and `100%`.\n\nSee also:\n\n- [`color.red()`](#red) for getting a color’s red channel.\n- [`color.green()`](#green) for getting a color’s green channel.\n- [`color.hue()`](#hue) for getting a color’s hue.\n- [`color.saturation()`](#saturation) for getting a color’s saturation.\n- [`color.lightness()`](#lightness) for getting a color’s lightness.\n- [`color.blackness()`](#blackness) for getting a color’s blackness.\n- [`color.alpha()`](#alpha) for getting a color’s alpha channel.\n\n- [SCSS](#example-31-scss)\n- [Sass](#example-31-sass)\n\n``` scss\n@debug color.whiteness(#e1d7d2); // 82.3529411765%\n@debug color.whiteness(white); // 100%\n@debug color.whiteness(black); // 0%\n```\n\n``` scss\n@debug color.whiteness(#e1d7d2)  // 82.3529411765%\n@debug color.whiteness(white)  // 100%\n@debug color.whiteness(black)  // 0%\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/color](https://sass-lang.com/documentation/modules/color)"
- name: sass:list
  id: modules/list
  summary: Only Dart Sass currently supports loading built-in modules with @use
  description: "# sass:list\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports loading built-in modules with `@use`. Users of other implementations must call functions using their global names instead.\n\n### 💡 Fun fact:\n\nIn Sass, every [map](../values/maps) counts as a list that contains a two-element list for each key/value pair. For example, `(1: 2, 3: 4)` counts as `(1 2, 3 4)`. So all these functions work for maps as well!\n\nIndividual values also count as lists. All these functions treat `1px` as a list that contains the value `1px`.\n\n``` scss\nlist.append($list, $val, $separator: auto)\nappend($list, $val, $separator: auto) //=> list\n```\n\nReturns a copy of `$list` with `$val` added to the end.\n\nIf `$separator` is `comma`, `space`, or `slash`, the returned list is comma-separated, space-separated, or slash-separated, respectively. If it’s `auto` (the default), the returned list will use the same separator as `$list` (or `space` if `$list` doesn’t have a separator). Other values aren’t allowed.\n\nNote that unlike [`list.join()`](#join), if `$val` is a list it’s nested within the returned list rather than having all its elements added to the returned list.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug list.append(10px 20px, 30px); // 10px 20px 30px\n@debug list.append((blue, red), green); // blue, red, green\n@debug list.append(10px 20px, 30px 40px); // 10px 20px (30px 40px)\n@debug list.append(10px, 20px, $separator: comma); // 10px, 20px\n@debug list.append((blue, red), green, $separator: space); // blue red green\n```\n\n``` scss\n@debug list.append(10px 20px, 30px)  // 10px 20px 30px\n@debug list.append((blue, red), green)  // blue, red, green\n@debug list.append(10px 20px, 30px 40px)  // 10px 20px (30px 40px)\n@debug list.append(10px, 20px, $separator: comma)  // 10px, 20px\n@debug list.append((blue, red), green, $separator: space)  // blue red green\n```\n\n``` scss\nlist.index($list, $value)\nindex($list, $value) //=> number | null\n```\n\nReturns the [index](../values/lists#indexes) of `$value` in `$list`.\n\nIf `$value` doesn’t appear in `$list`, this returns [`null`](../values/null). If `$value` appears multiple times in `$list`, this returns the index of its first appearance.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n@debug list.index(1px solid red, 1px); // 1\n@debug list.index(1px solid red, solid); // 2\n@debug list.index(1px solid red, dashed); // null\n```\n\n``` scss\n@debug list.index(1px solid red, 1px)  // 1\n@debug list.index(1px solid red, solid)  // 2\n@debug list.index(1px solid red, dashed)  // null\n```\n\n``` scss\nlist.is-bracketed($list)\nis-bracketed($list) //=> boolean\n```\n\nReturns whether `$list` has square brackets.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@debug list.is-bracketed(1px 2px 3px); // false\n@debug list.is-bracketed([1px, 2px, 3px]); // true\n```\n\n``` scss\n@debug list.is-bracketed(1px 2px 3px)  // false\n@debug list.is-bracketed([1px, 2px, 3px])  // true\n```\n\n``` scss\nlist.join($list1, $list2, $separator: auto, $bracketed: auto)\njoin($list1, $list2, $separator: auto, $bracketed: auto) //=> list\n```\n\nReturns a new list containing the elements of `$list1` followed by the elements of `$list2`.\n\n### ⚠️ Heads up!\n\nBecause individual values count as single-element lists, it’s possible to use `list.join()` to add a value to the end of a list. However, *this is not recommended*, since if that value is a list it will be concatenated, which is probably not what you’re expecting.\n\nUse [`list.append()`](#append) instead to add a single value to a list. Only use `list.join()` to combine two lists together into one.\n\nIf `$separator` is `comma`, `space`, or `slash`, the returned list is comma-separated, space-separated, or slash-separated, respectively. If it’s `auto` (the default), the returned list will use the same separator as `$list1` if it has a separator, or else `$list2` if it has a separator, or else `space`. Other values aren’t allowed.\n\nIf `$bracketed` is `auto` (the default), the returned list will be bracketed if `$list1` is. Otherwise, the returned list will have square brackets if `$bracketed` is [truthy](../values/booleans#truthiness-and-falsiness) and no brackets if `$bracketed` is falsey.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n@debug list.join(10px 20px, 30px 40px); // 10px 20px 30px 40px\n@debug list.join((blue, red), (#abc, #def)); // blue, red, #abc, #def\n@debug list.join(10px, 20px); // 10px 20px\n@debug list.join(10px, 20px, $separator: comma); // 10px, 20px\n@debug list.join((blue, red), (#abc, #def), $separator: space); // blue red #abc #def\n@debug list.join([10px], 20px); // [10px 20px]\n@debug list.join(10px, 20px, $bracketed: true); // [10px 20px]\n```\n\n``` scss\n@debug list.join(10px 20px, 30px 40px)  // 10px 20px 30px 40px\n@debug list.join((blue, red), (#abc, #def))  // blue, red, #abc, #def\n@debug list.join(10px, 20px)  // 10px 20px\n@debug list.join(10px, 20px, comma)  // 10px, 20px\n@debug list.join((blue, red), (#abc, #def), space)  // blue red #abc #def\n@debug list.join([10px], 20px)  // [10px 20px]\n@debug list.join(10px, 20px, $bracketed: true)  // [10px 20px]\n```\n\n``` scss\nlist.length($list)\nlength($list) //=> number\n```\n\nReturns the length of `$list`.\n\nThis can also return the number of pairs in a map.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n@debug list.length(10px); // 1\n@debug list.length(10px 20px 30px); // 3\n@debug list.length((width: 10px, height: 20px)); // 2\n```\n\n``` scss\n@debug list.length(10px)  // 1\n@debug list.length(10px 20px 30px)  // 3\n@debug list.length((width: 10px, height: 20px))  // 2\n```\n\n``` scss\nlist.separator($list)\nlist-separator($list) //=> unquoted string\n```\n\nReturns the name of the separator used by `$list`, either `space`, `comma`, or `slash`.\n\nIf `$list` doesn’t have a separator, returns `space`.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@debug list.separator(1px 2px 3px); // space\n@debug list.separator(1px, 2px, 3px); // comma\n@debug list.separator('Helvetica'); // space\n@debug list.separator(()); // space\n```\n\n``` scss\n@debug list.separator(1px 2px 3px)  // space\n@debug list.separator(1px, 2px, 3px)  // comma\n@debug list.separator('Helvetica')  // space\n@debug list.separator(())  // space\n```\n\n``` scss\nlist.nth($list, $n)\nnth($list, $n)\n```\n\nReturns the element of `$list` at [index](../values/lists#indexes) `$n`.\n\nIf `$n` is negative, it counts from the end of `$list`. Throws an error if there is no element at index `$n`.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n\n``` scss\n@debug list.nth(10px 12px 16px, 2); // 12px\n@debug list.nth([line1, line2, line3], -1); // line3\n```\n\n``` scss\n@debug list.nth(10px 12px 16px, 2)  // 12px\n@debug list.nth([line1, line2, line3], -1)  // line3\n```\n\n``` scss\nlist.set-nth($list, $n, $value)\nset-nth($list, $n, $value) //=> list\n```\n\nReturns a copy of `$list` with the element at [index](../values/lists#indexes) `$n` replaced with `$value`.\n\nIf `$n` is negative, it counts from the end of `$list`. Throws an error if there is no existing element at index `$n`.\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n\n``` scss\n@debug list.set-nth(10px 20px 30px, 1, 2em); // 2em 20px 30px\n@debug list.set-nth(10px 20px 30px, -1, 8em); // 10px, 20px, 8em\n@debug list.set-nth((Helvetica, Arial, sans-serif), 3, Roboto); // Helvetica, Arial, Roboto\n```\n\n``` scss\n@debug list.set-nth(10px 20px 30px, 1, 2em); // 2em 20px 30px\n@debug list.set-nth(10px 20px 30px, -1, 8em); // 10px, 20px, 8em\n@debug list.set-nth((Helvetica, Arial, sans-serif), 3, Roboto); // Helvetica, Arial, Roboto\n```\n\n``` scss\nlist.slash($elements...) //=> list\n```\n\nReturns a slash-separated list that contains `$elements`.\n\n### ⚠️ Heads up!\n\nThis function is a temporary solution for creating slash-separated lists. Eventually, they’ll be written literally with slashes, as in `1px / 2px / solid`, but for the time being [slashes are used for division](https://sass-lang.com/documentation/breaking-changes/slash-div) so Sass can’t use them for new syntax until the old syntax is removed.\n\n- [SCSS](#example-9-scss)\n- [Sass](#example-9-sass)\n\n``` scss\n@debug list.slash(1px, 50px, 100px); // 1px / 50px / 100px\n```\n\n``` scss\n@debug list.slash(1px, 50px, 100px)  // 1px / 50px / 100px\n```\n\n``` scss\nlist.zip($lists...)\nzip($lists...) //=> list\n```\n\nCombines every list in `$lists` into a single list of sub-lists.\n\nEach element in the returned list contains all the elements at that position in `$lists`. The returned list is as long as the shortest list in `$lists`.\n\nThe returned list is always comma-separated and the sub-lists are always space-separated.\n\n- [SCSS](#example-10-scss)\n- [Sass](#example-10-sass)\n\n``` scss\n@debug list.zip(10px 50px 100px, short mid long); // 10px short, 50px mid, 100px long\n@debug list.zip(10px 50px 100px, short mid); // 10px short, 50px mid\n```\n\n``` scss\n@debug list.zip(10px 50px 100px, short mid long)  // 10px short, 50px mid, 100px long\n@debug list.zip(10px 50px 100px, short mid)  // 10px short, 50px mid\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/list](https://sass-lang.com/documentation/modules/list)"
- name: sass:map
  id: modules/map
  summary: Only Dart Sass currently supports loading built-in modules with @use
  description: "# sass:map\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports loading built-in modules with `@use`. Users of other implementations must call functions using their global names instead.\n\n### 💡 Fun fact:\n\nSass libraries and design systems tend to share and override configurations that are represented as nested maps (maps that contain maps that contain maps).\n\nTo help you work with nested maps, some map functions support deep operations. For example, if you pass multiple keys to `map.get()`, it will follow those keys to find the desired nested map:\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n$config: (a: (b: (c: d)));\n@debug map.get($config, a, b, c); // d\n```\n\n``` scss\n$config: (a: (b: (c: d)))\n@debug map.get($config, a, b, c) // d\n```\n\n``` scss\nmap.deep-merge($map1, $map2) //=> map\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.27.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nIdentical to [`map.merge()`](#merge), except that nested map values are *also* recursively merged.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n$helvetica-light: (\n  \"weights\": (\n    \"lightest\": 100,\n    \"light\": 300\n  )\n);\n$helvetica-heavy: (\n  \"weights\": (\n    \"medium\": 500,\n    \"bold\": 700\n  )\n);\n\n@debug map.deep-merge($helvetica-light, $helvetica-heavy);\n// (\n//   \"weights\": (\n//     \"lightest\": 100,\n//     \"light\": 300,\n//     \"medium\": 500,\n//     \"bold\": 700\n//   )\n// )\n@debug map.merge($helvetica-light, $helvetica-heavy);\n// (\n//   \"weights\": (\n//     \"medium: 500,\n//     \"bold\": 700\n//   )\n// )\n```\n\n``` scss\n$helvetica-light: (\"weights\": (\"lightest\": 100, \"light\": 300))\n$helvetica-heavy: (\"weights\": (\"medium\": 500, \"bold\": 700))\n\n@debug map.deep-merge($helvetica-light, $helvetica-heavy)\n// (\n//   \"weights\": (\n//     \"lightest\": 100,\n//     \"light\": 300,\n//     \"medium\": 500,\n//     \"bold\": 700\n//   )\n// )\n@debug map.merge($helvetica-light, $helvetica-heavy);\n// (\n//   \"weights\": (\n//     \"medium: 500,\n//     \"bold\": 700\n//   )\n// )\n```\n\n``` scss\nmap.deep-remove($map, $key, $keys...) //=> map\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.27.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nIf `$keys` is empty, returns a copy of `$map` without a value associated with `$key`.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.deep-remove($font-weights, \"regular\");\n// (\"medium\": 500, \"bold\": 700)\n```\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.deep-remove($font-weights, \"regular\")\n// (\"medium\": 500, \"bold\": 700)\n```\n\n------------------------------------------------------------------------\n\nIf `$keys` is not empty, follows the set of keys including `$key` and excluding the last key in `$keys`, from left to right, to find the nested map targeted for updating.\n\nReturns a copy of `$map` where the targeted map does not have a value associated with the last key in `$keys`.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n$fonts: (\n  \"Helvetica\": (\n    \"weights\": (\n      \"regular\": 400,\n      \"medium\": 500,\n      \"bold\": 700\n    )\n  )\n);\n\n@debug map.deep-remove($fonts, \"Helvetica\", \"weights\", \"regular\");\n// (\n//   \"Helvetica\": (\n//     \"weights: (\n//       \"medium\": 500,\n//       \"bold\": 700\n//     )\n//   )\n// )\n```\n\n``` scss\n$fonts: (\"Helvetica\": (\"weights\": (\"regular\": 400, \"medium\": 500, \"bold\": 700)))\n\n@debug map.deep-remove($fonts, \"Helvetica\", \"weights\", \"regular\")\n// (\n//   \"Helvetica\": (\n//     \"weights: (\n//       \"medium\": 500,\n//       \"bold\": 700\n//     )\n//   )\n// )\n```\n\n``` scss\nmap.get($map, $key, $keys...)\nmap-get($map, $key, $keys...)\n```\n\nIf `$keys` is empty, returns the value in `$map` associated with `$key`.\n\nIf `$map` doesn’t have a value associated with `$key`, returns [`null`](../values/null).\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.get($font-weights, \"medium\"); // 500\n@debug map.get($font-weights, \"extra-bold\"); // null\n```\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.get($font-weights, \"medium\")  // 500\n@debug map.get($font-weights, \"extra-bold\")  // null\n```\n\n------------------------------------------------------------------------\n\nCompatibility:\n\nDart Sass  \nsince 1.27.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass supports calling `map.get()` with more than two arguments.\n\nIf `$keys` is not empty, follows the set of keys including `$key` and excluding the last key in `$keys`, from left to right, to find the nested map targeted for searching.\n\nReturns the value in the targeted map associated with the last key in `$keys`.\n\nReturns [`null`](../values/null) if the map does not have a value associated with the key, or if any key in `$keys` is missing from a map or references a value that is not a map.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n$fonts: (\n  \"Helvetica\": (\n    \"weights\": (\n      \"regular\": 400,\n      \"medium\": 500,\n      \"bold\": 700\n    )\n  )\n);\n\n@debug map.get($fonts, \"Helvetica\", \"weights\", \"regular\"); // 400\n@debug map.get($fonts, \"Helvetica\", \"colors\"); // null\n```\n\n``` scss\n$fonts: (\"Helvetica\": (\"weights\": (\"regular\": 400, \"medium\": 500, \"bold\": 700)))\n\n@debug map.get($fonts, \"Helvetica\", \"weights\", \"regular\") // 400\n@debug map.get($fonts, \"Helvetica\", \"colors\") // null\n```\n\n``` scss\nmap.has-key($map, $key, $keys...)\nmap-has-key($map, $key, $keys...) //=> boolean\n```\n\nIf `$keys` is empty, returns whether `$map` contains a value associated with `$key`.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.has-key($font-weights, \"regular\"); // true\n@debug map.has-key($font-weights, \"bolder\"); // false\n```\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.has-key($font-weights, \"regular\") // true\n@debug map.has-key($font-weights, \"bolder\") // false\n```\n\n------------------------------------------------------------------------\n\nCompatibility:\n\nDart Sass  \nsince 1.27.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass supports calling `map.has-key()` with more than two arguments.\n\nIf `$keys` is not empty, follows the set of keys including `$key` and excluding the last key in `$keys`, from left to right, to find the nested map targeted for searching.\n\nReturns true if the targeted map contains a value associated with the last key in `$keys`.\n\nReturns false if it does not, or if any key in `$keys` is missing from a map or references a value that is not a map.\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n\n``` scss\n$fonts: (\n  \"Helvetica\": (\n    \"weights\": (\n      \"regular\": 400,\n      \"medium\": 500,\n      \"bold\": 700\n    )\n  )\n);\n\n@debug map.has-key($fonts, \"Helvetica\", \"weights\", \"regular\"); // true\n@debug map.has-key($fonts, \"Helvetica\", \"colors\"); // false\n```\n\n``` scss\n$fonts: (\"Helvetica\": (\"weights\": (\"regular\": 400, \"medium\": 500, \"bold\": 700)))\n\n@debug map.has-key($fonts, \"Helvetica\", \"weights\", \"regular\") // true\n@debug map.has-key($fonts, \"Helvetica\", \"colors\") // false\n```\n\n``` scss\nmap.keys($map)\nmap-keys($map) //=> list\n```\n\nReturns a comma-separated list of all the keys in `$map`.\n\n- [SCSS](#example-9-scss)\n- [Sass](#example-9-sass)\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.keys($font-weights); // \"regular\", \"medium\", \"bold\"\n```\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.keys($font-weights)  // \"regular\", \"medium\", \"bold\"\n```\n\n``` scss\nmap.merge($map1, $map2)\nmap-merge($map1, $map2)\nmap.merge($map1, $keys..., $map2)\nmap-merge($map1, $keys..., $map2) //=> map\n```\n\n### ⚠️ Heads up!\n\nIn practice, the actual arguments to `map.merge($map1, $keys..., $map2)` are passed as `map.merge($map1, $args...)`. They are described here as `$map1, $keys..., $map2` for explanation purposes only.\n\nIf no `$keys` are passed, returns a new map with all the keys and values from both `$map1` and `$map2`.\n\nIf both `$map1` and `$map2` have the same key, `$map2`‘s value takes precedence.\n\nAll keys in the returned map that also appear in `$map1` have the same order as in `$map1`. New keys from `$map2` appear at the end of the map.\n\n- [SCSS](#example-10-scss)\n- [Sass](#example-10-sass)\n\n``` scss\n$light-weights: (\"lightest\": 100, \"light\": 300);\n$heavy-weights: (\"medium\": 500, \"bold\": 700);\n\n@debug map.merge($light-weights, $heavy-weights);\n// (\"lightest\": 100, \"light\": 300, \"medium\": 500, \"bold\": 700)\n```\n\n``` scss\n$light-weights: (\"lightest\": 100, \"light\": 300)\n$heavy-weights: (\"medium\": 500, \"bold\": 700)\n\n@debug map.merge($light-weights, $heavy-weights)\n// (\"lightest\": 100, \"light\": 300, \"medium\": 500, \"bold\": 700)\n```\n\n------------------------------------------------------------------------\n\nCompatibility:\n\nDart Sass  \nsince 1.27.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass supports calling `map.merge()` with more than two arguments.\n\nIf `$keys` is not empty, follows the `$keys` to find the nested map targeted for merging. If any key in `$keys` is missing from a map or references a value that is not a map, sets the value at that key to an empty map.\n\nReturns a copy of `$map1` where the targeted map is replaced by a new map that contains all the keys and values from both the targeted map and `$map2`.\n\n- [SCSS](#example-11-scss)\n- [Sass](#example-11-sass)\n\n``` scss\n$fonts: (\n  \"Helvetica\": (\n    \"weights\": (\n      \"lightest\": 100,\n      \"light\": 300\n    )\n  )\n);\n$heavy-weights: (\"medium\": 500, \"bold\": 700);\n\n@debug map.merge($fonts, \"Helvetica\", \"weights\", $heavy-weights);\n// (\n//   \"Helvetica\": (\n//     \"weights\": (\n//       \"lightest\": 100,\n//       \"light\": 300,\n//       \"medium\": 500,\n//       \"bold\": 700\n//     )\n//   )\n// )\n```\n\n``` scss\n$fonts: (\"Helvetica\": (\"weights\": (\"lightest\": 100, \"light\": 300)))\n$heavy-weights: (\"medium\": 500, \"bold\": 700)\n\n@debug map.merge($fonts, \"Helvetica\", \"weights\", $heavy-weights)\n// (\n//   \"Helvetica\": (\n//     \"weights\": (\n//       \"lightest\": 100,\n//       \"light\": 300,\n//       \"medium\": 500,\n//       \"bold\": 700\n//     )\n//   )\n// )\n```\n\n``` scss\nmap.remove($map, $keys...)\nmap-remove($map, $keys...) //=> map\n```\n\nReturns a copy of `$map` without any values associated with `$keys`.\n\nIf a key in `$keys` doesn’t have an associated value in `$map`, it’s ignored.\n\n- [SCSS](#example-12-scss)\n- [Sass](#example-12-sass)\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.remove($font-weights, \"regular\"); // (\"medium\": 500, \"bold\": 700)\n@debug map.remove($font-weights, \"regular\", \"bold\"); // (\"medium\": 500)\n@debug map.remove($font-weights, \"bolder\");\n// (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n```\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.remove($font-weights, \"regular\")  // (\"medium\": 500, \"bold\": 700)\n@debug map.remove($font-weights, \"regular\", \"bold\")  // (\"medium\": 500)\n@debug map.remove($font-weights, \"bolder\")\n// (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n```\n\n``` scss\nmap.set($map, $key, $value)\nmap.set($map, $keys..., $key, $value) //=> map\n```\n\n### ⚠️ Heads up!\n\nIn practice, the actual arguments to `map.set($map, $keys..., $key, $value)` are passed as `map.set($map, $args...)`. They are described here as `$map, $keys..., $key, $value` for explanation purposes only.\n\nIf `$keys` are not passed, returns a copy of `$map` with the value at `$key` set to `$value`.\n\n- [SCSS](#example-13-scss)\n- [Sass](#example-13-sass)\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.set($font-weights, \"regular\", 300);\n// (\"regular\": 300, \"medium\": 500, \"bold\": 700)\n```\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.set($font-weights, \"regular\", 300)\n// (\"regular\": 300, \"medium\": 500, \"bold\": 700)\n```\n\n------------------------------------------------------------------------\n\nCompatibility:\n\nDart Sass  \nsince 1.27.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass supports calling `map.set()` with more than three arguments.\n\nIf `$keys` are passed, follows the `$keys` to find the nested map targeted for updating. If any key in `$keys` is missing from a map or references a value that is not a map, sets the value at that key to an empty map.\n\nReturns a copy of `$map` with the targeted map’s value at `$key` set to `$value`.\n\n- [SCSS](#example-14-scss)\n- [Sass](#example-14-sass)\n\n``` scss\n$fonts: (\n  \"Helvetica\": (\n    \"weights\": (\n      \"regular\": 400,\n      \"medium\": 500,\n      \"bold\": 700\n    )\n  )\n);\n\n@debug map.set($fonts, \"Helvetica\", \"weights\", \"regular\", 300);\n// (\n//   \"Helvetica\": (\n//     \"weights\": (\n//       \"regular\": 300,\n//       \"medium\": 500,\n//       \"bold\": 700\n//     )\n//   )\n// )\n```\n\n``` scss\n$fonts: (\"Helvetica\": (\"weights\": (\"regular\": 400, \"medium\": 500, \"bold\": 700)))\n\n@debug map.set($fonts, \"Helvetica\", \"weights\", \"regular\", 300)\n// (\n//   \"Helvetica\": (\n//     \"weights\": (\n//       \"regular\": 300,\n//       \"medium\": 500,\n//       \"bold\": 700\n//     )\n//   )\n// )\n```\n\n``` scss\nmap.values($map)\nmap-values($map) //=> list\n```\n\nReturns a comma-separated list of all the values in `$map`.\n\n- [SCSS](#example-15-scss)\n- [Sass](#example-15-sass)\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.values($font-weights); // 400, 500, 700\n```\n\n``` scss\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.values($font-weights)  // 400, 500, 700\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/map](https://sass-lang.com/documentation/modules/map)"
- name: sass:math
  id: modules/math
  summary: Only Dart Sass currently supports loading built-in modules with @use
  description: "# sass:math\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports loading built-in modules with `@use`. Users of other implementations must call functions using their global names instead.\n\n## Variables\n\n``` scss\nmath.$e\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nEqual to the value of the [mathematical constant *e*](https://en.wikipedia.org/wiki/E_(mathematical_constant)).\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug math.$e; // 2.7182818285\n```\n\n``` scss\n@debug math.$e // 2.7182818285\n```\n\n``` scss\nmath.$pi\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nEqual to the value of the [mathematical constant *π*](https://en.wikipedia.org/wiki/Pi).\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n@debug math.$pi; // 3.1415926536\n```\n\n``` scss\n@debug math.$pi // 3.1415926536\n```\n\n## Bounding Functions\n\n``` scss\nmath.ceil($number)\nceil($number) //=> number\n```\n\nRounds `$number` up to the next highest whole number.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@debug math.ceil(4); // 4\n@debug math.ceil(4.2); // 5\n@debug math.ceil(4.9); // 5\n```\n\n``` scss\n@debug math.ceil(4)  // 4\n@debug math.ceil(4.2)  // 5\n@debug math.ceil(4.9)  // 5\n```\n\n``` scss\nmath.clamp($min, $number, $max) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nRestricts `$number` to the range between `$min` and `$max`. If `$number` is less than `$min` this returns `$min`, and if it’s greater than `$max` this returns `$max`.\n\n`$min`, `$number`, and `$max` must have compatible units, or all be unitless.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n@debug math.clamp(-1, 0, 1); // 0\n@debug math.clamp(1px, -1px, 10px); // 1px\n@debug math.clamp(-1in, 1cm, 10mm); // 10mm\n```\n\n``` scss\n@debug math.clamp(-1, 0, 1) // 0\n@debug math.clamp(1px, -1px, 10px) // 1px\n@debug math.clamp(-1in, 1cm, 10mm) // 10mm\n```\n\n``` scss\nmath.floor($number)\nfloor($number) //=> number\n```\n\nRounds `$number` down to the next lowest whole number.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n@debug math.floor(4); // 4\n@debug math.floor(4.2); // 4\n@debug math.floor(4.9); // 4\n```\n\n``` scss\n@debug math.floor(4)  // 4\n@debug math.floor(4.2)  // 4\n@debug math.floor(4.9)  // 4\n```\n\n``` scss\nmath.max($number...)\nmax($number...) //=> number\n```\n\nReturns the highest of one or more numbers.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@debug math.max(1px, 4px); // 4px\n\n$widths: 50px, 30px, 100px;\n@debug math.max($widths...); // 100px\n```\n\n``` scss\n@debug math.max(1px, 4px)  // 4px\n\n$widths: 50px, 30px, 100px\n@debug math.max($widths...)  // 100px\n```\n\n``` scss\nmath.min($number...)\nmin($number...) //=> number\n```\n\nReturns the lowest of one or more numbers.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n\n``` scss\n@debug math.min(1px, 4px); // 1px\n\n$widths: 50px, 30px, 100px;\n@debug math.min($widths...); // 30px\n```\n\n``` scss\n@debug math.min(1px, 4px)  // 1px\n\n$widths: 50px, 30px, 100px\n@debug math.min($widths...)  // 30px\n```\n\n``` scss\nmath.round($number)\nround($number) //=> number\n```\n\nRounds `$number` to the nearest whole number.\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n\n``` scss\n@debug math.round(4); // 4\n@debug math.round(4.2); // 4\n@debug math.round(4.9); // 5\n```\n\n``` scss\n@debug math.round(4)  // 4\n@debug math.round(4.2)  // 4\n@debug math.round(4.9)  // 5\n```\n\n## Distance Functions\n\n``` scss\nmath.abs($number)\nabs($number) //=> number\n```\n\nReturns the [absolute value](https://en.wikipedia.org/wiki/Absolute_value) of `$number`. If `$number` is negative, this returns `-$number`, and if `$number` is positive, it returns `$number` as-is.\n\n- [SCSS](#example-9-scss)\n- [Sass](#example-9-sass)\n\n``` scss\n@debug math.abs(10px); // 10px\n@debug math.abs(-10px); // 10px\n```\n\n``` scss\n@debug math.abs(10px) // 10px\n@debug math.abs(-10px) // 10px\n```\n\n``` scss\nmath.hypot($number...) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the length of the *n*-dimensional [vector](https://en.wikipedia.org/wiki/Euclidean_vector) that has components equal to each `$number`. For example, for three numbers *a*, *b*, and *c*, this returns the square root of *a² + b² + c²*.\n\nThe numbers must either all have compatible units, or all be unitless. And since the numbers’ units may differ, the output takes the unit of the first number.\n\n- [SCSS](#example-10-scss)\n- [Sass](#example-10-sass)\n\n``` scss\n@debug math.hypot(3, 4); // 5\n\n$lengths: 1in, 10cm, 50px;\n@debug math.hypot($lengths...); // 4.0952775683in\n```\n\n``` scss\n@debug math.hypot(3, 4) // 5\n\n$lengths: 1in, 10cm, 50px\n@debug math.hypot($lengths...) // 4.0952775683in\n```\n\n## Exponential Functions\n\n``` scss\nmath.log($number, $base: null) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the [logarithm](https://en.wikipedia.org/wiki/Logarithm) of `$number` with respect to `$base`. If `$base` is `null`, the [natural log](https://en.wikipedia.org/wiki/Natural_logarithm) is calculated.\n\n`$number` and `$base` must be unitless.\n\n- [SCSS](#example-11-scss)\n- [Sass](#example-11-sass)\n\n``` scss\n@debug math.log(10); // 2.302585093\n@debug math.log(10, 10); // 1\n```\n\n``` scss\n@debug math.log(10) // 2.302585093\n@debug math.log(10, 10) // 1\n```\n\n``` scss\nmath.pow($base, $exponent) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nRaises `$base` [to the power of](https://en.wikipedia.org/wiki/Exponentiation) `$exponent`.\n\n`$base` and `$exponent` must be unitless.\n\n- [SCSS](#example-12-scss)\n- [Sass](#example-12-sass)\n\n``` scss\n@debug math.pow(10, 2); // 100\n@debug math.pow(100, math.div(1, 3)); // 4.6415888336\n@debug math.pow(5, -2); // 0.04\n```\n\n``` scss\n@debug math.pow(10, 2) // 100\n@debug math.pow(100, math.div(1, 3)) // 4.6415888336\n@debug math.pow(5, -2) // 0.04\n```\n\n``` scss\nmath.sqrt($number) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the [square root](https://en.wikipedia.org/wiki/Square_root) of `$number`.\n\n`$number` must be unitless.\n\n- [SCSS](#example-13-scss)\n- [Sass](#example-13-sass)\n\n``` scss\n@debug math.sqrt(100); // 10\n@debug math.sqrt(math.div(1, 3)); // 0.5773502692\n@debug math.sqrt(-1); // NaN\n```\n\n``` scss\n@debug math.sqrt(100) // 10\n@debug math.sqrt(math.div(1, 3)) // 0.5773502692\n@debug math.sqrt(-1) // NaN\n```\n\n## Trigonometric Functions\n\n``` scss\nmath.cos($number) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the [cosine](https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions) of `$number`.\n\n`$number` must be an angle (its units must be compatible with `deg`) or unitless. If `$number` has no units, it is assumed to be in `rad`.\n\n- [SCSS](#example-14-scss)\n- [Sass](#example-14-sass)\n\n``` scss\n@debug math.cos(100deg); // -0.1736481777\n@debug math.cos(1rad); // 0.5403023059\n@debug math.cos(1); // 0.5403023059\n```\n\n``` scss\n@debug math.cos(100deg) // -0.1736481777\n@debug math.cos(1rad) // 0.5403023059\n@debug math.cos(1) // 0.5403023059\n```\n\n``` scss\nmath.sin($number) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the [sine](https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions) of `$number`.\n\n`$number` must be an angle (its units must be compatible with `deg`) or unitless. If `$number` has no units, it is assumed to be in `rad`.\n\n- [SCSS](#example-15-scss)\n- [Sass](#example-15-sass)\n\n``` scss\n@debug math.sin(100deg); // 0.984807753\n@debug math.sin(1rad); // 0.8414709848\n@debug math.sin(1); // 0.8414709848\n```\n\n``` scss\n@debug math.sin(100deg) // 0.984807753\n@debug math.sin(1rad) // 0.8414709848\n@debug math.sin(1) // 0.8414709848\n```\n\n``` scss\nmath.tan($number) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the [tangent](https://en.wikipedia.org/wiki/Trigonometric_functions#Right-angled_triangle_definitions) of `$number`.\n\n`$number` must be an angle (its units must be compatible with `deg`) or unitless. If `$number` has no units, it is assumed to be in `rad`.\n\n- [SCSS](#example-16-scss)\n- [Sass](#example-16-sass)\n\n``` scss\n@debug math.tan(100deg); // -5.6712818196\n@debug math.tan(1rad); // 1.5574077247\n@debug math.tan(1); // 1.5574077247\n```\n\n``` scss\n@debug math.tan(100deg) // -5.6712818196\n@debug math.tan(1rad) // 1.5574077247\n@debug math.tan(1) // 1.5574077247\n```\n\n``` scss\nmath.acos($number) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the [arccosine](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties) of `$number` in `deg`.\n\n`$number` must be unitless.\n\n- [SCSS](#example-17-scss)\n- [Sass](#example-17-sass)\n\n``` scss\n@debug math.acos(0.5); // 60deg\n@debug math.acos(2); // NaNdeg\n```\n\n``` scss\n@debug math.acos(0.5) // 60deg\n@debug math.acos(2) // NaNdeg\n```\n\n``` scss\nmath.asin($number) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the [arcsine](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties) of `$number` in `deg`.\n\n`$number` must be unitless.\n\n- [SCSS](#example-18-scss)\n- [Sass](#example-18-sass)\n\n``` scss\n@debug math.asin(0.5); // 30deg\n@debug math.asin(2); // NaNdeg\n```\n\n``` scss\n@debug math.asin(0.5) // 30deg\n@debug math.asin(2) // NaNdeg\n```\n\n``` scss\nmath.atan($number) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the [arctangent](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Basic_properties) of `$number` in `deg`.\n\n`$number` must be unitless.\n\n- [SCSS](#example-19-scss)\n- [Sass](#example-19-sass)\n\n``` scss\n@debug math.atan(10); // 84.2894068625deg\n```\n\n``` scss\n@debug math.atan(10) // 84.2894068625deg\n```\n\n``` scss\nmath.atan2($y, $x) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.25.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the [2-argument arctangent](https://en.wikipedia.org/wiki/Atan2) of `$y` and `$x` in `deg`.\n\n`$y` and `$x` must have compatible units or be unitless.\n\n### 💡 Fun fact:\n\n`math.atan2($y, $x)` is distinct from `atan(math.div($y, $x))` because it preserves the quadrant of the point in question. For example, `math.atan2(1, -1)` corresponds to the point `(-1, 1)` and returns `135deg`. In contrast, `math.atan(math.div(1, -1))` and `math.atan(math.div(-1, 1))` resolve first to `atan(-1)`, so both return `-45deg`.\n\n- [SCSS](#example-20-scss)\n- [Sass](#example-20-sass)\n\n``` scss\n@debug math.atan2(-1, 1); // 135deg\n```\n\n``` scss\n@debug math.atan2(-1, 1) // 135deg\n```\n\n## Unit Functions\n\n``` scss\nmath.compatible($number1, $number2)\ncomparable($number1, $number2) //=> boolean\n```\n\nReturns whether `$number1` and `$number2` have compatible units.\n\nIf this returns `true`, `$number1` and `$number2` can safely be [added](../operators/numeric), [subtracted](../operators/numeric), and [compared](../operators/relational). Otherwise, doing so will produce errors.\n\n### ⚠️ Heads up!\n\nThe global name of this function is `compa`**`ra`**`ble`, but when it was added to the `sass:math` module the name was changed to `compa`**`ti`**`ble` to more clearly convey what the function does.\n\n- [SCSS](#example-21-scss)\n- [Sass](#example-21-sass)\n\n``` scss\n@debug math.compatible(2px, 1px); // true\n@debug math.compatible(100px, 3em); // false\n@debug math.compatible(10cm, 3mm); // true\n```\n\n``` scss\n@debug math.compatible(2px, 1px)  // true\n@debug math.compatible(100px, 3em)  // false\n@debug math.compatible(10cm, 3mm)  // true\n```\n\n``` scss\nmath.is-unitless($number)\nunitless($number) //=> boolean\n```\n\nReturns whether `$number` has no units.\n\n- [SCSS](#example-22-scss)\n- [Sass](#example-22-sass)\n\n``` scss\n@debug math.is-unitless(100); // true\n@debug math.is-unitless(100px); // false\n```\n\n``` scss\n@debug math.is-unitless(100)  // true\n@debug math.is-unitless(100px)  // false\n```\n\n``` scss\nmath.unit($number)\nunit($number) //=> quoted string\n```\n\nReturns a string representation of `$number`‘s units.\n\n### ⚠️ Heads up!\n\nThis function is intended for debugging; its output format is not guaranteed to be consistent across Sass versions or implementations.\n\n- [SCSS](#example-23-scss)\n- [Sass](#example-23-sass)\n\n``` scss\n@debug math.unit(100); // \"\"\n@debug math.unit(100px); // \"px\"\n@debug math.unit(5px * 10px); // \"px*px\"\n@debug math.unit(math.div(5px, 1s)); // \"px/s\"\n```\n\n``` scss\n@debug math.unit(100)  // \"\"\n@debug math.unit(100px)  // \"px\"\n@debug math.unit(5px * 10px)  // \"px*px\"\n@debug math.unit(math.div(5px, 1s))  // \"px/s\"\n```\n\n## Other Functions\n\n``` scss\nmath.div($number1, $number2) //=> number\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.33.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the result of dividing `$number1` by `$number2`.\n\nAny units shared by both numbers will be canceled out. Units in `$number1` that aren’t in `$number2` will end up in the return value’s numerator, and units in `$number2` that aren’t in `$number1` will end up in its denominator.\n\n### ⚠️ Heads up!\n\nFor backwards-compatibility purposes, this returns the *exact same result* as [the deprecated `/` operator](https://sass-lang.com/documentation/breaking-changes/slash-div), including concatenating two strings with a `/` character between them. However, this behavior will be removed eventually and shouldn’t be used in new stylesheets.\n\n- [SCSS](#example-24-scss)\n- [Sass](#example-24-sass)\n\n``` scss\n@debug math.div(1, 2); // 0.5\n@debug math.div(100px, 5px); // 20\n@debug math.div(100px, 5); // 20px\n@debug math.div(100px, 5s); // 20px/s\n```\n\n``` scss\n@debug math.div(1, 2)  // 0.5\n@debug math.div(100px, 5px)  // 20\n@debug math.div(100px, 5)  // 20px\n@debug math.div(100px, 5s)  // 20px/s\n```\n\n``` scss\nmath.percentage($number)\npercentage($number) //=> number\n```\n\nConverts a unitless `$number` (usually a decimal between 0 and 1) to a percentage.\n\n### 💡 Fun fact:\n\nThis function is identical to `$number * 100%`.\n\n- [SCSS](#example-25-scss)\n- [Sass](#example-25-sass)\n\n``` scss\n@debug math.percentage(0.2); // 20%\n@debug math.percentage(math.div(100px, 50px)); // 200%\n```\n\n``` scss\n@debug math.percentage(0.2)  // 20%\n@debug math.percentage(math.div(100px, 50px))  // 200%\n```\n\n``` scss\nmath.random($limit: null)\nrandom($limit: null) //=> number\n```\n\nIf `$limit` is `null`, returns a random decimal number between 0 and 1.\n\n- [SCSS](#example-26-scss)\n- [Sass](#example-26-sass)\n\n``` scss\n@debug math.random(); // 0.2821251858\n@debug math.random(); // 0.6221325814\n```\n\n``` scss\n@debug math.random()  // 0.2821251858\n@debug math.random()  // 0.6221325814\n```\n\n------------------------------------------------------------------------\n\nIf `$limit` is a number greater than or equal to 1, returns a random whole number between 1 and `$limit`.\n\n### ⚠️ Heads up!\n\n`random()` ignores units in `$limit`. [This behavior is deprecated](https://sass-lang.com/documentation/breaking-changes/random-with-units) and `random($limit)` will return a random integer with the same units as the `$limit` argument.\n\n- [SCSS](#example-27-scss)\n- [Sass](#example-27-sass)\n\n``` scss\n@debug math.random(100px); // 42\n```\n\n``` scss\n@debug math.random(100px)  // 42\n```\n\n- [SCSS](#example-28-scss)\n- [Sass](#example-28-sass)\n\n``` scss\n@debug math.random(10); // 4\n@debug math.random(10000); // 5373\n```\n\n``` scss\n@debug math.random(10)  // 4\n@debug math.random(10000)  // 5373\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/math](https://sass-lang.com/documentation/modules/math)"
- name: sass:meta
  id: modules/meta
  summary: Only Dart Sass currently supports loading built-in modules with @use
  description: "# sass:meta\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports loading built-in modules with `@use`. Users of other implementations must call functions using their global names instead.\n\n## Mixins\n\n``` scss\nmeta.load-css($url, $with: null)\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports this mixin.\n\nLoads the [module](../at-rules/use) at `$url` and includes its CSS as though it were written as the contents of this mixin. The `$with` parameter provides [configuration](../at-rules/use#configuration) for the modules; if it’s passed, it must be a map from variable names (without `$`) to the values of those variables to use in the loaded module.\n\nIf `$url` is relative, it’s interpreted as relative to the file in which `meta.load-css()` is included.\n\n**Like the [`@use` rule](../at-rules/use)**:\n\n- This will only evaluate the given module once, even if it’s loaded multiple times in different ways.\n\n- This cannot provide configuration to a module that’s already been loaded, whether or not it was already loaded with configuration.\n\n**Unlike the [`@use` rule](../at-rules/use)**:\n\n- This doesn’t make any members from the loaded module available in the current module.\n\n- This can be used anywhere in a stylesheet. It can even be nested within style rules to create nested styles!\n\n- The module URL being loaded can come from a variable and include [interpolation](../interpolation).\n\n### ⚠️ Heads up!\n\nThe `$url` parameter should be a string containing a URL like you’d pass to the `@use` rule. It shouldn’t be a CSS `url()`!\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n// dark-theme/_code.scss\n$border-contrast: false !default;\n\ncode {\n  background-color: #6b717f;\n  color: #d2e1dd;\n  @if $border-contrast {\n    border-color: #dadbdf;\n  }\n}\n```\n\n``` scss\n// style.scss\n@use \"sass:meta\";\n\nbody.dark {\n  @include meta.load-css(\"dark-theme/code\",\n      $with: (\"border-contrast\": true));\n}\n```\n\n``` scss\n// dark-theme/_code.sass\n$border-contrast: false !default\n\ncode\n  background-color: #6b717f\n  color: #d2e1dd\n  @if $border-contrast\n    border-color: #dadbdf\n```\n\n``` scss\n// style.sass\n@use \"sass:meta\"\n\nbody.dark\n  $configuration: (\"border-contrast\": true)\n  @include meta.load-css(\"dark-theme/code\", $with: $configuration)\n```\n\n``` css\nbody.dark code {\n  background-color: #6b717f;\n  color: #d2e1dd;\n  border-color: #dadbdf;\n}\n```\n\n## Functions\n\n``` scss\nmeta.calc-args($calc) //=> list\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.40.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the arguments for the given [calculation](../values/calculations).\n\nIf an argument is a number or a nested calculation, it’s returned as that type. Otherwise, it’s returned as an unquoted string.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n@debug meta.calc-args(calc(100px + 10%)); // unquote(\"100px + 10%\")\n@debug meta.calc-args(clamp(50px, var(--width), 1000px)); // 50px, unquote(\"var(--width)\"), 1000px\n```\n\n``` scss\n@debug meta.calc-args(calc(100px + 10%))  // unquote(\"100px + 10%\")\n@debug meta.calc-args(clamp(50px, var(--width), 1000px))  // 50px, unquote(\"var(--width)\"), 1000px\n```\n\n``` scss\nmeta.calc-name($calc) //=> quoted string\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.40.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\nReturns the name of the given [calculation](../values/calculations).\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@debug meta.calc-name(calc(100px + 10%)); // \"calc\"\n@debug meta.calc-name(clamp(50px, var(--width), 1000px)); // \"clamp\"\n```\n\n``` scss\n@debug meta.calc-name(calc(100px + 10%))  // \"calc\"\n@debug meta.calc-name(clamp(50px, var(--width), 1000px))  // \"clamp\"\n```\n\n``` scss\nmeta.call($function, $args...)\ncall($function, $args...)\n```\n\nCompatibility (Argument Type):\n\nDart Sass  \n✓\n\nLibSass  \nsince 3.5.0\n\nRuby Sass  \nsince 3.5.0\n\n[▶](javascript:;)\n\nIn older versions of LibSass and Ruby Sass, the [`call()` function](meta#call) took a string representing a function’s name. This was changed to take a function value instead in preparation for a new module system where functions are no longer global and so a given name may not always refer to the same function.\n\nPassing a string to `call()` still works in all implementations, but it’s deprecated and will be disallowed in future versions.\n\nInvokes `$function` with `$args` and returns the result.\n\nThe `$function` should be a [function](../values/functions) returned by [`meta.get-function()`](#get-function).\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n- [CSS](#example-4-css)\n\n``` scss\n@use \"sass:list\";\n@use \"sass:meta\";\n@use \"sass:string\";\n\n/// Return a copy of $list with all elements for which $condition returns `true`\n/// removed.\n@function remove-where($list, $condition) {\n  $new-list: ();\n  $separator: list.separator($list);\n  @each $element in $list {\n    @if not meta.call($condition, $element) {\n      $new-list: list.append($new-list, $element, $separator: $separator);\n    }\n  }\n  @return $new-list;\n}\n\n$fonts: Tahoma, Geneva, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\ncontent {\n  @function contains-helvetica($string) {\n    @return string.index($string, \"Helvetica\");\n  }\n  font-family: remove-where($fonts, meta.get-function(\"contains-helvetica\"));\n}\n```\n\n``` scss\n@use \"sass:list\"\n@use \"sass:meta\"\n@use \"sass:string\"\n\n/// Return a copy of $list with all elements for which $condition returns `true`\n/// removed.\n@function remove-where($list, $condition)\n  $new-list: ()\n  $separator: list.separator($list)\n  @each $element in $list\n    @if not meta.call($condition, $element)\n      $new-list: list.append($new-list, $element, $separator: $separator)\n\n\n  @return $new-list\n\n\n$fonts: Tahoma, Geneva, \"Helvetica Neue\", Helvetica, Arial, sans-serif\n\n.content\n  @function contains-helvetica($string)\n    @return string.index($string, \"Helvetica\")\n\n  font-family: remove-where($fonts, meta.get-function(\"contains-helvetica\"))\n```\n\n``` css\n.content {\n  font-family: Tahoma, Geneva, Arial, sans-serif;\n}\n```\n\n``` scss\nmeta.content-exists()\ncontent-exists() //=> boolean\n```\n\nReturns whether the current mixin was passed a [`@content` block](../at-rules/mixin#content-blocks).\n\nThrows an error if called outside of a mixin.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n@mixin debug-content-exists {\n  @debug meta.content-exists();\n  @content;\n}\n\n@include debug-content-exists; // false\n@include debug-content-exists { // true\n  // Content!\n}\n```\n\n``` scss\n@mixin debug-content-exists\n  @debug meta.content-exists()\n  @content\n\n\n@include debug-content-exists  // false\n@include debug-content-exists   // true\n  // Content!\n```\n\n``` scss\nmeta.feature-exists($feature)\nfeature-exists($feature) //=> boolean\n```\n\nReturns whether the current Sass implementation supports `$feature`.\n\nThe `$feature` must be a string. The currently recognized features are:\n\n- `global-variable-shadowing`, which means that a local variable will [shadow](../variables#shadowing) a global variable unless it has the `!global` flag.\n- `extend-selector-pseudoclass`, which means that the [`@extend` rule](../at-rules/extend) will affect selectors nested in pseudo-classes like `:not()`.\n- `units-level3`, which means that [unit arithmetic](../values/numbers#units) supports units defined in [CSS Values and Units Level 3](http://www.w3.org/TR/css3-values).\n- `at-error`, which means that the [`@error` rule](../at-rules/error) is supported.\n- `custom-property`, which means that [custom property declaration](../style-rules/declarations#custom-properties) values don’t support any [expressions](../syntax/structure#expressions) other than [interpolation](../interpolation).\n\nReturns `false` for any unrecognized `$feature`.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@debug meta.feature-exists(\"at-error\"); // true\n@debug meta.feature-exists(\"unrecognized\"); // false\n```\n\n``` scss\n@debug meta.feature-exists(\"at-error\")  // true\n@debug meta.feature-exists(\"unrecognized\")  // false\n```\n\n``` scss\nmeta.function-exists($name, $module: null)\nfunction-exists($name) //=> boolean\n```\n\nReturns whether a function named `$name` is defined, either as a built-in function or a user-defined function.\n\nIf `$module` is passed, this also checks the module named `$module` for the function definition. `$module` must be a string matching the namespace of a \\[`@use` rule\\]\\[\\] in the current file.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n\n``` scss\n@use \"sass:math\";\n\n@debug meta.function-exists(\"div\", \"math\"); // true\n@debug meta.function-exists(\"scale-color\"); // true\n@debug meta.function-exists(\"add\"); // false\n\n@function add($num1, $num2) {\n  @return $num1 + $num2;\n}\n@debug meta.function-exists(\"add\"); // true\n```\n\n``` scss\n@use \"sass:math\"\n\n@debug meta.function-exists(\"div\", \"math\")  // true\n@debug meta.function-exists(\"scale-color\")  // true\n@debug meta.function-exists(\"add\")  // false\n\n@function add($num1, $num2)\n  @return $num1 + $num2\n\n@debug meta.function-exists(\"add\")  // true\n```\n\n``` scss\nmeta.get-function($name, $css: false, $module: null)\nget-function($name, $css: false, $module: null) //=> function\n```\n\nReturns the [function](../values/functions) named `$name`.\n\nIf `$module` is `null`, this returns the function named `$name` without a namespace (including [global built-in functions](../modules#global-functions)). Otherwise, `$module` must be a string matching the namespace of a [`@use` rule](../at-rules/use) in the current file, in which case this returns the function in that module named `$name`.\n\nBy default, this throws an error if `$name` doesn’t refer to Sass function. However, if `$css` is `true`, it instead returns a [plain CSS function](../at-rules/function#plain-css-functions).\n\nThe returned function can be called using [`meta.call()`](#call).\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n- [CSS](#example-8-css)\n\n``` scss\n@use \"sass:list\";\n@use \"sass:meta\";\n@use \"sass:string\";\n\n/// Return a copy of $list with all elements for which $condition returns `true`\n/// removed.\n@function remove-where($list, $condition) {\n  $new-list: ();\n  $separator: list.separator($list);\n  @each $element in $list {\n    @if not meta.call($condition, $element) {\n      $new-list: list.append($new-list, $element, $separator: $separator);\n    }\n  }\n  @return $new-list;\n}\n\n$fonts: Tahoma, Geneva, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\ncontent {\n  @function contains-helvetica($string) {\n    @return string.index($string, \"Helvetica\");\n  }\n  font-family: remove-where($fonts, meta.get-function(\"contains-helvetica\"));\n}\n```\n\n``` scss\n@use \"sass:list\"\n@use \"sass:meta\"\n@use \"sass:string\"\n\n/// Return a copy of $list with all elements for which $condition returns `true`\n/// removed.\n@function remove-where($list, $condition)\n  $new-list: ()\n  $separator: list.separator($list)\n  @each $element in $list\n    @if not meta.call($condition, $element)\n      $new-list: list.append($new-list, $element, $separator: $separator)\n\n\n  @return $new-list\n\n\n$fonts: Tahoma, Geneva, \"Helvetica Neue\", Helvetica, Arial, sans-serif\n\n.content\n  @function contains-helvetica($string)\n    @return string.index($string, \"Helvetica\")\n\n  font-family: remove-where($fonts, meta.get-function(\"contains-helvetica\"))\n```\n\n``` css\n.content {\n  font-family: Tahoma, Geneva, Arial, sans-serif;\n}\n```\n\n``` scss\nmeta.global-variable-exists($name, $module: null)\nglobal-variable-exists($name, $module: null) //=> boolean\n```\n\nReturns whether a [global variable](../variables#scope) named `$name` (without the `$`) exists.\n\nIf `$module` is `null`, this returns whether a variable named `$name` without a namespace exists. Otherwise, `$module` must be a string matching the namespace of a [`@use` rule](../at-rules/use) in the current file, in which case this returns whether that module has a variable named `$name`.\n\nSee also [`meta.variable-exists()`](#variable-exists).\n\n- [SCSS](#example-9-scss)\n- [Sass](#example-9-sass)\n\n``` scss\n@debug meta.global-variable-exists(\"var1\"); // false\n\n$var1: value;\n@debug meta.global-variable-exists(\"var1\"); // true\n\nh1 {\n  // $var2 is local.\n  $var2: value;\n  @debug meta.global-variable-exists(\"var2\"); // false\n}\n```\n\n``` scss\n@debug meta.global-variable-exists(\"var1\")  // false\n\n$var1: value\n@debug meta.global-variable-exists(\"var1\")  // true\n\nh1\n  // $var2 is local.\n  $var2: value\n  @debug meta.global-variable-exists(\"var2\")  // false\n```\n\n``` scss\nmeta.inspect($value)\ninspect($value) //=> unquoted string\n```\n\nReturns a string representation of `$value`.\n\nReturns a representation of *any* Sass value, not just those that can be represented in CSS. As such, its return value is not guaranteed to be valid CSS.\n\n### ⚠️ Heads up!\n\nThis function is intended for debugging; its output format is not guaranteed to be consistent across Sass versions or implementations.\n\n- [SCSS](#example-10-scss)\n- [Sass](#example-10-sass)\n\n``` scss\n@debug meta.inspect(10px 20px 30px); // unquote(\"10px 20px 30px\")\n@debug meta.inspect((\"width\": 200px)); // unquote('(\"width\": 200px)')\n@debug meta.inspect(null); // unquote(\"null\")\n@debug meta.inspect(\"Helvetica\"); // unquote('\"Helvetica\"')\n```\n\n``` scss\n@debug meta.inspect(10px 20px 30px)  // unquote(\"10px 20px 30px\")\n@debug meta.inspect((\"width\": 200px))  // unquote('(\"width\": 200px)')\n@debug meta.inspect(null)  // unquote(\"null\")\n@debug meta.inspect(\"Helvetica\")  // unquote('\"Helvetica\"')\n```\n\n``` scss\nmeta.keywords($args)\nkeywords($args) //=> map\n```\n\nReturns the keywords passed to a mixin or function that takes [arbitrary arguments](../at-rules/mixin#taking-arbitrary-arguments). The `$args` argument must be an [argument list](../values/lists#argument-lists).\n\nThe keywords are returned as a map from argument names as unquoted strings (not including `$`) to the values of those arguments.\n\n- [SCSS](#example-11-scss)\n- [Sass](#example-11-sass)\n- [CSS](#example-11-css)\n\n``` scss\n@use \"sass:meta\";\n\n@mixin syntax-colors($args...) {\n  @debug meta.keywords($args);\n  // (string: #080, comment: #800, variable: #60b)\n\n  @each $name, $color in meta.keywords($args) {\n    pre span.stx-#{$name} {\n      color: $color;\n    }\n  }\n}\n\n@include syntax-colors(\n  $string: #080,\n  $comment: #800,\n  $variable: #60b,\n)\n```\n\n``` scss\n@use \"sass:meta\"\n\n@mixin syntax-colors($args...)\n  @debug meta.keywords($args)\n  // (string: #080, comment: #800, variable: #60b)\n\n  @each $name, $color in meta.keywords($args)\n    pre span.stx-#{$name}\n      color: $color\n\n\n\n\n@include syntax-colors($string: #080, $comment: #800, $variable: #60b)\n```\n\n``` css\npre span.stx-string {\n  color: #080;\n}\n\npre span.stx-comment {\n  color: #800;\n}\n\npre span.stx-variable {\n  color: #60b;\n}\n```\n\n``` scss\nmeta.mixin-exists($name, $module: null)\nmixin-exists($name, $module: null) //=> boolean\n```\n\nReturns whether a [mixin](../at-rules/mixin) named `$name` exists.\n\nIf `$module` is `null`, this returns whether a mixin named `$name` without a namespace exists. Otherwise, `$module` must be a string matching the namespace of a [`@use` rule](../at-rules/use) in the current file, in which case this returns whether that module has a mixin named `$name`.\n\n- [SCSS](#example-12-scss)\n- [Sass](#example-12-sass)\n\n``` scss\n@debug meta.mixin-exists(\"shadow-none\"); // false\n\n@mixin shadow-none {\n  box-shadow: none;\n}\n\n@debug meta.mixin-exists(\"shadow-none\"); // true\n```\n\n``` scss\n@debug meta.mixin-exists(\"shadow-none\")  // false\n\n@mixin shadow-none\n  box-shadow: none\n\n\n@debug meta.mixin-exists(\"shadow-none\")  // true\n```\n\n``` scss\nmeta.module-functions($module) //=> map\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports this function.\n\nReturns all the functions defined in a module, as a map from function names to [function values](../values/functions).\n\nThe `$module` parameter must be a string matching the namespace of a [`@use` rule](../at-rules/use) in the current file.\n\n- [SCSS](#example-13-scss)\n- [Sass](#example-13-sass)\n\n``` scss\n// _functions.scss\n@function pow($base, $exponent) {\n  $result: 1;\n  @for $_ from 1 through $exponent {\n    $result: $result * $base;\n  }\n  @return $result;\n}\n```\n\n``` scss\n@use \"sass:map\";\n@use \"sass:meta\";\n\n@use \"functions\";\n\n@debug meta.module-functions(\"functions\"); // (\"pow\": get-function(\"pow\"))\n\n@debug meta.call(map.get(meta.module-variables(\"functions\"), \"pow\"), 3, 4); // 16\n```\n\n``` scss\n// _functions.sass\n@function pow($base, $exponent)\n  $result: 1\n  @for $_ from 1 through $exponent\n    $result: $result * $base\n\n  @return $result\n```\n\n``` scss\n@use \"sass:map\"\n@use \"sass:meta\"\n\n@use \"functions\"\n\n@debug meta.module-functions(\"functions\") // (\"pow\": get-function(\"pow\"))\n\n@debug meta.call(map.get(meta.module-variables(\"functions\"), \"pow\"), 3, 4) // 16\n```\n\n``` scss\nmeta.module-variables($module) //=> map\n```\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports this function.\n\nReturns all the variables defined in a module, as a map from variable names (without `$`) to the values of those variables.\n\nThe `$module` parameter must be a string matching the namespace of a [`@use` rule](../at-rules/use) in the current file.\n\n- [SCSS](#example-14-scss)\n- [Sass](#example-14-sass)\n\n``` scss\n// _variables.scss\n$hopbush: #c69;\n$midnight-blue: #036;\n$wafer: #e1d7d2;\n```\n\n``` scss\n@use \"sass:meta\";\n\n@use \"variables\";\n\n@debug meta.module-variables(\"variables\");\n// (\n//   \"hopbush\": #c69,\n//   \"midnight-blue\": #036,\n//   \"wafer\": #e1d7d2\n// )\n```\n\n``` scss\n// _variables.sass\n$hopbush: #c69\n$midnight-blue: #036\n$wafer: #e1d7d2\n```\n\n``` scss\n@use \"sass:meta\"\n\n@use \"variables\"\n\n@debug meta.module-variables(\"variables\")\n// (\n//   \"hopbush\": #c69,\n//   \"midnight-blue\": #036,\n//   \"wafer\": #e1d7d2\n// )\n```\n\n``` scss\nmeta.type-of($value)\ntype-of($value) //=> unquoted string\n```\n\nReturns the type of `$value`.\n\nThis can return the following values:\n\n- [`number`](../values/numbers)\n- [`string`](../values/strings)\n- [`color`](../values/colors)\n- [`list`](../values/lists)\n- [`map`](../values/maps)\n- [`calculation`](../values/calculations)\n- [`bool`](../values/booleans)\n- [`null`](../values/null)\n- [`function`](../values/functions)\n- [`arglist`](../values/lists#argument-lists)\n\nNew possible values may be added in the future. It may return either `list` or `map` for `()`, depending on whether or not it was returned by a [map function](map).\n\n- [SCSS](#example-15-scss)\n- [Sass](#example-15-sass)\n\n``` scss\n@debug meta.type-of(10px); // number\n@debug meta.type-of(10px 20px 30px); // list\n@debug meta.type-of(()); // list\n```\n\n``` scss\n@debug meta.type-of(10px)  // number\n@debug meta.type-of(10px 20px 30px)  // list\n@debug meta.type-of(())  // list\n```\n\n``` scss\nmeta.variable-exists($name)\nvariable-exists($name) //=> boolean\n```\n\nReturns whether a variable named `$name` (without the `$`) exists in the current [scope](../variables#scope).\n\nSee also [`meta.global-variable-exists()`](#global-variable-exists).\n\n- [SCSS](#example-16-scss)\n- [Sass](#example-16-sass)\n\n``` scss\n@debug meta.variable-exists(\"var1\"); // false\n\n$var1: value;\n@debug meta.variable-exists(\"var1\"); // true\n\nh1 {\n  // $var2 is local.\n  $var2: value;\n  @debug meta.variable-exists(\"var2\"); // true\n}\n```\n\n``` scss\n@debug meta.variable-exists(\"var1\")  // false\n\n$var1: value\n@debug meta.variable-exists(\"var1\")  // true\n\nh1\n  // $var2 is local.\n  $var2: value\n  @debug meta.variable-exists(\"var2\")  // true\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/meta](https://sass-lang.com/documentation/modules/meta)"
- name: sass:selector
  id: modules/selector
  summary: Only Dart Sass currently supports loading built-in modules with @use
  description: "# sass:selector\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports loading built-in modules with `@use`. Users of other implementations must call functions using their global names instead.\n\n## Selector Values\n\nThe functions in this module inspect and manipulate selectors. Whenever they return a selector, it’s always a comma-separated [list](../values/lists) (the selector list) that contains space-separated lists (the complex selectors) that contain [unquoted strings](../values/strings#unquoted) (the compound selectors). For example, the selector `.main aside:hover, .sidebar p` would be returned as:\n\n``` scss\n@debug ((unquote(\".main\") unquote(\"aside:hover\")),\n        (unquote(\".sidebar\") unquote(\"p\")));\n// .main aside:hover, .sidebar p\n```\n\nSelector arguments to these functions may be in the same format, but they can also just be normal strings (quoted or unquoted), or a combination. For example, `\".main aside:hover, .sidebar p\"` is a valid selector argument.\n\n``` scss\nselector.is-superselector($super, $sub)\nis-superselector($super, $sub) //=> boolean\n```\n\nReturns whether the selector `$super` matches all the elements that the selector `$sub` matches.\n\nStill returns true even if `$super` matches *more* elements than `$sub`.\n\nThe `$super` and `$sub` selectors may contain [placeholder selectors](../style-rules/placeholder-selectors), but not [parent selectors](../style-rules/parent-selector).\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug selector.is-superselector(\"a\", \"a.disabled\"); // true\n@debug selector.is-superselector(\"a.disabled\", \"a\"); // false\n@debug selector.is-superselector(\"a\", \"sidebar a\"); // true\n@debug selector.is-superselector(\"sidebar a\", \"a\"); // false\n@debug selector.is-superselector(\"a\", \"a\"); // true\n```\n\n``` scss\n@debug selector.is-superselector(\"a\", \"a.disabled\")  // true\n@debug selector.is-superselector(\"a.disabled\", \"a\")  // false\n@debug selector.is-superselector(\"a\", \"sidebar a\")  // true\n@debug selector.is-superselector(\"sidebar a\", \"a\")  // false\n@debug selector.is-superselector(\"a\", \"a\")  // true\n```\n\n``` scss\nselector.append($selectors...)\nselector-append($selectors...) //=> selector\n```\n\nCombines `$selectors` without [descendant combinators](https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_selectors)—that is, without whitespace between them.\n\nIf any selector in `$selectors` is a selector list, each complex selector is combined separately.\n\nThe `$selectors` may contain [placeholder selectors](../style-rules/placeholder-selectors), but not [parent selectors](../style-rules/parent-selector).\n\nSee also [`selector.nest()`](#nest).\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n@debug selector.append(\"a\", \".disabled\"); // a.disabled\n@debug selector.append(\".accordion\", \"__copy\"); // .accordion__copy\n@debug selector.append(\".accordion\", \"__copy, __image\");\n// .accordion__copy, .accordion__image\n```\n\n``` scss\n@debug selector.append(\"a\", \".disabled\")  // a.disabled\n@debug selector.append(\".accordion\", \"__copy\")  // .accordion__copy\n@debug selector.append(\".accordion\", \"__copy, __image\")\n// .accordion__copy, .accordion__image\n```\n\n``` scss\nselector.extend($selector, $extendee, $extender)\nselector-extend($selector, $extendee, $extender) //=> selector\n```\n\nExtends `$selector` as with the [`@extend` rule](../at-rules/extend).\n\nReturns a copy of `$selector` modified with the following `@extend` rule:\n\n``` scss\n#{$extender} {\n  @extend #{$extendee};\n}\n```\n\nIn other words, replaces all instances of `$extendee` in `$selector` with `$extendee, $extender`. If `$selector` doesn’t contain `$extendee`, returns it as-is.\n\nThe `$selector`, `$extendee`, and `$extender` selectors may contain [placeholder selectors](../style-rules/placeholder-selectors), but not [parent selectors](../style-rules/parent-selector).\n\nSee also [`selector.replace()`](#replace).\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@debug selector.extend(\"a.disabled\", \"a\", \".link\"); // a.disabled, .link.disabled\n@debug selector.extend(\"a.disabled\", \"h1\", \"h2\"); // a.disabled\n@debug selector.extend(\".guide .info\", \".info\", \".content nav.sidebar\");\n// .guide .info, .guide .content nav.sidebar, .content .guide nav.sidebar\n```\n\n``` scss\n@debug selector.extend(\"a.disabled\", \"a\", \".link\")  // a.disabled, .link.disabled\n@debug selector.extend(\"a.disabled\", \"h1\", \"h2\")  // a.disabled\n@debug selector.extend(\".guide .info\", \".info\", \".content nav.sidebar\")\n// .guide .info, .guide .content nav.sidebar, .content .guide nav.sidebar\n```\n\n``` scss\nselector.nest($selectors...)\nselector-nest($selectors...) //=> selector\n```\n\nCombines `$selectors` as though they were nested within one another in the stylesheet.\n\nThe `$selectors` may contain [placeholder selectors](../style-rules/placeholder-selectors). Unlike other selector functions, all of them except the first may also contain [parent selectors](../style-rules/parent-selector).\n\nSee also [`selector.append()`](#append).\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n@debug selector.nest(\"ul\", \"li\"); // ul li\n@debug selector.nest(\".alert, .warning\", \"p\"); // .alert p, .warning p\n@debug selector.nest(\".alert\", \"&:hover\"); // .alert:hover\n@debug selector.nest(\".accordion\", \"&__copy\"); // .accordion__copy\n```\n\n``` scss\n@debug selector.nest(\"ul\", \"li\")  // ul li\n@debug selector.nest(\".alert, .warning\", \"p\")  // .alert p, .warning p\n@debug selector.nest(\".alert\", \"&:hover\")  // .alert:hover\n@debug selector.nest(\".accordion\", \"&__copy\")  // .accordion__copy\n```\n\n``` scss\nselector.parse($selector)\nselector-parse($selector) //=> selector\n```\n\nReturns `$selector` in the [selector value](#selector-values) format.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n@debug selector.parse(\".main aside:hover, .sidebar p\");\n// ((unquote(\".main\") unquote(\"aside:hover\")),\n//  (unquote(\".sidebar\") unquote(\"p\")))\n```\n\n``` scss\n@debug selector.parse(\".main aside:hover, .sidebar p\")\n// ((unquote(\".main\") unquote(\"aside:hover\")),\n//  (unquote(\".sidebar\") unquote(\"p\")))\n```\n\n``` scss\nselector.replace($selector, $original, $replacement)\nselector-replace($selector, $original, $replacement) //=> selector\n```\n\nReturns a copy of `$selector` with all instances of `$original` replaced by `$replacement`.\n\nThis uses the [`@extend` rule](../at-rules/extend)’s [intelligent unification](../at-rules/extend#how-it-works) to make sure `$replacement` is seamlessly integrated into `$selector`. If `$selector` doesn’t contain `$original`, returns it as-is.\n\nThe `$selector`, `$original`, and `$replacement` selectors may contain [placeholder selectors](../style-rules/placeholder-selectors), but not [parent selectors](../style-rules/parent-selector).\n\nSee also [`selector.extend()`](#extend).\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@debug selector.replace(\"a.disabled\", \"a\", \".link\"); // .link.disabled\n@debug selector.replace(\"a.disabled\", \"h1\", \"h2\"); // a.disabled\n@debug selector.replace(\".guide .info\", \".info\", \".content nav.sidebar\");\n// .guide .content nav.sidebar, .content .guide nav.sidebar\n```\n\n``` scss\n@debug selector.replace(\"a.disabled\", \"a\", \".link\")  // .link.disabled\n@debug selector.replace(\"a.disabled\", \"h1\", \"h2\")  // a.disabled\n@debug selector.replace(\".guide .info\", \".info\", \".content nav.sidebar\")\n// .guide .content nav.sidebar, .content .guide nav.sidebar\n```\n\n``` scss\nselector.unify($selector1, $selector2)\nselector-unify($selector1, $selector2) //=> selector | null\n```\n\nReturns a selector that matches only elements matched by *both* `$selector1` and `$selector2`.\n\nReturns `null` if `$selector1` and `$selector2` don’t match any of the same elements, or if there’s no selector that can express their overlap.\n\nLike selectors generated by the [`@extend` rule](../at-rules/extend#html-heuristics), the returned selector isn’t guaranteed to match *all* the elements matched by both `$selector1` and `$selector2` if they’re both complex selectors.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n\n``` scss\n@debug selector.unify(\"a\", \".disabled\"); // a.disabled\n@debug selector.unify(\"a.disabled\", \"a.outgoing\"); // a.disabled.outgoing\n@debug selector.unify(\"a\", \"h1\"); // null\n@debug selector.unify(\".warning a\", \"main a\"); // .warning main a, main .warning a\n```\n\n``` scss\n@debug selector.unify(\"a\", \".disabled\")  // a.disabled\n@debug selector.unify(\"a.disabled\", \"a.outgoing\")  // a.disabled.outgoing\n@debug selector.unify(\"a\", \"h1\")  // null\n@debug selector.unify(\".warning a\", \"main a\")  // .warning main a, main .warning a\n```\n\n``` scss\nselector.simple-selectors($selector)\nsimple-selectors($selector) //=> list\n```\n\nReturns a list of simple selectors in `$selector`.\n\nThe `$selector` must be a single string that contains a compound selector. This means it may not contain combinators (including spaces) or commas.\n\nThe returned list is comma-separated, and the simple selectors are unquoted strings.\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n\n``` scss\n@debug selector.simple-selectors(\"a.disabled\"); // a, .disabled\n@debug selector.simple-selectors(\"main.blog:after\"); // main, .blog, :after\n```\n\n``` scss\n@debug selector.simple-selectors(\"a.disabled\")  // a, .disabled\n@debug selector.simple-selectors(\"main.blog:after\")  // main, .blog, :after\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/selector](https://sass-lang.com/documentation/modules/selector)"
- name: sass:string
  id: modules/string
  summary: Only Dart Sass currently supports loading built-in modules with @use
  description: "# sass:string\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports loading built-in modules with `@use`. Users of other implementations must call functions using their global names instead.\n\n``` scss\nstring.quote($string)\nquote($string) //=> string\n```\n\nReturns `$string` as a quoted string.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug string.quote(Helvetica); // \"Helvetica\"\n@debug string.quote(\"Helvetica\"); // \"Helvetica\"\n```\n\n``` scss\n@debug string.quote(Helvetica)  // \"Helvetica\"\n@debug string.quote(\"Helvetica\")  // \"Helvetica\"\n```\n\n``` scss\nstring.index($string, $substring)\nstr-index($string, $substring) //=> number\n```\n\nReturns the first [index](../values/strings#string-indexes) of `$substring` in `$string`, or `null` if `$string` doesn’t contain `$substring`.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n@debug string.index(\"Helvetica Neue\", \"Helvetica\"); // 1\n@debug string.index(\"Helvetica Neue\", \"Neue\"); // 11\n```\n\n``` scss\n@debug string.index(\"Helvetica Neue\", \"Helvetica\")  // 1\n@debug string.index(\"Helvetica Neue\", \"Neue\")  // 11\n```\n\n``` scss\nstring.insert($string, $insert, $index)\nstr-insert($string, $insert, $index) //=> string\n```\n\nReturns a copy of `$string` with `$insert` inserted at [`$index`](../values/strings#string-indexes).\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@debug string.insert(\"Roboto Bold\", \" Mono\", 7); // \"Roboto Mono Bold\"\n@debug string.insert(\"Roboto Bold\", \" Mono\", -6); // \"Roboto Mono Bold\"\n```\n\n``` scss\n@debug string.insert(\"Roboto Bold\", \" Mono\", 7)  // \"Roboto Mono Bold\"\n@debug string.insert(\"Roboto Bold\", \" Mono\", -6)  // \"Roboto Mono Bold\"\n```\n\nIf of `$index` is higher than the length of `$string`, `$insert` is added to the end. If `$index` is smaller than the negative length of the string, `$insert` is added to the beginning.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n@debug string.insert(\"Roboto\", \" Bold\", 100); // \"Roboto Bold\"\n@debug string.insert(\"Bold\", \"Roboto \", -100); // \"Roboto Bold\"\n```\n\n``` scss\n@debug string.insert(\"Roboto\", \" Bold\", 100)  // \"Roboto Bold\"\n@debug string.insert(\"Bold\", \"Roboto \", -100)  // \"Roboto Bold\"\n```\n\n``` scss\nstring.length($string)\nstr-length($string) //=> number\n```\n\nReturns the number of characters in `$string`.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n@debug string.length(\"Helvetica Neue\"); // 14\n@debug string.length(bold); // 4\n@debug string.length(\"\"); // 0\n```\n\n``` scss\n@debug string.length(\"Helvetica Neue\")  // 14\n@debug string.length(bold)  // 4\n@debug string.length(\"\")  // 0\n```\n\n``` scss\nstring.slice($string, $start-at, $end-at: -1)\nstr-slice($string, $start-at, $end-at: -1) //=> string\n```\n\nReturns the slice of `$string` starting at [index](../values/strings#string-indexes) `$start-at` and ending at index `$end-at` (both inclusive).\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@debug string.slice(\"Helvetica Neue\", 11); // \"Neue\"\n@debug string.slice(\"Helvetica Neue\", 1, 3); // \"Hel\"\n@debug string.slice(\"Helvetica Neue\", 1, -6); // \"Helvetica\"\n```\n\n``` scss\n@debug string.slice(\"Helvetica Neue\", 11)  // \"Neue\"\n@debug string.slice(\"Helvetica Neue\", 1, 3)  // \"Hel\"\n@debug string.slice(\"Helvetica Neue\", 1, -6)  // \"Helvetica\"\n```\n\n``` scss\nstring.to-upper-case($string)\nto-upper-case($string) //=> string\n```\n\nReturns a copy of `$string` with the [ASCII](https://en.wikipedia.org/wiki/ASCII) letters converted to upper case.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n\n``` scss\n@debug string.to-upper-case(\"Bold\"); // \"BOLD\"\n@debug string.to-upper-case(sans-serif); // SANS-SERIF\n```\n\n``` scss\n@debug string.to-upper-case(\"Bold\")  // \"BOLD\"\n@debug string.to-upper-case(sans-serif)  // SANS-SERIF\n```\n\n``` scss\nstring.to-lower-case($string)\nto-lower-case($string) //=> string\n```\n\nReturns a copy of `$string` with the [ASCII](https://en.wikipedia.org/wiki/ASCII) letters converted to lower case.\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n\n``` scss\n@debug string.to-lower-case(\"Bold\"); // \"bold\"\n@debug string.to-lower-case(SANS-SERIF); // sans-serif\n```\n\n``` scss\n@debug string.to-lower-case(\"Bold\")  // \"bold\"\n@debug string.to-lower-case(SANS-SERIF)  // sans-serif\n```\n\n``` scss\nstring.unique-id()\nunique-id() //=> string\n```\n\nReturns a randomly-generated unquoted string that’s guaranteed to be a valid CSS identifier and to be unique within the current Sass compilation.\n\n- [SCSS](#example-9-scss)\n- [Sass](#example-9-sass)\n\n``` scss\n@debug string.unique-id(); // uabtrnzug\n@debug string.unique-id(); // u6w1b1def\n```\n\n``` scss\n@debug string.unique-id(); // uabtrnzug\n@debug string.unique-id(); // u6w1b1def\n```\n\n``` scss\nstring.unquote($string)\nunquote($string) //=> string\n```\n\nReturns `$string` as an unquoted string. This can produce strings that aren’t valid CSS, so use with caution.\n\n- [SCSS](#example-10-scss)\n- [Sass](#example-10-sass)\n\n``` scss\n@debug string.unquote(\"Helvetica\"); // Helvetica\n@debug string.unquote(\".widget:hover\"); // .widget:hover\n```\n\n``` scss\n@debug string.unquote(\"Helvetica\")  // Helvetica\n@debug string.unquote(\".widget:hover\")  // .widget:hover\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/string](https://sass-lang.com/documentation/modules/string)"
- name: saturate
  id: modules/color#saturate
  summary: Makes $color more saturated
  belongs_to: sass:color
  description: |-
    ``` scss
    saturate($color, $amount)
    saturate($color, $amount) //=> color
    ```

    Makes `$color` more saturated.

    The `$amount` must be a number between `0%` and `100%` (inclusive). Increases the HSL saturation of `$color` by that amount.

    ### ⚠️ Heads up!

    The `saturate()` function increases saturation by a fixed amount, which is often not the desired effect. To make a color a certain percentage more saturated than it was before, use [`scale()`](#scale) instead.

    Because `saturate()` is usually not the best way to make a color more saturated, it’s not included directly in the new module system. However, if you have to preserve the existing behavior, `saturate($color, $amount)` can be written [`adjust($color, $saturation: $amount)`](#adjust).

    - [SCSS](#example-25-scss)
    - [Sass](#example-25-sass)

    ``` scss
    // #0e4982 has saturation 80%, so when saturate() adds 30% it just becomes
    // fully saturated.
    @debug saturate(#0e4982, 30%); // #004990

    // scale() instead makes it 30% more saturated than it was originally.
    @debug color.scale(#0e4982, $saturation: 30%); // #0a4986
    ```

    ``` scss
    // #0e4982 has saturation 80%, so when saturate() adds 30% it just becomes
    // fully saturated.
    @debug saturate(#0e4982, 30%)  // #004990

    // scale() instead makes it 30% more saturated than it was originally.
    @debug color.scale(#0e4982, $saturation: 30%)  // #0a4986
    ```

    - [SCSS](#example-26-scss)
    - [Sass](#example-26-sass)

    ``` scss
    // Saturation 50% becomes 70%.
    @debug saturate(#c69, 20%); // #e05299

    // Saturation 35% becomes 85%.
    @debug desaturate(#f2ece4, 50%); // #ebebeb

    // Saturation 80% becomes 100%.
    @debug saturate(#0e4982, 30%)  // #004990
    ```

    ``` scss
    // Saturation 50% becomes 70%.
    @debug saturate(#c69, 20%); // #e05299

    // Saturation 35% becomes 85%.
    @debug desaturate(#f2ece4, 50%); // #ebebeb

    // Saturation 80% becomes 100%.
    @debug saturate(#0e4982, 30%)  // #004990
    ```
- name: selector.append
  id: modules/selector#selector.append
  summary: Combines $selectors without descendant combinators—that is, without whitespace between them
  belongs_to: sass:selector
  description: |-
    ``` scss
    selector.append($selectors...)
    selector-append($selectors...) //=> selector
    ```

    Combines `$selectors` without [descendant combinators](https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_selectors)—that is, without whitespace between them.

    If any selector in `$selectors` is a selector list, each complex selector is combined separately.

    The `$selectors` may contain [placeholder selectors](../style-rules/placeholder-selectors), but not [parent selectors](../style-rules/parent-selector).

    See also [`selector.nest()`](#nest).

    - [SCSS](#example-2-scss)
    - [Sass](#example-2-sass)

    ``` scss
    @debug selector.append("a", ".disabled"); // a.disabled
    @debug selector.append(".accordion", "__copy"); // .accordion__copy
    @debug selector.append(".accordion", "__copy, __image");
    // .accordion__copy, .accordion__image
    ```

    ``` scss
    @debug selector.append("a", ".disabled")  // a.disabled
    @debug selector.append(".accordion", "__copy")  // .accordion__copy
    @debug selector.append(".accordion", "__copy, __image")
    // .accordion__copy, .accordion__image
    ```
- name: selector.extend
  id: modules/selector#selector.extend
  summary: Extends $selector as with the @extend rule
  belongs_to: sass:selector
  description: |-
    ``` scss
    selector.extend($selector, $extendee, $extender)
    selector-extend($selector, $extendee, $extender) //=> selector
    ```

    Extends `$selector` as with the [`@extend` rule](../at-rules/extend).

    Returns a copy of `$selector` modified with the following `@extend` rule:

    ``` scss
    #{$extender} {
      @extend #{$extendee};
    }
    ```

    In other words, replaces all instances of `$extendee` in `$selector` with `$extendee, $extender`. If `$selector` doesn’t contain `$extendee`, returns it as-is.

    The `$selector`, `$extendee`, and `$extender` selectors may contain [placeholder selectors](../style-rules/placeholder-selectors), but not [parent selectors](../style-rules/parent-selector).

    See also [`selector.replace()`](#replace).

    - [SCSS](#example-3-scss)
    - [Sass](#example-3-sass)

    ``` scss
    @debug selector.extend("a.disabled", "a", ".link"); // a.disabled, .link.disabled
    @debug selector.extend("a.disabled", "h1", "h2"); // a.disabled
    @debug selector.extend(".guide .info", ".info", ".content nav.sidebar");
    // .guide .info, .guide .content nav.sidebar, .content .guide nav.sidebar
    ```

    ``` scss
    @debug selector.extend("a.disabled", "a", ".link")  // a.disabled, .link.disabled
    @debug selector.extend("a.disabled", "h1", "h2")  // a.disabled
    @debug selector.extend(".guide .info", ".info", ".content nav.sidebar")
    // .guide .info, .guide .content nav.sidebar, .content .guide nav.sidebar
    ```
- name: selector.is-superselector
  id: modules/selector#selector.is-superselector
  summary: Returns whether the selector $super matches all the elements that the selector $sub matches
  belongs_to: sass:selector
  description: |-
    ``` scss
    selector.is-superselector($super, $sub)
    is-superselector($super, $sub) //=> boolean
    ```

    Returns whether the selector `$super` matches all the elements that the selector `$sub` matches.

    Still returns true even if `$super` matches *more* elements than `$sub`.

    The `$super` and `$sub` selectors may contain [placeholder selectors](../style-rules/placeholder-selectors), but not [parent selectors](../style-rules/parent-selector).

    - [SCSS](#example-1-scss)
    - [Sass](#example-1-sass)

    ``` scss
    @debug selector.is-superselector("a", "a.disabled"); // true
    @debug selector.is-superselector("a.disabled", "a"); // false
    @debug selector.is-superselector("a", "sidebar a"); // true
    @debug selector.is-superselector("sidebar a", "a"); // false
    @debug selector.is-superselector("a", "a"); // true
    ```

    ``` scss
    @debug selector.is-superselector("a", "a.disabled")  // true
    @debug selector.is-superselector("a.disabled", "a")  // false
    @debug selector.is-superselector("a", "sidebar a")  // true
    @debug selector.is-superselector("sidebar a", "a")  // false
    @debug selector.is-superselector("a", "a")  // true
    ```
- name: selector.nest
  id: modules/selector#selector.nest
  summary: Combines $selectors as though they were nested within one another in the stylesheet
  belongs_to: sass:selector
  description: |-
    ``` scss
    selector.nest($selectors...)
    selector-nest($selectors...) //=> selector
    ```

    Combines `$selectors` as though they were nested within one another in the stylesheet.

    The `$selectors` may contain [placeholder selectors](../style-rules/placeholder-selectors). Unlike other selector functions, all of them except the first may also contain [parent selectors](../style-rules/parent-selector).

    See also [`selector.append()`](#append).

    - [SCSS](#example-4-scss)
    - [Sass](#example-4-sass)

    ``` scss
    @debug selector.nest("ul", "li"); // ul li
    @debug selector.nest(".alert, .warning", "p"); // .alert p, .warning p
    @debug selector.nest(".alert", "&:hover"); // .alert:hover
    @debug selector.nest(".accordion", "&__copy"); // .accordion__copy
    ```

    ``` scss
    @debug selector.nest("ul", "li")  // ul li
    @debug selector.nest(".alert, .warning", "p")  // .alert p, .warning p
    @debug selector.nest(".alert", "&:hover")  // .alert:hover
    @debug selector.nest(".accordion", "&__copy")  // .accordion__copy
    ```
- name: selector.parse
  id: modules/selector#selector.parse
  summary: Returns $selector in the selector value format
  belongs_to: sass:selector
  description: |-
    ``` scss
    selector.parse($selector)
    selector-parse($selector) //=> selector
    ```

    Returns `$selector` in the [selector value](#selector-values) format.

    - [SCSS](#example-5-scss)
    - [Sass](#example-5-sass)

    ``` scss
    @debug selector.parse(".main aside:hover, .sidebar p");
    // ((unquote(".main") unquote("aside:hover")),
    //  (unquote(".sidebar") unquote("p")))
    ```

    ``` scss
    @debug selector.parse(".main aside:hover, .sidebar p")
    // ((unquote(".main") unquote("aside:hover")),
    //  (unquote(".sidebar") unquote("p")))
    ```
- name: selector.replace
  id: modules/selector#selector.replace
  summary: Returns a copy of $selector with all instances of $original replaced by $replacement
  belongs_to: sass:selector
  description: |-
    ``` scss
    selector.replace($selector, $original, $replacement)
    selector-replace($selector, $original, $replacement) //=> selector
    ```

    Returns a copy of `$selector` with all instances of `$original` replaced by `$replacement`.

    This uses the [`@extend` rule](../at-rules/extend)’s [intelligent unification](../at-rules/extend#how-it-works) to make sure `$replacement` is seamlessly integrated into `$selector`. If `$selector` doesn’t contain `$original`, returns it as-is.

    The `$selector`, `$original`, and `$replacement` selectors may contain [placeholder selectors](../style-rules/placeholder-selectors), but not [parent selectors](../style-rules/parent-selector).

    See also [`selector.extend()`](#extend).

    - [SCSS](#example-6-scss)
    - [Sass](#example-6-sass)

    ``` scss
    @debug selector.replace("a.disabled", "a", ".link"); // .link.disabled
    @debug selector.replace("a.disabled", "h1", "h2"); // a.disabled
    @debug selector.replace(".guide .info", ".info", ".content nav.sidebar");
    // .guide .content nav.sidebar, .content .guide nav.sidebar
    ```

    ``` scss
    @debug selector.replace("a.disabled", "a", ".link")  // .link.disabled
    @debug selector.replace("a.disabled", "h1", "h2")  // a.disabled
    @debug selector.replace(".guide .info", ".info", ".content nav.sidebar")
    // .guide .content nav.sidebar, .content .guide nav.sidebar
    ```
- name: selector.simple-selectors
  id: modules/selector#selector.simple-selectors
  summary: Returns a list of simple selectors in $selector
  belongs_to: sass:selector
  description: "``` scss\nselector.simple-selectors($selector)\nsimple-selectors($selector) //=> list\n```\n\nReturns a list of simple selectors in `$selector`.\n\nThe `$selector` must be a single string that contains a compound selector. This means it may not contain combinators (including spaces) or commas.\n\nThe returned list is comma-separated, and the simple selectors are unquoted strings.\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n\n``` scss\n@debug selector.simple-selectors(\"a.disabled\"); // a, .disabled\n@debug selector.simple-selectors(\"main.blog:after\"); // main, .blog, :after\n```\n\n``` scss\n@debug selector.simple-selectors(\"a.disabled\")  // a, .disabled\n@debug selector.simple-selectors(\"main.blog:after\")  // main, .blog, :after\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/selector](https://sass-lang.com/documentation/modules/selector)"
- name: selector.unify
  id: modules/selector#selector.unify
  summary: Returns a selector that matches only elements matched by both $selector1 and $selector2
  belongs_to: sass:selector
  description: |-
    ``` scss
    selector.unify($selector1, $selector2)
    selector-unify($selector1, $selector2) //=> selector | null
    ```

    Returns a selector that matches only elements matched by *both* `$selector1` and `$selector2`.

    Returns `null` if `$selector1` and `$selector2` don’t match any of the same elements, or if there’s no selector that can express their overlap.

    Like selectors generated by the [`@extend` rule](../at-rules/extend#html-heuristics), the returned selector isn’t guaranteed to match *all* the elements matched by both `$selector1` and `$selector2` if they’re both complex selectors.

    - [SCSS](#example-7-scss)
    - [Sass](#example-7-sass)

    ``` scss
    @debug selector.unify("a", ".disabled"); // a.disabled
    @debug selector.unify("a.disabled", "a.outgoing"); // a.disabled.outgoing
    @debug selector.unify("a", "h1"); // null
    @debug selector.unify(".warning a", "main a"); // .warning main a, main .warning a
    ```

    ``` scss
    @debug selector.unify("a", ".disabled")  // a.disabled
    @debug selector.unify("a.disabled", "a.outgoing")  // a.disabled.outgoing
    @debug selector.unify("a", "h1")  // null
    @debug selector.unify(".warning a", "main a")  // .warning main a, main .warning a
    ```
- name: Special Functions
  id: syntax/special-functions
  summary: CSS defines many functions, and most of them work just fine with Sass’s normal function syntax
  description: "# Special Functions\n\n### Page Sections\n\n- [`url()`](#url)\n- [`element()`, `progid:...()`, and `expression()`](#element-progid-and-expression)\n\nCSS defines many functions, and most of them work just fine with Sass’s normal function syntax. They’re parsed as function calls, resolved to [plain CSS functions](../at-rules/function#plain-css-functions), and compiled as-is to CSS. There are a few exceptions, though, which have special syntax that can’t just be parsed as a [SassScript expression](structure#expressions). All special function calls return [unquoted strings](../values/strings#unquoted).\n\n## `url()`\n\nThe [`url()` function](https://developer.mozilla.org/en-US/docs/Web/CSS/url) is commonly used in CSS, but its syntax is different than other functions: it can take either a quoted *or* unquoted URL. Because an unquoted URL isn’t a valid SassScript expression, Sass needs special logic to parse it.\n\nIf the `url()`‘s argument is a valid unquoted URL, Sass parses it as-is, although [interpolation](../interpolation) may also be used to inject SassScript values. If it’s not a valid unquoted URL—for example, if it contains [variables](../variables) or [function calls](../at-rules/function)—it’s parsed as a normal [plain CSS function call](../at-rules/function#plain-css-functions).\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n$roboto-font-path: \"../fonts/roboto\";\n\n@font-face {\n    // This is parsed as a normal function call that takes a quoted string.\n    src: url(\"#{$roboto-font-path}/Roboto-Thin.woff2\") format(\"woff2\");\n\n    font-family: \"Roboto\";\n    font-weight: 100;\n}\n\n@font-face {\n    // This is parsed as a normal function call that takes an arithmetic\n    // expression.\n    src: url($roboto-font-path + \"/Roboto-Light.woff2\") format(\"woff2\");\n\n    font-family: \"Roboto\";\n    font-weight: 300;\n}\n\n@font-face {\n    // This is parsed as an interpolated special function.\n    src: url(#{$roboto-font-path}/Roboto-Regular.woff2) format(\"woff2\");\n\n    font-family: \"Roboto\";\n    font-weight: 400;\n}\n```\n\n``` scss\n$roboto-font-path: \"../fonts/roboto\"\n\n@font-face\n    // This is parsed as a normal function call that takes a quoted string.\n    src: url(\"#{$roboto-font-path}/Roboto-Thin.woff2\") format(\"woff2\")\n\n    font-family: \"Roboto\"\n    font-weight: 100\n\n\n@font-face\n    // This is parsed as a normal function call that takes an arithmetic\n    // expression.\n    src: url($roboto-font-path + \"/Roboto-Light.woff2\") format(\"woff2\")\n\n    font-family: \"Roboto\"\n    font-weight: 300\n\n\n@font-face\n    // This is parsed as an interpolated special function.\n    src: url(#{$roboto-font-path}/Roboto-Regular.woff2) format(\"woff2\")\n\n    font-family: \"Roboto\"\n    font-weight: 400\n```\n\n``` css\n@font-face {\n  src: url(\"../fonts/roboto/Roboto-Thin.woff2\") format(\"woff2\");\n  font-family: \"Roboto\";\n  font-weight: 100;\n}\n@font-face {\n  src: url(\"../fonts/roboto/Roboto-Light.woff2\") format(\"woff2\");\n  font-family: \"Roboto\";\n  font-weight: 300;\n}\n@font-face {\n  src: url(../fonts/roboto/Roboto-Regular.woff2) format(\"woff2\");\n  font-family: \"Roboto\";\n  font-weight: 400;\n}\n```\n\n## `element()`, `progid:...()`, and `expression()`\n\nCompatibility (calc()):\n\nDart Sass  \nsince \\<1.40.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nLibSass, Ruby Sass, and versions of Dart Sass prior to 1.40.0 parse `calc()` as special syntactic function like `element()`.\n\nDart Sass versions 1.40.0 and later parse `calc()` as a [calculation](../values/calculations).\n\nCompatibility (clamp()):\n\nDart Sass  \nsince \\>=1.31.0 \\<1.40.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nLibSass, Ruby Sass, and versions of Dart Sass prior to 1.31.0 parse `clamp()` as a [plain CSS function](../at-rules/function#plain-css-functions) rather than supporting special syntax within it.\n\nDart Sass versions between 1.31.0 and 1.40.0 parse `clamp()` as special syntactic function like `element()`.\n\nDart Sass versions 1.40.0 and later parse `clamp()` as a [calculation](../values/calculations).\n\nThe [`element()`](https://developer.mozilla.org/en-US/docs/Web/CSS/element) function is defined in the CSS spec, and because its IDs could be parsed as colors, they need special parsing.\n\n[`expression()`](https://blogs.msdn.microsoft.com/ie/2008/10/16/ending-expressions/) and functions beginning with [`progid:`](https://blogs.msdn.microsoft.com/ie/2009/02/19/the-css-corner-using-filters-in-ie8/) are legacy Internet Explorer features that use non-standard syntax. Although they’re no longer supported by recent browsers, Sass continues to parse them for backwards compatibility.\n\nSass allows *any text* in these function calls, including nested parentheses. Nothing is interpreted as a SassScript expression, with the exception that [interpolation](../interpolation) can be used to inject dynamic values.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n$logo-element: logo-bg;\n\n.logo {\n  background: element(##{$logo-element});\n}\n```\n\n``` scss\n$logo-element: logo-bg\n\n.logo\n  background: element(##{$logo-element})\n```\n\n``` css\n.logo {\n  background: element(#logo-bg);\n}\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/syntax/special-functions](https://sass-lang.com/documentation/syntax/special-functions)"
- name: String Operators
  id: operators/string
  summary: <expression> + <expression> returns a string that contains both expressions’ values
  description: "# String Operators\n\nSass supports a few operators that generate [strings](../values/strings):\n\n- `<expression> + <expression>` returns a string that contains both expressions’ values. If the either value is a [quoted string](../values/strings#quoted), the result will be quoted; otherwise, it will be unquoted.\n\n- `<expression> - <expression>` returns an unquoted string that contains both expressions’ values, separated by `-`. This is a legacy operator, and [interpolation](../interpolation) should generally be used instead.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@debug \"Helvetica\" + \" Neue\"; // \"Helvetica Neue\"\n@debug sans- + serif; // sans-serif\n@debug sans - serif; // sans-serif\n```\n\n``` scss\n@debug \"Helvetica\" + \" Neue\"  // \"Helvetica Neue\"\n@debug sans- + serif  // sans-serif\n@debug sans - serif  // sans-serif\n```\n\nThese operators don’t just work for strings! They can be used with any values that can be written to CSS, with a few exceptions:\n\n- Numbers can’t be used as the left-hand value, because they have [their own operators](numeric).\n- Colors can’t be used as the left-hand value, because they used to have [their own operators](../operators).\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n@debug \"Elapsed time: \" + 10s; // \"Elapsed time: 10s\";\n@debug true + \" is a boolean value\"; // \"true is a boolean value\";\n```\n\n``` scss\n@debug \"Elapsed time: \" + 10s  // \"Elapsed time: 10s\";\n@debug true + \" is a boolean value\"  // \"true is a boolean value\";\n```\n\n### ⚠️ Heads up!\n\nIt’s often cleaner and clearer to use [interpolation](../interpolation) to create strings, rather than relying on this operators.\n\n## Unary Operators\n\nFor historical reasons, Sass also supports `/` and `-` as a unary operators which take only one value:\n\n- `/<expression>` returns an unquoted string starting with `/` and followed by the expression’s value.\n- `-<expression>` returns an unquoted string starting with `-` and followed by the expression’s value.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@debug / 15px; // /15px\n@debug - moz; // -moz\n```\n\n``` scss\n@debug / 15px  // /15px\n@debug - moz  // -moz\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/operators/string](https://sass-lang.com/documentation/operators/string)"
- name: string.index
  id: modules/string#string.index
  summary: Returns the first index of $substring in $string, or null if $string doesn’t contain $substring
  belongs_to: sass:string
  description: |-
    ``` scss
    string.index($string, $substring)
    str-index($string, $substring) //=> number
    ```

    Returns the first [index](../values/strings#string-indexes) of `$substring` in `$string`, or `null` if `$string` doesn’t contain `$substring`.

    - [SCSS](#example-2-scss)
    - [Sass](#example-2-sass)

    ``` scss
    @debug string.index("Helvetica Neue", "Helvetica"); // 1
    @debug string.index("Helvetica Neue", "Neue"); // 11
    ```

    ``` scss
    @debug string.index("Helvetica Neue", "Helvetica")  // 1
    @debug string.index("Helvetica Neue", "Neue")  // 11
    ```
- name: string.insert
  id: modules/string#string.insert
  summary: Returns a copy of $string with $insert inserted at $index
  belongs_to: sass:string
  description: |-
    ``` scss
    string.insert($string, $insert, $index)
    str-insert($string, $insert, $index) //=> string
    ```

    Returns a copy of `$string` with `$insert` inserted at [`$index`](../values/strings#string-indexes).

    - [SCSS](#example-3-scss)
    - [Sass](#example-3-sass)

    ``` scss
    @debug string.insert("Roboto Bold", " Mono", 7); // "Roboto Mono Bold"
    @debug string.insert("Roboto Bold", " Mono", -6); // "Roboto Mono Bold"
    ```

    ``` scss
    @debug string.insert("Roboto Bold", " Mono", 7)  // "Roboto Mono Bold"
    @debug string.insert("Roboto Bold", " Mono", -6)  // "Roboto Mono Bold"
    ```

    If of `$index` is higher than the length of `$string`, `$insert` is added to the end. If `$index` is smaller than the negative length of the string, `$insert` is added to the beginning.

    - [SCSS](#example-4-scss)
    - [Sass](#example-4-sass)

    ``` scss
    @debug string.insert("Roboto", " Bold", 100); // "Roboto Bold"
    @debug string.insert("Bold", "Roboto ", -100); // "Roboto Bold"
    ```

    ``` scss
    @debug string.insert("Roboto", " Bold", 100)  // "Roboto Bold"
    @debug string.insert("Bold", "Roboto ", -100)  // "Roboto Bold"
    ```
- name: string.length
  id: modules/string#string.length
  summary: Returns the number of characters in $string
  belongs_to: sass:string
  description: |-
    ``` scss
    string.length($string)
    str-length($string) //=> number
    ```

    Returns the number of characters in `$string`.

    - [SCSS](#example-5-scss)
    - [Sass](#example-5-sass)

    ``` scss
    @debug string.length("Helvetica Neue"); // 14
    @debug string.length(bold); // 4
    @debug string.length(""); // 0
    ```

    ``` scss
    @debug string.length("Helvetica Neue")  // 14
    @debug string.length(bold)  // 4
    @debug string.length("")  // 0
    ```
- name: string.quote
  id: modules/string#string.quote
  summary: Returns $string as a quoted string
  belongs_to: sass:string
  description: |-
    ``` scss
    string.quote($string)
    quote($string) //=> string
    ```

    Returns `$string` as a quoted string.

    - [SCSS](#example-1-scss)
    - [Sass](#example-1-sass)

    ``` scss
    @debug string.quote(Helvetica); // "Helvetica"
    @debug string.quote("Helvetica"); // "Helvetica"
    ```

    ``` scss
    @debug string.quote(Helvetica)  // "Helvetica"
    @debug string.quote("Helvetica")  // "Helvetica"
    ```
- name: string.slice
  id: modules/string#string.slice
  summary: Returns the slice of $string starting at index $start-at and ending at index $end-at (both inclusive)
  belongs_to: sass:string
  description: |-
    ``` scss
    string.slice($string, $start-at, $end-at: -1)
    str-slice($string, $start-at, $end-at: -1) //=> string
    ```

    Returns the slice of `$string` starting at [index](../values/strings#string-indexes) `$start-at` and ending at index `$end-at` (both inclusive).

    - [SCSS](#example-6-scss)
    - [Sass](#example-6-sass)

    ``` scss
    @debug string.slice("Helvetica Neue", 11); // "Neue"
    @debug string.slice("Helvetica Neue", 1, 3); // "Hel"
    @debug string.slice("Helvetica Neue", 1, -6); // "Helvetica"
    ```

    ``` scss
    @debug string.slice("Helvetica Neue", 11)  // "Neue"
    @debug string.slice("Helvetica Neue", 1, 3)  // "Hel"
    @debug string.slice("Helvetica Neue", 1, -6)  // "Helvetica"
    ```
- name: string.to-lower-case
  id: modules/string#string.to-lower-case
  summary: Returns a copy of $string with the ASCII letters converted to lower case
  belongs_to: sass:string
  description: |-
    ``` scss
    string.to-lower-case($string)
    to-lower-case($string) //=> string
    ```

    Returns a copy of `$string` with the [ASCII](https://en.wikipedia.org/wiki/ASCII) letters converted to lower case.

    - [SCSS](#example-8-scss)
    - [Sass](#example-8-sass)

    ``` scss
    @debug string.to-lower-case("Bold"); // "bold"
    @debug string.to-lower-case(SANS-SERIF); // sans-serif
    ```

    ``` scss
    @debug string.to-lower-case("Bold")  // "bold"
    @debug string.to-lower-case(SANS-SERIF)  // sans-serif
    ```
- name: string.to-upper-case
  id: modules/string#string.to-upper-case
  summary: Returns a copy of $string with the ASCII letters converted to upper case
  belongs_to: sass:string
  description: |-
    ``` scss
    string.to-upper-case($string)
    to-upper-case($string) //=> string
    ```

    Returns a copy of `$string` with the [ASCII](https://en.wikipedia.org/wiki/ASCII) letters converted to upper case.

    - [SCSS](#example-7-scss)
    - [Sass](#example-7-sass)

    ``` scss
    @debug string.to-upper-case("Bold"); // "BOLD"
    @debug string.to-upper-case(sans-serif); // SANS-SERIF
    ```

    ``` scss
    @debug string.to-upper-case("Bold")  // "BOLD"
    @debug string.to-upper-case(sans-serif)  // SANS-SERIF
    ```
- name: string.unique-id
  id: modules/string#string.unique-id
  summary: Returns a randomly-generated unquoted string that’s guaranteed to be a valid CSS identifier and to be unique within the current Sass compilation
  belongs_to: sass:string
  description: |-
    ``` scss
    string.unique-id()
    unique-id() //=> string
    ```

    Returns a randomly-generated unquoted string that’s guaranteed to be a valid CSS identifier and to be unique within the current Sass compilation.

    - [SCSS](#example-9-scss)
    - [Sass](#example-9-sass)

    ``` scss
    @debug string.unique-id(); // uabtrnzug
    @debug string.unique-id(); // u6w1b1def
    ```

    ``` scss
    @debug string.unique-id(); // uabtrnzug
    @debug string.unique-id(); // u6w1b1def
    ```
- name: string.unquote
  id: modules/string#string.unquote
  summary: Returns $string as an unquoted string
  belongs_to: sass:string
  description: "``` scss\nstring.unquote($string)\nunquote($string) //=> string\n```\n\nReturns `$string` as an unquoted string. This can produce strings that aren’t valid CSS, so use with caution.\n\n- [SCSS](#example-10-scss)\n- [Sass](#example-10-sass)\n\n``` scss\n@debug string.unquote(\"Helvetica\"); // Helvetica\n@debug string.unquote(\".widget:hover\"); // .widget:hover\n```\n\n``` scss\n@debug string.unquote(\"Helvetica\")  // Helvetica\n@debug string.unquote(\".widget:hover\")  // .widget:hover\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/modules/string](https://sass-lang.com/documentation/modules/string)"
- name: Strings
  id: values/strings
  summary: Strings are sequences of characters (specifically Unicode code points)
  description: "# Strings\n\n### Page Sections\n\n- [Escapes](#escapes)\n- [Quoted](#quoted)\n- [Unquoted](#unquoted)\n  - [Overview](#unquoted)\n  - [Escapes in Unquoted Strings](#escapes-in-unquoted-strings)\n- [String Indexes](#string-indexes)\n\nStrings are sequences of characters (specifically [Unicode code points](https://en.wikipedia.org/wiki/Code_point)). Sass supports two kinds of strings whose internal structure is the same but which are rendered differently: [quoted strings](#quoted), like `\"Helvetica Neue\"`, and [unquoted strings](#unquoted) (also known as *identifiers*), like `bold`. Together, these cover the different kinds of text that appear in CSS.\n\n### 💡 Fun fact:\n\nYou can convert a quoted string to an unquoted string using the [`string.unquote()` function](../modules/string#unquote), and you can convert an unquoted string to a quoted string using the [`string.quote()` function](../modules/string#quote).\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n\n``` scss\n@use \"sass:string\";\n\n@debug string.unquote(\".widget:hover\"); // .widget:hover\n@debug string.quote(bold); // \"bold\"\n```\n\n``` scss\n@use \"sass:string\"\n\n@debug string.unquote(\".widget:hover\")  // .widget:hover\n@debug string.quote(bold)  // \"bold\"\n```\n\n## Escapes\n\nAll Sass strings support the standard CSS [escape codes](https://developer.mozilla.org/en-US/docs/Web/CSS/string#Syntax):\n\n- Any character other than a letter from A to F or a number from 0 to 9 (even a newline!) can be included as part of a string by writing `\\` in front of it.\n\n- Any character can be included as part of a string by writing `\\` followed by its [Unicode code point number](https://en.wikipedia.org/wiki/List_of_Unicode_characters) written in [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal). You can optionally include a space after the code point number to indicate where the Unicode number ends.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n\n``` scss\n@debug \"\\\"\"; // '\"'\n@debug \\.widget; // \\.widget\n@debug \"\\a\"; // \"\\a\" (a string containing only a newline)\n@debug \"line1\\a line2\"; // \"line1\\a line2\"\n@debug \"Nat + Liz \\1F46D\"; // \"Nat + Liz 👭\"\n```\n\n``` scss\n@debug \"\\\"\"  // '\"'\n@debug \\.widget  // \\.widget\n@debug \"\\a\"  // \"\\a\" (a string containing only a newline)\n@debug \"line1\\a line2\"  // \"line1\\a line2\" (foo and bar are separated by a newline)\n@debug \"Nat + Liz \\1F46D\"  // \"Nat + Liz 👭\"\n```\n\n### 💡 Fun fact:\n\nFor characters that are allowed to appear in strings, writing the Unicode escape produces exactly the same string as writing the character itself.\n\n## Quoted\n\nQuoted strings are written between either single or double quotes, as in `\"Helvetica Neue\"`. They can contain [interpolation](../interpolation), as well as any unescaped character except for:\n\n- `\\`, which can be escaped as `\\\\`;\n- `'` or `\"`, whichever was used to define that string, which can be escaped as `\\'` or `\\\"`;\n- newlines, which can be escaped as `\\a` (including a trailing space).\n\nQuoted strings are guaranteed to be compiled to CSS strings that have the same contents as the original Sass strings. The exact format may vary based on the implementation or configuration—a string containing a double quote may be compiled to `\"\\\"\"` or `'\"'`, and a non-[ASCII](https://en.wikipedia.org/wiki/ASCII) character may or may not be escaped. But that should be parsed the same in any standards-compliant CSS implementation, including all browsers.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n\n``` scss\n@debug \"Helvetica Neue\"; // \"Helvetica Neue\"\n@debug \"C:\\\\Program Files\"; // \"C:\\\\Program Files\"\n@debug \"\\\"Don't Fear the Reaper\\\"\"; // \"\\\"Don't Fear the Reaper\\\"\"\n@debug \"line1\\a line2\"; // \"line1\\a line2\"\n\n$roboto-variant: \"Mono\";\n@debug \"Roboto #{$roboto-variant}\"; // \"Roboto Mono\"\n```\n\n``` scss\n@debug \"Helvetica Neue\"  // \"Helvetica Neue\"\n@debug \"C:\\\\Program Files\"  // \"C:\\\\Program Files\"\n@debug \"\\\"Don't Fear the Reaper\\\"\"  // \"\\\"Don't Fear the Reaper\\\"\"\n@debug \"line1\\a line2\"  // \"line1\\a line2\"\n\n$roboto-variant: \"Mono\"\n@debug \"Roboto #{$roboto-variant}\"  // \"Roboto Mono\"\n```\n\n### 💡 Fun fact:\n\nWhen a quoted string is injected into another value via interpolation, [its quotes are removed](../interpolation#quoted-strings)! This makes it easy to write strings containing selectors, for example, that can be injected into style rules without adding quotes.\n\n## Unquoted\n\nUnquoted strings are written as CSS [identifiers](https://drafts.csswg.org/css-syntax-3/#ident-token-diagram), following the syntax diagram below. They may include [interpolation](../interpolation) anywhere.\n\nRailroad diagram copyright © 2018 W3C^(®) (MIT, ERCIM, Keio, Beihang). W3C [liability](http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer), [trademark](http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks) and [permissive document license](http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document) rules apply.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n@debug bold; // bold\n@debug -webkit-flex; // -webkit-flex\n@debug --123; // --123\n\n$prefix: ms;\n@debug -#{$prefix}-flex; // -ms-flex\n```\n\n``` scss\n@debug bold  // bold\n@debug -webkit-flex  // -webkit-flex\n@debug --123  // --123\n\n$prefix: ms\n@debug -#{$prefix}-flex  // -ms-flex\n```\n\n### ⚠️ Heads up!\n\nNot all identifiers are parsed as unquoted strings:\n\n- [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords) are parsed as [colors](colors).\n- `null` is parsed as [Sass’s `null` value](null).\n- `true` and `false` are parsed as [Booleans](booleans).\n- `not`, `and`, and `or` are parsed as [Boolean operators](../operators/boolean).\n\nBecause of this, it’s generally a good idea to write quoted strings unless you’re specifically writing the value of a CSS property that uses unquoted strings.\n\n### Escapes in Unquoted Strings\n\nCompatibility (Normalization):\n\nDart Sass  \nsince 1.11.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nLibSass, Ruby Sass, and older versions of Dart Sass don’t normalize escapes in identifiers. Instead, the text in the unquoted string is the exact text the user wrote. For example, `\\1F46D` and `👭` are not considered equivalent.\n\nWhen an unquoted string is parsed, the literal text of escapes are parsed as part of the string. For example, `\\a` is parsed as the characters `\\`, `a`, and space. In order to ensure that unquoted strings that have the same meanings in CSS are parsed the same way, though, these escapes are *normalized*. For each code point, whether it’s escaped or unescaped:\n\n- If it’s a valid identifier character, it’s included unescaped in the unquoted string. For example, `\\1F46D` returns the unquoted string `👭`.\n\n- If it’s a printable character other than a newline or a tab, it’s included after a `\\`. For example, `\\21` returns the unquoted string `\\!`.\n\n- Otherwise, the lowercase Unicode escape is included with a trailing space. For example, `\\7Fx` returns the unquoted string `\\7f x`.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n\n``` scss\n@use \"sass:string\";\n\n@debug \\1F46D; // 👭\n@debug \\21; // \\!\n@debug \\7Fx; // \\7f x\n@debug string.length(\\7Fx); // 5\n```\n\n``` scss\n@use \"sass:string\"\n\n@debug \\1F46D  // 👭\n@debug \\21  // \\!\n@debug \\7Fx  // \\7f x\n@debug string.length(\\7Fx)  // 5\n```\n\n## String Indexes\n\nSass has a number of [string functions](../modules/string) that take or return numbers, called *indexes*, that refer to the characters in a string. The index 1 indicates the first character of the string. Note that this is different than many programming languages where indexes start at 0! Sass also makes it easy to refer to the end of a string. The index -1 refers to the last character in a string, -2 refers to the second-to-last, and so on.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n\n``` scss\n@use \"sass:string\";\n\n@debug string.index(\"Helvetica Neue\", \"Helvetica\"); // 1\n@debug string.index(\"Helvetica Neue\", \"Neue\"); // 11\n@debug string.slice(\"Roboto Mono\", -4); // \"Mono\"\n```\n\n``` scss\n@use \"sass:string\"\n\n@debug string.index(\"Helvetica Neue\", \"Helvetica\")  // 1\n@debug string.index(\"Helvetica Neue\", \"Neue\")  // 11\n@debug string.slice(\"Roboto Mono\", -4)  // \"Mono\"\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/values/strings](https://sass-lang.com/documentation/values/strings)"
- name: Structure of a Stylesheet
  id: syntax/structure
  summary: Just like CSS, most Sass stylesheets are mainly made up of style rules that contain property declarations
  description: "# Structure of a Stylesheet\n\n### Page Sections\n\n- [Statements](#statements)\n  - [Overview](#statements)\n  - [Universal Statements](#universal-statements)\n  - [CSS Statements](#css-statements)\n  - [Top-Level Statements](#top-level-statements)\n  - [Other Statements](#other-statements)\n- [Expressions](#expressions)\n  - [Overview](#expressions)\n  - [Literals](#literals)\n  - [Operations](#operations)\n  - [Other Expressions](#other-expressions)\n\nJust like CSS, most Sass stylesheets are mainly made up of style rules that contain property declarations. But Sass stylesheets have many more features that can exist alongside these.\n\n## Statements\n\nA Sass stylesheet is made up of a series of *statements*, which are evaluated in order to build the resulting CSS. Some statements may have *blocks*, defined using `{` and `}`, which contain other statements. For example, a style rule is a statement with a block. That block contains other statements, such as property declarations.\n\nIn SCSS, statements are separated by semicolons (which are optional if the statement uses a block). In the indented syntax, they’re just separated by newlines.\n\n### Universal Statements\n\nThese types of statements can be used anywhere in a Sass stylesheet:\n\n- [Variable declarations](../variables), like `$var: value`.\n- [Flow control at-rules](../at-rules/control), like `@if` and `@each`.\n- The [`@error`](../at-rules/error), [`@warn`](../at-rules/warn), and [`@debug`](../at-rules/debug) rules.\n\n### CSS Statements\n\nThese statements produce CSS. They can be used anywhere except within a `@function`:\n\n- [Style rules](../style-rules), like `h1 { /* ... */ }`.\n- [CSS at-rules](../at-rules/css), like `@media` and `@font-face`.\n- [Mixin uses](../at-rules/mixin) using `@include`.\n- The [`@at-root` rule](../at-rules/at-root).\n\n### Top-Level Statements\n\nThese statements can only be used at the top level of a stylesheet, or nested within a CSS statement at the top level:\n\n- [Module loads](../at-rules/use), using `@use`.\n- [Imports](../at-rules/import), using `@import`.\n- [Mixin definitions](../at-rules/mixin) using `@mixin`.\n- [Function definitions](../at-rules/function) using `@function`.\n\n### Other Statements\n\n- [Property declarations](../style-rules/declarations) like `width: 100px` may only be used within style rules and some CSS at-rules.\n- The [`@extend` rule](../at-rules/extend) may only be used within style rules.\n\n## Expressions\n\nAn *expression* is anything that goes on the right-hand side of a property or variable declaration. Each expression produces a *[value](../values)*. Any valid CSS property value is also a Sass expression, but Sass expressions are much more powerful than plain CSS values. They’re passed as arguments to [mixins](../at-rules/mixin) and [functions](../at-rules/function), used for control flow with the [`@if` rule](../at-rules/control/if), and manipulated using [arithmetic](../operators/numeric). We call Sass’s expression syntax *SassScript*.\n\n### Literals\n\nThe simplest expressions just represent static values:\n\n- [Numbers](../values/numbers), which may or may not have units, like `12` or `100px`.\n- [Strings](../values/strings), which may or may not have quotes, like `\"Helvetica Neue\"` or `bold`.\n- [Colors](../values/colors), which can be referred to by their hex representation or by name, like `#c6538c` or `blue`.\n- The [boolean](../values/booleans) literals `true` or `false`.\n- The singleton [`null`](../values/null).\n- [Lists of values](../values/lists), which may be separated by spaces or commas and which may be enclosed in square brackets or no brackets at all, like `1.5em 1em 0 2em`, `Helvetica, Arial, sans-serif`, or `[col1-start]`.\n- [Maps](../values/maps) that associate values with keys, like `(\"background\": red, \"foreground\": pink)`.\n\n### Operations\n\nSass defines syntax for a number of operations:\n\n- [`==` and `!=`](../operators/equality) are used to check if two values are the same.\n- [`+`, `-`, `*`, `/`, and `%`](../operators/numeric) have their usual mathematical meaning for numbers, with special behaviors for units that matches the use of units in scientific math.\n- [`<`, `<=`, `>`, and `>=`](../operators/relational) check whether two numbers are greater or less than one another.\n- [`and`, `or`, and `not`](../operators/boolean) have the usual boolean behavior. Sass considers every value “true” except for `false` and `null`.\n- [`+`, `-`, and `/`](../operators/string) can be used to concatenate strings.\n- [`(` and `)`](../operators#parentheses) can be used to explicitly control the precedence order of operations.\n\n### Other Expressions\n\n- [Variables](../variables), like `$var`.\n- [Function calls](../at-rules/function), like `nth($list, 1)` or `var(--main-bg-color)`, which may call Sass core library functions or user-defined functions, or which may be compiled directly to CSS.\n- [Special functions](special-functions), like `calc(1px + 100%)` or `url(http://myapp.com/assets/logo.png)`, that have their own unique parsing rules.\n- [The parent selector](../style-rules/parent-selector), `&`.\n- The value `!important`, which is parsed as an unquoted string.\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/syntax/structure](https://sass-lang.com/documentation/syntax/structure)"
- name: Style Rules
  id: style-rules
  summary: Style rules are the foundation of Sass, just like they are for CSS
  description: "# Style Rules\n\n### Page Sections\n\n- [Nesting](#nesting)\n  - [Overview](#nesting)\n  - [Selector Lists](#selector-lists)\n  - [Selector Combinators](#selector-combinators)\n  - [Advanced Nesting](#advanced-nesting)\n- [Interpolation](#interpolation)\n\nStyle rules are the foundation of Sass, just like they are for CSS. And they work the same way: you choose which elements to style with a selector, and [declare properties](style-rules/declarations) that affect how those elements look.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n.button {\n  padding: 3px 10px;\n  font-size: 12px;\n  border-radius: 3px;\n  border: 1px solid #e1e4e8;\n}\n```\n\n``` scss\n.button\n  padding: 3px 10px\n  font-size: 12px\n  border-radius: 3px\n  border: 1px solid #e1e4e8\n```\n\n``` css\n.button {\n  padding: 3px 10px;\n  font-size: 12px;\n  border-radius: 3px;\n  border: 1px solid #e1e4e8;\n}\n```\n\n## Nesting\n\nBut Sass wants to make your life easier. Rather than repeating the same selectors over and over again, you can write one style rules inside another. Sass will automatically combine the outer rule’s selector with the inner rule’s.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\nnav {\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  li { display: inline-block; }\n\n  a {\n    display: block;\n    padding: 6px 12px;\n    text-decoration: none;\n  }\n}\n```\n\n``` scss\nnav\n  ul\n    margin: 0\n    padding: 0\n    list-style: none\n\n  li\n    display: inline-block\n\n  a\n    display: block\n    padding: 6px 12px\n    text-decoration: none\n```\n\n``` css\nnav ul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\nnav li {\n  display: inline-block;\n}\nnav a {\n  display: block;\n  padding: 6px 12px;\n  text-decoration: none;\n}\n```\n\n### ⚠️ Heads up!\n\nNested rules are super helpful, but they can also make it hard to visualize how much CSS you’re actually generating. The deeper you nest, the more bandwidth it takes to serve your CSS and the more work it takes the browser to render it. Keep those selectors shallow!\n\n### Selector Lists\n\nNested rules are clever about handling selector lists (that is, comma-separated selectors). Each complex selector (the ones between the commas) is nested separately, and then they’re combined back into a selector list.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n.alert, .warning {\n  ul, p {\n    margin-right: 0;\n    margin-left: 0;\n    padding-bottom: 0;\n  }\n}\n```\n\n``` scss\n.alert, .warning\n  ul, p\n    margin-right: 0\n    margin-left: 0\n    padding-bottom: 0\n```\n\n``` css\n.alert ul, .alert p, .warning ul, .warning p {\n  margin-right: 0;\n  margin-left: 0;\n  padding-bottom: 0;\n}\n```\n\n### Selector Combinators\n\nYou can nest selectors that use [combinators](#) as well. You can put the combinator at the end of the outer selector, at the beginning of the inner selector, or even all on its own in between the two.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n- [CSS](#example-4-css)\n\n``` scss\nul > {\n  li {\n    list-style-type: none;\n  }\n}\n\nh2 {\n  + p {\n    border-top: 1px solid gray;\n  }\n}\n\np {\n  ~ {\n    span {\n      opacity: 0.8;\n    }\n  }\n}\n```\n\n``` scss\nul >\n  li\n    list-style-type: none\n\n\n\nh2\n  + p\n    border-top: 1px solid gray\n\n\n\np\n  ~\n    span\n      opacity: 0.8\n```\n\n``` css\nul > li {\n  list-style-type: none;\n}\n\nh2 + p {\n  border-top: 1px solid gray;\n}\n\np ~ span {\n  opacity: 0.8;\n}\n```\n\n### Advanced Nesting\n\nIf you want to do more with your nested style rules than just combine them in order with the descendant combinator (that is, a plain space) separating them, Sass has your back. See the [parent selector documentation](style-rules/parent-selector) for more details.\n\n## Interpolation\n\nYou can use [interpolation](interpolation) to inject values from [expressions](syntax/structure#expressions) like variables and function calls into your selectors. This is particularly useful when you’re writing [mixins](at-rules/mixin), since it allows you to create selectors from parameters your users pass in.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n- [CSS](#example-5-css)\n\n``` scss\n@mixin define-emoji($name, $glyph) {\n  span.emoji-#{$name} {\n    font-family: IconFont;\n    font-variant: normal;\n    font-weight: normal;\n    content: $glyph;\n  }\n}\n\n@include define-emoji(\"women-holding-hands\", \"👭\");\n```\n\n``` scss\n@mixin define-emoji($name, $glyph)\n  span.emoji-#{$name}\n    font-family: IconFont\n    font-variant: normal\n    font-weight: normal\n    content: $glyph\n\n\n\n@include define-emoji(\"women-holding-hands\", \"👭\")\n```\n\n``` css\n@charset \"UTF-8\";\nspan.emoji-women-holding-hands {\n  font-family: IconFont;\n  font-variant: normal;\n  font-weight: normal;\n  content: \"👭\";\n}\n```\n\n### 💡 Fun fact:\n\nSass only parses selectors *after* interpolation is resolved. This means you can safely use interpolation to generate any part of the selector without worrying that it won’t parse.\n\nYou can combine interpolation with the parent selector `&`, the [`@at-root` rule](at-rules/at-root), and [selector functions](modules/selector) to wield some serious power when dynamically generating selectors. For more information, see the [parent selector documentation](style-rules/parent-selector).\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/style-rules](https://sass-lang.com/documentation/style-rules)"
- name: Syntax
  id: syntax
  summary: Sass supports two different syntaxes
  description: "# Syntax\n\nSass supports two different syntaxes. Each one can load the other, so it's up to you and your team which one to choose.\n\n## SCSS\n\nThe SCSS syntax uses the file extension `.scss`. With a few small exceptions, it’s a superset of CSS, which means essentially **all valid CSS is valid SCSS as well**. Because of its similarity to CSS, it’s the easiest syntax to get used to and the most popular.\n\nSCSS looks like this:\n\n``` scss\n@mixin button-base() {\n  @include typography(button);\n  @include ripple-surface;\n  @include ripple-radius-bounded;\n\n  display: inline-flex;\n  position: relative;\n  height: $button-height;\n  border: none;\n  vertical-align: middle;\n\n  &:hover { cursor: pointer; }\n\n  &:disabled {\n    color: $mdc-button-disabled-ink-color;\n    cursor: default;\n    pointer-events: none;\n  }\n}\n```\n\n## The Indented Syntax\n\nThe indented syntax was Sass’s original syntax, and so it uses the file extension `.sass`. Because of this extension, it’s sometimes just called “Sass”. The indented syntax supports all the same features as SCSS, but it uses indentation instead of curly braces and semicolons to describe the format of the document.\n\nIn general, any time you’d write curly braces in CSS or SCSS, you can just indent one level deeper in the indented syntax. And any time a line ends, that counts as a semicolon. There are also a few additional differences in the indented syntax that are noted throughout the reference.\n\n### ⚠️ Heads up!\n\nThe indented syntax currently doesn’t support expressions that wrap across multiple lines. See [issue \\#216](https://github.com/sass/sass/issues/216).\n\nThe indented syntax looks like this:\n\n``` scss\n@mixin button-base()\n  @include typography(button)\n  @include ripple-surface\n  @include ripple-radius-bounded\n\n  display: inline-flex\n  position: relative\n  height: $button-height\n  border: none\n  vertical-align: middle\n\n  &:hover\n    cursor: pointer\n\n  &:disabled\n    color: $mdc-button-disabled-ink-color\n    cursor: default\n    pointer-events: none\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/syntax](https://sass-lang.com/documentation/syntax)"
- name: transparentize
  id: modules/color#transparentize
  summary: Makes $color more transparent
  belongs_to: sass:color
  description: |-
    ``` scss
    transparentize($color, $amount)
    fade-out($color, $amount) //=> color
    ```

    Makes `$color` more transparent.

    The `$amount` must be a number between `0` and `1` (inclusive). Decreases the alpha channel of `$color` by that amount.

    ### ⚠️ Heads up!

    The `transparentize()` function decreases the alpha channel by a fixed amount, which is often not the desired effect. To make a color a certain percentage more transparent than it was before, use [`color.scale()`](#scale) instead.

    Because `transparentize()` is usually not the best way to make a color more transparent, it’s not included directly in the new module system. However, if you have to preserve the existing behavior, `transparentize($color, $amount)` can be written [`color.adjust($color, $alpha: -$amount)`](#adjust).

    - [SCSS](#example-29-scss)
    - [Sass](#example-29-sass)

    ``` scss
    // rgba(#036, 0.3) has alpha 0.3, so when transparentize() subtracts 0.3 it
    // returns a fully transparent color.
    @debug transparentize(rgba(#036, 0.3), 0.3); // rgba(0, 51, 102, 0)

    // scale() instead makes it 30% more transparent than it was originally.
    @debug color.scale(rgba(#036, 0.3), $alpha: -30%); // rgba(0, 51, 102, 0.21)
    ```

    ``` scss
    // rgba(#036, 0.3) has alpha 0.3, so when transparentize() subtracts 0.3 it
    // returns a fully transparent color.
    @debug transparentize(rgba(#036, 0.3), 0.3)  // rgba(0, 51, 102, 0)

    // scale() instead makes it 30% more transparent than it was originally.
    @debug color.scale(rgba(#036, 0.3), $alpha: -30%)  // rgba(0, 51, 102, 0.21)
    ```

    - [SCSS](#example-30-scss)
    - [Sass](#example-30-sass)

    ``` scss
    @debug transparentize(rgba(#6b717f, 0.5), 0.2)  // rgba(107, 113, 127, 0.3)
    @debug fade-out(rgba(#e1d7d2, 0.5), 0.4)  // rgba(225, 215, 210, 0.1)
    @debug transparentize(rgba(#036, 0.3), 0.3)  // rgba(0, 51, 102, 0)
    ```

    ``` scss
    @debug transparentize(rgba(#6b717f, 0.5), 0.2)  // rgba(107, 113, 127, 0.3)
    @debug fade-out(rgba(#e1d7d2, 0.5), 0.4)  // rgba(225, 215, 210, 0.1)
    @debug transparentize(rgba(#036, 0.3), 0.3)  // rgba(0, 51, 102, 0)
    ```
- name: Values
  id: values
  summary: Sass supports a number of value types, most of which come straight from CSS
  description: "# Values\n\nSass supports a number of value types, most of which come straight from CSS. Every [expression](syntax/structure#expressions) produces a value, [variables](variables) hold values. Most value types come straight from CSS:\n\n- [Numbers](values/numbers), which may or may not have units, like `12` or `100px`.\n\n- [Strings](values/strings), which may or may not have quotes, like `\"Helvetica Neue\"` or `bold`.\n\n- [Colors](values/colors), which can be referred to by their hex representation or by name, like `#c6538c` or `blue`, or returned from functions, like `rgb(107, 113, 127)` or `hsl(210, 100%, 20%)`.\n\n- [Lists of values](values/lists), which may be separated by spaces or commas and which may be enclosed in square brackets or no brackets at all, like `1.5em 1em 0 2em`, `Helvetica, Arial, sans-serif`, or `[col1-start]`.\n\nA few more are specific to Sass:\n\n- The [boolean](values/booleans) values `true` and `false`.\n\n- The singleton [`null`](values/null) value.\n\n- [Maps](values/maps) that associate values with keys, like `(\"background\": red, \"foreground\": pink)`.\n\n- [Function references](values/functions) returned by [`get-function()`](modules/meta#get-function) and called with [`call()`](modules/meta#call).\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/values](https://sass-lang.com/documentation/values)"
- name: Variables
  id: variables
  summary: 'Sass variables are simple: you assign a value to a name that begins with $, and then you can refer to that name instead of the value itself'
  description: "# Variables\n\n### Page Sections\n\n- [Default Values](#default-values)\n  - [Overview](#default-values)\n  - [Configuring Modules](#configuring-modules)\n- [Built-in Variables](#built-in-variables)\n- [Scope](#scope)\n  - [Overview](#scope)\n  - [Shadowing](#shadowing)\n  - [Flow Control Scope](#flow-control-scope)\n- [Advanced Variable Functions](#advanced-variable-functions)\n\nSass variables are simple: you assign a value to a name that begins with `$`, and then you can refer to that name instead of the value itself. But despite their simplicity, they're one of the most useful tools Sass brings to the table. Variables make it possible to reduce repetition, do complex math, configure libraries, and much more.\n\nA variable declaration looks a lot like a [property declaration](style-rules/declarations): it’s written `<variable>: <expression>`. Unlike a property, which can only be declared in a style rule or at-rule, variables can be declared anywhere you want. To use a variable, just include it in a value.\n\n- [SCSS](#example-1-scss)\n- [Sass](#example-1-sass)\n- [CSS](#example-1-css)\n\n``` scss\n$base-color: #c6538c;\n$border-dark: rgba($base-color, 0.88);\n\n.alert {\n  border: 1px solid $border-dark;\n}\n```\n\n``` scss\n$base-color: #c6538c\n$border-dark: rgba($base-color, 0.88)\n\n.alert\n  border: 1px solid $border-dark\n```\n\n``` css\n.alert {\n  border: 1px solid rgba(198, 83, 140, 0.88);\n}\n```\n\n### ⚠️ Heads up!\n\nCSS has [variables of its own](style-rules/declarations#custom-properties), which are totally different than Sass variables. Know the differences!\n\n- Sass variables are all compiled away by Sass. CSS variables are included in the CSS output.\n\n- CSS variables can have different values for different elements, but Sass variables only have one value at a time.\n\n- Sass variables are *imperative*, which means if you use a variable and then change its value, the earlier use will stay the same. CSS variables are *declarative*, which means if you change the value, it’ll affect both earlier uses and later uses.\n\n- [SCSS](#example-2-scss)\n- [Sass](#example-2-sass)\n- [CSS](#example-2-css)\n\n``` scss\n$variable: value 1;\n.rule-1 {\n  value: $variable;\n}\n\n$variable: value 2;\n.rule-2 {\n  value: $variable;\n}\n```\n\n``` scss\n$variable: value 1\n.rule-1\n  value: $variable\n\n\n$variable: value 2\n.rule-2\n  value: $variable\n```\n\n``` css\n.rule-1 {\n  value: value 1;\n}\n\n.rule-2 {\n  value: value 2;\n}\n```\n\n### 💡 Fun fact:\n\nSass variables, like all Sass identifiers, treat hyphens and underscores as identical. This means that `$font-size` and `$font_size` both refer to the same variable. This is a historical holdover from the very early days of Sass, when it *only* allowed underscores in identifier names. Once Sass added support for hyphens to match CSS’s syntax, the two were made equivalent to make migration easier.\n\n## Default Values\n\nNormally when you assign a value to a variable, if that variable already had a value, its old value is overwritten. But if you’re writing a Sass library, you might want to allow your users to configure your library’s variables before you use them to generate CSS.\n\nTo make this possible, Sass provides the `!default` flag. This assigns a value to a variable *only if* that variable isn’t defined or its value is [`null`](values/null). Otherwise, the existing value will be used.\n\n### Configuring Modules\n\nCompatibility:\n\nDart Sass  \nsince 1.23.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOnly Dart Sass currently supports `@use`. Users of other implementations must use the [`@import` rule](at-rules/import) instead.\n\nVariables defined with `!default` can be configured when loading a module with the [`@use` rule](at-rules/use). Sass libraries often use `!default` variables to allow their users to configure the library’s CSS.\n\nTo load a module with configuration, write `@use <url> with (<variable>: <value>, <variable>: <value>)`. The configured values will override the variables’ default values. Only variables written at the top level of the stylesheet with a `!default` flag can be configured.\n\n- [SCSS](#example-3-scss)\n- [Sass](#example-3-sass)\n- [CSS](#example-3-css)\n\n``` scss\n// _library.scss\n$black: #000 !default;\n$border-radius: 0.25rem !default;\n$box-shadow: 0 0.5rem 1rem rgba($black, 0.15) !default;\n\ncode {\n  border-radius: $border-radius;\n  box-shadow: $box-shadow;\n}\n```\n\n``` scss\n// style.scss\n@use 'library' with (\n  $black: #222,\n  $border-radius: 0.1rem\n);\n```\n\n``` scss\n// _library.sass\n$black: #000 !default\n$border-radius: 0.25rem !default\n$box-shadow: 0 0.5rem 1rem rgba($black, 0.15) !default\n\ncode\n  border-radius: $border-radius\n  box-shadow: $box-shadow\n```\n\n``` scss\n// style.sass\n@use 'library' with ($black: #222, $border-radius: 0.1rem)\n```\n\n``` css\ncode {\n  border-radius: 0.1rem;\n  box-shadow: 0 0.5rem 1rem rgba(34, 34, 34, 0.15);\n}\n```\n\n## Built-in Variables\n\nVariables that are defined by a [built-in module](modules) cannot be modified.\n\n- [SCSS](#example-4-scss)\n- [Sass](#example-4-sass)\n\n``` scss\n@use \"sass:math\" as math;\n\n// This assignment will fail.\nmath.$pi: 0;\n```\n\n``` scss\n@use \"sass:math\" as math\n\n// This assignment will fail.\nmath.$pi: 0\n```\n\n## Scope\n\nVariables declared at the top level of a stylesheet are *global*. This means that they can be accessed anywhere in their module after they’ve been declared. But that’s not true for all variables. Those declared in blocks (curly braces in SCSS or indented code in Sass) are usually *local*, and can only be accessed within the block they were declared.\n\n- [SCSS](#example-5-scss)\n- [Sass](#example-5-sass)\n- [CSS](#example-5-css)\n\n``` scss\n$global-variable: global value;\n\n.content {\n  $local-variable: local value;\n  global: $global-variable;\n  local: $local-variable;\n}\n\n.sidebar {\n  global: $global-variable;\n\n  // This would fail, because $local-variable isn't in scope:\n  // local: $local-variable;\n}\n```\n\n``` scss\n$global-variable: global value\n\n.content\n  $local-variable: local value\n  global: $global-variable\n  local: $local-variable\n\n\n.sidebar\n  global: $global-variable\n\n  // This would fail, because $local-variable isn't in scope:\n  // local: $local-variable\n```\n\n``` css\n.content {\n  global: global value;\n  local: local value;\n}\n\n.sidebar {\n  global: global value;\n}\n```\n\n### Shadowing\n\nLocal variables can even be declared with the same name as a global variable. If this happens, there are actually two different variables with the same name: one local and one global. This helps ensure that an author writing a local variable doesn’t accidentally change the value of a global variable they aren’t even aware of.\n\n- [SCSS](#example-6-scss)\n- [Sass](#example-6-sass)\n- [CSS](#example-6-css)\n\n``` scss\n$variable: global value;\n\n.content {\n  $variable: local value;\n  value: $variable;\n}\n\n.sidebar {\n  value: $variable;\n}\n```\n\n``` scss\n$variable: global value\n\n.content\n  $variable: local value\n  value: $variable\n\n\n.sidebar\n  value: $variable\n```\n\n``` css\n.content {\n  value: local value;\n}\n\n.sidebar {\n  value: global value;\n}\n```\n\nIf you need to set a global variable’s value from within a local scope (such as in a mixin), you can use the `!global` flag. A variable declaration flagged as `!global` will *always* assign to the global scope.\n\n- [SCSS](#example-7-scss)\n- [Sass](#example-7-sass)\n- [CSS](#example-7-css)\n\n``` scss\n$variable: first global value;\n\n.content {\n  $variable: second global value !global;\n  value: $variable;\n}\n\n.sidebar {\n  value: $variable;\n}\n```\n\n``` scss\n$variable: first global value\n\n.content\n  $variable: second global value !global\n  value: $variable\n\n\n.sidebar\n  value: $variable\n```\n\n``` css\n.content {\n  value: second global value;\n}\n\n.sidebar {\n  value: second global value;\n}\n```\n\n### ⚠️ Heads up!\n\nCompatibility:\n\nDart Sass  \nsince 2.0.0\n\nLibSass  \n✗\n\nRuby Sass  \n✗\n\n[▶](javascript:;)\n\nOlder Sass versions allowed `!global` to be used for a variable that doesn’t exist yet. This behavior was deprecated to make sure each stylesheet declares the same variables no matter how it’s executed.\n\nThe `!global` flag may only be used to set a variable that has already been declared at the top level of a file. It *may not* be used to declare a new variable.\n\n### Flow Control Scope\n\nVariables declared in [flow control rules](at-rules/control) have special scoping rules: they don’t shadow variables at the same level as the flow control rule. Instead, they just assign to those variables. This makes it much easier to conditionally assign a value to a variable, or build up a value as part of a loop.\n\n- [SCSS](#example-8-scss)\n- [Sass](#example-8-sass)\n- [CSS](#example-8-css)\n\n``` scss\n$dark-theme: true !default;\n$primary-color: #f8bbd0 !default;\n$accent-color: #6a1b9a !default;\n\n@if $dark-theme {\n  $primary-color: darken($primary-color, 60%);\n  $accent-color: lighten($accent-color, 60%);\n}\n\n.button {\n  background-color: $primary-color;\n  border: 1px solid $accent-color;\n  border-radius: 3px;\n}\n```\n\n``` scss\n$dark-theme: true !default\n$primary-color: #f8bbd0 !default\n$accent-color: #6a1b9a !default\n\n@if $dark-theme\n  $primary-color: darken($primary-color, 60%)\n  $accent-color: lighten($accent-color, 60%)\n\n\n.button\n  background-color: $primary-color\n  border: 1px solid $accent-color\n  border-radius: 3px\n```\n\n``` css\n.button {\n  background-color: #750c30;\n  border: 1px solid #f5ebfc;\n  border-radius: 3px;\n}\n```\n\n### ⚠️ Heads up!\n\nVariables in flow control scope can assign to existing variables in the outer scope, but they can’t declare new variables there. Make sure the variable is already declared before you assign to it, even if you need to declare it as `null`.\n\n## Advanced Variable Functions\n\nThe Sass core library provides a couple advanced functions for working with variables. The [`meta.variable-exists()` function](modules/meta#variable-exists) returns whether a variable with the given name exists in the current scope, and the [`meta.global-variable-exists()` function](modules/meta#global-variable-exists) does the same but only for the global scope.\n\n### ⚠️ Heads up!\n\nUsers occasionally want to use interpolation to define a variable name based on another variable. Sass doesn’t allow this, because it makes it much harder to tell at a glance which variables are defined where. What you *can* do, though, is define a [map](values/maps) from names to values that you can then access using variables.\n\n- [SCSS](#example-9-scss)\n- [Sass](#example-9-sass)\n- [CSS](#example-9-css)\n\n``` scss\n@use \"sass:map\";\n\n$theme-colors: (\n  \"success\": #28a745,\n  \"info\": #17a2b8,\n  \"warning\": #ffc107,\n);\n\n.alert {\n  // Instead of $theme-color-#{warning}\n  background-color: map.get($theme-colors, \"warning\");\n}\n```\n\n``` scss\n@use \"sass:map\"\n\n$theme-colors: (\"success\": #28a745, \"info\": #17a2b8, \"warning\": #ffc107)\n\n.alert\n  // Instead of $theme-color-#{warning}\n  background-color: map.get($theme-colors, \"warning\")\n```\n\n``` css\n.alert {\n  background-color: #ffc107;\n}\n```\n\n© 2006–2022 the Sass team, and numerous contributors  \nLicensed under the MIT License.  \n[https://sass-lang.com/documentation/variables](https://sass-lang.com/documentation/variables)"
