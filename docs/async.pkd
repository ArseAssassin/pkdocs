---
name: Async
slug: async
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2010–2018 Caolan McMahon
  Licensed under the MIT License.
  https://caolan.github.io/async/v3/docs.html
homepage: https://caolan.github.io/async/

---
- name: apply
  id: index#apply
  summary: Creates a continuation function with some arguments already applied
  description: |-
    ### (static) apply(fn) → {function}

    ``` javascript
    import apply from 'async/apply';
    ```

    Creates a continuation function with some arguments already applied.

    Useful as a shorthand when combined with other control flow functions. Any arguments passed to the returned function are added to the arguments originally passed to apply.

    #### Parameters:

    | Name           | Type     | Description                                                                              |
    |----------------|----------|------------------------------------------------------------------------------------------|
    | `fn`           | function | The function you want to eventually apply all arguments to. Invokes with (arguments...). |
    | `arguments...` | \*       | Any number of arguments to automatically apply when the continuation is called.          |

    #### Returns:

    the partially-applied function

    Type

    function

    #### Example

    ``` javascript
    // using apply
    async.parallel([
        async.apply(fs.writeFile, 'testfile1', 'test1'),
        async.apply(fs.writeFile, 'testfile2', 'test2')
    ]);


    // the same process without using apply
    async.parallel([
        function(callback) {
            fs.writeFile('testfile1', 'test1', callback);
        },
        function(callback) {
            fs.writeFile('testfile2', 'test2', callback);
        }
    ]);

    // It's possible to pass any number of additional arguments when calling the
    // continuation:

    node> var fn = async.apply(sys.puts, 'one');
    node> fn('two', 'three');
    one
    two
    three
    ```

    Source:

    [apply.js](https://caolan.github.io/async/v3/apply.js.html), [line 1](https://caolan.github.io/async/v3/apply.js.html#line1)
- name: applyEach
  id: index#applyEach
  summary: Applies the provided arguments to each function in the array, calling callback after all functions have completed
  description: |-
    ### (static) applyEach(fns, …argsopt, callbackopt) → {[AsyncFunction](https://caolan.github.io/async/v3/global.html)}

    ``` javascript
    import applyEach from 'async/applyEach';
    ```

    Applies the provided arguments to each function in the array, calling `callback` after all functions have completed. If you only provide the first argument, `fns`, then it will return a function which lets you pass in the arguments as if it were a single function call. If more arguments are provided, `callback` is required while `args` is still optional. The results for each of the applied async functions are passed to the final callback as an array.

    #### Parameters:

    | Name       | Type                                         | Description                                                                                                         |
    |------------|----------------------------------------------|---------------------------------------------------------------------------------------------------------------------|
    | `fns`      | Array \| Iterable \| AsyncIterable \| Object | A collection of [AsyncFunction](https://caolan.github.io/async/v3/global.html)s to all call with the same arguments |
    | `args`     | \* \<optional\>                              | any number of separate arguments to pass to the function.                                                           |
    | `callback` | function \<optional\>                        | the final argument should be the callback, called when all functions have completed processing.                     |

    #### Returns:

    - Returns a function that takes no args other than an optional callback, that is the result of applying the `args` to each of the functions.

    Type

    [AsyncFunction](https://caolan.github.io/async/v3/global.html)

    #### Example

    ``` javascript
    const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')

    appliedFn((err, results) => {
        // results[0] is the results for `enableSearch`
        // results[1] is the results for `updateSchema`
    });

    // partial application example:
    async.each(
        buckets,
        async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),
        callback
    );
    ```

    Source:

    [applyEach.js](https://caolan.github.io/async/v3/applyEach.js.html), [line 4](https://caolan.github.io/async/v3/applyEach.js.html#line4)
- name: applyEachSeries
  id: index#applyEachSeries
  summary: The same as applyEach but runs only a single async operation at a time
  description: |-
    ### (static) applyEachSeries(fns, …argsopt, callbackopt) → {[AsyncFunction](https://caolan.github.io/async/v3/global.html)}

    ``` javascript
    import applyEachSeries from 'async/applyEachSeries';
    ```

    The same as [`applyEach`](#applyEach) but runs only a single async operation at a time.

    #### Parameters:

    | Name       | Type                                         | Description                                                                                                         |
    |------------|----------------------------------------------|---------------------------------------------------------------------------------------------------------------------|
    | `fns`      | Array \| Iterable \| AsyncIterable \| Object | A collection of [AsyncFunction](https://caolan.github.io/async/v3/global.html)s to all call with the same arguments |
    | `args`     | \* \<optional\>                              | any number of separate arguments to pass to the function.                                                           |
    | `callback` | function \<optional\>                        | the final argument should be the callback, called when all functions have completed processing.                     |

    #### Returns:

    - A function, that when called, is the result of appling the `args` to the list of functions. It takes no args, other than a callback.

    Type

    [AsyncFunction](https://caolan.github.io/async/v3/global.html)

    Source:

    [applyEachSeries.js](https://caolan.github.io/async/v3/applyEachSeries.js.html), [line 4](https://caolan.github.io/async/v3/applyEachSeries.js.html#line4)

    See:

    [async.applyEach](#applyEach)
- name: asyncify
  id: index#asyncify
  summary: Take a sync function and make it async, passing its return value to a callback
  description: |-
    ### (static) asyncify(func) → {[AsyncFunction](https://caolan.github.io/async/v3/global.html)}

    ``` javascript
    import asyncify from 'async/asyncify';
    ```

    Take a sync function and make it async, passing its return value to a callback. This is useful for plugging sync functions into a waterfall, series, or other async functions. Any arguments passed to the generated function will be passed to the wrapped function (except for the final callback argument). Errors thrown will be passed to the callback.

    If the function passed to `asyncify` returns a Promise, that promises's resolved/rejected state will be used to call the callback, rather than simply the synchronous return value.

    This also means you can asyncify ES2017 `async` functions.

    Alias:

    wrapSync

    #### Parameters:

    | Name   | Type     | Description                                                                                                                              |
    |--------|----------|------------------------------------------------------------------------------------------------------------------------------------------|
    | `func` | function | The synchronous function, or Promise-returning function to convert to an [AsyncFunction](https://caolan.github.io/async/v3/global.html). |

    #### Returns:

    An asynchronous wrapper of the `func`. To be invoked with `(args..., callback)`.

    Type

    [AsyncFunction](https://caolan.github.io/async/v3/global.html)

    #### Example

    ``` javascript
    // passing a regular synchronous function
    async.waterfall([
        async.apply(fs.readFile, filename, "utf8"),
        async.asyncify(JSON.parse),
        function (data, next) {
            // data is the result of parsing the text.
            // If there was a parsing error, it would have been caught.
        }
    ], callback);

    // passing a function returning a promise
    async.waterfall([
        async.apply(fs.readFile, filename, "utf8"),
        async.asyncify(function (contents) {
            return db.model.create(contents);
        }),
        function (model, next) {
            // `model` is the instantiated model object.
            // If there was an error, this function would be skipped.
        }
    ], callback);

    // es2017 example, though `asyncify` is not needed if your JS environment
    // supports async functions out of the box
    var q = async.queue(async.asyncify(async function(file) {
        var intermediateStep = await processFile(file);
        return await somePromise(intermediateStep)
    }));

    q.push(files);
    ```

    Source:

    [asyncify.js](https://caolan.github.io/async/v3/asyncify.js.html), [line 5](https://caolan.github.io/async/v3/asyncify.js.html#line5)
- name: auto
  id: index#auto
  summary: Determines the best order for running the AsyncFunctions in tasks, based on their requirements
  description: |-
    ### (static) auto(tasks, concurrencyopt, callbackopt) → {Promise}

    ``` javascript
    import auto from 'async/auto';
    ```

    Determines the best order for running the [AsyncFunction](https://caolan.github.io/async/v3/global.html)s in `tasks`, based on their requirements. Each function can optionally depend on other functions being completed first, and each function is run as soon as its requirements are satisfied.

    If any of the [AsyncFunction](https://caolan.github.io/async/v3/global.html)s pass an error to their callback, the `auto` sequence will stop. Further tasks will not execute (so any other functions depending on it will not run), and the main `callback` is immediately called with the error.

    [AsyncFunction](https://caolan.github.io/async/v3/global.html)s also receive an object containing the results of functions which have completed so far as the first argument, if they have dependencies. If a task function has no dependencies, it will only be passed a callback.

    #### Parameters:

    [TABLE]

    #### Returns:

    a promise, if a callback is not passed

    Type

    Promise

    #### Example

    ``` javascript
    async.auto({
        // this function will just be passed a callback
        readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),
        showData: ['readData', function(results, cb) {
            // results.readData is the file's contents
            // ...
        }]
    }, callback);

    async.auto({
        get_data: function(callback) {
            console.log('in get_data');
            // async code to get some data
            callback(null, 'data', 'converted to array');
        },
        make_folder: function(callback) {
            console.log('in make_folder');
            // async code to create a directory to store a file in
            // this is run at the same time as getting the data
            callback(null, 'folder');
        },
        write_file: ['get_data', 'make_folder', function(results, callback) {
            console.log('in write_file', JSON.stringify(results));
            // once there is some data and the directory exists,
            // write the data to a file in the directory
            callback(null, 'filename');
        }],
        email_link: ['write_file', function(results, callback) {
            console.log('in email_link', JSON.stringify(results));
            // once the file is written let's email a link to it...
            // results.write_file contains the filename returned by write_file.
            callback(null, {'file':results.write_file, 'email':'user@example.com'});
        }]
    }, function(err, results) {
        console.log('err = ', err);
        console.log('results = ', results);
    });
    ```

    Source:

    [auto.js](https://caolan.github.io/async/v3/auto.js.html), [line 6](https://caolan.github.io/async/v3/auto.js.html#line6)
- name: autoInject
  id: index#autoInject
  summary: A dependency-injected version of the async.auto function
  description: |-
    ### (static) autoInject(tasks, callbackopt) → {Promise}

    ``` javascript
    import autoInject from 'async/autoInject';
    ```

    A dependency-injected version of the [async.auto](#auto) function. Dependent tasks are specified as parameters to the function, after the usual callback parameter, with the parameter names matching the names of the tasks it depends on. This can provide even more readable task graphs which can be easier to maintain.

    If a final callback is specified, the task results are similarly injected, specified as named parameters after the initial error parameter.

    The autoInject function is purely syntactic sugar and its semantics are otherwise equivalent to [async.auto](#auto).

    #### Parameters:

    [TABLE]

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    #### Example

    ``` javascript
    //  The example from `auto` can be rewritten as follows:
    async.autoInject({
        get_data: function(callback) {
            // async code to get some data
            callback(null, 'data', 'converted to array');
        },
        make_folder: function(callback) {
            // async code to create a directory to store a file in
            // this is run at the same time as getting the data
            callback(null, 'folder');
        },
        write_file: function(get_data, make_folder, callback) {
            // once there is some data and the directory exists,
            // write the data to a file in the directory
            callback(null, 'filename');
        },
        email_link: function(write_file, callback) {
            // once the file is written let's email a link to it...
            // write_file contains the filename returned by write_file.
            callback(null, {'file':write_file, 'email':'user@example.com'});
        }
    }, function(err, results) {
        console.log('err = ', err);
        console.log('email_link = ', results.email_link);
    });

    // If you are using a JS minifier that mangles parameter names, `autoInject`
    // will not work with plain functions, since the parameter names will be
    // collapsed to a single letter identifier.  To work around this, you can
    // explicitly specify the names of the parameters your task function needs
    // in an array, similar to Angular.js dependency injection.

    // This still has an advantage over plain `auto`, since the results a task
    // depends on are still spread into arguments.
    async.autoInject({
        //...
        write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {
            callback(null, 'filename');
        }],
        email_link: ['write_file', function(write_file, callback) {
            callback(null, {'file':write_file, 'email':'user@example.com'});
        }]
        //...
    }, function(err, results) {
        console.log('err = ', err);
        console.log('email_link = ', results.email_link);
    });
    ```

    Source:

    [autoInject.js](https://caolan.github.io/async/v3/autoInject.js.html), [line 25](https://caolan.github.io/async/v3/autoInject.js.html#line25)

    See:

    [async.auto](#auto)
- name: cargo
  id: index#cargo
  summary: Creates a cargo object with the specified payload
  description: |-
    ### (static) cargo(worker, payloadopt) → {[QueueObject](#QueueObject)}

    ``` javascript
    import cargo from 'async/cargo';
    ```

    Creates a `cargo` object with the specified payload. Tasks added to the cargo will be processed altogether (up to the `payload` limit). If the `worker` is in progress, the task is queued until it becomes available. Once the `worker` has completed some tasks, each callback of those tasks is called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966) for how `cargo` and `queue` work.

    While [`queue`](#queue) passes only one task to one of a group of workers at a time, cargo passes an array of tasks to a single worker, repeating when the worker is finished.

    #### Parameters:

    | Name      | Type                                                             | Default  | Description                                                                                                               |
    |-----------|------------------------------------------------------------------|----------|---------------------------------------------------------------------------------------------------------------------------|
    | `worker`  |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  |          | An asynchronous function for processing an array of queued tasks. Invoked with `(tasks, callback)`.                       |
    | `payload` | number \<optional\>                                              | Infinity | An optional `integer` for determining how many tasks should be processed per round; if omitted, the default is unlimited. |

    #### Returns:

    A cargo object to manage the tasks. Callbacks can attached as certain properties to listen for specific events during the lifecycle of the cargo and inner queue.

    Type

    [QueueObject](#QueueObject)

    #### Example

    ``` javascript
    // create a cargo object with payload 2
    var cargo = async.cargo(function(tasks, callback) {
        for (var i=0; i<tasks.length; i++) {
            console.log('hello ' + tasks[i].name);
        }
        callback();
    }, 2);

    // add some items
    cargo.push({name: 'foo'}, function(err) {
        console.log('finished processing foo');
    });
    cargo.push({name: 'bar'}, function(err) {
        console.log('finished processing bar');
    });
    await cargo.push({name: 'baz'});
    console.log('finished processing baz');
    ```

    Source:

    [cargo.js](https://caolan.github.io/async/v3/cargo.js.html), [line 3](https://caolan.github.io/async/v3/cargo.js.html#line3)

    See:

    [async.queue](#queue)
- name: cargoQueue
  id: index#cargoQueue
  summary: Creates a cargoQueue object with the specified payload
  description: |-
    ### (static) cargoQueue(worker, concurrencyopt, payloadopt) → {[QueueObject](#QueueObject)}

    ``` javascript
    import cargoQueue from 'async/cargoQueue';
    ```

    Creates a `cargoQueue` object with the specified payload. Tasks added to the cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers. If the all `workers` are in progress, the task is queued until one becomes available. Once a `worker` has completed some tasks, each callback of those tasks is called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966) for how `cargo` and `queue` work.

    While [`queue`](#queue) passes only one task to one of a group of workers at a time, and [`cargo`](#cargo) passes an array of tasks to a single worker, the cargoQueue passes an array of tasks to multiple parallel workers.

    #### Parameters:

    | Name          | Type                                                             | Default  | Description                                                                                                                                                                     |
    |---------------|------------------------------------------------------------------|----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `worker`      |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  |          | An asynchronous function for processing an array of queued tasks. Invoked with `(tasks, callback)`.                                                                             |
    | `concurrency` | number \<optional\>                                              | 1        | An `integer` for determining how many `worker` functions should be run in parallel. If omitted, the concurrency defaults to `1`. If the concurrency is `0`, an error is thrown. |
    | `payload`     | number \<optional\>                                              | Infinity | An optional `integer` for determining how many tasks should be processed per round; if omitted, the default is unlimited.                                                       |

    #### Returns:

    A cargoQueue object to manage the tasks. Callbacks can attached as certain properties to listen for specific events during the lifecycle of the cargoQueue and inner queue.

    Type

    [QueueObject](#QueueObject)

    #### Example

    ``` javascript
    // create a cargoQueue object with payload 2 and concurrency 2
    var cargoQueue = async.cargoQueue(function(tasks, callback) {
        for (var i=0; i<tasks.length; i++) {
            console.log('hello ' + tasks[i].name);
        }
        callback();
    }, 2, 2);

    // add some items
    cargoQueue.push({name: 'foo'}, function(err) {
        console.log('finished processing foo');
    });
    cargoQueue.push({name: 'bar'}, function(err) {
        console.log('finished processing bar');
    });
    cargoQueue.push({name: 'baz'}, function(err) {
        console.log('finished processing baz');
    });
    cargoQueue.push({name: 'boo'}, function(err) {
        console.log('finished processing boo');
    });
    ```

    Source:

    [cargoQueue.js](https://caolan.github.io/async/v3/cargoQueue.js.html), [line 3](https://caolan.github.io/async/v3/cargoQueue.js.html#line3)

    See:

    [async.queue](#queue)

    async.cargo
- name: compose
  id: index#compose
  summary: Creates a function which is a composition of the passed asynchronous functions
  description: |-
    ### (static) compose(…functions) → {function}

    ``` javascript
    import compose from 'async/compose';
    ```

    Creates a function which is a composition of the passed asynchronous functions. Each function consumes the return value of the function that follows. Composing functions `f()`, `g()`, and `h()` would produce the result of `f(g(h()))`, only this version uses callbacks to obtain the return values.

    If the last argument to the composed function is not a function, a promise is returned when you call it.

    Each function is executed with the `this` binding of the composed function.

    #### Parameters:

    | Name        | Type                                                             | Description                           |
    |-------------|------------------------------------------------------------------|---------------------------------------|
    | `functions` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | the asynchronous functions to compose |

    #### Returns:

    an asynchronous function that is the composed asynchronous `functions`

    Type

    function

    #### Example

    ``` javascript
    function add1(n, callback) {
        setTimeout(function () {
            callback(null, n + 1);
        }, 10);
    }

    function mul3(n, callback) {
        setTimeout(function () {
            callback(null, n * 3);
        }, 10);
    }

    var add1mul3 = async.compose(mul3, add1);
    add1mul3(4, function (err, result) {
        // result now equals 15
    });
    ```

    Source:

    [compose.js](https://caolan.github.io/async/v3/compose.js.html), [line 3](https://caolan.github.io/async/v3/compose.js.html#line3)
- name: concat
  id: index#concat
  summary: Applies iteratee to each item in coll, concatenating the results
  description: |-
    ### (static) concat(coll, iteratee, callbackopt)

    ``` javascript
    import concat from 'async/concat';
    ```

    Applies `iteratee` to each item in `coll`, concatenating the results. Returns the concatenated list. The `iteratee`s are called in parallel, and the results are concatenated as they return. The results array will be returned in the original order of `coll` passed to the `iteratee` function.

    Alias:

    flatMap

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                       |
    |------------|------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                                     |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A function to apply to each item in `coll`, which should use an array as its result. Invoked with (item, callback).                                                                                               |
    | `callback` | function \<optional\>                                            | A callback which is called after all the `iteratee` functions have finished, or an error occurs. Results is an array containing the concatenated results of the `iteratee` function. Invoked with (err, results). |

    #### Returns:

    A Promise, if no callback is passed

    #### Example

    ``` javascript
    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {
        // files is now a list of filenames that exist in the 3 directories
    });
    ```

    Source:

    [concat.js](https://caolan.github.io/async/v3/concat.js.html), [line 4](https://caolan.github.io/async/v3/concat.js.html#line4)
- name: concatLimit
  id: index#concatLimit
  summary: The same as concat but runs a maximum of limit async operations at a time
  description: |-
    ### (static) concatLimit(coll, limit, iteratee, callbackopt)

    ``` javascript
    import concatLimit from 'async/concatLimit';
    ```

    The same as [`concat`](#concat) but runs a maximum of `limit` async operations at a time.

    Alias:

    flatMapLimit

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                       |
    |------------|------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                                     |
    | `limit`    | number                                                           | The maximum number of async operations at a time.                                                                                                                                                                 |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A function to apply to each item in `coll`, which should use an array as its result. Invoked with (item, callback).                                                                                               |
    | `callback` | function \<optional\>                                            | A callback which is called after all the `iteratee` functions have finished, or an error occurs. Results is an array containing the concatenated results of the `iteratee` function. Invoked with (err, results). |

    #### Returns:

    A Promise, if no callback is passed

    Source:

    [concatLimit.js](https://caolan.github.io/async/v3/concatLimit.js.html), [line 5](https://caolan.github.io/async/v3/concatLimit.js.html#line5)

    See:

    [async.concat](#concat)
- name: concatSeries
  id: index#concatSeries
  summary: The same as concat but runs only a single async operation at a time
  description: |-
    ### (static) concatSeries(coll, iteratee, callbackopt)

    ``` javascript
    import concatSeries from 'async/concatSeries';
    ```

    The same as [`concat`](#concat) but runs only a single async operation at a time.

    Alias:

    flatMapSeries

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                       |
    |------------|------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                                     |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A function to apply to each item in `coll`. The iteratee should complete with an array an array of results. Invoked with (item, callback).                                                                        |
    | `callback` | function \<optional\>                                            | A callback which is called after all the `iteratee` functions have finished, or an error occurs. Results is an array containing the concatenated results of the `iteratee` function. Invoked with (err, results). |

    #### Returns:

    A Promise, if no callback is passed

    Source:

    [concatSeries.js](https://caolan.github.io/async/v3/concatSeries.js.html), [line 4](https://caolan.github.io/async/v3/concatSeries.js.html#line4)

    See:

    [async.concat](#concat)
- name: constant
  id: index#constant
  summary: Returns a function that when called, calls-back with the values provided
  description: |-
    ### (static) constant() → {[AsyncFunction](https://caolan.github.io/async/v3/global.html)}

    ``` javascript
    import constant from 'async/constant';
    ```

    Returns a function that when called, calls-back with the values provided. Useful as the first function in a [`waterfall`](#waterfall), or for plugging values in to [`auto`](#auto).

    #### Parameters:

    | Name           | Type | Description                                                    |
    |----------------|------|----------------------------------------------------------------|
    | `arguments...` | \*   | Any number of arguments to automatically invoke callback with. |

    #### Returns:

    Returns a function that when invoked, automatically invokes the callback with the previous given arguments.

    Type

    [AsyncFunction](https://caolan.github.io/async/v3/global.html)

    #### Example

    ``` javascript
    async.waterfall([
        async.constant(42),
        function (value, next) {
            // value === 42
        },
        //...
    ], callback);

    async.waterfall([
        async.constant(filename, "utf8"),
        fs.readFile,
        function (fileData, next) {
            //...
        }
        //...
    ], callback);

    async.auto({
        hostname: async.constant("https://server.net/"),
        port: findFreePort,
        launchServer: ["hostname", "port", function (options, cb) {
            startServer(options, cb);
        }],
        //...
    }, callback);
    ```

    Source:

    [constant.js](https://caolan.github.io/async/v3/constant.js.html), [line 1](https://caolan.github.io/async/v3/constant.js.html#line1)
- name: detect
  id: index#detect
  summary: Returns the first value in coll that passes an async truth test
  description: |-
    ### (static) detect(coll, iteratee, callbackopt)

    ``` javascript
    import detect from 'async/detect';
    ```

    Returns the first value in `coll` that passes an async truth test. The `iteratee` is applied in parallel, meaning the first iteratee to return `true` will fire the detect `callback` with that result. That means the result might not be the first item in the original `coll` (in terms of order) that passes the test. If order within the original `coll` is important, then look at [`detectSeries`](#detectSeries).

    Alias:

    find

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                                                                   |
    |------------|------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                                                                                                 |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A truth test to apply to each item in `coll`. The iteratee must complete with a boolean value as its result. Invoked with (item, callback).                                                                                                                                   |
    | `callback` | function \<optional\>                                            | A callback which is called as soon as any iteratee returns `true`, or after all the `iteratee` functions have finished. Result will be the first item in the array that passes the truth test (iteratee) or the value `undefined` if none passed. Invoked with (err, result). |

    #### Returns:

    A Promise, if no callback is passed

    #### Example

    ``` javascript
    async.detect(['file1','file2','file3'], function(filePath, callback) {
        fs.access(filePath, function(err) {
            callback(null, !err)
        });
    }, function(err, result) {
        // result now equals the first file in the list that exists
    });
    ```

    Source:

    [detect.js](https://caolan.github.io/async/v3/detect.js.html), [line 5](https://caolan.github.io/async/v3/detect.js.html#line5)
- name: detectLimit
  id: index#detectLimit
  summary: The same as detect but runs a maximum of limit async operations at a time
  description: |-
    ### (static) detectLimit(coll, limit, iteratee, callbackopt)

    ``` javascript
    import detectLimit from 'async/detectLimit';
    ```

    The same as [`detect`](#detect) but runs a maximum of `limit` async operations at a time.

    Alias:

    findLimit

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                                                                   |
    |------------|------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                                                                                                 |
    | `limit`    | number                                                           | The maximum number of async operations at a time.                                                                                                                                                                                                                             |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A truth test to apply to each item in `coll`. The iteratee must complete with a boolean value as its result. Invoked with (item, callback).                                                                                                                                   |
    | `callback` | function \<optional\>                                            | A callback which is called as soon as any iteratee returns `true`, or after all the `iteratee` functions have finished. Result will be the first item in the array that passes the truth test (iteratee) or the value `undefined` if none passed. Invoked with (err, result). |

    #### Returns:

    a Promise if no callback is passed

    Source:

    [detectLimit.js](https://caolan.github.io/async/v3/detectLimit.js.html), [line 5](https://caolan.github.io/async/v3/detectLimit.js.html#line5)

    See:

    [async.detect](#detect)
- name: detectSeries
  id: index#detectSeries
  summary: The same as detect but runs only a single async operation at a time
  description: |-
    ### (static) detectSeries(coll, iteratee, callbackopt)

    ``` javascript
    import detectSeries from 'async/detectSeries';
    ```

    The same as [`detect`](#detect) but runs only a single async operation at a time.

    Alias:

    findSeries

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                                                                   |
    |------------|------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                                                                                                 |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A truth test to apply to each item in `coll`. The iteratee must complete with a boolean value as its result. Invoked with (item, callback).                                                                                                                                   |
    | `callback` | function \<optional\>                                            | A callback which is called as soon as any iteratee returns `true`, or after all the `iteratee` functions have finished. Result will be the first item in the array that passes the truth test (iteratee) or the value `undefined` if none passed. Invoked with (err, result). |

    #### Returns:

    a Promise if no callback is passed

    Source:

    [detectSeries.js](https://caolan.github.io/async/v3/detectSeries.js.html), [line 5](https://caolan.github.io/async/v3/detectSeries.js.html#line5)

    See:

    [async.detect](#detect)
- name: dir
  id: index#dir
  summary: Logs the result of an async function to the console using console.dir to display the properties of the resulting object
  description: |-
    ### (static) dir(function)

    ``` javascript
    import dir from 'async/dir';
    ```

    Logs the result of an [`async` function](https://caolan.github.io/async/v3/global.html) to the `console` using `console.dir` to display the properties of the resulting object. Only works in Node.js or in browsers that support `console.dir` and `console.error` (such as FF and Chrome). If multiple arguments are returned from the async function, `console.dir` is called on each argument in order.

    #### Parameters:

    | Name           | Type                                                             | Description                                                 |
    |----------------|------------------------------------------------------------------|-------------------------------------------------------------|
    | `function`     |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | The function you want to eventually apply all arguments to. |
    | `arguments...` | \*                                                               | Any number of arguments to apply to the function.           |

    #### Example

    ``` javascript
    // in a module
    var hello = function(name, callback) {
        setTimeout(function() {
            callback(null, {hello: name});
        }, 1000);
    };

    // in the node repl
    node> async.dir(hello, 'world');
    {hello: 'world'}
    ```

    Source:

    [dir.js](https://caolan.github.io/async/v3/dir.js.html), [line 3](https://caolan.github.io/async/v3/dir.js.html#line3)
- name: doUntil
  id: index#doUntil
  summary: Like 'doWhilst', except the test is inverted
  description: |-
    ### (static) doUntil(iteratee, test, callbackopt) → {Promise}

    ``` javascript
    import doUntil from 'async/doUntil';
    ```

    Like ['doWhilst'](#doWhilst), except the `test` is inverted. Note the argument ordering differs from `until`.

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                                      |
    |------------|------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function which is called each time `test` fails. Invoked with (callback).                                                                                                                                                               |
    | `test`     |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | asynchronous truth test to perform after each execution of `iteratee`. Invoked with (...args, callback), where `...args` are the non-error args from the previous callback of `iteratee`                                                         |
    | `callback` | function \<optional\>                                            | A callback which is called after the test function has passed and repeated execution of `iteratee` has stopped. `callback` will be passed an error and any arguments passed to the final `iteratee`'s callback. Invoked with (err, \[results\]); |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    Source:

    [doUntil.js](https://caolan.github.io/async/v3/doUntil.js.html), [line 4](https://caolan.github.io/async/v3/doUntil.js.html#line4)

    See:

    [async.doWhilst](#doWhilst)
- name: doWhilst
  id: index#doWhilst
  summary: The post-check version of whilst
  description: |-
    ### (static) doWhilst(iteratee, test, callbackopt) → {Promise}

    ``` javascript
    import doWhilst from 'async/doWhilst';
    ```

    The post-check version of [`whilst`](#whilst). To reflect the difference in the order of operations, the arguments `test` and `iteratee` are switched.

    `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                                      |
    |------------|------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A function which is called each time `test` passes. Invoked with (callback).                                                                                                                                                                     |
    | `test`     |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | asynchronous truth test to perform after each execution of `iteratee`. Invoked with (...args, callback), where `...args` are the non-error args from the previous callback of `iteratee`.                                                        |
    | `callback` | function \<optional\>                                            | A callback which is called after the test function has failed and repeated execution of `iteratee` has stopped. `callback` will be passed an error and any arguments passed to the final `iteratee`'s callback. Invoked with (err, \[results\]); |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    Source:

    [doWhilst.js](https://caolan.github.io/async/v3/doWhilst.js.html), [line 5](https://caolan.github.io/async/v3/doWhilst.js.html#line5)

    See:

    [async.whilst](#whilst)
- name: each
  id: index#each
  summary: Applies the function iteratee to each item in coll, in parallel
  description: |-
    ### (static) each(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import each from 'async/each';
    ```

    Applies the function `iteratee` to each item in `coll`, in parallel. The `iteratee` is called with an item from the list, and a callback for when it has finished. If the `iteratee` passes an error to its `callback`, the main `callback` (for the `each` function) is immediately called with the error.

    Note, that since this function applies `iteratee` to each item in parallel, there is no guarantee that the iteratee functions will complete in order.

    Alias:

    forEach

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                           |
    |------------|------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                         |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function to apply to each item in `coll`. Invoked with (item, callback). The array index is not passed to the iteratee. If you need the index, use `eachOf`. |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. Invoked with (err).                                                       |

    #### Returns:

    a promise, if a callback is omitted

    Type

    Promise

    #### Example

    ``` javascript
    // assuming openFiles is an array of file names and saveFile is a function
    // to save the modified contents of that file:

    async.each(openFiles, saveFile, function(err){
      // if any of the saves produced an error, err would equal that error
    });

    // assuming openFiles is an array of file names
    async.each(openFiles, function(file, callback) {

        // Perform operation on file here.
        console.log('Processing file ' + file);

        if( file.length > 32 ) {
          console.log('This file name is too long');
          callback('File name too long');
        } else {
          // Do work to process file here
          console.log('File processed');
          callback();
        }
    }, function(err) {
        // if any of the file processing produced an error, err would equal that error
        if( err ) {
          // One of the iterations produced an error.
          // All processing will now stop.
          console.log('A file failed to process');
        } else {
          console.log('All files have been processed successfully');
        }
    });
    ```

    Source:

    [each.js](https://caolan.github.io/async/v3/each.js.html), [line 6](https://caolan.github.io/async/v3/each.js.html#line6)
- name: eachLimit
  id: index#eachLimit
  summary: The same as each but runs a maximum of limit async operations at a time
  description: |-
    ### (static) eachLimit(coll, limit, iteratee, callbackopt) → {Promise}

    ``` javascript
    import eachLimit from 'async/eachLimit';
    ```

    The same as [`each`](#each) but runs a maximum of `limit` async operations at a time.

    Alias:

    forEachLimit

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                |
    |------------|------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                              |
    | `limit`    | number                                                           | The maximum number of async operations at a time.                                                                                                                          |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function to apply to each item in `coll`. The array index is not passed to the iteratee. If you need the index, use `eachOfLimit`. Invoked with (item, callback). |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. Invoked with (err).                                                            |

    #### Returns:

    a promise, if a callback is omitted

    Type

    Promise

    Source:

    [eachLimit.js](https://caolan.github.io/async/v3/eachLimit.js.html), [line 6](https://caolan.github.io/async/v3/eachLimit.js.html#line6)

    See:

    [async.each](#each)
- name: eachOf
  id: index#eachOf
  summary: Like each, except that it passes the key (or index) as the second argument to the iteratee
  description: |-
    ### (static) eachOf(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import eachOf from 'async/eachOf';
    ```

    Like [`each`](#each), except that it passes the key (or index) as the second argument to the iteratee.

    Alias:

    forEachOf

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                    |
    |------------|------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                  |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A function to apply to each item in `coll`. The `key` is the item's key, or index in the case of an array. Invoked with (item, key, callback). |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. Invoked with (err).                                |

    #### Returns:

    a promise, if a callback is omitted

    Type

    Promise

    #### Example

    ``` javascript
    var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
    var configs = {};

    async.forEachOf(obj, function (value, key, callback) {
        fs.readFile(__dirname + value, "utf8", function (err, data) {
            if (err) return callback(err);
            try {
                configs[key] = JSON.parse(data);
            } catch (e) {
                return callback(e);
            }
            callback();
        });
    }, function (err) {
        if (err) console.error(err.message);
        // configs is now a map of JSON data
        doSomethingWith(configs);
    });
    ```

    Source:

    [eachOf.js](https://caolan.github.io/async/v3/eachOf.js.html), [line 42](https://caolan.github.io/async/v3/eachOf.js.html#line42)

    See:

    [async.each](#each)
- name: eachOfLimit
  id: index#eachOfLimit
  summary: The same as eachOf but runs a maximum of limit async operations at a time
  description: |-
    ### (static) eachOfLimit(coll, limit, iteratee, callbackopt) → {Promise}

    ``` javascript
    import eachOfLimit from 'async/eachOfLimit';
    ```

    The same as [`eachOf`](#eachOf) but runs a maximum of `limit` async operations at a time.

    Alias:

    forEachOfLimit

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                           |
    |------------|------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                         |
    | `limit`    | number                                                           | The maximum number of async operations at a time.                                                                                                     |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function to apply to each item in `coll`. The `key` is the item's key, or index in the case of an array. Invoked with (item, key, callback). |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. Invoked with (err).                                       |

    #### Returns:

    a promise, if a callback is omitted

    Type

    Promise

    Source:

    [eachOfLimit.js](https://caolan.github.io/async/v3/eachOfLimit.js.html), [line 5](https://caolan.github.io/async/v3/eachOfLimit.js.html#line5)

    See:

    [async.eachOf](#eachOf)
- name: eachOfSeries
  id: index#eachOfSeries
  summary: The same as eachOf but runs only a single async operation at a time
  description: |-
    ### (static) eachOfSeries(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import eachOfSeries from 'async/eachOfSeries';
    ```

    The same as [`eachOf`](#eachOf) but runs only a single async operation at a time.

    Alias:

    forEachOfSeries

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                     |
    |------------|------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                   |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function to apply to each item in `coll`. Invoked with (item, key, callback).                          |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. Invoked with (err). |

    #### Returns:

    a promise, if a callback is omitted

    Type

    Promise

    Source:

    [eachOfSeries.js](https://caolan.github.io/async/v3/eachOfSeries.js.html), [line 4](https://caolan.github.io/async/v3/eachOfSeries.js.html#line4)

    See:

    [async.eachOf](#eachOf)
- name: eachSeries
  id: index#eachSeries
  summary: The same as each but runs only a single async operation at a time
  description: |-
    ### (static) eachSeries(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import eachSeries from 'async/eachSeries';
    ```

    The same as [`each`](#each) but runs only a single async operation at a time.

    Note, that unlike [`each`](#each), this function applies iteratee to each item in series and therefore the iteratee functions will complete in order.

    Alias:

    forEachSeries

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                 |
    |------------|------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                               |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function to apply to each item in `coll`. The array index is not passed to the iteratee. If you need the index, use `eachOfSeries`. Invoked with (item, callback). |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. Invoked with (err).                                                             |

    #### Returns:

    a promise, if a callback is omitted

    Type

    Promise

    Source:

    [eachSeries.js](https://caolan.github.io/async/v3/eachSeries.js.html), [line 4](https://caolan.github.io/async/v3/eachSeries.js.html#line4)

    See:

    [async.each](#each)
- name: ensureAsync
  id: index#ensureAsync
  summary: Wrap an async function and ensure it calls its callback on a later tick of the event loop
  description: |-
    ### (static) ensureAsync(fn) → {[AsyncFunction](https://caolan.github.io/async/v3/global.html)}

    ``` javascript
    import ensureAsync from 'async/ensureAsync';
    ```

    Wrap an async function and ensure it calls its callback on a later tick of the event loop. If the function already calls its callback on a next tick, no extra deferral is added. This is useful for preventing stack overflows (`RangeError: Maximum call stack size exceeded`) and generally keeping [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony) contained. ES2017 `async` functions are returned as-is -- they are immune to Zalgo's corrupting influences, as they always resolve on a later tick.

    #### Parameters:

    | Name | Type                                                             | Description                                                                     |
    |------|------------------------------------------------------------------|---------------------------------------------------------------------------------|
    | `fn` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | an async function, one that expects a node-style callback as its last argument. |

    #### Returns:

    Returns a wrapped function with the exact same call signature as the function passed in.

    Type

    [AsyncFunction](https://caolan.github.io/async/v3/global.html)

    #### Example

    ``` javascript
    function sometimesAsync(arg, callback) {
        if (cache[arg]) {
            return callback(null, cache[arg]); // this would be synchronous!!
        } else {
            doSomeIO(arg, callback); // this IO would be asynchronous
        }
    }

    // this has a risk of stack overflows if many results are cached in a row
    async.mapSeries(args, sometimesAsync, done);

    // this will defer sometimesAsync's callback if necessary,
    // preventing stack overflows
    async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
    ```

    Source:

    [ensureAsync.js](https://caolan.github.io/async/v3/ensureAsync.js.html), [line 4](https://caolan.github.io/async/v3/ensureAsync.js.html#line4)
- name: every
  id: index#every
  summary: Returns true if every element in coll satisfies an async test
  description: |-
    ### (static) every(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import every from 'async/every';
    ```

    Returns `true` if every element in `coll` satisfies an async test. If any iteratee call returns `false`, the main `callback` is immediately called.

    Alias:

    all

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                  |
    |------------|------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async truth test to apply to each item in the collection in parallel. The iteratee must complete with a boolean result value. Invoked with (item, callback).                              |
    | `callback` | function \<optional\>                                            | A callback which is called after all the `iteratee` functions have finished. Result will be either `true` or `false` depending on the values of the async tests. Invoked with (err, result). |

    #### Returns:

    a promise, if no callback provided

    Type

    Promise

    #### Example

    ``` javascript
    async.every(['file1','file2','file3'], function(filePath, callback) {
        fs.access(filePath, function(err) {
            callback(null, !err)
        });
    }, function(err, result) {
        // if result is true then every file exists
    });
    ```

    Source:

    [every.js](https://caolan.github.io/async/v3/every.js.html), [line 5](https://caolan.github.io/async/v3/every.js.html#line5)
- name: everyLimit
  id: index#everyLimit
  summary: The same as every but runs a maximum of limit async operations at a time
  description: |-
    ### (static) everyLimit(coll, limit, iteratee, callbackopt) → {Promise}

    ``` javascript
    import everyLimit from 'async/everyLimit';
    ```

    The same as [`every`](#every) but runs a maximum of `limit` async operations at a time.

    Alias:

    allLimit

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                  |
    |------------|------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                |
    | `limit`    | number                                                           | The maximum number of async operations at a time.                                                                                                                                            |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async truth test to apply to each item in the collection in parallel. The iteratee must complete with a boolean result value. Invoked with (item, callback).                              |
    | `callback` | function \<optional\>                                            | A callback which is called after all the `iteratee` functions have finished. Result will be either `true` or `false` depending on the values of the async tests. Invoked with (err, result). |

    #### Returns:

    a promise, if no callback provided

    Type

    Promise

    Source:

    [everyLimit.js](https://caolan.github.io/async/v3/everyLimit.js.html), [line 5](https://caolan.github.io/async/v3/everyLimit.js.html#line5)

    See:

    [async.every](#every)
- name: everySeries
  id: index#everySeries
  summary: The same as every but runs only a single async operation at a time
  description: |-
    ### (static) everySeries(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import everySeries from 'async/everySeries';
    ```

    The same as [`every`](#every) but runs only a single async operation at a time.

    Alias:

    allSeries

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                  |
    |------------|------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async truth test to apply to each item in the collection in series. The iteratee must complete with a boolean result value. Invoked with (item, callback).                                |
    | `callback` | function \<optional\>                                            | A callback which is called after all the `iteratee` functions have finished. Result will be either `true` or `false` depending on the values of the async tests. Invoked with (err, result). |

    #### Returns:

    a promise, if no callback provided

    Type

    Promise

    Source:

    [everySeries.js](https://caolan.github.io/async/v3/everySeries.js.html), [line 5](https://caolan.github.io/async/v3/everySeries.js.html#line5)

    See:

    [async.every](#every)
- name: filter
  id: index#filter
  summary: Returns a new array of all the values in coll which pass an async truth test
  description: |-
    ### (static) filter(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import filter from 'async/filter';
    ```

    Returns a new array of all the values in `coll` which pass an async truth test. This operation is performed in parallel, but the results array will be in the same order as the original.

    Alias:

    select

    #### Parameters:

    | Name       | Type                                         | Description                                                                                                                                                                                              |
    |------------|----------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object | A collection to iterate over.                                                                                                                                                                            |
    | `iteratee` | function                                     | A truth test to apply to each item in `coll`. The `iteratee` is passed a `callback(err, truthValue)`, which must be called with a boolean argument once it has completed. Invoked with (item, callback). |
    | `callback` | function \<optional\>                        | A callback which is called after all the `iteratee` functions have finished. Invoked with (err, results).                                                                                                |

    #### Returns:

    a promise, if no callback provided

    Type

    Promise

    #### Example

    ``` javascript
    async.filter(['file1','file2','file3'], function(filePath, callback) {
        fs.access(filePath, function(err) {
            callback(null, !err)
        });
    }, function(err, results) {
        // results now equals an array of the existing files
    });
    ```

    Source:

    [filter.js](https://caolan.github.io/async/v3/filter.js.html), [line 5](https://caolan.github.io/async/v3/filter.js.html#line5)
- name: filterLimit
  id: index#filterLimit
  summary: The same as filter but runs a maximum of limit async operations at a time
  description: |-
    ### (static) filterLimit(coll, limit, iteratee, callbackopt) → {Promise}

    ``` javascript
    import filterLimit from 'async/filterLimit';
    ```

    The same as [`filter`](#filter) but runs a maximum of `limit` async operations at a time.

    Alias:

    selectLimit

    #### Parameters:

    | Name       | Type                                         | Description                                                                                                                                                                                              |
    |------------|----------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object | A collection to iterate over.                                                                                                                                                                            |
    | `limit`    | number                                       | The maximum number of async operations at a time.                                                                                                                                                        |
    | `iteratee` | function                                     | A truth test to apply to each item in `coll`. The `iteratee` is passed a `callback(err, truthValue)`, which must be called with a boolean argument once it has completed. Invoked with (item, callback). |
    | `callback` | function \<optional\>                        | A callback which is called after all the `iteratee` functions have finished. Invoked with (err, results).                                                                                                |

    #### Returns:

    a promise, if no callback provided

    Type

    Promise

    Source:

    [filterLimit.js](https://caolan.github.io/async/v3/filterLimit.js.html), [line 5](https://caolan.github.io/async/v3/filterLimit.js.html#line5)

    See:

    [async.filter](#filter)
- name: filterSeries
  id: index#filterSeries
  summary: The same as filter but runs only a single async operation at a time
  description: |-
    ### (static) filterSeries(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import filterSeries from 'async/filterSeries';
    ```

    The same as [`filter`](#filter) but runs only a single async operation at a time.

    Alias:

    selectSeries

    #### Parameters:

    | Name       | Type                                         | Description                                                                                                                                                                                              |
    |------------|----------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object | A collection to iterate over.                                                                                                                                                                            |
    | `iteratee` | function                                     | A truth test to apply to each item in `coll`. The `iteratee` is passed a `callback(err, truthValue)`, which must be called with a boolean argument once it has completed. Invoked with (item, callback). |
    | `callback` | function \<optional\>                        | A callback which is called after all the `iteratee` functions have finished. Invoked with (err, results)                                                                                                 |

    #### Returns:

    a promise, if no callback provided

    Type

    Promise

    Source:

    [filterSeries.js](https://caolan.github.io/async/v3/filterSeries.js.html), [line 5](https://caolan.github.io/async/v3/filterSeries.js.html#line5)

    See:

    [async.filter](#filter)
- name: forever
  id: index#forever
  summary: Calls the asynchronous function fn with a callback parameter that allows it to call itself again, in series, indefinitely
  description: |-
    ### (static) forever(fn, errbackopt) → {Promise}

    ``` javascript
    import forever from 'async/forever';
    ```

    Calls the asynchronous function `fn` with a callback parameter that allows it to call itself again, in series, indefinitely. If an error is passed to the callback then `errback` is called with the error, and execution stops, otherwise it will never be called.

    #### Parameters:

    | Name      | Type                                                             | Description                                                                                                        |
    |-----------|------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|
    | `fn`      |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | an async function to call repeatedly. Invoked with (next).                                                         |
    | `errback` | function \<optional\>                                            | when `fn` passes an error to it's callback, this function will be called, and execution stops. Invoked with (err). |

    #### Returns:

    a promise that rejects if an error occurs and an errback is not passed

    Type

    Promise

    #### Example

    ``` javascript
    async.forever(
        function(next) {
            // next is suitable for passing to things that need a callback(err [, whatever]);
            // it will result in this function being called again.
        },
        function(err) {
            // if next is called with a value in its first parameter, it will appear
            // in here as 'err', and execution will stop.
        }
    );
    ```

    Source:

    [forever.js](https://caolan.github.io/async/v3/forever.js.html), [line 6](https://caolan.github.io/async/v3/forever.js.html#line6)
- name: groupBy
  id: index#groupBy
  summary: Returns a new object, where each value corresponds to an array of items, from coll, that returned the corresponding key
  description: |-
    ### (static) groupBy(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import groupBy from 'async/groupBy';
    ```

    Returns a new object, where each value corresponds to an array of items, from `coll`, that returned the corresponding key. That is, the keys of the object correspond to the values passed to the `iteratee` callback.

    Note: Since this function applies the `iteratee` to each item in parallel, there is no guarantee that the `iteratee` functions will complete in order. However, the values for each key in the `result` will be in the same order as the original `coll`. For Objects, the values will roughly be in the order of the original Objects' keys (but this can vary across JavaScript engines).

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                    |
    |------------|------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                  |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function to apply to each item in `coll`. The iteratee should complete with a `key` to group the value under. Invoked with (value, callback).                                         |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. Result is an `Object` whoses properties are arrays of values which returned the corresponding key. |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    #### Example

    ``` javascript
    async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {
        db.findById(userId, function(err, user) {
            if (err) return callback(err);
            return callback(null, user.age);
        });
    }, function(err, result) {
        // result is object containing the userIds grouped by age
        // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};
    });
    ```

    Source:

    [groupBy.js](https://caolan.github.io/async/v3/groupBy.js.html), [line 3](https://caolan.github.io/async/v3/groupBy.js.html#line3)
- name: groupByLimit
  id: index#groupByLimit
  summary: The same as groupBy but runs a maximum of limit async operations at a time
  description: |-
    ### (static) groupByLimit(coll, limit, iteratee, callbackopt) → {Promise}

    ``` javascript
    import groupByLimit from 'async/groupByLimit';
    ```

    The same as [`groupBy`](#groupBy) but runs a maximum of `limit` async operations at a time.

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                    |
    |------------|------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                  |
    | `limit`    | number                                                           | The maximum number of async operations at a time.                                                                                                                                              |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function to apply to each item in `coll`. The iteratee should complete with a `key` to group the value under. Invoked with (value, callback).                                         |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. Result is an `Object` whoses properties are arrays of values which returned the corresponding key. |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    Source:

    [groupByLimit.js](https://caolan.github.io/async/v3/groupByLimit.js.html), [line 5](https://caolan.github.io/async/v3/groupByLimit.js.html#line5)

    See:

    [async.groupBy](#groupBy)
- name: groupBySeries
  id: index#groupBySeries
  summary: The same as groupBy but runs only a single async operation at a time
  description: |-
    ### (static) groupBySeries(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import groupBySeries from 'async/groupBySeries';
    ```

    The same as [`groupBy`](#groupBy) but runs only a single async operation at a time.

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                    |
    |------------|------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                  |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function to apply to each item in `coll`. The iteratee should complete with a `key` to group the value under. Invoked with (value, callback).                                         |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. Result is an `Object` whoses properties are arrays of values which returned the corresponding key. |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    Source:

    [groupBySeries.js](https://caolan.github.io/async/v3/groupBySeries.js.html), [line 3](https://caolan.github.io/async/v3/groupBySeries.js.html#line3)

    See:

    [async.groupBy](#groupBy)
- name: log
  id: index#log
  summary: Logs the result of an async function to the console
  description: |-
    ### (static) log(function)

    ``` javascript
    import log from 'async/log';
    ```

    Logs the result of an `async` function to the `console`. Only works in Node.js or in browsers that support `console.log` and `console.error` (such as FF and Chrome). If multiple arguments are returned from the async function, `console.log` is called on each argument in order.

    #### Parameters:

    | Name           | Type                                                             | Description                                                 |
    |----------------|------------------------------------------------------------------|-------------------------------------------------------------|
    | `function`     |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | The function you want to eventually apply all arguments to. |
    | `arguments...` | \*                                                               | Any number of arguments to apply to the function.           |

    #### Example

    ``` javascript
    // in a module
    var hello = function(name, callback) {
        setTimeout(function() {
            callback(null, 'hello ' + name);
        }, 1000);
    };

    // in the node repl
    node> async.log(hello, 'world');
    'hello world'
    ```

    Source:

    [log.js](https://caolan.github.io/async/v3/log.js.html), [line 3](https://caolan.github.io/async/v3/log.js.html#line3)
- name: map
  id: index#map
  summary: Produces a new collection of values by mapping each value in coll through the iteratee function
  description: |-
    ### (static) map(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import map from 'async/map';
    ```

    Produces a new collection of values by mapping each value in `coll` through the `iteratee` function. The `iteratee` is called with an item from `coll` and a callback for when it has finished processing. Each of these callback takes 2 arguments: an `error`, and the transformed item from `coll`. If `iteratee` passes an error to its callback, the main `callback` (for the `map` function) is immediately called with the error.

    Note, that since this function applies the `iteratee` to each item in parallel, there is no guarantee that the `iteratee` functions will complete in order. However, the results array will be in the same order as the original `coll`.

    If `map` is passed an Object, the results will be an Array. The results will roughly be in the order of the original Objects' keys (but this can vary across JavaScript engines).

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                            |
    |------------|------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                          |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function to apply to each item in `coll`. The iteratee should complete with the transformed item. Invoked with (item, callback).                                              |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. Results is an Array of the transformed items from the `coll`. Invoked with (err, results). |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    #### Example

    ``` javascript
    async.map(['file1','file2','file3'], fs.stat, function(err, results) {
        // results is now an array of stats for each file
    });
    ```

    Source:

    [map.js](https://caolan.github.io/async/v3/map.js.html), [line 5](https://caolan.github.io/async/v3/map.js.html#line5)
- name: mapLimit
  id: index#mapLimit
  summary: The same as map but runs a maximum of limit async operations at a time
  description: |-
    ### (static) mapLimit(coll, limit, iteratee, callbackopt) → {Promise}

    ``` javascript
    import mapLimit from 'async/mapLimit';
    ```

    The same as [`map`](#map) but runs a maximum of `limit` async operations at a time.

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                            |
    |------------|------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                          |
    | `limit`    | number                                                           | The maximum number of async operations at a time.                                                                                                                                      |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function to apply to each item in `coll`. The iteratee should complete with the transformed item. Invoked with (item, callback).                                              |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. Results is an array of the transformed items from the `coll`. Invoked with (err, results). |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    Source:

    [mapLimit.js](https://caolan.github.io/async/v3/mapLimit.js.html), [line 5](https://caolan.github.io/async/v3/mapLimit.js.html#line5)

    See:

    [async.map](#map)
- name: mapSeries
  id: index#mapSeries
  summary: The same as map but runs only a single async operation at a time
  description: |-
    ### (static) mapSeries(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import mapSeries from 'async/mapSeries';
    ```

    The same as [`map`](#map) but runs only a single async operation at a time.

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                            |
    |------------|------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                          |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function to apply to each item in `coll`. The iteratee should complete with the transformed item. Invoked with (item, callback).                                              |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. Results is an array of the transformed items from the `coll`. Invoked with (err, results). |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    Source:

    [mapSeries.js](https://caolan.github.io/async/v3/mapSeries.js.html), [line 5](https://caolan.github.io/async/v3/mapSeries.js.html#line5)

    See:

    [async.map](#map)
- name: mapValues
  id: index#mapValues
  summary: A relative of map, designed for use with objects
  description: |-
    ### (static) mapValues(obj, iteratee, callbackopt) → {Promise}

    ``` javascript
    import mapValues from 'async/mapValues';
    ```

    A relative of [`map`](#map), designed for use with objects.

    Produces a new Object by mapping each value of `obj` through the `iteratee` function. The `iteratee` is called each `value` and `key` from `obj` and a callback for when it has finished processing. Each of these callbacks takes two arguments: an `error`, and the transformed item from `obj`. If `iteratee` passes an error to its callback, the main `callback` (for the `mapValues` function) is immediately called with the error.

    Note, the order of the keys in the result is not guaranteed. The keys will be roughly in the order they complete, (but this is very engine-specific)

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                             |
    |------------|------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `obj`      | Object                                                           | A collection to iterate over.                                                                                                                                                                                                           |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A function to apply to each value and key in `coll`. The iteratee should complete with the transformed value as its result. Invoked with (value, key, callback).                                                                        |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. `result` is a new object consisting of each key from `obj`, with each transformed value on the right-hand side. Invoked with (err, result). |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    #### Example

    ``` javascript
    async.mapValues({
        f1: 'file1',
        f2: 'file2',
        f3: 'file3'
    }, function (file, key, callback) {
      fs.stat(file, callback);
    }, function(err, result) {
        // result is now a map of stats for each file, e.g.
        // {
        //     f1: [stats for file1],
        //     f2: [stats for file2],
        //     f3: [stats for file3]
        // }
    });
    ```

    Source:

    [mapValues.js](https://caolan.github.io/async/v3/mapValues.js.html), [line 3](https://caolan.github.io/async/v3/mapValues.js.html#line3)
- name: mapValuesLimit
  id: index#mapValuesLimit
  summary: The same as mapValues but runs a maximum of limit async operations at a time
  description: |-
    ### (static) mapValuesLimit(obj, limit, iteratee, callbackopt) → {Promise}

    ``` javascript
    import mapValuesLimit from 'async/mapValuesLimit';
    ```

    The same as [`mapValues`](#mapValues) but runs a maximum of `limit` async operations at a time.

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                             |
    |------------|------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `obj`      | Object                                                           | A collection to iterate over.                                                                                                                                                                                                           |
    | `limit`    | number                                                           | The maximum number of async operations at a time.                                                                                                                                                                                       |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A function to apply to each value and key in `coll`. The iteratee should complete with the transformed value as its result. Invoked with (value, key, callback).                                                                        |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. `result` is a new object consisting of each key from `obj`, with each transformed value on the right-hand side. Invoked with (err, result). |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    Source:

    [mapValuesLimit.js](https://caolan.github.io/async/v3/mapValuesLimit.js.html), [line 6](https://caolan.github.io/async/v3/mapValuesLimit.js.html#line6)

    See:

    [async.mapValues](#mapValues)
- name: mapValuesSeries
  id: index#mapValuesSeries
  summary: The same as mapValues but runs only a single async operation at a time
  description: |-
    ### (static) mapValuesSeries(obj, iteratee, callbackopt) → {Promise}

    ``` javascript
    import mapValuesSeries from 'async/mapValuesSeries';
    ```

    The same as [`mapValues`](#mapValues) but runs only a single async operation at a time.

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                             |
    |------------|------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `obj`      | Object                                                           | A collection to iterate over.                                                                                                                                                                                                           |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A function to apply to each value and key in `coll`. The iteratee should complete with the transformed value as its result. Invoked with (value, key, callback).                                                                        |
    | `callback` | function \<optional\>                                            | A callback which is called when all `iteratee` functions have finished, or an error occurs. `result` is a new object consisting of each key from `obj`, with each transformed value on the right-hand side. Invoked with (err, result). |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    Source:

    [mapValuesSeries.js](https://caolan.github.io/async/v3/mapValuesSeries.js.html), [line 3](https://caolan.github.io/async/v3/mapValuesSeries.js.html#line3)

    See:

    [async.mapValues](#mapValues)
- name: memoize
  id: index#memoize
  summary: Caches the results of an async function
  description: |-
    ### (static) memoize(fn, hasher) → {[AsyncFunction](https://caolan.github.io/async/v3/global.html)}

    ``` javascript
    import memoize from 'async/memoize';
    ```

    Caches the results of an async function. When creating a hash to store function results against, the callback is omitted from the hash and an optional hash function can be used.

    **Note: if the async function errs, the result will not be cached and subsequent calls will call the wrapped function.**

    If no hash function is specified, the first argument is used as a hash key, which may work reasonably if it is a string or a data type that converts to a distinct string. Note that objects and arrays will not behave reasonably. Neither will cases where the other arguments are significant. In such cases, specify your own hash function.

    The cache of results is exposed as the `memo` property of the function returned by `memoize`.

    #### Parameters:

    | Name     | Type                                                             | Description                                                                                                                                                     |
    |----------|------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `fn`     |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | The async function to proxy and cache results from.                                                                                                             |
    | `hasher` | function                                                         | An optional function for generating a custom hash for storing results. It has all the arguments applied to it apart from the callback, and must be synchronous. |

    #### Returns:

    a memoized version of `fn`

    Type

    [AsyncFunction](https://caolan.github.io/async/v3/global.html)

    #### Example

    ``` javascript
    var slow_fn = function(name, callback) {
        // do something
        callback(null, result);
    };
    var fn = async.memoize(slow_fn);

    // fn can now be used as if it were slow_fn
    fn('some name', function() {
        // callback
    });
    ```

    Source:

    [memoize.js](https://caolan.github.io/async/v3/memoize.js.html), [line 5](https://caolan.github.io/async/v3/memoize.js.html#line5)
- name: nextTick
  id: index#nextTick
  summary: Calls callback on a later loop around the event loop
  description: |-
    ### (static) nextTick(callback)

    ``` javascript
    import nextTick from 'async/nextTick';
    ```

    Calls `callback` on a later loop around the event loop. In Node.js this just calls `process.nextTick`. In the browser it will use `setImmediate` if available, otherwise `setTimeout(callback, 0)`, which means other higher priority events may precede the execution of `callback`.

    This is used internally for browser-compatibility purposes.

    #### Parameters:

    | Name       | Type     | Description                                                                         |
    |------------|----------|-------------------------------------------------------------------------------------|
    | `callback` | function | The function to call on a later loop around the event loop. Invoked with (args...). |
    | `args...`  | \*       | any number of additional arguments to pass to the callback on the next tick.        |

    #### Example

    ``` javascript
    var call_order = [];
    async.nextTick(function() {
        call_order.push('two');
        // call_order now equals ['one','two']
    });
    call_order.push('one');

    async.setImmediate(function (a, b, c) {
        // a, b, and c equal 1, 2, and 3
    }, 1, 2, 3);
    ```

    Source:

    [nextTick.js](https://caolan.github.io/async/v3/nextTick.js.html), [line 5](https://caolan.github.io/async/v3/nextTick.js.html#line5)

    See:

    [async.setImmediate](#setImmediate)
- name: parallel
  id: index#parallel
  summary: Run the tasks collection of functions in parallel, without waiting until the previous function has completed
  description: |-
    ### (static) parallel(tasks, callbackopt) → {Promise}

    ``` javascript
    import parallel from 'async/parallel';
    ```

    Run the `tasks` collection of functions in parallel, without waiting until the previous function has completed. If any of the functions pass an error to its callback, the main `callback` is immediately called with the value of the error. Once the `tasks` have completed, the results are passed to the final `callback` as an array.

    **Note:**`parallel` is about kicking-off I/O tasks in parallel, not about parallel execution of code. If your tasks do not use any timers or perform any I/O, they will actually be executed in series. Any synchronous setup sections for each task will happen one after the other. JavaScript remains single-threaded.

    **Hint:** Use [`reflect`](#reflect) to continue the execution of other tasks when a task fails.

    It is also possible to use an object instead of an array. Each property will be run as a function and the results will be passed to the final `callback` as an object instead of an array. This can be a more readable way of handling results from async.parallel.

    #### Parameters:

    | Name       | Type                                         | Description                                                                                                                                                                                                                   |
    |------------|----------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `tasks`    | Array \| Iterable \| AsyncIterable \| Object | A collection of [async functions](https://caolan.github.io/async/v3/global.html) to run. Each async function can complete with any number of optional `result` values.                                                        |
    | `callback` | function \<optional\>                        | An optional callback to run once all the functions have completed successfully. This function gets a results array (or object) containing all the result arguments passed to the task callbacks. Invoked with (err, results). |

    #### Returns:

    a promise, if a callback is not passed

    Type

    Promise

    #### Example

    ``` javascript
    async.parallel([
        function(callback) {
            setTimeout(function() {
                callback(null, 'one');
            }, 200);
        },
        function(callback) {
            setTimeout(function() {
                callback(null, 'two');
            }, 100);
        }
    ],
    // optional callback
    function(err, results) {
        // the results array will equal ['one','two'] even though
        // the second function had a shorter timeout.
    });

    // an example using an object instead of an array
    async.parallel({
        one: function(callback) {
            setTimeout(function() {
                callback(null, 1);
            }, 200);
        },
        two: function(callback) {
            setTimeout(function() {
                callback(null, 2);
            }, 100);
        }
    }, function(err, results) {
        // results is now equals to: {one: 1, two: 2}
    });
    ```

    Source:

    [parallel.js](https://caolan.github.io/async/v3/parallel.js.html), [line 4](https://caolan.github.io/async/v3/parallel.js.html#line4)
- name: parallelLimit
  id: index#parallelLimit
  summary: The same as parallel but runs a maximum of limit async operations at a time
  description: |-
    ### (static) parallelLimit(tasks, limit, callbackopt) → {Promise}

    ``` javascript
    import parallelLimit from 'async/parallelLimit';
    ```

    The same as [`parallel`](#parallel) but runs a maximum of `limit` async operations at a time.

    #### Parameters:

    | Name       | Type                                         | Description                                                                                                                                                                                                                   |
    |------------|----------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `tasks`    | Array \| Iterable \| AsyncIterable \| Object | A collection of [async functions](https://caolan.github.io/async/v3/global.html) to run. Each async function can complete with any number of optional `result` values.                                                        |
    | `limit`    | number                                       | The maximum number of async operations at a time.                                                                                                                                                                             |
    | `callback` | function \<optional\>                        | An optional callback to run once all the functions have completed successfully. This function gets a results array (or object) containing all the result arguments passed to the task callbacks. Invoked with (err, results). |

    #### Returns:

    a promise, if a callback is not passed

    Type

    Promise

    Source:

    [parallelLimit.js](https://caolan.github.io/async/v3/parallelLimit.js.html), [line 4](https://caolan.github.io/async/v3/parallelLimit.js.html#line4)

    See:

    [async.parallel](#parallel)
- name: priorityQueue
  id: index#priorityQueue
  summary: The same as async.queue only tasks are assigned a priority and completed in ascending priority order
  description: |-
    ### (static) priorityQueue(worker, concurrency) → {[QueueObject](#QueueObject)}

    ``` javascript
    import priorityQueue from 'async/priorityQueue';
    ```

    The same as [async.queue](#queue) only tasks are assigned a priority and completed in ascending priority order.

    #### Parameters:

    | Name          | Type                                                             | Description                                                                                                                                                                     |
    |---------------|------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `worker`      |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function for processing a queued task. If you want to handle errors from an individual task, pass a callback to `q.push()`. Invoked with (task, callback).             |
    | `concurrency` | number                                                           | An `integer` for determining how many `worker` functions should be run in parallel. If omitted, the concurrency defaults to `1`. If the concurrency is `0`, an error is thrown. |

    #### Returns:

    A priorityQueue object to manage the tasks. There are two differences between `queue` and `priorityQueue` objects:

    - `push(task, priority, [callback])` - `priority` should be a number. If an array of `tasks` is given, all tasks will be assigned the same priority.
    - The `unshift` method was removed.

    Type

    [QueueObject](#QueueObject)

    Source:

    [priorityQueue.js](https://caolan.github.io/async/v3/priorityQueue.js.html), [line 5](https://caolan.github.io/async/v3/priorityQueue.js.html#line5)

    See:

    [async.queue](#queue)
- name: queue
  id: index#queue
  summary: Creates a queue object with the specified concurrency
  description: |-
    ### (static) queue(worker, concurrencyopt) → {[QueueObject](#QueueObject)}

    ``` javascript
    import queue from 'async/queue';
    ```

    Creates a `queue` object with the specified `concurrency`. Tasks added to the `queue` are processed in parallel (up to the `concurrency` limit). If all `worker`s are in progress, the task is queued until one becomes available. Once a `worker` completes a `task`, that `task`'s callback is called.

    #### Parameters:

    | Name          | Type                                                             | Default | Description                                                                                                                                                                     |
    |---------------|------------------------------------------------------------------|---------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `worker`      |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  |         | An async function for processing a queued task. If you want to handle errors from an individual task, pass a callback to `q.push()`. Invoked with (task, callback).             |
    | `concurrency` | number \<optional\>                                              | 1       | An `integer` for determining how many `worker` functions should be run in parallel. If omitted, the concurrency defaults to `1`. If the concurrency is `0`, an error is thrown. |

    #### Returns:

    A queue object to manage the tasks. Callbacks can be attached as certain properties to listen for specific events during the lifecycle of the queue.

    Type

    [QueueObject](#QueueObject)

    #### Example

    ``` javascript
    // create a queue object with concurrency 2
    var q = async.queue(function(task, callback) {
        console.log('hello ' + task.name);
        callback();
    }, 2);

    // assign a callback
    q.drain(function() {
        console.log('all items have been processed');
    });
    // or await the end
    await q.drain()

    // assign an error callback
    q.error(function(err, task) {
        console.error('task experienced an error');
    });

    // add some items to the queue
    q.push({name: 'foo'}, function(err) {
        console.log('finished processing foo');
    });
    // callback is optional
    q.push({name: 'bar'});

    // add some items to the queue (batch-wise)
    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
        console.log('finished processing item');
    });

    // add some items to the front of the queue
    q.unshift({name: 'bar'}, function (err) {
        console.log('finished processing bar');
    });
    ```

    Source:

    [queue.js](https://caolan.github.io/async/v3/queue.js.html), [line 89](https://caolan.github.io/async/v3/queue.js.html#line89)
- name: race
  id: index#race
  summary: Runs the tasks array of functions in parallel, without waiting until the previous function has completed
  description: |-
    ### (static) race(tasks, callback)

    ``` javascript
    import race from 'async/race';
    ```

    Runs the `tasks` array of functions in parallel, without waiting until the previous function has completed. Once any of the `tasks` complete or pass an error to its callback, the main `callback` is immediately called. It's equivalent to `Promise.race()`.

    #### Parameters:

    | Name       | Type     | Description                                                                                                                                                           |
    |------------|----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `tasks`    | Array    | An array containing [async functions](https://caolan.github.io/async/v3/global.html) to run. Each function can complete with an optional `result` value.              |
    | `callback` | function | A callback to run once any of the functions have completed. This function gets an error or result from the first function that completed. Invoked with (err, result). |

    #### Returns:

    undefined

    #### Example

    ``` javascript
    async.race([
        function(callback) {
            setTimeout(function() {
                callback(null, 'one');
            }, 200);
        },
        function(callback) {
            setTimeout(function() {
                callback(null, 'two');
            }, 100);
        }
    ],
    // main callback
    function(err, result) {
        // the result will be equal to 'two' as it finishes earlier
    });
    ```

    Source:

    [race.js](https://caolan.github.io/async/v3/race.js.html), [line 5](https://caolan.github.io/async/v3/race.js.html#line5)
- name: reduce
  id: index#reduce
  summary: Reduces coll into a single value using an async iteratee to return each successive step
  description: |-
    ### (static) reduce(coll, memo, iteratee, callbackopt) → {Promise}

    ``` javascript
    import reduce from 'async/reduce';
    ```

    Reduces `coll` into a single value using an async `iteratee` to return each successive step. `memo` is the initial state of the reduction. This function only operates in series.

    For performance reasons, it may make sense to split a call to this function into a parallel map, and then use the normal `Array.prototype.reduce` on the results. This function is for situations where each step in the reduction needs to be async; if you can get the data before reducing it, then it's probably a good idea to do so.

    Alias:

    foldl

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                                                                                                                      |
    |------------|------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                                                                                                                                                    |
    | `memo`     | \*                                                               | The initial state of the reduction.                                                                                                                                                                                                                                                                                              |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A function applied to each item in the array to produce the next step in the reduction. The `iteratee` should complete with the next state of the reduction. If the iteratee complete with an error, the reduction is stopped and the main `callback` is immediately called with the error. Invoked with (memo, item, callback). |
    | `callback` | function \<optional\>                                            | A callback which is called after all the `iteratee` functions have finished. Result is the reduced value. Invoked with (err, result).                                                                                                                                                                                            |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    #### Example

    ``` javascript
    async.reduce([1,2,3], 0, function(memo, item, callback) {
        // pointless async:
        process.nextTick(function() {
            callback(null, memo + item)
        });
    }, function(err, result) {
        // result is now equal to the last value of memo, which is 6
    });
    ```

    Source:

    [reduce.js](https://caolan.github.io/async/v3/reduce.js.html), [line 6](https://caolan.github.io/async/v3/reduce.js.html#line6)
- name: reduceRight
  id: index#reduceRight
  summary: Same as reduce, only operates on array in reverse order
  description: |-
    ### (static) reduceRight(array, memo, iteratee, callbackopt) → {Promise}

    ``` javascript
    import reduceRight from 'async/reduceRight';
    ```

    Same as [`reduce`](#reduce), only operates on `array` in reverse order.

    Alias:

    foldr

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                                                                                                                      |
    |------------|------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `array`    | Array                                                            | A collection to iterate over.                                                                                                                                                                                                                                                                                                    |
    | `memo`     | \*                                                               | The initial state of the reduction.                                                                                                                                                                                                                                                                                              |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A function applied to each item in the array to produce the next step in the reduction. The `iteratee` should complete with the next state of the reduction. If the iteratee complete with an error, the reduction is stopped and the main `callback` is immediately called with the error. Invoked with (memo, item, callback). |
    | `callback` | function \<optional\>                                            | A callback which is called after all the `iteratee` functions have finished. Result is the reduced value. Invoked with (err, result).                                                                                                                                                                                            |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    Source:

    [reduceRight.js](https://caolan.github.io/async/v3/reduceRight.js.html), [line 3](https://caolan.github.io/async/v3/reduceRight.js.html#line3)

    See:

    [async.reduce](#reduce)
- name: reflect
  id: index#reflect
  summary: Wraps the async function in another function that always completes with a result object, even when it errors
  description: |-
    ### (static) reflect(fn) → {function}

    ``` javascript
    import reflect from 'async/reflect';
    ```

    Wraps the async function in another function that always completes with a result object, even when it errors.

    The result object has either the property `error` or `value`.

    #### Parameters:

    | Name | Type                                                             | Description                         |
    |------|------------------------------------------------------------------|-------------------------------------|
    | `fn` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | The async function you want to wrap |

    #### Returns:

    - A function that always passes null to it's callback as the error. The second argument to the callback will be an `object` with either an `error` or a `value` property.

    Type

    function

    #### Example

    ``` javascript
    async.parallel([
        async.reflect(function(callback) {
            // do some stuff ...
            callback(null, 'one');
        }),
        async.reflect(function(callback) {
            // do some more stuff but error ...
            callback('bad stuff happened');
        }),
        async.reflect(function(callback) {
            // do some more stuff ...
            callback(null, 'two');
        })
    ],
    // optional callback
    function(err, results) {
        // values
        // results[0].value = 'one'
        // results[1].error = 'bad stuff happened'
        // results[2].value = 'two'
    });
    ```

    Source:

    [reflect.js](https://caolan.github.io/async/v3/reflect.js.html), [line 4](https://caolan.github.io/async/v3/reflect.js.html#line4)
- name: reflectAll
  id: index#reflectAll
  summary: A helper function that wraps an array or an object of functions with reflect
  description: |-
    ### (static) reflectAll(tasks) → {Array}

    ``` javascript
    import reflectAll from 'async/reflectAll';
    ```

    A helper function that wraps an array or an object of functions with `reflect`.

    #### Parameters:

    | Name    | Type                        | Description                                                                                                    |
    |---------|-----------------------------|----------------------------------------------------------------------------------------------------------------|
    | `tasks` | Array \| Object \| Iterable | The collection of [async functions](https://caolan.github.io/async/v3/global.html) to wrap in `async.reflect`. |

    #### Returns:

    Returns an array of async functions, each wrapped in `async.reflect`

    Type

    Array

    #### Example

    ``` javascript
    let tasks = [
        function(callback) {
            setTimeout(function() {
                callback(null, 'one');
            }, 200);
        },
        function(callback) {
            // do some more stuff but error ...
            callback(new Error('bad stuff happened'));
        },
        function(callback) {
            setTimeout(function() {
                callback(null, 'two');
            }, 100);
        }
    ];

    async.parallel(async.reflectAll(tasks),
    // optional callback
    function(err, results) {
        // values
        // results[0].value = 'one'
        // results[1].error = Error('bad stuff happened')
        // results[2].value = 'two'
    });

    // an example using an object instead of an array
    let tasks = {
        one: function(callback) {
            setTimeout(function() {
                callback(null, 'one');
            }, 200);
        },
        two: function(callback) {
            callback('two');
        },
        three: function(callback) {
            setTimeout(function() {
                callback(null, 'three');
            }, 100);
        }
    };

    async.parallel(async.reflectAll(tasks),
    // optional callback
    function(err, results) {
        // values
        // results.one.value = 'one'
        // results.two.error = 'two'
        // results.three.value = 'three'
    });
    ```

    Source:

    [reflectAll.js](https://caolan.github.io/async/v3/reflectAll.js.html), [line 3](https://caolan.github.io/async/v3/reflectAll.js.html#line3)

    See:

    [async.reflect](#reflect)
- name: reject
  id: index#reject
  summary: The opposite of filter
  description: |-
    ### (static) reject(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import reject from 'async/reject';
    ```

    The opposite of [`filter`](#filter). Removes values that pass an `async` truth test.

    #### Parameters:

    | Name       | Type                                         | Description                                                                                                                                   |
    |------------|----------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object | A collection to iterate over.                                                                                                                 |
    | `iteratee` | function                                     | An async truth test to apply to each item in `coll`. The should complete with a boolean value as its `result`. Invoked with (item, callback). |
    | `callback` | function \<optional\>                        | A callback which is called after all the `iteratee` functions have finished. Invoked with (err, results).                                     |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    #### Example

    ``` javascript
    async.reject(['file1','file2','file3'], function(filePath, callback) {
        fs.access(filePath, function(err) {
            callback(null, !err)
        });
    }, function(err, results) {
        // results now equals an array of missing files
        createFiles(results);
    });
    ```

    Source:

    [reject.js](https://caolan.github.io/async/v3/reject.js.html), [line 5](https://caolan.github.io/async/v3/reject.js.html#line5)

    See:

    [async.filter](#filter)
- name: rejectLimit
  id: index#rejectLimit
  summary: The same as reject but runs a maximum of limit async operations at a time
  description: |-
    ### (static) rejectLimit(coll, limit, iteratee, callbackopt) → {Promise}

    ``` javascript
    import rejectLimit from 'async/rejectLimit';
    ```

    The same as [`reject`](#reject) but runs a maximum of `limit` async operations at a time.

    #### Parameters:

    | Name       | Type                                         | Description                                                                                                                                   |
    |------------|----------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object | A collection to iterate over.                                                                                                                 |
    | `limit`    | number                                       | The maximum number of async operations at a time.                                                                                             |
    | `iteratee` | function                                     | An async truth test to apply to each item in `coll`. The should complete with a boolean value as its `result`. Invoked with (item, callback). |
    | `callback` | function \<optional\>                        | A callback which is called after all the `iteratee` functions have finished. Invoked with (err, results).                                     |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    Source:

    [rejectLimit.js](https://caolan.github.io/async/v3/rejectLimit.js.html), [line 4](https://caolan.github.io/async/v3/rejectLimit.js.html#line4)

    See:

    [async.reject](#reject)
- name: rejectSeries
  id: index#rejectSeries
  summary: The same as reject but runs only a single async operation at a time
  description: |-
    ### (static) rejectSeries(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import rejectSeries from 'async/rejectSeries';
    ```

    The same as [`reject`](#reject) but runs only a single async operation at a time.

    #### Parameters:

    | Name       | Type                                         | Description                                                                                                                                   |
    |------------|----------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object | A collection to iterate over.                                                                                                                 |
    | `iteratee` | function                                     | An async truth test to apply to each item in `coll`. The should complete with a boolean value as its `result`. Invoked with (item, callback). |
    | `callback` | function \<optional\>                        | A callback which is called after all the `iteratee` functions have finished. Invoked with (err, results).                                     |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    Source:

    [rejectSeries.js](https://caolan.github.io/async/v3/rejectSeries.js.html), [line 5](https://caolan.github.io/async/v3/rejectSeries.js.html#line5)

    See:

    [async.reject](#reject)
- name: retry
  id: index#retry
  summary: Attempts to get a successful response from task no more than times times before returning an error
  description: |-
    ### (static) retry(optsopt, task, callbackopt) → {Promise}

    ``` javascript
    import retry from 'async/retry';
    ```

    Attempts to get a successful response from `task` no more than `times` times before returning an error. If the task is successful, the `callback` will be passed the result of the successful task. If all attempts fail, the callback will be passed the error and result (if any) of the final attempt.

    #### Parameters:

    [TABLE]

    #### Returns:

    a promise if no callback provided

    Type

    Promise

    #### Example

    ``` javascript
    // The `retry` function can be used as a stand-alone control flow by passing
    // a callback, as shown below:

    // try calling apiMethod 3 times
    async.retry(3, apiMethod, function(err, result) {
        // do something with the result
    });

    // try calling apiMethod 3 times, waiting 200 ms between each retry
    async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
        // do something with the result
    });

    // try calling apiMethod 10 times with exponential backoff
    // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
    async.retry({
      times: 10,
      interval: function(retryCount) {
        return 50 * Math.pow(2, retryCount);
      }
    }, apiMethod, function(err, result) {
        // do something with the result
    });

    // try calling apiMethod the default 5 times no delay between each retry
    async.retry(apiMethod, function(err, result) {
        // do something with the result
    });

    // try calling apiMethod only when error condition satisfies, all other
    // errors will abort the retry control flow and return to final callback
    async.retry({
      errorFilter: function(err) {
        return err.message === 'Temporary error'; // only retry on a specific error
      }
    }, apiMethod, function(err, result) {
        // do something with the result
    });

    // to retry individual methods that are not as reliable within other
    // control flow functions, use the `retryable` wrapper:
    async.auto({
        users: api.getUsers.bind(api),
        payments: async.retryable(3, api.getPayments.bind(api))
    }, function(err, results) {
        // do something with the results
    });
    ```

    Source:

    [retry.js](https://caolan.github.io/async/v3/retry.js.html), [line 10](https://caolan.github.io/async/v3/retry.js.html#line10)

    See:

    [async.retryable](#retryable)
- name: retryable
  id: index#retryable
  summary: A close relative of retry
  description: |-
    ### (static) retryable(optsopt, task) → {[AsyncFunction](https://caolan.github.io/async/v3/global.html)}

    ``` javascript
    import retryable from 'async/retryable';
    ```

    A close relative of [`retry`](#retry). This method wraps a task and makes it retryable, rather than immediately calling it with retries.

    #### Parameters:

    | Name   | Type                                                             | Default                     | Description                                                                                                                                         |
    |--------|------------------------------------------------------------------|-----------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|
    | `opts` | Object \| number \<optional\>                                    | {times: 5, interval: 0}\| 5 | optional options, exactly the same as from `retry`, except for a `opts.arity` that is the arity of the `task` function, defaulting to `task.length` |
    | `task` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  |                             | the asynchronous function to wrap. This function will be passed any arguments passed to the returned wrapper. Invoked with (...args, callback).     |

    #### Returns:

    The wrapped function, which when invoked, will retry on an error, based on the parameters specified in `opts`. This function will accept the same parameters as `task`.

    Type

    [AsyncFunction](https://caolan.github.io/async/v3/global.html)

    #### Example

    ``` javascript
    async.auto({
        dep1: async.retryable(3, getFromFlakyService),
        process: ["dep1", async.retryable(3, function (results, cb) {
            maybeProcessData(results.dep1, cb);
        })]
    }, callback);
    ```

    Source:

    [retryable.js](https://caolan.github.io/async/v3/retryable.js.html), [line 6](https://caolan.github.io/async/v3/retryable.js.html#line6)

    See:

    [async.retry](#retry)
- name: seq
  id: index#seq
  summary: Version of the compose function that is more natural to read
  description: |-
    ### (static) seq(…functions) → {function}

    ``` javascript
    import seq from 'async/seq';
    ```

    Version of the compose function that is more natural to read. Each function consumes the return value of the previous function. It is the equivalent of [compose](#compose) with the arguments reversed.

    Each function is executed with the `this` binding of the composed function.

    #### Parameters:

    | Name        | Type                                                             | Description                           |
    |-------------|------------------------------------------------------------------|---------------------------------------|
    | `functions` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | the asynchronous functions to compose |

    #### Returns:

    a function that composes the `functions` in order

    Type

    function

    #### Example

    ``` javascript
    // Requires lodash (or underscore), express3 and dresende's orm2.
    // Part of an app, that fetches cats of the logged user.
    // This example uses `seq` function to avoid overnesting and error
    // handling clutter.
    app.get('/cats', function(request, response) {
        var User = request.models.User;
        async.seq(
            _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
            function(user, fn) {
                user.getCats(fn);      // 'getCats' has signature (callback(err, data))
            }
        )(req.session.user_id, function (err, cats) {
            if (err) {
                console.error(err);
                response.json({ status: 'error', message: err.message });
            } else {
                response.json({ status: 'ok', message: 'Cats found', data: cats });
            }
        });
    });
    ```

    Source:

    [seq.js](https://caolan.github.io/async/v3/seq.js.html), [line 5](https://caolan.github.io/async/v3/seq.js.html#line5)

    See:

    [async.compose](#compose)
- name: series
  id: index#series
  summary: Run the functions in the tasks collection in series, each one running once the previous function has completed
  description: |-
    ### (static) series(tasks, callbackopt) → {Promise}

    ``` javascript
    import series from 'async/series';
    ```

    Run the functions in the `tasks` collection in series, each one running once the previous function has completed. If any functions in the series pass an error to its callback, no more functions are run, and `callback` is immediately called with the value of the error. Otherwise, `callback` receives an array of results when `tasks` have completed.

    It is also possible to use an object instead of an array. Each property will be run as a function, and the results will be passed to the final `callback` as an object instead of an array. This can be a more readable way of handling results from async.series.

    **Note** that while many implementations preserve the order of object properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6) explicitly states that

    > The mechanics and order of enumerating the properties is not specified.

    So if you rely on the order in which your series of functions are executed, and want this to work on all platforms, consider using an array.

    #### Parameters:

    | Name       | Type                                         | Description                                                                                                                                                                                                       |
    |------------|----------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `tasks`    | Array \| Iterable \| AsyncIterable \| Object | A collection containing [async functions](https://caolan.github.io/async/v3/global.html) to run in series. Each function can complete with any number of optional `result` values.                                |
    | `callback` | function \<optional\>                        | An optional callback to run once all the functions have completed. This function gets a results array (or object) containing all the result arguments passed to the `task` callbacks. Invoked with (err, result). |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    #### Example

    ``` javascript
    async.series([
        function(callback) {
            // do some stuff ...
            callback(null, 'one');
        },
        function(callback) {
            // do some more stuff ...
            callback(null, 'two');
        }
    ],
    // optional callback
    function(err, results) {
        // results is now equal to ['one', 'two']
    });

    async.series({
        one: function(callback) {
            setTimeout(function() {
                callback(null, 1);
            }, 200);
        },
        two: function(callback){
            setTimeout(function() {
                callback(null, 2);
            }, 100);
        }
    }, function(err, results) {
        // results is now equal to: {one: 1, two: 2}
    });
    ```

    Source:

    [series.js](https://caolan.github.io/async/v3/series.js.html), [line 4](https://caolan.github.io/async/v3/series.js.html#line4)
- name: setImmediate
  id: index#setImmediate
  summary: Calls callback on a later loop around the event loop
  description: |-
    ### (static) setImmediate(callback)

    ``` javascript
    import setImmediate from 'async/setImmediate';
    ```

    Calls `callback` on a later loop around the event loop. In Node.js this just calls `setImmediate`. In the browser it will use `setImmediate` if available, otherwise `setTimeout(callback, 0)`, which means other higher priority events may precede the execution of `callback`.

    This is used internally for browser-compatibility purposes.

    #### Parameters:

    | Name       | Type     | Description                                                                         |
    |------------|----------|-------------------------------------------------------------------------------------|
    | `callback` | function | The function to call on a later loop around the event loop. Invoked with (args...). |
    | `args...`  | \*       | any number of additional arguments to pass to the callback on the next tick.        |

    #### Example

    ``` javascript
    var call_order = [];
    async.nextTick(function() {
        call_order.push('two');
        // call_order now equals ['one','two']
    });
    call_order.push('one');

    async.setImmediate(function (a, b, c) {
        // a, b, and c equal 1, 2, and 3
    }, 1, 2, 3);
    ```

    Source:

    [setImmediate.js](https://caolan.github.io/async/v3/setImmediate.js.html), [line 3](https://caolan.github.io/async/v3/setImmediate.js.html#line3)

    See:

    [async.nextTick](#nextTick)
- name: some
  id: index#some
  summary: Returns true if at least one element in the coll satisfies an async test
  description: |-
    ### (static) some(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import some from 'async/some';
    ```

    Returns `true` if at least one element in the `coll` satisfies an async test. If any iteratee call returns `true`, the main `callback` is immediately called.

    Alias:

    any

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                           |
    |------------|------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                                                         |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async truth test to apply to each item in the collections in parallel. The iteratee should complete with a boolean `result` value. Invoked with (item, callback).                                                                  |
    | `callback` | function \<optional\>                                            | A callback which is called as soon as any iteratee returns `true`, or after all the iteratee functions have finished. Result will be either `true` or `false` depending on the values of the async tests. Invoked with (err, result). |

    #### Returns:

    a promise, if no callback provided

    Type

    Promise

    #### Example

    ``` javascript
    async.some(['file1','file2','file3'], function(filePath, callback) {
        fs.access(filePath, function(err) {
            callback(null, !err)
        });
    }, function(err, result) {
        // if result is true then at least one of the files exists
    });
    ```

    Source:

    [some.js](https://caolan.github.io/async/v3/some.js.html), [line 5](https://caolan.github.io/async/v3/some.js.html#line5)
- name: someLimit
  id: index#someLimit
  summary: The same as some but runs a maximum of limit async operations at a time
  description: |-
    ### (static) someLimit(coll, limit, iteratee, callbackopt) → {Promise}

    ``` javascript
    import someLimit from 'async/someLimit';
    ```

    The same as [`some`](#some) but runs a maximum of `limit` async operations at a time.

    Alias:

    anyLimit

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                           |
    |------------|------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                                                         |
    | `limit`    | number                                                           | The maximum number of async operations at a time.                                                                                                                                                                                     |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async truth test to apply to each item in the collections in parallel. The iteratee should complete with a boolean `result` value. Invoked with (item, callback).                                                                  |
    | `callback` | function \<optional\>                                            | A callback which is called as soon as any iteratee returns `true`, or after all the iteratee functions have finished. Result will be either `true` or `false` depending on the values of the async tests. Invoked with (err, result). |

    #### Returns:

    a promise, if no callback provided

    Type

    Promise

    Source:

    [someLimit.js](https://caolan.github.io/async/v3/someLimit.js.html), [line 5](https://caolan.github.io/async/v3/someLimit.js.html#line5)

    See:

    [async.some](#some)
- name: someSeries
  id: index#someSeries
  summary: The same as some but runs only a single async operation at a time
  description: |-
    ### (static) someSeries(coll, iteratee, callbackopt) → {Promise}

    ``` javascript
    import someSeries from 'async/someSeries';
    ```

    The same as [`some`](#some) but runs only a single async operation at a time.

    Alias:

    anySeries

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                           |
    |------------|------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                                                         |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async truth test to apply to each item in the collections in series. The iteratee should complete with a boolean `result` value. Invoked with (item, callback).                                                                    |
    | `callback` | function \<optional\>                                            | A callback which is called as soon as any iteratee returns `true`, or after all the iteratee functions have finished. Result will be either `true` or `false` depending on the values of the async tests. Invoked with (err, result). |

    #### Returns:

    a promise, if no callback provided

    Type

    Promise

    Source:

    [someSeries.js](https://caolan.github.io/async/v3/someSeries.js.html), [line 5](https://caolan.github.io/async/v3/someSeries.js.html#line5)

    See:

    [async.some](#some)
- name: sortBy
  id: index#sortBy
  summary: Sorts a list by the results of running each coll value through an async iteratee
  description: |-
    ### (static) sortBy(coll, iteratee, callback) → {Promise}

    ``` javascript
    import sortBy from 'async/sortBy';
    ```

    Sorts a list by the results of running each `coll` value through an async `iteratee`.

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                        |
    |------------|------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`     | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                                                                                                      |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function to apply to each item in `coll`. The iteratee should complete with a value to use as the sort criteria as its `result`. Invoked with (item, callback).                                                           |
    | `callback` | function                                                         | A callback which is called after all the `iteratee` functions have finished, or an error occurs. Results is the items from the original `coll` sorted by the values returned by the `iteratee` calls. Invoked with (err, results). |

    #### Returns:

    a promise, if no callback passed

    Type

    Promise

    #### Example

    ``` javascript
    async.sortBy(['file1','file2','file3'], function(file, callback) {
        fs.stat(file, function(err, stats) {
            callback(err, stats.mtime);
        });
    }, function(err, results) {
        // results is now the original array of files sorted by
        // modified date
    });

    // By modifying the callback parameter the
    // sorting order can be influenced:

    // ascending order
    async.sortBy([1,9,3,5], function(x, callback) {
        callback(null, x);
    }, function(err,result) {
        // result callback
    });

    // descending order
    async.sortBy([1,9,3,5], function(x, callback) {
        callback(null, x*-1);    //<- x*-1 instead of x, turns the order around
    }, function(err,result) {
        // result callback
    });
    ```

    Source:

    [sortBy.js](https://caolan.github.io/async/v3/sortBy.js.html), [line 5](https://caolan.github.io/async/v3/sortBy.js.html#line5)
- name: timeout
  id: index#timeout
  summary: Sets a time limit on an asynchronous function
  description: |-
    ### (static) timeout(asyncFn, milliseconds, infoopt) → {[AsyncFunction](https://caolan.github.io/async/v3/global.html)}

    ``` javascript
    import timeout from 'async/timeout';
    ```

    Sets a time limit on an asynchronous function. If the function does not call its callback within the specified milliseconds, it will be called with a timeout error. The code property for the error object will be `'ETIMEDOUT'`.

    #### Parameters:

    | Name           | Type                                                             | Description                                                                                      |
    |----------------|------------------------------------------------------------------|--------------------------------------------------------------------------------------------------|
    | `asyncFn`      |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | The async function to limit in time.                                                             |
    | `milliseconds` | number                                                           | The specified time limit.                                                                        |
    | `info`         | \* \<optional\>                                                  | Any variable you want attached (`string`, `object`, etc) to timeout Error for more information.. |

    #### Returns:

    Returns a wrapped function that can be used with any of the control flow functions. Invoke this function with the same parameters as you would `asyncFunc`.

    Type

    [AsyncFunction](https://caolan.github.io/async/v3/global.html)

    #### Example

    ``` javascript
    function myFunction(foo, callback) {
        doAsyncTask(foo, function(err, data) {
            // handle errors
            if (err) return callback(err);

            // do some stuff ...

            // return processed data
            return callback(null, data);
        });
    }

    var wrapped = async.timeout(myFunction, 1000);

    // call `wrapped` as you would `myFunction`
    wrapped({ bar: 'bar' }, function(err, data) {
        // if `myFunction` takes < 1000 ms to execute, `err`
        // and `data` will have their expected values

        // else `err` will be an Error with the code 'ETIMEDOUT'
    });
    ```

    Source:

    [timeout.js](https://caolan.github.io/async/v3/timeout.js.html), [line 4](https://caolan.github.io/async/v3/timeout.js.html#line4)
- name: times
  id: index#times
  summary: Calls the iteratee function n times, and accumulates results in the same manner you would use with map
  description: |-
    ### (static) times(n, iteratee, callback) → {Promise}

    ``` javascript
    import times from 'async/times';
    ```

    Calls the `iteratee` function `n` times, and accumulates results in the same manner you would use with [map](#map).

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                       |
    |------------|------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
    | `n`        | number                                                           | The number of times to run the function.                                                          |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | The async function to call `n` times. Invoked with the iteration index and a callback: (n, next). |
    | `callback` | function                                                         | see [map](#map).                                                                                  |

    #### Returns:

    a promise, if no callback is provided

    Type

    Promise

    #### Example

    ``` javascript
    // Pretend this is some complicated async factory
    var createUser = function(id, callback) {
        callback(null, {
            id: 'user' + id
        });
    };

    // generate 5 users
    async.times(5, function(n, next) {
        createUser(n, function(err, user) {
            next(err, user);
        });
    }, function(err, users) {
        // we should now have 5 users
    });
    ```

    Source:

    [times.js](https://caolan.github.io/async/v3/times.js.html), [line 3](https://caolan.github.io/async/v3/times.js.html#line3)

    See:

    [async.map](#map)
- name: timesLimit
  id: index#timesLimit
  summary: The same as times but runs a maximum of limit async operations at a time
  description: |-
    ### (static) timesLimit(count, limit, iteratee, callback) → {Promise}

    ``` javascript
    import timesLimit from 'async/timesLimit';
    ```

    The same as [times](#times) but runs a maximum of `limit` async operations at a time.

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                       |
    |------------|------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
    | `count`    | number                                                           | The number of times to run the function.                                                          |
    | `limit`    | number                                                           | The maximum number of async operations at a time.                                                 |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | The async function to call `n` times. Invoked with the iteration index and a callback: (n, next). |
    | `callback` | function                                                         | see [async.map](#map).                                                                            |

    #### Returns:

    a promise, if no callback is provided

    Type

    Promise

    Source:

    [timesLimit.js](https://caolan.github.io/async/v3/timesLimit.js.html), [line 5](https://caolan.github.io/async/v3/timesLimit.js.html#line5)

    See:

    [async.times](#times)
- name: timesSeries
  id: index#timesSeries
  summary: The same as times but runs only a single async operation at a time
  description: |-
    ### (static) timesSeries(n, iteratee, callback) → {Promise}

    ``` javascript
    import timesSeries from 'async/timesSeries';
    ```

    The same as [times](#times) but runs only a single async operation at a time.

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                       |
    |------------|------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
    | `n`        | number                                                           | The number of times to run the function.                                                          |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | The async function to call `n` times. Invoked with the iteration index and a callback: (n, next). |
    | `callback` | function                                                         | see [map](#map).                                                                                  |

    #### Returns:

    a promise, if no callback is provided

    Type

    Promise

    Source:

    [timesSeries.js](https://caolan.github.io/async/v3/timesSeries.js.html), [line 3](https://caolan.github.io/async/v3/timesSeries.js.html#line3)

    See:

    [async.times](#times)
- name: transform
  id: index#transform
  summary: A relative of reduce
  description: |-
    ### (static) transform(coll, accumulatoropt, iteratee, callbackopt) → {Promise}

    ``` javascript
    import transform from 'async/transform';
    ```

    A relative of `reduce`. Takes an Object or Array, and iterates over each element in parallel, each step potentially mutating an `accumulator` value. The type of the accumulator defaults to the type of collection passed in.

    #### Parameters:

    | Name          | Type                                                             | Description                                                                                                                                     |
    |---------------|------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------|
    | `coll`        | Array \| Iterable \| AsyncIterable \| Object                     | A collection to iterate over.                                                                                                                   |
    | `accumulator` | \* \<optional\>                                                  | The initial state of the transform. If omitted, it will default to an empty Object or Array, depending on the type of `coll`                    |
    | `iteratee`    |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | A function applied to each item in the collection that potentially modifies the accumulator. Invoked with (accumulator, item, key, callback).   |
    | `callback`    | function \<optional\>                                            | A callback which is called after all the `iteratee` functions have finished. Result is the transformed accumulator. Invoked with (err, result). |

    #### Returns:

    a promise, if no callback provided

    Type

    Promise

    #### Examples

    ``` javascript
    async.transform([1,2,3], function(acc, item, index, callback) {
        // pointless async:
        process.nextTick(function() {
            acc[index] = item * 2
            callback(null)
        });
    }, function(err, result) {
        // result is now equal to [2, 4, 6]
    });
    ```

    ``` javascript
    async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {
        setImmediate(function () {
            obj[key] = val * 2;
            callback();
        })
    }, function (err, result) {
        // result is equal to {a: 2, b: 4, c: 6}
    })
    ```

    Source:

    [transform.js](https://caolan.github.io/async/v3/transform.js.html), [line 6](https://caolan.github.io/async/v3/transform.js.html#line6)

    # Control Flow

    A collection of `async` functions for controlling the flow through a script.

    Source:

    [index.js](https://caolan.github.io/async/v3/index.js.html), [line 56](https://caolan.github.io/async/v3/index.js.html#line56)

    ## Methods
- name: tryEach
  id: index#tryEach
  summary: It runs each task in series but stops whenever any of the functions were successful
  description: |-
    ### (static) tryEach(tasks, callbackopt) → {Promise}

    ``` javascript
    import tryEach from 'async/tryEach';
    ```

    It runs each task in series but stops whenever any of the functions were successful. If one of the tasks were successful, the `callback` will be passed the result of the successful task. If all tasks fail, the callback will be passed the error and result (if any) of the final attempt.

    #### Parameters:

    | Name       | Type                                         | Description                                                                                                                                                                                                           |
    |------------|----------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `tasks`    | Array \| Iterable \| AsyncIterable \| Object | A collection containing functions to run, each function is passed a `callback(err, result)` it must call on completion with an error `err` (which can be `null`) and an optional `result` value.                      |
    | `callback` | function \<optional\>                        | An optional callback which is called when one of the tasks has succeeded, or all have failed. It receives the `err` and `result` arguments of the last attempt at completing the `task`. Invoked with (err, results). |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    #### Example

    ``` javascript
    async.tryEach([
        function getDataFromFirstWebsite(callback) {
            // Try getting the data from the first website
            callback(err, data);
        },
        function getDataFromSecondWebsite(callback) {
            // First website failed,
            // Try getting the data from the backup website
            callback(err, data);
        }
    ],
    // optional callback
    function(err, results) {
        Now do something with the data.
    });
    ```

    Source:

    [tryEach.js](https://caolan.github.io/async/v3/tryEach.js.html), [line 5](https://caolan.github.io/async/v3/tryEach.js.html#line5)
- name: unmemoize
  id: index#unmemoize
  summary: Undoes a memoized function, reverting it to the original, unmemoized form
  description: "### (static) unmemoize(fn) → {[AsyncFunction](https://caolan.github.io/async/v3/global.html)}\n\n``` javascript\nimport unmemoize from 'async/unmemoize';\n```\n\nUndoes a [memoize](#memoize)d function, reverting it to the original, unmemoized form. Handy for testing.\n\n#### Parameters:\n\n| Name | Type                                                             | Description           |\n|------|------------------------------------------------------------------|-----------------------|\n| `fn` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | the memoized function |\n\n#### Returns:\n\na function that calls the original unmemoized function\n\nType\n\n[AsyncFunction](https://caolan.github.io/async/v3/global.html)\n\nSource:\n\n[unmemoize.js](https://caolan.github.io/async/v3/unmemoize.js.html), [line 1](https://caolan.github.io/async/v3/unmemoize.js.html#line1)\n\nSee:\n\n[async.memoize](#memoize)\n\n© 2010–2018 Caolan McMahon  \nLicensed under the MIT License.  \n[https://caolan.github.io/async/v3/docs.html](https://caolan.github.io/async/v3/docs.html)"
- name: until
  id: index#until
  summary: Repeatedly call iteratee until test returns true
  description: |-
    ### (static) until(test, iteratee, callbackopt) → {Promise}

    ``` javascript
    import until from 'async/until';
    ```

    Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when stopped, or an error occurs. `callback` will be passed an error and any arguments passed to the final `iteratee`'s callback.

    The inverse of [whilst](#whilst).

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                                      |
    |------------|------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `test`     |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | asynchronous truth test to perform before each execution of `iteratee`. Invoked with (callback).                                                                                                                                                 |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function which is called each time `test` fails. Invoked with (callback).                                                                                                                                                               |
    | `callback` | function \<optional\>                                            | A callback which is called after the test function has passed and repeated execution of `iteratee` has stopped. `callback` will be passed an error and any arguments passed to the final `iteratee`'s callback. Invoked with (err, \[results\]); |

    #### Returns:

    a promise, if a callback is not passed

    Type

    Promise

    #### Example

    ``` javascript
    const results = []
    let finished = false
    async.until(function test(page, cb) {
        cb(null, finished)
    }, function iter(next) {
        fetchPage(url, (err, body) => {
            if (err) return next(err)
            results = results.concat(body.objects)
            finished = !!body.next
            next(err)
        })
    }, function done (err) {
        // all pages have been fetched
    })
    ```

    Source:

    [until.js](https://caolan.github.io/async/v3/until.js.html), [line 4](https://caolan.github.io/async/v3/until.js.html#line4)

    See:

    [async.whilst](#whilst)
- name: waterfall
  id: index#waterfall
  summary: Runs the tasks array of functions in series, each passing their results to the next in the array
  description: |-
    ### (static) waterfall(tasks, callbackopt)

    ``` javascript
    import waterfall from 'async/waterfall';
    ```

    Runs the `tasks` array of functions in series, each passing their results to the next in the array. However, if any of the `tasks` pass an error to their own callback, the next function is not executed, and the main `callback` is immediately called with the error.

    #### Parameters:

    | Name       | Type                  | Description                                                                                                                                                                                                                         |
    |------------|-----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `tasks`    | Array                 | An array of [async functions](https://caolan.github.io/async/v3/global.html) to run. Each function should complete with any number of `result` values. The `result` values will be passed as arguments, in order, to the next task. |
    | `callback` | function \<optional\> | An optional callback to run once all the functions have completed. This will be passed the results of the last task's callback. Invoked with (err, \[results\]).                                                                    |

    #### Returns:

    undefined

    #### Example

    ``` javascript
    async.waterfall([
        function(callback) {
            callback(null, 'one', 'two');
        },
        function(arg1, arg2, callback) {
            // arg1 now equals 'one' and arg2 now equals 'two'
            callback(null, 'three');
        },
        function(arg1, callback) {
            // arg1 now equals 'three'
            callback(null, 'done');
        }
    ], function (err, result) {
        // result now equals 'done'
    });

    // Or, with named functions:
    async.waterfall([
        myFirstFunction,
        mySecondFunction,
        myLastFunction,
    ], function (err, result) {
        // result now equals 'done'
    });
    function myFirstFunction(callback) {
        callback(null, 'one', 'two');
    }
    function mySecondFunction(arg1, arg2, callback) {
        // arg1 now equals 'one' and arg2 now equals 'two'
        callback(null, 'three');
    }
    function myLastFunction(arg1, callback) {
        // arg1 now equals 'three'
        callback(null, 'done');
    }
    ```

    Source:

    [waterfall.js](https://caolan.github.io/async/v3/waterfall.js.html), [line 7](https://caolan.github.io/async/v3/waterfall.js.html#line7)
- name: whilst
  id: index#whilst
  summary: Repeatedly call iteratee, while test returns true
  description: |-
    ### (static) whilst(test, iteratee, callbackopt) → {Promise}

    ``` javascript
    import whilst from 'async/whilst';
    ```

    Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when stopped, or an error occurs.

    #### Parameters:

    | Name       | Type                                                             | Description                                                                                                                                                                                                                                      |
    |------------|------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `test`     |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | asynchronous truth test to perform before each execution of `iteratee`. Invoked with ().                                                                                                                                                         |
    | `iteratee` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | An async function which is called each time `test` passes. Invoked with (callback).                                                                                                                                                              |
    | `callback` | function \<optional\>                                            | A callback which is called after the test function has failed and repeated execution of `iteratee` has stopped. `callback` will be passed an error and any arguments passed to the final `iteratee`'s callback. Invoked with (err, \[results\]); |

    #### Returns:

    a promise, if no callback is passed

    Type

    Promise

    #### Example

    ``` javascript
    var count = 0;
    async.whilst(
        function test(cb) { cb(null, count < 5); },
        function iter(callback) {
            count++;
            setTimeout(function() {
                callback(null, count);
            }, 1000);
        },
        function (err, n) {
            // 5 seconds have passed, n = 5
        }
    );
    ```

    Source:

    [whilst.js](https://caolan.github.io/async/v3/whilst.js.html), [line 5](https://caolan.github.io/async/v3/whilst.js.html#line5)

    ## Type Definitions

    ### QueueObject

    ``` javascript
    import queue from 'async/queue';
    ```

    A queue of tasks for the worker function to complete.

    #### Type:

    - Iterable

    #### Properties:

    | Name           | Type                                                             | Description                                                                                                                                                                                                                                                                                                                           |
    |----------------|------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `length`       | function                                                         | a function returning the number of items waiting to be processed. Invoke with `queue.length()`.                                                                                                                                                                                                                                       |
    | `started`      | boolean                                                          | a boolean indicating whether or not any items have been pushed and processed by the queue.                                                                                                                                                                                                                                            |
    | `running`      | function                                                         | a function returning the number of items currently being processed. Invoke with `queue.running()`.                                                                                                                                                                                                                                    |
    | `workersList`  | function                                                         | a function returning the array of items currently being processed. Invoke with `queue.workersList()`.                                                                                                                                                                                                                                 |
    | `idle`         | function                                                         | a function returning false if there are items waiting or being processed, or true if not. Invoke with `queue.idle()`.                                                                                                                                                                                                                 |
    | `concurrency`  | number                                                           | an integer for determining how many `worker` functions should be run in parallel. This property can be changed after a `queue` is created to alter the concurrency on-the-fly.                                                                                                                                                        |
    | `payload`      | number                                                           | an integer that specifies how many items are passed to the worker function at a time. only applies if this is a [cargo](#cargo) object                                                                                                                                                                                                |
    | `push`         |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | add a new task to the `queue`. Calls `callback` once the `worker` has finished processing the task. Instead of a single task, a `tasks` array can be submitted. The respective callback is used for every task in the list. Invoke with `queue.push(task, [callback])`,                                                               |
    | `unshift`      |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | add a new task to the front of the `queue`. Invoke with `queue.unshift(task, [callback])`.                                                                                                                                                                                                                                            |
    | `pushAsync`    |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | the same as `q.push`, except this returns a promise that rejects if an error occurs.                                                                                                                                                                                                                                                  |
    | `unshirtAsync` |  [AsyncFunction](https://caolan.github.io/async/v3/global.html)  | the same as `q.unshift`, except this returns a promise that rejects if an error occurs.                                                                                                                                                                                                                                               |
    | `remove`       | function                                                         | remove items from the queue that match a test function. The test function will be passed an object with a `data` property, and a `priority` property, if this is a [priorityQueue](#priorityQueue) object. Invoked with `queue.remove(testFn)`, where `testFn` is of the form `function ({data, priority}) {}` and returns a Boolean. |
    | `saturated`    | function                                                         | a function that sets a callback that is called when the number of running workers hits the `concurrency` limit, and further tasks will be queued. If the callback is omitted, `q.saturated()` returns a promise for the next occurrence.                                                                                              |
    | `unsaturated`  | function                                                         | a function that sets a callback that is called when the number of running workers is less than the `concurrency` & `buffer` limits, and further tasks will not be queued. If the callback is omitted, `q.unsaturated()` returns a promise for the next occurrence.                                                                    |
    | `buffer`       | number                                                           | A minimum threshold buffer in order to say that the `queue` is `unsaturated`.                                                                                                                                                                                                                                                         |
    | `empty`        | function                                                         | a function that sets a callback that is called when the last item from the `queue` is given to a `worker`. If the callback is omitted, `q.empty()` returns a promise for the next occurrence.                                                                                                                                         |
    | `drain`        | function                                                         | a function that sets a callback that is called when the last item from the `queue` has returned from the `worker`. If the callback is omitted, `q.drain()` returns a promise for the next occurrence.                                                                                                                                 |
    | `error`        | function                                                         | a function that sets a callback that is called when a task errors. Has the signature `function(error, task)`. If the callback is omitted, `error()` returns a promise that rejects on the next error.                                                                                                                                 |
    | `paused`       | boolean                                                          | a boolean for determining whether the queue is in a paused state.                                                                                                                                                                                                                                                                     |
    | `pause`        | function                                                         | a function that pauses the processing of tasks until `resume()` is called. Invoke with `queue.pause()`.                                                                                                                                                                                                                               |
    | `resume`       | function                                                         | a function that resumes the processing of queued tasks when the queue is paused. Invoke with `queue.resume()`.                                                                                                                                                                                                                        |
    | `kill`         | function                                                         | a function that removes the `drain` callback and empties remaining tasks from the queue forcing it to go idle. No more tasks should be pushed to the queue after calling this function. Invoke with `queue.kill()`.                                                                                                                   |

    Source:

    [queue.js](https://caolan.github.io/async/v3/queue.js.html), [line 4](https://caolan.github.io/async/v3/queue.js.html#line4)

    #### Example

    ``` javascript
    const q = async.queue(worker, 2)
    q.push(item1)
    q.push(item2)
    q.push(item3)
    // queues are iterable, spread into an array to inspect
    const items = [...q] // [item1, item2, item3]
    // or use for of
    for (let item of q) {
        console.log(item)
    }

    q.drain(() => {
        console.log('all done')
    })
    // or
    await q.drain()
    ```

    # Utils

    A collection of `async` utility functions.

    Source:

    [index.js](https://caolan.github.io/async/v3/index.js.html), [line 61](https://caolan.github.io/async/v3/index.js.html#line61)

    ## Methods
