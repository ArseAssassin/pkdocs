---
name: LÖVE
slug: love
text_format: markdown
generator: src:devdocs
version: null
copyright: |-
  © 2006–2020 LÖVE Development Team
  Licensed under the GNU Free Documentation License, Version 1.3.
  https://love2d.org/wiki/Main_Page
homepage: https://love2d.org/
generator_command: doc src:devdocs use love

---
- name: (File):close
  id: (file)-close
  summary: Closes a File
  description: "# (File):close\n\nCloses a [File](file \"File\").\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = File:close( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether closing was successful.\n\n## See Also\n\n- [File](file \"File\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):close](https://love2d.org/wiki/(File):close)"
- name: (File):eof
  id: (file)-eof
  summary: Removed in LÖVE 0.10.0 It has been renamed to File:isEOF
  description: "# (File):eof\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been renamed to [File:isEOF]((file)-iseof \"(File):isEOF\").\n\nIf the end-of-file has been reached\n\n## Function\n\n### Synopsis\n\n``` lua\neof = File:eof( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` eof`  \nWhether EOF has been reached\n\n## See Also\n\n- [File](file \"File\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):eof](https://love2d.org/wiki/(File):eof)"
- name: (File):flush
  id: (file)-flush
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# (File):flush\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nFlushes any buffered written data in the file to the disk.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess, err = File:flush( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the file successfully flushed any buffered data to the disk.\n\n[`string`](string \"string\")` err (nil)`  \nThe error string, if an error occurred and the file could not be flushed.\n\n## See Also\n\n- [File](file \"File\")\n- [File:write]((file)-write \"(File):write\")\n- [File:setBuffer]((file)-setbuffer \"(File):setBuffer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):flush](https://love2d.org/wiki/(File):flush)"
- name: (File):getBuffer
  id: (file)-getbuffer
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# (File):getBuffer\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the buffer mode of a file.\n\n## Function\n\n### Synopsis\n\n``` lua\nmode, size = File:getBuffer( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`BufferMode`](buffermode \"BufferMode\")` mode`  \nThe current buffer mode of the file.\n\n[`number`](number \"number\")` size`  \nThe maximum size in bytes of the file's buffer.\n\n## See Also\n\n- [File](file \"File\")\n- [File:setBuffer]((file)-setbuffer \"(File):setBuffer\")\n- [File:write]((file)-write \"(File):write\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):getBuffer](https://love2d.org/wiki/(File):getBuffer)"
- name: (File):getFilename
  id: (file)-getfilename
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# (File):getFilename\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the filename that the File object was created with. If the file object originated from the [love.filedropped](love.filedropped \"love.filedropped\") callback, the filename will be the full platform-dependent file path.\n\n## Function\n\n### Synopsis\n\n``` lua\nfilename = File:getFilename( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` filename`  \nThe filename of the File.\n\n## See Also\n\n- [File](file \"File\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):getFilename](https://love2d.org/wiki/(File):getFilename)"
- name: (File):getMode
  id: (file)-getmode
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# (File):getMode\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the [FileMode](filemode \"FileMode\") the file has been opened with.\n\n## Function\n\n### Synopsis\n\n``` lua\nmode = File:getMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`FileMode`](filemode \"FileMode\")` mode`  \nThe mode this file has been opened with.\n\n## See Also\n\n- [File](file \"File\")\n- [FileMode](filemode \"FileMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):getMode](https://love2d.org/wiki/(File):getMode)"
- name: (File):getSize
  id: (file)-getsize
  summary: Returns the file size
  description: "# (File):getSize\n\nReturns the [file](file \"File\") size.\n\n## Function\n\n### Synopsis\n\n``` lua\nsize = File:getSize( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` size`  \nThe file size in bytes.\n\n## See Also\n\n- [File](file \"File\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):getSize](https://love2d.org/wiki/(File):getSize)"
- name: (File):isEOF
  id: (file)-iseof
  summary: Available since LÖVE 0.10.0 It has been renamed from File:eof
  description: "# (File):isEOF\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been renamed from [File:eof]((file)-eof \"(File):eof\").\n\nGets whether end-of-file has been reached.\n\n## Function\n\n### Synopsis\n\n``` lua\neof = File:isEOF( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` eof`  \nWhether EOF has been reached.\n\n## See Also\n\n- [File](file \"File\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):isEOF](https://love2d.org/wiki/(File):isEOF)"
- name: (File):isOpen
  id: (file)-isopen
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# (File):isOpen\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the file is open.\n\n## Function\n\n### Synopsis\n\n``` lua\nopen = File:isOpen( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` open`  \nTrue if the file is currently open, false otherwise.\n\n## See Also\n\n- [File](file \"File\")\n- [File:open]((file)-open \"(File):open\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):isOpen](https://love2d.org/wiki/(File):isOpen)"
- name: (File):lines
  id: (file)-lines
  summary: Iterate over all the lines in a file
  description: "# (File):lines\n\nIterate over all the lines in a [file](file \"File\").\n\n## Function\n\n### Synopsis\n\n``` lua\niterator = File:lines( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`function`](function \"function\")` iterator`  \nThe iterator (can be used in for loops).\n\n## See Also\n\n- [File](file \"File\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):lines](https://love2d.org/wiki/(File):lines)"
- name: (File):open
  id: (file)-open
  summary: Open the file for write, read or append
  description: "# (File):open\n\nOpen the file for write, read or append.\n\n## Function\n\n### Synopsis\n\n``` lua\nok, err = File:open( mode )\n```\n\n### Arguments\n\n[`FileMode`](filemode \"FileMode\")` mode`  \nThe mode to open the file in.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` ok`  \nTrue on success, false otherwise.\n\n[`string`](string \"string\")` err`  \nThe error string if an error occurred.\n\n### Notes\n\nIf you are getting the error message \"Could not set write directory\", try setting the save directory. This is done either with [love.filesystem.setIdentity](love.filesystem.setidentity \"love.filesystem.setIdentity\") or by setting the identity field in [love.conf](love.conf \"love.conf\") (only available with love 0.7 or higher).\n\n## See Also\n\n- [File](file \"File\")\n- [FileMode](filemode \"FileMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):open](https://love2d.org/wiki/(File):open)"
- name: (File):read
  id: (file)-read
  summary: Read a number of bytes from a file
  description: "# (File):read\n\nRead a number of bytes from a file.\n\n## Function\n\n### Synopsis\n\n``` lua\ncontents, size = File:read( bytes )\n```\n\n### Arguments\n\n[`number`](number \"number\")` bytes (all)`  \nThe number of bytes to read.\n\n### Returns\n\n[`string`](string \"string\")` contents`  \nThe contents of the read bytes.\n\n[`number`](number \"number\")` size`  \nHow many bytes have been read.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nReads the contents of a file into either a string or a [FileData](filedata \"FileData\") object.\n\n### Synopsis\n\n``` lua\ncontents, size = File:read( container, bytes )\n```\n\n### Arguments\n\n[`ContainerType`](containertype \"ContainerType\")` container`  \nWhat type to return the file's contents as.\n\n[`number`](number \"number\")` bytes (all)`  \nThe number of bytes to read.\n\n### Returns\n\n[`value`](value \"value\")` contents`  \n[FileData](filedata \"FileData\") or string containing the read bytes.\n\n[`number`](number \"number\")` size`  \nHow many bytes have been read.\n\n## See Also\n\n- [File](file \"File\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):read](https://love2d.org/wiki/(File):read)"
- name: (File):seek
  id: (file)-seek
  summary: number pos The position to seek to, relative to start of file
  description: "# (File):seek\n\nSeek to a position in a file\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = File:seek( pos )\n```\n\n### Arguments\n\n[`number`](number \"number\")` pos`  \nThe position to seek to, relative to start of file.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the operation was successful\n\n## See Also\n\n- [File](file \"File\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):seek](https://love2d.org/wiki/(File):seek)"
- name: (File):setBuffer
  id: (file)-setbuffer
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# (File):setBuffer\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the buffer mode for a file opened for writing or appending. Files with buffering enabled will not write data to the disk until the buffer size limit is reached, depending on the buffer mode.\n\n[File:flush]((file)-flush \"(File):flush\") will force any buffered data to be written to the disk.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess, errorstr = File:setBuffer( mode, size )\n```\n\n### Arguments\n\n[`BufferMode`](buffermode \"BufferMode\")` mode`  \nThe buffer mode to use.\n\n[`number`](number \"number\")` size (0)`  \nThe maximum size in bytes of the file's buffer.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the buffer mode was successfully set.\n\n[`string`](string \"string\")` errorstr (nil)`  \nThe error string, if the buffer mode could not be set and an error occurred.\n\n## See Also\n\n- [File](file \"File\")\n- [File:getBuffer]((file)-getbuffer \"(File):getBuffer\")\n- [File:write]((file)-write \"(File):write\")\n- [File:flush]((file)-flush \"(File):flush\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):setBuffer](https://love2d.org/wiki/(File):setBuffer)"
- name: (File):tell
  id: (file)-tell
  summary: Returns the position in the file
  description: "# (File):tell\n\nReturns the position in the file.\n\n## Function\n\n### Synopsis\n\n``` lua\npos = File:tell( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` pos`  \nThe current position.\n\n## See Also\n\n- [File](file \"File\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):tell](https://love2d.org/wiki/(File):tell)"
- name: (File):write
  id: (file)-write
  summary: Write data to a file
  description: "# (File):write\n\nWrite data to a file.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess, err = File:write( data, size )\n```\n\n### Arguments\n\n[`string`](string \"string\")` data`  \nThe string data to write.\n\n[`number`](number \"number\")` size (all)`  \nHow many bytes to write.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the operation was successful.\n\n[`string`](string \"string\")` err`  \nThe error string if an error occurred.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess, err = File:write( data, size )\n```\n\n### Arguments\n\n[`Data`](data \"Data\")` data`  \nThe Data object to write.\n\n[`number`](number \"number\")` size (all)`  \nHow many bytes to write.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the operation was successful.\n\n[`string`](string \"string\")` errorstr`  \nThe error string if an error occurred.\n\n## Notes\n\n**Writing to multiple lines**: In Windows, some text editors (e.g. Notepad before Windows 10 1809) only treat CRLF (\"\\r\\n\") as a new line.\n\n``` lua\n--example\nf = love.filesystem.newFile(\"note.txt\")\nf:open(\"w\")\nfor i = 1, 10 do\n    f:write(\"This is line \"..i..\"!\\r\\n\")\nend\nf:close()\n```\n\n## See Also\n\n- [File](file \"File\")\n- [File:flush]((file)-flush \"(File):flush\")\n- [File:setBuffer]((file)-setbuffer \"(File):setBuffer\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(File):write](https://love2d.org/wiki/(File):write)"
- name: (Image):getData
  id: (image)-getdata
  summary: Available since LÖVE 0.9.0 and removed in LÖVE 11.0 Create an ImageData from a file, create the Image from that, and keep a reference to the ImageData, instead of using this function
  description: "# (Image):getData\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nCreate an [ImageData](imagedata \"ImageData\") from a file, create the Image from that, and keep a reference to the ImageData, instead of using this function.\n\nGets the original [ImageData](imagedata \"ImageData\") or [CompressedData](compresseddata \"CompressedData\") used to create the Image.\n\nAll Images keep a reference to the Data that was used to create the Image. The Data is used to refresh the Image when [love.window.setMode](love.window.setmode \"love.window.setMode\") or [Image:refresh]((image)-refresh \"(Image):refresh\") is called.\n\n## Function\n\n### Synopsis\n\n``` lua\ndata = Image:getData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` data`  \nThe original ImageData used to create the Image, if the image is not compressed.\n\n## Function\n\n### Synopsis\n\n``` lua\ndata = Image:getData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`CompressedData`](compresseddata \"CompressedData\")` data`  \nThe original CompressedData used to create the Image, if the image is compressed.\n\n## Examples\n\nEdit the Image's ImageData and refresh the Image using the edited ImageData.\n\n``` lua\nfunction love.load()\n    image = love.graphics.newImage(\"pig.png\")\nend\n \nfunction love.draw()\n    love.graphics.draw(image)\nend\n \nfunction love.keypressed(key)\n    -- If the image is compressed, it will return CompressedData which doesn't have a mapPixel method.\n    -- Currently only dds files can become compressed images.\n    if key == \"e\" and not image:isCompressed() then\n        local data = image:getData()\n        data:mapPixel(function(x, y, r, g, b, a) return r/2, g/2, b/2, a/2 end)\n        image:refresh()\n    end\nend\n```\n\n## See Also\n\n- [Image](image \"Image\")\n- [Image:refresh]((image)-refresh \"(Image):refresh\")\n- [Image:isCompressed]((image)-iscompressed \"(Image):isCompressed\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(Image):getData](https://love2d.org/wiki/(Image):getData)"
- name: (Image):getFlags
  id: (image)-getflags
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# (Image):getFlags\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the flags used when the image was [created](love.graphics.newimage \"love.graphics.newImage\").\n\n## Function\n\n### Synopsis\n\n``` lua\nflags = Image:getFlags( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` flags`  \nA table with [ImageFlag](imageflag \"ImageFlag\") keys.\n\n## See Also\n\n- [Image](image \"Image\")\n- [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(Image):getFlags](https://love2d.org/wiki/(Image):getFlags)"
- name: (Image):isCompressed
  id: (image)-iscompressed
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# (Image):isCompressed\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Image was created from [CompressedData](compresseddata \"CompressedData\").\n\nCompressed images take up less space in VRAM, and drawing a compressed image will generally be more efficient than drawing one created from raw pixel data.\n\n## Function\n\n### Synopsis\n\n``` lua\ncompressed = Image:isCompressed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` compressed`  \nWhether the Image is stored as a compressed texture on the GPU.\n\n## See Also\n\n- [Image](image \"Image\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(Image):isCompressed](https://love2d.org/wiki/(Image):isCompressed)"
- name: (Image):refresh
  id: (image)-refresh
  summary: Available since LÖVE 0.9.0 and removed in LÖVE 11.0 It has been replaced by Image:replacePixels
  description: "# (Image):refresh\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been replaced by [Image:replacePixels]((image)-replacepixels \"(Image):replacePixels\").\n\nReloads the Image's contents from the [ImageData](imagedata \"ImageData\") or [CompressedData](compresseddata \"CompressedData\") used to create the image.\n\n## Function\n\n### Synopsis\n\n``` lua\nImage:refresh( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been replaced by [Image:replacePixels]((image)-replacepixels \"(Image):replacePixels\").\n\n### Synopsis\n\n``` lua\nImage:refresh( x, y, width, height )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-axis of the top-left corner of the area within the Image to reload.\n\n[`number`](number \"number\")` y`  \nThe y-axis of the top-left corner of the area within the Image to reload.\n\n[`number`](number \"number\")` width`  \nThe width of the area within the Image to reload.\n\n[`number`](number \"number\")` height`  \nThe height of the area within the Image to reload.\n\n### Returns\n\nNothing.\n\n## Examples\n\n``` lua\nfunction love.load()\n    imagedata = love.image.newImageData(\"pig.png\")\n    image = love.graphics.newImage(imagedata)\nend\n \nfunction love.draw()\n    love.graphics.draw(image)\nend\n \nfunction love.keypressed(key)\n    if key == \"e\" then\n        -- Modify the original ImageData and apply the changes to the Image.\n        imagedata:mapPixel(function(x, y, r, g, b, a) return r/2, g/2, b/2, a/2 end)\n        image:refresh()\n    end\nend\n```\n\n## See Also\n\n- [Image](image \"Image\")\n- [Image:getData]((image)-getdata \"(Image):getData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(Image):refresh](https://love2d.org/wiki/(Image):refresh)"
- name: (Image):replacePixels
  id: (image)-replacepixels
  summary: Available since LÖVE 11.0 This function replaces Image:refresh
  description: "# (Image):replacePixels\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function replaces [Image:refresh]((image)-refresh \"(Image):refresh\").\n\n  \nReplace the contents of an Image.\n\n## Function\n\n### Synopsis\n\n``` lua\nImage:replacePixels( data, slice, mipmap, x, y, reloadmipmaps )\n```\n\n### Arguments\n\n[`ImageData`](imagedata \"ImageData\")` data`  \nThe new [ImageData](imagedata \"ImageData\") to replace the contents with.\n\n[`number`](number \"number\")` slice`  \nWhich [cubemap face, array index, or volume layer](texturetype \"TextureType\") to replace, if applicable.\n\n[`number`](number \"number\")` mipmap (1)`  \nThe mimap level to replace, if the Image has mipmaps.\n\n[`number`](number \"number\")` x (0)`  \nThe x-offset in pixels from the top-left of the image to replace. The given ImageData's width plus this value must not be greater than the pixel width of the Image's specified mipmap level.\n\n[`number`](number \"number\")` y (0)`  \nThe y-offset in pixels from the top-left of the image to replace. The given ImageData's height plus this value must not be greater than the pixel height of the Image's specified mipmap level.\n\n[`boolean`](boolean \"boolean\")` reloadmipmaps`  \nWhether to generate new mipmaps after replacing the Image's pixels. True by default if the Image was created with automatically generated mipmaps, false by default otherwise.\n\n### Returns\n\nNothing.\n\n## Examples\n\n``` lua\nfunction love.load()\n    imagedata = love.image.newImageData(\"pig.png\")\n    image = love.graphics.newImage(imagedata)\nend\n \nfunction love.draw()\n    love.graphics.draw(image)\nend\n \nfunction love.keypressed(key)\n    if key == \"e\" then\n        -- Modify the original ImageData and apply the changes to the Image.\n        imagedata:mapPixel(function(x, y, r, g, b, a) return r/2, g/2, b/2, a/2 end)\n        image:replacePixels(imagedata)\n    end\nend\n```\n\n## See Also\n\n- [Image](image \"Image\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(Image):replacePixels](https://love2d.org/wiki/(Image):replacePixels)"
- name: (Image):setMipmapFilter
  id: (image)-setmipmapfilter
  summary: © 2006–2020 LÖVE Development Team Licensed under the GNU Free Documentation License, Version 1.3
  description: "# (Image):setMipmapFilter\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/(Image):setMipmapFilter](https://love2d.org/wiki/(Image):setMipmapFilter)"
- name: AlignMode
  id: alignmode
  summary: Text alignment
  description: "# AlignMode\n\nText alignment.\n\n## Constants\n\ncenter  \nAlign text center.\n\nleft  \nAlign text left.\n\nright  \nAlign text right.\n\njustify Available since 0.9.0  \nAlign text both left and right.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.printf](love.graphics.printf \"love.graphics.printf\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/AlignMode](https://love2d.org/wiki/AlignMode)"
- name: ArcType
  id: arctype
  summary: Available since LÖVE 0.10.1 This enum is not supported in earlier versions
  description: "# ArcType\n\n**Available since LÖVE [0.10.1](https://love2d.org/wiki/0.10.1 \"0.10.1\")**  \nThis enum is not supported in earlier versions.\n\nDifferent types of [arcs](love.graphics.arc \"love.graphics.arc\") that can be drawn.\n\n## Constants\n\npie  \nThe arc is drawn like a slice of pie, with the arc circle connected to the center at its end-points.\n\nopen  \nThe arc circle's two end-points are unconnected when the arc is drawn as a line. Behaves like the \"closed\" arc type when the arc is drawn in filled mode.\n\nclosed  \nThe arc circle's two end-points are connected to each other.\n\n## Notes\n\n[](https://love2d.org/wiki/File:arcs.png)\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.arc](love.graphics.arc \"love.graphics.arc\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ArcType](https://love2d.org/wiki/ArcType)"
- name: AreaSpreadDistribution
  id: areaspreaddistribution
  summary: Available since LÖVE 0.9.0 This enum is not supported in earlier versions
  description: "# AreaSpreadDistribution\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in earlier versions.\n\nTypes of particle area spread distribution.\n\n## Constants\n\nuniform  \nUniform distribution.\n\nnormal  \nNormal (gaussian) distribution.\n\nellipse Available since 0.10.2  \nUniform distribution in an ellipse.\n\n  \n\nborderellipse Available since 11.0  \nDistribution in an ellipse with particles spawning at the edges of the ellipse.\n\nborderrectangle Available since 11.0  \nDistribution in a rectangle with particles spawning at the edges of the rectangle.\n\n&nbsp;\n\nnone  \nNo distribution - area spread is disabled.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setAreaSpread](particlesystem-setareaspread \"ParticleSystem:setAreaSpread\")\n- [ParticleSystem:getAreaSpread](particlesystem-getareaspread \"ParticleSystem:getAreaSpread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/AreaSpreadDistribution](https://love2d.org/wiki/AreaSpreadDistribution)"
- name: AttributeDataType
  id: attributedatatype
  summary: byte An 8-bit normalized (from 0 to 1) value
  description: "# AttributeDataType\n\nData types used in a Mesh's Vertex format\n\n## Constants\n\nbyte  \nAn 8-bit normalized (from 0 to 1) value.\n\n  \n\nunorm16  \nA 16-bit normalized (from 0 to 1) value.\n\n  \n\nfloat  \nA floating point number.\n\n## See Also\n\n- [Mesh:getVertexFormat](mesh-getvertexformat \"Mesh:getVertexFormat\")\n- [love.graphics.newMesh](love.graphics.newmesh \"love.graphics.newMesh\")\n- [Mesh](mesh \"Mesh\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/AttributeDataType](https://love2d.org/wiki/AttributeDataType)"
- name: Audio Formats
  id: audio_formats
  summary: © 2006–2020 LÖVE Development Team Licensed under the GNU Free Documentation License, Version 1.3
  description: "# Audio Formats\n\nAs of LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\"), the following audio formats are supported:\n\n- Waveform Audio File Format (.wav)\n- MPEG-1 or MPEG-2 Audio Layer III (.mp3)\n- Ogg Vorbis (.ogg, .oga, .ogv)\n- Tracker module formats (.699, .amf, .ams, .dbm, .dmf, .dsm, .far, .it, .j2b, .mdl, .med, .mod, .mt2, .mtm, .okt, .psm, .s3m, .stm, .ult, .umx, .xm)\n- Other formats supported by libmodplug, without instrument data (.abc, .mid, .pat)\n\n- Free Lossless Audio Codec (.flac)\n\n  \n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [love.sound](love.sound \"love.sound\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Audio_Formats](https://love2d.org/wiki/Audio_Formats)"
- name: BezierCurve
  id: beziercurve
  summary: Available since LÖVE 0.9.0 This type is not supported in earlier versions
  description: "# BezierCurve\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis type is not supported in earlier versions.\n\nA Bézier curve object that can evaluate and render Bézier curves of arbitrary degree. For more information on Bézier curves check [this great article on Wikipedia](https://en.wikipedia.org/wiki/Bezier_curve).\n\n## Constructors\n\n|                                                                                 |                                       |       |     |\n|---------------------------------------------------------------------------------|---------------------------------------|-------|-----|\n| [love.math.newBezierCurve](love.math.newbeziercurve \"love.math.newBezierCurve\") | Creates a new **BezierCurve** object. | 0.9.0 |     |\n\n## Functions\n\n|                                                                                                         |                                                                                   |        |     |\n|---------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------|--------|-----|\n| [BezierCurve:evaluate](beziercurve-evaluate \"BezierCurve:evaluate\")                                     | Evaluate Bézier curve at parameter t.                                             | 0.9.0  |     |\n| [BezierCurve:getControlPoint](beziercurve-getcontrolpoint \"BezierCurve:getControlPoint\")                | Get coordinates of the i-th control point.                                        | 0.9.0  |     |\n| [BezierCurve:getControlPointCount](beziercurve-getcontrolpointcount \"BezierCurve:getControlPointCount\") | Get the number of control points in the Bézier curve.                             | 0.9.0  |     |\n| [BezierCurve:getDegree](beziercurve-getdegree \"BezierCurve:getDegree\")                                  | Get degree of the Bézier curve.                                                   | 0.9.0  |     |\n| [BezierCurve:getDerivative](beziercurve-getderivative \"BezierCurve:getDerivative\")                      | Get derivate of the Bézier curve.                                                 | 0.9.0  |     |\n| [BezierCurve:getSegment](beziercurve-getsegment \"BezierCurve:getSegment\")                               | Gets a BezierCurve that corresponds to the specified segment of this BezierCurve. | 0.10.0 |     |\n| [BezierCurve:insertControlPoint](beziercurve-insertcontrolpoint \"BezierCurve:insertControlPoint\")       | Insert control point after the i-th control point.                                | 0.9.0  |     |\n| [BezierCurve:removeControlPoint](beziercurve-removecontrolpoint \"BezierCurve:removeControlPoint\")       | Removes the specified control point.                                              | 0.10.0 |     |\n| [BezierCurve:render](beziercurve-render \"BezierCurve:render\")                                           | Get a list of points on the curve.                                                | 0.9.0  |     |\n| [BezierCurve:renderSegment](beziercurve-rendersegment \"BezierCurve:renderSegment\")                      | Get a list of points on a specific part of the curve.                             | 0.10.0 |     |\n| [BezierCurve:rotate](beziercurve-rotate \"BezierCurve:rotate\")                                           | Rotate the Bézier curve.                                                          | 0.9.0  |     |\n| [BezierCurve:scale](beziercurve-scale \"BezierCurve:scale\")                                              | Scale the Bézier curve.                                                           | 0.9.0  |     |\n| [BezierCurve:setControlPoint](beziercurve-setcontrolpoint \"BezierCurve:setControlPoint\")                | Set coordinates of the i-th control point.                                        | 0.9.0  |     |\n| [BezierCurve:translate](beziercurve-translate \"BezierCurve:translate\")                                  | Move the Bézier curve.                                                            | 0.9.0  |     |\n| [Object:release](object-release \"Object:release\")                                                       | Immediately destroys the object's Lua reference.                                  | 11.0   |     |\n| [Object:type](object-type \"Object:type\")                                                                | Gets the type of the object as a string.                                          |        |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                                          | Checks whether an object is of a certain type.                                    |        |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve](https://love2d.org/wiki/BezierCurve)"
- name: BezierCurve:evaluate
  id: beziercurve-evaluate
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# BezierCurve:evaluate\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nEvaluate Bézier curve at parameter t. The parameter must be between 0 and 1 (inclusive).\n\nThis function can be used to move objects along paths or tween parameters. However it should not be used to render the curve, see [BezierCurve:render](beziercurve-render \"BezierCurve:render\") for that purpose.\n\n## Function\n\n### Synopsis\n\n``` lua\nx,y = BezierCurve:evaluate(t)\n```\n\n### Arguments\n\n[`number`](number \"number\")` t`  \nWhere to evaluate the curve.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nx coordinate of the curve at parameter t.\n\n[`number`](number \"number\")` y`  \ny coordinate of the curve at parameter t.\n\n## See Also\n\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [BezierCurve:render](beziercurve-render \"BezierCurve:render\")\n- [love.math](love.math \"love.math\")\n- [Bezier Curves, how to trace a line? - LÖVE forum](https://love2d.org/forums/viewtopic.php?f=4&t=83825)\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:evaluate](https://love2d.org/wiki/BezierCurve:evaluate)"
- name: BezierCurve:getControlPoint
  id: beziercurve-getcontrolpoint
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# BezierCurve:getControlPoint\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGet coordinates of the i-th control point. Indices start with 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = BezierCurve:getControlPoint(i)\n```\n\n### Arguments\n\n[`number`](number \"number\")` i`  \nIndex of the control point.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nPosition of the control point along the x axis.\n\n[`number`](number \"number\")` y`  \nPosition of the control point along the y axis.\n\n## See Also\n\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [BezierCurve:getDegree](beziercurve-getdegree \"BezierCurve:getDegree\")\n- [BezierCurve:setControlPoint](beziercurve-setcontrolpoint \"BezierCurve:setControlPoint\")\n- [BezierCurve:insertControlPoint](beziercurve-insertcontrolpoint \"BezierCurve:insertControlPoint\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:getControlPoint](https://love2d.org/wiki/BezierCurve:getControlPoint)"
- name: BezierCurve:getControlPointCount
  id: beziercurve-getcontrolpointcount
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# BezierCurve:getControlPointCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGet the number of control points in the Bézier curve.\n\n## Function\n\n### Synopsis\n\n``` lua\ncount = BezierCurve:getControlPointCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` count`  \nThe number of control points.\n\n## See Also\n\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [BezierCurve:getControlPoint](beziercurve-getcontrolpoint \"BezierCurve:getControlPoint\")\n- [BezierCurve:setControlPoint](beziercurve-setcontrolpoint \"BezierCurve:setControlPoint\")\n- [BezierCurve:insertControlPoint](beziercurve-insertcontrolpoint \"BezierCurve:insertControlPoint\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:getControlPointCount](https://love2d.org/wiki/BezierCurve:getControlPointCount)"
- name: BezierCurve:getDegree
  id: beziercurve-getdegree
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# BezierCurve:getDegree\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGet degree of the Bézier curve. The degree is equal to number-of-control-points - 1.\n\n## Function\n\n### Synopsis\n\n``` lua\ndegree = BezierCurve:getDegree( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` degree`  \nDegree of the Bézier curve.\n\n## See Also\n\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [BezierCurve:getControlPoint](beziercurve-getcontrolpoint \"BezierCurve:getControlPoint\")\n- [BezierCurve:setControlPoint](beziercurve-setcontrolpoint \"BezierCurve:setControlPoint\")\n- [BezierCurve:insertControlPoint](beziercurve-insertcontrolpoint \"BezierCurve:insertControlPoint\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:getDegree](https://love2d.org/wiki/BezierCurve:getDegree)"
- name: BezierCurve:getDerivative
  id: beziercurve-getderivative
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# BezierCurve:getDerivative\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGet the derivative of the Bézier curve.\n\nThis function can be used to rotate sprites moving along a curve in the direction of the movement and compute the direction perpendicular to the curve at some parameter t.\n\n## Function\n\n### Synopsis\n\n``` lua\nderivative = BezierCurve:getDerivative()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`BezierCurve`](beziercurve \"BezierCurve\")` derivative`  \nThe derivative curve.\n\n## Example\n\n### Position a sprite along a Bézier-curve.\n\n``` lua\ncurve      = love.math.newBezierCurve({25,25,75,50,125,25})\nderivative = curve:getDerivative()\nsprite     = love.graphics.newImage('sprite.png') -- to demonstrate orientation; assuming the sprite's front is upwards.\n \nlocal t = 0.0 -- range: [0,1]\nfunction love.update(dt)\n    t = (t + dt / 10) % 1.0\nend\n \nfunction love.draw()\n    local ex,ey = curve:evaluate(t)\n    local dx,dy = derivative:evaluate(t)\n    -- If the sprite were facing to the right, the +math.pi/2 part would not be needed.\n    love.graphics.draw(sprite, ex, ey, math.atan2(dy,dx)+math.pi/2, 1, 1, sprite:getWidth()/2, sprite:getHeight()/2)\nend\n```\n\n## See Also\n\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:getDerivative](https://love2d.org/wiki/BezierCurve:getDerivative)"
- name: BezierCurve:getSegment
  id: beziercurve-getsegment
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# BezierCurve:getSegment\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets a BezierCurve that corresponds to the specified segment of this BezierCurve.\n\n## Function\n\n### Synopsis\n\n``` lua\ncurve = BezierCurve:getSegment( startpoint, endpoint )\n```\n\n### Arguments\n\n[`number`](number \"number\")` startpoint`  \nThe starting point along the curve. Must be between 0 and 1.\n\n[`number`](number \"number\")` endpoint`  \nThe end of the segment. Must be between 0 and 1.\n\n### Returns\n\n[`BezierCurve`](beziercurve \"BezierCurve\")` curve`  \nA BezierCurve that corresponds to the specified segment.\n\n## See Also\n\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [BezierCurve:renderSegment](beziercurve-rendersegment \"BezierCurve:renderSegment\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:getSegment](https://love2d.org/wiki/BezierCurve:getSegment)"
- name: BezierCurve:insertControlPoint
  id: beziercurve-insertcontrolpoint
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# BezierCurve:insertControlPoint\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nInsert control point as the new i-th control point. Existing control points from i onwards are pushed back by 1. Indices start with 1. Negative indices wrap around: -1 is the last control point, -2 the one before the last, etc.\n\n## Function\n\n### Synopsis\n\n``` lua\nBezierCurve:insertControlPoint( x, y, i )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nPosition of the control point along the x axis.\n\n[`number`](number \"number\")` y`  \nPosition of the control point along the y axis.\n\n[`number`](number \"number\")` i (-1)`  \nIndex of the control point.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [BezierCurve:getDegree](beziercurve-getdegree \"BezierCurve:getDegree\")\n- [BezierCurve:getControlPoint](beziercurve-getcontrolpoint \"BezierCurve:getControlPoint\")\n- [BezierCurve:setControlPoint](beziercurve-setcontrolpoint \"BezierCurve:setControlPoint\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:insertControlPoint](https://love2d.org/wiki/BezierCurve:insertControlPoint)"
- name: BezierCurve:removeControlPoint
  id: beziercurve-removecontrolpoint
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# BezierCurve:removeControlPoint\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nRemoves the specified control point.\n\n## Function\n\n### Synopsis\n\n``` lua\nBezierCurve:removeControlPoint( index )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nThe index of the control point to remove.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [BezierCurve:getDegree](beziercurve-getdegree \"BezierCurve:getDegree\")\n- [BezierCurve:setControlPoint](beziercurve-setcontrolpoint \"BezierCurve:setControlPoint\")\n- [BezierCurve:getControlPoint](beziercurve-getcontrolpoint \"BezierCurve:getControlPoint\")\n- [BezierCurve:insertControlPoint](beziercurve-insertcontrolpoint \"BezierCurve:insertControlPoint\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:removeControlPoint](https://love2d.org/wiki/BezierCurve:removeControlPoint)"
- name: BezierCurve:render
  id: beziercurve-render
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# BezierCurve:render\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGet a list of coordinates to be used with [love.graphics.line](love.graphics.line \"love.graphics.line\").\n\nThis function samples the Bézier curve using recursive subdivision. You can control the recursion depth using the depth parameter.\n\nIf you are just interested to know the position on the curve given a parameter, use [BezierCurve:evaluate](beziercurve-evaluate \"BezierCurve:evaluate\").\n\n## Function\n\n### Synopsis\n\n``` lua\ncoordinates = BezierCurve:render(depth)\n```\n\n### Arguments\n\n[`number`](number \"number\")` depth (5)`  \nNumber of recursive subdivision steps.\n\n### Returns\n\n[`table`](table \"table\")` coordinates`  \nList of x,y-coordinate pairs of points on the curve.\n\n## Example\n\n### Draw a bezier curve\n\n``` lua\ncurve = love.math.newBezierCurve({25,25,75,50,125,25})\nfunction love.draw()\n    love.graphics.line(curve:render())\nend\n```\n\n## See Also\n\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [BezierCurve:renderSegment](beziercurve-rendersegment \"BezierCurve:renderSegment\")\n- [BezierCurve:evaluate](beziercurve-evaluate \"BezierCurve:evaluate\")\n- [love.math](love.math \"love.math\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:render](https://love2d.org/wiki/BezierCurve:render)"
- name: BezierCurve:renderSegment
  id: beziercurve-rendersegment
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# BezierCurve:renderSegment\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGet a list of coordinates on a specific part of the curve, to be used with [love.graphics.line](love.graphics.line \"love.graphics.line\").\n\nThis function samples the Bézier curve using recursive subdivision. You can control the recursion depth using the depth parameter.\n\nIf you are just need to know the position on the curve given a parameter, use [BezierCurve:evaluate](beziercurve-evaluate \"BezierCurve:evaluate\").\n\n## Function\n\n### Synopsis\n\n``` lua\ncoordinates = BezierCurve:renderSegment( startpoint, endpoint, depth )\n```\n\n### Arguments\n\n[`number`](number \"number\")` startpoint`  \nThe starting point along the curve. Must be between 0 and 1.\n\n[`number`](number \"number\")` endpoint`  \nThe end of the segment to render. Must be between 0 and 1.\n\n[`number`](number \"number\")` depth (5)`  \nNumber of recursive subdivision steps.\n\n### Returns\n\n[`table`](table \"table\")` coordinates`  \nList of x,y-coordinate pairs of points on the specified part of the curve.\n\n## Example\n\n### Draw a segment of a bezier curve\n\n``` lua\ncurve = love.math.newBezierCurve({25,25,75,50,125,25})\nfunction love.draw()\n    love.graphics.line(curve:renderSegment(0, .75))\nend\n```\n\n## See Also\n\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [BezierCurve:render](beziercurve-render \"BezierCurve:render\")\n- [BezierCurve:evaluate](beziercurve-evaluate \"BezierCurve:evaluate\")\n- [love.math](love.math \"love.math\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:renderSegment](https://love2d.org/wiki/BezierCurve:renderSegment)"
- name: BezierCurve:rotate
  id: beziercurve-rotate
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# BezierCurve:rotate\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nRotate the Bézier curve by an angle.\n\n## Function\n\n### Synopsis\n\n``` lua\nBezierCurve:rotate(angle, ox, oy)\n```\n\n### Arguments\n\n[`number`](number \"number\")` angle`  \nRotation angle in radians.\n\n[`number`](number \"number\")` ox (0)`  \nX coordinate of the rotation center.\n\n[`number`](number \"number\")` oy (0)`  \nY coordinate of the rotation center.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [BezierCurve:translate](beziercurve-translate \"BezierCurve:translate\")\n- [BezierCurve:scale](beziercurve-scale \"BezierCurve:scale\")\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:rotate](https://love2d.org/wiki/BezierCurve:rotate)"
- name: BezierCurve:scale
  id: beziercurve-scale
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# BezierCurve:scale\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nScale the Bézier curve by a factor.\n\n## Function\n\n### Synopsis\n\n``` lua\nBezierCurve:scale(s, ox, oy)\n```\n\n### Arguments\n\n[`number`](number \"number\")` s`  \nScale factor.\n\n[`number`](number \"number\")` ox (0)`  \nX coordinate of the scaling center.\n\n[`number`](number \"number\")` oy (0)`  \nY coordinate of the scaling center.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [BezierCurve:translate](beziercurve-translate \"BezierCurve:translate\")\n- [BezierCurve:rotate](beziercurve-rotate \"BezierCurve:rotate\")\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:scale](https://love2d.org/wiki/BezierCurve:scale)"
- name: BezierCurve:setControlPoint
  id: beziercurve-setcontrolpoint
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# BezierCurve:setControlPoint\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSet coordinates of the i-th control point. Indices start with 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nBezierCurve:setControlPoint(i, x, y)\n```\n\n### Arguments\n\n[`number`](number \"number\")` i`  \nIndex of the control point.\n\n[`number`](number \"number\")` x`  \nPosition of the control point along the x axis.\n\n[`number`](number \"number\")` y`  \nPosition of the control point along the y axis.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [BezierCurve:getDegree](beziercurve-getdegree \"BezierCurve:getDegree\")\n- [BezierCurve:getControlPoint](beziercurve-getcontrolpoint \"BezierCurve:getControlPoint\")\n- [BezierCurve:insertControlPoint](beziercurve-insertcontrolpoint \"BezierCurve:insertControlPoint\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:setControlPoint](https://love2d.org/wiki/BezierCurve:setControlPoint)"
- name: BezierCurve:translate
  id: beziercurve-translate
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# BezierCurve:translate\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nMove the Bézier curve by an offset.\n\n## Function\n\n### Synopsis\n\n``` lua\nBezierCurve:translate(dx, dy)\n```\n\n### Arguments\n\n[`number`](number \"number\")` dx`  \nOffset along the x axis.\n\n[`number`](number \"number\")` dy`  \nOffset along the y axis.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [BezierCurve:rotate](beziercurve-rotate \"BezierCurve:rotate\")\n- [BezierCurve:scale](beziercurve-scale \"BezierCurve:scale\")\n- [BezierCurve](beziercurve \"BezierCurve\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BezierCurve:translate](https://love2d.org/wiki/BezierCurve:translate)"
- name: BlendAlphaMode
  id: blendalphamode
  summary: Available since LÖVE 0.10.0 This enum is not supported in earlier versions
  description: "# BlendAlphaMode\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis enum is not supported in earlier versions.\n\nDifferent ways alpha affects color blending. See [BlendMode](blendmode \"BlendMode\") and the [BlendMode Formulas](blendmode_formulas \"BlendMode Formulas\") for additional notes.\n\n## Constants\n\nalphamultiply  \nThe RGB values of what's drawn are multiplied by the alpha values of those colors during blending. This is the default alpha mode.\n\npremultiplied  \nThe RGB values of what's drawn are **not** multiplied by the alpha values of those colors during blending. For most blend modes to work correctly with this alpha mode, the colors of a drawn object need to have had their RGB values multiplied by their alpha values at some point previously (\"premultiplied alpha\").\n\n## Notes\n\nThe \"premultiplied\" constant should generally be used when drawing a [Canvas](canvas \"Canvas\") to the screen, because the RGB values of the Canvas' texture had previously been multiplied by its alpha values when drawing content to the Canvas itself.\n\nThe \"alphamultiply\" constant does not affect the \"multiply\" [BlendMode](blendmode \"BlendMode\"). Similarly, the \"screen\" [BlendMode](blendmode \"BlendMode\")'s math is only correct if the \"premultiplied\" alpha mode is used and the alpha of drawn objects has already been multiplied with its RGB values previously (possibly inside a shader).\n\nSeveral articles have been written about *premultiplied alpha* and when to use it:\n\n- [http://www.realtimerendering.com/blog/gpus-prefer-premultiplication/](http://www.realtimerendering.com/blog/gpus-prefer-premultiplication/)\n- [https://developer.nvidia.com/content/alpha-blending-pre-or-not-pre](https://developer.nvidia.com/content/alpha-blending-pre-or-not-pre)\n- [http://blogs.msdn.com/b/shawnhar/archive/2009/11/06/premultiplied-alpha.aspx](https://blogs.msdn.com/b/shawnhar/archive/2009/11/06/premultiplied-alpha.aspx)\n- [http://blogs.msdn.com/b/shawnhar/archive/2009/11/07/premultiplied-alpha-and-image-composition.aspx](https://blogs.msdn.com/b/shawnhar/archive/2009/11/07/premultiplied-alpha-and-image-composition.aspx)\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [BlendMode](blendmode \"BlendMode\")\n- [BlendMode Formulas](blendmode_formulas \"BlendMode Formulas\")\n- [love.graphics.setBlendMode](love.graphics.setblendmode \"love.graphics.setBlendMode\")\n- [love.graphics.getBlendMode](love.graphics.getblendmode \"love.graphics.getBlendMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BlendAlphaMode](https://love2d.org/wiki/BlendAlphaMode)"
- name: BlendMode
  id: blendmode
  summary: Available since LÖVE 0.2.0 This enum is not supported in earlier versions
  description: "# BlendMode\n\n**Available since LÖVE [0.2.0](https://love2d.org/wiki/0.2.0 \"0.2.0\")**  \nThis enum is not supported in earlier versions.\n\nDifferent ways to do color blending. See [BlendAlphaMode](blendalphamode \"BlendAlphaMode\") and the [BlendMode Formulas](blendmode_formulas \"BlendMode Formulas\") for additional notes.\n\n## Constants\n\nalpha  \nAlpha blending (normal). The alpha of what's drawn determines its opacity.\n\nreplace Available since 0.9.0  \nThe colors of what's drawn completely replace what was on the screen, with no additional blending. The [BlendAlphaMode](blendalphamode \"BlendAlphaMode\") specified in [love.graphics.setBlendMode](love.graphics.setblendmode \"love.graphics.setBlendMode\") still affects what happens.\n\n  \n\nscreen Available since 0.9.1  \n'Screen' blending.\n\n  \n\nadd Available since 0.10.0  \nThe pixel colors of what's drawn are added to the pixel colors already on the screen. The alpha of the screen is not modified.\n\nsubtract Available since 0.10.0  \nThe pixel colors of what's drawn are subtracted from the pixel colors already on the screen. The alpha of the screen is not modified.\n\nmultiply Available since 0.10.0  \nThe pixel colors of what's drawn are multiplied with the pixel colors already on the screen (darkening them). The alpha of drawn objects is multiplied with the alpha of the screen rather than determining how much the colors on the screen are affected, even when the \"alphamultiply\" [BlendAlphaMode](blendalphamode \"BlendAlphaMode\") is used.\n\n  \n\nlighten Available since 0.10.1  \nThe pixel colors of what's drawn are compared to the existing pixel colors, and the larger of the two values for each color component is used. Only works when the \"premultiplied\" [BlendAlphaMode](blendalphamode \"BlendAlphaMode\") is used in [love.graphics.setBlendMode](love.graphics.setblendmode \"love.graphics.setBlendMode\").\n\ndarken Available since 0.10.1  \nThe pixel colors of what's drawn are compared to the existing pixel colors, and the smaller of the two values for each color component is used. Only works when the \"premultiplied\" [BlendAlphaMode](blendalphamode \"BlendAlphaMode\") is used in [love.graphics.setBlendMode](love.graphics.setblendmode \"love.graphics.setBlendMode\").\n\n  \n\nadditive Removed in 0.10.0  \nAdditive blend mode.\n\n  \n\nsubtractive Available since 0.7.0 and removed in LÖVE 0.10.0  \nSubtractive blend mode.\n\nmultiplicative Available since 0.7.0 and removed in LÖVE 0.10.0  \nMultiply blend mode.\n\n  \n\npremultiplied Available since 0.8.0 and removed in LÖVE 0.10.0  \nPremultiplied alpha blend mode.\n\n  \n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [BlendMode Formulas](blendmode_formulas \"BlendMode Formulas\")\n- [love.graphics.setBlendMode](love.graphics.setblendmode \"love.graphics.setBlendMode\")\n- [love.graphics.getBlendMode](love.graphics.getblendmode \"love.graphics.getBlendMode\")\n- [BlendAlphaMode](blendalphamode \"BlendAlphaMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BlendMode](https://love2d.org/wiki/BlendMode)"
- name: BlendMode Formulas
  id: blendmode_formulas
  summary: Equations used when blending drawn content with the screen or active Canvas
  description: "# BlendMode Formulas\n\nEquations used when blending drawn content with the screen or active [Canvas](canvas \"Canvas\").\n\nColor components are generally in the range of \\[0, 1\\] rather than \\[0, 255\\] for the purposes of these equations. Results are clamped to \\[0, 1\\] except when a [Canvas](canvas \"Canvas\") is active that has a floating-point / HDR [format](canvasformat \"CanvasFormat\").\n\nDescription:\n\n- **dst** - existing color in the screen.\n\n- **src** - the color of the drawn object (the color output by the pixel shader, or the global color multiplied by the texture's color – if any, if no shader is used.)\n\n&nbsp;\n\n- **res** - resulting color.\n\nHere are the [BlendMode](blendmode \"BlendMode\") formulas for all 0.10.x and later versions:\n\n## alpha\n\n### \"alphamultiply\" [alpha mode](blendalphamode \"BlendAlphaMode\")\n\n       res.r = dst.r * (1 - src.a) + src.r * src.a\n       res.g = dst.g * (1 - src.a) + src.g * src.a\n       res.b = dst.b * (1 - src.a) + src.b * src.a\n       res.a = dst.a * (1 - src.a) + src.a\n\n### \"premultiplied\" [alpha mode](blendalphamode \"BlendAlphaMode\")\n\n       res.r = dst.r * (1 - src.a) + src.r\n       res.g = dst.g * (1 - src.a) + src.g\n       res.b = dst.b * (1 - src.a) + src.b\n       res.a = dst.a * (1 - src.a) + src.a\n\n## add\n\n### \"alphamultiply\" [alpha mode](blendalphamode \"BlendAlphaMode\")\n\n       res.r = dst.r + (src.r * src.a)\n       res.g = dst.g + (src.g * src.a)\n       res.b = dst.b + (src.b * src.a)\n       res.a = dst.a\n\n### \"premultiplied\" [alpha mode](blendalphamode \"BlendAlphaMode\")\n\n       res.r = dst.r + src.r\n       res.g = dst.g + src.g\n       res.b = dst.b + src.b\n       res.a = dst.a\n\n## subtract\n\n### \"alphamultiply\" [alpha mode](blendalphamode \"BlendAlphaMode\")\n\n       res.r = dst.r - (src.r * src.a)\n       res.g = dst.g - (src.g * src.a)\n       res.b = dst.b - (src.b * src.a)\n       res.a = dst.a\n\n### \"premultiplied\" [alpha mode](blendalphamode \"BlendAlphaMode\")\n\n       res.r = dst.r - src.r\n       res.g = dst.g - src.g\n       res.b = dst.b - src.b\n       res.a = dst.a\n\n## replace\n\n### \"alphamultiply\" [alpha mode](blendalphamode \"BlendAlphaMode\")\n\n       res.r = src.r * src.a\n       res.g = src.g * src.a\n       res.b = src.b * src.a\n       res.a = src.a\n\n### \"premultiplied\" [alpha mode](blendalphamode \"BlendAlphaMode\")\n\n       res.r = src.r\n       res.g = src.g\n       res.b = src.b\n       res.a = src.a\n\n## multiply\n\n### \"premultiplied\" [alpha mode](blendalphamode \"BlendAlphaMode\")\n\n       res.r = src.r * dst.r\n       res.g = src.g * dst.g\n       res.b = src.b * dst.b\n       res.a = src.a * dst.a\n\nNote: In 0.10.x, *multiply* with *alphamultiply* uses the same equations as with *premultiplied*. In [11.0](https://love2d.org/wiki/11.0 \"11.0\") and later versions, this variation is not supported.\n\n## lighten\n\n### \"premultiplied\" [alpha mode](blendalphamode \"BlendAlphaMode\")\n\n       res.r = max(src.r, dst.r)\n       res.g = max(src.g, dst.g)\n       res.b = max(src.b, dst.b)\n       res.a = max(src.a, dst.a)\n\n## darken\n\n### \"premultiplied\" [alpha mode](blendalphamode \"BlendAlphaMode\")\n\n       res.r = min(src.r, dst.r)\n       res.g = min(src.g, dst.g)\n       res.b = min(src.b, dst.b)\n       res.a = min(src.a, dst.a)\n\n## screen\n\nNote: The math for this blend mode is not completely correct when using the \"alphamultiply\" alpha mode. Prefer the \"premultiplied\" variant (and be sure your content has its RGB multiplied by its alpha at some point before blending), when possible.\n\n### \"alphamultiply\" [alpha mode](blendalphamode \"BlendAlphaMode\")\n\n       res.r = dst.r * (1 - src.r) + (src.r * src.a)\n       res.g = dst.g * (1 - src.g) + (src.g * src.a)\n       res.b = dst.b * (1 - src.b) + (src.b * src.a)\n       res.a = dst.a * (1 - src.a) + src.a\n\n### \"premultiplied\" [alpha mode](blendalphamode \"BlendAlphaMode\")\n\n       res.r = dst.r * (1 - src.r) + src.r\n       res.g = dst.g * (1 - src.g) + src.g\n       res.b = dst.b * (1 - src.b) + src.b\n       res.a = dst.a * (1 - src.a) + src.a\n\n## Older Versions\n\n### alpha ([0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\"), [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\"), and [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\"))\n\n       res.r = dst.r * (1 - src.a) + src.r * src.a\n       res.g = dst.g * (1 - src.a) + src.g * src.a\n       res.b = dst.b * (1 - src.a) + src.b * src.a\n       res.a = dst.a * (1 - src.a) + src.a\n\n### alpha ([0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and older)\n\n       res.r = dst.r * (1 - src.a) + src.r * src.a\n       res.g = dst.g * (1 - src.a) + src.g * src.a\n       res.b = dst.b * (1 - src.a) + src.b * src.a\n       res.a = dst.a * (1 - src.a) + src.a * src.a\n\n### premultiplied ([0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older)\n\n       res.r = dst.r * (1 - src.a) + src.r\n       res.g = dst.g * (1 - src.a) + src.g\n       res.b = dst.b * (1 - src.a) + src.b\n       res.a = dst.a * (1 - src.a) + src.a\n\n### screen ([0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older)\n\n       res.r = dst.r * (1 - src.r) + src.r\n       res.g = dst.g * (1 - src.g) + src.g\n       res.b = dst.b * (1 - src.b) + src.b\n       res.a = dst.a * (1 - src.a) + src.a\n\n### additive ([0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older)\n\n       res.r = dst.r + (src.r * src.a)\n       res.g = dst.g + (src.g * src.a)\n       res.b = dst.b + (src.b * src.a)\n       res.a = dst.a + (src.a * src.a)\n\n### subtractive ([0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older)\n\n       res.r = dst.r - src.r * src.a\n       res.g = dst.g - src.g * src.a\n       res.b = dst.b - src.b * src.a\n       res.a = dst.a - src.a * src.a\n\n### multiplicative ([0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\"), [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\"), and [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\"))\n\n       res.r = src.r * dst.r\n       res.g = src.g * dst.g\n       res.b = src.b * dst.b\n       res.a = src.a * dst.a\n\n### multiplicative ([0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and older)\n\n       res.r = dst.r * (1 - src.a) + src.r * dst.r\n       res.g = dst.g * (1 - src.a) + src.g * dst.g\n       res.b = dst.b * (1 - src.a) + src.b * dst.b\n       res.a = dst.a * (1 - src.a) + src.a * dst.a\n\n### replace ([0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older)\n\n       res.r = src.r\n       res.g = src.g\n       res.b = src.b\n       res.a = src.a\n\n## See Also\n\n- [BlendMode](blendmode \"BlendMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BlendMode_Formulas](https://love2d.org/wiki/BlendMode_Formulas)"
- name: Body
  id: body
  summary: Bodies are objects with velocity and position
  description: "# Body\n\nBodies are objects with velocity and position.\n\n## Constructors\n\n|                                                                     |                     |     |     |\n|---------------------------------------------------------------------|---------------------|-----|-----|\n| [love.physics.newBody](love.physics.newbody \"love.physics.newBody\") | Creates a new body. |     |     |\n\n## Functions\n\n|                                                                                                                     |                                                                               |       |       |\n|---------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------|-------|-------|\n| [Body:applyAngularImpulse](body-applyangularimpulse \"Body:applyAngularImpulse\")                                     | Applies an angular impulse to a body.                                         | 0.8.0 |       |\n| [Body:applyForce](body-applyforce \"Body:applyForce\")                                                                | Apply force to a Body.                                                        |       |       |\n| [Body:applyImpulse](body-applyimpulse \"Body:applyImpulse\")                                                          | Applies an impulse to a body.                                                 |       | 0.8.0 |\n| [Body:applyLinearImpulse](body-applylinearimpulse \"Body:applyLinearImpulse\")                                        | Applies an impulse to a body.                                                 | 0.8.0 |       |\n| [Body:applyTorque](body-applytorque \"Body:applyTorque\")                                                             | Apply torque to a body.                                                       |       |       |\n| [Body:destroy](body-destroy \"Body:destroy\")                                                                         | Explicitly destroys the Body.                                                 |       |       |\n| [Body:getAllowSleeping](body-getallowsleeping \"Body:getAllowSleeping\")                                              | Return whether a body is allowed to sleep.                                    | 0.7.0 | 0.8.0 |\n| [Body:getAngle](body-getangle \"Body:getAngle\")                                                                      | Get the angle of the body.                                                    |       |       |\n| [Body:getAngularDamping](body-getangulardamping \"Body:getAngularDamping\")                                           | Gets the Angular damping of the Body.                                         |       |       |\n| [Body:getAngularVelocity](body-getangularvelocity \"Body:getAngularVelocity\")                                        | Get the angular velocity of the Body.                                         |       |       |\n| [Body:getContactList](body-getcontactlist \"Body:getContactList\")                                                    | Gets a list of all [Contacts](contact \"Contact\") attached to the Body.        | 0.9.2 | 11.0  |\n| [Body:getContacts](body-getcontacts \"Body:getContacts\")                                                             | Gets a list of all [Contacts](contact \"Contact\") attached to the Body.        | 11.0  |       |\n| [Body:getFixtureList](body-getfixturelist \"Body:getFixtureList\")                                                    | Returns a table with all fixtures.                                            | 0.8.0 | 11.0  |\n| [Body:getFixtures](body-getfixtures \"Body:getFixtures\")                                                             | Returns a table with all fixtures.                                            | 11.0  |       |\n| [Body:getGravityScale](body-getgravityscale \"Body:getGravityScale\")                                                 | Returns the gravity scale factor.                                             | 0.8.0 |       |\n| [Body:getInertia](body-getinertia \"Body:getInertia\")                                                                | Gets the rotational inertia of the body.                                      |       |       |\n| [Body:getJointList](body-getjointlist \"Body:getJointList\")                                                          | Returns a table containing the Joints attached to this Body.                  | 0.9.2 | 11.0  |\n| [Body:getJoints](body-getjoints \"Body:getJoints\")                                                                   | Returns a table containing the [Joints](joint \"Joint\") attached to this Body. | 11.0  |       |\n| [Body:getLinearDamping](body-getlineardamping \"Body:getLinearDamping\")                                              | Gets the linear damping of the Body.                                          |       |       |\n| [Body:getLinearVelocity](body-getlinearvelocity \"Body:getLinearVelocity\")                                           | Gets the linear velocity of the Body from its center of mass.                 |       |       |\n| [Body:getLinearVelocityFromLocalPoint](body-getlinearvelocityfromlocalpoint \"Body:getLinearVelocityFromLocalPoint\") | Get the linear velocity of a point on the body.                               |       |       |\n| [Body:getLinearVelocityFromWorldPoint](body-getlinearvelocityfromworldpoint \"Body:getLinearVelocityFromWorldPoint\") | Get the linear velocity of a point on the body.                               |       |       |\n| [Body:getLocalCenter](body-getlocalcenter \"Body:getLocalCenter\")                                                    | Get the center of mass position in local coordinates.                         |       |       |\n| [Body:getLocalPoint](body-getlocalpoint \"Body:getLocalPoint\")                                                       | Transform a point from world coordinates to local coordinates.                |       |       |\n| [Body:getLocalVector](body-getlocalvector \"Body:getLocalVector\")                                                    | Transform a vector from world coordinates to local coordinates.               |       |       |\n| [Body:getMass](body-getmass \"Body:getMass\")                                                                         | Get the mass of the body.                                                     |       |       |\n| [Body:getMassData](body-getmassdata \"Body:getMassData\")                                                             | Returns the mass, its center, and the rotational inertia.                     | 0.8.0 |       |\n| [Body:getPosition](body-getposition \"Body:getPosition\")                                                             | Get the position of the body.                                                 |       |       |\n| [Body:getType](body-gettype \"Body:getType\")                                                                         | Returns the type of the body.                                                 | 0.8.0 |       |\n| [Body:getUserData](body-getuserdata \"Body:getUserData\")                                                             | Returns the Lua value associated with this Body.                              | 0.9.1 |       |\n| [Body:getWorld](body-getworld \"Body:getWorld\")                                                                      | Gets the [World](world \"World\") the body lives in.                            | 0.9.2 |       |\n| [Body:getWorldCenter](body-getworldcenter \"Body:getWorldCenter\")                                                    | Get the center of mass position in world coordinates.                         |       |       |\n| [Body:getWorldPoint](body-getworldpoint \"Body:getWorldPoint\")                                                       | Transform a point from local coordinates to world coordinates.                |       |       |\n| [Body:getWorldPoints](body-getworldpoints \"Body:getWorldPoints\")                                                    | Transforms multiple points from local coordinates to world coordinates.       | 0.8.0 |       |\n| [Body:getWorldVector](body-getworldvector \"Body:getWorldVector\")                                                    | Transform a vector from local coordinates to world coordinates.               |       |       |\n| [Body:getX](body-getx \"Body:getX\")                                                                                  | Get the x position of the body in world coordinates.                          |       |       |\n| [Body:getY](body-gety \"Body:getY\")                                                                                  | Get the y position of the body in world coordinates.                          |       |       |\n| [Body:isActive](body-isactive \"Body:isActive\")                                                                      | Returns whether the body is actively used in the simulation.                  | 0.8.0 |       |\n| [Body:isAwake](body-isawake \"Body:isAwake\")                                                                         | Returns the sleep status of the body.                                         | 0.8.0 |       |\n| [Body:isBullet](body-isbullet \"Body:isBullet\")                                                                      | Get the bullet status of a body.                                              |       |       |\n| [Body:isDestroyed](body-isdestroyed \"Body:isDestroyed\")                                                             | Gets whether the Body is destroyed.                                           | 0.9.2 |       |\n| [Body:isDynamic](body-isdynamic \"Body:isDynamic\")                                                                   | Get the dynamic status of the body.                                           |       | 0.8.0 |\n| [Body:isFixedRotation](body-isfixedrotation \"Body:isFixedRotation\")                                                 | Returns whether the body rotation is locked.                                  | 0.8.0 |       |\n| [Body:isFrozen](body-isfrozen \"Body:isFrozen\")                                                                      | Get the frozen status of the body.                                            |       | 0.8.0 |\n| [Body:isSleeping](body-issleeping \"Body:isSleeping\")                                                                | Get the sleeping status of a body.                                            |       | 0.8.0 |\n| [Body:isSleepingAllowed](body-issleepingallowed \"Body:isSleepingAllowed\")                                           | Returns the sleeping behaviour of the body.                                   | 0.8.0 |       |\n| [Body:isStatic](body-isstatic \"Body:isStatic\")                                                                      | Get the static status of the body.                                            |       | 0.8.0 |\n| [Body:isTouching](body-istouching \"Body:isTouching\")                                                                | Gets whether the Body is touching the given other Body.                       | 11.0  |       |\n| [Body:putToSleep](body-puttosleep \"Body:putToSleep\")                                                                | Put the body to sleep.                                                        |       | 0.8.0 |\n| [Body:resetMassData](body-resetmassdata \"Body:resetMassData\")                                                       | Resets the mass of the body.                                                  | 0.8.0 |       |\n| [Body:setActive](body-setactive \"Body:setActive\")                                                                   | Sets whether the body is active in the world.                                 | 0.8.0 |       |\n| [Body:setAllowSleeping](body-setallowsleeping \"Body:setAllowSleeping\")                                              | Set the sleep behaviour of a body.                                            |       | 0.8.0 |\n| [Body:setAngle](body-setangle \"Body:setAngle\")                                                                      | Set the angle of the body.                                                    |       |       |\n| [Body:setAngularDamping](body-setangulardamping \"Body:setAngularDamping\")                                           | Sets the angular damping of a Body                                            |       |       |\n| [Body:setAngularVelocity](body-setangularvelocity \"Body:setAngularVelocity\")                                        | Sets the angular velocity of a Body.                                          |       |       |\n| [Body:setAwake](body-setawake \"Body:setAwake\")                                                                      | Wakes the body up or puts it to sleep.                                        | 0.8.0 |       |\n| [Body:setBullet](body-setbullet \"Body:setBullet\")                                                                   | Set the bullet status of a body.                                              |       |       |\n| [Body:setFixedRotation](body-setfixedrotation \"Body:setFixedRotation\")                                              | Set whether a body has fixed rotation.                                        |       |       |\n| [Body:setGravityScale](body-setgravityscale \"Body:setGravityScale\")                                                 | Sets a new gravity scale factor for the body.                                 | 0.8.0 |       |\n| [Body:setInertia](body-setinertia \"Body:setInertia\")                                                                | Set the inertia of a body.                                                    |       |       |\n| [Body:setLinearDamping](body-setlineardamping \"Body:setLinearDamping\")                                              | Sets the linear damping of a Body.                                            |       |       |\n| [Body:setLinearVelocity](body-setlinearvelocity \"Body:setLinearVelocity\")                                           | Sets a new linear velocity for the Body.                                      |       |       |\n| [Body:setMass](body-setmass \"Body:setMass\")                                                                         | Sets the mass properties directly.                                            |       |       |\n| [Body:setMassData](body-setmassdata \"Body:setMassData\")                                                             | Overrides the calculated mass data.                                           | 0.8.0 |       |\n| [Body:setMassFromShapes](body-setmassfromshapes \"Body:setMassFromShapes\")                                           | Sets mass properties from attatched shapes.                                   |       | 0.8.0 |\n| [Body:setPosition](body-setposition \"Body:setPosition\")                                                             | Set the position of the body.                                                 |       |       |\n| [Body:setSleepingAllowed](body-setsleepingallowed \"Body:setSleepingAllowed\")                                        | Sets the sleeping behaviour of the body.                                      | 0.8.0 |       |\n| [Body:setType](body-settype \"Body:setType\")                                                                         | Sets a new body type.                                                         | 0.8.0 |       |\n| [Body:setUserData](body-setuserdata \"Body:setUserData\")                                                             | Associates a Lua value with the Body.                                         | 0.9.1 |       |\n| [Body:setX](body-setx \"Body:setX\")                                                                                  | Set the x position of the body.                                               |       |       |\n| [Body:setY](body-sety \"Body:setY\")                                                                                  | Set the y position of the body.                                               |       |       |\n| [Body:wakeUp](body-wakeup \"Body:wakeUp\")                                                                            | Wake up a sleeping body.                                                      |       | 0.8.0 |\n| [Object:release](object-release \"Object:release\")                                                                   | Immediately destroys the object's Lua reference.                              | 11.0  |       |\n| [Object:type](object-type \"Object:type\")                                                                            | Gets the type of the object as a string.                                      |       |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                                                      | Checks whether an object is of a certain type.                                |       |       |\n\n## Enums\n\n|                                 |                          |     |     |\n|---------------------------------|--------------------------|-----|-----|\n| [BodyType](bodytype \"BodyType\") | The types of a **Body**. |     |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body](https://love2d.org/wiki/Body)"
- name: Body:applyAngularImpulse
  id: body-applyangularimpulse
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:applyAngularImpulse\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nApplies an angular impulse to a body. This makes a single, instantaneous addition to the body momentum.\n\nA body with with a larger mass will react less. The reaction does **not** depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use [Body:applyForce](body-applyforce \"Body:applyForce\").\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:applyAngularImpulse( impulse )\n```\n\n### Arguments\n\n[`number`](number \"number\")` impulse`  \nThe impulse in kilogram-square meter per second.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:applyLinearImpulse](body-applylinearimpulse \"Body:applyLinearImpulse\")\n- [Body:applyTorque](body-applytorque \"Body:applyTorque\")\n- [Body:getAngle](body-getangle \"Body:getAngle\")\n- [Body:getAngularVelocity](body-getangularvelocity \"Body:getAngularVelocity\")\n- [Body:getInertia](body-getinertia \"Body:getInertia\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:applyAngularImpulse](https://love2d.org/wiki/Body:applyAngularImpulse)"
- name: Body:applyForce
  id: body-applyforce
  summary: Apply force to a Body
  description: "# Body:applyForce\n\nApply force to a Body.\n\nA force pushes a body in a direction. A body with with a larger mass will react less. The reaction also depends on how long a force is applied: since the force acts continuously over the entire timestep, a short timestep will only push the body for a short time. Thus forces are best used for many timesteps to give a continuous push to a body (like gravity). For a single push that is independent of timestep, it is better to use [Body:applyLinearImpulse](body-applylinearimpulse \"Body:applyLinearImpulse\").\n\n  \nIf the position to apply the force is not given, it will act on the center of mass of the body. The part of the force not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia).\n\nNote that the force components and position must be given in world coordinates.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nBody:applyForce( fx, fy )\n```\n\n### Arguments\n\n[`number`](number \"number\")` fx`  \nThe x component of force to apply to the center of mass.\n\n[`number`](number \"number\")` fy`  \nThe y component of force to apply to the center of mass.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:applyForce( fx, fy, x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` fx`  \nThe x component of force to apply.\n\n[`number`](number \"number\")` fy`  \nThe y component of force to apply.\n\n[`number`](number \"number\")` x`  \nThe x position to apply the force.\n\n[`number`](number \"number\")` y`  \nThe y position to apply the force.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:applyTorque](body-applytorque \"Body:applyTorque\")\n- [Body:applyLinearImpulse](body-applylinearimpulse \"Body:applyLinearImpulse\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:applyForce](https://love2d.org/wiki/Body:applyForce)"
- name: Body:applyImpulse
  id: body-applyimpulse
  summary: Removed in LÖVE 0.8.0 It has been renamed to Body:applyLinearImpulse
  description: "# Body:applyImpulse\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed to [Body:applyLinearImpulse](body-applylinearimpulse \"Body:applyLinearImpulse\").\n\nApplies an impulse to a body. This makes a single, instantaneous addition to the body momentum.\n\nAn impulse pushes a body in a direction. A body with with a larger mass will react less. The reaction does **not** depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use [Body:applyForce](body-applyforce \"Body:applyForce\").\n\n  \nIf the position to apply the impulse is not given, it will act on the center of mass of the body. The part of the impulse not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia).\n\n  \nNote that the impulse components and position must be given in world coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:applyImpulse( ix, iy, x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ix`  \nThe x component of the impulse.\n\n[`number`](number \"number\")` iy`  \nThe y component of the impulse.\n\n[`number`](number \"number\")` x`  \nThe x position to apply the impulse.\n\n[`number`](number \"number\")` y`  \nThe y position to apply the impulse.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:applyImpulse](https://love2d.org/wiki/Body:applyImpulse)"
- name: Body:applyLinearImpulse
  id: body-applylinearimpulse
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:applyLinearImpulse\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nApplies an impulse to a body. This makes a single, instantaneous addition to the body momentum.\n\nAn impulse pushes a body in a direction. A body with with a larger mass will react less. The reaction does **not** depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use [Body:applyForce](body-applyforce \"Body:applyForce\").\n\nIf the position to apply the impulse is not given, it will act on the center of mass of the body. The part of the impulse not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia).\n\nNote that the impulse components and position must be given in world coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:applyLinearImpulse( ix, iy )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ix`  \nThe x component of the impulse applied to the center of mass.\n\n[`number`](number \"number\")` iy`  \nThe y component of the impulse applied to the center of mass.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:applyLinearImpulse( ix, iy, x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ix`  \nThe x component of the impulse.\n\n[`number`](number \"number\")` iy`  \nThe y component of the impulse.\n\n[`number`](number \"number\")` x`  \nThe x position to apply the impulse.\n\n[`number`](number \"number\")` y`  \nThe y position to apply the impulse.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:applyAngularImpulse](body-applyangularimpulse \"Body:applyAngularImpulse\")\n- [Body:getLinearVelocity](body-getlinearvelocity \"Body:getLinearVelocity\")\n- [Body:setLinearVelocity](body-setlinearvelocity \"Body:setLinearVelocity\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:applyLinearImpulse](https://love2d.org/wiki/Body:applyLinearImpulse)"
- name: Body:applyTorque
  id: body-applytorque
  summary: Apply torque to a body
  description: "# Body:applyTorque\n\nApply torque to a body.\n\nTorque is like a force that will change the angular velocity (spin) of a body. The effect will depend on the rotational inertia a body has.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:applyTorque( torque )\n```\n\n### Arguments\n\n[`number`](number \"number\")` torque`  \nThe torque to apply.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:applyForce](body-applyforce \"Body:applyForce\")\n- [Body:applyAngularImpulse](body-applyangularimpulse \"Body:applyAngularImpulse\")\n- [Body:getAngle](body-getangle \"Body:getAngle\")\n- [Body:getAngularVelocity](body-getangularvelocity \"Body:getAngularVelocity\")\n- [Body:setAngularVelocity](body-setangularvelocity \"Body:setAngularVelocity\")\n- [Body:getInertia](body-getinertia \"Body:getInertia\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:applyTorque](https://love2d.org/wiki/Body:applyTorque)"
- name: Body:destroy
  id: body-destroy
  summary: Explicitly destroys the Body and all fixtures and joints attached to it
  description: "# Body:destroy\n\nExplicitly destroys the Body and all fixtures and joints attached to it.\n\nAn error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:destroy( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:destroy](https://love2d.org/wiki/Body:destroy)"
- name: Body:getAllowSleeping
  id: body-getallowsleeping
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.8.0 This method is not supported in earlier or later versions
  description: "# Body:getAllowSleeping\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier or later versions.\n\nReturn whether a body is allowed to sleep.\n\nA sleeping body is much more efficient to simulate than when awake.\n\n## Function\n\n### Synopsis\n\n``` lua\nstatus = Body:getAllowSleeping( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` status`  \nTrue when the body is allowed to sleep.\n\n## See Also\n\n- [Body](body \"Body\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getAllowSleeping](https://love2d.org/wiki/Body:getAllowSleeping)"
- name: Body:getAngle
  id: body-getangle
  summary: Get the angle of the body
  description: "# Body:getAngle\n\nGet the angle of the body.\n\nThe angle is measured in [radians](https://en.wikipedia.org/wiki/Radian). If you need to transform it to degrees, use [math.deg](https://www.lua.org/manual/5.1/manual.html#pdf-math.deg).\n\nA value of 0 radians will mean \"looking to the right\". Although radians increase counter-clockwise, the y axis points down so it becomes *clockwise* from our point of view.\n\n## Function\n\n### Synopsis\n\n``` lua\nangle = Body:getAngle( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` angle`  \nThe angle in radians.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:setAngle](body-setangle \"Body:setAngle\")\n- [Body:getAngularVelocity](body-getangularvelocity \"Body:getAngularVelocity\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getAngle](https://love2d.org/wiki/Body:getAngle)"
- name: Body:getAngularDamping
  id: body-getangulardamping
  summary: 'The angular damping is the rate of decrease of the angular velocity over time: A spinning body with no damping and no external forces will continue spinning indefinitely'
  description: "# Body:getAngularDamping\n\nGets the Angular damping of the Body\n\nThe angular damping is the *rate of decrease of the angular velocity over time*: A spinning body with no damping and no external forces will continue spinning indefinitely. A spinning body with damping will gradually stop spinning.\n\n  \nDamping is not the same as friction - they can be modelled together. However, only damping is provided by Box2D (and LOVE).\n\n  \nDamping parameters should be between 0 and infinity, with 0 meaning no damping, and infinity meaning full damping. Normally you will use a damping value between 0 and 0.1.\n\n## Function\n\n### Synopsis\n\n``` lua\ndamping = Body:getAngularDamping( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` damping`  \nThe value of the angular damping.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:setAngularDamping](body-setangulardamping \"Body:setAngularDamping\")\n- [Body:getLinearDamping](body-getlineardamping \"Body:getLinearDamping\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getAngularDamping](https://love2d.org/wiki/Body:getAngularDamping)"
- name: Body:getAngularVelocity
  id: body-getangularvelocity
  summary: Get the angular velocity of the Body
  description: "# Body:getAngularVelocity\n\nGet the angular velocity of the Body.\n\nThe angular velocity is the *rate of change of angle over time*.\n\n  \nIt is changed in [World:update](world-update \"World:update\") by applying torques, off centre forces/impulses, and angular damping. It can be set directly with [Body:setAngularVelocity](body-setangularvelocity \"Body:setAngularVelocity\").\n\n  \nIf you need the *rate of change of position over time*, use [Body:getLinearVelocity](body-getlinearvelocity \"Body:getLinearVelocity\").\n\n## Function\n\n### Synopsis\n\n``` lua\nw = Body:getAngularVelocity( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` w`  \nThe angular velocity in radians/second.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getAngularVelocity](https://love2d.org/wiki/Body:getAngularVelocity)"
- name: Body:getContactList
  id: body-getcontactlist
  summary: Available since LÖVE 0.9.2 This method is not supported in earlier versions
  description: "# Body:getContactList\n\n|                                                                                 |\n|---------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***            |\n| It has been renamed to [Body:getContacts](body-getcontacts \"Body:getContacts\"). |\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis method is not supported in earlier versions.\n\nGets a list of all [Contacts](contact \"Contact\") attached to the Body.\n\nThe list can change multiple times during a [World:update](world-update \"World:update\") call, so some collisions may be missed if the World collide callbacks are not used at all.\n\n## Function\n\n### Synopsis\n\n``` lua\ncontacts = Body:getContactList( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` contacts`  \nA list with all contacts associated with the Body.\n\n## See Also\n\n- [Body](body \"Body\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getContactList](https://love2d.org/wiki/Body:getContactList)"
- name: Body:getContacts
  id: body-getcontacts
  summary: Available since LÖVE 11.0 It has been renamed from Body:getContactList
  description: "# Body:getContacts\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [Body:getContactList](body-getcontactlist \"Body:getContactList\").\n\nGets a list of all [Contacts](contact \"Contact\") attached to the Body.\n\nThe list can change multiple times during a [World:update](world-update \"World:update\") call, so some collisions may be missed if the World collide callbacks are not used at all.\n\n## Function\n\n### Synopsis\n\n``` lua\ncontacts = Body:getContacts( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` contacts`  \nA list with all contacts associated with the Body.\n\n## See Also\n\n- [Body](body \"Body\")\n- [World:getContacts](world-getcontacts \"World:getContacts\")\n- [World:setCallbacks](world-setcallbacks \"World:setCallbacks\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getContacts](https://love2d.org/wiki/Body:getContacts)"
- name: Body:getFixtureList
  id: body-getfixturelist
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:getFixtureList\n\n|                                                                                 |\n|---------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***            |\n| It has been renamed to [Body:getFixtures](body-getfixtures \"Body:getFixtures\"). |\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns a table with all fixtures.\n\n## Function\n\n### Synopsis\n\n``` lua\nfixtures = Body:getFixtureList( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` fixtures`  \nA [sequence](sequence \"sequence\") with all fixtures.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getFixtureList](https://love2d.org/wiki/Body:getFixtureList)"
- name: Body:getFixtures
  id: body-getfixtures
  summary: Available since LÖVE 11.0 It has been renamed from Body:getFixtureList
  description: "# Body:getFixtures\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [Body:getFixtureList](body-getfixturelist \"Body:getFixtureList\").\n\nReturns a table with all fixtures.\n\n## Function\n\n### Synopsis\n\n``` lua\nfixtures = Body:getFixtures( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` fixtures`  \nA [sequence](sequence \"sequence\") with all [fixtures](fixture \"Fixture\").\n\n## See Also\n\n- [Body](body \"Body\")\n- [Fixture](fixture \"Fixture\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getFixtures](https://love2d.org/wiki/Body:getFixtures)"
- name: Body:getGravityScale
  id: body-getgravityscale
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:getGravityScale\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the gravity scale factor.\n\n## Function\n\n### Synopsis\n\n``` lua\nscale = Body:getGravityScale( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` scale`  \nThe gravity scale factor.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:setGravityScale](body-setgravityscale \"Body:setGravityScale\")\n- [World:setGravity](world-setgravity \"World:setGravity\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getGravityScale](https://love2d.org/wiki/Body:getGravityScale)"
- name: Body:getInertia
  id: body-getinertia
  summary: Gets the rotational inertia of the body
  description: "# Body:getInertia\n\nGets the rotational inertia of the body.\n\nThe rotational inertia is how hard is it to make the body spin.\n\n## Function\n\n### Synopsis\n\n``` lua\ninertia = Body:getInertia( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` inertia`  \nThe rotational inertial of the body.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:setInertia](body-setinertia \"Body:setInertia\")\n- [Body:getMassData](body-getmassdata \"Body:getMassData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getInertia](https://love2d.org/wiki/Body:getInertia)"
- name: Body:getJointList
  id: body-getjointlist
  summary: Available since LÖVE 0.9.2 This method is not supported in earlier versions
  description: "# Body:getJointList\n\n|                                                                           |\n|---------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***      |\n| It has been renamed to [Body:getJoints](body-getjoints \"Body:getJoints\"). |\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis method is not supported in earlier versions.\n\nReturns a table containing the Joints attached to this Body.\n\n## Function\n\n### Synopsis\n\n``` lua\njoints = Body:getJointList( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` joints`  \nA [sequence](sequence \"sequence\") with the [Joints](joint \"Joint\") attached to the Body.\n\n## See Also\n\n- [Body](body \"Body\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getJointList](https://love2d.org/wiki/Body:getJointList)"
- name: Body:getJoints
  id: body-getjoints
  summary: Available since LÖVE 11.0 It has been renamed from Body:getJointList
  description: "# Body:getJoints\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [Body:getJointList](body-getjointlist \"Body:getJointList\").\n\nReturns a table containing the Joints attached to this Body.\n\n## Function\n\n### Synopsis\n\n``` lua\njoints = Body:getJoints( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` joints`  \nA [sequence](sequence \"sequence\") with the [Joints](joint \"Joint\") attached to the Body.\n\n## See Also\n\n- [Body](body \"Body\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getJoints](https://love2d.org/wiki/Body:getJoints)"
- name: Body:getLinearDamping
  id: body-getlineardamping
  summary: Gets the linear damping of the Body
  description: "# Body:getLinearDamping\n\nGets the linear damping of the Body.\n\nThe linear damping is the *rate of decrease of the linear velocity over time*. A moving body with no damping and no external forces will continue moving indefinitely, as is the case in space. A moving body with damping will gradually stop moving.\n\n  \nDamping is not the same as [friction](fixture-setfriction \"Fixture:setFriction\") - they can be modelled together.\n\n## Function\n\n### Synopsis\n\n``` lua\ndamping = Body:getLinearDamping( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` damping`  \nThe value of the linear damping.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getLinearDamping](https://love2d.org/wiki/Body:getLinearDamping)"
- name: Body:getLinearVelocity
  id: body-getlinearvelocity
  summary: Gets the linear velocity of the Body from its center of mass
  description: "# Body:getLinearVelocity\n\nGets the linear velocity of the Body from its center of mass.\n\nThe linear velocity is the *rate of change of position over time*.\n\n  \nIf you need the *rate of change of angle over time*, use [Body:getAngularVelocity](body-getangularvelocity \"Body:getAngularVelocity\"). If you need to get the linear velocity of a point different from the center of mass:\n\n- [Body:getLinearVelocityFromLocalPoint](body-getlinearvelocityfromlocalpoint \"Body:getLinearVelocityFromLocalPoint\") allows you to specify the point in local coordinates.\n- [Body:getLinearVelocityFromWorldPoint](body-getlinearvelocityfromworldpoint \"Body:getLinearVelocityFromWorldPoint\") allows you to specify the point in world coordinates.\n\nSee [page 136 of \"Essential Mathematics for Games and Interactive Applications\"](http://books.google.com/books?id=g0-G2Dbk5vEC&lpg=PA250&ots=H6T6pJsOqu&dq=%22Essential%20Mathematics%20for%20Games%20and%20Interactive%20Applications%20local%20space&pg=PA136#v=onepage&q&f=false) for definitions of local and world coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = Body:getLinearVelocity( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x-component of the velocity vector\n\n[`number`](number \"number\")` y`  \nThe y-component of the velocity vector\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getLinearVelocity](https://love2d.org/wiki/Body:getLinearVelocity)"
- name: Body:getLinearVelocityFromLocalPoint
  id: body-getlinearvelocityfromlocalpoint
  summary: Get the linear velocity of a point on the body
  description: "# Body:getLinearVelocityFromLocalPoint\n\nGet the linear velocity of a point on the body.\n\nThe linear velocity for a point on the body is the velocity of the body center of mass plus the velocity at that point from the body spinning.\n\n  \nThe point on the body must given in local coordinates. Use [Body:getLinearVelocityFromWorldPoint](body-getlinearvelocityfromworldpoint \"Body:getLinearVelocityFromWorldPoint\") to specify this with world coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nvx, vy = Body:getLinearVelocityFromLocalPoint( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x position to measure velocity.\n\n[`number`](number \"number\")` y`  \nThe y position to measure velocity.\n\n### Returns\n\n[`number`](number \"number\")` vx`  \nThe x component of velocity at point (x,y).\n\n[`number`](number \"number\")` vy`  \nThe y component of velocity at point (x,y).\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getLinearVelocityFromLocalPoint](https://love2d.org/wiki/Body:getLinearVelocityFromLocalPoint)"
- name: Body:getLinearVelocityFromWorldPoint
  id: body-getlinearvelocityfromworldpoint
  summary: Get the linear velocity of a point on the body
  description: "# Body:getLinearVelocityFromWorldPoint\n\nGet the linear velocity of a point on the body.\n\nThe linear velocity for a point on the body is the velocity of the body center of mass plus the velocity at that point from the body spinning.\n\n  \nThe point on the body must given in world coordinates. Use [Body:getLinearVelocityFromLocalPoint](body-getlinearvelocityfromlocalpoint \"Body:getLinearVelocityFromLocalPoint\") to specify this with local coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nvx, vy = Body:getLinearVelocityFromWorldPoint( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x position to measure velocity.\n\n[`number`](number \"number\")` y`  \nThe y position to measure velocity.\n\n### Returns\n\n[`number`](number \"number\")` vx`  \nThe x component of velocity at point (x,y).\n\n[`number`](number \"number\")` vy`  \nThe y component of velocity at point (x,y).\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getLinearVelocityFromWorldPoint](https://love2d.org/wiki/Body:getLinearVelocityFromWorldPoint)"
- name: Body:getLocalCenter
  id: body-getlocalcenter
  summary: Get the center of mass position in local coordinates
  description: "# Body:getLocalCenter\n\nGet the center of mass position in local coordinates.\n\nUse [Body:getWorldCenter](body-getworldcenter \"Body:getWorldCenter\") to get the center of mass in world coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = Body:getLocalCenter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x coordinate of the center of mass.\n\n[`number`](number \"number\")` y`  \nThe y coordinate of the center of mass.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getLocalCenter](https://love2d.org/wiki/Body:getLocalCenter)"
- name: Body:getLocalPoint
  id: body-getlocalpoint
  summary: Transform a point from world coordinates to local coordinates
  description: "# Body:getLocalPoint\n\nTransform a point from world coordinates to local coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nlocalX, localY = Body:getLocalPoint( worldX, worldY )\n```\n\n### Arguments\n\n[`number`](number \"number\")` worldX`  \nThe x position in world coordinates.\n\n[`number`](number \"number\")` worldY`  \nThe y position in world coordinates.\n\n### Returns\n\n[`number`](number \"number\")` localX`  \nThe x position in local coordinates.\n\n[`number`](number \"number\")` localY`  \nThe y position in local coordinates.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getLocalPoint](https://love2d.org/wiki/Body:getLocalPoint)"
- name: Body:getLocalVector
  id: body-getlocalvector
  summary: Transform a vector from world coordinates to local coordinates
  description: "# Body:getLocalVector\n\nTransform a vector from world coordinates to local coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nlocalX, localY = Body:getLocalVector( worldX, worldY )\n```\n\n### Arguments\n\n[`number`](number \"number\")` worldX`  \nThe vector x component in world coordinates.\n\n[`number`](number \"number\")` worldY`  \nThe vector y component in world coordinates.\n\n### Returns\n\n[`number`](number \"number\")` localX`  \nThe vector x component in local coordinates.\n\n[`number`](number \"number\")` localY`  \nThe vector y component in local coordinates.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getLocalVector](https://love2d.org/wiki/Body:getLocalVector)"
- name: Body:getMass
  id: body-getmass
  summary: Get the mass of the body
  description: "# Body:getMass\n\nGet the mass of the body.\n\nStatic bodies always have a mass of 0.\n\n## Function\n\n### Synopsis\n\n``` lua\nmass = Body:getMass( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` mass`  \nThe mass of the body (in kilograms).\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getMass](https://love2d.org/wiki/Body:getMass)"
- name: Body:getMassData
  id: body-getmassdata
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:getMassData\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the mass, its center, and the rotational inertia.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y, mass, inertia = Body:getMassData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x position of the center of mass.\n\n[`number`](number \"number\")` y`  \nThe y position of the center of mass.\n\n[`number`](number \"number\")` mass`  \nThe mass of the body.\n\n[`number`](number \"number\")` inertia`  \nThe rotational inertia.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:setMassData](body-setmassdata \"Body:setMassData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getMassData](https://love2d.org/wiki/Body:getMassData)"
- name: Body:getPosition
  id: body-getposition
  summary: Get the position of the body
  description: "# Body:getPosition\n\nGet the position of the body.\n\nNote that this may not be the center of mass of the body.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = Body:getPosition( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x position.\n\n[`number`](number \"number\")` y`  \nThe y position.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getPosition](https://love2d.org/wiki/Body:getPosition)"
- name: Body:getType
  id: body-gettype
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:getType\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the type of the body.\n\n## Function\n\n### Synopsis\n\n``` lua\ntype = Body:getType( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`BodyType`](bodytype \"BodyType\")` type`  \nThe body type.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:setType](body-settype \"Body:setType\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getType](https://love2d.org/wiki/Body:getType)"
- name: Body:getUserData
  id: body-getuserdata
  summary: Available since LÖVE 0.9.1 This method is not supported in earlier versions
  description: "# Body:getUserData\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis method is not supported in earlier versions.\n\nReturns the Lua value associated with this Body.\n\nUse this function in one thread and one thread only. Using it in more threads will make Lua cry and most likely crash.\n\n## Function\n\n### Synopsis\n\n``` lua\nvalue = Body:getUserData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`any`](https://love2d.org/w/index.php?title=any&action=edit&redlink=1 \"any (page does not exist)\")` value`  \nThe Lua value associated with the Body.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:setUserData](body-setuserdata \"Body:setUserData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getUserData](https://love2d.org/wiki/Body:getUserData)"
- name: Body:getWorld
  id: body-getworld
  summary: Available since LÖVE 0.9.2 This method is not supported in earlier versions
  description: "# Body:getWorld\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis method is not supported in earlier versions.\n\nGets the [World](world \"World\") the body lives in.\n\n## Function\n\n### Synopsis\n\n``` lua\nworld = Body:getWorld( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`World`](world \"World\")` world`  \nThe world the body lives in.\n\n## See Also\n\n- [Body](body \"Body\")\n- [World](world \"World\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getWorld](https://love2d.org/wiki/Body:getWorld)"
- name: Body:getWorldCenter
  id: body-getworldcenter
  summary: Get the center of mass position in world coordinates
  description: "# Body:getWorldCenter\n\nGet the center of mass position in world coordinates.\n\nUse [Body:getLocalCenter](body-getlocalcenter \"Body:getLocalCenter\") to get the center of mass in local coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = Body:getWorldCenter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x coordinate of the center of mass.\n\n[`number`](number \"number\")` y`  \nThe y coordinate of the center of mass.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getWorldCenter](https://love2d.org/wiki/Body:getWorldCenter)"
- name: Body:getWorldPoint
  id: body-getworldpoint
  summary: Transform a point from local coordinates to world coordinates
  description: "# Body:getWorldPoint\n\nTransform a point from local coordinates to world coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nworldX, worldY = Body:getWorldPoint( localX, localY )\n```\n\n### Arguments\n\n[`number`](number \"number\")` localX`  \nThe x position in local coordinates.\n\n[`number`](number \"number\")` localY`  \nThe y position in local coordinates.\n\n### Returns\n\n[`number`](number \"number\")` worldX`  \nThe x position in world coordinates.\n\n[`number`](number \"number\")` worldY`  \nThe y position in world coordinates.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getWorldPoint](https://love2d.org/wiki/Body:getWorldPoint)"
- name: Body:getWorldPoints
  id: body-getworldpoints
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:getWorldPoints\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nTransforms multiple points from local coordinates to world coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nx1, y1, x2, y2, ... = Body:getWorldPoints( x1, y1, x2, y2, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x1`  \nThe x position of the first point.\n\n[`number`](number \"number\")` y1`  \nThe y position of the first point.\n\n[`number`](number \"number\")` x2`  \nThe x position of the second point.\n\n[`number`](number \"number\")` y2`  \nThe y position of the second point.\n\n### Returns\n\n[`number`](number \"number\")` x1`  \nThe transformed x position of the first point.\n\n[`number`](number \"number\")` y1`  \nThe transformed y position of the first point.\n\n[`number`](number \"number\")` x2`  \nThe transformed x position of the second point.\n\n[`number`](number \"number\")` y2`  \nThe transformed y position of the second point.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getWorldPoints](https://love2d.org/wiki/Body:getWorldPoints)"
- name: Body:getWorldVector
  id: body-getworldvector
  summary: Transform a vector from local coordinates to world coordinates
  description: "# Body:getWorldVector\n\nTransform a vector from local coordinates to world coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nworldX, worldY = Body:getWorldVector( localX, localY )\n```\n\n### Arguments\n\n[`number`](number \"number\")` localX`  \nThe vector x component in local coordinates.\n\n[`number`](number \"number\")` localY`  \nThe vector y component in local coordinates.\n\n### Returns\n\n[`number`](number \"number\")` worldX`  \nThe vector x component in world coordinates.\n\n[`number`](number \"number\")` worldY`  \nThe vector y component in world coordinates.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getWorldVector](https://love2d.org/wiki/Body:getWorldVector)"
- name: Body:getX
  id: body-getx
  summary: Get the x position of the body in world coordinates
  description: "# Body:getX\n\nGet the x position of the body in world coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nx = Body:getX( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x position in world coordinates.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getX](https://love2d.org/wiki/Body:getX)"
- name: Body:getY
  id: body-gety
  summary: Get the y position of the body in world coordinates
  description: "# Body:getY\n\nGet the y position of the body in world coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\ny = Body:getY( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` y`  \nThe y position in world coordinates.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:getY](https://love2d.org/wiki/Body:getY)"
- name: Body:isActive
  id: body-isactive
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:isActive\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns whether the body is actively used in the simulation.\n\n## Function\n\n### Synopsis\n\n``` lua\nstatus = Body:isActive( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` status`  \nTrue if the body is active or false if not.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:isActive](https://love2d.org/wiki/Body:isActive)"
- name: Body:isAwake
  id: body-isawake
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:isAwake\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the sleep status of the body.\n\n## Function\n\n### Synopsis\n\n``` lua\nstatus = Body:isAwake( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` status`  \nTrue if the body is awake or false if not.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:isAwake](https://love2d.org/wiki/Body:isAwake)"
- name: Body:isBullet
  id: body-isbullet
  summary: Get the bullet status of a body
  description: "# Body:isBullet\n\nGet the bullet status of a body.\n\nThere are two methods to check for body collisions:\n\n- at their location when the world is updated (default)\n- using continuous collision detection (CCD)\n\nThe default method is efficient, but a body moving very quickly may sometimes jump over another body without producing a collision. A body that is set as a bullet will use CCD. This is less efficient, but is guaranteed not to jump when moving quickly.\n\n  \nNote that static bodies (with zero mass) always use CCD, so your walls will not let a fast moving body pass through even if it is not a bullet.\n\n## Function\n\n### Synopsis\n\n``` lua\nstatus = Body:isBullet( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` status`  \nThe bullet status of the body.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:isBullet](https://love2d.org/wiki/Body:isBullet)"
- name: Body:isDestroyed
  id: body-isdestroyed
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# Body:isDestroyed\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Body is destroyed. Destroyed bodies cannot be used.\n\n## Function\n\n### Synopsis\n\n``` lua\ndestroyed = Body:isDestroyed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` destroyed`  \nWhether the Body is destroyed.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:destroy](body-destroy \"Body:destroy\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:isDestroyed](https://love2d.org/wiki/Body:isDestroyed)"
- name: Body:isDynamic
  id: body-isdynamic
  summary: Removed in LÖVE 0.8.0 It has been replaced by Body:getType
  description: "# Body:isDynamic\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been replaced by [Body:getType](body-gettype \"Body:getType\").\n\nGet the dynamic status of the body.\n\nA static body has no mass and a constant position. It will not react to collisions. Often used for walls.\n\nA dynamic body has mass and can move. It will react to collisions when the world is updated.\n\n## Function\n\n### Synopsis\n\n``` lua\nstatus = Body:isDynamic( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` status`  \nThe dynamic status of the body.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:isDynamic](https://love2d.org/wiki/Body:isDynamic)"
- name: Body:isFixedRotation
  id: body-isfixedrotation
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:isFixedRotation\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns whether the body rotation is locked.\n\n## Function\n\n### Synopsis\n\n``` lua\nfixed = Body:isFixedRotation( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` fixed`  \nTrue if the body's rotation is locked or false if not.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:isFixedRotation](https://love2d.org/wiki/Body:isFixedRotation)"
- name: Body:isFrozen
  id: body-isfrozen
  summary: Removed in LÖVE 0.8.0 This method is not supported in that and later versions
  description: "# Body:isFrozen\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in that and later versions.\n\nGet the frozen status of the body.\n\nA body becomes frozen when it goes outside the world boundary. A frozen body is no longer changed by [World:update](world-update \"World:update\").\n\n## Function\n\n### Synopsis\n\n``` lua\nstatus = Body:isFrozen( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` status`  \nThe frozen status of the body.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:isFrozen](https://love2d.org/wiki/Body:isFrozen)"
- name: Body:isSleeping
  id: body-issleeping
  summary: Removed in LÖVE 0.8.0 This method is not supported in that and later versions
  description: "# Body:isSleeping\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in that and later versions.\n\nGet the sleeping status of a body.\n\nA sleeping body is much more efficient to simulate than when awake.\n\nIf sleeping is allowed, a body that has come to rest will sleep.\n\n## Function\n\n### Synopsis\n\n``` lua\nstatus = Body:isSleeping( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` status`  \nThe sleeping status of the body.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:isSleeping](https://love2d.org/wiki/Body:isSleeping)"
- name: Body:isSleepingAllowed
  id: body-issleepingallowed
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:isSleepingAllowed\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the sleeping behaviour of the body.\n\n## Function\n\n### Synopsis\n\n``` lua\nallowed = Body:isSleepingAllowed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` allowed`  \nTrue if the body is allowed to sleep or false if not.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:setSleepingAllowed](body-setsleepingallowed \"Body:setSleepingAllowed\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:isSleepingAllowed](https://love2d.org/wiki/Body:isSleepingAllowed)"
- name: Body:isStatic
  id: body-isstatic
  summary: Removed in LÖVE 0.8.0 This method is not supported in that and later versions
  description: "# Body:isStatic\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in that and later versions.\n\nGet the static status of the body.\n\nA static body has no mass and a constant position. It will not react to collisions. Often used for walls.\n\nA dynamic body has mass and can move. It will react to collisions when the world is updated.\n\n## Function\n\n### Synopsis\n\n``` lua\nstatus = Body:isStatic( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` status`  \nThe static status of the body.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:isStatic](https://love2d.org/wiki/Body:isStatic)"
- name: Body:isTouching
  id: body-istouching
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Body:isTouching\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Body is touching the given other Body.\n\nUsing this in [love.update](love.update \"love.update\") may miss collisions, since [World:update](world-update \"World:update\") can begin and end a collision within a single call. The [collision callbacks](world-setcallbacks \"World:setCallbacks\") are recommended instead, when feasible.\n\n## Function\n\n### Synopsis\n\n``` lua\ntouching = Body:isTouching( otherbody )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` otherbody`  \nThe other body to check.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` touching`  \nTrue if this body is touching the other body, false otherwise.\n\n## See Also\n\n- [Body](body \"Body\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:isTouching](https://love2d.org/wiki/Body:isTouching)"
- name: Body:putToSleep
  id: body-puttosleep
  summary: Removed in LÖVE 0.8.0 This method is not supported in that and later versions
  description: "# Body:putToSleep\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in that and later versions.\n\nPut the body to sleep.\n\nA sleeping body is much more efficient to simulate than when awake.\n\nThe body will wake up if another body collides with it, if a joint or contact attached to it is destroyed, or if [Body:wakeUp](body-wakeup \"Body:wakeUp\") is called.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:putToSleep( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:putToSleep](https://love2d.org/wiki/Body:putToSleep)"
- name: Body:resetMassData
  id: body-resetmassdata
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:resetMassData\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nResets the mass of the body by recalculating it from the mass properties of the fixtures.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:resetMassData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:resetMassData](https://love2d.org/wiki/Body:resetMassData)"
- name: Body:setActive
  id: body-setactive
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:setActive\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets whether the body is active in the world.\n\nAn inactive body does not take part in the simulation. It will not move or cause any collisions.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setActive( active )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` active`  \nIf the body is active or not.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setActive](https://love2d.org/wiki/Body:setActive)"
- name: Body:setAllowSleeping
  id: body-setallowsleeping
  summary: Removed in LÖVE 0.8.0 It has been replaced by Body:setSleepingAllowed
  description: "# Body:setAllowSleeping\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been replaced by [Body:setSleepingAllowed](body-setsleepingallowed \"Body:setSleepingAllowed\").\n\nSet the sleep behaviour of a body.\n\nA sleeping body is much more efficient to simulate than when awake.\n\nIf sleeping is allowed, a body that has come to rest will sleep.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setAllowSleeping( permission )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` permission`  \nPermission for the body to sleep.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setAllowSleeping](https://love2d.org/wiki/Body:setAllowSleeping)"
- name: Body:setAngle
  id: body-setangle
  summary: Set the angle of the body
  description: "# Body:setAngle\n\nSet the angle of the body.\n\nThe angle is measured in [radians](https://en.wikipedia.org/wiki/Radian). If you need to transform it from degrees, use [math.rad](https://www.lua.org/manual/5.1/manual.html#pdf-math.rad).\n\n  \nA value of 0 radians will mean \"looking to the right\". Although radians increase counter-clockwise, the y axis points down so it becomes *clockwise* from our point of view.\n\n  \nIt is possible to cause a collision with another body by changing its angle.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setAngle( angle )\n```\n\n### Arguments\n\n[`number`](number \"number\")` angle`  \nThe angle in radians.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setAngle](https://love2d.org/wiki/Body:setAngle)"
- name: Body:setAngularDamping
  id: body-setangulardamping
  summary: See Body:getAngularDamping for a definition of angular damping
  description: "# Body:setAngularDamping\n\nSets the angular damping of a Body\n\nSee [Body:getAngularDamping](body-getangulardamping \"Body:getAngularDamping\") for a definition of angular damping.\n\n  \nAngular damping can take any value from 0 to infinity. It is recommended to stay between 0 and 0.1, though. Other values will look unrealistic.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setAngularDamping( damping )\n```\n\n### Arguments\n\n[`number`](number \"number\")` damping`  \nThe new angular damping.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setAngularDamping](https://love2d.org/wiki/Body:setAngularDamping)"
- name: Body:setAngularVelocity
  id: body-setangularvelocity
  summary: Sets the angular velocity of a Body
  description: "# Body:setAngularVelocity\n\nSets the angular velocity of a Body.\n\nThe angular velocity is the *rate of change of angle over time*.\n\n  \nThis function will not accumulate anything; any impulses previously applied since the last call to [World:update](world-update \"World:update\") will be lost.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setAngularVelocity( w )\n```\n\n### Arguments\n\n[`number`](number \"number\")` w`  \nThe new angular velocity, in radians per second\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setAngularVelocity](https://love2d.org/wiki/Body:setAngularVelocity)"
- name: Body:setAwake
  id: body-setawake
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:setAwake\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nWakes the body up or puts it to sleep.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setAwake( awake )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` awake`  \nThe body sleep status.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:isAwake](body-isawake \"Body:isAwake\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setAwake](https://love2d.org/wiki/Body:setAwake)"
- name: Body:setBullet
  id: body-setbullet
  summary: Set the bullet status of a body
  description: "# Body:setBullet\n\nSet the bullet status of a body.\n\nThere are two methods to check for body collisions:\n\n- at their location when the world is updated (default)\n- using continuous collision detection (CCD)\n\nThe default method is efficient, but a body moving very quickly may sometimes jump over another body without producing a collision. A body that is set as a bullet will use CCD. This is less efficient, but is guaranteed not to jump when moving quickly.\n\n  \nNote that static bodies (with zero mass) always use CCD, so your walls will not let a fast moving body pass through even if it is not a bullet.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setBullet( status )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` status`  \nThe bullet status of the body.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:isBullet](body-isbullet \"Body:isBullet\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setBullet](https://love2d.org/wiki/Body:setBullet)"
- name: Body:setFixedRotation
  id: body-setfixedrotation
  summary: Set whether a body has fixed rotation
  description: "# Body:setFixedRotation\n\nSet whether a body has fixed rotation.\n\nBodies with fixed rotation don't vary the speed at which they rotate. Calling this function causes the mass to be reset.\n\nLÖVE [0.6.2](https://love2d.org/wiki/0.6.2 \"0.6.2\") does not contain the fix for a bug with this function when it is called with a false argument.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setFixedRotation( isFixed )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` isFixed`  \nWhether the body should have fixed rotation.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setFixedRotation](https://love2d.org/wiki/Body:setFixedRotation)"
- name: Body:setGravityScale
  id: body-setgravityscale
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:setGravityScale\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets a new gravity scale factor for the body.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setGravityScale( scale )\n```\n\n### Arguments\n\n[`number`](number \"number\")` scale`  \nThe new gravity scale factor.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:getGravityScale](body-getgravityscale \"Body:getGravityScale\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setGravityScale](https://love2d.org/wiki/Body:setGravityScale)"
- name: Body:setInertia
  id: body-setinertia
  summary: Set the inertia of a body
  description: "# Body:setInertia\n\nSet the inertia of a body.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setInertia( inertia )\n```\n\n### Arguments\n\n[`number`](number \"number\")` inertia`  \nThe new moment of inertia, in kilograms \\* pixel squared.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setInertia](https://love2d.org/wiki/Body:setInertia)"
- name: Body:setLinearDamping
  id: body-setlineardamping
  summary: See Body:getLinearDamping for a definition of linear damping
  description: "# Body:setLinearDamping\n\nSets the linear damping of a Body\n\nSee [Body:getLinearDamping](body-getlineardamping \"Body:getLinearDamping\") for a definition of linear damping.\n\n  \nLinear damping can take any value from 0 to infinity. It is recommended to stay between 0 and 0.1, though. Other values will make the objects look \"floaty\"(if gravity is enabled).\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setLinearDamping( ld )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ld`  \nThe new linear damping\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setLinearDamping](https://love2d.org/wiki/Body:setLinearDamping)"
- name: Body:setLinearVelocity
  id: body-setlinearvelocity
  summary: Sets a new linear velocity for the Body
  description: "# Body:setLinearVelocity\n\nSets a new linear velocity for the Body.\n\nThis function will not accumulate anything; any impulses previously applied since the last call to World:update will be lost.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setLinearVelocity( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-component of the velocity vector.\n\n[`number`](number \"number\")` y`  \nThe y-component of the velocity vector.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setLinearVelocity](https://love2d.org/wiki/Body:setLinearVelocity)"
- name: Body:setMass
  id: body-setmass
  summary: Sets a new body mass
  description: "# Body:setMass\n\nSets a new body mass.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nbody:setMass( mass )\n```\n\n### Arguments\n\n[`number`](number \"number\")` mass`  \nThe mass, in kilograms.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\nSets the mass properties directly.\n\nIf you're not sure what all this stuff means, you can use [Body:setMassFromShapes](body-setmassfromshapes \"Body:setMassFromShapes\") after adding shapes instead.\n\nThe first two parameters will be the local coordinates of the Body's [center of mass](https://en.wikipedia.org/wiki/Center_of_mass).\n\nThe third parameter is the mass, in kilograms.\n\nThe last parameter is the [rotational inertia](https://en.wikipedia.org/wiki/Moment_of_inertia).\n\n### Synopsis\n\n``` lua\nbody:setMass( x, y, m, i )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-component of the center of mass in local coordinates.\n\n[`number`](number \"number\")` y`  \nThe y-component of the center of mass in local coordinates.\n\n[`number`](number \"number\")` m`  \nThe mass, in kilograms.\n\n[`number`](number \"number\")` i`  \nThe rotational inertia, in kilograms per squared meter.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setMass](https://love2d.org/wiki/Body:setMass)"
- name: Body:setMassData
  id: body-setmassdata
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:setMassData\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nOverrides the calculated mass data.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setMassData( x, y, mass, inertia )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x position of the center of mass.\n\n[`number`](number \"number\")` y`  \nThe y position of the center of mass.\n\n[`number`](number \"number\")` mass`  \nThe mass of the body.\n\n[`number`](number \"number\")` inertia`  \nThe rotational inertia.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:getMassData](body-getmassdata \"Body:getMassData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setMassData](https://love2d.org/wiki/Body:setMassData)"
- name: Body:setMassFromShapes
  id: body-setmassfromshapes
  summary: Removed in LÖVE 0.8.0 This method is not supported in that and later versions
  description: "# Body:setMassFromShapes\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in that and later versions.\n\nSets mass properties from attatched shapes.\n\nIf you feel that finding the correct mass properties is tricky, then this function may be able to help you. After creating the needed shapes on the Body, a call to this function will set the mass properties based on those shapes. Remember to call this function after adding the shapes.\n\n  \nSetting the mass properties this way always results in a realistic (or at least good-looking) simulation, so using it is highly recommended.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setMassFromShapes( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setMassFromShapes](https://love2d.org/wiki/Body:setMassFromShapes)"
- name: Body:setPosition
  id: body-setposition
  summary: Set the position of the body
  description: "# Body:setPosition\n\nSet the position of the body.\n\nNote that this may not be the center of mass of the body.\n\nThis function cannot wake up the body.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setPosition( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x position.\n\n[`number`](number \"number\")` y`  \nThe y position.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setPosition](https://love2d.org/wiki/Body:setPosition)"
- name: Body:setSleepingAllowed
  id: body-setsleepingallowed
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:setSleepingAllowed\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets the sleeping behaviour of the body. Should sleeping be allowed, a body at rest will automatically sleep. A sleeping body is not simulated unless it collided with an awake body. Be wary that one can end up with a situation like a floating sleeping body if the floor was removed.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setSleepingAllowed( allowed )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` allowed`  \nTrue if the body is allowed to sleep or false if not.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:isSleepingAllowed](body-issleepingallowed \"Body:isSleepingAllowed\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setSleepingAllowed](https://love2d.org/wiki/Body:setSleepingAllowed)"
- name: Body:setType
  id: body-settype
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Body:setType\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets a new body type.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setType( type )\n```\n\n### Arguments\n\n[`BodyType`](bodytype \"BodyType\")` type`  \nThe new type.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:getType](body-gettype \"Body:getType\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setType](https://love2d.org/wiki/Body:setType)"
- name: Body:setUserData
  id: body-setuserdata
  summary: Available since LÖVE 0.9.1 This method is not supported in earlier versions
  description: "# Body:setUserData\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis method is not supported in earlier versions.\n\nAssociates a Lua value with the Body.\n\nTo delete the reference, explicitly pass nil.\n\nUse this function in one thread and one thread only. Using it in more threads will make Lua cry and most likely crash.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setUserData( value )\n```\n\n### Arguments\n\n[`any`](https://love2d.org/w/index.php?title=any&action=edit&redlink=1 \"any (page does not exist)\")` value`  \nThe Lua value to associate with the Body.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n- [Body:getUserData](body-getuserdata \"Body:getUserData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setUserData](https://love2d.org/wiki/Body:setUserData)"
- name: Body:setX
  id: body-setx
  summary: Set the x position of the body
  description: "# Body:setX\n\nSet the x position of the body.\n\nThis function cannot wake up the body.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setX( x )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x position.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setX](https://love2d.org/wiki/Body:setX)"
- name: Body:setY
  id: body-sety
  summary: Set the y position of the body
  description: "# Body:setY\n\nSet the y position of the body.\n\nThis function cannot wake up the body.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:setY( y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` y`  \nThe y position.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:setY](https://love2d.org/wiki/Body:setY)"
- name: Body:wakeUp
  id: body-wakeup
  summary: Removed in LÖVE 0.8.0 This method is not supported in that and later versions
  description: "# Body:wakeUp\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in that and later versions.\n\nWake a sleeping body up.\n\nA sleeping body is much more efficient to simulate than when awake.\n\n  \nA sleeping body will also wake up if another body collides with it or if a joint or contact attached to it is destroyed.\n\n## Function\n\n### Synopsis\n\n``` lua\nBody:wakeUp( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Body:wakeUp](https://love2d.org/wiki/Body:wakeUp)"
- name: BodyType
  id: bodytype
  summary: The types of a Body
  description: "# BodyType\n\nThe types of a [Body](body \"Body\").\n\n## Constants\n\nstatic  \nStatic bodies do not move.\n\ndynamic  \nDynamic bodies collide with all bodies.\n\nkinematic  \nKinematic bodies only collide with dynamic bodies.\n\n## See Also\n\n- [Body](body \"Body\")\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BodyType](https://love2d.org/wiki/BodyType)"
- name: boolean
  id: boolean
  summary: Boolean is the type of the values false and true
  description: "# boolean\n\nFrom the Lua 5.1 [reference manual §2.2](https://www.lua.org/manual/5.1/manual.html#2.2):\n\nBoolean is the type of the values false and true. Both [nil](nil \"nil\") and false make a condition false; *any* other value makes it true.\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/boolean](https://love2d.org/wiki/boolean)"
- name: BufferMode
  id: buffermode
  summary: Available since LÖVE 0.9.0 This enum is not supported in earlier versions
  description: "# BufferMode\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in earlier versions.\n\nBuffer modes for [File](file \"File\") objects.\n\n## Constants\n\nnone  \nNo buffering. The result of write and append operations appears immediately.\n\nline  \nLine buffering. Write and append operations are buffered until a newline is output or the buffer size limit is reached.\n\nfull  \nFull buffering. Write and append operations are always buffered until the buffer size limit is reached.\n\n## See Also\n\n- [File](file \"File\")\n- [File:setBuffer]((file)-setbuffer \"(File):setBuffer\")\n- [File:getBuffer]((file)-getbuffer \"(File):getBuffer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/BufferMode](https://love2d.org/wiki/BufferMode)"
- name: ByteData
  id: bytedata
  summary: Available since LÖVE 11.0 This type is not supported in earlier versions
  description: "# ByteData\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis type is not supported in earlier versions.\n\nData object containing arbitrary bytes in an contiguous memory.\n\nThere are currently no LÖVE functions provided for manipulating the contents of a ByteData, but [Data:getFFIPointer](data-getffipointer \"Data:getFFIPointer\") can be used with LuaJIT's FFI to access and write to the contents directly. Used primarily for creating [ImageData](imagedata \"ImageData\"), [Image](image \"Image\"), also [love.filesystem.mount](love.filesystem.mount \"love.filesystem.mount\") etc.\n\n## Constructors\n\n|                                                                        |                                                       |      |     |\n|------------------------------------------------------------------------|-------------------------------------------------------|------|-----|\n| [love.data.newByteData](love.data.newbytedata \"love.data.newByteData\") | Creates a new Data object containing arbitrary bytes. | 11.0 |     |\n\n## Functions\n\n|                                                               |                                                  |       |     |\n|---------------------------------------------------------------|--------------------------------------------------|-------|-----|\n| [Data:clone](data-clone \"Data:clone\")                         | Creates a new copy of the Data object.           | 11.0  |     |\n| [Data:getFFIPointer](data-getffipointer \"Data:getFFIPointer\") | Gets an FFI pointer to the Data.                 | 11.3  |     |\n| [Data:getPointer](data-getpointer \"Data:getPointer\")          | Gets a pointer to the Data.                      |       |     |\n| [Data:getSize](data-getsize \"Data:getSize\")                   | Gets the [Data](data \"Data\")'s size in bytes.    |       |     |\n| [Data:getString](data-getstring \"Data:getString\")             | Gets the full Data as a string.                  | 0.9.0 |     |\n| [Object:release](object-release \"Object:release\")             | Immediately destroys the object's Lua reference. | 11.0  |     |\n| [Object:type](object-type \"Object:type\")                      | Gets the type of the object as a string.         |       |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                | Checks whether an object is of a certain type.   |       |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n- [Data](data \"Data\")\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ByteData](https://love2d.org/wiki/ByteData)"
- name: Canvas
  id: canvas
  summary: Available since LÖVE 0.8.0 It has been renamed from Framebuffer
  description: "# Canvas\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed from [Framebuffer](framebuffer \"Framebuffer\").\n\nA Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\".\n\nBy drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame.\n\nIn versions prior to [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\"), not all graphics cards that LÖVE supported could use Canvases. [love.graphics.isSupported(\"canvas\")](love.graphics.issupported \"love.graphics.isSupported\") could be used to check for support at runtime.\n\n  \n\nWhen drawing content to a Canvas using regular alpha blending, the alpha values of the content get multiplied with its RGB values.\n\nTherefore the Canvas' pixel colors will have *premultiplied alpha* once it has been drawn to, so when drawing the Canvas to the screen or to another Canvas you must use premultiplied alpha blending – [love.graphics.setBlendMode](love.graphics.setblendmode \"love.graphics.setBlendMode\")(\"alpha\", \"premultiplied\").\n\n## Constructors\n\n|                                                                              |                           |       |     |\n|------------------------------------------------------------------------------|---------------------------|-------|-----|\n| [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\") | Creates a new **Canvas**. | 0.8.0 |     |\n\n## Functions\n\n|                                                                                       |                                                                                                            |        |        |\n|---------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------|--------|--------|\n| [Canvas:clear](canvas-clear \"Canvas:clear\")                                           | Clears the contents of a Canvas to a specific color.                                                       | 0.8.0  | 0.10.0 |\n| [Canvas:generateMipmaps](canvas-generatemipmaps \"Canvas:generateMipmaps\")             | Generates mipmaps for the Canvas, based on the contents of the highest-resolution mipmap level.            | 11.0   |        |\n| [Canvas:getFSAA](canvas-getfsaa \"Canvas:getFSAA\")                                     | Gets the number of FSAA samples used when drawing to the Canvas.                                           | 0.9.1  | 0.10.0 |\n| [Canvas:getFormat](canvas-getformat \"Canvas:getFormat\")                               | Gets the texture format of the Canvas.                                                                     | 0.9.1  | 11.0   |\n| [Canvas:getImageData](canvas-getimagedata \"Canvas:getImageData\")                      | Generates [ImageData](imagedata \"ImageData\") from the contents of the Canvas.                              | 0.8.0  | 0.10.0 |\n| [Canvas:getMSAA](canvas-getmsaa \"Canvas:getMSAA\")                                     | Gets the number of MSAA samples used when drawing to the Canvas.                                           | 0.9.2  |        |\n| [Canvas:getMipmapMode](canvas-getmipmapmode \"Canvas:getMipmapMode\")                   | Gets the [MipmapMode](mipmapmode \"MipmapMode\") this Canvas was created with.                               | 11.0   |        |\n| [Canvas:getPixel](canvas-getpixel \"Canvas:getPixel\")                                  | Gets the pixel at the specified position in a Canvas.                                                      | 0.9.0  | 0.10.0 |\n| [Canvas:newImageData](canvas-newimagedata \"Canvas:newImageData\")                      | Generates [ImageData](imagedata \"ImageData\") from the contents of the Canvas.                              | 0.10.0 |        |\n| [Canvas:renderTo](canvas-renderto \"Canvas:renderTo\")                                  | Render to a Canvas using a function.                                                                       | 0.8.0  |        |\n| [Object:release](object-release \"Object:release\")                                     | Immediately destroys the object's Lua reference.                                                           | 11.0   |        |\n| [Object:type](object-type \"Object:type\")                                              | Gets the type of the object as a string.                                                                   |        |        |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                        | Checks whether an object is of a certain type.                                                             |        |        |\n| [Texture:getDPIScale](texture-getdpiscale \"Texture:getDPIScale\")                      | Gets the DPI scale factor of the Texture.                                                                  | 11.0   |        |\n| [Texture:getDepth](texture-getdepth \"Texture:getDepth\")                               | Gets the depth of a [Volume Texture](texturetype \"TextureType\").                                           | 11.0   |        |\n| [Texture:getDepthSampleMode](texture-getdepthsamplemode \"Texture:getDepthSampleMode\") | Gets the comparison mode used when sampling from a [depth texture](pixelformat \"PixelFormat\") in a shader. | 11.0   |        |\n| [Texture:getDimensions](texture-getdimensions \"Texture:getDimensions\")                | Gets the width and height of the Texture.                                                                  | 0.9.0  |        |\n| [Texture:getFilter](texture-getfilter \"Texture:getFilter\")                            | Gets the [filter mode](filtermode \"FilterMode\") of the Texture.                                            |        |        |\n| [Texture:getFormat](texture-getformat \"Texture:getFormat\")                            | Gets the [pixel format](pixelformat \"PixelFormat\") of the Texture.                                         | 11.0   |        |\n| [Texture:getHeight](texture-getheight \"Texture:getHeight\")                            | Gets the height of the Texture.                                                                            |        |        |\n| [Texture:getLayerCount](texture-getlayercount \"Texture:getLayerCount\")                | Gets the number of layers / slices in an [Array Texture](texturetype \"TextureType\").                       | 11.0   |        |\n| [Texture:getMipmapCount](texture-getmipmapcount \"Texture:getMipmapCount\")             | Gets the number of mipmaps contained in the Texture.                                                       | 11.0   |        |\n| [Texture:getMipmapFilter](texture-getmipmapfilter \"Texture:getMipmapFilter\")          | Gets the mipmap filter mode for a Texture.                                                                 | 0.9.0  |        |\n| [Texture:getPixelDimensions](texture-getpixeldimensions \"Texture:getPixelDimensions\") | Gets the width and height in pixels of the Texture.                                                        | 11.0   |        |\n| [Texture:getPixelHeight](texture-getpixelheight \"Texture:getPixelHeight\")             | Gets the height in pixels of the Texture.                                                                  | 11.0   |        |\n| [Texture:getPixelWidth](texture-getpixelwidth \"Texture:getPixelWidth\")                | Gets the width in pixels of the Texture.                                                                   | 11.0   |        |\n| [Texture:getTextureType](texture-gettexturetype \"Texture:getTextureType\")             | Gets the [type](texturetype \"TextureType\") of the Texture.                                                 | 11.0   |        |\n| [Texture:getWidth](texture-getwidth \"Texture:getWidth\")                               | Gets the width of the Texture.                                                                             |        |        |\n| [Texture:getWrap](texture-getwrap \"Texture:getWrap\")                                  | Gets the wrapping properties of a Texture.                                                                 |        |        |\n| [Texture:isReadable](texture-isreadable \"Texture:isReadable\")                         | Gets whether the Texture can be drawn sent to a Shader.                                                    | 11.0   |        |\n| [Texture:setDepthSampleMode](texture-setdepthsamplemode \"Texture:setDepthSampleMode\") | Sets the comparison mode used when sampling from a [depth texture](pixelformat \"PixelFormat\") in a shader. | 11.0   |        |\n| [Texture:setFilter](texture-setfilter \"Texture:setFilter\")                            | Sets the [filter mode](filtermode \"FilterMode\") of the Texture.                                            |        |        |\n| [Texture:setMipmapFilter](texture-setmipmapfilter \"Texture:setMipmapFilter\")          | Sets the mipmap filter mode for a Texture.                                                                 | 0.9.0  |        |\n| [Texture:setWrap](texture-setwrap \"Texture:setWrap\")                                  | Sets the wrapping properties of a Texture.                                                                 |        |        |\n\n## Enums\n\n|                                       |                                                                            |      |     |\n|---------------------------------------|----------------------------------------------------------------------------|------|-----|\n| [MipmapMode](mipmapmode \"MipmapMode\") | Controls whether a **Canvas** has mipmaps, and its behaviour when it does. | 11.0 |     |\n\n## Supertypes\n\n- [Texture](texture \"Texture\")\n- [Drawable](drawable \"Drawable\")\n- [Object](object \"Object\")\n\n## Examples\n\n### Drawing something to the Canvas and then draw the Canvas to the screen.\n\n``` lua\nfunction love.load()\n    canvas = love.graphics.newCanvas(800, 600)\n \n    -- Rectangle is drawn to the canvas with the regular alpha blend mode.\n    love.graphics.setCanvas(canvas)\n        love.graphics.clear()\n        love.graphics.setBlendMode(\"alpha\")\n        love.graphics.setColor(1, 0, 0, 0.5)\n        love.graphics.rectangle('fill', 0, 0, 100, 100)\n    love.graphics.setCanvas()\nend\n \nfunction love.draw()\n    -- very important!: reset color before drawing to canvas to have colors properly displayed\n    -- see discussion here: https://love2d.org/forums/viewtopic.php?f=4&p=211418#p211418\n    love.graphics.setColor(1, 1, 1, 1)\n \n    -- The rectangle from the Canvas was already alpha blended.\n    -- Use the premultiplied alpha blend mode when drawing the Canvas itself to prevent improper blending.\n    love.graphics.setBlendMode(\"alpha\", \"premultiplied\")\n    love.graphics.draw(canvas)\n    -- Observe the difference if the Canvas is drawn with the regular alpha blend mode instead.\n    love.graphics.setBlendMode(\"alpha\")\n    love.graphics.draw(canvas, 100, 0)\n \n    -- Rectangle is drawn directly to the screen with the regular alpha blend mode.\n    love.graphics.setBlendMode(\"alpha\")\n    love.graphics.setColor(1, 0, 0, 0.5)\n    love.graphics.rectangle('fill', 200, 0, 100, 100)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\")\n- [love.graphics.setBlendMode](love.graphics.setblendmode \"love.graphics.setBlendMode\")\n- [love.graphics.isSupported](love.graphics.issupported \"love.graphics.isSupported\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Canvas](https://love2d.org/wiki/Canvas)"
- name: Canvas:clear
  id: canvas-clear
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.10.0 It has been replaced by love.graphics.clear
  description: "# Canvas:clear\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been replaced by [love.graphics.clear](love.graphics.clear \"love.graphics.clear\").\n\nClears the contents of a [Canvas](canvas \"Canvas\") to a specific color.\n\nCalling this function directly after the Canvas becomes active (via [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\") or [Canvas:renderTo](canvas-renderto \"Canvas:renderTo\")) is more efficient than calling it when the Canvas isn't active, especially on mobile devices.\n\n[love.graphics.setScissor](love.graphics.setscissor \"love.graphics.setScissor\") will restrict the area of the Canvas that this function affects.\n\n## Function\n\nClear the canvas to transparent black: (0, 0, 0, 0).\n\n### Synopsis\n\n``` lua\nCanvas:clear( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Function\n\nClear the canvas to a specific color.\n\n### Synopsis\n\n``` lua\nCanvas:clear( red, green, blue, alpha )\n```\n\n### Arguments\n\n[`number`](number \"number\")` red`  \nRed component of the clear color (0-255).\n\n[`number`](number \"number\")` green`  \nGreen component of the clear color (0-255).\n\n[`number`](number \"number\")` blue`  \nBlue component of the clear color (0-255).\n\n[`number`](number \"number\")` alpha (255)`  \nAlpha component of the clear color (0-255).\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nCanvas:clear( rgba )\n```\n\n### Arguments\n\n[`table`](table \"table\")` rgba`  \nA [sequence](sequence \"sequence\") with the red, green, blue and alpha values as numbers (alpha may be ommitted).\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Clear canvas before drawing\n\nIf the c-key is pressed the canvas will be cleared before drawing a new line on the screen.\n\n``` lua\nlocal canvas = love.graphics.newCanvas()\nlocal clear\nfunction love.update()\n    -- Use an anonymous function to draw lines on our canvas.\n    canvas:renderTo(function()\n        if clear then canvas:clear() end   -- Clear the canvas before drawing lines.\n        love.graphics.setColor(love.math.random(255), 0, 0)\n        love.graphics.line(0, 0, love.math.random(0, love.graphics.getWidth()), love.math.random(0, love.graphics.getHeight()))\n    end)\nend\n \nfunction love.draw()\n    love.graphics.setColor(255, 255, 255)\n    love.graphics.draw(canvas)\nend\n \nfunction love.keypressed(key)\n    if key == \"c\" then clear = not clear end\nend\n```\n\n## See Also\n\n- [Canvas](canvas \"Canvas\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Canvas:clear](https://love2d.org/wiki/Canvas:clear)"
- name: Canvas:generateMipmaps
  id: canvas-generatemipmaps
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Canvas:generateMipmaps\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGenerates mipmaps for the Canvas, based on the contents of the highest-resolution mipmap level.\n\nThe Canvas must be [created](love.graphics.newcanvas \"love.graphics.newCanvas\") with mipmaps set to a [MipmapMode](mipmapmode \"MipmapMode\") other than \"none\" for this function to work. It should only be called while the Canvas is not the active render target.\n\nIf the mipmap mode is set to \"auto\", this function is automatically called inside [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\") when switching from this Canvas to another Canvas or to the main screen.\n\n## Function\n\n### Synopsis\n\n``` lua\nCanvas:generateMipmaps( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Canvas](canvas \"Canvas\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [Canvas:getMipmapMode](canvas-getmipmapmode \"Canvas:getMipmapMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Canvas:generateMipmaps](https://love2d.org/wiki/Canvas:generateMipmaps)"
- name: Canvas:getFormat
  id: canvas-getformat
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# Canvas:getFormat\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been replaced by [Texture:getFormat](texture-getformat \"Texture:getFormat\").\n\nGets the texture format of the Canvas.\n\n## Function\n\n### Synopsis\n\n``` lua\nformat = Canvas:getFormat( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`CanvasFormat`](canvasformat \"CanvasFormat\")` format`  \nThe format of the Canvas.\n\n## See Also\n\n- [Canvas](canvas \"Canvas\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Canvas:getFormat](https://love2d.org/wiki/Canvas:getFormat)"
- name: Canvas:getFSAA
  id: canvas-getfsaa
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# Canvas:getFSAA\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been renamed to [Canvas:getMSAA](canvas-getmsaa \"Canvas:getMSAA\").\n\nGets the number of antialiasing samples used when drawing to the Canvas.\n\nThis may be different than the number used as an argument to [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\") if the system running LÖVE doesn't support that number.\n\n## Function\n\n### Synopsis\n\n``` lua\nsamples = Canvas:getFSAA( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` samples`  \nThe number of antialiasing samples used by the canvas when drawing to it.\n\n## See Also\n\n- [Canvas](canvas \"Canvas\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [love.graphics.getSystemLimit](love.graphics.getsystemlimit \"love.graphics.getSystemLimit\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Canvas:getFSAA](https://love2d.org/wiki/Canvas:getFSAA)"
- name: Canvas:getImageData
  id: canvas-getimagedata
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.10.0 It has been renamed to Canvas:newImageData
  description: "# Canvas:getImageData\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been renamed to [Canvas:newImageData](canvas-newimagedata \"Canvas:newImageData\").\n\nGenerates [ImageData](imagedata \"ImageData\") from the contents of the Canvas. Think of it as taking a screenshot of the hidden screen that is the Canvas.\n\n## Function\n\n### Synopsis\n\n``` lua\ndata = Canvas:getImageData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` data`  \nThe new ImageData made from the Canvas' image.\n\n## See Also\n\n- [Canvas](canvas \"Canvas\")\n- [love.graphics.newScreenshot](love.graphics.newscreenshot \"love.graphics.newScreenshot\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Canvas:getImageData](https://love2d.org/wiki/Canvas:getImageData)"
- name: Canvas:getMipmapMode
  id: canvas-getmipmapmode
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Canvas:getMipmapMode\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the [MipmapMode](mipmapmode \"MipmapMode\") this Canvas was created with.\n\n## Function\n\n### Synopsis\n\n``` lua\nmode = Canvas:getMipmapMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`MipmapMode`](mipmapmode \"MipmapMode\")` mode`  \nThe mipmap mode this Canvas was created with.\n\n## See Also\n\n- [Canvas](canvas \"Canvas\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [Canvas:generateMipmaps](canvas-generatemipmaps \"Canvas:generateMipmaps\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Canvas:getMipmapMode](https://love2d.org/wiki/Canvas:getMipmapMode)"
- name: Canvas:getMSAA
  id: canvas-getmsaa
  summary: Available since LÖVE 0.9.2 It has been renamed from Canvas:getFSAA
  description: "# Canvas:getMSAA\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nIt has been renamed from [Canvas:getFSAA](canvas-getfsaa \"Canvas:getFSAA\").\n\nGets the number of multisample antialiasing (MSAA) samples used when drawing to the Canvas.\n\nThis may be different than the number used as an argument to [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\") if the system running LÖVE doesn't support that number.\n\n## Function\n\n### Synopsis\n\n``` lua\nsamples = Canvas:getMSAA( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` samples`  \nThe number of multisample antialiasing samples used by the canvas when drawing to it.\n\n## See Also\n\n- [Canvas](canvas \"Canvas\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [love.graphics.getSystemLimit](love.graphics.getsystemlimit \"love.graphics.getSystemLimit\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Canvas:getMSAA](https://love2d.org/wiki/Canvas:getMSAA)"
- name: Canvas:getPixel
  id: canvas-getpixel
  summary: Available since LÖVE 0.9.0 and removed in LÖVE 0.10.0 Use Canvas:newImageData instead
  description: "# Canvas:getPixel\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [Canvas:newImageData](canvas-newimagedata \"Canvas:newImageData\") instead.\n\n  \nGets the pixel at the specified position from a Canvas.\n\nValid x and y values start at 0 and go up to canvas width and height minus 1.\n\nThis function can be very slow: it can cause the CPU to wait for the GPU to finish all the work currently in its queue, which can be a whole frame's worth (or more.)\n\n## Function\n\n### Synopsis\n\n``` lua\nr, g, b, a = Canvas:getPixel( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe position of the pixel on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the pixel on the y-axis.\n\n### Returns\n\n[`number`](number \"number\")` r`  \nThe red component (0-255).\n\n[`number`](number \"number\")` g`  \nThe green component (0-255).\n\n[`number`](number \"number\")` b`  \nThe blue component (0-255).\n\n[`number`](number \"number\")` a`  \nThe alpha component (0-255).\n\n## See Also\n\n- [Canvas](canvas \"Canvas\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Canvas:getPixel](https://love2d.org/wiki/Canvas:getPixel)"
- name: Canvas:getWrap
  id: canvas-getwrap
  summary: Available since LÖVE 0.8.0 It has been renamed from Framebuffer:getWrap
  description: "# Canvas:getWrap\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed from [Framebuffer:getWrap](framebuffer-getwrap \"Framebuffer:getWrap\").\n\nGets the wrapping properties of a Canvas.\n\nThis function returns the currently set horizontal and vertical [wrapping modes](wrapmode \"WrapMode\") for the Canvas.\n\n## Function\n\n### Synopsis\n\n``` lua\nhoriz, vert = Canvas:getWrap( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`WrapMode`](wrapmode \"WrapMode\")` horiz`  \nHorizontal wrapping mode of the Canvas.\n\n[`WrapMode`](wrapmode \"WrapMode\")` vert`  \nVertical wrapping mode of the Canvas.\n\n## See Also\n\n- [Canvas](canvas \"Canvas\")\n- [Canvas:setWrap](canvas-setwrap \"Canvas:setWrap\")\n- [WrapMode](wrapmode \"WrapMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Canvas:getWrap](https://love2d.org/wiki/Canvas:getWrap)"
- name: Canvas:newImageData
  id: canvas-newimagedata
  summary: Available since LÖVE 0.10.0 It has been renamed from Canvas:getImageData
  description: "# Canvas:newImageData\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been renamed from [Canvas:getImageData](canvas-getimagedata \"Canvas:getImageData\").\n\nGenerates [ImageData](imagedata \"ImageData\") from the contents of the Canvas.\n\n  \n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\ndata = Canvas:newImageData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` data`  \nThe new ImageData made from the Canvas' contents.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\ndata = Canvas:newImageData( slice, mipmap, x, y, width, height )\n```\n\n### Arguments\n\n[`number`](number \"number\")` slice`  \nThe cubemap face index, array index, or depth layer for [cubemap, array, or volume](texturetype \"TextureType\") type Canvases, respectively. This argument is ignored for regular 2D canvases.\n\n[`number`](number \"number\")` mipmap (1)`  \nThe mipmap index to use, for Canvases with [mipmaps](mipmapmode \"MipmapMode\").\n\n[`number`](number \"number\")` x`  \nThe x-axis of the top-left corner (in pixels) of the area within the Canvas to capture.\n\n[`number`](number \"number\")` y`  \nThe y-axis of the top-left corner (in pixels) of the area within the Canvas to capture.\n\n[`number`](number \"number\")` width`  \nThe width in pixels of the area within the Canvas to capture.\n\n[`number`](number \"number\")` height`  \nThe height in pixels of the area within the Canvas to capture.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` data`  \nThe new ImageData made from the Canvas' contents.\n\n## Function\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\ndata = Canvas:newImageData( x, y, width, height )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-axis of the top-left corner (in pixels) of the area within the Canvas to capture.\n\n[`number`](number \"number\")` y`  \nThe y-axis of the top-left corner (in pixels) of the area within the Canvas to capture.\n\n[`number`](number \"number\")` width`  \nThe width in pixels of the area within the Canvas to capture.\n\n[`number`](number \"number\")` height`  \nThe height in pixels of the area within the Canvas to capture.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` data`  \nThe new ImageData made from the Canvas' contents.\n\n## See Also\n\n- [Canvas](canvas \"Canvas\")\n- [love.graphics.captureScreenshot](love.graphics.capturescreenshot \"love.graphics.captureScreenshot\")\n- [ImageData](imagedata \"ImageData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Canvas:newImageData](https://love2d.org/wiki/Canvas:newImageData)"
- name: Canvas:renderTo
  id: canvas-renderto
  summary: Available since LÖVE 0.8.0 It has been renamed from Framebuffer:renderTo
  description: "# Canvas:renderTo\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed from [Framebuffer:renderTo](framebuffer-renderto \"Framebuffer:renderTo\").\n\nRender to the [Canvas](canvas \"Canvas\") using a function.\n\nThis is a shortcut to [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\"):\n\n``` lua\ncanvas:renderTo( func )\n```\n\nis the same as\n\n``` lua\nlove.graphics.setCanvas( canvas )\nfunc()\nlove.graphics.setCanvas()\n```\n\n## Function\n\n### Synopsis\n\n``` lua\nCanvas:renderTo( func )\n```\n\n### Arguments\n\n[`function`](function \"function\")` func`  \nA function performing drawing operations.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Using an anonymous function for drawing to a Canvas\n\nThis example randomly draws a bunch of red lines from the top left corner of the screen to the bottom.\n\n``` lua\nlocal canvas = love.graphics.newCanvas()\nfunction love.update()\n    canvas:renderTo(function()\n        love.graphics.setColor(love.math.random(), 0, 0);\n        love.graphics.line(0, 0, love.math.random(0, love.graphics.getWidth()), love.math.random(0, love.graphics.getHeight()));\n    end);\nend\n \nfunction love.draw()\n    love.graphics.setColor(1, 1, 1);\n    love.graphics.draw(canvas);\nend\n```\n\n## See Also\n\n- [Canvas](canvas \"Canvas\")\n- [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Canvas:renderTo](https://love2d.org/wiki/Canvas:renderTo)"
- name: Canvas:setWrap
  id: canvas-setwrap
  summary: Available since LÖVE 0.8.0 It has been renamed from Framebuffer:setWrap
  description: "# Canvas:setWrap\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed from [Framebuffer:setWrap](framebuffer-setwrap \"Framebuffer:setWrap\").\n\nSets the wrapping properties of a Canvas.\n\nThis function sets the way the edges of a Canvas are treated if it is scaled or rotated. If the WrapMode is set to 'clamp', the edge will not be interpolated. If set to 'repeat', the edge will be interpolated with the pixels on the opposing side of the framebuffer.\n\n## Function\n\n### Synopsis\n\n``` lua\nCanvas:setWrap( horiz, vert )\n```\n\n### Arguments\n\n[`WrapMode`](wrapmode \"WrapMode\")` horiz`  \nHorizontal wrapping mode of the Canvas.\n\n[`WrapMode`](wrapmode \"WrapMode\")` vert`  \nVertical wrapping mode of the Canvas.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Canvas](canvas \"Canvas\")\n- [Canvas:getWrap](canvas-getwrap \"Canvas:getWrap\")\n- [WrapMode](wrapmode \"WrapMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Canvas:setWrap](https://love2d.org/wiki/Canvas:setWrap)"
- name: CanvasFormat
  id: canvasformat
  summary: Available since LÖVE 0.9.0 This enum is not supported in earlier versions
  description: "# CanvasFormat\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in earlier versions.\n\n|                                                                      |\n|----------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")*** |\n| It has been superseded by [PixelFormat](pixelformat \"PixelFormat\").. |\n\n[Canvas](canvas \"Canvas\") formats.\n\n## Constants\n\nnormal  \nThe default Canvas format - usually an alias for the `rgba8` format, or the `srgb` format if [gamma-correct rendering](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") is enabled in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") and newer.\n\nhdr  \nA format suitable for high dynamic range content - an alias for the `rgba16f` format, normally.\n\nrgba8 Available since 0.9.2  \n8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders).\n\nrgba4 Available since 0.9.2  \n4 bits per channel (16 bpp) RGBA.\n\nrgb5a1 Available since 0.9.2  \nRGB with 5 bits each, and a 1-bit alpha channel (16 bpp).\n\nrgb565 Available since 0.9.2  \nRGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format.\n\nrgb10a2 Available since 0.9.2  \nRGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp).\n\nrgba16f Available since 0.9.2  \nFloating point RGBA with 16 bits per channel (64 bpp). Color values can range from \\[-65504, +65504\\].\n\nrgba32f Available since 0.9.2  \nFloating point RGBA with 32 bits per channel (128 bpp).\n\nrg11b10f Available since 0.9.2  \nFloating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from \\[0, +65024\\].\n\nsrgb Available since 0.9.2  \nThe same as `rgba8`, but the Canvas is *interpreted* as being in the sRGB color space. Everything drawn to the Canvas will be converted from linear RGB to sRGB. When the Canvas is drawn (or used in a shader), it will be decoded from sRGB to linear RGB. This reduces color banding when doing gamma-correct rendering, since sRGB encoding has more precision than linear RGB for darker colors.\n\n  \n\nr8 Available since 0.10.0  \nSingle-channel (red component) format (8 bpp).\n\nrg8 Available since 0.10.0  \nTwo channels (red and green components) with 8 bits per channel (16 bpp).\n\nr16f Available since 0.10.0  \nFloating point single-channel format (16 bpp). Color values can range from \\[-65504, +65504\\].\n\nrg16f Available since 0.10.0  \nFloating point two-channel format with 16 bits per channel (32 bpp). Color values can range from \\[-65504, +65504\\].\n\nr32f Available since 0.10.0  \nFloating point single-channel format (32 bpp).\n\nrg32f Available since 0.10.0  \nFloating point two-channel format with 32 bits per channel (64 bpp).\n\n  \n\n## Notes\n\nThe 16 bpp RGB and RGBA formats use half as much VRAM as the 32 bpp RGBA formats, but they have significantly lower quality.\n\nThe HDR / floating point formats are most useful when combined with pixel shaders. Effects such as tonemapped HDR with bloom can be accomplished, or the canvas can be used to store arbitrary non-color data such as positions which can then be used in a custom shader.\n\nThe sRGB format should only be used when doing gamma-correct rendering, which is an advanced topic and it's easy to get color-spaces mixed up. If you're not sure whether you need this, you might want to avoid it. Read more about gamma-correct rendering [here](http://http.developer.nvidia.com/GPUGems3/gpugems3_ch24.html), [here](http://filmicgames.com/archives/299), and [here](http://renderwonk.com/blog/index.php/archive/adventures-with-gamma-correct-rendering/).\n\nNot all systems support every format. Use [love.graphics.getCanvasFormats](love.graphics.getcanvasformats \"love.graphics.getCanvasFormats\") to check before creating the Canvas.\n\nIn general, `rgba8`, `rgba4`, and `rgb5a1` are supported everywhere. `rgb10a2` is also supported everywhere on desktop platforms.\n\nThe regular single- and two-channel formats (`r8` and `rg8`), as well as the `srgb` format, are supported on desktop graphics cards capable of OpenGL 3+ / DirectX 10+ (nvidia GeForce 8000 series and up, ATI/AMD HD 2000 series and up, and the Intel HD 2000 and up), and mobile GPUs capable of OpenGL ES 3.\n\nThe floating-point formats (`rgba16f`, `rgba32f`, `rg11b10f`, `r16f`, `rg16f`, `r32f`, and `rg32f`) are supported on OpenGL 3-capable desktop graphics cards, and some OpenGL ES 3 mobile GPUs. The 32-bit-per-channel floating point formats are rarely supported on mobile devices.\n\n`rgb565` is often only supported on OpenGL ES / mobile devices, or with very new desktop OpenGL drivers.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getCanvasFormats](love.graphics.getcanvasformats \"love.graphics.getCanvasFormats\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [Canvas:getFormat](canvas-getformat \"Canvas:getFormat\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CanvasFormat](https://love2d.org/wiki/CanvasFormat)"
- name: cdata
  id: cdata
  summary: A C data object
  description: "# cdata\n\nA C data object.\n\nSee [http://luajit.org/ext_ffi_api.html](https://luajit.org/ext_ffi_api.html) for more information.\n\n## Other Language\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/cdata](https://love2d.org/wiki/cdata)"
- name: ChainShape
  id: chainshape
  summary: Available since LÖVE 0.8.0 This shape is not supported in earlier versions
  description: "# ChainShape\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis shape is not supported in earlier versions.\n\nA ChainShape consists of multiple line segments. It can be used to create the boundaries of your terrain. The shape does not have volume and can only collide with [PolygonShape](polygonshape \"PolygonShape\") and [CircleShape](circleshape \"CircleShape\").\n\nUnlike the [PolygonShape](polygonshape \"PolygonShape\"), the ChainShape does not have a vertices limit or has to form a convex shape, but self intersections are not supported.\n\n## Constructors\n\n|                                                                                       |                               |       |     |\n|---------------------------------------------------------------------------------------|-------------------------------|-------|-----|\n| [love.physics.newChainShape](love.physics.newchainshape \"love.physics.newChainShape\") | Creates a new **ChainShape**. | 0.8.0 |     |\n\n## Functions\n\n|                                                                                             |                                                                      |        |       |\n|---------------------------------------------------------------------------------------------|----------------------------------------------------------------------|--------|-------|\n| [ChainShape:getChildEdge](chainshape-getchildedge \"ChainShape:getChildEdge\")                | Returns a child of the shape as an EdgeShape.                        | 0.8.0  |       |\n| [ChainShape:getNextVertex](chainshape-getnextvertex \"ChainShape:getNextVertex\")             | Gets the vertex that establishes a connection to the next shape.     | 0.10.2 |       |\n| [ChainShape:getPoint](chainshape-getpoint \"ChainShape:getPoint\")                            | Returns a point of the shape.                                        | 0.8.0  |       |\n| [ChainShape:getPoints](chainshape-getpoints \"ChainShape:getPoints\")                         | Returns all points of the shape.                                     | 0.8.0  |       |\n| [ChainShape:getPreviousVertex](chainshape-getpreviousvertex \"ChainShape:getPreviousVertex\") | Gets the vertex that establishes a connection to the previous shape. | 0.10.2 |       |\n| [ChainShape:getVertexCount](chainshape-getvertexcount \"ChainShape:getVertexCount\")          | Returns the number of vertices the shape has.                        | 0.8.0  |       |\n| [ChainShape:setNextVertex](chainshape-setnextvertex \"ChainShape:setNextVertex\")             | Sets a vertex that establishes a connection to the next shape.       | 0.8.0  |       |\n| [ChainShape:setPrevVertex](chainshape-setprevvertex \"ChainShape:setPrevVertex\")             | Sets a vertex that establishes a connection to the previous shape.   | 0.8.0  | 0.9.0 |\n| [ChainShape:setPreviousVertex](chainshape-setpreviousvertex \"ChainShape:setPreviousVertex\") | Sets a vertex that establishes a connection to the previous shape.   | 0.9.0  |       |\n| [Object:release](object-release \"Object:release\")                                           | Immediately destroys the object's Lua reference.                     | 11.0   |       |\n| [Object:type](object-type \"Object:type\")                                                    | Gets the type of the object as a string.                             |        |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                              | Checks whether an object is of a certain type.                       |        |       |\n| [Shape:computeAABB](shape-computeaabb \"Shape:computeAABB\")                                  | Returns the points of the bounding box for the transformed shape.    | 0.8.0  |       |\n| [Shape:computeMass](shape-computemass \"Shape:computeMass\")                                  | Computes the mass properties for the shape.                          | 0.8.0  |       |\n| [Shape:destroy](shape-destroy \"Shape:destroy\")                                              | Explicitly destroys the Shape.                                       |        | 0.8.0 |\n| [Shape:getBody](shape-getbody \"Shape:getBody\")                                              | Get the body the shape is attached to.                               | 0.7.0  | 0.8.0 |\n| [Shape:getBoundingBox](shape-getboundingbox \"Shape:getBoundingBox\")                         | Gets the bounding box of the shape.                                  |        | 0.8.0 |\n| [Shape:getCategory](shape-getcategory \"Shape:getCategory\")                                  | Gets the categories this shape is a member of.                       |        | 0.8.0 |\n| [Shape:getCategoryBits](shape-getcategorybits \"Shape:getCategoryBits\")                      | Gets the categories as a 16-bit integer.                             |        | 0.8.0 |\n| [Shape:getChildCount](shape-getchildcount \"Shape:getChildCount\")                            | Returns the number of children the shape has.                        | 0.8.0  |       |\n| [Shape:getData](shape-getdata \"Shape:getData\")                                              | Get the data set with setData.                                       |        | 0.8.0 |\n| [Shape:getDensity](shape-getdensity \"Shape:getDensity\")                                     | Gets the density of the Shape.                                       |        | 0.8.0 |\n| [Shape:getFilterData](shape-getfilterdata \"Shape:getFilterData\")                            | Gets the filter data of the Shape.                                   |        | 0.8.0 |\n| [Shape:getFriction](shape-getfriction \"Shape:getFriction\")                                  | Gets the friction of this shape.                                     |        | 0.8.0 |\n| [Shape:getMask](shape-getmask \"Shape:getMask\")                                              | Gets which categories this shape should **NOT** collide with.        |        | 0.8.0 |\n| [Shape:getRadius](shape-getradius \"Shape:getRadius\")                                        | Gets the radius of the shape.                                        |        |       |\n| [Shape:getRestitution](shape-getrestitution \"Shape:getRestitution\")                         | Gets the restitution of this shape.                                  |        | 0.8.0 |\n| [Shape:getType](shape-gettype \"Shape:getType\")                                              | Gets a string representing the Shape.                                |        |       |\n| [Shape:isSensor](shape-issensor \"Shape:isSensor\")                                           | Checks whether a Shape is a sensor or not.                           |        | 0.8.0 |\n| [Shape:rayCast](shape-raycast \"Shape:rayCast\")                                              | Casts a ray against the shape.                                       | 0.8.0  |       |\n| [Shape:setCategory](shape-setcategory \"Shape:setCategory\")                                  | Sets the categories this shape is a member of.                       |        | 0.8.0 |\n| [Shape:setData](shape-setdata \"Shape:setData\")                                              | Set data to be passed to the collision callback.                     |        | 0.8.0 |\n| [Shape:setDensity](shape-setdensity \"Shape:setDensity\")                                     | Sets the density of a Shape.                                         |        | 0.8.0 |\n| [Shape:setFilterData](shape-setfilterdata \"Shape:setFilterData\")                            | Sets the filter data for a Shape.                                    |        | 0.8.0 |\n| [Shape:setFriction](shape-setfriction \"Shape:setFriction\")                                  | Sets the friction of the shape.                                      |        | 0.8.0 |\n| [Shape:setMask](shape-setmask \"Shape:setMask\")                                              | Sets which categories this shape should **NOT** collide with.        |        | 0.8.0 |\n| [Shape:setRestitution](shape-setrestitution \"Shape:setRestitution\")                         | Sets the restitution of the shape.                                   |        | 0.8.0 |\n| [Shape:setSensor](shape-setsensor \"Shape:setSensor\")                                        | Sets whether this shape should act as a sensor.                      |        | 0.8.0 |\n| [Shape:testPoint](shape-testpoint \"Shape:testPoint\")                                        | Checks whether a point lies inside the shape.                        |        |       |\n| [Shape:testSegment](shape-testsegment \"Shape:testSegment\")                                  | Checks whether a line segment intersects a shape.                    |        | 0.8.0 |\n\n## Supertypes\n\n- [Shape](shape \"Shape\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ChainShape](https://love2d.org/wiki/ChainShape)"
- name: ChainShape:getChildEdge
  id: chainshape-getchildedge
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# ChainShape:getChildEdge\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns a child of the shape as an EdgeShape.\n\n## Function\n\n### Synopsis\n\n``` lua\nshape = ChainShape:getChildEdge( index )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nThe index of the child.\n\n### Returns\n\n[`EdgeShape`](edgeshape \"EdgeShape\")` shape`  \nThe child as an EdgeShape.\n\n## See Also\n\n- [ChainShape](chainshape \"ChainShape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ChainShape:getChildEdge](https://love2d.org/wiki/ChainShape:getChildEdge)"
- name: ChainShape:getNextVertex
  id: chainshape-getnextvertex
  summary: Available since LÖVE 0.10.2 This function is not supported in earlier versions
  description: "# ChainShape:getNextVertex\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis function is not supported in earlier versions.\n\nGets the vertex that establishes a connection to the next shape.\n\nSetting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = ChainShape:getNextVertex( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x (nil)`  \nThe x-component of the vertex, or nil if [ChainShape:setNextVertex](chainshape-setnextvertex \"ChainShape:setNextVertex\") hasn't been called.\n\n[`number`](number \"number\")` y (nil)`  \nThe y-component of the vertex, or nil if [ChainShape:setNextVertex](chainshape-setnextvertex \"ChainShape:setNextVertex\") hasn't been called.\n\n## See Also\n\n- [ChainShape](chainshape \"ChainShape\")\n- [ChainShape:setNextVertex](chainshape-setnextvertex \"ChainShape:setNextVertex\")\n- [ChainShape:getPreviousVertex](chainshape-getpreviousvertex \"ChainShape:getPreviousVertex\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ChainShape:getNextVertex](https://love2d.org/wiki/ChainShape:getNextVertex)"
- name: ChainShape:getPoint
  id: chainshape-getpoint
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# ChainShape:getPoint\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns a point of the shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = ChainShape:getPoint( index )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nThe index of the point to return.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x-coordinate of the point.\n\n[`number`](number \"number\")` y`  \nThe y-coordinate of the point.\n\n## See Also\n\n- [ChainShape](chainshape \"ChainShape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ChainShape:getPoint](https://love2d.org/wiki/ChainShape:getPoint)"
- name: ChainShape:getPoints
  id: chainshape-getpoints
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# ChainShape:getPoints\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns all points of the shape.\n\nA bug in [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") causes memory corruption if this function gets called on a ChainShape with more than 8 points.\n\n## Function\n\n### Synopsis\n\n``` lua\nx1, y1, x2, y2, ... = ChainShape:getPoints( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x1`  \nThe x-coordinate of the first point.\n\n[`number`](number \"number\")` y1`  \nThe y-coordinate of the first point.\n\n[`number`](number \"number\")` x2`  \nThe x-coordinate of the second point.\n\n[`number`](number \"number\")` y2`  \nThe y-coordinate of the second point.\n\n## See Also\n\n- [ChainShape](chainshape \"ChainShape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ChainShape:getPoints](https://love2d.org/wiki/ChainShape:getPoints)"
- name: ChainShape:getPreviousVertex
  id: chainshape-getpreviousvertex
  summary: Available since LÖVE 0.10.2 This function is not supported in earlier versions
  description: "# ChainShape:getPreviousVertex\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis function is not supported in earlier versions.\n\nGets the vertex that establishes a connection to the previous shape.\n\nSetting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = ChainShape:getPreviousVertex( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x (nil)`  \nThe x-component of the vertex, or nil if [ChainShape:setPreviousVertex](chainshape-setpreviousvertex \"ChainShape:setPreviousVertex\") hasn't been called.\n\n[`number`](number \"number\")` y (nil)`  \nThe y-component of the vertex, or nil if [ChainShape:setPreviousVertex](chainshape-setpreviousvertex \"ChainShape:setPreviousVertex\") hasn't been called.\n\n## See Also\n\n- [ChainShape](chainshape \"ChainShape\")\n- [ChainShape:setPreviousVertex](chainshape-setpreviousvertex \"ChainShape:setPreviousVertex\")\n- [ChainShape:getNextVertex](chainshape-getnextvertex \"ChainShape:getNextVertex\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ChainShape:getPreviousVertex](https://love2d.org/wiki/ChainShape:getPreviousVertex)"
- name: ChainShape:getVertexCount
  id: chainshape-getvertexcount
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# ChainShape:getVertexCount\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns the number of vertices the shape has.\n\n## Function\n\n### Synopsis\n\n``` lua\ncount = ChainShape:getVertexCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` count`  \nThe number of vertices.\n\n## See Also\n\n- [ChainShape](chainshape \"ChainShape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ChainShape:getVertexCount](https://love2d.org/wiki/ChainShape:getVertexCount)"
- name: ChainShape:setNextVertex
  id: chainshape-setnextvertex
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# ChainShape:setNextVertex\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nSets a vertex that establishes a connection to the next shape.\n\nThis can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nChainShape:setNextVertex( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-component of the vertex.\n\n[`number`](number \"number\")` y`  \nThe y-component of the vertex.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ChainShape](chainshape \"ChainShape\")\n- [ChainShape:setPreviousVertex](chainshape-setpreviousvertex \"ChainShape:setPreviousVertex\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ChainShape:setNextVertex](https://love2d.org/wiki/ChainShape:setNextVertex)"
- name: ChainShape:setPreviousVertex
  id: chainshape-setpreviousvertex
  summary: Available since LÖVE 0.9.0 It has been renamed from ChainShape:setPrevVertex
  description: "# ChainShape:setPreviousVertex\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [ChainShape:setPrevVertex](chainshape-setprevvertex \"ChainShape:setPrevVertex\").\n\nSets a vertex that establishes a connection to the previous shape.\n\nThis can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nChainShape:setPreviousVertex( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-component of the vertex.\n\n[`number`](number \"number\")` y`  \nThe y-component of the vertex.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ChainShape](chainshape \"ChainShape\")\n- [ChainShape:setNextVertex](chainshape-setnextvertex \"ChainShape:setNextVertex\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ChainShape:setPreviousVertex](https://love2d.org/wiki/ChainShape:setPreviousVertex)"
- name: ChainShape:setPrevVertex
  id: chainshape-setprevvertex
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# ChainShape:setPrevVertex\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [ChainShape:setPreviousVertex](chainshape-setpreviousvertex \"ChainShape:setPreviousVertex\").\n\nSets a vertex that establishes a connection to the previous shape.\n\nThis can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nChainShape:setPrevVertex( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-component of the vertex.\n\n[`number`](number \"number\")` y`  \nThe y-component of the vertex.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ChainShape](chainshape \"ChainShape\")\n- [ChainShape:setNextVertex](chainshape-setnextvertex \"ChainShape:setNextVertex\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ChainShape:setPrevVertex](https://love2d.org/wiki/ChainShape:setPrevVertex)"
- name: Channel
  id: channel
  summary: Available since LÖVE 0.9.0 This type is not supported in earlier versions
  description: "# Channel\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis type is not supported in earlier versions.\n\nAn object which can be used to send and receive data between different threads.\n\n## Constructors\n\n|                                                                           |                                              |       |     |\n|---------------------------------------------------------------------------|----------------------------------------------|-------|-----|\n| [love.thread.getChannel](love.thread.getchannel \"love.thread.getChannel\") | Creates or retrieves a named thread channel. | 0.9.0 |     |\n| [love.thread.newChannel](love.thread.newchannel \"love.thread.newChannel\") | Creates a new unnamed thread channel.        | 0.9.0 |     |\n\n## Functions\n\n|                                                                        |                                                                                    |        |     |\n|------------------------------------------------------------------------|------------------------------------------------------------------------------------|--------|-----|\n| [Channel:clear](channel-clear \"Channel:clear\")                         | Clears all the messages in the Channel queue.                                      | 0.9.0  |     |\n| [Channel:demand](channel-demand \"Channel:demand\")                      | Wait for and retrieve the value of a Channel message.                              | 0.9.0  |     |\n| [Channel:getCount](channel-getcount \"Channel:getCount\")                | Retrieves the number of messages in the Channel queue.                             | 0.9.0  |     |\n| [Channel:hasRead](channel-hasread \"Channel:hasRead\")                   | Gets whether a pushed value has been popped or otherwise removed from the Channel. | 11.0   |     |\n| [Channel:peek](channel-peek \"Channel:peek\")                            | Receive a message from a thread Channel, but leave it in the queue.                | 0.9.0  |     |\n| [Channel:performAtomic](channel-performatomic \"Channel:performAtomic\") | Executes the specified function atomically with respect to this Channel.           | 0.10.0 |     |\n| [Channel:pop](channel-pop \"Channel:pop\")                               | Retrieve the value of a Channel message.                                           | 0.9.0  |     |\n| [Channel:push](channel-push \"Channel:push\")                            | Send a message to a thread Channel.                                                | 0.9.0  |     |\n| [Channel:supply](channel-supply \"Channel:supply\")                      | Send a message to a thread Channel and wait for a thread to accept it.             | 0.9.0  |     |\n| [Object:release](object-release \"Object:release\")                      | Immediately destroys the object's Lua reference.                                   | 11.0   |     |\n| [Object:type](object-type \"Object:type\")                               | Gets the type of the object as a string.                                           |        |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                         | Checks whether an object is of a certain type.                                     |        |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.thread](love.thread \"love.thread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Channel](https://love2d.org/wiki/Channel)"
- name: Channel:clear
  id: channel-clear
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Channel:clear\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nClears all the messages in the Channel queue.\n\nThis function doesn't free up the memory used by a Channel, it needs to be garbage collected to release the memory.\n\n## Function\n\n### Synopsis\n\n``` lua\nChannel:clear( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Channel](channel \"Channel\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Channel:clear](https://love2d.org/wiki/Channel:clear)"
- name: Channel:demand
  id: channel-demand
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Channel:demand\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nRetrieves the value of a Channel message and removes it from the message queue.\n\nIt waits until a message is in the queue then returns the message value.\n\n## Function\n\n### Synopsis\n\n``` lua\nvalue = Channel:demand( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Variant`](variant \"Variant\")` value`  \nThe contents of the message.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nvalue = Channel:demand( timeout )\n```\n\n### Arguments\n\n[`number`](number \"number\")` timeout`  \nThe maximum amount of time to wait.\n\n### Returns\n\n[`Variant`](variant \"Variant\")` value`  \nThe contents of the message or nil if the timeout expired.\n\n## See Also\n\n- [Channel](channel \"Channel\")\n- [Channel:supply](channel-supply \"Channel:supply\")\n- [Channel:pop](channel-pop \"Channel:pop\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Channel:demand](https://love2d.org/wiki/Channel:demand)"
- name: Channel:getCount
  id: channel-getcount
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Channel:getCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nRetrieves the number of messages in the thread Channel queue.\n\n## Function\n\n### Synopsis\n\n``` lua\nvalue = Channel:getCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` count`  \nThe number of messages in the queue.\n\n## See Also\n\n- [Channel](channel \"Channel\")\n- [Channel:pop](channel-pop \"Channel:pop\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Channel:getCount](https://love2d.org/wiki/Channel:getCount)"
- name: Channel:hasRead
  id: channel-hasread
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Channel:hasRead\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether a pushed value has been popped or otherwise removed from the Channel.\n\n## Function\n\n### Synopsis\n\n``` lua\nhasread = Channel:hasRead( id )\n```\n\n### Arguments\n\n[`number`](number \"number\")` id`  \nAn id value previously returned by [Channel:push](channel-push \"Channel:push\").\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` hasread`  \nWhether the value represented by the id has been removed from the Channel via [Channel:pop](channel-pop \"Channel:pop\"), [Channel:demand](channel-demand \"Channel:demand\"), or [Channel:clear](channel-clear \"Channel:clear\").\n\n## See Also\n\n- [Channel](channel \"Channel\")\n- [Channel:push](channel-push \"Channel:push\")\n- [Channel:pop](channel-pop \"Channel:pop\")\n- [Channel:demand](channel-demand \"Channel:demand\")\n- [Channel:clear](channel-clear \"Channel:clear\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Channel:hasRead](https://love2d.org/wiki/Channel:hasRead)"
- name: Channel:peek
  id: channel-peek
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Channel:peek\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nRetrieves the value of a Channel message, but leaves it in the queue.\n\nIt returns nil if there's no message in the queue.\n\n## Function\n\n### Synopsis\n\n``` lua\nvalue = Channel:peek( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Variant`](variant \"Variant\")` value`  \nThe contents of the message.\n\n## See Also\n\n- [Channel](channel \"Channel\")\n- [Channel:pop](channel-pop \"Channel:pop\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Channel:peek](https://love2d.org/wiki/Channel:peek)"
- name: Channel:performAtomic
  id: channel-performatomic
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Channel:performAtomic\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nExecutes the specified function atomically with respect to this Channel.\n\nCalling multiple methods in a row on the same Channel is often useful. However if multiple [Threads](thread \"Thread\") are calling this Channel's methods at the same time, the different calls on each Thread might end up interleaved (e.g. one or more of the second thread's calls may happen in between the first thread's calls.)\n\nThis method avoids that issue by making sure the Thread calling the method has exclusive access to the Channel until the specified function has returned.\n\nLong-running or otherwise expensive code should be avoided in the function given to this method.\n\n## Function\n\n### Synopsis\n\n``` lua\nret1, ... = Channel:performAtomic( func, arg1, ... )\n```\n\n### Arguments\n\n[`function`](function \"function\")` func`  \nThe function to call, the form of `function(channel, arg1, arg2, ...) end`. The Channel is passed as the first argument to the function when it is called.\n\n[`any`](https://love2d.org/w/index.php?title=any&action=edit&redlink=1 \"any (page does not exist)\")` arg1`  \nAdditional arguments that the given function will receive when it is called.\n\n[`any`](https://love2d.org/w/index.php?title=any&action=edit&redlink=1 \"any (page does not exist)\")` ...`  \nAdditional arguments that the given function will receive when it is called.\n\n### Returns\n\n[`any`](https://love2d.org/w/index.php?title=any&action=edit&redlink=1 \"any (page does not exist)\")` ret1`  \nThe first return value of the given function (if any.)\n\n[`any`](https://love2d.org/w/index.php?title=any&action=edit&redlink=1 \"any (page does not exist)\")` ...`  \nAny other return values.\n\n## Examples\n\n### Re-set a Channel's contents to only have a single value\n\n``` lua\nlocal function setChannel(channel, value)\n    channel:clear()\n    channel:push(value)\nend\n \nlocal c = love.thread.getChannel(\"MyChannel\")\nc:performAtomic(setChannel, \"hello world\")\n```\n\n## See Also\n\n- [Channel](channel \"Channel\")\n- [Thread](thread \"Thread\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Channel:performAtomic](https://love2d.org/wiki/Channel:performAtomic)"
- name: Channel:pop
  id: channel-pop
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Channel:pop\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nRetrieves the value of a Channel message and removes it from the message queue.\n\nIt returns nil if there are no messages in the queue.\n\nThis function doesn't free up the memory used by a Channel, it needs to be garbage collected to release the memory.\n\n## Function\n\n### Synopsis\n\n``` lua\nvalue = Channel:pop( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Variant`](variant \"Variant\")` value`  \nThe contents of the message.\n\n## See Also\n\n- [Channel](channel \"Channel\")\n- [Channel:push](channel-push \"Channel:push\")\n- [Channel:demand](channel-demand \"Channel:demand\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Channel:pop](https://love2d.org/wiki/Channel:pop)"
- name: Channel:push
  id: channel-push
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Channel:push\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSend a message to the thread Channel.\n\nSee [Variant](variant \"Variant\") for the list of supported types.\n\n## Function\n\n### Synopsis\n\n``` lua\nid = Channel:push( value )\n```\n\n### Arguments\n\n[`Variant`](variant \"Variant\")` value`  \nThe contents of the message.\n\n### Returns\n\n[`number`](number \"number\")` id` Available since 11.0  \nIdentifier which can be supplied to [Channel:hasRead](channel-hasread \"Channel:hasRead\")\n\n## See Also\n\n- [Channel](channel \"Channel\")\n- [Channel:pop](channel-pop \"Channel:pop\")\n- [Channel:supply](channel-supply \"Channel:supply\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Channel:push](https://love2d.org/wiki/Channel:push)"
- name: Channel:supply
  id: channel-supply
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Channel:supply\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSend a message to the thread Channel and wait for a thread to accept it.\n\nSee [Variant](variant \"Variant\") for the list of supported types.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = Channel:supply( value )\n```\n\n### Arguments\n\n[`Variant`](variant \"Variant\")` value`  \nThe contents of the message.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success` Available since 11.0  \nWhether the message was successfully supplied (always `true`).\n\n  \n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nsuccess = Channel:supply( value, timeout )\n```\n\n### Arguments\n\n[`Variant`](variant \"Variant\")` value`  \nThe contents of the message.\n\n[`number`](number \"number\")` timeout`  \nThe maximum amount of time to wait.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the message was successfully supplied before the timeout expired.\n\n## See Also\n\n- [Channel](channel \"Channel\")\n- [Channel:demand](channel-demand \"Channel:demand\")\n- [Channel:push](channel-push \"Channel:push\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Channel:supply](https://love2d.org/wiki/Channel:supply)"
- name: CircleShape
  id: circleshape
  summary: Circle extends Shape and adds a radius and a local position
  description: "# CircleShape\n\nCircle extends Shape and adds a radius and a local position.\n\n## Constructors\n\n|                                                                                          |                                |     |     |\n|------------------------------------------------------------------------------------------|--------------------------------|-----|-----|\n| [love.physics.newCircleShape](love.physics.newcircleshape \"love.physics.newCircleShape\") | Creates a new **CircleShape**. |     |     |\n\n## Functions\n\n|                                                                                       |                                                                   |       |       |\n|---------------------------------------------------------------------------------------|-------------------------------------------------------------------|-------|-------|\n| [CircleShape:getLocalCenter](circleshape-getlocalcenter \"CircleShape:getLocalCenter\") | Get the center of the circle in local coordinates.                |       | 0.8.0 |\n| [CircleShape:getPoint](circleshape-getpoint \"CircleShape:getPoint\")                   | Gets the center point of the circle shape.                        | 0.9.1 |       |\n| [CircleShape:getRadius](circleshape-getradius \"CircleShape:getRadius\")                | Gets the radius of the circle shape.                              |       |       |\n| [CircleShape:getWorldCenter](circleshape-getworldcenter \"CircleShape:getWorldCenter\") | Get the center of the circle in world coordinates.                |       | 0.8.0 |\n| [CircleShape:setPoint](circleshape-setpoint \"CircleShape:setPoint\")                   | Sets the center point of the circle shape.                        | 0.9.1 |       |\n| [CircleShape:setRadius](circleshape-setradius \"CircleShape:setRadius\")                | Sets the radius of the circle.                                    | 0.8.0 |       |\n| [Object:release](object-release \"Object:release\")                                     | Immediately destroys the object's Lua reference.                  | 11.0  |       |\n| [Object:type](object-type \"Object:type\")                                              | Gets the type of the object as a string.                          |       |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                        | Checks whether an object is of a certain type.                    |       |       |\n| [Shape:computeAABB](shape-computeaabb \"Shape:computeAABB\")                            | Returns the points of the bounding box for the transformed shape. | 0.8.0 |       |\n| [Shape:computeMass](shape-computemass \"Shape:computeMass\")                            | Computes the mass properties for the shape.                       | 0.8.0 |       |\n| [Shape:destroy](shape-destroy \"Shape:destroy\")                                        | Explicitly destroys the Shape.                                    |       | 0.8.0 |\n| [Shape:getBody](shape-getbody \"Shape:getBody\")                                        | Get the body the shape is attached to.                            | 0.7.0 | 0.8.0 |\n| [Shape:getBoundingBox](shape-getboundingbox \"Shape:getBoundingBox\")                   | Gets the bounding box of the shape.                               |       | 0.8.0 |\n| [Shape:getCategory](shape-getcategory \"Shape:getCategory\")                            | Gets the categories this shape is a member of.                    |       | 0.8.0 |\n| [Shape:getCategoryBits](shape-getcategorybits \"Shape:getCategoryBits\")                | Gets the categories as a 16-bit integer.                          |       | 0.8.0 |\n| [Shape:getChildCount](shape-getchildcount \"Shape:getChildCount\")                      | Returns the number of children the shape has.                     | 0.8.0 |       |\n| [Shape:getData](shape-getdata \"Shape:getData\")                                        | Get the data set with setData.                                    |       | 0.8.0 |\n| [Shape:getDensity](shape-getdensity \"Shape:getDensity\")                               | Gets the density of the Shape.                                    |       | 0.8.0 |\n| [Shape:getFilterData](shape-getfilterdata \"Shape:getFilterData\")                      | Gets the filter data of the Shape.                                |       | 0.8.0 |\n| [Shape:getFriction](shape-getfriction \"Shape:getFriction\")                            | Gets the friction of this shape.                                  |       | 0.8.0 |\n| [Shape:getMask](shape-getmask \"Shape:getMask\")                                        | Gets which categories this shape should **NOT** collide with.     |       | 0.8.0 |\n| [Shape:getRadius](shape-getradius \"Shape:getRadius\")                                  | Gets the radius of the shape.                                     |       |       |\n| [Shape:getRestitution](shape-getrestitution \"Shape:getRestitution\")                   | Gets the restitution of this shape.                               |       | 0.8.0 |\n| [Shape:getType](shape-gettype \"Shape:getType\")                                        | Gets a string representing the Shape.                             |       |       |\n| [Shape:isSensor](shape-issensor \"Shape:isSensor\")                                     | Checks whether a Shape is a sensor or not.                        |       | 0.8.0 |\n| [Shape:rayCast](shape-raycast \"Shape:rayCast\")                                        | Casts a ray against the shape.                                    | 0.8.0 |       |\n| [Shape:setCategory](shape-setcategory \"Shape:setCategory\")                            | Sets the categories this shape is a member of.                    |       | 0.8.0 |\n| [Shape:setData](shape-setdata \"Shape:setData\")                                        | Set data to be passed to the collision callback.                  |       | 0.8.0 |\n| [Shape:setDensity](shape-setdensity \"Shape:setDensity\")                               | Sets the density of a Shape.                                      |       | 0.8.0 |\n| [Shape:setFilterData](shape-setfilterdata \"Shape:setFilterData\")                      | Sets the filter data for a Shape.                                 |       | 0.8.0 |\n| [Shape:setFriction](shape-setfriction \"Shape:setFriction\")                            | Sets the friction of the shape.                                   |       | 0.8.0 |\n| [Shape:setMask](shape-setmask \"Shape:setMask\")                                        | Sets which categories this shape should **NOT** collide with.     |       | 0.8.0 |\n| [Shape:setRestitution](shape-setrestitution \"Shape:setRestitution\")                   | Sets the restitution of the shape.                                |       | 0.8.0 |\n| [Shape:setSensor](shape-setsensor \"Shape:setSensor\")                                  | Sets whether this shape should act as a sensor.                   |       | 0.8.0 |\n| [Shape:testPoint](shape-testpoint \"Shape:testPoint\")                                  | Checks whether a point lies inside the shape.                     |       |       |\n| [Shape:testSegment](shape-testsegment \"Shape:testSegment\")                            | Checks whether a line segment intersects a shape.                 |       | 0.8.0 |\n\n## Supertypes\n\n- [Shape](shape \"Shape\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CircleShape](https://love2d.org/wiki/CircleShape)"
- name: CircleShape:getLocalCenter
  id: circleshape-getlocalcenter
  summary: Removed in LÖVE 0.8.0 This method is not supported in that and later versions
  description: "# CircleShape:getLocalCenter\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in that and later versions.\n\nGet the center of the circle in local coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nlx, ly = CircleShape:getLocalCenter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` lx`  \nThe x position of the circle in local coordinates.\n\n[`number`](number \"number\")` ly`  \nThe y position of the circle in local coordinates.\n\n## See Also\n\n- [CircleShape](circleshape \"CircleShape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CircleShape:getLocalCenter](https://love2d.org/wiki/CircleShape:getLocalCenter)"
- name: CircleShape:getPoint
  id: circleshape-getpoint
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# CircleShape:getPoint\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nGets the center point of the circle shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = CircleShape:getPoint( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x-component of the center point of the circle.\n\n[`number`](number \"number\")` y`  \nThe y-component of the center point of the circle.\n\n## See Also\n\n- [CircleShape](circleshape \"CircleShape\")\n- [CircleShape:setPoint](circleshape-setpoint \"CircleShape:setPoint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CircleShape:getPoint](https://love2d.org/wiki/CircleShape:getPoint)"
- name: CircleShape:getRadius
  id: circleshape-getradius
  summary: Gets the radius of the circle shape
  description: "# CircleShape:getRadius\n\nGets the radius of the circle shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nradius = CircleShape:getRadius( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` radius`  \nThe radius of the circle\n\n## See Also\n\n- [CircleShape](circleshape \"CircleShape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CircleShape:getRadius](https://love2d.org/wiki/CircleShape:getRadius)"
- name: CircleShape:getWorldCenter
  id: circleshape-getworldcenter
  summary: Removed in LÖVE 0.8.0 This method is not supported in that and later versions
  description: "# CircleShape:getWorldCenter\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in that and later versions.\n\nGet the center of the circle in world coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\nwx, wy = CircleShape:getWorldCenter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` wx`  \nThe x position of the circle in world coordinates.\n\n[`number`](number \"number\")` wy`  \nThe y position of the circle in world coordinates.\n\n## See Also\n\n- [CircleShape](circleshape \"CircleShape\")\n\n  \n\n## Others Languages\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CircleShape:getWorldCenter](https://love2d.org/wiki/CircleShape:getWorldCenter)"
- name: CircleShape:setPoint
  id: circleshape-setpoint
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# CircleShape:setPoint\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nSets the location of the center of the circle shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nCircleShape:setPoint( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-component of the new center point of the circle.\n\n[`number`](number \"number\")` y`  \nThe y-component of the new center point of the circle.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [CircleShape](circleshape \"CircleShape\")\n- [CircleShape:getPoint](circleshape-getpoint \"CircleShape:getPoint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CircleShape:setPoint](https://love2d.org/wiki/CircleShape:setPoint)"
- name: CircleShape:setRadius
  id: circleshape-setradius
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# CircleShape:setRadius\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets the radius of the circle.\n\n## Function\n\n### Synopsis\n\n``` lua\nCircleShape:setRadius( radius )\n```\n\n### Arguments\n\n[`number`](number \"number\")` radius`  \nThe radius of the circle\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [CircleShape](circleshape \"CircleShape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CircleShape:setRadius](https://love2d.org/wiki/CircleShape:setRadius)"
- name: ColorMode
  id: colormode
  summary: Removed in LÖVE 0.9.0 This enum is not supported in that and later versions
  description: "# ColorMode\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in that and later versions.\n\nControls whether images will be affected by the current color.\n\n## Constants\n\nmodulate  \nImages (etc) will be affected by the current color.\n\nreplace  \nReplace color mode. Images (etc) will not be affected by current color.\n\n&nbsp;\n\ncombine (since 0.8.0)  \nColorize images (etc) with the current color. While 'modulate' works like a filter that absorbs colors that differ from the current color (possibly to a point where a color channel is entirely absorbed), 'combine' tints the image in a way that preserves a hint of the original colors.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setColorMode](love.graphics.setcolormode \"love.graphics.setColorMode\")\n- [love.graphics.getColorMode](love.graphics.getcolormode \"love.graphics.getColorMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ColorMode](https://love2d.org/wiki/ColorMode)"
- name: CompareMode
  id: comparemode
  summary: Available since LÖVE 0.10.0 This enum is not supported in earlier versions
  description: "# CompareMode\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis enum is not supported in earlier versions.\n\nDifferent types of per-pixel [stencil test](love.graphics.setstenciltest \"love.graphics.setStencilTest\") and [depth test](love.graphics.setdepthmode \"love.graphics.setDepthMode\") comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches.\n\n## Constants\n\nequal\n\n- stencil tests: the stencil value of the pixel must be equal to the [supplied value](love.graphics.setstenciltest \"love.graphics.setStencilTest\").\n- depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel.\n\nnotequal\n\n- stencil tests: the stencil value of the pixel must **not** be equal to the [supplied value](love.graphics.setstenciltest \"love.graphics.setStencilTest\").\n- depth tests: the depth value of the drawn object at that pixel must **not** be equal to the existing depth value of that pixel.\n\nless\n\n- stencil tests: the stencil value of the pixel must be less than the [supplied value](love.graphics.setstenciltest \"love.graphics.setStencilTest\").\n- depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel.\n\nlequal\n\n- stencil tests: the stencil value of the pixel must be less than or equal to the [supplied value](love.graphics.setstenciltest \"love.graphics.setStencilTest\").\n- depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel.\n\ngequal\n\n- stencil tests: the stencil value of the pixel must be greater than or equal to the [supplied value](love.graphics.setstenciltest \"love.graphics.setStencilTest\").\n- depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel.\n\ngreater\n\n- stencil tests: the stencil value of the pixel must be greater than the [supplied value](love.graphics.setstenciltest \"love.graphics.setStencilTest\").\n- depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel.\n\nnever  \nObjects will never be drawn.\n\nalways  \nObjects will always be drawn. Effectively disables the depth or stencil test.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setStencilTest](love.graphics.setstenciltest \"love.graphics.setStencilTest\")\n- [love.graphics.stencil](love.graphics.stencil \"love.graphics.stencil\")\n- [love.graphics.setDepthMode](love.graphics.setdepthmode \"love.graphics.setDepthMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CompareMode](https://love2d.org/wiki/CompareMode)"
- name: CompressedData
  id: compresseddata
  summary: Available since LÖVE 0.10.0 In versions prior to 0.10.0 the CompressedData name was used for CompressedImageData objects
  description: "# CompressedData\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIn versions prior to [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") the CompressedData name was used for [CompressedImageData](compressedimagedata \"CompressedImageData\") objects.\n\nRepresents byte data compressed using a specific algorithm.\n\n[love.data.decompress](love.data.decompress \"love.data.decompress\") can be used to de-compress the data (or [love.math.decompress](love.math.decompress \"love.math.decompress\") in [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\") or earlier).\n\n## Constructors\n\n|                                                               |                                                                     |        |      |\n|---------------------------------------------------------------|---------------------------------------------------------------------|--------|------|\n| [love.data.compress](love.data.compress \"love.data.compress\") | Compresses a string or data using a specific compression algorithm. | 11.0   |      |\n| [love.math.compress](love.math.compress \"love.math.compress\") | Compresses a string or data using a specific compression algorithm. | 0.10.0 | 11.0 |\n\n## Functions\n\n|                                                                                 |                                                    |        |     |\n|---------------------------------------------------------------------------------|----------------------------------------------------|--------|-----|\n| [CompressedData:getFormat](compresseddata-getformat \"CompressedData:getFormat\") | Gets the compression format of the CompressedData. | 0.10.0 |     |\n| [Data:clone](data-clone \"Data:clone\")                                           | Creates a new copy of the Data object.             | 11.0   |     |\n| [Data:getFFIPointer](data-getffipointer \"Data:getFFIPointer\")                   | Gets an FFI pointer to the Data.                   | 11.3   |     |\n| [Data:getPointer](data-getpointer \"Data:getPointer\")                            | Gets a pointer to the Data.                        |        |     |\n| [Data:getSize](data-getsize \"Data:getSize\")                                     | Gets the [Data](data \"Data\")'s size in bytes.      |        |     |\n| [Data:getString](data-getstring \"Data:getString\")                               | Gets the full Data as a string.                    | 0.9.0  |     |\n| [Object:release](object-release \"Object:release\")                               | Immediately destroys the object's Lua reference.   | 11.0   |     |\n| [Object:type](object-type \"Object:type\")                                        | Gets the type of the object as a string.           |        |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                  | Checks whether an object is of a certain type.     |        |     |\n\n## Enums\n\n|                                                                     |                          |        |     |\n|---------------------------------------------------------------------|--------------------------|--------|-----|\n| [CompressedDataFormat](compresseddataformat \"CompressedDataFormat\") | Compressed data formats. | 0.10.0 |     |\n\n## Supertypes\n\n- [Data](data \"Data\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [love.data.decompress](love.data.decompress \"love.data.decompress\")\n- [love.math](love.math \"love.math\") (deprecated since 11.0)\n- [love.math.decompress](love.math.decompress \"love.math.decompress\") (deprecated since 11.0)\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CompressedData](https://love2d.org/wiki/CompressedData)"
- name: CompressedData:getFormat
  id: compresseddata-getformat
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# CompressedData:getFormat\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the compression format of the CompressedData.\n\n## Function\n\n### Synopsis\n\n``` lua\nformat = CompressedData:getFormat( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`CompressedDataFormat`](compresseddataformat \"CompressedDataFormat\")` format`  \nThe format of the CompressedData.\n\n## See Also\n\n- [CompressedData](compresseddata \"CompressedData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CompressedData:getFormat](https://love2d.org/wiki/CompressedData:getFormat)"
- name: CompressedDataFormat
  id: compresseddataformat
  summary: Available since LÖVE 0.10.0 This enum is not supported in earlier versions
  description: "# CompressedDataFormat\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis enum is not supported in earlier versions.\n\nCompressed data formats.\n\n## Constants\n\nlz4  \nThe LZ4 compression format. Compresses and decompresses very quickly, but the compression ratio is not the best. LZ4-HC is used when compression level 9 is specified. Some benchmarks are available [here](https://github.com/Cyan4973/lz4#user-content-benchmarks).\n\nzlib  \nThe zlib format is DEFLATE-compressed data with a small bit of header data. Compresses relatively slowly and decompresses moderately quickly, and has a decent compression ratio.\n\ngzip  \nThe gzip format is DEFLATE-compressed data with a slightly larger header than zlib. Since it uses DEFLATE it has the same compression characteristics as the zlib format.\n\n  \n\ndeflate Available since 11.0  \nRaw DEFLATE-compressed data (no header).\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [love.data.compress](love.data.compress \"love.data.compress\")\n- [love.math.compress](love.math.compress \"love.math.compress\") (deprecated since 11.0)\n- [CompressedData](compresseddata \"CompressedData\")\n- [CompressedData:getFormat](compresseddata-getformat \"CompressedData:getFormat\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CompressedDataFormat](https://love2d.org/wiki/CompressedDataFormat)"
- name: CompressedFormat
  id: compressedformat
  summary: Available since LÖVE 0.9.0 This enum is not supported in earlier versions
  description: "# CompressedFormat\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in earlier versions.\n\n|                                                                      |\n|----------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")*** |\n| It has been superseded by [PixelFormat](pixelformat \"PixelFormat\").. |\n\nCompressed image data formats. [Here](http://renderingpipeline.com/2012/07/texture-compression/) and [here](http://www.reedbeta.com/blog/2012/02/12/understanding-bcn-texture-compression-formats/) are a couple overviews of many of the formats.\n\nUnlike traditional PNG or jpeg, these formats stay compressed in RAM and in the graphics card's VRAM. This is good for saving memory space as well as improving performance, since the graphics card will be able to keep more of the image's pixels in its fast-access cache when drawing it.\n\nIn LÖVE versions prior to [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\"), these constants are all lower-case.\n\n## Constants\n\nDXT1  \nThe DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for [ImageData](imagedata \"ImageData\") and regular [Images](image \"Image\").) Suitable for fully opaque images on desktop systems.\n\nDXT3  \nThe DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format.\n\nDXT5  \nThe DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems.\n\nBC4  \nThe BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel.\n\nBC4s  \nThe signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of \\[-1, 1\\] instead of \\[0, 1\\] in shaders.\n\nBC5  \nThe BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel.\n\nBC5s  \nThe signed variant of the BC5 format.\n\nBC6h Available since 0.9.2  \nThe BC6H format. Stores [half-precision](https://en.wikipedia.org/wiki/Half-precision_floating-point_format) floating-point RGB data in the range of \\[0, 65504\\] at 8 bits per pixel. Suitable for HDR images on desktop systems.\n\nBC6hs Available since 0.9.2  \nThe signed variant of the BC6H format. Stores RGB data in the range of \\[-65504, +65504\\].\n\nBC7 Available since 0.9.2  \nThe BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel.\n\n  \n\nETC1 Available since 0.10.0  \nThe ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices.\n\nETC2rgb Available since 0.10.0  \nThe RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices.\n\nETC2rgba Available since 0.10.0  \nThe RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices.\n\nETC2rgba1 Available since 0.10.0  \nThe RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel.\n\nEACr Available since 0.10.0  \nThe single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel.\n\nEACrs Available since 0.10.0  \nThe signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of \\[-1, 1\\] instead of \\[0, 1\\] in shaders.\n\nEACrg Available since 0.10.0  \nThe two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel.\n\nEACrgs Available since 0.10.0  \nThe signed two-channel variant of the EAC format.\n\nPVR1rgb2 Available since 0.10.0  \nThe 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized.\n\nPVR1rgb4 Available since 0.10.0  \nThe 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel.\n\nPVR1rgba2 Available since 0.10.0  \nThe 2 bit per pixel RGBA variant of the PVRTC1 format.\n\nPVR1rgba4 Available since 0.10.0  \nThe 4 bit per pixel RGBA variant of the PVRTC1 format.\n\nASTC4x4 Available since 0.10.0  \nThe 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel.\n\nASTC5x4 Available since 0.10.0  \nThe 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel.\n\nASTC5x5 Available since 0.10.0  \nThe 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel.\n\nASTC6x5 Available since 0.10.0  \nThe 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel.\n\nASTC6x6 Available since 0.10.0  \nThe 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel.\n\nASTC8x5 Available since 0.10.0  \nThe 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel.\n\nASTC8x6 Available since 0.10.0  \nThe 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel.\n\nASTC8x8 Available since 0.10.0  \nThe 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel.\n\nASTC10x5 Available since 0.10.0  \nThe 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel.\n\nASTC10x6 Available since 0.10.0  \nThe 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel.\n\nASTC10x8 Available since 0.10.0  \nThe 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel.\n\nASTC10x10 Available since 0.10.0  \nThe 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel.\n\nASTC12x10 Available since 0.10.0  \nThe 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel.\n\nASTC12x12 Available since 0.10.0  \nThe 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.\n\n  \n\n## Notes\n\nNot all formats are supported in love.graphics [Images](image \"Image\") on all systems, although the DXT formats have close to 100% support on desktop operating systems.\n\nThe BC4 and BC5 formats are supported on systems with DirectX 10 / OpenGL 3-capable desktop hardware and drivers. The BC6H and BC7 formats are only supported on desktop systems with DirectX 11 / OpenGL 4-capable hardware and very recent drivers. macOS does not support BC6H or BC7 at all currently.\n\nETC1 is supported by Android devices, as well as newer (OpenGL ES 3-capable) iOS devices.\n\nThe PVR1 formats are supported by iOS devices, as well as Android devices with PowerVR GPUs.\n\nThe ETC2 and EAC formats are supported by newer (OpenGL ES 3-capable) iOS and Android devices.\n\nASTC is only supported by very new mobile devices (e.g. the iPhone 6), and the latest Skylake (and newer) integrated Intel GPUs. It has a variety of variants to allow for picking the most compressed possible one that doesn't have any noticeable compression artifacts, for a given texture.\n\nUse [love.graphics.getCompressedImageFormats](love.graphics.getcompressedimageformats \"love.graphics.getCompressedImageFormats\") to check for support:\n\n``` lua\nlocal supportedformats = love.graphics.getCompressedImageFormats()\n \nif not supportedformats[\"DXT5\"] then\n    -- Can't load CompressedImageData with the DXT5 format into images!\n    -- On some Linux systems with Mesa drivers, the user will need to install a \"libtxc-dxtn\" package because the DXT (aka S3TC) formats used to be patented.\n    -- Support for DXT formats on all other desktop drivers is pretty much guaranteed.\nend\n \nif not supportedformats[\"BC5\"] then\n    -- Can't load CompressedImageData with the BC5 format into images!\n    -- The user likely doesn't have a video card capable of using that format.\nend\n```\n\n## See Also\n\n- [love.image](love.image \"love.image\")\n- [CompressedImageData](compressedimagedata \"CompressedImageData\")\n- [CompressedImageData:getFormat](compressedimagedata-getformat \"CompressedImageData:getFormat\")\n- [love.graphics.getCompressedImageFormats](love.graphics.getcompressedimageformats \"love.graphics.getCompressedImageFormats\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CompressedFormat](https://love2d.org/wiki/CompressedFormat)"
- name: CompressedImageData
  id: compressedimagedata
  summary: Available since LÖVE 0.9.0 In versions prior to 0.10.0 it was named CompressedData, however that name is used for something else now
  description: "# CompressedImageData\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIn versions prior to [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") it was named CompressedData, however that name is used for something else now.\n\nRepresents compressed image data designed to stay compressed in RAM.\n\nCompressedImageData encompasses standard compressed texture formats such as [DXT1, DXT5, and BC5 / 3Dc](http://renderingpipeline.com/2012/07/texture-compression/).\n\nYou can't draw CompressedImageData directly to the screen. See [Image](image \"Image\") for that.\n\n## Constructors\n\n|                                                                                             |                                                                           |       |     |\n|---------------------------------------------------------------------------------------------|---------------------------------------------------------------------------|-------|-----|\n| [love.image.newCompressedData](love.image.newcompresseddata \"love.image.newCompressedData\") | Create a new **CompressedImageData** object from a compressed image file. | 0.9.0 |     |\n\n## Functions\n\n|                                                                                                               |                                                              |       |     |\n|---------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------|-------|-----|\n| [CompressedImageData:getDimensions](compressedimagedata-getdimensions \"CompressedImageData:getDimensions\")    | Gets the width and height of the CompressedImageData.        | 0.9.0 |     |\n| [CompressedImageData:getFormat](compressedimagedata-getformat \"CompressedImageData:getFormat\")                | Gets the format of the CompressedImageData.                  | 0.9.0 |     |\n| [CompressedImageData:getHeight](compressedimagedata-getheight \"CompressedImageData:getHeight\")                | Gets the height of the CompressedImageData.                  | 0.9.0 |     |\n| [CompressedImageData:getMipmapCount](compressedimagedata-getmipmapcount \"CompressedImageData:getMipmapCount\") | Gets the number of mipmap levels in the CompressedImageData. | 0.9.0 |     |\n| [CompressedImageData:getWidth](compressedimagedata-getwidth \"CompressedImageData:getWidth\")                   | Gets the width of the CompressedImageData.                   | 0.9.0 |     |\n| [Data:clone](data-clone \"Data:clone\")                                                                         | Creates a new copy of the Data object.                       | 11.0  |     |\n| [Data:getFFIPointer](data-getffipointer \"Data:getFFIPointer\")                                                 | Gets an FFI pointer to the Data.                             | 11.3  |     |\n| [Data:getPointer](data-getpointer \"Data:getPointer\")                                                          | Gets a pointer to the Data.                                  |       |     |\n| [Data:getSize](data-getsize \"Data:getSize\")                                                                   | Gets the [Data](data \"Data\")'s size in bytes.                |       |     |\n| [Data:getString](data-getstring \"Data:getString\")                                                             | Gets the full Data as a string.                              | 0.9.0 |     |\n| [Object:release](object-release \"Object:release\")                                                             | Immediately destroys the object's Lua reference.             | 11.0  |     |\n| [Object:type](object-type \"Object:type\")                                                                      | Gets the type of the object as a string.                     |       |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                                                | Checks whether an object is of a certain type.               |       |     |\n\n## Enums\n\n|                                                                        |                                |       |     |\n|------------------------------------------------------------------------|--------------------------------|-------|-----|\n| [CompressedImageFormat](compressedimageformat \"CompressedImageFormat\") | Compressed image data formats. | 0.9.0 |     |\n\n## Supertypes\n\n- [Data](data \"Data\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.image](love.image \"love.image\")\n- [love.image.newCompressedData](love.image.newcompresseddata \"love.image.newCompressedData\")\n- [love.image.isCompressed](love.image.iscompressed \"love.image.isCompressed\")\n- [Image](image \"Image\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CompressedImageData](https://love2d.org/wiki/CompressedImageData)"
- name: CompressedImageData:getDimensions
  id: compressedimagedata-getdimensions
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# CompressedImageData:getDimensions\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the width and height of the [CompressedImageData](compressedimagedata \"CompressedImageData\").\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth, height = CompressedImageData:getDimensions( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the CompressedImageData.\n\n[`number`](number \"number\")` height`  \nThe height of the CompressedImageData.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth, height = CompressedImageData:getDimensions( level )\n```\n\n### Arguments\n\n[`number`](number \"number\")` level`  \nA mipmap level. Must be in the range of \\[1, [CompressedImageData:getMipmapCount()](compressedimagedata-getmipmapcount \"CompressedImageData:getMipmapCount\")\\].\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of a specific mipmap level of the CompressedImageData.\n\n[`number`](number \"number\")` height`  \nThe height of a specific mipmap level of the CompressedImageData.\n\n## See Also\n\n- [CompressedImageData](compressedimagedata \"CompressedImageData\")\n- [CompressedImageData:getMipmapCount](compressedimagedata-getmipmapcount \"CompressedImageData:getMipmapCount\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CompressedImageData:getDimensions](https://love2d.org/wiki/CompressedImageData:getDimensions)"
- name: CompressedImageData:getFormat
  id: compressedimagedata-getformat
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# CompressedImageData:getFormat\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the format of the CompressedImageData.\n\n## Function\n\n### Synopsis\n\n``` lua\nformat = CompressedImageData:getFormat( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`CompressedImageFormat`](compressedimageformat \"CompressedImageFormat\")` format`  \nThe format of the CompressedImageData.\n\n## See Also\n\n- [CompressedImageData](compressedimagedata \"CompressedImageData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CompressedImageData:getFormat](https://love2d.org/wiki/CompressedImageData:getFormat)"
- name: CompressedImageData:getHeight
  id: compressedimagedata-getheight
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# CompressedImageData:getHeight\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the height of the CompressedImageData.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = CompressedImageData:getHeight( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nThe height of the CompressedImageData.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = CompressedImageData:getHeight( level )\n```\n\n### Arguments\n\n[`number`](number \"number\")` level`  \nA mipmap level. Must be in the range of \\[1, [CompressedImageData:getMipmapCount()](compressedimagedata-getmipmapcount \"CompressedImageData:getMipmapCount\")\\].\n\n### Returns\n\n[`number`](number \"number\")` height`  \nThe height of a specific mipmap level of the CompressedImageData.\n\n## See Also\n\n- [CompressedImageData](compressedimagedata \"CompressedImageData\")\n- [CompressedImageData:getWidth](compressedimagedata-getwidth \"CompressedImageData:getWidth\")\n- [CompressedImageData:getMipmapCount](compressedimagedata-getmipmapcount \"CompressedImageData:getMipmapCount\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CompressedImageData:getHeight](https://love2d.org/wiki/CompressedImageData:getHeight)"
- name: CompressedImageData:getMipmapCount
  id: compressedimagedata-getmipmapcount
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# CompressedImageData:getMipmapCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the number of [mipmap](https://en.wikipedia.org/wiki/Mipmap) levels in the CompressedImageData. The base mipmap level (original image) is included in the count.\n\n## Function\n\n### Synopsis\n\n``` lua\nmipmaps = CompressedImageData:getMipmapCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` mipmaps`  \nThe number of mipmap levels stored in the CompressedImageData.\n\n## Notes\n\nMipmap filtering cannot be activated for an [Image](image \"Image\") created from a CompressedImageData which does not have enough mipmap levels to go down to 1x1. For example, a 256x256 image created from a CompressedImageData should have 8 mipmap levels or [Image:setMipmapFilter]((image)-setmipmapfilter \"(Image):setMipmapFilter\") will error. Most tools which can create compressed textures are able to automatically generate mipmaps for them in the same file.\n\n## See Also\n\n- [CompressedImageData](compressedimagedata \"CompressedImageData\")\n- [Image:setMipmapFilter]((image)-setmipmapfilter \"(Image):setMipmapFilter\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CompressedImageData:getMipmapCount](https://love2d.org/wiki/CompressedImageData:getMipmapCount)"
- name: CompressedImageData:getWidth
  id: compressedimagedata-getwidth
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# CompressedImageData:getWidth\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the width of the CompressedImageData.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth = CompressedImageData:getWidth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the CompressedImageData.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth = CompressedImageData:getWidth( level )\n```\n\n### Arguments\n\n[`number`](number \"number\")` level`  \nA mipmap level. Must be in the range of \\[1, [CompressedImageData:getMipmapCount()](compressedimagedata-getmipmapcount \"CompressedImageData:getMipmapCount\")\\].\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of a specific mipmap level of the CompressedImageData.\n\n## See Also\n\n- [CompressedImageData](compressedimagedata \"CompressedImageData\")\n- [CompressedImageData:getHeight](compressedimagedata-getheight \"CompressedImageData:getHeight\")\n- [CompressedImageData:getMipmapCount](compressedimagedata-getmipmapcount \"CompressedImageData:getMipmapCount\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CompressedImageData:getWidth](https://love2d.org/wiki/CompressedImageData:getWidth)"
- name: CompressedImageFormat
  id: compressedimageformat
  summary: Available since LÖVE 0.9.0 This enum is not supported in earlier versions
  description: "# CompressedImageFormat\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in earlier versions.\n\n|                                                                      |\n|----------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")*** |\n| It has been superseded by [PixelFormat](pixelformat \"PixelFormat\").. |\n\nCompressed image data formats. [Here](http://renderingpipeline.com/2012/07/texture-compression/) and [here](http://www.reedbeta.com/blog/2012/02/12/understanding-bcn-texture-compression-formats/) are a couple overviews of many of the formats.\n\nUnlike traditional PNG or jpeg, these formats stay compressed in RAM and in the graphics card's VRAM. This is good for saving memory space as well as improving performance, since the graphics card will be able to keep more of the image's pixels in its fast-access cache when drawing it.\n\nIn LÖVE versions prior to [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\"), these constants are all lower-case.\n\n## Constants\n\nDXT1  \nThe DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for [ImageData](imagedata \"ImageData\") and regular [Images](image \"Image\").) Suitable for fully opaque images on desktop systems.\n\nDXT3  \nThe DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format.\n\nDXT5  \nThe DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems.\n\nBC4  \nThe BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel.\n\nBC4s  \nThe signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of \\[-1, 1\\] instead of \\[0, 1\\] in shaders.\n\nBC5  \nThe BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel.\n\nBC5s  \nThe signed variant of the BC5 format.\n\nBC6h Available since 0.9.2  \nThe BC6H format. Stores [half-precision](https://en.wikipedia.org/wiki/Half-precision_floating-point_format) floating-point RGB data in the range of \\[0, 65504\\] at 8 bits per pixel. Suitable for HDR images on desktop systems.\n\nBC6hs Available since 0.9.2  \nThe signed variant of the BC6H format. Stores RGB data in the range of \\[-65504, +65504\\].\n\nBC7 Available since 0.9.2  \nThe BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel.\n\n  \n\nETC1 Available since 0.10.0  \nThe ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices.\n\nETC2rgb Available since 0.10.0  \nThe RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices.\n\nETC2rgba Available since 0.10.0  \nThe RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices.\n\nETC2rgba1 Available since 0.10.0  \nThe RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel.\n\nEACr Available since 0.10.0  \nThe single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel.\n\nEACrs Available since 0.10.0  \nThe signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of \\[-1, 1\\] instead of \\[0, 1\\] in shaders.\n\nEACrg Available since 0.10.0  \nThe two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel.\n\nEACrgs Available since 0.10.0  \nThe signed two-channel variant of the EAC format.\n\nPVR1rgb2 Available since 0.10.0  \nThe 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized.\n\nPVR1rgb4 Available since 0.10.0  \nThe 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel.\n\nPVR1rgba2 Available since 0.10.0  \nThe 2 bit per pixel RGBA variant of the PVRTC1 format.\n\nPVR1rgba4 Available since 0.10.0  \nThe 4 bit per pixel RGBA variant of the PVRTC1 format.\n\nASTC4x4 Available since 0.10.0  \nThe 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel.\n\nASTC5x4 Available since 0.10.0  \nThe 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel.\n\nASTC5x5 Available since 0.10.0  \nThe 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel.\n\nASTC6x5 Available since 0.10.0  \nThe 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel.\n\nASTC6x6 Available since 0.10.0  \nThe 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel.\n\nASTC8x5 Available since 0.10.0  \nThe 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel.\n\nASTC8x6 Available since 0.10.0  \nThe 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel.\n\nASTC8x8 Available since 0.10.0  \nThe 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel.\n\nASTC10x5 Available since 0.10.0  \nThe 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel.\n\nASTC10x6 Available since 0.10.0  \nThe 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel.\n\nASTC10x8 Available since 0.10.0  \nThe 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel.\n\nASTC10x10 Available since 0.10.0  \nThe 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel.\n\nASTC12x10 Available since 0.10.0  \nThe 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel.\n\nASTC12x12 Available since 0.10.0  \nThe 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.\n\n  \n\n## Notes\n\nNot all formats are supported in love.graphics [Images](image \"Image\") on all systems, although the DXT formats have close to 100% support on desktop operating systems.\n\nThe BC4 and BC5 formats are supported on systems with DirectX 10 / OpenGL 3-capable desktop hardware and drivers. The BC6H and BC7 formats are only supported on desktop systems with DirectX 11 / OpenGL 4-capable hardware and very recent drivers. macOS does not support BC6H or BC7 at all currently.\n\nETC1 is supported by Android devices, as well as newer (OpenGL ES 3-capable) iOS devices.\n\nThe PVR1 formats are supported by iOS devices, as well as Android devices with PowerVR GPUs.\n\nThe ETC2 and EAC formats are supported by newer (OpenGL ES 3-capable) iOS and Android devices.\n\nASTC is only supported by very new mobile devices (e.g. the iPhone 6), and the latest Skylake (and newer) integrated Intel GPUs. It has a variety of variants to allow for picking the most compressed possible one that doesn't have any noticeable compression artifacts, for a given texture.\n\nUse [love.graphics.getCompressedImageFormats](love.graphics.getcompressedimageformats \"love.graphics.getCompressedImageFormats\") to check for support:\n\n``` lua\nlocal supportedformats = love.graphics.getCompressedImageFormats()\n \nif not supportedformats[\"DXT5\"] then\n    -- Can't load CompressedImageData with the DXT5 format into images!\n    -- On some Linux systems with Mesa drivers, the user will need to install a \"libtxc-dxtn\" package because the DXT (aka S3TC) formats used to be patented.\n    -- Support for DXT formats on all other desktop drivers is pretty much guaranteed.\nend\n \nif not supportedformats[\"BC5\"] then\n    -- Can't load CompressedImageData with the BC5 format into images!\n    -- The user likely doesn't have a video card capable of using that format.\nend\n```\n\n## See Also\n\n- [love.image](love.image \"love.image\")\n- [CompressedImageData](compressedimagedata \"CompressedImageData\")\n- [CompressedImageData:getFormat](compressedimagedata-getformat \"CompressedImageData:getFormat\")\n- [love.graphics.getCompressedImageFormats](love.graphics.getcompressedimageformats \"love.graphics.getCompressedImageFormats\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CompressedImageFormat](https://love2d.org/wiki/CompressedImageFormat)"
- name: Contact
  id: contact
  summary: Contacts are objects created to manage collisions in worlds
  description: "# Contact\n\nContacts are objects created to manage collisions in worlds.\n\n## Functions\n\n|                                                                                 |                                                                                      |       |       |\n|---------------------------------------------------------------------------------|--------------------------------------------------------------------------------------|-------|-------|\n| [Contact:getChildren](contact-getchildren \"Contact:getChildren\")                | Gets the child indices of the shapes of the two colliding fixtures.                  | 0.9.0 |       |\n| [Contact:getFixtures](contact-getfixtures \"Contact:getFixtures\")                | Gets the two [Fixtures](fixture \"Fixture\") that hold the shapes that are in contact. | 0.9.2 |       |\n| [Contact:getFriction](contact-getfriction \"Contact:getFriction\")                | Get the friction between two shapes that are in contact.                             |       |       |\n| [Contact:getNormal](contact-getnormal \"Contact:getNormal\")                      | Get the normal vector between two shapes that are in contact.                        |       |       |\n| [Contact:getPosition](contact-getposition \"Contact:getPosition\")                | Get the location of the contact point between two shapes.                            |       | 0.8.0 |\n| [Contact:getPositions](contact-getpositions \"Contact:getPositions\")             | Returns the contact points of the two colliding fixtures.                            | 0.8.0 |       |\n| [Contact:getRestitution](contact-getrestitution \"Contact:getRestitution\")       | Get the restitution between two shapes that are in contact.                          |       |       |\n| [Contact:getSeparation](contact-getseparation \"Contact:getSeparation\")          | Get the separation between two shapes that are in contact.                           |       | 0.8.0 |\n| [Contact:getVelocity](contact-getvelocity \"Contact:getVelocity\")                | Get the linear impact velocity of a contact.                                         |       | 0.8.0 |\n| [Contact:isEnabled](contact-isenabled \"Contact:isEnabled\")                      | Returns whether the contact is enabled.                                              | 0.8.0 |       |\n| [Contact:isTouching](contact-istouching \"Contact:isTouching\")                   | Returns whether the two colliding fixtures are touching each other.                  | 0.8.0 |       |\n| [Contact:resetFriction](contact-resetfriction \"Contact:resetFriction\")          | Resets the contact friction to the mixture value of both fixtures.                   | 0.8.0 |       |\n| [Contact:resetRestitution](contact-resetrestitution \"Contact:resetRestitution\") | Resets the contact restitution to the mixture value of both fixtures.                | 0.8.0 |       |\n| [Contact:setEnabled](contact-setenabled \"Contact:setEnabled\")                   | Enables or disables the contact.                                                     | 0.8.0 |       |\n| [Contact:setFriction](contact-setfriction \"Contact:setFriction\")                | Sets the contact friction.                                                           | 0.8.0 |       |\n| [Contact:setRestitution](contact-setrestitution \"Contact:setRestitution\")       | Sets the contact restitution.                                                        | 0.8.0 |       |\n| [Object:release](object-release \"Object:release\")                               | Immediately destroys the object's Lua reference.                                     | 11.0  |       |\n| [Object:type](object-type \"Object:type\")                                        | Gets the type of the object as a string.                                             |       |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                  | Checks whether an object is of a certain type.                                       |       |       |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [World:setCallbacks](world-setcallbacks \"World:setCallbacks\")\n- [World:getContacts](world-getcontacts \"World:getContacts\")\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact](https://love2d.org/wiki/Contact)"
- name: Contact:getChildren
  id: contact-getchildren
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Contact:getChildren\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the child indices of the shapes of the two colliding fixtures. For [ChainShapes](chainshape \"ChainShape\"), an index of 1 is the first edge in the chain.\n\nUsed together with [Fixture:rayCast](fixture-raycast \"Fixture:rayCast\") or [ChainShape:getChildEdge](chainshape-getchildedge \"ChainShape:getChildEdge\").\n\n## Function\n\n### Synopsis\n\n``` lua\nindexA, indexB = Contact:getChildren( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` indexA`  \nThe child index of the first fixture's shape.\n\n[`number`](number \"number\")` indexB`  \nThe child index of the second fixture's shape.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n- [Fixture:rayCast](fixture-raycast \"Fixture:rayCast\")\n- [ChainShape:getChildEdge](chainshape-getchildedge \"ChainShape:getChildEdge\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:getChildren](https://love2d.org/wiki/Contact:getChildren)"
- name: Contact:getFixtures
  id: contact-getfixtures
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# Contact:getFixtures\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets the two [Fixtures](fixture \"Fixture\") that hold the shapes that are in contact.\n\n## Function\n\n### Synopsis\n\n``` lua\nfixtureA, fixtureB = Contact:getFixtures( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Fixture`](fixture \"Fixture\")` fixtureA`  \nThe first Fixture.\n\n[`Fixture`](fixture \"Fixture\")` fixtureB`  \nThe second Fixture.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:getFixtures](https://love2d.org/wiki/Contact:getFixtures)"
- name: Contact:getFriction
  id: contact-getfriction
  summary: Get the friction between two shapes that are in contact
  description: "# Contact:getFriction\n\nGet the friction between two shapes that are in contact.\n\n## Function\n\n### Synopsis\n\n``` lua\nfriction = Contact:getFriction( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` friction`  \nThe friction of the contact.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:getFriction](https://love2d.org/wiki/Contact:getFriction)"
- name: Contact:getNormal
  id: contact-getnormal
  summary: Get the normal vector between two shapes that are in contact
  description: "# Contact:getNormal\n\nGet the normal vector between two shapes that are in contact.\n\nThis function returns the coordinates of a unit vector that points from the first shape to the second.\n\n## Function\n\n### Synopsis\n\n``` lua\nnx, ny = Contact:getNormal( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` nx`  \nThe x component of the normal vector.\n\n[`number`](number \"number\")` ny`  \nThe y component of the normal vector.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:getNormal](https://love2d.org/wiki/Contact:getNormal)"
- name: Contact:getPosition
  id: contact-getposition
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Contact:getPosition\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nGet the location of the contact point between two shapes.\n\n## Function\n\n### Synopsis\n\n``` lua\ncx, cy = Contact:getPosition( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` cx`  \nThe x coordinate of the contact point.\n\n[`number`](number \"number\")` cy`  \nThe y coordinate of the contact point.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:getPosition](https://love2d.org/wiki/Contact:getPosition)"
- name: Contact:getPositions
  id: contact-getpositions
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Contact:getPositions\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns the contact points of the two colliding fixtures. There can be one or two points.\n\n## Function\n\n### Synopsis\n\n``` lua\nx1, y1, x2, y2 = Contact:getPositions( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x1`  \nThe x coordinate of the first contact point.\n\n[`number`](number \"number\")` y1`  \nThe y coordinate of the first contact point.\n\n[`number`](number \"number\")` x2`  \nThe x coordinate of the second contact point.\n\n[`number`](number \"number\")` y2`  \nThe y coordinate of the second contact point.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:getPositions](https://love2d.org/wiki/Contact:getPositions)"
- name: Contact:getRestitution
  id: contact-getrestitution
  summary: Get the restitution between two shapes that are in contact
  description: "# Contact:getRestitution\n\nGet the restitution between two shapes that are in contact.\n\n## Function\n\n### Synopsis\n\n``` lua\nrestitution = Contact:getRestitution( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` restitution`  \nThe restitution between the two shapes.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:getRestitution](https://love2d.org/wiki/Contact:getRestitution)"
- name: Contact:getSeparation
  id: contact-getseparation
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Contact:getSeparation\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nGet the separation between two shapes that are in contact.\n\nThe return value of this function is always zero or negative, with a negative value indicating overlap between the two shapes.\n\n## Function\n\n### Synopsis\n\n``` lua\ndistance = Contact:getSeparation( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` distance`  \nThe separation between the two shapes.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:getSeparation](https://love2d.org/wiki/Contact:getSeparation)"
- name: Contact:getVelocity
  id: contact-getvelocity
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Contact:getVelocity\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nGet the linear impact velocity of a contact.\n\n## Function\n\n### Synopsis\n\n``` lua\nvx, vy = Contact:getVelocity( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` vx`  \nThe x component of the velocity vector.\n\n[`number`](number \"number\")` vy`  \nThe y component of the velocity vector.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:getVelocity](https://love2d.org/wiki/Contact:getVelocity)"
- name: Contact:isEnabled
  id: contact-isenabled
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Contact:isEnabled\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns whether the contact is enabled. The collision will be ignored if a contact gets disabled in the preSolve callback.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = Contact:isEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nTrue if enabled, false otherwise.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n- [Contact:setEnabled](contact-setenabled \"Contact:setEnabled\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:isEnabled](https://love2d.org/wiki/Contact:isEnabled)"
- name: Contact:isTouching
  id: contact-istouching
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Contact:isTouching\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns whether the two colliding fixtures are touching each other.\n\n## Function\n\n### Synopsis\n\n``` lua\ntouching = Contact:isTouching( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` touching`  \nTrue if they touch or false if not.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:isTouching](https://love2d.org/wiki/Contact:isTouching)"
- name: Contact:resetFriction
  id: contact-resetfriction
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Contact:resetFriction\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nResets the contact friction to the mixture value of both fixtures.\n\n## Function\n\n### Synopsis\n\n``` lua\nContact:resetFriction( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:resetFriction](https://love2d.org/wiki/Contact:resetFriction)"
- name: Contact:resetRestitution
  id: contact-resetrestitution
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Contact:resetRestitution\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nResets the contact restitution to the mixture value of both fixtures.\n\n## Function\n\n### Synopsis\n\n``` lua\nContact:resetRestitution( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:resetRestitution](https://love2d.org/wiki/Contact:resetRestitution)"
- name: Contact:setEnabled
  id: contact-setenabled
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Contact:setEnabled\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nEnables or disables the contact.\n\n## Function\n\n### Synopsis\n\n``` lua\nContact:setEnabled( enabled )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enabled`  \nTrue to enable or false to disable.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n- [Contact:isEnabled](contact-isenabled \"Contact:isEnabled\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:setEnabled](https://love2d.org/wiki/Contact:setEnabled)"
- name: Contact:setFriction
  id: contact-setfriction
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Contact:setFriction\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nSets the contact friction.\n\n## Function\n\n### Synopsis\n\n``` lua\nContact:setFriction( friction )\n```\n\n### Arguments\n\n[`number`](number \"number\")` friction`  \nThe contact friction.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:setFriction](https://love2d.org/wiki/Contact:setFriction)"
- name: Contact:setRestitution
  id: contact-setrestitution
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Contact:setRestitution\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nSets the contact restitution.\n\n## Function\n\n### Synopsis\n\n``` lua\nContact:setRestitution( restitution )\n```\n\n### Arguments\n\n[`number`](number \"number\")` restitution`  \nThe contact restitution.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Contact](contact \"Contact\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Contact:setRestitution](https://love2d.org/wiki/Contact:setRestitution)"
- name: ContainerType
  id: containertype
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# ContainerType\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nReturn type of various data-returning functions.\n\n## Constants\n\ndata  \nReturn type is [ByteData](bytedata \"ByteData\").\n\nstring  \nReturn type is [string](string \"string\").\n\n## Notes\n\nUse **data** return type if you want to pass a reference to the data to another thread or LÖVE function, and use **string** return type if you want to use it immediately, like sending it to network.\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [love.data.compress](love.data.compress \"love.data.compress\")\n- [love.data.decompress](love.data.decompress \"love.data.decompress\")\n- [love.data.encode](love.data.encode \"love.data.encode\")\n- [love.data.decode](love.data.decode \"love.data.decode\")\n- [love.data.pack](love.data.pack \"love.data.pack\")\n- [love.filesystem.read](love.filesystem.read \"love.filesystem.read\")\n- [File:read]((file)-read \"(File):read\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ContainerType](https://love2d.org/wiki/ContainerType)"
- name: CullMode
  id: cullmode
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# CullMode\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nHow [Mesh](mesh \"Mesh\") geometry is culled when rendering.\n\n## Constants\n\nback  \nBack-facing triangles in Meshes are culled (not rendered). The [vertex order](love.graphics.setfrontfacewinding \"love.graphics.setFrontFaceWinding\") of a triangle determines whether it is back- or front-facing.\n\nfront  \nFront-facing triangles in Meshes are culled.\n\nnone  \nBoth back- and front-facing triangles in Meshes are rendered.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setMeshCullMode](love.graphics.setmeshcullmode \"love.graphics.setMeshCullMode\")\n- [Mesh](mesh \"Mesh\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CullMode](https://love2d.org/wiki/CullMode)"
- name: Cursor
  id: cursor
  summary: Available since LÖVE 0.9.0 This type is not supported in earlier versions
  description: "# Cursor\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis type is not supported in earlier versions.\n\nRepresents a hardware cursor.\n\n## Constructors\n\n|                                                                                       |                                                                        |       |     |\n|---------------------------------------------------------------------------------------|------------------------------------------------------------------------|-------|-----|\n| [love.mouse.getSystemCursor](love.mouse.getsystemcursor \"love.mouse.getSystemCursor\") | Gets a **Cursor** object representing a system-native hardware cursor. | 0.9.0 |     |\n| [love.mouse.newCursor](love.mouse.newcursor \"love.mouse.newCursor\")                   | Creates a new hardware **Cursor** object from an image.                | 0.9.0 |     |\n\n## Functions\n\n|                                                   |                                                  |       |     |\n|---------------------------------------------------|--------------------------------------------------|-------|-----|\n| [Cursor:getType](cursor-gettype \"Cursor:getType\") | Gets the type of the Cursor.                     | 0.9.0 |     |\n| [Object:release](object-release \"Object:release\") | Immediately destroys the object's Lua reference. | 11.0  |     |\n| [Object:type](object-type \"Object:type\")          | Gets the type of the object as a string.         |       |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")    | Checks whether an object is of a certain type.   |       |     |\n\n## Enums\n\n|                                       |                            |       |     |\n|---------------------------------------|----------------------------|-------|-----|\n| [CursorType](cursortype \"CursorType\") | Types of hardware cursors. | 0.9.0 |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.setCursor](love.mouse.setcursor \"love.mouse.setCursor\")\n- [love.mouse.getCursor](love.mouse.getcursor \"love.mouse.getCursor\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Cursor](https://love2d.org/wiki/Cursor)"
- name: Cursor:getType
  id: cursor-gettype
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Cursor:getType\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the type of the Cursor.\n\n## Function\n\n### Synopsis\n\n``` lua\nctype = Cursor:getType( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`CursorType`](cursortype \"CursorType\")` ctype`  \nThe type of the Cursor.\n\n## See Also\n\n- [Cursor](cursor \"Cursor\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Cursor:getType](https://love2d.org/wiki/Cursor:getType)"
- name: CursorType
  id: cursortype
  summary: Available since LÖVE 0.9.0 This enum is not supported in earlier versions
  description: "# CursorType\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in earlier versions.\n\nTypes of hardware cursors.\n\nNot all cursor types are available on all operating systems. If an unsupported type is used, it will default to something else.\n\n## Constants\n\nimage  \nThe cursor is using a custom image.\n\narrow  \nAn arrow pointer.\n\nibeam  \nAn I-beam, normally used when mousing over editable or selectable text.\n\nwait  \nWait graphic.\n\nwaitarrow  \nSmall wait cursor with an arrow pointer.\n\ncrosshair  \nCrosshair symbol.\n\nsizenwse  \nDouble arrow pointing to the top-left and bottom-right.\n\nsizenesw  \nDouble arrow pointing to the top-right and bottom-left.\n\nsizewe  \nDouble arrow pointing left and right.\n\nsizens  \nDouble arrow pointing up and down.\n\nsizeall  \nFour-pointed arrow pointing up, down, left, and right.\n\nno  \nSlashed circle or crossbones.\n\nhand  \nHand symbol.\n\n  \n\n## Notes\n\n[](https://love2d.org/wiki/File:cursors.png)\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [Cursor](cursor \"Cursor\")\n- [Cursor:getType](cursor-gettype \"Cursor:getType\")\n- [love.mouse.newCursor](love.mouse.newcursor \"love.mouse.newCursor\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/CursorType](https://love2d.org/wiki/CursorType)"
- name: Data
  id: data
  summary: The superclass of all data
  description: "# Data\n\nThe superclass of all data.\n\n## Functions\n\n|                                                               |                                                  |       |     |\n|---------------------------------------------------------------|--------------------------------------------------|-------|-----|\n| [Data:clone](data-clone \"Data:clone\")                         | Creates a new copy of the Data object.           | 11.0  |     |\n| [Data:getFFIPointer](data-getffipointer \"Data:getFFIPointer\") | Gets an FFI pointer to the Data.                 | 11.3  |     |\n| [Data:getPointer](data-getpointer \"Data:getPointer\")          | Gets a pointer to the Data.                      |       |     |\n| [Data:getSize](data-getsize \"Data:getSize\")                   | Gets the **Data**'s size in bytes.               |       |     |\n| [Data:getString](data-getstring \"Data:getString\")             | Gets the full Data as a string.                  | 0.9.0 |     |\n| [Object:release](object-release \"Object:release\")             | Immediately destroys the object's Lua reference. | 11.0  |     |\n| [Object:type](object-type \"Object:type\")                      | Gets the type of the object as a string.         |       |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                | Checks whether an object is of a certain type.   |       |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## Subtypes\n\n|                                                                  |                                                                          |        |       |\n|------------------------------------------------------------------|--------------------------------------------------------------------------|--------|-------|\n| [ByteData](bytedata \"ByteData\")                                  | Data object containing arbitrary bytes in an contiguous memory.          | 11.0   |       |\n| [CompressedData](compresseddata \"CompressedData\")                | Byte data compressed using a specific algorithm.                         | 0.10.0 |       |\n| [CompressedImageData](compressedimagedata \"CompressedImageData\") | Compressed image data designed to stay compressed in RAM and on the GPU. | 0.9.0  |       |\n| [FileData](filedata \"FileData\")                                  | **Data** representing the contents of a file.                            |        |       |\n| [FontData](fontdata \"FontData\")                                  | A FontData represents a font.                                            | 0.7.0  | 0.8.0 |\n| [GlyphData](glyphdata \"GlyphData\")                               | A GlyphData represents a drawable symbol of a font.                      | 0.7.0  |       |\n| [ImageData](imagedata \"ImageData\")                               | Raw (decoded) image data.                                                |        |       |\n| [SoundData](sounddata \"SoundData\")                               | Contains raw audio samples.                                              |        |       |\n\n## See Also\n\n- [love](love \"love\")\n- [love.data](love.data \"love.data\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Data](https://love2d.org/wiki/Data)"
- name: Data:clone
  id: data-clone
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Data:clone\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\n  \nCreates a new copy of the Data object.\n\n## Function\n\n### Synopsis\n\n``` lua\nclone = Data:clone( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Data`](data \"Data\")` clone`  \nThe new copy.\n\n## See Also\n\n- [Data](data \"Data\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Data:clone](https://love2d.org/wiki/Data:clone)"
- name: Data:getFFIPointer
  id: data-getffipointer
  summary: Available since LÖVE 11.3 This function is not supported in earlier versions
  description: "# Data:getFFIPointer\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis function is not supported in earlier versions.\n\nGets an [FFI](https://luajit.org/ext_ffi.html) pointer to the Data.\n\nThis function should be preferred instead of [Data:getPointer](data-getpointer \"Data:getPointer\") because the latter uses [light userdata](light_userdata \"light userdata\") which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used.\n\nUse at your own risk. Directly reading from and writing to the raw memory owned by the Data will bypass any safety checks and thread-safety the Data might normally have.\n\n## Function\n\n### Synopsis\n\n``` lua\npointer = Data:getFFIPointer( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`cdata`](cdata \"cdata\")` pointer`  \nA raw `void*` pointer to the Data, or `nil` if FFI is unavailable.\n\n## See Also\n\n- [Data](data \"Data\")\n- [Data:getPointer](data-getpointer \"Data:getPointer\")\n- [Data:getSize](data-getsize \"Data:getSize\")\n- [Data:getString](data-getstring \"Data:getString\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Data:getFFIPointer](https://love2d.org/wiki/Data:getFFIPointer)"
- name: Data:getPointer
  id: data-getpointer
  summary: Gets a pointer to the Data
  description: "# Data:getPointer\n\nGets a pointer to the Data. Can be used with libraries such as LuaJIT's [FFI](https://luajit.org/ext_ffi.html).\n\nUse at your own risk. Directly reading from and writing to the raw memory owned by the Data will bypass any safety checks and thread-safety the Data might normally have.\n\nSince LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\"), [Data:getFFIPointer](data-getffipointer \"Data:getFFIPointer\") is a preferred alternative because it can work with new 64-bit architectures.\n\n## Function\n\n### Synopsis\n\n``` lua\npointer = Data:getPointer( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`light userdata`](light_userdata \"light userdata\")` pointer`  \nA raw pointer to the Data.\n\n## See Also\n\n- [Data](data \"Data\")\n- [Data:getSize](data-getsize \"Data:getSize\")\n- [Data:getString](data-getstring \"Data:getString\")\n- [Data:getFFIPointer](data-getffipointer \"Data:getFFIPointer\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Data:getPointer](https://love2d.org/wiki/Data:getPointer)"
- name: Data:getSize
  id: data-getsize
  summary: Gets the Data's size in bytes
  description: "# Data:getSize\n\nGets the [Data](data \"Data\")'s size in bytes.\n\n## Function\n\n### Synopsis\n\n``` lua\nsize = Data:getSize( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` size`  \nThe size of the Data in bytes.\n\n## See Also\n\n- [Data](data \"Data\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Data:getSize](https://love2d.org/wiki/Data:getSize)"
- name: Data:getString
  id: data-getstring
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Data:getString\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\n  \nGets the full Data as a [string](string \"String\").\n\n## Function\n\n### Synopsis\n\n``` lua\ndata = Data:getString( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` data`  \nThe raw data.\n\n## Notes\n\nThe returned string count towards of LuaJIT 1GB/2GB memory limit, in some platforms.\n\n## See Also\n\n- [Data](data \"Data\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Data:getString](https://love2d.org/wiki/Data:getString)"
- name: Decoder
  id: decoder
  summary: An object which can gradually decode a sound file
  description: "# Decoder\n\nAn object which can gradually decode a sound file.\n\n## Constructors\n\n|                                                                        |                                                                              |     |     |\n|------------------------------------------------------------------------|------------------------------------------------------------------------------|-----|-----|\n| [love.sound.newDecoder](love.sound.newdecoder \"love.sound.newDecoder\") | Attempts to find a decoder for the encoded sound data in the specified file. |     |     |\n\n## Functions\n\n|                                                                              |                                                     |        |       |\n|------------------------------------------------------------------------------|-----------------------------------------------------|--------|-------|\n| [Decoder:clone](decoder-clone \"Decoder:clone\")                               | Create new copy of existing decoder.                | 11.3   |       |\n| [Decoder:decode](decoder-decode \"Decoder:decode\")                            | Decodes a chunk of audio data to a SoundData.       | 11.0   |       |\n| [Decoder:getBitDepth](decoder-getbitdepth \"Decoder:getBitDepth\")             | Returns the number of bits per sample.              | 0.9.0  |       |\n| [Decoder:getBits](decoder-getbits \"Decoder:getBits\")                         | Returns the number of bits per sample.              |        | 0.9.0 |\n| [Decoder:getChannelCount](decoder-getchannelcount \"Decoder:getChannelCount\") | Returns the number of channels in the stream.       | 11.0   |       |\n| [Decoder:getChannels](decoder-getchannels \"Decoder:getChannels\")             | Returns the number of channels in the stream.       |        | 11.0  |\n| [Decoder:getDuration](decoder-getduration \"Decoder:getDuration\")             | Gets the duration of the sound file.                | 0.10.0 |       |\n| [Decoder:getSampleRate](decoder-getsamplerate \"Decoder:getSampleRate\")       | Returns the sample rate of the Decoder.             |        |       |\n| [Decoder:seek](decoder-seek \"Decoder:seek\")                                  | Sets the currently playing position of the Decoder. | 11.0   |       |\n| [Object:release](object-release \"Object:release\")                            | Immediately destroys the object's Lua reference.    | 11.0   |       |\n| [Object:type](object-type \"Object:type\")                                     | Gets the type of the object as a string.            |        |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                               | Checks whether an object is of a certain type.      |        |       |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.sound](love.sound \"love.sound\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Decoder](https://love2d.org/wiki/Decoder)"
- name: Decoder:clone
  id: decoder-clone
  summary: Available since LÖVE 11.3 This function is not supported in earlier versions
  description: "# Decoder:clone\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis function is not supported in earlier versions.\n\nCreates a new copy of current decoder.\n\nThe new decoder will start decoding from the beginning of the audio stream.\n\n## Function\n\n### Synopsis\n\n``` lua\ndecoder = Decoder:clone( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Decoder`](decoder \"Decoder\")` decoder`  \nNew copy of the decoder.\n\n## See Also\n\n- [Decoder](decoder \"Decoder\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Decoder:clone](https://love2d.org/wiki/Decoder:clone)"
- name: Decoder:decode
  id: decoder-decode
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Decoder:decode\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nDecodes the audio and returns a [SoundData](sounddata \"SoundData\") object containing the decoded audio data.\n\n## Function\n\n### Synopsis\n\n``` lua\nsoundData = Decoder:decode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`SoundData`](sounddata \"SoundData\")` soundData`  \nDecoded audio data.\n\n## See Also\n\n- [Decoder](decoder \"Decoder\")\n- [SoundData](sounddata \"SoundData\")\n- [Source:queue](source-queue \"Source:queue\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Decoder:decode](https://love2d.org/wiki/Decoder:decode)"
- name: Decoder:getBitDepth
  id: decoder-getbitdepth
  summary: Available since LÖVE 0.9.0 It has been renamed from Decoder:getBits
  description: "# Decoder:getBitDepth\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [Decoder:getBits](decoder-getbits \"Decoder:getBits\").\n\nReturns the number of bits per sample.\n\n## Function\n\n### Synopsis\n\n``` lua\nbitDepth = Decoder:getBitDepth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` bitDepth`  \nEither 8, or 16.\n\n## See Also\n\n- [Decoder](decoder \"Decoder\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Decoder:getBitDepth](https://love2d.org/wiki/Decoder:getBitDepth)"
- name: Decoder:getBits
  id: decoder-getbits
  summary: Removed in LÖVE 0.9.0 It has been renamed to Decoder:getBitDepth
  description: "# Decoder:getBits\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [Decoder:getBitDepth](decoder-getbitdepth \"Decoder:getBitDepth\").\n\nReturns the number of bits per sample.\n\n## Function\n\n### Synopsis\n\n``` lua\nbitSize = Decoder:getBits( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` bitSize`  \nEither 8, or 16.\n\n## See Also\n\n- [Decoder](decoder \"Decoder\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Decoder:getBits](https://love2d.org/wiki/Decoder:getBits)"
- name: Decoder:getChannelCount
  id: decoder-getchannelcount
  summary: Available since LÖVE 11.0 It has been renamed from Decoder:getChannels
  description: "# Decoder:getChannelCount\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [Decoder:getChannels](decoder-getchannels \"Decoder:getChannels\").\n\nReturns the number of channels in the stream.\n\n## Function\n\n### Synopsis\n\n``` lua\nchannels = Decoder:getChannelCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` channels`  \n1 for mono, 2 for stereo.\n\n## See Also\n\n- [Decoder](decoder \"Decoder\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Decoder:getChannelCount](https://love2d.org/wiki/Decoder:getChannelCount)"
- name: Decoder:getChannels
  id: decoder-getchannels
  summary: Returns the number of channels in the stream
  description: "# Decoder:getChannels\n\n|                                                                                                                 |\n|-----------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                            |\n| This function has been renamed to [Decoder:getChannelCount](decoder-getchannelcount \"Decoder:getChannelCount\"). |\n\nReturns the number of channels in the stream.\n\n## Function\n\n### Synopsis\n\n``` lua\nchannels = Decoder:getChannels( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` channels`  \n1 for mono, 2 for stereo.\n\n## See Also\n\n- [Decoder](decoder \"Decoder\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Decoder:getChannels](https://love2d.org/wiki/Decoder:getChannels)"
- name: Decoder:getDuration
  id: decoder-getduration
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Decoder:getDuration\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the duration of the sound file. It may not always be sample-accurate, and it may return -1 if the duration cannot be determined at all.\n\n## Function\n\n### Synopsis\n\n``` lua\nduration = Decoder:getDuration( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` duration`  \nThe duration of the sound file in seconds, or -1 if it cannot be determined.\n\n## See Also\n\n- [Decoder](decoder \"Decoder\")\n- [Source:getDuration](source-getduration \"Source:getDuration\")\n- [SoundData:getDuration](sounddata-getduration \"SoundData:getDuration\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Decoder:getDuration](https://love2d.org/wiki/Decoder:getDuration)"
- name: Decoder:getSampleRate
  id: decoder-getsamplerate
  summary: Returns the sample rate of the Decoder
  description: "# Decoder:getSampleRate\n\nReturns the sample rate of the Decoder.\n\n## Function\n\n### Synopsis\n\n``` lua\nrate = Decoder:getSampleRate( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` rate`  \nNumber of samples per second.\n\n## See Also\n\n- [Decoder](decoder \"Decoder\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Decoder:getSampleRate](https://love2d.org/wiki/Decoder:getSampleRate)"
- name: Decoder:seek
  id: decoder-seek
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Decoder:seek\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nSets the currently playing position of the Decoder.\n\n## Function\n\n### Synopsis\n\n``` lua\nDecoder:seek( offset )\n```\n\n### Arguments\n\n[`number`](number \"number\")` offset`  \nThe position to seek to, in seconds.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Decoder](decoder \"Decoder\")\n- [Source:seek](source-seek \"Source:seek\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Decoder:seek](https://love2d.org/wiki/Decoder:seek)"
- name: DisplayOrientation
  id: displayorientation
  summary: Available since LÖVE 11.3 This enum is not supported in earlier versions
  description: "# DisplayOrientation\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis enum is not supported in earlier versions.\n\nTypes of device display orientation.\n\n## Constants\n\nunknown  \nOrientation cannot be determined.\n\nlandscape  \nLandscape orientation.\n\nlandscapeflipped  \nLandscape orientation (flipped).\n\nportrait  \nPortrait orientation.\n\nportraitflipped  \nPortrait orientation (flipped).\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.getDisplayOrientation](love.window.getdisplayorientation \"love.window.getDisplayOrientation\")\n- [love.displayrotated](love.displayrotated \"love.displayrotated\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/DisplayOrientation](https://love2d.org/wiki/DisplayOrientation)"
- name: DistanceJoint
  id: distancejoint
  summary: Keeps two bodies at the same distance
  description: "# DistanceJoint\n\nKeeps two bodies at the same distance.\n\n[](https://love2d.org/wiki/File:physicsJointDistance.PNG)\n\n## Constructors\n\n|                                                                                                |                                                 |     |     |\n|------------------------------------------------------------------------------------------------|-------------------------------------------------|-----|-----|\n| [love.physics.newDistanceJoint](love.physics.newdistancejoint \"love.physics.newDistanceJoint\") | Creates a **DistanceJoint** between two bodies. |     |     |\n\n## Functions\n\n|                                                                                                |                                                                   |       |       |\n|------------------------------------------------------------------------------------------------|-------------------------------------------------------------------|-------|-------|\n| [DistanceJoint:getDamping](distancejoint-getdamping \"DistanceJoint:getDamping\")                | Gets the damping ratio.                                           |       | 0.8.0 |\n| [DistanceJoint:getDampingRatio](distancejoint-getdampingratio \"DistanceJoint:getDampingRatio\") | Gets the damping ratio.                                           | 0.8.0 |       |\n| [DistanceJoint:getFrequency](distancejoint-getfrequency \"DistanceJoint:getFrequency\")          | Gets the response speed.                                          |       |       |\n| [DistanceJoint:getLength](distancejoint-getlength \"DistanceJoint:getLength\")                   | Gets the equilibrium distance between the two Bodies.             |       |       |\n| [DistanceJoint:setDamping](distancejoint-setdamping \"DistanceJoint:setDamping\")                | Sets the damping ratio.                                           |       | 0.8.0 |\n| [DistanceJoint:setDampingRatio](distancejoint-setdampingratio \"DistanceJoint:setDampingRatio\") | Sets the damping ratio.                                           | 0.8.0 |       |\n| [DistanceJoint:setFrequency](distancejoint-setfrequency \"DistanceJoint:setFrequency\")          | Sets the response speed.                                          |       |       |\n| [DistanceJoint:setLength](distancejoint-setlength \"DistanceJoint:setLength\")                   | Sets the equilibrium distance between the two Bodies.             |       |       |\n| [Joint:destroy](joint-destroy \"Joint:destroy\")                                                 | Explicitly destroys the Joint.                                    |       |       |\n| [Joint:getAnchors](joint-getanchors \"Joint:getAnchors\")                                        | Get the anchor points of the joint.                               |       |       |\n| [Joint:getBodies](joint-getbodies \"Joint:getBodies\")                                           | Gets the [bodies](body \"Body\") that the Joint is attached to.     | 0.9.2 |       |\n| [Joint:getCollideConnected](joint-getcollideconnected \"Joint:getCollideConnected\")             | Gets whether the connected Bodies collide.                        |       |       |\n| [Joint:getReactionForce](joint-getreactionforce \"Joint:getReactionForce\")                      | Returns the reaction force on the second body.                    |       |       |\n| [Joint:getReactionTorque](joint-getreactiontorque \"Joint:getReactionTorque\")                   | Returns the reaction torque on the second body.                   |       |       |\n| [Joint:getType](joint-gettype \"Joint:getType\")                                                 | Gets a string representing the type.                              |       |       |\n| [Joint:getUserData](joint-getuserdata \"Joint:getUserData\")                                     | Returns the Lua value associated with this Joint.                 | 0.9.2 |       |\n| [Joint:isDestroyed](joint-isdestroyed \"Joint:isDestroyed\")                                     | Gets whether the Joint is destroyed.                              | 0.9.2 |       |\n| [Joint:setCollideConnected](joint-setcollideconnected \"Joint:setCollideConnected\")             | Sets whether the connected Bodies should collide with each other. |       | 0.8.0 |\n| [Joint:setUserData](joint-setuserdata \"Joint:setUserData\")                                     | Associates a Lua value with the Joint.                            | 0.9.2 |       |\n\n## Supertypes\n\n- [Joint](joint \"Joint\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/DistanceJoint](https://love2d.org/wiki/DistanceJoint)"
- name: DistanceJoint:getDamping
  id: distancejoint-getdamping
  summary: Removed in LÖVE 0.8.0 It has been replaced with DistanceJoint:getDampingRatio
  description: "# DistanceJoint:getDamping\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been replaced with [DistanceJoint:getDampingRatio](distancejoint-getdampingratio \"DistanceJoint:getDampingRatio\").\n\n  \nGets the damping ratio.\n\n## Function\n\n### Synopsis\n\n``` lua\nratio = DistanceJoint:getDamping( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` ratio`  \nThe damping ratio.\n\n## See Also\n\n- [DistanceJoint](distancejoint \"DistanceJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/DistanceJoint:getDamping](https://love2d.org/wiki/DistanceJoint:getDamping)"
- name: DistanceJoint:getDampingRatio
  id: distancejoint-getdampingratio
  summary: Available since LÖVE 0.8.0 It has been renamed from DistanceJoint:getDamping
  description: "# DistanceJoint:getDampingRatio\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed from [DistanceJoint:getDamping](distancejoint-getdamping \"DistanceJoint:getDamping\").\n\n  \nGets the damping ratio.\n\n## Function\n\n### Synopsis\n\n``` lua\nratio = DistanceJoint:getDampingRatio( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` ratio`  \nThe damping ratio.\n\n## See Also\n\n- [DistanceJoint](distancejoint \"DistanceJoint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/DistanceJoint:getDampingRatio](https://love2d.org/wiki/DistanceJoint:getDampingRatio)"
- name: DistanceJoint:getFrequency
  id: distancejoint-getfrequency
  summary: Gets the response speed
  description: "# DistanceJoint:getFrequency\n\nGets the response speed.\n\n## Function\n\n### Synopsis\n\n``` lua\nHz = DistanceJoint:getFrequency( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` Hz`  \nThe response speed.\n\n## See Also\n\n- [DistanceJoint](distancejoint \"DistanceJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/DistanceJoint:getFrequency](https://love2d.org/wiki/DistanceJoint:getFrequency)"
- name: DistanceJoint:getLength
  id: distancejoint-getlength
  summary: Gets the equilibrium distance between the two Bodies
  description: "# DistanceJoint:getLength\n\nGets the equilibrium distance between the two Bodies.\n\n## Function\n\n### Synopsis\n\n``` lua\nl = DistanceJoint:getLength( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` l`  \nThe length between the two Bodies.\n\n## See Also\n\n- [DistanceJoint](distancejoint \"DistanceJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/DistanceJoint:getLength](https://love2d.org/wiki/DistanceJoint:getLength)"
- name: DistanceJoint:setDamping
  id: distancejoint-setdamping
  summary: Removed in LÖVE 0.8.0 It has been replaced with DistanceJoint:setDampingRatio
  description: "# DistanceJoint:setDamping\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been replaced with [DistanceJoint:setDampingRatio](distancejoint-setdampingratio \"DistanceJoint:setDampingRatio\").\n\nSets the damping ratio.\n\n## Function\n\n### Synopsis\n\n``` lua\nDistanceJoint:setDamping( ratio )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ratio`  \nThe damping ratio.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [DistanceJoint](distancejoint \"DistanceJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/DistanceJoint:setDamping](https://love2d.org/wiki/DistanceJoint:setDamping)"
- name: DistanceJoint:setDampingRatio
  id: distancejoint-setdampingratio
  summary: Available since LÖVE 0.8.0 It has been renamed from DistanceJoint:setDamping
  description: "# DistanceJoint:setDampingRatio\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed from [DistanceJoint:setDamping](distancejoint-setdamping \"DistanceJoint:setDamping\").\n\n  \nSets the damping ratio.\n\n## Function\n\n### Synopsis\n\n``` lua\nDistanceJoint:setDampingRatio( ratio )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ratio`  \nThe damping ratio.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [DistanceJoint](distancejoint \"DistanceJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/DistanceJoint:setDampingRatio](https://love2d.org/wiki/DistanceJoint:setDampingRatio)"
- name: DistanceJoint:setFrequency
  id: distancejoint-setfrequency
  summary: Sets the response speed
  description: "# DistanceJoint:setFrequency\n\nSets the response speed.\n\n## Function\n\n### Synopsis\n\n``` lua\nDistanceJoint:setFrequency( Hz )\n```\n\n### Arguments\n\n[`number`](number \"number\")` Hz`  \nThe response speed.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [DistanceJoint](distancejoint \"DistanceJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/DistanceJoint:setFrequency](https://love2d.org/wiki/DistanceJoint:setFrequency)"
- name: DistanceJoint:setLength
  id: distancejoint-setlength
  summary: Sets the equilibrium distance between the two Bodies
  description: "# DistanceJoint:setLength\n\nSets the equilibrium distance between the two Bodies.\n\n## Function\n\n### Synopsis\n\n``` lua\nDistanceJoint:setLength( l )\n```\n\n### Arguments\n\n[`number`](number \"number\")` l`  \nThe length between the two Bodies.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [DistanceJoint](distancejoint \"DistanceJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/DistanceJoint:setLength](https://love2d.org/wiki/DistanceJoint:setLength)"
- name: DistanceModel
  id: distancemodel
  summary: Available since LÖVE 0.8.0 This enum is not supported in earlier versions
  description: "# DistanceModel\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis enum is not supported in earlier versions.\n\nThe different distance models.\n\nExtended information can be found in the chapter \"3.4. Attenuation By Distance\" of the [OpenAL 1.1 specification](https://www.openal.org/documentation/openal-1.1-specification.pdf).\n\n## Constants\n\nnone  \nSources do not get attenuated.\n\ninverse  \nInverse distance attenuation.\n\ninverseclamped  \nInverse distance attenuation. Gain is clamped. In version [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older this is named **inverse clamped**.\n\nlinear  \nLinear attenuation.\n\nlinearclamped  \nLinear attenuation. Gain is clamped. In version [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older this is named **linear clamped**.\n\nexponent  \nExponential attenuation.\n\nexponentclamped  \nExponential attenuation. Gain is clamped. In version [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older this is named **exponent clamped**.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [love.audio.setDistanceModel](love.audio.setdistancemodel \"love.audio.setDistanceModel\")\n- [love.audio.getDistanceModel](love.audio.getdistancemodel \"love.audio.getDistanceModel\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/DistanceModel](https://love2d.org/wiki/DistanceModel)"
- name: Drawable
  id: drawable
  summary: Superclass for all things that can be drawn on screen
  description: "# Drawable\n\nSuperclass for all things that can be drawn on screen. This is an abstract type that can't be created directly.\n\n## Functions\n\n|                                                   |                                                  |      |     |\n|---------------------------------------------------|--------------------------------------------------|------|-----|\n| [Object:release](object-release \"Object:release\") | Immediately destroys the object's Lua reference. | 11.0 |     |\n| [Object:type](object-type \"Object:type\")          | Gets the type of the object as a string.         |      |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")    | Checks whether an object is of a certain type.   |      |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## Subtypes\n\n|                                                   |                                                               |        |       |\n|---------------------------------------------------|---------------------------------------------------------------|--------|-------|\n| [Canvas](canvas \"Canvas\")                         | Off-screen render target.                                     | 0.8.0  |       |\n| [Framebuffer](framebuffer \"Framebuffer\")          | Off-screen render target.                                     | 0.7.0  | 0.8.0 |\n| [Image](image \"Image\")                            | Drawable image type.                                          |        |       |\n| [Mesh](mesh \"Mesh\")                               | A 2D polygon mesh used for drawing arbitrary textured shapes. | 0.9.0  |       |\n| [ParticleSystem](particlesystem \"ParticleSystem\") | Used to create cool effects, like fire.                       |        |       |\n| [SpriteBatch](spritebatch \"SpriteBatch\")          | Store image positions in a buffer, and draw it in one call.   |        |       |\n| [Text](text \"Text\")                               | Drawable text.                                                | 0.10.0 |       |\n| [Texture](texture \"Texture\")                      | Superclass for drawable objects which represent a texture.    | 0.9.1  |       |\n| [Video](video \"Video\")                            | A drawable video.                                             | 0.10.0 |       |\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Drawable](https://love2d.org/wiki/Drawable)"
- name: DrawMode
  id: drawmode
  summary: Controls whether shapes are drawn as an outline, or filled
  description: "# DrawMode\n\nControls whether shapes are drawn as an outline, or filled.\n\n## Constants\n\nfill  \nDraw filled shape.\n\nline  \nDraw outlined shape.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/DrawMode](https://love2d.org/wiki/DrawMode)"
- name: DroppedFile
  id: droppedfile
  summary: Available since LÖVE 0.10.0 This type is not supported in earlier versions
  description: "# DroppedFile\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis type is not supported in earlier versions.\n\nRepresents a file dropped onto the window.\n\nNote that the DroppedFile type can only be obtained from [love.filedropped](love.filedropped \"love.filedropped\") callback, and can't be constructed manually by the user.\n\n## Functions\n\nThese functions have parentheses in odd places. This is because the *File:* namespace is reserved in Mediawiki.\n\n|                                                               |                                                                         |        |        |\n|---------------------------------------------------------------|-------------------------------------------------------------------------|--------|--------|\n| [(File):close]((file)-close \"(File):close\")                   | Closes a [File](file \"File\").                                           |        |        |\n| [(File):eof]((file)-eof \"(File):eof\")                         | If the end-of-file has been reached                                     |        | 0.10.0 |\n| [(File):flush]((file)-flush \"(File):flush\")                   | Flushes any buffered written data in the file to disk.                  | 0.9.0  |        |\n| [(File):getBuffer]((file)-getbuffer \"(File):getBuffer\")       | Gets the buffer mode of a file.                                         | 0.9.0  |        |\n| [(File):getFilename]((file)-getfilename \"(File):getFilename\") | Gets the filename that the File object was created with.                | 0.10.0 |        |\n| [(File):getMode]((file)-getmode \"(File):getMode\")             | Gets the [FileMode](filemode \"FileMode\") the file has been opened with. | 0.9.0  |        |\n| [(File):getSize]((file)-getsize \"(File):getSize\")             | Returns the [file](file \"File\") size.                                   |        |        |\n| [(File):isEOF]((file)-iseof \"(File):isEOF\")                   | Gets whether end-of-file has been reached.                              | 0.10.0 |        |\n| [(File):isOpen]((file)-isopen \"(File):isOpen\")                | Gets whether the file is open.                                          | 0.9.0  |        |\n| [(File):lines]((file)-lines \"(File):lines\")                   | Iterate over all the lines in a file.                                   |        |        |\n| [(File):open]((file)-open \"(File):open\")                      | Open the file for write, read or append.                                |        |        |\n| [(File):read]((file)-read \"(File):read\")                      | Read a number of bytes from a file                                      |        |        |\n| [(File):seek]((file)-seek \"(File):seek\")                      | Seek to a position in a file                                            |        |        |\n| [(File):setBuffer]((file)-setbuffer \"(File):setBuffer\")       | Sets the buffer mode for a file opened for writing or appending.        | 0.9.0  |        |\n| [(File):tell]((file)-tell \"(File):tell\")                      | Returns the position in the file.                                       |        |        |\n| [(File):write]((file)-write \"(File):write\")                   | Write data to a file.                                                   |        |        |\n| [Object:release](object-release \"Object:release\")             | Immediately destroys the object's Lua reference.                        | 11.0   |        |\n| [Object:type](object-type \"Object:type\")                      | Gets the type of the object as a string.                                |        |        |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                | Checks whether an object is of a certain type.                          |        |        |\n\n## Supertypes\n\n- [File](file \"File\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filedropped](love.filedropped \"love.filedropped\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/DroppedFile](https://love2d.org/wiki/DroppedFile)"
- name: EdgeShape
  id: edgeshape
  summary: Available since LÖVE 0.8.0 This shape is not supported in earlier versions
  description: "# EdgeShape\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis shape is not supported in earlier versions.\n\nA EdgeShape is a line segment. They can be used to create the boundaries of your terrain. The shape does not have volume and can only collide with [PolygonShape](polygonshape \"PolygonShape\") and [CircleShape](circleshape \"CircleShape\").\n\n## Constructors\n\n|                                                                                    |                              |       |     |\n|------------------------------------------------------------------------------------|------------------------------|-------|-----|\n| [love.physics.newEdgeShape](love.physics.newedgeshape \"love.physics.newEdgeShape\") | Creates a new **EdgeShape**. | 0.8.0 |     |\n\n## Functions\n\n|                                                                                          |                                                                      |        |       |\n|------------------------------------------------------------------------------------------|----------------------------------------------------------------------|--------|-------|\n| [EdgeShape:getNextVertex](edgeshape-getnextvertex \"EdgeShape:getNextVertex\")             | Gets the vertex that establishes a connection to the next shape.     | 0.10.2 |       |\n| [EdgeShape:getPoints](edgeshape-getpoints \"EdgeShape:getPoints\")                         | Returns the local coordinates of the edge points.                    | 0.8.0  |       |\n| [EdgeShape:getPreviousVertex](edgeshape-getpreviousvertex \"EdgeShape:getPreviousVertex\") | Gets the vertex that establishes a connection to the previous shape. | 0.10.2 |       |\n| [EdgeShape:setNextVertex](edgeshape-setnextvertex \"EdgeShape:setNextVertex\")             | Sets a vertex that establishes a connection to the next shape.       | 0.10.2 |       |\n| [EdgeShape:setPreviousVertex](edgeshape-setpreviousvertex \"EdgeShape:setPreviousVertex\") | Sets a vertex that establishes a connection to the previous shape.   | 0.10.2 |       |\n| [Object:release](object-release \"Object:release\")                                        | Immediately destroys the object's Lua reference.                     | 11.0   |       |\n| [Object:type](object-type \"Object:type\")                                                 | Gets the type of the object as a string.                             |        |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                           | Checks whether an object is of a certain type.                       |        |       |\n| [Shape:computeAABB](shape-computeaabb \"Shape:computeAABB\")                               | Returns the points of the bounding box for the transformed shape.    | 0.8.0  |       |\n| [Shape:computeMass](shape-computemass \"Shape:computeMass\")                               | Computes the mass properties for the shape.                          | 0.8.0  |       |\n| [Shape:destroy](shape-destroy \"Shape:destroy\")                                           | Explicitly destroys the Shape.                                       |        | 0.8.0 |\n| [Shape:getBody](shape-getbody \"Shape:getBody\")                                           | Get the body the shape is attached to.                               | 0.7.0  | 0.8.0 |\n| [Shape:getBoundingBox](shape-getboundingbox \"Shape:getBoundingBox\")                      | Gets the bounding box of the shape.                                  |        | 0.8.0 |\n| [Shape:getCategory](shape-getcategory \"Shape:getCategory\")                               | Gets the categories this shape is a member of.                       |        | 0.8.0 |\n| [Shape:getCategoryBits](shape-getcategorybits \"Shape:getCategoryBits\")                   | Gets the categories as a 16-bit integer.                             |        | 0.8.0 |\n| [Shape:getChildCount](shape-getchildcount \"Shape:getChildCount\")                         | Returns the number of children the shape has.                        | 0.8.0  |       |\n| [Shape:getData](shape-getdata \"Shape:getData\")                                           | Get the data set with setData.                                       |        | 0.8.0 |\n| [Shape:getDensity](shape-getdensity \"Shape:getDensity\")                                  | Gets the density of the Shape.                                       |        | 0.8.0 |\n| [Shape:getFilterData](shape-getfilterdata \"Shape:getFilterData\")                         | Gets the filter data of the Shape.                                   |        | 0.8.0 |\n| [Shape:getFriction](shape-getfriction \"Shape:getFriction\")                               | Gets the friction of this shape.                                     |        | 0.8.0 |\n| [Shape:getMask](shape-getmask \"Shape:getMask\")                                           | Gets which categories this shape should **NOT** collide with.        |        | 0.8.0 |\n| [Shape:getRadius](shape-getradius \"Shape:getRadius\")                                     | Gets the radius of the shape.                                        |        |       |\n| [Shape:getRestitution](shape-getrestitution \"Shape:getRestitution\")                      | Gets the restitution of this shape.                                  |        | 0.8.0 |\n| [Shape:getType](shape-gettype \"Shape:getType\")                                           | Gets a string representing the Shape.                                |        |       |\n| [Shape:isSensor](shape-issensor \"Shape:isSensor\")                                        | Checks whether a Shape is a sensor or not.                           |        | 0.8.0 |\n| [Shape:rayCast](shape-raycast \"Shape:rayCast\")                                           | Casts a ray against the shape.                                       | 0.8.0  |       |\n| [Shape:setCategory](shape-setcategory \"Shape:setCategory\")                               | Sets the categories this shape is a member of.                       |        | 0.8.0 |\n| [Shape:setData](shape-setdata \"Shape:setData\")                                           | Set data to be passed to the collision callback.                     |        | 0.8.0 |\n| [Shape:setDensity](shape-setdensity \"Shape:setDensity\")                                  | Sets the density of a Shape.                                         |        | 0.8.0 |\n| [Shape:setFilterData](shape-setfilterdata \"Shape:setFilterData\")                         | Sets the filter data for a Shape.                                    |        | 0.8.0 |\n| [Shape:setFriction](shape-setfriction \"Shape:setFriction\")                               | Sets the friction of the shape.                                      |        | 0.8.0 |\n| [Shape:setMask](shape-setmask \"Shape:setMask\")                                           | Sets which categories this shape should **NOT** collide with.        |        | 0.8.0 |\n| [Shape:setRestitution](shape-setrestitution \"Shape:setRestitution\")                      | Sets the restitution of the shape.                                   |        | 0.8.0 |\n| [Shape:setSensor](shape-setsensor \"Shape:setSensor\")                                     | Sets whether this shape should act as a sensor.                      |        | 0.8.0 |\n| [Shape:testPoint](shape-testpoint \"Shape:testPoint\")                                     | Checks whether a point lies inside the shape.                        |        |       |\n| [Shape:testSegment](shape-testsegment \"Shape:testSegment\")                               | Checks whether a line segment intersects a shape.                    |        | 0.8.0 |\n\n## Supertypes\n\n- [Shape](shape \"Shape\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/EdgeShape](https://love2d.org/wiki/EdgeShape)"
- name: EdgeShape:getNextVertex
  id: edgeshape-getnextvertex
  summary: Available since LÖVE 0.10.2 This function is not supported in earlier versions
  description: "# EdgeShape:getNextVertex\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis function is not supported in earlier versions.\n\nGets the vertex that establishes a connection to the next shape.\n\nSetting next and previous EdgeShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = EdgeShape:getNextVertex( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x (nil)`  \nThe x-component of the vertex, or nil if [EdgeShape:setNextVertex](edgeshape-setnextvertex \"EdgeShape:setNextVertex\") hasn't been called.\n\n[`number`](number \"number\")` y (nil)`  \nThe y-component of the vertex, or nil if [EdgeShape:setNextVertex](edgeshape-setnextvertex \"EdgeShape:setNextVertex\") hasn't been called.\n\n## See Also\n\n- [EdgeShape](edgeshape \"EdgeShape\")\n- [EdgeShape:setNextVertex](edgeshape-setnextvertex \"EdgeShape:setNextVertex\")\n- [EdgeShape:getPreviousVertex](edgeshape-getpreviousvertex \"EdgeShape:getPreviousVertex\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/EdgeShape:getNextVertex](https://love2d.org/wiki/EdgeShape:getNextVertex)"
- name: EdgeShape:getPoints
  id: edgeshape-getpoints
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# EdgeShape:getPoints\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the local coordinates of the edge points.\n\n## Function\n\n### Synopsis\n\n``` lua\nx1, y1, x2, y2 = EdgeShape:getPoints( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x1`  \nThe x-component of the first vertex.\n\n[`number`](number \"number\")` y1`  \nThe y-component of the first vertex.\n\n[`number`](number \"number\")` x2`  \nThe x-component of the second vertex.\n\n[`number`](number \"number\")` y2`  \nThe y-component of the second vertex.\n\n## See Also\n\n- [EdgeShape](edgeshape \"EdgeShape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/EdgeShape:getPoints](https://love2d.org/wiki/EdgeShape:getPoints)"
- name: EdgeShape:getPreviousVertex
  id: edgeshape-getpreviousvertex
  summary: Available since LÖVE 0.10.2 This function is not supported in earlier versions
  description: "# EdgeShape:getPreviousVertex\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis function is not supported in earlier versions.\n\nGets the vertex that establishes a connection to the previous shape.\n\nSetting next and previous EdgeShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = EdgeShape:getPreviousVertex( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x (nil)`  \nThe x-component of the vertex, or nil if [EdgeShape:setPreviousVertex](edgeshape-setpreviousvertex \"EdgeShape:setPreviousVertex\") hasn't been called.\n\n[`number`](number \"number\")` y (nil)`  \nThe y-component of the vertex, or nil if [EdgeShape:setPreviousVertex](edgeshape-setpreviousvertex \"EdgeShape:setPreviousVertex\") hasn't been called.\n\n## See Also\n\n- [EdgeShape](edgeshape \"EdgeShape\")\n- [EdgeShape:setPreviousVertex](edgeshape-setpreviousvertex \"EdgeShape:setPreviousVertex\")\n- [EdgeShape:getNextVertex](edgeshape-getnextvertex \"EdgeShape:getNextVertex\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/EdgeShape:getPreviousVertex](https://love2d.org/wiki/EdgeShape:getPreviousVertex)"
- name: EdgeShape:setNextVertex
  id: edgeshape-setnextvertex
  summary: Available since LÖVE 0.10.2 This function is not supported in earlier versions
  description: "# EdgeShape:setNextVertex\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis function is not supported in earlier versions.\n\nSets a vertex that establishes a connection to the next shape.\n\nThis can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nEdgeShape:setNextVertex( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-component of the vertex.\n\n[`number`](number \"number\")` y`  \nThe y-component of the vertex.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [EdgeShape](edgeshape \"EdgeShape\")\n- [EdgeShape:getNextVertex](edgeshape-getnextvertex \"EdgeShape:getNextVertex\")\n- [EdgeShape:setPreviousVertex](edgeshape-setpreviousvertex \"EdgeShape:setPreviousVertex\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/EdgeShape:setNextVertex](https://love2d.org/wiki/EdgeShape:setNextVertex)"
- name: EdgeShape:setPreviousVertex
  id: edgeshape-setpreviousvertex
  summary: Available since LÖVE 0.10.2 This function is not supported in earlier versions
  description: "# EdgeShape:setPreviousVertex\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis function is not supported in earlier versions.\n\nSets a vertex that establishes a connection to the previous shape.\n\nThis can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nEdgeShape:setPreviousVertex( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-component of the vertex.\n\n[`number`](number \"number\")` y`  \nThe y-component of the vertex.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [EdgeShape](edgeshape \"EdgeShape\")\n- [EdgeShape:getPreviousVertex](edgeshape-getpreviousvertex \"EdgeShape:getPreviousVertex\")\n- [EdgeShape:setNextVertex](edgeshape-setnextvertex \"EdgeShape:setNextVertex\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/EdgeShape:setPreviousVertex](https://love2d.org/wiki/EdgeShape:setPreviousVertex)"
- name: EffectType
  id: effecttype
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# EffectType\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nThe different types of effects supported by [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\").\n\n## Constants\n\nchorus\n\nPlays multiple copies of the sound with slight pitch and time variation. Used to make sounds sound \"fuller\" or \"thicker\".\n\n[`EffectWaveform`](effectwaveform \"EffectWaveform\")` waveform`\n\n[`number`](number \"number\")` phase`\n\n[`number`](number \"number\")` rate`\n\n[`number`](number \"number\")` depth`\n\n[`number`](number \"number\")` feedback`\n\n[`number`](number \"number\")` delay`\n\ncompressor\n\nDecreases the dynamic range of the sound, making the loud and quiet parts closer in volume, producing a more uniform amplitude throughout time.\n\n[`boolean`](boolean \"boolean\")` enable`\n\ndistortion\n\nAlters the sound by amplifying it until it clips, shearing off parts of the signal, leading to a compressed and distorted sound.\n\n[`number`](number \"number\")` gain`\n\n[`number`](number \"number\")` edge`\n\n[`number`](number \"number\")` lowcut`\n\n[`number`](number \"number\")` center`\n\n[`number`](number \"number\")` bandwidth`\n\necho\n\nDecaying feedback based effect, on the order of seconds. Also known as delay; causes the sound to repeat at regular intervals at a decreasing volume.\n\n[`number`](number \"number\")` delay`\n\n[`number`](number \"number\")` tapdelay`\n\n[`number`](number \"number\")` damping`\n\n[`number`](number \"number\")` feedback`\n\n[`number`](number \"number\")` spread`\n\nequalizer\n\nAdjust the frequency components of the sound using a 4-band (low-shelf, two band-pass and a high-shelf) equalizer.\n\n[`number`](number \"number\")` lowgain`\n\n[`number`](number \"number\")` lowcut`\n\n[`number`](number \"number\")` lowmidgain`\n\n[`number`](number \"number\")` lowmidfrequency`\n\n[`number`](number \"number\")` lowmidbandwidth`\n\n[`number`](number \"number\")` highmidgain`\n\n[`number`](number \"number\")` highmidfrequency`\n\n[`number`](number \"number\")` highmidbandwidth`\n\n[`number`](number \"number\")` highgain`\n\n[`number`](number \"number\")` highcut`\n\nflanger\n\nPlays two copies of the sound; while varying the phase, or equivalently delaying one of them, by amounts on the order of milliseconds, resulting in phasing sounds.\n\n[`EffectWaveform`](effectwaveform \"EffectWaveform\")` waveform`\n\n[`number`](number \"number\")` phase`\n\n[`number`](number \"number\")` rate`\n\n[`number`](number \"number\")` depth`\n\n[`number`](number \"number\")` feedback`\n\n[`number`](number \"number\")` delay`\n\nreverb\n\nDecaying feedback based effect, on the order of milliseconds. Used to simulate the reflection off of the surroundings.\n\n[`number`](number \"number\")` gain`\n\n[`number`](number \"number\")` highgain`\n\n[`number`](number \"number\")` density`\n\n[`number`](number \"number\")` diffusion`\n\n[`number`](number \"number\")` decaytime`\n\n[`number`](number \"number\")` decayhighratio`\n\n[`number`](number \"number\")` earlygain`\n\n[`number`](number \"number\")` earlydelay`\n\n[`number`](number \"number\")` lategain`\n\n[`number`](number \"number\")` latedelay`\n\n[`number`](number \"number\")` roomrolloff`\n\n[`number`](number \"number\")` airabsorption`\n\n[`boolean`](boolean \"boolean\")` highlimit`\n\nringmodulator\n\nAn implementation of amplitude modulation; multiplies the source signal with a simple waveform, to produce either volume changes, or inharmonic overtones.\n\n[`EffectWaveform`](effectwaveform \"EffectWaveform\")` waveform`\n\n[`number`](number \"number\")` frequency`\n\n[`number`](number \"number\")` highcut`\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/EffectType](https://love2d.org/wiki/EffectType)"
- name: EffectWaveform
  id: effectwaveform
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# EffectWaveform\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nThe different types of waveforms that can be used with the **ringmodulator** [EffectType](effecttype \"EffectType\").\n\n## Constants\n\nsawtooth  \nA sawtooth wave, also known as a ramp wave. Named for its linear rise, and (near-)instantaneous fall along time.\n\nsine  \nA sine wave. Follows a trigonometric sine function.\n\nsquare  \nA square wave. Switches between high and low states (near-)instantaneously.\n\ntriangle  \nA triangle wave. Follows a linear rise and fall that repeats periodically.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [EffectType](effecttype \"EffectType\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/EffectWaveform](https://love2d.org/wiki/EffectWaveform)"
- name: EncodeFormat
  id: encodeformat
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# EncodeFormat\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nEncoding format used to [encode](love.data.encode \"love.data.encode\") or [decode](love.data.decode \"love.data.decode\") data.\n\n## Constants\n\nbase64  \nEncode/decode data as base64 binary-to-text encoding.\n\nhex  \nEncode/decode data as hexadecimal string.\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [love.data.encode](love.data.encode \"love.data.encode\")\n- [love.data.decode](love.data.decode \"love.data.decode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/EncodeFormat](https://love2d.org/wiki/EncodeFormat)"
- name: enet.event
  id: enet.event
  summary: An event is a table generated by host:service() or peer:receive() which will always contain a string named type, a enet.peer named peer, and a string or number named data depending on the kind of event
  description: "# enet.event\n\n## Description\n\nAn **event** is a table generated by [host:service()](enet.host-service \"enet.host:service\") or [peer:receive()](enet.peer-receive \"enet.peer:receive\") which will **always** contain a [string](string \"string\") named *type*, a [enet.peer](enet.peer \"enet.peer\") named *peer*, and a [string](string \"string\") or [number](number \"number\") named *data* depending on the kind of event.\n\nThough be wary that [host:service()](enet.host-service \"enet.host:service\") and [peer:receive()](enet.peer-receive \"enet.peer:receive\") can return [nil](nil \"nil\") if no events are in the queue.\n\n## Structure\n\n|              |                               |                           |\n|--------------|-------------------------------|---------------------------|\n| event.type   | event.peer                    | event.data                |\n| \"receive\"    | [peer](enet.peer \"enet.peer\") | [string](string \"string\") |\n| \"disconnect\" | [peer](enet.peer \"enet.peer\") | [number](number \"number\") |\n| \"connect\"    | [peer](enet.peer \"enet.peer\") | [number](number \"number\") |\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host:service](enet.host-service \"enet.host:service\")\n- [enet.peer:receive](enet.peer-receive \"enet.peer:receive\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.event](https://love2d.org/wiki/enet.event)"
- name: enet.host
  id: enet.host
  summary: An ENet host for communicating with peers
  description: "# enet.host\n\n## Description\n\nAn ENet host for communicating with peers. On creation it will bind to a port on an address, unless otherwise specified, which will keep other applications from binding to the same port and address.\n\nOne can free the port by calling its destroy method; nil-ing the host object and calling collectgarbage() would work as well, since :destroy calls host:\\_\\_gc internally, but this is cleaner:\n\n``` lua\nlocal host = enet.host_create(\"*:6789\")\nhost:destroy()\n```\n\n## Functions\n\n|                                                                                                             |                                                                                                                                                         |\n|-------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Function                                                                                                    | Description                                                                                                                                             |\n| [host:service](enet.host-service \"enet.host:service\")                                                       | Wait for [events](enet.event \"enet.event\"), send and receive any ready packets.                                                                         |\n| [host:check_events](enet.host-check_events \"enet.host:check events\")                                        | Checks for any queued [events](enet.event \"enet.event\") and dispatches one if available.                                                                |\n| [host:compress_with_range_coder](enet.host-compress_with_range_coder \"enet.host:compress with range coder\") | Toggles an adaptive order-2 PPM range coder for the transmitted data of all peers.                                                                      |\n| [host:connect](enet.host-connect \"enet.host:connect\")                                                       | Connects a host to a remote host. Returns [peer](enet.peer \"enet.peer\") object associated with remote host.                                             |\n| [host:flush](enet.host-flush \"enet.host:flush\")                                                             | Sends any queued packets.                                                                                                                               |\n| [host:broadcast](enet.host-broadcast \"enet.host:broadcast\")                                                 | Queues a packet to be sent to all connected peers.                                                                                                      |\n| [host:channel_limit](enet.host-channel_limit \"enet.host:channel limit\")                                     | Sets the maximum number of channels allowed.                                                                                                            |\n| [host:bandwidth_limit](enet.host-bandwidth_limit \"enet.host:bandwidth limit\")                               | Sets the bandwidth limits of the host in bytes/sec.                                                                                                     |\n| [host:get_socket_address](enet.host-get_socket_address \"enet.host:get socket address\")                      | Returns a [string](string \"string\") that describes the socket address of the given host.                                                                |\n| [host:socket_get_address](enet.host-get_socket_address \"enet.host:get socket address\")                      | Deprecated version of host:get_socket_address.                                                                                                          |\n| [host:destroy](enet.host-destroy \"enet.host:destroy\")                                                       | Destroys the host, freeing any bound ports and addresses. Alias for the host:\\_\\_gc method.                                                             |\n| [host:total_sent_data](enet.host-total_sent_data \"enet.host:total sent data\")                               | Returns the [number](number \"number\") of bytes that were sent through the given host.                                                                   |\n| [host:total_received_data](enet.host-total_received_data \"enet.host:total received data\")                   | Returns the [number](number \"number\") of bytes that were received by the given host.                                                                    |\n| [host:service_time](enet.host-service_time \"enet.host:service time\")                                        | Returns the timestamp of the last call to [host:service()](enet.host-service \"enet.host:service\") or [host:flush()](enet.host-flush \"enet.host:flush\"). |\n| [host:peer_count](enet.host-peer_count \"enet.host:peer count\")                                              | Returns the number of peers that are allocated for the given host.                                                                                      |\n| [host:get_peer](enet.host-get_peer \"enet.host:get peer\")                                                    | Returns the connected [peer](enet.peer \"enet.peer\") at the specified index (starting at 1).                                                             |\n| [host:\\_\\_gc](enet.host-destroy \"enet.host:destroy\")                                                        | Destroys the host, freeing any bound ports and addresses.                                                                                               |\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet:host_create](enet-host_create \"enet:host create\")\n- [enet.event](enet.event \"enet.event\")\n- [enet.peer](enet.peer \"enet.peer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host](https://love2d.org/wiki/enet.host)"
- name: enet.host create
  id: enet.host_create
  summary: Returns a new host
  description: "# enet.host create\n\nReturns a new [host](enet.host \"enet.host\"). All arguments are optional.\n\nA bind_address of [nil](nil \"nil\") makes a [host](enet.host \"enet.host\") that can not be connected to (typically a client). Otherwise the address can either be of the form \\<ipaddress\\>:\\<port\\>, \\<hostname\\>:\\<port\\>, or \\*:\\<port\\>.\n\nExample addresses include \"127.0.0.1:8888\", \"localhost:2232\", and \"\\*:6767\". If port is 0, the system automatically chooses an ephemeral port and you can get port number by [host:get_socket_address](enet.host-get_socket_address \"enet.host:get socket address\")().\n\n## Function\n\n### Synopsis\n\n``` lua\nhost = enet.host_create(bind_address, peer_count, channel_count, in_bandwidth, out_bandwidth)\n```\n\n### Arguments\n\n[`string`](string \"string\")` bind_address`  \nThe address to connect to in the format \"ip:port\".\n\n[`number`](number \"number\")` peer_count`  \nThe max number of peers. Defaults to 64.\n\n[`number`](number \"number\")` channel_count`  \nThe max number of channels. Defaults to 1.\n\n[`number`](number \"number\")` in_bandwidth`  \nDownstream bandwidth in bytes/sec. Defaults to 0 (unlimited).\n\n[`number`](number \"number\")` out_bandwidth`  \nUpstream bandwidth in bytes/sec. Defaults to 0 (unlimited).\n\n### Returns\n\n[`enet.host`](enet.host \"enet.host\")` host`  \nThe requested [host](enet.host \"enet.host\").\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host](enet.host \"enet.host\")\n- [enet.host:channel_limit](enet.host-channel_limit \"enet.host:channel limit\")\n- [enet.host:bandwidth_limit](enet.host-bandwidth_limit \"enet.host:bandwidth limit\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host_create](https://love2d.org/wiki/enet.host_create)"
- name: enet.host:bandwidth limit
  id: enet.host-bandwidth_limit
  summary: Sets the bandwidth limits of the host in bytes/sec
  description: "# enet.host:bandwidth limit\n\nSets the bandwidth limits of the [host](enet.peer \"enet.peer\") in bytes/sec. Set to 0 for unlimited.\n\n## Function\n\n### Synopsis\n\n``` lua\nhost:bandwidth_limit(incoming, outgoing)\n```\n\n### Arguments\n\n[`number`](number \"number\")` incoming`  \nDownload speed limit in bytes/sec.\n\n[`number`](number \"number\")` outgoing`  \nUpload speed limit in bytes/sec.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host](enet.host \"enet.host\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:bandwidth_limit](https://love2d.org/wiki/enet.host:bandwidth_limit)"
- name: enet.host:broadcast
  id: enet.host-broadcast
  summary: Queues a packet to be sent to all connected peers
  description: "# enet.host:broadcast\n\nQueues a packet to be sent to all connected [peers](enet.peer \"enet.peer\").\n\n## Function\n\n### Synopsis\n\n``` lua\nhost:broadcast(data, channel, flag)\n```\n\n### Arguments\n\n[`string`](string \"string\")` data`  \nThe data to send.\n\n[`number`](number \"number\")` channel`  \nThe channel to send the packet on. Defaults to 0.\n\n[`string`](string \"string\")` flag`  \nflag is one of \"reliable\", \"unsequenced\", or \"unreliable\". Reliable packets are guaranteed to arrive, and arrive in the order in which they are sent. Unreliable packets arrive in the order in which they are sent, but they aren't guaranteed to arrive. Unsequenced packets are neither guaranteed to arrive, nor do they have any guarantee on the order they arrive. Optional. Defaults to reliable.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:broadcast](https://love2d.org/wiki/enet.host:broadcast)"
- name: enet.host:channel limit
  id: enet.host-channel_limit
  summary: Sets the maximum number of channels allowed
  description: "# enet.host:channel limit\n\nSets the maximum number of channels allowed. If it is 0 then the system maximum allowable value is used.\n\n## Function\n\n### Synopsis\n\n``` lua\nhost:channel_limit(limit)\n```\n\n### Arguments\n\n[`number`](number \"number\")` limit`  \nThe maximum number of channels allowed.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host](enet.host \"enet.host\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:channel_limit](https://love2d.org/wiki/enet.host:channel_limit)"
- name: enet.host:check events
  id: enet.host-check_events
  summary: Checks for any queued events and dispatches one if available
  description: "# enet.host:check events\n\nChecks for any queued events and dispatches one if available. Returns the associated [event](enet.event \"enet.event\") if something was dispatched, otherwise [nil](nil \"nil\").\n\n## Function\n\n### Synopsis\n\n``` lua\nevent = host:check_events()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` event`  \nAn [event](enet.event \"enet.event\") or nil if no events are available.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.event](enet.event \"enet.event\")\n- [enet.host:service](enet.host-service \"enet.host:service\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:check_events](https://love2d.org/wiki/enet.host:check_events)"
- name: enet.host:compress with range coder
  id: enet.host-compress_with_range_coder
  summary: Toggles an adaptive order-2 PPM range coder for the transmitted data of all peers
  description: "# enet.host:compress with range coder\n\nToggles an adaptive order-2 [PPM](https://en.wikipedia.org/wiki/Prediction_by_partial_matching) [range coder](https://en.wikipedia.org/wiki/Range_encoding) for the transmitted data of all peers.\n\n## Function\n\n### Synopsis\n\n``` lua\nhost:compress_with_range_coder()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` state`  \nTrue if the compression algorithm is active, false if not.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host](enet.host \"enet.host\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:compress_with_range_coder](https://love2d.org/wiki/enet.host:compress_with_range_coder)"
- name: enet.host:connect
  id: enet.host-connect
  summary: Connects a host to a remote host
  description: "# enet.host:connect\n\nConnects a [host](enet.host \"enet.host\") to a remote [host](enet.host \"enet.host\"). Returns [peer](enet.peer \"enet.peer\") object associated with the remote [host](enet.host \"enet.host\"). The actual connection will not take place until the next [host:service()](enet.host-service \"enet.host:service\") is called, in which a \"connect\" [event](enet.event \"enet.event\") will be generated.\n\n## Function\n\n### Synopsis\n\n``` lua\npeer = host:connect(address, channel_count, data)\n```\n\n### Arguments\n\n[`string`](string \"string\")` address`  \nThe address to connect to in the format \"ip:port\".\n\n[`number`](number \"number\")` channel_count`  \nThe number of channels to allocate. It should be the same as the channel count on the server. Defaults to 1.\n\n[`number`](number \"number\")` data`  \nAn integer value that can be associated with the connect [event](enet.event \"enet.event\"). Defaults to 0.\n\n### Returns\n\n[`enet.peer`](enet.peer \"enet.peer\")` peer`  \nA [peer](enet.peer \"enet.peer\").\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.event](enet.event \"enet.event\")\n- [enet.peer](enet.peer \"enet.peer\")\n- [enet.host:channel_limit](enet.host-channel_limit \"enet.host:channel limit\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:connect](https://love2d.org/wiki/enet.host:connect)"
- name: enet.host:destroy
  id: enet.host-destroy
  summary: Destroys the host structure and closes all of its connections
  description: "# enet.host:destroy\n\nDestroys the [host](enet.host \"enet.host\") structure and closes all of its connections. This function is also ran automatically by lua's garbage collector, since it's an alias to *host:\\_\\_gc*.\n\n## Function\n\n### Synopsis\n\n``` lua\nhost:destroy()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host](enet.host \"enet.host\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:destroy](https://love2d.org/wiki/enet.host:destroy)"
- name: enet.host:flush
  id: enet.host-flush
  summary: Sends any queued packets
  description: "# enet.host:flush\n\nSends any queued packets. This is only required to send packets earlier than the next call to [host:service](enet.host-service \"enet.host:service\"), or if [host:service](enet.host-service \"enet.host:service\") will not be called again.\n\n## Function\n\n### Synopsis\n\n``` lua\nhost:flush()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host:service](enet.host-service \"enet.host:service\")\n- [enet.host](enet.host \"enet.host\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:flush](https://love2d.org/wiki/enet.host:flush)"
- name: enet.host:get peer
  id: enet.host-get_peer
  summary: Returns the connected peer at the specified index (starting at 1). ENet stores all peers in an array of the corresponding host and re-uses unused peers for new connections
  description: "# enet.host:get peer\n\nReturns the connected [peer](enet.peer \"enet.peer\") at the specified index (starting at 1). ENet stores all [peers](enet.peer \"enet.peer\") in an array of the corresponding [host](enet.host \"enet.host\") and re-uses unused peers for new connections. You can query the state of a peer using [peer:state()](enet.peer-state \"enet.peer:state\").\n\n## Function\n\n### Synopsis\n\n``` lua\nhost:get_peer(index)\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nThe index of the desired [peer](enet.peer \"enet.peer\").\n\n### Returns\n\n[`enet.peer`](enet.peer \"enet.peer\")` peer`  \nThe desired [peer](enet.peer \"enet.peer\") structure.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host](enet.host \"enet.host\")\n- [enet.peer](enet.peer \"enet.peer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:get_peer](https://love2d.org/wiki/enet.host:get_peer)"
- name: enet.host:get socket address
  id: enet.host-get_socket_address
  summary: Returns a string that describes the socket address of the given host
  description: "# enet.host:get socket address\n\nReturns a string that describes the socket address of the given [host](enet.host \"enet.host\"). The string is formatted as “a.b.c.d:port”, where “a.b.c.d” is the IP address of the used socket.\n\n## Function\n\n### Synopsis\n\n``` lua\nhost:get_socket_address()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` address`  \nA string that describes the socket address.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host](enet.host \"enet.host\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:get_socket_address](https://love2d.org/wiki/enet.host:get_socket_address)"
- name: enet.host:peer count
  id: enet.host-peer_count
  summary: Returns the number of peers that are allocated for the given host
  description: "# enet.host:peer count\n\nReturns the number of [peers](enet.peer \"enet.peer\") that are allocated for the given [host](enet.host \"enet.host\"). This represents the maximum number of possible connections.\n\n## Function\n\n### Synopsis\n\n``` lua\nhost:peer_count()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` limit`  \nThe maximum number of peers allowed.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host](enet.host \"enet.host\")\n- [enet.peer](enet.peer \"enet.peer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:peer_count](https://love2d.org/wiki/enet.host:peer_count)"
- name: enet.host:service
  id: enet.host-service
  summary: Wait for events, send and receive any ready packets
  description: "# enet.host:service\n\nWait for [events](enet.event \"enet.event\"), send and receive any ready packets. If an [event](enet.event \"enet.event\") is in the queue it will be returned and dequeued. Generally you will want to dequeue all waiting [events](enet.event \"enet.event\") every frame.\n\n## Function\n\n### Synopsis\n\n``` lua\nevent = host:service( timeout )\n```\n\n### Arguments\n\n[`number`](number \"number\")` timeout`  \nThe max number of milliseconds to be waited for an [event](enet.event \"enet.event\"). Default is 0.\n\n### Returns\n\n[`table`](table \"table\")` event`  \nAn [event](enet.event \"enet.event\") or nil if no events occured.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.event](enet.event \"enet.event\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:service](https://love2d.org/wiki/enet.host:service)"
- name: enet.host:service time
  id: enet.host-service_time
  summary: Returns the time-stamp of the last call to host:service() or host:flush(). The time-stamp is in milliseconds of the current time of day
  description: "# enet.host:service time\n\nReturns the time-stamp of the last call to [host:service()](enet.host-service \"enet.host:service\") or [host:flush()](enet.host-flush \"enet.host:flush\"). The time-stamp is in milliseconds of the current time of day.\n\n## Function\n\n### Synopsis\n\n``` lua\nhost:channel_limit(limit)\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` timestamp`  \nA time-stamp in milliseconds.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host](enet.host \"enet.host\")\n- [enet.host:service](enet.host-service \"enet.host:service\")\n- [enet.host:flush](enet.host-flush \"enet.host:flush\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:service_time](https://love2d.org/wiki/enet.host:service_time)"
- name: enet.host:total received data
  id: enet.host-total_received_data
  summary: Returns the number of bytes that were received by the given host
  description: "# enet.host:total received data\n\nReturns the number of bytes that were received by the given host.\n\n## Function\n\n### Synopsis\n\n``` lua\nhost:total_received_data()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` bytes`  \nThe total number of bytes received.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host](enet.host \"enet.host\")\n- [enet.host:total_sent_data](enet.host-total_sent_data \"enet.host:total sent data\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:total_received_data](https://love2d.org/wiki/enet.host:total_received_data)"
- name: enet.host:total sent data
  id: enet.host-total_sent_data
  summary: Returns the number of bytes that were sent through the given host
  description: "# enet.host:total sent data\n\nReturns the number of bytes that were sent through the given [host](enet.host \"enet.host\").\n\n## Function\n\n### Synopsis\n\n``` lua\nhost:total_sent_data()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` bytes`  \nThe total number of bytes sent.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host](enet.host \"enet.host\")\n- [enet.host:total_received_data](enet.host-total_received_data \"enet.host:total received data\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.host:total_sent_data](https://love2d.org/wiki/enet.host:total_sent_data)"
- name: enet.linked version
  id: enet.linked_version
  summary: Returns the included ENet's version as a string
  description: "# enet.linked version\n\nReturns the included ENet's version as a string.\n\n## Function\n\n### Synopsis\n\n``` lua\nversion = enet.linked_version()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` version`  \nENet's version.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.linked_version](https://love2d.org/wiki/enet.linked_version)"
- name: enet.peer
  id: enet.peer
  summary: An ENet peer which data packets may be sent or received from
  description: "# enet.peer\n\n## Description\n\nAn ENet peer which data packets may be sent or received from. In most applications you'll manually keep track of connected peers.\n\n## Functions\n\n|                                                                                              |                                                                                                                                                                   |\n|----------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Function                                                                                     | Description                                                                                                                                                       |\n| [peer:disconnect](enet.peer-disconnect \"enet.peer:disconnect\")                               | Requests a disconnection from the peer.                                                                                                                           |\n| [peer:disconnect_now](enet.peer-disconnect_now \"enet.peer:disconnect now\")                   | Force immediate disconnection from peer.                                                                                                                          |\n| [peer:disconnect_later](enet.peer-disconnect_later \"enet.peer:disconnect later\")             | Request a disconnection from peer, but only after all queued outgoing packets are sent.                                                                           |\n| [peer:reset](enet.peer-reset \"enet.peer:reset\")                                              | Forcefully disconnects peer. The peer is not notified of the disconnection.                                                                                       |\n| [peer:ping](enet.peer-ping \"enet.peer:ping\")                                                 | Send a ping request to peer, updates [round_trip_time](enet.peer-round_trip_time \"enet.peer:round trip time\"). This is called automatically at regular intervals. |\n| [peer:receive](enet.peer-receive \"enet.peer:receive\")                                        | Attempts to dequeue an incoming packet for this peer.                                                                                                             |\n| [peer:send](enet.peer-send \"enet.peer:send\")                                                 | Queues a packet to be sent to peer.                                                                                                                               |\n| [peer:throttle_configure](enet.peer-throttle_configure \"enet.peer:throttle configure\")       | Changes the probability at which unreliable packets should not be dropped.                                                                                        |\n| [peer:ping_interval](enet.peer-ping_interval \"enet.peer:ping interval\")                      | Specifies the interval in milliseconds that pings are sent to the other end of the connection (defaults to 500).                                                  |\n| [peer:timeout](enet.peer-timeout \"enet.peer:timeout\")                                        | Returns or sets the parameters when a timeout is detected.                                                                                                        |\n| [peer:index](enet.peer-index \"enet.peer:index\")                                              | Returns the index of the peer.                                                                                                                                    |\n| [peer:state](enet.peer-state \"enet.peer:state\")                                              | Returns the state of the peer.                                                                                                                                    |\n| [peer:connect_id](enet.peer-connect_id \"enet.peer:connect id\")                               | Returns the field ENetPeer::connectID that is assigned for each connection.                                                                                       |\n| [peer:round_trip_time](enet.peer-round_trip_time \"enet.peer:round trip time\")                | Returns or sets the current round trip time (i.e. ping).                                                                                                          |\n| [peer:last_round_trip_time](enet.peer-last_round_trip_time \"enet.peer:last round trip time\") | Returns or sets the round trip time of the previous round trip time computation.                                                                                  |\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.event](enet.event \"enet.event\")\n- [enet.host](enet.host \"enet.host\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer](https://love2d.org/wiki/enet.peer)"
- name: enet.peer:connect id
  id: enet.peer-connect_id
  summary: Returns the field ENetPeer::connectID that is assigned for each connection
  description: "# enet.peer:connect id\n\nReturns the field ENetPeer::connectID that is assigned for each connection.\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:connect_id()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` id`  \nUnique ID that was assigned to the connection.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:connect_id](https://love2d.org/wiki/enet.peer:connect_id)"
- name: enet.peer:disconnect
  id: enet.peer-disconnect
  summary: Requests a disconnection from the peer
  description: "# enet.peer:disconnect\n\nRequests a disconnection from the [peer](enet.peer \"enet.peer\"). The message is sent on the next [host:service()](enet.host-service \"enet.host:service\") or [host:flush()](enet.host-flush \"enet.host:flush\").\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:disconnect(data)\n```\n\n### Arguments\n\n[`number`](number \"number\")` data`  \nAn optional integer value to be associated with the disconnect.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host](enet.host \"enet.host\")\n- [enet.host:flush](enet.host-flush \"enet.host:flush\")\n- [enet.host:service](enet.host-service \"enet.host:service\")\n- [enet.peer](enet.peer \"enet.peer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:disconnect](https://love2d.org/wiki/enet.peer:disconnect)"
- name: enet.peer:disconnect later
  id: enet.peer-disconnect_later
  summary: Request a disconnection from peer, but only after all queued outgoing packets are sent
  description: "# enet.peer:disconnect later\n\nRequest a disconnection from [peer](enet.peer \"enet.peer\"), but only after all queued outgoing packets are sent.\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:disconnect_later(data)\n```\n\n### Arguments\n\n[`number`](number \"number\")` data`  \nOptional integer value to be associated with the disconnect.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:disconnect_later](https://love2d.org/wiki/enet.peer:disconnect_later)"
- name: enet.peer:disconnect now
  id: enet.peer-disconnect_now
  summary: Force immediate disconnection from peer
  description: "# enet.peer:disconnect now\n\nForce immediate disconnection from [peer](enet.peer \"enet.peer\"). Foreign [peer](enet.peer \"enet.peer\") not guaranteed to receive disconnect notification.\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:disconnect_now(data)\n```\n\n### Arguments\n\n[`number`](number \"number\")` data`  \nOptional integer value to be associated with the disconnect.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:disconnect_now](https://love2d.org/wiki/enet.peer:disconnect_now)"
- name: enet.peer:index
  id: enet.peer-index
  summary: Returns the index of the peer
  description: "# enet.peer:index\n\nReturns the index of the [peer](enet.peer \"enet.peer\"). All [peers](enet.peer \"enet.peer\") of an ENet [host](enet.host \"enet.host\") are kept in an array. This function finds and returns the index of the [peer](enet.peer \"enet.peer\") of its [host](enet.host \"enet.host\") structure.\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:index()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` index`  \nThe index of the peer.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n- [enet.host](enet.host \"enet.host\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:index](https://love2d.org/wiki/enet.peer:index)"
- name: enet.peer:last round trip time
  id: enet.peer-last_round_trip_time
  summary: Returns or sets the round trip time of the previous round trip time computation
  description: "# enet.peer:last round trip time\n\nReturns or sets the round trip time of the previous round trip time computation. If value is [nil](nil \"nil\") the current value of the [peer](enet.peer \"enet.peer\") is returned. Otherwise the the previous round trip time computation is set to the specified value and returned.\n\nENet performs some filtering on the round trip times and it takes some time until the parameters are accurate. To speed it up you can set the value of the last round trip time to a more accurate guess.\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:last_round_trip_time()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` lastroundtriptime`  \nThe [peer's](enet.peer \"enet.peer\") last round trip time computation in milliseconds.\n\n### Synopsis\n\n``` lua\npeer:last_round_trip_time(value)\n```\n\n### Arguments\n\n[`number`](number \"number\")` value`  \nInteger value to be used as the last round trip time.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n- [enet.peer:round_trip_time](enet.peer-round_trip_time \"enet.peer:round trip time\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:last_round_trip_time](https://love2d.org/wiki/enet.peer:last_round_trip_time)"
- name: enet.peer:ping
  id: enet.peer-ping
  summary: Send a ping request to peer, updates round_trip_time
  description: "# enet.peer:ping\n\nSend a ping request to [peer](enet.peer \"enet.peer\"), updates [round_trip_time](enet.peer-round_trip_time \"enet.peer:round trip time\"). This is called automatically at regular intervals.\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:ping()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n- [enet.peer:round_trip_time](enet.peer-round_trip_time \"enet.peer:round trip time\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:ping](https://love2d.org/wiki/enet.peer:ping)"
- name: enet.peer:ping interval
  id: enet.peer-ping_interval
  summary: Nothing
  description: "# enet.peer:ping interval\n\nSpecifies the interval in milliseconds that pings are sent to the other end of the connection (defaults to 500).\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:ping_interval(interval)\n```\n\n### Arguments\n\n[`number`](number \"number\")` interval`  \nTime in milliseconds to wait before automatically calling [peer:ping()](enet.peer-ping \"enet.peer:ping\").\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n- [enet.peer:ping](enet.peer-ping \"enet.peer:ping\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:ping_interval](https://love2d.org/wiki/enet.peer:ping_interval)"
- name: enet.peer:receive
  id: enet.peer-receive
  summary: Attempts to dequeue an incoming packet for this peer
  description: "# enet.peer:receive\n\nAttempts to dequeue an incoming packet for this [peer](enet.peer \"enet.peer\"). Returns [nil](nil \"nil\") if there are no packets waiting. Otherwise returns two values: The string representing the packet data, and the channel the packet came from.\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:receive()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` data`  \nData from the received packet in a string.\n\n[`number`](number \"number\")` channel`  \nChannel the packet was received from.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:receive](https://love2d.org/wiki/enet.peer:receive)"
- name: enet.peer:reset
  id: enet.peer-reset
  summary: Forcefully disconnects peer
  description: "# enet.peer:reset\n\nForcefully disconnects [peer](enet.peer \"enet.peer\"). The [peer](enet.peer \"enet.peer\") is not notified of the disconnection.\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:reset()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:reset](https://love2d.org/wiki/enet.peer:reset)"
- name: enet.peer:round trip time
  id: enet.peer-round_trip_time
  summary: Returns or sets the current round trip time (i.e
  description: "# enet.peer:round trip time\n\nReturns or sets the current round trip time (i.e. ping). If value is [nil](nil \"nil\") the current value of the [peer](enet.peer \"enet.peer\") is returned. Otherwise the round trip time is set to the specified value and returned.\n\nENet performs some filtering on the round trip times and it takes some time until the parameters are accurate. To speed it up, set the [last round trip time](enet.peer-last_round_trip_time \"enet.peer:last round trip time\") to an accurate guess.\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:round_trip_time()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` roundtriptime`  \nThe [peer's](enet.peer \"enet.peer\") current round trip time in milliseconds.\n\n### Synopsis\n\n``` lua\npeer:round_trip_time(value)\n```\n\n### Arguments\n\n[`number`](number \"number\")` value`  \nInteger value to be used as the new round trip time.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n- [enet.peer:last_round_trip_time](enet.peer-last_round_trip_time \"enet.peer:last round trip time\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:round_trip_time](https://love2d.org/wiki/enet.peer:round_trip_time)"
- name: enet.peer:send
  id: enet.peer-send
  summary: Queues a packet to be sent to the peer
  description: "# enet.peer:send\n\nQueues a packet to be sent to the [peer](enet.peer \"enet.peer\").\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:send(data, channel, flag)\n```\n\n### Arguments\n\n[`string`](string \"string\")` data`  \nThe contents of the packet, it must be a [string](string \"string\").\n\n[`number`](number \"number\")` channel`  \nThe channel to send the packet on. Optional. Defaults to 0.\n\n[`string`](string \"string\")` flag`  \nflag is one of \"reliable\", \"unsequenced\", or \"unreliable\". Reliable packets are guaranteed to arrive, and arrive in the order in which they are sent. Unreliable packets arrive in the order in which they are sent, but they aren't guaranteed to arrive. Unsequenced packets are neither guaranteed to arrive, nor do they have any guarantee on the order they arrive. Optional. Defaults to reliable.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:send](https://love2d.org/wiki/enet.peer:send)"
- name: enet.peer:state
  id: enet.peer-state
  summary: Returns the state of the peer as a string
  description: "# enet.peer:state\n\nReturns the state of the [peer](enet.peer \"enet.peer\") as a [string](string \"string\").\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:state()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` state`  \nThe [peer's](enet.peer \"enet.peer\") current state. It can be any of the following:\n\n- \"disconnected\"\n- \"connecting\"\n- \"acknowledging_connect\"\n- \"connection_pending\"\n- \"connection_succeeded\"\n- \"connected\"\n- \"disconnect_later\"\n- \"disconnecting\"\n- \"acknowledging_disconnect\"\n- \"zombie\"\n- \"unknown\"\n\n  \n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:state](https://love2d.org/wiki/enet.peer:state)"
- name: enet.peer:throttle configure
  id: enet.peer-throttle_configure
  summary: Changes the probability at which unreliable packets should not be dropped
  description: "# enet.peer:throttle configure\n\nChanges the probability at which unreliable packets should not be dropped.\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:throttle_configure(interval, acceleration, deceleration)\n```\n\n### Arguments\n\n[`number`](number \"number\")` interval`  \nInterval in milliseconds to measure lowest mean [RTT](enet.peer-round_trip_time \"enet.peer:round trip time\").\n\n[`number`](number \"number\")` acceleration`  \nRate at which to increase throttle probability as mean [RTT](enet.peer-round_trip_time \"enet.peer:round trip time\") declines.\n\n[`number`](number \"number\")` deceleration`  \nRate at which to decrease throttle probability as mean [RTT](enet.peer-round_trip_time \"enet.peer:round trip time\") increases.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n- [enet.peer:round_trip_time](enet.peer-round_trip_time \"enet.peer:round trip time\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:throttle_configure](https://love2d.org/wiki/enet.peer:throttle_configure)"
- name: enet.peer:timeout
  id: enet.peer-timeout
  summary: Returns or sets the parameters when a timeout is detected
  description: "# enet.peer:timeout\n\nReturns or sets the parameters when a timeout is detected. This is happens either after a fixed timeout or a variable timeout of time that takes the round trip time into account. The former is specified with the maximum parameter.\n\n## Function\n\n### Synopsis\n\n``` lua\npeer:timeout(limit, minimum, maximum)\n```\n\n### Arguments\n\n[`number`](number \"number\")` limit`  \nA factor that is multiplied with a value that based on the average [round trip time](enet.peer-round_trip_time \"enet.peer:round trip time\") to compute the timeout limit.\n\n[`number`](number \"number\")` minimum`  \nTimeout value, in milliseconds, that a reliable packet has to be acknowledged if the variable timeout limit was exceeded before dropping the [peer](enet.peer \"enet.peer\").\n\n[`number`](number \"number\")` maximum`  \nFixed timeout in milliseconds for which any packet has to be acknowledged before dropping the [peer](enet.peer \"enet.peer\").\n\n### Returns\n\nNothing.\n\n### Synopsis\n\n``` lua\npeer:timeout()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` limit`  \nA factor that is multiplied with a value that based on the average [round trip time](enet.peer-round_trip_time \"enet.peer:round trip time\") to compute the timeout limit.\n\n[`number`](number \"number\")` minimum`  \nTimeout value, in milliseconds, that a reliable packet has to be acknowledged if the variable timeout limit was exceeded before dropping the [peer](enet.peer \"enet.peer\").\n\n[`number`](number \"number\")` maximum`  \nFixed timeout in milliseconds for which any packet has to be acknowledged before dropping the [peer](enet.peer \"enet.peer\").\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.peer](enet.peer \"enet.peer\")\n- [enet.peer:round_trip_time](enet.peer-round_trip_time \"enet.peer:round trip time\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet.peer:timeout](https://love2d.org/wiki/enet.peer:timeout)"
- name: enet:host create
  id: enet-host_create
  summary: Returns a new host
  description: "# enet:host create\n\nReturns a new [host](enet.host \"enet.host\"). All arguments are optional.\n\nA bind_address of [nil](nil \"nil\") makes a [host](enet.host \"enet.host\") that can not be connected to (typically a client). Otherwise the address can either be of the form \\<ipaddress\\>:\\<port\\>, \\<hostname\\>:\\<port\\>, or \\*:\\<port\\>.\n\nExample addresses include \"127.0.0.1:8888\", \"localhost:2232\", and \"\\*:6767\". If port is 0, the system automatically chooses an ephemeral port and you can get port number by [host:get_socket_address](enet.host-get_socket_address \"enet.host:get socket address\")().\n\n## Function\n\n### Synopsis\n\n``` lua\nhost = enet.host_create(bind_address, peer_count, channel_count, in_bandwidth, out_bandwidth)\n```\n\n### Arguments\n\n[`string`](string \"string\")` bind_address`  \nThe address to connect to in the format \"ip:port\".\n\n[`number`](number \"number\")` peer_count`  \nThe max number of peers. Defaults to 64.\n\n[`number`](number \"number\")` channel_count`  \nThe max number of channels. Defaults to 1.\n\n[`number`](number \"number\")` in_bandwidth`  \nDownstream bandwidth in bytes/sec. Defaults to 0 (unlimited).\n\n[`number`](number \"number\")` out_bandwidth`  \nUpstream bandwidth in bytes/sec. Defaults to 0 (unlimited).\n\n### Returns\n\n[`enet.host`](enet.host \"enet.host\")` host`  \nThe requested [host](enet.host \"enet.host\").\n\n## See Also\n\n- [lua-enet](lua-enet \"lua-enet\")\n- [enet.host](enet.host \"enet.host\")\n- [enet.host:channel_limit](enet.host-channel_limit \"enet.host:channel limit\")\n- [enet.host:bandwidth_limit](enet.host-bandwidth_limit \"enet.host:bandwidth limit\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/enet:host_create](https://love2d.org/wiki/enet:host_create)"
- name: Event
  id: event
  summary: Available since LÖVE 0.6.0 This enum is not supported in earlier versions
  description: "# Event\n\n**Available since LÖVE [0.6.0](https://love2d.org/wiki/0.6.0 \"0.6.0\")**  \nThis enum is not supported in earlier versions.\n\nArguments to `love.event.push()` and the like.\n\n## Constants\n\nSince [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\"), event names are no longer abbreviated.\n\nfocus Available since 0.8.0  \nWindow focus gained or lost\n\njoystickpressed Available since 0.8.0  \nJoystick pressed\n\njoystickreleased Available since 0.8.0  \nJoystick released\n\nkeypressed Available since 0.8.0  \nKey pressed\n\nkeyreleased Available since 0.8.0  \nKey released\n\nmousepressed Available since 0.8.0  \nMouse pressed\n\nmousereleased Available since 0.8.0  \nMouse released\n\nquit Available since 0.8.0  \nQuit\n\n  \n\nresize Available since 0.9.0  \nWindow size changed by the user\n\nvisible Available since 0.9.0  \nWindow is minimized or un-minimized by the user\n\nmousefocus Available since 0.9.0  \nWindow mouse focus gained or lost\n\nthreaderror Available since 0.9.0  \nA Lua error has occurred in a [thread](thread \"Thread\")\n\njoystickadded Available since 0.9.0  \nJoystick connected\n\njoystickremoved Available since 0.9.0  \nJoystick disconnected\n\njoystickaxis Available since 0.9.0  \nJoystick axis motion\n\njoystickhat Available since 0.9.0  \nJoystick hat pressed\n\ngamepadpressed Available since 0.9.0  \nJoystick's virtual gamepad button pressed\n\ngamepadreleased Available since 0.9.0  \nJoystick's virtual gamepad button released\n\ngamepadaxis Available since 0.9.0  \nJoystick's virtual gamepad axis moved\n\ntextinput Available since 0.9.0  \nUser entered text\n\n  \n\nmousemoved Available since 0.9.2  \nMouse position changed\n\n  \n\nlowmemory Available since 0.10.0  \nRunning out of memory on mobile devices system\n\ntextedited Available since 0.10.0  \nCandidate text for an IME changed\n\nwheelmoved Available since 0.10.0  \nMouse wheel moved\n\ntouchpressed Available since 0.10.0  \nTouch screen touched\n\ntouchreleased Available since 0.10.0  \nTouch screen stop touching\n\ntouchmoved Available since 0.10.0  \nTouch press moved inside touch screen\n\ndirectorydropped Available since 0.10.0  \nDirectory is dragged and dropped onto the window\n\nfiledropped Available since 0.10.0  \nFile is dragged and dropped onto the window.\n\n  \n\njp Removed in 0.8.0  \nJoystick pressed\n\njr Removed in 0.8.0  \nJoystick released\n\nkp Removed in 0.8.0  \nKey pressed\n\nkr Removed in 0.8.0  \nKey released\n\nmp Removed in 0.8.0  \nMouse pressed\n\nmr Removed in 0.8.0  \nMouse released\n\nq Removed in 0.8.0  \nQuit\n\n  \n\nf Available since 0.7.0 and removed in LÖVE 0.8.0  \nWindow focus gained or lost\n\n## See Also\n\n- [love.event](love.event \"love.event\")\n- [love.event.push](love.event.push \"love.event.push\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Event](https://love2d.org/wiki/Event)"
- name: File
  id: file
  summary: Represents a file on the filesystem
  description: "# File\n\nRepresents a file on the filesystem. A function that takes a file path can also take a File.\n\n## Constructors\n\n|                                                                              |                                |     |     |\n|------------------------------------------------------------------------------|--------------------------------|-----|-----|\n| [love.filesystem.newFile](love.filesystem.newfile \"love.filesystem.newFile\") | Creates a new **File** object. |     |     |\n\n## Functions\n\nThese functions have parentheses in odd places. This is because the *File:* namespace is reserved in Mediawiki.\n\n|                                                               |                                                                         |        |        |\n|---------------------------------------------------------------|-------------------------------------------------------------------------|--------|--------|\n| [(File):close]((file)-close \"(File):close\")                   | Closes a **File**.                                                      |        |        |\n| [(File):eof]((file)-eof \"(File):eof\")                         | If the end-of-file has been reached                                     |        | 0.10.0 |\n| [(File):flush]((file)-flush \"(File):flush\")                   | Flushes any buffered written data in the file to disk.                  | 0.9.0  |        |\n| [(File):getBuffer]((file)-getbuffer \"(File):getBuffer\")       | Gets the buffer mode of a file.                                         | 0.9.0  |        |\n| [(File):getFilename]((file)-getfilename \"(File):getFilename\") | Gets the filename that the File object was created with.                | 0.10.0 |        |\n| [(File):getMode]((file)-getmode \"(File):getMode\")             | Gets the [FileMode](filemode \"FileMode\") the file has been opened with. | 0.9.0  |        |\n| [(File):getSize]((file)-getsize \"(File):getSize\")             | Returns the **file** size.                                              |        |        |\n| [(File):isEOF]((file)-iseof \"(File):isEOF\")                   | Gets whether end-of-file has been reached.                              | 0.10.0 |        |\n| [(File):isOpen]((file)-isopen \"(File):isOpen\")                | Gets whether the file is open.                                          | 0.9.0  |        |\n| [(File):lines]((file)-lines \"(File):lines\")                   | Iterate over all the lines in a file.                                   |        |        |\n| [(File):open]((file)-open \"(File):open\")                      | Open the file for write, read or append.                                |        |        |\n| [(File):read]((file)-read \"(File):read\")                      | Read a number of bytes from a file                                      |        |        |\n| [(File):seek]((file)-seek \"(File):seek\")                      | Seek to a position in a file                                            |        |        |\n| [(File):setBuffer]((file)-setbuffer \"(File):setBuffer\")       | Sets the buffer mode for a file opened for writing or appending.        | 0.9.0  |        |\n| [(File):tell]((file)-tell \"(File):tell\")                      | Returns the position in the file.                                       |        |        |\n| [(File):write]((file)-write \"(File):write\")                   | Write data to a file.                                                   |        |        |\n| [Object:release](object-release \"Object:release\")             | Immediately destroys the object's Lua reference.                        | 11.0   |        |\n| [Object:type](object-type \"Object:type\")                      | Gets the type of the object as a string.                                |        |        |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                | Checks whether an object is of a certain type.                          |        |        |\n\n## Enums\n\n|                                       |                                                 |       |     |\n|---------------------------------------|-------------------------------------------------|-------|-----|\n| [BufferMode](buffermode \"BufferMode\") | Buffer modes for **File** objects.              | 0.9.0 |     |\n| [FileMode](filemode \"FileMode\")       | The different modes you can open a **File** in. |       |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/File](https://love2d.org/wiki/File)"
- name: FileData
  id: filedata
  summary: Available since LÖVE 0.7.0 This object is not supported in earlier versions
  description: "# FileData\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis object is not supported in earlier versions.\n\n[Data](data \"Data\") representing the contents of a file.\n\n## Constructors\n\n|                                                                                          |                                                                                    |       |     |\n|------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------|-------|-----|\n| [love.filesystem.newFileData](love.filesystem.newfiledata \"love.filesystem.newFileData\") | Creates a new **FileData** object from a file on disk, or from a string in memory. | 0.7.0 |     |\n\n## Functions\n\n|                                                                        |                                                  |       |     |\n|------------------------------------------------------------------------|--------------------------------------------------|-------|-----|\n| [Data:clone](data-clone \"Data:clone\")                                  | Creates a new copy of the Data object.           | 11.0  |     |\n| [Data:getFFIPointer](data-getffipointer \"Data:getFFIPointer\")          | Gets an FFI pointer to the Data.                 | 11.3  |     |\n| [Data:getPointer](data-getpointer \"Data:getPointer\")                   | Gets a pointer to the Data.                      |       |     |\n| [Data:getSize](data-getsize \"Data:getSize\")                            | Gets the [Data](data \"Data\")'s size in bytes.    |       |     |\n| [Data:getString](data-getstring \"Data:getString\")                      | Gets the full Data as a string.                  | 0.9.0 |     |\n| [FileData:getExtension](filedata-getextension \"FileData:getExtension\") | Gets the extension of the FileData.              | 0.7.0 |     |\n| [FileData:getFilename](filedata-getfilename \"FileData:getFilename\")    | Gets the filename of the FileData.               | 0.7.0 |     |\n| [Object:release](object-release \"Object:release\")                      | Immediately destroys the object's Lua reference. | 11.0  |     |\n| [Object:type](object-type \"Object:type\")                               | Gets the type of the object as a string.         |       |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                         | Checks whether an object is of a certain type.   |       |     |\n\n## Supertypes\n\n- [Data](data \"Data\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [File](file \"File\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FileData](https://love2d.org/wiki/FileData)"
- name: FileData:getExtension
  id: filedata-getextension
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# FileData:getExtension\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets the extension of the FileData.\n\n## Function\n\n### Synopsis\n\n``` lua\next = FileData:getExtension( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` ext`  \nThe extension of the file the FileData represents.\n\n## See Also\n\n- [FileData](filedata \"FileData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FileData:getExtension](https://love2d.org/wiki/FileData:getExtension)"
- name: FileData:getFilename
  id: filedata-getfilename
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# FileData:getFilename\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets the filename of the FileData.\n\n## Function\n\n### Synopsis\n\n``` lua\nname = FileData:getFilename( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` name`  \nThe name of the file the FileData represents.\n\n## See Also\n\n- [FileData](filedata \"FileData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FileData:getFilename](https://love2d.org/wiki/FileData:getFilename)"
- name: FileDecoder
  id: filedecoder
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 11.0 This enum is not supported in earlier or later versions
  description: "# FileDecoder\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier or later versions.\n\nHow to decode a given [FileData](filedata \"FileData\").\n\n## Constants\n\nfile  \nThe data is unencoded.\n\nbase64  \nThe data is base64-encoded.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FileDecoder](https://love2d.org/wiki/FileDecoder)"
- name: FileMode
  id: filemode
  summary: The different modes you can open a File in
  description: "# FileMode\n\nThe different modes you can open a [File](file \"File\") in.\n\n## Constants\n\nr  \nOpen a file for read.\n\nw  \nOpen a file for write.\n\na  \nOpen a file for append.\n\nc  \nDo not open a file (represents a closed file.)\n\n## See Also\n\n- [File](file \"File\")\n- [File:open]((file)-open \"(File):open\")\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.newFile](love.filesystem.newfile \"love.filesystem.newFile\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FileMode](https://love2d.org/wiki/FileMode)"
- name: FileType
  id: filetype
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# FileType\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nThe type of a file.\n\n## Constants\n\nfile  \nRegular file.\n\ndirectory  \nDirectory.\n\nsymlink  \nSymbolic link.\n\nother  \nSomething completely different like a device.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.getInfo](love.filesystem.getinfo \"love.filesystem.getInfo\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FileType](https://love2d.org/wiki/FileType)"
- name: FilterMode
  id: filtermode
  summary: How the image is filtered when scaling
  description: "# FilterMode\n\nHow the image is filtered when scaling.\n\n[](https://love2d.org/wiki/File:ComparisonFilters.png)\n\n## Constants\n\nlinear  \nScale image with linear interpolation.\n\nnearest  \nScale image with nearest neighbor interpolation.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setDefaultFilter](love.graphics.setdefaultfilter \"love.graphics.setDefaultFilter\")\n- [Texture:getFilter](texture-getfilter \"Texture:getFilter\")\n- [Texture:setFilter](texture-setfilter \"Texture:setFilter\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FilterMode](https://love2d.org/wiki/FilterMode)"
- name: FilterType
  id: filtertype
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# FilterType\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nTypes of filters for Sources.\n\n## Constants\n\nlowpass  \nLow-pass filter. High frequency sounds are attenuated.\n\nhighpass  \nHigh-pass filter. Low frequency sounds are attenuated.\n\nbandpass  \nBand-pass filter. Both high and low frequency sounds are attenuated based on the given parameters.\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:setFilter](source-setfilter \"Source:setFilter\")\n- [Source:getFilter](source-getfilter \"Source:getFilter\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FilterType](https://love2d.org/wiki/FilterType)"
- name: Fixture
  id: fixture
  summary: Available since LÖVE 0.8.0 This type is not supported in earlier versions
  description: "# Fixture\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis type is not supported in earlier versions.\n\nFixtures attach [shapes](shape \"Shape\") to [bodies](body \"Body\").\n\n## Constructors\n\n|                                                                              |                                 |       |     |\n|------------------------------------------------------------------------------|---------------------------------|-------|-----|\n| [love.physics.newFixture](love.physics.newfixture \"love.physics.newFixture\") | Creates and attaches a fixture. | 0.8.0 |     |\n\n## Functions\n\n|                                                                           |                                                                    |       |     |\n|---------------------------------------------------------------------------|--------------------------------------------------------------------|-------|-----|\n| [Fixture:destroy](fixture-destroy \"Fixture:destroy\")                      | Destroys the fixture.                                              | 0.8.0 |     |\n| [Fixture:getBody](fixture-getbody \"Fixture:getBody\")                      | Returns the body the fixture is attached to.                       | 0.8.0 |     |\n| [Fixture:getBoundingBox](fixture-getboundingbox \"Fixture:getBoundingBox\") | Returns the points of the fixture bounding box.                    | 0.8.0 |     |\n| [Fixture:getCategory](fixture-getcategory \"Fixture:getCategory\")          | Returns the categories the fixture belongs to.                     | 0.8.0 |     |\n| [Fixture:getDensity](fixture-getdensity \"Fixture:getDensity\")             | Returns the density of the fixture.                                | 0.8.0 |     |\n| [Fixture:getFilterData](fixture-getfilterdata \"Fixture:getFilterData\")    | Returns the filter data of the fixture.                            | 0.8.0 |     |\n| [Fixture:getFriction](fixture-getfriction \"Fixture:getFriction\")          | Returns the friction of the fixture.                               | 0.8.0 |     |\n| [Fixture:getGroupIndex](fixture-getgroupindex \"Fixture:getGroupIndex\")    | Returns the group the fixture belongs to.                          | 0.8.0 |     |\n| [Fixture:getMask](fixture-getmask \"Fixture:getMask\")                      | Returns which categories this fixture should **NOT** collide with. | 0.8.0 |     |\n| [Fixture:getMassData](fixture-getmassdata \"Fixture:getMassData\")          | Returns the mass, its center and the rotational inertia.           | 0.8.0 |     |\n| [Fixture:getRestitution](fixture-getrestitution \"Fixture:getRestitution\") | Returns the restitution of the fixture.                            | 0.8.0 |     |\n| [Fixture:getShape](fixture-getshape \"Fixture:getShape\")                   | Returns the shape of the fixture.                                  | 0.8.0 |     |\n| [Fixture:getUserData](fixture-getuserdata \"Fixture:getUserData\")          | Returns the Lua value associated with this fixture.                | 0.8.0 |     |\n| [Fixture:isDestroyed](fixture-isdestroyed \"Fixture:isDestroyed\")          | Gets whether the Fixture is destroyed.                             | 0.9.2 |     |\n| [Fixture:isSensor](fixture-issensor \"Fixture:isSensor\")                   | Returns whether the fixture is a sensor.                           | 0.8.0 |     |\n| [Fixture:rayCast](fixture-raycast \"Fixture:rayCast\")                      | Casts a ray against the shape of the fixture.                      | 0.8.0 |     |\n| [Fixture:setCategory](fixture-setcategory \"Fixture:setCategory\")          | Sets the categories the fixture belongs to.                        | 0.8.0 |     |\n| [Fixture:setDensity](fixture-setdensity \"Fixture:setDensity\")             | Sets the density of the fixture.                                   | 0.8.0 |     |\n| [Fixture:setFilterData](fixture-setfilterdata \"Fixture:setFilterData\")    | Sets the filter data of the fixture.                               | 0.8.0 |     |\n| [Fixture:setFriction](fixture-setfriction \"Fixture:setFriction\")          | Sets the friction of the fixture.                                  | 0.8.0 |     |\n| [Fixture:setGroupIndex](fixture-setgroupindex \"Fixture:setGroupIndex\")    | Sets the group the fixture belongs to.                             | 0.8.0 |     |\n| [Fixture:setMask](fixture-setmask \"Fixture:setMask\")                      | Sets which categories this fixture should **NOT** collide with.    | 0.8.0 |     |\n| [Fixture:setRestitution](fixture-setrestitution \"Fixture:setRestitution\") | Sets the restitution of the fixture.                               | 0.8.0 |     |\n| [Fixture:setSensor](fixture-setsensor \"Fixture:setSensor\")                | Sets whether the fixture should act as a sensor.                   | 0.8.0 |     |\n| [Fixture:setUserData](fixture-setuserdata \"Fixture:setUserData\")          | Associates a Lua value with the fixture.                           | 0.8.0 |     |\n| [Fixture:testPoint](fixture-testpoint \"Fixture:testPoint\")                | Checks if a point is inside the shape of the fixture.              | 0.8.0 |     |\n| [Object:release](object-release \"Object:release\")                         | Immediately destroys the object's Lua reference.                   | 11.0  |     |\n| [Object:type](object-type \"Object:type\")                                  | Gets the type of the object as a string.                           |       |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                            | Checks whether an object is of a certain type.                     |       |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture](https://love2d.org/wiki/Fixture)"
- name: Fixture:destroy
  id: fixture-destroy
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:destroy\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nDestroys the fixture.\n\n## Function\n\n### Synopsis\n\n``` lua\nFixture:destroy( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:destroy](https://love2d.org/wiki/Fixture:destroy)"
- name: Fixture:getBody
  id: fixture-getbody
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:getBody\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the body to which the fixture is attached.\n\n## Function\n\n### Synopsis\n\n``` lua\nbody = Fixture:getBody( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Body`](body \"Body\")` body`  \nThe parent body.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:getBody](https://love2d.org/wiki/Fixture:getBody)"
- name: Fixture:getBoundingBox
  id: fixture-getboundingbox
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:getBoundingBox\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the points of the fixture bounding box. In case the fixture has multiple children a 1-based index can be specified. For example, a fixture will have multiple children with a chain shape.\n\n## Function\n\n### Synopsis\n\n``` lua\ntopLeftX, topLeftY, bottomRightX, bottomRightY = Fixture:getBoundingBox( index )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index (1)`  \nA bounding box of the fixture.\n\n### Returns\n\n[`number`](number \"number\")` topLeftX`  \nThe x position of the top-left point.\n\n[`number`](number \"number\")` topLeftY`  \nThe y position of the top-left point.\n\n[`number`](number \"number\")` bottomRightX`  \nThe x position of the bottom-right point.\n\n[`number`](number \"number\")` bottomRightY`  \nThe y position of the bottom-right point.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:getBoundingBox](https://love2d.org/wiki/Fixture:getBoundingBox)"
- name: Fixture:getCategory
  id: fixture-getcategory
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:getCategory\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the categories the fixture belongs to.\n\n## Function\n\n### Synopsis\n\n``` lua\ncategory1, category2, ... = Fixture:getCategory( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` category1`  \nThe first category.\n\n[`number`](number \"number\")` category2`  \nThe second category.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:setCategory](fixture-setcategory \"Fixture:setCategory\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:getCategory](https://love2d.org/wiki/Fixture:getCategory)"
- name: Fixture:getDensity
  id: fixture-getdensity
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:getDensity\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the density of the fixture.\n\n## Function\n\n### Synopsis\n\n``` lua\ndensity = Fixture:getDensity( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` density`  \nThe fixture density in kilograms per square meter.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:setDensity](fixture-setdensity \"Fixture:setDensity\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:getDensity](https://love2d.org/wiki/Fixture:getDensity)"
- name: Fixture:getFilterData
  id: fixture-getfilterdata
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:getFilterData\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the filter data of the fixture. Categories and masks are encoded as the bits of a 16-bit integer.\n\n## Function\n\n### Synopsis\n\n``` lua\ncategories, mask, group = Fixture:getFilterData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` categories`  \nThe categories as an integer from 0 to 65535.\n\n[`number`](number \"number\")` mask`  \nThe mask as an integer from 0 to 65535.\n\n[`number`](number \"number\")` group`  \nThe group as an integer from -32768 to 32767.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:setFilterData](fixture-setfilterdata \"Fixture:setFilterData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:getFilterData](https://love2d.org/wiki/Fixture:getFilterData)"
- name: Fixture:getFriction
  id: fixture-getfriction
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:getFriction\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the friction of the fixture.\n\n## Function\n\n### Synopsis\n\n``` lua\nfriction = Fixture:getFriction( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` friction`  \nThe fixture friction.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:setFriction](fixture-setfriction \"Fixture:setFriction\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:getFriction](https://love2d.org/wiki/Fixture:getFriction)"
- name: Fixture:getGroupIndex
  id: fixture-getgroupindex
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:getGroupIndex\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the group the fixture belongs to. Fixtures with the same group will always collide if the group is positive or never collide if it's negative. The group zero means no group.\n\nThe groups range from -32768 to 32767.\n\n## Function\n\n### Synopsis\n\n``` lua\ngroup = Fixture:getGroupIndex( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` group`  \nThe group of the fixture.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:setGroupIndex](fixture-setgroupindex \"Fixture:setGroupIndex\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:getGroupIndex](https://love2d.org/wiki/Fixture:getGroupIndex)"
- name: Fixture:getMask
  id: fixture-getmask
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:getMask\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns which categories this fixture should **NOT** collide with.\n\n## Function\n\n### Synopsis\n\n``` lua\nmask1, mask2, ... = Fixture:getMask( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` mask1`  \nThe first category selected by the mask.\n\n[`number`](number \"number\")` mask2`  \nThe second category selected by the mask.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:setMask](fixture-setmask \"Fixture:setMask\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:getMask](https://love2d.org/wiki/Fixture:getMask)"
- name: Fixture:getMassData
  id: fixture-getmassdata
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:getMassData\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the mass, its center and the rotational inertia.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y, mass, inertia = Fixture:getMassData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x position of the center of mass.\n\n[`number`](number \"number\")` y`  \nThe y position of the center of mass.\n\n[`number`](number \"number\")` mass`  \nThe mass of the fixture.\n\n[`number`](number \"number\")` inertia`  \nThe rotational inertia.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:getMassData](https://love2d.org/wiki/Fixture:getMassData)"
- name: Fixture:getRestitution
  id: fixture-getrestitution
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:getRestitution\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the restitution of the fixture.\n\n## Function\n\n### Synopsis\n\n``` lua\nrestitution = Fixture:getRestitution( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` restitution`  \nThe fixture restitution.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:setRestitution](fixture-setrestitution \"Fixture:setRestitution\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:getRestitution](https://love2d.org/wiki/Fixture:getRestitution)"
- name: Fixture:getShape
  id: fixture-getshape
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:getShape\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the shape of the fixture. This shape is a reference to the actual data used in the simulation. It's possible to change its values between timesteps.\n\nDo not call any functions on this shape after the parent fixture has been destroyed. This shape will point to an invalid memory address and likely cause crashes if you interact further with it.\n\n## Function\n\n### Synopsis\n\n``` lua\nshape = Fixture:getShape( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Shape`](shape \"Shape\")` shape`  \nThe fixture's shape.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:getShape](https://love2d.org/wiki/Fixture:getShape)"
- name: Fixture:getUserData
  id: fixture-getuserdata
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:getUserData\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the Lua value associated with this fixture.\n\nUse this function in one thread and one thread only. Using it in more threads will make Lua cry and most likely crash.\n\n## Function\n\n### Synopsis\n\n``` lua\nvalue = Fixture:getUserData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`any`](https://love2d.org/w/index.php?title=any&action=edit&redlink=1 \"any (page does not exist)\")` value`  \nThe Lua value associated with the fixture.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:setUserData](fixture-setuserdata \"Fixture:setUserData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:getUserData](https://love2d.org/wiki/Fixture:getUserData)"
- name: Fixture:isDestroyed
  id: fixture-isdestroyed
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# Fixture:isDestroyed\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Fixture is destroyed. Destroyed fixtures cannot be used.\n\n## Function\n\n### Synopsis\n\n``` lua\ndestroyed = Fixture:isDestroyed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` destroyed`  \nWhether the Fixture is destroyed.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:destroy](fixture-destroy \"Fixture:destroy\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:isDestroyed](https://love2d.org/wiki/Fixture:isDestroyed)"
- name: Fixture:isSensor
  id: fixture-issensor
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:isSensor\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns whether the fixture is a sensor.\n\n## Function\n\n### Synopsis\n\n``` lua\nsensor = Fixture:isSensor( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` sensor`  \nIf the fixture is a sensor.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:setSensor](fixture-setsensor \"Fixture:setSensor\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:isSensor](https://love2d.org/wiki/Fixture:isSensor)"
- name: Fixture:rayCast
  id: fixture-raycast
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:rayCast\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nCasts a ray against the shape of the fixture and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned.\n\nThe ray starts on the first point of the input line and goes towards the second point of the line. The fifth argument is the maximum distance the ray is going to travel as a scale factor of the input line length.\n\nThe childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children.\n\nThe world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point.\n\n``` lua\nhitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction\n```\n\n  \n\nThere is a bug in [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") where the normal vector returned by this function gets scaled by [love.physics.getMeter](love.physics.getmeter \"love.physics.getMeter\").\n\n## Function\n\n### Synopsis\n\n``` lua\nxn, yn, fraction = Fixture:rayCast( x1, y1, x2, y2, maxFraction, childIndex )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x1`  \nThe x position of the input line starting point.\n\n[`number`](number \"number\")` y1`  \nThe y position of the input line starting point.\n\n[`number`](number \"number\")` x2`  \nThe x position of the input line end point.\n\n[`number`](number \"number\")` y2`  \nThe y position of the input line end point.\n\n[`number`](number \"number\")` maxFraction`  \nRay length parameter.\n\n[`number`](number \"number\")` childIndex (1)`  \nThe index of the child the ray gets cast against.\n\n### Returns\n\n[`number`](number \"number\")` xn`  \nThe x component of the normal vector of the edge where the ray hit the shape.\n\n[`number`](number \"number\")` yn`  \nThe y component of the normal vector of the edge where the ray hit the shape.\n\n[`number`](number \"number\")` fraction`  \nThe position on the input line where the intersection happened as a factor of the line length.\n\n## Examples\n\n### Casting 2 different rays against a box.\n\n``` lua\nfunction love.load()\n    -- Setting this to 1 to avoid all current scaling bugs.\n    love.physics.setMeter(1)\n \n    World = love.physics.newWorld()\n \n    Box = {}\n    Box.Body = love.physics.newBody(World, 400, 300, \"dynamic\")\n    Box.Shape = love.physics.newRectangleShape(150, 150)\n    Box.Fixture = love.physics.newFixture(Box.Body, Box.Shape)\n \n    -- Giving the box a gentle spin.\n    Box.Body:setAngularVelocity(0.5)\n \n    Ray1 = {\n        point1 = {},\n        point2 = {},\n    }\n    Ray1.point1.x, Ray1.point1.y = 50, 50\n    Ray1.point2.x, Ray1.point2.y = 400, 300\n    Ray1.scale = 1\n \n    Ray2 = {\n        point1 = {},\n        point2 = {},\n    }\n    Ray2.point1.x, Ray2.point1.y = 500, 400\n    Ray2.point2.x, Ray2.point2.y = Ray2.point1.x + math.cos(math.pi*1.45), Ray2.point1.y + math.sin(math.pi*1.45)\n    Ray2.scale = 150\nend\n \nfunction love.update(dt)\n    World:update(dt)\nend\n \nfunction love.draw()\n    -- Drawing the box.\n    love.graphics.setColor(1, 1, 1)\n    love.graphics.polygon(\"line\", Box.Body:getWorldPoints( Box.Shape:getPoints() ))\n \n    -- Drawing the input lines of the rays and the reach of ray 2 in gray.\n    love.graphics.setLineWidth(3)\n    love.graphics.setColor(50/255, 50/255, 50/255)\n    love.graphics.line(Ray2.point1.x, Ray2.point1.y, Ray2.point1.x + (Ray2.point2.x - Ray2.point1.x) * Ray2.scale, Ray2.point1.y + (Ray2.point2.y - Ray2.point1.y) * Ray2.scale)\n    love.graphics.setColor(1, 1, 1)\n    love.graphics.line(Ray1.point1.x, Ray1.point1.y, Ray1.point2.x, Ray1.point2.y)\n    love.graphics.line(Ray2.point1.x, Ray2.point1.y, Ray2.point2.x, Ray2.point2.y)\n    love.graphics.setLineWidth(1)\n \n    -- Remember that the ray cast can return nil if it hits nothing.\n    local r1nx, r1ny, r1f = Box.Fixture:rayCast(Ray1.point1.x, Ray1.point1.y, Ray1.point2.x, Ray1.point2.y, Ray1.scale)\n    local r2nx, r2ny, r2f = Box.Fixture:rayCast(Ray2.point1.x, Ray2.point1.y, Ray2.point2.x, Ray2.point2.y, Ray2.scale)\n \n    if r1nx then\n        -- Calculating the world position where the ray hit.\n        local r1HitX = Ray1.point1.x + (Ray1.point2.x - Ray1.point1.x) * r1f\n        local r1HitY = Ray1.point1.y + (Ray1.point2.y - Ray1.point1.y) * r1f\n \n        -- Drawing the ray from the starting point to the position on the shape.\n        love.graphics.setColor(1, 0, 0)\n        love.graphics.line(Ray1.point1.x, Ray1.point1.y, r1HitX, r1HitY)\n \n        -- We also get the surface normal of the edge the ray hit. Here drawn in green\n        love.graphics.setColor(0, 1, 0)\n        love.graphics.line(r1HitX, r1HitY, r1HitX + r1nx * 25, r1HitY + r1ny * 25)\n    end\n \n    if r2nx then\n        -- Calculating the world position where the ray hit.\n        local r2HitX = Ray2.point1.x + (Ray2.point2.x - Ray2.point1.x) * r2f\n        local r2HitY = Ray2.point1.y + (Ray2.point2.y - Ray2.point1.y) * r2f\n \n        -- Drawing the ray from the starting point to the position on the shape.\n        love.graphics.setColor(1, 0, 0)\n        love.graphics.line(Ray2.point1.x, Ray2.point1.y, r2HitX, r2HitY)\n \n        -- We also get the surface normal of the edge the ray hit. Here drawn in green\n        love.graphics.setColor(0, 1, 0)\n        love.graphics.line(r2HitX, r2HitY, r2HitX + r2nx * 25, r2HitY + r2ny * 25)\n    end\nend\n```\n\n[](https://love2d.org/wiki/File:raycast_example_screenshot.png)\n\nScreenshot of this example\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:rayCast](https://love2d.org/wiki/Fixture:rayCast)"
- name: Fixture:setCategory
  id: fixture-setcategory
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:setCategory\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets the categories the fixture belongs to. There can be up to 16 categories represented as a number from 1 to 16.\n\nAll fixture's default category is 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nFixture:setCategory( category1, category2, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` category1`  \nThe first category.\n\n[`number`](number \"number\")` category2`  \nThe second category.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:getCategory](fixture-getcategory \"Fixture:getCategory\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:setCategory](https://love2d.org/wiki/Fixture:setCategory)"
- name: Fixture:setDensity
  id: fixture-setdensity
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:setDensity\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets the density of the fixture. Call [Body:resetMassData](body-resetmassdata \"Body:resetMassData\") if this needs to take effect immediately.\n\n## Function\n\n### Synopsis\n\n``` lua\nFixture:setDensity( density )\n```\n\n### Arguments\n\n[`number`](number \"number\")` density`  \nThe fixture density in kilograms per square meter.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:getDensity](fixture-getdensity \"Fixture:getDensity\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:setDensity](https://love2d.org/wiki/Fixture:setDensity)"
- name: Fixture:setFilterData
  id: fixture-setfilterdata
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:setFilterData\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets the filter data of the fixture.\n\nGroups, categories, and mask can be used to define the collision behaviour of the fixture.\n\nIf two fixtures are in the same group they either always collide if the group is positive, or never collide if it's negative. If the group is zero or they do not match, then the contact filter checks if the fixtures select a category of the other fixture with their masks. The fixtures do not collide if that's not the case. If they do have each other's categories selected, the return value of the custom contact filter will be used. They always collide if none was set.\n\nThere can be up to 16 categories. Categories and masks are encoded as the bits of a 16-bit integer.\n\nWhen created, prior to calling this function, all fixtures have category set to 1, mask set to 65535 (all categories) and group set to 0.\n\nThis function allows setting all filter data for a fixture at once. To set only the categories, the mask or the group, you can use [Fixture:setCategory](fixture-setcategory \"Fixture:setCategory\"), [Fixture:setMask](fixture-setmask \"Fixture:setMask\") or [Fixture:setGroupIndex](fixture-setgroupindex \"Fixture:setGroupIndex\") respectively.\n\n## Function\n\n### Synopsis\n\n``` lua\nFixture:setFilterData( categories, mask, group )\n```\n\n### Arguments\n\n[`number`](number \"number\")` categories`  \nThe categories as an integer from 0 to 65535.\n\n[`number`](number \"number\")` mask`  \nThe mask as an integer from 0 to 65535.\n\n[`number`](number \"number\")` group`  \nThe group as an integer from -32768 to 32767.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:getFilterData](fixture-getfilterdata \"Fixture:getFilterData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:setFilterData](https://love2d.org/wiki/Fixture:setFilterData)"
- name: Fixture:setFriction
  id: fixture-setfriction
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:setFriction\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets the friction of the fixture.\n\nFriction determines how shapes react when they \"slide\" along other shapes. Low friction indicates a slippery surface, like ice, while high friction indicates a rough surface, like concrete. Range: 0.0 - 1.0.\n\n## Function\n\n### Synopsis\n\n``` lua\nFixture:setFriction( friction )\n```\n\n### Arguments\n\n[`number`](number \"number\")` friction`  \nThe fixture friction.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:getFriction](fixture-getfriction \"Fixture:getFriction\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:setFriction](https://love2d.org/wiki/Fixture:setFriction)"
- name: Fixture:setGroupIndex
  id: fixture-setgroupindex
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:setGroupIndex\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets the group the fixture belongs to. Fixtures with the same group will always collide if the group is positive or never collide if it's negative. The group zero means no group.\n\nThe groups range from -32768 to 32767.\n\n## Function\n\n### Synopsis\n\n``` lua\nFixture:setGroupIndex( group )\n```\n\n### Arguments\n\n[`number`](number \"number\")` group`  \nThe group as an integer from -32768 to 32767.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:getGroupIndex](fixture-getgroupindex \"Fixture:getGroupIndex\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:setGroupIndex](https://love2d.org/wiki/Fixture:setGroupIndex)"
- name: Fixture:setMask
  id: fixture-setmask
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:setMask\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\n  \n\nFixture:setMask works in **NOT**.Categories selected will **NOT** collide with this fixture. If you want to work as Box2d works with Mask use instead [Fixture:setFilterData](fixture-setfilterdata \"Fixture:setFilterData\")\n\nSets the category mask of the fixture. There can be up to 16 categories represented as a number from 1 to 16.\n\nThis fixture will **NOT** collide with the fixtures that are in the selected categories if the other fixture also has a category of this fixture selected.\n\n## Function\n\n### Synopsis\n\n``` lua\nFixture:setMask( mask1, mask2, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` mask1`  \nThe first category.\n\n[`number`](number \"number\")` mask2`  \nThe second category.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:getMask](fixture-getmask \"Fixture:getMask\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:setMask](https://love2d.org/wiki/Fixture:setMask)"
- name: Fixture:setRestitution
  id: fixture-setrestitution
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:setRestitution\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets the restitution of the fixture.\n\n## Function\n\n### Synopsis\n\n``` lua\nFixture:setRestitution( restitution )\n```\n\n### Arguments\n\n[`number`](number \"number\")` restitution`  \nThe fixture restitution.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:getRestitution](fixture-getrestitution \"Fixture:getRestitution\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:setRestitution](https://love2d.org/wiki/Fixture:setRestitution)"
- name: Fixture:setSensor
  id: fixture-setsensor
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:setSensor\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets whether the fixture should act as a sensor.\n\nSensors do not cause collision responses, but the begin-contact and end-contact [World callbacks](world-setcallbacks \"World:setCallbacks\") will still be called for this fixture.\n\n## Function\n\n### Synopsis\n\n``` lua\nFixture:setSensor( sensor )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` sensor`  \nThe sensor status.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:isSensor](fixture-issensor \"Fixture:isSensor\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:setSensor](https://love2d.org/wiki/Fixture:setSensor)"
- name: Fixture:setUserData
  id: fixture-setuserdata
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:setUserData\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nAssociates a Lua value with the fixture.\n\nTo delete the reference, explicitly pass nil.\n\nUse this function in one thread and one thread only. Using it in more threads will make Lua cry and most likely crash.\n\n## Function\n\n### Synopsis\n\n``` lua\nFixture:setUserData( value )\n```\n\n### Arguments\n\n[`any`](https://love2d.org/w/index.php?title=any&action=edit&redlink=1 \"any (page does not exist)\")` value`  \nThe Lua value to associate with the fixture.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n- [Fixture:getUserData](fixture-getuserdata \"Fixture:getUserData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:setUserData](https://love2d.org/wiki/Fixture:setUserData)"
- name: Fixture:testPoint
  id: fixture-testpoint
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# Fixture:testPoint\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nChecks if a point is inside the shape of the fixture.\n\n## Function\n\n### Synopsis\n\n``` lua\nisInside = Fixture:testPoint( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x position of the point.\n\n[`number`](number \"number\")` y`  \nThe y position of the point.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` isInside`  \nTrue if the point is inside or false if it is outside.\n\n## See Also\n\n- [Fixture](fixture \"Fixture\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Fixture:testPoint](https://love2d.org/wiki/Fixture:testPoint)"
- name: Font
  id: font
  summary: Defines the shape of characters that can be drawn onto the screen
  description: "# Font\n\nDefines the shape of characters that can be drawn onto the screen.\n\n## Constructors\n\n|                                                                                       |                                                                   |       |     |\n|---------------------------------------------------------------------------------------|-------------------------------------------------------------------|-------|-----|\n| [love.graphics.newFont](love.graphics.newfont \"love.graphics.newFont\")                | Creates a new **Font** from a TrueType Font or BMFont file.       |       |     |\n| [love.graphics.newImageFont](love.graphics.newimagefont \"love.graphics.newImageFont\") | Creates a new **Font** by loading a specifically formatted image. | 0.2.0 |     |\n\n## Functions\n\n|                                                               |                                                                         |        |     |\n|---------------------------------------------------------------|-------------------------------------------------------------------------|--------|-----|\n| [Font:getAscent](font-getascent \"Font:getAscent\")             | Gets the ascent of the Font in pixels.                                  | 0.9.0  |     |\n| [Font:getBaseline](font-getbaseline \"Font:getBaseline\")       | Gets the baseline of the Font in pixels.                                | 0.9.0  |     |\n| [Font:getDPIScale](font-getdpiscale \"Font:getDPIScale\")       | Gets the DPI scale factor of the Font.                                  | 11.0   |     |\n| [Font:getDescent](font-getdescent \"Font:getDescent\")          | Gets the descent of the Font in pixels.                                 | 0.9.0  |     |\n| [Font:getFilter](font-getfilter \"Font:getFilter\")             | Gets the filter mode for a font.                                        | 0.9.0  |     |\n| [Font:getHeight](font-getheight \"Font:getHeight\")             | Gets the height of the Font in pixels.                                  |        |     |\n| [Font:getLineHeight](font-getlineheight \"Font:getLineHeight\") | Gets the line height.                                                   |        |     |\n| [Font:getWidth](font-getwidth \"Font:getWidth\")                | Determines the width of the given text.                                 |        |     |\n| [Font:getWrap](font-getwrap \"Font:getWrap\")                   | Gets formatting information for text, given a wrap limit.               | 0.7.0  |     |\n| [Font:hasGlyphs](font-hasglyphs \"Font:hasGlyphs\")             | Gets whether the Font can render a character or string.                 | 0.9.0  |     |\n| [Font:setFallbacks](font-setfallbacks \"Font:setFallbacks\")    | Sets other Fonts to use if this Font doesn't have a specific character. | 0.10.0 |     |\n| [Font:setFilter](font-setfilter \"Font:setFilter\")             | Sets the filter mode for a font.                                        | 0.9.0  |     |\n| [Font:setLineHeight](font-setlineheight \"Font:setLineHeight\") | Sets the line height.                                                   |        |     |\n| [Object:release](object-release \"Object:release\")             | Immediately destroys the object's Lua reference.                        | 11.0   |     |\n| [Object:type](object-type \"Object:type\")                      | Gets the type of the object as a string.                                |        |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                | Checks whether an object is of a certain type.                          |        |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font](https://love2d.org/wiki/Font)"
- name: Font:getAscent
  id: font-getascent
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Font:getAscent\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the ascent of the Font. The ascent spans the distance between the baseline and the top of the glyph that reaches farthest from the baseline.\n\n## Function\n\n### Synopsis\n\n``` lua\nascent = Font:getAscent( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` ascent`  \nThe ascent of the Font in pixels.\n\n## See Also\n\n- [Font](font \"Font\")\n- [Font:getDescent](font-getdescent \"Font:getDescent\")\n- [Font:getBaseline](font-getbaseline \"Font:getBaseline\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font:getAscent](https://love2d.org/wiki/Font:getAscent)"
- name: Font:getBaseline
  id: font-getbaseline
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Font:getBaseline\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the baseline of the Font. Most scripts share the notion of a baseline: an imaginary horizontal line on which characters rest. In some scripts, parts of glyphs lie below the baseline.\n\n## Function\n\n### Synopsis\n\n``` lua\nbaseline = Font:getBaseline( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` baseline`  \nThe baseline of the Font in pixels.\n\n## See Also\n\n- [Font](font \"Font\")\n- [Font:getAscent](font-getascent \"Font:getAscent\")\n- [Font:getDescent](font-getdescent \"Font:getDescent\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font:getBaseline](https://love2d.org/wiki/Font:getBaseline)"
- name: Font:getDescent
  id: font-getdescent
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Font:getDescent\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the descent of the Font. The descent spans the distance between the baseline and the lowest descending glyph in a typeface.\n\n## Function\n\n### Synopsis\n\n``` lua\ndescent = Font:getDescent( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` descent`  \nThe descent of the Font in pixels.\n\n## See Also\n\n- [Font](font \"Font\")\n- [Font:getAscent](font-getascent \"Font:getAscent\")\n- [Font:getBaseline](font-getbaseline \"Font:getBaseline\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font:getDescent](https://love2d.org/wiki/Font:getDescent)"
- name: Font:getDPIScale
  id: font-getdpiscale
  summary: Available since LÖVE 11.0 This method is not supported in earlier versions
  description: "# Font:getDPIScale\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis method is not supported in earlier versions.\n\nGets the DPI scale factor of the Font.\n\nThe DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the font's glyphs have twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a font with a DPI scale factor of 1.\n\nThe font size of TrueType fonts is scaled internally by the font's specified DPI scale factor. By default, LÖVE uses the [screen's DPI scale factor](love.graphics.getdpiscale \"love.graphics.getDPIScale\") when creating TrueType fonts.\n\n## Function\n\n### Synopsis\n\n``` lua\ndpiscale = Font:getDPIScale( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` dpiscale`  \nThe DPI scale factor of the Font.\n\n## See Also\n\n- [Font](font \"Font\")\n- [love.graphics.newFont](love.graphics.newfont \"love.graphics.newFont\")\n- [love.graphics.getDPIScale](love.graphics.getdpiscale \"love.graphics.getDPIScale\")\n- [Config Files](love.conf \"Config Files\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font:getDPIScale](https://love2d.org/wiki/Font:getDPIScale)"
- name: Font:getFilter
  id: font-getfilter
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Font:getFilter\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the filter mode for a font.\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, mag, anisotropy = Font:getFilter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`FilterMode`](filtermode \"FilterMode\")` min`  \nFilter mode used when minifying the font.\n\n[`FilterMode`](filtermode \"FilterMode\")` mag`  \nFilter mode used when magnifying the font.\n\n[`number`](number \"number\")` anisotropy`  \nMaximum amount of anisotropic filtering used.\n\n## See Also\n\n- [Font](font \"Font\")\n- [FilterMode](filtermode \"FilterMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font:getFilter](https://love2d.org/wiki/Font:getFilter)"
- name: Font:getHeight
  id: font-getheight
  summary: Gets the height of the Font
  description: "# Font:getHeight\n\nGets the height of the Font. The height of the font is the size including any spacing; the height which it will need.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = Font:getHeight( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nThe height of the Font in pixels.\n\n## See Also\n\n- [Font](font \"Font\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font:getHeight](https://love2d.org/wiki/Font:getHeight)"
- name: Font:getLineHeight
  id: font-getlineheight
  summary: Gets the line height
  description: "# Font:getLineHeight\n\nGets the line height.\n\nThis will be the value previously set by [Font:setLineHeight](font-setlineheight \"Font:setLineHeight\"), or `1.0` by default.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = Font:getLineHeight( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nThe current line height.\n\n## See Also\n\n- [Font](font \"Font\")\n- [Font:setLineHeight](font-setlineheight \"Font:setLineHeight\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font:getLineHeight](https://love2d.org/wiki/Font:getLineHeight)"
- name: Font:getWidth
  id: font-getwidth
  summary: Determines the maximum width (accounting for newlines) taken by the given string
  description: "# Font:getWidth\n\nDetermines the maximum width (accounting for newlines) taken by the given string.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth = Font:getWidth( text )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nA string.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the text.\n\n## See Also\n\n- [Font](font \"Font\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font:getWidth](https://love2d.org/wiki/Font:getWidth)"
- name: Font:getWrap
  id: font-getwrap
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Font:getWrap\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets formatting information for text, given a wrap limit.\n\nThis function accounts for newlines correctly (i.e. '\\n').\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nwidth, wrappedtext = Font:getWrap( text, wraplimit )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nThe text that will be wrapped.\n\n[`number`](number \"number\")` wraplimit`  \nThe maximum width in pixels of each line that *text* is allowed before wrapping.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe maximum width of the wrapped text.\n\n[`table`](table \"table\")` wrappedtext`  \nA [sequence](sequence \"sequence\") containing each line of text that was wrapped.\n\n## Function\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nwidth, lines = Font:getWrap( text, wraplimit )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nThe text that would be wrapped.\n\n[`number`](number \"number\")` wraplimit`  \nThe maximum width in pixels of each line that *text* is allowed before wrapping.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe maximum width of the wrapped text.\n\n[`number`](number \"number\")` lines`  \nThe number of lines that the wrapped text will have.\n\n## See Also\n\n- [Font](font \"Font\")\n- [love.graphics.printf](love.graphics.printf \"love.graphics.printf\")\n- [Text:setf](text-setf \"Text:setf\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font:getWrap](https://love2d.org/wiki/Font:getWrap)"
- name: Font:hasGlyphs
  id: font-hasglyphs
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Font:hasGlyphs\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Font can render a character or string.\n\n## Function\n\n### Synopsis\n\n``` lua\nhasglyphs = Font:hasGlyphs( text )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nA UTF-8 encoded unicode string.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` hasglyph`  \nWhether the font can render all the UTF-8 characters in the string.\n\n## Function\n\n### Synopsis\n\n``` lua\nhasglyphs = Font:hasGlyphs( character1, character2, ... )\n```\n\n### Arguments\n\n[`string`](string \"string\")` character1`  \nA unicode character.\n\n[`string`](string \"string\")` character2`  \nAnother unicode character.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` hasglyph`  \nWhether the font can render all the glyphs represented by the characters.\n\n## Function\n\n### Synopsis\n\n``` lua\nhasglyphs = Font:hasGlyphs( codepoint1, codepoint2, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` codepoint1`  \nA unicode codepoint number.\n\n[`number`](number \"number\")` codepoint2`  \nAnother unicode codepoint number.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` hasglyph`  \nWhether the font can render all the glyphs represented by the codepoint numbers.\n\n## See Also\n\n- [Font](font \"Font\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font:hasGlyphs](https://love2d.org/wiki/Font:hasGlyphs)"
- name: Font:setFallbacks
  id: font-setfallbacks
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Font:setFallbacks\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nSets the fallback fonts. When the Font doesn't contain a glyph, it will substitute the glyph from the next subsequent fallback Fonts. This is akin to setting a \"font stack\" in Cascading Style Sheets (CSS).\n\n## Function\n\n### Synopsis\n\n``` lua\nFont:setFallbacks( fallbackfont1, ... )\n```\n\n### Arguments\n\n[`Font`](font \"Font\")` fallbackfont1`  \nThe first fallback Font to use.\n\n[`Font`](font \"Font\")` ...`  \nAdditional fallback Fonts.\n\n### Returns\n\nNothing.\n\n## Notes\n\nIf this is called it should be before [love.graphics.print](love.graphics.print \"love.graphics.print\"), [Font:getWrap](font-getwrap \"Font:getWrap\"), and other Font methods which use glyph positioning information are called.\n\nEvery fallback Font must be created from the same file type as the primary Font. For example, a Font created from a .ttf file can only use fallback Fonts that were created from .ttf files.\n\n## See Also\n\n- [Font](font \"Font\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font:setFallbacks](https://love2d.org/wiki/Font:setFallbacks)"
- name: Font:setFilter
  id: font-setfilter
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Font:setFilter\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the filter mode for a font.\n\n## Function\n\n### Synopsis\n\n``` lua\nFont:setFilter( min, mag, anisotropy )\n```\n\n### Arguments\n\n[`FilterMode`](filtermode \"FilterMode\")` min`  \nHow to scale a font down.\n\n[`FilterMode`](filtermode \"FilterMode\")` mag`  \nHow to scale a font up.\n\n[`number`](number \"number\")` anisotropy (1)`  \nMaximum amount of anisotropic filtering used.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Font](font \"Font\")\n- [FilterMode](filtermode \"FilterMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font:setFilter](https://love2d.org/wiki/Font:setFilter)"
- name: Font:setLineHeight
  id: font-setlineheight
  summary: Sets the line height
  description: "# Font:setLineHeight\n\nSets the line height.\n\nWhen rendering the font in lines the actual height will be determined by the line height multiplied by the height of the font. The default is `1.0`.\n\n## Function\n\n### Synopsis\n\n``` lua\nFont:setLineHeight( height )\n```\n\n### Arguments\n\n[`number`](number \"number\")` height`  \nThe new line height.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Font](font \"Font\")\n- [Font:getLineHeight](font-getlineheight \"Font:getLineHeight\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Font:setLineHeight](https://love2d.org/wiki/Font:setLineHeight)"
- name: FontData
  id: fontdata
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.8.0 This type is not supported in earlier or later versions
  description: "# FontData\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis type is not supported in earlier or later versions.\n\nA FontData represents a font, containing the font Rasterizer and its glyphs.\n\n## Constructors\n\n|                                                                        |                         |       |       |\n|------------------------------------------------------------------------|-------------------------|-------|-------|\n| [love.font.newFontData](love.font.newfontdata \"love.font.newFontData\") | Creates a new FontData. | 0.7.0 | 0.8.0 |\n\n## Functions\n\n|                                                               |                                                  |       |     |\n|---------------------------------------------------------------|--------------------------------------------------|-------|-----|\n| [Data:clone](data-clone \"Data:clone\")                         | Creates a new copy of the Data object.           | 11.0  |     |\n| [Data:getFFIPointer](data-getffipointer \"Data:getFFIPointer\") | Gets an FFI pointer to the Data.                 | 11.3  |     |\n| [Data:getPointer](data-getpointer \"Data:getPointer\")          | Gets a pointer to the Data.                      |       |     |\n| [Data:getSize](data-getsize \"Data:getSize\")                   | Gets the [Data](data \"Data\")'s size in bytes.    |       |     |\n| [Data:getString](data-getstring \"Data:getString\")             | Gets the full Data as a string.                  | 0.9.0 |     |\n| [Object:release](object-release \"Object:release\")             | Immediately destroys the object's Lua reference. | 11.0  |     |\n| [Object:type](object-type \"Object:type\")                      | Gets the type of the object as a string.         |       |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                | Checks whether an object is of a certain type.   |       |     |\n\n## Supertypes\n\n- [Data](data \"Data\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.font](love.font \"love.font\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FontData](https://love2d.org/wiki/FontData)"
- name: Framebuffer
  id: framebuffer
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.8.0 It has been renamed to Canvas
  description: "# Framebuffer\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed to [Canvas](canvas \"Canvas\").\n\nA Framebuffer is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\".\n\nBy drawing things that do not change position often (such as background items) to the Framebuffer, and then drawing the entire Framebuffer instead of each item, you can reduce the number of draw operations performed each frame.\n\n## Constructors\n\n|                                                                                             |                                |       |       |\n|---------------------------------------------------------------------------------------------|--------------------------------|-------|-------|\n| [love.graphics.newFramebuffer](love.graphics.newframebuffer \"love.graphics.newFramebuffer\") | Creates a new **Framebuffer**. | 0.7.0 | 0.8.0 |\n\n## Functions\n\n|                                                                                 |                                                  |       |       |\n|---------------------------------------------------------------------------------|--------------------------------------------------|-------|-------|\n| [Framebuffer:getImageData](framebuffer-getimagedata \"Framebuffer:getImageData\") | Get stored [ImageData](imagedata \"ImageData\").   | 0.7.0 | 0.8.0 |\n| [Framebuffer:getWrap](framebuffer-getwrap \"Framebuffer:getWrap\")                | Gets the wrapping properties of a Framebuffer.   | 0.7.2 | 0.8.0 |\n| [Framebuffer:renderTo](framebuffer-renderto \"Framebuffer:renderTo\")             | Render to a framebuffer using a function.        | 0.7.0 | 0.8.0 |\n| [Framebuffer:setWrap](framebuffer-setwrap \"Framebuffer:setWrap\")                | Sets the wrapping properties of a Framebuffer.   | 0.7.2 | 0.8.0 |\n| [Object:release](object-release \"Object:release\")                               | Immediately destroys the object's Lua reference. | 11.0  |       |\n| [Object:type](object-type \"Object:type\")                                        | Gets the type of the object as a string.         |       |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                  | Checks whether an object is of a certain type.   |       |       |\n\n## Supertypes\n\n- [Drawable](drawable \"Drawable\")\n- [Object](object \"Object\")\n\n## Examples\n\n### sample from the forum\n\n[http://love2d.org/forums/viewtopic.php?f=4&t=2136&hilit=Framebuffer&start=20](https://love2d.org/forums/viewtopic.php?f=4&t=2136&hilit=Framebuffer&start=20)\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.newFramebuffer](love.graphics.newframebuffer \"love.graphics.newFramebuffer\")\n- [love.graphics.setRenderTarget](love.graphics.setrendertarget \"love.graphics.setRenderTarget\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Framebuffer](https://love2d.org/wiki/Framebuffer)"
- name: Framebuffer:getImageData
  id: framebuffer-getimagedata
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Framebuffer:getImageData\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed to [Canvas:getImageData](canvas-getimagedata \"Canvas:getImageData\").\n\nReturns the image data stored in the [Framebuffer](framebuffer \"Framebuffer\"). Think of it as a screenshot of the hidden screen that is the framebuffer.\n\n## Function\n\n### Synopsis\n\n``` lua\ndata = Framebuffer:getImageData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` data`  \nThe image data stored in the framebuffer.\n\n## See Also\n\n- [Framebuffer](framebuffer \"Framebuffer\")\n- [love.graphics.newScreenshot](love.graphics.newscreenshot \"love.graphics.newScreenshot\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Framebuffer:getImageData](https://love2d.org/wiki/Framebuffer:getImageData)"
- name: Framebuffer:getWrap
  id: framebuffer-getwrap
  summary: Available since LÖVE 0.7.2 This function is not supported in earlier versions
  description: "# Framebuffer:getWrap\n\n**Available since LÖVE [0.7.2](https://love2d.org/wiki/0.7.2 \"0.7.2\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed to [Canvas:getWrap](canvas-getwrap \"Canvas:getWrap\").\n\nGets the wrapping properties of a Framebuffer.\n\nThis functions returns the currently set horizontal and vertical [wrapping modes](wrapmode \"WrapMode\") for the framebuffer.\n\n## Function\n\n### Synopsis\n\n``` lua\nhoriz, vert = Framebuffer:getWrap( )\n```\n\n### Arguments\n\nNone\n\n### Returns\n\n[`WrapMode`](wrapmode \"WrapMode\")` horiz`  \nHorizontal wrapping mode of the Framebuffer.\n\n[`WrapMode`](wrapmode \"WrapMode\")` vert`  \nVertical wrapping mode of the Framebuffer.\n\n## See Also\n\n- [Framebuffer](framebuffer \"Framebuffer\")\n- [WrapMode](wrapmode \"WrapMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Framebuffer:getWrap](https://love2d.org/wiki/Framebuffer:getWrap)"
- name: Framebuffer:renderTo
  id: framebuffer-renderto
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Framebuffer:renderTo\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed to [Canvas:renderTo](canvas-renderto \"Canvas:renderTo\").\n\nRender to the [Framebuffer](framebuffer \"Framebuffer\") using a function.\n\n## Function\n\n### Synopsis\n\n``` lua\nFramebuffer:renderTo( func )\n```\n\n### Arguments\n\n[`function`](function \"function\")` func`  \nA function performing drawing operations.\n\n### Returns\n\nNothing.\n\n## Notes\n\nThis function will clear the target framebuffer.\n\nThis is a shortcut to [love.graphics.setRenderTarget](love.graphics.setrendertarget \"love.graphics.setRenderTarget\"):\n\n``` lua\nframebuffer:renderTo( func )\n```\n\nis the same as\n\n``` lua\nlove.graphics.setRenderTarget( framebuffer )\nfunc()\nlove.graphics.setRenderTarget()\n```\n\n## Examples\n\n### Using an anonymous function for drawing to a Framebuffer\n\n``` lua\nframebuffer:renderTo(function()\n    love.graphics.draw(image1, 0,0)\n    love.graphics.draw(image2, 100,100)\nend)\n```\n\n## See Also\n\n- [Framebuffer](framebuffer \"Framebuffer\")\n- [love.graphics.setRenderTarget](love.graphics.setrendertarget \"love.graphics.setRenderTarget\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Framebuffer:renderTo](https://love2d.org/wiki/Framebuffer:renderTo)"
- name: Framebuffer:setWrap
  id: framebuffer-setwrap
  summary: Available since LÖVE 0.7.2 This function is not supported in earlier versions
  description: "# Framebuffer:setWrap\n\n**Available since LÖVE [0.7.2](https://love2d.org/wiki/0.7.2 \"0.7.2\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed to [Canvas:setWrap](canvas-setwrap \"Canvas:setWrap\").\n\nSets the wrapping properties of a Framebuffer.\n\nThis function sets the way the edges of a Framebuffer are treated if it is scaled or rotated. If the WrapMode is set to 'clamp', the edge will not be interpolated. If set to 'repeat', the edge will be interpolated with the pixels on the opposing side of the framebuffer.\n\n## Function\n\n### Synopsis\n\n``` lua\nFramebuffer:setWrap( horiz, vert )\n```\n\n### Arguments\n\n[`WrapMode`](wrapmode \"WrapMode\")` horiz`  \nHorizontal wrapping mode of the framebuffer.\n\n[`WrapMode`](wrapmode \"WrapMode\")` vert`  \nVertical wrapping mode of the framebuffer.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Framebuffer](framebuffer \"Framebuffer\")\n- [WrapMode](wrapmode \"WrapMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Framebuffer:setWrap](https://love2d.org/wiki/Framebuffer:setWrap)"
- name: FrictionJoint
  id: frictionjoint
  summary: Available since LÖVE 0.8.0 This type is not supported in earlier versions
  description: "# FrictionJoint\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis type is not supported in earlier versions.\n\nA FrictionJoint applies friction to a body.\n\n## Constructors\n\n|                                                                                                |                                                 |       |     |\n|------------------------------------------------------------------------------------------------|-------------------------------------------------|-------|-----|\n| [love.physics.newFrictionJoint](love.physics.newfrictionjoint \"love.physics.newFrictionJoint\") | A **FrictionJoint** applies friction to a body. | 0.8.0 |     |\n\n## Functions\n\n|                                                                                       |                                                                   |       |       |\n|---------------------------------------------------------------------------------------|-------------------------------------------------------------------|-------|-------|\n| [FrictionJoint:getMaxForce](frictionjoint-getmaxforce \"FrictionJoint:getMaxForce\")    | Gets the maximum friction force in Newtons.                       | 0.8.0 |       |\n| [FrictionJoint:getMaxTorque](frictionjoint-getmaxtorque \"FrictionJoint:getMaxTorque\") | Gets the maximum friction torque in Newton-meters.                | 0.8.0 |       |\n| [FrictionJoint:setMaxForce](frictionjoint-setmaxforce \"FrictionJoint:setMaxForce\")    | Sets the maximum friction force in Newtons.                       | 0.8.0 |       |\n| [FrictionJoint:setMaxTorque](frictionjoint-setmaxtorque \"FrictionJoint:setMaxTorque\") | Sets the maximum friction torque in Newton-meters.                | 0.8.0 |       |\n| [Joint:destroy](joint-destroy \"Joint:destroy\")                                        | Explicitly destroys the Joint.                                    |       |       |\n| [Joint:getAnchors](joint-getanchors \"Joint:getAnchors\")                               | Get the anchor points of the joint.                               |       |       |\n| [Joint:getBodies](joint-getbodies \"Joint:getBodies\")                                  | Gets the [bodies](body \"Body\") that the Joint is attached to.     | 0.9.2 |       |\n| [Joint:getCollideConnected](joint-getcollideconnected \"Joint:getCollideConnected\")    | Gets whether the connected Bodies collide.                        |       |       |\n| [Joint:getReactionForce](joint-getreactionforce \"Joint:getReactionForce\")             | Returns the reaction force on the second body.                    |       |       |\n| [Joint:getReactionTorque](joint-getreactiontorque \"Joint:getReactionTorque\")          | Returns the reaction torque on the second body.                   |       |       |\n| [Joint:getType](joint-gettype \"Joint:getType\")                                        | Gets a string representing the type.                              |       |       |\n| [Joint:getUserData](joint-getuserdata \"Joint:getUserData\")                            | Returns the Lua value associated with this Joint.                 | 0.9.2 |       |\n| [Joint:isDestroyed](joint-isdestroyed \"Joint:isDestroyed\")                            | Gets whether the Joint is destroyed.                              | 0.9.2 |       |\n| [Joint:setCollideConnected](joint-setcollideconnected \"Joint:setCollideConnected\")    | Sets whether the connected Bodies should collide with each other. |       | 0.8.0 |\n| [Joint:setUserData](joint-setuserdata \"Joint:setUserData\")                            | Associates a Lua value with the Joint.                            | 0.9.2 |       |\n\n## Supertypes\n\n- [Joint](joint \"Joint\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FrictionJoint](https://love2d.org/wiki/FrictionJoint)"
- name: FrictionJoint:getMaxForce
  id: frictionjoint-getmaxforce
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# FrictionJoint:getMaxForce\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nGets the maximum friction force in Newtons.\n\n## Function\n\n### Synopsis\n\n``` lua\nforce = FrictionJoint:getMaxForce( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` force`  \nMaximum force in Newtons.\n\n## See Also\n\n- [FrictionJoint](frictionjoint \"FrictionJoint\")\n- [FrictionJoint:setMaxForce](frictionjoint-setmaxforce \"FrictionJoint:setMaxForce\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FrictionJoint:getMaxForce](https://love2d.org/wiki/FrictionJoint:getMaxForce)"
- name: FrictionJoint:getMaxTorque
  id: frictionjoint-getmaxtorque
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# FrictionJoint:getMaxTorque\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nGets the maximum friction torque in Newton-meters.\n\n## Function\n\n### Synopsis\n\n``` lua\ntorque = FrictionJoint:getMaxTorque( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` torque`  \nMaximum torque in Newton-meters.\n\n## See Also\n\n- [FrictionJoint](frictionjoint \"FrictionJoint\")\n- [FrictionJoint:setMaxTorque](frictionjoint-setmaxtorque \"FrictionJoint:setMaxTorque\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FrictionJoint:getMaxTorque](https://love2d.org/wiki/FrictionJoint:getMaxTorque)"
- name: FrictionJoint:setMaxForce
  id: frictionjoint-setmaxforce
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# FrictionJoint:setMaxForce\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nSets the maximum friction force in Newtons.\n\n## Function\n\n### Synopsis\n\n``` lua\nFrictionJoint:setMaxForce( force )\n```\n\n### Arguments\n\n[`number`](number \"number\")` maxForce`  \nMax force in Newtons.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [FrictionJoint](frictionjoint \"FrictionJoint\")\n- [FrictionJoint:getMaxForce](frictionjoint-getmaxforce \"FrictionJoint:getMaxForce\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FrictionJoint:setMaxForce](https://love2d.org/wiki/FrictionJoint:setMaxForce)"
- name: FrictionJoint:setMaxTorque
  id: frictionjoint-setmaxtorque
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# FrictionJoint:setMaxTorque\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nSets the maximum friction torque in Newton-meters.\n\n## Function\n\n### Synopsis\n\n``` lua\nFrictionJoint:setMaxTorque( torque )\n```\n\n### Arguments\n\n[`number`](number \"number\")` torque`  \nMaximum torque in Newton-meters.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [FrictionJoint](frictionjoint \"FrictionJoint\")\n- [FrictionJoint:getMaxTorque](frictionjoint-getmaxtorque \"FrictionJoint:getMaxTorque\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FrictionJoint:setMaxTorque](https://love2d.org/wiki/FrictionJoint:setMaxTorque)"
- name: FullscreenType
  id: fullscreentype
  summary: Available since LÖVE 0.9.0 This enum is not supported in earlier versions
  description: "# FullscreenType\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in earlier versions.\n\nTypes of fullscreen modes.\n\n## Constants\n\ndesktop  \nSometimes known as [borderless fullscreen windowed](http://pcgamingwiki.com/wiki/Borderless_fullscreen_windowed) mode. A borderless screen-sized window is created which sits on top of all desktop UI elements. The window is automatically resized to match the dimensions of the desktop, and its size cannot be changed.\n\nThis constant has been renamed from **normal**\n\nexclusive Available since 0.10.0  \nStandard exclusive-fullscreen mode. Changes the display mode (actual resolution) of the monitor.\n\n  \n\nThis constant has been renamed to **exclusive**\n\nnormal Removed in 0.10.0  \nStandard exclusive-fullscreen mode. Changes the display mode (actual resolution) of the monitor.\n\n## Notes\n\nIn exclusive fullscreen mode, if a window size is used which does not match one of the monitor's supported display modes, the window will be resized to the next largest display mode.\n\nExclusive fullscreen mode is sometimes avoided by users because it can cause issues in some window managers and with multi-monitor setups. In OS X it prevents switching to a different program until fullscreen mode is exited. The \"desktop\" fullscreen mode generally avoids these issues.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n- [love.window.setFullscreen](love.window.setfullscreen \"love.window.setFullscreen\")\n- [love.resize](love.resize \"love.resize\")\n- [Config Files](love.conf \"Config Files\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/FullscreenType](https://love2d.org/wiki/FullscreenType)"
- name: function
  id: function
  summary: Functions in lua
  description: "# function\n\n[Functions in lua](https://www.lua.org/manual/5.1/manual.html#2.5.8).\n\n``` lua\nfunction foo()\nend\n```\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/function](https://love2d.org/wiki/function)"
- name: GamepadAxis
  id: gamepadaxis
  summary: Available since LÖVE 0.9.0 This enum is not supported in earlier versions
  description: "# GamepadAxis\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in earlier versions.\n\nVirtual gamepad axes.\n\n## Constants\n\nleftx  \nThe x-axis of the left thumbstick.\n\nlefty  \nThe y-axis of the left thumbstick.\n\nrightx  \nThe x-axis of the right thumbstick.\n\nrighty  \nThe y-axis of the right thumbstick.\n\ntriggerleft  \nLeft analog trigger.\n\ntriggerright  \nRight analog trigger.\n\n## Notes\n\nThe physical locations of the virtual gamepad axes for a [Joystick](joystick \"Joystick\") correspond as closely as possible to the layout of the axes on a standard Xbox 360 controller.\n\n[](https://love2d.org/wiki/File:360_controller.png)\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n- [Joystick](joystick \"Joystick\")\n- [Joystick:getGamepadAxis](joystick-getgamepadaxis \"Joystick:getGamepadAxis\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GamepadAxis](https://love2d.org/wiki/GamepadAxis)"
- name: GamepadButton
  id: gamepadbutton
  summary: Available since LÖVE 0.9.0 This enum is not supported in earlier versions
  description: "# GamepadButton\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in earlier versions.\n\nVirtual gamepad buttons.\n\n## Constants\n\na  \nBottom face button (A).\n\nb  \nRight face button (B).\n\nx  \nLeft face button (X).\n\ny  \nTop face button (Y).\n\nback  \nBack button.\n\nguide  \nGuide button.\n\nstart  \nStart button.\n\nleftstick  \nLeft stick click button.\n\nrightstick  \nRight stick click button.\n\nleftshoulder  \nLeft bumper.\n\nrightshoulder  \nRight bumper.\n\ndpup  \nD-pad up.\n\ndpdown  \nD-pad down.\n\ndpleft  \nD-pad left.\n\ndpright  \nD-pad right.\n\n## Notes\n\nThe physical locations of the virtual gamepad buttons for a [Joystick](joystick \"Joystick\") correspond as closely as possible to the layout of the buttons on a standard Xbox 360 controller.\n\n[](https://love2d.org/wiki/File:360_controller.png)\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n- [Joystick](joystick \"Joystick\")\n- [Joystick:isGamepadDown](joystick-isgamepaddown \"Joystick:isGamepadDown\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GamepadButton](https://love2d.org/wiki/GamepadButton)"
- name: GearJoint
  id: gearjoint
  summary: Keeps bodies together in such a way that they act like gears
  description: "# GearJoint\n\nKeeps bodies together in such a way that they act like gears.\n\n[](https://love2d.org/wiki/File:physicsJointGear.png)\n\n## Constructors\n\n|                                                                                    |                                               |     |     |\n|------------------------------------------------------------------------------------|-----------------------------------------------|-----|-----|\n| [love.physics.newGearJoint](love.physics.newgearjoint \"love.physics.newGearJoint\") | Create a **GearJoint** connecting two Joints. |     |     |\n\n## Functions\n\n|                                                                                    |                                                                   |       |       |\n|------------------------------------------------------------------------------------|-------------------------------------------------------------------|-------|-------|\n| [GearJoint:getJoints](gearjoint-getjoints \"GearJoint:getJoints\")                   | Get the Joints connected by this GearJoint.                       | 0.9.2 |       |\n| [GearJoint:getRatio](gearjoint-getratio \"GearJoint:getRatio\")                      | Get the ratio of a gear joint.                                    |       |       |\n| [GearJoint:setRatio](gearjoint-setratio \"GearJoint:setRatio\")                      | Set the ratio of a gear joint.                                    |       |       |\n| [Joint:destroy](joint-destroy \"Joint:destroy\")                                     | Explicitly destroys the Joint.                                    |       |       |\n| [Joint:getAnchors](joint-getanchors \"Joint:getAnchors\")                            | Get the anchor points of the joint.                               |       |       |\n| [Joint:getBodies](joint-getbodies \"Joint:getBodies\")                               | Gets the [bodies](body \"Body\") that the Joint is attached to.     | 0.9.2 |       |\n| [Joint:getCollideConnected](joint-getcollideconnected \"Joint:getCollideConnected\") | Gets whether the connected Bodies collide.                        |       |       |\n| [Joint:getReactionForce](joint-getreactionforce \"Joint:getReactionForce\")          | Returns the reaction force on the second body.                    |       |       |\n| [Joint:getReactionTorque](joint-getreactiontorque \"Joint:getReactionTorque\")       | Returns the reaction torque on the second body.                   |       |       |\n| [Joint:getType](joint-gettype \"Joint:getType\")                                     | Gets a string representing the type.                              |       |       |\n| [Joint:getUserData](joint-getuserdata \"Joint:getUserData\")                         | Returns the Lua value associated with this Joint.                 | 0.9.2 |       |\n| [Joint:isDestroyed](joint-isdestroyed \"Joint:isDestroyed\")                         | Gets whether the Joint is destroyed.                              | 0.9.2 |       |\n| [Joint:setCollideConnected](joint-setcollideconnected \"Joint:setCollideConnected\") | Sets whether the connected Bodies should collide with each other. |       | 0.8.0 |\n| [Joint:setUserData](joint-setuserdata \"Joint:setUserData\")                         | Associates a Lua value with the Joint.                            | 0.9.2 |       |\n\n## Supertypes\n\n- [Joint](joint \"Joint\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GearJoint](https://love2d.org/wiki/GearJoint)"
- name: GearJoint:getJoints
  id: gearjoint-getjoints
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# GearJoint:getJoints\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGet the Joints connected by this GearJoint.\n\n## Function\n\n### Synopsis\n\n``` lua\njoint1, joint2 = GearJoint:getJoints( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Joint`](joint \"Joint\")` joint1`  \nThe first connected Joint.\n\n[`Joint`](joint \"Joint\")` joint2`  \nThe second connected Joint.\n\n## See Also\n\n- [GearJoint](gearjoint \"GearJoint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GearJoint:getJoints](https://love2d.org/wiki/GearJoint:getJoints)"
- name: GearJoint:getRatio
  id: gearjoint-getratio
  summary: Get the ratio of a gear joint
  description: "# GearJoint:getRatio\n\nGet the ratio of a [gear joint.](gearjoint \"GearJoint\")\n\n## Function\n\n### Synopsis\n\n``` lua\nratio = GearJoint:getRatio( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` ratio`  \nThe ratio of the joint.\n\n## See Also\n\n- [GearJoint](gearjoint \"GearJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GearJoint:getRatio](https://love2d.org/wiki/GearJoint:getRatio)"
- name: GearJoint:setRatio
  id: gearjoint-setratio
  summary: Set the ratio of a gear joint
  description: "# GearJoint:setRatio\n\nSet the ratio of a [gear joint.](gearjoint \"GearJoint\")\n\n## Function\n\n### Synopsis\n\n``` lua\nGearJoint:setRatio( ratio )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ratio`  \nThe new ratio of the joint.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [GearJoint](gearjoint \"GearJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GearJoint:setRatio](https://love2d.org/wiki/GearJoint:setRatio)"
- name: GlyphData
  id: glyphdata
  summary: Available since LÖVE 0.7.0 This type is not supported in earlier versions
  description: "# GlyphData\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis type is not supported in earlier versions.\n\nA GlyphData represents a drawable symbol of a font Rasterizer.\n\n## Constructors\n\n|                                                                              |                                       |       |     |\n|------------------------------------------------------------------------------|---------------------------------------|-------|-----|\n| [Rasterizer:getGlyphData](rasterizer-getglyphdata \"Rasterizer:getGlyphData\") | Gets glyph data of a specified glyph. | 0.7.0 |     |\n| [love.font.newGlyphData](love.font.newglyphdata \"love.font.newGlyphData\")    | Creates a new GlyphData.              | 0.7.0 |     |\n\n## Functions\n\n|                                                                                 |                                                  |       |     |\n|---------------------------------------------------------------------------------|--------------------------------------------------|-------|-----|\n| [Data:clone](data-clone \"Data:clone\")                                           | Creates a new copy of the Data object.           | 11.0  |     |\n| [Data:getFFIPointer](data-getffipointer \"Data:getFFIPointer\")                   | Gets an FFI pointer to the Data.                 | 11.3  |     |\n| [Data:getPointer](data-getpointer \"Data:getPointer\")                            | Gets a pointer to the Data.                      |       |     |\n| [Data:getSize](data-getsize \"Data:getSize\")                                     | Gets the [Data](data \"Data\")'s size in bytes.    |       |     |\n| [Data:getString](data-getstring \"Data:getString\")                               | Gets the full Data as a string.                  | 0.9.0 |     |\n| [GlyphData:getAdvance](glyphdata-getadvance \"GlyphData:getAdvance\")             | Gets glyph advance.                              | 0.7.0 |     |\n| [GlyphData:getBearing](glyphdata-getbearing \"GlyphData:getBearing\")             | Gets glyph bearing.                              | 0.7.0 |     |\n| [GlyphData:getBoundingBox](glyphdata-getboundingbox \"GlyphData:getBoundingBox\") | Gets glyph bounding box.                         | 0.7.0 |     |\n| [GlyphData:getDimensions](glyphdata-getdimensions \"GlyphData:getDimensions\")    | Gets glyph dimensions.                           | 0.7.0 |     |\n| [GlyphData:getFormat](glyphdata-getformat \"GlyphData:getFormat\")                | Gets glyph pixel format.                         | 11.0  |     |\n| [GlyphData:getGlyph](glyphdata-getglyph \"GlyphData:getGlyph\")                   | Gets glyph number.                               | 0.7.0 |     |\n| [GlyphData:getGlyphString](glyphdata-getglyphstring \"GlyphData:getGlyphString\") | Gets glyph string.                               | 0.7.0 |     |\n| [GlyphData:getHeight](glyphdata-getheight \"GlyphData:getHeight\")                | Gets glyph height.                               | 0.7.0 |     |\n| [GlyphData:getWidth](glyphdata-getwidth \"GlyphData:getWidth\")                   | Gets glyph width.                                | 0.7.0 |     |\n| [Object:release](object-release \"Object:release\")                               | Immediately destroys the object's Lua reference. | 11.0  |     |\n| [Object:type](object-type \"Object:type\")                                        | Gets the type of the object as a string.         |       |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                  | Checks whether an object is of a certain type.   |       |     |\n\n## Supertypes\n\n- [Data](data \"Data\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.font](love.font \"love.font\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GlyphData](https://love2d.org/wiki/GlyphData)"
- name: GlyphData:getAdvance
  id: glyphdata-getadvance
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# GlyphData:getAdvance\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets glyph advance.\n\n## Function\n\n### Synopsis\n\n``` lua\nadvance = GlyphData:getAdvance()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` advance`  \nGlyph advance.\n\n## See Also\n\n- [GlyphData](glyphdata \"GlyphData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GlyphData:getAdvance](https://love2d.org/wiki/GlyphData:getAdvance)"
- name: GlyphData:getBearing
  id: glyphdata-getbearing
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# GlyphData:getBearing\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets glyph bearing.\n\n## Function\n\n### Synopsis\n\n``` lua\nbx, by = GlyphData:getBearing()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` bx`  \nGlyph bearing X.\n\n[`number`](number \"number\")` by`  \nGlyph bearing Y.\n\n## See Also\n\n- [GlyphData](glyphdata \"GlyphData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GlyphData:getBearing](https://love2d.org/wiki/GlyphData:getBearing)"
- name: GlyphData:getBoundingBox
  id: glyphdata-getboundingbox
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# GlyphData:getBoundingBox\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets glyph bounding box.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y, width, height = GlyphData:getBoundingBox()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nGlyph position x.\n\n[`number`](number \"number\")` y`  \nGlyph position y.\n\n[`number`](number \"number\")` width`  \nGlyph width.\n\n[`number`](number \"number\")` height`  \nGlyph height.\n\n## See Also\n\n- [GlyphData](glyphdata \"GlyphData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GlyphData:getBoundingBox](https://love2d.org/wiki/GlyphData:getBoundingBox)"
- name: GlyphData:getDimensions
  id: glyphdata-getdimensions
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# GlyphData:getDimensions\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets glyph dimensions.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth, height = GlyphData:getDimensions()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nGlyph width.\n\n[`number`](number \"number\")` height`  \nGlyph height.\n\n## See Also\n\n- [GlyphData](glyphdata \"GlyphData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GlyphData:getDimensions](https://love2d.org/wiki/GlyphData:getDimensions)"
- name: GlyphData:getFormat
  id: glyphdata-getformat
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# GlyphData:getFormat\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets glyph pixel format.\n\n## Function\n\n### Synopsis\n\n``` lua\nformat = GlyphData:getFormat()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`PixelFormat`](pixelformat \"PixelFormat\")` format`  \nGlyph pixel format.\n\n## See Also\n\n- [GlyphData](glyphdata \"GlyphData\")\n- [PixelFormat](pixelformat \"PixelFormat\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GlyphData:getFormat](https://love2d.org/wiki/GlyphData:getFormat)"
- name: GlyphData:getGlyph
  id: glyphdata-getglyph
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# GlyphData:getGlyph\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets glyph number.\n\n## Function\n\n### Synopsis\n\n``` lua\nglyph = GlyphData:getGlyph()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` glyph`  \nGlyph number.\n\n## See Also\n\n- [GlyphData](glyphdata \"GlyphData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GlyphData:getGlyph](https://love2d.org/wiki/GlyphData:getGlyph)"
- name: GlyphData:getGlyphString
  id: glyphdata-getglyphstring
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# GlyphData:getGlyphString\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets glyph string.\n\n## Function\n\n### Synopsis\n\n``` lua\nglyph = GlyphData:getGlyphString()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` glyph`  \nGlyph string.\n\n## See Also\n\n- [GlyphData](glyphdata \"GlyphData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GlyphData:getGlyphString](https://love2d.org/wiki/GlyphData:getGlyphString)"
- name: GlyphData:getHeight
  id: glyphdata-getheight
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# GlyphData:getHeight\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets glyph height.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = GlyphData:getHeight()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nGlyph height.\n\n## See Also\n\n- [GlyphData](glyphdata \"GlyphData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GlyphData:getHeight](https://love2d.org/wiki/GlyphData:getHeight)"
- name: GlyphData:getWidth
  id: glyphdata-getwidth
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# GlyphData:getWidth\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets glyph width.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth = GlyphData:getWidth()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nGlyph width.\n\n## See Also\n\n- [GlyphData](glyphdata \"GlyphData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GlyphData:getWidth](https://love2d.org/wiki/GlyphData:getWidth)"
- name: GraphicsFeature
  id: graphicsfeature
  summary: Available since LÖVE 0.8.0 This enum is not supported in earlier versions
  description: "# GraphicsFeature\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis enum is not supported in earlier versions.\n\nGraphics features that can be checked for with [love.graphics.getSupported](love.graphics.getsupported \"love.graphics.getSupported\").\n\n## Constants\n\nclampzero Available since 0.10.0  \nWhether the \"clampzero\" [WrapMode](wrapmode \"WrapMode\") is supported.\n\nlighten Available since 0.10.0  \nWhether the \"lighten\" and \"darken\" [BlendModes](blendmode \"BlendMode\") are supported.\n\nmulticanvasformats Available since 0.10.0  \nWhether multiple [Canvases](canvas \"Canvas\") with different [formats](canvasformat \"CanvasFormat\") can be used in the same [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\") call.\n\n### Notes\n\n`clampzero` is supported on all desktop systems, but only some mobile devices. If it's not supported and it's attempted to be set, the \"clamp\" wrap mode will automatically be used instead.\n\n`lighten` is supported on all desktop systems, and OpenGL ES 3-capable mobile devices.\n\n`multicanvasformats` is supported on OpenGL 3-capable desktop systems, and OpenGL ES 3-capable mobile devices.\n\n  \n\nglsl3 Available since 11.0  \nWhether GLSL 3 [Shaders](shader \"Shader\") can be used.\n\ninstancing Available since 11.0  \nWhether [mesh instancing](love.graphics.drawinstanced \"love.graphics.drawInstanced\") is supported.\n\nfullnpot Available since 11.0  \nWhether textures with non-power-of-two dimensions can use [mipmapping](texture-setmipmapfilter \"Texture:setMipmapFilter\") and the 'repeat' [WrapMode](wrapmode \"WrapMode\").\n\npixelshaderhighp Available since 11.0  \nWhether pixel shaders can use \"highp\" 32 bit floating point numbers (as opposed to just 16 bit or lower precision).\n\nshaderderivatives Available since 11.0  \nWhether shaders can use the `dFdx`, `dFdy`, and `fwidth` functions for computing derivatives.\n\n### Notes\n\n`glsl3` and `instancing` are supported on OpenGL 3 and OpenGL ES 3-capable systems.\n\n`instancing` is also supported on some older systems that don't support GLSL 3, but [vertex attribute-based](mesh-attachattribute \"Mesh:attachAttribute\") instancing must be used in that case (instead of `love_InstanceID` in a GLSL 3 shader).\n\n`fullnpot`, `pixelshaderhighp`, and `shaderderivatives` are supported on all desktop systems and most mobile systems, except for some older OpenGL ES 2 devices.\n\n  \n\ncanvas Removed in 0.10.0  \nSupport for [Canvas](canvas \"Canvas\").\n\nnpot Removed in 0.10.0  \nSupport for textures with non-power-of-two sizes. See [PO2 Syndrome](https://love2d.org/wiki/PO2_Syndrome \"PO2 Syndrome\").\n\nsubtractive Removed in 0.10.0  \nSupport for the subtractive [blend mode](blendmode \"BlendMode\").\n\n  \n\nshader Available since 0.9.0 and removed in LÖVE 0.10.0  \nSupport for [Shaders](shader \"Shader\").\n\nhdrcanvas Available since 0.9.0 and removed in LÖVE 0.10.0  \nSupport for HDR [Canvases](canvas \"Canvas\"). Use [love.graphics.getCanvasFormats](love.graphics.getcanvasformats \"love.graphics.getCanvasFormats\") instead.\n\nmulticanvas Available since 0.9.0 and removed in LÖVE 0.10.0  \nSupport for simultaneous rendering to at least 4 [canvases](canvas \"Canvas\") at once, with [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\"). Use [love.graphics.getSystemLimits](love.graphics.getsystemlimits \"love.graphics.getSystemLimits\") instead.\n\nmipmap Available since 0.9.0 and removed in LÖVE 0.10.0  \nSupport for Mipmaps.\n\ndxt Available since 0.9.0 and removed in LÖVE 0.10.0  \nSupport for DXT compressed images (see [CompressedFormat](compressedformat \"CompressedFormat\").) Use [love.graphics.getCompressedImageFormats](love.graphics.getcompressedimageformats \"love.graphics.getCompressedImageFormats\") instead.\n\nbc5 Available since 0.9.0 and removed in LÖVE 0.10.0  \nSupport for BC4 and BC5 compressed images. Use [love.graphics.getCompressedImageFormats](love.graphics.getcompressedimageformats \"love.graphics.getCompressedImageFormats\") instead.\n\n  \n\nUse [love.graphics.isGammaCorrect](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") or [love.graphics.getCanvasFormats](love.graphics.getcanvasformats \"love.graphics.getCanvasFormats\") instead\n\nsrgb Available since 0.9.1 and removed in LÖVE 0.10.0  \nSupport for gamma-correct rendering with the `srgb` window flag in [love.window.setMode](love.window.setmode \"love.window.setMode\"), and the \"srgb\" [TextureFormat](textureformat \"TextureFormat\") for [Canvases](love.graphics.newcanvas \"love.graphics.newCanvas\") and [Images](love.graphics.newimage \"love.graphics.newImage\").\n\n  \n\npixeleffect Removed in 0.9.0  \nSupport for [PixelEffects](pixeleffect \"PixelEffect\").\n\n  \n\n### Notes\n\n[Canvases](canvas \"Canvas\"), [Shaders](shader \"Shader\"), mipmaps, npot textures, and the subtract [BlendMode](blendmode \"BlendMode\") are always supported in version [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") and newer (due to its system requirements.)\n\nFor previous versions:\n\n`subtractive`, `mipmap`, and `dxt` are supported on nearly every system.\n\n`canvas`, `multicanvas`, `npot`, and `shader` have roughly the same minimum requirements for support: a DirectX 9.0c+ capable graphics card with drivers that support ~OpenGL 2.1+.\n\n`hdrcanvas`, `bc5`, and `srgb` all share mostly the same minimum requirements for support as well: a DirectX 10+ capable graphics card with drivers that support ~OpenGL 3+.\n\n  \nDirectX 9.0c+ capable graphics cards include the nvidia GeForce 5000-series (2003) and newer, the ATI Radeon 9000-series and newer, and the Intel GMA x3100 GPU and newer.\n\nDirectX 10+ capable graphics cards include the nvidia GeForce 8000-series (2006) and newer, the ATI/AMD HD 2000-series and newer, and the Intel HD 2000/3000 GPUs and newer.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getSupported](love.graphics.getsupported \"love.graphics.getSupported\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GraphicsFeature](https://love2d.org/wiki/GraphicsFeature)"
- name: GraphicsLimit
  id: graphicslimit
  summary: Available since LÖVE 0.9.1 This enum is not supported in earlier versions
  description: "# GraphicsLimit\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis enum is not supported in earlier versions.\n\nTypes of system-dependent graphics limits checked for using [love.graphics.getSystemLimits](love.graphics.getsystemlimits \"love.graphics.getSystemLimits\").\n\n## Constants\n\npointsize  \nThe maximum size of [points](love.graphics.points \"love.graphics.points\").\n\ntexturesize  \nThe maximum width or height of [Images](image \"Image\") and [Canvases](canvas \"Canvas\").\n\nmulticanvas  \nThe maximum number of simultaneously active canvases (via [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\").)\n\n  \n\ncanvasmsaa Available since 0.10.0  \nThe maximum number of antialiasing samples for a [Canvas](love.graphics.newcanvas \"love.graphics.newCanvas\").\n\n  \n\ntexturelayers Available since 11.0  \nThe maximum number of layers in an [Array texture](texturetype \"TextureType\").\n\nvolumetexturesize Available since 11.0  \nThe maximum width, height, or depth of a [Volume texture](texturetype \"TextureType\").\n\ncubetexturesize Available since 11.0  \nThe maximum width or height of a [Cubemap texture](texturetype \"TextureType\").\n\nanisotropy Available since 11.0  \nThe maximum amount of anisotropic filtering. [Texture:setMipmapFilter](texture-setmipmapfilter \"Texture:setMipmapFilter\") internally clamps the given anisotropy value to the system's limit.\n\n  \n\ncanvasfsaa Removed in 0.10.0  \nThe maximum number of antialiasing samples for a [Canvas](love.graphics.newcanvas \"love.graphics.newCanvas\").\n\n## Notes\n\nAttempting to create an [Image](image \"Image\") with a width **or** height greater than the maximum supported will create a checkerboard-patterned image instead. Doing the same for a [Canvas](canvas \"Canvas\") will result in an error.\n\nIt's safe to assume the maximum texture size will always be 2048 or greater. There is an [online database](http://feedback.wildfiregames.com/report/opengl/feature/GL_MAX_TEXTURE_SIZE) which has collected info about the max texture size for various systems.\n\nThe value for the **multicanvas** system limit will generally be either 1, 4, or 8.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getSystemLimits](love.graphics.getsystemlimits \"love.graphics.getSystemLimits\")\n- [Canvas:getMSAA](canvas-getmsaa \"Canvas:getMSAA\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/GraphicsLimit](https://love2d.org/wiki/GraphicsLimit)"
- name: HashFunction
  id: hashfunction
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# HashFunction\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nHash algorithm of [love.data.hash](love.data.hash \"love.data.hash\").\n\n## Constants\n\nmd5  \nMD5 hash algorithm (16 bytes).\n\nsha1  \nSHA1 hash algorithm (20 bytes).\n\nsha224  \nSHA2 hash algorithm with message digest size of 224 bits (28 bytes).\n\nsha256  \nSHA2 hash algorithm with message digest size of 256 bits (32 bytes).\n\nsha384  \nSHA2 hash algorithm with message digest size of 384 bits (48 bytes).\n\nsha512  \nSHA2 hash algorithm with message digest size of 512 bits (64 bytes).\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [love.data.hash](love.data.hash \"love.data.hash\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/HashFunction](https://love2d.org/wiki/HashFunction)"
- name: HintingMode
  id: hintingmode
  summary: Available since LÖVE 0.10.0 This enum is not supported in earlier versions
  description: "# HintingMode\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis enum is not supported in earlier versions.\n\nTrue Type hinting mode.\n\n## Constants\n\nnormal  \nDefault hinting. Should be preferred for typical antialiased fonts.\n\nlight  \nResults in fuzzier text but can sometimes preserve the original glyph shapes of the text better than normal hinting.\n\nmono  \nResults in aliased / unsmoothed text with either full opacity or completely transparent pixels. Should be used when antialiasing is not desired for the font.\n\nnone  \nDisables hinting for the font. Results in fuzzier text.\n\n## See Also\n\n- [love.font](love.font \"love.font\")\n- [love.font.newRasterizer](love.font.newrasterizer \"love.font.newRasterizer\")\n- [love.font.newTrueTypeRasterizer](love.font.newtruetyperasterizer \"love.font.newTrueTypeRasterizer\")\n- [love.graphics.newFont](love.graphics.newfont \"love.graphics.newFont\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/HintingMode](https://love2d.org/wiki/HintingMode)"
- name: Image
  id: image
  summary: Drawable image type
  description: "# Image\n\nDrawable image type.\n\n## Constructors\n\n|                                                                                             |                                                               |      |     |\n|---------------------------------------------------------------------------------------------|---------------------------------------------------------------|------|-----|\n| [love.graphics.newArrayImage](love.graphics.newarrayimage \"love.graphics.newArrayImage\")    | Creates a new [array](texturetype \"TextureType\") **Image**.   | 11.0 |     |\n| [love.graphics.newCubeImage](love.graphics.newcubeimage \"love.graphics.newCubeImage\")       | Creates a new [cubemap](texturetype \"TextureType\") **Image**. | 11.0 |     |\n| [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\")                   | Creates a new **Image**.                                      |      |     |\n| [love.graphics.newVolumeImage](love.graphics.newvolumeimage \"love.graphics.newVolumeImage\") | Creates a new [volume](texturetype \"TextureType\") **Image**.  | 11.0 |     |\n\n## Functions\n\nThese functions have parentheses in odd places. This is because the *Image:* namespace is reserved in Mediawiki.\n\n|                                                                                       |                                                                                                                                     |        |      |\n|---------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------|--------|------|\n| [(Image):getData]((image)-getdata \"(Image):getData\")                                  | Gets the original [ImageData](imagedata \"ImageData\") or [CompressedData](compresseddata \"CompressedData\") used to create the Image. | 0.9.0  | 11.0 |\n| [(Image):getFlags]((image)-getflags \"(Image):getFlags\")                               | Gets the flags used when the image was created.                                                                                     | 0.10.0 |      |\n| [(Image):isCompressed]((image)-iscompressed \"(Image):isCompressed\")                   | Gets whether the Image was created from [CompressedData](compresseddata \"CompressedData\").                                          | 0.9.0  |      |\n| [(Image):refresh]((image)-refresh \"(Image):refresh\")                                  | Reloads the Image's contents from the ImageData or CompressedData used to create the image.                                         | 0.9.0  | 11.0 |\n| [(Image):replacePixels]((image)-replacepixels \"(Image):replacePixels\")                | Replace the contents of an Image.                                                                                                   | 11.0   |      |\n| [Object:release](object-release \"Object:release\")                                     | Immediately destroys the object's Lua reference.                                                                                    | 11.0   |      |\n| [Object:type](object-type \"Object:type\")                                              | Gets the type of the object as a string.                                                                                            |        |      |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                        | Checks whether an object is of a certain type.                                                                                      |        |      |\n| [Texture:getDPIScale](texture-getdpiscale \"Texture:getDPIScale\")                      | Gets the DPI scale factor of the Texture.                                                                                           | 11.0   |      |\n| [Texture:getDepth](texture-getdepth \"Texture:getDepth\")                               | Gets the depth of a [Volume Texture](texturetype \"TextureType\").                                                                    | 11.0   |      |\n| [Texture:getDepthSampleMode](texture-getdepthsamplemode \"Texture:getDepthSampleMode\") | Gets the comparison mode used when sampling from a [depth texture](pixelformat \"PixelFormat\") in a shader.                          | 11.0   |      |\n| [Texture:getDimensions](texture-getdimensions \"Texture:getDimensions\")                | Gets the width and height of the Texture.                                                                                           | 0.9.0  |      |\n| [Texture:getFilter](texture-getfilter \"Texture:getFilter\")                            | Gets the [filter mode](filtermode \"FilterMode\") of the Texture.                                                                     |        |      |\n| [Texture:getFormat](texture-getformat \"Texture:getFormat\")                            | Gets the [pixel format](pixelformat \"PixelFormat\") of the Texture.                                                                  | 11.0   |      |\n| [Texture:getHeight](texture-getheight \"Texture:getHeight\")                            | Gets the height of the Texture.                                                                                                     |        |      |\n| [Texture:getLayerCount](texture-getlayercount \"Texture:getLayerCount\")                | Gets the number of layers / slices in an [Array Texture](texturetype \"TextureType\").                                                | 11.0   |      |\n| [Texture:getMipmapCount](texture-getmipmapcount \"Texture:getMipmapCount\")             | Gets the number of mipmaps contained in the Texture.                                                                                | 11.0   |      |\n| [Texture:getMipmapFilter](texture-getmipmapfilter \"Texture:getMipmapFilter\")          | Gets the mipmap filter mode for a Texture.                                                                                          | 0.9.0  |      |\n| [Texture:getPixelDimensions](texture-getpixeldimensions \"Texture:getPixelDimensions\") | Gets the width and height in pixels of the Texture.                                                                                 | 11.0   |      |\n| [Texture:getPixelHeight](texture-getpixelheight \"Texture:getPixelHeight\")             | Gets the height in pixels of the Texture.                                                                                           | 11.0   |      |\n| [Texture:getPixelWidth](texture-getpixelwidth \"Texture:getPixelWidth\")                | Gets the width in pixels of the Texture.                                                                                            | 11.0   |      |\n| [Texture:getTextureType](texture-gettexturetype \"Texture:getTextureType\")             | Gets the [type](texturetype \"TextureType\") of the Texture.                                                                          | 11.0   |      |\n| [Texture:getWidth](texture-getwidth \"Texture:getWidth\")                               | Gets the width of the Texture.                                                                                                      |        |      |\n| [Texture:getWrap](texture-getwrap \"Texture:getWrap\")                                  | Gets the wrapping properties of a Texture.                                                                                          |        |      |\n| [Texture:isReadable](texture-isreadable \"Texture:isReadable\")                         | Gets whether the Texture can be drawn sent to a Shader.                                                                             | 11.0   |      |\n| [Texture:setDepthSampleMode](texture-setdepthsamplemode \"Texture:setDepthSampleMode\") | Sets the comparison mode used when sampling from a [depth texture](pixelformat \"PixelFormat\") in a shader.                          | 11.0   |      |\n| [Texture:setFilter](texture-setfilter \"Texture:setFilter\")                            | Sets the [filter mode](filtermode \"FilterMode\") of the Texture.                                                                     |        |      |\n| [Texture:setMipmapFilter](texture-setmipmapfilter \"Texture:setMipmapFilter\")          | Sets the mipmap filter mode for a Texture.                                                                                          | 0.9.0  |      |\n| [Texture:setWrap](texture-setwrap \"Texture:setWrap\")                                  | Sets the wrapping properties of a Texture.                                                                                          |        |      |\n\n## Supertypes\n\n- [Texture](texture \"Texture\")\n- [Drawable](drawable \"Drawable\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [ImageData](imagedata \"ImageData\")\n- [love.graphics](love.graphics \"love.graphics\")\n- [Image Formats](image_formats \"Image Formats\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Image](https://love2d.org/wiki/Image)"
- name: Image Formats
  id: image_formats
  summary: © 2006–2020 LÖVE Development Team Licensed under the GNU Free Documentation License, Version 1.3
  description: "# Image Formats\n\nIn addition to [compressed image formats](compressedimageformat \"CompressedImageFormat\"), the following formats are supported:\n\n|                                         |                  |            |                                                   |         |\n|-----------------------------------------|------------------|------------|---------------------------------------------------|---------|\n| Format Name                             | Common Extension | Can Decode | [Can Encode](imagedata-encode \"ImageData:encode\") | Note(s) |\n| Joint Photographic Experts Group / JPEG | .jpg, .jpeg      | Yes        |                                                   |         |\n| Portable Network Graphics / PNG         | .png             | Yes        | Yes                                               |         |\n| Bitmap image file / BMP                 | .bmp             | Yes        |                                                   |         |\n| Truevision TGA / TARGA                  | .tga             | Yes        | Yes                                               |         |\n| Radiance HDR / RGBE                     | .hdr, .pic       | Yes        |                                                   |         |\n| OpenEXR                                 | .exr             | Yes        |                                                   |         |\n\n## See Also\n\n- [love.image](love.image \"love.image\")\n- [love.graphics](love.graphics \"love.graphics\")\n- [ImageEncodeFormat](imageencodeformat \"ImageEncodeFormat\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Image_Formats](https://love2d.org/wiki/Image_Formats)"
- name: ImageData
  id: imagedata
  summary: Raw (decoded) image data
  description: "# ImageData\n\nRaw (decoded) image data.\n\nYou can't draw ImageData directly to screen. See [Image](image \"Image\") for that.\n\n## Constructors\n\n|                                                                                          |                                                          |        |      |\n|------------------------------------------------------------------------------------------|----------------------------------------------------------|--------|------|\n| [Canvas:newImageData](canvas-newimagedata \"Canvas:newImageData\")                         | Generates **ImageData** from the contents of the Canvas. | 0.10.0 |      |\n| [love.graphics.newScreenshot](love.graphics.newscreenshot \"love.graphics.newScreenshot\") | Creates a screenshot and returns the **ImageData**.      |        | 11.0 |\n| [love.image.newImageData](love.image.newimagedata \"love.image.newImageData\")             | Creates a new ImageData object.                          |        |      |\n\n## Functions\n\n|                                                                              |                                                                                                                             |       |       |\n|------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|-------|-------|\n| [Data:clone](data-clone \"Data:clone\")                                        | Creates a new copy of the Data object.                                                                                      | 11.0  |       |\n| [Data:getFFIPointer](data-getffipointer \"Data:getFFIPointer\")                | Gets an FFI pointer to the Data.                                                                                            | 11.3  |       |\n| [Data:getPointer](data-getpointer \"Data:getPointer\")                         | Gets a pointer to the Data.                                                                                                 |       |       |\n| [Data:getSize](data-getsize \"Data:getSize\")                                  | Gets the [Data](data \"Data\")'s size in bytes.                                                                               |       |       |\n| [Data:getString](data-getstring \"Data:getString\")                            | Gets the full Data as a string.                                                                                             | 0.9.0 |       |\n| [ImageData:encode](imagedata-encode \"ImageData:encode\")                      | Encodes the ImageData to a file format and optionally writes it to the [save directory](love.filesystem \"love.filesystem\"). |       |       |\n| [ImageData:getDimensions](imagedata-getdimensions \"ImageData:getDimensions\") | Gets the width and height of the ImageData in pixels.                                                                       | 0.9.0 |       |\n| [ImageData:getFormat](imagedata-getformat \"ImageData:getFormat\")             | Gets the [pixel format](pixelformat \"PixelFormat\") of the ImageData.                                                        | 11.0  |       |\n| [ImageData:getHeight](imagedata-getheight \"ImageData:getHeight\")             | Gets the height of the ImageData in pixels.                                                                                 |       |       |\n| [ImageData:getPixel](imagedata-getpixel \"ImageData:getPixel\")                | Gets the color of a pixel.                                                                                                  |       |       |\n| [ImageData:getString](imagedata-getstring \"ImageData:getString\")             | Gets the full ImageData as a string.                                                                                        |       | 0.9.0 |\n| [ImageData:getWidth](imagedata-getwidth \"ImageData:getWidth\")                | Gets the width of the ImageData in pixels.                                                                                  |       |       |\n| [ImageData:mapPixel](imagedata-mappixel \"ImageData:mapPixel\")                | Transform an image by applying a function to every pixel.                                                                   |       |       |\n| [ImageData:paste](imagedata-paste \"ImageData:paste\")                         | Paste into ImageData from another source ImageData.                                                                         |       |       |\n| [ImageData:setPixel](imagedata-setpixel \"ImageData:setPixel\")                | Sets the color of a pixel.                                                                                                  |       |       |\n| [Object:release](object-release \"Object:release\")                            | Immediately destroys the object's Lua reference.                                                                            | 11.0  |       |\n| [Object:type](object-type \"Object:type\")                                     | Gets the type of the object as a string.                                                                                    |       |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                               | Checks whether an object is of a certain type.                                                                              |       |       |\n\n## Enums\n\n|                                                            |                                                                                          |     |     |\n|------------------------------------------------------------|------------------------------------------------------------------------------------------|-----|-----|\n| [ImageEncodeFormat](imageencodeformat \"ImageEncodeFormat\") | Image file formats supported by [ImageData:encode](imagedata-encode \"ImageData:encode\"). |     |     |\n\n## Supertypes\n\n- [Data](data \"Data\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.image](love.image \"love.image\")\n- [Image](image \"Image\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageData](https://love2d.org/wiki/ImageData)"
- name: ImageData:encode
  id: imagedata-encode
  summary: Encodes the ImageData to a file format and optionally writes it to the save directory
  description: "# ImageData:encode\n\nEncodes the ImageData to a file format and optionally writes it to the [save directory](love.filesystem \"love.filesystem\").\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nfiledata = ImageData:encode( format, filename )\n```\n\n### Arguments\n\n[`ImageEncodeFormat`](imageencodeformat \"ImageEncodeFormat\")` format`  \nThe format to encode the image as.\n\n[`string`](string \"string\")` filename (nil)`  \nThe filename to write the file to. If nil, no file will be written but the FileData will still be returned.\n\n### Returns\n\n[`FileData`](filedata \"FileData\")` filedata`  \nThe encoded image as a new FileData object.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier or later versions.\n\n### Synopsis\n\n``` lua\nImageData:encode( outFile )\n```\n\n### Arguments\n\n[`string`](string \"string\")` outFile`  \nName of a file to write encoded data to. The format will be automatically deduced from the file extension.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier or later versions.\n\n### Synopsis\n\n``` lua\nImageData:encode( outFile, format )\n```\n\n### Arguments\n\n[`string`](string \"string\")` outFile`  \nName of a file to write encoded data to.\n\n[`ImageEncodeFormat`](imageencodeformat \"ImageEncodeFormat\")` format`  \nThe format to encode the image in.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\ndata = ImageData:encode( format )\n```\n\n### Arguments\n\n[`ImageEncodeFormat`](imageencodeformat \"ImageEncodeFormat\")` format`  \nThe format to encode the image in.\n\n### Returns\n\n[`Data`](data \"Data\")` data`  \nThe encoded image data.\n\n## See Also\n\n- [ImageData](imagedata \"ImageData\")\n\n  \n\n## User Notes\n\n- If you want the file to have an extension when saved add it in the file name. Example :\n\n  ``` lua\n  image:encode(\"png\",\"aPngImage.png\")\n  ```\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageData:encode](https://love2d.org/wiki/ImageData:encode)"
- name: ImageData:getDimensions
  id: imagedata-getdimensions
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ImageData:getDimensions\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the width and height of the ImageData in pixels.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth, height = ImageData:getDimensions( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the [ImageData](imagedata \"ImageData\") in pixels.\n\n[`number`](number \"number\")` height`  \nThe height of the [ImageData](imagedata \"ImageData\") in pixels.\n\n## See Also\n\n- [ImageData](imagedata \"ImageData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageData:getDimensions](https://love2d.org/wiki/ImageData:getDimensions)"
- name: ImageData:getFormat
  id: imagedata-getformat
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# ImageData:getFormat\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the [pixel format](pixelformat \"PixelFormat\") of the ImageData.\n\n## Function\n\n### Synopsis\n\n``` lua\nformat = ImageData:getFormat( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`PixelFormat`](pixelformat \"PixelFormat\")` format`  \nThe pixel format the ImageData was created with.\n\n## See Also\n\n- [ImageData](imagedata \"ImageData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageData:getFormat](https://love2d.org/wiki/ImageData:getFormat)"
- name: ImageData:getHeight
  id: imagedata-getheight
  summary: Gets the height of the ImageData in pixels
  description: "# ImageData:getHeight\n\nGets the height of the ImageData in pixels.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = ImageData:getHeight( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nThe height of the [ImageData](imagedata \"ImageData\") in pixels.\n\n## See Also\n\n- [ImageData](imagedata \"ImageData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageData:getHeight](https://love2d.org/wiki/ImageData:getHeight)"
- name: ImageData:getPixel
  id: imagedata-getpixel
  summary: Gets the color of a pixel at a specific position in the image
  description: "# ImageData:getPixel\n\nGets the color of a pixel at a specific position in the image.\n\nValid x and y values start at 0 and go up to image width and height minus 1. Non-integer values are floored.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\nPrior to [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\"), this function does not properly handle non-integer coordinates, and may produce an invalid result when non-integer values are passed.\n\n## Function\n\n### Synopsis\n\n``` lua\nr, g, b, a = ImageData:getPixel( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe position of the pixel on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the pixel on the y-axis.\n\n### Returns\n\n[`number`](number \"number\")` r`  \nThe red component (0-1).\n\n[`number`](number \"number\")` g`  \nThe green component (0-1).\n\n[`number`](number \"number\")` b`  \nThe blue component (0-1).\n\n[`number`](number \"number\")` a`  \nThe alpha component (0-1).\n\n## Examples\n\nWhen the mouse is clicked, reads the red, green, and blue value of the pixel under the mouse and uses it as the background color.\n\n``` lua\nlocal imagedata = love.image.newImageData('path/to/Image.png')\nlocal image     = love.graphics.newImage(imagedata)\n \nfunction love.mousepressed(mx, my)\n    if  0 <= mx and mx < image:getWidth()\n    and 0 <= my and my < image:getHeight() then\n        local r, g, b = imagedata:getPixel(mx, my)\n        love.graphics.setBackgroundColor(r, g, b)\n    end\nend\n \nfunction love.draw()\n    love.graphics.draw(image, 0, 0)\nend\n```\n\n## See Also\n\n- [ImageData](imagedata \"ImageData\")\n- [ImageData:setPixel](imagedata-setpixel \"ImageData:setPixel\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageData:getPixel](https://love2d.org/wiki/ImageData:getPixel)"
- name: ImageData:getString
  id: imagedata-getstring
  summary: Removed in LÖVE 0.9.0 It has been moved to Data:getString
  description: "# ImageData:getString\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to [Data:getString](data-getstring \"Data:getString\").\n\n  \nGets the full ImageData as a string.\n\n## Function\n\n### Synopsis\n\n``` lua\npixels = ImageData:getString( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` pixels`  \nThe raw data.\n\n## See Also\n\n- [ImageData](imagedata \"ImageData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageData:getString](https://love2d.org/wiki/ImageData:getString)"
- name: ImageData:getWidth
  id: imagedata-getwidth
  summary: Gets the width of the ImageData in pixels
  description: "# ImageData:getWidth\n\nGets the width of the ImageData in pixels.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth = ImageData:getWidth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the [ImageData](imagedata \"ImageData\") in pixels.\n\n## See Also\n\n- [ImageData](imagedata \"ImageData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageData:getWidth](https://love2d.org/wiki/ImageData:getWidth)"
- name: ImageData:mapPixel
  id: imagedata-mappixel
  summary: Transform an image by applying a function to every pixel
  description: "# ImageData:mapPixel\n\nTransform an image by applying a function to every pixel.\n\nThis function is a [higher-order function](https://en.wikipedia.org/wiki/Higher-order_function). It takes another function as a parameter, and calls it once for each pixel in the ImageData.\n\nThe passed function is called with six parameters for each pixel in turn. The parameters are numbers that represent the x and y coordinates of the pixel and its red, green, blue and alpha values. The function should return the new red, green, blue, and alpha values for that pixel.\n\n``` lua\nfunction pixelFunction(x, y, r, g, b, a)\n    -- template for defining your own pixel mapping function\n    -- perform computations giving the new values for r, g, b and a\n    -- ...\n    return r, g, b, a\nend\n```\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nImageData:mapPixel( pixelFunction, x, y, width, height )\n```\n\n### Arguments\n\n[`function`](function \"function\")` pixelFunction`  \nFunction to apply to every pixel.\n\n[`number`](number \"number\")` x (0)` Available since 0.9.0  \nThe x-axis of the top-left corner of the area within the ImageData to apply the function to.\n\n[`number`](number \"number\")` y (0)` Available since 0.9.0  \nThe y-axis of the top-left corner of the area within the ImageData to apply the function to.\n\n[`number`](number \"number\")` width (ImageData:getWidth())` Available since 0.9.0  \nThe width of the area within the ImageData to apply the function to.\n\n[`number`](number \"number\")` height (ImageData:getHeight())` Available since 0.9.0  \nThe height of the area within the ImageData to apply the function to.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Brighten an image:\n\n``` lua\nfunction brighten( x, y, r, g, b, a )\n   r = math.min(r * 3, 1)\n   g = math.min(g * 3, 1)\n   b = math.min(b * 3, 1)\n   return r,g,b,a\nend\n \nimageData:mapPixel( brighten )\n```\n\n### Add colored stripes to an image:\n\n``` lua\nfunction stripey( x, y, r, g, b, a )\n   r = math.min(r * math.sin(x*100)*2, 1)\n   g = math.min(g * math.cos(x*150)*2, 1)\n   b = math.min(b * math.sin(x*50)*2, 1)\n   return r,g,b,a\nend\n \nimageData:mapPixel( stripey )\n```\n\nsource: [http://khason.net/blog/hlsl-pixel-shader-effects-tutorial/](http://khason.net/blog/hlsl-pixel-shader-effects-tutorial/) (broken 11/16. See [blogs.microsoft.co.il](http://blogs.microsoft.co.il/tamir/2008/06/17/hlsl-pixel-shader-effects-tutorial/) or [archive.org](https://web.archive.org/web/20150515111551/http://khason.net/blog/hlsl-pixel-shader-effects-tutorial/) mirrors.)\n\n## See Also\n\n- [ImageData](imagedata \"ImageData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageData:mapPixel](https://love2d.org/wiki/ImageData:mapPixel)"
- name: ImageData:paste
  id: imagedata-paste
  summary: Paste into ImageData from another source ImageData
  description: "# ImageData:paste\n\nPaste into ImageData from another source ImageData.\n\n## Function\n\n### Synopsis\n\n``` lua\nImageData:paste( source, dx, dy, sx, sy, sw, sh )\n```\n\n### Arguments\n\n[`ImageData`](imagedata \"ImageData\")` source`  \nSource ImageData from which to copy.\n\n[`number`](number \"number\")` dx`  \nDestination top-left position on x-axis.\n\n[`number`](number \"number\")` dy`  \nDestination top-left position on y-axis.\n\n[`number`](number \"number\")` sx`  \nSource top-left position on x-axis.\n\n[`number`](number \"number\")` sy`  \nSource top-left position on y-axis.\n\n[`number`](number \"number\")` sw`  \nSource width.\n\n[`number`](number \"number\")` sh`  \nSource height.\n\n### Returns\n\nNothing.\n\n## Notes\n\nNote that this function just replaces the contents in the destination rectangle; it does not do any alpha blending.\n\n## See Also\n\n- [ImageData](imagedata \"ImageData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageData:paste](https://love2d.org/wiki/ImageData:paste)"
- name: ImageData:setPixel
  id: imagedata-setpixel
  summary: Sets the color of a pixel at a specific position in the image
  description: "# ImageData:setPixel\n\nSets the color of a pixel at a specific position in the image.\n\nValid x and y values start at 0 and go up to image width and height minus 1.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nImageData:setPixel( x, y, r, g, b, a )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe position of the pixel on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the pixel on the y-axis.\n\n[`number`](number \"number\")` r`  \nThe red component (0-1).\n\n[`number`](number \"number\")` g`  \nThe green component (0-1).\n\n[`number`](number \"number\")` b`  \nThe blue component (0-1).\n\n[`number`](number \"number\")` a`  \nThe alpha component (0-1).\n\n### Returns\n\nNothing.\n\n## Examples\n\nCreate a 32x1 pixel transparent-to-white gradient [drawable image](image \"Image\").\n\n``` lua\ndata = love.image.newImageData(32,1)\nfor i=0, 31 do   -- remember: start at 0\n   data:setPixel(i, 0, 1, 1, 1, i / 31)\nend\nimg = love.graphics.newImage(data)\n```\n\n## See Also\n\n- [ImageData](imagedata \"ImageData\")\n- [ImageData:getPixel](imagedata-getpixel \"ImageData:getPixel\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageData:setPixel](https://love2d.org/wiki/ImageData:setPixel)"
- name: ImageEncodeFormat
  id: imageencodeformat
  summary: Image file formats supported by ImageData:encode
  description: "# ImageEncodeFormat\n\nImage file formats supported by [ImageData:encode](imagedata-encode \"ImageData:encode\").\n\n## Constants\n\ntga  \nTarga image format.\n\npng Available since 0.8.0  \nPNG image format.\n\n  \n\njpg Available since 0.8.0 and removed in LÖVE 0.10.0  \nJPG image format.\n\nbmp Available since 0.8.0 and removed in LÖVE 0.10.0  \nBMP image format.\n\n## See Also\n\n- [love.image](love.image \"love.image\")\n- [ImageData](imagedata \"ImageData\")\n- [ImageData:encode](imagedata-encode \"ImageData:encode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageEncodeFormat](https://love2d.org/wiki/ImageEncodeFormat)"
- name: ImageFlag
  id: imageflag
  summary: Image flags
  description: "# ImageFlag\n\nImage flags.\n\nThis needs more documentation!\n\n## Constants\n\nlinear\n\nmipmaps\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Image:getFlags]((image)-getflags \"(Image):getFlags\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageFlag](https://love2d.org/wiki/ImageFlag)"
- name: ImageFontFormat
  id: imagefontformat
  summary: The imagefont file is an image file in a format that LÖVE can load
  description: "# ImageFontFormat\n\nThe imagefont file is an image file in a format that LÖVE can load. It can contain transparent pixels, so a PNG file is preferable, and it also needs to contain spacer color that will separate the different font glyphs.\n\nThe *upper left pixel* of the image file is always taken to be the spacer color. All columns that have this color as their uppermost pixel are interpreted as separators of font glyphs. The areas between these separators are interpreted as the actual font glyphs.\n\nIt is possible to have more areas in the image than are required for the font in the [love.graphics.newImageFont](love.graphics.newimagefont \"love.graphics.newImageFont\")() call. The extra areas are ignored.\n\nIn versions prior to [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") the width of the separator area after a particular font glyph sets the amount of space that goes after the glyph. As of [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\"), it is possible to add negative spacing for all characters by using the 3-parameter version of [love.graphics.newImageFont](love.graphics.newimagefont \"love.graphics.newImageFont\") and giving a negative number as the third parameter.\n\n## See Also\n\n- [Tutorial:Fonts and Text](https://love2d.org/wiki/Tutorial:Fonts_and_Text \"Tutorial:Fonts and Text\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ImageFontFormat](https://love2d.org/wiki/ImageFontFormat)"
- name: IndexDataType
  id: indexdatatype
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# IndexDataType\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nVertex map datatype for [Data](data \"Data\") variant of [Mesh:setVertexMap](mesh-setvertexmap \"Mesh:setVertexMap\").\n\n## Constants\n\nuint16  \nThe vertex map is array of unsigned word (16-bit).\n\nuint32  \nThe vertex map is array of unsigned dword (32-bit).\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Mesh:setVertexMap](mesh-setvertexmap \"Mesh:setVertexMap\")\n- [Mesh](mesh \"Mesh\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/IndexDataType](https://love2d.org/wiki/IndexDataType)"
- name: Joint
  id: joint
  summary: Attach multiple bodies together to interact in unique ways
  description: "# Joint\n\nAttach multiple bodies together to interact in unique ways.\n\n## Constructors\n\n|                                                                                                   |                                                                                                     |       |     |\n|---------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------|-------|-----|\n| [love.physics.newDistanceJoint](love.physics.newdistancejoint \"love.physics.newDistanceJoint\")    | Creates a [DistanceJoint](distancejoint \"DistanceJoint\") between two bodies.                        |       |     |\n| [love.physics.newFrictionJoint](love.physics.newfrictionjoint \"love.physics.newFrictionJoint\")    | A [FrictionJoint](frictionjoint \"FrictionJoint\") applies friction to a body.                        | 0.8.0 |     |\n| [love.physics.newGearJoint](love.physics.newgearjoint \"love.physics.newGearJoint\")                | Create a [GearJoint](gearjoint \"GearJoint\") connecting two Joints.                                  |       |     |\n| [love.physics.newMotorJoint](love.physics.newmotorjoint \"love.physics.newMotorJoint\")             | Creates a joint between two bodies which controls the relative motion between them.                 | 0.9.0 |     |\n| [love.physics.newMouseJoint](love.physics.newmousejoint \"love.physics.newMouseJoint\")             | Create a joint between a body and the mouse.                                                        |       |     |\n| [love.physics.newPrismaticJoint](love.physics.newprismaticjoint \"love.physics.newPrismaticJoint\") | Creates a [PrismaticJoint](prismaticjoint \"PrismaticJoint\") between two bodies.                     |       |     |\n| [love.physics.newPulleyJoint](love.physics.newpulleyjoint \"love.physics.newPulleyJoint\")          | Creates a [PulleyJoint](pulleyjoint \"PulleyJoint\") to join two bodies to each other and the ground. |       |     |\n| [love.physics.newRevoluteJoint](love.physics.newrevolutejoint \"love.physics.newRevoluteJoint\")    | Creates a pivot joint between two bodies.                                                           |       |     |\n| [love.physics.newRopeJoint](love.physics.newropejoint \"love.physics.newRopeJoint\")                | Creates a joint between two bodies that enforces a max distance between them.                       | 0.8.0 |     |\n| [love.physics.newWeldJoint](love.physics.newweldjoint \"love.physics.newWeldJoint\")                | A [WeldJoint](weldjoint \"WeldJoint\") essentially glues two bodies together.                         | 0.8.0 |     |\n| [love.physics.newWheelJoint](love.physics.newwheeljoint \"love.physics.newWheelJoint\")             | Creates a wheel joint.                                                                              | 0.8.0 |     |\n\n## Functions\n\n|                                                                                    |                                                                   |       |       |\n|------------------------------------------------------------------------------------|-------------------------------------------------------------------|-------|-------|\n| [Joint:destroy](joint-destroy \"Joint:destroy\")                                     | Explicitly destroys the Joint.                                    |       |       |\n| [Joint:getAnchors](joint-getanchors \"Joint:getAnchors\")                            | Get the anchor points of the joint.                               |       |       |\n| [Joint:getBodies](joint-getbodies \"Joint:getBodies\")                               | Gets the [bodies](body \"Body\") that the Joint is attached to.     | 0.9.2 |       |\n| [Joint:getCollideConnected](joint-getcollideconnected \"Joint:getCollideConnected\") | Gets whether the connected Bodies collide.                        |       |       |\n| [Joint:getReactionForce](joint-getreactionforce \"Joint:getReactionForce\")          | Returns the reaction force on the second body.                    |       |       |\n| [Joint:getReactionTorque](joint-getreactiontorque \"Joint:getReactionTorque\")       | Returns the reaction torque on the second body.                   |       |       |\n| [Joint:getType](joint-gettype \"Joint:getType\")                                     | Gets a string representing the type.                              |       |       |\n| [Joint:getUserData](joint-getuserdata \"Joint:getUserData\")                         | Returns the Lua value associated with this Joint.                 | 0.9.2 |       |\n| [Joint:isDestroyed](joint-isdestroyed \"Joint:isDestroyed\")                         | Gets whether the Joint is destroyed.                              | 0.9.2 |       |\n| [Joint:setCollideConnected](joint-setcollideconnected \"Joint:setCollideConnected\") | Sets whether the connected Bodies should collide with each other. |       | 0.8.0 |\n| [Joint:setUserData](joint-setuserdata \"Joint:setUserData\")                         | Associates a Lua value with the Joint.                            | 0.9.2 |       |\n| [Object:release](object-release \"Object:release\")                                  | Immediately destroys the object's Lua reference.                  | 11.0  |       |\n| [Object:type](object-type \"Object:type\")                                           | Gets the type of the object as a string.                          |       |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                     | Checks whether an object is of a certain type.                    |       |       |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## Subtypes\n\n|                                                   |                                                                   |       |     |\n|---------------------------------------------------|-------------------------------------------------------------------|-------|-----|\n| [DistanceJoint](distancejoint \"DistanceJoint\")    | Keeps two bodies at the same distance.                            |       |     |\n| [FrictionJoint](frictionjoint \"FrictionJoint\")    | A FrictionJoint applies friction to a body.                       | 0.8.0 |     |\n| [GearJoint](gearjoint \"GearJoint\")                | Keeps bodies together in such a way that they act like gears.     |       |     |\n| [MotorJoint](motorjoint \"MotorJoint\")             | Controls the relative motion between two [Bodies](body \"Body\")    | 0.9.0 |     |\n| [MouseJoint](mousejoint \"MouseJoint\")             | For controlling objects with the mouse.                           |       |     |\n| [PrismaticJoint](prismaticjoint \"PrismaticJoint\") | Restricts relative motion between Bodies to one shared axis.      |       |     |\n| [PulleyJoint](pulleyjoint \"PulleyJoint\")          | Allows you to simulate bodies connected through pulleys.          |       |     |\n| [RevoluteJoint](revolutejoint \"RevoluteJoint\")    | Allow two Bodies to revolve around a shared point.                |       |     |\n| [RopeJoint](ropejoint \"RopeJoint\")                | Enforces a maximum distance between two points on two bodies.     | 0.8.0 |     |\n| [WeldJoint](weldjoint \"WeldJoint\")                | A WeldJoint essentially glues two bodies together.                | 0.8.0 |     |\n| [WheelJoint](wheeljoint \"WheelJoint\")             | Restricts a point on the second body to a line on the first body. |       |     |\n\n## Enums\n\n|                                    |                            |     |     |\n|------------------------------------|----------------------------|-----|-----|\n| [JointType](jointtype \"JointType\") | Different types of joints. |     |     |\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joint](https://love2d.org/wiki/Joint)"
- name: Joint:destroy
  id: joint-destroy
  summary: Explicitly destroys the Joint
  description: "# Joint:destroy\n\nExplicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function.\n\nIn 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately.\n\n## Function\n\n### Synopsis\n\n``` lua\nJoint:destroy( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joint:destroy](https://love2d.org/wiki/Joint:destroy)"
- name: Joint:getAnchors
  id: joint-getanchors
  summary: Get the anchor points of the joint
  description: "# Joint:getAnchors\n\nGet the anchor points of the joint.\n\n## Function\n\n### Synopsis\n\n``` lua\nx1, y1, x2, y2 = Joint:getAnchors( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x1`  \nThe x-component of the anchor on Body 1.\n\n[`number`](number \"number\")` y1`  \nThe y-component of the anchor on Body 1.\n\n[`number`](number \"number\")` x2`  \nThe x-component of the anchor on Body 2.\n\n[`number`](number \"number\")` y2`  \nThe y-component of the anchor on Body 2.\n\n## See Also\n\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joint:getAnchors](https://love2d.org/wiki/Joint:getAnchors)"
- name: Joint:getBodies
  id: joint-getbodies
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# Joint:getBodies\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets the [bodies](body \"Body\") that the Joint is attached to.\n\n## Function\n\n### Synopsis\n\n``` lua\nbodyA, bodyB = Joint:getBodies( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Body`](body \"Body\")` bodyA (nil)`  \nThe first Body.\n\n[`Body`](body \"Body\")` bodyB (nil)`  \nThe second Body.\n\n## See Also\n\n- [Joint](joint \"Joint\")\n- [Body](body \"Body\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joint:getBodies](https://love2d.org/wiki/Joint:getBodies)"
- name: Joint:getCollideConnected
  id: joint-getcollideconnected
  summary: Gets whether the connected Bodies collide
  description: "# Joint:getCollideConnected\n\nGets whether the connected Bodies collide.\n\n## Function\n\n### Synopsis\n\n``` lua\nc = Joint:getCollideConnected( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` c`  \nTrue if they collide, false otherwise.\n\n## See Also\n\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joint:getCollideConnected](https://love2d.org/wiki/Joint:getCollideConnected)"
- name: Joint:getReactionForce
  id: joint-getreactionforce
  summary: Available since LÖVE 0.8.0 This variant is not supported in earlier versions
  description: "# Joint:getReactionForce\n\nReturns the reaction force in newtons on the second body\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nx, y = Joint:getReactionForce( invdt )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nHow long the force applies. Usually the inverse time step or 1/dt.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x-component of the force.\n\n[`number`](number \"number\")` y`  \nThe y-component of the force.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nx, y = Joint:getReactionForce( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x-component of the force.\n\n[`number`](number \"number\")` y`  \nThe y-component of the force.\n\n## See Also\n\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joint:getReactionForce](https://love2d.org/wiki/Joint:getReactionForce)"
- name: Joint:getReactionTorque
  id: joint-getreactiontorque
  summary: Returns the reaction torque on the second body
  description: "# Joint:getReactionTorque\n\nReturns the reaction torque on the second body.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\ntorque = Joint:getReactionTorque( invdt )\n```\n\n### Arguments\n\n[`number`](number \"number\")` invdt`  \nHow long the force applies. Usually the inverse time step or 1/dt.\n\n### Returns\n\n[`number`](number \"number\")` torque`  \nThe reaction torque on the second body.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\ntorque = Joint:getReactionTorque( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` torque`  \nThe reaction torque on the second body.\n\n## See Also\n\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joint:getReactionTorque](https://love2d.org/wiki/Joint:getReactionTorque)"
- name: Joint:getType
  id: joint-gettype
  summary: Gets a string representing the type
  description: "# Joint:getType\n\nGets a string representing the type.\n\n## Function\n\n### Synopsis\n\n``` lua\ntype = Joint:getType( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`JointType`](jointtype \"JointType\")` type`  \nA string with the name of the Joint type.\n\n## See Also\n\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joint:getType](https://love2d.org/wiki/Joint:getType)"
- name: Joint:getUserData
  id: joint-getuserdata
  summary: Available since LÖVE 0.9.2 This method is not supported in earlier versions
  description: "# Joint:getUserData\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis method is not supported in earlier versions.\n\nReturns the Lua value associated with this Joint.\n\nUse this function in one thread and one thread only. Using it in more threads will make Lua cry and most likely crash.\n\n## Function\n\n### Synopsis\n\n``` lua\nvalue = Joint:getUserData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`any`](https://love2d.org/w/index.php?title=any&action=edit&redlink=1 \"any (page does not exist)\")` value`  \nThe Lua value associated with the Joint.\n\n## See Also\n\n- [Joint](joint \"Joint\")\n- [Joint:setUserData](joint-setuserdata \"Joint:setUserData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joint:getUserData](https://love2d.org/wiki/Joint:getUserData)"
- name: Joint:isDestroyed
  id: joint-isdestroyed
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# Joint:isDestroyed\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Joint is destroyed. Destroyed joints cannot be used.\n\n## Function\n\n### Synopsis\n\n``` lua\ndestroyed = Joint:isDestroyed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` destroyed`  \nWhether the Joint is destroyed.\n\n## See Also\n\n- [Joint](joint \"Joint\")\n- [Joint:destroy](joint-destroy \"Joint:destroy\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joint:isDestroyed](https://love2d.org/wiki/Joint:isDestroyed)"
- name: Joint:setCollideConnected
  id: joint-setcollideconnected
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Joint:setCollideConnected\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nSets whether the connected Bodies should collide with each other.\n\n## Function\n\n### Synopsis\n\n``` lua\nJoint:setCollideConnected( collide )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` collide`  \nTrue for the Bodies to collide, false otherwise.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joint:setCollideConnected](https://love2d.org/wiki/Joint:setCollideConnected)"
- name: Joint:setUserData
  id: joint-setuserdata
  summary: Available since LÖVE 0.9.2 This method is not supported in earlier versions
  description: "# Joint:setUserData\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis method is not supported in earlier versions.\n\nAssociates a Lua value with the Joint.\n\nTo delete the reference, explicitly pass nil.\n\nUse this function in one thread and one thread only. Using it in more threads will make Lua cry and most likely crash.\n\n## Function\n\n### Synopsis\n\n``` lua\nJoint:setUserData( value )\n```\n\n### Arguments\n\n[`Variant`](variant \"Variant\")` value`  \nThe Lua value to associate with the Joint.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Joint](joint \"Joint\")\n- [Joint:getUserData](joint-getuserdata \"Joint:getUserData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joint:setUserData](https://love2d.org/wiki/Joint:setUserData)"
- name: JointType
  id: jointtype
  summary: Different types of joints
  description: "# JointType\n\nDifferent types of joints.\n\n## Constants\n\ndistance  \nA [DistanceJoint](distancejoint \"DistanceJoint\").\n\nfriction  \nA [FrictionJoint](frictionjoint \"FrictionJoint\").\n\ngear  \nA [GearJoint](gearjoint \"GearJoint\").\n\nmouse  \nA [MouseJoint](mousejoint \"MouseJoint\").\n\nprismatic  \nA [PrismaticJoint](prismaticjoint \"PrismaticJoint\").\n\npulley  \nA [PulleyJoint](pulleyjoint \"PulleyJoint\").\n\nrevolute  \nA [RevoluteJoint](revolutejoint \"RevoluteJoint\").\n\nrope  \nA [RopeJoint](ropejoint \"RopeJoint\").\n\nweld  \nA [WeldJoint](weldjoint \"WeldJoint\").\n\n## See Also\n\n- [Joint](joint \"Joint\")\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/JointType](https://love2d.org/wiki/JointType)"
- name: Joystick
  id: joystick
  summary: Available since LÖVE 0.9.0 This type is not supported in earlier versions
  description: "# Joystick\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis type is not supported in earlier versions.\n\nRepresents a physical joystick.\n\n## Constructors\n\n|                                                                                       |                                     |       |     |\n|---------------------------------------------------------------------------------------|-------------------------------------|-------|-----|\n| [love.joystick.getJoysticks](love.joystick.getjoysticks \"love.joystick.getJoysticks\") | Gets a list of connected Joysticks. | 0.9.0 |     |\n\n## Functions\n\n|                                                                                                         |                                                                                                                                               |       |     |\n|---------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|-------|-----|\n| [Joystick:getAxes](joystick-getaxes \"Joystick:getAxes\")                                                 | Gets the direction of each axis.                                                                                                              | 0.9.0 |     |\n| [Joystick:getAxis](joystick-getaxis \"Joystick:getAxis\")                                                 | Gets the direction of an axis.                                                                                                                | 0.9.0 |     |\n| [Joystick:getAxisCount](joystick-getaxiscount \"Joystick:getAxisCount\")                                  | Gets the number of axes on the joystick.                                                                                                      | 0.9.0 |     |\n| [Joystick:getButtonCount](joystick-getbuttoncount \"Joystick:getButtonCount\")                            | Gets the number of buttons on the joystick.                                                                                                   | 0.9.0 |     |\n| [Joystick:getConnectedIndex](joystick-getconnectedindex \"Joystick:getConnectedIndex\")                   | Gets joystick connected index.                                                                                                                | 0.9.0 |     |\n| [Joystick:getDeviceInfo](joystick-getdeviceinfo \"Joystick:getDeviceInfo\")                               | Gets the OS-independent device info of the joystick.                                                                                          | 11.3  |     |\n| [Joystick:getGUID](joystick-getguid \"Joystick:getGUID\")                                                 | Gets a stable GUID unique to the type of the physical joystick.                                                                               | 0.9.0 |     |\n| [Joystick:getGamepadAxis](joystick-getgamepadaxis \"Joystick:getGamepadAxis\")                            | Gets the direction of a virtual gamepad axis.                                                                                                 | 0.9.0 |     |\n| [Joystick:getGamepadMapping](joystick-getgamepadmapping \"Joystick:getGamepadMapping\")                   | Gets the button, axis or hat that a virtual gamepad input is bound to.                                                                        | 0.9.0 |     |\n| [Joystick:getGamepadMappingString](joystick-getgamepadmappingstring \"Joystick:getGamepadMappingString\") | Gets the full gamepad mapping string of this Joystick, or nil if it's not recognized as a [gamepad](joystick-isgamepad \"Joystick:isGamepad\"). | 11.3  |     |\n| [Joystick:getHat](joystick-gethat \"Joystick:getHat\")                                                    | Gets the direction of a hat.                                                                                                                  | 0.9.0 |     |\n| [Joystick:getHatCount](joystick-gethatcount \"Joystick:getHatCount\")                                     | Gets the number of hats on the joystick.                                                                                                      | 0.9.0 |     |\n| [Joystick:getID](joystick-getid \"Joystick:getID\")                                                       | Gets the joystick's unique identifier.                                                                                                        | 0.9.0 |     |\n| [Joystick:getName](joystick-getname \"Joystick:getName\")                                                 | Gets the name of the joystick.                                                                                                                | 0.9.0 |     |\n| [Joystick:getVibration](joystick-getvibration \"Joystick:getVibration\")                                  | Gets the current vibration motor strengths on a Joystick with rumble support.                                                                 | 0.9.0 |     |\n| [Joystick:isConnected](joystick-isconnected \"Joystick:isConnected\")                                     | Gets whether the Joystick is connected.                                                                                                       | 0.9.0 |     |\n| [Joystick:isDown](joystick-isdown \"Joystick:isDown\")                                                    | Checks if a button on the Joystick is pressed.                                                                                                | 0.9.0 |     |\n| [Joystick:isGamepad](joystick-isgamepad \"Joystick:isGamepad\")                                           | Gets whether the Joystick is recognized as a gamepad.                                                                                         | 0.9.0 |     |\n| [Joystick:isGamepadDown](joystick-isgamepaddown \"Joystick:isGamepadDown\")                               | Checks if a virtual gamepad button on the Joystick is pressed.                                                                                | 0.9.0 |     |\n| [Joystick:isVibrationSupported](joystick-isvibrationsupported \"Joystick:isVibrationSupported\")          | Gets whether the Joystick supports vibration.                                                                                                 | 0.9.0 |     |\n| [Joystick:setVibration](joystick-setvibration \"Joystick:setVibration\")                                  | Sets the vibration motor speeds on a Joystick with rumble support.                                                                            | 0.9.0 |     |\n| [Object:release](object-release \"Object:release\")                                                       | Immediately destroys the object's Lua reference.                                                                                              | 11.0  |     |\n| [Object:type](object-type \"Object:type\")                                                                | Gets the type of the object as a string.                                                                                                      |       |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                                          | Checks whether an object is of a certain type.                                                                                                |       |     |\n\n## Enums\n\n|                                                            |                           |       |     |\n|------------------------------------------------------------|---------------------------|-------|-----|\n| [GamepadAxis](gamepadaxis \"GamepadAxis\")                   | Virtual gamepad axes.     | 0.9.0 |     |\n| [GamepadButton](gamepadbutton \"GamepadButton\")             | Virtual gamepad buttons.  | 0.9.0 |     |\n| [JoystickHat](joystickhat \"JoystickHat\")                   | Joystick hat positions.   | 0.5.0 |     |\n| [JoystickInputType](joystickinputtype \"JoystickInputType\") | Types of Joystick inputs. | 0.9.0 |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## Examples\n\n### Display the last button pressed of a controller on-screen\n\n``` lua\nlocal lastbutton = \"none\"\n \nfunction love.gamepadpressed(joystick, button)\n    lastbutton = button\nend\n \nfunction love.draw()\n    love.graphics.print(\"Last gamepad button pressed: \"..lastbutton, 10, 10)\nend\n```\n\n### Move a circle with the d-pad of a controller\n\n``` lua\nfunction love.load()\n    local joysticks = love.joystick.getJoysticks()\n    joystick = joysticks[1]\n \n    position = {x = 400, y = 300}\n    speed = 300\nend\n \nfunction love.update(dt)\n    if not joystick then return end\n \n    if joystick:isGamepadDown(\"dpleft\") then\n        position.x = position.x - speed * dt\n    elseif joystick:isGamepadDown(\"dpright\") then\n        position.x = position.x + speed * dt\n    end\n \n    if joystick:isGamepadDown(\"dpup\") then\n        position.y = position.y - speed * dt\n    elseif joystick:isGamepadDown(\"dpdown\") then\n        position.y = position.y + speed * dt\n    end\nend\n \nfunction love.draw()\n    love.graphics.circle(\"fill\", position.x, position.y, 50)\nend\n```\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n- [love.joystick.getJoystickCount](love.joystick.getjoystickcount \"love.joystick.getJoystickCount\")\n\n- [love.joystickadded](love.joystickadded \"love.joystickadded\")\n- [love.joystickremoved](love.joystickremoved \"love.joystickremoved\")\n- [love.joystickpressed](love.joystickpressed \"love.joystickpressed\")\n- [love.joystickreleased](love.joystickreleased \"love.joystickreleased\")\n- [love.joystickaxis](love.joystickaxis \"love.joystickaxis\")\n- [love.joystickhat](love.joystickhat \"love.joystickhat\")\n\n&nbsp;\n\n- [love.gamepadpressed](love.gamepadpressed \"love.gamepadpressed\")\n- [love.gamepadreleased](love.gamepadreleased \"love.gamepadreleased\")\n- [love.gamepadaxis](love.gamepadaxis \"love.gamepadaxis\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick](https://love2d.org/wiki/Joystick)"
- name: Joystick:getAxes
  id: joystick-getaxes
  summary: Available since LÖVE 0.9.0 It has been moved from love.joystick.getAxes
  description: "# Joystick:getAxes\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved from [love.joystick.getAxes](love.joystick.getaxes \"love.joystick.getAxes\").\n\nGets the direction of each axis.\n\n## Function\n\n### Synopsis\n\n``` lua\naxisDir1, axisDir2, ..., axisDirN = Joystick:getAxes( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` axisDir1`  \nDirection of axis1.\n\n[`number`](number \"number\")` axisDir2`  \nDirection of axis2.\n\n[`number`](number \"number\")` axisDirN`  \nDirection of axisN.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:getAxis](joystick-getaxis \"Joystick:getAxis\")\n- [Joystick:getAxisCount](joystick-getaxiscount \"Joystick:getAxisCount\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getAxes](https://love2d.org/wiki/Joystick:getAxes)"
- name: Joystick:getAxis
  id: joystick-getaxis
  summary: Available since LÖVE 0.9.0 It has been moved from love.joystick.getAxis
  description: "# Joystick:getAxis\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved from [love.joystick.getAxis](love.joystick.getaxis \"love.joystick.getAxis\").\n\nGets the direction of an axis.\n\n## Function\n\n### Synopsis\n\n``` lua\ndirection = Joystick:getAxis( axis )\n```\n\n### Arguments\n\n[`number`](number \"number\")` axis`  \nThe index of the axis to be checked.\n\n### Returns\n\n[`number`](number \"number\")` direction`  \nCurrent value of the axis.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:getAxes](joystick-getaxes \"Joystick:getAxes\")\n- [Joystick:getAxisCount](joystick-getaxiscount \"Joystick:getAxisCount\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getAxis](https://love2d.org/wiki/Joystick:getAxis)"
- name: Joystick:getAxisCount
  id: joystick-getaxiscount
  summary: Available since LÖVE 0.9.0 It has been moved from love.joystick.getNumAxes
  description: "# Joystick:getAxisCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved from [love.joystick.getNumAxes](love.joystick.getnumaxes \"love.joystick.getNumAxes\").\n\n  \nGets the number of axes on the joystick.\n\n## Function\n\n### Synopsis\n\n``` lua\naxes = Joystick:getAxisCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` axes`  \nThe number of axes available.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:getAxis](joystick-getaxis \"Joystick:getAxis\")\n- [Joystick:getAxes](joystick-getaxes \"Joystick:getAxes\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getAxisCount](https://love2d.org/wiki/Joystick:getAxisCount)"
- name: Joystick:getButtonCount
  id: joystick-getbuttoncount
  summary: Available since LÖVE 0.9.0 It has been moved from love.joystick.getNumButtons
  description: "# Joystick:getButtonCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved from [love.joystick.getNumButtons](love.joystick.getnumbuttons \"love.joystick.getNumButtons\").\n\nGets the number of buttons on the joystick.\n\n## Function\n\n### Synopsis\n\n``` lua\nbuttons = Joystick:getButtonCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` buttons`  \nThe number of buttons available.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:isDown](joystick-isdown \"Joystick:isDown\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getButtonCount](https://love2d.org/wiki/Joystick:getButtonCount)"
- name: Joystick:getConnectedIndex
  id: joystick-getconnectedindex
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Joystick:getConnectedIndex\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\n  \n\n**This is only raw \"documentation\" of function, that I found, but was not documented. Please update it and then remove this notice!**\n\nGets joystick connected index.\n\n## Function\n\n### Synopsis\n\n``` lua\nindex = Joystick:getConnectedIndex( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` index (nil)`  \nGets joystick connected index.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:isConnected](joystick-isconnected \"Joystick:isConnected\")\n- [Joystick:getGUID](joystick-getguid \"Joystick:getGUID\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getConnectedIndex](https://love2d.org/wiki/Joystick:getConnectedIndex)"
- name: Joystick:getDeviceInfo
  id: joystick-getdeviceinfo
  summary: Available since LÖVE 11.3 This function is not supported in earlier versions
  description: "# Joystick:getDeviceInfo\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis function is not supported in earlier versions.\n\nGets the USB vendor ID, product ID, and product version numbers of joystick which consistent across operating systems.\n\nCan be used to show different icons, etc. for different gamepads.\n\nThis function returns 0 for all the values if LÖVE is compiled with SDL 2.0.5 or earlier.\n\n## Function\n\n### Synopsis\n\n``` lua\nvendorID, productID, productVersion = Joystick:getDeviceInfo( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` vendorID`  \nThe USB vendor ID of the joystick.\n\n[`number`](number \"number\")` productID`  \nThe USB product ID of the joystick.\n\n[`number`](number \"number\")` productVersion`  \nThe product version of the joystick.\n\n## Notes\n\nSome Linux distribution may not ship with SDL 2.0.6 or later, in which case this function will returns 0 for all the three values.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getDeviceInfo](https://love2d.org/wiki/Joystick:getDeviceInfo)"
- name: Joystick:getGamepadAxis
  id: joystick-getgamepadaxis
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Joystick:getGamepadAxis\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the direction of a virtual gamepad axis. If the Joystick isn't recognized as a [gamepad](joystick-isgamepad \"Joystick:isGamepad\") or isn't connected, this function will always return 0.\n\n## Function\n\n### Synopsis\n\n``` lua\ndirection = Joystick:getGamepadAxis( axis )\n```\n\n### Arguments\n\n[`GamepadAxis`](gamepadaxis \"GamepadAxis\")` axis`  \nThe virtual axis to be checked.\n\n### Returns\n\n[`number`](number \"number\")` direction`  \nCurrent value of the axis.\n\n## Examples\n\n### Move x and y values based on a gamepad thumbstick\n\n``` lua\nfunction love.load()\n    x = 0\n    y = 0\n    p1joystick = nil\nend\n \nfunction love.joystickadded(joystick)\n    p1joystick = joystick\nend\n \nfunction love.update(dt)\n    -- Check if joystick connected\n    if p1joystick ~= nil then\n        -- getGamepadAxis returns a value between -1 and 1.\n        -- It returns 0 when it is at rest\n \n        x = x + p1joystick:getGamepadAxis(\"leftx\")\n        y = y + p1joystick:getGamepadAxis(\"lefty\")\n    end\nend\n```\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:isGamepad](joystick-isgamepad \"Joystick:isGamepad\")\n- [Joystick:isGamepadDown](joystick-isgamepaddown \"Joystick:isGamepadDown\")\n- [Joystick:isConnected](joystick-isconnected \"Joystick:isConnected\")\n\n- [love.gamepadaxis](love.gamepadaxis \"love.gamepadaxis\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getGamepadAxis](https://love2d.org/wiki/Joystick:getGamepadAxis)"
- name: Joystick:getGamepadMapping
  id: joystick-getgamepadmapping
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Joystick:getGamepadMapping\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the button, axis or hat that a virtual gamepad input is bound to.\n\n## Function\n\n### Synopsis\n\n``` lua\ninputtype, inputindex, hatdirection = Joystick:getGamepadMapping( axis )\n```\n\n### Arguments\n\n[`GamepadAxis`](gamepadaxis \"GamepadAxis\")` axis`  \nThe virtual gamepad axis to get the binding for.\n\n### Returns\n\n[`JoystickInputType`](joystickinputtype \"JoystickInputType\")` inputtype`  \nThe type of input the virtual gamepad axis is bound to.\n\n[`number`](number \"number\")` inputindex`  \nThe index of the Joystick's button, axis or hat that the virtual gamepad axis is bound to.\n\n[`JoystickHat`](joystickhat \"JoystickHat\")` hatdirection (nil)`  \nThe direction of the hat, if the virtual gamepad axis is bound to a hat. nil otherwise.\n\n### Notes\n\nReturns nil if the Joystick isn't recognized as a gamepad or the virtual gamepad axis is not bound to a Joystick input.\n\n## Function\n\n### Synopsis\n\n``` lua\ninputtype, inputindex, hatdirection = Joystick:getGamepadMapping( button )\n```\n\n### Arguments\n\n[`GamepadButton`](gamepadbutton \"GamepadButton\")` button`  \nThe virtual gamepad button to get the binding for.\n\n### Returns\n\n[`JoystickInputType`](joystickinputtype \"JoystickInputType\")` inputtype`  \nThe type of input the virtual gamepad button is bound to.\n\n[`number`](number \"number\")` inputindex`  \nThe index of the Joystick's button, axis or hat that the virtual gamepad button is bound to.\n\n[`JoystickHat`](joystickhat \"JoystickHat\")` hatdirection (nil)`  \nThe direction of the hat, if the virtual gamepad button is bound to a hat. nil otherwise.\n\n### Notes\n\nReturns nil if the Joystick isn't recognized as a gamepad or the virtual gamepad button is not bound to a Joystick input.\n\n## Notes\n\nThe physical locations for the virtual gamepad axes and buttons correspond as closely as possible to the layout of a standard Xbox 360 controller.\n\n[](https://love2d.org/wiki/File:360_controller.png)\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:isGamepad](joystick-isgamepad \"Joystick:isGamepad\")\n- [Joystick:isGamepadDown](joystick-isgamepaddown \"Joystick:isGamepadDown\")\n- [Joystick:getGamepadAxis](joystick-getgamepadaxis \"Joystick:getGamepadAxis\")\n- [love.joystick.setGamepadMapping](love.joystick.setgamepadmapping \"love.joystick.setGamepadMapping\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getGamepadMapping](https://love2d.org/wiki/Joystick:getGamepadMapping)"
- name: Joystick:getGamepadMappingString
  id: joystick-getgamepadmappingstring
  summary: Available since LÖVE 11.3 This function is not supported in earlier versions
  description: "# Joystick:getGamepadMappingString\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis function is not supported in earlier versions.\n\nGets the full gamepad mapping string of this Joystick, or nil if it's not recognized as a [gamepad](joystick-isgamepad \"Joystick:isGamepad\").\n\nThe mapping string contains binding information used to map the Joystick's buttons an axes to the standard [gamepad layout](joystick-isgamepad \"Joystick:isGamepad\"), and can be used later with [love.joystick.loadGamepadMappings](love.joystick.loadgamepadmappings \"love.joystick.loadGamepadMappings\").\n\n## Function\n\n### Synopsis\n\n``` lua\nmappingstring = Joystick:getGamepadMappingString( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` mappingstring (nil)`  \nA string containing the Joystick's gamepad mappings, or nil if the Joystick is not recognized as a gamepad.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:isGamepad](joystick-isgamepad \"Joystick:isGamepad\")\n- [love.joystick.loadGamepadMappings](love.joystick.loadgamepadmappings \"love.joystick.loadGamepadMappings\")\n- [love.joystick.saveGamepadMappings](love.joystick.savegamepadmappings \"love.joystick.saveGamepadMappings\")\n- [love.joystick.setGamepadMapping](love.joystick.setgamepadmapping \"love.joystick.setGamepadMapping\")\n- [Joystick:getGamepadMapping](joystick-getgamepadmapping \"Joystick:getGamepadMapping\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getGamepadMappingString](https://love2d.org/wiki/Joystick:getGamepadMappingString)"
- name: Joystick:getGUID
  id: joystick-getguid
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Joystick:getGUID\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets a stable GUID unique to the type of the physical joystick which does not change over time. For example, all Sony Dualshock 3 controllers in OS X have the same GUID. The value is platform-dependent.\n\n## Function\n\n### Synopsis\n\n``` lua\nguid = Joystick:getGUID( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` guid`  \nThe Joystick type's OS-dependent unique identifier.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:getID](joystick-getid \"Joystick:getID\")\n- [love.joystick.setGamepadMapping](love.joystick.setgamepadmapping \"love.joystick.setGamepadMapping\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getGUID](https://love2d.org/wiki/Joystick:getGUID)"
- name: Joystick:getHat
  id: joystick-gethat
  summary: Available since LÖVE 0.9.0 It has been moved from love.joystick.getHat
  description: "# Joystick:getHat\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved from [love.joystick.getHat](love.joystick.gethat \"love.joystick.getHat\").\n\nGets the direction of the Joystick's [hat](https://en.wikipedia.org/wiki/Joystick#Hat_switch).\n\n## Function\n\n### Synopsis\n\n``` lua\ndirection = Joystick:getHat( hat )\n```\n\n### Arguments\n\n[`number`](number \"number\")` hat`  \nThe index of the hat to be checked.\n\n### Returns\n\n[`JoystickHat`](joystickhat \"JoystickHat\")` direction`  \nThe direction the hat is pushed.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:getHatCount](joystick-gethatcount \"Joystick:getHatCount\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getHat](https://love2d.org/wiki/Joystick:getHat)"
- name: Joystick:getHatCount
  id: joystick-gethatcount
  summary: Available since LÖVE 0.9.0 It has been moved from love.joystick.getNumHats
  description: "# Joystick:getHatCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved from [love.joystick.getNumHats](love.joystick.getnumhats \"love.joystick.getNumHats\").\n\nGets the number of hats on the joystick.\n\n## Function\n\n### Synopsis\n\n``` lua\nhats = Joystick:getHatCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` hats`  \nHow many hats the joystick has.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:getHat](joystick-gethat \"Joystick:getHat\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getHatCount](https://love2d.org/wiki/Joystick:getHatCount)"
- name: Joystick:getID
  id: joystick-getid
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Joystick:getID\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the joystick's unique identifier. The identifier will remain the same for the life of the game, even when the Joystick is disconnected and reconnected, but it **will** change when the game is re-launched.\n\n## Function\n\n### Synopsis\n\n``` lua\nid, instanceid = Joystick:getID( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` id`  \nThe Joystick's unique identifier. Remains the same as long as the game is running.\n\n[`number`](number \"number\")` instanceid (nil)`  \nUnique instance identifier. Changes every time the Joystick is reconnected. nil if the Joystick is not connected.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:isConnected](joystick-isconnected \"Joystick:isConnected\")\n- [Joystick:getGUID](joystick-getguid \"Joystick:getGUID\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getID](https://love2d.org/wiki/Joystick:getID)"
- name: Joystick:getName
  id: joystick-getname
  summary: Available since LÖVE 0.9.0 It has been moved from love.joystick.getName
  description: "# Joystick:getName\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved from [love.joystick.getName](love.joystick.getname \"love.joystick.getName\").\n\nGets the name of the joystick.\n\n## Function\n\n### Synopsis\n\n``` lua\nname = Joystick:getName( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` name`  \nThe name of the joystick.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getName](https://love2d.org/wiki/Joystick:getName)"
- name: Joystick:getVibration
  id: joystick-getvibration
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Joystick:getVibration\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the current vibration motor strengths on a Joystick with rumble support.\n\n## Function\n\n### Synopsis\n\n``` lua\nleft, right = Joystick:getVibration( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` left`  \nCurrent strength of the left vibration motor on the Joystick.\n\n[`number`](number \"number\")` right`  \nCurrent strength of the right vibration motor on the Joystick.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:setVibration](joystick-setvibration \"Joystick:setVibration\")\n- [Joystick:isVibrationSupported](joystick-isvibrationsupported \"Joystick:isVibrationSupported\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:getVibration](https://love2d.org/wiki/Joystick:getVibration)"
- name: Joystick:isConnected
  id: joystick-isconnected
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Joystick:isConnected\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Joystick is connected.\n\n## Function\n\n### Synopsis\n\n``` lua\nconnected = Joystick:isConnected( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` connected`  \nTrue if the Joystick is currently connected, false otherwise.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [love.joystickadded](love.joystickadded \"love.joystickadded\")\n- [love.joystickremoved](love.joystickremoved \"love.joystickremoved\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:isConnected](https://love2d.org/wiki/Joystick:isConnected)"
- name: Joystick:isDown
  id: joystick-isdown
  summary: Available since LÖVE 0.9.0 It has been moved from love.joystick.isDown
  description: "# Joystick:isDown\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved from [love.joystick.isDown](love.joystick.isdown \"love.joystick.isDown\").\n\nChecks if a button on the Joystick is pressed.\n\nLÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") had a bug which required the button indices passed to Joystick:isDown to be 0-based instead of 1-based, for example button 1 would be 0 for this function. It was fixed in [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\").\n\n## Function\n\n### Synopsis\n\n``` lua\nanyDown = Joystick:isDown( buttonN, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` buttonN`  \nThe index of a button to check.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` anyDown`  \nTrue if any supplied button is down, false if not.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:getButtonCount](joystick-getbuttoncount \"Joystick:getButtonCount\")\n- [love.joystickpressed](love.joystickpressed \"love.joystickpressed\")\n- [love.joystickreleased](love.joystickreleased \"love.joystickreleased\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:isDown](https://love2d.org/wiki/Joystick:isDown)"
- name: Joystick:isGamepad
  id: joystick-isgamepad
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Joystick:isGamepad\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Joystick is recognized as a gamepad. If this is the case, the Joystick's buttons and axes can be used in a standardized manner across different operating systems and joystick models via [Joystick:getGamepadAxis](joystick-getgamepadaxis \"Joystick:getGamepadAxis\"), [Joystick:isGamepadDown](joystick-isgamepaddown \"Joystick:isGamepadDown\"), [love.gamepadpressed](love.gamepadpressed \"love.gamepadpressed\"), and related functions.\n\nLÖVE automatically recognizes most popular controllers with a similar layout to the Xbox 360 controller as gamepads, but you can add more with [love.joystick.setGamepadMapping](love.joystick.setgamepadmapping \"love.joystick.setGamepadMapping\").\n\n## Function\n\n### Synopsis\n\n``` lua\nisgamepad = Joystick:isGamepad( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` isgamepad`  \nTrue if the Joystick is recognized as a gamepad, false otherwise.\n\n## Notes\n\nIf the Joystick is recognized as a gamepad, the physical locations for the virtual gamepad axes and buttons correspond as closely as possible to the layout of a standard Xbox 360 controller.\n\n[](https://love2d.org/wiki/File:360_controller.png)\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:getGamepadAxis](joystick-getgamepadaxis \"Joystick:getGamepadAxis\")\n- [Joystick:isGamepadDown](joystick-isgamepaddown \"Joystick:isGamepadDown\")\n- [Joystick:getGamepadMapping](joystick-getgamepadmapping \"Joystick:getGamepadMapping\")\n\n- [love.gamepadaxis](love.gamepadaxis \"love.gamepadaxis\")\n- [love.gamepadpressed](love.gamepadpressed \"love.gamepadpressed\")\n- [love.gamepadreleased](love.gamepadreleased \"love.gamepadreleased\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:isGamepad](https://love2d.org/wiki/Joystick:isGamepad)"
- name: Joystick:isGamepadDown
  id: joystick-isgamepaddown
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Joystick:isGamepadDown\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nChecks if a virtual gamepad button on the Joystick is pressed. If the Joystick is not recognized as a [Gamepad](joystick-isgamepad \"Joystick:isGamepad\") or isn't connected, then this function will always return false.\n\n## Function\n\n### Synopsis\n\n``` lua\nanyDown = Joystick:isGamepadDown( button1, button2, button3, ... )\n```\n\n### Arguments\n\n[`GamepadButton`](gamepadbutton \"GamepadButton\")` buttonN`  \nThe gamepad button to check.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` anyDown`  \nTrue if any supplied button is down, false if not.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:isGamepad](joystick-isgamepad \"Joystick:isGamepad\")\n- [Joystick:getGamepadAxis](joystick-getgamepadaxis \"Joystick:getGamepadAxis\")\n- [Joystick:isConnected](joystick-isconnected \"Joystick:isConnected\")\n\n- [love.gamepadpressed](love.gamepadpressed \"love.gamepadpressed\")\n- [love.gamepadreleased](love.gamepadreleased \"love.gamepadreleased\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:isGamepadDown](https://love2d.org/wiki/Joystick:isGamepadDown)"
- name: Joystick:isVibrationSupported
  id: joystick-isvibrationsupported
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Joystick:isVibrationSupported\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Joystick supports vibration.\n\n## Function\n\n### Synopsis\n\n``` lua\nsupported = Joystick:isVibrationSupported( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` supported`  \nTrue if rumble / force feedback vibration is supported on this Joystick, false if not.\n\n## Notes\n\nThe very first call to this function may take more time than expected because SDL's Haptic / Force Feedback subsystem needs to be initialized.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:setVibration](joystick-setvibration \"Joystick:setVibration\")\n- [Joystick:getVibration](joystick-getvibration \"Joystick:getVibration\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:isVibrationSupported](https://love2d.org/wiki/Joystick:isVibrationSupported)"
- name: Joystick:setVibration
  id: joystick-setvibration
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Joystick:setVibration\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the vibration motor speeds on a Joystick with rumble support. Most common gamepads have this functionality, although not all drivers give proper support. Use [Joystick:isVibrationSupported](joystick-isvibrationsupported \"Joystick:isVibrationSupported\") to check.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = Joystick:setVibration( left, right )\n```\n\n### Arguments\n\n[`number`](number \"number\")` left`  \nStrength of the left vibration motor on the Joystick. Must be in the range of \\[0, 1\\].\n\n[`number`](number \"number\")` right`  \nStrength of the right vibration motor on the Joystick. Must be in the range of \\[0, 1\\].\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the vibration was successfully applied, false if not.\n\n## Function\n\nDisables vibration.\n\n### Synopsis\n\n``` lua\nsuccess = Joystick:setVibration( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the vibration was successfully disabled, false if not.\n\n## Function\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nsuccess = Joystick:setVibration( left, right, duration )\n```\n\n### Arguments\n\n[`number`](number \"number\")` left`  \nStrength of the left vibration motor on the Joystick. Must be in the range of \\[0, 1\\].\n\n[`number`](number \"number\")` right`  \nStrength of the right vibration motor on the Joystick. Must be in the range of \\[0, 1\\].\n\n[`number`](number \"number\")` duration (-1)`  \nThe duration of the vibration in seconds. A negative value means infinite duration.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the vibration was successfully applied, false if not.\n\n## Notes\n\nIf the Joystick only has a single vibration motor, it will still work but it will use the largest value of the left and right parameters.\n\nThe Xbox 360 controller on Mac OS X only has support for vibration if a [modified version](https://github.com/d235j/360Controller/releases) of the Tattiebogle driver is used.\n\nThe very first call to this function may take more time than expected because SDL's Haptic / Force Feedback subsystem needs to be initialized.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [Joystick:getVibration](joystick-getvibration \"Joystick:getVibration\")\n- [Joystick:isVibrationSupported](joystick-isvibrationsupported \"Joystick:isVibrationSupported\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Joystick:setVibration](https://love2d.org/wiki/Joystick:setVibration)"
- name: JoystickConstant
  id: joystickconstant
  summary: Available since LÖVE 0.5.0 This enum is not supported in earlier versions
  description: "# JoystickConstant\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\")**  \nThis enum is not supported in earlier versions.\n\nJoystick hat positions.\n\n## Constants\n\nc  \nCentered\n\nd  \nDown\n\nl  \nLeft\n\nld  \nLeft+Down\n\nlu  \nLeft+Up\n\nr  \nRight\n\nrd  \nRight+Down\n\nru  \nRight+Up\n\nu  \nUp\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n- [Joystick](joystick \"Joystick\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/JoystickConstant](https://love2d.org/wiki/JoystickConstant)"
- name: JoystickHat
  id: joystickhat
  summary: Available since LÖVE 0.5.0 This enum is not supported in earlier versions
  description: "# JoystickHat\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\")**  \nThis enum is not supported in earlier versions.\n\nJoystick hat positions.\n\n## Constants\n\nc  \nCentered\n\nd  \nDown\n\nl  \nLeft\n\nld  \nLeft+Down\n\nlu  \nLeft+Up\n\nr  \nRight\n\nrd  \nRight+Down\n\nru  \nRight+Up\n\nu  \nUp\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n- [Joystick](joystick \"Joystick\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/JoystickHat](https://love2d.org/wiki/JoystickHat)"
- name: JoystickInputType
  id: joystickinputtype
  summary: Available since LÖVE 0.9.0 This enum is not supported in earlier versions
  description: "# JoystickInputType\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in earlier versions.\n\nTypes of Joystick inputs.\n\n## Constants\n\naxis  \nAnalog axis.\n\nbutton  \nButton.\n\nhat  \n8-direction [hat](joystickhat \"JoystickHat\") value.\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [love.joystick](love.joystick \"love.joystick\")\n- [love.joystick.setGamepadMapping](love.joystick.setgamepadmapping \"love.joystick.setGamepadMapping\")\n- [Joystick:getGamepadMapping](joystick-getgamepadmapping \"Joystick:getGamepadMapping\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/JoystickInputType](https://love2d.org/wiki/JoystickInputType)"
- name: KeyConstant
  id: keyconstant
  summary: All the keys you can press
  description: "# KeyConstant\n\nAll the keys you can press. Note that some keys may not be available on your keyboard or system.\n\n## Constants\n\n|                    |                               |                                                                                                                              |\n|--------------------|-------------------------------|------------------------------------------------------------------------------------------------------------------------------|\n| Key string         | Description                   | Note(s)                                                                                                                      |\n| Character keys     |                               |                                                                                                                              |\n| a                  | The A key                     |                                                                                                                              |\n| b                  | The B key                     |                                                                                                                              |\n| c                  | The C key                     |                                                                                                                              |\n| d                  | The D key                     |                                                                                                                              |\n| e                  | The E key                     |                                                                                                                              |\n| f                  | The F key                     |                                                                                                                              |\n| g                  | The G key                     |                                                                                                                              |\n| h                  | The H key                     |                                                                                                                              |\n| i                  | The I key                     |                                                                                                                              |\n| j                  | The J key                     |                                                                                                                              |\n| k                  | The K key                     |                                                                                                                              |\n| l                  | The L key                     |                                                                                                                              |\n| m                  | The M key                     |                                                                                                                              |\n| n                  | The N key                     |                                                                                                                              |\n| o                  | The O key                     |                                                                                                                              |\n| p                  | The P key                     |                                                                                                                              |\n| q                  | The Q key                     |                                                                                                                              |\n| r                  | The R key                     |                                                                                                                              |\n| s                  | The S key                     |                                                                                                                              |\n| t                  | The T key                     |                                                                                                                              |\n| u                  | The U key                     |                                                                                                                              |\n| v                  | The V key                     |                                                                                                                              |\n| w                  | The W key                     |                                                                                                                              |\n| x                  | The X key                     |                                                                                                                              |\n| y                  | The Y key                     |                                                                                                                              |\n| z                  | The Z key                     |                                                                                                                              |\n| 0                  | The zero key                  |                                                                                                                              |\n| 1                  | The one key                   |                                                                                                                              |\n| 2                  | The two key                   |                                                                                                                              |\n| 3                  | The three key                 |                                                                                                                              |\n| 4                  | The four key                  |                                                                                                                              |\n| 5                  | The five key                  |                                                                                                                              |\n| 6                  | The six key                   |                                                                                                                              |\n| 7                  | The seven key                 |                                                                                                                              |\n| 8                  | The eight key                 |                                                                                                                              |\n| 9                  | The nine key                  |                                                                                                                              |\n| space              | Space key                     | In version [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and earlier this is represented by the actual space character ' '. |\n| !                  | Exclamation mark key          |                                                                                                                              |\n| \"                  | Double quote key              |                                                                                                                              |\n| \\#                 | Hash key                      |                                                                                                                              |\n| $                  | Dollar key                    |                                                                                                                              |\n| &                  | Ampersand key                 |                                                                                                                              |\n| '                  | Single quote key              |                                                                                                                              |\n| (                  | Left parenthesis key          |                                                                                                                              |\n| )                  | Right parenthesis key         |                                                                                                                              |\n| \\*                 | Asterisk key                  |                                                                                                                              |\n| \\+                 | Plus key                      |                                                                                                                              |\n| ,                  | Comma key                     |                                                                                                                              |\n| \\-                 | Hyphen-minus key              |                                                                                                                              |\n| .                  | Full stop key                 |                                                                                                                              |\n| /                  | Slash key                     |                                                                                                                              |\n| :                  | Colon key                     |                                                                                                                              |\n| ;                  | Semicolon key                 |                                                                                                                              |\n| \\<                 | Less-than key                 |                                                                                                                              |\n| =                  | Equal key                     |                                                                                                                              |\n| \\>                 | Greater-than key              |                                                                                                                              |\n| ?                  | Question mark key             |                                                                                                                              |\n| @                  | At sign key                   |                                                                                                                              |\n| \\[                 | Left square bracket key       |                                                                                                                              |\n| \\\\                 | Backslash key                 |                                                                                                                              |\n| \\]                 | Right square bracket key      |                                                                                                                              |\n| ^                  | Caret key                     |                                                                                                                              |\n| \\_                 | Underscore key                |                                                                                                                              |\n| \\`                 | Grave accent key              | Also known as the \"Back tick\" key                                                                                            |\n| Numpad keys        |                               |                                                                                                                              |\n| kp0                | The numpad zero key           |                                                                                                                              |\n| kp1                | The numpad one key            |                                                                                                                              |\n| kp2                | The numpad two key            |                                                                                                                              |\n| kp3                | The numpad three key          |                                                                                                                              |\n| kp4                | The numpad four key           |                                                                                                                              |\n| kp5                | The numpad five key           |                                                                                                                              |\n| kp6                | The numpad six key            |                                                                                                                              |\n| kp7                | The numpad seven key          |                                                                                                                              |\n| kp8                | The numpad eight key          |                                                                                                                              |\n| kp9                | The numpad nine key           |                                                                                                                              |\n| kp.                | The numpad decimal point key  |                                                                                                                              |\n| kp,                | The numpad comma key          |                                                                                                                              |\n| kp/                | The numpad division key       |                                                                                                                              |\n| kp\\*               | The numpad multiplication key |                                                                                                                              |\n| kp-                | The numpad substraction key   |                                                                                                                              |\n| kp+                | The numpad addition key       |                                                                                                                              |\n| kpenter            | The numpad enter key          |                                                                                                                              |\n| kp=                | The numpad equals key         |                                                                                                                              |\n| Navigation keys    |                               |                                                                                                                              |\n| up                 | Up arrow key                  |                                                                                                                              |\n| down               | Down arrow key                |                                                                                                                              |\n| right              | Right arrow key               |                                                                                                                              |\n| left               | Left arrow key                |                                                                                                                              |\n| home               | Home key                      |                                                                                                                              |\n| end                | End key                       |                                                                                                                              |\n| pageup             | Page up key                   |                                                                                                                              |\n| pagedown           | Page down key                 |                                                                                                                              |\n| Editing keys       |                               |                                                                                                                              |\n| insert             | Insert key                    |                                                                                                                              |\n| backspace          | Backspace key                 |                                                                                                                              |\n| tab                | Tab key                       |                                                                                                                              |\n| clear              | Clear key                     |                                                                                                                              |\n| return             | Return key                    | Also known as the Enter key                                                                                                  |\n| delete             | Delete key                    |                                                                                                                              |\n| Function keys      |                               |                                                                                                                              |\n| f1                 | The 1st function key          |                                                                                                                              |\n| f2                 | The 2nd function key          |                                                                                                                              |\n| f3                 | The 3rd function key          |                                                                                                                              |\n| f4                 | The 4th function key          |                                                                                                                              |\n| f5                 | The 5th function key          |                                                                                                                              |\n| f6                 | The 6th function key          |                                                                                                                              |\n| f7                 | The 7th function key          |                                                                                                                              |\n| f8                 | The 8th function key          |                                                                                                                              |\n| f9                 | The 9th function key          |                                                                                                                              |\n| f10                | The 10th function key         |                                                                                                                              |\n| f11                | The 11th function key         |                                                                                                                              |\n| f12                | The 12th function key         |                                                                                                                              |\n| f13                | The 13th function key         |                                                                                                                              |\n| f14                | The 14th function key         |                                                                                                                              |\n| f15                | The 15th function key         |                                                                                                                              |\n| f16                | The 16th function key         |                                                                                                                              |\n| f17                | The 17th function key         |                                                                                                                              |\n| f18                | The 18th function key         |                                                                                                                              |\n| Modifier keys      |                               |                                                                                                                              |\n| numlock            | Num-lock key                  | Clear on Mac keyboards.                                                                                                      |\n| capslock           | Caps-lock key                 | Caps-on is a key press. Caps-off is a key release.                                                                           |\n| scrolllock         | Scroll-lock key               |                                                                                                                              |\n| rshift             | Right shift key               |                                                                                                                              |\n| lshift             | Left shift key                |                                                                                                                              |\n| rctrl              | Right control key             |                                                                                                                              |\n| lctrl              | Left control key              |                                                                                                                              |\n| ralt               | Right alt key                 |                                                                                                                              |\n| lalt               | Left alt key                  |                                                                                                                              |\n| rgui               | Right gui key                 | Command key in OS X, Windows key in Windows.                                                                                 |\n| lgui               | Left gui key                  | Command key in OS X, Windows key in Windows.                                                                                 |\n| mode               | Mode key                      |                                                                                                                              |\n| Application keys   |                               |                                                                                                                              |\n| www                | WWW key                       |                                                                                                                              |\n| mail               | Mail key                      |                                                                                                                              |\n| calculator         | Calculator key                |                                                                                                                              |\n| computer           | Computer key                  |                                                                                                                              |\n| appsearch          | Application search key        |                                                                                                                              |\n| apphome            | Application home key          |                                                                                                                              |\n| appback            | Application back key          |                                                                                                                              |\n| appforward         | Application forward key       |                                                                                                                              |\n| apprefresh         | Application refresh key       |                                                                                                                              |\n| appbookmarks       | Application bookmarks key     |                                                                                                                              |\n| Miscellaneous keys |                               |                                                                                                                              |\n| pause              | Pause key                     | Sends a key release immediately on some platforms, even if held down.                                                        |\n| escape             | Escape key                    |                                                                                                                              |\n| help               | Help key                      |                                                                                                                              |\n| printscreen        | Printscreen key               | Sends a key release immediately on Windows, even if held down.                                                               |\n| sysreq             | System request key            |                                                                                                                              |\n| menu               | Menu key                      |                                                                                                                              |\n| application        | Application key               | Windows contextual menu, compose key.                                                                                        |\n| power              | Power key                     |                                                                                                                              |\n| currencyunit       | Currency unit key             | e.g. the Euro (€) key.                                                                                                       |\n| undo               | Undo key                      |                                                                                                                              |\n\n## Examples\n\nNote how [love.keypressed](love.keypressed \"love.keypressed\") gives direct key presses, whereas [love.textinput](love.textinput \"love.textinput\") gives the text that key combinations produce.\n\nLet's take the \"#\" symbol as an example (assuming a U.S. keyboard):\n\n``` lua\nfunction love.keypressed(key)\n    print(key)\nend\n--> shift\n--> 3\n \nfunction love.textinput(text)\n    print(text)\nend\n--> #\n```\n\n## See Also\n\n- [love.keyboard](love.keyboard \"love.keyboard\")\n- [love.keypressed](love.keypressed \"love.keypressed\")\n- [love.keyreleased](love.keyreleased \"love.keyreleased\")\n- [love.keyboard.isDown](love.keyboard.isdown \"love.keyboard.isDown\")\n- [love.keyboard.getScancodeFromKey](love.keyboard.getscancodefromkey \"love.keyboard.getScancodeFromKey\")\n- [love.keyboard.getKeyFromScancode](love.keyboard.getkeyfromscancode \"love.keyboard.getKeyFromScancode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/KeyConstant](https://love2d.org/wiki/KeyConstant)"
- name: light userdata
  id: light_userdata
  summary: (Full) userdata represent C values in Lua
  description: "# light userdata\n\nFrom the Lua Reference Manual:\n\n(Full) userdata represent C values in Lua.\n\nA light userdata represents a pointer. It is a value (like a number): you do not create it, it has no individual metatable, and it is not garbage collected (as it was never created).\n\nA light userdata is equal to \"any\" light userdata with the same C address.\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/light_userdata](https://love2d.org/wiki/light_userdata)"
- name: LineJoin
  id: linejoin
  summary: Line join style
  description: "# LineJoin\n\nLine join style.\n\n[](https://love2d.org/wiki/File:Linejoin.png)\n\n## Constants\n\nmiter  \nThe ends of the line segments beveled in an angle so that they join seamlessly.\n\nnone  \nNo cap applied to the ends of the line segments.\n\nbevel  \nFlattens the point where line segments join together.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setLineJoin](love.graphics.setlinejoin \"love.graphics.setLineJoin\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/LineJoin](https://love2d.org/wiki/LineJoin)"
- name: LineStyle
  id: linestyle
  summary: The styles in which lines are drawn
  description: "# LineStyle\n\nThe styles in which lines are drawn.\n\n## Constants\n\nrough  \nDraw rough lines.\n\nsmooth  \nDraw smooth lines.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setLineStyle](love.graphics.setlinestyle \"love.graphics.setLineStyle\")\n- [love.graphics.setLineStipple](love.graphics.setlinestipple \"love.graphics.setLineStipple\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/LineStyle](https://love2d.org/wiki/LineStyle)"
- name: love
  id: love
  summary: 'When beginning to write games using LÖVE, the most important parts of the API are the callbacks: love.load to do one-time setup of your game, love.update which is used to manage your game''s state frame-to-frame, and love.draw which is used to render the game state onto the screen'
  description: "# love\n\nWhen beginning to write games using LÖVE, the most important parts of the API are the callbacks: [love.load](love.load \"love.load\") to do one-time setup of your game, [love.update](love.update \"love.update\") which is used to manage your game's state frame-to-frame, and [love.draw](love.draw \"love.draw\") which is used to render the game state onto the screen.\n\nMore interactive games will override additional callbacks in order to handle input from the user, and other aspects of a full-featured game.\n\nLÖVE provides default placeholders for these callbacks, which you can override inside your own code by creating your own function with the same name as the callback:\n\n``` lua\n-- Load some default values for our rectangle.\nfunction love.load()\n    x, y, w, h = 20, 20, 60, 20\nend\n \n-- Increase the size of the rectangle every frame.\nfunction love.update(dt)\n    w = w + 1\n    h = h + 1\nend\n \n-- Draw a coloured rectangle.\nfunction love.draw()\n    -- In versions prior to 11.0, color component values are (0, 102, 102)\n    love.graphics.setColor(0, 0.4, 0.4)\n    love.graphics.rectangle(\"fill\", x, y, w, h)\nend\n```\n\n## Modules\n\n|                                                      |                                                                    |        |     |\n|------------------------------------------------------|--------------------------------------------------------------------|--------|-----|\n| [love.audio](love.audio \"love.audio\")                | Provides of audio interface for playback/recording sound.          |        |     |\n| [love.data](love.data \"love.data\")                   | Provides functionality for creating and transforming data.         | 11.0   |     |\n| [love.event](love.event \"love.event\")                | Manages events, like keypresses.                                   | 0.6.0  |     |\n| [love.filesystem](love.filesystem \"love.filesystem\") | Provides an interface to the user's filesystem.                    |        |     |\n| [love.font](love.font \"love.font\")                   | Allows you to work with fonts.                                     | 0.7.0  |     |\n| [love.graphics](love.graphics \"love.graphics\")       | Drawing of shapes and images, management of screen geometry.       |        |     |\n| [love.image](love.image \"love.image\")                | Provides an interface to decode encoded image data.                |        |     |\n| [love.joystick](love.joystick \"love.joystick\")       | Provides an interface to connected joysticks.                      | 0.5.0  |     |\n| [love.keyboard](love.keyboard \"love.keyboard\")       | Provides an interface to the user's keyboard.                      |        |     |\n| [love.math](love.math \"love.math\")                   | Provides system-independent mathematical functions.                | 0.9.0  |     |\n| [love.mouse](love.mouse \"love.mouse\")                | Provides an interface to the user's mouse.                         |        |     |\n| [love.physics](love.physics \"love.physics\")          | Can simulate 2D rigid body physics in a realistic manner.          | 0.4.0  |     |\n| [love.sound](love.sound \"love.sound\")                | This module is responsible for decoding sound files.               |        |     |\n| [love.system](love.system \"love.system\")             | Provides access to information about the user's system.            | 0.9.0  |     |\n| [love.thread](love.thread \"love.thread\")             | Allows you to work with threads.                                   | 0.7.0  |     |\n| [love.timer](love.timer \"love.timer\")                | Provides high-resolution timing functionality.                     |        |     |\n| [love.touch](love.touch \"love.touch\")                | Provides an interface to touch-screen presses.                     | 0.10.0 |     |\n| [love.video](love.video \"love.video\")                | This module is responsible for decoding and streaming video files. | 0.10.0 |     |\n| [love.window](love.window \"love.window\")             | Provides an interface for the program's window.                    | 0.9.0  |     |\n\n## Third-party modules\n\n|                                 |                                                        |       |     |\n|---------------------------------|--------------------------------------------------------|-------|-----|\n| [lua-enet](lua-enet \"lua-enet\") | Multiplayer networking module for games.               | 0.9.0 |     |\n| [socket](socket \"socket\")       | Module for HTTP, TCP, and UDP networking.              | 0.5.0 |     |\n| [utf8](utf8 \"utf8\")             | Provides basic support for manipulating UTF-8 strings. | 0.9.2 |     |\n\n## Functions\n\n|                                                                                    |                                                                               |        |     |\n|------------------------------------------------------------------------------------|-------------------------------------------------------------------------------|--------|-----|\n| [love.getVersion](love.getversion \"love.getVersion\")                               | Gets the current running version of LÖVE.                                     | 0.9.1  |     |\n| [love.hasDeprecationOutput](love.hasdeprecationoutput \"love.hasDeprecationOutput\") | Gets whether LÖVE displays warnings when using deprecated functionality.      | 11.0   |     |\n| [love.isVersionCompatible](love.isversioncompatible \"love.isVersionCompatible\")    | Gets whatever the version is compatible with current running version of LÖVE. | 0.10.0 |     |\n| [love.setDeprecationOutput](love.setdeprecationoutput \"love.setDeprecationOutput\") | Sets whether LÖVE displays warnings when using deprecated functionality.      | 11.0   |     |\n\n## Types\n\n|                              |                                                                                                            |     |     |\n|------------------------------|------------------------------------------------------------------------------------------------------------|-----|-----|\n| [Data](data \"Data\")          | The superclass of all data.                                                                                |     |     |\n| [Object](object \"Object\")    | The superclass of all LÖVE types.                                                                          |     |     |\n| [Variant](variant \"Variant\") | The types supported by [love.thread](love.thread \"love.thread\") and [love.event](love.event \"love.event\"). |     |     |\n\n## Callbacks\n\nAll callbacks are only called in main thread.\n\n### General\n\n|                                                                  |                                                                                         |        |      |\n|------------------------------------------------------------------|-----------------------------------------------------------------------------------------|--------|------|\n| [Config Files](love.conf \"Config Files\")                         | Game configuration settings.                                                            |        |      |\n| [love.displayrotated](love.displayrotated \"love.displayrotated\") | Called when the device display orientation changed.                                     | 11.3   |      |\n| [love.draw](love.draw \"love.draw\")                               | Callback function used to draw on the screen every frame.                               |        |      |\n| [love.errhand](love.errhand \"love.errhand\")                      | The error handler, used to display error messages.                                      |        | 11.0 |\n| [love.errorhandler](love.errorhandler \"love.errorhandler\")       | The error handler, used to display error messages.                                      | 11.0   |      |\n| [love.load](love.load \"love.load\")                               | This function is called exactly once at the beginning of the game.                      |        |      |\n| [love.lowmemory](love.lowmemory \"love.lowmemory\")                | Callback function triggered when the system is running out of memory on mobile devices. | 0.10.0 |      |\n| [love.quit](love.quit \"love.quit\")                               | Callback function triggered when the game is closed.                                    | 0.7.0  |      |\n| [love.run](love.run \"love.run\")                                  | The main function, containing the main loop. A sensible default is used when left out.  |        |      |\n| [love.threaderror](love.threaderror \"love.threaderror\")          | Callback function triggered when a [Thread](thread \"Thread\") encounters an error.       | 0.9.0  |      |\n| [love.update](love.update \"love.update\")                         | Callback function used to update the state of the game every frame.                     |        |      |\n\n### Window\n\n|                                                                        |                                                                                      |        |     |\n|------------------------------------------------------------------------|--------------------------------------------------------------------------------------|--------|-----|\n| [love.directorydropped](love.directorydropped \"love.directorydropped\") | Callback function triggered when a directory is dragged and dropped onto the window. | 0.10.0 |     |\n| [love.filedropped](love.filedropped \"love.filedropped\")                | Callback function triggered when a file is dragged and dropped onto the window.      | 0.10.0 |     |\n| [love.focus](love.focus \"love.focus\")                                  | Callback function triggered when window receives or loses focus.                     | 0.7.0  |     |\n| [love.mousefocus](love.mousefocus \"love.mousefocus\")                   | Callback function triggered when window receives or loses mouse focus.               | 0.9.0  |     |\n| [love.resize](love.resize \"love.resize\")                               | Called when the window is resized.                                                   | 0.9.0  |     |\n| [love.visible](love.visible \"love.visible\")                            | Callback function triggered when window is shown or hidden.                          | 0.9.0  |     |\n\n### Keyboard\n\n|                                                         |                                                              |        |     |\n|---------------------------------------------------------|--------------------------------------------------------------|--------|-----|\n| [love.keypressed](love.keypressed \"love.keypressed\")    | Callback function triggered when a key is pressed.           |        |     |\n| [love.keyreleased](love.keyreleased \"love.keyreleased\") | Callback function triggered when a keyboard key is released. |        |     |\n| [love.textedited](love.textedited \"love.textedited\")    | Called when the candidate text for an IME has changed.       | 0.10.0 |     |\n| [love.textinput](love.textinput \"love.textinput\")       | Called when text has been entered by the user.               | 0.9.0  |     |\n\n### Mouse\n\n|                                                               |                                                              |        |     |\n|---------------------------------------------------------------|--------------------------------------------------------------|--------|-----|\n| [love.mousemoved](love.mousemoved \"love.mousemoved\")          | Callback function triggered when the mouse is moved.         | 0.9.2  |     |\n| [love.mousepressed](love.mousepressed \"love.mousepressed\")    | Callback function triggered when a mouse button is pressed.  |        |     |\n| [love.mousereleased](love.mousereleased \"love.mousereleased\") | Callback function triggered when a mouse button is released. |        |     |\n| [love.wheelmoved](love.wheelmoved \"love.wheelmoved\")          | Callback function triggered when the mouse wheel is moved.   | 0.10.0 |     |\n\n### Joystick\n\n|                                                                        |                                                                |       |     |\n|------------------------------------------------------------------------|----------------------------------------------------------------|-------|-----|\n| [love.gamepadaxis](love.gamepadaxis \"love.gamepadaxis\")                | Called when a Joystick's virtual gamepad axis is moved.        | 0.9.0 |     |\n| [love.gamepadpressed](love.gamepadpressed \"love.gamepadpressed\")       | Called when a Joystick's virtual gamepad button is pressed.    | 0.9.0 |     |\n| [love.gamepadreleased](love.gamepadreleased \"love.gamepadreleased\")    | Called when a Joystick's virtual gamepad button is released.   | 0.9.0 |     |\n| [love.joystickadded](love.joystickadded \"love.joystickadded\")          | Called when a [Joystick](joystick \"Joystick\") is connected.    | 0.9.0 |     |\n| [love.joystickaxis](love.joystickaxis \"love.joystickaxis\")             | Called when a joystick axis moves.                             | 0.9.0 |     |\n| [love.joystickhat](love.joystickhat \"love.joystickhat\")                | Called when a joystick hat direction changes.                  | 0.9.0 |     |\n| [love.joystickpressed](love.joystickpressed \"love.joystickpressed\")    | Called when a joystick button is pressed.                      |       |     |\n| [love.joystickreleased](love.joystickreleased \"love.joystickreleased\") | Called when a joystick button is released.                     |       |     |\n| [love.joystickremoved](love.joystickremoved \"love.joystickremoved\")    | Called when a [Joystick](joystick \"Joystick\") is disconnected. | 0.9.0 |     |\n\n### Touch\n\n|                                                               |                                                                               |        |     |\n|---------------------------------------------------------------|-------------------------------------------------------------------------------|--------|-----|\n| [love.touchmoved](love.touchmoved \"love.touchmoved\")          | Callback function triggered when a touch press moves inside the touch screen. | 0.10.0 |     |\n| [love.touchpressed](love.touchpressed \"love.touchpressed\")    | Callback function triggered when the touch screen is touched.                 | 0.10.0 |     |\n| [love.touchreleased](love.touchreleased \"love.touchreleased\") | Callback function triggered when the touch screen stops being touched.        | 0.10.0 |     |\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love](https://love2d.org/wiki/love)"
- name: love.audio
  id: love.audio
  summary: Provides of audio interface for playback/recording sound
  description: "# love.audio\n\nProvides of audio interface for playback/recording sound.\n\n## Types\n\n|                                                      |                                                               |      |     |\n|------------------------------------------------------|---------------------------------------------------------------|------|-----|\n| [RecordingDevice](recordingdevice \"RecordingDevice\") | Represents an audio input device capable of recording sounds. | 11.0 |     |\n| [Source](source \"Source\")                            | A Source represents audio you can play back.                  |      |     |\n\n## Functions\n\n|                                                                                                      |                                                                                                                           |       |       |\n|------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|-------|-------|\n| [love.audio.getActiveEffects](love.audio.getactiveeffects \"love.audio.getActiveEffects\")             | Gets a list of the names of the currently enabled effects.                                                                | 11.0  |       |\n| [love.audio.getActiveSourceCount](love.audio.getactivesourcecount \"love.audio.getActiveSourceCount\") | Gets the current number of simultaneously playing sources.                                                                | 11.0  |       |\n| [love.audio.getDistanceModel](love.audio.getdistancemodel \"love.audio.getDistanceModel\")             | Returns the distance attenuation model.                                                                                   | 0.8.0 |       |\n| [love.audio.getDopplerScale](love.audio.getdopplerscale \"love.audio.getDopplerScale\")                | Gets the global scale factor for doppler effects.                                                                         | 0.9.2 |       |\n| [love.audio.getEffect](love.audio.geteffect \"love.audio.getEffect\")                                  | Gets the settings associated with an effect.                                                                              | 11.0  |       |\n| [love.audio.getMaxSceneEffects](love.audio.getmaxsceneeffects \"love.audio.getMaxSceneEffects\")       | Gets the maximum number of active effects.                                                                                | 11.0  |       |\n| [love.audio.getMaxSourceEffects](love.audio.getmaxsourceeffects \"love.audio.getMaxSourceEffects\")    | Gets the maximum number of active Effects for each [Source](source \"Source\").                                             | 11.0  |       |\n| [love.audio.getNumSources](love.audio.getnumsources \"love.audio.getNumSources\")                      | Gets the current number of simultaneously playing sources.                                                                |       | 0.9.0 |\n| [love.audio.getOrientation](love.audio.getorientation \"love.audio.getOrientation\")                   | Returns the orientation of the listener.                                                                                  |       |       |\n| [love.audio.getPosition](love.audio.getposition \"love.audio.getPosition\")                            | Returns the position of the listener.                                                                                     |       |       |\n| [love.audio.getRecordingDevices](love.audio.getrecordingdevices \"love.audio.getRecordingDevices\")    | Gets a list of [RecordingDevices](recordingdevice \"RecordingDevice\") on the system.                                       | 11.0  |       |\n| [love.audio.getSourceCount](love.audio.getsourcecount \"love.audio.getSourceCount\")                   | Gets the current number of simultaneously playing sources.                                                                | 0.9.0 | 11.0  |\n| [love.audio.getVelocity](love.audio.getvelocity \"love.audio.getVelocity\")                            | Returns the velocity of the listener.                                                                                     |       |       |\n| [love.audio.getVolume](love.audio.getvolume \"love.audio.getVolume\")                                  | Returns the master volume.                                                                                                |       |       |\n| [love.audio.isEffectsSupported](love.audio.iseffectssupported \"love.audio.isEffectsSupported\")       | Gets whether Effects are supported in the system.                                                                         | 11.0  |       |\n| [love.audio.newQueueableSource](love.audio.newqueueablesource \"love.audio.newQueueableSource\")       | Creates a new Source usable for real-time generated sound playback with [Source:queue](source-queue \"Source:queue\").      | 11.0  |       |\n| [love.audio.newSource](love.audio.newsource \"love.audio.newSource\")                                  | Creates a new [Source](source \"Source\") from a file, [SoundData](sounddata \"SoundData\"), or [Decoder](decoder \"Decoder\"). |       |       |\n| [love.audio.pause](love.audio.pause \"love.audio.pause\")                                              | Pauses specific or all currently played [Sources](source \"Source\").                                                       |       |       |\n| [love.audio.play](love.audio.play \"love.audio.play\")                                                 | Plays the specified Source.                                                                                               |       |       |\n| [love.audio.resume](love.audio.resume \"love.audio.resume\")                                           | Resumes all audio.                                                                                                        |       | 11.0  |\n| [love.audio.rewind](love.audio.rewind \"love.audio.rewind\")                                           | Rewinds all playing audio.                                                                                                |       | 11.0  |\n| [love.audio.setDistanceModel](love.audio.setdistancemodel \"love.audio.setDistanceModel\")             | Sets the distance attenuation model.                                                                                      | 0.8.0 |       |\n| [love.audio.setDopplerScale](love.audio.setdopplerscale \"love.audio.setDopplerScale\")                | Sets a global scale factor for doppler effects.                                                                           | 0.9.2 |       |\n| [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\")                                  | Defines an effect that can be applied to a Source.                                                                        | 11.0  |       |\n| [love.audio.setMixWithSystem](love.audio.setmixwithsystem \"love.audio.setMixWithSystem\")             | Sets whether the system should mix the audio with the system's audio.                                                     | 11.0  |       |\n| [love.audio.setOrientation](love.audio.setorientation \"love.audio.setOrientation\")                   | Sets the orientation of the listener.                                                                                     |       |       |\n| [love.audio.setPosition](love.audio.setposition \"love.audio.setPosition\")                            | Sets the position of the listener.                                                                                        |       |       |\n| [love.audio.setVelocity](love.audio.setvelocity \"love.audio.setVelocity\")                            | Sets the velocity of the listener.                                                                                        |       |       |\n| [love.audio.setVolume](love.audio.setvolume \"love.audio.setVolume\")                                  | Sets the master volume.                                                                                                   |       |       |\n| [love.audio.stop](love.audio.stop \"love.audio.stop\")                                                 | Stops currently played [sources](source \"Source\").                                                                        |       |       |\n\n## Enums\n\n|                                                   |                                                  |       |     |\n|---------------------------------------------------|--------------------------------------------------|-------|-----|\n| [DistanceModel](distancemodel \"DistanceModel\")    | The different distance models.                   | 0.8.0 |     |\n| [EffectType](effecttype \"EffectType\")             | Different types of audio effects.                | 11.0  |     |\n| [EffectWaveform](effectwaveform \"EffectWaveform\") | Types of waveforms for **ringmodulator** effect. | 11.0  |     |\n| [SourceType](sourcetype \"SourceType\")             | Types of audio sources.                          |       |     |\n| [TimeUnit](timeunit \"TimeUnit\")                   | Units that represent time.                       | 0.8.0 |     |\n\n## See Also\n\n- [love](love \"love\")\n- [Tutorial:Audio](https://love2d.org/wiki/Tutorial:Audio \"Tutorial:Audio\")\n- [Audio Formats](audio_formats \"Audio Formats\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio](https://love2d.org/wiki/love.audio)"
- name: love.audio.getActiveEffects
  id: love.audio.getactiveeffects
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.audio.getActiveEffects\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets a list of the names of the currently enabled effects.\n\n## Function\n\n### Synopsis\n\n``` lua\neffects = love.audio.getActiveEffects()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` effects`  \nThe list of the names of the currently enabled effects.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getActiveEffects](https://love2d.org/wiki/love.audio.getActiveEffects)"
- name: love.audio.getActiveSourceCount
  id: love.audio.getactivesourcecount
  summary: Available since LÖVE 11.0 It has been renamed from love.audio.getSourceCount
  description: "# love.audio.getActiveSourceCount\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [love.audio.getSourceCount](love.audio.getsourcecount \"love.audio.getSourceCount\").\n\nGets the current number of simultaneously playing sources.\n\n## Function\n\n### Synopsis\n\n``` lua\ncount = love.audio.getActiveSourceCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` count`  \nThe current number of simultaneously playing sources.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getActiveSourceCount](https://love2d.org/wiki/love.audio.getActiveSourceCount)"
- name: love.audio.getDistanceModel
  id: love.audio.getdistancemodel
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.audio.getDistanceModel\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns the distance attenuation model.\n\n## Function\n\n### Synopsis\n\n``` lua\nmodel = love.audio.getDistanceModel( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`DistanceModel`](distancemodel \"DistanceModel\")` model`  \nThe current distance model. The default is 'inverseclamped'.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getDistanceModel](https://love2d.org/wiki/love.audio.getDistanceModel)"
- name: love.audio.getDopplerScale
  id: love.audio.getdopplerscale
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.audio.getDopplerScale\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets the current global scale factor for velocity-based doppler effects.\n\n## Function\n\n### Synopsis\n\n``` lua\nscale = love.audio.getDopplerScale( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` scale`  \nThe current doppler scale factor.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [love.audio.setDopplerScale](love.audio.setdopplerscale \"love.audio.setDopplerScale\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getDopplerScale](https://love2d.org/wiki/love.audio.getDopplerScale)"
- name: love.audio.getEffect
  id: love.audio.geteffect
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.audio.getEffect\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the settings associated with an effect.\n\n## Function\n\n### Synopsis\n\n``` lua\nsettings = love.audio.getEffect(name)\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the effect.\n\n### Returns\n\n[`table`](table \"table\")` settings`  \nThe settings associated with the effect.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getEffect](https://love2d.org/wiki/love.audio.getEffect)"
- name: love.audio.getMaxSceneEffects
  id: love.audio.getmaxsceneeffects
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.audio.getMaxSceneEffects\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the maximum number of active effects supported by the system.\n\n## Function\n\n### Synopsis\n\n``` lua\nmaximum = love.audio.getMaxSceneEffects( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` maximum`  \nThe maximum number of active effects.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [love.audio.getMaxSourceEffects](love.audio.getmaxsourceeffects \"love.audio.getMaxSourceEffects\")\n- [love.audio.isEffectsSupported](love.audio.iseffectssupported \"love.audio.isEffectsSupported\")\n- [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getMaxSceneEffects](https://love2d.org/wiki/love.audio.getMaxSceneEffects)"
- name: love.audio.getMaxSourceEffects
  id: love.audio.getmaxsourceeffects
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.audio.getMaxSourceEffects\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the maximum number of active Effects in a single [Source](source \"Source\") object, that the system can support.\n\n## Function\n\n### Synopsis\n\n``` lua\nmaximum = love.audio.getMaxSourceEffects( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` maximum`  \nThe maximum number of active Effects per Source.\n\n## Notes\n\nThis function return 0 for system that doesn't support audio effects.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [love.audio.isEffectsSupported](love.audio.iseffectssupported \"love.audio.isEffectsSupported\")\n- [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getMaxSourceEffects](https://love2d.org/wiki/love.audio.getMaxSourceEffects)"
- name: love.audio.getNumSources
  id: love.audio.getnumsources
  summary: Removed in LÖVE 0.9.0 It has been renamed to love.audio.getSourceCount
  description: "# love.audio.getNumSources\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [love.audio.getSourceCount](love.audio.getsourcecount \"love.audio.getSourceCount\").\n\nGets the current number of simultaneously playing sources.\n\n## Function\n\n### Synopsis\n\n``` lua\nnumSources = love.audio.getNumSources( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` numSources`  \nThe current number of simultaneously playing sources.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getNumSources](https://love2d.org/wiki/love.audio.getNumSources)"
- name: love.audio.getOrientation
  id: love.audio.getorientation
  summary: Returns the orientation of the listener
  description: "# love.audio.getOrientation\n\nReturns the orientation of the listener.\n\n## Function\n\n### Synopsis\n\n``` lua\nfx, fy, fz, ux, uy, uz = love.audio.getOrientation( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` fx, fy, fz`  \nForward vector of the listener orientation.\n\n[`number`](number \"number\")` ux, uy, uz`  \nUp vector of the listener orientation.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getOrientation](https://love2d.org/wiki/love.audio.getOrientation)"
- name: love.audio.getPosition
  id: love.audio.getposition
  summary: Returns the position of the listener
  description: "# love.audio.getPosition\n\nReturns the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y, z = love.audio.getPosition( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe X position of the listener.\n\n[`number`](number \"number\")` y`  \nThe Y position of the listener.\n\n[`number`](number \"number\")` z`  \nThe Z position of the listener.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getPosition](https://love2d.org/wiki/love.audio.getPosition)"
- name: love.audio.getRecordingDevices
  id: love.audio.getrecordingdevices
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.audio.getRecordingDevices\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets a list of [RecordingDevices](recordingdevice \"RecordingDevice\") on the system.\n\nThe first device in the list is the user's default recording device. The list may be empty if there are no microphones connected to the system.\n\nAudio recording is currently not supported on iOS.\n\n## Function\n\n### Synopsis\n\n``` lua\ndevices = love.audio.getRecordingDevices( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` devices`  \nThe list of connected [recording devices](recordingdevice \"RecordingDevice\").\n\n## Notes\n\nAudio recording for Android is supported since [11.3](https://love2d.org/wiki/11.3 \"11.3\"). However, it's not supported when APK from Play Store is used.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [RecordingDevice](recordingdevice \"RecordingDevice\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getRecordingDevices](https://love2d.org/wiki/love.audio.getRecordingDevices)"
- name: love.audio.getSourceCount
  id: love.audio.getsourcecount
  summary: Available since LÖVE 0.9.0 It has been renamed from love.audio.getNumSources
  description: "# love.audio.getSourceCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [love.audio.getNumSources](love.audio.getnumsources \"love.audio.getNumSources\").\n\n|                                                                                                                              |\n|------------------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                         |\n| It has been renamed to [love.audio.getActiveSourceCount](love.audio.getactivesourcecount \"love.audio.getActiveSourceCount\"). |\n\nGets the current number of simultaneously playing sources.\n\n## Function\n\n### Synopsis\n\n``` lua\nnumSources = love.audio.getSourceCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` numSources`  \nThe current number of simultaneously playing sources.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getSourceCount](https://love2d.org/wiki/love.audio.getSourceCount)"
- name: love.audio.getVelocity
  id: love.audio.getvelocity
  summary: Returns the velocity of the listener
  description: "# love.audio.getVelocity\n\nReturns the velocity of the listener.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y, z = love.audio.getVelocity( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe X velocity of the listener.\n\n[`number`](number \"number\")` y`  \nThe Y velocity of the listener.\n\n[`number`](number \"number\")` z`  \nThe Z velocity of the listener.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getVelocity](https://love2d.org/wiki/love.audio.getVelocity)"
- name: love.audio.getVolume
  id: love.audio.getvolume
  summary: Returns the master volume
  description: "# love.audio.getVolume\n\nReturns the master volume.\n\n## Function\n\n### Synopsis\n\n``` lua\nvolume = love.audio.getVolume( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` volume`  \nThe current master volume\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.getVolume](https://love2d.org/wiki/love.audio.getVolume)"
- name: love.audio.isEffectsSupported
  id: love.audio.iseffectssupported
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.audio.isEffectsSupported\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether audio effects are supported in the system.\n\n## Function\n\n### Synopsis\n\n``` lua\nsupported = love.audio.isEffectsSupported( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` supported`  \nTrue if effects are supported, false otherwise.\n\n## Notes\n\nOlder Linux distributions that ship with older OpenAL library may not support audio effects. Furthermore, iOS doesn't support audio effects at all.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [love.audio.getMaxSceneEffects](love.audio.getmaxsceneeffects \"love.audio.getMaxSceneEffects\")\n- [love.audio.getMaxSourceEffects](love.audio.getmaxsourceeffects \"love.audio.getMaxSourceEffects\")\n- [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.isEffectsSupported](https://love2d.org/wiki/love.audio.isEffectsSupported)"
- name: love.audio.newQueueableSource
  id: love.audio.newqueueablesource
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.audio.newQueueableSource\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new Source usable for real-time generated sound playback with [Source:queue](source-queue \"Source:queue\").\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\nsource = love.audio.newQueueableSource( samplerate, bitdepth, channels, buffercount )\n```\n\n### Arguments\n\n[`number`](number \"number\")` samplerate`  \nNumber of samples per second when playing.\n\n[`number`](number \"number\")` bitdepth`  \nBits per sample (8 or 16).\n\n[`number`](number \"number\")` channels`  \n1 for mono or 2 for stereo.\n\n[`number`](number \"number\")` buffercount (0)`  \nThe number of buffers that can be queued up at any given time with [Source:queue](source-queue \"Source:queue\"). Cannot be greater than 64. A sensible default (~8) is chosen if no value is specified.\n\n### Returns\n\n[`Source`](source \"Source\")` source`  \nThe new Source usable with [Source:queue](source-queue \"Source:queue\").\n\n## Notes\n\nThe sample rate, bit depth, and channel count of any [SoundData](sounddata \"SoundData\") used with [Source:queue](source-queue \"Source:queue\") must match the parameters given to this constructor.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [Source](source \"Source\")\n- [Source:queue](source-queue \"Source:queue\")\n- [SourceType](sourcetype \"SourceType\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.newQueueableSource](https://love2d.org/wiki/love.audio.newQueueableSource)"
- name: love.audio.newSource
  id: love.audio.newsource
  summary: Creates a new Source from a filepath, File, Decoder or SoundData
  description: "# love.audio.newSource\n\nCreates a new [Source](source \"Source\") from a filepath, [File](file \"File\"), [Decoder](decoder \"Decoder\") or [SoundData](sounddata \"SoundData\"). Sources created from SoundData are always static.\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nsource = love.audio.newSource( filename, type )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filepath to the audio file.\n\n[`SourceType`](sourcetype \"SourceType\")` type`  \nStreaming or static source.\n\n### Returns\n\n[`Source`](source \"Source\")` source`  \nA new Source that can play the specified audio.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nsource = love.audio.newSource( file, type )\n```\n\n### Arguments\n\n[`File`](file \"File\")` file`  \nA File pointing to an audio file.\n\n[`SourceType`](sourcetype \"SourceType\")` type`  \nStreaming or static source.\n\n### Returns\n\n[`Source`](source \"Source\")` source`  \nA new Source that can play the specified audio.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nsource = love.audio.newSource( decoder, type )\n```\n\n### Arguments\n\n[`Decoder`](decoder \"Decoder\")` decoder`  \nThe Decoder to create a Source from.\n\n[`SourceType`](sourcetype \"SourceType\")` type`  \nStreaming or static source.\n\n### Returns\n\n[`Source`](source \"Source\")` source`  \nA new Source that can play the specified audio.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nsource = love.audio.newSource( data, type )\n```\n\n### Arguments\n\n[`FileData`](filedata \"FileData\")` data`  \nThe FileData to create a Source from.\n\n[`SourceType`](sourcetype \"SourceType\")` type`  \nStreaming or static source.\n\n### Returns\n\n[`Source`](source \"Source\")` source`  \nA new Source that can play the specified audio.\n\n## Function\n\n### Synopsis\n\n``` lua\nsource = love.audio.newSource( data )\n```\n\n### Arguments\n\n[`SoundData`](sounddata \"SoundData\")` data`  \nThe SoundData to create a Source from.\n\n### Returns\n\n[`Source`](source \"Source\")` source`  \nA new Source that can play the specified audio. The [SourceType](sourcetype \"SourceType\") of the returned audio is \"static\".\n\n## Function\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nsource = love.audio.newSource( filename, type )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filepath to the audio file.\n\n[`SourceType`](sourcetype \"SourceType\")` type (\"stream\")`  \nStreaming or static source.\n\n### Returns\n\n[`Source`](source \"Source\")` source`  \nA new Source that can play the specified audio.\n\n## Function\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nsource = love.audio.newSource( file, type )\n```\n\n### Arguments\n\n[`File`](file \"File\")` file`  \nA File pointing to an audio file.\n\n[`SourceType`](sourcetype \"SourceType\")` type (\"stream\")`  \nStreaming or static source.\n\n### Returns\n\n[`Source`](source \"Source\")` source`  \nA new Source that can play the specified audio.\n\n## Function\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nsource = love.audio.newSource( decoder, type )\n```\n\n### Arguments\n\n[`Decoder`](decoder \"Decoder\")` decoder`  \nThe Decoder to create a Source from.\n\n[`SourceType`](sourcetype \"SourceType\")` type (\"stream\")`  \nStreaming or static source.\n\n### Returns\n\n[`Source`](source \"Source\")` source`  \nA new Source that can play the specified audio.\n\n## Function\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nsource = love.audio.newSource( data, type )\n```\n\n### Arguments\n\n[`FileData`](filedata \"FileData\")` data`  \nThe FileData to create a Source from.\n\n[`SourceType`](sourcetype \"SourceType\")` type (\"stream\")`  \nStreaming or static source.\n\n### Returns\n\n[`Source`](source \"Source\")` source`  \nA new Source that can play the specified audio.\n\n## Notes\n\nFrom [11.0](https://love2d.org/wiki/11.0 \"11.0\") onwards, if **queue** is specified as [SourceType](sourcetype \"SourceType\") for this specific constructor, it won't error, and getType will return **stream**; this is a bug. One should use [love.audio.newQueueableSource](love.audio.newqueueablesource \"love.audio.newQueueableSource\") for that specific source type instead.\n\n## Examples\n\n### Load background music and play it\n\n``` lua\nbgm = love.audio.newSource(\"bgm.ogg\", \"stream\")\nlove.audio.play(bgm)\n```\n\n### Load a sound effect and play it\n\n``` lua\nsfx = love.audio.newSource(\"sfx.wav\", \"static\")\nlove.audio.play(sfx)\n```\n\n### Load SoundData and create a Source\n\n``` lua\ndata = love.sound.newSoundData(\"sfx.wav\")\nsfx = love.audio.newSource(data)\n```\n\n### Load Decoder and create a Source\n\n``` lua\ndecoder = love.sound.newDecoder(\"bgm.ogg\")\nbgm = love.audio.newSource(decoder, \"stream\")\n```\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.newSource](https://love2d.org/wiki/love.audio.newSource)"
- name: love.audio.pause
  id: love.audio.pause
  summary: Pauses specific or all currently played Sources
  description: "# love.audio.pause\n\nPauses specific or all currently played [Sources](source \"Source\").\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nPauses all currently active [Sources](source \"Source\") and returns them.\n\n### Synopsis\n\n``` lua\nsources = love.audio.pause( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` Sources`  \nA table containing a list of Sources that were paused by this call.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nPauses the given [Sources](source \"Source\").\n\n### Synopsis\n\n``` lua\nlove.audio.pause( source, ... )\n```\n\n### Arguments\n\n[`Source`](source \"Source\")` source`  \nThe first Source to pause.\n\n[`Source`](source \"Source\")` ...`  \nAdditional Sources to pause.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nPauses the given [Sources](source \"Source\").\n\n### Synopsis\n\n``` lua\nlove.audio.pause( sources )\n```\n\n### Arguments\n\n[`table`](table \"table\")` sources`  \nA table containing a list of Sources to pause.\n\n### Returns\n\nNothing.\n\n  \n\n## Function\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in that and later versions.\n\nPauses all currently active [Sources](source \"Source\").\n\n### Synopsis\n\n``` lua\nlove.audio.pause( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in that and later versions.\n\nPauses a specific [Source](source \"Source\").\n\n### Synopsis\n\n``` lua\nlove.audio.pause( source )\n```\n\n### Arguments\n\n[`Source`](source \"Source\")` source`  \nThe source on which to pause the playback.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.pause](https://love2d.org/wiki/love.audio.pause)"
- name: love.audio.play
  id: love.audio.play
  summary: Plays the specified Source
  description: "# love.audio.play\n\nPlays the specified Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.audio.play( source )\n```\n\n### Arguments\n\n[`Source`](source \"Source\")` source`  \nThe Source to play.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nStarts playing multiple Sources simultaneously.\n\n### Synopsis\n\n``` lua\nlove.audio.play( sources )\n```\n\n### Arguments\n\n[`table`](table \"table\")` sources`  \nTable containing a list of Sources to play.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nStarts playing multiple Sources simultaneously.\n\n### Synopsis\n\n``` lua\nlove.audio.play( source1, source2, ... )\n```\n\n### Arguments\n\n[`Source`](source \"Source\")` source1`  \nThe first Source to play.\n\n[`Source`](source \"Source\")` source2`  \nThe second Source to play.\n\n[`Source`](source \"Source\")` ...`  \nAdditional Sources to play.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [Source:play](source-play \"Source:play\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.play](https://love2d.org/wiki/love.audio.play)"
- name: love.audio.resume
  id: love.audio.resume
  summary: Removed in LÖVE 11.0 Use love.audio.play instead
  description: "# love.audio.resume\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nUse [love.audio.play](love.audio.play \"love.audio.play\") instead.\n\nResumes all audio.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.audio.resume( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.audio.resume( source )\n```\n\n### Arguments\n\n[`Source`](source \"Source\")` source`  \nThe source on which to resume the playback.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.resume](https://love2d.org/wiki/love.audio.resume)"
- name: love.audio.rewind
  id: love.audio.rewind
  summary: Removed in LÖVE 11.0 Use Source:seek(0) instead
  description: "# love.audio.rewind\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nUse [Source:seek](source-seek \"Source:seek\")(0) instead.\n\nRewinds all playing audio.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.audio.rewind( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.audio.rewind( source )\n```\n\n### Arguments\n\n[`Source`](source \"Source\")` source`  \nThe source to rewind.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.rewind](https://love2d.org/wiki/love.audio.rewind)"
- name: love.audio.setDistanceModel
  id: love.audio.setdistancemodel
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.audio.setDistanceModel\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nSets the distance attenuation model.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.audio.setDistanceModel( model )\n```\n\n### Arguments\n\n[`DistanceModel`](distancemodel \"DistanceModel\")` model`  \nThe new distance model.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.setDistanceModel](https://love2d.org/wiki/love.audio.setDistanceModel)"
- name: love.audio.setDopplerScale
  id: love.audio.setdopplerscale
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.audio.setDopplerScale\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nSets a global scale factor for velocity-based doppler effects. The default scale value is 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.audio.setDopplerScale( scale )\n```\n\n### Arguments\n\n[`number`](number \"number\")` scale`  \nThe new doppler scale factor. The scale must be greater than 0.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [love.audio.getDopplerScale](love.audio.getdopplerscale \"love.audio.getDopplerScale\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.setDopplerScale](https://love2d.org/wiki/love.audio.setDopplerScale)"
- name: love.audio.setEffect
  id: love.audio.seteffect
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.audio.setEffect\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nDefines an effect that can be applied to a [Source](source \"Source\").\n\nNot all system supports audio effects. Use [love.audio.isEffectsSupported](love.audio.iseffectssupported \"love.audio.isEffectsSupported\") to check.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.audio.setEffect(name, settings)\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the effect.\n\n[`table`](table \"table\")` settings`  \nThe settings to use for this effect, with the following fields:\n\n[`EffectType`](effecttype \"EffectType\")` type`  \nThe type of effect to use.\n\n[`number`](number \"number\")` volume`  \nThe volume of the effect.\n\n[`number`](number \"number\")` ...`  \nEffect-specific settings. See [EffectType](effecttype \"EffectType\") for available effects and their corresponding settings.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the effect was successfully created.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.audio.setEffect(name, enabled)\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the effect.\n\n[`boolean`](boolean \"boolean\")` enabled (true)`  \nIf false and the given effect name was previously set, disables the effect.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the effect was successfully disabled.\n\n## Examples\n\n### Playing music with added reverb\n\n``` lua\nlove.audio.setEffect('myEffect', {type = 'reverb'})\nlocal source = love.audio.newSource('music.ogg', 'stream')\nsource:setEffect('myEffect')\nsource:play()\n```\n\n### Playing music with distortion\n\n``` lua\nlove.audio.setEffect('myEffect', {\n    type = 'distortion',\n    gain = .5,\n    edge = .25,\n})\nlocal source = love.audio.newSource('music.ogg', 'stream')\nsource:setEffect('myEffect')\nsource:play()\n```\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [love.audio.isEffectsSupported](love.audio.iseffectssupported \"love.audio.isEffectsSupported\")\n- [Source:setEffect](source-seteffect \"Source:setEffect\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.setEffect](https://love2d.org/wiki/love.audio.setEffect)"
- name: love.audio.setMixWithSystem
  id: love.audio.setmixwithsystem
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.audio.setMixWithSystem\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nSets whether the system should mix the audio with the system's audio.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.audio.setMixWithSystem( mix )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` mix`  \nTrue to enable mixing, false to disable it.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the change succeeded, false otherwise.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.setMixWithSystem](https://love2d.org/wiki/love.audio.setMixWithSystem)"
- name: love.audio.setOrientation
  id: love.audio.setorientation
  summary: Sets the orientation of the listener
  description: "# love.audio.setOrientation\n\nSets the orientation of the listener.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.audio.setOrientation( fx, fy, fz, ux, uy, uz )\n```\n\n### Arguments\n\n[`number`](number \"number\")` fx, fy, fz`  \nForward vector of the listener orientation.\n\n[`number`](number \"number\")` ux, uy, uz`  \nUp vector of the listener orientation.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.setOrientation](https://love2d.org/wiki/love.audio.setOrientation)"
- name: love.audio.setPosition
  id: love.audio.setposition
  summary: Sets the position of the listener, which determines how sounds play
  description: "# love.audio.setPosition\n\nSets the position of the listener, which determines how sounds play.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.audio.setPosition( x, y, z )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x position of the listener.\n\n[`number`](number \"number\")` y`  \nThe y position of the listener.\n\n[`number`](number \"number\")` z`  \nThe z position of the listener.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [Source:setPosition](source-setposition \"Source:setPosition\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.setPosition](https://love2d.org/wiki/love.audio.setPosition)"
- name: love.audio.setVelocity
  id: love.audio.setvelocity
  summary: Sets the velocity of the listener
  description: "# love.audio.setVelocity\n\nSets the velocity of the listener.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.audio.setVelocity( x, y, z )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe X velocity of the listener.\n\n[`number`](number \"number\")` y`  \nThe Y velocity of the listener.\n\n[`number`](number \"number\")` z`  \nThe Z velocity of the listener.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.setVelocity](https://love2d.org/wiki/love.audio.setVelocity)"
- name: love.audio.setVolume
  id: love.audio.setvolume
  summary: Sets the master volume
  description: "# love.audio.setVolume\n\nSets the master volume.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.audio.setVolume( volume )\n```\n\n### Arguments\n\n[`number`](number \"number\")` volume`  \n1.0 is max and 0.0 is off.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.setVolume](https://love2d.org/wiki/love.audio.setVolume)"
- name: love.audio.stop
  id: love.audio.stop
  summary: Stops currently played sources
  description: "# love.audio.stop\n\nStops currently played [sources](source \"Source\").\n\n## Function\n\nThis function will stop all currently active [sources](source \"Source\").\n\n### Synopsis\n\n``` lua\nlove.audio.stop( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Function\n\nThis function will only stop the specified [source](source \"Source\").\n\n### Synopsis\n\n``` lua\nlove.audio.stop( source )\n```\n\n### Arguments\n\n[`Source`](source \"Source\")` source`  \nThe [source](source \"Source\") on which to stop the playback.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nSimultaneously stops all given [Sources](source \"Source\").\n\n### Synopsis\n\n``` lua\nlove.audio.stop( source1, source2, ... )\n```\n\n### Arguments\n\n[`Source`](source \"Source\")` source1`  \nThe first Source to stop.\n\n[`Source`](source \"Source\")` source2`  \nThe second Source to stop.\n\n[`Source`](source \"Source\")` ...`  \nAdditional Sources to stop.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nSimultaneously stops all given [Sources](source \"Source\").\n\n### Synopsis\n\n``` lua\nlove.audio.stop( sources )\n```\n\n### Arguments\n\n[`table`](table \"table\")` sources`  \nA table containing a list of Sources to stop.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.audio.stop](https://love2d.org/wiki/love.audio.stop)"
- name: love.conf
  id: love.conf
  summary: If a file called conf.lua is present in your game folder (or .love file), it is run before the LÖVE modules are loaded
  description: "# love.conf\n\n## Introduction\n\nIf a file called `conf.lua` is present in your game folder (or .love file), it is run *before* the LÖVE modules are loaded. You can use this file to overwrite the `love.conf` function, which is later called by the LÖVE 'boot' script. Using the `love.conf` function, you can set some configuration options, and change things like the default size of the window, which modules are loaded, and other stuff.\n\n## love.conf\n\nThe `love.conf` function takes one argument: a table filled with all the default values which you can overwrite to your liking. If you want to change the default window size, for instance, do:\n\n``` lua\nfunction love.conf(t)\n    t.window.width = 1024\n    t.window.height = 768\nend\n```\n\nIf you don't need the physics module or joystick module, do the following.\n\n``` lua\nfunction love.conf(t)\n    t.modules.joystick = false\n    t.modules.physics = false\nend\n```\n\nSetting unused modules to false is encouraged when you release your game. It reduces startup time slightly (especially if the joystick module is disabled) and reduces memory usage (slightly).\n\nNote that you can't disable [love.filesystem](love.filesystem \"love.filesystem\") and [love.data](love.data \"love.data\"); it's mandatory. The same goes for the [love](love \"love\") module itself. [love.graphics](love.graphics \"love.graphics\") needs [love.window](love.window \"love.window\") to be enabled.\n\nIn LÖVE version 0.9.2 and earlier, errors in the config file will cause the game to not launch and no error message to appear. If the game doesn't load, check the config file for errors first. In version 0.10.2 and later, errors in the config will now show the blue error screen showing the error in the config file.\n\n## Current Configuration File\n\nHere is a full list of options and their default values for LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\"):\n\n``` lua\nfunction love.conf(t)\n    t.identity = nil                    -- The name of the save directory (string)\n    t.appendidentity = false            -- Search files in source directory before save directory (boolean)\n    t.version = \"11.3\"                  -- The LÖVE version this game was made for (string)\n    t.console = false                   -- Attach a console (boolean, Windows only)\n    t.accelerometerjoystick = true      -- Enable the accelerometer on iOS and Android by exposing it as a Joystick (boolean)\n    t.externalstorage = false           -- True to save files (and read from the save directory) in external storage on Android (boolean) \n    t.gammacorrect = false              -- Enable gamma-correct rendering, when supported by the system (boolean)\n \n    t.audio.mic = false                 -- Request and use microphone capabilities in Android (boolean)\n    t.audio.mixwithsystem = true        -- Keep background music playing when opening LOVE (boolean, iOS and Android only)\n \n    t.window.title = \"Untitled\"         -- The window title (string)\n    t.window.icon = nil                 -- Filepath to an image to use as the window's icon (string)\n    t.window.width = 800                -- The window width (number)\n    t.window.height = 600               -- The window height (number)\n    t.window.borderless = false         -- Remove all border visuals from the window (boolean)\n    t.window.resizable = false          -- Let the window be user-resizable (boolean)\n    t.window.minwidth = 1               -- Minimum window width if the window is resizable (number)\n    t.window.minheight = 1              -- Minimum window height if the window is resizable (number)\n    t.window.fullscreen = false         -- Enable fullscreen (boolean)\n    t.window.fullscreentype = \"desktop\" -- Choose between \"desktop\" fullscreen or \"exclusive\" fullscreen mode (string)\n    t.window.vsync = 1                  -- Vertical sync mode (number)\n    t.window.msaa = 0                   -- The number of samples to use with multi-sampled antialiasing (number)\n    t.window.depth = nil                -- The number of bits per sample in the depth buffer\n    t.window.stencil = nil              -- The number of bits per sample in the stencil buffer\n    t.window.display = 1                -- Index of the monitor to show the window in (number)\n    t.window.highdpi = false            -- Enable high-dpi mode for the window on a Retina display (boolean)\n    t.window.usedpiscale = true         -- Enable automatic DPI scaling when highdpi is set to true as well (boolean)\n    t.window.x = nil                    -- The x-coordinate of the window's position in the specified display (number)\n    t.window.y = nil                    -- The y-coordinate of the window's position in the specified display (number)\n \n    t.modules.audio = true              -- Enable the audio module (boolean)\n    t.modules.data = true               -- Enable the data module (boolean)\n    t.modules.event = true              -- Enable the event module (boolean)\n    t.modules.font = true               -- Enable the font module (boolean)\n    t.modules.graphics = true           -- Enable the graphics module (boolean)\n    t.modules.image = true              -- Enable the image module (boolean)\n    t.modules.joystick = true           -- Enable the joystick module (boolean)\n    t.modules.keyboard = true           -- Enable the keyboard module (boolean)\n    t.modules.math = true               -- Enable the math module (boolean)\n    t.modules.mouse = true              -- Enable the mouse module (boolean)\n    t.modules.physics = true            -- Enable the physics module (boolean)\n    t.modules.sound = true              -- Enable the sound module (boolean)\n    t.modules.system = true             -- Enable the system module (boolean)\n    t.modules.thread = true             -- Enable the thread module (boolean)\n    t.modules.timer = true              -- Enable the timer module (boolean), Disabling it will result 0 delta time in love.update\n    t.modules.touch = true              -- Enable the touch module (boolean)\n    t.modules.video = true              -- Enable the video module (boolean)\n    t.modules.window = true             -- Enable the window module (boolean)\nend\n```\n\n## Flags\n\n#### identity\n\nThis flag determines the name of the save directory for your game. Note that you can only specify the name, not the location where it will be created:\n\n``` lua\nt.identity = \"gabe_HL3\" -- Correct\nt.identity = \"c:/Users/gabe/HL3\" -- Incorrect\n```\n\nAlternatively [love.filesystem.setIdentity](love.filesystem.setidentity \"love.filesystem.setIdentity\") can be used to set the save directory outside of the config file.\n\n#### appendidentity\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis flag is not supported in earlier versions.\n\nThis flag determines if game directory should be searched first then save directory (`true`) or otherwise (`false`)\n\n#### version\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis flag is not supported in earlier versions.\n\n`t.version` should be a string, representing the version of LÖVE for which your game was made.\n\nBefore [11.0](https://love2d.org/wiki/11.0 \"11.0\"), it should be formatted as `\"`*`X.Y.Z`*`\"` where *`X`* is the major release number, *`Y`* the minor, and *`Z`* the patch level. Since 11.0, it should be formatted as `\"`*`X.Y`*`\"` where *`X`* and *`Y`* are the major and minor release respectively.\n\nIf set in the config file of the game, LÖVE will display a warning if the game isn't compatible with the current version of LÖVE being used to run the game. Its default is the version of LÖVE running.\n\n#### console\n\nDetermines whether a console should be opened alongside the game window (Windows only) or not. Note: On OSX you can get console output by running LÖVE through the terminal, or on Windows with LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\"), by running `lovec.exe` instead of `love.exe`.\n\n#### accelerometerjoystick\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis flag is not supported in earlier versions.\n\nSets whether the device accelerometer on iOS and Android should be exposed as a 3-axis [Joystick](joystick \"Joystick\"). Disabling the accelerometer when it's not used may reduce CPU usage.\n\n#### externalstorage\n\n**Available since LÖVE [0.10.1](https://love2d.org/wiki/0.10.1 \"0.10.1\")**  \nThis flag is not supported in earlier versions.\n\nSets whether files are saved in external storage (true) or internal storage (false) on Android.\n\n#### gammacorrect\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis flag is not supported in earlier versions.\n\nDetermines whether [gamma-correct rendering](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") is enabled, when the system supports it.\n\n#### audio.mic\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis flag is not supported in earlier versions.\n\nRequest microphone permission from the user. When user allows it, [love.audio.getRecordingDevices](love.audio.getrecordingdevices \"love.audio.getRecordingDevices\") will lists recording devices available. Otherwise, [love.audio.getRecordingDevices](love.audio.getrecordingdevices \"love.audio.getRecordingDevices\") returns empty table and a message is shown to inform user when called.\n\n#### audio.mixwithsystem\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis flag is not supported in earlier versions.\n\nSets whether background audio / music from other apps should play while LÖVE is open. See [love.system.hasBackgroundMusic](love.system.hasbackgroundmusic \"love.system.hasBackgroundMusic\") for more details.\n\n#### window\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThese flags are not supported in earlier versions.\n\nIt is possible to defer window creation until [love.window.setMode](love.window.setmode \"love.window.setMode\") is first called in your code. To do so, set `t.window = nil` in love.conf (or `t.screen = nil` in older versions.) If this is done, LÖVE may crash if any function from [love.graphics](love.graphics \"love.graphics\") is called before the first [love.window.setMode](love.window.setmode \"love.window.setMode\") in your code.\n\nThe `t.window` table was named `t.screen` in versions prior to [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\"). The `t.screen` table doesn't exist in love.conf in 0.9.0, and the `t.window` table doesn't exist in love.conf in 0.8.0. This means **love.conf** will fail to execute (therefore it will fall back to default values) if care is not taken to use the correct table for the LÖVE version being used.\n\n#### window.title\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis flag is not supported in earlier versions.\n\nSets the title of the window the game is in. Alternatively [love.window.setTitle](love.window.settitle \"love.window.setTitle\") can be used to change the window title outside of the config file.\n\n#### window.icon\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis flag is not supported in earlier versions.\n\nA filepath to an image to use as the window's icon. Not all operating systems support very large icon images. The icon can also be changed with [love.window.setIcon](love.window.seticon \"love.window.setIcon\").\n\n#### window.width & window.height\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThese flags are not supported in earlier versions.\n\nSets the window's dimensions. If these flags are set to 0 LÖVE automatically uses the user's desktop dimensions.\n\n#### window.borderless\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis flag is not supported in earlier versions.\n\nRemoves all border visuals from the window. Note that the effects may wary between operating systems.\n\n#### window.resizable\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis flag is not supported in earlier versions.\n\nIf set to true this allows the user to resize the game's window.\n\n#### window.minwidth & window.minheight\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThese flags are not supported in earlier versions.\n\nSets the minimum width and height for the game's window if it can be resized by the user. If you set lower values to `window.width` and `window.height` LÖVE will always favor the minimum dimensions set via `window.minwidth` and `window.minheight`.\n\n#### window.fullscreen\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis flag is not supported in earlier versions.\n\nWether to run the game in fullscreen (`true`) or windowed (`false`) mode. The fullscreen can also be toggled via [love.window.setFullscreen](love.window.setfullscreen \"love.window.setFullscreen\") or [love.window.setMode](love.window.setmode \"love.window.setMode\"). In [11.3](https://love2d.org/wiki/11.3 \"11.3\") for Android, setting this to `true` hides the status bar.\n\n#### window.fullscreentype\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis flag is not supported in earlier versions.\n\nSpecifies the [type of fullscreen](fullscreentype \"FullscreenType\") mode to use (`exclusive` or `desktop`). Generally the `desktop` is recommended, as it is less restrictive than `exclusive` mode on some operating systems. (Note: In [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and earlier, use `normal` instead of `exclusive`.)\n\n#### window.vsync\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis flag is not supported in earlier versions.\n\nEnables or deactivates vertical synchronization. Vsync tries to keep the game at a steady framerate and can prevent issues like screen tearing. It is recommended to keep vsync activated if you don't know about the possible implications of turning it off. Before LÖVE 11.0, this value was boolean (`true` or `false`). Since LÖVE 11.0, this value is number (1 to enable vsync, 0 to disable vsync, -1 to use adaptive vsync when supported).\n\nNote that in iOS, vertical synchronization is always enabled and cannot be changed.\n\n#### window.depth\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis flag is not supported in earlier versions.\n\nThe number of bits per sample in the depth buffer (16/24/32, default `nil`)\n\n#### window.stencil\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis flag is not supported in earlier versions.\n\nThen number of bits per sample in the stencil buffer (generally 8, default `nil`)\n\n#### window.msaa\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis flag is not supported in earlier versions.\n\nThe number of samples to use with multi-sampled antialiasing.\n\n#### window.display\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis flag is not supported in earlier versions.\n\nThe index of the display to show the window in, if multiple monitors are available.\n\n#### window.highdpi\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis flag is not supported in earlier versions.\n\nSee [love.window.getDPIScale](love.window.getdpiscale \"love.window.getDPIScale\"). Allows the window's backbuffer to use the full pixel density of high-DPI displays on supported operating systems. LOVE will automatically scale things accordingly and use DPI-scaled units instead of pixels for most things (since [11.0](https://love2d.org/wiki/11.0 \"11.0\")) when this is true, unless the `usedpiscale` flag is set to false. When `highdpi` is false, the OS will keep things consistent between low-DPI and high-DPI displays by rendering to a low-resolution backbuffer and scaling that up on its own, when a high-DPI display is used.\n\nThis flag currently does nothing on Windows, and on Android it's effectively always enabled.\n\n#### window.usedpiscale\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis flag is not supported in earlier versions.\n\nDisables LOVE's automatic DPI scaling on high-DPI displays when false. This only has an effect when the `highdpi` flag is set to true, since the OS (rather than LOVE) takes care of everything otherwise.\n\n#### window.x & window.y\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThese flags are not supported in earlier versions.\n\nDetermines the position of the window on the user's screen. Alternatively [love.window.setPosition](love.window.setposition \"love.window.setPosition\") can be used to change the position on the fly.\n\n#### window.fsaa\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis flag has been replaced by the window.msaa flag.\n\nThe number of samples to use with multi-sampled antialiasing.\n\n#### window.srgb\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis flag has been replaced by the gammacorrect flag.\n\nEnabling this window flag will automatically convert the colors of everything drawn to the main screen from the linear RGB colorspace to the sRGB colorspace - the window's surface is treated as gamma-space sRGB. This is only one component of gamma-correct rendering, an advanced topic which is easy to mess up, so it's recommended to keep this option disabled if you're not sure about its implications.\n\n#### Release Mode\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis flag is not supported in earlier or later versions.\n\n  \nIf `t.release` is enabled, LÖVE uses the [release error handler](love.releaseerrhand \"love.releaseerrhand\"), which is sparse on information by default, and can, of course, be overridden.\n\nThe default release mode error handler also outputs a message to the player informing them to contact the author using the values *title, author and url* as specified in conf.lua.\n\nWhen a fused game in release mode is run it will not save in the love save dir, but rather one for itself, whereas previously it would be %APPDATA%\\\\LOVE\\\\game on Windows, it now is %APPDATA%\\\\game. This concept applies to other platforms as well.\n\n## Older Versions\n\nHere is a full list of options and their default values for LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\") until [11.2](https://love2d.org/wiki/11.2 \"11.2\"):\n\n``` lua\nfunction love.conf(t)\n    t.identity = nil                    -- The name of the save directory (string)\n    t.appendidentity = false            -- Search files in source directory before save directory (boolean)\n    t.version = \"11.0\"                  -- The LÖVE version this game was made for (string)\n    t.console = false                   -- Attach a console (boolean, Windows only)\n    t.accelerometerjoystick = true      -- Enable the accelerometer on iOS and Android by exposing it as a Joystick (boolean)\n    t.externalstorage = false           -- True to save files (and read from the save directory) in external storage on Android (boolean) \n    t.gammacorrect = false              -- Enable gamma-correct rendering, when supported by the system (boolean)\n \n    t.audio.mixwithsystem = true        -- Keep background music playing when opening LOVE (boolean, iOS and Android only)\n \n    t.window.title = \"Untitled\"         -- The window title (string)\n    t.window.icon = nil                 -- Filepath to an image to use as the window's icon (string)\n    t.window.width = 800                -- The window width (number)\n    t.window.height = 600               -- The window height (number)\n    t.window.borderless = false         -- Remove all border visuals from the window (boolean)\n    t.window.resizable = false          -- Let the window be user-resizable (boolean)\n    t.window.minwidth = 1               -- Minimum window width if the window is resizable (number)\n    t.window.minheight = 1              -- Minimum window height if the window is resizable (number)\n    t.window.fullscreen = false         -- Enable fullscreen (boolean)\n    t.window.fullscreentype = \"desktop\" -- Choose between \"desktop\" fullscreen or \"exclusive\" fullscreen mode (string)\n    t.window.vsync = 1                  -- Vertical sync mode (number)\n    t.window.msaa = 0                   -- The number of samples to use with multi-sampled antialiasing (number)\n    t.window.depth = nil                -- The number of bits per sample in the depth buffer\n    t.window.stencil = nil              -- The number of bits per sample in the stencil buffer\n    t.window.display = 1                -- Index of the monitor to show the window in (number)\n    t.window.highdpi = false            -- Enable high-dpi mode for the window on a Retina display (boolean)\n    t.window.x = nil                    -- The x-coordinate of the window's position in the specified display (number)\n    t.window.y = nil                    -- The y-coordinate of the window's position in the specified display (number)\n \n    t.modules.audio = true              -- Enable the audio module (boolean)\n    t.modules.data = true               -- Enable the data module (boolean)\n    t.modules.event = true              -- Enable the event module (boolean)\n    t.modules.font = true               -- Enable the font module (boolean)\n    t.modules.graphics = true           -- Enable the graphics module (boolean)\n    t.modules.image = true              -- Enable the image module (boolean)\n    t.modules.joystick = true           -- Enable the joystick module (boolean)\n    t.modules.keyboard = true           -- Enable the keyboard module (boolean)\n    t.modules.math = true               -- Enable the math module (boolean)\n    t.modules.mouse = true              -- Enable the mouse module (boolean)\n    t.modules.physics = true            -- Enable the physics module (boolean)\n    t.modules.sound = true              -- Enable the sound module (boolean)\n    t.modules.system = true             -- Enable the system module (boolean)\n    t.modules.thread = true             -- Enable the thread module (boolean)\n    t.modules.timer = true              -- Enable the timer module (boolean), Disabling it will result 0 delta time in love.update\n    t.modules.touch = true              -- Enable the touch module (boolean)\n    t.modules.video = true              -- Enable the video module (boolean)\n    t.modules.window = true             -- Enable the window module (boolean)\nend\n```\n\nHere is a full list of options and their default values for LÖVE [0.10.1](https://love2d.org/wiki/0.10.1 \"0.10.1\") and [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\"):\n\n``` lua\nfunction love.conf(t)\n    t.identity = nil                    -- The name of the save directory (string)\n    t.version = \"0.10.2\"                -- The LÖVE version this game was made for (string)\n    t.console = false                   -- Attach a console (boolean, Windows only)\n    t.accelerometerjoystick = true      -- Enable the accelerometer on iOS and Android by exposing it as a Joystick (boolean)\n    t.externalstorage = false           -- True to save files (and read from the save directory) in external storage on Android (boolean) \n    t.gammacorrect = false              -- Enable gamma-correct rendering, when supported by the system (boolean)\n \n    t.window.title = \"Untitled\"         -- The window title (string)\n    t.window.icon = nil                 -- Filepath to an image to use as the window's icon (string)\n    t.window.width = 800                -- The window width (number)\n    t.window.height = 600               -- The window height (number)\n    t.window.borderless = false         -- Remove all border visuals from the window (boolean)\n    t.window.resizable = false          -- Let the window be user-resizable (boolean)\n    t.window.minwidth = 1               -- Minimum window width if the window is resizable (number)\n    t.window.minheight = 1              -- Minimum window height if the window is resizable (number)\n    t.window.fullscreen = false         -- Enable fullscreen (boolean)\n    t.window.fullscreentype = \"desktop\" -- Choose between \"desktop\" fullscreen or \"exclusive\" fullscreen mode (string)\n    t.window.vsync = true               -- Enable vertical sync (boolean)\n    t.window.msaa = 0                   -- The number of samples to use with multi-sampled antialiasing (number)\n    t.window.display = 1                -- Index of the monitor to show the window in (number)\n    t.window.highdpi = false            -- Enable high-dpi mode for the window on a Retina display (boolean)\n    t.window.x = nil                    -- The x-coordinate of the window's position in the specified display (number)\n    t.window.y = nil                    -- The y-coordinate of the window's position in the specified display (number)\n \n    t.modules.audio = true              -- Enable the audio module (boolean)\n    t.modules.event = true              -- Enable the event module (boolean)\n    t.modules.graphics = true           -- Enable the graphics module (boolean)\n    t.modules.image = true              -- Enable the image module (boolean)\n    t.modules.joystick = true           -- Enable the joystick module (boolean)\n    t.modules.keyboard = true           -- Enable the keyboard module (boolean)\n    t.modules.math = true               -- Enable the math module (boolean)\n    t.modules.mouse = true              -- Enable the mouse module (boolean)\n    t.modules.physics = true            -- Enable the physics module (boolean)\n    t.modules.sound = true              -- Enable the sound module (boolean)\n    t.modules.system = true             -- Enable the system module (boolean)\n    t.modules.timer = true              -- Enable the timer module (boolean), Disabling it will result 0 delta time in love.update\n    t.modules.touch = true              -- Enable the touch module (boolean)\n    t.modules.video = true              -- Enable the video module (boolean)\n    t.modules.window = true             -- Enable the window module (boolean)\n    t.modules.thread = true             -- Enable the thread module (boolean)\nend\n```\n\nHere is a full list of options and their default values for LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\"):\n\n``` lua\nfunction love.conf(t)\n    t.identity = nil                    -- The name of the save directory (string)\n    t.version = \"0.10.0\"                -- The LÖVE version this game was made for (string)\n    t.console = false                   -- Attach a console (boolean, Windows only)\n    t.accelerometerjoystick = true      -- Enable the accelerometer on iOS and Android by exposing it as a Joystick (boolean)\n    t.gammacorrect = false              -- Enable gamma-correct rendering, when supported by the system (boolean)\n \n    t.window.title = \"Untitled\"         -- The window title (string)\n    t.window.icon = nil                 -- Filepath to an image to use as the window's icon (string)\n    t.window.width = 800                -- The window width (number)\n    t.window.height = 600               -- The window height (number)\n    t.window.borderless = false         -- Remove all border visuals from the window (boolean)\n    t.window.resizable = false          -- Let the window be user-resizable (boolean)\n    t.window.minwidth = 1               -- Minimum window width if the window is resizable (number)\n    t.window.minheight = 1              -- Minimum window height if the window is resizable (number)\n    t.window.fullscreen = false         -- Enable fullscreen (boolean)\n    t.window.fullscreentype = \"desktop\" -- Choose between \"desktop\" fullscreen or \"exclusive\" fullscreen mode (string)\n    t.window.vsync = true               -- Enable vertical sync (boolean)\n    t.window.msaa = 0                   -- The number of samples to use with multi-sampled antialiasing (number)\n    t.window.display = 1                -- Index of the monitor to show the window in (number)\n    t.window.highdpi = false            -- Enable high-dpi mode for the window on a Retina display (boolean)\n    t.window.x = nil                    -- The x-coordinate of the window's position in the specified display (number)\n    t.window.y = nil                    -- The y-coordinate of the window's position in the specified display (number)\n \n    t.modules.audio = true              -- Enable the audio module (boolean)\n    t.modules.event = true              -- Enable the event module (boolean)\n    t.modules.graphics = true           -- Enable the graphics module (boolean)\n    t.modules.image = true              -- Enable the image module (boolean)\n    t.modules.joystick = true           -- Enable the joystick module (boolean)\n    t.modules.keyboard = true           -- Enable the keyboard module (boolean)\n    t.modules.math = true               -- Enable the math module (boolean)\n    t.modules.mouse = true              -- Enable the mouse module (boolean)\n    t.modules.physics = true            -- Enable the physics module (boolean)\n    t.modules.sound = true              -- Enable the sound module (boolean)\n    t.modules.system = true             -- Enable the system module (boolean)\n    t.modules.timer = true              -- Enable the timer module (boolean), Disabling it will result 0 delta time in love.update\n    t.modules.touch = true              -- Enable the touch module (boolean)\n    t.modules.video = true              -- Enable the video module (boolean)\n    t.modules.window = true             -- Enable the window module (boolean)\n    t.modules.thread = true             -- Enable the thread module (boolean)\nend\n```\n\nHere is a full list of options and their default values for LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\"):\n\n``` lua\nfunction love.conf(t)\n    t.identity = nil                   -- The name of the save directory (string)\n    t.version = \"0.9.2\"                -- The LÖVE version this game was made for (string)\n    t.console = false                  -- Attach a console (boolean, Windows only)\n \n    t.window.title = \"Untitled\"        -- The window title (string)\n    t.window.icon = nil                -- Filepath to an image to use as the window's icon (string)\n    t.window.width = 800               -- The window width (number)\n    t.window.height = 600              -- The window height (number)\n    t.window.borderless = false        -- Remove all border visuals from the window (boolean)\n    t.window.resizable = false         -- Let the window be user-resizable (boolean)\n    t.window.minwidth = 1              -- Minimum window width if the window is resizable (number)\n    t.window.minheight = 1             -- Minimum window height if the window is resizable (number)\n    t.window.fullscreen = false        -- Enable fullscreen (boolean)\n    t.window.fullscreentype = \"normal\" -- Choose between \"normal\" fullscreen or \"desktop\" fullscreen mode (string)\n    t.window.vsync = true              -- Enable vertical sync (boolean)\n    t.window.fsaa = 0                  -- The number of samples to use with multi-sampled antialiasing (number)\n    t.window.display = 1               -- Index of the monitor to show the window in (number)\n    t.window.highdpi = false           -- Enable high-dpi mode for the window on a Retina display (boolean)\n    t.window.srgb = false              -- Enable sRGB gamma correction when drawing to the screen (boolean)\n    t.window.x = nil                   -- The x-coordinate of the window's position in the specified display (number)\n    t.window.y = nil                   -- The y-coordinate of the window's position in the specified display (number)\n \n    t.modules.audio = true             -- Enable the audio module (boolean)\n    t.modules.event = true             -- Enable the event module (boolean)\n    t.modules.graphics = true          -- Enable the graphics module (boolean)\n    t.modules.image = true             -- Enable the image module (boolean)\n    t.modules.joystick = true          -- Enable the joystick module (boolean)\n    t.modules.keyboard = true          -- Enable the keyboard module (boolean)\n    t.modules.math = true              -- Enable the math module (boolean)\n    t.modules.mouse = true             -- Enable the mouse module (boolean)\n    t.modules.physics = true           -- Enable the physics module (boolean)\n    t.modules.sound = true             -- Enable the sound module (boolean)\n    t.modules.system = true            -- Enable the system module (boolean)\n    t.modules.timer = true             -- Enable the timer module (boolean), Disabling it will result 0 delta time in love.update\n    t.modules.window = true            -- Enable the window module (boolean)\n    t.modules.thread = true            -- Enable the thread module (boolean)\nend\n```\n\nHere is a full list of options and their default values for LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\"):\n\n``` lua\nfunction love.conf(t)\n    t.identity = nil                   -- The name of the save directory (string)\n    t.version = \"0.9.1\"                -- The LÖVE version this game was made for (string)\n    t.console = false                  -- Attach a console (boolean, Windows only)\n \n    t.window.title = \"Untitled\"        -- The window title (string)\n    t.window.icon = nil                -- Filepath to an image to use as the window's icon (string)\n    t.window.width = 800               -- The window width (number)\n    t.window.height = 600              -- The window height (number)\n    t.window.borderless = false        -- Remove all border visuals from the window (boolean)\n    t.window.resizable = false         -- Let the window be user-resizable (boolean)\n    t.window.minwidth = 1              -- Minimum window width if the window is resizable (number)\n    t.window.minheight = 1             -- Minimum window height if the window is resizable (number)\n    t.window.fullscreen = false        -- Enable fullscreen (boolean)\n    t.window.fullscreentype = \"normal\" -- Standard fullscreen or desktop fullscreen mode (string)\n    t.window.vsync = true              -- Enable vertical sync (boolean)\n    t.window.fsaa = 0                  -- The number of samples to use with multi-sampled antialiasing (number)\n    t.window.display = 1               -- Index of the monitor to show the window in (number)\n    t.window.highdpi = false           -- Enable high-dpi mode for the window on a Retina display (boolean)\n    t.window.srgb = false              -- Enable sRGB gamma correction when drawing to the screen (boolean)\n \n    t.modules.audio = true             -- Enable the audio module (boolean)\n    t.modules.event = true             -- Enable the event module (boolean)\n    t.modules.graphics = true          -- Enable the graphics module (boolean)\n    t.modules.image = true             -- Enable the image module (boolean)\n    t.modules.joystick = true          -- Enable the joystick module (boolean)\n    t.modules.keyboard = true          -- Enable the keyboard module (boolean)\n    t.modules.math = true              -- Enable the math module (boolean)\n    t.modules.mouse = true             -- Enable the mouse module (boolean)\n    t.modules.physics = true           -- Enable the physics module (boolean)\n    t.modules.sound = true             -- Enable the sound module (boolean)\n    t.modules.system = true            -- Enable the system module (boolean)\n    t.modules.timer = true             -- Enable the timer module (boolean)\n    t.modules.window = true            -- Enable the window module (boolean)\n    t.modules.thread = true            -- Enable the thread module (boolean)\nend\n```\n\nHere is a full list of options and their default values for LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\"):\n\n``` lua\nfunction love.conf(t)\n    t.identity = nil                   -- The name of the save directory (string)\n    t.version = \"0.9.0\"                -- The LÖVE version this game was made for (string)\n    t.console = false                  -- Attach a console (boolean, Windows only)\n \n    t.window.title = \"Untitled\"        -- The window title (string)\n    t.window.icon = nil                -- Filepath to an image to use as the window's icon (string)\n    t.window.width = 800               -- The window width (number)\n    t.window.height = 600              -- The window height (number)\n    t.window.borderless = false        -- Remove all border visuals from the window (boolean)\n    t.window.resizable = false         -- Let the window be user-resizable (boolean)\n    t.window.minwidth = 1              -- Minimum window width if the window is resizable (number)\n    t.window.minheight = 1             -- Minimum window height if the window is resizable (number)\n    t.window.fullscreen = false        -- Enable fullscreen (boolean)\n    t.window.fullscreentype = \"normal\" -- Standard fullscreen or desktop fullscreen mode (string)\n    t.window.vsync = true              -- Enable vertical sync (boolean)\n    t.window.fsaa = 0                  -- The number of samples to use with multi-sampled antialiasing (number)\n    t.window.display = 1               -- Index of the monitor to show the window in (number)\n \n    t.modules.audio = true             -- Enable the audio module (boolean)\n    t.modules.event = true             -- Enable the event module (boolean)\n    t.modules.graphics = true          -- Enable the graphics module (boolean)\n    t.modules.image = true             -- Enable the image module (boolean)\n    t.modules.joystick = true          -- Enable the joystick module (boolean)\n    t.modules.keyboard = true          -- Enable the keyboard module (boolean)\n    t.modules.math = true              -- Enable the math module (boolean)\n    t.modules.mouse = true             -- Enable the mouse module (boolean)\n    t.modules.physics = true           -- Enable the physics module (boolean)\n    t.modules.sound = true             -- Enable the sound module (boolean)\n    t.modules.system = true            -- Enable the system module (boolean)\n    t.modules.timer = true             -- Enable the timer module (boolean)\n    t.modules.window = true            -- Enable the window module (boolean)\n    t.modules.thread = true            -- Enable the thread module (boolean)\nend\n```\n\nHere is a full list of options and their default values for LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\"):\n\n``` lua\nfunction love.conf(t)\n    t.title = \"Untitled\"        -- The title of the window the game is in (string)\n    t.author = \"Unnamed\"        -- The author of the game (string)\n    t.url = nil                 -- The website of the game (string)\n    t.identity = nil            -- The name of the save directory (string)\n    t.version = \"0.8.0\"         -- The LÖVE version this game was made for (string)\n    t.console = false           -- Attach a console (boolean, Windows only)\n    t.release = false           -- Enable release mode (boolean)\n    t.screen.width = 800        -- The window width (number)\n    t.screen.height = 600       -- The window height (number)\n    t.screen.fullscreen = false -- Enable fullscreen (boolean)\n    t.screen.vsync = true       -- Enable vertical sync (boolean)\n    t.screen.fsaa = 0           -- The number of MSAA samples (number)\n    t.modules.joystick = true   -- Enable the joystick module (boolean)\n    t.modules.audio = true      -- Enable the audio module (boolean)\n    t.modules.keyboard = true   -- Enable the keyboard module (boolean)\n    t.modules.event = true      -- Enable the event module (boolean)\n    t.modules.image = true      -- Enable the image module (boolean)\n    t.modules.graphics = true   -- Enable the graphics module (boolean)\n    t.modules.timer = true      -- Enable the timer module (boolean)\n    t.modules.mouse = true      -- Enable the mouse module (boolean)\n    t.modules.sound = true      -- Enable the sound module (boolean)\n    t.modules.physics = true    -- Enable the physics module (boolean)\n    t.modules.thread = true     -- Enable the thread module (boolean)\nend\n```\n\nHere is a full list of options and their default values for LÖVE [0.7.2](https://love2d.org/wiki/0.7.2 \"0.7.2\") and earlier:\n\n``` lua\nfunction love.conf(t)\n    t.title = \"Untitled\"        -- The title of the window the game is in (string)\n    t.author = \"Unnamed\"        -- The author of the game (string)\n    t.identity = nil            -- The name of the save directory (string)\n    t.version = 0               -- The LÖVE version this game was made for (number)\n    t.console = false           -- Attach a console (boolean, Windows only)\n    t.screen.width = 800        -- The window width (number)\n    t.screen.height = 600       -- The window height (number)\n    t.screen.fullscreen = false -- Enable fullscreen (boolean)\n    t.screen.vsync = true       -- Enable vertical sync (boolean)\n    t.screen.fsaa = 0           -- The number of MSAA samples (number)\n    t.modules.joystick = true   -- Enable the joystick module (boolean)\n    t.modules.audio = true      -- Enable the audio module (boolean)\n    t.modules.keyboard = true   -- Enable the keyboard module (boolean)\n    t.modules.event = true      -- Enable the event module (boolean)\n    t.modules.image = true      -- Enable the image module (boolean)\n    t.modules.graphics = true   -- Enable the graphics module (boolean)\n    t.modules.timer = true      -- Enable the timer module (boolean)\n    t.modules.mouse = true      -- Enable the mouse module (boolean)\n    t.modules.sound = true      -- Enable the sound module (boolean)\n    t.modules.physics = true    -- Enable the physics module (boolean)\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.conf](https://love2d.org/wiki/love.conf)"
- name: love.data
  id: love.data
  summary: Available since LÖVE 11.0 This module is not supported in earlier versions
  description: "# love.data\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis module is not supported in earlier versions.\n\nProvides functionality for creating and transforming data.\n\n## Types\n\n|                                                   |                                                                 |        |     |\n|---------------------------------------------------|-----------------------------------------------------------------|--------|-----|\n| [ByteData](bytedata \"ByteData\")                   | Data object containing arbitrary bytes in an contiguous memory. | 11.0   |     |\n| [CompressedData](compresseddata \"CompressedData\") | Byte data compressed using a specific algorithm.                | 0.10.0 |     |\n| [Data](data \"Data\")                               | The superclass of all data.                                     |        |     |\n\n## Functions\n\n|                                                                              |                                                                                                                                 |      |     |\n|------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------|------|-----|\n| [love.data.compress](love.data.compress \"love.data.compress\")                | Compresses a string or data using a specific compression algorithm.                                                             | 11.0 |     |\n| [love.data.decode](love.data.decode \"love.data.decode\")                      | Decode Data or a string from any of the [EncodeFormats](encodeformat \"EncodeFormat\") to Data or string.                         | 11.0 |     |\n| [love.data.decompress](love.data.decompress \"love.data.decompress\")          | Decompresses a [CompressedData](compresseddata \"CompressedData\") or previously compressed string or [Data](data \"Data\") object. | 11.0 |     |\n| [love.data.encode](love.data.encode \"love.data.encode\")                      | Encode Data or a string to a Data or string in one of the [EncodeFormats](encodeformat \"EncodeFormat\").                         | 11.0 |     |\n| [love.data.getPackedSize](love.data.getpackedsize \"love.data.getPackedSize\") | Gets the size in bytes that a given format used with [love.data.pack](love.data.pack \"love.data.pack\") will use.                | 11.0 |     |\n| [love.data.hash](love.data.hash \"love.data.hash\")                            | Compute message digest using specific hash algorithm.                                                                           | 11.0 |     |\n| [love.data.newByteData](love.data.newbytedata \"love.data.newByteData\")       | Creates a new Data object containing arbitrary bytes.                                                                           | 11.0 |     |\n| [love.data.newDataView](love.data.newdataview \"love.data.newDataView\")       | Creates a new Data referencing a subsection of an existing Data object.                                                         | 11.0 |     |\n| [love.data.pack](love.data.pack \"love.data.pack\")                            | Packs (serializes) simple Lua values.                                                                                           | 11.0 |     |\n| [love.data.unpack](love.data.unpack \"love.data.unpack\")                      | Unpacks (deserializes) a byte-string or Data into simple Lua values.                                                            | 11.0 |     |\n\n## Enums\n\n|                                                                     |                                                                                                                              |        |     |\n|---------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------|--------|-----|\n| [CompressedDataFormat](compresseddataformat \"CompressedDataFormat\") | Compressed data formats.                                                                                                     | 0.10.0 |     |\n| [ContainerType](containertype \"ContainerType\")                      | Return type of data-returning functions.                                                                                     | 11.0   |     |\n| [EncodeFormat](encodeformat \"EncodeFormat\")                         | Encoding format used to [encode](love.data.encode \"love.data.encode\") or [decode](love.data.decode \"love.data.decode\") data. | 11.0   |     |\n| [HashFunction](hashfunction \"HashFunction\")                         | Hash algorithm of [hash function](love.data.hash \"love.data.hash\").                                                          | 11.0   |     |\n\n## See Also\n\n- [love](love \"love\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.data](https://love2d.org/wiki/love.data)"
- name: love.data.compress
  id: love.data.compress
  summary: Available since LÖVE 11.0 Deprecates love.math.compress
  description: "# love.data.compress\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nDeprecates [love.math.compress](love.math.compress \"love.math.compress\").\n\nCompresses a string or data using a specific compression algorithm.\n\nThis function, depending on the compression format and level, can be slow if called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). Some benchmarks are available [here](https://github.com/Cyan4973/lz4#user-content-benchmarks).\n\n## Function\n\n### Synopsis\n\n``` lua\ncompressedData = love.data.compress( container, format, rawstring, level )\n```\n\n### Arguments\n\n[`ContainerType`](containertype \"ContainerType\")` container`  \nWhat type to return the compressed data as.\n\n[`CompressedDataFormat`](compresseddataformat \"CompressedDataFormat\")` format`  \nThe format to use when compressing the string.\n\n[`string`](string \"string\")` rawstring`  \nThe raw (un-compressed) string to compress.\n\n[`number`](number \"number\")` level (-1)`  \nThe level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used.\n\n### Returns\n\n[`value`](value \"value\")` compressedData`  \n[CompressedData](compresseddata \"CompressedData\")/[string](string \"string\") which contains the compressed version of rawstring.\n\n## Function\n\n### Synopsis\n\n``` lua\ncompressedData = love.data.compress( container, format, data, level )\n```\n\n### Arguments\n\n[`ContainerType`](containertype \"ContainerType\")` container`  \nWhat type to return the compressed data as.\n\n[`CompressedDataFormat`](compresseddataformat \"CompressedDataFormat\")` format`  \nThe format to use when compressing the data.\n\n[`Data`](data \"Data\")` data`  \nA Data object containing the raw (un-compressed) data to compress.\n\n[`number`](number \"number\")` level (-1)`  \nThe level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used.\n\n### Returns\n\n[`value`](value \"value\")` compressedData`  \n[CompressedData](compresseddata \"CompressedData\")/[string](string \"string\") which contains the compressed version of data.\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [love.data.decompress](love.data.decompress \"love.data.decompress\")\n- [CompressedData](compresseddata \"CompressedData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.data.compress](https://love2d.org/wiki/love.data.compress)"
- name: love.data.decode
  id: love.data.decode
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.data.decode\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\n  \nDecode Data or a string from any of the [EncodeFormats](encodeformat \"EncodeFormat\") to Data or string.\n\n## Function\n\n### Synopsis\n\n``` lua\ndecoded = love.data.decode( container, format, sourceString )\n```\n\n### Arguments\n\n[`ContainerType`](containertype \"ContainerType\")` container`  \nWhat type to return the decoded data as.\n\n[`EncodeFormat`](encodeformat \"EncodeFormat\")` format`  \nThe format of the input data.\n\n[`string`](string \"string\")` sourceString`  \nThe raw (encoded) data to decode.\n\n### Returns\n\n[`value`](value \"value\")` decoded`  \n[ByteData](bytedata \"ByteData\")/[string](string \"string\") which contains the decoded version of source.\n\n## Function\n\n### Synopsis\n\n``` lua\ndecoded = love.data.decode( container, format, sourceData )\n```\n\n### Arguments\n\n[`ContainerType`](containertype \"ContainerType\")` container`  \nWhat type to return the decoded data as.\n\n[`EncodeFormat`](encodeformat \"EncodeFormat\")` format`  \nThe format of the input data.\n\n[`Data`](data \"Data\")` sourceData`  \nThe raw (encoded) data to decode.\n\n### Returns\n\n[`value`](value \"value\")` decoded`  \n[ByteData](bytedata \"ByteData\")/[string](string \"string\") which contains the decoded version of source.\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [love.data.encode](love.data.encode \"love.data.encode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.data.decode](https://love2d.org/wiki/love.data.decode)"
- name: love.data.decompress
  id: love.data.decompress
  summary: Available since LÖVE 11.0 Deprecates love.math.decompress
  description: "# love.data.decompress\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nDeprecates [love.math.decompress](love.math.decompress \"love.math.decompress\").\n\nDecompresses a [CompressedData](compresseddata \"CompressedData\") or previously compressed string or [Data](data \"Data\") object.\n\n## Function\n\n### Synopsis\n\n``` lua\ndecompressedData = love.data.decompress( container, compressedData )\n```\n\n### Arguments\n\n[`ContainerType`](containertype \"ContainerType\")` container`  \nWhat type to return the decompressed data as.\n\n[`CompressedData`](compresseddata \"CompressedData\")` compressedData`  \nThe compressed data to decompress.\n\n### Returns\n\n[`value`](value \"value\")` decompressedData`  \n[Data](data \"Data\")/[string](string \"string\") containing the raw decompressed data.\n\n## Function\n\n### Synopsis\n\n``` lua\ndecompressedData = love.data.decompress( container, format, compressedString )\n```\n\n### Arguments\n\n[`ContainerType`](containertype \"ContainerType\")` container`  \nWhat type to return the decompressed data as.\n\n[`CompressedDataFormat`](compresseddataformat \"CompressedDataFormat\")` format`  \nThe format that was used to compress the given string.\n\n[`string`](string \"string\")` compressedString`  \nA string containing data previously compressed with [love.data.compress](love.data.compress \"love.data.compress\").\n\n### Returns\n\n[`value`](value \"value\")` decompressedData`  \n[Data](data \"Data\")/[string](string \"string\") containing the raw decompressed data.\n\n## Function\n\n### Synopsis\n\n``` lua\ndecompressedData = love.data.decompress( container, format, data )\n```\n\n### Arguments\n\n[`ContainerType`](containertype \"ContainerType\")` container`  \nWhat type to return the decompressed data as.\n\n[`CompressedDataFormat`](compresseddataformat \"CompressedDataFormat\")` format`  \nThe format that was used to compress the given data.\n\n[`Data`](data \"Data\")` data`  \nA Data object containing data previously compressed with [love.data.compress](love.data.compress \"love.data.compress\").\n\n### Returns\n\n[`value`](value \"value\")` decompressedData`  \n[Data](data \"Data\")/[string](string \"string\") containing the raw decompressed data.\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [love.data.compress](love.data.compress \"love.data.compress\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.data.decompress](https://love2d.org/wiki/love.data.decompress)"
- name: love.data.encode
  id: love.data.encode
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.data.encode\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\n  \nEncode Data or a string to a Data or string in one of the [EncodeFormats](encodeformat \"EncodeFormat\").\n\n## Function\n\n### Synopsis\n\n``` lua\nencoded = love.data.encode( container, format, sourceString, linelength )\n```\n\n### Arguments\n\n[`ContainerType`](containertype \"ContainerType\")` container`  \nWhat type to return the encoded data as.\n\n[`EncodeFormat`](encodeformat \"EncodeFormat\")` format`  \nThe format of the output data.\n\n[`string`](string \"string\")` sourceString`  \nThe raw data to encode.\n\n[`number`](number \"number\")` linelength (0)`  \nThe maximum line length of the output. Only supported for base64, ignored if 0.\n\n### Returns\n\n[`value`](value \"value\")` encoded`  \n[ByteData](bytedata \"ByteData\")/[string](string \"string\") which contains the encoded version of source.\n\n## Function\n\n### Synopsis\n\n``` lua\nencoded = love.data.encode( container, format, sourceData, linelength )\n```\n\n### Arguments\n\n[`ContainerType`](containertype \"ContainerType\")` container`  \nWhat type to return the encoded data as.\n\n[`EncodeFormat`](encodeformat \"EncodeFormat\")` format`  \nThe format of the output data.\n\n[`Data`](data \"Data\")` sourceData`  \nThe raw data to encode.\n\n[`number`](number \"number\")` linelength (0)`  \nThe maximum line length of the output. Only supported for base64, ignored if 0.\n\n### Returns\n\n[`value`](value \"value\")` encoded`  \n[ByteData](bytedata \"ByteData\")/[string](string \"string\") which contains the encoded version of source.\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [love.data.decode](love.data.decode \"love.data.decode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.data.encode](https://love2d.org/wiki/love.data.encode)"
- name: love.data.getPackedSize
  id: love.data.getpackedsize
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.data.getPackedSize\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the size in bytes that a given format used with [love.data.pack](love.data.pack \"love.data.pack\") will use.\n\nThis function behaves the same as Lua 5.3's [string.packsize](https://www.lua.org/manual/5.3/manual.html#pdf-string.packsize).\n\n## Function\n\n### Synopsis\n\n``` lua\nsize = love.data.getPackedSize( format )\n```\n\n### Arguments\n\n[`string`](string \"string\")` format`  \nA string determining how the values are packed. Follows the rules of [Lua 5.3's string.pack format strings](https://www.lua.org/manual/5.3/manual.html#6.4.2).\n\n### Returns\n\n[`number`](number \"number\")` size`  \nThe size in bytes that the packed data will use.\n\n## Notes\n\nThe format string cannot have the variable-length options 's' or 'z'.\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [love.data.pack](love.data.pack \"love.data.pack\")\n- [love.data.unpack](love.data.unpack \"love.data.unpack\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.data.getPackedSize](https://love2d.org/wiki/love.data.getPackedSize)"
- name: love.data.hash
  id: love.data.hash
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.data.hash\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nCompute the message digest of a string using a specified hash algorithm.\n\nThere's [bug](https://github.com/love2d/love/issues/1458) in version, up to [11.2](https://love2d.org/wiki/11.2 \"11.2\") which gives wrong result for very-specific input length (112 + 128n for SHA512 and SHA384, 56 + 64n for other hash functions).\n\n## Function\n\n### Synopsis\n\n``` lua\nrawdigest = love.data.hash( hashFunction, string )\n```\n\n### Arguments\n\n[`HashFunction`](hashfunction \"HashFunction\")` hashFunction`  \nHash algorithm to use.\n\n[`string`](string \"string\")` string`  \nString to hash.\n\n### Returns\n\n[`string`](string \"string\")` rawdigest`  \nRaw message digest string.\n\n## Function\n\n### Synopsis\n\n``` lua\nrawdigest = love.data.hash( hashFunction, data )\n```\n\n### Arguments\n\n[`HashFunction`](hashfunction \"HashFunction\")` hashFunction`  \nHash algorithm to use.\n\n[`Data`](data \"Data\")` data`  \nData to hash.\n\n### Returns\n\n[`string`](string \"string\")` rawdigest`  \nRaw message digest string.\n\n## Notes\n\nTo return the hex string representation of the hash, use [love.data.encode](love.data.encode \"love.data.encode\")\n\n``` lua\nhexDigestString = love.data.encode(\"string\", \"hex\", love.data.hash(algo, data))\n```\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [love.data.encode](love.data.encode \"love.data.encode\")\n- [HashFunction](hashfunction \"HashFunction\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.data.hash](https://love2d.org/wiki/love.data.hash)"
- name: love.data.newByteData
  id: love.data.newbytedata
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.data.newByteData\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new Data object containing arbitrary bytes.\n\n[Data:getPointer](data-getpointer \"Data:getPointer\") along with LuaJIT's FFI can be used to manipulate the contents of the ByteData object after it has been created.\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\nCreates a new ByteData by copying the contents of the specified string.\n\n### Synopsis\n\n``` lua\nbytedata = love.data.newByteData( datastring )\n```\n\n### Arguments\n\n[`string`](string \"string\")` datastring`  \nThe byte string to copy.\n\n### Returns\n\n[`ByteData`](bytedata \"ByteData\")` bytedata`  \nThe new Data object.\n\n## Function\n\nCreates a new ByteData by copying from an existing Data object.\n\n### Synopsis\n\n``` lua\nbytedata = love.data.newByteData( data, offset, size )\n```\n\n### Arguments\n\n[`Data`](data \"Data\")` data`  \nThe existing Data object to copy.\n\n[`number`](number \"number\")` offset (0)`  \nThe offset of the subsection to copy, in bytes.\n\n[`number`](number \"number\")` size (data:getSize())`  \nThe size in bytes of the new Data object.\n\n### Returns\n\n[`ByteData`](bytedata \"ByteData\")` bytedata`  \nThe new Data object.\n\n## Function\n\nCreates a new empty (zero-initialized) ByteData with the specific size.\n\n### Synopsis\n\n``` lua\nbytedata = love.data.newByteData( size )\n```\n\n### Arguments\n\n[`number`](number \"number\")` size`  \nThe size in bytes of the new Data object.\n\n### Returns\n\n[`ByteData`](bytedata \"ByteData\")` bytedata`  \nThe new Data object.\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [ByteData](bytedata \"ByteData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.data.newByteData](https://love2d.org/wiki/love.data.newByteData)"
- name: love.data.newDataView
  id: love.data.newdataview
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.data.newDataView\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new Data referencing a subsection of an existing Data object.\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\nview = love.data.newDataView( data, offset, size )\n```\n\n### Arguments\n\n[`Data`](data \"Data\")` data`  \nThe Data object to reference.\n\n[`number`](number \"number\")` offset`  \nThe offset of the subsection to reference, in bytes.\n\n[`number`](number \"number\")` size`  \nThe size in bytes of the subsection to reference.\n\n### Returns\n\n[`Data`](data \"Data\")` view`  \nThe new Data view.\n\n## Notes\n\n[Data:getString](data-getstring \"Data:getString\") and [Data:getPointer](data-getpointer \"Data:getPointer\") will return the original Data object's contents, with the view's offset and size applied.\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.data.newDataView](https://love2d.org/wiki/love.data.newDataView)"
- name: love.data.pack
  id: love.data.pack
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.data.pack\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nPacks (serializes) simple Lua values.\n\nThis function behaves the same as Lua 5.3's [string.pack](https://www.lua.org/manual/5.3/manual.html#pdf-string.pack).\n\n## Function\n\n### Synopsis\n\n``` lua\ndata = love.data.pack( container, format, v1, ... )\n```\n\n### Arguments\n\n[`ContainerType`](containertype \"ContainerType\")` container`  \nWhat type to return the encoded data as.\n\n[`string`](string \"string\")` format`  \nA string determining how the values are packed. Follows the rules of [Lua 5.3's string.pack format strings](https://www.lua.org/manual/5.3/manual.html#6.4.2).\n\n[`value`](value \"value\")` v1`  \nThe first value (number, boolean, or string) to serialize.\n\n[`value`](value \"value\")` ...`  \nAdditional values to serialize.\n\n### Returns\n\n[`value`](value \"value\")` data`  \n[Data](data \"Data\")/[string](string \"string\") which contains the serialized data.\n\n## Notes\n\nPacking integers with values greater than 2^53 is not supported, as Lua 5.1 cannot represent those values in its number type.\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [love.data.unpack](love.data.unpack \"love.data.unpack\")\n- [love.data.getPackedSize](love.data.getpackedsize \"love.data.getPackedSize\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.data.pack](https://love2d.org/wiki/love.data.pack)"
- name: love.data.unpack
  id: love.data.unpack
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.data.unpack\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nUnpacks (deserializes) a byte-string or Data into simple Lua values.\n\nThis function behaves the same as Lua 5.3's [string.unpack](https://www.lua.org/manual/5.3/manual.html#pdf-string.unpack).\n\n## Function\n\n### Synopsis\n\n``` lua\nv1, ..., index = love.data.unpack( format, datastring, pos )\n```\n\n### Arguments\n\n[`string`](string \"string\")` format`  \nA string determining how the values were packed. Follows the rules of [Lua 5.3's string.pack format strings](https://www.lua.org/manual/5.3/manual.html#6.4.2).\n\n[`string`](string \"string\")` datastring`  \nA string containing the packed (serialized) data.\n\n[`number`](number \"number\")` pos (1)`  \nWhere to start reading in the string. Negative values can be used to read relative from the end of the string.\n\n### Returns\n\n[`value`](value \"value\")` v1`  \nThe first value (number, boolean, or string) that was unpacked.\n\n[`value`](value \"value\")` ...`  \nAdditional unpacked values.\n\n[`number`](number \"number\")` index`  \nThe index of the first unread byte in the data string.\n\n## Function\n\n### Synopsis\n\n``` lua\nv1, ..., index = love.data.unpack( format, data, pos )\n```\n\n### Arguments\n\n[`string`](string \"string\")` format`  \nA string determining how the values were packed. Follows the rules of [Lua 5.3's string.pack format strings](https://www.lua.org/manual/5.3/manual.html#6.4.2).\n\n[`Data`](data \"Data\")` data`  \nA Data object containing the packed (serialized) data.\n\n[`number`](number \"number\")` pos (1)`  \n1-based index indicating where to start reading in the Data. Negative values can be used to read relative from the end of the Data object.\n\n### Returns\n\n[`value`](value \"value\")` v1`  \nThe first value (number, boolean, or string) that was unpacked.\n\n[`value`](value \"value\")` ...`  \nAdditional unpacked values.\n\n[`number`](number \"number\")` index`  \nThe 1-based index of the first unread byte in the Data.\n\n## Notes\n\nUnpacking integers with values greater than 2^52 is not supported, as Lua 5.1 cannot represent those values in its number type.\n\n## See Also\n\n- [love.data](love.data \"love.data\")\n- [love.data.pack](love.data.pack \"love.data.pack\")\n- [love.data.getPackedSize](love.data.getpackedsize \"love.data.getPackedSize\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.data.unpack](https://love2d.org/wiki/love.data.unpack)"
- name: love.directorydropped
  id: love.directorydropped
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.directorydropped\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nCallback function triggered when a directory is dragged and dropped onto the window.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.directorydropped( path )\n```\n\n### Arguments\n\n[`string`](string \"string\")` path`  \nThe full platform-dependent path to the directory. It can be used as an argument to [love.filesystem.mount](love.filesystem.mount \"love.filesystem.mount\"), in order to gain read access to the directory with love.filesystem.\n\n### Returns\n\nNothing.\n\n## Notes\n\nPaths passed into this callback are able to be used with [love.filesystem.mount](love.filesystem.mount \"love.filesystem.mount\"), which is the only way to get read access via love.filesystem to the dropped directory. love.filesystem.mount does not generally accept other full platform-dependent directory paths that haven't been dragged and dropped onto the window.\n\n## See Also\n\n- [love](love \"love\")\n- [love.filedropped](love.filedropped \"love.filedropped\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.directorydropped](https://love2d.org/wiki/love.directorydropped)"
- name: love.displayrotated
  id: love.displayrotated
  summary: Available since LÖVE 11.3 This callback is not supported in earlier versions
  description: "# love.displayrotated\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis callback is not supported in earlier versions.\n\nCalled when the device display orientation changed, for example, user rotated their phone 180 degrees.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.displayrotated( index, orientation )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nThe index of the display that changed orientation.\n\n[`DisplayOrientation`](displayorientation \"DisplayOrientation\")` orientation`  \nThe new orientation.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love](love \"love\")\n- [love.window.getDisplayOrientation](love.window.getdisplayorientation \"love.window.getDisplayOrientation\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.displayrotated](https://love2d.org/wiki/love.displayrotated)"
- name: love.draw
  id: love.draw
  summary: Callback function used to draw on the screen every frame
  description: "# love.draw\n\nCallback function used to draw on the screen every frame.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.draw( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Examples\n\nDraw an image that was loaded in [love.load](love.load \"love.load\") (putting [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\") in love.draw would cause the image to be reloaded every frame, which would cause issues).\n\n``` lua\nfunction love.load()\n   hamster = love.graphics.newImage(\"hamster.png\")\n   x = 50\n   y = 50\nend\nfunction love.draw()\n   love.graphics.draw(hamster, x, y)\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.draw](https://love2d.org/wiki/love.draw)"
- name: love.errhand
  id: love.errhand
  summary: The error handler, used to display error messages
  description: "# love.errhand\n\n|                                                                                               |\n|-----------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                          |\n| This function has been renamed to [love.errorhandler](love.errorhandler \"love.errorhandler\"). |\n\nThe error handler, used to display error messages.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.errhand( msg )\n```\n\n### Arguments\n\n[`string`](string \"string\")` msg`  \nThe error message.\n\n### Returns\n\nNothing.\n\n## Examples\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### The default function used if you don't supply your own.\n\n``` lua\nlocal function error_printer(msg, layer)\n    print((debug.traceback(\"Error: \" .. tostring(msg), 1+(layer or 1)):gsub(\"\\n[^\\n]+$\", \"\")))\nend\n \nfunction love.errhand(msg)\n    msg = tostring(msg)\n \n    error_printer(msg, 2)\n \n    if not love.window or not love.graphics or not love.event then\n        return\n    end\n \n    if not love.graphics.isCreated() or not love.window.isOpen() then\n        local success, status = pcall(love.window.setMode, 800, 600)\n        if not success or not status then\n            return\n        end\n    end\n \n    -- Reset state.\n    if love.mouse then\n        love.mouse.setVisible(true)\n        love.mouse.setGrabbed(false)\n        love.mouse.setRelativeMode(false)\n    end\n    if love.joystick then\n        -- Stop all joystick vibrations.\n        for i,v in ipairs(love.joystick.getJoysticks()) do\n            v:setVibration()\n        end\n    end\n    if love.audio then love.audio.stop() end\n    love.graphics.reset()\n    local font = love.graphics.setNewFont(math.floor(love.window.toPixels(14)))\n \n    love.graphics.setBackgroundColor(89, 157, 220)\n    love.graphics.setColor(255, 255, 255, 255)\n \n    local trace = debug.traceback()\n \n    love.graphics.clear(love.graphics.getBackgroundColor())\n    love.graphics.origin()\n \n    local err = {}\n \n    table.insert(err, \"Error\\n\")\n    table.insert(err, msg..\"\\n\\n\")\n \n    for l in string.gmatch(trace, \"(.-)\\n\") do\n        if not string.match(l, \"boot.lua\") then\n            l = string.gsub(l, \"stack traceback:\", \"Traceback\\n\")\n            table.insert(err, l)\n        end\n    end\n \n    local p = table.concat(err, \"\\n\")\n \n    p = string.gsub(p, \"\\t\", \"\")\n    p = string.gsub(p, \"%[string \\\"(.-)\\\"%]\", \"%1\")\n \n    local function draw()\n        local pos = love.window.toPixels(70)\n        love.graphics.clear(love.graphics.getBackgroundColor())\n        love.graphics.printf(p, pos, pos, love.graphics.getWidth() - pos)\n        love.graphics.present()\n    end\n \n    while true do\n        love.event.pump()\n \n        for e, a, b, c in love.event.poll() do\n            if e == \"quit\" then\n                return\n            elseif e == \"keypressed\" and a == \"escape\" then\n                return\n            elseif e == \"touchpressed\" then\n                local name = love.window.getTitle()\n                if #name == 0 or name == \"Untitled\" then name = \"Game\" end\n                local buttons = {\"OK\", \"Cancel\"}\n                local pressed = love.window.showMessageBox(\"Quit \"..name..\"?\", \"\", buttons)\n                if pressed == 1 then\n                    return\n                end\n            end\n        end\n \n        draw()\n \n        if love.timer then\n            love.timer.sleep(0.1)\n        end\n    end\n \nend\n```\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier or later versions.\n\n### The default function used if you don't supply your own.\n\n``` lua\nlocal function error_printer(msg, layer)\n    print((debug.traceback(\"Error: \" .. tostring(msg), 1+(layer or 1)):gsub(\"\\n[^\\n]+$\", \"\")))\nend\n \nfunction love.errhand(msg)\n    msg = tostring(msg)\n \n    error_printer(msg, 2)\n \n    if not love.window or not love.graphics or not love.event then\n        return\n    end\n \n    if not love.graphics.isCreated() or not love.window.isCreated() then\n        local success, status = pcall(love.window.setMode, 800, 600)\n        if not success or not status then\n            return\n        end\n    end\n \n    -- Reset state.\n    if love.mouse then\n        love.mouse.setVisible(true)\n        love.mouse.setGrabbed(false)\n    end\n    if love.joystick then\n        -- Stop all joystick vibrations.\n        for i,v in ipairs(love.joystick.getJoysticks()) do\n            v:setVibration()\n        end\n    end\n    if love.audio then love.audio.stop() end\n    love.graphics.reset()\n    local font = love.graphics.setNewFont(math.floor(love.window.toPixels(14)))\n \n    local sRGB = select(3, love.window.getMode()).srgb\n    if sRGB and love.math then\n        love.graphics.setBackgroundColor(love.math.gammaToLinear(89, 157, 220))\n    else\n        love.graphics.setBackgroundColor(89, 157, 220)\n    end\n \n    love.graphics.setColor(255, 255, 255, 255)\n \n    local trace = debug.traceback()\n \n    love.graphics.clear()\n    love.graphics.origin()\n \n    local err = {}\n \n    table.insert(err, \"Error\\n\")\n    table.insert(err, msg..\"\\n\\n\")\n \n    for l in string.gmatch(trace, \"(.-)\\n\") do\n        if not string.match(l, \"boot.lua\") then\n            l = string.gsub(l, \"stack traceback:\", \"Traceback\\n\")\n            table.insert(err, l)\n        end\n    end\n \n    local p = table.concat(err, \"\\n\")\n \n    p = string.gsub(p, \"\\t\", \"\")\n    p = string.gsub(p, \"%[string \\\"(.-)\\\"%]\", \"%1\")\n \n    local function draw()\n        local pos = love.window.toPixels(70)\n        love.graphics.clear()\n        love.graphics.printf(p, pos, pos, love.graphics.getWidth() - pos)\n        love.graphics.present()\n    end\n \n    while true do\n        love.event.pump()\n \n        for e, a, b, c in love.event.poll() do\n            if e == \"quit\" then\n                return\n            end\n            if e == \"keypressed\" and a == \"escape\" then\n                return\n            end\n        end\n \n        draw()\n \n        if love.timer then\n            love.timer.sleep(0.1)\n        end\n    end\nend\n```\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis variant is not supported in earlier or later versions.\n\n### The default function used if you don't supply your own.\n\n``` lua\nlocal function error_printer(msg, layer)\n    print((debug.traceback(\"Error: \" .. tostring(msg), 1+(layer or 1)):gsub(\"\\n[^\\n]+$\", \"\")))\nend\n \nfunction love.errhand(msg)\n    msg = tostring(msg)\n \n    error_printer(msg, 2)\n \n    if not love.window or not love.graphics or not love.event then\n        return\n    end\n \n    if not love.graphics.isCreated() or not love.window.isCreated() then\n        if not pcall(love.window.setMode, 800, 600) then\n            return\n        end\n    end\n \n    -- Reset state.\n    if love.mouse then\n        love.mouse.setVisible(true)\n        love.mouse.setGrabbed(false)\n    end\n    if love.joystick then\n        for i,v in ipairs(love.joystick.getJoysticks()) do\n            v:setVibration() -- Stop all joystick vibrations.\n        end\n    end\n    if love.audio then love.audio.stop() end\n    love.graphics.reset()\n    love.graphics.setBackgroundColor(89, 157, 220)\n    local font = love.graphics.setNewFont(14)\n \n    love.graphics.setColor(255, 255, 255, 255)\n \n    local trace = debug.traceback()\n \n    love.graphics.clear()\n    love.graphics.origin()\n \n    local err = {}\n \n    table.insert(err, \"Error\\n\")\n    table.insert(err, msg..\"\\n\\n\")\n \n    for l in string.gmatch(trace, \"(.-)\\n\") do\n        if not string.match(l, \"boot.lua\") then\n            l = string.gsub(l, \"stack traceback:\", \"Traceback\\n\")\n            table.insert(err, l)\n        end\n    end\n \n    local p = table.concat(err, \"\\n\")\n \n    p = string.gsub(p, \"\\t\", \"\")\n    p = string.gsub(p, \"%[string \\\"(.-)\\\"%]\", \"%1\")\n \n    local function draw()\n        love.graphics.clear()\n        love.graphics.printf(p, 70, 70, love.graphics.getWidth() - 70)\n        love.graphics.present()\n    end\n \n    while true do\n        love.event.pump()\n \n        for e, a, b, c in love.event.poll() do\n            if e == \"quit\" then\n                return\n            end\n            if e == \"keypressed\" and a == \"escape\" then\n                return\n            end\n        end\n \n        draw()\n \n        if love.timer then\n            love.timer.sleep(0.1)\n        end\n    end\n \nend\n```\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in that and later versions.\n\n### The default function used if you don't supply your own.\n\n``` lua\nlocal function error_printer(msg, layer)\n    print((debug.traceback(\"Error: \" .. tostring(msg), 1+(layer or 1)):gsub(\"\\n[^\\n]+$\", \"\")))\nend\n \nfunction love.errhand(msg)\n    msg = tostring(msg)\n \n    error_printer(msg, 2)\n \n    if not love.graphics or not love.event or not love.graphics.isCreated() then\n        return\n    end\n \n    -- Load.\n    if love.audio then love.audio.stop() end\n    love.graphics.reset()\n    love.graphics.setBackgroundColor(89, 157, 220)\n    local font = love.graphics.newFont(14)\n    love.graphics.setFont(font)\n \n    love.graphics.setColor(255, 255, 255, 255)\n \n    local trace = debug.traceback()\n \n    love.graphics.clear()\n \n    local err = {}\n \n    table.insert(err, \"Error\\n\")\n    table.insert(err, msg..\"\\n\\n\")\n \n    for l in string.gmatch(trace, \"(.-)\\n\") do\n        if not string.match(l, \"boot.lua\") then\n            l = string.gsub(l, \"stack traceback:\", \"Traceback\\n\")\n            table.insert(err, l)\n        end\n    end\n \n    local p = table.concat(err, \"\\n\")\n \n    p = string.gsub(p, \"\\t\", \"\")\n    p = string.gsub(p, \"%[string \\\"(.-)\\\"%]\", \"%1\")\n \n    local function draw()\n        love.graphics.clear()\n        love.graphics.printf(p, 70, 70, love.graphics.getWidth() - 70)\n        love.graphics.present()\n    end\n \n    draw()\n \n    local e, a, b, c\n    while true do\n        e, a, b, c = love.event.wait()\n \n        if e == \"quit\" then\n            return\n        end\n        if e == \"keypressed\" and a == \"escape\" then\n            return\n        end\n \n        draw()\n \n    end\n \nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.errhand](https://love2d.org/wiki/love.errhand)"
- name: love.errorhandler
  id: love.errorhandler
  summary: Available since LÖVE 11.0 It has been renamed from love.errhand
  description: "# love.errorhandler\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [love.errhand](love.errhand \"love.errhand\").\n\nThe error handler, used to display error messages.\n\nNote that if the error handler itself throws error, LÖVE only prints the error in the console and exit immediately!\n\n## Function\n\n### Synopsis\n\n``` lua\nmainLoop = love.errorhandler( msg )\n```\n\n### Arguments\n\n[`string`](string \"string\")` msg`  \nThe error message.\n\n### Returns\n\n[`function`](function \"function\")` mainLoop`  \nFunction which handles one frame, including events and rendering, when called.\n\n## Examples\n\n### The default function used if you don't supply your own.\n\n``` lua\nlocal utf8 = require(\"utf8\")\n \nlocal function error_printer(msg, layer)\n    print((debug.traceback(\"Error: \" .. tostring(msg), 1+(layer or 1)):gsub(\"\\n[^\\n]+$\", \"\")))\nend\n \nfunction love.errorhandler(msg)\n    msg = tostring(msg)\n \n    error_printer(msg, 2)\n \n    if not love.window or not love.graphics or not love.event then\n        return\n    end\n \n    if not love.graphics.isCreated() or not love.window.isOpen() then\n        local success, status = pcall(love.window.setMode, 800, 600)\n        if not success or not status then\n            return\n        end\n    end\n \n    -- Reset state.\n    if love.mouse then\n        love.mouse.setVisible(true)\n        love.mouse.setGrabbed(false)\n        love.mouse.setRelativeMode(false)\n        if love.mouse.isCursorSupported() then\n            love.mouse.setCursor()\n        end\n    end\n    if love.joystick then\n        -- Stop all joystick vibrations.\n        for i,v in ipairs(love.joystick.getJoysticks()) do\n            v:setVibration()\n        end\n    end\n    if love.audio then love.audio.stop() end\n \n    love.graphics.reset()\n    local font = love.graphics.setNewFont(14)\n \n    love.graphics.setColor(1, 1, 1, 1)\n \n    local trace = debug.traceback()\n \n    love.graphics.origin()\n \n    local sanitizedmsg = {}\n    for char in msg:gmatch(utf8.charpattern) do\n        table.insert(sanitizedmsg, char)\n    end\n    sanitizedmsg = table.concat(sanitizedmsg)\n \n    local err = {}\n \n    table.insert(err, \"Error\\n\")\n    table.insert(err, sanitizedmsg)\n \n    if #sanitizedmsg ~= #msg then\n        table.insert(err, \"Invalid UTF-8 string in error message.\")\n    end\n \n    table.insert(err, \"\\n\")\n \n    for l in trace:gmatch(\"(.-)\\n\") do\n        if not l:match(\"boot.lua\") then\n            l = l:gsub(\"stack traceback:\", \"Traceback\\n\")\n            table.insert(err, l)\n        end\n    end\n \n    local p = table.concat(err, \"\\n\")\n \n    p = p:gsub(\"\\t\", \"\")\n    p = p:gsub(\"%[string \\\"(.-)\\\"%]\", \"%1\")\n \n    local function draw()\n        local pos = 70\n        love.graphics.clear(89/255, 157/255, 220/255)\n        love.graphics.printf(p, pos, pos, love.graphics.getWidth() - pos)\n        love.graphics.present()\n    end\n \n    local fullErrorText = p\n    local function copyToClipboard()\n        if not love.system then return end\n        love.system.setClipboardText(fullErrorText)\n        p = p .. \"\\nCopied to clipboard!\"\n        draw()\n    end\n \n    if love.system then\n        p = p .. \"\\n\\nPress Ctrl+C or tap to copy this error\"\n    end\n \n    return function()\n        love.event.pump()\n \n        for e, a, b, c in love.event.poll() do\n            if e == \"quit\" then\n                return 1\n            elseif e == \"keypressed\" and a == \"escape\" then\n                return 1\n            elseif e == \"keypressed\" and a == \"c\" and love.keyboard.isDown(\"lctrl\", \"rctrl\") then\n                copyToClipboard()\n            elseif e == \"touchpressed\" then\n                local name = love.window.getTitle()\n                if #name == 0 or name == \"Untitled\" then name = \"Game\" end\n                local buttons = {\"OK\", \"Cancel\"}\n                if love.system then\n                    buttons[3] = \"Copy to clipboard\"\n                end\n                local pressed = love.window.showMessageBox(\"Quit \"..name..\"?\", \"\", buttons)\n                if pressed == 1 then\n                    return 1\n                elseif pressed == 3 then\n                    copyToClipboard()\n                end\n            end\n        end\n \n        draw()\n \n        if love.timer then\n            love.timer.sleep(0.1)\n        end\n    end\n \nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.errorhandler](https://love2d.org/wiki/love.errorhandler)"
- name: love.event
  id: love.event
  summary: Available since LÖVE 0.6.0 This module is not supported in earlier versions
  description: "# love.event\n\n**Available since LÖVE [0.6.0](https://love2d.org/wiki/0.6.0 \"0.6.0\")**  \nThis module is not supported in earlier versions.\n\nManages events, like keypresses.\n\nIt is possible to define new events by appending the table `love.handlers`. Such functions can be invoked as usual, via [love.event.push](love.event.push \"love.event.push\") using the table index as an argument.\n\n## Functions\n\n|                                                         |                                                                          |       |     |\n|---------------------------------------------------------|--------------------------------------------------------------------------|-------|-----|\n| [love.event.clear](love.event.clear \"love.event.clear\") | Clears the event queue.                                                  | 0.7.2 |     |\n| [love.event.poll](love.event.poll \"love.event.poll\")    | Returns an iterator for messages in the event queue.                     | 0.6.0 |     |\n| [love.event.pump](love.event.pump \"love.event.pump\")    | Pump events into the event queue.                                        | 0.6.0 |     |\n| [love.event.push](love.event.push \"love.event.push\")    | Adds an event to the event queue.                                        | 0.6.0 |     |\n| [love.event.quit](love.event.quit \"love.event.quit\")    | Exits or restart the LÖVE program.                                       | 0.8.0 |     |\n| [love.event.wait](love.event.wait \"love.event.wait\")    | Like love.event.poll(), but blocks until there is an event in the queue. | 0.6.0 |     |\n\n## Enums\n\n|                        |                                              |       |     |\n|------------------------|----------------------------------------------|-------|-----|\n| [Event](event \"Event\") | Arguments to love.event.push() and the like. | 0.6.0 |     |\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.event](https://love2d.org/wiki/love.event)"
- name: love.event.clear
  id: love.event.clear
  summary: Available since LÖVE 0.7.2 This function is not supported in earlier versions
  description: "# love.event.clear\n\n**Available since LÖVE [0.7.2](https://love2d.org/wiki/0.7.2 \"0.7.2\")**  \nThis function is not supported in earlier versions.\n\nClears the event queue.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.event.clear()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.event](love.event \"love.event\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.event.clear](https://love2d.org/wiki/love.event.clear)"
- name: love.event.poll
  id: love.event.poll
  summary: Available since LÖVE 0.6.0 This function is not supported in earlier versions
  description: "# love.event.poll\n\n**Available since LÖVE [0.6.0](https://love2d.org/wiki/0.6.0 \"0.6.0\")**  \nThis function is not supported in earlier versions.\n\nReturns an iterator for messages in the event queue.\n\n## Function\n\n### Synopsis\n\n``` lua\ni = love.event.poll( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`function`](function \"function\")` i`  \nIterator function usable in a for loop.\n\n## Examples\n\n### Checking for events in 0.10.0\n\n``` lua\nfor n, a, b, c, d, e, f in love.event.poll() do\n    if n == \"quit\" then\n        -- Quit!\n    end \nend\n```\n\n### Checking for events in 0.8.0\n\n``` lua\nfor e, a, b, c, d in love.event.poll() do\n    if e == \"quit\" then\n        -- Quit!\n    end \nend\n```\n\n### Checking for events in 0.7.2\n\n``` lua\nfor e, a, b, c in love.event.poll() do\n    if e == \"q\" then\n        -- Quit!\n    end \nend\n```\n\n## See Also\n\n- [love.event](love.event \"love.event\")\n- [love.event.wait](love.event.wait \"love.event.wait\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.event.poll](https://love2d.org/wiki/love.event.poll)"
- name: love.event.pump
  id: love.event.pump
  summary: Available since LÖVE 0.6.0 This function is not supported in earlier versions
  description: "# love.event.pump\n\n**Available since LÖVE [0.6.0](https://love2d.org/wiki/0.6.0 \"0.6.0\")**  \nThis function is not supported in earlier versions.\n\nPump events into the event queue.\n\nThis is a low-level function, and is usually not called by the user, but by [`love.run`](love.run \"love.run\").\n\nNote that this does need to be called for any OS to think you're still running, and if you want to handle OS-generated events at all (think callbacks).\n\nlove.event.pump can only be called from the main thread, but afterwards, the rest of love.event can be used from any other thread.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.event.pump( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.event.poll](love.event.poll \"love.event.poll\")\n- [love.event.wait](love.event.wait \"love.event.wait\")\n- [love.event](love.event \"love.event\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.event.pump](https://love2d.org/wiki/love.event.pump)"
- name: love.event.push
  id: love.event.push
  summary: Available since LÖVE 0.6.0 This function is not supported in earlier versions
  description: "# love.event.push\n\n**Available since LÖVE [0.6.0](https://love2d.org/wiki/0.6.0 \"0.6.0\")**  \nThis function is not supported in earlier versions.\n\nAdds an event to the event queue.\n\nSee [Variant](variant \"Variant\") for the list of supported types for the arguments.\n\nFrom [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") onwards, you may pass an arbitrary amount of arguments with this function, though the default callbacks don't ever use more than six.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.event.push( n, a, b, c, d, e, f, ... )\n```\n\n### Arguments\n\n[`Event`](event \"Event\")` n`  \nThe name of the event.\n\n[`Variant`](variant \"Variant\")` a (nil)`  \nFirst event argument.\n\n[`Variant`](variant \"Variant\")` b (nil)`  \nSecond event argument.\n\n[`Variant`](variant \"Variant\")` c (nil)`  \nThird event argument.\n\n[`Variant`](variant \"Variant\")` d (nil)` Available since 0.8.0  \nFourth event argument.\n\n  \n\n[`Variant`](variant \"Variant\")` e (nil)` Available since 0.10.0  \nFifth event argument.\n\n[`Variant`](variant \"Variant\")` f (nil)` Available since 0.10.0  \nSixth event argument.\n\n[`Variant`](variant \"Variant\")` ... (nil)` Available since 0.10.0  \nFurther event arguments may follow.\n\n### Returns\n\nNothing.\n\n## Examples\n\n``` lua\nfunction love.keypressed(k)\n    if k == 'escape' then\n        love.event.push('quit') -- Quit the game.\n    end \nend\n```\n\n  \n\n``` lua\nfunction love.keypressed(k)\n    if k == 'escape' then\n        love.event.push('q') -- Quit the game.\n    end \nend\n```\n\n## See Also\n\n- [love.event](love.event \"love.event\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.event.push](https://love2d.org/wiki/love.event.push)"
- name: love.event.quit
  id: love.event.quit
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.event.quit\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nAdds the quit event to the queue.\n\nThe quit event is a signal for the event handler to close LÖVE. It's possible to abort the exit process with the [love.quit](love.quit \"love.quit\") callback.\n\nEquivalent to love.event.push(\"quit\", exitstatus)\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.event.quit( exitstatus )\n```\n\n### Arguments\n\n[`number`](number \"number\")` exitstatus (0)` Available since 0.10.0  \nThe program exit status to use when closing the application.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis variant is not supported in earlier versions.\n\nRestarts the game without relaunching the executable. This cleanly shuts down the main Lua state instance and creates a brand new one.\n\n### Synopsis\n\n``` lua\nlove.event.quit( \"restart\" )\n```\n\n### Arguments\n\n[`string`](string \"string\")` \"restart\"`  \nTells the default [love.run](love.run \"love.run\") to exit and restart the game without relaunching the executable.\n\n### Returns\n\nNothing.\n\n## Example\n\n``` lua\nfunction love.keypressed(k)\n   if k == 'escape' then\n      love.event.quit()\n   end\nend\n```\n\n## See Also\n\n- [love.event](love.event \"love.event\")\n- [love.quit](love.quit \"love.quit\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.event.quit](https://love2d.org/wiki/love.event.quit)"
- name: love.event.wait
  id: love.event.wait
  summary: Available since LÖVE 0.6.0 This function is not supported in earlier versions
  description: "# love.event.wait\n\n**Available since LÖVE [0.6.0](https://love2d.org/wiki/0.6.0 \"0.6.0\")**  \nThis function is not supported in earlier versions.\n\nLike [`love.event.poll`](love.event.poll \"love.event.poll\")`()`, but blocks until there is an event in the queue.\n\n## Function\n\n### Synopsis\n\n``` lua\nn, a, b, c, d, e, f, ... = love.event.wait( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Event`](event \"Event\")` n (nil)`  \nThe name of event, or nil if the event is unrecognized.\n\n[`Variant`](variant \"Variant\")` a`  \nFirst event argument.\n\n[`Variant`](variant \"Variant\")` b`  \nSecond event argument.\n\n[`Variant`](variant \"Variant\")` c`  \nThird event argument.\n\n[`Variant`](variant \"Variant\")` d` Available since 0.8.0  \nFourth event argument.\n\n  \n\n[`Variant`](variant \"Variant\")` e` Available since 0.10.0  \nFifth event argument.\n\n[`Variant`](variant \"Variant\")` f` Available since 0.10.0  \nSixth event argument.\n\n[`Variant`](variant \"Variant\")` ...` Available since 0.10.0  \nFurther event arguments may follow.\n\n## Examples\n\nAn example that replace [`love.event.poll`](love.event.poll \"love.event.poll\")`()` with this function.\n\n``` lua\nfunction love.run()\n    if love.load then love.load(love.arg.parseGameArguments(arg), arg) end\n \n    -- Main loop time.\n    return function()\n        -- Process events.\n        if love.event then\n            local name, a,b,c,d,e,f = love.event.wait()\n            if name then\n                if name == \"quit\" then\n                    if not love.quit or not love.quit() then\n                        return a or 0\n                    end\n                end            \n                love.handlers[name](a,b,c,d,e,f)\n            end\n        end\n \n        -- Call update and draw\n        if love.update then love.update(0) end\n \n        if love.graphics and love.graphics.isActive() then\n            love.graphics.origin()\n            love.graphics.clear(love.graphics.getBackgroundColor())\n \n            if love.draw then love.draw() end\n \n            love.graphics.present()\n        end\n    end\nend\n```\n\n## See Also\n\n- [love.event](love.event \"love.event\")\n- [love.event.poll](love.event.poll \"love.event.poll\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.event.wait](https://love2d.org/wiki/love.event.wait)"
- name: love.filedropped
  id: love.filedropped
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.filedropped\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nCallback function triggered when a file is dragged and dropped onto the window.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.filedropped( file )\n```\n\n### Arguments\n\n[`DroppedFile`](droppedfile \"DroppedFile\")` file`  \nThe unopened File object representing the file that was dropped.\n\n### Returns\n\nNothing.\n\n## Examples\n\nRead and print the file, drag-and-dropped to love window using [(File):read]((file)-read \"(File):read\") and [(File):getFilename]((file)-getfilename \"(File):getFilename\").\n\n``` lua\nfunction love.filedropped(file)\n    file:open(\"r\")\n    local data = file:read()\n    print(\"Content of \" .. file:getFilename() .. ' is')\n    print(data)\n    print(\"End of file\")\nend\n```\n\n## Notes\n\n[File:open]((file)-open \"(File):open\") must be called on the file before reading from or writing to it. [File:getFilename]((file)-getfilename \"(File):getFilename\") will return the full platform-dependent path to the file.\n\n## See Also\n\n- [love](love \"love\")\n- [love.directorydropped](love.directorydropped \"love.directorydropped\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filedropped](https://love2d.org/wiki/love.filedropped)"
- name: love.filesystem
  id: love.filesystem
  summary: Provides an interface to the user's filesystem
  description: "# love.filesystem\n\nProvides an interface to the user's filesystem.\n\nThis module provides access to files in specific places:\n\n- The root folder of the .love archive (or source directory)\n- The root folder of the game's *save directory*.\n- The folder *containing* the game's .love archive (or source directory), but only if [specific conditions](love.filesystem.getsourcebasedirectory \"love.filesystem.getSourceBaseDirectory\") are met.\n\nEach game is granted a single directory on the system where files can be saved through love.filesystem. This is the **only directory** where love.filesystem can write files. These directories will typically be found in something like:\n\n|                            |                                                         |                                             |                                                                                                                                  |\n|----------------------------|---------------------------------------------------------|---------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| OS                         | Path                                                    | Alternative                                 | Notes                                                                                                                            |\n| Windows XP                 | `C:\\Documents and Settings\\user\\Application Data\\LOVE\\` | `%appdata%\\LOVE\\`                           | When fused, save directory will be created directly inside `Application Data`, rather than as a sub-directory of `LOVE`.         |\n| Windows Vista, 7, 8 and 10 | `C:\\Users\\user\\AppData\\Roaming\\LOVE`                    | `%appdata%\\LOVE\\`                           | When fused, save directory will be created directly inside `AppData`, rather than as a sub-directory of `LOVE`.                  |\n| Mac                        | `/Users/user/Library/Application Support/LOVE/`         | \\-                                          | \\-                                                                                                                               |\n| Linux                      | `$XDG_DATA_HOME/love/`                                  | `~/.local/share/love/`                      | \\-                                                                                                                               |\n| Android                    | `/data/user/0/org.love2d.android/files/save/`           | `/data/data/org.love2d.android/files/save/` | On Android there are various save locations. If these don't work then you can use `love.filesystem.getSaveDirectory()` to check. |\n\nFiles that are opened for write or append will always be created in the save directory. The same goes for other operations that involve writing to the filesystem, like createDirectory.\n\nFiles that are opened for read will be looked for in the save directory, and then in the .love archive (in that order). So if a file with a certain filename (and path) exist in both the .love archive and the save folder, the one in the save directory takes precedence.\n\nNote: **All** paths are relative to the .love archive and save directory. (except for the get\\*Directory() calls)\n\nIt is recommended to set your game's identity first in your [conf.lua](love.conf \"Config Files\"). You can set it with [love.filesystem.setIdentity](love.filesystem.setidentity \"love.filesystem.setIdentity\") as well.\n\n## Types\n\n|                                          |                                                          |        |     |\n|------------------------------------------|----------------------------------------------------------|--------|-----|\n| [DroppedFile](droppedfile \"DroppedFile\") | Represents a file dropped from the window.               | 0.10.0 |     |\n| [File](file \"File\")                      | Represents a file on the filesystem.                     |        |     |\n| [FileData](filedata \"FileData\")          | [Data](data \"Data\") representing the contents of a file. |        |     |\n\n## Functions\n\n|                                                                                                                           |                                                                                                                                                   |        |       |\n|---------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|--------|-------|\n| [love.filesystem.append](love.filesystem.append \"love.filesystem.append\")                                                 | Append data to an existing file.                                                                                                                  | 0.9.0  |       |\n| [love.filesystem.areSymlinksEnabled](love.filesystem.aresymlinksenabled \"love.filesystem.areSymlinksEnabled\")             | Gets whether love.filesystem follows symbolic links.                                                                                              | 0.9.2  |       |\n| [love.filesystem.createDirectory](love.filesystem.createdirectory \"love.filesystem.createDirectory\")                      | Creates a directory.                                                                                                                              | 0.9.0  |       |\n| [love.filesystem.enumerate](love.filesystem.enumerate \"love.filesystem.enumerate\")                                        | Returns all the files and subdirectories in the directory.                                                                                        | 0.3.0  | 0.9.0 |\n| [love.filesystem.exists](love.filesystem.exists \"love.filesystem.exists\")                                                 | Check whether a file or directory exists.                                                                                                         |        | 11.0  |\n| [love.filesystem.getAppdataDirectory](love.filesystem.getappdatadirectory \"love.filesystem.getAppdataDirectory\")          | Returns the application data directory (could be the same as getUserDirectory)                                                                    |        |       |\n| [love.filesystem.getCRequirePath](love.filesystem.getcrequirepath \"love.filesystem.getCRequirePath\")                      | Gets the filesystem paths that will be searched for c libraries when [require](https://www.lua.org/manual/5.1/manual.html#pdf-require) is called. | 11.0   |       |\n| [love.filesystem.getDirectoryItems](love.filesystem.getdirectoryitems \"love.filesystem.getDirectoryItems\")                | Returns all the files and subdirectories in the directory.                                                                                        | 0.9.0  |       |\n| [love.filesystem.getIdentity](love.filesystem.getidentity \"love.filesystem.getIdentity\")                                  | Gets the write directory name for your game.                                                                                                      | 0.9.0  |       |\n| [love.filesystem.getInfo](love.filesystem.getinfo \"love.filesystem.getInfo\")                                              | Gets information about the specified file or directory.                                                                                           | 11.0   |       |\n| [love.filesystem.getLastModified](love.filesystem.getlastmodified \"love.filesystem.getLastModified\")                      | Gets the last modification time of a file.                                                                                                        | 0.7.1  | 11.0  |\n| [love.filesystem.getRealDirectory](love.filesystem.getrealdirectory \"love.filesystem.getRealDirectory\")                   | Gets the absolute path of the directory containing a filepath.                                                                                    | 0.9.2  |       |\n| [love.filesystem.getRequirePath](love.filesystem.getrequirepath \"love.filesystem.getRequirePath\")                         | Gets the filesystem paths that will be searched when [require](https://www.lua.org/manual/5.1/manual.html#pdf-require) is called.                 | 0.10.0 |       |\n| [love.filesystem.getSaveDirectory](love.filesystem.getsavedirectory \"love.filesystem.getSaveDirectory\")                   | Gets the full path to the designated save directory.                                                                                              | 0.5.0  |       |\n| [love.filesystem.getSize](love.filesystem.getsize \"love.filesystem.getSize\")                                              | Gets the size in bytes of a file.                                                                                                                 | 0.9.0  | 11.0  |\n| [love.filesystem.getSource](love.filesystem.getsource \"love.filesystem.getSource\")                                        | Returns the full path to the .love file or directory.                                                                                             | 0.9.0  |       |\n| [love.filesystem.getSourceBaseDirectory](love.filesystem.getsourcebasedirectory \"love.filesystem.getSourceBaseDirectory\") | Returns the full path to the directory containing the .love file.                                                                                 | 0.9.0  |       |\n| [love.filesystem.getUserDirectory](love.filesystem.getuserdirectory \"love.filesystem.getUserDirectory\")                   | Returns the path of the user's directory                                                                                                          |        |       |\n| [love.filesystem.getWorkingDirectory](love.filesystem.getworkingdirectory \"love.filesystem.getWorkingDirectory\")          | Gets the current working directory.                                                                                                               | 0.5.0  |       |\n| [love.filesystem.init](love.filesystem.init \"love.filesystem.init\")                                                       | Initializes love.filesystem, will be called internally, so should not be used explictly.                                                          |        |       |\n| [love.filesystem.isDirectory](love.filesystem.isdirectory \"love.filesystem.isDirectory\")                                  | Check whether something is a directory.                                                                                                           |        | 11.0  |\n| [love.filesystem.isFile](love.filesystem.isfile \"love.filesystem.isFile\")                                                 | Check whether something is a file.                                                                                                                |        | 11.0  |\n| [love.filesystem.isFused](love.filesystem.isfused \"love.filesystem.isFused\")                                              | Gets whether the game is in fused mode or not.                                                                                                    | 0.9.0  |       |\n| [love.filesystem.isSymlink](love.filesystem.issymlink \"love.filesystem.isSymlink\")                                        | Gets whether a filepath is actually a symbolic link.                                                                                              | 0.9.2  | 11.0  |\n| [love.filesystem.lines](love.filesystem.lines \"love.filesystem.lines\")                                                    | Iterate over the lines in a file.                                                                                                                 |        |       |\n| [love.filesystem.load](love.filesystem.load \"love.filesystem.load\")                                                       | Loads a Lua file (but does not run it).                                                                                                           | 0.5.0  |       |\n| [love.filesystem.mkdir](love.filesystem.mkdir \"love.filesystem.mkdir\")                                                    | Creates a directory.                                                                                                                              |        | 0.9.0 |\n| [love.filesystem.mount](love.filesystem.mount \"love.filesystem.mount\")                                                    | Mounts a zip file or folder in the game's save directory for reading.                                                                             | 0.9.0  |       |\n| [love.filesystem.newFile](love.filesystem.newfile \"love.filesystem.newFile\")                                              | Creates a new [File](file \"File\") object.                                                                                                         |        |       |\n| [love.filesystem.newFileData](love.filesystem.newfiledata \"love.filesystem.newFileData\")                                  | Creates a new [FileData](filedata \"FileData\") object from a file on disk, or from a string in memory.                                             | 0.7.0  |       |\n| [love.filesystem.read](love.filesystem.read \"love.filesystem.read\")                                                       | Read the contents of a file.                                                                                                                      |        |       |\n| [love.filesystem.remove](love.filesystem.remove \"love.filesystem.remove\")                                                 | Removes a file (or directory).                                                                                                                    |        |       |\n| [love.filesystem.setCRequirePath](love.filesystem.setcrequirepath \"love.filesystem.setCRequirePath\")                      | Sets the filesystem paths that will be searched for c libraries when [require](https://www.lua.org/manual/5.1/manual.html#pdf-require) is called. | 11.0   |       |\n| [love.filesystem.setIdentity](love.filesystem.setidentity \"love.filesystem.setIdentity\")                                  | Sets the write directory for your game.                                                                                                           |        |       |\n| [love.filesystem.setRequirePath](love.filesystem.setrequirepath \"love.filesystem.setRequirePath\")                         | Sets the filesystem paths that will be searched when [require](https://www.lua.org/manual/5.1/manual.html#pdf-require) is called.                 | 0.10.0 |       |\n| [love.filesystem.setSource](love.filesystem.setsource \"love.filesystem.setSource\")                                        | Sets the source of the game, where the code is present. Used internally.                                                                          |        |       |\n| [love.filesystem.setSymlinksEnabled](love.filesystem.setsymlinksenabled \"love.filesystem.setSymlinksEnabled\")             | Sets whether love.filesystem follows symbolic links.                                                                                              | 0.9.2  |       |\n| [love.filesystem.unmount](love.filesystem.unmount \"love.filesystem.unmount\")                                              | Unmounts a zip file or folder previously mounted with [love.filesystem.mount](love.filesystem.mount \"love.filesystem.mount\").                     | 0.9.0  |       |\n| [love.filesystem.write](love.filesystem.write \"love.filesystem.write\")                                                    | Write data to a file.                                                                                                                             |        |       |\n\n## Enums\n\n|                                          |                                                            |       |      |\n|------------------------------------------|------------------------------------------------------------|-------|------|\n| [FileDecoder](filedecoder \"FileDecoder\") | How to decode a given [FileData](filedata \"FileData\").     | 0.7.0 | 11.0 |\n| [FileMode](filemode \"FileMode\")          | The different modes you can open a [File](file \"File\") in. |       |      |\n| [FileType](filetype \"FileType\")          | The type of a file.                                        | 11.0  |      |\n\n## See Also\n\n- [love](love \"love\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem](https://love2d.org/wiki/love.filesystem)"
- name: love.filesystem.append
  id: love.filesystem.append
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.filesystem.append\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nAppend data to an existing file.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess, errormsg = love.filesystem.append( name, data, size )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name (and path) of the file.\n\n[`string`](string \"string\")` data`  \nThe string data to append to the file.\n\n[`number`](number \"number\")` size (all)`  \nHow many bytes to write.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the operation was successful, or nil if there was an error.\n\n[`string`](string \"string\")` errormsg`  \nThe error message on failure.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess, errormsg = love.filesystem.append( name, data, size )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name (and path) of the file.\n\n[`Data`](data \"Data\")` data`  \nThe Data object to append to the file.\n\n[`number`](number \"number\")` size (all)`  \nHow many bytes to write.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the operation was successful, or nil if there was an error.\n\n[`string`](string \"string\")` errormsg`  \nThe error message on failure.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.write](love.filesystem.write \"love.filesystem.write\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.append](https://love2d.org/wiki/love.filesystem.append)"
- name: love.filesystem.areSymlinksEnabled
  id: love.filesystem.aresymlinksenabled
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.filesystem.areSymlinksEnabled\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets whether love.filesystem follows symbolic links.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = love.filesystem.areSymlinksEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enable`  \nWhether love.filesystem follows symbolic links.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.setSymlinksEnabled](love.filesystem.setsymlinksenabled \"love.filesystem.setSymlinksEnabled\")\n- [love.filesystem.isSymlink](love.filesystem.issymlink \"love.filesystem.isSymlink\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.areSymlinksEnabled](https://love2d.org/wiki/love.filesystem.areSymlinksEnabled)"
- name: love.filesystem.createDirectory
  id: love.filesystem.createdirectory
  summary: Available since LÖVE 0.9.0 It has been renamed from love.filesystem.mkdir
  description: "# love.filesystem.createDirectory\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [love.filesystem.mkdir](love.filesystem.mkdir \"love.filesystem.mkdir\").\n\nRecursively creates a directory.\n\nWhen called with \"a/b\" it creates both \"a\" and \"a/b\", if they don't exist already.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.filesystem.createDirectory( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe directory to create.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the directory was created, false if not.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.createDirectory](https://love2d.org/wiki/love.filesystem.createDirectory)"
- name: love.filesystem.enumerate
  id: love.filesystem.enumerate
  summary: Removed in LÖVE 0.9.0 It has been renamed to love.filesystem.getDirectoryItems
  description: "# love.filesystem.enumerate\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [love.filesystem.getDirectoryItems](love.filesystem.getdirectoryitems \"love.filesystem.getDirectoryItems\").\n\n  \nReturns a table with the names of files and subdirectories in the specified path. The table is not sorted in any way; the order is undefined.\n\nIf the path passed to the function exists in the game and the save directory, it will list the files and directories from both places.\n\n## Function\n\n### Synopsis\n\n``` lua\nfiles = love.filesystem.enumerate( dir )\n```\n\n### Arguments\n\n[`string`](string \"string\")` dir`  \nThe directory.\n\n### Returns\n\n[`table`](table \"table\")` files`  \nA [sequence](sequence \"sequence\") with the names of all files and subdirectories as strings.\n\n## Examples\n\n### Simple Example\n\n``` lua\nlocal dir = \"\"\n--assuming that our path is full of lovely files (it should at least contain main.lua in this case)\nlocal files = love.filesystem.enumerate(dir)\nfor k, file in ipairs(files) do\n    print(k .. \". \" .. file) --outputs something like \"1. main.lua\"\nend\n```\n\n### Recursively find and display all files and folders in a folder and its subfolders.\n\n``` lua\nfunction love.load()\n    filesString = recursiveEnumerate(\"\", \"\")\nend\n \n-- This function will return a string filetree of all files\n-- in the folder and files in all subfolders\nfunction recursiveEnumerate(folder, fileTree)\n    local lfs = love.filesystem\n    local filesTable = lfs.enumerate(folder)\n    for i,v in ipairs(filesTable) do\n        local file = folder..\"/\"..v\n        if lfs.isFile(file) then\n            fileTree = fileTree..\"\\n\"..file\n        elseif lfs.isDirectory(file) then\n            fileTree = fileTree..\"\\n\"..file..\" (DIR)\"\n            fileTree = recursiveEnumerate(file, fileTree)\n        end\n    end\n    return fileTree\nend\n \nfunction love.draw()\n    love.graphics.print(filesString, 0, 0)\nend\n```\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n  \n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.enumerate](https://love2d.org/wiki/love.filesystem.enumerate)"
- name: love.filesystem.exists
  id: love.filesystem.exists
  summary: Check whether a file or directory exists
  description: "# love.filesystem.exists\n\n|                                                                                                                              |\n|------------------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                         |\n| This function is deprecated and is replaced by [love.filesystem.getInfo](love.filesystem.getinfo \"love.filesystem.getInfo\"). |\n\nCheck whether a file or directory exists.\n\n## Function\n\n### Synopsis\n\n``` lua\nexists = love.filesystem.exists( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe path to a potential file or directory.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` exists`  \nTrue if there is a file or directory with the specified name. False otherwise.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.exists](https://love2d.org/wiki/love.filesystem.exists)"
- name: love.filesystem.getAppdataDirectory
  id: love.filesystem.getappdatadirectory
  summary: None
  description: "# love.filesystem.getAppdataDirectory\n\nReturns the application data directory (could be the same as getUserDirectory)\n\n## Function\n\n### Synopsis\n\n``` lua\npath = love.filesystem.getAppdataDirectory( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` path`  \nThe path of the application data directory\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getAppdataDirectory](https://love2d.org/wiki/love.filesystem.getAppdataDirectory)"
- name: love.filesystem.getCRequirePath
  id: love.filesystem.getcrequirepath
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.filesystem.getCRequirePath\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the filesystem paths that will be searched for c libraries when [require](https://www.lua.org/manual/5.1/manual.html#pdf-require) is called.\n\nThe paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to *require* will be inserted in place of any question mark (\"?\") character in each template (after the dot characters in the argument passed to *require* are replaced by directory separators.) Additionally, any occurrence of a double question mark (\"??\") will be replaced by the name passed to require and the default library extension for the platform.\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with [love.filesystem.mount](love.filesystem.mount \"love.filesystem.mount\").\n\n## Function\n\n### Synopsis\n\n``` lua\npaths = love.filesystem.getCRequirePath( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` paths`  \nThe paths that the *require* function will check for c libraries in love's filesystem.\n\n## Notes\n\nThe default paths string is `\"??\"`, which makes `require(\"cool\")` try to load `cool.dll`, or `cool.so` depending on the platform.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.setCRequirePath](love.filesystem.setcrequirepath \"love.filesystem.setCRequirePath\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getCRequirePath](https://love2d.org/wiki/love.filesystem.getCRequirePath)"
- name: love.filesystem.getDirectoryItems
  id: love.filesystem.getdirectoryitems
  summary: Available since LÖVE 0.9.0 It has been renamed from love.filesystem.enumerate
  description: "# love.filesystem.getDirectoryItems\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [love.filesystem.enumerate](love.filesystem.enumerate \"love.filesystem.enumerate\").\n\n  \nReturns a table with the names of files and subdirectories in the specified path. The table is not sorted in any way; the order is undefined.\n\nIf the path passed to the function exists in the game and the save directory, it will list the files and directories from both places.\n\n## Function\n\n### Synopsis\n\n``` lua\nfiles = love.filesystem.getDirectoryItems( dir )\n```\n\n### Arguments\n\n[`string`](string \"string\")` dir`  \nThe directory.\n\n### Returns\n\n[`table`](table \"table\")` files`  \nA [sequence](sequence \"sequence\") with the names of all files and subdirectories as strings.\n\n## Function\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier or later versions.\n\n### Synopsis\n\n``` lua\nfiles = love.filesystem.getDirectoryItems( dir, callback )\n```\n\n### Arguments\n\n[`string`](string \"string\")` dir`  \nThe directory.\n\n[`function`](function \"function\")` callback`  \nA function which is called for each file and folder in the directory. The filename is passed to the function as an argument.\n\n### Returns\n\n[`table`](table \"table\")` files`  \nA [sequence](sequence \"sequence\") with the names of all files and subdirectories as strings.\n\n## Examples\n\n### Simple Example\n\n``` lua\nlocal dir = \"\"\n--assuming that our path is full of lovely files (it should at least contain main.lua in this case)\nlocal files = love.filesystem.getDirectoryItems(dir)\nfor k, file in ipairs(files) do\n    print(k .. \". \" .. file) --outputs something like \"1. main.lua\"\nend\n```\n\n### Recursively find and display all files and folders in a folder and its subfolders.\n\n``` lua\nfunction love.load()\n    filesString = recursiveEnumerate(\"\", \"\")\nend\n \n-- This function will return a string filetree of all files\n-- in the folder and files in all subfolders\nfunction recursiveEnumerate(folder, fileTree)\n    local lfs = love.filesystem\n    local filesTable = lfs.getDirectoryItems(folder)\n    for i,v in ipairs(filesTable) do\n        local file = folder..\"/\"..v\n        if lfs.isFile(file) then\n            fileTree = fileTree..\"\\n\"..file\n        elseif lfs.isDirectory(file) then\n            fileTree = fileTree..\"\\n\"..file..\" (DIR)\"\n            fileTree = recursiveEnumerate(file, fileTree)\n        end\n    end\n    return fileTree\nend\n \nfunction love.draw()\n    love.graphics.print(filesString, 0, 0)\nend\n```\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getDirectoryItems](https://love2d.org/wiki/love.filesystem.getDirectoryItems)"
- name: love.filesystem.getIdentity
  id: love.filesystem.getidentity
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.filesystem.getIdentity\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the write directory name for your game. Note that this only returns the name of the folder to store your files in, not the full path.\n\n## Function\n\n### Synopsis\n\n``` lua\nname = love.filesystem.getIdentity( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` name`  \nThe identity that is used as write directory.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.setIdentity](love.filesystem.setidentity \"love.filesystem.setIdentity\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getIdentity](https://love2d.org/wiki/love.filesystem.getIdentity)"
- name: love.filesystem.getInfo
  id: love.filesystem.getinfo
  summary: Available since LÖVE 11.0 This function replaces love.filesystem.exists, isFile, isDirectory, isSymlink, getLastModified, and getSize
  description: "# love.filesystem.getInfo\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function replaces [love.filesystem.exists](love.filesystem.exists \"love.filesystem.exists\"), [isFile](love.filesystem.isfile \"love.filesystem.isFile\"), [isDirectory](love.filesystem.isdirectory \"love.filesystem.isDirectory\"), [isSymlink](love.filesystem.issymlink \"love.filesystem.isSymlink\"), [getLastModified](love.filesystem.getlastmodified \"love.filesystem.getLastModified\"), and [getSize](love.filesystem.getsize \"love.filesystem.getSize\").\n\nGets information about the specified file or directory.\n\n## Function\n\n### Synopsis\n\n``` lua\ninfo = love.filesystem.getInfo( path, filtertype )\n```\n\n### Arguments\n\n[`string`](string \"string\")` path`  \nThe file or directory path to check.\n\n[`FileType`](filetype \"FileType\")` filtertype (nil)`  \nIf supplied, this parameter causes getInfo to only return the info table if the item at the given path matches the specified file type.\n\n### Returns\n\n[`table`](table \"table\")` info (nil)`  \nA table containing information about the specified path, or nil if nothing exists at the path. The table contains the following fields:\n\n[`FileType`](filetype \"FileType\")` type`  \nThe type of the object at the path (file, directory, symlink, etc.)\n\n[`number`](number \"number\")` size (nil)`  \nThe size in bytes of the file, or nil if it can't be determined.\n\n[`number`](number \"number\")` modtime (nil)`  \nThe file's last modification time in seconds since the unix epoch, or nil if it can't be determined.\n\n## Function\n\nThis variant accepts an existing table to fill in, instead of creating a new one.\n\n### Synopsis\n\n``` lua\ninfo = love.filesystem.getInfo( path, info )\n```\n\n### Arguments\n\n[`string`](string \"string\")` path`  \nThe file or directory path to check.\n\n[`table`](table \"table\")` info`  \nA table which will be filled in with info about the specified path.\n\n### Returns\n\n[`table`](table \"table\")` info (nil)`  \nThe table given as an argument, or nil if nothing exists at the path. The table will be filled in with the following fields:\n\n[`FileType`](filetype \"FileType\")` type`  \nThe type of the object at the path (file, directory, symlink, etc.)\n\n[`number`](number \"number\")` size (nil)`  \nThe size in bytes of the file, or nil if it can't be determined.\n\n[`number`](number \"number\")` modtime (nil)`  \nThe file's last modification time in seconds since the unix epoch, or nil if it can't be determined.\n\n## Function\n\nThis variant only returns info if the item at the given path is the same file type as specified in the filtertype argument, and accepts an existing table to fill in, instead of creating a new one.\n\n### Synopsis\n\n``` lua\ninfo = love.filesystem.getInfo( path, filtertype, info )\n```\n\n### Arguments\n\n[`string`](string \"string\")` path`  \nThe file or directory path to check.\n\n[`FileType`](filetype \"FileType\")` filtertype`  \nCauses getInfo to only return the info table if the item at the given path matches the specified file type.\n\n[`table`](table \"table\")` info`  \nA table which will be filled in with info about the specified path.\n\n### Returns\n\n[`table`](table \"table\")` info (nil)`  \nThe table given as an argument, or nil if nothing exists at the path. The table will be filled in with the following fields:\n\n[`FileType`](filetype \"FileType\")` type`  \nThe type of the object at the path (file, directory, symlink, etc.)\n\n[`number`](number \"number\")` size (nil)`  \nThe size in bytes of the file, or nil if it can't be determined.\n\n[`number`](number \"number\")` modtime (nil)`  \nThe file's last modification time in seconds since the unix epoch, or nil if it can't be determined.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.setSymlinksEnabled](love.filesystem.setsymlinksenabled \"love.filesystem.setSymlinksEnabled\")\n- [love.filesystem.areSymlinksEnabled](love.filesystem.aresymlinksenabled \"love.filesystem.areSymlinksEnabled\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getInfo](https://love2d.org/wiki/love.filesystem.getInfo)"
- name: love.filesystem.getLastModified
  id: love.filesystem.getlastmodified
  summary: Gets the last modification time of a file
  description: "# love.filesystem.getLastModified\n\n|                                                                                                                              |\n|------------------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                         |\n| This function is deprecated and is replaced by [love.filesystem.getInfo](love.filesystem.getinfo \"love.filesystem.getInfo\"). |\n\nGets the last modification time of a file.\n\n## Function\n\n### Synopsis\n\n``` lua\nmodtime, errormsg = love.filesystem.getLastModified( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe path and name to a file.\n\n### Returns\n\n[`number`](number \"number\")` modtime`  \nThe last modification time in seconds since the unix epoch or nil on failure.\n\n[`string`](string \"string\")` errormsg`  \nThe error message on failure.\n\n## Examples\n\n### Getting the time of a file and printing it as a date.\n\n``` lua\nmodtime, errormsg = love.filesystem.getLastModified(\"file.dat\")\n \nif modtime then\n    print(os.date(\"%c\", modtime)) -- \"02/15/2011 12:32:11\" (Depends on the system and locale)\nend\n```\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getLastModified](https://love2d.org/wiki/love.filesystem.getLastModified)"
- name: love.filesystem.getRealDirectory
  id: love.filesystem.getrealdirectory
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.filesystem.getRealDirectory\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets the platform-specific absolute path of the directory containing a filepath.\n\nThis can be used to determine whether a file is inside the save directory or the game's source .love.\n\n## Function\n\n### Synopsis\n\n``` lua\nrealdir = love.filesystem.getRealDirectory( filepath )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filepath`  \nThe filepath to get the directory of.\n\n### Returns\n\n[`string`](string \"string\")` realdir`  \nThe platform-specific full path of the directory containing the filepath.\n\n## Notes\n\nThis function returns the directory containing the given *file path*, rather than file. For example, if the file `screenshot1.png` exists in a directory called `screenshots` in the game's save directory, `love.filesystem.getRealDirectory(\"screenshots/screenshot1.png\")` will return the same value as [love.filesystem.getSaveDirectory](love.filesystem.getsavedirectory \"love.filesystem.getSaveDirectory\").\n\n## Examples\n\n``` lua\n-- Get all files in the \"levels\" folder.\n-- There might be a \"levels\" folder in both the save directory and the game's source,\n-- in which case this will get all files in both.\nlocal filepaths = love.filesystem.getDirectoryItems(\"levels\")\n \nfor i, filename in ipairs(filepaths) do\n    -- For each filename, check whether it's in the save directory or not.\n    local path = \"levels/\"..filename\n    if love.filesystem.getRealDirectory(path) == love.filesystem.getSaveDirectory() then\n        -- This file is in the save directory.\n    end\nend\n```\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getRealDirectory](https://love2d.org/wiki/love.filesystem.getRealDirectory)"
- name: love.filesystem.getRequirePath
  id: love.filesystem.getrequirepath
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.filesystem.getRequirePath\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the filesystem paths that will be searched when [require](https://www.lua.org/manual/5.1/manual.html#pdf-require) is called.\n\nThe paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to *require* will be inserted in place of any question mark (\"?\") character in each template (after the dot characters in the argument passed to *require* are replaced by directory separators.)\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with [love.filesystem.mount](love.filesystem.mount \"love.filesystem.mount\").\n\n## Function\n\n### Synopsis\n\n``` lua\npaths = love.filesystem.getRequirePath( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` paths`  \nThe paths that the *require* function will check in love's filesystem.\n\n## Notes\n\nThe default paths string is `\"?.lua;?/init.lua\"`, which makes `require(\"cool\")` try to load `cool.lua` and then try `cool/init.lua` if cool.lua doesn't exist.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.setRequirePath](love.filesystem.setrequirepath \"love.filesystem.setRequirePath\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getRequirePath](https://love2d.org/wiki/love.filesystem.getRequirePath)"
- name: love.filesystem.getSaveDirectory
  id: love.filesystem.getsavedirectory
  summary: Available since LÖVE 0.5.0 This function is not supported in earlier versions
  description: "# love.filesystem.getSaveDirectory\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\")**  \nThis function is not supported in earlier versions.\n\nGets the full path to the designated save directory. This can be useful if you want to use the standard io library (or something else) to read or write in the save directory.\n\n## Function\n\n### Synopsis\n\n``` lua\ndir = love.filesystem.getSaveDirectory( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` dir`  \nThe absolute path to the save directory.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getSaveDirectory](https://love2d.org/wiki/love.filesystem.getSaveDirectory)"
- name: love.filesystem.getSize
  id: love.filesystem.getsize
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.filesystem.getSize\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\n|                                                                                                                              |\n|------------------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                         |\n| This function is deprecated and is replaced by [love.filesystem.getInfo](love.filesystem.getinfo \"love.filesystem.getInfo\"). |\n\nGets the size in bytes of a file.\n\n## Function\n\n### Synopsis\n\n``` lua\nsize, errormsg = love.filesystem.getSize( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe path and name to a file.\n\n### Returns\n\n[`number`](number \"number\")` size`  \nThe size in bytes of the file, or nil on failure.\n\n[`string`](string \"string\")` errormsg (nil)`  \nThe error message on failure.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getSize](https://love2d.org/wiki/love.filesystem.getSize)"
- name: love.filesystem.getSource
  id: love.filesystem.getsource
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.filesystem.getSource\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nReturns the full path to the the .love file or directory. If the game is [fused](love.filesystem.isfused \"love.filesystem.isFused\") to the LÖVE executable, then the executable is returned.\n\n## Function\n\n### Synopsis\n\n``` lua\npath = love.filesystem.getSource( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` path`  \nThe full platform-dependent path of the .love file or directory.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.isFused](love.filesystem.isfused \"love.filesystem.isFused\")\n- [love.filesystem.getSourceBaseDirectory](love.filesystem.getsourcebasedirectory \"love.filesystem.getSourceBaseDirectory\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getSource](https://love2d.org/wiki/love.filesystem.getSource)"
- name: love.filesystem.getSourceBaseDirectory
  id: love.filesystem.getsourcebasedirectory
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.filesystem.getSourceBaseDirectory\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nReturns the full path to the directory containing the .love file. If the game is [fused](love.filesystem.isfused \"love.filesystem.isFused\") to the LÖVE executable, then the directory containing the executable is returned.\n\nIf [love.filesystem.isFused](love.filesystem.isfused \"love.filesystem.isFused\") is true, the path returned by this function can be passed to [love.filesystem.mount](love.filesystem.mount \"love.filesystem.mount\"), which will make the directory containing the main game (e.g. `C:\\Program Files\\coolgame\\`) readable by love.filesystem.\n\n## Function\n\n### Synopsis\n\n``` lua\npath = love.filesystem.getSourceBaseDirectory( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` path`  \nThe full platform-dependent path of the directory containing the .love file.\n\n## Examples\n\n### read files in the same folder as the game's .exe file\n\n``` lua\nif love.filesystem.isFused() then\n    local dir = love.filesystem.getSourceBaseDirectory()\n    local success = love.filesystem.mount(dir, \"coolgame\")\n \n    if success then\n        -- If the game is fused and it's located in C:\\Program Files\\mycoolgame\\,\n        -- then we can now load files from that path.\n        coolimage = love.graphics.newImage(\"coolgame/coolimage.png\")\n    end\nend\n \nfunction love.draw()\n    if coolimage then\n        love.graphics.draw(coolimage, 0, 0)\n    end\nend\n```\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.mount](love.filesystem.mount \"love.filesystem.mount\")\n- [love.filesystem.isFused](love.filesystem.isfused \"love.filesystem.isFused\")\n- [love.filesystem.getSource](love.filesystem.getsource \"love.filesystem.getSource\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getSourceBaseDirectory](https://love2d.org/wiki/love.filesystem.getSourceBaseDirectory)"
- name: love.filesystem.getUserDirectory
  id: love.filesystem.getuserdirectory
  summary: None
  description: "# love.filesystem.getUserDirectory\n\nReturns the path of the user's directory\n\n## Function\n\n### Synopsis\n\n``` lua\npath = love.filesystem.getUserDirectory( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` path`  \nThe path of the user's directory\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getUserDirectory](https://love2d.org/wiki/love.filesystem.getUserDirectory)"
- name: love.filesystem.getWorkingDirectory
  id: love.filesystem.getworkingdirectory
  summary: Available since LÖVE 0.5.0 This function is not supported in earlier versions
  description: "# love.filesystem.getWorkingDirectory\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\")**  \nThis function is not supported in earlier versions.\n\nGets the current working directory.\n\n## Function\n\n### Synopsis\n\n``` lua\ncwd = love.filesystem.getWorkingDirectory( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` cwd`  \nThe current working directory.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.getWorkingDirectory](https://love2d.org/wiki/love.filesystem.getWorkingDirectory)"
- name: love.filesystem.init
  id: love.filesystem.init
  summary: Initializes love.filesystem, will be called internally, so should not be used explicitly
  description: "# love.filesystem.init\n\nInitializes love.filesystem, will be called internally, so should not be used explicitly.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.filesystem.init( appname )\n```\n\n### Arguments\n\n[`string`](string \"string\")` appname`  \nThe name of the application binary, typically `love`.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.init](https://love2d.org/wiki/love.filesystem.init)"
- name: love.filesystem.isDirectory
  id: love.filesystem.isdirectory
  summary: Check whether something is a directory
  description: "# love.filesystem.isDirectory\n\n|                                                                                                                              |\n|------------------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                         |\n| This function is deprecated and is replaced by [love.filesystem.getInfo](love.filesystem.getinfo \"love.filesystem.getInfo\"). |\n\nCheck whether something is a directory.\n\n## Function\n\n### Synopsis\n\n``` lua\nisDir = love.filesystem.isDirectory( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe path to a potential directory.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` isDir`  \nTrue if there is a directory with the specified name. False otherwise.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.isFile](love.filesystem.isfile \"love.filesystem.isFile\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.isDirectory](https://love2d.org/wiki/love.filesystem.isDirectory)"
- name: love.filesystem.isFile
  id: love.filesystem.isfile
  summary: Check whether something is a file
  description: "# love.filesystem.isFile\n\n|                                                                                                                              |\n|------------------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                         |\n| This function is deprecated and is replaced by [love.filesystem.getInfo](love.filesystem.getinfo \"love.filesystem.getInfo\"). |\n\nCheck whether something is a file.\n\n## Function\n\n### Synopsis\n\n``` lua\nisFile = love.filesystem.isFile( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe path to a potential file.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` isFile`  \nTrue if there is a file with the specified name. False otherwise.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.isDirectory](love.filesystem.isdirectory \"love.filesystem.isDirectory\")\n- [love.filesystem.exists](love.filesystem.exists \"love.filesystem.exists\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.isFile](https://love2d.org/wiki/love.filesystem.isFile)"
- name: love.filesystem.isFused
  id: love.filesystem.isfused
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.filesystem.isFused\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the game is in fused mode or not.\n\nIf a game is in fused mode, its save directory will be directly in the Appdata directory instead of Appdata/LOVE/. The game will also be able to load C Lua dynamic libraries which are located in the save directory.\n\nA game is in fused mode if the source .love has been fused to the executable (see [Game Distribution](https://love2d.org/wiki/Game_Distribution \"Game Distribution\")), or if \"--fused\" has been given as a command-line argument when starting the game.\n\n## Function\n\n### Synopsis\n\n``` lua\nfused = love.filesystem.isFused( )\n```\n\n### Arguments\n\nNone\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` fused`  \nTrue if the game is in fused mode, false otherwise.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.isFused](https://love2d.org/wiki/love.filesystem.isFused)"
- name: love.filesystem.isSymlink
  id: love.filesystem.issymlink
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.filesystem.isSymlink\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\n|                                                                                                                              |\n|------------------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                         |\n| This function is deprecated and is replaced by [love.filesystem.getInfo](love.filesystem.getinfo \"love.filesystem.getInfo\"). |\n\nGets whether a filepath is actually a symbolic link.\n\nIf symbolic links are not enabled (via [love.filesystem.setSymlinksEnabled](love.filesystem.setsymlinksenabled \"love.filesystem.setSymlinksEnabled\")), this function will always return false.\n\n## Function\n\n### Synopsis\n\n``` lua\nsymlink = love.filesystem.isSymlink( path )\n```\n\n### Arguments\n\n[`string`](string \"string\")` path`  \nThe file or directory path to check.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` symlink`  \nTrue if the path is a symbolic link, false otherwise.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.setSymlinksEnabled](love.filesystem.setsymlinksenabled \"love.filesystem.setSymlinksEnabled\")\n- [love.filesystem.areSymlinksEnabled](love.filesystem.aresymlinksenabled \"love.filesystem.areSymlinksEnabled\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.isSymlink](https://love2d.org/wiki/love.filesystem.isSymlink)"
- name: love.filesystem.lines
  id: love.filesystem.lines
  summary: Iterate over the lines in a file
  description: "# love.filesystem.lines\n\nIterate over the lines in a file.\n\n## Function\n\n### Synopsis\n\n``` lua\niterator = love.filesystem.lines( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name (and path) of the file\n\n### Returns\n\n[`function`](function \"function\")` iterator`  \nA function that iterates over all the lines in the file\n\n### Example\n\n``` lua\nlocal highscores = {}\nfor line in love.filesystem.lines(\"highscores.lst\") do\n  table.insert(highscores, line)\nend\n```\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.lines](https://love2d.org/wiki/love.filesystem.lines)"
- name: love.filesystem.load
  id: love.filesystem.load
  summary: Available since LÖVE 0.5.0 This function is not supported in earlier versions
  description: "# love.filesystem.load\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\")**  \nThis function is not supported in earlier versions.\n\nLoads a Lua file (but does not run it).\n\n## Function\n\n### Synopsis\n\n``` lua\nchunk, errormsg = love.filesystem.load( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name (and path) of the file.\n\n### Returns\n\n[`function`](function \"function\")` chunk`  \nThe loaded chunk.\n\n[`string`](string \"string\")` errormsg (nil)`  \nThe error message if file could not be opened.\n\n## Example\n\nIt is important to note that love.filesystem.load does **not** invoke the code, it just creates a function (a 'chunk') that will contain the contents of the file inside it. In order to execute the chunk, you have to put () behind it.\n\nAlso, it is worth noting that loaded files can return values. For example, the following file:\n\n``` lua\nreturn 1+1\n```\n\nWill return 2, when called like this:\n\n``` lua\nchunk = love.filesystem.load( name ) -- load the chunk\nlocal result = chunk() -- execute the chunk\nprint('result: ' .. tostring(result)) -- prints 'result: 2'\n```\n\nThis bluescreens if there is a syntax error in the loaded file. If you want to continue your game if the file is not valid (for example if you expect it to be written by users), you can protect the calling of the chunk with [**pcall**](https://www.lua.org/manual/5.1/manual.html#pdf-pcall):\n\n``` lua\nlocal ok, chunk, result\nok, chunk = pcall( love.filesystem.load, name ) -- load the chunk safely\nif not ok then\n  print('The following error happened: ' .. tostring(chunk))\nelse\n  ok, result = pcall(chunk) -- execute the chunk safely\n \n  if not ok then -- will be false if there is an error\n    print('The following error happened: ' .. tostring(result))\n  else\n    print('The result of loading is: ' .. tostring(result))\n  end\nend\n```\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.load](https://love2d.org/wiki/love.filesystem.load)"
- name: love.filesystem.mkdir
  id: love.filesystem.mkdir
  summary: Removed in LÖVE 0.9.0 It has been renamed to love.filesystem.createDirectory
  description: "# love.filesystem.mkdir\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [love.filesystem.createDirectory](love.filesystem.createdirectory \"love.filesystem.createDirectory\").\n\nRecursively creates a directory.\n\nWhen called with \"a/b\" it creates both \"a\" and \"a/b\", if they don't exist already.\n\n## Function\n\n### Synopsis\n\n``` lua\nok = love.filesystem.mkdir( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe directory to create.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` ok`  \nTrue if the directory was created, false if not.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.mkdir](https://love2d.org/wiki/love.filesystem.mkdir)"
- name: love.filesystem.mount
  id: love.filesystem.mount
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.filesystem.mount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nMounts a zip file or folder in the game's save directory for reading. It is also possible to mount [love.filesystem.getSourceBaseDirectory](love.filesystem.getsourcebasedirectory \"love.filesystem.getSourceBaseDirectory\") if the game is in fused mode.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.filesystem.mount( archive, mountpoint, appendToPath )\n```\n\n### Arguments\n\n[`string`](string \"string\")` archive`  \nThe folder or zip file in the game's save directory to mount.\n\n[`string`](string \"string\")` mountpoint`  \nThe new path the archive will be mounted to.\n\n[`boolean`](boolean \"boolean\")` appendToPath (false)`  \nWhether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the archive was successfully mounted, false otherwise.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nMounts the contents of the given FileData in memory. The FileData's data must contain a zipped directory structure.\n\n### Synopsis\n\n``` lua\nsuccess = love.filesystem.mount( filedata, mountpoint, appendToPath )\n```\n\n### Arguments\n\n[`FileData`](filedata \"FileData\")` filedata`  \nThe FileData object in memory to mount.\n\n[`string`](string \"string\")` mountpoint`  \nThe new path the archive will be mounted to.\n\n[`boolean`](boolean \"boolean\")` appendToPath (false)`  \nWhether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the archive was successfully mounted, false otherwise.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nMounts the contents of the given Data object in memory. The data must contain a zipped directory structure.\n\n### Synopsis\n\n``` lua\nsuccess = love.filesystem.mount( data, archivename, mountpoint, appendToPath )\n```\n\n### Arguments\n\n[`Data`](data \"Data\")` data`  \nThe Data object in memory to mount.\n\n[`string`](string \"string\")` archivename`  \nThe name to associate the mounted data with, for use with [love.filesystem.unmount](love.filesystem.unmount \"love.filesystem.unmount\"). Must be unique compared to other mounted data.\n\n[`string`](string \"string\")` mountpoint`  \nThe new path the archive will be mounted to.\n\n[`boolean`](boolean \"boolean\")` appendToPath (false)`  \nWhether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the archive was successfully mounted, false otherwise.\n\n## Examples\n\n### Mount a zip file.\n\n``` lua\n-- Assuming content.zip exists in the game's save directory and contains a file called 'myimage.png'.\nlove.filesystem.mount(\"content.zip\", \"content\")\n \nassert(love.filesystem.getInfo(\"content/myimage.png\") ~= nil)\n```\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.unmount](love.filesystem.unmount \"love.filesystem.unmount\")\n- [love.filesystem.getSourceBaseDirectory](love.filesystem.getsourcebasedirectory \"love.filesystem.getSourceBaseDirectory\")\n- [love.directorydropped](love.directorydropped \"love.directorydropped\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.mount](https://love2d.org/wiki/love.filesystem.mount)"
- name: love.filesystem.newFile
  id: love.filesystem.newfile
  summary: Creates a new File object
  description: "# love.filesystem.newFile\n\nCreates a new [File](file \"File\") object. It needs to be opened before it can be accessed.\n\n## Function\n\n### Synopsis\n\n``` lua\nfile = love.filesystem.newFile( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filename of the file.\n\n### Returns\n\n[`File`](file \"File\")` file`  \nThe new File object.\n\n### Notes\n\nPlease note that this function will not return any error message (e.g. if you use an invalid filename) because it just creates the File Object. You can still check if the file is valid by using [File:open]((file)-open \"(File):open\") which returns a boolean and an error message if something goes wrong while opening the file.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\nCreates a [File](file \"File\") object and opens it for reading, writing, or appending.\n\n### Synopsis\n\n``` lua\nfile, errorstr = love.filesystem.newFile( filename, mode )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filename of the file.\n\n[`FileMode`](filemode \"FileMode\")` mode`  \nThe mode to open the file in.\n\n### Returns\n\n[`File`](file \"File\")` file`  \nThe new File object, or nil if an error occurred.\n\n[`string`](string \"string\")` errorstr`  \nThe error string if an error occurred.\n\n## Examples\n\n### Open a file and read everything\n\n``` lua\nfile = love.filesystem.newFile(\"data.txt\")\nfile:open(\"r\")\ndata = file:read()\nfile:close()\n-- use the data ...\n```\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [File](file \"File\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.newFile](https://love2d.org/wiki/love.filesystem.newFile)"
- name: love.filesystem.newFileData
  id: love.filesystem.newfiledata
  summary: Creates a new FileData object from a file on disk, or from a string in memory
  description: "# love.filesystem.newFileData\n\nCreates a new [FileData](filedata \"FileData\") object from a file on disk, or from a string in memory.\n\n## Function\n\nCreates a new FileData object from a string in memory.\n\n### Synopsis\n\n``` lua\ndata = love.filesystem.newFileData( contents, name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` contents`  \nThe contents of the file in memory represented as a string.\n\n[`string`](string \"string\")` name`  \nThe name of the file. The extension may be parsed and used by LÖVE when passing the FileData object into [love.audio.newSource](love.audio.newsource \"love.audio.newSource\").\n\n### Returns\n\n[`FileData`](filedata \"FileData\")` data`  \nThe new FileData.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\nCreates a new [FileData](filedata \"FileData\") from a file on the storage device.\n\n### Synopsis\n\n``` lua\ndata, err = love.filesystem.newFileData( filepath )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filepath`  \nPath to the file.\n\n### Returns\n\n[`FileData`](filedata \"FileData\")` data`  \nThe new FileData, or [nil](nil \"nil\") if an error occurred.\n\n[`string`](string \"string\")` err`  \nThe error string, if an error occurred.\n\n## Function\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThe variant which decodes base64 data has been replaced by [love.data.decode](love.data.decode \"love.data.decode\").\n\n### Synopsis\n\n``` lua\ndata = love.filesystem.newFileData( contents, name, decoder )\n```\n\n### Arguments\n\n[`string`](string \"string\")` contents`  \nThe contents of the file.\n\n[`string`](string \"string\")` name`  \nThe name of the file.\n\n[`FileDecoder`](filedecoder \"FileDecoder\")` decoder`  \nThe method to use when decoding the contents.\n\n### Returns\n\n[`FileData`](filedata \"FileData\")` data`  \nYour new FileData.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [FileData](filedata \"FileData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.newFileData](https://love2d.org/wiki/love.filesystem.newFileData)"
- name: love.filesystem.read
  id: love.filesystem.read
  summary: Read the contents of a file
  description: "# love.filesystem.read\n\nRead the contents of a file.\n\n## Function\n\n### Synopsis\n\n``` lua\ncontents, size = love.filesystem.read( name, size )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name (and path) of the file.\n\n[`number`](number \"number\")` size (all)`  \nHow many bytes to read.\n\n### Returns\n\n[`string`](string \"string\")` contents`  \nThe file contents.\n\n[`number`](number \"number\")` size`  \nHow many bytes have been read.\n\n### Returns (if error on reading)\n\n[`nil`](nil \"nil\")` contents`  \nreturns nil as content.\n\n[`string`](string \"string\")` error`  \nreturns an error message.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nReads the contents of a file into either a string or a [FileData](filedata \"FileData\") object.\n\n### Synopsis\n\n``` lua\ncontents, size = love.filesystem.read( container, name, size )\n```\n\n### Arguments\n\n[`ContainerType`](containertype \"ContainerType\")` container`  \nWhat type to return the file's contents as.\n\n[`string`](string \"string\")` name`  \nThe name (and path) of the file\n\n[`number`](number \"number\")` size (all)`  \nHow many bytes to read\n\n### Returns\n\n[`value`](value \"value\")` contents`  \n[FileData](filedata \"FileData\") or string containing the file contents.\n\n[`number`](number \"number\")` size`  \nHow many bytes have been read.\n\n### Returns (if error on reading)\n\n[`nil`](nil \"nil\")` contents`  \nreturns nil as content.\n\n[`string`](string \"string\")` error`  \nreturns an error message.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.read](https://love2d.org/wiki/love.filesystem.read)"
- name: love.filesystem.remove
  id: love.filesystem.remove
  summary: Removes a file or empty directory
  description: "# love.filesystem.remove\n\nRemoves a file or empty directory.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.filesystem.remove( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe file or directory to remove.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the file/directory was removed, false otherwise.\n\n## Notes\n\nThe directory must be empty before removal or else it will fail. Simply remove all files and folders in the directory beforehand.\n\nIf the file exists in the .love but not in the save directory, it returns `false` as well.\n\nAn opened [File](file \"File\") prevents removal of the underlying file. Simply close the [File](file \"File\") to remove it.\n\n## Examples\n\nCreate a bunch of folders in the save folder and remove them and any file they may contain as soon as the game is quit.\n\n``` lua\nfunction love.load()\n    local dir = 'a'\n    for _ = 1, 10 do\n        dir = dir .. '/a'\n    end\n    love.filesystem.createDirectory( dir )\nend\n \nfunction love.quit()\n    local function recursivelyDelete( item )\n        if love.filesystem.getInfo( item , \"directory\" ) then\n            for _, child in pairs( love.filesystem.getDirectoryItems( item )) do\n                recursivelyDelete( item .. '/' .. child )\n                love.filesystem.remove( item .. '/' .. child )\n            end\n        elseif love.filesystem.getInfo( item ) then\n            love.filesystem.remove( item )\n        end\n        love.filesystem.remove( item )\n    end\n    recursivelyDelete( 'a' )\nend\n```\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.remove](https://love2d.org/wiki/love.filesystem.remove)"
- name: love.filesystem.setCRequirePath
  id: love.filesystem.setcrequirepath
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.filesystem.setCRequirePath\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nSets the filesystem paths that will be searched for c libraries when [require](https://www.lua.org/manual/5.1/manual.html#pdf-require) is called.\n\nThe paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to *require* will be inserted in place of any question mark (\"?\") character in each template (after the dot characters in the argument passed to *require* are replaced by directory separators.) Additionally, any occurrence of a double question mark (\"??\") will be replaced by the name passed to require and the default library extension for the platform.\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with [love.filesystem.mount](love.filesystem.mount \"love.filesystem.mount\").\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.filesystem.setCRequirePath( paths )\n```\n\n### Arguments\n\n[`string`](string \"string\")` paths`  \nThe paths that the *require* function will check in love's filesystem.\n\n### Returns\n\nNothing.\n\n## Notes\n\nThe default paths string is `\"??\"`, which makes `require(\"cool\")` try to load `cool.dll`, or `cool.so` depending on the platform.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.getCRequirePath](love.filesystem.getcrequirepath \"love.filesystem.getCRequirePath\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.setCRequirePath](https://love2d.org/wiki/love.filesystem.setCRequirePath)"
- name: love.filesystem.setIdentity
  id: love.filesystem.setidentity
  summary: Sets the write directory for your game
  description: "# love.filesystem.setIdentity\n\nSets the write directory for your game. Note that you can only set the name of the folder to store your files in, not the location.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.filesystem.setIdentity( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe new identity that will be used as write directory.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.filesystem.setIdentity( name, appendToPath )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe new identity that will be used as write directory.\n\n[`boolean`](boolean \"boolean\")` appendToPath (false)`  \nWhether the identity directory will be searched when reading a filepath before or after the game's source directory and any currently.\n\nTRUE: results in searching source before searching save directory; FALSE: results in searching game save directory before searching source directory[mounted](love.filesystem.mount \"love.filesystem.mount\") archives.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Setting the game folder name\n\n``` lua\n-- Yes:\nlove.filesystem.setIdentity(\"monkey_doom_2\")\n-- No: \nlove.filesystem.setIdentity(\"c:/Users/bob/monkey_doom_2\")\n```\n\n### Setting which to search first\n\n``` lua\n--Search Source, then the save directory\nlove.filesystem.setIdentity(love.filesystem.getIdentity(),true)\n--Search Save directory, then the Source Directory\nlove.filesystem.setIdentity(love.filesystem.getIdentity(),false)\n```\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.getIdentity](love.filesystem.getidentity \"love.filesystem.getIdentity\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.setIdentity](https://love2d.org/wiki/love.filesystem.setIdentity)"
- name: love.filesystem.setRequirePath
  id: love.filesystem.setrequirepath
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.filesystem.setRequirePath\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nSets the filesystem paths that will be searched when [require](https://www.lua.org/manual/5.1/manual.html#pdf-require) is called.\n\nThe paths string given to this function is a sequence of path templates separated by semicolons. The argument passed to *require* will be inserted in place of any question mark (\"?\") character in each template (after the dot characters in the argument passed to *require* are replaced by directory separators.)\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with [love.filesystem.mount](love.filesystem.mount \"love.filesystem.mount\").\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.filesystem.setRequirePath( paths )\n```\n\n### Arguments\n\n[`string`](string \"string\")` paths`  \nThe paths that the *require* function will check in love's filesystem.\n\n### Returns\n\nNothing.\n\n## Notes\n\nThe default paths string is `\"?.lua;?/init.lua\"`, which makes `require(\"cool\")` try to load `cool.lua` and then try `cool/init.lua` if cool.lua doesn't exist.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.getRequirePath](love.filesystem.getrequirepath \"love.filesystem.getRequirePath\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.setRequirePath](https://love2d.org/wiki/love.filesystem.setRequirePath)"
- name: love.filesystem.setSource
  id: love.filesystem.setsource
  summary: Sets the source of the game, where the code is present
  description: "# love.filesystem.setSource\n\nSets the source of the game, where the code is present. This function can only be called once, and is normally automatically done by LÖVE.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.filesystem.setSource( path )\n```\n\n### Arguments\n\n[`string`](string \"string\")` path`  \nAbsolute path to the game's source folder.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.setSource](https://love2d.org/wiki/love.filesystem.setSource)"
- name: love.filesystem.setSymlinksEnabled
  id: love.filesystem.setsymlinksenabled
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.filesystem.setSymlinksEnabled\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nSets whether love.filesystem follows symbolic links. It is enabled by default in version [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") and newer, and disabled by default in [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\").\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.filesystem.setSymlinksEnabled( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nWhether love.filesystem should follow symbolic links.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.areSymlinksEnabled](love.filesystem.aresymlinksenabled \"love.filesystem.areSymlinksEnabled\")\n- [love.filesystem.isSymlink](love.filesystem.issymlink \"love.filesystem.isSymlink\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.setSymlinksEnabled](https://love2d.org/wiki/love.filesystem.setSymlinksEnabled)"
- name: love.filesystem.unmount
  id: love.filesystem.unmount
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.filesystem.unmount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nUnmounts a zip file or folder previously mounted for reading with [love.filesystem.mount](love.filesystem.mount \"love.filesystem.mount\").\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.filesystem.unmount( archive )\n```\n\n### Arguments\n\n[`string`](string \"string\")` archive`  \nThe folder or zip file in the game's save directory which is currently mounted.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the archive was successfully unmounted, false otherwise.\n\n## Examples\n\n### Mount a zip file and then unmount it.\n\n``` lua\n-- Assuming content.zip exists in the game's save directory and contains a file called 'myimage.png'.\nlove.filesystem.mount(\"content.zip\", \"content\")\nassert(love.filesystem.getInfo(\"content/myimage.png\"))\n \nlove.filesystem.unmount(\"content.zip\")\nassert(not love.filesystem.getInfo(\"content/myimage.png\"))\n```\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.mount](love.filesystem.mount \"love.filesystem.mount\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.unmount](https://love2d.org/wiki/love.filesystem.unmount)"
- name: love.filesystem.write
  id: love.filesystem.write
  summary: Write data to a file in the save directory
  description: "# love.filesystem.write\n\nWrite data to a file in the save directory. If the file existed already, it will be completely replaced by the new contents.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess, message = love.filesystem.write( name, data, size )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name (and path) of the file.\n\n[`string`](string \"string\")` data`  \nThe string data to write to the file.\n\n[`number`](number \"number\")` size (all)`  \nHow many bytes to write.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nIf the operation was successful.\n\n[`string`](string \"string\")` message`  \nError message if operation was unsuccessful.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess, message = love.filesystem.write( name, data, size )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name (and path) of the file.\n\n[`Data`](data \"Data\")` data`  \nThe Data object to write to the file.\n\n[`number`](number \"number\")` size (all)`  \nHow many bytes to write.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nIf the operation was successful.\n\n[`string`](string \"string\")` message`  \nError message if operation was unsuccessful.\n\n## Notes\n\nIf you are getting the error message \"Could not set write directory\", try setting the save directory. This is done either with [love.filesystem.setIdentity](love.filesystem.setidentity \"love.filesystem.setIdentity\") or by setting the identity field in [love.conf](love.conf \"love.conf\").\n\n**Writing to multiple lines**: In Windows, some text editors (e.g. Notepad) only treat CRLF (\"\\r\\n\") as a new line.\n\n## See Also\n\n- [love.filesystem](love.filesystem \"love.filesystem\")\n- [love.filesystem.append](love.filesystem.append \"love.filesystem.append\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.filesystem.write](https://love2d.org/wiki/love.filesystem.write)"
- name: love.focus
  id: love.focus
  summary: Available since LÖVE 0.7.0 This callback is not supported in earlier versions
  description: "# love.focus\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis callback is not supported in earlier versions.\n\nCallback function triggered when window receives or loses focus.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.focus( focus )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` focus`  \nTrue if the window gains focus, false if it loses focus.\n\n### Returns\n\nNothing.\n\n## Example\n\n``` lua\nfunction love.load()\n  text = \"FOCUSED\"\nend\n \nfunction love.draw()\n  love.graphics.print(text,0,0)\nend\n \nfunction love.focus(f)\n  if f then\n    print(\"Window is focused.\")\n    text = \"FOCUSED\"\n  else\n    print(\"Window is not focused.\")\n    text = \"UNFOCUSED\"\n  end\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.focus](https://love2d.org/wiki/love.focus)"
- name: love.font
  id: love.font
  summary: Available since LÖVE 0.7.0 This module is not supported in earlier versions
  description: "# love.font\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis module is not supported in earlier versions.\n\nAllows you to work with fonts.\n\n## Types\n\n|                                       |                                                     |       |       |\n|---------------------------------------|-----------------------------------------------------|-------|-------|\n| [FontData](fontdata \"FontData\")       | A FontData represents a font.                       | 0.7.0 | 0.8.0 |\n| [GlyphData](glyphdata \"GlyphData\")    | A GlyphData represents a drawable symbol of a font. | 0.7.0 |       |\n| [Rasterizer](rasterizer \"Rasterizer\") | A Rasterizer represents font data and glyphs.       | 0.7.0 |       |\n\n## Functions\n\n|                                                                                                      |                                    |       |       |\n|------------------------------------------------------------------------------------------------------|------------------------------------|-------|-------|\n| [love.font.newBMFontRasterizer](love.font.newbmfontrasterizer \"love.font.newBMFontRasterizer\")       | Creates a new BMFont Rasterizer.   | 0.7.0 |       |\n| [love.font.newFontData](love.font.newfontdata \"love.font.newFontData\")                               | Creates a new FontData.            | 0.7.0 | 0.8.0 |\n| [love.font.newGlyphData](love.font.newglyphdata \"love.font.newGlyphData\")                            | Creates a new GlyphData.           | 0.7.0 |       |\n| [love.font.newImageRasterizer](love.font.newimagerasterizer \"love.font.newImageRasterizer\")          | Creates a new Image Rasterizer.    | 0.7.0 |       |\n| [love.font.newRasterizer](love.font.newrasterizer \"love.font.newRasterizer\")                         | Creates a new Rasterizer.          | 0.7.0 |       |\n| [love.font.newTrueTypeRasterizer](love.font.newtruetyperasterizer \"love.font.newTrueTypeRasterizer\") | Creates a new TrueType Rasterizer. | 0.7.0 |       |\n\n## Enums\n\n|                                          |                                                                                                                                                            |        |     |\n|------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|--------|-----|\n| [HintingMode](hintingmode \"HintingMode\") | True Type hinting mode.                                                                                                                                    | 0.10.0 |     |\n| [PixelFormat](pixelformat \"PixelFormat\") | Pixel formats for [Textures](texture \"Texture\"), [ImageData](imagedata \"ImageData\"), and [CompressedImageData](compressedimagedata \"CompressedImageData\"). | 11.0   |     |\n\n## See Also\n\n- [Font](font \"Font\")\n- [love](love \"love\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.font](https://love2d.org/wiki/love.font)"
- name: love.font.newBMFontRasterizer
  id: love.font.newbmfontrasterizer
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# love.font.newBMFontRasterizer\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new BMFont Rasterizer.\n\n## Function\n\n### Synopsis\n\n``` lua\nrasterizer = love.font.newBMFontRasterizer( imageData, glyphs, dpiscale )\n```\n\n### Arguments\n\n[`ImageData`](imagedata \"ImageData\")` imageData`  \nThe image data containing the drawable pictures of font glyphs.\n\n[`string`](string \"string\")` glyphs`  \nThe sequence of glyphs in the ImageData.\n\n[`number`](number \"number\")` dpiscale (1)` Available since 11.0  \nDPI scale.\n\n### Returns\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe rasterizer.\n\n## Function\n\n### Synopsis\n\n``` lua\nrasterizer = love.font.newBMFontRasterizer( fileName, glyphs, dpiscale )\n```\n\n### Arguments\n\n[`string`](string \"string\")` fileName`  \nThe path to file containing the drawable pictures of font glyphs.\n\n[`string`](string \"string\")` glyphs`  \nThe sequence of glyphs in the ImageData.\n\n&nbsp;\n\n[`number`](number \"number\")` dpiscale (1)` Available since 11.0  \nDPI scale.\n\n### Returns\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe rasterizer.\n\n## See Also\n\n- [love.font](love.font \"love.font\")\n- [love.font.newRasterizer](love.font.newrasterizer \"love.font.newRasterizer\")\n- [love.font.newTrueTypeRasterizer](love.font.newtruetyperasterizer \"love.font.newTrueTypeRasterizer\")\n- [love.font.newImageRasterizer](love.font.newimagerasterizer \"love.font.newImageRasterizer\")\n- [Rasterizer](rasterizer \"Rasterizer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.font.newBMFontRasterizer](https://love2d.org/wiki/love.font.newBMFontRasterizer)"
- name: love.font.newFontData
  id: love.font.newfontdata
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.8.0 This function is not supported in earlier or later versions
  description: "# love.font.newFontData\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier or later versions.\n\nCreates a new FontData.\n\n## Function\n\n### Synopsis\n\n``` lua\nfontData = love.font.newFontData( rasterizer )\n```\n\n### Arguments\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe Rasterizer containing the font.\n\n### Returns\n\n[`FontData`](fontdata \"FontData\")` fontData`  \nThe FontData.\n\n## See Also\n\n- [love.font](love.font \"love.font\")\n- [FontData](fontdata \"FontData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.font.newFontData](https://love2d.org/wiki/love.font.newFontData)"
- name: love.font.newGlyphData
  id: love.font.newglyphdata
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# love.font.newGlyphData\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new GlyphData.\n\n## Function\n\n### Synopsis\n\n``` lua\nglyphData = love.font.newGlyphData( rasterizer, glyph )\n```\n\n### Arguments\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe Rasterizer containing the font.\n\n[`number`](number \"number\")` glyph`  \nThe character code of the glyph.\n\n### Returns\n\n[`GlyphData`](glyphdata \"GlyphData\")` glyphData`  \nThe GlyphData.\n\n## See Also\n\n- [love.font](love.font \"love.font\")\n- [GlyphData](glyphdata \"GlyphData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.font.newGlyphData](https://love2d.org/wiki/love.font.newGlyphData)"
- name: love.font.newImageRasterizer
  id: love.font.newimagerasterizer
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# love.font.newImageRasterizer\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new Image Rasterizer.\n\n## Function\n\nCreate an ImageRasterizer from the image data.\n\n### Synopsis\n\n``` lua\nrasterizer = love.font.newImageRasterizer( imageData, glyphs, extraSpacing, dpiscale )\n```\n\n### Arguments\n\n[`ImageData`](imagedata \"ImageData\")` imageData`  \nFont image data.\n\n[`string`](string \"string\")` glyphs`  \nString containing font glyphs.\n\n[`number`](number \"number\")` extraSpacing (0)`  \nFont extra spacing.\n\n[`number`](number \"number\")` dpiscale (1)` Available since 11.0  \nFont DPI scale.\n\n### Returns\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe rasterizer.\n\n## See Also\n\n- [love.font](love.font \"love.font\")\n- [love.font.newRasterizer](love.font.newrasterizer \"love.font.newRasterizer\")\n- [love.font.newBMFontRasterizer](love.font.newbmfontrasterizer \"love.font.newBMFontRasterizer\")\n- [love.font.newTrueTypeRasterizer](love.font.newtruetyperasterizer \"love.font.newTrueTypeRasterizer\")\n- [Rasterizer](rasterizer \"Rasterizer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.font.newImageRasterizer](https://love2d.org/wiki/love.font.newImageRasterizer)"
- name: love.font.newRasterizer
  id: love.font.newrasterizer
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# love.font.newRasterizer\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new Rasterizer.\n\n## Function\n\n### Synopsis\n\n``` lua\nrasterizer = love.font.newRasterizer( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe font file.\n\n### Returns\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe rasterizer.\n\n## Function\n\n### Synopsis\n\n``` lua\nrasterizer = love.font.newRasterizer( data )\n```\n\n### Arguments\n\n[`FileData`](filedata \"FileData\")` data`  \nThe FileData of the font file.\n\n### Returns\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe rasterizer.\n\n## Function\n\nCreate a TrueTypeRasterizer with the default font.\n\n### Synopsis\n\n``` lua\nrasterizer = love.font.newRasterizer( size, hinting, dpiscale )\n```\n\n### Arguments\n\n[`number`](number \"number\")` size (12)`  \nThe font size.\n\n[`HintingMode`](hintingmode \"HintingMode\")` hinting (\"normal\")` Available since 0.10.0  \nTrue Type hinting mode.\n\n  \n\n[`number`](number \"number\")` dpiscale (`[`love.window.getDPIScale`](love.window.getdpiscale \"love.window.getDPIScale\")`())` Available since 11.0  \nThe font DPI scale.\n\n### Returns\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe rasterizer.\n\n## Function\n\nCreate a TrueTypeRasterizer with custom font.\n\n### Synopsis\n\n``` lua\nrasterizer = love.font.newRasterizer( fileName, size, hinting, dpiscale )\n```\n\n### Arguments\n\n[`string`](string \"string\")` fileName`  \nPath to font file.\n\n[`number`](number \"number\")` size (12)`  \nThe font size.\n\n&nbsp;\n\n[`HintingMode`](hintingmode \"HintingMode\")` hinting (\"normal\")` Available since 0.10.0  \nTrue Type hinting mode.\n\n  \n\n[`number`](number \"number\")` dpiscale (`[`love.window.getDPIScale`](love.window.getdpiscale \"love.window.getDPIScale\")`())` Available since 11.0  \nThe font DPI scale.\n\n### Returns\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe rasterizer.\n\n## Function\n\nCreate a TrueTypeRasterizer with custom font.\n\n### Synopsis\n\n``` lua\nrasterizer = love.font.newRasterizer( fileData, size, hinting, dpiscale )\n```\n\n### Arguments\n\n[`FileData`](filedata \"FileData\")` fileData`  \nFile data containing font.\n\n[`number`](number \"number\")` size (12)`  \nThe font size.\n\n&nbsp;\n\n[`HintingMode`](hintingmode \"HintingMode\")` hinting (\"normal\")` Available since 0.10.0  \nTrue Type hinting mode.\n\n  \n\n[`number`](number \"number\")` dpiscale (`[`love.window.getDPIScale`](love.window.getdpiscale \"love.window.getDPIScale\")`())` Available since 11.0  \nThe font DPI scale.\n\n### Returns\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe rasterizer.\n\n## Function\n\nCreates a new BMFont Rasterizer.\n\n### Synopsis\n\n``` lua\nrasterizer = love.font.newRasterizer( imageData, glyphs, dpiscale )\n```\n\n### Arguments\n\n[`ImageData`](imagedata \"ImageData\")` imageData`  \nThe image data containing the drawable pictures of font glyphs.\n\n[`string`](string \"string\")` glyphs`  \nThe sequence of glyphs in the ImageData.\n\n&nbsp;\n\n[`number`](number \"number\")` dpiscale (1)` Available since 11.0  \nDPI scale.\n\n### Returns\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe rasterizer.\n\n## Function\n\nCreates a new BMFont Rasterizer.\n\n### Synopsis\n\n``` lua\nrasterizer = love.font.newRasterizer( fileName, glyphs, dpiscale )\n```\n\n### Arguments\n\n[`string`](string \"string\")` fileName`  \nThe path to file containing the drawable pictures of font glyphs.\n\n[`string`](string \"string\")` glyphs`  \nThe sequence of glyphs in the ImageData.\n\n&nbsp;\n\n[`number`](number \"number\")` dpiscale (1)` Available since 11.0  \nDPI scale.\n\n### Returns\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe rasterizer.\n\n## See Also\n\n- [love.font](love.font \"love.font\")\n- [love.font.newTrueTypeRasterizer](love.font.newtruetyperasterizer \"love.font.newTrueTypeRasterizer\")\n- [love.font.newBMFontRasterizer](love.font.newbmfontrasterizer \"love.font.newBMFontRasterizer\")\n- [love.font.newImageRasterizer](love.font.newimagerasterizer \"love.font.newImageRasterizer\")\n- [Rasterizer](rasterizer \"Rasterizer\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.font.newRasterizer](https://love2d.org/wiki/love.font.newRasterizer)"
- name: love.font.newTrueTypeRasterizer
  id: love.font.newtruetyperasterizer
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# love.font.newTrueTypeRasterizer\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new TrueType Rasterizer.\n\n## Function\n\nCreate a TrueTypeRasterizer with the default font.\n\n### Synopsis\n\n``` lua\nrasterizer = love.font.newTrueTypeRasterizer( size, hinting, dpiscale )\n```\n\n### Arguments\n\n[`number`](number \"number\")` size (12)`  \nThe font size.\n\n[`HintingMode`](hintingmode \"HintingMode\")` hinting (\"normal\")` Available since 0.10.0  \nTrue Type hinting mode.\n\n  \n\n[`number`](number \"number\")` dpiscale (`[`love.window.getDPIScale`](love.window.getdpiscale \"love.window.getDPIScale\")`())` Available since 11.0  \nThe font DPI scale.\n\n### Returns\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe rasterizer.\n\n## Function\n\nCreate a TrueTypeRasterizer with custom font.\n\n### Synopsis\n\n``` lua\nrasterizer = love.font.newTrueTypeRasterizer( fileName, size, hinting, dpiscale )\n```\n\n### Arguments\n\n[`string`](string \"string\")` fileName`  \nPath to font file.\n\n[`number`](number \"number\")` size (12)`  \nThe font size.\n\n&nbsp;\n\n[`HintingMode`](hintingmode \"HintingMode\")` hinting (\"normal\")` Available since 0.10.0  \nTrue Type hinting mode.\n\n  \n\n[`number`](number \"number\")` dpiscale (`[`love.window.getDPIScale`](love.window.getdpiscale \"love.window.getDPIScale\")`())` Available since 11.0  \nThe font DPI scale.\n\n### Returns\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe rasterizer.\n\n## Function\n\nCreate a TrueTypeRasterizer with custom font.\n\n### Synopsis\n\n``` lua\nrasterizer = love.font.newTrueTypeRasterizer( fileData, size, hinting, dpiscale )\n```\n\n### Arguments\n\n[`FileData`](filedata \"FileData\")` fileData`  \nFile data containing font.\n\n[`number`](number \"number\")` size (12)`  \nThe font size.\n\n&nbsp;\n\n[`HintingMode`](hintingmode \"HintingMode\")` hinting (\"normal\")` Available since 0.10.0  \nTrue Type hinting mode.\n\n  \n\n[`number`](number \"number\")` dpiscale (`[`love.window.getDPIScale`](love.window.getdpiscale \"love.window.getDPIScale\")`())` Available since 11.0  \nThe font DPI scale.\n\n### Returns\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nThe rasterizer.\n\n## See Also\n\n- [love.font](love.font \"love.font\")\n- [love.font.newRasterizer](love.font.newrasterizer \"love.font.newRasterizer\")\n- [love.font.newBMFontRasterizer](love.font.newbmfontrasterizer \"love.font.newBMFontRasterizer\")\n- [love.font.newImageRasterizer](love.font.newimagerasterizer \"love.font.newImageRasterizer\")\n- [Rasterizer](rasterizer \"Rasterizer\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.font.newTrueTypeRasterizer](https://love2d.org/wiki/love.font.newTrueTypeRasterizer)"
- name: love.gamepadaxis
  id: love.gamepadaxis
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.gamepadaxis\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCalled when a Joystick's virtual gamepad axis is moved.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.gamepadaxis( joystick, axis, value )\n```\n\n### Arguments\n\n[`Joystick`](joystick \"Joystick\")` joystick`  \nThe joystick object.\n\n[`GamepadAxis`](gamepadaxis \"GamepadAxis\")` axis`  \nThe virtual gamepad axis.\n\n[`number`](number \"number\")` value`  \nThe new axis value.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love](love \"love\")\n- [Joystick:isGamepad](joystick-isgamepad \"Joystick:isGamepad\")\n- [Joystick:getGamepadAxis](joystick-getgamepadaxis \"Joystick:getGamepadAxis\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.gamepadaxis](https://love2d.org/wiki/love.gamepadaxis)"
- name: love.gamepadpressed
  id: love.gamepadpressed
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.gamepadpressed\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCalled when a Joystick's virtual gamepad button is pressed.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.gamepadpressed( joystick, button )\n```\n\n### Arguments\n\n[`Joystick`](joystick \"Joystick\")` joystick`  \nThe joystick object.\n\n[`GamepadButton`](gamepadbutton \"GamepadButton\")` button`  \nThe virtual gamepad button.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love](love \"love\")\n- [love.gamepadreleased](love.gamepadreleased \"love.gamepadreleased\")\n- [Joystick:isGamepad](joystick-isgamepad \"Joystick:isGamepad\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.gamepadpressed](https://love2d.org/wiki/love.gamepadpressed)"
- name: love.gamepadreleased
  id: love.gamepadreleased
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.gamepadreleased\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCalled when a Joystick's virtual gamepad button is released.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.gamepadreleased( joystick, button )\n```\n\n### Arguments\n\n[`Joystick`](joystick \"Joystick\")` joystick`  \nThe joystick object.\n\n[`GamepadButton`](gamepadbutton \"GamepadButton\")` button`  \nThe virtual gamepad button.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love](love \"love\")\n- [love.gamepadpressed](love.gamepadpressed \"love.gamepadpressed\")\n- [Joystick:isGamepad](joystick-isgamepad \"Joystick:isGamepad\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.gamepadreleased](https://love2d.org/wiki/love.gamepadreleased)"
- name: love.getVersion
  id: love.getversion
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# love.getVersion\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nGets the current running version of LÖVE.\n\n## Function\n\n### Synopsis\n\n``` lua\nmajor, minor, revision, codename = love.getVersion( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` major`  \nThe major version of LÖVE, i.e. 0 for version 0.9.1.\n\n[`number`](number \"number\")` minor`  \nThe minor version of LÖVE, i.e. 9 for version 0.9.1.\n\n[`number`](number \"number\")` revision`  \nThe revision version of LÖVE, i.e. 1 for version 0.9.1.\n\n[`string`](string \"string\")` codename`  \nThe codename of the current version, i.e. \"Baby Inspector\" for version 0.9.1.\n\n## Notes\n\nFor LÖVE versions below 0.9.1, the following variables can be used instead (and still work in 0.9.2 and newer):\n\n``` lua\nlove._version_major\nlove._version_minor\nlove._version_revision\n```\n\n## Examples\n\n### display the current version\n\n``` lua\nfunction love.draw()\n    local major, minor, revision, codename = love.getVersion()\n    local str = string.format(\"Version %d.%d.%d - %s\", major, minor, revision, codename)\n    love.graphics.print(str, 20, 20)\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n- [love.isVersionCompatible](love.isversioncompatible \"love.isVersionCompatible\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.getVersion](https://love2d.org/wiki/love.getVersion)"
- name: love.graphics
  id: love.graphics
  summary: The primary responsibility for the love.graphics module is the drawing of lines, shapes, text, Images and other Drawable objects onto the screen
  description: "# love.graphics\n\nThe primary responsibility for the love.graphics module is the drawing of lines, shapes, text, [Images](image \"Image\") and other [Drawable](drawable \"Drawable\") objects onto the screen. Its secondary responsibilities include loading external files (including [Images](image \"Image\") and [Fonts](font \"Font\")) into memory, creating specialized objects (such as [ParticleSystems](particlesystem \"ParticleSystem\") or [Canvases](canvas \"Canvas\")) and managing screen geometry.\n\nLÖVE's coordinate system is rooted in the upper-left corner of the screen, which is at location (0, 0). The x axis is horizontal: larger values are further to the right. The y axis is vertical: larger values are further towards the bottom. It is worth noting that the location (0, 0) aligns with the upper-left corner of the pixel as well, meaning that for some functions you may encounter off-by-one problems in the render output when drawing 1 pixel wide lines. You can try aligning the coordinate system with the center of pixels rather than their upper-left corner. Do this by passing x+0.5 and y+0.5 or using love.graphics.translate().\n\n[](https://love2d.org/wiki/File:lovecoordsystem.png \"The LÖVE coordinate system\")\n\nIn many cases, you draw images or shapes in terms of their upper-left corner (See the picture above).\n\n  \nA note about angles in LÖVE: Angles are expressed in terms of [radians](https://en.wikipedia.org/wiki/Radian), with values in the range of 0 to 2Π (approximately 6.28); you may be more used to working in terms of degrees. Because of how the coordinate system is set up, with an origin in the upper left corner, angles in LÖVE may seem a bit backwards: 0 points right (along the X axis), ¼Π points diagonally down and to the right, ½Π points directly down (along the Y axis), with increasing values continuing **clockwise**.\n\n  \nMany of the functions are used to manipulate the *graphics coordinate system*, which is essentially the way coordinates are mapped to the display. You can change the position, scale, and even change rotation in this way.\n\n  \n\n## Types\n\n|                                                   |                                                                    |        |       |\n|---------------------------------------------------|--------------------------------------------------------------------|--------|-------|\n| [Canvas](canvas \"Canvas\")                         | Off-screen render target.                                          | 0.8.0  |       |\n| [Drawable](drawable \"Drawable\")                   | Superclass for all things that can be drawn on screen.             |        |       |\n| [Font](font \"Font\")                               | Defines the shape of characters than can be drawn onto the screen. |        |       |\n| [Framebuffer](framebuffer \"Framebuffer\")          | Off-screen render target.                                          | 0.7.0  | 0.8.0 |\n| [Image](image \"Image\")                            | Drawable image type.                                               |        |       |\n| [Mesh](mesh \"Mesh\")                               | A 2D polygon mesh used for drawing arbitrary textured shapes.      | 0.9.0  |       |\n| [ParticleSystem](particlesystem \"ParticleSystem\") | Used to create cool effects, like fire.                            |        |       |\n| [PixelEffect](pixeleffect \"PixelEffect\")          | Pixel shader effect.                                               | 0.8.0  | 0.9.0 |\n| [Quad](quad \"Quad\")                               | A quadrilateral with texture coordinate information.               |        |       |\n| [Shader](shader \"Shader\")                         | Shader effect.                                                     | 0.9.0  |       |\n| [SpriteBatch](spritebatch \"SpriteBatch\")          | Store image positions in a buffer, and draw it in one call.        |        |       |\n| [Text](text \"Text\")                               | Drawable text.                                                     | 0.10.0 |       |\n| [Texture](texture \"Texture\")                      | Superclass for drawable objects which represent a texture.         | 0.9.1  |       |\n| [Video](video \"Video\")                            | A drawable video.                                                  | 0.10.0 |       |\n\n## Functions\n\n### Drawing\n\n|                                                                                          |                                                                                                            |        |        |\n|------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------|--------|--------|\n| [love.graphics.arc](love.graphics.arc \"love.graphics.arc\")                               | Draws an arc.                                                                                              | 0.8.0  |        |\n| [love.graphics.circle](love.graphics.circle \"love.graphics.circle\")                      | Draws a circle.                                                                                            |        |        |\n| [love.graphics.clear](love.graphics.clear \"love.graphics.clear\")                         | Clears the screen or active [Canvas](canvas \"Canvas\") to the specified color.                              |        |        |\n| [love.graphics.discard](love.graphics.discard \"love.graphics.discard\")                   | Discards the contents of the screen or active [Canvas](canvas \"Canvas\").                                   | 0.10.0 |        |\n| [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")                            | Draws objects on screen.                                                                                   |        |        |\n| [love.graphics.drawInstanced](love.graphics.drawinstanced \"love.graphics.drawInstanced\") | Draws many instances of a [Mesh](mesh \"Mesh\") with a single draw call, using hardware geometry instancing. | 11.0   |        |\n| [love.graphics.drawLayer](love.graphics.drawlayer \"love.graphics.drawLayer\")             | Draws a layer of an [Array Texture](love.graphics.newarrayimage \"love.graphics.newArrayImage\").            | 11.0   |        |\n| [love.graphics.drawq](love.graphics.drawq \"love.graphics.drawq\")                         | Draw a Quad with the specified Image on screen.                                                            |        | 0.9.0  |\n| [love.graphics.ellipse](love.graphics.ellipse \"love.graphics.ellipse\")                   | Draws an ellipse.                                                                                          | 0.10.0 |        |\n| [love.graphics.flushBatch](love.graphics.flushbatch \"love.graphics.flushBatch\")          | Immediately renders any pending automatically batched draws.                                               | 11.0   |        |\n| [love.graphics.line](love.graphics.line \"love.graphics.line\")                            | Draws lines between points.                                                                                |        |        |\n| [love.graphics.point](love.graphics.point \"love.graphics.point\")                         | Draws a point.                                                                                             |        | 0.10.0 |\n| [love.graphics.points](love.graphics.points \"love.graphics.points\")                      | Draws one or more points.                                                                                  | 0.10.0 |        |\n| [love.graphics.polygon](love.graphics.polygon \"love.graphics.polygon\")                   | Draw a polygon.                                                                                            | 0.4.0  |        |\n| [love.graphics.present](love.graphics.present \"love.graphics.present\")                   | Displays the results of drawing operations on the screen.                                                  |        |        |\n| [love.graphics.print](love.graphics.print \"love.graphics.print\")                         | Draws text on screen. If no Font is set, one will be created and set (once) if needed.                     |        |        |\n| [love.graphics.printf](love.graphics.printf \"love.graphics.printf\")                      | Draws formatted text, with word wrap and alignment.                                                        |        |        |\n| [love.graphics.quad](love.graphics.quad \"love.graphics.quad\")                            | Draws a quadrilateral shape.                                                                               |        | 0.9.0  |\n| [love.graphics.rectangle](love.graphics.rectangle \"love.graphics.rectangle\")             | Draws a rectangle.                                                                                         | 0.3.2  |        |\n| [love.graphics.stencil](love.graphics.stencil \"love.graphics.stencil\")                   | Draws geometry as a stencil.                                                                               | 0.10.0 |        |\n| [love.graphics.triangle](love.graphics.triangle \"love.graphics.triangle\")                | Draws a triangle.                                                                                          |        | 0.9.0  |\n\n  \n\n### Object Creation\n\n|                                                                                                      |                                                                              |        |       |\n|------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------|--------|-------|\n| [love.graphics.captureScreenshot](love.graphics.capturescreenshot \"love.graphics.captureScreenshot\") | Creates a screenshot once the current frame is done.                         | 11.0   |       |\n| [love.graphics.newArrayImage](love.graphics.newarrayimage \"love.graphics.newArrayImage\")             | Creates a new [array](texturetype \"TextureType\") [Image](image \"Image\").     | 11.0   |       |\n| [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")                         | Creates a new [Canvas](canvas \"Canvas\").                                     | 0.8.0  |       |\n| [love.graphics.newCubeImage](love.graphics.newcubeimage \"love.graphics.newCubeImage\")                | Creates a new [cubemap](texturetype \"TextureType\") [Image](image \"Image\").   | 11.0   |       |\n| [love.graphics.newFont](love.graphics.newfont \"love.graphics.newFont\")                               | Creates a new [Font](font \"Font\") from a TrueType Font or BMFont file.       |        |       |\n| [love.graphics.newFramebuffer](love.graphics.newframebuffer \"love.graphics.newFramebuffer\")          | Creates a new [Framebuffer](framebuffer \"Framebuffer\").                      | 0.7.0  | 0.8.0 |\n| [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\")                            | Creates a new [Image](image \"Image\").                                        |        |       |\n| [love.graphics.newImageFont](love.graphics.newimagefont \"love.graphics.newImageFont\")                | Creates a new [Font](font \"Font\") by loading a specifically formatted image. | 0.2.0  |       |\n| [love.graphics.newMesh](love.graphics.newmesh \"love.graphics.newMesh\")                               | Creates a new [Mesh](mesh \"Mesh\").                                           | 0.9.0  |       |\n| [love.graphics.newParticleSystem](love.graphics.newparticlesystem \"love.graphics.newParticleSystem\") | Creates a new [ParticleSystem](particlesystem \"ParticleSystem\").             |        |       |\n| [love.graphics.newPixelEffect](love.graphics.newpixeleffect \"love.graphics.newPixelEffect\")          | Creates a new [PixelEffect](pixeleffect \"PixelEffect\").                      | 0.8.0  | 0.9.0 |\n| [love.graphics.newQuad](love.graphics.newquad \"love.graphics.newQuad\")                               | Creates a new [Quad](quad \"Quad\").                                           |        |       |\n| [love.graphics.newScreenshot](love.graphics.newscreenshot \"love.graphics.newScreenshot\")             | Creates a screenshot and returns the [ImageData](imagedata \"ImageData\").     |        | 11.0  |\n| [love.graphics.newShader](love.graphics.newshader \"love.graphics.newShader\")                         | Creates a new [Shader](shader \"Shader\").                                     | 0.9.0  |       |\n| [love.graphics.newSpriteBatch](love.graphics.newspritebatch \"love.graphics.newSpriteBatch\")          | Creates a new [SpriteBatch](spritebatch \"SpriteBatch\").                      |        |       |\n| [love.graphics.newStencil](love.graphics.newstencil \"love.graphics.newStencil\")                      | Creates a new stencil.                                                       | 0.8.0  | 0.9.0 |\n| [love.graphics.newText](love.graphics.newtext \"love.graphics.newText\")                               | Creates a new drawable [Text](text \"Text\") object.                           | 0.10.0 |       |\n| [love.graphics.newVideo](love.graphics.newvideo \"love.graphics.newVideo\")                            | Creates a new [Video](video \"Video\").                                        | 0.10.0 |       |\n| [love.graphics.newVolumeImage](love.graphics.newvolumeimage \"love.graphics.newVolumeImage\")          | Creates a new [volume](texturetype \"TextureType\") [Image](image \"Image\").    | 11.0   |       |\n| [love.graphics.setNewFont](love.graphics.setnewfont \"love.graphics.setNewFont\")                      | Creates and sets a new [Font](font \"Font\").                                  | 0.8.0  |       |\n| [love.graphics.validateShader](love.graphics.validateshader \"love.graphics.validateShader\")          | Validates shader code.                                                       | 11.0   |       |\n\n  \n\n### Graphics State\n\n|                                                                                                                  |                                                                                                                                                                                              |        |        |\n|------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------|--------|\n| [love.graphics.getBackgroundColor](love.graphics.getbackgroundcolor \"love.graphics.getBackgroundColor\")          | Gets the current background color.                                                                                                                                                           |        |        |\n| [love.graphics.getBlendMode](love.graphics.getblendmode \"love.graphics.getBlendMode\")                            | Gets the blending mode.                                                                                                                                                                      | 0.2.0  |        |\n| [love.graphics.getCanvas](love.graphics.getcanvas \"love.graphics.getCanvas\")                                     | Returns the current target Canvas.                                                                                                                                                           | 0.8.0  |        |\n| [love.graphics.getColor](love.graphics.getcolor \"love.graphics.getColor\")                                        | Gets the current color.                                                                                                                                                                      |        |        |\n| [love.graphics.getColorMask](love.graphics.getcolormask \"love.graphics.getColorMask\")                            | Gets the active color components used when drawing.                                                                                                                                          | 0.9.0  |        |\n| [love.graphics.getColorMode](love.graphics.getcolormode \"love.graphics.getColorMode\")                            | Gets the color mode (which controls how images are affected by the current color).                                                                                                           | 0.2.0  | 0.9.0  |\n| [love.graphics.getDefaultFilter](love.graphics.getdefaultfilter \"love.graphics.getDefaultFilter\")                | Returns the default scaling filters used with [Images](image \"Image\"), [Canvases](canvas \"Canvas\"), and [Fonts](font \"Font\").                                                                | 0.9.0  |        |\n| [love.graphics.getDefaultImageFilter](love.graphics.getdefaultimagefilter \"love.graphics.getDefaultImageFilter\") | Returns the default scaling filters.                                                                                                                                                         | 0.8.0  | 0.9.0  |\n| [love.graphics.getDepthMode](love.graphics.getdepthmode \"love.graphics.getDepthMode\")                            | Gets the current depth test mode and whether writing to the depth buffer is enabled.                                                                                                         | 11.0   |        |\n| [love.graphics.getFont](love.graphics.getfont \"love.graphics.getFont\")                                           | Gets the current Font object.                                                                                                                                                                | 0.9.0  |        |\n| [love.graphics.getFrontFaceWinding](love.graphics.getfrontfacewinding \"love.graphics.getFrontFaceWinding\")       | Gets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.                                                                                     | 11.0   |        |\n| [love.graphics.getLineJoin](love.graphics.getlinejoin \"love.graphics.getLineJoin\")                               | Gets the line join style.                                                                                                                                                                    |        |        |\n| [love.graphics.getLineStipple](love.graphics.getlinestipple \"love.graphics.getLineStipple\")                      | Gets the current line stipple.                                                                                                                                                               |        | 0.8.0  |\n| [love.graphics.getLineStyle](love.graphics.getlinestyle \"love.graphics.getLineStyle\")                            | Gets the line style.                                                                                                                                                                         | 0.3.2  |        |\n| [love.graphics.getLineWidth](love.graphics.getlinewidth \"love.graphics.getLineWidth\")                            | Gets the current line width.                                                                                                                                                                 | 0.3.2  |        |\n| [love.graphics.getMeshCullMode](love.graphics.getmeshcullmode \"love.graphics.getMeshCullMode\")                   | Gets whether [back-facing](love.graphics.setfrontfacewinding \"love.graphics.setFrontFaceWinding\") triangles in a [Mesh](mesh \"Mesh\") are culled.                                             | 11.0   |        |\n| [love.graphics.getPixelEffect](love.graphics.getpixeleffect \"love.graphics.getPixelEffect\")                      | Returns the current PixelEffect.                                                                                                                                                             | 0.8.0  | 0.9.0  |\n| [love.graphics.getPointSize](love.graphics.getpointsize \"love.graphics.getPointSize\")                            | Gets the [point](love.graphics.point \"love.graphics.point\") size.                                                                                                                            |        |        |\n| [love.graphics.getPointStyle](love.graphics.getpointstyle \"love.graphics.getPointStyle\")                         | Gets the current point style.                                                                                                                                                                |        | 0.10.0 |\n| [love.graphics.getScissor](love.graphics.getscissor \"love.graphics.getScissor\")                                  | Gets the current scissor box.                                                                                                                                                                | 0.4.0  |        |\n| [love.graphics.getShader](love.graphics.getshader \"love.graphics.getShader\")                                     | Gets the current [Shader](shader \"Shader\").                                                                                                                                                  | 0.9.0  |        |\n| [love.graphics.getStackDepth](love.graphics.getstackdepth \"love.graphics.getStackDepth\")                         | Gets the current depth of the transform / state stack (the number of [pushes](love.graphics.push \"love.graphics.push\") without corresponding [pops](love.graphics.pop \"love.graphics.pop\")). | 11.0   |        |\n| [love.graphics.getStencilTest](love.graphics.getstenciltest \"love.graphics.getStencilTest\")                      | Gets the current stencil test configuration.                                                                                                                                                 | 0.10.0 |        |\n| [love.graphics.intersectScissor](love.graphics.intersectscissor \"love.graphics.intersectScissor\")                | Sets the [scissor](love.graphics.setscissor \"love.graphics.setScissor\") to the rectangle created by the intersection of the specified rectangle with the existing scissor.                   | 0.10.0 |        |\n| [love.graphics.isActive](love.graphics.isactive \"love.graphics.isActive\")                                        | Gets whether the graphics module is able to be used.                                                                                                                                         | 0.10.0 |        |\n| [love.graphics.isGammaCorrect](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\")                      | Gets whether gamma-correct rendering is enabled.                                                                                                                                             | 0.10.0 |        |\n| [love.graphics.isSupported](love.graphics.issupported \"love.graphics.isSupported\")                               | Checks for the support of graphics related functions.                                                                                                                                        | 0.8.0  | 0.10.0 |\n| [love.graphics.isWireframe](love.graphics.iswireframe \"love.graphics.isWireframe\")                               | Gets whether wireframe mode is used when drawing.                                                                                                                                            | 0.9.1  |        |\n| [love.graphics.reset](love.graphics.reset \"love.graphics.reset\")                                                 | Resets the current graphics settings.                                                                                                                                                        |        |        |\n| [love.graphics.setBackgroundColor](love.graphics.setbackgroundcolor \"love.graphics.setBackgroundColor\")          | Sets the background color.                                                                                                                                                                   |        |        |\n| [love.graphics.setBlendMode](love.graphics.setblendmode \"love.graphics.setBlendMode\")                            | Sets the blending mode.                                                                                                                                                                      | 0.2.0  |        |\n| [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\")                                     | Captures drawing operations to a [Canvas](canvas \"Canvas\")                                                                                                                                   | 0.8.0  |        |\n| [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\")                                        | Sets the color used for drawing.                                                                                                                                                             |        |        |\n| [love.graphics.setColorMask](love.graphics.setcolormask \"love.graphics.setColorMask\")                            | Sets the color mask. Enables or disables specific color components when rendering.                                                                                                           | 0.9.0  |        |\n| [love.graphics.setColorMode](love.graphics.setcolormode \"love.graphics.setColorMode\")                            | Sets the color mode (which controls how images are affected by the current color).                                                                                                           | 0.2.0  | 0.9.0  |\n| [love.graphics.setDefaultFilter](love.graphics.setdefaultfilter \"love.graphics.setDefaultFilter\")                | Sets the default scaling filters used with [Images](image \"Image\"), [Canvases](canvas \"Canvas\"), and [Fonts](font \"Font\").                                                                   | 0.9.0  |        |\n| [love.graphics.setDefaultImageFilter](love.graphics.setdefaultimagefilter \"love.graphics.setDefaultImageFilter\") | Sets the default scaling filters.                                                                                                                                                            | 0.8.0  | 0.9.0  |\n| [love.graphics.setDepthMode](love.graphics.setdepthmode \"love.graphics.setDepthMode\")                            | Configures depth testing and writing to the depth buffer.                                                                                                                                    | 11.0   |        |\n| [love.graphics.setFont](love.graphics.setfont \"love.graphics.setFont\")                                           | Set an already-loaded Font as the current font.                                                                                                                                              |        |        |\n| [love.graphics.setFrontFaceWinding](love.graphics.setfrontfacewinding \"love.graphics.setFrontFaceWinding\")       | Sets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.                                                                                     | 11.0   |        |\n| [love.graphics.setInvertedStencil](love.graphics.setinvertedstencil \"love.graphics.setInvertedStencil\")          | Defines an inverted stencil.                                                                                                                                                                 | 0.8.0  | 0.10.0 |\n| [love.graphics.setLine](love.graphics.setline \"love.graphics.setLine\")                                           | Sets the line width and style.                                                                                                                                                               |        | 0.9.0  |\n| [love.graphics.setLineJoin](love.graphics.setlinejoin \"love.graphics.setLineJoin\")                               | Sets the line join style.                                                                                                                                                                    |        |        |\n| [love.graphics.setLineStipple](love.graphics.setlinestipple \"love.graphics.setLineStipple\")                      | Sets the line stipple pattern.                                                                                                                                                               |        | 0.8.0  |\n| [love.graphics.setLineStyle](love.graphics.setlinestyle \"love.graphics.setLineStyle\")                            | Sets the line style.                                                                                                                                                                         | 0.3.2  |        |\n| [love.graphics.setLineWidth](love.graphics.setlinewidth \"love.graphics.setLineWidth\")                            | Sets the line width.                                                                                                                                                                         | 0.3.2  |        |\n| [love.graphics.setMeshCullMode](love.graphics.setmeshcullmode \"love.graphics.setMeshCullMode\")                   | Sets whether [back-facing](love.graphics.setfrontfacewinding \"love.graphics.setFrontFaceWinding\") triangles in a [Mesh](mesh \"Mesh\") are culled.                                             | 11.0   |        |\n| [love.graphics.setPixelEffect](love.graphics.setpixeleffect \"love.graphics.setPixelEffect\")                      | Routes drawing operations through a pixel shader.                                                                                                                                            | 0.8.0  | 0.9.0  |\n| [love.graphics.setPoint](love.graphics.setpoint \"love.graphics.setPoint\")                                        | Sets the point size and style.                                                                                                                                                               |        | 0.9.0  |\n| [love.graphics.setPointSize](love.graphics.setpointsize \"love.graphics.setPointSize\")                            | Sets the [point](love.graphics.points \"love.graphics.points\") size.                                                                                                                          |        |        |\n| [love.graphics.setPointStyle](love.graphics.setpointstyle \"love.graphics.setPointStyle\")                         | Sets the [point](love.graphics.point \"love.graphics.point\") style.                                                                                                                           |        | 0.10.0 |\n| [love.graphics.setRenderTarget](love.graphics.setrendertarget \"love.graphics.setRenderTarget\")                   | Captures drawing operations to a Framebuffer                                                                                                                                                 | 0.7.0  | 0.8.0  |\n| [love.graphics.setScissor](love.graphics.setscissor \"love.graphics.setScissor\")                                  | Sets or disables scissor.                                                                                                                                                                    | 0.4.0  |        |\n| [love.graphics.setShader](love.graphics.setshader \"love.graphics.setShader\")                                     | Routes drawing operations through a shader.                                                                                                                                                  | 0.9.0  |        |\n| [love.graphics.setStencil](love.graphics.setstencil \"love.graphics.setStencil\")                                  | Defines or releases a stencil.                                                                                                                                                               | 0.8.0  | 0.10.0 |\n| [love.graphics.setStencilTest](love.graphics.setstenciltest \"love.graphics.setStencilTest\")                      | Configures or disables stencil testing.                                                                                                                                                      | 0.10.0 |        |\n| [love.graphics.setWireframe](love.graphics.setwireframe \"love.graphics.setWireframe\")                            | Sets whether wireframe lines will be used when drawing.                                                                                                                                      | 0.9.1  |        |\n\n  \n\n### Coordinate System\n\n|                                                                                                                  |                                                                                                          |       |     |\n|------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------|-------|-----|\n| [love.graphics.applyTransform](love.graphics.applytransform \"love.graphics.applyTransform\")                      | Applies the given [Transform](transform \"Transform\") object to the current coordinate transformation.    | 11.0  |     |\n| [love.graphics.inverseTransformPoint](love.graphics.inversetransformpoint \"love.graphics.inverseTransformPoint\") | Converts the given 2D position from screen-space into global coordinates.                                | 11.0  |     |\n| [love.graphics.origin](love.graphics.origin \"love.graphics.origin\")                                              | Resets the current coordinate transformation.                                                            | 0.9.0 |     |\n| [love.graphics.pop](love.graphics.pop \"love.graphics.pop\")                                                       | Pops the current coordinate transformation from the transformation stack.                                |       |     |\n| [love.graphics.push](love.graphics.push \"love.graphics.push\")                                                    | Copies and pushes the current coordinate transformation to the transformation stack.                     |       |     |\n| [love.graphics.replaceTransform](love.graphics.replacetransform \"love.graphics.replaceTransform\")                | Replaces the current coordinate transformation with the given [Transform](transform \"Transform\") object. | 11.0  |     |\n| [love.graphics.rotate](love.graphics.rotate \"love.graphics.rotate\")                                              | Rotates the coordinate system in two dimensions.                                                         |       |     |\n| [love.graphics.scale](love.graphics.scale \"love.graphics.scale\")                                                 | Scales the coordinate system in two dimensions.                                                          |       |     |\n| [love.graphics.shear](love.graphics.shear \"love.graphics.shear\")                                                 | Shears the coordinate system.                                                                            | 0.8.0 |     |\n| [love.graphics.transformPoint](love.graphics.transformpoint \"love.graphics.transformPoint\")                      | Converts the given 2D position from global coordinates into screen-space.                                | 11.0  |     |\n| [love.graphics.translate](love.graphics.translate \"love.graphics.translate\")                                     | Translates the coordinate system in two dimensions.                                                      |       |     |\n\n  \n\n### Window\n\n|                                                                                                         |                                                    |       |       |\n|---------------------------------------------------------------------------------------------------------|----------------------------------------------------|-------|-------|\n| [love.graphics.checkMode](love.graphics.checkmode \"love.graphics.checkMode\")                            | Checks if a display mode is supported.             |       | 0.9.0 |\n| [love.graphics.getCaption](love.graphics.getcaption \"love.graphics.getCaption\")                         | Gets the window caption.                           |       | 0.9.0 |\n| [love.graphics.getDPIScale](love.graphics.getdpiscale \"love.graphics.getDPIScale\")                      | Gets the DPI scale factor of the window.           | 11.0  |       |\n| [love.graphics.getDimensions](love.graphics.getdimensions \"love.graphics.getDimensions\")                | Gets the width and height of the window.           | 0.9.0 |       |\n| [love.graphics.getHeight](love.graphics.getheight \"love.graphics.getHeight\")                            | Gets the height in pixels of the window.           | 0.2.1 |       |\n| [love.graphics.getMode](love.graphics.getmode \"love.graphics.getMode\")                                  | Returns the current display mode.                  | 0.8.0 | 0.9.0 |\n| [love.graphics.getModes](love.graphics.getmodes \"love.graphics.getModes\")                               | Gets a list of supported fullscreen modes.         |       | 0.9.0 |\n| [love.graphics.getPixelDimensions](love.graphics.getpixeldimensions \"love.graphics.getPixelDimensions\") | Gets the width and height in pixels of the window. | 11.0  |       |\n| [love.graphics.getPixelHeight](love.graphics.getpixelheight \"love.graphics.getPixelHeight\")             | Gets the height in pixels of the window.           | 11.0  |       |\n| [love.graphics.getPixelWidth](love.graphics.getpixelwidth \"love.graphics.getPixelWidth\")                | Gets the width in pixels of the window.            | 11.0  |       |\n| [love.graphics.getWidth](love.graphics.getwidth \"love.graphics.getWidth\")                               | Gets the width in pixels of the window.            | 0.2.1 |       |\n| [love.graphics.hasFocus](love.graphics.hasfocus \"love.graphics.hasFocus\")                               | Checks if the game window has keyboard focus.      | 0.8.0 | 0.9.0 |\n| [love.graphics.isCreated](love.graphics.iscreated \"love.graphics.isCreated\")                            | Checks if the window has been created.             |       | 0.9.0 |\n| [love.graphics.setCaption](love.graphics.setcaption \"love.graphics.setCaption\")                         | Sets the window caption.                           |       | 0.9.0 |\n| [love.graphics.setIcon](love.graphics.seticon \"love.graphics.setIcon\")                                  | Set window icon.                                   | 0.7.0 | 0.9.0 |\n| [love.graphics.setMode](love.graphics.setmode \"love.graphics.setMode\")                                  | Changes the display mode.                          |       | 0.9.0 |\n| [love.graphics.toggleFullscreen](love.graphics.togglefullscreen \"love.graphics.toggleFullscreen\")       | Toggles fullscreen.                                |       | 0.9.0 |\n\n  \n\n### System Information\n\n|                                                                                                                              |                                                                                                                        |        |        |\n|------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------|--------|--------|\n| [love.graphics.getCanvasFormats](love.graphics.getcanvasformats \"love.graphics.getCanvasFormats\")                            | Gets the available [Canvas formats](canvasformat \"CanvasFormat\"), and whether each is supported.                       | 0.9.2  |        |\n| [love.graphics.getCompressedImageFormats](love.graphics.getcompressedimageformats \"love.graphics.getCompressedImageFormats\") | Gets the available [compressed image formats](compressedformat \"CompressedFormat\"), and whether each is supported.     | 0.9.2  | 11.0   |\n| [love.graphics.getImageFormats](love.graphics.getimageformats \"love.graphics.getImageFormats\")                               | Gets the [pixel formats](pixelformat \"PixelFormat\") usable for [Images](image \"Image\"), and whether each is supported. | 11.0   |        |\n| [love.graphics.getMaxImageSize](love.graphics.getmaximagesize \"love.graphics.getMaxImageSize\")                               | Gets the max supported width or height of Images and Canvases.                                                         | 0.9.0  | 0.10.0 |\n| [love.graphics.getMaxPointSize](love.graphics.getmaxpointsize \"love.graphics.getMaxPointSize\")                               | Gets the max supported [point](love.graphics.point \"love.graphics.point\") size.                                        |        | 0.10.0 |\n| [love.graphics.getRendererInfo](love.graphics.getrendererinfo \"love.graphics.getRendererInfo\")                               | Gets information about the system's video card and drivers.                                                            | 0.9.0  |        |\n| [love.graphics.getStats](love.graphics.getstats \"love.graphics.getStats\")                                                    | Gets performance-related rendering statistics.                                                                         | 0.9.2  |        |\n| [love.graphics.getSupported](love.graphics.getsupported \"love.graphics.getSupported\")                                        | Gets the optional graphics features and whether they're supported.                                                     | 0.10.0 |        |\n| [love.graphics.getSystemLimit](love.graphics.getsystemlimit \"love.graphics.getSystemLimit\")                                  | Gets the system-dependent maximum value for a love.graphics feature.                                                   | 0.9.1  | 0.10.0 |\n| [love.graphics.getSystemLimits](love.graphics.getsystemlimits \"love.graphics.getSystemLimits\")                               | Gets the system-dependent maximum values for love.graphics features.                                                   | 0.10.0 |        |\n| [love.graphics.getTextureTypes](love.graphics.gettexturetypes \"love.graphics.getTextureTypes\")                               | Gets the available [texture types](texturetype \"TextureType\"), and whether each is supported.                          | 11.0   |        |\n\n## Enums\n\n|                                                                  |                                                                                                                                                                                       |        |        |\n|------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------|--------|\n| [AlignMode](alignmode \"AlignMode\")                               | Text alignment.                                                                                                                                                                       |        |        |\n| [ArcType](arctype \"ArcType\")                                     | Different types of [arcs](love.graphics.arc \"love.graphics.arc\") that can be drawn.                                                                                                   | 0.10.1 |        |\n| [BlendAlphaMode](blendalphamode \"BlendAlphaMode\")                | Different ways alpha affects color blending.                                                                                                                                          | 0.10.0 |        |\n| [BlendMode](blendmode \"BlendMode\")                               | Different ways to do color blending.                                                                                                                                                  | 0.2.0  |        |\n| [CanvasFormat](canvasformat \"CanvasFormat\")                      | Canvas texture formats.                                                                                                                                                               | 0.9.0  |        |\n| [ColorMode](colormode \"ColorMode\")                               | Controls how drawn images are affected by current color.                                                                                                                              | 0.2.0  | 0.9.0  |\n| [CompareMode](comparemode \"CompareMode\")                         | Different types of [stencil test](love.graphics.setstenciltest \"love.graphics.setStencilTest\") and [depth test](love.graphics.setdepthmode \"love.graphics.setDepthMode\") comparisons. | 0.10.0 |        |\n| [CullMode](cullmode \"CullMode\")                                  | How [Mesh](mesh \"Mesh\") geometry is culled when rendering.                                                                                                                            | 11.0   |        |\n| [DrawMode](drawmode \"DrawMode\")                                  | Controls whether shapes are drawn as an outline, or filled.                                                                                                                           |        |        |\n| [FilterMode](filtermode \"FilterMode\")                            | How the image is filtered when scaling.                                                                                                                                               |        |        |\n| [GraphicsFeature](graphicsfeature \"GraphicsFeature\")             | Graphics features that can be checked for with [love.graphics.getSupported](love.graphics.getsupported \"love.graphics.getSupported\").                                                 | 0.8.0  |        |\n| [GraphicsLimit](graphicslimit \"GraphicsLimit\")                   | Types of system-dependent graphics limits.                                                                                                                                            | 0.9.1  |        |\n| [IndexDataType](indexdatatype \"IndexDataType\")                   | Vertex map datatype.                                                                                                                                                                  | 11.0   |        |\n| [LineJoin](linejoin \"LineJoin\")                                  | Line join style.                                                                                                                                                                      |        |        |\n| [LineStyle](linestyle \"LineStyle\")                               | The styles in which lines are drawn.                                                                                                                                                  |        |        |\n| [MeshDrawMode](meshdrawmode \"MeshDrawMode\")                      | How a Mesh's vertices are used when drawing.                                                                                                                                          | 0.9.0  |        |\n| [MipmapMode](mipmapmode \"MipmapMode\")                            | Controls whether a [Canvas](canvas \"Canvas\") has mipmaps, and its behaviour when it does.                                                                                             | 11.0   |        |\n| [PixelFormat](pixelformat \"PixelFormat\")                         | Pixel formats for [Textures](texture \"Texture\"), [ImageData](imagedata \"ImageData\"), and [CompressedImageData](compressedimagedata \"CompressedImageData\").                            | 11.0   |        |\n| [PointStyle](pointstyle \"PointStyle\")                            | How points should be drawn.                                                                                                                                                           |        | 0.10.0 |\n| [SpriteBatchUsage](spritebatchusage \"SpriteBatchUsage\")          | Usage hints for [SpriteBatches](spritebatch \"SpriteBatch\") and [Meshes](mesh \"Mesh\").                                                                                                 | 0.8.0  |        |\n| [StackType](stacktype \"StackType\")                               | Graphics state stack types used with [love.graphics.push](love.graphics.push \"love.graphics.push\").                                                                                   | 0.9.2  |        |\n| [StencilAction](stencilaction \"StencilAction\")                   | How a [stencil function](love.graphics.stencil \"love.graphics.stencil\") modifies the stencil values of pixels it touches.                                                             | 0.10.0 |        |\n| [TextureFormat](textureformat \"TextureFormat\")                   | Controls the canvas texture format.                                                                                                                                                   | 0.9.0  | 0.10.0 |\n| [TextureType](texturetype \"TextureType\")                         | Types of textures (2D, cubemap, etc.)                                                                                                                                                 | 11.0   |        |\n| [VertexAttributeStep](vertexattributestep \"VertexAttributeStep\") | The frequency at which a vertex shader fetches the vertex attribute's data from the Mesh when it's drawn.                                                                             | 11.0   |        |\n| [VertexWinding](vertexwinding \"VertexWinding\")                   | Vertex winding.                                                                                                                                                                       | 11.0   |        |\n| [WrapMode](wrapmode \"WrapMode\")                                  | How the image wraps inside a large Quad.                                                                                                                                              |        |        |\n\n## See Also\n\n- [love](love \"love\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics](https://love2d.org/wiki/love.graphics)"
- name: love.graphics.applyTransform
  id: love.graphics.applytransform
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.applyTransform\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nApplies the given [Transform](transform \"Transform\") object to the current coordinate transformation.\n\nThis effectively multiplies the existing coordinate transformation's matrix with the Transform object's internal matrix to produce the new coordinate transformation.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.applyTransform( transform )\n```\n\n### Arguments\n\n[`Transform`](transform \"Transform\")` transform`  \nThe Transform object to apply to the current graphics coordinate transform.\n\n### Returns\n\nNothing.\n\n  \n\n## Examples\n\n``` lua\nlocal transform = love.math.newTransform()\ntransform:translate(200, 0)\n \nfunction love.draw()\n    love.graphics.translate(100, 100)\n    love.graphics.rectangle(\"fill\", 0, 0, 50, 50)\n \n    love.graphics.applyTransform(transform)\n    love.graphics.rectangle(\"fill\", 0, 0, 50, 50)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.math.newTransform](love.math.newtransform \"love.math.newTransform\")\n- [love.graphics.replaceTransform](love.graphics.replacetransform \"love.graphics.replaceTransform\")\n- [love.graphics.push](love.graphics.push \"love.graphics.push\")\n- [love.graphics.pop](love.graphics.pop \"love.graphics.pop\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.applyTransform](https://love2d.org/wiki/love.graphics.applyTransform)"
- name: love.graphics.arc
  id: love.graphics.arc
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.graphics.arc\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nDraws a filled or unfilled arc at position `(x, y)`. The arc is drawn from `angle1` to `angle2` in [radians](https://en.wikipedia.org/wiki/Radian). The `segments` parameter determines how many segments are used to draw the arc. The more segments, the smoother the edge.\n\n## Function\n\nDraws an arc using the \"pie\" [ArcType](arctype \"ArcType\").\n\n### Synopsis\n\n``` lua\nlove.graphics.arc( drawmode, x, y, radius, angle1, angle2, segments )\n```\n\n### Arguments\n\n[`DrawMode`](drawmode \"DrawMode\")` drawmode`  \nHow to draw the arc.\n\n[`number`](number \"number\")` x`  \nThe position of the center along x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the center along y-axis.\n\n[`number`](number \"number\")` radius`  \nRadius of the arc.\n\n[`number`](number \"number\")` angle1`  \nThe angle at which the arc begins.\n\n[`number`](number \"number\")` angle2`  \nThe angle at which the arc terminates.\n\n[`number`](number \"number\")` segments (10)`  \nThe number of segments used for drawing the arc.\n\n### Returns\n\nNothing.\n\n  \n\n## Function\n\n**Available since LÖVE [0.10.1](https://love2d.org/wiki/0.10.1 \"0.10.1\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.arc( drawmode, arctype, x, y, radius, angle1, angle2, segments )\n```\n\n### Arguments\n\n[`DrawMode`](drawmode \"DrawMode\")` drawmode`  \nHow to draw the arc.\n\n[`ArcType`](arctype \"ArcType\")` arctype`  \nThe type of arc to draw.\n\n[`number`](number \"number\")` x`  \nThe position of the center along x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the center along y-axis.\n\n[`number`](number \"number\")` radius`  \nRadius of the arc.\n\n[`number`](number \"number\")` angle1`  \nThe angle at which the arc begins.\n\n[`number`](number \"number\")` angle2`  \nThe angle at which the arc terminates.\n\n[`number`](number \"number\")` segments (10)`  \nThe number of segments used for drawing the arc.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Drawing half a circle\n\n``` lua\nfunction love.draw( )\n  love.graphics.arc( \"fill\", 400, 300, 100, 0, math.pi )\nend\n```\n\n### Drawing Pacman\n\n``` lua\npacwidth = math.pi / 6 -- size of his mouth\nfunction love.draw( )\n  love.graphics.setColor( 1, 1, 0 ) -- pacman needs to be yellow\n  love.graphics.arc( \"fill\", 400, 300, 100, pacwidth, (math.pi * 2) - pacwidth )\nend\n```\n\n## Notes\n\nThe arc is drawn counter clockwise if the starting angle is numerically bigger than the final angle. The arc is drawn clockwise if the final angle is numerically bigger than the starting angle.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.arc](https://love2d.org/wiki/love.graphics.arc)"
- name: love.graphics.captureScreenshot
  id: love.graphics.capturescreenshot
  summary: Available since LÖVE 11.0 This function replaces love.graphics.newScreenshot
  description: "# love.graphics.captureScreenshot\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function replaces [love.graphics.newScreenshot](love.graphics.newscreenshot \"love.graphics.newScreenshot\").\n\nCreates a screenshot once the current frame is done (after [love.draw](love.draw \"love.draw\") has finished).\n\nSince this function enqueues a screenshot capture rather than executing it immediately, it can be called from an input callback or [love.update](love.update \"love.update\") and it will still capture all of what's drawn to the screen in that frame.\n\nThis function creates a new [ImageData](imagedata \"ImageData\") object and can cause love to slow down significantly if it's called every frame.\n\n## Function\n\nCapture a screenshot and save it to a file at the end of the current frame.\n\n### Synopsis\n\n``` lua\nlove.graphics.captureScreenshot( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filename to save the screenshot to. The encoded image type is determined based on the extension of the filename, and must be one of the [ImageFormats](imageencodeformat \"ImageFormat\").\n\n### Returns\n\nNothing.\n\n## Function\n\nCapture a screenshot and call a callback with the generated [ImageData](imagedata \"ImageData\") at the end of the current frame.\n\n### Synopsis\n\n``` lua\nlove.graphics.captureScreenshot( callback )\n```\n\n### Arguments\n\n[`function`](function \"function\")` callback`  \nFunction which gets called once the screenshot has been captured. An [ImageData](imagedata \"ImageData\") is passed into the function as its only argument.\n\n### Returns\n\nNothing.\n\n## Function\n\nCapture a screenshot and push the generated [ImageData](imagedata \"ImageData\") to a [Channel](channel \"Channel\") at the end of the current frame.\n\n### Synopsis\n\n``` lua\nlove.graphics.captureScreenshot( channel )\n```\n\n### Arguments\n\n[`Channel`](channel \"Channel\")` channel`  \nThe Channel to [push](channel-push \"Channel:push\") the generated [ImageData](imagedata \"ImageData\") to.\n\n### Returns\n\nNothing.\n\n## Examples\n\nCreate a new screenshot and write it to the save directory.\n\n``` lua\nfunction love.load()\n    love.filesystem.setIdentity(\"screenshot_example\")\nend\n \nfunction love.keypressed(key)\n    if key == \"c\" then\n        love.graphics.captureScreenshot(os.time() .. \".png\")\n    end\nend\n \nfunction love.draw()\n    love.graphics.circle(\"fill\", 400, 300, 200)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [ImageData](imagedata \"ImageData\")\n- [ImageData:encode](imagedata-encode \"ImageData:encode\")\n- [Channel](channel \"Channel\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.captureScreenshot](https://love2d.org/wiki/love.graphics.captureScreenshot)"
- name: love.graphics.checkMode
  id: love.graphics.checkmode
  summary: Removed in LÖVE 0.9.0 This function is not supported in that and later versions
  description: "# love.graphics.checkMode\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in that and later versions.\n\n  \nChecks if a display mode is supported.\n\n## Function\n\n### Synopsis\n\n``` lua\nsupported = love.graphics.checkMode( width, height, fullscreen )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nThe display width.\n\n[`number`](number \"number\")` height`  \nThe display height.\n\n[`boolean`](boolean \"boolean\")` fullscreen (false)`  \nTrue to check for fullscreen, false for windowed.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` supported`  \nTrue if supported, false if not.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.checkMode](https://love2d.org/wiki/love.graphics.checkMode)"
- name: love.graphics.circle
  id: love.graphics.circle
  summary: Draws a circle
  description: "# love.graphics.circle\n\nDraws a circle.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.circle( mode, x, y, radius )\n```\n\n### Arguments\n\n[`DrawMode`](drawmode \"DrawMode\")` mode`  \nHow to draw the circle.\n\n[`number`](number \"number\")` x`  \nThe position of the center along x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the center along y-axis.\n\n[`number`](number \"number\")` radius`  \nThe radius of the circle.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.circle( mode, x, y, radius, segments )\n```\n\n### Arguments\n\n[`DrawMode`](drawmode \"DrawMode\")` mode`  \nHow to draw the circle.\n\n[`number`](number \"number\")` x`  \nThe position of the center along x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the center along y-axis.\n\n[`number`](number \"number\")` radius`  \nThe radius of the circle.\n\n[`number`](number \"number\")` segments`  \nThe number of segments used for drawing the circle. Note: The default variable for the segments parameter varies between different versions of LÖVE.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### The effect of the segment argument\n\n``` lua\nfunction love.draw()\n    love.graphics.setColor(1, 1, 1)\n    love.graphics.circle(\"fill\", 300, 300, 50, 100) -- Draw white circle with 100 segments.\n    love.graphics.setColor(1, 0, 0)\n    love.graphics.circle(\"fill\", 300, 300, 50, 5)   -- Draw red circle with five segments.\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.circle](https://love2d.org/wiki/love.graphics.circle)"
- name: love.graphics.clear
  id: love.graphics.clear
  summary: Clears the screen or active Canvas to the specified color
  description: "# love.graphics.clear\n\nClears the screen or active [Canvas](canvas \"Canvas\") to the specified color.\n\nThis function is called automatically before [love.draw](love.draw \"love.draw\") in the default [love.run](love.run \"love.run\") function. See the example in [love.run](love.run \"love.run\") for a typical use of this function.\n\nNote that the [scissor area](love.graphics.setscissor \"love.graphics.setScissor\") bounds the cleared region.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\nIn versions prior to [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\"), this function clears the screen to the currently set [background color](love.graphics.setbackgroundcolor \"love.graphics.setBackgroundColor\") instead.\n\n## Function\n\nClears the screen to the background color in 0.9.2 and earlier, or to transparent black (0, 0, 0, 0) in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") and newer.\n\n### Synopsis\n\n``` lua\nlove.graphics.clear( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\nClears the screen or active [Canvas](canvas \"Canvas\") to the specified color.\n\n### Synopsis\n\n``` lua\nlove.graphics.clear( r, g, b, a, clearstencil, cleardepth )\n```\n\n### Arguments\n\n[`number`](number \"number\")` r`  \nThe red channel of the color to clear the screen to.\n\n[`number`](number \"number\")` g`  \nThe green channel of the color to clear the screen to.\n\n[`number`](number \"number\")` b`  \nThe blue channel of the color to clear the screen to.\n\n[`number`](number \"number\")` a (1)`  \nThe alpha channel of the color to clear the screen to.\n\n[`boolean`](boolean \"boolean\")` clearstencil (true)` Available since 11.0  \nWhether to clear the active stencil buffer, [if present](love.graphics.setcanvas \"love.graphics.setCanvas\"). It can also be an integer between 0 and 255 to clear the stencil buffer to a specific value.\n\n[`boolean`](boolean \"boolean\")` cleardepth (true)` Available since 11.0  \nWhether to clear the active depth buffer, [if present](love.graphics.setcanvas \"love.graphics.setCanvas\"). It can also be a number between 0 and 1 to clear the depth buffer to a specific value.\n\n  \n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\nClears multiple active [Canvases](canvas \"Canvas\") to different colors, if multiple Canvases are active at once via [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\").\n\n### Synopsis\n\n``` lua\nlove.graphics.clear( color, ..., clearstencil, cleardepth )\n```\n\n### Arguments\n\n[`table`](table \"table\")` color`  \nA table in the form of `{r, g, b, a}` containing the color to clear the first active Canvas to.\n\n[`table`](table \"table\")` ...`  \nAdditional tables for each active Canvas.\n\n&nbsp;\n\n[`boolean`](boolean \"boolean\")` clearstencil (true)` Available since 11.0  \nWhether to clear the active stencil buffer, [if present](love.graphics.setcanvas \"love.graphics.setCanvas\"). It can also be an integer between 0 and 255 to clear the stencil buffer to a specific value.\n\n[`boolean`](boolean \"boolean\")` cleardepth (true)` Available since 11.0  \nWhether to clear the active depth buffer, [if present](love.graphics.setcanvas \"love.graphics.setCanvas\"). It can also be a number between 0 and 1 to clear the depth buffer to a specific value.\n\n### Returns\n\nNothing.\n\n### Notes\n\nA color must be specified for each active Canvas, when this function variant is used.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nClears the stencil or depth buffers without having to clear the color canvas as well.\n\n### Synopsis\n\n``` lua\nlove.graphics.clear( clearcolor, clearstencil, cleardepth )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` clearcolor`  \nWhether to clear the active color canvas to transparent black (`0, 0, 0, 0`). Typically this should be set to false with this variant of the function.\n\n[`boolean`](boolean \"boolean\")` clearstencil`  \nWhether to clear the active stencil buffer, [if present](love.graphics.setcanvas \"love.graphics.setCanvas\"). It can also be an integer between 0 and 255 to clear the stencil buffer to a specific value.\n\n[`boolean`](boolean \"boolean\")` cleardepth`  \nWhether to clear the active depth buffer, [if present](love.graphics.setcanvas \"love.graphics.setCanvas\"). It can also be a number between 0 and 1 to clear the depth buffer to a specific value.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Clear canvas before drawing\n\nIf the c-key is pressed the canvas will be cleared before drawing a new line on the screen.\n\n``` lua\nlocal canvas = love.graphics.newCanvas()\nlocal clear\n \nfunction love.update()\n    -- Use an anonymous function to draw lines on our canvas.\n    canvas:renderTo( function()\n        if clear then\n            love.graphics.clear() -- Clear the canvas before drawing lines.\n        end\n \n        -- Draw lines from the screen's origin to a random x and y coordinate.\n        local rx, ry = love.math.random( 0, love.graphics.getWidth() ), love.math.random( 0, love.graphics.getHeight() )\n        love.graphics.setColor( love.math.random( ), 0, 0 )\n        love.graphics.line( 0, 0, rx, ry )\n        love.graphics.setColor( 1, 1, 1 )\n    end)\nend\n \nfunction love.draw()\n    love.graphics.draw( canvas )\nend\n \nfunction love.keypressed( key )\n    if key == \"c\" then\n        clear = not clear\n    end\nend\n```\n\n## See Also\n\n- [love.graphics.present](love.graphics.present \"love.graphics.present\")\n- [love.graphics.setBackgroundColor](love.graphics.setbackgroundcolor \"love.graphics.setBackgroundColor\")\n- [love.graphics.setScissor](love.graphics.setscissor \"love.graphics.setScissor\")\n- [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\")\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.clear](https://love2d.org/wiki/love.graphics.clear)"
- name: love.graphics.discard
  id: love.graphics.discard
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.graphics.discard\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nDiscards (trashes) the contents of the screen or active [Canvas](canvas \"Canvas\"). This is a performance optimization function with niche use cases.\n\nIf the active Canvas has just been changed and the \"replace\" [BlendMode](blendmode \"BlendMode\") is about to be used to draw something which covers the entire screen, calling **love.graphics.discard** rather than calling [love.graphics.clear](love.graphics.clear \"love.graphics.clear\") or doing nothing may improve performance on mobile devices.\n\nOn some desktop systems this function may do nothing.\n\nThis function effectively replaces the contents of the screen or active Canvas with garbage. Most [BlendModes](blendmode \"BlendMode\"), including the default \"alpha\" blend mode, blend what's drawn with the contents of the screen - which would cause unexpected glitches if this function is used inappropriately.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.discard( discardcolor, discardstencil )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` discardcolor (true)`  \nWhether to discard the texture(s) of the active Canvas(es) (the contents of the screen if no Canvas is active.)\n\n[`boolean`](boolean \"boolean\")` discardstencil (true)`  \nWhether to discard the contents of the [stencil buffer](love.graphics.stencil \"love.graphics.stencil\") of the screen / active Canvas.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.discard( discardcolors, discardstencil )\n```\n\n### Arguments\n\n[`table`](table \"table\")` discardcolors`  \nAn array containing boolean values indicating whether to discard the texture of each active Canvas, when multiple simultaneous Canvases are active.\n\n[`boolean`](boolean \"boolean\")` discardstencil (true)`  \nWhether to discard the contents of the [stencil buffer](love.graphics.stencil \"love.graphics.stencil\") of the screen / active Canvas.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.clear](love.graphics.clear \"love.graphics.clear\")\n- [Canvas](canvas \"Canvas\")\n- [love.graphics.setBlendMode](love.graphics.setblendmode \"love.graphics.setBlendMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.discard](https://love2d.org/wiki/love.graphics.discard)"
- name: love.graphics.draw
  id: love.graphics.draw
  summary: Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing
  description: "# love.graphics.draw\n\nDraws a [Drawable](drawable \"Drawable\") object (an [Image](image \"Image\"), [Canvas](canvas \"Canvas\"), [SpriteBatch](spritebatch \"SpriteBatch\"), [ParticleSystem](particlesystem \"ParticleSystem\"), [Mesh](mesh \"Mesh\"), [Text](text \"Text\") object, or [Video](video \"Video\")) on the screen with optional rotation, scaling and shearing.\n\nObjects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of [Image](image \"Image\") and [Canvas](canvas \"Canvas\"). All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system.\n\nIt's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline.\n\nNote that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation.\n\nThe right and bottom edges of the object are shifted at an angle defined by the shearing factors.\n\nWhen using the default shader anything drawn with this function will be tinted according to the currently selected color. Set it to pure white to preserve the object's original colors.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.draw( drawable, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`Drawable`](drawable \"Drawable\")` drawable`  \nA drawable object.\n\n[`number`](number \"number\")` x (0)`  \nThe position to draw the object (x-axis).\n\n[`number`](number \"number\")` y (0)`  \nThe position to draw the object (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)` Available since 0.8.0  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)` Available since 0.8.0  \nShearing factor (y-axis).\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has replaced [love.graphics.drawq](love.graphics.drawq \"love.graphics.drawq\").\n\n### Synopsis\n\n``` lua\nlove.graphics.draw( texture, quad, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`Texture`](texture \"Texture\")` texture`  \nA [Texture](texture \"Texture\") ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) to texture the [Quad](quad \"Quad\") with.\n\n[`Quad`](quad \"Quad\")` quad`  \nThe Quad to draw on screen.\n\n[`number`](number \"number\")` x`  \nThe position to draw the object (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position to draw the object (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShearing factor (y-axis).\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.draw( drawable, transform )\n```\n\n### Arguments\n\n[`Drawable`](drawable \"Drawable\")` drawable`  \nA drawable object.\n\n[`Transform`](transform \"Transform\")` transform`  \nTransformation object.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.draw( texture, quad, transform )\n```\n\n### Arguments\n\n[`Texture`](texture \"Texture\")` texture`  \nA [Texture](texture \"Texture\") ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) to texture the [Quad](quad \"Quad\") with.\n\n[`Quad`](quad \"Quad\")` quad`  \nThe Quad to draw on screen.\n\n[`Transform`](transform \"Transform\")` transform`  \nTransformation object.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Draw an image (the [Hamster Ball](https://love2d.org/wiki/File:Resource-HamsterBall.png \"File:Resource-HamsterBall.png\")) at 100 by 100 pixels\n\n``` lua\nfunction love.load()\n   hamster = love.graphics.newImage(\"hamster.png\")\nend\nfunction love.draw()\n   love.graphics.draw(hamster, 100, 100)\nend\n```\n\n### Draw an image (the [Hamster Ball](https://love2d.org/wiki/File:Resource-HamsterBall.png \"File:Resource-HamsterBall.png\")) from the center at 100 by 100 pixels, rotated by 90 degrees\n\n``` lua\nfunction love.load()\n   hamster = love.graphics.newImage(\"hamster.png\")\n   width = hamster:getWidth()\n   height = hamster:getHeight()\nend\nfunction love.draw()\n   love.graphics.draw(hamster, 100, 100, math.rad(90), 1, 1, width / 2, height / 2)\nend\n```\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis functionality is not supported in earlier versions.\n\n### Draw the top half of an image (the [Hamster Ball](https://love2d.org/wiki/File:Resource-HamsterBall.png \"File:Resource-HamsterBall.png\")) at 100 by 100 pixels.\n\n``` lua\nfunction love.load()\n   image = love.graphics.newImage(\"hamster.png\")\n   quad = love.graphics.newQuad(0, 0, 128, 64, image:getWidth(), image:getHeight())\nend\n \nfunction love.draw()\n    love.graphics.draw(image, quad, 100, 100)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.draw](https://love2d.org/wiki/love.graphics.draw)"
- name: love.graphics.drawInstanced
  id: love.graphics.drawinstanced
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.drawInstanced\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nDraws many instances of a [Mesh](mesh \"Mesh\") with a single draw call, using hardware geometry instancing.\n\nEach instance can have unique properties (positions, colors, etc.) but will not by default unless a custom [Shader](shader \"Shader\") along with either [per-instance vertex attributes](mesh-attachattribute \"Mesh:attachAttribute\") or the `love_InstanceID` GLSL 3 vertex [shader variable](shader_variables \"Shader Variables\") is used, otherwise they will all render at the same position on top of each other.\n\nInstancing is not supported by some older GPUs that are only capable of using OpenGL ES 2 or OpenGL 2. Use [love.graphics.getSupported](love.graphics.getsupported \"love.graphics.getSupported\") to check.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.drawInstanced( mesh, instancecount, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`Mesh`](mesh \"Mesh\")` mesh`  \nThe mesh to render.\n\n[`number`](number \"number\")` instancecount`  \nThe number of instances to render.\n\n[`number`](number \"number\")` x (0)`  \nThe position to draw the instances (x-axis).\n\n[`number`](number \"number\")` y (0)`  \nThe position to draw the instances (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShearing factor (y-axis).\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.drawInstanced( mesh, instancecount, transform )\n```\n\n### Arguments\n\n[`Mesh`](mesh \"Mesh\")` mesh`  \nThe mesh to render.\n\n[`number`](number \"number\")` instancecount`  \nThe number of instances to render.\n\n[`Transform`](transform \"Transform\")` transform`  \nA transform object.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Use vertex attribute instancing to draw many triangles in a single draw call\n\n``` lua\n-- A simple small triangle with the default position, texture coordinate, and color vertex attributes.\nlocal vertices = {\n    {0, 0,  0,0, 1.0,0.2,0.2,1.0},\n    {20,0,  0,0, 0.2,1.0,0.2,1.0},\n    {20,20, 0,0, 0.2,0.2,1.0,1.0},\n}\n \nlocal mesh = love.graphics.newMesh(vertices, \"triangles\", \"static\")\n \n-- Unique positions for each instance that will be rendered.\nlocal instancepositions = {}\nfor y=0, love.graphics.getHeight()-1, 30 do\n    for x = 0, love.graphics.getWidth()-1, 30 do\n        local pos = {x, y}\n        table.insert(instancepositions, pos)\n    end\nend\n \n-- Create a mesh containing the per-instance position data.\n-- It won't be drawn directly, but it will be referenced by the triangle's mesh.\nlocal instancemesh = love.graphics.newMesh({{\"InstancePosition\", \"float\", 2}}, instancepositions, nil, \"static\")\n \n-- When the triangle's mesh is rendered, the vertex shader will pull in a different\n-- value of the InstancePosition attribute for each instance, instead of for each vertex.\nmesh:attachAttribute(\"InstancePosition\", instancemesh, \"perinstance\")\n \n-- Vertex shader which uses the InstancePosition vertex attribute.\nlocal shader = love.graphics.newShader[[\nattribute vec2 InstancePosition;\n \nvec4 position(mat4 transform_projection, vec4 vertex_position)\n{\n    vertex_position.xy += InstancePosition;\n    return transform_projection * vertex_position;\n}\n]]\n \nfunction love.draw()\n    love.graphics.setShader(shader)\n \n    -- Draw the mesh many times in one draw call, using instancing.\n    local instancecount = #instancepositions\n    love.graphics.drawInstanced(mesh, instancecount, 0, 0)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Mesh](mesh \"Mesh\")\n- [Mesh:attachAttribute](mesh-attachattribute \"Mesh:attachAttribute\")\n- [love.graphics.newShader](love.graphics.newshader \"love.graphics.newShader\")\n- [GraphicsFeature](graphicsfeature \"GraphicsFeature\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.drawInstanced](https://love2d.org/wiki/love.graphics.drawInstanced)"
- name: love.graphics.drawLayer
  id: love.graphics.drawlayer
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.drawLayer\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nDraws a layer of an [Array Texture](love.graphics.newarrayimage \"love.graphics.newArrayImage\").\n\n## Function\n\nDraws a layer of an Array Texture.\n\n### Synopsis\n\n``` lua\nlove.graphics.drawLayer( texture, layerindex, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`Texture`](texture \"Texture\")` texture`  \nThe Array Texture to draw.\n\n[`number`](number \"number\")` layerindex`  \nThe index of the layer to use when drawing.\n\n[`number`](number \"number\")` x (0)`  \nThe position to draw the texture (x-axis).\n\n[`number`](number \"number\")` y (0)`  \nThe position to draw the texture (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShearing factor (y-axis).\n\n### Returns\n\nNothing.\n\n## Function\n\nDraws a layer of an Array Texture using the specified [Quad](quad \"Quad\").\n\n### Synopsis\n\n``` lua\nlove.graphics.drawLayer( texture, layerindex, quad, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`Texture`](texture \"Texture\")` texture`  \nThe Array Texture to draw.\n\n[`number`](number \"number\")` layerindex`  \nThe index of the layer to use when drawing.\n\n[`Quad`](quad \"Quad\")` quad`  \nThe subsection of the texture's layer to use when drawing.\n\n[`number`](number \"number\")` x (0)`  \nThe position to draw the texture (x-axis).\n\n[`number`](number \"number\")` y (0)`  \nThe position to draw the texture (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShearing factor (y-axis).\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe specified layer index overrides any layer index set on the Quad via [Quad:setLayer](https://love2d.org/w/index.php?title=Quad:setLayer&action=edit&redlink=1 \"Quad:setLayer (page does not exist)\").\n\n## Function\n\nDraws a layer of an Array Texture using the specified [Transform](transform \"Transform\").\n\n### Synopsis\n\n``` lua\nlove.graphics.drawLayer( texture, layerindex, transform )\n```\n\n### Arguments\n\n[`Texture`](texture \"Texture\")` texture`  \nThe Array Texture to draw.\n\n[`number`](number \"number\")` layerindex`  \nThe index of the layer to use when drawing.\n\n[`Transform`](transform \"Transform\")` transform`  \nA transform object.\n\n### Returns\n\nNothing.\n\n## Function\n\nDraws a layer of an Array Texture using the specified [Quad](quad \"Quad\") and [Transform](transform \"Transform\").\n\n### Synopsis\n\n``` lua\nlove.graphics.drawLayer( texture, layerindex, quad, transform )\n```\n\n### Arguments\n\n[`Texture`](texture \"Texture\")` texture`  \nThe Array Texture to draw.\n\n[`number`](number \"number\")` layerindex`  \nThe index of the layer to use when drawing.\n\n[`Quad`](quad \"Quad\")` quad`  \nThe subsection of the texture's layer to use when drawing.\n\n[`Transform`](transform \"Transform\")` transform`  \nA transform object.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe specified layer index overrides any layer index set on the Quad via [Quad:setLayer](https://love2d.org/w/index.php?title=Quad:setLayer&action=edit&redlink=1 \"Quad:setLayer (page does not exist)\").\n\n## Notes\n\nIn order to use an Array Texture or other non-2D texture types as the main texture in a custom [Shader](shader \"Shader\"), the [void effect()](love.graphics.newshader \"love.graphics.newShader\") variant must be used in the pixel shader, and MainTex must be declared as an ArrayImage or sampler2DArray like so: `uniform ArrayImage MainTex;`.\n\n## Examples\n\n### Draw multiple layers of an Array Image\n\n``` lua\nfunction love.load()\n    local sprites = {\"sprite1.png\", \"sprite2.png\"}\n    image = love.graphics.newArrayImage(sprites)\nend\n \nfunction love.draw()\n    love.graphics.drawLayer(image, 1, 50, 50)\n    love.graphics.drawLayer(image, 2, 250, 50)\nend\n```\n\n### Use a custom shader with love.graphics.drawLayer\n\n``` lua\nshader = love.graphics.newShader[[\nuniform ArrayImage MainTex;\n \nvoid effect() {\n    // Texel uses a third component of the texture coordinate for the layer index, when an Array Texture is passed in.\n    // love sets up the texture coordinates to contain the layer index specified in love.graphics.drawLayer, when\n    // rendering the Array Texture.\n    love_PixelColor = Texel(MainTex, VaryingTexCoord.xyz) * VaryingColor;\n}\n]]\n \nfunction love.load()\n    local sprites = {\"sprite1.png\", \"sprite2.png\"}\n    image = love.graphics.newArrayImage(sprites)\nend\n \nfunction love.draw()\n    love.graphics.setShader(shader)\n    love.graphics.drawLayer(image, 1, 50, 50)\n    love.graphics.drawLayer(image, 2, 250, 50)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.newArrayImage](love.graphics.newarrayimage \"love.graphics.newArrayImage\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [love.graphics.newShader](love.graphics.newshader \"love.graphics.newShader\")\n- [TextureType](texturetype \"TextureType\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.drawLayer](https://love2d.org/wiki/love.graphics.drawLayer)"
- name: love.graphics.drawq
  id: love.graphics.drawq
  summary: Removed in LÖVE 0.9.0 It has been merged into love.graphics.draw
  description: "# love.graphics.drawq\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been merged into [love.graphics.draw](love.graphics.draw \"love.graphics.draw\").\n\nDraw a Quad with the specified Image on screen.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.drawq( image, quad, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`Image`](image \"Image\")` image`  \nAn image to texture the quad with.\n\n[`Quad`](quad \"Quad\")` quad`  \nThe quad to draw on screen.\n\n[`number`](number \"number\")` x`  \nThe position to draw the object (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position to draw the object (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)` Available since 0.8.0  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)` Available since 0.8.0  \nShearing factor (y-axis).\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.drawq( canvas, quad, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`Canvas`](canvas \"Canvas\")` canvas`  \nA canvas to texture the quad with.\n\n[`Quad`](quad \"Quad\")` quad`  \nThe quad to draw on screen.\n\n[`number`](number \"number\")` x`  \nThe position to draw the object (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position to draw the object (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n&nbsp;\n\n[`number`](number \"number\")` kx (0)` Available since 0.8.0  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)` Available since 0.8.0  \nShearing factor (y-axis).\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Draw the top half of an image (the [Hamster Ball](https://love2d.org/wiki/File:Resource-HamsterBall.png \"File:Resource-HamsterBall.png\")) at 100 by 100 pixels.\n\n``` lua\nimage = love.graphics.newImage(\"hamster.png\")\nquad = love.graphics.newQuad(0, 0, 128, 64, image:getWidth(), image:getHeight())\n \nfunction love.draw()\n    love.graphics.drawq(image, quad, 100, 100)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.drawq](https://love2d.org/wiki/love.graphics.drawq)"
- name: love.graphics.ellipse
  id: love.graphics.ellipse
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.graphics.ellipse\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nDraws an ellipse.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.ellipse( mode, x, y, radiusx, radiusy )\n```\n\n### Arguments\n\n[`DrawMode`](drawmode \"DrawMode\")` mode`  \nHow to draw the ellipse.\n\n[`number`](number \"number\")` x`  \nThe position of the center along x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the center along y-axis.\n\n[`number`](number \"number\")` radiusx`  \nThe radius of the ellipse along the x-axis (half the ellipse's width).\n\n[`number`](number \"number\")` radiusy`  \nThe radius of the ellipse along the y-axis (half the ellipse's height).\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.ellipse( mode, x, y, radiusx, radiusy, segments )\n```\n\n### Arguments\n\n[`DrawMode`](drawmode \"DrawMode\")` mode`  \nHow to draw the ellipse.\n\n[`number`](number \"number\")` x`  \nThe position of the center along x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the center along y-axis.\n\n[`number`](number \"number\")` radiusx`  \nThe radius of the ellipse along the x-axis (half the ellipse's width).\n\n[`number`](number \"number\")` radiusy`  \nThe radius of the ellipse along the y-axis (half the ellipse's height).\n\n[`number`](number \"number\")` segments`  \nThe number of segments used for drawing the ellipse.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### The effect of the segment argument\n\n``` lua\nfunction love.draw()\n    love.graphics.setColor(255, 255, 255)\n    love.graphics.ellipse(\"fill\", 300, 300, 75, 50, 100) -- Draw white ellipse with 100 segments.\n    love.graphics.setColor(255, 0, 0)\n    love.graphics.ellipse(\"fill\", 300, 300, 75, 50, 5)   -- Draw red ellipse with five segments.\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.ellipse](https://love2d.org/wiki/love.graphics.ellipse)"
- name: love.graphics.flushBatch
  id: love.graphics.flushbatch
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.flushBatch\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nImmediately renders any pending automatically batched draws.\n\nLÖVE will call this function internally as needed when most state is changed, so it is not necessary to manually call it.\n\nThe current batch will be automatically flushed by [love.graphics](love.graphics \"love.graphics\") state changes (except for the transform stack and the current [color](love.graphics.setcolor \"love.graphics.setColor\")), as well as [Shader:send](shader-send \"Shader:send\") and methods on [Textures](texture \"Texture\") which change their state. Using a different Image in consecutive [love.graphics.draw](love.graphics.draw \"love.graphics.draw\") calls will also flush the current batch.\n\n[SpriteBatches](spritebatch \"SpriteBatch\"), [ParticleSystems](particlesystem \"ParticleSystem\"), [Meshes](mesh \"Mesh\"), and [Text](text \"Text\") objects do their own batching and do not affect automatic batching of other draws, aside from flushing the current batch when they're drawn.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.flushBatch( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.flushBatch](https://love2d.org/wiki/love.graphics.flushBatch)"
- name: love.graphics.getBackgroundColor
  id: love.graphics.getbackgroundcolor
  summary: Gets the current background color
  description: "# love.graphics.getBackgroundColor\n\nGets the current background color.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nr, g, b, a = love.graphics.getBackgroundColor( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` r`  \nThe red component (0-1).\n\n[`number`](number \"number\")` g`  \nThe green component (0-1).\n\n[`number`](number \"number\")` b`  \nThe blue component (0-1).\n\n[`number`](number \"number\")` a`  \nThe alpha component (0-1).\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setBackgroundColor](love.graphics.setbackgroundcolor \"love.graphics.setBackgroundColor\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getBackgroundColor](https://love2d.org/wiki/love.graphics.getBackgroundColor)"
- name: love.graphics.getBlendMode
  id: love.graphics.getblendmode
  summary: Available since LÖVE 0.2.0 This function is not supported in earlier versions
  description: "# love.graphics.getBlendMode\n\n**Available since LÖVE [0.2.0](https://love2d.org/wiki/0.2.0 \"0.2.0\")**  \nThis function is not supported in earlier versions.\n\nGets the [blending mode](blendmode \"BlendMode\").\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nmode, alphamode = love.graphics.getBlendMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`BlendMode`](blendmode \"BlendMode\")` mode`  \nThe current blend mode.\n\n[`BlendAlphaMode`](blendalphamode \"BlendAlphaMode\")` alphamode`  \nThe current blend alpha mode – it determines how the alpha of drawn objects affects blending.\n\n## Function\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nmode = love.graphics.getBlendMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`BlendMode`](blendmode \"BlendMode\")` mode`  \nThe current blend mode.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setBlendMode](love.graphics.setblendmode \"love.graphics.setBlendMode\")\n- [BlendMode](blendmode \"BlendMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getBlendMode](https://love2d.org/wiki/love.graphics.getBlendMode)"
- name: love.graphics.getCanvas
  id: love.graphics.getcanvas
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.graphics.getCanvas\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nGets the current target [Canvas](canvas \"Canvas\").\n\n## Function\n\n### Synopsis\n\n``` lua\ncanvas = love.graphics.getCanvas( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Canvas`](canvas \"Canvas\")` canvas`  \nThe Canvas set by [setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\"). Returns nil if drawing to the real screen.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Canvas](canvas \"Canvas\")\n- [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getCanvas](https://love2d.org/wiki/love.graphics.getCanvas)"
- name: love.graphics.getCanvasFormats
  id: love.graphics.getcanvasformats
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.graphics.getCanvasFormats\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets the available [Canvas formats](canvasformat \"CanvasFormat\"), and whether each is supported.\n\n## Function\n\n### Synopsis\n\n``` lua\nformats = love.graphics.getCanvasFormats( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` formats`  \nA table containing [CanvasFormats](canvasformat \"CanvasFormat\") as keys, and a boolean indicating whether the format is supported as values. Not all systems support all formats.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nformats = love.graphics.getCanvasFormats( readable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` readable`  \nIf true, the returned formats will only be indicated as supported if [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\") will work with the [readable](texture-isreadable \"Texture:isReadable\") flag set to true for that format, and vice versa if the parameter is false.\n\n### Returns\n\n[`table`](table \"table\")` formats`  \nA table containing [CanvasFormats](canvasformat \"CanvasFormat\") as keys, and a boolean indicating whether the format is supported as values (taking into account the readable parameter). Not all systems support all formats.\n\n## Examples\n\n### Create a canvas with the format 'rgba16f' if it is supported\n\n``` lua\nlocal formats = love.graphics.getCanvasFormats()\nif formats.rgba16f then\n    canvas = love.graphics.newCanvas(800, 600, \"rgba16f\")\nelse\n    -- The 'rgba16f' format isn't supported. We could have some fallback code, or trigger a message telling the user their system is unsupported.\nend\n```\n\n### Display a list of the canvas formats on the screen\n\n``` lua\ncanvasformats = love.graphics.getCanvasFormats()\n \nfunction love.draw()\n    local y = 0\n    for formatname, formatsupported in pairs(canvasformats) do\n        local str = string.format(\"Supports format '%s': %s\", formatname, tostring(formatsupported))\n        love.graphics.print(str, 10, y)\n        y = y + 20\n    end\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [CanvasFormat](canvasformat \"CanvasFormat\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [Canvas](canvas \"Canvas\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getCanvasFormats](https://love2d.org/wiki/love.graphics.getCanvasFormats)"
- name: love.graphics.getCaption
  id: love.graphics.getcaption
  summary: Removed in LÖVE 0.9.0 Moved to the love.window module as love.window.getTitle
  description: "# love.graphics.getCaption\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nMoved to the [love.window](love.window \"love.window\") module as [love.window.getTitle](love.window.gettitle \"love.window.getTitle\").\n\n  \nGets the window caption.\n\n## Function\n\n### Synopsis\n\n``` lua\ncaption = love.graphics.getCaption( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` caption`  \nThe current window caption.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setCaption](love.graphics.setcaption \"love.graphics.setCaption\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getCaption](https://love2d.org/wiki/love.graphics.getCaption)"
- name: love.graphics.getColor
  id: love.graphics.getcolor
  summary: Gets the current color
  description: "# love.graphics.getColor\n\nGets the current color.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nr, g, b, a = love.graphics.getColor( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` r`  \nThe red component (0-1).\n\n[`number`](number \"number\")` g`  \nThe green component (0-1).\n\n[`number`](number \"number\")` b`  \nThe blue component (0-1).\n\n[`number`](number \"number\")` a`  \nThe alpha component (0-1).\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getColor](https://love2d.org/wiki/love.graphics.getColor)"
- name: love.graphics.getColorMask
  id: love.graphics.getcolormask
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.graphics.getColorMask\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the active color components used when drawing. Normally all 4 components are active unless [love.graphics.setColorMask](love.graphics.setcolormask \"love.graphics.setColorMask\") has been used.\n\nThe color mask determines whether individual components of the colors of drawn objects will affect the color of the screen. They affect [love.graphics.clear](love.graphics.clear \"love.graphics.clear\") and [Canvas:clear](canvas-clear \"Canvas:clear\") as well.\n\n## Function\n\n### Synopsis\n\n``` lua\nr, g, b, a = love.graphics.getColorMask( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` r`  \nWhether the red color component is active when rendering.\n\n[`boolean`](boolean \"boolean\")` g`  \nWhether the green color component is active when rendering.\n\n[`boolean`](boolean \"boolean\")` b`  \nWhether the blue color component is active when rendering.\n\n[`boolean`](boolean \"boolean\")` a`  \nWhether the alpha color component is active when rendering.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setColorMask](love.graphics.setcolormask \"love.graphics.setColorMask\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getColorMask](https://love2d.org/wiki/love.graphics.getColorMask)"
- name: love.graphics.getColorMode
  id: love.graphics.getcolormode
  summary: Available since LÖVE 0.2.0 and removed in LÖVE 0.9.0 This function is not supported in earlier or later versions
  description: "# love.graphics.getColorMode\n\n**Available since LÖVE [0.2.0](https://love2d.org/wiki/0.2.0 \"0.2.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier or later versions.\n\nGets the color mode (which controls how images are affected by the current color).\n\n## Function\n\n### Synopsis\n\n``` lua\nmode = love.graphics.getColorMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`ColorMode`](colormode \"ColorMode\")` mode`  \nThe current color mode.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setColorMode](love.graphics.setcolormode \"love.graphics.setColorMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getColorMode](https://love2d.org/wiki/love.graphics.getColorMode)"
- name: love.graphics.getCompressedImageFormats
  id: love.graphics.getcompressedimageformats
  summary: Available since LÖVE 0.9.2 and removed in LÖVE 11.0 It has been replaced by love.graphics.getImageFormats
  description: "# love.graphics.getCompressedImageFormats\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been replaced by [love.graphics.getImageFormats](love.graphics.getimageformats \"love.graphics.getImageFormats\").\n\nGets the available [compressed image formats](compressedformat \"CompressedFormat\"), and whether each is supported.\n\n## Function\n\n### Synopsis\n\n``` lua\nformats = love.graphics.getCompressedImageFormats( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` formats`  \nA table containing [CompressedImageFormats](compressedimageformat \"CompressedImageFormat\") as keys, and a boolean indicating whether the format is supported as values. Not all systems support all formats.\n\n## Examples\n\n### Display a list of the compressed image formats on the screen\n\n``` lua\nformats = love.graphics.getCompressedImageFormats()\n \nfunction love.draw()\n    local y = 0\n    for formatname, formatsupported in pairs(formats) do\n        local str = string.format(\"Supports format '%s': %s\", formatname, tostring(formatsupported))\n        love.graphics.print(str, 10, y)\n        y = y + 20\n    end\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [CompressedImageFormat](compressedimageformat \"CompressedImageFormat\")\n- [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\")\n- [love.image.newCompressedData](love.image.newcompresseddata \"love.image.newCompressedData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getCompressedImageFormats](https://love2d.org/wiki/love.graphics.getCompressedImageFormats)"
- name: love.graphics.getDefaultFilter
  id: love.graphics.getdefaultfilter
  summary: Available since LÖVE 0.9.0 It has been renamed from love.graphics.getDefaultImageFilter
  description: "# love.graphics.getDefaultFilter\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [love.graphics.getDefaultImageFilter](love.graphics.getdefaultimagefilter \"love.graphics.getDefaultImageFilter\").\n\nReturns the default scaling filters used with [Images](image \"Image\"), [Canvases](canvas \"Canvas\"), and [Fonts](font \"Font\").\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, mag, anisotropy = love.graphics.getDefaultFilter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`FilterMode`](filtermode \"FilterMode\")` min`  \nFilter mode used when scaling the image down.\n\n[`FilterMode`](filtermode \"FilterMode\")` mag`  \nFilter mode used when scaling the image up.\n\n[`number`](number \"number\")` anisotropy`  \nMaximum amount of Anisotropic Filtering used.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setDefaultFilter](love.graphics.setdefaultfilter \"love.graphics.setDefaultFilter\")\n- [FilterMode](filtermode \"FilterMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getDefaultFilter](https://love2d.org/wiki/love.graphics.getDefaultFilter)"
- name: love.graphics.getDefaultImageFilter
  id: love.graphics.getdefaultimagefilter
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.9.0 It has been renamed to love.graphics.getDefaultFilter
  description: "# love.graphics.getDefaultImageFilter\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [love.graphics.getDefaultFilter](love.graphics.getdefaultfilter \"love.graphics.getDefaultFilter\").\n\nReturns the default scaling filters.\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, mag = love.graphics.getDefaultImageFilter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`FilterMode`](filtermode \"FilterMode\")` min`  \nFilter mode used when scaling the image down.\n\n[`FilterMode`](filtermode \"FilterMode\")` mag`  \nFilter mode used when scaling the image up.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setDefaultImageFilter](love.graphics.setdefaultimagefilter \"love.graphics.setDefaultImageFilter\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getDefaultImageFilter](https://love2d.org/wiki/love.graphics.getDefaultImageFilter)"
- name: love.graphics.getDepthMode
  id: love.graphics.getdepthmode
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.getDepthMode\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the current depth test mode and whether writing to the depth buffer is enabled.\n\nThis is low-level functionality designed for use with custom [vertex shaders](love.graphics.newshader \"love.graphics.newShader\") and [Meshes](mesh \"Mesh\") with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.\n\nDepth testing and depth writes will have no effect unless the depth field is set to true in a table passed to [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\"), or a custom Canvas with a depth [PixelFormat](pixelformat \"PixelFormat\") is set in the depthstencil field in a table passed to [setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\").\n\nWriting to the depth buffer is generally incompatible with rendering alpha-blended sprites / images. By default depth is determined by geometry (vertices) instead of texture alpha values, the depth buffer only stores a single depth value per pixel, and alpha blending **requires** back-to-front rendering for blending to be correct.\n\n## Function\n\n### Synopsis\n\n``` lua\ncomparemode, write = love.graphics.getDepthMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`CompareMode`](comparemode \"CompareMode\")` comparemode`  \nDepth comparison mode used for depth testing.\n\n[`boolean`](boolean \"boolean\")` write`  \nWhether to write update / write values to the depth buffer when rendering.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setDepthMode](love.graphics.setdepthmode \"love.graphics.setDepthMode\")\n- [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getDepthMode](https://love2d.org/wiki/love.graphics.getDepthMode)"
- name: love.graphics.getDimensions
  id: love.graphics.getdimensions
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.graphics.getDimensions\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the width and height in pixels of the window.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth, height = love.graphics.getDimensions( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the window.\n\n[`number`](number \"number\")` height`  \nThe height of the window.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getWidth](love.graphics.getwidth \"love.graphics.getWidth\")\n- [love.graphics.getHeight](love.graphics.getheight \"love.graphics.getHeight\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getDimensions](https://love2d.org/wiki/love.graphics.getDimensions)"
- name: love.graphics.getDPIScale
  id: love.graphics.getdpiscale
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.getDPIScale\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the DPI scale factor of the window.\n\nThe DPI scale factor represents relative pixel density. The pixel density inside the window might be greater (or smaller) than the \"size\" of the window. For example on a retina screen in Mac OS X with the `highdpi` [window flag](love.window.setmode \"love.window.setMode\") enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. `love.graphics.getDPIScale()` would return `2` in that case.\n\nThe [love.window.fromPixels](love.window.frompixels \"love.window.fromPixels\") and [love.window.toPixels](love.window.topixels \"love.window.toPixels\") functions can also be used to convert between units.\n\nThe `highdpi` window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nscale = love.graphics.getDPIScale( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` scale`  \nThe pixel scale factor associated with the window.\n\n## Notes\n\nThe units of [love.graphics.getWidth](love.graphics.getwidth \"love.graphics.getWidth\"), [love.graphics.getHeight](love.graphics.getheight \"love.graphics.getHeight\"), [love.mouse.getPosition](love.mouse.getposition \"love.mouse.getPosition\"), mouse events, [love.touch.getPosition](love.touch.getposition \"love.touch.getPosition\"), and touch events are always in DPI-scaled units rather than pixels. In LÖVE 0.10 and older they were in pixels.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getDimensions](love.graphics.getdimensions \"love.graphics.getDimensions\")\n- [love.graphics.getPixelDimensions](love.graphics.getpixeldimensions \"love.graphics.getPixelDimensions\")\n- [love.window.toPixels](love.window.topixels \"love.window.toPixels\")\n- [love.window.fromPixels](love.window.frompixels \"love.window.fromPixels\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n- [Config Files](love.conf \"Config Files\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getDPIScale](https://love2d.org/wiki/love.graphics.getDPIScale)"
- name: love.graphics.getFont
  id: love.graphics.getfont
  summary: Gets the current Font object
  description: "# love.graphics.getFont\n\nGets the current Font object.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nfont = love.graphics.getFont( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nThe current Font. Automatically creates and sets the default font, if none is set yet.\n\n## Function\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nfont = love.graphics.getFont( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nThe current Font, or nil if none is set.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setFont](love.graphics.setfont \"love.graphics.setFont\")\n\n  \n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getFont](https://love2d.org/wiki/love.graphics.getFont)"
- name: love.graphics.getFrontFaceWinding
  id: love.graphics.getfrontfacewinding
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.getFrontFaceWinding\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.\n\nThis is designed for use in combination with [Mesh face culling](love.graphics.setmeshcullmode \"love.graphics.setMeshCullMode\"). Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices.\n\n## Function\n\n### Synopsis\n\n``` lua\nwinding = love.graphics.getFrontFaceWinding( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`VertexWinding`](vertexwinding \"VertexWinding\")` winding`  \nThe winding mode being used. The default winding is counterclockwise (\"ccw\").\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setFrontFaceWinding](love.graphics.setfrontfacewinding \"love.graphics.setFrontFaceWinding\")\n- [love.graphics.setMeshCullMode](love.graphics.setmeshcullmode \"love.graphics.setMeshCullMode\")\n- [Mesh](mesh \"Mesh\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getFrontFaceWinding](https://love2d.org/wiki/love.graphics.getFrontFaceWinding)"
- name: love.graphics.getHeight
  id: love.graphics.getheight
  summary: Available since LÖVE 0.2.1 This function is not supported in earlier versions
  description: "# love.graphics.getHeight\n\n**Available since LÖVE [0.2.1](https://love2d.org/wiki/0.2.1 \"0.2.1\")**  \nThis function is not supported in earlier versions.\n\n  \nGets the height in pixels of the window.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = love.graphics.getHeight( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nThe height of the window.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getWidth](love.graphics.getwidth \"love.graphics.getWidth\")\n- [love.graphics.getDimensions](love.graphics.getdimensions \"love.graphics.getDimensions\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getHeight](https://love2d.org/wiki/love.graphics.getHeight)"
- name: love.graphics.getImageFormats
  id: love.graphics.getimageformats
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.getImageFormats\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the raw and compressed [pixel formats](pixelformat \"PixelFormat\") usable for [Images](image \"Image\"), and whether each is supported.\n\n## Function\n\n### Synopsis\n\n``` lua\nformats = love.graphics.getImageFormats( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` formats`  \nA table containing [PixelFormats](pixelformat \"PixelFormat\") as keys, and a boolean indicating whether the format is supported as values. Not all systems support all formats.\n\n## Examples\n\n### Display a list of the raw and compressed pixel formats usable with Images on the screen\n\n``` lua\nformats = love.graphics.getImageFormats()\n \nfunction love.draw()\n    local y = 0\n    for formatname, formatsupported in pairs(formats) do\n        local str = string.format(\"Supports format '%s': %s\", formatname, tostring(formatsupported))\n        love.graphics.print(str, 10, y)\n        y = y + 20\n    end\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [PixelFormat](pixelformat \"PixelFormat\")\n- [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\")\n- [love.image.newImageData](love.image.newimagedata \"love.image.newImageData\")\n- [love.image.newCompressedData](love.image.newcompresseddata \"love.image.newCompressedData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getImageFormats](https://love2d.org/wiki/love.graphics.getImageFormats)"
- name: love.graphics.getLineJoin
  id: love.graphics.getlinejoin
  summary: Gets the line join style
  description: "# love.graphics.getLineJoin\n\nGets the line join style.\n\n## Function\n\n### Synopsis\n\n``` lua\njoin = love.graphics.getLineJoin( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`LineJoin`](linejoin \"LineJoin\")` join`  \nThe LineJoin style.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setLineJoin](love.graphics.setlinejoin \"love.graphics.setLineJoin\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getLineJoin](https://love2d.org/wiki/love.graphics.getLineJoin)"
- name: love.graphics.getLineStipple
  id: love.graphics.getlinestipple
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# love.graphics.getLineStipple\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nGets the current line stipple.\n\n## Function\n\n### Synopsis\n\n``` lua\npattern, repeat = love.graphics.getLineStipple( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` pattern`  \nThe 16-bit stipple pattern.\n\n[`number`](number \"number\")` repeat`  \nThe repeat factor.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getLineStipple](https://love2d.org/wiki/love.graphics.getLineStipple)"
- name: love.graphics.getLineStyle
  id: love.graphics.getlinestyle
  summary: Available since LÖVE 0.3.2 This function is not supported in earlier versions
  description: "# love.graphics.getLineStyle\n\n**Available since LÖVE [0.3.2](https://love2d.org/wiki/0.3.2 \"0.3.2\")**  \nThis function is not supported in earlier versions.\n\nGets the line style.\n\n## Function\n\n### Synopsis\n\n``` lua\nstyle = love.graphics.getLineStyle( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`LineStyle`](linestyle \"LineStyle\")` style`  \nThe current line style.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setLineStyle](love.graphics.setlinestyle \"love.graphics.setLineStyle\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getLineStyle](https://love2d.org/wiki/love.graphics.getLineStyle)"
- name: love.graphics.getLineWidth
  id: love.graphics.getlinewidth
  summary: Available since LÖVE 0.3.2 This function is not supported in earlier versions
  description: "# love.graphics.getLineWidth\n\n**Available since LÖVE [0.3.2](https://love2d.org/wiki/0.3.2 \"0.3.2\")**  \nThis function is not supported in earlier versions.\n\nGets the current line width.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth = love.graphics.getLineWidth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe current line width.\n\n## Notes\n\nThis function does not work in 0.8.0, but has been fixed in version 0.9.0. Use the following snippet to circumvent this in 0.8.0;\n\n``` lua\nlove.graphics._getLineWidth = love.graphics.getLineWidth\nlove.graphics._setLineWidth = love.graphics.setLineWidth\nfunction love.graphics.getLineWidth() return love.graphics.varlinewidth or 1 end\nfunction love.graphics.setLineWidth(w) love.graphics.varlinewidth = w; return love.graphics._setLineWidth(w) end\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setLineWidth](love.graphics.setlinewidth \"love.graphics.setLineWidth\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getLineWidth](https://love2d.org/wiki/love.graphics.getLineWidth)"
- name: love.graphics.getMaxImageSize
  id: love.graphics.getmaximagesize
  summary: Available since LÖVE 0.9.0 and removed in LÖVE 0.10.0 Use love.graphics.getSystemLimits instead
  description: "# love.graphics.getMaxImageSize\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [love.graphics.getSystemLimits](love.graphics.getsystemlimits \"love.graphics.getSystemLimits\") instead.\n\nGets the max supported width or height of [Images](image \"Image\") and [Canvases](canvas \"Canvas\").\n\nAttempting to create an Image with a width \\*or\\* height greater than this number will create a checkerboard-patterned image instead. Doing the same for a canvas will result in an error.\n\nThe returned number depends on the system running the code. It is safe to assume it will never be less than 1024 and will almost always be 2048 or greater.\n\n## Function\n\n### Synopsis\n\n``` lua\nsize = love.graphics.getMaxImageSize( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` size`  \nThe max supported width or height of Images and Canvases.\n\n## Notes\n\nThere is an [online database](http://feedback.wildfiregames.com/report/opengl/feature/GL_MAX_TEXTURE_SIZE) which has collected info about the max image size for various systems.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Image](image \"Image\")\n- [Canvas](canvas \"Canvas\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getMaxImageSize](https://love2d.org/wiki/love.graphics.getMaxImageSize)"
- name: love.graphics.getMaxPointSize
  id: love.graphics.getmaxpointsize
  summary: Removed in LÖVE 0.10.0 Use love.graphics.getSystemLimits instead
  description: "# love.graphics.getMaxPointSize\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [love.graphics.getSystemLimits](love.graphics.getsystemlimits \"love.graphics.getSystemLimits\") instead.\n\nGets the max supported [point](love.graphics.point \"love.graphics.point\") size.\n\n## Function\n\n### Synopsis\n\n``` lua\nsize = love.graphics.getMaxPointSize( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` size`  \nThe max supported point size.\n\n## Examples\n\nDraws a [point](love.graphics.point \"love.graphics.point\") at the maximum supported size.\n\n``` lua\nfunction love.draw()\n    local max = love.graphics.getMaxPointSize();\n    love.graphics.setPointSize(max);\n    love.graphics.point(100, 100);\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.point](love.graphics.point \"love.graphics.point\")\n- [love.graphics.getPointSize](love.graphics.getpointsize \"love.graphics.getPointSize\")\n- [love.graphics.setPointSize](love.graphics.setpointsize \"love.graphics.setPointSize\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getMaxPointSize](https://love2d.org/wiki/love.graphics.getMaxPointSize)"
- name: love.graphics.getMeshCullMode
  id: love.graphics.getmeshcullmode
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.getMeshCullMode\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether [back-facing](love.graphics.setfrontfacewinding \"love.graphics.setFrontFaceWinding\") triangles in a [Mesh](mesh \"Mesh\") are culled.\n\nMesh face culling is designed for use with low level custom hardware-accelerated 3D rendering via [custom vertex attributes](love.graphics.newmesh \"love.graphics.newMesh\") on Meshes, custom [vertex shaders](love.graphics.newshader \"love.graphics.newShader\"), and [depth testing](love.graphics.setdepthmode \"love.graphics.setDepthMode\") with a [depth buffer](pixelformat \"PixelFormat\").\n\n## Function\n\n### Synopsis\n\n``` lua\nmode = love.graphics.getMeshCullMode( mode )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`CullMode`](cullmode \"CullMode\")` mode`  \nThe Mesh face culling mode in use (whether to render everything, cull back-facing triangles, or cull front-facing triangles).\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setMeshCullMode](love.graphics.setmeshcullmode \"love.graphics.setMeshCullMode\")\n- [love.graphics.setFrontFaceWinding](love.graphics.setfrontfacewinding \"love.graphics.setFrontFaceWinding\")\n- [love.graphics.setDepthMode](love.graphics.setdepthmode \"love.graphics.setDepthMode\")\n- [Mesh](mesh \"Mesh\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getMeshCullMode](https://love2d.org/wiki/love.graphics.getMeshCullMode)"
- name: love.graphics.getMode
  id: love.graphics.getmode
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.9.0 Moved to the love.window module as love.window.getMode
  description: "# love.graphics.getMode\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nMoved to the [love.window](love.window \"love.window\") module as [love.window.getMode](love.window.getmode \"love.window.getMode\").\n\nReturns the current display mode.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth, height, fullscreen, vsync, fsaa = love.graphics.getMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nDisplay width.\n\n[`number`](number \"number\")` height`  \nDisplay height.\n\n[`boolean`](boolean \"boolean\")` fullscreen`  \nFullscreen (true) or windowed (false).\n\n[`boolean`](boolean \"boolean\")` vsync`  \nTrue if vertical sync is enabled or false if disabled.\n\n[`number`](number \"number\")` fsaa`  \nThe number of FSAA samples.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setMode](love.graphics.setmode \"love.graphics.setMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getMode](https://love2d.org/wiki/love.graphics.getMode)"
- name: love.graphics.getModes
  id: love.graphics.getmodes
  summary: Removed in LÖVE 0.9.0 Moved to the love.window module as love.window.getFullscreenModes
  description: "# love.graphics.getModes\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nMoved to the [love.window](love.window \"love.window\") module as [love.window.getFullscreenModes](love.window.getfullscreenmodes \"love.window.getFullscreenModes\").\n\n  \nGets a list of supported fullscreen modes.\n\n## Function\n\n### Synopsis\n\n``` lua\nmodes = love.graphics.getModes( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` modes`  \nA table of width/height pairs. (Note that this may not be in order.)\n\n## Examples\n\n### Format of the returned table\n\n``` lua\nmodes = love.graphics.getModes()\n \n-- modes = {\n--  { width = 320, height = 240 },\n--  { width = 640, height = 480 },\n--  { width = 800, height = 600 },\n--  { width = 1024, height = 768 },\n--  ...\n-- }\n```\n\n### Sort table to ensure it is in order\n\n``` lua\nmodes = love.graphics.getModes()\ntable.sort(modes, function(a, b) return a.width*a.height < b.width*b.height end)   -- sort from smallest to largest\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.checkMode](love.graphics.checkmode \"love.graphics.checkMode\")\n- [love.graphics.setMode](love.graphics.setmode \"love.graphics.setMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getModes](https://love2d.org/wiki/love.graphics.getModes)"
- name: love.graphics.getPixelDimensions
  id: love.graphics.getpixeldimensions
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.getPixelDimensions\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the width and height in pixels of the window.\n\n[love.graphics.getDimensions](love.graphics.getdimensions \"love.graphics.getDimensions\") gets the dimensions of the window in units scaled by the screen's [DPI scale factor](love.graphics.getdpiscale \"love.graphics.getDPIScale\"), rather than pixels. Use getDimensions for calculations related to drawing to the screen and using the graphics coordinate system (calculating the center of the screen, for example), and getPixelDimensions only when dealing specifically with underlying pixels (pixel-related calculations in a pixel [Shader](shader \"Shader\"), for example).\n\n## Function\n\n### Synopsis\n\n``` lua\npixelwidth, pixelheight = love.graphics.getPixelDimensions( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` pixelwidth`  \nThe width of the window in pixels.\n\n[`number`](number \"number\")` pixelheight`  \nThe width of the window in pixels.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getPixelWidth](love.graphics.getpixelwidth \"love.graphics.getPixelWidth\")\n- [love.graphics.getPixelHeight](love.graphics.getpixelheight \"love.graphics.getPixelHeight\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getPixelDimensions](https://love2d.org/wiki/love.graphics.getPixelDimensions)"
- name: love.graphics.getPixelEffect
  id: love.graphics.getpixeleffect
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.9.0 It has been renamed to love.graphics.getShader
  description: "# love.graphics.getPixelEffect\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [love.graphics.getShader](love.graphics.getshader \"love.graphics.getShader\").\n\n  \nReturns the current PixelEffect. Returns nil if none is set.\n\n## Function\n\n### Synopsis\n\n``` lua\npe = love.graphics.getPixelEffect( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`PixelEffect`](pixeleffect \"PixelEffect\")` pe`  \nThe current PixelEffect.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setPixelEffect](love.graphics.setpixeleffect \"love.graphics.setPixelEffect\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getPixelEffect](https://love2d.org/wiki/love.graphics.getPixelEffect)"
- name: love.graphics.getPixelHeight
  id: love.graphics.getpixelheight
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.getPixelHeight\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the height in pixels of the window.\n\nThe graphics coordinate system and [love.graphics.getHeight](love.graphics.getheight \"love.graphics.getHeight\") use units scaled by the screen's [DPI scale factor](love.graphics.getdpiscale \"love.graphics.getDPIScale\"), rather than raw pixels. Use getHeight for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelHeight only when dealing specifically with underlying pixels (pixel-related calculations in a pixel [Shader](shader \"Shader\"), for example).\n\n## Function\n\n### Synopsis\n\n``` lua\npixelheight = love.graphics.getPixelHeight( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` pixelheight`  \nThe height of the window in pixels.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getPixelWidth](love.graphics.getpixelwidth \"love.graphics.getPixelWidth\")\n- [love.graphics.getPixelDimensions](love.graphics.getpixeldimensions \"love.graphics.getPixelDimensions\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getPixelHeight](https://love2d.org/wiki/love.graphics.getPixelHeight)"
- name: love.graphics.getPixelWidth
  id: love.graphics.getpixelwidth
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.getPixelWidth\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the width in pixels of the window.\n\nThe graphics coordinate system and [love.graphics.getWidth](love.graphics.getwidth \"love.graphics.getWidth\") use units scaled by the screen's [DPI scale factor](love.graphics.getdpiscale \"love.graphics.getDPIScale\"), rather than raw pixels. Use getWidth for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelWidth only when dealing specifically with underlying pixels (pixel-related calculations in a pixel [Shader](shader \"Shader\"), for example).\n\n## Function\n\n### Synopsis\n\n``` lua\npixelwidth = love.graphics.getPixelWidth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` pixelwidth`  \nThe width of the window in pixels.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getPixelHeight](love.graphics.getpixelheight \"love.graphics.getPixelHeight\")\n- [love.graphics.getPixelDimensions](love.graphics.getpixeldimensions \"love.graphics.getPixelDimensions\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getPixelWidth](https://love2d.org/wiki/love.graphics.getPixelWidth)"
- name: love.graphics.getPointSize
  id: love.graphics.getpointsize
  summary: Gets the point size
  description: "# love.graphics.getPointSize\n\nGets the [point](love.graphics.point \"love.graphics.point\") size.\n\n## Function\n\n### Synopsis\n\n``` lua\nsize = love.graphics.getPointSize( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` size`  \nThe current point size.\n\n## Examples\n\nIncrease the point size by 1 by using [love.graphics.setPointSize](love.graphics.setpointsize \"love.graphics.setPointSize\").\n\n``` lua\nfunction love.draw()\n    local s = love.graphics.getPointSize() + 1;\n    love.graphics.setPointSize(s);\n    love.graphics.point(100, 100);\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.point](love.graphics.point \"love.graphics.point\")\n- [love.graphics.setPointSize](love.graphics.setpointsize \"love.graphics.setPointSize\")\n- [love.graphics.getMaxPointSize](love.graphics.getmaxpointsize \"love.graphics.getMaxPointSize\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getPointSize](https://love2d.org/wiki/love.graphics.getPointSize)"
- name: love.graphics.getPointStyle
  id: love.graphics.getpointstyle
  summary: Removed in LÖVE 0.10.0 This function is not supported in that and later versions
  description: "# love.graphics.getPointStyle\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in that and later versions.\n\n  \nGets the current [point](love.graphics.point \"love.graphics.point\") style.\n\n## Function\n\n### Synopsis\n\n``` lua\nstyle = love.graphics.getPointStyle( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`PointStyle`](pointstyle \"PointStyle\")` style`  \nThe current point style.\n\n## Examples\n\nToggle between [point styles](pointstyle \"PointStyle\") with the help of [love.graphics.setPointStyle](love.graphics.setpointstyle \"love.graphics.setPointStyle\").\n\n``` lua\nif love.graphics.getPointStyle() == \"rough\" then\n   love.graphics.setPointStyle(\"smooth\")\nelse\n   love.graphics.setPointStyle(\"rough\")\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.point](love.graphics.point \"love.graphics.point\")\n- [love.graphics.setPointStyle](love.graphics.setpointstyle \"love.graphics.setPointStyle\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getPointStyle](https://love2d.org/wiki/love.graphics.getPointStyle)"
- name: love.graphics.getRendererInfo
  id: love.graphics.getrendererinfo
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.graphics.getRendererInfo\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets information about the system's video card and drivers.\n\nAlmost everything returned by this function is highly dependent on the system running the code and should probably not be used to make run-time decisions.\n\n## Function\n\n### Synopsis\n\n``` lua\nname, version, vendor, device = love.graphics.getRendererInfo( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` name`  \nThe name of the renderer, e.g. \"OpenGL\" or \"OpenGL ES\".\n\n[`string`](string \"string\")` version`  \nThe version of the renderer with some extra driver-dependent version info, e.g. \"2.1 INTEL-8.10.44\".\n\n[`string`](string \"string\")` vendor`  \nThe name of the graphics card vendor, e.g. \"Intel Inc\".\n\n[`string`](string \"string\")` device`  \nThe name of the graphics card, e.g. \"Intel HD Graphics 3000 OpenGL Engine\".\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getRendererInfo](https://love2d.org/wiki/love.graphics.getRendererInfo)"
- name: love.graphics.getScissor
  id: love.graphics.getscissor
  summary: Available since LÖVE 0.4.0 This function is not supported in earlier versions
  description: "# love.graphics.getScissor\n\n**Available since LÖVE [0.4.0](https://love2d.org/wiki/0.4.0 \"0.4.0\")**  \nThis function is not supported in earlier versions.\n\nGets the current scissor box.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y, width, height = love.graphics.getScissor( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x-component of the top-left point of the box.\n\n[`number`](number \"number\")` y`  \nThe y-component of the top-left point of the box.\n\n[`number`](number \"number\")` width`  \nThe width of the box.\n\n[`number`](number \"number\")` height`  \nThe height of the box.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setScissor](love.graphics.setscissor \"love.graphics.setScissor\")\n- [love.graphics.intersectScissor](love.graphics.intersectscissor \"love.graphics.intersectScissor\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getScissor](https://love2d.org/wiki/love.graphics.getScissor)"
- name: love.graphics.getShader
  id: love.graphics.getshader
  summary: Available since LÖVE 0.9.0 It has been renamed from love.graphics.getPixelEffect
  description: "# love.graphics.getShader\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [love.graphics.getPixelEffect](love.graphics.getpixeleffect \"love.graphics.getPixelEffect\").\n\n  \nGets the current [Shader](shader \"Shader\"). Returns nil if none is set.\n\n## Function\n\n### Synopsis\n\n``` lua\nshader = love.graphics.getShader( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Shader`](shader \"Shader\")` shader`  \nThe currently active Shader, or [nil](nil \"nil\") if none is set.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setShader](love.graphics.setshader \"love.graphics.setShader\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getShader](https://love2d.org/wiki/love.graphics.getShader)"
- name: love.graphics.getStackDepth
  id: love.graphics.getstackdepth
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.getStackDepth\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the current depth of the transform / state stack (the number of [pushes](love.graphics.push \"love.graphics.push\") without corresponding [pops](love.graphics.pop \"love.graphics.pop\")).\n\n## Function\n\n### Synopsis\n\n``` lua\ndepth = love.graphics.getStackDepth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` depth`  \nThe current depth of the transform and state love.graphics stack.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.push](love.graphics.push \"love.graphics.push\")\n- [love.graphics.pop](love.graphics.pop \"love.graphics.pop\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getStackDepth](https://love2d.org/wiki/love.graphics.getStackDepth)"
- name: love.graphics.getStats
  id: love.graphics.getstats
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.graphics.getStats\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets performance-related rendering statistics.\n\n  \n\nThe per-frame metrics (drawcalls, canvasswitches, shaderswitches) are reset by [love.graphics.present](love.graphics.present \"love.graphics.present\"), which for the default implementation of [love.run](love.run \"love.run\") is called right after the execution of [love.draw](love.draw \"love.draw\"). Therefore this function should probably be called at the end of [love.draw](love.draw \"love.draw\").\n\n## Function\n\n### Synopsis\n\n``` lua\nstats = love.graphics.getStats( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` stats`  \nA table with the following fields:\n\n[`number`](number \"number\")` drawcalls`  \nThe number of draw calls made so far during the current frame.\n\n[`number`](number \"number\")` canvasswitches`  \nThe number of times the active [Canvas](canvas \"Canvas\") has been switched so far during the current frame.\n\n[`number`](number \"number\")` texturememory`  \nThe estimated total size in bytes of video memory used by all loaded [Images](image \"Image\"), [Canvases](canvas \"Canvas\"), and [Fonts](font \"Font\").\n\n[`number`](number \"number\")` images`  \nThe number of [Image](image \"Image\") objects currently loaded.\n\n[`number`](number \"number\")` canvases`  \nThe number of [Canvas](canvas \"Canvas\") objects currently loaded.\n\n[`number`](number \"number\")` fonts`  \nThe number of [Font](font \"Font\") objects currently loaded.\n\n[`number`](number \"number\")` shaderswitches` Available since 0.10.2  \nThe number of times the active [Shader](shader \"Shader\") has been changed so far during the current frame.\n\n&nbsp;\n\n[`number`](number \"number\")` drawcallsbatched` Available since 11.0  \nThe number of draw calls that were saved by LÖVE's automatic batching, since the start of the frame.\n\n  \n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nThis variant accepts an existing table to fill in, instead of creating a new one.\n\n### Synopsis\n\n``` lua\nstats = love.graphics.getStats( stats )\n```\n\n### Arguments\n\n[`table`](table \"table\")` stats`  \nA table which will be filled in with the stat fields below.\n\n### Returns\n\n[`table`](table \"table\")` stats`  \nThe table that was passed in above, now containing the following fields:\n\n[`number`](number \"number\")` drawcalls`  \nThe number of draw calls made so far during the current frame.\n\n[`number`](number \"number\")` canvasswitches`  \nThe number of times the active [Canvas](canvas \"Canvas\") has been switched so far during the current frame.\n\n[`number`](number \"number\")` texturememory`  \nThe estimated total size in bytes of video memory used by all loaded [Images](image \"Image\"), [Canvases](canvas \"Canvas\"), and [Fonts](font \"Font\").\n\n[`number`](number \"number\")` images`  \nThe number of [Image](image \"Image\") objects currently loaded.\n\n[`number`](number \"number\")` canvases`  \nThe number of [Canvas](canvas \"Canvas\") objects currently loaded.\n\n[`number`](number \"number\")` fonts`  \nThe number of [Font](font \"Font\") objects currently loaded.\n\n[`number`](number \"number\")` shaderswitches`  \nThe number of times the active [Shader](shader \"Shader\") has been changed so far during the current frame.\n\n[`number`](number \"number\")` drawcallsbatched`  \nThe number of draw calls that were saved by LÖVE's automatic batching, since the start of the frame.\n\n## Examples\n\n### display the estimated amount of video memory used for textures\n\n``` lua\nfunction love.load()\n    love.graphics.setNewFont(24)\nend\n \nfunction love.draw()\n    -- some drawing code here --\n \n    local stats = love.graphics.getStats()\n \n    local str = string.format(\"Estimated amount of texture memory used: %.2f MB\", stats.texturememory / 1024 / 1024)\n    love.graphics.print(str, 10, 10)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getStats](https://love2d.org/wiki/love.graphics.getStats)"
- name: love.graphics.getStencilTest
  id: love.graphics.getstenciltest
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.graphics.getStencilTest\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the current stencil test configuration.\n\nWhen stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via [love.graphics.stencil](love.graphics.stencil \"love.graphics.stencil\").\n\nEach [Canvas](canvas \"Canvas\") has its own per-pixel stencil values.\n\n## Function\n\n### Synopsis\n\n``` lua\ncomparemode, comparevalue = love.graphics.getStencilTest( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`CompareMode`](comparemode \"CompareMode\")` comparemode`  \nThe type of comparison that is made for each pixel. Will be \"always\" if stencil testing is disabled.\n\n[`number`](number \"number\")` comparevalue`  \nThe value used when comparing with the stencil value of each pixel.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setStencilTest](love.graphics.setstenciltest \"love.graphics.setStencilTest\")\n- [love.graphics.stencil](love.graphics.stencil \"love.graphics.stencil\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getStencilTest](https://love2d.org/wiki/love.graphics.getStencilTest)"
- name: love.graphics.getSupported
  id: love.graphics.getsupported
  summary: Available since LÖVE 0.10.0 It has replaced love.graphics.isSupported
  description: "# love.graphics.getSupported\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has replaced [love.graphics.isSupported](love.graphics.issupported \"love.graphics.isSupported\").\n\nGets the optional graphics features and whether they're supported on the system.\n\nSome older or low-end systems don't always support all graphics features.\n\n## Function\n\n### Synopsis\n\n``` lua\nfeatures = love.graphics.getSupported( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` features`  \nA table containing [GraphicsFeature](graphicsfeature \"GraphicsFeature\") keys, and boolean values indicating whether each feature is supported.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [GraphicsFeature](graphicsfeature \"GraphicsFeature\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getSupported](https://love2d.org/wiki/love.graphics.getSupported)"
- name: love.graphics.getSystemLimit
  id: love.graphics.getsystemlimit
  summary: Available since LÖVE 0.9.1 and removed in LÖVE 0.10.0 It has been replaced by love.graphics.getSystemLimits
  description: "# love.graphics.getSystemLimit\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been replaced by [love.graphics.getSystemLimits](love.graphics.getsystemlimits \"love.graphics.getSystemLimits\").\n\nGets the system-dependent maximum value for a love.graphics feature.\n\n## Function\n\n### Synopsis\n\n``` lua\nlimit = love.graphics.getSystemLimit( limittype )\n```\n\n### Arguments\n\n[`GraphicsLimit`](graphicslimit \"GraphicsLimit\")` limittype`  \nThe graphics feature to get the maximum value of.\n\n### Returns\n\n[`number`](number \"number\")` limit`  \nThe system-dependent max value for the feature.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getSystemLimit](https://love2d.org/wiki/love.graphics.getSystemLimit)"
- name: love.graphics.getSystemLimits
  id: love.graphics.getsystemlimits
  summary: Available since LÖVE 0.10.0 It has replaced love.graphics.getSystemLimit
  description: "# love.graphics.getSystemLimits\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has replaced [love.graphics.getSystemLimit](love.graphics.getsystemlimit \"love.graphics.getSystemLimit\").\n\nGets the system-dependent maximum values for love.graphics features.\n\n## Function\n\n### Synopsis\n\n``` lua\nlimits = love.graphics.getSystemLimits( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` limits`  \nA table containing [GraphicsLimit](graphicslimit \"GraphicsLimit\") keys, and number values.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [GraphicsLimit](graphicslimit \"GraphicsLimit\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getSystemLimits](https://love2d.org/wiki/love.graphics.getSystemLimits)"
- name: love.graphics.getTextureTypes
  id: love.graphics.gettexturetypes
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.getTextureTypes\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the available [texture types](texturetype \"TextureType\"), and whether each is supported.\n\n## Function\n\n### Synopsis\n\n``` lua\ntexturetypes = love.graphics.getTextureTypes( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` texturetypes`  \nA table containing [TextureTypes](texturetype \"TextureType\") as keys, and a boolean indicating whether the type is supported as values. Not all systems support all types.\n\n## Examples\n\n### Display the texture types on screen and whether they're supported\n\n``` lua\ntextypes = love.graphics.getTextureTypes()\n \nfunction love.draw()\n    local y = 0\n    for name, supported in pairs(textypes) do\n        local str = string.format(\"Supports texture type '%s': %s\", name, tostring(supported))\n        love.graphics.print(str, 10, y)\n        y = y + 20\n    end\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [TextureType](texturetype \"TextureType\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\")\n- [love.graphics.newArrayImage](love.graphics.newarrayimage \"love.graphics.newArrayImage\")\n- [love.graphics.newCubeImage](love.graphics.newcubeimage \"love.graphics.newCubeImage\")\n- [love.graphics.newVolumeImage](love.graphics.newvolumeimage \"love.graphics.newVolumeImage\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getTextureTypes](https://love2d.org/wiki/love.graphics.getTextureTypes)"
- name: love.graphics.getWidth
  id: love.graphics.getwidth
  summary: Available since LÖVE 0.2.1 This function is not supported in earlier versions
  description: "# love.graphics.getWidth\n\n**Available since LÖVE [0.2.1](https://love2d.org/wiki/0.2.1 \"0.2.1\")**  \nThis function is not supported in earlier versions.\n\nGets the width in pixels of the window.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth = love.graphics.getWidth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the window.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getHeight](love.graphics.getheight \"love.graphics.getHeight\")\n- [love.graphics.getDimensions](love.graphics.getdimensions \"love.graphics.getDimensions\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.getWidth](https://love2d.org/wiki/love.graphics.getWidth)"
- name: love.graphics.hasFocus
  id: love.graphics.hasfocus
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.9.0 Moved to the love.window module as love.window.hasFocus
  description: "# love.graphics.hasFocus\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nMoved to the [love.window](love.window \"love.window\") module as [love.window.hasFocus](love.window.hasfocus \"love.window.hasFocus\").\n\nChecks if the game window has keyboard focus.\n\n## Function\n\n### Synopsis\n\n``` lua\nfocus = love.graphics.hasFocus( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` focus`  \nTrue if the window has the focus or false if not.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.hasFocus](https://love2d.org/wiki/love.graphics.hasFocus)"
- name: love.graphics.intersectScissor
  id: love.graphics.intersectscissor
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.graphics.intersectScissor\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nSets the [scissor](love.graphics.setscissor \"love.graphics.setScissor\") to the rectangle created by the intersection of the specified rectangle with the existing scissor. If no scissor is active yet, it behaves like [love.graphics.setScissor](love.graphics.setscissor \"love.graphics.setScissor\").\n\nThe scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including [love.graphics.clear](love.graphics.clear \"love.graphics.clear\").\n\nThe dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...).\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.intersectScissor( x, y, width, height )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle.\n\n[`number`](number \"number\")` y`  \nThe y-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle.\n\n[`number`](number \"number\")` width`  \nThe width of the rectangle to intersect with the existing scissor rectangle.\n\n[`number`](number \"number\")` height`  \nThe height of the rectangle to intersect with the existing scissor rectangle.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setScissor](love.graphics.setscissor \"love.graphics.setScissor\")\n- [love.graphics.getScissor](love.graphics.getscissor \"love.graphics.getScissor\")\n- [love.graphics.push](love.graphics.push \"love.graphics.push\")\n- [love.graphics.pop](love.graphics.pop \"love.graphics.pop\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.intersectScissor](https://love2d.org/wiki/love.graphics.intersectScissor)"
- name: love.graphics.inverseTransformPoint
  id: love.graphics.inversetransformpoint
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.inverseTransformPoint\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nConverts the given 2D position from screen-space into global coordinates.\n\nThis effectively applies the reverse of the current graphics transformations to the given position. A similar [Transform:inverseTransformPoint](transform-inversetransformpoint \"Transform:inverseTransformPoint\") method exists for [Transform](transform \"Transform\") objects.\n\n## Function\n\n### Synopsis\n\n``` lua\nglobalX, globalY = love.graphics.inverseTransformPoint( screenX, screenY )\n```\n\n### Arguments\n\n[`number`](number \"number\")` screenX`  \nThe x component of the screen-space position.\n\n[`number`](number \"number\")` screenY`  \nThe y component of the screen-space position.\n\n### Returns\n\n[`number`](number \"number\")` globalX`  \nThe x component of the position in global coordinates.\n\n[`number`](number \"number\")` globalY`  \nThe y component of the position in global coordinates.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.transformPoint](love.graphics.transformpoint \"love.graphics.transformPoint\")\n- [Transform](transform \"Transform\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.inverseTransformPoint](https://love2d.org/wiki/love.graphics.inverseTransformPoint)"
- name: love.graphics.isActive
  id: love.graphics.isactive
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.graphics.isActive\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the graphics module is able to be used. If it is not active, [love.graphics](love.graphics \"love.graphics\") function and method calls will not work correctly and may cause the program to crash.\n\nThe graphics module is *inactive* if a window is not open, or if the app is in the background on iOS. Typically the app's execution will be automatically paused by the system, in the latter case.\n\n## Function\n\n### Synopsis\n\n``` lua\nactive = love.graphics.isActive( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` active`  \nWhether the graphics module is active and able to be used.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.window.close](love.window.close \"love.window.close\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.isActive](https://love2d.org/wiki/love.graphics.isActive)"
- name: love.graphics.isCreated
  id: love.graphics.iscreated
  summary: Removed in LÖVE 0.9.0 Moved to the love.window module as love.window.isCreated
  description: "# love.graphics.isCreated\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nMoved to the [love.window](love.window \"love.window\") module as [love.window.isCreated](love.window.iscreated \"love.window.isCreated\").\n\n  \nChecks if the window has been created.\n\n## Function\n\n### Synopsis\n\n``` lua\ncreated = love.graphics.isCreated( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` created`  \nTrue if the window has been created, false otherwise.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.isCreated](https://love2d.org/wiki/love.graphics.isCreated)"
- name: love.graphics.isGammaCorrect
  id: love.graphics.isgammacorrect
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.graphics.isGammaCorrect\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether gamma-correct rendering is supported and enabled. It can be enabled by setting `t.gammacorrect = true` in [love.conf](love.conf \"love.conf\").\n\nNot all devices support gamma-correct rendering, in which case it will be automatically disabled and this function will return false. It is supported on desktop systems which have graphics cards that are capable of using OpenGL 3 / DirectX 10, and iOS devices that can use OpenGL ES 3.\n\n## Function\n\n### Synopsis\n\n``` lua\ngammacorrect = love.graphics.isGammaCorrect( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` gammacorrect`  \nTrue if gamma-correct rendering is supported and was enabled in [love.conf](love.conf \"love.conf\"), false otherwise.\n\n## Notes\n\nWhen gamma-correct rendering is enabled, many functions and objects perform automatic color conversion between sRGB and linear RGB in order for [blending](blendmode \"BlendMode\") and [shader math](shader \"Shader\") to be mathematically correct (which they aren't if it's not enabled.)\n\n- The colors passed into [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\"), [love.graphics.clear](love.graphics.clear \"love.graphics.clear\"), and [Shader:sendColor](shader-sendcolor \"Shader:sendColor\") will automatically be [converted](love.math.gammatolinear \"love.math.gammaToLinear\") from sRGB to linear RGB.\n\n- The colors set in [SpriteBatches](spritebatch \"SpriteBatch\"), [text with per-character colors](love.graphics.print \"love.graphics.print\"), [ParticleSystems](particlesystem \"ParticleSystem\"), [points with per-point colors](love.graphics.points \"love.graphics.points\"), standard [Meshes](mesh \"Mesh\"), and [custom Meshes](love.graphics.newmesh \"love.graphics.newMesh\") which use the \"VertexColor\" attribute name will automatically be converted from sRGB to linear RGB when those objects are drawn.\n\n&nbsp;\n\n- [Images](image \"Image\") will have their colors automatically converted from sRGB to linear RGB when drawing them (and when getting their pixels in a [Shader](shader \"Shader\")), unless the flag `linear = true` is set when [creating the Image](love.graphics.newimage \"love.graphics.newImage\").\n\n&nbsp;\n\n- Everything drawn to the screen will be blended in linear RGB and then the result will be converted to sRGB for display.\n\n&nbsp;\n\n- [Canvases](canvas \"Canvas\") which use the \"normal\" or \"srgb\" [CanvasFormat](canvasformat \"CanvasFormat\") will have their content blended in linear RGB and the result will be stored in the canvas in sRGB, when drawing to them. When the Canvas itself is drawn, its pixel colors will be converted from sRGB to linear RGB in the same manner as Images. Keeping the canvas pixel data stored as sRGB allows for better precision (less banding) for darker colors compared to \"rgba8\".\n\nBecause most conversions are automatically handled, your own code doesn't need to worry about sRGB and linear RGB color conversions when gamma-correct rendering is enabled, except in a couple cases:\n\n- If a [Mesh](mesh \"Mesh\") with custom vertex attributes is used and one of the attributes is meant to be used as a color in a [Shader](shader \"Shader\"), and the attribute isn't named \"VertexColor\".\n\n&nbsp;\n\n- If a [Shader](shader \"Shader\") is used which has uniform / extern variables or other variables that are meant to be used as colors, and [Shader:sendColor](shader-sendcolor \"Shader:sendColor\") isn't used.\n\nIn both cases, [love.math.gammaToLinear](love.math.gammatolinear \"love.math.gammaToLinear\") can be used to convert color values to linear RGB in Lua code, or the `gammaCorrectColor` (or `unGammaCorrectColor` if necessary) shader functions can be used inside shader code. Those shader functions *only* do conversions if gamma-correct rendering is actually enabled. The `LOVE_GAMMA_CORRECT` shader preprocessor define will be set if so.\n\nRead more about gamma-correct rendering [here](http://http.developer.nvidia.com/GPUGems3/gpugems3_ch24.html), [here](http://filmicgames.com/archives/299), and [here](http://renderwonk.com/blog/index.php/archive/adventures-with-gamma-correct-rendering/).\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Config Files](love.conf \"Config Files\")\n- [love.math.gammaToLinear](love.math.gammatolinear \"love.math.gammaToLinear\")\n- [love.math.linearToGamma](love.math.lineartogamma \"love.math.linearToGamma\")\n- [Shader:sendColor](shader-sendcolor \"Shader:sendColor\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.isGammaCorrect](https://love2d.org/wiki/love.graphics.isGammaCorrect)"
- name: love.graphics.isSupported
  id: love.graphics.issupported
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.10.0 It has been replaced by love.graphics.getSupported
  description: "# love.graphics.isSupported\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been replaced by [love.graphics.getSupported](love.graphics.getsupported \"love.graphics.getSupported\").\n\nChecks if certain graphics functions can be used.\n\nOlder and low-end systems do not always support all graphics extensions.\n\n## Function\n\n### Synopsis\n\n``` lua\nisSupported = love.graphics.isSupported( support1, support2, support3, ... )\n```\n\n### Arguments\n\n[`GraphicsFeature`](graphicsfeature \"GraphicsFeature\")` supportN`  \nThe graphics feature to check for.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` isSupported`  \nTrue if everything is supported, false otherwise.\n\n## Examples\n\n### Error smoothly if the graphics card does not support canvases\n\n``` lua\nassert(love.graphics.isSupported(\"canvas\"), \"Your graphics card does not support canvases, sorry!\")\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.isSupported](https://love2d.org/wiki/love.graphics.isSupported)"
- name: love.graphics.isWireframe
  id: love.graphics.iswireframe
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# love.graphics.isWireframe\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nGets whether wireframe mode is used when drawing.\n\n## Function\n\n### Synopsis\n\n``` lua\nwireframe = love.graphics.isWireframe( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` wireframe`  \nTrue if wireframe lines are used when drawing, false if it's not.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setWireframe](love.graphics.setwireframe \"love.graphics.setWireframe\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.isWireframe](https://love2d.org/wiki/love.graphics.isWireframe)"
- name: love.graphics.line
  id: love.graphics.line
  summary: Draws lines between points
  description: "# love.graphics.line\n\nDraws lines between points.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.line( x1, y1, x2, y2, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x1`  \nThe position of first point on the x-axis.\n\n[`number`](number \"number\")` y1`  \nThe position of first point on the y-axis.\n\n[`number`](number \"number\")` x2`  \nThe position of second point on the x-axis.\n\n[`number`](number \"number\")` y2`  \nThe position of second point on the y-axis.\n\n[`number`](number \"number\")` ...`  \nYou can continue passing point positions to draw a polyline.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.line( points )\n```\n\n### Arguments\n\n[`table`](table \"table\")` points`  \nA table of point positions, as described above.\n\n### Returns\n\nNothing.\n\n## Examples\n\nDraw the outline of a simple trapezoid.\n\n``` lua\nfunction love.draw()\n   love.graphics.line(200,50, 400,50, 500,300, 100,300, 200,50)   -- last pair is a repeat to complete the trapezoid\nend\n```\n\nDraw a line from the center of the screen to the mouse pointer.\n\n``` lua\nw = love.graphics.getWidth() / 2   -- half the window width\nh = love.graphics.getHeight() / 2   -- half the window height\nfunction love.draw()\n   local mx, my = love.mouse.getPosition()  -- current position of the mouse\n   love.graphics.line(w, h, mx, my)\nend\n```\n\nDraw a zigzag line from a single table.\n\n``` lua\nsometable = {\n   100, 100,\n   200, 200,\n   300, 100,\n   400, 200,\n}\nfunction love.draw()\n   love.graphics.line(sometable)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setLine](love.graphics.setline \"love.graphics.setLine\")\n- [love.graphics.setLineWidth](love.graphics.setlinewidth \"love.graphics.setLineWidth\")\n- [love.graphics.setLineStyle](love.graphics.setlinestyle \"love.graphics.setLineStyle\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.line](https://love2d.org/wiki/love.graphics.line)"
- name: love.graphics.newArrayImage
  id: love.graphics.newarrayimage
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.newArrayImage\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new [array](texturetype \"TextureType\") [Image](image \"Image\").\n\nNot all system supports array image. Use [love.graphics.getTextureTypes](love.graphics.gettexturetypes \"love.graphics.getTextureTypes\") to check!\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\nAn array image / array texture is a single object which contains multiple 'layers' or 'slices' of 2D sub-images. It can be thought of similarly to a texture atlas or sprite sheet, but it doesn't suffer from the same tile / quad bleeding artifacts that texture atlases do – although every sub-image must have the same dimensions.\n\nA specific layer of an array image can be drawn with [love.graphics.drawLayer](love.graphics.drawlayer \"love.graphics.drawLayer\") / [SpriteBatch:addLayer](spritebatch-addlayer \"SpriteBatch:addLayer\"), or with the [Quad](quad \"Quad\") variant of [love.graphics.draw](love.graphics.draw \"love.graphics.draw\") and [Quad:setLayer](https://love2d.org/w/index.php?title=Quad:setLayer&action=edit&redlink=1 \"Quad:setLayer (page does not exist)\"), or via a custom Shader.\n\nTo use an array image in a Shader, it must be declared as a `ArrayImage` or `sampler2DArray` type (instead of `Image` or `sampler2D`). The `Texel(ArrayImage image, vec3 texturecoord)` shader function must be used to get pixel colors from a slice of the array image. The vec3 argument contains the texture coordinate in the first two components, and the 0-based slice index in the third component.\n\n## Function\n\nCreates an array Image given a different image file for each slice of the resulting array image object.\n\n### Synopsis\n\n``` lua\nimage = love.graphics.newArrayImage( slices, settings )\n```\n\n### Arguments\n\n[`table`](table \"table\")` slices`  \nA table containing filepaths to images (or [File](file \"File\"), [FileData](filedata \"FileData\"), [ImageData](imagedata \"ImageData\"), or [CompressedImageData](compressedimagedata \"CompressedImageData\") objects), in an array. Each sub-image must have the same dimensions. A table of tables can also be given, where each sub-table contains all mipmap levels for the slice index of that sub-table.\n\n[`table`](table \"table\")` settings (nil)`  \nOptional table of settings to configure the array image, containing the following fields:\n\n[`boolean`](boolean \"boolean\")` mipmaps (false)`  \nTrue to make the image use mipmaps, false to disable them. Mipmaps will be automatically generated if the image isn't a [compressed texture](pixelformat \"PixelFormat\") format.\n\n[`boolean`](boolean \"boolean\")` linear (false)`  \nTrue to treat the image's pixels as linear instead of sRGB, when [gamma correct rendering](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") is enabled. Most images are authored as sRGB.\n\n[`number`](number \"number\")` dpiscale (1)`  \nThe DPI scale to use when drawing the array image and calling [getWidth](texture-getwidth \"Texture:getWidth\")/[getHeight](texture-getheight \"Texture:getHeight\").\n\n### Returns\n\n[`Image`](image \"Image\")` image`  \nAn Array Image object.\n\n## Notes\n\nIllustration of how an array image works: [\\[1\\]](http://codeflow.org/entries/2010/dec/09/minecraft-like-rendering-experiments-in-opengl-4/illustrations/textures.jpg)\n\nA DPI scale of 2 (double the normal pixel density) will result in the image taking up the same space on-screen as an image with half its pixel dimensions that has a DPI scale of 1. This allows for easily swapping out image assets that take the same space on-screen but have different pixel densities, which makes supporting high-dpi / retina resolution require less code logic.\n\nIn order to use an Array Texture or other non-2D texture types as the main texture in a custom [Shader](shader \"Shader\"), the [void effect()](love.graphics.newshader \"love.graphics.newShader\") variant must be used in the pixel shader, and MainTex must be declared as an ArrayImage or sampler2DArray like so: `uniform ArrayImage MainTex;`.\n\n## Examples\n\n### Draw multiple layers of an Array Image\n\n``` lua\nfunction love.load()\n    local sprites = {\"sprite1.png\", \"sprite2.png\"}\n    image = love.graphics.newArrayImage(sprites)\nend\n \nfunction love.draw()\n    love.graphics.drawLayer(image, 1, 50, 50)\n    love.graphics.drawLayer(image, 2, 250, 50)\nend\n```\n\n### Use a custom shader with love.graphics.drawLayer\n\n``` lua\nshader = love.graphics.newShader[[\nuniform ArrayImage MainTex;\n \nvoid effect() {\n    // Texel uses a third component of the texture coordinate for the layer index, when an Array Texture is passed in.\n    // love sets up the texture coordinates to contain the layer index specified in love.graphics.drawLayer, when\n    // rendering the Array Texture.\n    love_PixelColor = Texel(MainTex, VaryingTexCoord.xyz) * VaryingColor;\n}\n]]\n \nfunction love.load()\n    local sprites = {\"sprite1.png\", \"sprite2.png\"}\n    image = love.graphics.newArrayImage(sprites)\nend\n \nfunction love.draw()\n    love.graphics.setShader(shader)\n    love.graphics.drawLayer(image, 1, 50, 50)\n    love.graphics.drawLayer(image, 2, 250, 50)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Image](image \"Image\")\n- [TextureType](texturetype \"TextureType\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newArrayImage](https://love2d.org/wiki/love.graphics.newArrayImage)"
- name: love.graphics.newCanvas
  id: love.graphics.newcanvas
  summary: Available since LÖVE 0.8.0 It has been renamed from love.graphics.newFramebuffer
  description: "# love.graphics.newCanvas\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed from [love.graphics.newFramebuffer](love.graphics.newframebuffer \"love.graphics.newFramebuffer\").\n\nCreates a new [Canvas](canvas \"Canvas\") object for offscreen rendering.\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\ncanvas = love.graphics.newCanvas( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Canvas`](canvas \"Canvas\")` canvas`  \nA new Canvas with dimensions equal to the window's size in pixels.\n\n## Function\n\n### Synopsis\n\n``` lua\ncanvas = love.graphics.newCanvas( width, height )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nThe desired width of the Canvas.\n\n[`number`](number \"number\")` height`  \nThe desired height of the Canvas.\n\n### Returns\n\n[`Canvas`](canvas \"Canvas\")` canvas`  \nA new Canvas with specified width and height.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nCreates a 2D or [cubemap](texturetype \"TextureType\") Canvas using the given settings.\n\n### Synopsis\n\n``` lua\ncanvas = love.graphics.newCanvas( width, height, settings )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nThe desired width of the Canvas.\n\n[`number`](number \"number\")` height`  \nThe desired height of the Canvas.\n\n[`table`](table \"table\")` settings`  \nA table containing the given fields:\n\n[`TextureType`](texturetype \"TextureType\")` type (\"2d\")`  \nThe type of Canvas to create.\n\n[`PixelFormat`](pixelformat \"PixelFormat\")` format (\"normal\")`  \nThe format of the Canvas.\n\n[`boolean`](boolean \"boolean\")` readable`  \nWhether the Canvas is [readable](texture-isreadable \"Texture:isReadable\") (drawable and accessible in a [Shader](shader \"Shader\")). True by default for regular formats, false by default for depth/stencil formats.\n\n[`number`](number \"number\")` msaa (0)`  \nThe desired number of multisample antialiasing (MSAA) samples used when drawing to the Canvas.\n\n[`number`](number \"number\")` dpiscale (`[`love.graphics.getDPIScale`](love.graphics.getdpiscale \"love.graphics.getDPIScale\")`())`  \nThe [DPI scale factor](texture-getdpiscale \"Texture:getDPIScale\") of the Canvas, used when drawing to the Canvas as well as when drawing the Canvas to the screen.\n\n[`MipmapMode`](mipmapmode \"MipmapMode\")` mipmaps (\"none\")`  \nWhether the Canvas has mipmaps, and whether to automatically regenerate them if so.\n\n### Returns\n\n[`Canvas`](canvas \"Canvas\")` canvas`  \nA new Canvas with specified width and height.\n\n### Notes\n\nSome Canvas formats have higher system requirements than the default format. Use [love.graphics.getCanvasFormats](love.graphics.getcanvasformats \"love.graphics.getCanvasFormats\") to check for support.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nCreates a [volume or array](texturetype \"TextureType\") texture-type Canvas.\n\n### Synopsis\n\n``` lua\ncanvas = love.graphics.newCanvas( width, height, layers, settings )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nThe desired width of the Canvas.\n\n[`number`](number \"number\")` height`  \nThe desired height of the Canvas.\n\n[`number`](number \"number\")` layers`  \nThe number of array layers (if the Canvas is an Array Texture), or the volume depth (if the Canvas is a Volume Texture).\n\n[`table`](table \"table\")` settings`  \nA table containing the given fields:\n\n[`TextureType`](texturetype \"TextureType\")` type (\"array\")`  \nThe type of Canvas to create.\n\n[`PixelFormat`](pixelformat \"PixelFormat\")` format (\"normal\")`  \nThe format of the Canvas.\n\n[`boolean`](boolean \"boolean\")` readable`  \nWhether the Canvas is [readable](texture-isreadable \"Texture:isReadable\") (drawable and accessible in a [Shader](shader \"Shader\")). True by default for regular formats, false by default for depth/stencil formats.\n\n[`number`](number \"number\")` msaa (0)`  \nThe desired number of multisample antialiasing (MSAA) samples used when drawing to the Canvas.\n\n[`number`](number \"number\")` dpiscale (`[`love.graphics.getDPIScale`](love.graphics.getdpiscale \"love.graphics.getDPIScale\")`())`  \nThe [DPI scale factor](texture-getdpiscale \"Texture:getDPIScale\") of the Canvas, used when drawing to the Canvas as well as when drawing the Canvas to the screen.\n\n[`MipmapMode`](mipmapmode \"MipmapMode\")` mipmaps (\"none\")`  \nWhether the Canvas has mipmaps, and whether to automatically regenerate them if so.\n\n### Returns\n\n[`Canvas`](canvas \"Canvas\")` canvas`  \nA new Canvas with specified width and height.\n\n### Notes\n\nNot all texture types are supported by all systems. [love.graphics.getTextureTypes](love.graphics.gettexturetypes \"love.graphics.getTextureTypes\") can check for support.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier or later versions.\n\n### Synopsis\n\n``` lua\ncanvas = love.graphics.newCanvas( width, height, format )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width (window_width)`  \nThe desired width of the Canvas.\n\n[`number`](number \"number\")` height (window_height)`  \nThe desired height of the Canvas.\n\n[`CanvasFormat`](canvasformat \"CanvasFormat\")` format (\"normal\")`  \nThe desired texture format of the Canvas.\n\n### Returns\n\n[`Canvas`](canvas \"Canvas\")` canvas`  \nA new Canvas with specified width and height.\n\n### Notes\n\nSome Canvas formats have higher system requirements than the default format. Use [love.graphics.getCanvasFormats](love.graphics.getcanvasformats \"love.graphics.getCanvasFormats\") to check for support.\n\n## Function\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier or later versions.\n\n### Synopsis\n\n``` lua\ncanvas = love.graphics.newCanvas( width, height, format, msaa )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width (window_width)`  \nThe desired width of the Canvas.\n\n[`number`](number \"number\")` height (window_height)`  \nThe desired height of the Canvas.\n\n[`CanvasFormat`](canvasformat \"CanvasFormat\")` format (\"normal\")`  \nThe desired texture format of the Canvas.\n\n[`number`](number \"number\")` msaa (0)`  \nThe desired number of multisample antialiasing (MSAA) samples used when drawing to the Canvas.\n\n### Returns\n\n[`Canvas`](canvas \"Canvas\")` canvas`  \nA new Canvas with specified width and height.\n\n## Notes\n\n- Not all texture types are supported by all systems. [love.graphics.getTextureTypes](love.graphics.gettexturetypes \"love.graphics.getTextureTypes\") can check for support.\n- Some Canvas formats have higher system requirements than the default format. Use [love.graphics.getCanvasFormats](love.graphics.getcanvasformats \"love.graphics.getCanvasFormats\") to check for support.\n- The supported maximum number of MSAA samples varies depending on the system. Use [love.graphics.getSystemLimits](love.graphics.getsystemlimits \"love.graphics.getSystemLimits\") to check.\n- If the number of MSAA samples specified is greater than the maximum supported by the system, the Canvas will still be created but only using the maximum supported amount (**this includes 0.**)\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Canvas](canvas \"Canvas\")\n- [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newCanvas](https://love2d.org/wiki/love.graphics.newCanvas)"
- name: love.graphics.newCubeImage
  id: love.graphics.newcubeimage
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.newCubeImage\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new [cubemap](texturetype \"TextureType\") [Image](image \"Image\").\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\nCubemap images have 6 faces (sides) which represent a cube. They can't be rendered directly, they can only be used in [Shader](shader \"Shader\") code (and sent to the shader via [Shader:send](shader-send \"Shader:send\")).\n\nTo use a cubemap image in a Shader, it must be declared as a `CubeImage` or `samplerCube` type (instead of `Image` or `sampler2D`). The `Texel(CubeImage image, vec3 direction)` shader function must be used to get pixel colors from the cubemap. The vec3 argument is a normalized direction from the center of the cube, rather than explicit texture coordinates.\n\nEach face in a cubemap image must have square dimensions.\n\nFor variants of this function which accept a single image containing multiple cubemap faces, they must be laid out in one of the following forms in the image:\n\n``` lua\n   +y\n+z +x -z\n   -y\n   -x\n```\n\nor:\n\n``` lua\n   +y\n-x +z +x -z\n   -y\n```\n\nor:\n\n``` lua\n+x\n-x\n+y\n-y\n+z\n-z\n```\n\nor:\n\n``` lua\n+x -x +y -y +z -z\n```\n\n## Function\n\nCreates a cubemap Image given a single image file containing multiple cube faces.\n\n### Synopsis\n\n``` lua\nimage = love.graphics.newCubeImage( filename, settings )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filepath to a cubemap image file (or a [File](file \"File\"), [FileData](filedata \"FileData\"), or [ImageData](imagedata \"ImageData\")).\n\n[`table`](table \"table\")` settings (nil)`  \nOptional table of settings to configure the cubemap image, containing the following fields:\n\n[`boolean`](boolean \"boolean\")` mipmaps (false)`  \nTrue to make the image use mipmaps, false to disable them. Mipmaps will be automatically generated if the image isn't a [compressed texture](pixelformat \"PixelFormat\") format.\n\n[`boolean`](boolean \"boolean\")` linear (false)`  \nTrue to treat the image's pixels as linear instead of sRGB, when [gamma correct rendering](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") is enabled. Most images are authored as sRGB.\n\n### Returns\n\n[`Image`](image \"Image\")` image`  \nAn cubemap Image object.\n\n## Function\n\nCreates a cubemap Image given a different image file for each cube face.\n\n### Synopsis\n\n``` lua\nimage = love.graphics.newCubeImage( faces, settings )\n```\n\n### Arguments\n\n[`table`](table \"table\")` faces`  \nA table containing 6 filepaths to images (or [File](file \"File\"), [FileData](filedata \"FileData\"), [ImageData](imagedata \"ImageData\"), or [CompressedImageData](compressedimagedata \"CompressedImageData\") objects), in an array. Each face image must have the same dimensions. A table of tables can also be given, where each sub-table contains all mipmap levels for the cube face index of that sub-table.\n\n[`table`](table \"table\")` settings (nil)`  \nOptional table of settings to configure the cubemap image, containing the following fields:\n\n[`boolean`](boolean \"boolean\")` mipmaps (false)`  \nTrue to make the image use mipmaps, false to disable them. Mipmaps will be automatically generated if the image isn't a [compressed texture](pixelformat \"PixelFormat\") format.\n\n[`boolean`](boolean \"boolean\")` linear (false)`  \nTrue to treat the image's pixels as linear instead of sRGB, when [gamma correct rendering](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") is enabled. Most images are authored as sRGB.\n\n### Returns\n\n[`Image`](image \"Image\")` image`  \nAn cubemap Image object.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Image](image \"Image\")\n- [TextureType](texturetype \"TextureType\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newCubeImage](https://love2d.org/wiki/love.graphics.newCubeImage)"
- name: love.graphics.newFont
  id: love.graphics.newfont
  summary: Creates a new Font from a TrueType Font or BMFont file
  description: "# love.graphics.newFont\n\nCreates a new [Font](font \"Font\") from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object.\n\nAll variants which accept a filename can also accept a [Data](data \"Data\") object instead.\n\n  \n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\nCreate a new BMFont or TrueType font.\n\n### Synopsis\n\n``` lua\nfont = love.graphics.newFont( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filepath to the BMFont or TrueType font file.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nA Font object which can be used to draw text on screen.\n\n### Notes\n\nIf the file is a TrueType font, it will be size 12. Use the variant below to create a TrueType font with a custom size.\n\n## Function\n\nCreate a new TrueType font.\n\n### Synopsis\n\n``` lua\nfont = love.graphics.newFont( filename, size, hinting, dpiscale )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filepath to the TrueType font file.\n\n[`number`](number \"number\")` size`  \nThe size of the font in pixels.\n\n[`HintingMode`](hintingmode \"HintingMode\")` hinting (\"normal\")` Available since 0.10.0  \nTrue Type hinting mode.\n\n  \n\n[`number`](number \"number\")` dpiscale (`[`love.graphics.getDPIScale`](love.graphics.getdpiscale \"love.graphics.getDPIScale\")`())` Available since 11.0  \nThe [DPI scale factor](font-getdpiscale \"Font:getDPIScale\") of the font.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nA Font object which can be used to draw text on screen.\n\n## Function\n\nCreate a new BMFont.\n\n### Synopsis\n\n``` lua\nfont = love.graphics.newFont( filename, imagefilename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filepath to the BMFont file.\n\n[`string`](string \"string\")` imagefilename`  \nThe filepath to the BMFont's image file. If this argument is omitted, the path specified inside the BMFont file will be used.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nA Font object which can be used to draw text on screen.\n\n## Function\n\nCreate a new instance of the default font (Vera Sans) with a custom size.\n\n### Synopsis\n\n``` lua\nfont = love.graphics.newFont( size, hinting, dpiscale )\n```\n\n### Arguments\n\n[`number`](number \"number\")` size (12)`  \nThe size of the font in pixels.\n\n&nbsp;\n\n[`HintingMode`](hintingmode \"HintingMode\")` hinting (\"normal\")` Available since 0.10.0  \nTrue Type hinting mode.\n\n  \n\n[`number`](number \"number\")` dpiscale (`[`love.graphics.getDPIScale`](love.graphics.getdpiscale \"love.graphics.getDPIScale\")`())` Available since 11.0  \nThe [DPI scale factor](font-getdpiscale \"Font:getDPIScale\") of the font.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nA Font object which can be used to draw text on screen.\n\n## Examples\n\n### Use newFont to draw a custom styled text\n\n``` lua\n-- Create a ttf file font with a custom size of 20 pixels.\nmainFont = love.graphics.newFont(\"anyfont.ttf\", 20)\n \nfunction love.draw() \n    -- Setting the font so that it is used when drawning the string.\n    love.graphics.setFont(mainFont)\n \n    -- Draws \"Hello world!\" at position x: 100, y: 200 with the custom font applied.\n    love.graphics.print(\"Hello world!\", 100, 200)\nend\n```\n\n## See Also\n\n- [Font](font \"Font\")\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setFont](love.graphics.setfont \"love.graphics.setFont\")\n- [love.graphics.setNewFont](love.graphics.setnewfont \"love.graphics.setNewFont\")\n- [love.graphics.newImageFont](love.graphics.newimagefont \"love.graphics.newImageFont\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newFont](https://love2d.org/wiki/love.graphics.newFont)"
- name: love.graphics.newFramebuffer
  id: love.graphics.newframebuffer
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.8.0 It has been renamed to love.graphics.newCanvas
  description: "# love.graphics.newFramebuffer\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed to [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\").\n\nCreates a new framebuffer object for offscreen rendering.\n\nVersions prior to 0.8.0 have Framebuffers that are susceptible to [power of 2 syndrome](https://love2d.org/wiki/PO2_Syndrome \"PO2 Syndrome\").\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\nframebuffer = love.graphics.newFramebuffer( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Framebuffer`](framebuffer \"Framebuffer\")` framebuffer`  \nA new framebuffer with width/height equal to the window width/height.\n\n## Function\n\n### Synopsis\n\n``` lua\nframebuffer = love.graphics.newFramebuffer( width, height )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nThe desired width of the framebuffer.\n\n[`number`](number \"number\")` height`  \nThe desired height of the framebuffer.\n\n### Returns\n\n[`Framebuffer`](framebuffer \"Framebuffer\")` framebuffer`  \nA new framebuffer with specified width and height.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Framebuffer](framebuffer \"Framebuffer\")\n- [love.graphics.setRenderTarget](love.graphics.setrendertarget \"love.graphics.setRenderTarget\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newFramebuffer](https://love2d.org/wiki/love.graphics.newFramebuffer)"
- name: love.graphics.newImage
  id: love.graphics.newimage
  summary: Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image
  description: "# love.graphics.newImage\n\nCreates a new [Image](image \"Image\") from a filepath, [FileData](filedata \"FileData\"), an [ImageData](imagedata \"ImageData\"), or a [CompressedImageData](compressedimagedata \"CompressedImageData\"), and optionally generates or specifies mipmaps for the image.\n\nVersion [11.0](https://love2d.org/wiki/11.0 \"11.0\") updated love.graphics.newImage to treat file names ending with \"@2x\", \"@3x\", etc. as a pixel density scale factor if none is explicitly supplied.\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\nimage = love.graphics.newImage( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filepath to the image file.\n\n### Returns\n\n[`Image`](image \"Image\")` image`  \nAn Image object which can be drawn on screen.\n\n## Function\n\n### Synopsis\n\n``` lua\nimage = love.graphics.newImage( imageData )\n```\n\n### Arguments\n\n[`ImageData`](imagedata \"ImageData\")` imageData`  \nAn ImageData object. The Image will use this ImageData to reload itself when [love.window.setMode](love.window.setmode \"love.window.setMode\") is called.\n\n### Returns\n\n[`Image`](image \"Image\")` image`  \nAn Image object which can be drawn on screen.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nimage = love.graphics.newImage( compressedImageData )\n```\n\n### Arguments\n\n[`CompressedImageData`](compressedimagedata \"CompressedImageData\")` compressedImageData`  \nA CompressedImageData object. The Image will use this CompressedImageData to reload itself when [love.window.setMode](love.window.setmode \"love.window.setMode\") is called.\n\n### Returns\n\n[`Image`](image \"Image\")` image`  \nAn Image object which can be drawn on screen.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nimage = love.graphics.newImage( filename, flags )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filepath to the image file (or a [FileData](filedata \"FileData\") or [ImageData](imagedata \"ImageData\") or [CompressedImageData](compressedimagedata \"CompressedImageData\") or [ByteData](bytedata \"ByteData\") object).\n\n[`table`](table \"table\")` flags`  \nA table containing the following fields:\n\n[`boolean`](boolean \"boolean\")` linear (false)`  \nTrue if the image's pixels should be interpreted as being linear RGB rather than sRGB-encoded, if [gamma-correct rendering](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") is enabled. Has no effect otherwise.\n\n[`boolean or table`](https://love2d.org/w/index.php?title=boolean_or_table&action=edit&redlink=1 \"boolean or table (page does not exist)\")` mipmaps (false)`  \nIf true, mipmaps for the image will be automatically generated (or taken from the images's file if possible, if the image originated from a [CompressedImageData](compressedimagedata \"CompressedImageData\")). If this value is a table, it should contain a list of other filenames of images of the same format that have progressively half-sized dimensions, all the way down to 1x1. Those images will be used as this Image's mipmap levels.\n\n### Returns\n\n[`Image`](image \"Image\")` image`  \nA new Image object which can be drawn on screen.\n\n## Function\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier or later versions.\n\n### Synopsis\n\n``` lua\nimage = love.graphics.newImage( filename, format )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filepath to the image file (or a [FileData](filedata \"FileData\") or [ImageData](imagedata \"ImageData\") or [CompressedImageData](compressedimagedata \"CompressedImageData\") object.)\n\n[`TextureFormat`](textureformat \"TextureFormat\")` format`  \nThe format to interpret the image's data as.\n\n### Returns\n\n[`Image`](image \"Image\")` image`  \nAn Image object which can be drawn on screen.\n\n## Examples\n\n### Draw a bunny on the screen\n\n``` lua\nfunction love.load()\n    bunny = love.graphics.newImage(\"MyBunny.png\")\nend\nfunction love.draw()\n    love.graphics.draw(bunny, 0, 0)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Image](image \"Image\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newImage](https://love2d.org/wiki/love.graphics.newImage)"
- name: love.graphics.newImageFont
  id: love.graphics.newimagefont
  summary: Creates a new Font by loading a specifically formatted image
  description: "# love.graphics.newImageFont\n\nCreates a new [Font](font \"Font\") by loading a [specifically formatted](imagefontformat \"ImageFontFormat\") image.\n\nIn versions prior to [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\"), LÖVE expects ISO 8859-1 encoding for the glyphs string.\n\n  \n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\nfont = love.graphics.newImageFont( filename, glyphs )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filepath to the image file.\n\n[`string`](string \"string\")` glyphs`  \nA string of the characters in the image in order from left to right.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nA Font object which can be used to draw text on screen.\n\n## Function\n\n### Synopsis\n\n``` lua\nfont = love.graphics.newImageFont( imagedata, glyphs )\n```\n\n### Arguments\n\n[`ImageData`](imagedata \"ImageData\")` imageData`  \nThe ImageData object to create the font from.\n\n[`string`](string \"string\")` glyphs`  \nA string of the characters in the image in order from left to right.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nA Font object which can be used to draw text on screen.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nfont = love.graphics.newImageFont( filename, glyphs, extraspacing )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filepath to the image file.\n\n[`string`](string \"string\")` glyphs`  \nA string of the characters in the image in order from left to right.\n\n[`number`](number \"number\")` extraspacing`  \nAdditional spacing (positive or negative) to apply to each glyph in the Font.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nA Font object which can be used to draw text on screen.\n\n## Notes\n\nInstead of using this function, consider using a BMFont generator such as [bmfont](http://www.angelcode.com/products/bmfont/), [littera](http://kvazars.com/littera/), or [bmGlyph](https://www.bmglyph.com/) with [love.graphics.newFont](love.graphics.newfont \"love.graphics.newFont\"). Because slime said it was better.\n\n## Examples\n\nCreating a simple image font. Download this [image file](https://love2d.org/wiki/File:font_example.png \"File:font example.png\") which will be used by LÖVE to create the font. Obviously when you want to create a font for your game you want to make the background transparent.\n\n``` lua\nlocal font = love.graphics.newImageFont( 'font_example.png', ' ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789' )\nfunction love.draw()\n    love.graphics.setFont( font )\n    love.graphics.print( 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789', 16, 16 )\n    love.graphics.print( 'Text is now drawn using the font', 16, 32 )\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Font](font \"Font\")\n- [Image Font Format](imagefontformat \"ImageFontFormat\")\n\n  \n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newImageFont](https://love2d.org/wiki/love.graphics.newImageFont)"
- name: love.graphics.newMesh
  id: love.graphics.newmesh
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.graphics.newMesh\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new [Mesh](mesh \"Mesh\").\n\nUse [Mesh:setTexture](mesh-settexture \"Mesh:setTexture\") if the Mesh should be textured with an [Image](image \"Image\") or [Canvas](canvas \"Canvas\") when it's drawn.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color and byte component values were within the range of 0 to 255 instead of 0 to 1.\n\n  \n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\nCreates a standard Mesh with the specified vertices.\n\n### Synopsis\n\n``` lua\nmesh = love.graphics.newMesh( vertices, mode, usage )\n```\n\n### Arguments\n\n[`table`](table \"table\")` vertices`  \nThe table filled with vertex information tables for each vertex as follows:\n\n[`number`](number \"number\")` [1]`  \nThe position of the vertex on the x-axis.\n\n[`number`](number \"number\")` [2]`  \nThe position of the vertex on the y-axis.\n\n[`number`](number \"number\")` [3] (0)`  \nThe u texture coordinate of the vertex. Texture coordinates are normally in the range of \\[0, 1\\], but can be greater or less (see [WrapMode](wrapmode \"WrapMode\").)\n\n[`number`](number \"number\")` [4] (0)`  \nThe v texture coordinate of the vertex. Texture coordinates are normally in the range of \\[0, 1\\], but can be greater or less (see [WrapMode](wrapmode \"WrapMode\").)\n\n[`number`](number \"number\")` [5] (1)`  \nThe red component of the vertex color.\n\n[`number`](number \"number\")` [6] (1)`  \nThe green component of the vertex color.\n\n[`number`](number \"number\")` [7] (1)`  \nThe blue component of the vertex color.\n\n[`number`](number \"number\")` [8] (1)`  \nThe alpha component of the vertex color.\n\n[`MeshDrawMode`](meshdrawmode \"MeshDrawMode\")` mode (\"fan\")`  \nHow the vertices are used when drawing. The default mode \"fan\" is sufficient for simple convex polygons.\n\n[`SpriteBatchUsage`](spritebatchusage \"SpriteBatchUsage\")` usage (\"dynamic\")`  \nThe expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.\n\n### Returns\n\n[`Mesh`](mesh \"Mesh\")` mesh`  \nThe new mesh.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\nCreates a standard Mesh with the specified number of vertices.\n\n### Synopsis\n\n``` lua\nmesh = love.graphics.newMesh( vertexcount, mode, usage )\n```\n\n### Arguments\n\n[`number`](number \"number\")` vertexcount`  \nThe total number of vertices the Mesh will use. Each vertex is initialized to `{0,0, 0,0, 1,1,1,1}`.\n\n[`MeshDrawMode`](meshdrawmode \"MeshDrawMode\")` mode (\"fan\")`  \nHow the vertices are used when drawing. The default mode \"fan\" is sufficient for simple convex polygons.\n\n[`SpriteBatchUsage`](spritebatchusage \"SpriteBatchUsage\")` usage (\"dynamic\")`  \nThe expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.\n\n### Returns\n\n[`Mesh`](mesh \"Mesh\")` mesh`  \nThe new mesh.\n\n### Notes\n\n[Mesh:setVertices](mesh-setvertices \"Mesh:setVertices\") or [Mesh:setVertex](mesh-setvertex \"Mesh:setVertex\") and [Mesh:setDrawRange](mesh-setdrawrange \"Mesh:setDrawRange\") can be used to specify vertex information once the Mesh is created.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\nCreates a Mesh with custom vertex attributes and the specified vertex data.\n\n### Synopsis\n\n``` lua\nmesh = love.graphics.newMesh( vertexformat, vertices, mode, usage )\n```\n\n### Arguments\n\n[`table`](table \"table\")` vertexformat`  \nA table in the form of `{attribute, ...}`. Each attribute is a table which specifies a custom vertex attribute used for each vertex.\n\n[`table`](table \"table\")` attribute`  \nA table containing the attribute's name, it's [data type](attributedatatype \"AttributeDataType\"), and the number of components in the attribute, in the form of `{name, datatype, components}`.\n\n[`table`](table \"table\")` ...`  \nAdditional vertex attribute format tables.\n\n&nbsp;\n\n[`table`](table \"table\")` vertices`  \nThe table filled with vertex information tables for each vertex, in the form of `{vertex, ...}` where each vertex is a table in the form of `{attributecomponent, ...}`.\n\n[`number`](number \"number\")` attributecomponent`  \nThe first component of the first vertex attribute in the vertex.\n\n[`number`](number \"number\")` ...`  \nAdditional components of all vertex attributes in the vertex.\n\n&nbsp;\n\n[`MeshDrawMode`](meshdrawmode \"MeshDrawMode\")` mode (\"fan\")`  \nHow the vertices are used when drawing. The default mode \"fan\" is sufficient for simple convex polygons.\n\n[`SpriteBatchUsage`](spritebatchusage \"SpriteBatchUsage\")` usage (\"dynamic\")`  \nThe expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.\n\n### Returns\n\n[`Mesh`](mesh \"Mesh\")` mesh`  \nThe new mesh.\n\n### Notes\n\nThe values in each vertex table are in the same order as the vertex attributes in the specified vertex format. If no value is supplied for a specific vertex attribute component, it will be set to a default value of 0 if its [data type](attributedatatype \"AttributeDataType\") is \"float\", or 1 if its data type is \"byte\".\n\nIf the data type of an attribute is \"float\", components can be in the range 1 to 4, if the data type is \"byte\" it must be 4.\n\nIf a custom vertex attribute uses the name \"VertexPosition\", \"VertexTexCoord\", or \"VertexColor\", then the vertex data for that vertex attribute will be used for the standard vertex positions, texture coordinates, or vertex colors respectively, when drawing the Mesh. Otherwise a [Vertex Shader](shader \"Shader\") is required in order to make use of the vertex attribute when the Mesh is drawn.\n\nA Mesh **must** have a \"VertexPosition\" attribute in order to be drawn, but it can be attached from a different Mesh via [Mesh:attachAttribute](mesh-attachattribute \"Mesh:attachAttribute\").\n\nTo use a custom named vertex attribute in a Vertex Shader, it must be declared as an `attribute` variable of the same name. Variables can be sent from Vertex Shader code to Pixel Shader code by making a `varying` variable. For example:\n\n*Vertex Shader code*\n\n``` lua\nattribute vec2 CoolVertexAttribute;\n \nvarying vec2 CoolVariable;\n \nvec4 position(mat4 transform_projection, vec4 vertex_position)\n{\n    CoolVariable = CoolVertexAttribute;\n    return transform_projection * vertex_position;\n}\n```\n\n*Pixel Shader code*\n\n``` lua\nvarying vec2 CoolVariable;\n \nvec4 effect(vec4 color, Image tex, vec2 texcoord, vec2 pixcoord)\n{\n    vec4 texcolor = Texel(tex, texcoord + CoolVariable);\n    return texcolor * color;\n}\n```\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\nCreates a Mesh with custom vertex attributes and the specified number of vertices.\n\n### Synopsis\n\n``` lua\nmesh = love.graphics.newMesh( vertexformat, vertexcount, mode, usage )\n```\n\n### Arguments\n\n[`table`](table \"table\")` vertexformat`  \nA table in the form of `{attribute, ...}`. Each attribute is a table which specifies a custom vertex attribute used for each vertex.\n\n[`table`](table \"table\")` attribute`  \nA table containing the attribute's name, it's [data type](attributedatatype \"AttributeDataType\"), and the number of components in the attribute, in the form of `{name, datatype, components}`.\n\n[`table`](table \"table\")` ...`  \nAdditional vertex attribute format tables.\n\n&nbsp;\n\n[`number`](number \"number\")` vertexcount`  \nThe total number of vertices the Mesh will use.\n\n[`MeshDrawMode`](meshdrawmode \"MeshDrawMode\")` mode (\"fan\")`  \nHow the vertices are used when drawing. The default mode \"fan\" is sufficient for simple convex polygons.\n\n[`SpriteBatchUsage`](spritebatchusage \"SpriteBatchUsage\")` usage (\"dynamic\")`  \nThe expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.\n\n### Returns\n\n[`Mesh`](mesh \"Mesh\")` mesh`  \nThe new mesh.\n\n### Notes\n\nEach vertex attribute component is initialized to 0 if its data type is \"float\", or 1 if its data type is \"byte\". [Mesh:setVertices](mesh-setvertices \"Mesh:setVertices\") or [Mesh:setVertex](mesh-setvertex \"Mesh:setVertex\") and [Mesh:setDrawRange](mesh-setdrawrange \"Mesh:setDrawRange\") can be used to specify vertex information once the Mesh is created.\n\nIf the data type of an attribute is \"float\", components can be in the range 1 to 4, if the data type is \"byte\" it must be 4.\n\nIf a custom vertex attribute uses the name \"VertexPosition\", \"VertexTexCoord\", or \"VertexColor\", then the vertex data for that vertex attribute will be used for the standard vertex positions, texture coordinates, or vertex colors respectively, when drawing the Mesh. Otherwise a [Vertex Shader](shader \"Shader\") is required in order to make use of the vertex attribute when the Mesh is drawn.\n\nA Mesh **must** have a \"VertexPosition\" attribute in order to be drawn, but it can be attached from a different Mesh via [Mesh:attachAttribute](mesh-attachattribute \"Mesh:attachAttribute\").\n\n## Function\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nmesh = love.graphics.newMesh( vertices, texture, mode )\n```\n\n### Arguments\n\n[`table`](table \"table\")` vertices`  \nThe table filled with vertex information tables for each vertex as follows:\n\n[`number`](number \"number\")` [1]`  \nThe position of the vertex on the x-axis.\n\n[`number`](number \"number\")` [2]`  \nThe position of the vertex on the y-axis.\n\n[`number`](number \"number\")` [3]`  \nThe u texture coordinate. Texture coordinates are normally in the range of \\[0, 1\\], but can be greater or less (see [WrapMode](wrapmode \"WrapMode\").)\n\n[`number`](number \"number\")` [4]`  \nThe v texture coordinate. Texture coordinates are normally in the range of \\[0, 1\\], but can be greater or less (see [WrapMode](wrapmode \"WrapMode\").)\n\n[`number`](number \"number\")` [5] (255)`  \nThe red color component.\n\n[`number`](number \"number\")` [6] (255)`  \nThe green color component.\n\n[`number`](number \"number\")` [7] (255)`  \nThe blue color component.\n\n[`number`](number \"number\")` [8] (255)`  \nThe alpha color component.\n\n&nbsp;\n\n[`Texture`](texture \"Texture\")` texture (nil)`  \nThe [Image](image \"Image\") or [Canvas](canvas \"Canvas\") to use when drawing the Mesh. May be nil to use no texture.\n\n[`MeshDrawMode`](meshdrawmode \"MeshDrawMode\")` mode (\"fan\")`  \nHow the vertices are used when drawing. The default mode \"fan\" is sufficient for simple convex polygons.\n\n### Returns\n\n[`Mesh`](mesh \"Mesh\")` mesh`  \nThe new mesh.\n\n## Function\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier or later versions.\n\n### Synopsis\n\n``` lua\nmesh = love.graphics.newMesh( vertexcount, texture, mode )\n```\n\n### Arguments\n\n[`number`](number \"number\")` vertexcount`  \nThe total number of vertices the Mesh will use. Each vertex is initialized to `{0,0, 0,0, 255,255,255,255}`.\n\n[`Texture`](texture \"Texture\")` texture (nil)`  \nThe [Image](image \"Image\") or [Canvas](canvas \"Canvas\") to use when drawing the Mesh. May be nil to use no texture.\n\n[`MeshDrawMode`](meshdrawmode \"MeshDrawMode\")` mode (\"fan\")`  \nHow the vertices are used when drawing. The default mode \"fan\" is sufficient for simple convex polygons.\n\n### Returns\n\n[`Mesh`](mesh \"Mesh\")` mesh`  \nThe new mesh.\n\n### Notes\n\n[Mesh:setVertices](mesh-setvertices \"Mesh:setVertices\") or [Mesh:setVertex](mesh-setvertex \"Mesh:setVertex\") and [Mesh:setDrawRange](mesh-setdrawrange \"Mesh:setDrawRange\") can be used to specify vertex information once the Mesh is created.\n\n## Examples\n\n### Creates and draws a Mesh identical to a normal drawn image but with different colors at each corner\n\n``` lua\nfunction love.load()\n    image = love.graphics.newImage(\"pig.png\")\n \n    local vertices = {\n        {\n            -- top-left corner (red-tinted)\n            0, 0, -- position of the vertex\n            0, 0, -- texture coordinate at the vertex position\n            1, 0, 0, -- color of the vertex\n        },\n        {\n            -- top-right corner (green-tinted)\n            image:getWidth(), 0,\n            1, 0, -- texture coordinates are in the range of [0, 1]\n            0, 1, 0\n        },\n        {\n            -- bottom-right corner (blue-tinted)\n            image:getWidth(), image:getHeight(),\n            1, 1,\n            0, 0, 1\n        },\n        {\n            -- bottom-left corner (yellow-tinted)\n            0, image:getHeight(),\n            0, 1,\n            1, 1, 0\n        },\n    }\n \n    -- the Mesh DrawMode \"fan\" works well for 4-vertex Meshes.\n    mesh = love.graphics.newMesh(vertices, \"fan\")\n        mesh:setTexture(image)\nend\n \nfunction love.draw()\n    love.graphics.draw(mesh, 0, 0)\nend\n```\n\n### Creates and draws a textured circle with a red tint at the center.\n\n``` lua\nfunction CreateTexturedCircle(image, segments)\n    segments = segments or 40\n    local vertices = {}\n \n    -- The first vertex is at the center, and has a red tint. We're centering the circle around the origin (0, 0).\n    table.insert(vertices, {0, 0, 0.5, 0.5, 255, 0, 0})\n \n    -- Create the vertices at the edge of the circle.\n    for i=0, segments do\n        local angle = (i / segments) * math.pi * 2\n \n        -- Unit-circle.\n        local x = math.cos(angle)\n        local y = math.sin(angle)\n \n        -- Our position is in the range of [-1, 1] but we want the texture coordinate to be in the range of [0, 1].\n        local u = (x + 1) * 0.5\n        local v = (y + 1) * 0.5\n \n        -- The per-vertex color defaults to white.\n        table.insert(vertices, {x, y, u, v})\n    end\n \n    -- The \"fan\" draw mode is perfect for our circle.\n    local mesh = love.graphics.newMesh(vertices, \"fan\")\n        mesh:setTexture(image)\n \n        return mesh\nend\n \nfunction love.load()\n    image = love.graphics.newImage(\"pig.png\")\n    mesh = CreateTexturedCircle(image)\nend\n \nfunction love.draw()\n    local radius = 100\n    local mx, my = love.mouse.getPosition()\n \n    -- We created a unit-circle, so we can use the scale parameter for the radius directly.\n    love.graphics.draw(mesh, mx, my, 0, radius, radius)\nend\n```\n\n### Creates a circle and draws it more efficiently than love.graphics.circle.\n\n``` lua\nfunction CreateCircle(segments)\n    segments = segments or 40\n    local vertices = {}\n \n    -- The first vertex is at the origin (0, 0) and will be the center of the circle.\n    table.insert(vertices, {0, 0})\n \n    -- Create the vertices at the edge of the circle.\n    for i=0, segments do\n        local angle = (i / segments) * math.pi * 2\n \n        -- Unit-circle.\n        local x = math.cos(angle)\n        local y = math.sin(angle)\n \n        table.insert(vertices, {x, y})\n    end\n \n    -- The \"fan\" draw mode is perfect for our circle.\n    return love.graphics.newMesh(vertices, \"fan\")\nend\n \nfunction love.load()\n    mesh = CreateCircle()\nend\n \nfunction love.draw()\n    local radius = 100\n    local mx, my = love.mouse.getPosition()\n \n    -- We created a unit-circle, so we can use the scale parameter for the radius directly.\n    love.graphics.draw(mesh, mx, my, 0, radius, radius)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Mesh](mesh \"Mesh\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newMesh](https://love2d.org/wiki/love.graphics.newMesh)"
- name: love.graphics.newParticleSystem
  id: love.graphics.newparticlesystem
  summary: Creates a new ParticleSystem
  description: "# love.graphics.newParticleSystem\n\nCreates a new [ParticleSystem](particlesystem \"ParticleSystem\").\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\nsystem = love.graphics.newParticleSystem( image, buffer )\n```\n\n### Arguments\n\n[`Image`](image \"Image\")` image`  \nThe image to use.\n\n[`number`](number \"number\")` buffer (1000)`  \nThe max number of particles at the same time.\n\n### Returns\n\n[`ParticleSystem`](particlesystem \"ParticleSystem\")` system`  \nA new ParticleSystem.\n\n## Function\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nsystem = love.graphics.newParticleSystem( texture, buffer )\n```\n\n### Arguments\n\n[`Texture`](texture \"Texture\")` texture`  \nThe texture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) to use.\n\n[`number`](number \"number\")` buffer (1000)`  \nThe max number of particles at the same time.\n\n### Returns\n\n[`ParticleSystem`](particlesystem \"ParticleSystem\")` system`  \nA new ParticleSystem.\n\n## Examples\n\n### Creation and usage of a particle system\n\nYou can use the [LÖVE logo](https://love2d.org/wiki/File:Love-game-logo-256x256.png \"File:Love-game-logo-256x256.png\") as an example image.\n\n``` lua\nfunction love.load()\n    local img = love.graphics.newImage('logo.png')\n \n    psystem = love.graphics.newParticleSystem(img, 32)\n    psystem:setParticleLifetime(2, 5) -- Particles live at least 2s and at most 5s.\n    psystem:setEmissionRate(5)\n    psystem:setSizeVariation(1)\n    psystem:setLinearAcceleration(-20, -20, 20, 20) -- Random movement in all directions.\n    psystem:setColors(1, 1, 1, 1, 1, 1, 1, 0) -- Fade to transparency.\nend\n \nfunction love.draw()\n    -- Draw the particle system at the center of the game window.\n    love.graphics.draw(psystem, love.graphics.getWidth() * 0.5, love.graphics.getHeight() * 0.5)\nend\n \nfunction love.update(dt)\n    psystem:update(dt)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [ParticleSystem:clone](particlesystem-clone \"ParticleSystem:clone\")\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newParticleSystem](https://love2d.org/wiki/love.graphics.newParticleSystem)"
- name: love.graphics.newPixelEffect
  id: love.graphics.newpixeleffect
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.9.0 It has been renamed to love.graphics.newShader
  description: "# love.graphics.newPixelEffect\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [love.graphics.newShader](love.graphics.newshader \"love.graphics.newShader\").\n\nCreates a new PixelEffect object for hardware-accelerated pixel level effects.\n\nA PixelEffect contains at least one function, named `effect`, which is the effect itself, but it can contain additional functions.\n\n## Function\n\n### Synopsis\n\n``` lua\npixeleffect = love.graphics.newPixelEffect( code )\n```\n\n### Arguments\n\n[`string`](string \"string\")` code`  \nThe pixel effect code.\n\n### Returns\n\n[`PixelEffect`](pixeleffect \"PixelEffect\")` pixeleffect`  \nA PixelEffect object for use in drawing operations.\n\n## Effect Language\n\nPixel effects are not programmed in Lua, but by using a special effect language instead. The effect language is basically [GLSL 1.20](https://www.opengl.org/sdk/docs/manglsl/) ([specs](https://www.opengl.org/registry/doc/GLSLangSpec.Full.1.20.8.pdf)) with a few aliases added for existing types:\n\n|                    |                 |\n|--------------------|-----------------|\n| GLSL               | Effect language |\n| float              | number          |\n| sampler2D          | Image           |\n| uniform            | extern          |\n| texture2D(tex, uv) | Texel(tex, uv)  |\n\n## Effect Function\n\n### Synopsis\n\n``` lua\nvec4 effect( vec4 color, Image texture, vec2 texture_coords, vec2 screen_coords )\n```\n\n### Arguments\n\n[`vec4`](https://love2d.org/w/index.php?title=vec4&action=edit&redlink=1 \"vec4 (page does not exist)\")` color`  \nThe drawing color set with [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\").\n\n[`Image`](image \"Image\")` texture`  \nThe texture of the image or canvas being drawn.\n\n[`vec2`](https://love2d.org/w/index.php?title=vec2&action=edit&redlink=1 \"vec2 (page does not exist)\")` texture_coords`  \nCoordinates of the pixel relative to the texture. The y-axis of canvases are inverted. Coordinates (1,1) would be the top right corner of the canvas.\n\n[`vec2`](https://love2d.org/w/index.php?title=vec2&action=edit&redlink=1 \"vec2 (page does not exist)\")` screen_coords`  \nCoordinates of the pixel on the screen. Pixel coordinates are not normalized (unlike texture coordinates). (0.5, 0.5) is the bottom left of the screen.\n\n### Returns\n\n[`vec4`](https://love2d.org/w/index.php?title=vec4&action=edit&redlink=1 \"vec4 (page does not exist)\")` output_color`  \nThe color of the pixel.\n\n  \n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [PixelEffect](pixeleffect \"PixelEffect\")\n- [love.graphics.setPixelEffect](love.graphics.setpixeleffect \"love.graphics.setPixelEffect\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newPixelEffect](https://love2d.org/wiki/love.graphics.newPixelEffect)"
- name: love.graphics.newQuad
  id: love.graphics.newquad
  summary: Creates a new Quad
  description: "# love.graphics.newQuad\n\nCreates a new [Quad](quad \"Quad\").\n\nThe purpose of a Quad is to use a fraction of an image to draw objects, as opposed to drawing entire image. It is most useful for sprite sheets and atlases: in a sprite atlas, multiple sprites reside in same image, quad is used to draw a specific sprite from that image; in animated sprites with all frames residing in the same image, quad is used to draw specific frame from the animation.\n\n  \n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\nquad = love.graphics.newQuad( x, y, width, height, sw, sh )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe top-left position in the [Image](image \"Image\") along the x-axis.\n\n[`number`](number \"number\")` y`  \nThe top-left position in the [Image](image \"Image\") along the y-axis.\n\n[`number`](number \"number\")` width`  \nThe width of the Quad in the [Image](image \"Image\"). (Must be greater than 0.)\n\n[`number`](number \"number\")` height`  \nThe height of the Quad in the [Image](image \"Image\"). (Must be greater than 0.)\n\n[`number`](number \"number\")` sw`  \nThe reference width, the width of the [Image](image \"Image\"). (Must be greater than 0.)\n\n[`number`](number \"number\")` sh`  \nThe reference height, the height of the [Image](image \"Image\"). (Must be greater than 0.)\n\n### Returns\n\n[`Quad`](quad \"Quad\")` quad`  \nThe new Quad.\n\n## Examples\n\n### Use a Quad to display part of an Image:\n\n``` lua\nimg = love.graphics.newImage(\"mushroom-64x64.png\")\n \n-- Let's say we want to display only the top-left \n-- 32x32 quadrant of the Image:\ntop_left = love.graphics.newQuad(0, 0, 32, 32, img:getDimensions())\n \n-- And here is bottom left:\nbottom_left = love.graphics.newQuad(0, 32, 32, 32, img:getDimensions())\n \nfunction love.draw()\n    love.graphics.draw(img, top_left, 50, 50)\n    love.graphics.draw(img, bottom_left, 50, 200)\n    -- v0.8:\n    -- love.graphics.drawq(img, top_left, 50, 50)\n    -- love.graphics.drawq(img, bottom_left, 50, 200)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Quad](quad \"Quad\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newQuad](https://love2d.org/wiki/love.graphics.newQuad)"
- name: love.graphics.newScreenshot
  id: love.graphics.newscreenshot
  summary: Removed in LÖVE 11.0 It has been replaced by love.graphics.captureScreenshot
  description: "# love.graphics.newScreenshot\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been replaced by [love.graphics.captureScreenshot](love.graphics.capturescreenshot \"love.graphics.captureScreenshot\").\n\nCreates a screenshot and returns the image data.\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\nscreenshot = love.graphics.newScreenshot( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` screenshot`  \nThe image data of the screenshot.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nscreenshot = love.graphics.newScreenshot( copyAlpha )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` copyAlpha (false)`  \nWhether to include the screen's alpha channel in the ImageData. If false, the screenshot will be fully opaque.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` screenshot`  \nThe image data of the screenshot.\n\n## Examples\n\nCreate a new screenshot and write it to the save directory.\n\n``` lua\nfunction love.load()\n    love.filesystem.setIdentity('screenshot_example');\nend\n \nfunction love.keypressed()\n    local screenshot = love.graphics.newScreenshot();\n    screenshot:encode('png', os.time() .. '.png');\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [ImageData](imagedata \"ImageData\")\n- [ImageData:encode](imagedata-encode \"ImageData:encode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newScreenshot](https://love2d.org/wiki/love.graphics.newScreenshot)"
- name: love.graphics.newShader
  id: love.graphics.newshader
  summary: Available since LÖVE 0.9.0 It has been renamed from love.graphics.newPixelEffect
  description: "# love.graphics.newShader\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [love.graphics.newPixelEffect](love.graphics.newpixeleffect \"love.graphics.newPixelEffect\").\n\n  \n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\nCreates a new Shader object for hardware-accelerated vertex and pixel effects. A Shader contains either vertex shader code, pixel shader code, or both.\n\nShaders are small programs which are run on the graphics card when drawing. Vertex shaders are run once for each vertex (for example, an image has 4 vertices - one at each corner. A [Mesh](mesh \"Mesh\") might have many more.) Pixel shaders are run once for each pixel on the screen which the drawn object touches. Pixel shader code is executed after all the object's vertices have been processed by the vertex shader.\n\n## Function\n\n### Synopsis\n\n``` lua\nshader = love.graphics.newShader( code )\n```\n\n### Arguments\n\n[`string`](string \"string\")` code`  \nThe pixel shader or vertex shader code, or a filename pointing to a file with the code.\n\n### Returns\n\n[`Shader`](shader \"Shader\")` shader`  \nA Shader object for use in drawing operations.\n\n## Function\n\n### Synopsis\n\n``` lua\nshader = love.graphics.newShader( pixelcode, vertexcode )\n```\n\n### Arguments\n\n[`string`](string \"string\")` pixelcode`  \nThe pixel shader code, or a filename pointing to a file with the code.\n\n[`string`](string \"string\")` vertexcode`  \nThe vertex shader code, or a filename pointing to a file with the code.\n\n### Returns\n\n[`Shader`](shader \"Shader\")` shader`  \nA Shader object for use in drawing operations.\n\n### Notes\n\nThe pixelcode and vertexcode arguments can be in any order.\n\n## Shader Language\n\nShaders are not programmed in Lua, but by using a special shader language – GLSL, with a few aliases and a different entry point for convenience – instead. GLSL has very similar syntax to C. None of the aliases LÖVE provides are mandatory, but using `Texel` instead of `texture2D` is recommended since `Texel` works in all glsl versions, whereas `texture2D` does not work in GLSL 3.\n\n|                                |                      |\n|--------------------------------|----------------------|\n| GLSL                           | LÖVE shader language |\n| sampler2D                      | Image                |\n| sampler2DArray                 | ArrayImage           |\n| samplerCube                    | CubeImage            |\n| sampler3D                      | VolumeImage          |\n| texture2D(tex, uv) (in GLSL 1) | Texel(tex, uv)       |\n| texture(tex, uv) (in GLSL 3)   | Texel(tex, uv)       |\n| float                          | number (deprecated)  |\n| uniform                        | extern (deprecated)  |\n\n  \nThe version of GLSL used depends on whether the `#pragma language glsl3` line is added to the top of a shader file, as well as whether LÖVE is running on a desktop or mobile device:\n\n|                      |                                                                                    |                                                                                                     |\n|----------------------|------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------|\n| LÖVE shader language | desktop GLSL version                                                               | mobile GLSL version                                                                                 |\n| glsl1 (default)      | [GLSL 1.20](https://www.opengl.org/registry/doc/GLSLangSpec.Full.1.20.8.pdf)       | [GLSL ES 1.00](https://www.khronos.org/files/opengles_shading_language.pdf)                         |\n| glsl3                | [GLSL 3.30](https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.3.30.pdf) | [GLSL ES 3.00](https://www.khronos.org/registry/OpenGL/specs/es/3.0/GLSL_ES_Specification_3.00.pdf) |\n\nGLSL 3 is [not supported](graphicsfeature \"GraphicsFeature\") on some older systems. Use [love.graphics.getSupported](love.graphics.getsupported \"love.graphics.getSupported\") to check at run-time.\n\n  \nVertex shader code must contain at least one function, named `position`, which is the function that will produce transformed vertex positions of drawn objects in screen-space.\n\nPixel shader code must contain at least one function, named `effect`, which is the function that will produce the color which is blended onto the screen for each pixel a drawn object touches.\n\nLÖVE provides several useful [Shader Variables](shader_variables \"Shader Variables\") by default. Additionally, LÖVE exposes a function `VideoTexel(uv)` which yields the color value of the currently drawn video at that position. Since Videos are drawn as YUV data in multiple textures, and then converted in the shader, the Texel function cannot be used.\n\n## Pixel Shader Function\n\nWhen an object is drawn, the pixel shader `effect` function is called hundreds or thousands of times: once for each pixel on the screen that the object touches. The pixel shader is run after the vertex shader, if there is one.\n\n### Synopsis\n\n``` lua\nvec4 effect( vec4 color, Image tex, vec2 texture_coords, vec2 screen_coords )\n```\n\n### Arguments\n\n[`vec4`](https://love2d.org/w/index.php?title=vec4&action=edit&redlink=1 \"vec4 (page does not exist)\")` color`  \nThe drawing color set with [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") or the per-vertex [Mesh](mesh \"Mesh\") color.\n\n[`Image`](image \"Image\")` tex`  \nThe texture of the image or canvas being drawn.\n\n[`vec2`](https://love2d.org/w/index.php?title=vec2&action=edit&redlink=1 \"vec2 (page does not exist)\")` texture_coords`  \nThe location inside the texture to get pixel data from. Texture coordinates are usually normalized to the range of (0, 0) to (1, 1), with the top-left corner being (0, 0).\n\n[`vec2`](https://love2d.org/w/index.php?title=vec2&action=edit&redlink=1 \"vec2 (page does not exist)\")` screen_coords`  \nCoordinates of the pixel on the screen. Pixel coordinates are not normalized (unlike texture coordinates). (0.5, 0.5) represents the top left of the screen (bottom left in LÖVE versions prior to [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")).\n\n### Returns\n\n[`vec4`](https://love2d.org/w/index.php?title=vec4&action=edit&redlink=1 \"vec4 (page does not exist)\")` output_color`  \nThe color of the pixel.\n\n### Notes\n\nOn mobile devices, variables in pixel shaders use `mediump` (16 bit float) precision by default instead of 32 bit float, for performance reasons. This may cause numeric instability or visual artifacts for larger numbers. Use the `highp` qualifier when declaring a variable (for example `highp float pos;`) to make it use always 32 bit float precision. Furthermore, `highp` precision is not supported on all devices, particularly GLES2 devices. Use [love.graphics.getSupported](love.graphics.getsupported \"love.graphics.getSupported\") to check!\n\nIf no pixel shader is used, LÖVE internally uses a default. This is its code:\n\n``` lua\nvec4 effect(vec4 color, Image tex, vec2 texture_coords, vec2 screen_coords)\n{\n    vec4 texturecolor = Texel(tex, texture_coords);\n    return texturecolor * color;\n}\n```\n\nOr for Video\n\n``` lua\nvec4 effect(vec4 color, Image tex, vec2 texture_coords, vec2 screen_coords)\n{\n    vec4 texturecolor = VideoTexel(texture_coords);\n    return texturecolor * color;\n}\n```\n\nIf multiple canvases are being rendered to simultaneously (by giving multiple Canvas parameters to [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\")), you can use the **void effect** (no arguments!) function instead of **vec4 effect** in order to output a separate color to each Canvas. It has the following prototype:\n\n``` lua\nvoid effect()\n{\n    // love_Canvases is a writable array of vec4 colors. Each index corresponds to a Canvas.\n    // IMPORTANT: If you don't assign a value to all active canvases, bad things will happen.\n    love_Canvases[0] = color;\n    love_Canvases[1] = color + vec4(0.5);\n    // etc.\n}\n```\n\nIf you wish to get the arguments that are passed to the single-canvas version (`vec4 effect`), see the built-in [Shader Variables](shader_variables \"Shader Variables\"). `color` will be in `VaryingColor`, `texture_coords` will be in `VaryingTexCoord` and `screen_coords` is in `love_PixelCoord`. And if you wish to access the texture used in the drawing operation, you can do that by defining a uniform texture (of the appropriate type) named `MainTex` or by sending it yourself via [Shader:send](shader-send \"Shader:send\").\n\n## Vertex Shader Function\n\n### Synopsis\n\n``` lua\nvec4 position( mat4 transform_projection, vec4 vertex_position )\n```\n\n### Arguments\n\n[`mat4`](https://love2d.org/w/index.php?title=mat4&action=edit&redlink=1 \"mat4 (page does not exist)\")` transform_projection`  \nThe transformation matrix affected by [love.graphics.translate](love.graphics.translate \"love.graphics.translate\") and friends combined with the orthographic projection matrix.\n\n[`vec4`](https://love2d.org/w/index.php?title=vec4&action=edit&redlink=1 \"vec4 (page does not exist)\")` vertex_position`  \nThe raw un-transformed position of the current vertex.\n\n### Returns\n\n[`vec4`](https://love2d.org/w/index.php?title=vec4&action=edit&redlink=1 \"vec4 (page does not exist)\")` output_pos`  \nThe final transformed position of the current vertex.\n\n### Notes\n\nIf no vertex shader code is used, LÖVE uses a default. This is its code:\n\n``` lua\nvec4 position(mat4 transform_projection, vec4 vertex_position)\n{\n    // The order of operations matters when doing matrix multiplication.\n    return transform_projection * vertex_position;\n}\n```\n\n## Notes\n\nVertex shader code is run for every vertex drawn to the screen (for example, love.graphics.rectangle will produce 4 vertices) and is used to transform the vertex positions from their original coordinates into screen-space, as well as to send information such as per-vertex color and texture coordinate values to the pixel shader.\n\nPixel shader code is run for every pixel on the screen that a drawn object touches, and is used to produce the color that will be blended onto the screen at that pixel, often by reading from an image. Pixel shaders are sometimes called fragment shaders.\n\nThe `varying` keyword can be used to set a value in the vertex shader and have it interpolated in between vertices and passed down to the pixel shader.\n\nVertex and Pixel shader code can be combined into one file or string if you wrap the vertex-specific code in `#ifdef VERTEX .. #endif` and the pixel-specific code in `#ifdef PIXEL .. #endif`.\n\n## Built-in variables\n\nLÖVE provides several built-in variables for both pixel and vertex shaders. The full list can be found here: [Shader Variables](shader_variables \"Shader Variables\").\n\n## Examples\n\n### Create a shader using vertex and pixel shader code which behaves as if no shader is set.\n\n``` lua\nlocal pixelcode = [[\n    vec4 effect( vec4 color, Image tex, vec2 texture_coords, vec2 screen_coords )\n    {\n        vec4 texcolor = Texel(tex, texture_coords);\n        return texcolor * color;\n    }\n]]\n \nlocal vertexcode = [[\n    vec4 position( mat4 transform_projection, vec4 vertex_position )\n    {\n        return transform_projection * vertex_position;\n    }\n]]\n \nshader = love.graphics.newShader(pixelcode, vertexcode)\n \nfunction love.draw()\n    love.graphics.setShader(shader)\n    -- draw things\n    love.graphics.setShader()\n    -- draw more things\nend\n```\n\n### Access the pre-transformed vertex position in the pixel shader with the **varying** keyword.\n\n#### vertex shader code\n\n``` lua\nvarying vec4 vpos;\n \nvec4 position( mat4 transform_projection, vec4 vertex_position )\n{\n    vpos = vertex_position;\n    return transform_projection * vertex_position;\n}\n```\n\n#### pixel shader code\n\n``` lua\nvarying vec4 vpos;\n \nvec4 effect( vec4 color, Image tex, vec2 texture_coords, vec2 screen_coords )\n{\n    texture_coords += vec2(cos(vpos.x), sin(vpos.y));\n    vec4 texcolor = Texel(tex, texture_coords);\n    return texcolor * color;\n}\n```\n\n### Combine the above example into one string or file with the help of **\\#ifdef**.\n\n``` lua\nvarying vec4 vpos;\n \n#ifdef VERTEX\nvec4 position( mat4 transform_projection, vec4 vertex_position )\n{\n    vpos = vertex_position;\n    return transform_projection * vertex_position;\n}\n#endif\n \n#ifdef PIXEL\nvec4 effect( vec4 color, Image tex, vec2 texture_coords, vec2 screen_coords )\n{\n    texture_coords += vec2(cos(vpos.x), sin(vpos.y));\n    vec4 texcolor = Texel(tex, texture_coords);\n    return texcolor * color;\n}\n#endif\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Shader](shader \"Shader\")\n- [love.graphics.setShader](love.graphics.setshader \"love.graphics.setShader\")\n- [Shader Variables](shader_variables \"Shader Variables\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newShader](https://love2d.org/wiki/love.graphics.newShader)"
- name: love.graphics.newSpriteBatch
  id: love.graphics.newspritebatch
  summary: Creates a new SpriteBatch object
  description: "# love.graphics.newSpriteBatch\n\nCreates a new [SpriteBatch](spritebatch \"SpriteBatch\") object.\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\nspriteBatch = love.graphics.newSpriteBatch( image, maxsprites )\n```\n\n### Arguments\n\n[`Image`](image \"Image\")` image`  \nThe Image to use for the sprites.\n\n[`number`](number \"number\")` maxsprites (1000)`  \nThe maximum number of sprites that the SpriteBatch can contain at any given time. Since version [11.0](https://love2d.org/wiki/11.0 \"11.0\"), additional sprites added past this number will automatically grow the spritebatch.\n\n### Returns\n\n[`SpriteBatch`](spritebatch \"SpriteBatch\")` spriteBatch`  \nThe new SpriteBatch.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nspriteBatch = love.graphics.newSpriteBatch( image, maxsprites, usage )\n```\n\n### Arguments\n\n[`Image`](image \"Image\")` image`  \nThe Image to use for the sprites.\n\n[`number`](number \"number\")` maxsprites (1000)`  \nThe maximum number of sprites that the SpriteBatch can contain at any given time. Since version [11.0](https://love2d.org/wiki/11.0 \"11.0\"), additional sprites added past this number will automatically grow the spritebatch.\n\n[`SpriteBatchUsage`](spritebatchusage \"SpriteBatchUsage\")` usage (\"dynamic\")`  \nThe expected usage of the SpriteBatch. The specified usage mode affects the SpriteBatch's memory usage and performance.\n\n### Returns\n\n[`SpriteBatch`](spritebatch \"SpriteBatch\")` spriteBatch`  \nThe new SpriteBatch.\n\n## Function\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nspriteBatch = love.graphics.newSpriteBatch( texture, maxsprites, usage )\n```\n\n### Arguments\n\n[`Texture`](texture \"Texture\")` texture`  \nThe [Image](image \"Image\") or [Canvas](canvas \"Canvas\") to use for the sprites.\n\n[`number`](number \"number\")` maxsprites (1000)`  \nThe maximum number of sprites that the SpriteBatch can contain at any given time. Since version [11.0](https://love2d.org/wiki/11.0 \"11.0\"), additional sprites added past this number will automatically grow the spritebatch.\n\n[`SpriteBatchUsage`](spritebatchusage \"SpriteBatchUsage\")` usage (\"dynamic\")`  \nThe expected usage of the SpriteBatch. The specified usage mode affects the SpriteBatch's memory usage and performance.\n\n### Returns\n\n[`SpriteBatch`](spritebatch \"SpriteBatch\")` spriteBatch`  \nThe new SpriteBatch.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newSpriteBatch](https://love2d.org/wiki/love.graphics.newSpriteBatch)"
- name: love.graphics.newStencil
  id: love.graphics.newstencil
  summary: Creates a new stencil
  description: "# love.graphics.newStencil\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nLua functions can be used directly with [love.graphics.stencil](love.graphics.stencil \"love.graphics.stencil\") (or [love.graphics.setStencil](love.graphics.setstencil \"love.graphics.setStencil\") in 0.9).\n\nCreates a new stencil.\n\n## Function\n\n### Synopsis\n\n``` lua\nmyStencil = love.graphics.newStencil( stencilFunction )\n```\n\n### Arguments\n\n[`function`](function \"function\")` stencilFunction`  \nFunction that draws the stencil.\n\n### Returns\n\n[`function`](function \"function\")` myStencil`  \nFunction that defines the new stencil.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setStencil](love.graphics.setstencil \"love.graphics.setStencil\")\n- [love.graphics.setInvertedStencil](love.graphics.setinvertedstencil \"love.graphics.setInvertedStencil\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newStencil](https://love2d.org/wiki/love.graphics.newStencil)"
- name: love.graphics.newText
  id: love.graphics.newtext
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.graphics.newText\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new drawable [Text](text \"Text\") object.\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\ntext = love.graphics.newText( font, textstring )\n```\n\n### Arguments\n\n[`Font`](font \"Font\")` font`  \nThe font to use for the text.\n\n[`string`](string \"string\")` textstring (nil)`  \nThe initial string of text that the new Text object will contain. May be nil.\n\n### Returns\n\n[`Text`](text \"Text\")` text`  \nThe new drawable Text object.\n\n## Function\n\n### Synopsis\n\n``` lua\ntext = love.graphics.newText( font, coloredtext )\n```\n\n### Arguments\n\n[`Font`](font \"Font\")` font`  \nThe font to use for the text.\n\n[`table`](table \"table\")` coloredtext`  \nA table containing colors and strings to add to the object, in the form of `{color1, string1, color2, string2, ...}`.\n\n[`table`](table \"table\")` color1`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string1`  \nA string of text which has a color specified by the previous color.\n\n[`table`](table \"table\")` color2`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string2`  \nA string of text which has a color specified by the previous color.\n\n[`tables and strings`](https://love2d.org/w/index.php?title=tables_and_strings&action=edit&redlink=1 \"tables and strings (page does not exist)\")` ...`  \nAdditional colors and strings.\n\n### Returns\n\n[`Text`](text \"Text\")` text`  \nThe new drawable Text object.\n\n### Example\n\n``` lua\nlocal font = love.graphics.getFont()\n--regular text\nlocal plainText = love.graphics.newText(font, \"Hello world\")\n--colored text\nlocal coloredText = love.graphics.newText(font, {{1, 0, 0}, \"Hello \", {0, 0, 1}, \" world\"})\n```\n\n### Notes\n\nThe color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") will be combined (multiplied) with the colors of the text, when drawing the Text object.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Text](text \"Text\")\n- [Font](font \"Font\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newText](https://love2d.org/wiki/love.graphics.newText)"
- name: love.graphics.newVideo
  id: love.graphics.newvideo
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.graphics.newVideo\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new drawable [Video](video \"Video\"). Currently only Ogg Theora video files are supported.\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\nvideo = love.graphics.newVideo( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe file path to the Ogg Theora video file.\n\n### Returns\n\n[`Video`](video \"Video\")` video`  \nA new Video.\n\n## Function\n\n### Synopsis\n\n``` lua\nvideo = love.graphics.newVideo( videostream )\n```\n\n### Arguments\n\n[`VideoStream`](videostream \"VideoStream\")` videostream`  \nA video stream object.\n\n### Returns\n\n[`Video`](video \"Video\")` video`  \nA new Video.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nvideo = love.graphics.newVideo( filename, settings )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe file path to the Ogg Theora video file (or [VideoStream](videostream \"VideoStream\")).\n\n[`table`](table \"table\")` settings`  \nA table containing the following fields:\n\n[`boolean`](boolean \"boolean\")` audio (false)`  \nWhether to try to load the video's audio into an audio [Source](source \"Source\"). If not explicitly set to true or false, it will try without causing an error if the video has no audio.\n\n[`number`](number \"number\")` dpiscale (`[`love.graphics.getDPIScale`](love.graphics.getdpiscale \"love.graphics.getDPIScale\")`())`  \nThe DPI scale factor of the video.\n\n### Returns\n\n[`Video`](video \"Video\")` video`  \nA new Video.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier or later versions.\n\n### Synopsis\n\n``` lua\nvideo = love.graphics.newVideo( filename, loadaudio )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe file path to the Ogg Theora video file.\n\n[`boolean`](boolean \"boolean\")` loadaudio (nil)`  \nWhether to try to load the video's audio into an audio [Source](source \"Source\"). If not explicitly set to true or false, it will try without causing an error if the video has no audio.\n\n### Returns\n\n[`Video`](video \"Video\")` video`  \nA new Video.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier or later versions.\n\n### Synopsis\n\n``` lua\nvideo = love.graphics.newVideo( videostream, loadaudio )\n```\n\n### Arguments\n\n[`VideoStream`](videostream \"VideoStream\")` videostream`  \nA video stream object.\n\n[`boolean`](boolean \"boolean\")` loadaudio (nil)`  \nWhether to try to load the video's audio into an audio [Source](source \"Source\"). If not explicitly set to true or false, it will try without causing an error if the video has no audio.\n\n### Returns\n\n[`Video`](video \"Video\")` video`  \nA new Video.\n\n## Examples\n\nLoad and play a video.\n\n``` lua\nfunction love.load()\n    video = love.graphics.newVideo(\"myvideo.ogv\")\n    video:play()\nend\n \nfunction love.draw()\n    love.graphics.draw(video, 0, 0)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Video](video \"Video\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newVideo](https://love2d.org/wiki/love.graphics.newVideo)"
- name: love.graphics.newVolumeImage
  id: love.graphics.newvolumeimage
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.newVolumeImage\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new [volume](texturetype \"TextureType\") (3D) [Image](image \"Image\").\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\nVolume images are 3D textures with width, height, and depth. They can't be rendered directly, they can only be used in [Shader](shader \"Shader\") code (and sent to the shader via [Shader:send](shader-send \"Shader:send\")). Or, more accurately, the default shaders can't render volume images, and you need to make one yourself to do it.\n\nTo use a volume image in a Shader, it must be declared as a `VolumeImage` or `sampler3D` type (instead of `Image` or `sampler2D`). The `Texel(VolumeImage image, vec3 texcoords)` shader function must be used to get pixel colors from the volume image. The vec3 argument is a normalized texture coordinate with the z component representing the depth to sample at (ranging from \\[0, 1\\]).\n\nVolume images are typically used as lookup tables in shaders for color grading, for example, because sampling using a texture coordinate that is partway in between two pixels can interpolate across all 3 dimensions in the volume image, resulting in a smooth gradient even when a small-sized volume image is used as the lookup table.\n\n[Array images](love.graphics.newarrayimage \"love.graphics.newArrayImage\") are a much better choice than volume images for storing multiple different sprites in a single array image for directly drawing them.\n\n## Function\n\nCreates a volume Image given multiple image files with matching dimensions.\n\n### Synopsis\n\n``` lua\nimage = love.graphics.newVolumeImage( layers, settings )\n```\n\n### Arguments\n\n[`table`](table \"table\")` layers`  \nA table containing filepaths to images (or [File](file \"File\"), [FileData](filedata \"FileData\"), [ImageData](imagedata \"ImageData\"), or [CompressedImageData](compressedimagedata \"CompressedImageData\") objects), in an array. A table of tables can also be given, where each sub-table represents a single mipmap level and contains all layers for that mipmap.\n\n[`table`](table \"table\")` settings (nil)`  \nOptional table of settings to configure the volume image, containing the following fields:\n\n[`boolean`](boolean \"boolean\")` mipmaps (false)`  \nTrue to make the image use mipmaps, false to disable them. Mipmaps will be automatically generated if the image isn't a [compressed texture](pixelformat \"PixelFormat\") format.\n\n[`boolean`](boolean \"boolean\")` linear (false)`  \nTrue to treat the image's pixels as linear instead of sRGB, when [gamma correct rendering](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") is enabled. Most images are authored as sRGB.\n\n### Returns\n\n[`Image`](image \"Image\")` image`  \nA volume Image object.\n\n## Notes\n\nVolume images are not supported on some older mobile devices. Use [love.graphics.getTextureTypes](love.graphics.gettexturetypes \"love.graphics.getTextureTypes\") to check at runtime.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Image](image \"Image\")\n- [TextureType](texturetype \"TextureType\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.newVolumeImage](https://love2d.org/wiki/love.graphics.newVolumeImage)"
- name: love.graphics.origin
  id: love.graphics.origin
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.graphics.origin\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nResets the current coordinate transformation.\n\nThis function is always used to reverse any previous calls to [love.graphics.rotate](love.graphics.rotate \"love.graphics.rotate\"), [love.graphics.scale](love.graphics.scale \"love.graphics.scale\"), [love.graphics.shear](love.graphics.shear \"love.graphics.shear\") or [love.graphics.translate](love.graphics.translate \"love.graphics.translate\"). It returns the current transformation state to its defaults.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.origin()\n```\n\n### Arguments\n\nNone\n\n### Returns\n\nNothing.\n\n## Example\n\n``` lua\nlocal image = love.graphics.newImage(\"path_to_your_image\")\nfunction love.draw()\n   love.graphics.push()   -- stores the coordinate system\n     love.graphics.scale(0.5, 0.5)   -- reduce everything by 50% in both X and Y coordinates\n     love.graphics.draw(image, 0, 0)  -- you can see a scaled image that you loaded on the left top of the screen.\n     love.graphics.print(\"Scaled text\", 50, 50)   -- print half-sized text at 25x25\n     love.graphics.draw(image, 0, 0)  \n       love.graphics.push()\n       love.graphics.origin()  -- Rest the state to the defaults.\n       love.graphics.draw(image, 0, 0) -- Draw the image on screen as if nothing was scaled.\n     love.graphics.pop()   -- return to our scaled coordinate state.\n     love.graphics.print(\"Scaled text\", 100, 100)   -- print half-sized text at 50x50\n   love.graphics.pop()   -- return to the previous stored coordinated\n   love.graphics.print(\"Normal text\", 50, 50)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.pop](love.graphics.pop \"love.graphics.pop\")\n- [love.graphics.push](love.graphics.push \"love.graphics.push\")\n- [love.graphics.rotate](love.graphics.rotate \"love.graphics.rotate\")\n- [love.graphics.scale](love.graphics.scale \"love.graphics.scale\")\n- [love.graphics.shear](love.graphics.shear \"love.graphics.shear\")\n- [love.graphics.translate](love.graphics.translate \"love.graphics.translate\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.origin](https://love2d.org/wiki/love.graphics.origin)"
- name: love.graphics.point
  id: love.graphics.point
  summary: Removed in LÖVE 0.10.0 It has been replaced by love.graphics.points
  description: "# love.graphics.point\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been replaced by [love.graphics.points](love.graphics.points \"love.graphics.points\").\n\n  \nDraws a point.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.point( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe position on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position on the y-axis.\n\n### Returns\n\nNothing.\n\n## Notes\n\nThe pixel grid is actually offset to the center of each pixel. So to get clean pixels drawn use 0.5 + integer increments.\n\nPoints are not affected by [love.graphics.scale](love.graphics.scale \"love.graphics.scale\") - their [size](love.graphics.setpointsize \"love.graphics.setPointSize\") is always in pixels.\n\n## Examples\n\nRender a starfield\n\n``` lua\nfunction love.load()\n   local screen_width, screen_height = love.graphics.getDimensions()\n   local max_stars = 100   -- how many stars we want\n \n   stars = {}   -- table which will hold our stars\n \n   for i=1, max_stars do   -- generate the coords of our stars\n      local x = love.math.random(5, screen_width-5)   -- generate a \"random\" number for the x coord of this star\n      local y = love.math.random(5, screen_height-5)   -- both coords are limited to the screen size, minus 5 pixels of padding\n      stars[i] = {x, y}   -- stick the values into the table\n   end\nend\n \nfunction love.draw()\n   for i, star in ipairs(stars) do   -- loop through all of our stars\n      love.graphics.point(star[1], star[2])   -- draw each point\n   end\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setPointSize](love.graphics.setpointsize \"love.graphics.setPointSize\")\n- [love.graphics.setPointStyle](love.graphics.setpointstyle \"love.graphics.setPointStyle\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.point](https://love2d.org/wiki/love.graphics.point)"
- name: love.graphics.points
  id: love.graphics.points
  summary: Available since LÖVE 0.10.0 It has replaced love.graphics.point
  description: "# love.graphics.points\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has replaced [love.graphics.point](love.graphics.point \"love.graphics.point\").\n\nDraws one or more points.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.points( x, y, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe position of the first point on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the first point on the y-axis.\n\n[`number`](number \"number\")` ...`  \nThe x and y coordinates of additional points.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.points( points )\n```\n\n### Arguments\n\n[`table`](table \"table\")` points`  \nA table containing multiple point positions, in the form of `{x, y, ...}`.\n\n[`number`](number \"number\")` x`  \nThe position of the first point on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the first point on the y-axis.\n\n[`number`](number \"number\")` ...`  \nThe x and y coordinates of additional points.\n\n### Returns\n\nNothing.\n\n## Function\n\nDraws one or more individually colored points.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\n### Synopsis\n\n``` lua\nlove.graphics.points( points )\n```\n\n### Arguments\n\n[`table`](table \"table\")` points`  \nA table containing multiple individually colored points, in the form of `{point, ...}`.\n\n[`table`](table \"table\")` point`  \nA table containing the position and color of the first point, in the form of `{x, y, r, g, b, a}`. The color components are optional.\n\n[`table`](table \"table\")` ...`  \nAdditional tables containing the position and color of more points, in the form of `{x, y, r, g, b, a}`. The color components are optional.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe global color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") is modulated (multiplied) with the per-point colors.\n\n## Notes\n\nThe pixel grid is actually offset to the center of each pixel. So to get clean pixels drawn use 0.5 + integer increments.\n\nPoints are not affected by [love.graphics.scale](love.graphics.scale \"love.graphics.scale\") - their [size](love.graphics.setpointsize \"love.graphics.setPointSize\") is always in pixels.\n\n## Examples\n\nRender a starfield\n\n``` lua\nfunction love.load()\n   local screen_width, screen_height = love.graphics.getDimensions()\n   local max_stars = 100   -- how many stars we want\n \n   stars = {}   -- table which will hold our stars\n \n   for i=1, max_stars do   -- generate the coords of our stars\n      local x = love.math.random(5, screen_width-5)   -- generate a \"random\" number for the x coord of this star\n      local y = love.math.random(5, screen_height-5)   -- both coords are limited to the screen size, minus 5 pixels of padding\n      stars[i] = {x, y}   -- stick the values into the table\n   end\nend\n \nfunction love.draw()\n   love.graphics.points(stars)  -- draw all stars as points\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setPointSize](love.graphics.setpointsize \"love.graphics.setPointSize\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.points](https://love2d.org/wiki/love.graphics.points)"
- name: love.graphics.polygon
  id: love.graphics.polygon
  summary: Available since LÖVE 0.4.0 This function is not supported in earlier versions
  description: "# love.graphics.polygon\n\n**Available since LÖVE [0.4.0](https://love2d.org/wiki/0.4.0 \"0.4.0\")**  \nThis function is not supported in earlier versions.\n\nDraw a polygon.\n\nFollowing the mode argument, this function can accept multiple numeric arguments or a single table of numeric arguments. In either case the arguments are interpreted as alternating x and y coordinates of the polygon's vertices.\n\nWhen in **fill** mode, the polygon must be [convex](https://en.wikipedia.org/wiki/Convex_polygon) and [simple](https://en.wikipedia.org/wiki/Simple_polygon) or rendering artifacts may occur. [love.math.triangulate](love.math.triangulate \"love.math.triangulate\") and [love.math.isConvex](love.math.isconvex \"love.math.isConvex\") can be used in [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")+.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.polygon( mode, ... )\n```\n\n### Arguments\n\n[`DrawMode`](drawmode \"DrawMode\")` mode`  \nHow to draw the polygon.\n\n[`number`](number \"number\")` ...`  \nThe vertices of the polygon.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.polygon( mode, vertices )\n```\n\n### Arguments\n\n[`DrawMode`](drawmode \"DrawMode\")` mode`  \nHow to draw the polygon.\n\n[`table`](table \"table\")` vertices`  \nThe vertices of the polygon as a table.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Two ways of drawing the same triangle\n\n[](https://love2d.org/wiki/File:Polygon_triangle.png)\n\nTriangle drawn using love.graphics.polygon\n\nThis example shows how to give the coordinates explicitly and how to pass a table argument.\n\n``` lua\n-- giving the coordinates directly\nlove.graphics.polygon('fill', 100, 100, 200, 100, 150, 200)\n \n-- defining a table with the coordinates\n-- this table could be built incrementally too\nlocal vertices = {100, 100, 200, 100, 150, 200}\n \n-- passing the table to the function as a second argument\nlove.graphics.polygon('fill', vertices)\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.math.triangulate](love.math.triangulate \"love.math.triangulate\")\n- [love.math.isConvex](love.math.isconvex \"love.math.isConvex\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.polygon](https://love2d.org/wiki/love.graphics.polygon)"
- name: love.graphics.pop
  id: love.graphics.pop
  summary: Pops the current coordinate transformation from the transformation stack
  description: "# love.graphics.pop\n\nPops the current coordinate transformation from the transformation stack.\n\nThis function is always used to reverse a previous [push](love.graphics.push \"love.graphics.push\") operation. It returns the current transformation state to what it was before the last preceding push.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.pop()\n```\n\n### Arguments\n\nNone\n\n### Returns\n\nNothing.\n\n## Examples\n\nDraw two lines of text, one scaled and one normal, using [love.graphics.scale](love.graphics.scale \"love.graphics.scale\"). We use **love.graphics.pop** to return to normal render scale, after having used [love.graphics.push](love.graphics.push \"love.graphics.push\").\n\n``` lua\nfunction love.draw()\n   love.graphics.push()   -- stores the coordinate system\n   love.graphics.scale(0.5, 0.5)   -- reduce everything by 50% in both X and Y coordinates\n   love.graphics.print(\"Scaled text\", 50, 50)   -- print half-sized text at 25x25\n   love.graphics.pop()   -- return to stored coordinated\n   love.graphics.print(\"Normal text\", 50, 50)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.push](love.graphics.push \"love.graphics.push\")\n- [love.graphics.translate](love.graphics.translate \"love.graphics.translate\")\n- [love.graphics.rotate](love.graphics.rotate \"love.graphics.rotate\")\n- [love.graphics.scale](love.graphics.scale \"love.graphics.scale\")\n- [love.graphics.shear](love.graphics.shear \"love.graphics.shear\")\n- [love.graphics.origin](love.graphics.origin \"love.graphics.origin\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.pop](https://love2d.org/wiki/love.graphics.pop)"
- name: love.graphics.present
  id: love.graphics.present
  summary: Displays the results of drawing operations on the screen
  description: "# love.graphics.present\n\nDisplays the results of drawing operations on the screen.\n\nThis function is used when writing your own [love.run](love.run \"love.run\") function. It presents all the results of your drawing operations on the screen. See the example in [love.run](love.run \"love.run\") for a typical use of this function.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.present( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Notes\n\n- If [love.window.setMode](love.window.setmode \"love.window.setMode\") has `vsync` equal to `true`, this function can't run more frequently than the refresh rate (e.g. 60 Hz), and will halt the program until ready if necessary.\n\n## See Also\n\n- [love.graphics.clear](love.graphics.clear \"love.graphics.clear\")\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.present](https://love2d.org/wiki/love.graphics.present)"
- name: love.graphics.print
  id: love.graphics.print
  summary: Draws text on screen
  description: "# love.graphics.print\n\nDraws text on screen. If no [Font](font \"Font\") is set, one will be created and set (once) if needed.\n\nAs of LOVE [0.7.1](https://love2d.org/wiki/0.7.1 \"0.7.1\"), when using translation and scaling functions while drawing text, this function assumes the scale occurs first. If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.\n\n**love.graphics.print** and [love.graphics.printf](love.graphics.printf \"love.graphics.printf\") both support UTF-8 encoding. You'll also need a proper [Font](font \"Font\") for special characters.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color and byte component values were within the range of 0 to 255 instead of 0 to 1.\n\nText may appear blurry if it's rendered at non-integer pixel locations.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.print( text, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nThe text to draw.\n\n[`number`](number \"number\")` x (0)`  \nThe position to draw the object (x-axis).\n\n[`number`](number \"number\")` y (0)`  \nThe position to draw the object (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)` Available since 0.8.0  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)` Available since 0.8.0  \nShearing factor (y-axis).\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.print( text, font, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nThe text to draw.\n\n[`Font`](font \"Font\")` font`  \nThe Font object to use.\n\n[`number`](number \"number\")` x (0)`  \nThe position of the text on the x-axis.\n\n[`number`](number \"number\")` y (0)`  \nThe position of the text on the y-axis.\n\n[`number`](number \"number\")` angle (0)`  \nThe orientation of the text in radians.\n\n[`number`](number \"number\")` sx (1)`  \nScale factor on the x-axis.\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor on the y-axis.\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset on the x-axis.\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset on the y-axis.\n\n[`number`](number \"number\")` kx (0)`  \nShearing / skew factor on the x-axis.\n\n[`number`](number \"number\")` ky (0)`  \nShearing / skew factor on the y-axis.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.print( coloredtext, x, y, angle, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`table`](table \"table\")` coloredtext`  \nA table containing colors and strings to add to the object, in the form of `{color1, string1, color2, string2, ...}`.\n\n[`table`](table \"table\")` color1`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string1`  \nA string of text which has a color specified by the previous color.\n\n[`table`](table \"table\")` color2`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string2`  \nA string of text which has a color specified by the previous color.\n\n[`tables and strings`](https://love2d.org/w/index.php?title=tables_and_strings&action=edit&redlink=1 \"tables and strings (page does not exist)\")` ...`  \nAdditional colors and strings.\n\n&nbsp;\n\n[`number`](number \"number\")` x (0)`  \nThe position of the text on the x-axis.\n\n[`number`](number \"number\")` y (0)`  \nThe position of the text on the y-axis.\n\n[`number`](number \"number\")` angle (0)`  \nThe orientation of the text in radians.\n\n[`number`](number \"number\")` sx (1)`  \nScale factor on the x-axis.\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor on the y-axis.\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset on the x-axis.\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset on the y-axis.\n\n[`number`](number \"number\")` kx (0)`  \nShearing / skew factor on the x-axis.\n\n[`number`](number \"number\")` ky (0)`  \nShearing / skew factor on the y-axis.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") will be combined (multiplied) with the colors of the text.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.print( coloredtext, font, x, y, angle, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`table`](table \"table\")` coloredtext`  \nA table containing colors and strings to add to the object, in the form of `{color1, string1, color2, string2, ...}`.\n\n[`table`](table \"table\")` color1`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string1`  \nA string of text which has a color specified by the previous color.\n\n[`table`](table \"table\")` color2`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string2`  \nA string of text which has a color specified by the previous color.\n\n[`tables and strings`](https://love2d.org/w/index.php?title=tables_and_strings&action=edit&redlink=1 \"tables and strings (page does not exist)\")` ...`  \nAdditional colors and strings.\n\n&nbsp;\n\n[`Font`](font \"Font\")` font`  \nThe Font object to use.\n\n[`number`](number \"number\")` x (0)`  \nThe position of the text on the x-axis.\n\n[`number`](number \"number\")` y (0)`  \nThe position of the text on the y-axis.\n\n[`number`](number \"number\")` angle (0)`  \nThe orientation of the text in radians.\n\n[`number`](number \"number\")` sx (1)`  \nScale factor on the x-axis.\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor on the y-axis.\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset on the x-axis.\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset on the y-axis.\n\n[`number`](number \"number\")` kx (0)`  \nShearing / skew factor on the x-axis.\n\n[`number`](number \"number\")` ky (0)`  \nShearing / skew factor on the y-axis.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") will be combined (multiplied) with the colors of the text.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.print( text, transform )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nThe text to draw.\n\n[`Transform`](transform \"Transform\")` transform`  \nTransformation object.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.print( text, font, transform )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nThe text to draw.\n\n[`Font`](font \"Font\")` font`  \nThe Font object to use.\n\n[`Transform`](transform \"Transform\")` transform`  \nTransformation object.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.print( coloredtext, transform )\n```\n\n### Arguments\n\n[`table`](table \"table\")` coloredtext`  \nA table containing colors and strings to add to the object, in the form of `{color1, string1, color2, string2, ...}`.\n\n[`table`](table \"table\")` color1`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string1`  \nA string of text which has a color specified by the previous color.\n\n[`table`](table \"table\")` color2`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string2`  \nA string of text which has a color specified by the previous color.\n\n[`tables and strings`](https://love2d.org/w/index.php?title=tables_and_strings&action=edit&redlink=1 \"tables and strings (page does not exist)\")` ...`  \nAdditional colors and strings.\n\n&nbsp;\n\n[`Transform`](transform \"Transform\")` transform`  \nTransformation object.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") will be combined (multiplied) with the colors of the text.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.print( coloredtext, font, transform )\n```\n\n### Arguments\n\n[`table`](table \"table\")` coloredtext`  \nA table containing colors and strings to add to the object, in the form of `{color1, string1, color2, string2, ...}`.\n\n[`table`](table \"table\")` color1`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string1`  \nA string of text which has a color specified by the previous color.\n\n[`table`](table \"table\")` color2`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string2`  \nA string of text which has a color specified by the previous color.\n\n[`tables and strings`](https://love2d.org/w/index.php?title=tables_and_strings&action=edit&redlink=1 \"tables and strings (page does not exist)\")` ...`  \nAdditional colors and strings.\n\n&nbsp;\n\n[`Font`](font \"Font\")` font`  \nThe Font object to use.\n\n[`Transform`](transform \"Transform\")` transform`  \nTransformation object.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") will be combined (multiplied) with the colors of the text.\n\n## Examples\n\n### A lame example\n\n``` lua\nfunction love.draw()\n    love.graphics.setColor(0, 1, 0, 1)\n    love.graphics.print(\"This is a pretty lame example.\", 10, 200)\n    love.graphics.setColor(1, 0, 0, 1)\n    love.graphics.print(\"This lame example is twice as big.\", 10, 250, 0, 2, 2)\n    love.graphics.setColor(0, 0, 1, 1)\n    love.graphics.print(\"This example is lamely vertical.\", 300, 30, math.pi/2)\nend\n```\n\n## Notes\n\nIn version 0.8.0 and older, love.graphics.print stops at the first '\\0' (null) character. This can bite you if you are appending keystrokes to form your string, as some of those are multi-byte unicode characters which will likely contain null bytes.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.printf](love.graphics.printf \"love.graphics.printf\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.print](https://love2d.org/wiki/love.graphics.print)"
- name: love.graphics.printf
  id: love.graphics.printf
  summary: Draws formatted text, with word wrap and alignment
  description: "# love.graphics.printf\n\nDraws formatted text, with word wrap and alignment.\n\nSee additional notes in [love.graphics.print](love.graphics.print \"love.graphics.print\").\n\nThe word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.\n\nIn version [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") and newer this is no longer the case.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color and byte component values were within the range of 0 to 255 instead of 0 to 1.\n\nAligning does not work as one might expect! It doesn't align to the x/y coordinates given, but in a rectangle, where the limit is the width.\n\nText may appear blurry if it's rendered at non-integer pixel locations.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.printf( text, x, y, limit, align, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nA text string.\n\n[`number`](number \"number\")` x`  \nThe position on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position on the y-axis.\n\n[`number`](number \"number\")` limit`  \nWrap the line after this many horizontal pixels.\n\n[`AlignMode`](alignmode \"AlignMode\")` align (\"left\")`  \nThe alignment.\n\n[`number`](number \"number\")` r (0)` Available since 0.9.0  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)` Available since 0.9.0  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)` Available since 0.9.0  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)` Available since 0.9.0  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)` Available since 0.9.0  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)` Available since 0.9.0  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)` Available since 0.9.0  \nShearing factor (y-axis).\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.printf( text, font, x, y, limit, align, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nA text string.\n\n[`Font`](font \"Font\")` font`  \nThe Font object to use.\n\n[`number`](number \"number\")` x`  \nThe position on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position on the y-axis.\n\n[`number`](number \"number\")` limit`  \nWrap the line after this many horizontal pixels.\n\n[`AlignMode`](alignmode \"AlignMode\")` align (\"left\")`  \nThe alignment.\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShearing factor (y-axis).\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.printf( text, transform, limit, align )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nA text string.\n\n[`Transform`](transform \"Transform\")` transform`  \nTransformation object.\n\n[`number`](number \"number\")` limit`  \nWrap the line after this many horizontal pixels.\n\n[`AlignMode`](alignmode \"AlignMode\")` align (\"left\")`  \nThe alignment.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.printf( text, font, transform, limit, align )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nA text string.\n\n[`Font`](font \"Font\")` font`  \nThe Font object to use.\n\n[`Transform`](transform \"Transform\")` transform`  \nTransformation object.\n\n[`number`](number \"number\")` limit`  \nWrap the line after this many horizontal pixels.\n\n[`AlignMode`](alignmode \"AlignMode\")` align (\"left\")`  \nThe alignment.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.printf( coloredtext, x, y, limit, align, angle, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`table`](table \"table\")` coloredtext`  \nA table containing colors and strings to add to the object, in the form of `{color1, string1, color2, string2, ...}`.\n\n[`table`](table \"table\")` color1`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string1`  \nA string of text which has a color specified by the previous color.\n\n[`table`](table \"table\")` color2`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string2`  \nA string of text which has a color specified by the previous color.\n\n[`tables and strings`](https://love2d.org/w/index.php?title=tables_and_strings&action=edit&redlink=1 \"tables and strings (page does not exist)\")` ...`  \nAdditional colors and strings.\n\n&nbsp;\n\n[`number`](number \"number\")` x`  \nThe position of the text (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position of the text (y-axis).\n\n[`number`](number \"number\")` limit`  \nThe maximum width in pixels of the text before it gets automatically wrapped to a new line.\n\n[`AlignMode`](alignmode \"AlignMode\")` align`  \nThe alignment of the text.\n\n[`number`](number \"number\")` angle (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShearing / skew factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShearing / skew factor (y-axis).\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") will be combined (multiplied) with the colors of the text.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.printf( coloredtext, font, x, y, limit, align, angle, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`table`](table \"table\")` coloredtext`  \nA table containing colors and strings to add to the object, in the form of `{color1, string1, color2, string2, ...}`.\n\n[`table`](table \"table\")` color1`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string1`  \nA string of text which has a color specified by the previous color.\n\n[`table`](table \"table\")` color2`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string2`  \nA string of text which has a color specified by the previous color.\n\n[`tables and strings`](https://love2d.org/w/index.php?title=tables_and_strings&action=edit&redlink=1 \"tables and strings (page does not exist)\")` ...`  \nAdditional colors and strings.\n\n&nbsp;\n\n[`Font`](font \"Font\")` font`  \nThe Font object to use.\n\n[`number`](number \"number\")` x`  \nThe position on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position on the y-axis.\n\n[`number`](number \"number\")` limit`  \nWrap the line after this many horizontal pixels.\n\n[`AlignMode`](alignmode \"AlignMode\")` align (\"left\")`  \nThe alignment.\n\n[`number`](number \"number\")` angle (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShearing factor (y-axis).\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") will be combined (multiplied) with the colors of the text.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.printf( coloredtext, transform, limit, align )\n```\n\n### Arguments\n\n[`table`](table \"table\")` coloredtext`  \nA table containing colors and strings to add to the object, in the form of `{color1, string1, color2, string2, ...}`.\n\n[`table`](table \"table\")` color1`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string1`  \nA string of text which has a color specified by the previous color.\n\n[`table`](table \"table\")` color2`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string2`  \nA string of text which has a color specified by the previous color.\n\n[`tables and strings`](https://love2d.org/w/index.php?title=tables_and_strings&action=edit&redlink=1 \"tables and strings (page does not exist)\")` ...`  \nAdditional colors and strings.\n\n&nbsp;\n\n[`Transform`](transform \"Transform\")` transform`  \nTransformation object.\n\n[`number`](number \"number\")` limit`  \nWrap the line after this many horizontal pixels.\n\n[`AlignMode`](alignmode \"AlignMode\")` align (\"left\")`  \nThe alignment.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") will be combined (multiplied) with the colors of the text.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.printf( coloredtext, font, transform, limit, align )\n```\n\n### Arguments\n\n[`table`](table \"table\")` coloredtext`  \nA table containing colors and strings to add to the object, in the form of `{color1, string1, color2, string2, ...}`.\n\n[`table`](table \"table\")` color1`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string1`  \nA string of text which has a color specified by the previous color.\n\n[`table`](table \"table\")` color2`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string2`  \nA string of text which has a color specified by the previous color.\n\n[`tables and strings`](https://love2d.org/w/index.php?title=tables_and_strings&action=edit&redlink=1 \"tables and strings (page does not exist)\")` ...`  \nAdditional colors and strings.\n\n&nbsp;\n\n[`Font`](font \"Font\")` font`  \nThe Font object to use.\n\n[`Transform`](transform \"Transform\")` transform`  \nTransformation object.\n\n[`number`](number \"number\")` limit`  \nWrap the line after this many horizontal pixels.\n\n[`AlignMode`](alignmode \"AlignMode\")` align (\"left\")`  \nThe alignment.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") will be combined (multiplied) with the colors of the text.\n\n## Examples\n\nDraw text to the screen with right alignment and a horizontal limit of 125.\n\n``` lua\nlove.graphics.printf(\"This text is aligned right, and wraps when it gets too big.\", 25, 25, 125, \"right\")\n```\n\n## Notes\n\nNote that the limit argument affects the position of your text for 'center' and 'right' alignment.\n\n``` lua\nlove.graphics.printf(\"This text is aligned center\",100, 100, 200,\"center\") -- center your text around x = 200/2 + 100 = 200\nlove.graphics.printf(\"This text is aligned right\",100, 100, 200,\"right\") -- align right to x = 100 + 200 = 300\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Font:getWrap](font-getwrap \"Font:getWrap\")\n\n  \n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.printf](https://love2d.org/wiki/love.graphics.printf)"
- name: love.graphics.push
  id: love.graphics.push
  summary: Copies and pushes the current coordinate transformation to the transformation stack
  description: "# love.graphics.push\n\nCopies and pushes the current coordinate transformation to the transformation stack.\n\nThis function is always used to prepare for a corresponding [pop](love.graphics.pop \"love.graphics.pop\") operation later. It stores the current coordinate transformation state into the transformation stack and keeps it active. Later changes to the transformation can be undone by using the pop operation, which returns the coordinate transform to the state it was in before calling push.\n\n## Function\n\nPushes the current transformation to the transformation stack.\n\n### Synopsis\n\n``` lua\nlove.graphics.push( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis variant is not supported in earlier versions.\n\nPushes a specific type of state to the stack.\n\n### Synopsis\n\n``` lua\nlove.graphics.push( stack )\n```\n\n### Arguments\n\n[`StackType`](stacktype \"StackType\")` stack`  \nThe type of stack to push (e.g. just transformation state, or all love.graphics state).\n\n### Returns\n\nNothing.\n\n## Examples\n\nModify and restore the coordinate system.\n\n``` lua\nfunction love.draw()\n    love.graphics.push() -- stores the default coordinate system\n    love.graphics.translate(...) -- move the camera position\n    love.graphics.scale(...) -- zoom the camera\n    -- use the new coordinate system to draw the viewed scene\n    love.graphics.pop() -- return to the default coordinates\n    -- draw the status display using the screen coordinates\nend\n```\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis example is not supported in earlier versions.\n\nModify love.graphics state in a function, and restore it easily so other code isn't disturbed.\n\n``` lua\nfunction DrawCoolThing()\n    love.graphics.push(\"all\") -- save all love.graphics state so any changes can be restored\n \n    love.graphics.setColor(0, 0, 255)\n    love.graphics.setBlendMode(\"subtract\")\n \n    love.graphics.circle(\"fill\", 400, 300, 80)\n \n    love.graphics.pop() -- restore the saved love.graphics state\nend\n \nfunction love.draw()\n    love.graphics.setColor(255, 128, 128)\n    love.graphics.circle(\"fill\", 400, 300, 100)\n \n    DrawCoolThing()\n \n    love.graphics.rectangle(\"fill\", 600, 200, 200, 200) -- still uses the color set at the top of love.draw\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.pop](love.graphics.pop \"love.graphics.pop\")\n- [love.graphics.translate](love.graphics.translate \"love.graphics.translate\")\n- [love.graphics.rotate](love.graphics.rotate \"love.graphics.rotate\")\n- [love.graphics.scale](love.graphics.scale \"love.graphics.scale\")\n- [love.graphics.shear](love.graphics.shear \"love.graphics.shear\")\n- [love.graphics.origin](love.graphics.origin \"love.graphics.origin\")\n- [StackType](stacktype \"StackType\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.push](https://love2d.org/wiki/love.graphics.push)"
- name: love.graphics.quad
  id: love.graphics.quad
  summary: Removed in LÖVE 0.9.0 This function is not supported in that and later versions
  description: "# love.graphics.quad\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in that and later versions. Use [love.graphics.polygon](love.graphics.polygon \"love.graphics.polygon\") instead.\n\nDraws a quadrilateral shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.quad( mode, x1, y1, x2, y2, x3, y3, x4, y4 )\n```\n\n### Arguments\n\n[`DrawMode`](drawmode \"DrawMode\")` mode`  \nHow to draw the quad.\n\n[`number`](number \"number\")` x1`  \nThe position of the top left corner along x-axis.\n\n[`number`](number \"number\")` y1`  \nThe position of the top left corner along y-axis.\n\n[`number`](number \"number\")` x2`  \nThe position of the top right corner along x-axis.\n\n[`number`](number \"number\")` y2`  \nThe position of the top right corner along y-axis.\n\n[`number`](number \"number\")` x3`  \nThe position of the bottom right corner along x-axis.\n\n[`number`](number \"number\")` y3`  \nThe position of the bottom right corner along y-axis.\n\n[`number`](number \"number\")` x4`  \nThe position of the bottom left corner along x-axis.\n\n[`number`](number \"number\")` y4`  \nThe position of the bottom left corner along y-axis.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### A quadrilateral that has its top left corner located at 0,0 and whose width and height are 100 pixels.\n\n``` lua\nfunction love.draw()\n    love.graphics.quad(\"fill\", 0, 0, 100, 0, 100, 100, 0, 100)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.quad](https://love2d.org/wiki/love.graphics.quad)"
- name: love.graphics.rectangle
  id: love.graphics.rectangle
  summary: Available since LÖVE 0.3.2 This function is not supported in earlier versions
  description: "# love.graphics.rectangle\n\n**Available since LÖVE [0.3.2](https://love2d.org/wiki/0.3.2 \"0.3.2\")**  \nThis function is not supported in earlier versions.\n\nDraws a rectangle.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.rectangle( mode, x, y, width, height )\n```\n\n### Arguments\n\n[`DrawMode`](drawmode \"DrawMode\")` mode`  \nHow to draw the rectangle.\n\n[`number`](number \"number\")` x`  \nThe position of top-left corner along the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of top-left corner along the y-axis.\n\n[`number`](number \"number\")` width`  \nWidth of the rectangle.\n\n[`number`](number \"number\")` height`  \nHeight of the rectangle.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\nDraws a rectangle with rounded corners.\n\n### Synopsis\n\n``` lua\nlove.graphics.rectangle( mode, x, y, width, height, rx, ry, segments )\n```\n\n### Arguments\n\n[`DrawMode`](drawmode \"DrawMode\")` mode`  \nHow to draw the rectangle.\n\n[`number`](number \"number\")` x`  \nThe position of top-left corner along the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of top-left corner along the y-axis.\n\n[`number`](number \"number\")` width`  \nWidth of the rectangle.\n\n[`number`](number \"number\")` height`  \nHeight of the rectangle.\n\n[`number`](number \"number\")` rx`  \nThe x-axis radius of each round corner. Cannot be greater than half the rectangle's width.\n\n[`number`](number \"number\")` ry (rx)`  \nThe y-axis radius of each round corner. Cannot be greater than half the rectangle's height.\n\n[`number`](number \"number\")` segments (nil)`  \nThe number of segments used for drawing the round corners. A default amount will be chosen if no number is given.\n\n### Returns\n\nNothing.\n\n## Notes\n\nCustom shaders may not work correctly since this function (and other functions that draw primitives) doesn't have UV coordinates associated in it.\n\n## Examples\n\n### Draws a rectangle at 20,50 with a width of 60 and a height of 120\n\n``` lua\nfunction love.draw()\n    love.graphics.rectangle(\"fill\", 20, 50, 60, 120 )\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.rectangle](https://love2d.org/wiki/love.graphics.rectangle)"
- name: love.graphics.replaceTransform
  id: love.graphics.replacetransform
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.replaceTransform\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nReplaces the current coordinate transformation with the given [Transform](transform \"Transform\") object.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.replaceTransform( transform )\n```\n\n### Arguments\n\n[`Transform`](transform \"Transform\")` transform`  \nThe Transform object to replace the current graphics coordinate transform with.\n\n### Returns\n\nNothing.\n\n## Examples\n\n``` lua\nlocal transform = love.math.newTransform()\ntransform:translate(200, 0)\n \nfunction love.draw()\n    love.graphics.translate(100, 100)\n    love.graphics.rectangle(\"fill\", 0, 0, 50, 50)\n \n    love.graphics.replaceTransform(transform)\n    love.graphics.rectangle(\"fill\", 0, 0, 50, 50)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.math.newTransform](love.math.newtransform \"love.math.newTransform\")\n- [love.graphics.applyTransform](love.graphics.applytransform \"love.graphics.applyTransform\")\n- [love.graphics.push](love.graphics.push \"love.graphics.push\")\n- [love.graphics.pop](love.graphics.pop \"love.graphics.pop\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.replaceTransform](https://love2d.org/wiki/love.graphics.replaceTransform)"
- name: love.graphics.reset
  id: love.graphics.reset
  summary: Resets the current graphics settings
  description: "# love.graphics.reset\n\nResets the current graphics settings.\n\nCalling reset makes the current drawing color white, the current background color black, disables any active [Canvas](canvas \"Canvas\") or [Shader](shader \"Shader\"), and removes any scissor settings. It sets the [BlendMode](blendmode \"BlendMode\") to `alpha`, enables all [color component masks](love.graphics.setcolormask \"love.graphics.setColorMask\"), disables [wireframe mode](love.graphics.setwireframe \"love.graphics.setWireframe\") and resets the current graphics transformation to the [origin](love.graphics.origin \"love.graphics.origin\"). It also sets both the point and line drawing modes to `smooth` and their sizes to `1.0`.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.reset( )\n```\n\n### Arguments\n\nNone\n\n### Returns\n\nNothing\n\n## Notes\n\nThis function, like any other function that change graphics state, only affects the current stack. Calling [love.graphics.pop](love.graphics.pop \"love.graphics.pop\") will restore the previous transformation stack or the whole graphics settings, depending on how [love.graphics.push](love.graphics.push \"love.graphics.push\") was called.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setBackgroundColor](love.graphics.setbackgroundcolor \"love.graphics.setBackgroundColor\")\n- [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\")\n- [love.graphics.setLineStyle](love.graphics.setlinestyle \"love.graphics.setLineStyle\")\n- [love.graphics.setPointStyle](love.graphics.setpointstyle \"love.graphics.setPointStyle\")\n- [love.graphics.origin](love.graphics.origin \"love.graphics.origin\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.reset](https://love2d.org/wiki/love.graphics.reset)"
- name: love.graphics.rotate
  id: love.graphics.rotate
  summary: Rotates the coordinate system in two dimensions
  description: "# love.graphics.rotate\n\nRotates the coordinate system in two dimensions.\n\nCalling this function affects all future drawing operations by rotating the coordinate system around the origin by the given amount of radians. This change lasts until love.draw() exits.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.rotate( angle )\n```\n\n### Arguments\n\n[`number`](number \"number\")` angle`  \nThe amount to rotate the coordinate system in radians.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Rotating a static scene\n\nThis example shows how to rotate a static scene around a given point. Since the rotation is always around the origin, translating the center of the screen to the origin and back around the rotate operation makes the effective rotation point be the center of the screen. This is demonstrated by drawing a rectangle that shows the rotation and a point that is right in the center and thus does not move when the scene rotates. Note that the drawing commands have coordinates that depend solely on the screen size.\n\n``` lua\nlocal angle = 0\n \nfunction love.draw()\n    local width = love.graphics.getWidth()\n    local height = love.graphics.getHeight()\n    -- rotate around the center of the screen by angle radians\n    love.graphics.translate(width/2, height/2)\n    love.graphics.rotate(angle)\n    love.graphics.translate(-width/2, -height/2)\n    -- draw a white rectangle slightly off center\n    love.graphics.setColor(0xff, 0xff, 0xff)\n    love.graphics.rectangle('fill', width/2-100, height/2-100, 300, 400)\n    -- draw a five-pixel-wide blue point at the center\n    love.graphics.setPointSize(5)\n    love.graphics.setColor(0, 0, 0xff)\n    love.graphics.points(width/2, height/2)\nend\n \nfunction love.update(dt)\n    love.timer.sleep(.01)\n    angle = angle + dt * math.pi/2\n    angle = angle % (2*math.pi)\nend\n```\n\n  \n\n### Rotating the entire screen\n\nThis example shows how you can rotate the screen 90 degrees, counter clockwise. Especially useful if you just distribute .love files for android, where the game always starts in landscape mode. After this, the width and height of the canvas will be \"swapped\". Don't forget to always translate the input and do all the screen bounds specific checks accordingly.\n\n``` lua\nfunction love.load()\n    --get the width and height of the CANVAS, not of the DESKTOP\n    width, height = love.graphics.getWidth(), love.graphics.getHeight()\nend\n \nfunction love.draw()\n    love.graphics.translate(width/2, height/2)\n    love.graphics.rotate(-math.pi / 2)\n    love.graphics.translate(-height/2, -width/2)\n \n    love.graphics.setColor(255, 0, 0)\n    love.graphics.points(0, 0)\n    --It will require zoom to observe the 1 pixel point, but it goes to show that it works.\nend\n \n-- simple function for translating mouse input, for example\nlocal function translate(_x, _y)\n    local y = _x\n    local x = height - _y\n \n    return x, y\nend\n--[[\n--Say you are doing love.graphics.rectangle(\"fill\", 150, 170, 125, 145), in the translated system, like above\n--You would just need to translate(x, y) the mouse input and then check the x to be within\n--[150, 275] and y within [170, 315] respectively. No inversion of width and height.\n--]]\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.pop](love.graphics.pop \"love.graphics.pop\")\n- [love.graphics.push](love.graphics.push \"love.graphics.push\")\n- [love.graphics.scale](love.graphics.scale \"love.graphics.scale\")\n- [love.graphics.shear](love.graphics.shear \"love.graphics.shear\")\n- [love.graphics.translate](love.graphics.translate \"love.graphics.translate\")\n- [love.graphics.origin](love.graphics.origin \"love.graphics.origin\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.rotate](https://love2d.org/wiki/love.graphics.rotate)"
- name: love.graphics.scale
  id: love.graphics.scale
  summary: Scales the coordinate system in two dimensions
  description: "# love.graphics.scale\n\nScales the coordinate system in two dimensions.\n\nBy default the coordinate system in LÖVE corresponds to the display pixels in horizontal and vertical directions one-to-one, and the x-axis increases towards the right while the y-axis increases downwards. Scaling the coordinate system changes this relation.\n\nAfter scaling by sx and sy, all coordinates are treated as if they were multiplied by sx and sy. Every result of a drawing operation is also correspondingly scaled, so scaling by (2, 2) for example would mean making everything twice as large in both x- and y-directions. Scaling by a negative value flips the coordinate system in the corresponding direction, which also means everything will be drawn flipped or upside down, or both. Scaling by zero is not a useful operation.\n\nScale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.\n\nScaling lasts until [love.draw](love.draw \"love.draw\")() exits.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.scale( sx, sy )\n```\n\n### Arguments\n\n[`number`](number \"number\")` sx`  \nThe scaling in the direction of the x-axis.\n\n[`number`](number \"number\")` sy (sx)`  \nThe scaling in the direction of the y-axis. If omitted, it defaults to same as parameter sx.\n\n### Returns\n\nNothing.\n\n## Examples\n\nDraw two lines of text, one scaled and one normal. Uses [love.graphics.push](love.graphics.push \"love.graphics.push\") and [love.graphics.pop](love.graphics.pop \"love.graphics.pop\") to return to normal render scale.\n\n``` lua\nfunction love.draw()\n   love.graphics.push()\n   love.graphics.scale(0.5, 0.5)   -- reduce everything by 50% in both X and Y coordinates\n   love.graphics.print(\"Scaled text\", 50, 50)\n   love.graphics.pop()\n   love.graphics.print(\"Normal text\", 50, 50)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.pop](love.graphics.pop \"love.graphics.pop\")\n- [love.graphics.push](love.graphics.push \"love.graphics.push\")\n- [love.graphics.rotate](love.graphics.rotate \"love.graphics.rotate\")\n- [love.graphics.shear](love.graphics.shear \"love.graphics.shear\")\n- [love.graphics.translate](love.graphics.translate \"love.graphics.translate\")\n- [love.graphics.origin](love.graphics.origin \"love.graphics.origin\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.scale](https://love2d.org/wiki/love.graphics.scale)"
- name: love.graphics.setBackgroundColor
  id: love.graphics.setbackgroundcolor
  summary: Sets the background color
  description: "# love.graphics.setBackgroundColor\n\nSets the background color.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setBackgroundColor( red, green, blue, alpha )\n```\n\n### Arguments\n\n[`number`](number \"number\")` red`  \nThe red component (0-1).\n\n[`number`](number \"number\")` green`  \nThe green component (0-1).\n\n[`number`](number \"number\")` blue`  \nThe blue component (0-1).\n\n[`number`](number \"number\")` alpha (1)` Available since 0.8.0  \nThe alpha component (0-1).\n\n### Returns\n\nNothing.\n\n### Example\n\n``` lua\nfunction love.draw()\n    -- Set Background Color to #731b87 (115, 27, 135) with an alpha of 50%\n    -- Note: Remember that Love uses 0-1 and not 0-255\n    red = 115/255\n    green = 27/255\n    blue = 135/255\n    alpha = 50/100\n    love.graphics.setBackgroundColor( red, green, blue, alpha)\nend\n```\n\n## Function\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.setBackgroundColor( rgb )\n```\n\n### Arguments\n\n[`table`](table \"table\")` rgb`  \nA numerical indexed table with the red, green and blue values as [numbers](number \"number\").\n\n### Returns\n\nNothing.\n\n### Example\n\n``` lua\nfunction love.draw()\n    -- Set Background Color to #1b8724 (27, 135, 36)\n    -- Note: Remember that Love uses 0-1 and not 0-255\n    red = 27/255\n    green = 135/255\n    blue = 36/255\n    color = { red, green, blue}\n    love.graphics.setBackgroundColor( color)\nend\n```\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.setBackgroundColor( rgba )\n```\n\n### Arguments\n\n[`table`](table \"table\")` rgba`  \nA numerical indexed table with the red, green, blue and alpha values as [numbers](number \"number\").\n\n### Returns\n\nNothing.\n\n### Example\n\n``` lua\nfunction love.draw()\n    -- Set Background Color to #731b87 (115, 27, 135) with an alpha of 50%\n    -- Note: Remember that Love uses 0-1 and not 0-255\n    red = 115/255\n    green = 27/255\n    blue = 135/255\n    alpha = 50/100\n    color = { red, green, blue, alpha}\n    love.graphics.setBackgroundColor( color)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.clear](love.graphics.clear \"love.graphics.clear\")\n- [love.graphics.getBackgroundColor](love.graphics.getbackgroundcolor \"love.graphics.getBackgroundColor\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setBackgroundColor](https://love2d.org/wiki/love.graphics.setBackgroundColor)"
- name: love.graphics.setBlendMode
  id: love.graphics.setblendmode
  summary: Available since LÖVE 0.2.0 This function is not supported in earlier versions
  description: "# love.graphics.setBlendMode\n\n**Available since LÖVE [0.2.0](https://love2d.org/wiki/0.2.0 \"0.2.0\")**  \nThis function is not supported in earlier versions.\n\nSets the [blending mode](blendmode \"BlendMode\").\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setBlendMode( mode )\n```\n\n### Arguments\n\n[`BlendMode`](blendmode \"BlendMode\")` mode`  \nThe blend mode to use.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.setBlendMode( mode, alphamode )\n```\n\n### Arguments\n\n[`BlendMode`](blendmode \"BlendMode\")` mode`  \nThe blend mode to use.\n\n[`BlendAlphaMode`](blendalphamode \"BlendAlphaMode\")` alphamode (\"alphamultiply\")`  \nWhat to do with the alpha of drawn objects when blending.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe default \"alphamultiply\" alpha mode should normally be preferred except when drawing content with pre-multiplied alpha. If content is drawn to a [Canvas](canvas \"Canvas\") using the \"alphamultiply\" mode, the Canvas texture will have pre-multiplied alpha afterwards, so the \"premultiplied\" alpha mode should generally be used when drawing a Canvas to the screen.\n\n## Example\n\n``` lua\nfunction love.load()\n    love.graphics.setBackgroundColor(54/255, 172/255, 248/255)\nend\n \nfunction love.draw()\n    love.graphics.setBlendMode(\"alpha\") --Default blend mode\n    love.graphics.setColor(230/255, 44/255, 123/255)\n    love.graphics.rectangle(\"fill\", 50, 50, 100, 100)\n \n    love.graphics.setColor(12/255, 100/255, 230/255)\n    love.graphics.setBlendMode(\"multiply\")\n    love.graphics.rectangle(\"fill\", 75, 75, 125, 125)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getBlendMode](love.graphics.getblendmode \"love.graphics.getBlendMode\")\n- [BlendMode](blendmode \"BlendMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setBlendMode](https://love2d.org/wiki/love.graphics.setBlendMode)"
- name: love.graphics.setCanvas
  id: love.graphics.setcanvas
  summary: Available since LÖVE 0.8.0 It has been renamed from love.graphics.setRenderTarget
  description: "# love.graphics.setCanvas\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed from [love.graphics.setRenderTarget](love.graphics.setrendertarget \"love.graphics.setRenderTarget\").\n\nCaptures drawing operations to a [Canvas](canvas \"Canvas\").\n\n## Function\n\nSets the render target to a specified [Canvas](canvas \"Canvas\"). All drawing operations until the next *love.graphics.setCanvas* call will be redirected to the [Canvas](canvas \"Canvas\") and not shown on the screen.\n\nWhen using a [stencil](love.graphics.stencil \"love.graphics.stencil\") or [depth testing](love.graphics.setdepthmode \"love.graphics.setDepthMode\") with an active Canvas, the stencil buffer or depth buffer must be explicitly enabled in setCanvas via the variants below.\n\nNote that no canvas should be active when *[love.graphics.present](love.graphics.present \"love.graphics.present\")* is called. *love.graphics.present* is called at the end of [love.draw](love.draw \"love.draw\") in the default [love.run](love.run \"love.run\"), hence if you activate a canvas using this function, you normally need to deactivate it at some point before *love.draw* finishes.\n\n### Synopsis\n\n``` lua\nlove.graphics.setCanvas( canvas, mipmap )\n```\n\n### Arguments\n\n[`Canvas`](canvas \"Canvas\")` canvas`  \nThe new target.\n\n[`number`](number \"number\")` mipmap (1)` Available since 11.0  \nThe mipmap level to render to, for Canvases with [mipmaps](texture-getmipmapcount \"Texture:getMipmapCount\").\n\n### Returns\n\nNothing.\n\n## Function\n\nResets the render target to the screen, i.e. re-enables drawing to the screen.\n\n### Synopsis\n\n``` lua\nlove.graphics.setCanvas( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\nSets the render target to multiple simultaneous [2D](texturetype \"TextureType\") [Canvases](canvas \"Canvas\"). All drawing operations until the next *love.graphics.setCanvas* call will be redirected to the specified canvases and not shown on the screen.\n\n### Synopsis\n\n``` lua\nlove.graphics.setCanvas( canvas1, canvas2, ... )\n```\n\n### Arguments\n\n[`Canvas`](canvas \"Canvas\")` canvas1`  \nThe first render target.\n\n[`Canvas`](canvas \"Canvas\")` canvas2`  \nThe second render target.\n\n[`Canvas`](canvas \"Canvas\")` ...`  \nMore canvases.\n\n### Returns\n\nNothing.\n\n### Notes\n\nNormally all drawing operations will draw only to the first canvas passed to the function, but that can be changed if a [pixel shader](shader \"Shader\") is used with the [`void effect` function](love.graphics.newshader#Pixel_Shader_Function \"love.graphics.newShader\") instead of the regular `vec4 effect`.\n\nAll canvas arguments must have the same widths and heights and the same [texture type](texturemode \"TextureMode\"). Not all computers which support Canvases will support multiple render targets. If [love.graphics.isSupported(\"multicanvas\")](love.graphics.issupported \"love.graphics.isSupported\") returns true, at least 4 simultaneously active canvases are supported.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nSets the render target to the specified [layer/slice](texturetype \"TextureType\") and [mipmap level](texture-getmipmapcount \"Texture:getMipmapCount\") of the given non-2D [Canvas](canvas \"Canvas\"). All drawing operations until the next *love.graphics.setCanvas* call will be redirected to the [Canvas](canvas \"Canvas\") and not shown on the screen.\n\n### Synopsis\n\n``` lua\nlove.graphics.setCanvas( canvas, slice, mipmap )\n```\n\n### Arguments\n\n[`Canvas`](canvas \"Canvas\")` canvas`  \nThe new render target.\n\n[`number`](number \"number\")` slice`  \nFor cubemaps this is the cube face index to render to (between 1 and 6). For Array textures this is the [array layer](texture-getlayercount \"Texture:getLayerCount\"). For volume textures this is the depth slice. 2D canvases should use a value of 1.\n\n[`number`](number \"number\")` mipmap (1)`  \nThe mipmap level to render to, for Canvases with [mipmaps](texture-getmipmapcount \"Texture:getMipmapCount\").\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nSets the active render target(s) and active stencil and depth buffers based on the specified setup information. All drawing operations until the next *love.graphics.setCanvas* call will be redirected to the specified [Canvases](canvas \"Canvas\") and not shown on the screen.\n\n### Synopsis\n\n``` lua\nlove.graphics.setCanvas( setup )\n```\n\n### Arguments\n\n[`table`](table \"table\")` setup`  \nA table specifying the active Canvas(es), their mipmap levels and active layers if applicable, and whether to use a stencil and/or depth buffer.\n\n[`RenderTargetSetup`](https://love2d.org/w/index.php?title=RenderTargetSetup&action=edit&redlink=1 \"RenderTargetSetup (page does not exist)\")` [1]`  \nThe Canvas to render to.\n\n[`RenderTargetSetup`](https://love2d.org/w/index.php?title=RenderTargetSetup&action=edit&redlink=1 \"RenderTargetSetup (page does not exist)\")` [2] (nil)`  \nAn additional Canvas to render to, if multiple simultaneous render targets are wanted.\n\n[`RenderTargetSetup`](https://love2d.org/w/index.php?title=RenderTargetSetup&action=edit&redlink=1 \"RenderTargetSetup (page does not exist)\")` ...`  \nAdditional Canvases to render to, if multiple simultaneous render targets are wanted.\n\n[`boolean`](boolean \"boolean\")` stencil (false)`  \nWhether an internally managed stencil buffer should be used, if the `depthstencil` field isn't set.\n\n[`boolean`](boolean \"boolean\")` depth (false)`  \nWhether an internally managed depth buffer should be used, if the `depthstencil` field isn't set.\n\n[`RenderTargetSetup`](https://love2d.org/w/index.php?title=RenderTargetSetup&action=edit&redlink=1 \"RenderTargetSetup (page does not exist)\")` depthstencil (nil)`  \nAn optional custom depth/stencil [formatted](pixelformat \"PixelFormat\") Canvas to use for the depth and/or stencil buffer.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe `RenderTargetSetup` parameters can either be a [Canvas](canvas \"Canvas\") object, or a table in the following format: `{canvas, mipmap=#, layer=#, face=#}`\n\n[`Canvas`](canvas \"Canvas\")` [1]`  \nThe Canvas to use for this active render target.\n\n[`number`](number \"number\")` mipmap (1)`  \nThe mipmap level to render to, for Canvases with [mipmaps](texture-getmipmapcount \"Texture:getMipmapCount\").\n\n[`number`](number \"number\")` layer (1)`  \nOnly used for [Volume and Array](texturetype \"TextureType\")-type Canvases. For Array textures this is the [array layer](texture-getlayercount \"Texture:getLayerCount\") to render to. For volume textures this is the depth slice.\n\n[`number`](number \"number\")` face (1)`  \nOnly used for [Cubemap](texturetype \"TextureType\")-type Canvases. The cube face index to render to (between 1 and 6)\n\n## Examples\n\n### Drawing to a canvas\n\n``` lua\nfunction love.load()\n    -- create canvas\n    canvas = love.graphics.newCanvas()\n \n    -- direct drawing operations to the canvas\n    love.graphics.setCanvas(canvas)\n \n    -- draw colored square to canvas\n    love.graphics.setColor(0.8, 0.9, 0.4)\n    love.graphics.rectangle(\"fill\", 0, 0, 100, 100)\n \n    -- re-enable drawing to the main screen\n    love.graphics.setCanvas()\nend\n \nfunction love.draw()\n    -- draw scaled canvas to screen\n    love.graphics.setColor(1, 1, 1)\n    love.graphics.draw(canvas, 200, 100, 0, 0.5, 0.5)\nend\n```\n\n  \n\n### Advanced setup with the table variant of love.graphics.setCanvas\n\n``` lua\n-- Allow love.graphics.stencil calls when drawing to the given Canvas.\nlove.graphics.setCanvas({canvas, stencil=true})\n \n-- Use multiple simultaneous render targets when drawing to several canvases of the Array Texture type,\n-- and use a custom depth buffer as well.\ncanvas1 = love.graphics.newCanvas(128, 128, 4, {type=\"array\"})\ncanvas2 = love.graphics.newCanvas(128, 128, 8, {type=\"array\"})\ndepthcanvas = love.graphics.newCanvas(128, 128, {format=\"depth24\", readable=true})\n \nlove.graphics.setCanvas({\n    {canvas1, layer = 3},\n    {canvas2, layer = 1},\n    depthstencil = depthcanvas,\n})\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getCanvas](love.graphics.getcanvas \"love.graphics.getCanvas\")\n- [Canvas](canvas \"Canvas\")\n- [Canvas:renderTo](canvas-renderto \"Canvas:renderTo\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setCanvas](https://love2d.org/wiki/love.graphics.setCanvas)"
- name: love.graphics.setCaption
  id: love.graphics.setcaption
  summary: Removed in LÖVE 0.9.0 Moved to the love.window module as love.window.setTitle
  description: "# love.graphics.setCaption\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nMoved to the [love.window](love.window \"love.window\") module as [love.window.setTitle](love.window.settitle \"love.window.setTitle\").\n\n  \nSets the window caption.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setCaption( caption )\n```\n\n### Arguments\n\n[`string`](string \"string\")` caption`  \nThe new window caption.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setCaption](https://love2d.org/wiki/love.graphics.setCaption)"
- name: love.graphics.setColor
  id: love.graphics.setcolor
  summary: Sets the color used for drawing
  description: "# love.graphics.setColor\n\nSets the color used for drawing.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setColor( red, green, blue, alpha )\n```\n\n### Arguments\n\n[`number`](number \"number\")` red`  \nThe amount of red.\n\n[`number`](number \"number\")` green`  \nThe amount of green.\n\n[`number`](number \"number\")` blue`  \nThe amount of blue.\n\n[`number`](number \"number\")` alpha (1)`  \nThe amount of alpha. The alpha value will be applied to all subsequent draw operations, even the drawing of an image.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.setColor( rgba )\n```\n\n### Arguments\n\n[`table`](table \"table\")` rgba`  \nA numerical indexed table with the red, green, blue and alpha values as [numbers](number \"number\"). The alpha is optional and defaults to 1 if it is left out.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Draw a red, blue and green circle\n\n``` lua\nfunction love.draw()\n    love.graphics.setColor(1, 0, 0)\n    love.graphics.circle(\"fill\", 50, 50, 20)\n \n    love.graphics.setColor(0, 0, 1)\n    love.graphics.circle(\"fill\", 50, 100, 20)\n \n    myColor = {0, 1, 0, 1}\n    love.graphics.setColor(myColor)\n    love.graphics.circle(\"fill\", 50, 150, 20)\nend\n```\n\n### Display a Venn diagram\n\n``` lua\nfunction love.load()\n    baseX = 300\n    baseY = 400\n    radius = 100\n    offsetY = radius*.5*math.sqrt(3)\n    love.graphics.setBackgroundColor(1, 1, 1)\nend\n \nfunction love.draw()\n    love.graphics.setColor(1, 0, 0, 0.4)\n    love.graphics.circle('fill', baseX, baseY, radius)\n    love.graphics.setColor(0, 1, 0, 0.4)\n    love.graphics.circle('fill', baseX + radius / 2, baseY - offsetY, radius)\n    love.graphics.setColor(0, 0, 1, 0.4)\n    love.graphics.circle('fill', baseX + radius, baseY, radius)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [HSL color](https://love2d.org/wiki/HSL_color \"HSL color\") (an alternate color space, based on human perception)\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setColor](https://love2d.org/wiki/love.graphics.setColor)"
- name: love.graphics.setColorMask
  id: love.graphics.setcolormask
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.graphics.setColorMask\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the color mask. Enables or disables specific color components when rendering and clearing the screen. For example, if **red** is set to **false**, no further changes will be made to the red component of any pixels.\n\n## Function\n\nEnables color masking for the specified color components.\n\n### Synopsis\n\n``` lua\nlove.graphics.setColorMask( red, green, blue, alpha )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` red`  \nRender red component.\n\n[`boolean`](boolean \"boolean\")` green`  \nRender green component.\n\n[`boolean`](boolean \"boolean\")` blue`  \nRender blue component.\n\n[`boolean`](boolean \"boolean\")` alpha`  \nRender alpha component.\n\n### Returns\n\nNothing.\n\n## Function\n\nDisables color masking.\n\n### Synopsis\n\n``` lua\nlove.graphics.setColorMask( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getColorMask](love.graphics.getcolormask \"love.graphics.getColorMask\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setColorMask](https://love2d.org/wiki/love.graphics.setColorMask)"
- name: love.graphics.setColorMode
  id: love.graphics.setcolormode
  summary: Available since LÖVE 0.2.0 and removed in LÖVE 0.9.0 This function is not supported in earlier or later versions
  description: "# love.graphics.setColorMode\n\n**Available since LÖVE [0.2.0](https://love2d.org/wiki/0.2.0 \"0.2.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier or later versions.\n\nSets the color mode (which controls how images are affected by the current color).\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setColorMode( mode )\n```\n\n### Arguments\n\n[`ColorMode`](colormode \"ColorMode\")` mode`  \nThe color mode to use.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getColorMode](love.graphics.getcolormode \"love.graphics.getColorMode\")\n\n  \n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setColorMode](https://love2d.org/wiki/love.graphics.setColorMode)"
- name: love.graphics.setDefaultFilter
  id: love.graphics.setdefaultfilter
  summary: Available since LÖVE 0.9.0 It has been renamed from love.graphics.setDefaultImageFilter
  description: "# love.graphics.setDefaultFilter\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [love.graphics.setDefaultImageFilter](love.graphics.setdefaultimagefilter \"love.graphics.setDefaultImageFilter\").\n\nSets the default scaling filters used with [Images](image \"Image\"), [Canvases](canvas \"Canvas\"), and [Fonts](font \"Font\").\n\nThis function does not apply retroactively to loaded images. Existing objects retain their current scaling filters.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setDefaultFilter( min, mag, anisotropy )\n```\n\n### Arguments\n\n[`FilterMode`](filtermode \"FilterMode\")` min`  \nFilter mode used when scaling the image down.\n\n[`FilterMode`](filtermode \"FilterMode\")` mag`  \nFilter mode used when scaling the image up.\n\n[`number`](number \"number\")` anisotropy (1)`  \nMaximum amount of Anisotropic Filtering used.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getDefaultFilter](love.graphics.getdefaultfilter \"love.graphics.getDefaultFilter\")\n- [FilterMode](filtermode \"FilterMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setDefaultFilter](https://love2d.org/wiki/love.graphics.setDefaultFilter)"
- name: love.graphics.setDefaultImageFilter
  id: love.graphics.setdefaultimagefilter
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.9.0 It has been renamed to love.graphics.setDefaultFilter
  description: "# love.graphics.setDefaultImageFilter\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [love.graphics.setDefaultFilter](love.graphics.setdefaultfilter \"love.graphics.setDefaultFilter\").\n\nSets the default scaling filters.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setDefaultImageFilter( min, mag )\n```\n\n### Arguments\n\n[`FilterMode`](filtermode \"FilterMode\")` min`  \nFilter mode used when scaling the image down.\n\n[`FilterMode`](filtermode \"FilterMode\")` mag`  \nFilter mode used when scaling the image up.\n\n### Returns\n\nNothing.\n\n## Notes\n\nThis function does not apply retroactively to loaded images.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getDefaultImageFilter](love.graphics.getdefaultimagefilter \"love.graphics.getDefaultImageFilter\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setDefaultImageFilter](https://love2d.org/wiki/love.graphics.setDefaultImageFilter)"
- name: love.graphics.setDepthMode
  id: love.graphics.setdepthmode
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.setDepthMode\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nConfigures depth testing and writing to the depth buffer.\n\nThis is low-level functionality designed for use with custom [vertex shaders](love.graphics.newshader \"love.graphics.newShader\") and [Meshes](mesh \"Mesh\") with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.\n\nDepth testing and depth writes will have no effect unless the depth field is set to true in a table passed to [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\"), or a custom Canvas with a depth [PixelFormat](pixelformat \"PixelFormat\") is set in the depthstencil field in a table passed to [setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\").\n\nWriting to the depth buffer is generally incompatible with rendering alpha-blended sprites / images. By default depth is determined by geometry (vertices) instead of texture alpha values, the depth buffer only stores a single depth value per pixel, and alpha blending **requires** back-to-front rendering for blending to be correct.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setDepthMode( comparemode, write  )\n```\n\n### Arguments\n\n[`CompareMode`](comparemode \"CompareMode\")` comparemode`  \nDepth comparison mode used for depth testing.\n\n[`boolean`](boolean \"boolean\")` write`  \nWhether to write update / write values to the depth buffer when rendering.\n\n### Returns\n\nNothing.\n\n## Function\n\nDisables depth testing and depth writes.\n\n### Synopsis\n\n``` lua\nlove.graphics.setDepthMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getDepthMode](love.graphics.getdepthmode \"love.graphics.getDepthMode\")\n- [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\")\n- [love.graphics.clear](love.graphics.clear \"love.graphics.clear\")\n- [PixelFormat](pixelformat \"PixelFormat\")\n- [Mesh](mesh \"Mesh\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setDepthMode](https://love2d.org/wiki/love.graphics.setDepthMode)"
- name: love.graphics.setFont
  id: love.graphics.setfont
  summary: Set an already-loaded Font as the current font or create and load a new one from the file and size
  description: "# love.graphics.setFont\n\nSet an already-loaded [Font](font \"Font\") as the current font or create and load a new one from the file and size.\n\nIt's recommended that [Font](font \"Font\") objects are created with [love.graphics.newFont](love.graphics.newfont \"love.graphics.newFont\") in the loading stage and then passed to this function in the drawing stage.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setFont( font )\n```\n\n### Arguments\n\n[`Font`](font \"Font\")` font`  \nThe Font object to use.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nlove.graphics.setFont( filename, size )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filepath to the font.\n\n[`number`](number \"number\")` size (12)`  \nThe size of the font.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\nThis variant creates a new font using the default font and the size specified, and sets it as the current font. **Do not use this function in [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\").** That would create a new font every frame, eating up memory very quickly.\n\n### Synopsis\n\n``` lua\nlove.graphics.setFont( size )\n```\n\n### Arguments\n\n[`number`](number \"number\")` size (12)`  \nThe size of the font.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Draw some text with default font, 18px\n\n``` lua\nfunction love.graphics.load()\n  love.graphics.setFont(love.graphics.newFont(18))\nend\n \nfunction love.draw()\n    love.graphics.print(\"Hello\", 300, 300)\nend\n```\n\n### Draw some text with custom font, 18px\n\n``` lua\nfunction love.load()\n    Font = love.graphics.newFont(\"font.ttf\", 18)\nend\n \nfunction love.draw()\n    love.graphics.setFont(Font)\n    love.graphics.print(\"Hello World\", 0, 0)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.newFont](love.graphics.newfont \"love.graphics.newFont\")\n- [love.graphics.getFont](love.graphics.getfont \"love.graphics.getFont\")\n- [love.graphics.setNewFont](love.graphics.setnewfont \"love.graphics.setNewFont\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setFont](https://love2d.org/wiki/love.graphics.setFont)"
- name: love.graphics.setFrontFaceWinding
  id: love.graphics.setfrontfacewinding
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.setFrontFaceWinding\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nSets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.\n\nThis is designed for use in combination with [Mesh face culling](love.graphics.setmeshcullmode \"love.graphics.setMeshCullMode\"). Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setFrontFaceWinding( winding )\n```\n\n### Arguments\n\n[`VertexWinding`](vertexwinding \"VertexWinding\")` winding`  \nThe winding mode to use. The default winding is counterclockwise (\"ccw\").\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getFrontFaceWinding](love.graphics.getfrontfacewinding \"love.graphics.getFrontFaceWinding\")\n- [love.graphics.setMeshCullMode](love.graphics.setmeshcullmode \"love.graphics.setMeshCullMode\")\n- [Mesh](mesh \"Mesh\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setFrontFaceWinding](https://love2d.org/wiki/love.graphics.setFrontFaceWinding)"
- name: love.graphics.setIcon
  id: love.graphics.seticon
  summary: Removed in LÖVE 0.9.0 Moved to the love.window module as love.window.setIcon
  description: "# love.graphics.setIcon\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nMoved to the [love.window](love.window \"love.window\") module as [love.window.setIcon](love.window.seticon \"love.window.setIcon\").\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nSet window icon. This feature is not completely supported on Windows (apparently an SDL bug, not a LOVE bug: [\\[1\\]](https://bitbucket.org/rude/love/issue/143/windows-no-titlebar-icon)).\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setIcon( image )\n```\n\n### Arguments\n\n[`Image`](image \"Image\")` image`  \nThe window icon.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setIcon](https://love2d.org/wiki/love.graphics.setIcon)"
- name: love.graphics.setInvertedStencil
  id: love.graphics.setinvertedstencil
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.10.0 It has been replaced by love.graphics.stencil and love.graphics.setStencilTest
  description: "# love.graphics.setInvertedStencil\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been replaced by [love.graphics.stencil](love.graphics.stencil \"love.graphics.stencil\") and [love.graphics.setStencilTest](love.graphics.setstenciltest \"love.graphics.setStencilTest\").\n\nDefines an inverted stencil for the drawing operations or releases the active one.\n\nIt's the same as [love.graphics.setStencil](love.graphics.setstencil \"love.graphics.setStencil\") with the mask inverted.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setInvertedStencil( stencilFunction )\n```\n\n### Arguments\n\n[`function`](function \"function\")` stencilFunction`  \nFunction that draws the stencil.\n\n### Returns\n\nNothing.\n\n## Function\n\nReleases the active stencil.\n\n### Synopsis\n\n``` lua\nlove.graphics.setInvertedStencil( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.newStencil](love.graphics.newstencil \"love.graphics.newStencil\")\n- [love.graphics.setStencil](love.graphics.setstencil \"love.graphics.setStencil\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setInvertedStencil](https://love2d.org/wiki/love.graphics.setInvertedStencil)"
- name: love.graphics.setLine
  id: love.graphics.setline
  summary: Removed in LÖVE 0.9.0 Use love.graphics.setLineWidth and love.graphics.setLineStyle
  description: "# love.graphics.setLine\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nUse [love.graphics.setLineWidth](love.graphics.setlinewidth \"love.graphics.setLineWidth\") and [love.graphics.setLineStyle](love.graphics.setlinestyle \"love.graphics.setLineStyle\").\n\nSets the line width and style.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setLine( width, style )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nThe width of the line.\n\n[`LineStyle`](linestyle \"LineStyle\")` style (\"smooth\")`  \nThe LineStyle to use.\n\n### Returns\n\nNothing.\n\n## Example\n\n``` lua\nlove.graphics.setLine(2, \"smooth\")\nlove.graphics.line(15, 25, 69, 89)\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setLineWidth](love.graphics.setlinewidth \"love.graphics.setLineWidth\")\n- [love.graphics.setLineStyle](love.graphics.setlinestyle \"love.graphics.setLineStyle\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setLine](https://love2d.org/wiki/love.graphics.setLine)"
- name: love.graphics.setLineJoin
  id: love.graphics.setlinejoin
  summary: Sets the line join style
  description: "# love.graphics.setLineJoin\n\nSets the line join style. See [LineJoin](linejoin \"LineJoin\") for the possible options.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setLineJoin( join )\n```\n\n### Arguments\n\n[`LineJoin`](linejoin \"LineJoin\")` join`  \nThe LineJoin to use.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getLineJoin](love.graphics.getlinejoin \"love.graphics.getLineJoin\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setLineJoin](https://love2d.org/wiki/love.graphics.setLineJoin)"
- name: love.graphics.setLineStipple
  id: love.graphics.setlinestipple
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# love.graphics.setLineStipple\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nSets the line stipple pattern.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setLineStipple( pattern, repeat )\n```\n\n### Arguments\n\n[`number`](number \"number\")` pattern`  \nA 16-bit pattern.\n\n[`number`](number \"number\")` repeat (1)`  \nRepeat factor.\n\n### Returns\n\nNothing.\n\n## Additional Information\n\nA stipple pattern is made up of a 16bit sequence of 0s and 1s, Just like binary.\n\nThe pattern is repeated to complete the line. Using the repeat will stretch the pattern and multiplies each 1 and 0. For example if three 1s are consecutively placed they are stretched to six if the repeat is 2. The maximum repeat is 255, and the minimum repeat is 1.\n\nA 1 is a a cue to draw a pixel whereas 0 is the opposite and does not draw a pixel, This is done per pixel for the given line.\n\nA pattern is read from back to front.\n\n0x3F07 would equal to 0011111100000111 in binary.\n\nYou can visualise the pattern by reading the binary sequence backwards.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setLineStipple](https://love2d.org/wiki/love.graphics.setLineStipple)"
- name: love.graphics.setLineStyle
  id: love.graphics.setlinestyle
  summary: Available since LÖVE 0.3.2 This function is not supported in earlier versions
  description: "# love.graphics.setLineStyle\n\n**Available since LÖVE [0.3.2](https://love2d.org/wiki/0.3.2 \"0.3.2\")**  \nThis function is not supported in earlier versions.\n\nSets the line style.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setLineStyle( style )\n```\n\n### Arguments\n\n[`LineStyle`](linestyle \"LineStyle\")` style`  \nThe LineStyle to use. Line styles include `smooth` and `rough`.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getLineStyle](love.graphics.getlinestyle \"love.graphics.getLineStyle\")\n- [love.graphics.setLineWidth](love.graphics.setlinewidth \"love.graphics.setLineWidth\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setLineStyle](https://love2d.org/wiki/love.graphics.setLineStyle)"
- name: love.graphics.setLineWidth
  id: love.graphics.setlinewidth
  summary: Available since LÖVE 0.3.2 This function is not supported in earlier versions
  description: "# love.graphics.setLineWidth\n\n**Available since LÖVE [0.3.2](https://love2d.org/wiki/0.3.2 \"0.3.2\")**  \nThis function is not supported in earlier versions.\n\nSets the line width.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setLineWidth( width )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nThe width of the line.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getLineWidth](love.graphics.getlinewidth \"love.graphics.getLineWidth\")\n- [love.graphics.setLineStyle](love.graphics.setlinestyle \"love.graphics.setLineStyle\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setLineWidth](https://love2d.org/wiki/love.graphics.setLineWidth)"
- name: love.graphics.setMeshCullMode
  id: love.graphics.setmeshcullmode
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.setMeshCullMode\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nSets whether [back-facing](love.graphics.setfrontfacewinding \"love.graphics.setFrontFaceWinding\") triangles in a [Mesh](mesh \"Mesh\") are culled.\n\nThis is designed for use with low level custom hardware-accelerated 3D rendering via [custom vertex attributes](love.graphics.newmesh \"love.graphics.newMesh\") on Meshes, custom [vertex shaders](love.graphics.newshader \"love.graphics.newShader\"), and [depth testing](love.graphics.setdepthmode \"love.graphics.setDepthMode\") with a [depth buffer](pixelformat \"PixelFormat\").\n\nBy default, both front- and back-facing triangles in Meshes are rendered.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setMeshCullMode( mode )\n```\n\n### Arguments\n\n[`CullMode`](cullmode \"CullMode\")` mode`  \nThe Mesh face culling mode to use (whether to render everything, cull back-facing triangles, or cull front-facing triangles).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getMeshCullMode](love.graphics.getmeshcullmode \"love.graphics.getMeshCullMode\")\n- [love.graphics.setFrontFaceWinding](love.graphics.setfrontfacewinding \"love.graphics.setFrontFaceWinding\")\n- [love.graphics.setDepthMode](love.graphics.setdepthmode \"love.graphics.setDepthMode\")\n- [Mesh](mesh \"Mesh\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setMeshCullMode](https://love2d.org/wiki/love.graphics.setMeshCullMode)"
- name: love.graphics.setMode
  id: love.graphics.setmode
  summary: Removed in LÖVE 0.9.0 Moved to the love.window module as love.window.setMode
  description: "# love.graphics.setMode\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nMoved to the [love.window](love.window \"love.window\") module as [love.window.setMode](love.window.setmode \"love.window.setMode\").\n\n  \nChanges the window size, or the display mode if fullscreen.\n\nIf width or height is 0, setMode will use the width or height of the desktop.\n\nChanging the display mode may have side effects: for example, [Canvases](canvas \"Canvas\") will be cleared; make sure to save their contents beforehand.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.graphics.setMode( width, height, fullscreen, vsync, fsaa )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nDisplay width.\n\n[`number`](number \"number\")` height`  \nDisplay height.\n\n[`boolean`](boolean \"boolean\")` fullscreen (false)`  \nFullscreen (true), or windowed (false).\n\n[`boolean`](boolean \"boolean\")` vsync (true)`  \nTrue if LÖVE should wait for vsync, false otherwise.\n\n[`number`](number \"number\")` fsaa (0)`  \nThe number of MSAA samples.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if successful, false otherwise.\n\n## Notes\n\nIf you have disabled the screen in [conf.lua](love.conf \"Config Files\") and use this function to manually create the window, then you must not call any other [love.graphics](love.graphics \"love.graphics\").\\* function before this one. Doing so will result in undefined behavior and/or crashes.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setMode](https://love2d.org/wiki/love.graphics.setMode)"
- name: love.graphics.setNewFont
  id: love.graphics.setnewfont
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.graphics.setNewFont\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nCreates and sets a new [Font](font \"Font\").\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\nfont = love.graphics.setNewFont( size )\n```\n\n### Arguments\n\n[`number`](number \"number\")` size (12)`  \nThe size of the font.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nThe new font.\n\n## Function\n\n### Synopsis\n\n``` lua\nfont = love.graphics.setNewFont( filename, size )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe path and name of the file with the font.\n\n[`number`](number \"number\")` size (12)`  \nThe size of the font.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nThe new font.\n\n## Function\n\n### Synopsis\n\n``` lua\nfont = love.graphics.setNewFont( file, size )\n```\n\n### Arguments\n\n[`File`](file \"File\")` file`  \nA [File](file \"File\") with the font.\n\n[`number`](number \"number\")` size (12)`  \nThe size of the font.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nThe new font.\n\n## Function\n\n### Synopsis\n\n``` lua\nfont = love.graphics.setNewFont( data, size )\n```\n\n### Arguments\n\n[`Data`](data \"Data\")` data`  \nA [Data](data \"Data\") with the font.\n\n[`number`](number \"number\")` size (12)`  \nThe size of the font.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nThe new font.\n\n## Function\n\n### Synopsis\n\n``` lua\nfont = love.graphics.setNewFont( rasterizer )\n```\n\n### Arguments\n\n[`Rasterizer`](rasterizer \"Rasterizer\")` rasterizer`  \nA rasterizer.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nThe new font.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.newFont](love.graphics.newfont \"love.graphics.newFont\")\n- [love.graphics.setFont](love.graphics.setfont \"love.graphics.setFont\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setNewFont](https://love2d.org/wiki/love.graphics.setNewFont)"
- name: love.graphics.setPixelEffect
  id: love.graphics.setpixeleffect
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.9.0 It has been renamed to love.graphics.setShader
  description: "# love.graphics.setPixelEffect\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [love.graphics.setShader](love.graphics.setshader \"love.graphics.setShader\").\n\n  \nSets or resets a [PixelEffect](pixeleffect \"PixelEffect\") as the current pixel effect. All drawing operations until the next *love.graphics.setPixelEffect* will be drawn using the [PixelEffect](pixeleffect \"PixelEffect\") object specified.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setPixelEffect( pixeleffect )\n```\n\n### Arguments\n\n[`PixelEffect`](pixeleffect \"PixelEffect\")` pixeleffect`  \nThe new pixel effect.\n\n### Returns\n\nNothing.\n\n### Notes\n\nSets the current pixel shader to a specified [PixelEffect](pixeleffect \"PixelEffect\"). All drawing operations until the next *love.graphics.setPixelEffect* will be drawn using the [PixelEffect](pixeleffect \"PixelEffect\") object specified.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setPixelEffect( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n### Notes\n\nDisables pixel effects, allowing unfiltered drawing operations.\n\n## Examples\n\n### Drawing a rectangle using a pixel effect\n\n``` lua\nfunction love.load()\n    effect = love.graphics.newPixelEffect [[\n        extern number time;\n        vec4 effect(vec4 color, Image texture, vec2 texture_coords, vec2 pixel_coords)\n        {\n            return vec4((1.0+sin(time))/2.0, abs(cos(time)), abs(sin(time)), 1.0);\n        }\n    ]]\nend\n \nfunction love.draw()\n    -- boring white\n    love.graphics.setPixelEffect()\n    love.graphics.rectangle('fill', 10,10,790,285)\n \n    -- LOOK AT THE PRETTY COLORS!\n    love.graphics.setPixelEffect(effect)\n    love.graphics.rectangle('fill', 10,305,790,285)\nend\n \nlocal t = 0\nfunction love.update(dt)\n    t = t + dt\n    effect:send(\"time\", t)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [PixelEffect](pixeleffect \"PixelEffect\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setPixelEffect](https://love2d.org/wiki/love.graphics.setPixelEffect)"
- name: love.graphics.setPoint
  id: love.graphics.setpoint
  summary: Removed in LÖVE 0.9.0 Use love.graphics.setPointSize and love.graphics.setPointStyle
  description: "# love.graphics.setPoint\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nUse [love.graphics.setPointSize](love.graphics.setpointsize \"love.graphics.setPointSize\") and [love.graphics.setPointStyle](love.graphics.setpointstyle \"love.graphics.setPointStyle\").\n\nSets the point size and style.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setPoint( size, style )\n```\n\n### Arguments\n\n[`number`](number \"number\")` size`  \nThe new point size.\n\n[`PointStyle`](pointstyle \"PointStyle\")` style`  \nThe new point style.\n\n### Returns\n\nNothing.\n\n## Examples\n\nIncrease the point size by 1 and set it to smooth.\n\n``` lua\nlocal s = love.graphics.getPointSize() + 1\nlove.graphics.setPoint(s, \"smooth\")\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setPointSize](love.graphics.setpointsize \"love.graphics.setPointSize\")\n- [love.graphics.setPointStyle](love.graphics.setpointstyle \"love.graphics.setPointStyle\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setPoint](https://love2d.org/wiki/love.graphics.setPoint)"
- name: love.graphics.setPointSize
  id: love.graphics.setpointsize
  summary: Sets the point size
  description: "# love.graphics.setPointSize\n\nSets the [point](love.graphics.points \"love.graphics.points\") size.\n\nThe sizes of points are not affected by [love.graphics.scale](love.graphics.scale \"love.graphics.scale\") – they're always in pixels, or since [11.0](https://love2d.org/wiki/11.0 \"11.0\"), in [DPI-scaled units](love.graphics.getdpiscale \"love.graphics.getDPIScale\").\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setPointSize( size )\n```\n\n### Arguments\n\n[`number`](number \"number\")` size`  \nThe new point size.\n\n### Returns\n\nNothing.\n\n## Examples\n\nIncrease the point size by 1, by using [love.graphics.getPointSize](love.graphics.getpointsize \"love.graphics.getPointSize\").\n\n``` lua\nfunction love.draw()\n    local s = love.graphics.getPointSize() + 1\n    love.graphics.setPointSize(s)\n    love.graphics.points(100, 100)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.points](love.graphics.points \"love.graphics.points\")\n- [love.graphics.setPointStyle](love.graphics.setpointstyle \"love.graphics.setPointStyle\")\n- [love.graphics.getPointSize](love.graphics.getpointsize \"love.graphics.getPointSize\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setPointSize](https://love2d.org/wiki/love.graphics.setPointSize)"
- name: love.graphics.setPointStyle
  id: love.graphics.setpointstyle
  summary: Removed in LÖVE 0.10.0 This function is not supported in that and later versions
  description: "# love.graphics.setPointStyle\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in that and later versions.\n\n  \nSets the [point](love.graphics.point \"love.graphics.point\") style.\n\nSmooth points are notoriously buggy on a lot of graphics drivers. Use \"rough\" [point style](pointstyle \"PointStyle\") for increased consistency between different drivers.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setPointStyle( style )\n```\n\n### Arguments\n\n[`PointStyle`](pointstyle \"PointStyle\")` style`  \nThe new point style.\n\n### Returns\n\nNothing.\n\n## Examples\n\nToggle between [point styles](pointstyle \"PointStyle\") with the help of [love.graphics.getPointStyle](love.graphics.getpointstyle \"love.graphics.getPointStyle\").\n\n``` lua\nif love.graphics.getPointStyle() == \"rough\" then\n   love.graphics.setPointStyle(\"smooth\")\nelse\n   love.graphics.setPointStyle(\"rough\")\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.point](love.graphics.point \"love.graphics.point\")\n- [love.graphics.setPointSize](love.graphics.setpointsize \"love.graphics.setPointSize\")\n- [love.graphics.getPointStyle](love.graphics.getpointstyle \"love.graphics.getPointStyle\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setPointStyle](https://love2d.org/wiki/love.graphics.setPointStyle)"
- name: love.graphics.setRenderTarget
  id: love.graphics.setrendertarget
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.8.0 It has been renamed to love.graphics.setCanvas
  description: "# love.graphics.setRenderTarget\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed to [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\").\n\nSets or resets a [Framebuffer](framebuffer \"Framebuffer\") as render target. All drawing operations until the next *love.graphics.setRenderTarget* will be directed to the [Framebuffer](framebuffer \"Framebuffer\") object specified.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setRenderTarget( framebuffer )\n```\n\n### Arguments\n\n[`Framebuffer`](framebuffer \"Framebuffer\")` framebuffer`  \nThe new render target.\n\n### Returns\n\nNothing.\n\n### Notes\n\nSets the render target to a specified [Framebuffer](framebuffer \"Framebuffer\"). The specified [Framebuffer](framebuffer \"Framebuffer\") will be cleared. All drawing operations until the next *love.graphics.setRenderTarget* will be redirected to the [Framebuffer](framebuffer \"Framebuffer\") and not shown on the screen.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setRenderTarget( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n### Notes\n\nResets the render target to the screen, i.e. re-enables drawing to the screen.\n\n  \n\n## Examples\n\n### Drawing to a framebuffer\n\n``` lua\n-- draw colored square to framebuffer\nlove.graphics.setRenderTarget(framebuffer)\nlove.graphics.setColor(230,240,120)\nlove.graphics.rectangle('fill',0,0,100,100)\nlove.graphics.setRenderTarget()\n \n-- draw scaled framebuffer to screen\nlove.graphics.setColor(255,255,255)\nlove.graphics.draw(framebuffer, 200,100, 0, .5,.5)\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Framebuffer](framebuffer \"Framebuffer\")\n- [Framebuffer:renderTo](framebuffer-renderto \"Framebuffer:renderTo\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setRenderTarget](https://love2d.org/wiki/love.graphics.setRenderTarget)"
- name: love.graphics.setScissor
  id: love.graphics.setscissor
  summary: Available since LÖVE 0.4.0 This function is not supported in earlier versions
  description: "# love.graphics.setScissor\n\n**Available since LÖVE [0.4.0](https://love2d.org/wiki/0.4.0 \"0.4.0\")**  \nThis function is not supported in earlier versions.\n\nSets or disables scissor.\n\nThe scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including [love.graphics.clear](love.graphics.clear \"love.graphics.clear\").\n\nThe dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...).\n\n## Function\n\nLimits the drawing area to a specified rectangle.\n\n### Synopsis\n\n``` lua\nlove.graphics.setScissor( x, y, width, height )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nx coordinate of upper left corner.\n\n[`number`](number \"number\")` y`  \ny coordinate of upper left corner.\n\n[`number`](number \"number\")` width`  \nwidth of clipping rectangle.\n\n[`number`](number \"number\")` height`  \nheight of clipping rectangle.\n\n### Returns\n\nNothing.\n\n## Function\n\nDisables scissor.\n\n### Synopsis\n\n``` lua\nlove.graphics.setScissor( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getScissor](love.graphics.getscissor \"love.graphics.getScissor\")\n- [love.graphics.intersectScissor](love.graphics.intersectscissor \"love.graphics.intersectScissor\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setScissor](https://love2d.org/wiki/love.graphics.setScissor)"
- name: love.graphics.setShader
  id: love.graphics.setshader
  summary: Available since LÖVE 0.9.0 It has been renamed from love.graphics.setPixelEffect
  description: "# love.graphics.setShader\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [love.graphics.setPixelEffect](love.graphics.setpixeleffect \"love.graphics.setPixelEffect\").\n\n  \nSets or resets a [Shader](shader \"Shader\") as the current pixel effect or vertex shaders. All drawing operations until the next *love.graphics.setShader* will be drawn using the [Shader](shader \"Shader\") object specified.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setShader( shader )\n```\n\n### Arguments\n\n[`Shader`](shader \"Shader\")` shader`  \nThe new shader.\n\n### Returns\n\nNothing.\n\n### Notes\n\nSets the current shader to a specified [Shader](shader \"Shader\"). All drawing operations until the next *love.graphics.setShader* will be drawn using the [Shader](shader \"Shader\") object specified.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setShader( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n### Notes\n\nDisables shaders, allowing unfiltered drawing operations.\n\n## Examples\n\n### Drawing a rectangle using a pixel effect shader\n\n``` lua\nfunction love.load()\n    effect = love.graphics.newShader [[\n        extern number time;\n        vec4 effect(vec4 color, Image texture, vec2 texture_coords, vec2 pixel_coords)\n        {\n            return vec4((1.0+sin(time))/2.0, abs(cos(time)), abs(sin(time)), 1.0);\n        }\n    ]]\nend\n \nfunction love.draw()\n    -- boring white\n    love.graphics.setShader()\n    love.graphics.rectangle('fill', 10,10,780,285)\n \n    -- LOOK AT THE PRETTY COLORS!\n    love.graphics.setShader(effect)\n    love.graphics.rectangle('fill', 10,305,780,285)\nend\n \nlocal t = 0\nfunction love.update(dt)\n    t = t + dt\n    effect:send(\"time\", t)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Shader](shader \"Shader\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setShader](https://love2d.org/wiki/love.graphics.setShader)"
- name: love.graphics.setStencil
  id: love.graphics.setstencil
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.10.0 It has been replaced by love.graphics.stencil and love.graphics.setStencilTest
  description: "# love.graphics.setStencil\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been replaced by [love.graphics.stencil](love.graphics.stencil \"love.graphics.stencil\") and [love.graphics.setStencilTest](love.graphics.setstenciltest \"love.graphics.setStencilTest\").\n\nDefines or releases a stencil for the drawing operations.\n\nThe passed function draws to the stencil instead of the screen, creating an image with transparent and opaque pixels. While active, it is used to test where pixels will be drawn or discarded. Image contents do not directly affect the stencil, but see below for a workaround.\n\nCalling the function without arguments releases the active stencil.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setStencil( stencilFunction )\n```\n\n### Arguments\n\n[`function`](function \"function\")` stencilFunction`  \nFunction that draws the stencil.\n\n### Returns\n\nNothing.\n\n## Function\n\nReleases the active stencil.\n\n### Synopsis\n\n``` lua\nlove.graphics.setStencil( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Drawing circles masked by a rectangle\n\n``` lua\nmyStencilFunction = function()\n   love.graphics.rectangle(\"fill\", 225, 200, 350, 300)\nend\n \nlove.graphics.setStencil(myStencilFunction)\n \nlove.graphics.setColor(255, 0, 0, 120)\nlove.graphics.circle(\"fill\", 300, 300, 150, 50)\nlove.graphics.setColor(0, 255, 0, 120)\nlove.graphics.circle(\"fill\", 500, 300, 150, 50)\nlove.graphics.setColor(0, 0, 255, 120)\nlove.graphics.circle(\"fill\", 400, 400, 150, 50)\n```\n\n### Drawing a circle with a hole\n\n``` lua\nmyStencilFunction = function()\n   love.graphics.circle(\"fill\", 400, 300, 50)\nend\n \nlove.graphics.setInvertedStencil(myStencilFunction)\nlove.graphics.circle(\"fill\", 400, 300, 150)\n```\n\n### Drawing two masked triangles with different colors\n\n``` lua\nmyStencilFunction = function()\n   love.graphics.circle(\"fill\", 400, 300, 60, 25)\nend\n \nlove.graphics.setStencil(myStencilFunction)\nlove.graphics.setColor(155, 0, 128)\nlove.graphics.polygon(\"fill\", 400, 200, 486, 350, 314, 350)\n \n \nlove.graphics.setInvertedStencil(myStencilFunction)\nlove.graphics.setColor(144, 214, 128)\nlove.graphics.polygon(\"fill\", 400, 200, 486, 350, 314, 350)\n```\n\n### Using an Image as a stencil mask\n\n``` lua\n-- a black/white mask image: black pixels will mask, white pixels will pass.\nlocal mask = love.graphics.newImage(\"mymask.png\")\n \nlocal mask_effect = love.graphics.newShader[[\n   vec4 effect (vec4 color, Image texture, vec2 texture_coords, vec2 screen_coords) {\n      if (Texel(texture, texture_coords).rgb == vec3(0.0)) {\n         // a discarded pixel wont be applied as the stencil.\n         discard;\n      }\n      return vec4(1.0);\n   }\n]]\n \nfunction myStencilFunction()\n   love.graphics.setShader(mask_effect)\n   love.graphics.draw(mask, 0, 0)\n   love.graphics.setShader()\nend\n \nlove.graphics.setStencil(myStencilFunction)\nlove.graphics.rectangle(\"fill\", 0, 0, 256, 256)\nlove.graphics.setStencil()\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setInvertedStencil](love.graphics.setinvertedstencil \"love.graphics.setInvertedStencil\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setStencil](https://love2d.org/wiki/love.graphics.setStencil)"
- name: love.graphics.setStencilTest
  id: love.graphics.setstenciltest
  summary: Available since LÖVE 0.10.0 Together with love.graphics.stencil, it has replaced love.graphics.setStencil
  description: "# love.graphics.setStencilTest\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nTogether with [love.graphics.stencil](love.graphics.stencil \"love.graphics.stencil\"), it has replaced [love.graphics.setStencil](love.graphics.setstencil \"love.graphics.setStencil\").\n\nConfigures or disables stencil testing.\n\nWhen stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via [love.graphics.stencil](love.graphics.stencil \"love.graphics.stencil\").\n\n  \n\nStarting with version [11.0](https://love2d.org/wiki/11.0 \"11.0\"), a stencil buffer must be set or requested in [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\") when using stencils with a Canvas. `love.graphics.setCanvas{canvas, stencil=true}` is an easy way to use an automatically provided temporary stencil buffer in that case.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setStencilTest( comparemode, comparevalue )\n```\n\n### Arguments\n\n[`CompareMode`](comparemode \"CompareMode\")` comparemode`  \nThe type of comparison to make for each pixel.\n\n[`number`](number \"number\")` comparevalue`  \nThe value to use when comparing with the stencil value of each pixel. Must be between 0 and 255.\n\n### Returns\n\nNothing.\n\n## Function\n\nDisables stencil testing.\n\n### Synopsis\n\n``` lua\nlove.graphics.setStencilTest( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Drawing circles masked by a rectangle\n\n``` lua\nlocal function myStencilFunction()\n   love.graphics.rectangle(\"fill\", 225, 200, 350, 300)\nend\n \nfunction love.draw()\n    -- draw a rectangle as a stencil. Each pixel touched by the rectangle will have its stencil value set to 1. The rest will be 0.\n    love.graphics.stencil(myStencilFunction, \"replace\", 1)\n \n    -- Only allow rendering on pixels whose stencil value is greater than 0.\n    love.graphics.setStencilTest(\"greater\", 0)\n \n    love.graphics.setColor(1, 0, 0, 0.45)\n    love.graphics.circle(\"fill\", 300, 300, 150, 50)\n \n    love.graphics.setColor(0, 255, 0, 0.45)\n    love.graphics.circle(\"fill\", 500, 300, 150, 50)\n \n    love.graphics.setColor(0, 0, 255, 0.45)\n    love.graphics.circle(\"fill\", 400, 400, 150, 50)\n \n    love.graphics.setStencilTest()\nend\n```\n\n### Drawing a circle with a hole\n\n``` lua\nlocal function myStencilFunction()\n   -- Draw a small circle as a stencil. This will be the hole.\n   love.graphics.circle(\"fill\", 400, 300, 50)\nend\n \nfunction love.draw()\n   -- Each pixel touched by the circle will have its stencil value set to 1. The rest will be 0.\n   love.graphics.stencil(myStencilFunction, \"replace\", 1)\n \n   -- Configure the stencil test to only allow rendering on pixels whose stencil value is equal to 0.\n   -- This will end up being every pixel *except* ones that were touched by the circle drawn as a stencil.\n   love.graphics.setStencilTest(\"equal\", 0)\n   love.graphics.circle(\"fill\", 400, 300, 150)\n   love.graphics.setStencilTest()\nend\n```\n\n### Drawing two masked triangles with different colors\n\n``` lua\nlocal function myStencilFunction()\n   love.graphics.circle(\"fill\", 400, 300, 60, 25)\nend\n \nfunction love.draw()\n   -- Each pixel touched by the circle will have its stencil value set to 1. The rest will be 0.\n   love.graphics.stencil(myStencilFunction, \"replace\", 1)\n \n   -- Only allow rendering on pixels whose stencil value is greater than 0.\n   love.graphics.setStencilTest(\"greater\", 0)\n   love.graphics.setColor(0.6, 0, 0.5)\n   love.graphics.polygon(\"fill\", 400, 200, 486, 350, 314, 350)\n \n   -- Now only allow rendering on pixels whose stencil value is equal to 0.\n   love.graphics.setStencilTest(\"equal\", 0)\n   love.graphics.setColor(0.55, 0.85, 0.5)\n   love.graphics.polygon(\"fill\", 400, 200, 486, 350, 314, 350)\n \n   love.graphics.setStencilTest()\nend\n```\n\nThe [love.graphics.stencil](love.graphics.stencil \"love.graphics.stencil\") wiki page includes more examples.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getStencilTest](love.graphics.getstenciltest \"love.graphics.getStencilTest\")\n- [love.graphics.stencil](love.graphics.stencil \"love.graphics.stencil\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setStencilTest](https://love2d.org/wiki/love.graphics.setStencilTest)"
- name: love.graphics.setWireframe
  id: love.graphics.setwireframe
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# love.graphics.setWireframe\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nSets whether wireframe lines will be used when drawing.\n\nThis function does nothing on mobile devices and other systems which use OpenGL ES 2.\n\nWireframe mode should only be used for debugging. The lines drawn with it enabled do not behave like regular love.graphics lines: their widths don't scale with the coordinate transformations or with [love.graphics.setLineWidth](love.graphics.setlinewidth \"love.graphics.setLineWidth\"), and they don't use the smooth LineStyle.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.setWireframe( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue to enable wireframe mode when drawing, false to disable it.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.isWireframe](love.graphics.iswireframe \"love.graphics.isWireframe\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.setWireframe](https://love2d.org/wiki/love.graphics.setWireframe)"
- name: love.graphics.shear
  id: love.graphics.shear
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.graphics.shear\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nShears the coordinate system.\n\nIn version 0.9.2, a bug caused this function to reset all transformations. It was fixed in [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\"). A workaround for 0.9.2 would be to use a combination of rotating and scaling to imitate shearing.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.shear( kx, ky )\n```\n\n### Arguments\n\n[`number`](number \"number\")` kx`  \nThe shear factor on the x-axis.\n\n[`number`](number \"number\")` ky`  \nThe shear factor on the y-axis.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Squish a rectangle\n\n``` lua\nfunction love.draw()\n    love.graphics.translate(100, 100)\n    local t = love.timer.getTime()\n    love.graphics.shear(math.cos(t), math.cos(t * 1.3))\n    love.graphics.rectangle('fill', 0, 0, 100, 50)\nend\n```\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.pop](love.graphics.pop \"love.graphics.pop\")\n- [love.graphics.push](love.graphics.push \"love.graphics.push\")\n- [love.graphics.rotate](love.graphics.rotate \"love.graphics.rotate\")\n- [love.graphics.scale](love.graphics.scale \"love.graphics.scale\")\n- [love.graphics.translate](love.graphics.translate \"love.graphics.translate\")\n- [love.graphics.origin](love.graphics.origin \"love.graphics.origin\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.shear](https://love2d.org/wiki/love.graphics.shear)"
- name: love.graphics.stencil
  id: love.graphics.stencil
  summary: Available since LÖVE 0.10.0 Together with love.graphics.setStencilTest, it has replaced love.graphics.setStencil
  description: "# love.graphics.stencil\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nTogether with [love.graphics.setStencilTest](love.graphics.setstenciltest \"love.graphics.setStencilTest\"), it has replaced [love.graphics.setStencil](love.graphics.setstencil \"love.graphics.setStencil\").\n\nDraws geometry as a stencil.\n\nThe geometry drawn by the supplied function sets invisible stencil values of pixels, instead of setting pixel colors. The stencil buffer (which contains those stencil values) can act like a mask / stencil - [love.graphics.setStencilTest](love.graphics.setstenciltest \"love.graphics.setStencilTest\") can be used afterward to determine how further rendering is affected by the stencil values in each pixel.\n\nStencil values are integers within the range of \\[0, 255\\].\n\n  \n\nStarting with version [11.0](https://love2d.org/wiki/11.0 \"11.0\"), a stencil buffer must be set or requested in [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\") when using stencils with a Canvas. `love.graphics.setCanvas{canvas, stencil=true}` is an easy way to use an automatically provided temporary stencil buffer in that case.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.stencil( stencilfunction, action, value, keepvalues )\n```\n\n### Arguments\n\n[`function`](function \"function\")` stencilfunction`  \nFunction which draws geometry. The stencil values of pixels, rather than the color of each pixel, will be affected by the geometry.\n\n[`StencilAction`](stencilaction \"StencilAction\")` action (\"replace\")`  \nHow to modify any stencil values of pixels that are touched by what's drawn in the stencil function.\n\n[`number`](number \"number\")` value (1)`  \nThe new stencil value to use for pixels if the \"replace\" stencil action is used. Has no effect with other stencil actions. Must be between 0 and 255.\n\n[`boolean`](boolean \"boolean\")` keepvalues (false)`  \nTrue to preserve old stencil values of pixels, false to re-set every pixel's stencil value to 0 before executing the stencil function. [love.graphics.clear](love.graphics.clear \"love.graphics.clear\") will also re-set all stencil values.\n\n### Returns\n\nNothing.\n\n## Notes\n\nIt is possible to draw to the screen and to the stencil values of pixels at the same time, by using [love.graphics.setColorMask](love.graphics.setcolormask \"love.graphics.setColorMask\") inside the stencil function to enable drawing to all color components.\n\n## Examples\n\n### Drawing circles masked by a rectangle\n\n``` lua\nlocal function myStencilFunction()\n   love.graphics.rectangle(\"fill\", 225, 200, 350, 300)\nend\n \nfunction love.draw()\n    -- draw a rectangle as a stencil. Each pixel touched by the rectangle will have its stencil value set to 1. The rest will be 0.\n    love.graphics.stencil(myStencilFunction, \"replace\", 1)\n \n   -- Only allow rendering on pixels which have a stencil value greater than 0.\n    love.graphics.setStencilTest(\"greater\", 0)\n \n    love.graphics.setColor(1, 0, 0, 0.45)\n    love.graphics.circle(\"fill\", 300, 300, 150, 50)\n \n    love.graphics.setColor(0, 1, 0, 0.45)\n    love.graphics.circle(\"fill\", 500, 300, 150, 50)\n \n    love.graphics.setColor(0, 0, 1, 0.45)\n    love.graphics.circle(\"fill\", 400, 400, 150, 50)\n \n    love.graphics.setStencilTest()\nend\n```\n\n### Using an Image as a stencil mask\n\n``` lua\n-- a black/white mask image: black pixels will mask, white pixels will pass.\nlocal mask = love.graphics.newImage(\"mymask.png\")\n \nlocal mask_shader = love.graphics.newShader[[\n   vec4 effect(vec4 color, Image texture, vec2 texture_coords, vec2 screen_coords) {\n      if (Texel(texture, texture_coords).rgb == vec3(0.0)) {\n         // a discarded pixel wont be applied as the stencil.\n         discard;\n      }\n      return vec4(1.0);\n   }\n]]\n \nlocal function myStencilFunction()\n   love.graphics.setShader(mask_shader)\n   love.graphics.draw(mask, 0, 0)\n   love.graphics.setShader()\nend\n \nfunction love.draw()\n    love.graphics.stencil(myStencilFunction, \"replace\", 1)\n    love.graphics.setStencilTest(\"greater\", 0)\n    love.graphics.rectangle(\"fill\", 0, 0, 256, 256)\n    love.graphics.setStencilTest()\nend\n```\n\n### Allow drawing everywhere except where multiple circles intersect\n\n``` lua\nlocal function myStencilFunction()\n   -- Draw four overlapping circles as a stencil.\n   love.graphics.circle(\"fill\", 200, 250, 100)\n   love.graphics.circle(\"fill\", 300, 250, 100)\n   love.graphics.circle(\"fill\", 250, 200, 100)\n   love.graphics.circle(\"fill\", 250, 300, 100)\nend\n \nfunction love.draw()\n   -- Each pixel touched by each circle will have its stencil value incremented by 1.\n   -- The stencil values for pixels where the circles overlap will be at least 2.\n   love.graphics.stencil(myStencilFunction, \"increment\")\n \n   -- Only allow drawing in areas which have stencil values that are less than 2.\n   love.graphics.setStencilTest(\"less\", 2)\n \n   -- Draw a big rectangle.\n   love.graphics.rectangle(\"fill\", 0, 0, 500, 500)\n \n   love.graphics.setStencilTest()\nend\n```\n\nThe [love.graphics.setStencilTest](love.graphics.setstenciltest \"love.graphics.setStencilTest\") wiki page includes more examples.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setStencilTest](love.graphics.setstenciltest \"love.graphics.setStencilTest\")\n- [love.graphics.clear](love.graphics.clear \"love.graphics.clear\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.stencil](https://love2d.org/wiki/love.graphics.stencil)"
- name: love.graphics.toggleFullscreen
  id: love.graphics.togglefullscreen
  summary: Removed in LÖVE 0.9.0 Moved to the love.window module as love.window.toggleFullscreen
  description: "# love.graphics.toggleFullscreen\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nMoved to the [love.window](love.window \"love.window\") module as [love.window.toggleFullscreen](love.window.togglefullscreen \"love.window.toggleFullscreen\").\n\n  \nToggles fullscreen.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.graphics.toggleFullscreen( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if successful, false otherwise.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.toggleFullscreen](https://love2d.org/wiki/love.graphics.toggleFullscreen)"
- name: love.graphics.transformPoint
  id: love.graphics.transformpoint
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.transformPoint\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nConverts the given 2D position from global coordinates into screen-space.\n\nThis effectively applies the current graphics transformations to the given position. A similar [Transform:transformPoint](transform-transformpoint \"Transform:transformPoint\") method exists for [Transform](transform \"Transform\") objects.\n\n## Function\n\n### Synopsis\n\n``` lua\nscreenX, screenY = love.graphics.transformPoint( globalX, globalY )\n```\n\n### Arguments\n\n[`number`](number \"number\")` globalX`  \nThe x component of the position in global coordinates.\n\n[`number`](number \"number\")` globalY`  \nThe y component of the position in global coordinates.\n\n### Returns\n\n[`number`](number \"number\")` screenX`  \nThe x component of the position with graphics transformations applied.\n\n[`number`](number \"number\")` screenY`  \nThe y component of the position with graphics transformations applied.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.inverseTransformPoint](love.graphics.inversetransformpoint \"love.graphics.inverseTransformPoint\")\n- [Transform](transform \"Transform\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.transformPoint](https://love2d.org/wiki/love.graphics.transformPoint)"
- name: love.graphics.translate
  id: love.graphics.translate
  summary: Translates the coordinate system in two dimensions
  description: "# love.graphics.translate\n\nTranslates the coordinate system in two dimensions.\n\nWhen this function is called with two numbers, dx, and dy, all the following drawing operations take effect as if their x and y coordinates were x+dx and y+dy.\n\nScale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.\n\nThis change lasts until [love.draw](love.draw \"love.draw\")() exits or else a [love.graphics.pop](love.graphics.pop \"love.graphics.pop\") reverts to a previous [love.graphics.push](love.graphics.push \"love.graphics.push\").\n\nTranslating using whole numbers will prevent tearing/blurring of images and fonts draw after translating.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.translate( dx, dy )\n```\n\n### Arguments\n\n[`number`](number \"number\")` dx`  \nThe translation relative to the x-axis.\n\n[`number`](number \"number\")` dy`  \nThe translation relative to the y-axis.\n\n### Returns\n\nNothing.\n\n## Examples\n\nTranslate down and to the right by 10 pixels. Remember, the translation is reset at the end of each [love.draw](love.draw \"love.draw\").\n\n``` lua\nfunction love.draw()\n   love.graphics.translate(10, 10)\n   love.graphics.print(\"Text\", 5, 5)   -- will effectively render at 15x15\nend\n```\n\n  \nMove the coordinate system with the mouse:\n\n``` lua\ntx=0\nty=0\nfunction love.draw()\n    mx = love.mouse.getX()\n    my = love.mouse.getY()\n    if love.mouse.isDown(1) then\n        if not mouse_pressed then\n            mouse_pressed = true\n            dx = tx-mx\n            dy = ty-my\n        else\n            tx = mx+dx\n            ty = my+dy\n        end\n    elseif mouse_pressed then\n        mouse_pressed = false\n    end\n    love.graphics.translate(tx, ty)\n \n    -- example graphics:\n    love.graphics.circle( \"line\", 0, 0, 400 )\n    love.graphics.line(-440, 0, 440, 0)\n    love.graphics.line(0, -440, 0, 440)\nend\n \n-- restore position with the right mouse button:\nfunction love.mousepressed(x, y, button, istouch)\n   if button == 2 then\n      tx = 0\n      ty = 0\n   end\nend\n```\n\n  \n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.pop](love.graphics.pop \"love.graphics.pop\")\n- [love.graphics.push](love.graphics.push \"love.graphics.push\")\n- [love.graphics.rotate](love.graphics.rotate \"love.graphics.rotate\")\n- [love.graphics.scale](love.graphics.scale \"love.graphics.scale\")\n- [love.graphics.shear](love.graphics.shear \"love.graphics.shear\")\n- [love.graphics.origin](love.graphics.origin \"love.graphics.origin\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.translate](https://love2d.org/wiki/love.graphics.translate)"
- name: love.graphics.triangle
  id: love.graphics.triangle
  summary: Removed in LÖVE 0.9.0 This function is not supported in that and later versions
  description: "# love.graphics.triangle\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in that and later versions. Use [love.graphics.polygon](love.graphics.polygon \"love.graphics.polygon\") instead.\n\nDraws a triangle.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.graphics.triangle( mode, x1, y1, x2, y2, x3, y3 )\n```\n\n### Arguments\n\n[`DrawMode`](drawmode \"DrawMode\")` mode`  \nHow to draw the triangle.\n\n[`number`](number \"number\")` x1`  \nThe position of first point on the x-axis.\n\n[`number`](number \"number\")` y1`  \nThe position of first point on the y-axis.\n\n[`number`](number \"number\")` x2`  \nThe position of second point on the x-axis.\n\n[`number`](number \"number\")` y2`  \nThe position of second point on the y-axis.\n\n[`number`](number \"number\")` x3`  \nThe position of third point on the x-axis.\n\n[`number`](number \"number\")` y3`  \nThe position of third point on the y-axis.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.triangle](https://love2d.org/wiki/love.graphics.triangle)"
- name: love.graphics.validateShader
  id: love.graphics.validateshader
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.graphics.validateShader\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nValidates shader code. Check if specified shader code does not contain any errors.\n\n## Function\n\n### Synopsis\n\n``` lua\nstatus, message = love.graphics.validateShader( gles, code )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` gles`  \nValidate code as GLSL ES shader.\n\n[`string`](string \"string\")` code`  \nThe pixel shader or vertex shader code, or a filename pointing to a file with the code.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` status`  \n`true` if specified shader code doesn't contain any errors. `false` otherwise.\n\n[`string`](string \"string\")` message`  \nReason why shader code validation failed (or `nil` if validation succeded).\n\n## Function\n\n### Synopsis\n\n``` lua\nstatus, message = love.graphics.validateShader( gles, pixelcode, vertexcode )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` gles`  \nValidate code as GLSL ES shader.\n\n[`string`](string \"string\")` pixelcode`  \nThe pixel shader code, or a filename pointing to a file with the code.\n\n[`string`](string \"string\")` vertexcode`  \nThe vertex shader code, or a filename pointing to a file with the code.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` status`  \n`true` if specified shader code doesn't contain any errors. `false` otherwise.\n\n[`string`](string \"string\")` message`  \nReason why shader code validation failed (or `nil` if validation succeded).\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.newShader](love.graphics.newshader \"love.graphics.newShader\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.graphics.validateShader](https://love2d.org/wiki/love.graphics.validateShader)"
- name: love.hasDeprecationOutput
  id: love.hasdeprecationoutput
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.hasDeprecationOutput\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether LÖVE displays warnings when using deprecated functionality. It is disabled by default in [fused mode](love.filesystem.isfused \"love.filesystem.isFused\"), and enabled by default otherwise.\n\nWhen deprecation output is enabled, the first use of a formally deprecated LÖVE API will show a message at the bottom of the screen for a short time, and print the message to the console.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = love.hasDeprecationOutput( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nWhether deprecation output is enabled.\n\n## See Also\n\n- [love](love \"love\")\n- [love.setDeprecationOutput](love.setdeprecationoutput \"love.setDeprecationOutput\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.hasDeprecationOutput](https://love2d.org/wiki/love.hasDeprecationOutput)"
- name: love.image
  id: love.image
  summary: Provides an interface to decode encoded image data
  description: "# love.image\n\nProvides an interface to decode encoded image data.\n\n## Types\n\n|                                                                  |                                                                          |       |     |\n|------------------------------------------------------------------|--------------------------------------------------------------------------|-------|-----|\n| [CompressedImageData](compressedimagedata \"CompressedImageData\") | Compressed image data designed to stay compressed in RAM and on the GPU. | 0.9.0 |     |\n| [ImageData](imagedata \"ImageData\")                               | Raw (decoded) image data.                                                |       |     |\n\n## Functions\n\n|                                                                                                   |                                                                                                                    |       |       |\n|---------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|-------|-------|\n| [love.image.isCompressed](love.image.iscompressed \"love.image.isCompressed\")                      | Determines whether a file can be loaded as [CompressedImageData](compressedimagedata \"CompressedImageData\").       | 0.9.0 |       |\n| [love.image.newCompressedData](love.image.newcompresseddata \"love.image.newCompressedData\")       | Create a new [CompressedImageData](compressedimagedata \"CompressedImageData\") object from a compressed image file. | 0.9.0 |       |\n| [love.image.newEncodedImageData](love.image.newencodedimagedata \"love.image.newEncodedImageData\") | Encodes ImageData.                                                                                                 |       | 0.8.0 |\n| [love.image.newImageData](love.image.newimagedata \"love.image.newImageData\")                      | Creates a new ImageData object.                                                                                    |       |       |\n\n## Enums\n\n|                                                                        |                                                                                                                                                            |       |     |\n|------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|-------|-----|\n| [CompressedImageFormat](compressedimageformat \"CompressedImageFormat\") | Compressed image data formats.                                                                                                                             | 0.9.0 |     |\n| [ImageEncodeFormat](imageencodeformat \"ImageEncodeFormat\")             | Image file formats supported by [ImageData:encode](imagedata-encode \"ImageData:encode\").                                                                   |       |     |\n| [PixelFormat](pixelformat \"PixelFormat\")                               | Pixel formats for [Textures](texture \"Texture\"), [ImageData](imagedata \"ImageData\"), and [CompressedImageData](compressedimagedata \"CompressedImageData\"). | 11.0  |     |\n\n## See Also\n\n- [love](love \"love\")\n- [Image](image \"Image\") - the love.graphics data type\n- [Image Formats](image_formats \"Image Formats\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.image](https://love2d.org/wiki/love.image)"
- name: love.image.isCompressed
  id: love.image.iscompressed
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.image.isCompressed\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nDetermines whether a file can be loaded as [CompressedImageData](compressedimagedata \"CompressedImageData\").\n\n## Function\n\n### Synopsis\n\n``` lua\ncompressed = love.image.isCompressed( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filename of the potentially compressed image file.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` compressed`  \nWhether the file can be loaded as [CompressedImageData](compressedimagedata \"CompressedImageData\") or not.\n\n## Function\n\n### Synopsis\n\n``` lua\ncompressed = love.image.isCompressed( fileData )\n```\n\n### Arguments\n\n[`FileData`](filedata \"FileData\")` fileData`  \nA FileData potentially containing a compressed image.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` compressed`  \nWhether the FileData can be loaded as [CompressedImageData](compressedimagedata \"CompressedImageData\") or not.\n\n## See Also\n\n- [love.image](love.image \"love.image\")\n- [love.image.newCompressedData](love.image.newcompresseddata \"love.image.newCompressedData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.image.isCompressed](https://love2d.org/wiki/love.image.isCompressed)"
- name: love.image.newCompressedData
  id: love.image.newcompresseddata
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.image.newCompressedData\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCreate a new [CompressedImageData](compressedimagedata \"CompressedImageData\") object from a compressed image file. LÖVE supports several compressed texture formats, enumerated in the [CompressedImageFormat](compressedimageformat \"CompressedImageFormat\") page.\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\ncompressedImageData = love.image.newCompressedData( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filename of the compressed image file.\n\n### Returns\n\n[`CompressedImageData`](compressedimagedata \"CompressedImageData\")` compressedImageData`  \nThe new CompressedImageData object.\n\n## Function\n\n### Synopsis\n\n``` lua\ncompressedImageData = love.image.newCompressedData( fileData )\n```\n\n### Arguments\n\n[`FileData`](filedata \"FileData\")` fileData`  \nA FileData containing a compressed image.\n\n### Returns\n\n[`CompressedImageData`](compressedimagedata \"CompressedImageData\")` compressedImageData`  \nThe new CompressedImageData object.\n\n## See Also\n\n- [love.image](love.image \"love.image\")\n- [love.image.isCompressed](love.image.iscompressed \"love.image.isCompressed\")\n- [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\")\n- [CompressedImageData](compressedimagedata \"CompressedImageData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.image.newCompressedData](https://love2d.org/wiki/love.image.newCompressedData)"
- name: love.image.newEncodedImageData
  id: love.image.newencodedimagedata
  summary: Removed in LÖVE 0.8.0 It has been replaced by ImageData:encode
  description: "# love.image.newEncodedImageData\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been replaced by [ImageData:encode](imagedata-encode \"ImageData:encode\").\n\nEncodes ImageData.\n\n## Function\n\n### Synopsis\n\n``` lua\ndata = love.image.newEncodedImageData( imageData, format )\n```\n\n### Arguments\n\n[`ImageData`](imagedata \"ImageData\")` imageData`  \nThe raw ImageData to encode.\n\n[`ImageFormat`](imageencodeformat \"ImageFormat\")` format`  \nThe format to encode the image in.\n\n### Returns\n\n[`Data`](data \"Data\")` data`  \nThe encoded image data.\n\n## See Also\n\n- [love.image](love.image \"love.image\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.image.newEncodedImageData](https://love2d.org/wiki/love.image.newEncodedImageData)"
- name: love.image.newImageData
  id: love.image.newimagedata
  summary: Creates a new ImageData object
  description: "# love.image.newImageData\n\nCreates a new [ImageData](imagedata \"ImageData\") object.\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\nimageData = love.image.newImageData( width, height )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nThe width of the ImageData.\n\n[`number`](number \"number\")` height`  \nThe height of the ImageData.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` imageData`  \nThe new blank ImageData object. Each pixel's color values, (including the alpha values!) will be set to zero.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nimageData = love.image.newImageData( width, height, format, rawdata )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nThe width of the ImageData.\n\n[`number`](number \"number\")` height`  \nThe height of the ImageData.\n\n[`PixelFormat`](pixelformat \"PixelFormat\")` format (\"rgba8\")`  \nThe pixel format of the ImageData.\n\n[`string or Data`](https://love2d.org/w/index.php?title=string_or_Data&action=edit&redlink=1 \"string or Data (page does not exist)\")` rawdata (nil)`  \nOptional raw byte data to load into the ImageData, in the format specified by *format*.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` imageData`  \nThe new ImageData object.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier or later versions.\n\n### Synopsis\n\n``` lua\nimageData = love.image.newImageData( width, height, rawdata )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nThe width of the ImageData.\n\n[`number`](number \"number\")` height`  \nThe height of the ImageData.\n\n[`string`](string \"string\")` rawdata`  \nThe data to load into the ImageData (RGBA bytes, left to right and top to bottom).\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` imageData`  \nThe new ImageData object.\n\n## Function\n\n### Synopsis\n\n``` lua\nimageData = love.image.newImageData( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filename of the image file.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` imageData`  \nThe new ImageData object.\n\n## Function\n\n### Synopsis\n\n``` lua\nimageData = love.image.newImageData( filedata )\n```\n\n### Arguments\n\n[`FileData`](filedata \"FileData\")` filedata`  \nThe encoded file data to decode into image data.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` imageData`  \nThe new ImageData object.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nimageData = love.image.newImageData( encodeddata )\n```\n\n### Arguments\n\n[`Data`](data \"Data\")` encodeddata`  \nThe encoded data to load into the ImageData.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` imageData`  \nThe new ImageData object.\n\n## See Also\n\n- [love.image](love.image \"love.image\")\n- [ImageData](imagedata \"ImageData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.image.newImageData](https://love2d.org/wiki/love.image.newImageData)"
- name: love.isVersionCompatible
  id: love.isversioncompatible
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.isVersionCompatible\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets whatever the version is compatible with current running version of LÖVE.\n\n## Function\n\n### Synopsis\n\n``` lua\ncompatible = love.isVersionCompatible( version )\n```\n\n### Arguments\n\n[`string`](string \"string\")` version`  \nThe version (for example: \"0.10.1\").\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` compatible`  \nWhatever is the version compatible.\n\n## Function\n\n### Synopsis\n\n``` lua\ncompatible = love.isVersionCompatible( major, minor, revision )\n```\n\n### Arguments\n\n[`number`](number \"number\")` major`  \nThe major version, i.e. 0 for version 0.10.1.\n\n[`number`](number \"number\")` minor`  \nThe minor version, i.e. 10 for version 0.10.1.\n\n[`number`](number \"number\")` revision`  \nThe revision version, i.e. 1 for version 0.10.1.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` compatible`  \nWhatever is the version compatible.\n\n## See Also\n\n- [love](love \"love\")\n- [love.getVersion](love.getversion \"love.getVersion\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.isVersionCompatible](https://love2d.org/wiki/love.isVersionCompatible)"
- name: love.joystick
  id: love.joystick
  summary: Available since LÖVE 0.5.0 This module is not supported in earlier versions
  description: "# love.joystick\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\")**  \nThis module is not supported in earlier versions.\n\nProvides an interface to connected joysticks.\n\n## Types\n\n|                                 |                                 |       |     |\n|---------------------------------|---------------------------------|-------|-----|\n| [Joystick](joystick \"Joystick\") | Represents a physical joystick. | 0.9.0 |     |\n\n## Functions\n\n|                                                                                                                        |                                                                                                                                                                               |       |       |\n|------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------|-------|\n| [love.joystick.close](love.joystick.close \"love.joystick.close\")                                                       | Closes a joystick.                                                                                                                                                            | 0.5.0 | 0.9.0 |\n| [love.joystick.getAxes](love.joystick.getaxes \"love.joystick.getAxes\")                                                 | Returns the position of each axis.                                                                                                                                            | 0.5.0 | 0.9.0 |\n| [love.joystick.getAxis](love.joystick.getaxis \"love.joystick.getAxis\")                                                 | Returns the direction of the axis.                                                                                                                                            | 0.5.0 | 0.9.0 |\n| [love.joystick.getBall](love.joystick.getball \"love.joystick.getBall\")                                                 | Returns the change in ball position.                                                                                                                                          | 0.5.0 | 0.9.0 |\n| [love.joystick.getGamepadMappingString](love.joystick.getgamepadmappingstring \"love.joystick.getGamepadMappingString\") | Gets the full gamepad mapping string of the Joysticks which have the given GUID, or nil if the GUID isn't recognized as a [gamepad](joystick-isgamepad \"Joystick:isGamepad\"). | 11.3  |       |\n| [love.joystick.getHat](love.joystick.gethat \"love.joystick.getHat\")                                                    | Returns the direction of a hat.                                                                                                                                               | 0.5.0 | 0.9.0 |\n| [love.joystick.getJoystickCount](love.joystick.getjoystickcount \"love.joystick.getJoystickCount\")                      | Gets the number of connected joysticks.                                                                                                                                       | 0.9.0 |       |\n| [love.joystick.getJoysticks](love.joystick.getjoysticks \"love.joystick.getJoysticks\")                                  | Gets a list of connected Joysticks.                                                                                                                                           | 0.9.0 |       |\n| [love.joystick.getName](love.joystick.getname \"love.joystick.getName\")                                                 | Returns the name of a joystick.                                                                                                                                               | 0.5.0 | 0.9.0 |\n| [love.joystick.getNumAxes](love.joystick.getnumaxes \"love.joystick.getNumAxes\")                                        | Returns the number of axes on the joystick.                                                                                                                                   | 0.5.0 | 0.9.0 |\n| [love.joystick.getNumBalls](love.joystick.getnumballs \"love.joystick.getNumBalls\")                                     | Returns the number of balls on the joystick.                                                                                                                                  | 0.5.0 | 0.9.0 |\n| [love.joystick.getNumButtons](love.joystick.getnumbuttons \"love.joystick.getNumButtons\")                               | Returns the number of buttons on the joystick.                                                                                                                                | 0.5.0 | 0.9.0 |\n| [love.joystick.getNumHats](love.joystick.getnumhats \"love.joystick.getNumHats\")                                        | Returns the number of hats on the joystick.                                                                                                                                   | 0.5.0 | 0.9.0 |\n| [love.joystick.getNumJoysticks](love.joystick.getnumjoysticks \"love.joystick.getNumJoysticks\")                         | Returns how many joysticks are available.                                                                                                                                     | 0.5.0 | 0.9.0 |\n| [love.joystick.isDown](love.joystick.isdown \"love.joystick.isDown\")                                                    | Checks if a button on a joystick is pressed.                                                                                                                                  | 0.5.0 | 0.9.0 |\n| [love.joystick.isOpen](love.joystick.isopen \"love.joystick.isOpen\")                                                    | Checks if the joystick is open.                                                                                                                                               | 0.5.0 | 0.9.0 |\n| [love.joystick.loadGamepadMappings](love.joystick.loadgamepadmappings \"love.joystick.loadGamepadMappings\")             | Loads a gamepad mappings string or file created with [love.joystick.saveGamepadMappings](love.joystick.savegamepadmappings \"love.joystick.saveGamepadMappings\").              | 0.9.2 |       |\n| [love.joystick.open](love.joystick.open \"love.joystick.open\")                                                          | Opens up a joystick to be used.                                                                                                                                               | 0.5.0 | 0.9.0 |\n| [love.joystick.saveGamepadMappings](love.joystick.savegamepadmappings \"love.joystick.saveGamepadMappings\")             | Saves the virtual gamepad mappings of all recently-used [Joysticks](joystick \"Joystick\") that are [recognized](joystick-isgamepad \"Joystick:isGamepad\") as gamepads.          | 0.9.2 |       |\n| [love.joystick.setGamepadMapping](love.joystick.setgamepadmapping \"love.joystick.setGamepadMapping\")                   | Binds a virtual gamepad input to a button, axis or hat.                                                                                                                       | 0.9.2 |       |\n\n## Enums\n\n|                                                            |                           |       |     |\n|------------------------------------------------------------|---------------------------|-------|-----|\n| [GamepadAxis](gamepadaxis \"GamepadAxis\")                   | Virtual gamepad axes.     | 0.9.0 |     |\n| [GamepadButton](gamepadbutton \"GamepadButton\")             | Virtual gamepad buttons.  | 0.9.0 |     |\n| [JoystickHat](joystickhat \"JoystickHat\")                   | Joystick hat positions.   | 0.5.0 |     |\n| [JoystickInputType](joystickinputtype \"JoystickInputType\") | Types of Joystick inputs. | 0.9.0 |     |\n\n## See Also\n\n- [love](love \"love\")\n- [love.gamepadpressed](love.gamepadpressed \"love.gamepadpressed\")\n- [love.gamepadreleased](love.gamepadreleased \"love.gamepadreleased\")\n- [love.joystickpressed](love.joystickpressed \"love.joystickpressed\")\n- [love.joystickreleased](love.joystickreleased \"love.joystickreleased\")\n- [love.joystickadded](love.joystickadded \"love.joystickadded\")\n- [love.joystickremoved](love.joystickremoved \"love.joystickremoved\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick](https://love2d.org/wiki/love.joystick)"
- name: love.joystick.close
  id: love.joystick.close
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 This function is not supported in earlier or later versions
  description: "# love.joystick.close\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier or later versions.\n\nCloses a joystick, i.e. stop using it for generating events and in query functions.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.joystick.close( joystick )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be closed\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.close](https://love2d.org/wiki/love.joystick.close)"
- name: love.joystick.getAxes
  id: love.joystick.getaxes
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 It has been moved to Joystick:getAxes
  description: "# love.joystick.getAxes\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to [Joystick:getAxes](joystick-getaxes \"Joystick:getAxes\").\n\nReturns the position of each axis.\n\n## Function\n\n### Synopsis\n\n``` lua\naxisDir1, axisDir2, axisDirN = love.joystick.getAxes( joystick )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be checked\n\n### Returns\n\n[`number`](number \"number\")` axisDir1`  \nDirection of axis1\n\n[`number`](number \"number\")` axisDir2`  \nDirection of axis2\n\n[`number`](number \"number\")` axisDirN`  \nDirection of axisN\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.getAxes](https://love2d.org/wiki/love.joystick.getAxes)"
- name: love.joystick.getAxis
  id: love.joystick.getaxis
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 It has been moved to Joystick:getAxis
  description: "# love.joystick.getAxis\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to [Joystick:getAxis](joystick-getaxis \"Joystick:getAxis\").\n\nReturns the direction of the axis.\n\n## Function\n\n### Synopsis\n\n``` lua\ndirection = love.joystick.getAxis( joystick, axis )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be checked\n\n[`number`](number \"number\")` axis`  \nThe axis to be checked\n\n### Returns\n\n[`number`](number \"number\")` direction`  \nCurrent value of the axis\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.getAxis](https://love2d.org/wiki/love.joystick.getAxis)"
- name: love.joystick.getBall
  id: love.joystick.getball
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 This function is not supported in earlier or later versions
  description: "# love.joystick.getBall\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier or later versions.\n\nReturns the change in ball position.\n\n## Function\n\n### Synopsis\n\n``` lua\ndx, dy = love.joystick.getBall( joystick, ball )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be checked\n\n[`number`](number \"number\")` ball`  \nThe ball to be checked\n\n### Returns\n\n[`number`](number \"number\")` dx`  \nChange in x of the ball position.\n\n[`number`](number \"number\")` dy`  \nChange in y of the ball position.\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.getBall](https://love2d.org/wiki/love.joystick.getBall)"
- name: love.joystick.getGamepadMappingString
  id: love.joystick.getgamepadmappingstring
  summary: Available since LÖVE 11.3 This function is not supported in earlier versions
  description: "# love.joystick.getGamepadMappingString\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis function is not supported in earlier versions.\n\nGets the full gamepad mapping string of the Joysticks which have the given GUID, or nil if the GUID isn't recognized as a [gamepad](joystick-isgamepad \"Joystick:isGamepad\").\n\nThe mapping string contains binding information used to map the Joystick's buttons an axes to the standard [gamepad layout](joystick-isgamepad \"Joystick:isGamepad\"), and can be used later with [love.joystick.loadGamepadMappings](love.joystick.loadgamepadmappings \"love.joystick.loadGamepadMappings\").\n\n## Function\n\n### Synopsis\n\n``` lua\nmappingstring = love.joystick.getGamepadMappingString( guid )\n```\n\n### Arguments\n\n[`string`](string \"string\")` guid`  \nThe [GUID](joystick-getguid \"Joystick:getGUID\") value to get the mapping string for.\n\n### Returns\n\n[`string`](string \"string\")` mappingstring (nil)`  \nA string containing the Joystick's gamepad mappings, or nil if the GUID is not recognized as a gamepad.\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n- [Joystick:getGamepadMappingString](joystick-getgamepadmappingstring \"Joystick:getGamepadMappingString\")\n- [Joystick:isGamepad](joystick-isgamepad \"Joystick:isGamepad\")\n- [love.joystick.loadGamepadMappings](love.joystick.loadgamepadmappings \"love.joystick.loadGamepadMappings\")\n- [love.joystick.saveGamepadMappings](love.joystick.savegamepadmappings \"love.joystick.saveGamepadMappings\")\n- [love.joystick.setGamepadMapping](love.joystick.setgamepadmapping \"love.joystick.setGamepadMapping\")\n- [Joystick:getGamepadMapping](joystick-getgamepadmapping \"Joystick:getGamepadMapping\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.getGamepadMappingString](https://love2d.org/wiki/love.joystick.getGamepadMappingString)"
- name: love.joystick.getHat
  id: love.joystick.gethat
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 It has been moved to Joystick:getHat
  description: "# love.joystick.getHat\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to [Joystick:getHat](joystick-gethat \"Joystick:getHat\").\n\nReturns the direction of a hat.\n\n## Function\n\n### Synopsis\n\n``` lua\ndirection = love.joystick.getHat( joystick, hat )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be checked\n\n[`number`](number \"number\")` hat`  \nThe hat to be checked\n\n### Returns\n\n[`JoystickConstant`](joystickconstant \"JoystickConstant\")` direction`  \nThe direction the hat is pushed\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.getHat](https://love2d.org/wiki/love.joystick.getHat)"
- name: love.joystick.getJoystickCount
  id: love.joystick.getjoystickcount
  summary: Available since LÖVE 0.9.0 It has been renamed from love.joystick.getNumJoysticks
  description: "# love.joystick.getJoystickCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [love.joystick.getNumJoysticks](love.joystick.getnumjoysticks \"love.joystick.getNumJoysticks\").\n\n  \nGets the number of connected joysticks.\n\n## Function\n\n### Synopsis\n\n``` lua\njoystickcount = love.joystick.getJoystickCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` joystickcount`  \nThe number of connected joysticks.\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n- [love.joystick.getJoysticks](love.joystick.getjoysticks \"love.joystick.getJoysticks\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.getJoystickCount](https://love2d.org/wiki/love.joystick.getJoystickCount)"
- name: love.joystick.getJoysticks
  id: love.joystick.getjoysticks
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.joystick.getJoysticks\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets a list of connected Joysticks.\n\n## Function\n\n### Synopsis\n\n``` lua\njoysticks = love.joystick.getJoysticks( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` joysticks`  \nThe list of currently connected [Joysticks](joystick \"Joystick\").\n\n## Examples\n\n``` lua\nfunction love.draw()\n    local joysticks = love.joystick.getJoysticks()\n    for i, joystick in ipairs(joysticks) do\n        love.graphics.print(joystick:getName(), 10, i * 20)\n    end\nend\n```\n\n## See Also\n\n- [Joystick](joystick \"Joystick\")\n- [love.joystick](love.joystick \"love.joystick\")\n- [love.joystick.getJoystickCount](love.joystick.getjoystickcount \"love.joystick.getJoystickCount\")\n\n- [love.joystickadded](love.joystickadded \"love.joystickadded\")\n- [love.joystickremoved](love.joystickremoved \"love.joystickremoved\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.getJoysticks](https://love2d.org/wiki/love.joystick.getJoysticks)"
- name: love.joystick.getName
  id: love.joystick.getname
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 It has been moved to Joystick:getName
  description: "# love.joystick.getName\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to [Joystick:getName](joystick-getname \"Joystick:getName\").\n\nReturns the name of a joystick.\n\n## Function\n\n### Synopsis\n\n``` lua\nname = love.joystick.getName( joystick )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be checked\n\n### Returns\n\n[`string`](string \"string\")` name`  \nThe name\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.getName](https://love2d.org/wiki/love.joystick.getName)"
- name: love.joystick.getNumAxes
  id: love.joystick.getnumaxes
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 It has been moved to Joystick:getAxisCount
  description: "# love.joystick.getNumAxes\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to [Joystick:getAxisCount](joystick-getaxiscount \"Joystick:getAxisCount\").\n\n  \nReturns the number of axes on the joystick.\n\n## Function\n\n### Synopsis\n\n``` lua\naxes = love.joystick.getNumAxes( joystick )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be checked\n\n### Returns\n\n[`number`](number \"number\")` axes`  \nThe number of axes available\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.getNumAxes](https://love2d.org/wiki/love.joystick.getNumAxes)"
- name: love.joystick.getNumBalls
  id: love.joystick.getnumballs
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 This function is not supported in earlier or later versions
  description: "# love.joystick.getNumBalls\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier or later versions.\n\n  \nReturns the number of balls on the joystick.\n\n## Function\n\n### Synopsis\n\n``` lua\nballs = love.joystick.getNumBalls( joystick )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be checked\n\n### Returns\n\n[`number`](number \"number\")` balls`  \nThe number of balls available\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.getNumBalls](https://love2d.org/wiki/love.joystick.getNumBalls)"
- name: love.joystick.getNumButtons
  id: love.joystick.getnumbuttons
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 It has been renamed to Joystick:getButtonCount
  description: "# love.joystick.getNumButtons\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [Joystick:getButtonCount](joystick-getbuttoncount \"Joystick:getButtonCount\").\n\n  \nReturns the number of buttons on the joystick.\n\n## Function\n\n### Synopsis\n\n``` lua\nbuttons = love.joystick.getNumButtons( joystick )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be checked\n\n### Returns\n\n[`number`](number \"number\")` buttons`  \nThe number of buttons available\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.getNumButtons](https://love2d.org/wiki/love.joystick.getNumButtons)"
- name: love.joystick.getNumHats
  id: love.joystick.getnumhats
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 It has been moved to Joystick:getHatCount
  description: "# love.joystick.getNumHats\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to [Joystick:getHatCount](joystick-gethatcount \"Joystick:getHatCount\").\n\n  \nReturns the number of hats on the joystick.\n\n## Function\n\n### Synopsis\n\n``` lua\nhats = love.joystick.getNumHats( joystick )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be checked\n\n### Returns\n\n[`number`](number \"number\")` hats`  \nHow many hats the joystick has\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.getNumHats](https://love2d.org/wiki/love.joystick.getNumHats)"
- name: love.joystick.getNumJoysticks
  id: love.joystick.getnumjoysticks
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 It has been renamed to love.joystick.getJoystickCount
  description: "# love.joystick.getNumJoysticks\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [love.joystick.getJoystickCount](love.joystick.getjoystickcount \"love.joystick.getJoystickCount\").\n\n  \nReturns how many joysticks are available.\n\n## Function\n\n### Synopsis\n\n``` lua\njoysticks = love.joystick.getNumJoysticks( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` joysticks`  \nThe number of joysticks available\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.getNumJoysticks](https://love2d.org/wiki/love.joystick.getNumJoysticks)"
- name: love.joystick.isDown
  id: love.joystick.isdown
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 It has been moved to Joystick:isDown
  description: "# love.joystick.isDown\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to [Joystick:isDown](joystick-isdown \"Joystick:isDown\").\n\nChecks if a button on a joystick is pressed.\n\n## Function\n\n### Synopsis\n\n``` lua\ndown = love.joystick.isDown( joystick, button )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be checked\n\n[`number`](number \"number\")` button`  \nThe button to be checked\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` down`  \nTrue if the button is down, false if it is not\n\n## Function\n\n**Available since LÖVE [0.7.2](https://love2d.org/wiki/0.7.2 \"0.7.2\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nanyDown = love.joystick.isDown( joystick, button1, button2, button3, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be checked\n\n[`number`](number \"number\")` buttonN`  \nA button to check\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` anyDown`  \nTrue if any supplied button is down, false if not.\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.isDown](https://love2d.org/wiki/love.joystick.isDown)"
- name: love.joystick.isOpen
  id: love.joystick.isopen
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 This function is not supported in earlier or later versions
  description: "# love.joystick.isOpen\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier or later versions.\n\nChecks if the joystick is open.\n\n## Function\n\n### Synopsis\n\n``` lua\nopen = love.joystick.isOpen( joystick )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be checked\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` open`  \nTrue if the joystick is open, false if it is closed.\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.isOpen](https://love2d.org/wiki/love.joystick.isOpen)"
- name: love.joystick.loadGamepadMappings
  id: love.joystick.loadgamepadmappings
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.joystick.loadGamepadMappings\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nLoads a gamepad mappings string or file created with [love.joystick.saveGamepadMappings](love.joystick.savegamepadmappings \"love.joystick.saveGamepadMappings\").\n\nIt also recognizes any SDL gamecontroller mapping string, such as those created with Steam's Big Picture controller configure interface, or this [nice database](https://raw.githubusercontent.com/gabomdq/SDL_GameControllerDB/master/gamecontrollerdb.txt). If a new mapping is loaded for an already known controller GUID, the later version will overwrite the one currently loaded.\n\n## Function\n\nLoads a gamepad mappings string from a file.\n\n### Synopsis\n\n``` lua\nlove.joystick.loadGamepadMappings( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filename to load the mappings string from.\n\n### Returns\n\nNothing.\n\n## Function\n\nLoads a gamepad mappings string directly.\n\n### Synopsis\n\n``` lua\nlove.joystick.loadGamepadMappings( mappings )\n```\n\n### Arguments\n\n[`string`](string \"string\")` mappings`  \nThe mappings string to load.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n- [love.joystick.saveGamepadMappings](love.joystick.savegamepadmappings \"love.joystick.saveGamepadMappings\")\n- [love.joystick.setGamepadMapping](love.joystick.setgamepadmapping \"love.joystick.setGamepadMapping\")\n- [Joystick:getGamepadMapping](joystick-getgamepadmapping \"Joystick:getGamepadMapping\")\n- [Joystick:isGamepad](joystick-isgamepad \"Joystick:isGamepad\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.loadGamepadMappings](https://love2d.org/wiki/love.joystick.loadGamepadMappings)"
- name: love.joystick.open
  id: love.joystick.open
  summary: Available since LÖVE 0.5.0 and removed in LÖVE 0.9.0 This function is not supported in earlier or later versions
  description: "# love.joystick.open\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier or later versions.\n\nOpens up a joystick to be used, i.e. makes it ready to use. By default joysticks that are available at the start of your game will be opened.\n\nUnlike conventional Lua indexes, joysticks begin counting from 0 in LÖVE [0.7.2](https://love2d.org/wiki/0.7.2 \"0.7.2\") and below. To to open the first joystick, you would use `love.joystick.open(0)`. This is not the case in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and later.\n\n## Function\n\n### Synopsis\n\n``` lua\nopen = love.joystick.open( joystick )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick to be opened\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` open`  \nTrue if the joystick has been successfully opened or false on failure.\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.open](https://love2d.org/wiki/love.joystick.open)"
- name: love.joystick.saveGamepadMappings
  id: love.joystick.savegamepadmappings
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.joystick.saveGamepadMappings\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nSaves the virtual gamepad mappings of all [Joysticks](joystick \"Joystick\") that are [recognized](joystick-isgamepad \"Joystick:isGamepad\") as gamepads and have either been recently used or their gamepad bindings have been modified.\n\nThe mappings are stored as a string for use with [love.joystick.loadGamepadMappings](love.joystick.loadgamepadmappings \"love.joystick.loadGamepadMappings\").\n\n## Function\n\nSaves the gamepad mappings of all relevant joysticks to a file.\n\n### Synopsis\n\n``` lua\nmappings = love.joystick.saveGamepadMappings( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filename to save the mappings string to.\n\n### Returns\n\n[`string`](string \"string\")` mappings`  \nThe mappings string that was written to the file.\n\n## Function\n\nReturns the mappings string without writing to a file.\n\n### Synopsis\n\n``` lua\nmappings = love.joystick.saveGamepadMappings( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` mappings`  \nThe mappings string.\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n- [love.joystick.loadGamepadMappings](love.joystick.loadgamepadmappings \"love.joystick.loadGamepadMappings\")\n- [love.joystick.setGamepadMapping](love.joystick.setgamepadmapping \"love.joystick.setGamepadMapping\")\n- [Joystick:getGamepadMapping](joystick-getgamepadmapping \"Joystick:getGamepadMapping\")\n- [Joystick:isGamepad](joystick-isgamepad \"Joystick:isGamepad\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.saveGamepadMappings](https://love2d.org/wiki/love.joystick.saveGamepadMappings)"
- name: love.joystick.setGamepadMapping
  id: love.joystick.setgamepadmapping
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.joystick.setGamepadMapping\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nDue to a bug, any mapping that is a suffix of another (for example \"x\" is a suffix to \"leftx\") needs to be mapped first\n\nBinds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a [GUID](joystick-getguid \"Joystick:getGUID\") returned by a Dualshock 3 controller in OS X, the binding will affect [Joystick:getGamepadAxis](joystick-getgamepadaxis \"Joystick:getGamepadAxis\") and [Joystick:isGamepadDown](joystick-isgamepaddown \"Joystick:isGamepadDown\") for *all* Dualshock 3 controllers used with the game when run in OS X.\n\nLÖVE includes built-in gamepad bindings for many common controllers. This function lets you change the bindings or add new ones for types of Joysticks which aren't recognized as gamepads by default.\n\nThe virtual gamepad buttons and axes are designed around the Xbox 360 controller layout.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.joystick.setGamepadMapping( guid, button, inputtype, inputindex, hatdir )\n```\n\n### Arguments\n\n[`string`](string \"string\")` guid`  \nThe OS-dependent [GUID](joystick-getguid \"Joystick:getGUID\") for the type of Joystick the binding will affect.\n\n[`GamepadButton`](gamepadbutton \"GamepadButton\")` button`  \nThe virtual gamepad button to bind.\n\n[`JoystickInputType`](joystickinputtype \"JoystickInputType\")` inputtype`  \nThe type of input to bind the virtual gamepad button to.\n\n[`number`](number \"number\")` inputindex`  \nThe index of the axis, button, or hat to bind the virtual gamepad button to.\n\n[`JoystickHat`](joystickhat \"JoystickHat\")` hatdir (nil)`  \nThe direction of the hat, if the virtual gamepad button will be bound to a hat. nil otherwise.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the virtual gamepad button was successfully bound.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.joystick.setGamepadMapping( guid, axis, inputtype, inputindex, hatdir )\n```\n\n### Arguments\n\n[`string`](string \"string\")` guid`  \nThe OS-dependent [GUID](joystick-getguid \"Joystick:getGUID\") for the type of Joystick the binding will affect.\n\n[`GamepadAxis`](gamepadaxis \"GamepadAxis\")` axis`  \nThe virtual gamepad axis to bind.\n\n[`JoystickInputType`](joystickinputtype \"JoystickInputType\")` inputtype`  \nThe type of input to bind the virtual gamepad axis to.\n\n[`number`](number \"number\")` inputindex`  \nThe index of the axis, button, or hat to bind the virtual gamepad axis to.\n\n[`JoystickHat`](joystickhat \"JoystickHat\")` hatdir (nil)`  \nThe direction of the hat, if the virtual gamepad axis will be bound to a hat. nil otherwise.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the virtual gamepad axis was successfully bound.\n\n## Notes\n\nThe physical locations for the bound gamepad axes and buttons should correspond as closely as possible to the layout of a standard Xbox 360 controller.\n\n[](https://love2d.org/wiki/File:360_controller.png)\n\n## See Also\n\n- [love.joystick](love.joystick \"love.joystick\")\n- [Joystick:getGUID](joystick-getguid \"Joystick:getGUID\")\n- [Joystick:isGamepad](joystick-isgamepad \"Joystick:isGamepad\")\n- [Joystick:getGamepadMapping](joystick-getgamepadmapping \"Joystick:getGamepadMapping\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystick.setGamepadMapping](https://love2d.org/wiki/love.joystick.setGamepadMapping)"
- name: love.joystickadded
  id: love.joystickadded
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.joystickadded\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCalled when a [Joystick](joystick \"Joystick\") is connected.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.joystickadded( joystick )\n```\n\n### Arguments\n\n[`Joystick`](joystick \"Joystick\")` joystick`  \nThe newly connected Joystick object.\n\n### Returns\n\nNothing.\n\n## Notes\n\nThis callback is also triggered after [love.load](love.load \"love.load\") for every Joystick which was already connected when the game started up.\n\n## See Also\n\n- [love](love \"love\")\n- [love.joystick](love.joystick \"love.joystick\")\n- [love.joystickremoved](love.joystickremoved \"love.joystickremoved\")\n- [Joystick:isConnected](joystick-isconnected \"Joystick:isConnected\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystickadded](https://love2d.org/wiki/love.joystickadded)"
- name: love.joystickaxis
  id: love.joystickaxis
  summary: Available since LÖVE 0.9.0 This callback is not supported in earlier versions
  description: "# love.joystickaxis\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis callback is not supported in earlier versions.\n\nCalled when a joystick axis moves.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.joystickaxis( joystick, axis, value )\n```\n\n### Arguments\n\n[`Joystick`](joystick \"Joystick\")` joystick`  \nThe joystick object.\n\n[`number`](number \"number\")` axis`  \nThe axis number.\n\n[`number`](number \"number\")` value`  \nThe new axis value.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystickaxis](https://love2d.org/wiki/love.joystickaxis)"
- name: love.joystickhat
  id: love.joystickhat
  summary: Available since LÖVE 0.9.0 This callback is not supported in earlier versions
  description: "# love.joystickhat\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis callback is not supported in earlier versions.\n\nCalled when a joystick hat direction changes.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.joystickhat( joystick, hat, direction )\n```\n\n### Arguments\n\n[`Joystick`](joystick \"Joystick\")` joystick`  \nThe joystick object.\n\n[`number`](number \"number\")` hat`  \nThe hat number.\n\n[`JoystickHat`](joystickhat \"JoystickHat\")` direction`  \nThe new hat direction.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystickhat](https://love2d.org/wiki/love.joystickhat)"
- name: love.joystickpressed
  id: love.joystickpressed
  summary: Called when a joystick button is pressed
  description: "# love.joystickpressed\n\nCalled when a joystick button is pressed.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.joystickpressed( joystick, button )\n```\n\n### Arguments\n\n[`Joystick`](joystick \"Joystick\")` joystick`  \nThe joystick object.\n\n[`number`](number \"number\")` button`  \nThe button number.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Use joystickpressed to map stimulate the jumping of a player\n\n``` lua\nfunction love.joystickpressed(joystick,button)\n   player:jumping()\nend\n \n--inside playerClass\nfunction player:jumping()\n   if joyStick:isGamepadDown('a') then\n        if self.jump then\n           self.speedY = self.jumpSpeed\n            self.jump = false\n        end\n    end\nend\n```\n\n## Function\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nlove.joystickpressed( joystick, button )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick number.\n\n[`number`](number \"number\")` button`  \nThe button number.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love](love \"love\")\n- [love.joystickreleased](love.joystickreleased \"love.joystickreleased\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystickpressed](https://love2d.org/wiki/love.joystickpressed)"
- name: love.joystickreleased
  id: love.joystickreleased
  summary: Called when a joystick button is released
  description: "# love.joystickreleased\n\nCalled when a joystick button is released.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.joystickreleased( joystick, button )\n```\n\n### Arguments\n\n[`Joystick`](joystick \"Joystick\")` joystick`  \nThe joystick object.\n\n[`number`](number \"number\")` button`  \nThe button number.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nlove.joystickreleased( joystick, button )\n```\n\n### Arguments\n\n[`number`](number \"number\")` joystick`  \nThe joystick number.\n\n[`number`](number \"number\")` button`  \nThe button number.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love](love \"love\")\n- [love.joystickpressed](love.joystickpressed \"love.joystickpressed\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystickreleased](https://love2d.org/wiki/love.joystickreleased)"
- name: love.joystickremoved
  id: love.joystickremoved
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.joystickremoved\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCalled when a [Joystick](joystick \"Joystick\") is disconnected.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.joystickremoved( joystick )\n```\n\n### Arguments\n\n[`Joystick`](joystick \"Joystick\")` joystick`  \nThe now-disconnected Joystick object.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love](love \"love\")\n- [love.joystickadded](love.joystickadded \"love.joystickadded\")\n- [Joystick:isConnected](joystick-isconnected \"Joystick:isConnected\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.joystickremoved](https://love2d.org/wiki/love.joystickremoved)"
- name: love.keyboard
  id: love.keyboard
  summary: Provides an interface to the user's keyboard
  description: "# love.keyboard\n\nProvides an interface to the user's keyboard.\n\n## Functions\n\n|                                                                                                         |                                                                                          |        |       |\n|---------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|--------|-------|\n| [love.keyboard.getKeyFromScancode](love.keyboard.getkeyfromscancode \"love.keyboard.getKeyFromScancode\") | Gets the key corresponding to the given hardware scancode.                               | 0.9.2  |       |\n| [love.keyboard.getKeyRepeat](love.keyboard.getkeyrepeat \"love.keyboard.getKeyRepeat\")                   | Returns the delay and interval of key repeating.                                         |        | 0.9.0 |\n| [love.keyboard.getScancodeFromKey](love.keyboard.getscancodefromkey \"love.keyboard.getScancodeFromKey\") | Gets the hardware scancode corresponding to the given key.                               | 0.9.2  |       |\n| [love.keyboard.hasKeyRepeat](love.keyboard.haskeyrepeat \"love.keyboard.hasKeyRepeat\")                   | Gets whether key repeat is enabled.                                                      | 0.9.0  |       |\n| [love.keyboard.hasScreenKeyboard](love.keyboard.hasscreenkeyboard \"love.keyboard.hasScreenKeyboard\")    | Gets whether screen keyboard is supported.                                               | 0.10.0 |       |\n| [love.keyboard.hasTextInput](love.keyboard.hastextinput \"love.keyboard.hasTextInput\")                   | Gets whether [text input](love.textinput \"love.textinput\") events are enabled.           | 0.9.0  |       |\n| [love.keyboard.isDown](love.keyboard.isdown \"love.keyboard.isDown\")                                     | Checks whether a certain key is down.                                                    |        |       |\n| [love.keyboard.isScancodeDown](love.keyboard.isscancodedown \"love.keyboard.isScancodeDown\")             | Checks whether the specified [Scancodes](scancode \"Scancode\") are pressed.               | 0.10.0 |       |\n| [love.keyboard.setKeyRepeat](love.keyboard.setkeyrepeat \"love.keyboard.setKeyRepeat\")                   | Enables or disables key repeat for [love.keypressed](love.keypressed \"love.keypressed\"). |        |       |\n| [love.keyboard.setTextInput](love.keyboard.settextinput \"love.keyboard.setTextInput\")                   | Enables or disables [text input](love.textinput \"love.textinput\") events.                | 0.9.0  |       |\n\n## Enums\n\n|                                          |                             |       |     |\n|------------------------------------------|-----------------------------|-------|-----|\n| [KeyConstant](keyconstant \"KeyConstant\") | All the keys you can press. |       |     |\n| [Scancode](scancode \"Scancode\")          | Keyboard scancodes.         | 0.9.2 |     |\n\n## See Also\n\n- [love](love \"love\")\n- [love.keypressed](love.keypressed \"love.keypressed\")\n- [love.keyreleased](love.keyreleased \"love.keyreleased\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.keyboard](https://love2d.org/wiki/love.keyboard)"
- name: love.keyboard.getKeyFromScancode
  id: love.keyboard.getkeyfromscancode
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.keyboard.getKeyFromScancode\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets the key corresponding to the given hardware scancode.\n\nUnlike [key constants](keyconstant \"KeyConstant\"), [Scancodes](scancode \"Scancode\") are keyboard layout-independent. For example the scancode \"w\" will be generated if the key in the same place as the \"w\" key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.\n\nScancodes are useful for creating default controls that have the same physical locations on on all systems.\n\n## Function\n\n### Synopsis\n\n``` lua\nkey = love.keyboard.getKeyFromScancode( scancode )\n```\n\n### Arguments\n\n[`Scancode`](scancode \"Scancode\")` scancode`  \nThe scancode to get the key from.\n\n### Returns\n\n[`KeyConstant`](keyconstant \"KeyConstant\")` key`  \nThe key corresponding to the given scancode, or \"unknown\" if the scancode doesn't map to a [KeyConstant](keyconstant \"KeyConstant\") on the current system.\n\n## See Also\n\n- [love.keyboard](love.keyboard \"love.keyboard\")\n- [love.keyboard.getScancodeFromKey](love.keyboard.getscancodefromkey \"love.keyboard.getScancodeFromKey\")\n- [love.keyboard.isScancodeDown](love.keyboard.isscancodedown \"love.keyboard.isScancodeDown\")\n- [love.keypressed](love.keypressed \"love.keypressed\")\n- [love.keyreleased](love.keyreleased \"love.keyreleased\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.keyboard.getKeyFromScancode](https://love2d.org/wiki/love.keyboard.getKeyFromScancode)"
- name: love.keyboard.getKeyRepeat
  id: love.keyboard.getkeyrepeat
  summary: Removed in LÖVE 0.9.0 This function is not supported in that and later versions
  description: "# love.keyboard.getKeyRepeat\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in that and later versions.\n\nReturns the delay and interval of key repeating.\n\n## Function\n\n### Synopsis\n\n``` lua\ndelay, interval = love.keyboard.getKeyRepeat( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` delay`  \nThe amount of time before repeating the key (in seconds)\n\n[`number`](number \"number\")` interval`  \nThe amount of time between repeats (in seconds)\n\n## See Also\n\n- [love.keyboard](love.keyboard \"love.keyboard\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.keyboard.getKeyRepeat](https://love2d.org/wiki/love.keyboard.getKeyRepeat)"
- name: love.keyboard.getScancodeFromKey
  id: love.keyboard.getscancodefromkey
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.keyboard.getScancodeFromKey\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets the hardware scancode corresponding to the given key.\n\nUnlike [key constants](keyconstant \"KeyConstant\"), Scancodes are keyboard layout-independent. For example the scancode \"w\" will be generated if the key in the same place as the \"w\" key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.\n\nScancodes are useful for creating default controls that have the same physical locations on on all systems.\n\n## Function\n\n### Synopsis\n\n``` lua\nscancode = love.keyboard.getScancodeFromKey( key )\n```\n\n### Arguments\n\n[`KeyConstant`](keyconstant \"KeyConstant\")` key`  \nThe key to get the scancode from.\n\n### Returns\n\n[`Scancode`](scancode \"Scancode\")` scancode`  \nThe scancode corresponding to the given key, or \"unknown\" if the given key has no known physical representation on the current system.\n\n## See Also\n\n- [love.keyboard](love.keyboard \"love.keyboard\")\n- [love.keyboard.getKeyFromScancode](love.keyboard.getkeyfromscancode \"love.keyboard.getKeyFromScancode\")\n- [love.keyboard.isScancodeDown](love.keyboard.isscancodedown \"love.keyboard.isScancodeDown\")\n- [love.keypressed](love.keypressed \"love.keypressed\")\n- [love.keyreleased](love.keyreleased \"love.keyreleased\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.keyboard.getScancodeFromKey](https://love2d.org/wiki/love.keyboard.getScancodeFromKey)"
- name: love.keyboard.hasKeyRepeat
  id: love.keyboard.haskeyrepeat
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.keyboard.hasKeyRepeat\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether key repeat is enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = love.keyboard.hasKeyRepeat( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nWhether key repeat is enabled.\n\n## See Also\n\n- [love.keyboard](love.keyboard \"love.keyboard\")\n- [love.keyboard.setKeyRepeat](love.keyboard.setkeyrepeat \"love.keyboard.setKeyRepeat\")\n- [love.keypressed](love.keypressed \"love.keypressed\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.keyboard.hasKeyRepeat](https://love2d.org/wiki/love.keyboard.hasKeyRepeat)"
- name: love.keyboard.hasScreenKeyboard
  id: love.keyboard.hasscreenkeyboard
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.keyboard.hasScreenKeyboard\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether screen keyboard is supported.\n\n## Function\n\n### Synopsis\n\n``` lua\nsupported = love.keyboard.hasScreenKeyboard( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` supported`  \nWhether screen keyboard is supported.\n\n## See Also\n\n- [love.keyboard](love.keyboard \"love.keyboard\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.keyboard.hasScreenKeyboard](https://love2d.org/wiki/love.keyboard.hasScreenKeyboard)"
- name: love.keyboard.hasTextInput
  id: love.keyboard.hastextinput
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.keyboard.hasTextInput\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether [text input](love.textinput \"love.textinput\") events are enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = love.keyboard.hasTextInput( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nWhether text input events are enabled.\n\n## See Also\n\n- [love.keyboard](love.keyboard \"love.keyboard\")\n- [love.keyboard.setTextInput](love.keyboard.settextinput \"love.keyboard.setTextInput\")\n- [love.textinput](love.textinput \"love.textinput\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.keyboard.hasTextInput](https://love2d.org/wiki/love.keyboard.hasTextInput)"
- name: love.keyboard.isDown
  id: love.keyboard.isdown
  summary: Checks whether a certain key is down
  description: "# love.keyboard.isDown\n\nChecks whether a certain key is down. Not to be confused with [love.keypressed](love.keypressed \"love.keypressed\") or [love.keyreleased](love.keyreleased \"love.keyreleased\").\n\n## Function\n\n### Synopsis\n\n``` lua\ndown = love.keyboard.isDown( key )\n```\n\n### Arguments\n\n[`KeyConstant`](keyconstant \"KeyConstant\")` key`  \nThe key to check.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` down`  \nTrue if the key is down, false if not.\n\n## Function\n\n**Available since LÖVE [0.7.2](https://love2d.org/wiki/0.7.2 \"0.7.2\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nanyDown = love.keyboard.isDown( key, ... )\n```\n\n### Arguments\n\n[`KeyConstant`](keyconstant \"KeyConstant\")` key`  \nA key to check.\n\n[`KeyConstant`](keyconstant \"KeyConstant\")` ...`  \nAdditional keys to check.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` anyDown`  \nTrue if any supplied key is down, false if not.\n\n## Examples\n\n### Increase a value while a key is held down\n\n``` lua\nlocal val = 0;\nfunction love.update(dt)\n    -- We will increase the variable by 1 for every second the key is held down.\n    if love.keyboard.isDown(\"up\") then\n        val = val + dt\n        print(val)\n    end\n \n    -- We will decrease the variable by 1/s if any of the wasd keys is pressed. \n    if love.keyboard.isDown('w', 'a', 's', 'd') then\n        val = val - dt\n        print(val)\n    end\nend\n```\n\n## See Also\n\n- [love.keyboard](love.keyboard \"love.keyboard\")\n- [love.keypressed](love.keypressed \"love.keypressed\")\n- [love.keyreleased](love.keyreleased \"love.keyreleased\")\n- [love.keyboard.isScancodeDown](love.keyboard.isscancodedown \"love.keyboard.isScancodeDown\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.keyboard.isDown](https://love2d.org/wiki/love.keyboard.isDown)"
- name: love.keyboard.isScancodeDown
  id: love.keyboard.isscancodedown
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.keyboard.isScancodeDown\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nChecks whether the specified [Scancodes](scancode \"Scancode\") are pressed. Not to be confused with [love.keypressed](love.keypressed \"love.keypressed\") or [love.keyreleased](love.keyreleased \"love.keyreleased\").\n\nUnlike regular [KeyConstants](keyconstant \"KeyConstant\"), Scancodes are keyboard layout-independent. The scancode \"w\" is used if the key in the same place as the \"w\" key on an [American keyboard](https://en.wikipedia.org/wiki/British_and_American_keyboards#/media/File:KB_United_States-NoAltGr.svg) is pressed, no matter what the key is labelled or what the user's operating system settings are.\n\n## Function\n\n### Synopsis\n\n``` lua\ndown = love.keyboard.isScancodeDown( scancode, ... )\n```\n\n### Arguments\n\n[`Scancode`](scancode \"Scancode\")` scancode`  \nA Scancode to check.\n\n[`Scancode`](scancode \"Scancode\")` ...`  \nAdditional Scancodes to check.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` down`  \nTrue if any supplied Scancode is down, false if not.\n\n## See Also\n\n- [love.keyboard](love.keyboard \"love.keyboard\")\n- [love.keyboard.isDown](love.keyboard.isdown \"love.keyboard.isDown\")\n- [love.keyboard.getKeyFromScancode](love.keyboard.getkeyfromscancode \"love.keyboard.getKeyFromScancode\")\n- [love.keyboard.getScancodeFromKey](love.keyboard.getscancodefromkey \"love.keyboard.getScancodeFromKey\")\n- [love.keypressed](love.keypressed \"love.keypressed\")\n- [love.keyreleased](love.keyreleased \"love.keyreleased\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.keyboard.isScancodeDown](https://love2d.org/wiki/love.keyboard.isScancodeDown)"
- name: love.keyboard.setKeyRepeat
  id: love.keyboard.setkeyrepeat
  summary: Enables or disables key repeat for love.keypressed
  description: "# love.keyboard.setKeyRepeat\n\nEnables or disables key repeat for [love.keypressed](love.keypressed \"love.keypressed\"). It is disabled by default.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.keyboard.setKeyRepeat( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nWhether repeat keypress events should be enabled when a key is held down.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe interval between repeats depends on the user's system settings. This function doesn't affect whether [love.textinput](love.textinput \"love.textinput\") is called multiple times while a key is held down.\n\n## Function\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in that and later versions.\n\nEnables key repeating and sets the delay and interval.\n\n### Synopsis\n\n``` lua\nlove.keyboard.setKeyRepeat( delay, interval )\n```\n\n### Arguments\n\n[`number`](number \"number\")` delay`  \nThe amount of time before repeating the key (in seconds). 0 disables key repeat.\n\n[`number`](number \"number\")` interval`  \nThe amount of time between repeats (in seconds)\n\n### Returns\n\nNothing.\n\n## Examples\n\nHold left or right to change the position.\n\n``` lua\nfunction love.load()\n    love.keyboard.setKeyRepeat(true)\n    x = 50\nend\n \nfunction love.keypressed(key, scancode, isrepeat)\n    if key == \"right\" then\n        x = (x + 80) % love.graphics.getWidth()\n    elseif key == \"left\" then\n        x = (x - 80) % love.graphics.getWidth()\n    end\nend\n \nfunction love.draw()\n    love.graphics.circle(\"fill\", x, 100, 50, 50)\nend\n```\n\n## See Also\n\n- [love.keyboard](love.keyboard \"love.keyboard\")\n- [love.keyboard.hasKeyRepeat](love.keyboard.haskeyrepeat \"love.keyboard.hasKeyRepeat\")\n- [love.keypressed](love.keypressed \"love.keypressed\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.keyboard.setKeyRepeat](https://love2d.org/wiki/love.keyboard.setKeyRepeat)"
- name: love.keyboard.setTextInput
  id: love.keyboard.settextinput
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.keyboard.setTextInput\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nEnables or disables [text input](love.textinput \"love.textinput\") events. It is enabled by default on Windows, Mac, and Linux, and disabled by default on iOS and Android.\n\nOn touch devices, this shows the system's native on-screen keyboard when it's enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.keyboard.setTextInput( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nWhether text input events should be enabled.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\nOn iOS and Android this variant tells the OS that the specified rectangle is where text will show up in the game, which prevents the system on-screen keyboard from covering the text.\n\n### Synopsis\n\n``` lua\nlove.keyboard.setTextInput( enable, x, y, w, h )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nWhether text input events should be enabled.\n\n[`number`](number \"number\")` x`  \nText rectangle x position.\n\n[`number`](number \"number\")` y`  \nText rectangle y position.\n\n[`number`](number \"number\")` w`  \nText rectangle width.\n\n[`number`](number \"number\")` h`  \nText rectangle height.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.keyboard](love.keyboard \"love.keyboard\")\n- [love.keyboard.hasTextInput](love.keyboard.hastextinput \"love.keyboard.hasTextInput\")\n- [love.textinput](love.textinput \"love.textinput\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.keyboard.setTextInput](https://love2d.org/wiki/love.keyboard.setTextInput)"
- name: love.keypressed
  id: love.keypressed
  summary: Callback function triggered when a key is pressed
  description: "# love.keypressed\n\nCallback function triggered when a key is pressed.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.keypressed( key, scancode, isrepeat )\n```\n\n### Arguments\n\n[`KeyConstant`](keyconstant \"KeyConstant\")` key`  \nCharacter of the pressed key.\n\n[`Scancode`](scancode \"Scancode\")` scancode`  \nThe scancode representing the pressed key.\n\n[`boolean`](boolean \"boolean\")` isrepeat`  \nWhether this keypress event is a repeat. The delay between key repeats depends on the user's system settings.\n\n### Returns\n\nNothing.\n\n### Notes\n\n[Scancodes](scancode \"Scancode\") are keyboard layout-independent, so the scancode \"w\" will be generated if the key in the same place as the \"w\" key on an [American keyboard](https://en.wikipedia.org/wiki/British_and_American_keyboards#/media/File:KB_United_States-NoAltGr.svg) is pressed, no matter what the key is labelled or what the user's operating system settings are.\n\nKey repeat needs to be enabled with [love.keyboard.setKeyRepeat](love.keyboard.setkeyrepeat \"love.keyboard.setKeyRepeat\") for repeat keypress events to be received. This does not affect [love.textinput](love.textinput \"love.textinput\").\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier or later versions.\n\n### Synopsis\n\n``` lua\nlove.keypressed( key, isrepeat )\n```\n\n### Arguments\n\n[`KeyConstant`](keyconstant \"KeyConstant\")` key`  \nCharacter of the key pressed.\n\n[`boolean`](boolean \"boolean\")` isrepeat`  \nWhether this keypress event is a repeat. The delay between key repeats depends on the user's system settings.\n\n### Returns\n\nNothing.\n\n### Notes\n\nKey repeat needs to be enabled with [love.keyboard.setKeyRepeat](love.keyboard.setkeyrepeat \"love.keyboard.setKeyRepeat\") for repeat keypress events to be received.\n\n## Function\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nUnicode text input is now handled separately via [love.textinput](love.textinput \"love.textinput\").\n\n### Synopsis\n\n``` lua\nlove.keypressed( key, unicode )\n```\n\n### Arguments\n\n[`KeyConstant`](keyconstant \"KeyConstant\")` key`  \nCharacter of the key pressed.\n\n[`number`](number \"number\")` unicode`  \nThe unicode number of the key pressed.\n\n### Returns\n\nNothing.\n\n## Examples\n\nExit the game when the player presses the Escape key, using [love.event.quit](love.event.quit \"love.event.quit\").\n\n``` lua\nfunction love.keypressed(key, scancode, isrepeat)\n   if key == \"escape\" then\n      love.event.quit()\n   end\nend\n```\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nText input is now handled separately via [love.textinput](love.textinput \"love.textinput\").\n\nRecord and print text the user writes (0.8.0 and below.)\n\n``` lua\nfunction love.load()\n    text = \"Type away! -- \"\nend\n \nfunction love.keypressed(key, unicode)\n    -- ignore non-printable characters (see http://www.ascii-code.com/)\n    if unicode > 31 and unicode < 127 then\n        text = text .. string.char(unicode)\n    end\nend\n \nfunction love.draw()\n    love.graphics.printf(text, 0, 0, 800)\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n- [love.keyreleased](love.keyreleased \"love.keyreleased\")\n- [love.keyboard.isDown](love.keyboard.isdown \"love.keyboard.isDown\")\n- [love.keyboard.isScancodeDown](love.keyboard.isscancodedown \"love.keyboard.isScancodeDown\")\n- [love.textinput](love.textinput \"love.textinput\")\n\n  \n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.keypressed](https://love2d.org/wiki/love.keypressed)"
- name: love.keyreleased
  id: love.keyreleased
  summary: Callback function triggered when a keyboard key is released
  description: "# love.keyreleased\n\nCallback function triggered when a keyboard key is released.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.keyreleased( key, scancode )\n```\n\n### Arguments\n\n[`KeyConstant`](keyconstant \"KeyConstant\")` key`  \nCharacter of the released key.\n\n[`Scancode`](scancode \"Scancode\")` scancode` Available since 0.10.0  \nThe scancode representing the released key.\n\n### Returns\n\nNothing.\n\n### Notes\n\n[Scancodes](scancode \"Scancode\") are keyboard layout-independent, so the scancode \"w\" will be used if the key in the same place as the \"w\" key on an [American keyboard](https://en.wikipedia.org/wiki/British_and_American_keyboards#/media/File:KB_United_States-NoAltGr.svg) is released, no matter what the key is labelled or what the user's operating system settings are.\n\n## Examples\n\nExit the game when the player releases the Escape key, using [love.event.quit](love.event.quit \"love.event.quit\").\n\n``` lua\nfunction love.keyreleased(key)\n   if key == \"escape\" then\n      love.event.quit()\n   end\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n- [love.keypressed](love.keypressed \"love.keypressed\")\n- [love.keyboard.isDown](love.keyboard.isdown \"love.keyboard.isDown\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.keyreleased](https://love2d.org/wiki/love.keyreleased)"
- name: love.load
  id: love.load
  summary: This function is called exactly once at the beginning of the game
  description: "# love.load\n\nThis function is called exactly once at the beginning of the game.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.load( arg, unfilteredArg )\n```\n\n### Arguments\n\n[`table`](table \"table\")` arg`  \nCommand-line arguments given to the game.\n\n[`table`](table \"table\")` unfilteredArg` Available since 11.0  \nUnfiltered command-line arguments given to the executable (see [\\#Notes](#Notes)).\n\n### Returns\n\nNothing.\n\n## Notes\n\nIn LÖVE 11.0, the passed arguments excludes the game name and the fused command-line flag (if exist) when runs from non-fused LÖVE executable. Previous version pass the argument as-is without any filtering.\n\n## Examples\n\nEstablish some variables/resources on the game load, so that they can be used repeatedly in other functions (such as [love.draw](love.draw \"love.draw\")).\n\n``` lua\nfunction love.load()\n   hamster = love.graphics.newImage(\"hamster.png\")\n   x = 50\n   y = 50\nend\n \nfunction love.draw()\n   love.graphics.draw(hamster, x, y)\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.load](https://love2d.org/wiki/love.load)"
- name: love.lowmemory
  id: love.lowmemory
  summary: Available since LÖVE 0.10.0 This callback is not supported in earlier versions
  description: "# love.lowmemory\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis callback is not supported in earlier versions.\n\nCallback function triggered when the system is running out of memory on mobile devices.\n\nMobile operating systems may forcefully kill the game if it uses too much memory, so any non-critical resource should be removed if possible (by setting all variables referencing the resources to **nil**), when this event is triggered. Sounds and images in particular tend to use the most memory.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.lowmemory( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Examples\n\nClear unused data and collect the garbage when memory is low.\n\n``` lua\nlocal cachetable = {}\nfor i = 0, math.pi * 2, math.pi / 1000 do\n    cachetable[i] = math.sin(i)\nend\n \nfunction love.lowmemory()\n    cachetable = {}\n    collectgarbage()\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.lowmemory](https://love2d.org/wiki/love.lowmemory)"
- name: love.math
  id: love.math
  summary: Available since LÖVE 0.9.0 This module is not supported in earlier versions
  description: "# love.math\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis module is not supported in earlier versions.\n\nProvides system-independent mathematical functions.\n\n## Types\n\n|                                                      |                                                                                       |       |     |\n|------------------------------------------------------|---------------------------------------------------------------------------------------|-------|-----|\n| [BezierCurve](beziercurve \"BezierCurve\")             | A Bézier curve object that can evaluate and render Bézier curves of arbitrary degree. | 0.9.0 |     |\n| [RandomGenerator](randomgenerator \"RandomGenerator\") | A random number generation object which has its own random state.                     | 0.9.0 |     |\n| [Transform](transform \"Transform\")                   | Object containing a coordinate system transformation.                                 | 11.0  |     |\n\n## Functions\n\n|                                                                                             |                                                                                                                                 |        |      |\n|---------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------|--------|------|\n| [love.math.colorFromBytes](love.math.colorfrombytes \"love.math.colorFromBytes\")             | Converts a color from 0..255 to 0..1 range.                                                                                     | 11.3   |      |\n| [love.math.colorToBytes](love.math.colortobytes \"love.math.colorToBytes\")                   | Converts a color from 0..1 to 0..255 range.                                                                                     | 11.3   |      |\n| [love.math.compress](love.math.compress \"love.math.compress\")                               | Compresses a string or data using a specific compression algorithm.                                                             | 0.10.0 | 11.0 |\n| [love.math.decompress](love.math.decompress \"love.math.decompress\")                         | Decompresses a [CompressedData](compresseddata \"CompressedData\") or previously compressed string or [Data](data \"Data\") object. | 0.10.0 | 11.0 |\n| [love.math.gammaToLinear](love.math.gammatolinear \"love.math.gammaToLinear\")                | Converts a color from gamma-space (sRGB) to linear-space (RGB).                                                                 | 0.9.1  |      |\n| [love.math.getRandomSeed](love.math.getrandomseed \"love.math.getRandomSeed\")                | Gets the seed of the random number generator.                                                                                   | 0.9.0  |      |\n| [love.math.getRandomState](love.math.getrandomstate \"love.math.getRandomState\")             | Gets the current state of the random number generator.                                                                          | 0.9.1  |      |\n| [love.math.isConvex](love.math.isconvex \"love.math.isConvex\")                               | Checks whether a polygon is convex.                                                                                             | 0.9.0  |      |\n| [love.math.linearToGamma](love.math.lineartogamma \"love.math.linearToGamma\")                | Converts a color from linear-space (RGB) to gamma-space (sRGB).                                                                 | 0.9.1  |      |\n| [love.math.newBezierCurve](love.math.newbeziercurve \"love.math.newBezierCurve\")             | Creates a new [BezierCurve](beziercurve \"BezierCurve\") object.                                                                  | 0.9.0  |      |\n| [love.math.newRandomGenerator](love.math.newrandomgenerator \"love.math.newRandomGenerator\") | Creates a new [RandomGenerator](randomgenerator \"RandomGenerator\") object.                                                      | 0.9.0  |      |\n| [love.math.newTransform](love.math.newtransform \"love.math.newTransform\")                   | Creates a new [Transform](transform \"Transform\") object.                                                                        | 11.0   |      |\n| [love.math.noise](love.math.noise \"love.math.noise\")                                        | Generates a Simplex noise value in 1-4 dimensions.                                                                              | 0.9.0  |      |\n| [love.math.random](love.math.random \"love.math.random\")                                     | Get uniformly distributed pseudo-random number                                                                                  | 0.9.0  |      |\n| [love.math.randomNormal](love.math.randomnormal \"love.math.randomNormal\")                   | Get a normally distributed pseudo random number.                                                                                | 0.9.0  |      |\n| [love.math.setRandomSeed](love.math.setrandomseed \"love.math.setRandomSeed\")                | Sets the seed of the random number generator.                                                                                   | 0.9.0  |      |\n| [love.math.setRandomState](love.math.setrandomstate \"love.math.setRandomState\")             | Sets the current state of the random number generator.                                                                          | 0.9.1  |      |\n| [love.math.triangulate](love.math.triangulate \"love.math.triangulate\")                      | Decomposes a simple polygon into triangles.                                                                                     | 0.9.0  |      |\n\n## Enums\n\n## See Also\n\n- [love](love \"love\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math](https://love2d.org/wiki/love.math)"
- name: love.math.colorFromBytes
  id: love.math.colorfrombytes
  summary: Available since LÖVE 11.3 This function is not supported in earlier versions
  description: "# love.math.colorFromBytes\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis function is not supported in earlier versions.\n\nConverts a color from 0..255 to 0..1 range.\n\n## Function\n\n### Synopsis\n\n``` lua\nr, g, b, a = love.math.colorFromBytes( rb, gb, bb, ab )\n```\n\n### Arguments\n\n[`number`](number \"number\")` rb`  \nRed color component in 0..255 range.\n\n[`number`](number \"number\")` gb`  \nGreen color component in 0..255 range.\n\n[`number`](number \"number\")` bb`  \nBlue color component in 0..255 range.\n\n[`number`](number \"number\")` ab (nil)`  \nAlpha color component in 0..255 range.\n\n### Returns\n\n[`number`](number \"number\")` r`  \nRed color component in 0..1 range.\n\n[`number`](number \"number\")` g`  \nGreen color component in 0..1 range.\n\n[`number`](number \"number\")` b`  \nBlue color component in 0..1 range.\n\n[`number`](number \"number\")` a (nil)`  \nAlpha color component in 0..1 range or nil if alpha is not specified.\n\n## Notes\n\nHere's implementation for [11.2](https://love2d.org/wiki/11.2 \"11.2\") and earlier.\n\n``` lua\nfunction love.math.colorFromBytes(r, g, b, a)\n    if type(r) == \"table\" then\n        r, g, b, a = r[1], r[2], r[3], r[4]\n    end\n    r = clamp01(floor(r + 0.5) / 255)\n    g = clamp01(floor(g + 0.5) / 255)\n    b = clamp01(floor(b + 0.5) / 255)\n    a = a ~= nil and clamp01(floor(a + 0.5) / 255) or nil\n    return r, g, b, a\nend\n```\n\nWhere `clamp01` is defined as follows\n\n``` lua\nlocal function clamp01(x)\n    return math.min(math.max(x, 0), 1)\nend\n```\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\")\n- [love.math.colorToBytes](love.math.colortobytes \"love.math.colorToBytes\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.colorFromBytes](https://love2d.org/wiki/love.math.colorFromBytes)"
- name: love.math.colorToBytes
  id: love.math.colortobytes
  summary: Available since LÖVE 11.3 This function is not supported in earlier versions
  description: "# love.math.colorToBytes\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis function is not supported in earlier versions.\n\nConverts a color from 0..1 to 0..255 range.\n\n## Function\n\n### Synopsis\n\n``` lua\nrb, gb, bb, ab = love.math.colorToBytes( r, g, b, a )\n```\n\n### Arguments\n\n[`number`](number \"number\")` r`  \nRed color component.\n\n[`number`](number \"number\")` g`  \nGreen color component.\n\n[`number`](number \"number\")` b`  \nBlue color component.\n\n[`number`](number \"number\")` a (nil)`  \nAlpha color component.\n\n### Returns\n\n[`number`](number \"number\")` rb`  \nRed color component in 0..255 range.\n\n[`number`](number \"number\")` gb`  \nGreen color component in 0..255 range.\n\n[`number`](number \"number\")` bb`  \nBlue color component in 0..255 range.\n\n[`number`](number \"number\")` ab (nil)`  \nAlpha color component in 0..255 range or nil if alpha is not specified.\n\n## Notes\n\nHere's implementation for [11.2](https://love2d.org/wiki/11.2 \"11.2\") and earlier.\n\n``` lua\nfunction love.math.colorToBytes(r, g, b, a)\n    if type(r) == \"table\" then\n        r, g, b, a = r[1], r[2], r[3], r[4]\n    end\n    r = floor(clamp01(r) * 255 + 0.5)\n    g = floor(clamp01(g) * 255 + 0.5)\n    b = floor(clamp01(b) * 255 + 0.5)\n    a = a ~= nil and floor(clamp01(a) * 255 + 0.5) or nil\n    return r, g, b, a\nend\n```\n\nWhere `clamp01` is defined as follows\n\n``` lua\nlocal function clamp01(x)\n    return math.min(math.max(x, 0), 1)\nend\n```\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [love.math.colorFromBytes](love.math.colorfrombytes \"love.math.colorFromBytes\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.colorToBytes](https://love2d.org/wiki/love.math.colorToBytes)"
- name: love.math.compress
  id: love.math.compress
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.math.compress\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\n|                                                                                                               |\n|---------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                          |\n| This function is deprecated and is replaced by [love.data.compress](love.data.compress \"love.data.compress\"). |\n\nCompresses a string or data using a specific compression algorithm.\n\nThis function, depending on the compression format and level, can be slow if called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). Some benchmarks are available [here](https://github.com/Cyan4973/lz4#user-content-benchmarks).\n\n## Function\n\n### Synopsis\n\n``` lua\ncompressedData = love.math.compress( rawstring, format, level )\n```\n\n### Arguments\n\n[`string`](string \"string\")` rawstring`  \nThe raw (un-compressed) string to compress.\n\n[`CompressedDataFormat`](compresseddataformat \"CompressedDataFormat\")` format (\"lz4\")`  \nThe format to use when compressing the string.\n\n[`number`](number \"number\")` level (-1)`  \nThe level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used.\n\n### Returns\n\n[`CompressedData`](compresseddata \"CompressedData\")` compressedData`  \nA new Data object containing the compressed version of the string.\n\n## Function\n\n### Synopsis\n\n``` lua\ncompressedData = love.math.compress( data, format, level )\n```\n\n### Arguments\n\n[`Data`](data \"Data\")` data`  \nA Data object containing the raw (un-compressed) data to compress.\n\n[`CompressedDataFormat`](compresseddataformat \"CompressedDataFormat\")` format (\"lz4\")`  \nThe format to use when compressing the data.\n\n[`number`](number \"number\")` level (-1)`  \nThe level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used.\n\n### Returns\n\n[`CompressedData`](compresseddata \"CompressedData\")` compressedData`  \nA new Data object containing the compressed version of the raw data.\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [love.math.decompress](love.math.decompress \"love.math.decompress\")\n- [CompressedData](compresseddata \"CompressedData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.compress](https://love2d.org/wiki/love.math.compress)"
- name: love.math.decompress
  id: love.math.decompress
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.math.decompress\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\n|                                                                                                                     |\n|---------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                |\n| This function is deprecated and is replaced by [love.data.decompress](love.data.decompress \"love.data.decompress\"). |\n\nDecompresses a [CompressedData](compresseddata \"CompressedData\") or previously compressed string or [Data](data \"Data\") object.\n\n## Function\n\n### Synopsis\n\n``` lua\nrawstring = love.math.decompress( compressedData )\n```\n\n### Arguments\n\n[`CompressedData`](compresseddata \"CompressedData\")` compressedData`  \nThe compressed data to decompress.\n\n### Returns\n\n[`string`](string \"string\")` rawstring`  \nA string containing the raw decompressed data.\n\n## Function\n\n### Synopsis\n\n``` lua\nrawstring = love.math.decompress( compressedString, format )\n```\n\n### Arguments\n\n[`string`](string \"string\")` compressedstring`  \nA string containing data previously compressed with [love.math.compress](love.math.compress \"love.math.compress\").\n\n[`CompressedDataFormat`](compresseddataformat \"CompressedDataFormat\")` format`  \nThe format that was used to compress the given string.\n\n### Returns\n\n[`string`](string \"string\")` rawstring`  \nA string containing the raw decompressed data.\n\n## Function\n\n### Synopsis\n\n``` lua\nrawstring = love.math.decompress( data, format )\n```\n\n### Arguments\n\n[`Data`](data \"Data\")` data`  \nA Data object containing data previously compressed with [love.math.compress](love.math.compress \"love.math.compress\").\n\n[`CompressedDataFormat`](compresseddataformat \"CompressedDataFormat\")` format`  \nThe format that was used to compress the given data.\n\n### Returns\n\n[`string`](string \"string\")` rawstring`  \nA string containing the raw decompressed data.\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [love.math.compress](love.math.compress \"love.math.compress\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.decompress](https://love2d.org/wiki/love.math.decompress)"
- name: love.math.gammaToLinear
  id: love.math.gammatolinear
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# love.math.gammaToLinear\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nConverts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing [gamma-correct rendering](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") and you need to do math in linear RGB in the few cases where LÖVE doesn't handle conversions automatically.\n\nRead more about gamma-correct rendering [here](https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch24.html), [here](http://filmicgames.com/archives/299), and [here](http://renderwonk.com/blog/index.php/archive/adventures-with-gamma-correct-rendering/).\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\nGamma-correct rendering is an advanced topic and it's easy to get color-spaces mixed up. If you're not sure whether you need this, you might want to avoid it.\n\n## Function\n\n### Synopsis\n\n``` lua\nlr, lg, lb = love.math.gammaToLinear( r, g, b )\n```\n\n### Arguments\n\n[`number`](number \"number\")` r`  \nThe red channel of the sRGB color to convert.\n\n[`number`](number \"number\")` g`  \nThe green channel of the sRGB color to convert.\n\n[`number`](number \"number\")` b`  \nThe blue channel of the sRGB color to convert.\n\n### Returns\n\n[`number`](number \"number\")` lr`  \nThe red channel of the converted color in linear RGB space.\n\n[`number`](number \"number\")` lg`  \nThe green channel of the converted color in linear RGB space.\n\n[`number`](number \"number\")` lb`  \nThe blue channel of the converted color in linear RGB space.\n\n### Notes\n\nAn alpha value can be passed into the function as a fourth argument, but it will be returned unchanged because alpha is always linear.\n\n## Function\n\n### Synopsis\n\n``` lua\nlr, lg, lb = love.math.gammaToLinear( color )\n```\n\n### Arguments\n\n[`table`](table \"table\")` color`  \nAn array with the red, green, and blue channels of the sRGB color to convert.\n\n### Returns\n\n[`number`](number \"number\")` lr`  \nThe red channel of the converted color in linear RGB space.\n\n[`number`](number \"number\")` lg`  \nThe green channel of the converted color in linear RGB space.\n\n[`number`](number \"number\")` lb`  \nThe blue channel of the converted color in linear RGB space.\n\n## Function\n\n### Synopsis\n\n``` lua\nlc = love.math.gammaToLinear( c )\n```\n\n### Arguments\n\n[`number`](number \"number\")` c`  \nThe value of a color channel in sRGB space to convert.\n\n### Returns\n\n[`number`](number \"number\")` lc`  \nThe value of the color channel in linear RGB space.\n\n## Examples\n\n### Pre-multiply an image's alpha with its RGB values in linear RGB space\n\n``` lua\nlocal function PremultiplyLinearPixel(x, y, r, g, b, a)\n   r = r * a\n   g = g * a\n   b = b * a\n   return r, g, b, a\nend\n \nlocal function PremultiplyGammaPixel(x, y, r, g, b, a)\n   r, g, b = love.math.gammaToLinear(r, g, b)\n   r = r * a\n   g = g * a\n   b = b * a\n   r, g, b = love.math.linearToGamma(r, g, b)\n   return r, g, b, a\nend\n \n-- Loads an image and pre-multiplies its RGB values with its alpha, for use with the ('alpha', 'premultiplied') blend mode.\n-- The multiplication correctly accounts for the color-space of the image.\nfunction NewPremultipliedImage(filepath, flags)\n    local imagedata = love.image.newImageData(filepath)\n \n    local mapfunction = (flags and flags.linear) and PremultiplyLinearPixel or PremultiplyGammaPixel\n    imagedata:mapPixel(mapfunction)\n \n    return love.graphics.newImage(imagedata, flags)\nend\n \nimage = NewPremultipliedImage(\"pig.png\")\n```\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [love.math.linearToGamma](love.math.lineartogamma \"love.math.linearToGamma\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.gammaToLinear](https://love2d.org/wiki/love.math.gammaToLinear)"
- name: love.math.getRandomSeed
  id: love.math.getrandomseed
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.math.getRandomSeed\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the seed of the random number generator.\n\nThe seed is split into two numbers due to Lua's use of [doubles](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) for all number values - doubles can't accurately represent integer values above 2^53, but the seed can be an integer value up to 2^64.\n\n## Function\n\n### Synopsis\n\n``` lua\nlow, high = love.math.getRandomSeed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` low`  \nInteger number representing the lower 32 bits of the random number generator's 64 bit seed value.\n\n[`number`](number \"number\")` high`  \nInteger number representing the higher 32 bits of the random number generator's 64 bit seed value.\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [love.math.setRandomSeed](love.math.setrandomseed \"love.math.setRandomSeed\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.getRandomSeed](https://love2d.org/wiki/love.math.getRandomSeed)"
- name: love.math.getRandomState
  id: love.math.getrandomstate
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# love.math.getRandomState\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nGets the current state of the random number generator. This returns an opaque implementation-dependent string which is only useful for later use with [love.math.setRandomState](love.math.setrandomstate \"love.math.setRandomState\") or [RandomGenerator:setState](randomgenerator-setstate \"RandomGenerator:setState\").\n\nThis is different from [love.math.getRandomSeed](love.math.getrandomseed \"love.math.getRandomSeed\") in that getRandomState gets the random number generator's current state, whereas getRandomSeed gets the previously set seed number.\n\n## Function\n\n### Synopsis\n\n``` lua\nstate = love.math.getRandomState( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` state`  \nThe current state of the random number generator, represented as a string.\n\n## Notes\n\nThe value of the state string does not depend on the current operating system.\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [love.math.setRandomState](love.math.setrandomstate \"love.math.setRandomState\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.getRandomState](https://love2d.org/wiki/love.math.getRandomState)"
- name: love.math.isConvex
  id: love.math.isconvex
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.math.isConvex\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nChecks whether a polygon is convex.\n\n[PolygonShapes](polygonshape \"PolygonShape\") in [love.physics](love.physics \"love.physics\"), some forms of [Meshes](mesh \"Mesh\"), and polygons drawn with [love.graphics.polygon](love.graphics.polygon \"love.graphics.polygon\") must be simple convex polygons.\n\n## Function\n\n### Synopsis\n\n``` lua\nconvex = love.math.isConvex( vertices )\n```\n\n### Arguments\n\n[`table`](table \"table\")` vertices`  \nThe vertices of the polygon as a table in the form of `{x1, y1, x2, y2, x3, y3, ...}`.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` convex`  \nWhether the given polygon is convex.\n\n## Function\n\n### Synopsis\n\n``` lua\nconvex = love.math.isConvex( x1, y1, x2, y2, x3, y3, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x1`  \nThe position of the first vertex of the polygon on the x-axis.\n\n[`number`](number \"number\")` y1`  \nThe position of the first vertex of the polygon on the y-axis.\n\n[`number`](number \"number\")` x2`  \nThe position of the second vertex of the polygon on the x-axis.\n\n[`number`](number \"number\")` y2`  \nThe position of the second vertex of the polygon on the y-axis.\n\n[`number`](number \"number\")` x3`  \nThe position of the third vertex of the polygon on the x-axis.\n\n[`number`](number \"number\")` y3`  \nThe position of the third vertex of the polygon on the y-axis.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` convex`  \nWhether the given polygon is convex.\n\n## See Also\n\n- [love.math.triangulate](love.math.triangulate \"love.math.triangulate\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.isConvex](https://love2d.org/wiki/love.math.isConvex)"
- name: love.math.linearToGamma
  id: love.math.lineartogamma
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# love.math.linearToGamma\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nConverts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing.\n\nIn general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space.\n\nRead more about gamma-correct rendering [here](http://http.developer.nvidia.com/GPUGems3/gpugems3_ch24.html), [here](http://filmicgames.com/archives/299), and [here](http://renderwonk.com/blog/index.php/archive/adventures-with-gamma-correct-rendering/).\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\nGamma-correct rendering is an advanced topic and it's easy to get color-spaces mixed up. If you're not sure whether you need this, you might want to avoid it.\n\n## Function\n\n### Synopsis\n\n``` lua\ncr, cg, cb = love.math.linearToGamma( lr, lg, lb )\n```\n\n### Arguments\n\n[`number`](number \"number\")` lr`  \nThe red channel of the linear RGB color to convert.\n\n[`number`](number \"number\")` lg`  \nThe green channel of the linear RGB color to convert.\n\n[`number`](number \"number\")` lb`  \nThe blue channel of the linear RGB color to convert.\n\n### Returns\n\n[`number`](number \"number\")` cr`  \nThe red channel of the converted color in gamma sRGB space.\n\n[`number`](number \"number\")` cg`  \nThe green channel of the converted color in gamma sRGB space.\n\n[`number`](number \"number\")` cb`  \nThe blue channel of the converted color in gamma sRGB space.\n\n### Notes\n\nAn alpha value can be passed into the function as a fourth argument, but it will be returned unchanged because alpha is always linear.\n\n## Function\n\n### Synopsis\n\n``` lua\ncr, cg, cb = love.math.linearToGamma( color )\n```\n\n### Arguments\n\n[`table`](table \"table\")` color`  \nAn array with the red, green, and blue channels of the linear RGB color to convert.\n\n### Returns\n\n[`number`](number \"number\")` cr`  \nThe red channel of the converted color in gamma sRGB space.\n\n[`number`](number \"number\")` cg`  \nThe green channel of the converted color in gamma sRGB space.\n\n[`number`](number \"number\")` cb`  \nThe blue channel of the converted color in gamma sRGB space.\n\n## Function\n\n### Synopsis\n\n``` lua\nc = love.math.linearToGamma( lc )\n```\n\n### Arguments\n\n[`number`](number \"number\")` lc`  \nThe value of a color channel in linear RGB space to convert.\n\n### Returns\n\n[`number`](number \"number\")` c`  \nThe value of the color channel in gamma sRGB space.\n\n## Examples\n\n### Pre-multiply an image's alpha with its RGB values in linear RGB space\n\n``` lua\nlocal function PremultiplyLinearPixel(x, y, r, g, b, a)\n   r = r * a\n   g = g * a\n   b = b * a\n   return r, g, b, a\nend\n \nlocal function PremultiplyGammaPixel(x, y, r, g, b, a)\n   r, g, b = love.math.gammaToLinear(r, g, b)\n   r = r * a\n   g = g * a\n   b = b * a\n   r, g, b = love.math.linearToGamma(r, g, b)\n   return r, g, b, a\nend\n \n-- Loads an image and pre-multiplies its RGB values with its alpha, for use with the ('alpha', 'premultiplied') blend mode.\n-- The multiplication correctly accounts for the color-space of the image.\nfunction NewPremultipliedImage(filepath, flags)\n    local imagedata = love.image.newImageData(filepath)\n \n    local mapfunction = (flags and flags.linear) and PremultiplyLinearPixel or PremultiplyGammaPixel\n    imagedata:mapPixel(mapfunction)\n \n    return love.graphics.newImage(imagedata, flags)\nend\n \nimage = NewPremultipliedImage(\"pig.png\")\n```\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [love.math.gammaToLinear](love.math.gammatolinear \"love.math.gammaToLinear\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.linearToGamma](https://love2d.org/wiki/love.math.linearToGamma)"
- name: love.math.newBezierCurve
  id: love.math.newbeziercurve
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.math.newBezierCurve\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new [BezierCurve](beziercurve \"BezierCurve\") object.\n\nThe number of vertices in the control polygon determines the degree of the curve, e.g. three vertices define a quadratic (degree 2) Bézier curve, four vertices define a cubic (degree 3) Bézier curve, etc.\n\n## Function\n\n### Synopsis\n\n``` lua\ncurve = love.math.newBezierCurve( vertices )\n```\n\n### Arguments\n\n[`table`](table \"table\")` vertices`  \nThe vertices of the control polygon as a table in the form of `{x1, y1, x2, y2, x3, y3, ...}`.\n\n### Returns\n\n[`BezierCurve`](beziercurve \"BezierCurve\")` curve`  \nA Bézier curve object.\n\n## Function\n\n### Synopsis\n\n``` lua\ncurve = love.math.newBezierCurve( x1, y1, x2, y2, x3, y3, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x1`  \nThe position of the first vertex of the control polygon on the x-axis.\n\n[`number`](number \"number\")` y1`  \nThe position of the first vertex of the control polygon on the y-axis.\n\n[`number`](number \"number\")` x2`  \nThe position of the second vertex of the control polygon on the x-axis.\n\n[`number`](number \"number\")` y2`  \nThe position of the second vertex of the control polygon on the y-axis.\n\n[`number`](number \"number\")` x3`  \nThe position of the third vertex of the control polygon on the x-axis.\n\n[`number`](number \"number\")` y3`  \nThe position of the third vertex of the control polygon on the y-axis.\n\n### Returns\n\n[`BezierCurve`](beziercurve \"BezierCurve\")` curve`  \nA Bézier curve object.\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [BezierCurve](beziercurve \"BezierCurve\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.newBezierCurve](https://love2d.org/wiki/love.math.newBezierCurve)"
- name: love.math.newRandomGenerator
  id: love.math.newrandomgenerator
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.math.newRandomGenerator\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new [RandomGenerator](randomgenerator \"RandomGenerator\") object which is completely independent of other RandomGenerator objects and random functions.\n\n## Function\n\n### Synopsis\n\n``` lua\nrng = love.math.newRandomGenerator( )\n```\n\n### Arguments\n\nNone\n\n### Returns\n\n[`RandomGenerator`](randomgenerator \"RandomGenerator\")` rng`  \nThe new Random Number Generator object.\n\n### Notes\n\nThe default seed used in version 11.x is the following low/high pair: 0xCBBF7A44, 0x0139408D.\n\n## Function\n\n### Synopsis\n\n``` lua\nrng = love.math.newRandomGenerator( seed )\n```\n\n### Arguments\n\n[`number`](number \"number\")` seed`  \nThe initial seed number to use for this object.\n\n### Returns\n\n[`RandomGenerator`](randomgenerator \"RandomGenerator\")` rng`  \nThe new Random Number Generator object.\n\n### Notes\n\nSee [RandomGenerator:setSeed](randomgenerator-setseed \"RandomGenerator:setSeed\").\n\n## Function\n\n### Synopsis\n\n``` lua\nrng = love.math.newRandomGenerator( low, high )\n```\n\n### Arguments\n\n[`number`](number \"number\")` low`  \nThe lower 32 bits of the seed number to use for this object.\n\n[`number`](number \"number\")` high`  \nThe higher 32 bits of the seed number to use for this object.\n\n### Returns\n\n[`RandomGenerator`](randomgenerator \"RandomGenerator\")` rng`  \nThe new Random Number Generator object.\n\n### Notes\n\nSee [RandomGenerator:setSeed](randomgenerator-setseed \"RandomGenerator:setSeed\").\n\n## Examples\n\nCreates a new RandomGenerator object, then generates a number between 1 and 100 inclusive.\n\n``` lua\nfunction love.load()\n    rng = love.math.newRandomGenerator()\n    randomNumber = rng:random(1,100)\nend\n```\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [RandomGenerator](randomgenerator \"RandomGenerator\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.newRandomGenerator](https://love2d.org/wiki/love.math.newRandomGenerator)"
- name: love.math.newTransform
  id: love.math.newtransform
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.math.newTransform\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new [Transform](transform \"Transform\") object.\n\n## Function\n\nCreates a Transform with no transformations applied. Call methods on the returned object to apply transformations.\n\n### Synopsis\n\n``` lua\ntransform = love.math.newTransform( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` transform`  \nThe new Transform object.\n\n## Function\n\nCreates a Transform with the specified transformation applied on creation.\n\n### Synopsis\n\n``` lua\ntransform = love.math.newTransform( x, y, angle, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe position of the new Transform on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the new Transform on the y-axis.\n\n[`number`](number \"number\")` angle (0)`  \nThe orientation of the new Transform in radians.\n\n[`number`](number \"number\")` sx (1)`  \nScale factor on the x-axis.\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor on the y-axis.\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset on the x-axis.\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset on the y-axis.\n\n[`number`](number \"number\")` kx (0)`  \nShearing / skew factor on the x-axis.\n\n[`number`](number \"number\")` ky (0)`  \nShearing / skew factor on the y-axis.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` transform`  \nThe new Transform object.\n\n## Examples\n\nCreates a new Transform object and uses it to position and rotate a rectangle around its center.\n\n``` lua\nfunction love.load()\n    rectwidth = 100\n    rectheight = 100\n \n    -- arguments are: x, y, angle, scalex, scaley, offsetx, offsety\n    transform = love.math.newTransform(100, 100, math.pi/4, 1, 1, rectwidth / 2, rectheight / 2)\nend\n \nfunction love.draw()\n    love.graphics.applyTransform(transform)\n    love.graphics.rectangle(\"fill\", 0, 0, rectwidth, rectheight)\nend\n```\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [Transform](transform \"Transform\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.newTransform](https://love2d.org/wiki/love.math.newTransform)"
- name: love.math.noise
  id: love.math.noise
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.math.noise\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGenerates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments.\n\n[Simplex noise](https://en.wikipedia.org/wiki/Simplex_noise) is closely related to [Perlin noise](https://en.wikipedia.org/wiki/Perlin_noise). It is widely used for procedural content generation.\n\nThere are many [webpages](http://libnoise.sourceforge.net/noisegen/) which discuss Perlin and Simplex noise in detail.\n\nThe return value might be constant if only integer arguments are used. Avoid solely passing in integers, to get varying return values.\n\n## Function\n\nGenerates Simplex noise from 1 dimension.\n\n### Synopsis\n\n``` lua\nvalue = love.math.noise( x )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe number used to generate the noise value.\n\n### Returns\n\n[`number`](number \"number\")` value`  \nThe noise value in the range of \\[0, 1\\].\n\n## Function\n\nGenerates Simplex noise from 2 dimensions.\n\n### Synopsis\n\n``` lua\nvalue = love.math.noise( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe first value of the 2-dimensional vector used to generate the noise value.\n\n[`number`](number \"number\")` y`  \nThe second value of the 2-dimensional vector used to generate the noise value.\n\n### Returns\n\n[`number`](number \"number\")` value`  \nThe noise value in the range of \\[0, 1\\].\n\n## Function\n\nGenerates Perlin noise (Simplex noise in version [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older) from 3 dimensions.\n\n### Synopsis\n\n``` lua\nvalue = love.math.noise( x, y, z )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe first value of the 3-dimensional vector used to generate the noise value.\n\n[`number`](number \"number\")` y`  \nThe second value of the 3-dimensional vector used to generate the noise value.\n\n[`number`](number \"number\")` z`  \nThe third value of the 3-dimensional vector used to generate the noise value.\n\n### Returns\n\n[`number`](number \"number\")` value`  \nThe noise value in the range of \\[0, 1\\].\n\n## Function\n\nGenerates Perlin noise (Simplex noise in version [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older) from 4 dimensions.\n\n### Synopsis\n\n``` lua\nvalue = love.math.noise( x, y, z, w )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe first value of the 4-dimensional vector used to generate the noise value.\n\n[`number`](number \"number\")` y`  \nThe second value of the 4-dimensional vector used to generate the noise value.\n\n[`number`](number \"number\")` z`  \nThe third value of the 4-dimensional vector used to generate the noise value.\n\n[`number`](number \"number\")` w`  \nThe fourth value of the 4-dimensional vector used to generate the noise value.\n\n### Returns\n\n[`number`](number \"number\")` value`  \nThe noise value in the range of \\[0, 1\\].\n\n## Examples\n\nFills a two-dimensional grid with simplex noise each time a key is pressed.\n\n``` lua\nlocal grid = {}\n \nfunction love.draw()\n    for x = 1, #grid do\n        for y = 1, #grid[x] do\n            local f = 1 * grid[x][y]\n            love.graphics.setColor( f, f, f, 1 )\n            love.graphics.rectangle( 'fill', x * 8, y * 8, 7, 7 )\n            love.graphics.setColor( 1, 1, 1, 1 )\n        end\n    end\nend\n \n-- Fill each pixel in our grid with simplex noise.\nlocal function noise()\n    for x = 1, 60 do\n        for y = 1, 60 do\n            grid[x] = grid[x] or {}\n            grid[x][y] = love.math.noise( x + love.math.random(), y + love.math.random() )\n        end\n    end\nend\n \nfunction love.keypressed()\n    noise()\nend\n```\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.noise](https://love2d.org/wiki/love.math.noise)"
- name: love.math.random
  id: love.math.random
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.math.random\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGenerates a pseudo-random number in a platform independent manner. This function is seeded at startup, so you generally don't need to seed it yourself.\n\n## Function\n\nGet uniformly distributed pseudo-random real number within \\[0, 1\\].\n\n### Synopsis\n\n``` lua\nnumber = love.math.random( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` number`  \nThe pseudo-random number.\n\n## Function\n\nGet a uniformly distributed pseudo-random **integer** within \\[1, max\\].\n\n### Synopsis\n\n``` lua\nnumber = love.math.random( max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` max`  \nThe maximum possible value it should return.\n\n### Returns\n\n[`number`](number \"number\")` number`  \nThe pseudo-random integer number.\n\n## Function\n\nGet uniformly distributed pseudo-random **integer** within \\[min, max\\].\n\n### Synopsis\n\n``` lua\nnumber = love.math.random( min, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum possible value it should return.\n\n[`number`](number \"number\")` max`  \nThe maximum possible value it should return.\n\n### Returns\n\n[`number`](number \"number\")` number`  \nThe pseudo-random integer number.\n\n## Examples\n\nGenerates a number between 1 and 100 (both inclusive).\n\n``` lua\nfunction love.load()\n    randomNumber = love.math.random(1, 100)\nend\n```\n\n## Notes\n\nWhen using the 2nd and 3rd variant, numbers passed will be rounded, thus, `love.math.random(0, 76.767)` may return 77\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [love.math.setRandomSeed](love.math.setrandomseed \"love.math.setRandomSeed\")\n- [love.math.randomNormal](love.math.randomnormal \"love.math.randomNormal\")\n- [love.math.newRandomGenerator](love.math.newrandomgenerator \"love.math.newRandomGenerator\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.random](https://love2d.org/wiki/love.math.random)"
- name: love.math.randomNormal
  id: love.math.randomnormal
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.math.randomNormal\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGet a normally distributed pseudo random number.\n\n## Function\n\n### Synopsis\n\n``` lua\nnumber = love.math.randomNormal( stddev, mean )\n```\n\n### Arguments\n\n[`number`](number \"number\")` stddev (1)`  \nStandard deviation of the distribution.\n\n[`number`](number \"number\")` mean (0)`  \nThe mean of the distribution.\n\n### Returns\n\n[`number`](number \"number\")` number`  \nNormally distributed random number with variance (stddev)² and the specified mean.\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.randomNormal](https://love2d.org/wiki/love.math.randomNormal)"
- name: love.math.setRandomSeed
  id: love.math.setrandomseed
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.math.setRandomSeed\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the seed of the random number generator using the specified integer number. This is called internally at startup, so you generally don't need to call it yourself.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.math.setRandomSeed( seed )\n```\n\n### Arguments\n\n[`number`](number \"number\")` seed`  \nThe integer number with which you want to seed the randomization. Must be within the range of \\[0, 2^53 - 1\\].\n\n### Returns\n\nNothing.\n\n### Notes\n\nDue to Lua's use of double-precision floating point numbers, integer values above 2^53 cannot be accurately represented. Use the other variant of the function if you want to use a larger number.\n\n## Function\n\nCombines two 32-bit integer numbers into a 64-bit integer value and sets the seed of the random number generator using the value.\n\n### Synopsis\n\n``` lua\nlove.math.setRandomSeed( low, high )\n```\n\n### Arguments\n\n[`number`](number \"number\")` low`  \nThe lower 32 bits of the seed value. Must be within the range of \\[0, 2^32 - 1\\].\n\n[`number`](number \"number\")` high`  \nThe higher 32 bits of the seed value. Must be within the range of \\[0, 2^32 - 1\\].\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Set a random seed\n\n``` lua\nlove.math.setRandomSeed(love.timer.getTime())\n```\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [love.math.getRandomSeed](love.math.getrandomseed \"love.math.getRandomSeed\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.setRandomSeed](https://love2d.org/wiki/love.math.setRandomSeed)"
- name: love.math.setRandomState
  id: love.math.setrandomstate
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# love.math.setRandomState\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nSets the current state of the random number generator. The value used as an argument for this function is an opaque implementation-dependent string and should only originate from a previous call to [love.math.getRandomState](love.math.getrandomstate \"love.math.getRandomState\").\n\nThis is different from [love.math.setRandomSeed](love.math.setrandomseed \"love.math.setRandomSeed\") in that setRandomState directly sets the random number generator's current implementation-dependent state, whereas setRandomSeed gives it a new seed value.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.math.setRandomState( state )\n```\n\n### Arguments\n\n[`string`](string \"string\")` state`  \nThe new state of the random number generator, represented as a string. This should originate from a previous call to [love.math.getRandomState](love.math.getrandomstate \"love.math.getRandomState\").\n\n### Returns\n\nNothing.\n\n## Notes\n\nThe effect of the state string does not depend on the current operating system.\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [love.math.getRandomState](love.math.getrandomstate \"love.math.getRandomState\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.setRandomState](https://love2d.org/wiki/love.math.setRandomState)"
- name: love.math.triangulate
  id: love.math.triangulate
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.math.triangulate\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nDecomposes a simple convex or concave polygon into triangles.\n\n## Function\n\n### Synopsis\n\n``` lua\ntriangles = love.math.triangulate( polygon )\n```\n\n### Arguments\n\n[`table`](table \"table\")` polygon`  \nPolygon to triangulate. Must not intersect itself.\n\n### Returns\n\n[`table`](table \"table\")` triangles`  \nList of triangles the polygon is composed of, in the form of `{{x1, y1, x2, y2, x3, y3}, {x1, y1, x2, y2, x3, y3}, ...}`.\n\n## Function\n\n### Synopsis\n\n``` lua\ntriangles = love.math.triangulate( x1, y1, x2, y2, x3, y3, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x1`  \nThe position of the first vertex of the polygon on the x-axis.\n\n[`number`](number \"number\")` y1`  \nThe position of the first vertex of the polygon on the y-axis.\n\n[`number`](number \"number\")` x2`  \nThe position of the second vertex of the polygon on the x-axis.\n\n[`number`](number \"number\")` y2`  \nThe position of the second vertex of the polygon on the y-axis.\n\n[`number`](number \"number\")` x3`  \nThe position of the third vertex of the polygon on the x-axis.\n\n[`number`](number \"number\")` y3`  \nThe position of the third vertex of the polygon on the y-axis.\n\n### Returns\n\n[`table`](table \"table\")` triangles`  \nList of triangles the polygon is composed of, in the form of `{{x1, y1, x2, y2, x3, y3}, {x1, y1, x2, y2, x3, y3}, ...}`.\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [love.graphics.polygon](love.graphics.polygon \"love.graphics.polygon\")\n- [love.physics.newPolygonShape](love.physics.newpolygonshape \"love.physics.newPolygonShape\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.math.triangulate](https://love2d.org/wiki/love.math.triangulate)"
- name: love.mouse
  id: love.mouse
  summary: Provides an interface to the user's mouse
  description: "# love.mouse\n\nProvides an interface to the user's mouse.\n\n## Types\n\n|                           |                               |       |     |\n|---------------------------|-------------------------------|-------|-----|\n| [Cursor](cursor \"Cursor\") | Represents a hardware cursor. | 0.9.0 |     |\n\n## Functions\n\n|                                                                                             |                                                                                       |        |       |\n|---------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------|--------|-------|\n| [love.mouse.getCursor](love.mouse.getcursor \"love.mouse.getCursor\")                         | Gets the current Cursor.                                                              | 0.9.0  |       |\n| [love.mouse.getPosition](love.mouse.getposition \"love.mouse.getPosition\")                   | Returns the current position of the mouse.                                            | 0.3.2  |       |\n| [love.mouse.getRelativeMode](love.mouse.getrelativemode \"love.mouse.getRelativeMode\")       | Gets whether relative mode is enabled for the mouse.                                  | 0.9.2  |       |\n| [love.mouse.getSystemCursor](love.mouse.getsystemcursor \"love.mouse.getSystemCursor\")       | Gets a [Cursor](cursor \"Cursor\") object representing a system-native hardware cursor. | 0.9.0  |       |\n| [love.mouse.getX](love.mouse.getx \"love.mouse.getX\")                                        | Returns the current x-position of the mouse.                                          |        |       |\n| [love.mouse.getY](love.mouse.gety \"love.mouse.getY\")                                        | Returns the current y-position of the mouse.                                          |        |       |\n| [love.mouse.hasCursor](love.mouse.hascursor \"love.mouse.hasCursor\")                         | Gets whether cursor functionality is supported.                                       | 0.10.0 | 11.0  |\n| [love.mouse.isCursorSupported](love.mouse.iscursorsupported \"love.mouse.isCursorSupported\") | Gets whether cursor functionality is supported.                                       | 11.0   |       |\n| [love.mouse.isDown](love.mouse.isdown \"love.mouse.isDown\")                                  | Checks whether a certain button is down.                                              |        |       |\n| [love.mouse.isGrabbed](love.mouse.isgrabbed \"love.mouse.isGrabbed\")                         | Checks if the mouse is grabbed.                                                       |        |       |\n| [love.mouse.isVisible](love.mouse.isvisible \"love.mouse.isVisible\")                         | Checks if the cursor is visible.                                                      |        |       |\n| [love.mouse.newCursor](love.mouse.newcursor \"love.mouse.newCursor\")                         | Creates a new hardware [Cursor](cursor \"Cursor\") object from an image.                | 0.9.0  |       |\n| [love.mouse.setCursor](love.mouse.setcursor \"love.mouse.setCursor\")                         | Sets the current mouse cursor.                                                        | 0.9.0  |       |\n| [love.mouse.setGrab](love.mouse.setgrab \"love.mouse.setGrab\")                               | Grabs the mouse and confines it to the window.                                        |        | 0.9.0 |\n| [love.mouse.setGrabbed](love.mouse.setgrabbed \"love.mouse.setGrabbed\")                      | Grabs the mouse and confines it to the window.                                        | 0.9.0  |       |\n| [love.mouse.setPosition](love.mouse.setposition \"love.mouse.setPosition\")                   | Sets the current position of the mouse.                                               |        |       |\n| [love.mouse.setRelativeMode](love.mouse.setrelativemode \"love.mouse.setRelativeMode\")       | Sets whether relative mode is enabled for the mouse.                                  | 0.9.2  |       |\n| [love.mouse.setVisible](love.mouse.setvisible \"love.mouse.setVisible\")                      | Sets the current visibility of the cursor.                                            |        |       |\n| [love.mouse.setX](love.mouse.setx \"love.mouse.setX\")                                        | Sets the current X position of the mouse.                                             | 0.9.0  |       |\n| [love.mouse.setY](love.mouse.sety \"love.mouse.setY\")                                        | Sets the current Y position of the mouse.                                             | 0.9.0  |       |\n\n## Enums\n\n|                                                |                            |       |        |\n|------------------------------------------------|----------------------------|-------|--------|\n| [CursorType](cursortype \"CursorType\")          | Types of hardware cursors. | 0.9.0 |        |\n| [MouseConstant](mouseconstant \"MouseConstant\") | Mouse buttons.             |       | 0.10.0 |\n\n## See Also\n\n- [love](love \"love\")\n- [love.mousepressed](love.mousepressed \"love.mousepressed\")\n- [love.mousereleased](love.mousereleased \"love.mousereleased\")\n- [love.mousemoved](love.mousemoved \"love.mousemoved\")\n- [love.wheelmoved](love.wheelmoved \"love.wheelmoved\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse](https://love2d.org/wiki/love.mouse)"
- name: love.mouse.getCursor
  id: love.mouse.getcursor
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.mouse.getCursor\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the current Cursor.\n\n## Function\n\n### Synopsis\n\n``` lua\ncursor = love.mouse.getCursor( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Cursor`](cursor \"Cursor\")` cursor (nil)`  \nThe current cursor, or nil if no cursor is set.\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.setCursor](love.mouse.setcursor \"love.mouse.setCursor\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.getCursor](https://love2d.org/wiki/love.mouse.getCursor)"
- name: love.mouse.getPosition
  id: love.mouse.getposition
  summary: Returns the current position of the mouse
  description: "# love.mouse.getPosition\n\nReturns the current position of the mouse.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = love.mouse.getPosition( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe position of the mouse along the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the mouse along the y-axis.\n\n## Examples\n\n### Use getPosition to help draw a custom mouse image\n\n``` lua\nfunction love.load()\n   love.mouse.setVisible(false) -- make default mouse invisible\n   img = love.graphics.newImage(\"mouse.png\") -- load in a custom mouse image\nend\nfunction love.draw()\n   local x, y = love.mouse.getPosition() -- get the position of the mouse\n   love.graphics.draw(img, x, y) -- draw the custom mouse image\nend\n```\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.getX](love.mouse.getx \"love.mouse.getX\")\n- [love.mouse.getY](love.mouse.gety \"love.mouse.getY\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.getPosition](https://love2d.org/wiki/love.mouse.getPosition)"
- name: love.mouse.getRelativeMode
  id: love.mouse.getrelativemode
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.mouse.getRelativeMode\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets whether relative mode is enabled for the mouse.\n\nIf relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via [love.mousemoved](love.mousemoved \"love.mousemoved\"). This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.\n\nThe reported position of the mouse is not updated while relative mode is enabled, even when relative mouse [motion events](love.mousemoved \"love.mousemoved\") are generated.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = love.mouse.getRelativeMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nTrue if relative mode is enabled, false if it's disabled.\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.setRelativeMode](love.mouse.setrelativemode \"love.mouse.setRelativeMode\")\n- [love.mousemoved](love.mousemoved \"love.mousemoved\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.getRelativeMode](https://love2d.org/wiki/love.mouse.getRelativeMode)"
- name: love.mouse.getSystemCursor
  id: love.mouse.getsystemcursor
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.mouse.getSystemCursor\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets a [Cursor](cursor \"Cursor\") object representing a system-native hardware cursor.\n\nHardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.\n\n## Function\n\n### Synopsis\n\n``` lua\ncursor = love.mouse.getSystemCursor( ctype )\n```\n\n### Arguments\n\n[`CursorType`](cursortype \"CursorType\")` ctype`  \nThe type of system cursor to get.\n\n### Returns\n\n[`Cursor`](cursor \"Cursor\")` cursor`  \nThe Cursor object representing the system cursor type.\n\n### Notes\n\nThe \"image\" CursorType is not a valid argument. Use [love.mouse.newCursor](love.mouse.newcursor \"love.mouse.newCursor\") to create a hardware cursor using a custom image.\n\n## Examples\n\n``` lua\nfunction love.load()\n    i_beam_cursor = love.mouse.getSystemCursor(\"ibeam\")\n    love.mouse.setCursor(i_beam_cursor)\nend\n```\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.setCursor](love.mouse.setcursor \"love.mouse.setCursor\")\n- [Cursor](cursor \"Cursor\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.getSystemCursor](https://love2d.org/wiki/love.mouse.getSystemCursor)"
- name: love.mouse.getX
  id: love.mouse.getx
  summary: Returns the current x-position of the mouse
  description: "# love.mouse.getX\n\nReturns the current x-position of the mouse.\n\n## Function\n\n### Synopsis\n\n``` lua\nx = love.mouse.getX( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe position of the mouse along the x-axis.\n\n## Examples\n\nDraw a vertical [line](love.graphics.line \"love.graphics.line\") at the mouse's x-position.\n\n``` lua\nfunction love.draw()\n   local x = love.mouse.getX()\n   love.graphics.line(x,0, x,love.graphics.getHeight())\nend\n```\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.getY](love.mouse.gety \"love.mouse.getY\")\n- [love.mouse.getPosition](love.mouse.getposition \"love.mouse.getPosition\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.getX](https://love2d.org/wiki/love.mouse.getX)"
- name: love.mouse.getY
  id: love.mouse.gety
  summary: Returns the current y-position of the mouse
  description: "# love.mouse.getY\n\nReturns the current y-position of the mouse.\n\n## Function\n\n### Synopsis\n\n``` lua\ny = love.mouse.getY( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` y`  \nThe position of the mouse along the y-axis.\n\n## Examples\n\nDraw a horizontal [line](love.graphics.line \"love.graphics.line\") at the mouse's y-position.\n\n``` lua\nfunction love.draw()\n   local y = love.mouse.getY()\n   love.graphics.line(0,y, love.graphics.getWidth(),y)\nend\n```\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.getX](love.mouse.getx \"love.mouse.getX\")\n- [love.mouse.getPosition](love.mouse.getposition \"love.mouse.getPosition\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.getY](https://love2d.org/wiki/love.mouse.getY)"
- name: love.mouse.hasCursor
  id: love.mouse.hascursor
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.mouse.hasCursor\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\n|                                                                                                                                |\n|--------------------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                           |\n| This function has been renamed to [love.mouse.isCursorSupported](love.mouse.iscursorsupported \"love.mouse.isCursorSupported\"). |\n\nGets whether cursor functionality is supported.\n\nIf it isn't supported, calling [love.mouse.newCursor](love.mouse.newcursor \"love.mouse.newCursor\") and [love.mouse.getSystemCursor](love.mouse.getsystemcursor \"love.mouse.getSystemCursor\") will cause an error. Mobile devices do not support cursors.\n\n## Function\n\n### Synopsis\n\n``` lua\nhascursor = love.mouse.hasCursor( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` hascursor`  \nWhether the system has cursor functionality.\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.hasCursor](https://love2d.org/wiki/love.mouse.hasCursor)"
- name: love.mouse.isCursorSupported
  id: love.mouse.iscursorsupported
  summary: Available since LÖVE 11.0 It has been renamed from love.mouse.hasCursor
  description: "# love.mouse.isCursorSupported\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [love.mouse.hasCursor](love.mouse.hascursor \"love.mouse.hasCursor\").\n\nGets whether cursor functionality is supported.\n\nIf it isn't supported, calling [love.mouse.newCursor](love.mouse.newcursor \"love.mouse.newCursor\") and [love.mouse.getSystemCursor](love.mouse.getsystemcursor \"love.mouse.getSystemCursor\") will cause an error. Mobile devices do not support cursors.\n\n## Function\n\n### Synopsis\n\n``` lua\nsupported = love.mouse.isCursorSupported( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` supported`  \nWhether the system has cursor functionality.\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.isCursorSupported](https://love2d.org/wiki/love.mouse.isCursorSupported)"
- name: love.mouse.isDown
  id: love.mouse.isdown
  summary: Checks whether a certain mouse button is down
  description: "# love.mouse.isDown\n\nChecks whether a certain mouse button is down.\n\nThis function does not detect mouse wheel scrolling; you must use the [love.wheelmoved](love.wheelmoved \"love.wheelmoved\") (or [love.mousepressed](love.mousepressed \"love.mousepressed\") in version [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older) callback for that.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\ndown = love.mouse.isDown( button, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` button`  \nThe index of a button to check. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependant.\n\n[`number`](number \"number\")` ...`  \nAdditional button numbers to check.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` down`  \nTrue if any specified button is down.\n\n## Function\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\ndown = love.mouse.isDown( button )\n```\n\n### Arguments\n\n[`MouseConstant`](mouseconstant \"MouseConstant\")` button`  \nThe button to check.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` down`  \nTrue if the specified button is down.\n\n## Function\n\n**Available since LÖVE [0.7.2](https://love2d.org/wiki/0.7.2 \"0.7.2\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier or later versions.\n\n### Synopsis\n\n``` lua\nanyDown = love.mouse.isDown( button1, button2, button3, ... )\n```\n\n### Arguments\n\n[`MouseConstant`](mouseconstant \"MouseConstant\")` buttonN`  \nA button to check.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` anyDown`  \nTrue if any specified button is down, false otherwise.\n\n## Example\n\n### Increase a value while the right mouse button is held\n\n``` lua\nval = 0   -- establish a variable for later use\nfunction love.update(dt)\n    if love.mouse.isDown(2) then\n        val = val + dt   -- we will increase the variable by 1 for every second the button is held down\n    end \nend\n```\n\n## See Also\n\n- [Mouse Constant / buttons](mouseconstant \"MouseConstant\")\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mousepressed](love.mousepressed \"love.mousepressed\")\n- [love.mousereleased](love.mousereleased \"love.mousereleased\")\n- [love.keyboard.isDown](love.keyboard.isdown \"love.keyboard.isDown\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.isDown](https://love2d.org/wiki/love.mouse.isDown)"
- name: love.mouse.isGrabbed
  id: love.mouse.isgrabbed
  summary: Checks if the mouse is grabbed
  description: "# love.mouse.isGrabbed\n\nChecks if the mouse is grabbed.\n\n## Function\n\n### Synopsis\n\n``` lua\ngrabbed = love.mouse.isGrabbed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` grabbed`  \nTrue if the cursor is grabbed, false if it is not.\n\n## Examples\n\nToggles whether the mouse is grabbed by pressing tab, using [love.mouse.setGrabbed](love.mouse.setgrabbed \"love.mouse.setGrabbed\").\n\n``` lua\nfunction love.keypressed(key)\n   if key == \"tab\" then\n      local state = not love.mouse.isGrabbed()   -- the opposite of whatever it currently is\n      love.mouse.setGrabbed(state) --Use love.mouse.setGrab(state) for 0.8.0 or lower\n   end\nend\n```\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.setGrabbed](love.mouse.setgrabbed \"love.mouse.setGrabbed\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.isGrabbed](https://love2d.org/wiki/love.mouse.isGrabbed)"
- name: love.mouse.isVisible
  id: love.mouse.isvisible
  summary: Checks if the cursor is visible
  description: "# love.mouse.isVisible\n\nChecks if the cursor is visible.\n\n## Function\n\n### Synopsis\n\n``` lua\nvisible = love.mouse.isVisible( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` visible`  \nTrue if the cursor to visible, false if the cursor is hidden.\n\n## Examples\n\nToggle mouse visibility by pressing tab (using [setVisible](love.mouse.setvisible \"love.mouse.setVisible\")).\n\n``` lua\nfunction love.keypressed(key)\n   if key == \"tab\" then\n      local state = not love.mouse.isVisible()   -- the opposite of whatever it currently is\n      love.mouse.setVisible(state)\n   end\nend\n```\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.setVisible](love.mouse.setvisible \"love.mouse.setVisible\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.isVisible](https://love2d.org/wiki/love.mouse.isVisible)"
- name: love.mouse.newCursor
  id: love.mouse.newcursor
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.mouse.newCursor\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new hardware [Cursor](cursor \"Cursor\") object from an image file or [ImageData](imagedata \"ImageData\").\n\nHardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.\n\nThe hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle.\n\n  \n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\ncursor = love.mouse.newCursor( imageData, hotx, hoty )\n```\n\n### Arguments\n\n[`ImageData`](imagedata \"ImageData\")` imageData`  \nThe ImageData to use for the new Cursor.\n\n[`number`](number \"number\")` hotx (0)`  \nThe x-coordinate in the ImageData of the cursor's hot spot.\n\n[`number`](number \"number\")` hoty (0)`  \nThe y-coordinate in the ImageData of the cursor's hot spot.\n\n### Returns\n\n[`Cursor`](cursor \"Cursor\")` cursor`  \nThe new Cursor object.\n\n## Function\n\n### Synopsis\n\n``` lua\ncursor = love.mouse.newCursor( filename, hotx, hoty )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nPath to the image to use for the new Cursor.\n\n[`number`](number \"number\")` hotx (0)`  \nThe x-coordinate in the image of the cursor's hot spot.\n\n[`number`](number \"number\")` hoty (0)`  \nThe y-coordinate in the image of the cursor's hot spot.\n\n### Returns\n\n[`Cursor`](cursor \"Cursor\")` cursor`  \nThe new Cursor object.\n\n## Function\n\n### Synopsis\n\n``` lua\ncursor = love.mouse.newCursor( fileData, hotx, hoty )\n```\n\n### Arguments\n\n[`FileData`](filedata \"FileData\")` fileData`  \nData representing the image to use for the new Cursor.\n\n[`number`](number \"number\")` hotx (0)`  \nThe x-coordinate in the image of the cursor's hot spot.\n\n[`number`](number \"number\")` hoty (0)`  \nThe y-coordinate in the image of the cursor's hot spot.\n\n### Returns\n\n[`Cursor`](cursor \"Cursor\")` cursor`  \nThe new Cursor object.\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.setCursor](love.mouse.setcursor \"love.mouse.setCursor\")\n- [love.mouse.getCursor](love.mouse.getcursor \"love.mouse.getCursor\")\n- [Cursor](cursor \"Cursor\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.newCursor](https://love2d.org/wiki/love.mouse.newCursor)"
- name: love.mouse.setCursor
  id: love.mouse.setcursor
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.mouse.setCursor\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the current mouse cursor.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.mouse.setCursor( cursor )\n```\n\n### Arguments\n\n[`Cursor`](cursor \"Cursor\")` cursor`  \nThe Cursor object to use as the current mouse cursor.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.mouse.setCursor( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n### Notes\n\nResets the current mouse cursor to the default.\n\n## Examples\n\n``` lua\nfunction love.load()\n    cursor = love.mouse.getSystemCursor(\"hand\")\n    -- Alternative: cursor = love.mouse.newCursor(\"pig.png\", 0, 0)\nend\n \nfunction love.mousepressed(x, y, button)\n    -- Use a custom cursor when the left mouse button is pressed.\n    if button == 1 then\n        love.mouse.setCursor(cursor)\n    end\nend\n \nfunction love.mousereleased(x, y, button)\n    -- Go back to the default cursor when the left mouse button is released.\n    if button == 1 then\n        love.mouse.setCursor()\n    end\nend\n```\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.newCursor](love.mouse.newcursor \"love.mouse.newCursor\")\n- [love.mouse.getCursor](love.mouse.getcursor \"love.mouse.getCursor\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.setCursor](https://love2d.org/wiki/love.mouse.setCursor)"
- name: love.mouse.setGrab
  id: love.mouse.setgrab
  summary: Removed in LÖVE 0.9.0 It has been renamed to love.mouse.setGrabbed
  description: "# love.mouse.setGrab\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [love.mouse.setGrabbed](love.mouse.setgrabbed \"love.mouse.setGrabbed\").\n\nGrabs the mouse and confines it to the window.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.mouse.setGrab( grab )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` grab`  \nTrue to confine the mouse, false to let it leave the window.\n\n### Returns\n\nNothing.\n\n## Examples\n\nToggles whether the mouse is grabbed by pressing tab, with the help of [love.mouse.isGrabbed](love.mouse.isgrabbed \"love.mouse.isGrabbed\").\n\n``` lua\nfunction love.keypressed(key)\n   if key == \"tab\" then\n      local state = not love.mouse.isGrabbed()   -- the opposite of whatever it currently is\n      love.mouse.setGrab(state)\n   end\nend\n```\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.isGrabbed](love.mouse.isgrabbed \"love.mouse.isGrabbed\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.setGrab](https://love2d.org/wiki/love.mouse.setGrab)"
- name: love.mouse.setGrabbed
  id: love.mouse.setgrabbed
  summary: Available since LÖVE 0.9.0 It has been renamed from love.mouse.setGrab
  description: "# love.mouse.setGrabbed\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [love.mouse.setGrab](love.mouse.setgrab \"love.mouse.setGrab\").\n\nGrabs the mouse and confines it to the window.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.mouse.setGrabbed( grab )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` grab`  \nTrue to confine the mouse, false to let it leave the window.\n\n### Returns\n\nNothing.\n\n## Examples\n\nToggles whether the mouse is grabbed by pressing tab, with the help of [love.mouse.isGrabbed](love.mouse.isgrabbed \"love.mouse.isGrabbed\").\n\n``` lua\nfunction love.keypressed(key)\n   if key == \"tab\" then\n      local state = not love.mouse.isGrabbed()   -- the opposite of whatever it currently is\n      love.mouse.setGrabbed(state)\n   end\nend\n```\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.isGrabbed](love.mouse.isgrabbed \"love.mouse.isGrabbed\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.setGrabbed](https://love2d.org/wiki/love.mouse.setGrabbed)"
- name: love.mouse.setPosition
  id: love.mouse.setposition
  summary: Sets the current position of the mouse
  description: "# love.mouse.setPosition\n\nSets the current position of the mouse. Non-integer values are floored.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.mouse.setPosition( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe new position of the mouse along the x-axis.\n\n[`number`](number \"number\")` y`  \nThe new position of the mouse along the y-axis.\n\n### Returns\n\nNothing.\n\n## Examples\n\nSnap the mouse to the horizontal center of the screen while maintaining the coordinate along the y-axis by using [love.mouse.getY](love.mouse.gety \"love.mouse.getY\").\n\n``` lua\nfunction love.keypressed( )\n  love.mouse.setPosition( love.graphics.getWidth() * 0.5, love.mouse.getY() )\nend\n```\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.getPosition](love.mouse.getposition \"love.mouse.getPosition\")\n- [love.mouse.getX](love.mouse.getx \"love.mouse.getX\")\n- [love.mouse.getY](love.mouse.gety \"love.mouse.getY\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.setPosition](https://love2d.org/wiki/love.mouse.setPosition)"
- name: love.mouse.setRelativeMode
  id: love.mouse.setrelativemode
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.mouse.setRelativeMode\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nSets whether relative mode is enabled for the mouse.\n\nWhen relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via [love.mousemoved](love.mousemoved \"love.mousemoved\"). This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.\n\nThe reported position of the mouse may not be updated while relative mode is enabled, even when relative mouse [motion events](love.mousemoved \"love.mousemoved\") are generated.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.mouse.setRelativeMode( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue to enable relative mode, false to disable it.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.getRelativeMode](love.mouse.getrelativemode \"love.mouse.getRelativeMode\")\n- [love.mousemoved](love.mousemoved \"love.mousemoved\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.setRelativeMode](https://love2d.org/wiki/love.mouse.setRelativeMode)"
- name: love.mouse.setVisible
  id: love.mouse.setvisible
  summary: Sets the current visibility of the cursor
  description: "# love.mouse.setVisible\n\nSets the current visibility of the cursor.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.mouse.setVisible( visible )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` visible`  \nTrue to set the cursor to visible, false to hide the cursor.\n\n### Returns\n\nNothing.\n\n## Examples\n\nToggle mouse visibility by pressing tab.\n\n``` lua\nfunction love.keypressed(key)\n   if key == \"tab\" then\n      local state = not love.mouse.isVisible()   -- the opposite of whatever it currently is\n      love.mouse.setVisible(state)\n   end\nend\n```\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.isVisible](love.mouse.isvisible \"love.mouse.isVisible\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.setVisible](https://love2d.org/wiki/love.mouse.setVisible)"
- name: love.mouse.setX
  id: love.mouse.setx
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.mouse.setX\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the current X position of the mouse. Non-integer values are floored.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.mouse.setX( x )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe new position of the mouse along the x-axis.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.setPosition](love.mouse.setposition \"love.mouse.setPosition\")\n- [love.mouse.setY](love.mouse.sety \"love.mouse.setY\")\n- [love.mouse.getX](love.mouse.getx \"love.mouse.getX\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.setX](https://love2d.org/wiki/love.mouse.setX)"
- name: love.mouse.setY
  id: love.mouse.sety
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.mouse.setY\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the current Y position of the mouse. Non-integer values are floored.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.mouse.setY( y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` y`  \nThe new position of the mouse along the y-axis.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.setPosition](love.mouse.setposition \"love.mouse.setPosition\")\n- [love.mouse.setX](love.mouse.setx \"love.mouse.setX\")\n- [love.mouse.getY](love.mouse.gety \"love.mouse.getY\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mouse.setY](https://love2d.org/wiki/love.mouse.setY)"
- name: love.mousefocus
  id: love.mousefocus
  summary: Available since LÖVE 0.9.0 This callback is not supported in earlier versions
  description: "# love.mousefocus\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis callback is not supported in earlier versions.\n\nCallback function triggered when window receives or loses mouse focus.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.mousefocus( focus )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` focus`  \nWhether the window has mouse focus or not.\n\n### Returns\n\nNothing.\n\n## Example\n\n``` lua\nfunction love.load()\n  text = \"Mouse is in the window!\"\nend\n \nfunction love.draw()\n  love.graphics.print(text,0,0)\nend\n \nfunction love.mousefocus(f)\n  if not f then\n    text = \"Mouse is not in the window!\"\n    print(\"LOST MOUSE FOCUS\")\n  else\n    text = \"Mouse is in the window!\"\n    print(\"GAINED MOUSE FOCUS\")\n  end\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mousefocus](https://love2d.org/wiki/love.mousefocus)"
- name: love.mousemoved
  id: love.mousemoved
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.mousemoved\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nCallback function triggered when the mouse is moved.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.mousemoved( x, y, dx, dy, istouch )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe mouse position on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe mouse position on the y-axis.\n\n[`number`](number \"number\")` dx`  \nThe amount moved along the x-axis since the last time love.mousemoved was called.\n\n[`number`](number \"number\")` dy`  \nThe amount moved along the y-axis since the last time love.mousemoved was called.\n\n[`boolean`](boolean \"boolean\")` istouch` Available since 0.10.0  \nTrue if the mouse button press originated from a touchscreen touch-press.\n\n### Returns\n\nNothing.\n\n## Notes\n\nIf [Relative Mode](love.mouse.setrelativemode \"love.mouse.setRelativeMode\") is enabled for the mouse, the **dx** and **dy** arguments of this callback will update but **x** and **y** are not guaranteed to.\n\n## See Also\n\n- [love](love \"love\")\n- [love.mousepressed](love.mousepressed \"love.mousepressed\")\n- [love.mousereleased](love.mousereleased \"love.mousereleased\")\n- [love.mouse.setPosition](love.mouse.setposition \"love.mouse.setPosition\")\n- [love.mouse.getPosition](love.mouse.getposition \"love.mouse.getPosition\")\n- [love.mouse.setRelativeMode](love.mouse.setrelativemode \"love.mouse.setRelativeMode\")\n- [love.mouse.getRelativeMode](love.mouse.getrelativemode \"love.mouse.getRelativeMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mousemoved](https://love2d.org/wiki/love.mousemoved)"
- name: love.mousepressed
  id: love.mousepressed
  summary: Callback function triggered when a mouse button is pressed
  description: "# love.mousepressed\n\nCallback function triggered when a mouse button is pressed.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.mousepressed( x, y, button, istouch, presses )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nMouse x position, in pixels.\n\n[`number`](number \"number\")` y`  \nMouse y position, in pixels.\n\n[`number`](number \"number\")` button`  \nThe button index that was pressed. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependent.\n\n[`boolean`](boolean \"boolean\")` istouch`  \nTrue if the mouse button press originated from a touchscreen touch-press.\n\n[`number`](number \"number\")` presses` Available since 11.0  \nThe number of presses in a short time frame and small area, used to simulate double, triple clicks\n\n### Returns\n\nNothing.\n\n### Notes\n\nUse [love.wheelmoved](love.wheelmoved \"love.wheelmoved\") to detect mouse wheel motion. It will not register as a button press in version [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") and newer.\n\n## Function\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nlove.mousepressed( x, y, button )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nMouse x position.\n\n[`number`](number \"number\")` y`  \nMouse y position.\n\n[`MouseConstant`](mouseconstant \"MouseConstant\")` button`  \nMouse button pressed.\n\n### Returns\n\nNothing.\n\n## Examples\n\nPosition a string (\"Text\") wherever the user left-clicks.\n\n``` lua\nfunction love.load()\n   printx = 0\n   printy = 0\nend\n \nfunction love.draw()\n   love.graphics.print(\"Text\", printx, printy)\nend\n \nfunction love.mousepressed(x, y, button, istouch)\n   if button == 1 then -- Versions prior to 0.10.0 use the MouseConstant 'l'\n      printx = x\n      printy = y\n   end\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n- [love.mousereleased](love.mousereleased \"love.mousereleased\")\n- [love.mouse.isDown](love.mouse.isdown \"love.mouse.isDown\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mousepressed](https://love2d.org/wiki/love.mousepressed)"
- name: love.mousereleased
  id: love.mousereleased
  summary: Callback function triggered when a mouse button is released
  description: "# love.mousereleased\n\nCallback function triggered when a mouse button is released.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.mousereleased( x, y, button, istouch, presses )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nMouse x position, in pixels.\n\n[`number`](number \"number\")` y`  \nMouse y position, in pixels.\n\n[`number`](number \"number\")` button`  \nThe button index that was released. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependent.\n\n[`boolean`](boolean \"boolean\")` istouch`  \nTrue if the mouse button release originated from a touchscreen touch-release.\n\n[`number`](number \"number\")` presses` Available since 11.0  \nThe number of presses in a short time frame and small area, used to simulate double, triple clicks\n\n### Returns\n\nNothing.\n\n## Function\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nlove.mousereleased( x, y, button )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nMouse x position.\n\n[`number`](number \"number\")` y`  \nMouse y position.\n\n[`MouseConstant`](mouseconstant \"MouseConstant\")` button`  \nMouse button released, except Mouse Wheel.\n\n### Returns\n\nNothing.\n\n## Examples\n\nPosition a string (\"Text\") wherever the user releases the primary mouse button.\n\n``` lua\nfunction love.load()\n   printx = 0\n   printy = 0\nend\n \nfunction love.draw()\n   love.graphics.print(\"Text\", printx, printy)\nend\n \nfunction love.mousereleased(x, y, button)\n   if button == 1 then\n      printx = x\n      printy = y\n   end\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.mousereleased](https://love2d.org/wiki/love.mousereleased)"
- name: love.physics
  id: love.physics
  summary: Available since LÖVE 0.4.0 This module is not supported in earlier versions
  description: "# love.physics\n\n**Available since LÖVE [0.4.0](https://love2d.org/wiki/0.4.0 \"0.4.0\")**  \nThis module is not supported in earlier versions.\n\nCan simulate 2D rigid bodies in a realistic manner. This module is essentially just a binding to [Box2D](http://box2d.org/about/) (version 2.3.0 - [manual](https://box2d.org/documentation/)).\n\nFor simpler (and more common) use cases, a small number of libraries exist, which are usually more popularly used than love.physics and can be found here: [https://github.com/love2d-community/awesome-love2d#physics](https://github.com/love2d-community/awesome-love2d#physics)\n\n## Types\n\n|                              |                                                                          |       |     |\n|------------------------------|--------------------------------------------------------------------------|-------|-----|\n| [Body](body \"Body\")          | Bodies are objects with velocity and position.                           |       |     |\n| [Contact](contact \"Contact\") | Contacts are objects created to manage collisions in worlds.             |       |     |\n| [Fixture](fixture \"Fixture\") | Fixtures attach shapes to bodies.                                        | 0.8.0 |     |\n| [Joint](joint \"Joint\")       | Attach multiple bodies together to interact in unique ways.              |       |     |\n| [Shape](shape \"Shape\")       | [Shapes](shape \"Shape\") are objects used to control mass and collisions. |       |     |\n| [World](world \"World\")       | A world is an object that contains all bodies and joints.                |       |     |\n\n## Functions\n\n|                                                                                                   |                                                                                                     |       |     |\n|---------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------|-------|-----|\n| [love.physics.getDistance](love.physics.getdistance \"love.physics.getDistance\")                   | Returns the two closest points between two fixtures and their distance.                             | 0.8.0 |     |\n| [love.physics.getMeter](love.physics.getmeter \"love.physics.getMeter\")                            | Returns the meter scale factor.                                                                     | 0.8.0 |     |\n| [love.physics.newBody](love.physics.newbody \"love.physics.newBody\")                               | Creates a new body.                                                                                 |       |     |\n| [love.physics.newChainShape](love.physics.newchainshape \"love.physics.newChainShape\")             | Creates a new [ChainShape](chainshape \"ChainShape\").                                                | 0.8.0 |     |\n| [love.physics.newCircleShape](love.physics.newcircleshape \"love.physics.newCircleShape\")          | Creates a new [CircleShape](circleshape \"CircleShape\").                                             |       |     |\n| [love.physics.newDistanceJoint](love.physics.newdistancejoint \"love.physics.newDistanceJoint\")    | Creates a [DistanceJoint](distancejoint \"DistanceJoint\") between two bodies.                        |       |     |\n| [love.physics.newEdgeShape](love.physics.newedgeshape \"love.physics.newEdgeShape\")                | Creates a new [EdgeShape](edgeshape \"EdgeShape\").                                                   | 0.8.0 |     |\n| [love.physics.newFixture](love.physics.newfixture \"love.physics.newFixture\")                      | Creates and attaches a fixture.                                                                     | 0.8.0 |     |\n| [love.physics.newFrictionJoint](love.physics.newfrictionjoint \"love.physics.newFrictionJoint\")    | A [FrictionJoint](frictionjoint \"FrictionJoint\") applies friction to a body.                        | 0.8.0 |     |\n| [love.physics.newGearJoint](love.physics.newgearjoint \"love.physics.newGearJoint\")                | Create a [GearJoint](gearjoint \"GearJoint\") connecting two Joints.                                  |       |     |\n| [love.physics.newMotorJoint](love.physics.newmotorjoint \"love.physics.newMotorJoint\")             | Creates a joint between two bodies which controls the relative motion between them.                 | 0.9.0 |     |\n| [love.physics.newMouseJoint](love.physics.newmousejoint \"love.physics.newMouseJoint\")             | Create a joint between a body and the mouse.                                                        |       |     |\n| [love.physics.newPolygonShape](love.physics.newpolygonshape \"love.physics.newPolygonShape\")       | Creates a new [PolygonShape](polygonshape \"PolygonShape\").                                          |       |     |\n| [love.physics.newPrismaticJoint](love.physics.newprismaticjoint \"love.physics.newPrismaticJoint\") | Creates a [PrismaticJoint](prismaticjoint \"PrismaticJoint\") between two bodies.                     |       |     |\n| [love.physics.newPulleyJoint](love.physics.newpulleyjoint \"love.physics.newPulleyJoint\")          | Creates a [PulleyJoint](pulleyjoint \"PulleyJoint\") to join two bodies to each other and the ground. |       |     |\n| [love.physics.newRectangleShape](love.physics.newrectangleshape \"love.physics.newRectangleShape\") | Shorthand for creating rectangular [PolygonShapes](polygonshape \"PolygonShape\").                    |       |     |\n| [love.physics.newRevoluteJoint](love.physics.newrevolutejoint \"love.physics.newRevoluteJoint\")    | Creates a pivot joint between two bodies.                                                           |       |     |\n| [love.physics.newRopeJoint](love.physics.newropejoint \"love.physics.newRopeJoint\")                | Creates a joint between two bodies that enforces a max distance between them.                       | 0.8.0 |     |\n| [love.physics.newWeldJoint](love.physics.newweldjoint \"love.physics.newWeldJoint\")                | A [WeldJoint](weldjoint \"WeldJoint\") essentially glues two bodies together.                         | 0.8.0 |     |\n| [love.physics.newWheelJoint](love.physics.newwheeljoint \"love.physics.newWheelJoint\")             | Creates a wheel joint.                                                                              | 0.8.0 |     |\n| [love.physics.newWorld](love.physics.newworld \"love.physics.newWorld\")                            | Creates a new World.                                                                                |       |     |\n| [love.physics.setMeter](love.physics.setmeter \"love.physics.setMeter\")                            | Sets the meter scale factor.                                                                        | 0.8.0 |     |\n\n## Enums\n\n|                                    |                                                                                                                |     |     |\n|------------------------------------|----------------------------------------------------------------------------------------------------------------|-----|-----|\n| [BodyType](bodytype \"BodyType\")    | The types of a [Body](body \"Body\").                                                                            |     |     |\n| [JointType](jointtype \"JointType\") | Different types of joints.                                                                                     |     |     |\n| [ShapeType](shapetype \"ShapeType\") | The different types of [Shapes](shape \"Shape\"), as returned by [Shape:getType](shape-gettype \"Shape:getType\"). |     |     |\n\n## Notes\n\n### Box2D's architecture, concepts, and terminologies.\n\n[](https://love2d.org/wiki/File:Box2D_basic_overview.png)\n\n## See Also\n\n- [love](love \"love\")\n- [Tutorial:Physics](https://love2d.org/wiki/Tutorial:Physics \"Tutorial:Physics\")\n- [Tutorial:PhysicsCollisionCallbacks](https://love2d.org/wiki/Tutorial:PhysicsCollisionCallbacks \"Tutorial:PhysicsCollisionCallbacks\")\n- [Box2D Gotchas](http://www.iforce2d.net/b2dtut/gotchas) (recommended reading)\n\n  \n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics](https://love2d.org/wiki/love.physics)"
- name: love.physics.getDistance
  id: love.physics.getdistance
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.physics.getDistance\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns the two closest points between two fixtures and their distance.\n\nThis function does not work correctly in [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and may terminate LÖVE without errors.\n\n## Function\n\n### Synopsis\n\n``` lua\ndistance, x1, y1, x2, y2 = love.physics.getDistance( fixture1, fixture2 )\n```\n\n### Arguments\n\n[`Fixture`](fixture \"Fixture\")` fixture1`  \nThe first fixture.\n\n[`Fixture`](fixture \"Fixture\")` fixture2`  \nThe second fixture.\n\n### Returns\n\n[`number`](number \"number\")` distance`  \nThe distance of the two points.\n\n[`number`](number \"number\")` x1`  \nThe x-coordinate of the first point.\n\n[`number`](number \"number\")` y1`  \nThe y-coordinate of the first point.\n\n[`number`](number \"number\")` x2`  \nThe x-coordinate of the second point.\n\n[`number`](number \"number\")` y2`  \nThe y-coordinate of the second point.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.getDistance](https://love2d.org/wiki/love.physics.getDistance)"
- name: love.physics.getMeter
  id: love.physics.getmeter
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.physics.getMeter\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns the meter scale factor.\n\nAll coordinates in the physics module are divided by this number, creating a convenient way to draw the objects directly to the screen without the need for graphics transformations.\n\nIt is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters.\n\n## Function\n\n### Synopsis\n\n``` lua\nscale = love.physics.getMeter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` scale`  \nThe scale factor as an integer.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [love.physics.setMeter](love.physics.setmeter \"love.physics.setMeter\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.getMeter](https://love2d.org/wiki/love.physics.getMeter)"
- name: love.physics.newBody
  id: love.physics.newbody
  summary: Creates a new body
  description: "# love.physics.newBody\n\nCreates a new body.\n\nThere are three types of bodies.\n\n- Static bodies do not move, have a infinite mass, and can be used for level boundaries.\n- Dynamic bodies are the main actors in the simulation, they collide with everything.\n- Kinematic bodies do not react to forces and only collide with dynamic bodies.\n\nThe mass of the body gets calculated when a [Fixture](fixture \"Fixture\") is attached or removed, but can be changed at any time with [Body:setMass](body-setmass \"Body:setMass\") or [Body:resetMassData](body-resetmassdata \"Body:resetMassData\").\n\nMaking changes to a [World](world \"World\") is not allowed inside of the [beginContact](https://love2d.org/w/index.php?title=beginContact&action=edit&redlink=1 \"beginContact (page does not exist)\"), [endContact](https://love2d.org/w/index.php?title=endContact&action=edit&redlink=1 \"endContact (page does not exist)\"), [preSolve](https://love2d.org/w/index.php?title=preSolve&action=edit&redlink=1 \"preSolve (page does not exist)\"), and [postSolve](https://love2d.org/w/index.php?title=postSolve&action=edit&redlink=1 \"postSolve (page does not exist)\") callback functions, as BOX2D locks the world during these callbacks.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nbody = love.physics.newBody( world, x, y, type )\n```\n\n### Arguments\n\n[`World`](world \"World\")` world`  \nThe world to create the body in.\n\n[`number`](number \"number\")` x (0)`  \nThe x position of the body.\n\n[`number`](number \"number\")` y (0)`  \nThe y position of the body.\n\n[`BodyType`](bodytype \"BodyType\")` type (\"static\")`  \nThe type of the body.\n\n### Returns\n\n[`Body`](body \"Body\")` body`  \nA new body.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nbody = love.physics.newBody( world, x, y, m, i )\n```\n\n### Arguments\n\n[`World`](world \"World\")` world`  \nThe world to create the body in.\n\n[`number`](number \"number\")` x (0)`  \nThe x position of the body.\n\n[`number`](number \"number\")` y (0)`  \nThe y position of the body.\n\n[`number`](number \"number\")` m (0)`  \nThe mass of the body.\n\n[`number`](number \"number\")` i (0)`  \nThe rotational inertia of the body.\n\n### Returns\n\n[`Body`](body \"Body\")` body`  \nA new body.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [Body](body \"Body\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newBody](https://love2d.org/wiki/love.physics.newBody)"
- name: love.physics.newChainShape
  id: love.physics.newchainshape
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.physics.newChainShape\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new [ChainShape](chainshape \"ChainShape\").\n\nDue to a limitation of the current collision algorithm, collision with chain shapes can react in a odd manner. see \\[[here](https://code.google.com/p/box2d/issues/detail?id=286)\\]\n\nMaking changes to a [World](world \"World\") is not allowed inside of the [beginContact](https://love2d.org/w/index.php?title=beginContact&action=edit&redlink=1 \"beginContact (page does not exist)\"), [endContact](https://love2d.org/w/index.php?title=endContact&action=edit&redlink=1 \"endContact (page does not exist)\"), [preSolve](https://love2d.org/w/index.php?title=preSolve&action=edit&redlink=1 \"preSolve (page does not exist)\"), and [postSolve](https://love2d.org/w/index.php?title=postSolve&action=edit&redlink=1 \"postSolve (page does not exist)\") callback functions, as BOX2D locks the world during these callbacks.\n\n## Function\n\n### Synopsis\n\n``` lua\nshape = love.physics.newChainShape( loop, x1, y1, x2, y2, ... )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` loop`  \nIf the chain should loop back to the first point.\n\n[`number`](number \"number\")` x1`  \nThe x position of the first point.\n\n[`number`](number \"number\")` y1`  \nThe y position of the first point.\n\n[`number`](number \"number\")` x2`  \nThe x position of the second point.\n\n[`number`](number \"number\")` y2`  \nThe y position of the second point.\n\n[`number`](number \"number\")` ...`  \nAdditional point positions.\n\n### Returns\n\n[`ChainShape`](chainshape \"ChainShape\")` shape`  \nThe new shape.\n\n## Function\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nshape = love.physics.newChainShape( loop, points )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` loop`  \nIf the chain should loop back to the first point.\n\n[`table`](table \"table\")` points`  \nA list of points to construct the ChainShape, in the form of `{x1, y1, x2, y2, ...}`.\n\n### Returns\n\n[`ChainShape`](chainshape \"ChainShape\")` shape`  \nThe new shape.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [ChainShape](chainshape \"ChainShape\")\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newChainShape](https://love2d.org/wiki/love.physics.newChainShape)"
- name: love.physics.newCircleShape
  id: love.physics.newcircleshape
  summary: Creates a new CircleShape
  description: "# love.physics.newCircleShape\n\nCreates a new [CircleShape](circleshape \"CircleShape\").\n\nMaking changes to a [World](world \"World\") is not allowed inside of the [beginContact](https://love2d.org/w/index.php?title=beginContact&action=edit&redlink=1 \"beginContact (page does not exist)\"), [endContact](https://love2d.org/w/index.php?title=endContact&action=edit&redlink=1 \"endContact (page does not exist)\"), [preSolve](https://love2d.org/w/index.php?title=preSolve&action=edit&redlink=1 \"preSolve (page does not exist)\"), and [postSolve](https://love2d.org/w/index.php?title=postSolve&action=edit&redlink=1 \"postSolve (page does not exist)\") callback functions, as BOX2D locks the world during these callbacks.\n\n**Script Example Missing**\n\n***love.physics.newCircleShape** needs a script example, help out by writing one.*\n\n  \n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThese variants are not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nshape = love.physics.newCircleShape( radius )\n```\n\n### Arguments\n\n[`number`](number \"number\")` radius`  \nThe radius of the circle.\n\n### Returns\n\n[`CircleShape`](circleshape \"CircleShape\")` shape`  \nThe new shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nshape = love.physics.newCircleShape( x, y, radius )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x position of the circle.\n\n[`number`](number \"number\")` y`  \nThe y position of the circle.\n\n[`number`](number \"number\")` radius`  \nThe radius of the circle.\n\n### Returns\n\n[`CircleShape`](circleshape \"CircleShape\")` shape`  \nThe new shape.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nshape = love.physics.newCircleShape( body, x, y, radius )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body`  \nThe body to attach the shape to.\n\n[`number`](number \"number\")` x`  \nThe x offset of the circle.\n\n[`number`](number \"number\")` y`  \nThe y offset of the circle.\n\n[`number`](number \"number\")` radius`  \nThe radius of the circle.\n\n### Returns\n\n[`CircleShape`](circleshape \"CircleShape\")` shape`  \nA new CircleShape.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [CircleShape](circleshape \"CircleShape\")\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newCircleShape](https://love2d.org/wiki/love.physics.newCircleShape)"
- name: love.physics.newDistanceJoint
  id: love.physics.newdistancejoint
  summary: Creates a DistanceJoint between two bodies
  description: "# love.physics.newDistanceJoint\n\nCreates a [DistanceJoint](distancejoint \"DistanceJoint\") between two bodies.\n\nThis joint constrains the distance between two points on two bodies to be constant. These two points are specified in world coordinates and the two bodies are assumed to be in place when this joint is created. The first anchor point is connected to the first body and the second to the second body, and the points define the length of the distance joint.\n\n[](https://love2d.org/wiki/File:physicsJointDistance.PNG)\n\nMaking changes to a [World](world \"World\") is not allowed inside of the [beginContact](https://love2d.org/w/index.php?title=beginContact&action=edit&redlink=1 \"beginContact (page does not exist)\"), [endContact](https://love2d.org/w/index.php?title=endContact&action=edit&redlink=1 \"endContact (page does not exist)\"), [preSolve](https://love2d.org/w/index.php?title=preSolve&action=edit&redlink=1 \"preSolve (page does not exist)\"), and [postSolve](https://love2d.org/w/index.php?title=postSolve&action=edit&redlink=1 \"postSolve (page does not exist)\") callback functions, as BOX2D locks the world during these callbacks.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newDistanceJoint( body1, body2, x1, y1, x2, y2, collideConnected )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to attach to the joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to attach to the joint.\n\n[`number`](number \"number\")` x1`  \nThe x position of the first anchor point (world space).\n\n[`number`](number \"number\")` y1`  \nThe y position of the first anchor point (world space).\n\n[`number`](number \"number\")` x2`  \nThe x position of the second anchor point (world space).\n\n[`number`](number \"number\")` y2`  \nThe y position of the second anchor point (world space).\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`DistanceJoint`](distancejoint \"DistanceJoint\")` joint`  \nThe new distance joint.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newDistanceJoint( body1, body2, x1, y1, x2, y2 )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to attach to the joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to attach to the joint.\n\n[`number`](number \"number\")` x1`  \nThe x position of the first anchor point (world space).\n\n[`number`](number \"number\")` y1`  \nThe y position of the first anchor point (world space).\n\n[`number`](number \"number\")` x2`  \nThe x position of the second anchor point (world space).\n\n[`number`](number \"number\")` y2`  \nThe y position of the second anchor point (world space).\n\n### Returns\n\n[`DistanceJoint`](distancejoint \"DistanceJoint\")` joint`  \nThe new distance joint.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [DistanceJoint](distancejoint \"DistanceJoint\")\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newDistanceJoint](https://love2d.org/wiki/love.physics.newDistanceJoint)"
- name: love.physics.newEdgeShape
  id: love.physics.newedgeshape
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.physics.newEdgeShape\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new [EdgeShape](edgeshape \"EdgeShape\").\n\n## Function\n\n### Synopsis\n\n``` lua\nshape = love.physics.newEdgeShape( x1, y1, x2, y2 )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x1`  \nThe x position of the first point.\n\n[`number`](number \"number\")` y1`  \nThe y position of the first point.\n\n[`number`](number \"number\")` x2`  \nThe x position of the second point.\n\n[`number`](number \"number\")` y2`  \nThe y position of the second point.\n\n### Returns\n\n[`EdgeShape`](edgeshape \"EdgeShape\")` shape`  \nThe new shape.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [EdgeShape](edgeshape \"EdgeShape\")\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newEdgeShape](https://love2d.org/wiki/love.physics.newEdgeShape)"
- name: love.physics.newFixture
  id: love.physics.newfixture
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.physics.newFixture\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nCreates and attaches a [Fixture](fixture \"Fixture\") to a body.\n\nNote that the [Shape](shape \"Shape\") object is copied rather than kept as a reference when the Fixture is created. To get the Shape object that the Fixture owns, use [Fixture:getShape](fixture-getshape \"Fixture:getShape\").\n\n## Function\n\n### Synopsis\n\n``` lua\nfixture = love.physics.newFixture( body, shape, density )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body`  \nThe body which gets the fixture attached.\n\n[`Shape`](shape \"Shape\")` shape`  \nThe shape to be copied to the fixture.\n\n[`number`](number \"number\")` density (1)`  \nThe density of the fixture.\n\n### Returns\n\n[`Fixture`](fixture \"Fixture\")` fixture`  \nThe new fixture.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [Fixture](fixture \"Fixture\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newFixture](https://love2d.org/wiki/love.physics.newFixture)"
- name: love.physics.newFrictionJoint
  id: love.physics.newfrictionjoint
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.physics.newFrictionJoint\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nCreate a friction joint between two bodies. A [FrictionJoint](frictionjoint \"FrictionJoint\") applies friction to a body.\n\n## Function\n\n### Synopsis\n\n``` lua\njoint = love.physics.newFrictionJoint( body1, body2, x, y, collideConnected )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to attach to the joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to attach to the joint.\n\n[`number`](number \"number\")` x`  \nThe x position of the anchor point.\n\n[`number`](number \"number\")` y`  \nThe y position of the anchor point.\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`FrictionJoint`](frictionjoint \"FrictionJoint\")` joint`  \nThe new FrictionJoint.\n\n## Function\n\n### Synopsis\n\n``` lua\njoint = love.physics.newFrictionJoint( body1, body2, x1, y1, x2, y2, collideConnected )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to attach to the joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to attach to the joint.\n\n[`number`](number \"number\")` x1`  \nThe x position of the first anchor point.\n\n[`number`](number \"number\")` y1`  \nThe y position of the first anchor point.\n\n[`number`](number \"number\")` x2`  \nThe x position of the second anchor point.\n\n[`number`](number \"number\")` y2`  \nThe y position of the second anchor point.\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`FrictionJoint`](frictionjoint \"FrictionJoint\")` joint`  \nThe new FrictionJoint.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [FrictionJoint](frictionjoint \"FrictionJoint\")\n- [Joint](joint \"Joint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newFrictionJoint](https://love2d.org/wiki/love.physics.newFrictionJoint)"
- name: love.physics.newGearJoint
  id: love.physics.newgearjoint
  summary: Create a GearJoint connecting two Joints
  description: "# love.physics.newGearJoint\n\nCreate a [GearJoint](gearjoint \"GearJoint\") connecting two Joints.\n\nThe gear joint connects two joints that must be either [prismatic](prismaticjoint \"PrismaticJoint\") or [revolute](revolutejoint \"RevoluteJoint\") joints. Using this joint requires that the joints it uses connect their respective bodies to the ground and have the ground as the first body. When destroying the bodies and joints you must make sure you destroy the gear joint before the other joints.\n\nThe gear joint has a ratio the determines how the angular or distance values of the connected joints relate to each other. The formula `coordinate1 + ratio * coordinate2` always has a constant value that is set when the gear joint is created.\n\n[](https://love2d.org/wiki/File:physicsJointGear.png)\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newGearJoint( joint1, joint2, ratio, collideConnected )\n```\n\n### Arguments\n\n[`Joint`](joint \"Joint\")` joint1`  \nThe first joint to connect with a gear joint.\n\n[`Joint`](joint \"Joint\")` joint2`  \nThe second joint to connect with a gear joint.\n\n[`number`](number \"number\")` ratio (1)`  \nThe gear ratio.\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`GearJoint`](gearjoint \"GearJoint\")` joint`  \nThe new gear joint.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newGearJoint( joint1, joint2, ratio )\n```\n\n### Arguments\n\n[`Joint`](joint \"Joint\")` joint1`  \nThe first joint to connect with a gear joint.\n\n[`Joint`](joint \"Joint\")` joint2`  \nThe second joint to connect with a gear joint.\n\n[`number`](number \"number\")` ratio (1)`  \nThe gear ratio.\n\n### Returns\n\n[`GearJoint`](gearjoint \"GearJoint\")` joint`  \nThe new gear joint.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [GearJoint](gearjoint \"GearJoint\")\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newGearJoint](https://love2d.org/wiki/love.physics.newGearJoint)"
- name: love.physics.newMotorJoint
  id: love.physics.newmotorjoint
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.physics.newMotorJoint\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a joint between two bodies which controls the relative motion between them.\n\nPosition and rotation offsets can be specified once the MotorJoint has been created, as well as the maximum motor force and torque that will be be applied to reach the target offsets.\n\n## Function\n\n### Synopsis\n\n``` lua\njoint = love.physics.newMotorJoint( body1, body2, correctionFactor )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to attach to the joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to attach to the joint.\n\n[`number`](number \"number\")` correctionFactor (0.3)`  \nThe joint's initial position correction factor, in the range of \\[0, 1\\].\n\n### Returns\n\n[`MotorJoint`](motorjoint \"MotorJoint\")` joint`  \nThe new MotorJoint.\n\n## Function\n\n**Available since LÖVE [0.10.1](https://love2d.org/wiki/0.10.1 \"0.10.1\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newMotorJoint( body1, body2, correctionFactor, collideConnected )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to attach to the joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to attach to the joint.\n\n[`number`](number \"number\")` correctionFactor (0.3)`  \nThe joint's initial position correction factor, in the range of \\[0, 1\\].\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`MotorJoint`](motorjoint \"MotorJoint\")` joint`  \nThe new MotorJoint.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [MotorJoint](motorjoint \"MotorJoint\")\n- [Joint](joint \"Joint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newMotorJoint](https://love2d.org/wiki/love.physics.newMotorJoint)"
- name: love.physics.newMouseJoint
  id: love.physics.newmousejoint
  summary: Create a joint between a body and the mouse
  description: "# love.physics.newMouseJoint\n\nCreate a joint between a body and the mouse.\n\nThis joint actually connects the body to a fixed point in the world. To make it follow the mouse, the fixed point must be updated every timestep (example below).\n\nThe advantage of using a MouseJoint instead of just changing a body position directly is that collisions and reactions to other joints are handled by the physics engine.\n\n## Function\n\n### Synopsis\n\n``` lua\njoint = love.physics.newMouseJoint( body, x, y )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body`  \nThe body to attach to the mouse.\n\n[`number`](number \"number\")` x`  \nThe x position of the connecting point.\n\n[`number`](number \"number\")` y`  \nThe y position of the connecting point.\n\n### Returns\n\n[`MouseJoint`](mousejoint \"MouseJoint\")` joint`  \nThe new mouse joint.\n\n## Examples\n\n``` lua\nfunction love.load()\n    world = love.physics.newWorld(0, 0)\n    body = love.physics.newBody(world, love.mouse.getX(), love.mouse.getY(), \"dynamic\")\n    shape = love.physics.newCircleShape(20)\n    fixture = love.physics.newFixture(body, shape)\n    joint = love.physics.newMouseJoint(body, love.mouse.getPosition())\nend\n \nfunction love.draw()\n    love.graphics.circle(\"fill\", body:getX(), body:getY(), shape:getRadius())\nend\n \nfunction love.update(dt)\n    joint:setTarget(love.mouse.getPosition())\n    world:update(dt)\nend\n```\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [MouseJoint](mousejoint \"MouseJoint\")\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newMouseJoint](https://love2d.org/wiki/love.physics.newMouseJoint)"
- name: love.physics.newPolygonShape
  id: love.physics.newpolygonshape
  summary: Creates a new PolygonShape
  description: "# love.physics.newPolygonShape\n\nCreates a new [PolygonShape](polygonshape \"PolygonShape\").\n\nThis shape can have 8 vertices at most, and must form a convex shape.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nshape = love.physics.newPolygonShape( x1, y1, x2, y2, x3, y3, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x1`  \nThe x position of the first point.\n\n[`number`](number \"number\")` y1`  \nThe y position of the first point.\n\n[`number`](number \"number\")` x2`  \nThe x position of the second point.\n\n[`number`](number \"number\")` y2`  \nThe y position of the second point.\n\n[`number`](number \"number\")` x3`  \nThe x position of the third point.\n\n[`number`](number \"number\")` y3`  \nThe y position of the third point.\n\n[`number`](number \"number\")` ...`  \nYou can continue passing more point positions to create the PolygonShape.\n\n### Returns\n\n[`PolygonShape`](polygonshape \"PolygonShape\")` shape`  \nA new PolygonShape.\n\n## Function\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nshape = love.physics.newPolygonShape( vertices )\n```\n\n### Arguments\n\n[`table`](table \"table\")` vertices`  \nA list of vertices to construct the polygon, in the form of `{x1, y1, x2, y2, x3, y3, ...}`.\n\n### Returns\n\n[`PolygonShape`](polygonshape \"PolygonShape\")` shape`  \nA new PolygonShape.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nshape = love.physics.newPolygonShape( body, ... )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body`  \nThe body to attach the shape to.\n\n[`numbers`](https://love2d.org/w/index.php?title=numbers&action=edit&redlink=1 \"numbers (page does not exist)\")` ...`  \nVertices of the polygon.\n\n### Returns\n\n[`PolygonShape`](polygonshape \"PolygonShape\")` shape`  \nA new PolygonShape.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [PolygonShape](polygonshape \"PolygonShape\")\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newPolygonShape](https://love2d.org/wiki/love.physics.newPolygonShape)"
- name: love.physics.newPrismaticJoint
  id: love.physics.newprismaticjoint
  summary: Creates a PrismaticJoint between two bodies
  description: "# love.physics.newPrismaticJoint\n\nCreates a [PrismaticJoint](prismaticjoint \"PrismaticJoint\") between two bodies.\n\nA prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a [revolute](revolutejoint \"RevoluteJoint\") joint, but with translation and force substituted for angle and torque.\n\n[](https://love2d.org/wiki/File:physicsJointPrismatic.png)\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newPrismaticJoint( body1, body2, x, y, ax, ay, collideConnected )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to connect with a prismatic joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to connect with a prismatic joint.\n\n[`number`](number \"number\")` x`  \nThe x coordinate of the anchor point.\n\n[`number`](number \"number\")` y`  \nThe y coordinate of the anchor point.\n\n[`number`](number \"number\")` ax`  \nThe x coordinate of the axis vector.\n\n[`number`](number \"number\")` ay`  \nThe y coordinate of the axis vector.\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`PrismaticJoint`](prismaticjoint \"PrismaticJoint\")` joint`  \nThe new prismatic joint.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newPrismaticJoint( body1, body2, x1, y1, x2, y2, ax, ay, collideConnected )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to connect with a prismatic joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to connect with a prismatic joint.\n\n[`number`](number \"number\")` x1`  \nThe x coordinate of the first anchor point.\n\n[`number`](number \"number\")` y1`  \nThe y coordinate of the first anchor point.\n\n[`number`](number \"number\")` x2`  \nThe x coordinate of the second anchor point.\n\n[`number`](number \"number\")` y2`  \nThe y coordinate of the second anchor point.\n\n[`number`](number \"number\")` ax`  \nThe x coordinate of the axis unit vector.\n\n[`number`](number \"number\")` ay`  \nThe y coordinate of the axis unit vector.\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`PrismaticJoint`](prismaticjoint \"PrismaticJoint\")` joint`  \nThe new prismatic joint.\n\n## Function\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newPrismaticJoint( body1, body2, x1, y1, x2, y2, ax, ay, collideConnected, referenceAngle )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to connect with a prismatic joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to connect with a prismatic joint.\n\n[`number`](number \"number\")` x1`  \nThe x coordinate of the first anchor point.\n\n[`number`](number \"number\")` y1`  \nThe y coordinate of the first anchor point.\n\n[`number`](number \"number\")` x2`  \nThe x coordinate of the second anchor point.\n\n[`number`](number \"number\")` y2`  \nThe y coordinate of the second anchor point.\n\n[`number`](number \"number\")` ax`  \nThe x coordinate of the axis unit vector.\n\n[`number`](number \"number\")` ay`  \nThe y coordinate of the axis unit vector.\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n[`number`](number \"number\")` referenceAngle (0)`  \nThe reference angle between body1 and body2, in radians.\n\n### Returns\n\n[`PrismaticJoint`](prismaticjoint \"PrismaticJoint\")` joint`  \nThe new prismatic joint.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newPrismaticJoint( body1, body2, x, y, ax, ay )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to connect with a prismatic joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to connect with a prismatic joint.\n\n[`number`](number \"number\")` x`  \nThe x coordinate of the anchor point.\n\n[`number`](number \"number\")` y`  \nThe y coordinate of the anchor point.\n\n[`number`](number \"number\")` ax`  \nThe x coordinate of the axis unit vector.\n\n[`number`](number \"number\")` ay`  \nThe y coordinate of the axis unit vector.\n\n### Returns\n\n[`PrismaticJoint`](prismaticjoint \"PrismaticJoint\")` joint`  \nThe new prismatic joint.\n\n  \n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newPrismaticJoint](https://love2d.org/wiki/love.physics.newPrismaticJoint)"
- name: love.physics.newPulleyJoint
  id: love.physics.newpulleyjoint
  summary: Creates a PulleyJoint to join two bodies to each other and the ground
  description: "# love.physics.newPulleyJoint\n\nCreates a [PulleyJoint](pulleyjoint \"PulleyJoint\") to join two bodies to each other and the ground.\n\nThe pulley joint simulates a pulley with an optional block and tackle. If the ratio parameter has a value different from one, then the simulated rope extends faster on one side than the other. In a pulley joint the total length of the simulated rope is the constant `length1 + ratio * length2`, which is set when the pulley joint is created.\n\nPulley joints can behave unpredictably if one side is fully extended. It is recommended that the method [setMaxLengths](pulleyjoint-setmaxlengths \"PulleyJoint:setMaxLengths\") be used to constrain the maximum lengths each side can attain.\n\n[](https://love2d.org/wiki/File:physicsJointPulley.png)\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newPulleyJoint( body1, body2, gx1, gy1, gx2, gy2, x1, y1, x2, y2, ratio, collideConnected )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to connect with a pulley joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to connect with a pulley joint.\n\n[`number`](number \"number\")` gx1`  \nThe x coordinate of the first body's ground anchor.\n\n[`number`](number \"number\")` gy1`  \nThe y coordinate of the first body's ground anchor.\n\n[`number`](number \"number\")` gx2`  \nThe x coordinate of the second body's ground anchor.\n\n[`number`](number \"number\")` gy2`  \nThe y coordinate of the second body's ground anchor.\n\n[`number`](number \"number\")` x1`  \nThe x coordinate of the pulley joint anchor in the first body.\n\n[`number`](number \"number\")` y1`  \nThe y coordinate of the pulley joint anchor in the first body.\n\n[`number`](number \"number\")` x2`  \nThe x coordinate of the pulley joint anchor in the second body.\n\n[`number`](number \"number\")` y2`  \nThe y coordinate of the pulley joint anchor in the second body.\n\n[`number`](number \"number\")` ratio (1)`  \nThe joint ratio.\n\n[`boolean`](boolean \"boolean\")` collideConnected (true)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`PulleyJoint`](pulleyjoint \"PulleyJoint\")` joint`  \nThe new pulley joint.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newPulleyJoint( body1, body2, gx1, gy1, gx2, gy2, x1, y1, x2, y2, ratio )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to connect with a pulley joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to connect with a pulley joint.\n\n[`number`](number \"number\")` gx1`  \nThe x coordinate of the first body's ground anchor.\n\n[`number`](number \"number\")` gy1`  \nThe y coordinate of the first body's ground anchor.\n\n[`number`](number \"number\")` gx2`  \nThe x coordinate of the second body's ground anchor.\n\n[`number`](number \"number\")` gy2`  \nThe y coordinate of the second body's ground anchor.\n\n[`number`](number \"number\")` x1`  \nThe x coordinate of the pulley joint anchor in the first body.\n\n[`number`](number \"number\")` y1`  \nThe y coordinate of the pulley joint anchor in the first body.\n\n[`number`](number \"number\")` x2`  \nThe x coordinate of the pulley joint anchor in the second body.\n\n[`number`](number \"number\")` y2`  \nThe y coordinate of the pulley joint anchor in the second body.\n\n[`number`](number \"number\")` ratio (1)`  \nThe joint ratio.\n\n### Returns\n\n[`PulleyJoint`](pulleyjoint \"PulleyJoint\")` joint`  \nThe new pulley joint.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [PulleyJoint](pulleyjoint \"PulleyJoint\")\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newPulleyJoint](https://love2d.org/wiki/love.physics.newPulleyJoint)"
- name: love.physics.newRectangleShape
  id: love.physics.newrectangleshape
  summary: Shorthand for creating rectangular PolygonShapes
  description: "# love.physics.newRectangleShape\n\nShorthand for creating rectangular [PolygonShapes](polygonshape \"PolygonShape\").\n\nBy default, the local origin is located at the **center** of the rectangle as opposed to the top left for graphics.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThese variants are not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nshape = love.physics.newRectangleShape( width, height )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nThe width of the rectangle.\n\n[`number`](number \"number\")` height`  \nThe height of the rectangle.\n\n### Returns\n\n[`PolygonShape`](polygonshape \"PolygonShape\")` shape`  \nA new PolygonShape.\n\n## Function\n\n### Synopsis\n\n``` lua\nshape = love.physics.newRectangleShape( x, y, width, height, angle )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe offset along the x-axis.\n\n[`number`](number \"number\")` y`  \nThe offset along the y-axis.\n\n[`number`](number \"number\")` width`  \nThe width of the rectangle.\n\n[`number`](number \"number\")` height`  \nThe height of the rectangle.\n\n[`number`](number \"number\")` angle (0)`  \nThe initial angle of the rectangle.\n\n### Returns\n\n[`PolygonShape`](polygonshape \"PolygonShape\")` shape`  \nA new PolygonShape.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\ns = love.physics.newRectangleShape( body, x, y, width, height, angle )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body`  \nThe Body to attach the Shape to.\n\n[`number`](number \"number\")` x`  \nThe offset along the x-axis.\n\n[`number`](number \"number\")` y`  \nThe offset along the y-axis.\n\n[`number`](number \"number\")` width`  \nThe width of the rectangle.\n\n[`number`](number \"number\")` height`  \nThe height of the rectangle.\n\n[`number`](number \"number\")` angle (0)`  \nThe initial angle of the rectangle.\n\n### Returns\n\n[`PolygonShape`](polygonshape \"PolygonShape\")` s`  \nA new PolygonShape.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [PolygonShape](polygonshape \"PolygonShape\")\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newRectangleShape](https://love2d.org/wiki/love.physics.newRectangleShape)"
- name: love.physics.newRevoluteJoint
  id: love.physics.newrevolutejoint
  summary: Creates a pivot joint between two bodies
  description: "# love.physics.newRevoluteJoint\n\nCreates a pivot joint between two bodies.\n\nThis joint connects two bodies to a point around which they can pivot.\n\n[](https://love2d.org/wiki/File:physicsJointRevolute.png)\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newRevoluteJoint( body1, body2, x, y, collideConnected )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body.\n\n[`Body`](body \"Body\")` body2`  \nThe second body.\n\n[`number`](number \"number\")` x`  \nThe x position of the connecting point.\n\n[`number`](number \"number\")` y`  \nThe y position of the connecting point.\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`RevoluteJoint`](revolutejoint \"RevoluteJoint\")` joint`  \nThe new revolute joint.\n\n## Function\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newRevoluteJoint( body1, body2, x1, y1, x2, y2, collideConnected, referenceAngle )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body.\n\n[`Body`](body \"Body\")` body2`  \nThe second body.\n\n[`number`](number \"number\")` x1`  \nThe x position of the first connecting point.\n\n[`number`](number \"number\")` y1`  \nThe y position of the first connecting point.\n\n[`number`](number \"number\")` x2`  \nThe x position of the second connecting point.\n\n[`number`](number \"number\")` y2`  \nThe y position of the second connecting point.\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n[`number`](number \"number\")` referenceAngle (0)`  \nThe reference angle between body1 and body2, in radians.\n\n### Returns\n\n[`RevoluteJoint`](revolutejoint \"RevoluteJoint\")` joint`  \nThe new revolute joint.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\njoint = love.physics.newRevoluteJoint( body1, body2, x, y )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to connect with a Revolute Joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to connect with a Revolute Joint.\n\n[`number`](number \"number\")` x`  \nThe x position of the connecting point.\n\n[`number`](number \"number\")` y`  \nThe y position of the connecting point.\n\n### Returns\n\n[`RevoluteJoint`](revolutejoint \"RevoluteJoint\")` joint`  \nThe new revolute joint.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newRevoluteJoint](https://love2d.org/wiki/love.physics.newRevoluteJoint)"
- name: love.physics.newRopeJoint
  id: love.physics.newropejoint
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.physics.newRopeJoint\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a joint between two bodies. Its only function is enforcing a max distance between these bodies.\n\nThere is a bug in version 0.8.0 where the coordinates of the anchors are divided by the number from [love.physics.getMeter](love.physics.getmeter \"love.physics.getMeter\"). As a workaround, multiply your anchor coordinates with that number and it should work like expected.\n\n## Function\n\n### Synopsis\n\n``` lua\njoint = love.physics.newRopeJoint( body1, body2, x1, y1, x2, y2, maxLength, collideConnected )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to attach to the joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to attach to the joint.\n\n[`number`](number \"number\")` x1`  \nThe x position of the first anchor point.\n\n[`number`](number \"number\")` y1`  \nThe y position of the first anchor point.\n\n[`number`](number \"number\")` x2`  \nThe x position of the second anchor point.\n\n[`number`](number \"number\")` y2`  \nThe y position of the second anchor point.\n\n[`number`](number \"number\")` maxLength`  \nThe maximum distance for the bodies.\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`RopeJoint`](ropejoint \"RopeJoint\")` joint`  \nThe new RopeJoint.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [RopeJoint](ropejoint \"RopeJoint\")\n- [Joint](joint \"Joint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newRopeJoint](https://love2d.org/wiki/love.physics.newRopeJoint)"
- name: love.physics.newWeldJoint
  id: love.physics.newweldjoint
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.physics.newWeldJoint\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a constraint joint between two bodies. A [WeldJoint](weldjoint \"WeldJoint\") essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver.\n\nMaking changes to a [World](world \"World\") is not allowed inside of the [beginContact](https://love2d.org/w/index.php?title=beginContact&action=edit&redlink=1 \"beginContact (page does not exist)\"), [endContact](https://love2d.org/w/index.php?title=endContact&action=edit&redlink=1 \"endContact (page does not exist)\"), [preSolve](https://love2d.org/w/index.php?title=preSolve&action=edit&redlink=1 \"preSolve (page does not exist)\"), and [postSolve](https://love2d.org/w/index.php?title=postSolve&action=edit&redlink=1 \"postSolve (page does not exist)\") callback functions, as BOX2D locks the world during these callbacks.\n\n## Function\n\n### Synopsis\n\n``` lua\njoint = love.physics.newWeldJoint( body1, body2, x, y, collideConnected )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to attach to the joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to attach to the joint.\n\n[`number`](number \"number\")` x`  \nThe x position of the anchor point (world space).\n\n[`number`](number \"number\")` y`  \nThe y position of the anchor point (world space).\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`WeldJoint`](weldjoint \"WeldJoint\")` joint`  \nThe new WeldJoint.\n\n## Function\n\n### Synopsis\n\n``` lua\njoint = love.physics.newWeldJoint( body1, body2, x1, y1, x2, y2, collideConnected )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to attach to the joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to attach to the joint.\n\n[`number`](number \"number\")` x1`  \nThe x position of the first anchor point (world space).\n\n[`number`](number \"number\")` y1`  \nThe y position of the first anchor point (world space).\n\n[`number`](number \"number\")` x2`  \nThe x position of the second anchor point (world space).\n\n[`number`](number \"number\")` y2`  \nThe y position of the second anchor point (world space).\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`WeldJoint`](weldjoint \"WeldJoint\")` joint`  \nThe new WeldJoint.\n\n## Function\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis variant is not supported in earlier versions.\n\n  \n\n### Synopsis\n\n``` lua\njoint = love.physics.newWeldJoint( body1, body2, x1, y1, x2, y2, collideConnected, referenceAngle )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body to attach to the joint.\n\n[`Body`](body \"Body\")` body2`  \nThe second body to attach to the joint.\n\n[`number`](number \"number\")` x1`  \nThe x position of the first anchor point (world space).\n\n[`number`](number \"number\")` y1`  \nThe y position of the first anchor point (world space).\n\n[`number`](number \"number\")` x2`  \nThe x position of the second anchor point (world space).\n\n[`number`](number \"number\")` y2`  \nThe y position of the second anchor point (world space).\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n[`number`](number \"number\")` referenceAngle (0)`  \nThe reference angle between body1 and body2, in radians.\n\n### Returns\n\n[`WeldJoint`](weldjoint \"WeldJoint\")` joint`  \nThe new WeldJoint.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [WeldJoint](weldjoint \"WeldJoint\")\n- [Joint](joint \"Joint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newWeldJoint](https://love2d.org/wiki/love.physics.newWeldJoint)"
- name: love.physics.newWheelJoint
  id: love.physics.newwheeljoint
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.physics.newWheelJoint\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a wheel joint.\n\n[](https://love2d.org/wiki/File:physicsJointWheel.png)\n\n## Function\n\n### Synopsis\n\n``` lua\njoint = love.physics.newWheelJoint( body1, body2, x, y, ax, ay, collideConnected )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body.\n\n[`Body`](body \"Body\")` body2`  \nThe second body.\n\n[`number`](number \"number\")` x`  \nThe x position of the anchor point.\n\n[`number`](number \"number\")` y`  \nThe y position of the anchor point.\n\n[`number`](number \"number\")` ax`  \nThe x position of the axis unit vector.\n\n[`number`](number \"number\")` ay`  \nThe y position of the axis unit vector.\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`WheelJoint`](wheeljoint \"WheelJoint\")` joint`  \nThe new WheelJoint.\n\n## Function\n\n### Synopsis\n\n``` lua\njoint = love.physics.newWheelJoint( body1, body2, x1, y1, x2, y2, ax, ay, collideConnected )\n```\n\n### Arguments\n\n[`Body`](body \"Body\")` body1`  \nThe first body.\n\n[`Body`](body \"Body\")` body2`  \nThe second body.\n\n[`number`](number \"number\")` x1`  \nThe x position of the first anchor point.\n\n[`number`](number \"number\")` y1`  \nThe y position of the first anchor point.\n\n[`number`](number \"number\")` x2`  \nThe x position of the second anchor point.\n\n[`number`](number \"number\")` y2`  \nThe y position of the second anchor point.\n\n[`number`](number \"number\")` ax`  \nThe x position of the axis unit vector.\n\n[`number`](number \"number\")` ay`  \nThe y position of the axis unit vector.\n\n[`boolean`](boolean \"boolean\")` collideConnected (false)`  \nSpecifies whether the two bodies should collide with each other.\n\n### Returns\n\n[`WheelJoint`](wheeljoint \"WheelJoint\")` joint`  \nThe new WheelJoint.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [WheelJoint](wheeljoint \"WheelJoint\")\n- [Joint](joint \"Joint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newWheelJoint](https://love2d.org/wiki/love.physics.newWheelJoint)"
- name: love.physics.newWorld
  id: love.physics.newworld
  summary: Creates a new World
  description: "# love.physics.newWorld\n\nCreates a new World.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nworld = love.physics.newWorld( xg, yg, sleep )\n```\n\n### Arguments\n\n[`number`](number \"number\")` xg (0)`  \nThe x component of gravity.\n\n[`number`](number \"number\")` yg (0)`  \nThe y component of gravity.\n\n[`boolean`](boolean \"boolean\")` sleep (true)`  \nWhether the bodies in this world are allowed to sleep.\n\n### Returns\n\n[`World`](world \"World\")` world`  \nA brave new World.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\nThis function creates a new World with the given size, no gravity and sleeping turned on.\n\n### Synopsis\n\n``` lua\nworld = love.physics.newWorld( x1, y1, x2, y2 )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x1`  \nThe smallest x position in the world.\n\n[`number`](number \"number\")` y1`  \nThe smallest y position in the world.\n\n[`number`](number \"number\")` x2`  \nThe largest x position in the world.\n\n[`number`](number \"number\")` y2`  \nThe largest y position in the world.\n\n### Returns\n\n[`World`](world \"World\")` world`  \nA World object.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nworld = love.physics.newWorld( x1, y1, x2, y2, xg, yg, sleep )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x1`  \nThe smallest x position in the world.\n\n[`number`](number \"number\")` y1`  \nThe smallest y position in the world.\n\n[`number`](number \"number\")` x2`  \nThe largest x position in the world.\n\n[`number`](number \"number\")` y2`  \nThe largest y position in the world.\n\n[`number`](number \"number\")` xg`  \nThe x component of gravity.\n\n[`number`](number \"number\")` yg`  \nThe y component of gravity.\n\n[`boolean`](boolean \"boolean\")` sleep (true)`  \nWhether sleep is possible in the world.\n\n### Returns\n\n[`World`](world \"World\")` world`  \nA brave new World.\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.newWorld](https://love2d.org/wiki/love.physics.newWorld)"
- name: love.physics.setMeter
  id: love.physics.setmeter
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# love.physics.setMeter\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nSets the pixels to meter scale factor.\n\nAll coordinates in the physics module are divided by this number and converted to meters, and it creates a convenient way to draw the objects directly to the screen without the need for graphics transformations.\n\nIt is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters. The default meter scale is 30.\n\nlove.physics.setMeter does not apply retroactively to created objects. Created objects retain their meter coordinates but the scale factor will affect their pixel coordinates. It is recommended to call this function before any further use of the [love.physics](love.physics \"love.physics\") module\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.physics.setMeter( scale )\n```\n\n### Arguments\n\n[`number`](number \"number\")` scale`  \nThe scale factor as an integer.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Note that the body's coordinates in meters remain unchanged\n\n``` lua\nlove.physics.setMeter(30) -- set 30 pixels/meter\nbody = love.physics.newBody(world, 300, 300, \"dynamic\") -- place the body at pixel coordinates (300,300) or in meter coordinates (10,10)\nlove.physics.setMeter(10) -- set 10 pixels/meter\nbody:getPosition() -- returns pixel coordinates (100,100)\n```\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [love.physics.getMeter](love.physics.getmeter \"love.physics.getMeter\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.physics.setMeter](https://love2d.org/wiki/love.physics.setMeter)"
- name: love.quit
  id: love.quit
  summary: Available since LÖVE 0.7.0 This callback is not supported in earlier versions
  description: "# love.quit\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis callback is not supported in earlier versions.\n\nCallback function triggered when the game is closed.\n\n## Function\n\n### Synopsis\n\n``` lua\nr = love.quit( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` r`  \nAbort quitting. If true, do not close the game.\n\n## Example\n\nThis example shows how the return value of **love.quit** can be used to stop the closing of the game.\n\n``` lua\nlocal quit = true\nfunction love.quit()\n    if quit then\n        print(\"We are not ready to quit yet!\")\n        quit = not quit\n    else\n        print(\"Thanks for playing. Please play again soon!\")\n        return quit\n    end\n    return true\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n- [love.event.quit](love.event.quit \"love.event.quit\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.quit](https://love2d.org/wiki/love.quit)"
- name: love.releaseerrhand
  id: love.releaseerrhand
  summary: Removed in LÖVE 0.9.0 This callback is not supported in that and later versions
  description: "# love.releaseerrhand\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis callback is not supported in that and later versions.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.releaseerrhand( msg )\n```\n\n### Arguments\n\n[`string`](string \"string\")` msg`  \nThe error message.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### The default function used if you don't supply your own.\n\n``` lua\nfunction love.releaseerrhand(msg)\n    print(\"An error has occured, the game has been stopped.\")\n \n    if not love.graphics or not love.event or not love.graphics.isCreated() then\n        return\n    end\n \n    love.graphics.setCanvas()\n    love.graphics.setPixelEffect()\n \n    -- Load.\n    if love.audio then love.audio.stop() end\n    love.graphics.reset()\n    love.graphics.setBackgroundColor(89, 157, 220)\n    local font = love.graphics.newFont(14)\n    love.graphics.setFont(font)\n \n    love.graphics.setColor(255, 255, 255, 255)\n \n    love.graphics.clear()\n \n    local err = {}\n \n    p = string.format(\"An error has occured that caused %s to stop.\\nYou can notify %s about this%s.\", love._release.title or \"this game\", love._release.author or \"the author\", love._release.url and \" at \" .. love._release.url or \"\")\n \n    local function draw()\n        love.graphics.clear()\n        love.graphics.printf(p, 70, 70, love.graphics.getWidth() - 70)\n        love.graphics.present()\n    end\n \n    draw()\n \n    local e, a, b, c\n    while true do\n        e, a, b, c = love.event.wait()\n \n        if e == \"quit\" then\n            return\n        end\n        if e == \"keypressed\" and a == \"escape\" then\n            return\n        end\n \n        draw()\n \n    end\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.releaseerrhand](https://love2d.org/wiki/love.releaseerrhand)"
- name: love.resize
  id: love.resize
  summary: Available since LÖVE 0.9.0 This callback is not supported in earlier versions
  description: "# love.resize\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis callback is not supported in earlier versions.\n\nCalled when the window is resized, for example if the user resizes the window, or if `love.window.setMode` is called with an unsupported width or height in fullscreen and the window chooses the closest appropriate size.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.resize( w, h )\n```\n\n### Arguments\n\n[`number`](number \"number\")` w`  \nThe new width.\n\n[`number`](number \"number\")` h`  \nThe new height.\n\n### Returns\n\nNothing.\n\n## Notes\n\nCalls to `love.window.setMode` will **only** trigger this event if the width or height of the window after the call doesn't match the requested width and height. This can happen if a fullscreen mode is requested which doesn't match any supported mode, or if the fullscreen type is ['desktop'](fullscreentype \"FullscreenType\") and the requested width or height don't match the desktop resolution.\n\nSince [11.0](https://love2d.org/wiki/11.0 \"11.0\"), this function returns width and height in DPI-scaled units rather than pixels.\n\n## Example\n\n``` lua\nfunction love.resize(w, h)\n  print((\"Window resized to width: %d and height: %d.\"):format(w, h))\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n- [love.window.setFullscreen](love.window.setfullscreen \"love.window.setFullscreen\")\n- [love.conf](love.conf \"love.conf\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.resize](https://love2d.org/wiki/love.resize)"
- name: love.run
  id: love.run
  summary: The main function, containing the main loop
  description: "# love.run\n\nThe main function, containing the main loop. A sensible default is used when left out.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nmainLoop = love.run ( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`function`](function \"function\")` mainLoop`  \nFunction which handles one frame, including events and rendering, when called.\n\n## Function\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nlove.run( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### The default function for [11.0](https://love2d.org/wiki/11.0 \"11.0\"), used if you don't supply your own.\n\n``` lua\nfunction love.run()\n    if love.load then love.load(love.arg.parseGameArguments(arg), arg) end\n \n    -- We don't want the first frame's dt to include time taken by love.load.\n    if love.timer then love.timer.step() end\n \n    local dt = 0\n \n    -- Main loop time.\n    return function()\n        -- Process events.\n        if love.event then\n            love.event.pump()\n            for name, a,b,c,d,e,f in love.event.poll() do\n                if name == \"quit\" then\n                    if not love.quit or not love.quit() then\n                        return a or 0\n                    end\n                end\n                love.handlers[name](a,b,c,d,e,f)\n            end\n        end\n \n        -- Update dt, as we'll be passing it to update\n        if love.timer then dt = love.timer.step() end\n \n        -- Call update and draw\n        if love.update then love.update(dt) end -- will pass 0 if love.timer is disabled\n \n        if love.graphics and love.graphics.isActive() then\n            love.graphics.origin()\n            love.graphics.clear(love.graphics.getBackgroundColor())\n \n            if love.draw then love.draw() end\n \n            love.graphics.present()\n        end\n \n        if love.timer then love.timer.sleep(0.001) end\n    end\nend\n```\n\n### The default function for [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\"), [0.10.1](https://love2d.org/wiki/0.10.1 \"0.10.1\"), and [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\"), used if you don't supply your own.\n\n``` lua\nfunction love.run()\n \n    if love.math then\n        love.math.setRandomSeed(os.time())\n    end\n \n    if love.load then love.load(arg) end\n \n    -- We don't want the first frame's dt to include time taken by love.load.\n    if love.timer then love.timer.step() end\n \n    local dt = 0\n \n    -- Main loop time.\n    while true do\n        -- Process events.\n        if love.event then\n            love.event.pump()\n            for name, a,b,c,d,e,f in love.event.poll() do\n                if name == \"quit\" then\n                    if not love.quit or not love.quit() then\n                        return a\n                    end\n                end\n                love.handlers[name](a,b,c,d,e,f)\n            end\n        end\n \n        -- Update dt, as we'll be passing it to update\n        if love.timer then\n            love.timer.step()\n            dt = love.timer.getDelta()\n        end\n \n        -- Call update and draw\n        if love.update then love.update(dt) end -- will pass 0 if love.timer is disabled\n \n        if love.graphics and love.graphics.isActive() then\n            love.graphics.clear(love.graphics.getBackgroundColor())\n            love.graphics.origin()\n            if love.draw then love.draw() end\n            love.graphics.present()\n        end\n \n        if love.timer then love.timer.sleep(0.001) end\n    end\n \nend\n```\n\n### The default function for [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\"), [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\"), and [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\"), used if you don't supply your own.\n\n``` lua\nfunction love.run()\n \n    if love.math then\n        love.math.setRandomSeed(os.time())\n        for i=1,3 do love.math.random() end\n    end\n \n    if love.event then\n        love.event.pump()\n    end\n \n    if love.load then love.load(arg) end\n \n    -- We don't want the first frame's dt to include time taken by love.load.\n    if love.timer then love.timer.step() end\n \n    local dt = 0\n \n    -- Main loop time.\n    while true do\n        -- Process events.\n        if love.event then\n            love.event.pump()\n            for e,a,b,c,d in love.event.poll() do\n                if e == \"quit\" then\n                    if not love.quit or not love.quit() then\n                        if love.audio then\n                            love.audio.stop()\n                        end\n                        return\n                    end\n                end\n                love.handlers[e](a,b,c,d)\n            end\n        end\n \n        -- Update dt, as we'll be passing it to update\n        if love.timer then\n            love.timer.step()\n            dt = love.timer.getDelta()\n        end\n \n        -- Call update and draw\n        if love.update then love.update(dt) end -- will pass 0 if love.timer is disabled\n \n        if love.window and love.graphics and love.window.isCreated() then\n            love.graphics.clear()\n            love.graphics.origin()\n            if love.draw then love.draw() end\n            love.graphics.present()\n        end\n \n        if love.timer then love.timer.sleep(0.001) end\n    end\n \nend\n```\n\n### The default function for [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\"), used if you don't supply your own.\n\n``` lua\nfunction love.run()\n \n    math.randomseed(os.time())\n    math.random() math.random()\n \n    if love.load then love.load(arg) end\n \n    local dt = 0\n \n    -- Main loop time.\n    while true do\n        -- Process events.\n        if love.event then\n            love.event.pump()\n            for e,a,b,c,d in love.event.poll() do\n                if e == \"quit\" then\n                    if not love.quit or not love.quit() then\n                        if love.audio then\n                            love.audio.stop()\n                        end\n                        return\n                    end\n                end\n                love.handlers[e](a,b,c,d)\n            end\n        end\n \n        -- Update dt, as we'll be passing it to update\n        if love.timer then\n            love.timer.step()\n            dt = love.timer.getDelta()\n        end\n \n        -- Call update and draw\n        if love.update then love.update(dt) end -- will pass 0 if love.timer is disabled\n        if love.graphics then\n            love.graphics.clear()\n            if love.draw then love.draw() end\n        end\n \n        if love.timer then love.timer.sleep(0.001) end\n        if love.graphics then love.graphics.present() end\n    end\n \nend\n```\n\n### The default function for [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\"), [0.7.1](https://love2d.org/wiki/0.7.1 \"0.7.1\") and [0.7.2](https://love2d.org/wiki/0.7.2 \"0.7.2\"), used if you don't supply your own.\n\n``` lua\nfunction love.run()\n \n    if love.load then love.load(arg) end\n \n    local dt = 0\n \n    -- Main loop time.\n    while true do\n        if love.timer then\n            love.timer.step()\n            dt = love.timer.getDelta()\n        end\n        if love.update then love.update(dt) end -- will pass 0 if love.timer is disabled\n        if love.graphics then\n            love.graphics.clear()\n            if love.draw then love.draw() end\n        end\n \n        -- Process events.\n        if love.event then\n            for e,a,b,c in love.event.poll() do\n                if e == \"q\" then\n                    if not love.quit or not love.quit() then\n                        if love.audio then\n                            love.audio.stop()\n                        end\n                        return\n                    end\n                end\n                love.handlers[e](a,b,c)\n            end\n        end\n \n        if love.timer then love.timer.sleep(1) end\n        if love.graphics then love.graphics.present() end\n    end\n \nend\n```\n\n## Notes\n\n### Why is there a delay?\n\n``` lua\nif love.timer then love.timer.sleep(0.001) end\n```\n\nIt does a few useful things:\n\n- Limits FPS to 1000 if vsync isn't enabled.\n- Massively reduces CPU usage in many situations (especially with vsync disabled.)\n- Gives control back to the OS for a bit.\n\nFor more information see [https://love2d.org/forums/viewtopic.php?f=4&t=76998](https://love2d.org/forums/viewtopic.php?f=4&t=76998).\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.run](https://love2d.org/wiki/love.run)"
- name: love.setDeprecationOutput
  id: love.setdeprecationoutput
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.setDeprecationOutput\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nSets whether LÖVE displays warnings when using deprecated functionality. It is disabled by default in [fused mode](love.filesystem.isfused \"love.filesystem.isFused\"), and enabled by default otherwise.\n\nWhen deprecation output is enabled, the first use of a formally deprecated LÖVE API will show a message at the bottom of the screen for a short time, and print the message to the console.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.setDeprecationOutput( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nWhether to enable or disable deprecation output.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love](love \"love\")\n- [love.hasDeprecationOutput](love.hasdeprecationoutput \"love.hasDeprecationOutput\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.setDeprecationOutput](https://love2d.org/wiki/love.setDeprecationOutput)"
- name: love.sound
  id: love.sound
  summary: This module is responsible for decoding sound files
  description: "# love.sound\n\nThis module is responsible for decoding sound files. It can't play the sounds, see [love.audio](love.audio \"love.audio\") for that.\n\n## Types\n\n|                                    |                                                    |     |     |\n|------------------------------------|----------------------------------------------------|-----|-----|\n| [Decoder](decoder \"Decoder\")       | An object which can gradually decode a sound file. |     |     |\n| [SoundData](sounddata \"SoundData\") | Contains raw audio samples.                        |     |     |\n\n## Functions\n\n|                                                                              |                                                                              |     |     |\n|------------------------------------------------------------------------------|------------------------------------------------------------------------------|-----|-----|\n| [love.sound.newDecoder](love.sound.newdecoder \"love.sound.newDecoder\")       | Attempts to find a decoder for the encoded sound data in the specified file. |     |     |\n| [love.sound.newSoundData](love.sound.newsounddata \"love.sound.newSoundData\") | Creates a new SoundData.                                                     |     |     |\n\n  \n\n## See Also\n\n- [love](love \"love\")\n- [Audio Formats](audio_formats \"Audio Formats\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.sound](https://love2d.org/wiki/love.sound)"
- name: love.sound.newDecoder
  id: love.sound.newdecoder
  summary: Attempts to find a decoder for the encoded sound data in the specified file
  description: "# love.sound.newDecoder\n\nAttempts to find a decoder for the encoded sound data in the specified file.\n\n## Function\n\n### Synopsis\n\n``` lua\ndecoder = love.sound.newDecoder( file, buffer )\n```\n\n### Arguments\n\n[`File`](file \"File\")` file`  \nThe file with encoded sound data.\n\n[`number`](number \"number\")` buffer (2048)`  \nThe size of each decoded chunk, in bytes.\n\n### Returns\n\n[`Decoder`](decoder \"Decoder\")` decoder`  \nA new Decoder object.\n\n## Function\n\n### Synopsis\n\n``` lua\ndecoder = love.sound.newDecoder( filename, buffer )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filename of the file with encoded sound data.\n\n[`number`](number \"number\")` buffer (2048)`  \nThe size of each decoded chunk, in bytes.\n\n### Returns\n\n[`Decoder`](decoder \"Decoder\")` decoder`  \nA new Decoder object.\n\n## Function\n\n**Removed in LÖVE [0.7.1](https://love2d.org/wiki/0.7.1 \"0.7.1\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\ndecoder = love.sound.newDecoder( file, buffer, rate )\n```\n\n### Arguments\n\n[`File`](file \"File\")` file`  \nThe file with encoded sound data.\n\n[`number`](number \"number\")` buffer (2048)`  \nThe size of each decoded chunk, in bytes.\n\n[`number`](number \"number\")` rate (44100)`  \nSamples per second, or quality of the audio. Use either 44100 (good), 22050 (medium) or 11025 (poor).\n\n### Returns\n\n[`Decoder`](decoder \"Decoder\")` decoder`  \nA new Decoder object.\n\n## Function\n\n**Removed in LÖVE [0.7.1](https://love2d.org/wiki/0.7.1 \"0.7.1\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\ndecoder = love.sound.newDecoder( filename, buffer, rate )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe filename of the file with encoded sound data.\n\n[`number`](number \"number\")` buffer (2048)`  \nThe size of each decoded chunk, in bytes.\n\n[`number`](number \"number\")` rate (44100)`  \nSamples per second, or quality of the audio. Use either 44100 (good), 22050 (medium) or 11025 (poor).\n\n### Returns\n\n[`Decoder`](decoder \"Decoder\")` decoder`  \nA new Decoder object.\n\n## See Also\n\n- [love.sound](love.sound \"love.sound\")\n- [Decoder](decoder \"Decoder\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.sound.newDecoder](https://love2d.org/wiki/love.sound.newDecoder)"
- name: love.sound.newSoundData
  id: love.sound.newsounddata
  summary: Creates new SoundData from a filepath, File, or Decoder
  description: "# love.sound.newSoundData\n\nCreates new [SoundData](sounddata \"SoundData\") from a filepath, [File](file \"File\"), or [Decoder](decoder \"Decoder\"). It's also possible to create SoundData with a custom sample rate, channel and bit depth.\n\nThe sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way.\n\n## Function\n\n### Synopsis\n\n``` lua\nsoundData = love.sound.newSoundData( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe file name of the file to load.\n\n### Returns\n\n[`SoundData`](sounddata \"SoundData\")` soundData`  \nA new SoundData object.\n\n## Function\n\n### Synopsis\n\n``` lua\nsoundData = love.sound.newSoundData( file )\n```\n\n### Arguments\n\n[`File`](file \"File\")` file`  \nA File pointing to an audio file.\n\n### Returns\n\n[`SoundData`](sounddata \"SoundData\")` soundData`  \nA new SoundData object.\n\n## Function\n\n### Synopsis\n\n``` lua\nsoundData = love.sound.newSoundData( decoder )\n```\n\n### Arguments\n\n[`Decoder`](decoder \"Decoder\")` decoder`  \nDecode data from this Decoder until EOF.\n\n### Returns\n\n[`SoundData`](sounddata \"SoundData\")` soundData`  \nA new SoundData object.\n\n## Function\n\n### Synopsis\n\n``` lua\nsoundData = love.sound.newSoundData( samples, rate, bits, channels )\n```\n\n### Arguments\n\n[`number`](number \"number\")` samples`  \nTotal number of samples.\n\n[`number`](number \"number\")` rate (44100)`  \nNumber of samples per second\n\n[`number`](number \"number\")` bits (16)`  \nBits per sample (8 or 16).\n\n[`number`](number \"number\")` channels (2)`  \nEither 1 for mono or 2 for stereo.\n\n### Returns\n\n[`SoundData`](sounddata \"SoundData\")` soundData`  \nA new SoundData object.\n\n## Examples\n\n### Loading SoundData from files\n\n``` lua\nwav = love.sound.newSoundData(\"doom.wav\")\n-- Beware: if doom.mp3 is a huge file, it will take \n-- ages to decode.\nmp3 = love.sound.newSoundData(\"doom.mp3\")\n```\n\n## See Also\n\n- [love.sound](love.sound \"love.sound\")\n- [SoundData](sounddata \"SoundData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.sound.newSoundData](https://love2d.org/wiki/love.sound.newSoundData)"
- name: love.system
  id: love.system
  summary: Available since LÖVE 0.9.0 This module is not supported in earlier versions
  description: "# love.system\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis module is not supported in earlier versions.\n\nProvides access to information about the user's system.\n\n## Functions\n\n|                                                                                                   |                                                                                    |        |     |\n|---------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------|--------|-----|\n| [love.system.getClipboardText](love.system.getclipboardtext \"love.system.getClipboardText\")       | Gets text from the clipboard.                                                      | 0.9.0  |     |\n| [love.system.getOS](love.system.getos \"love.system.getOS\")                                        | Gets the current operating system.                                                 | 0.9.0  |     |\n| [love.system.getPowerInfo](love.system.getpowerinfo \"love.system.getPowerInfo\")                   | Gets information about the system's power supply.                                  | 0.9.0  |     |\n| [love.system.getProcessorCount](love.system.getprocessorcount \"love.system.getProcessorCount\")    | Gets the amount of logical processor in the system.                                | 0.9.0  |     |\n| [love.system.hasBackgroundMusic](love.system.hasbackgroundmusic \"love.system.hasBackgroundMusic\") | Gets whether another application on the system is playing music in the background. | 11.0   |     |\n| [love.system.openURL](love.system.openurl \"love.system.openURL\")                                  | Opens a URL with the user's web or file browser.                                   | 0.9.1  |     |\n| [love.system.setClipboardText](love.system.setclipboardtext \"love.system.setClipboardText\")       | Puts text in the clipboard.                                                        | 0.9.0  |     |\n| [love.system.vibrate](love.system.vibrate \"love.system.vibrate\")                                  | Causes the device to vibrate, if possible.                                         | 0.10.0 |     |\n\n## Enums\n\n|                                       |                                               |       |     |\n|---------------------------------------|-----------------------------------------------|-------|-----|\n| [PowerState](powerstate \"PowerState\") | The basic state of the system's power supply. | 0.9.0 |     |\n\n## See Also\n\n- [love](love \"love\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.system](https://love2d.org/wiki/love.system)"
- name: love.system.getClipboardText
  id: love.system.getclipboardtext
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.system.getClipboardText\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets text from the clipboard.\n\n## Function\n\n### Synopsis\n\n``` lua\ntext = love.system.getClipboardText( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` text`  \nThe text currently held in the system's clipboard.\n\n## See Also\n\n- [love.system](love.system \"love.system\")\n- [love.system.setClipboardText](love.system.setclipboardtext \"love.system.setClipboardText\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.system.getClipboardText](https://love2d.org/wiki/love.system.getClipboardText)"
- name: love.system.getOS
  id: love.system.getos
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.system.getOS\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the current operating system. In general, LÖVE abstracts away the need to know the current operating system, but there are a few cases where it can be useful (especially in combination with [os.execute](https://www.lua.org/manual/5.1/manual.html#pdf-os.execute).)\n\n## Function\n\n### Synopsis\n\n``` lua\nosString = love.system.getOS( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` osString`  \nThe current operating system. `\"OS X\"`, `\"Windows\"`, `\"Linux\"`, `\"Android\"` or `\"iOS\"`.\n\n## Notes\n\nIn LÖVE version [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\"), the **love.\\_os** string contains the current operating system.\n\n## See Also\n\n- [love.system](love.system \"love.system\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.system.getOS](https://love2d.org/wiki/love.system.getOS)"
- name: love.system.getPowerInfo
  id: love.system.getpowerinfo
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.system.getPowerInfo\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets information about the system's power supply.\n\n## Function\n\n### Synopsis\n\n``` lua\nstate, percent, seconds = love.system.getPowerInfo( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`PowerState`](powerstate \"PowerState\")` state`  \nThe basic state of the power supply.\n\n[`number`](number \"number\")` percent (nil)`  \nPercentage of battery life left, between 0 and 100. nil if the value can't be determined or there's no battery.\n\n[`number`](number \"number\")` seconds (nil)`  \nSeconds of battery life left. nil if the value can't be determined or there's no battery.\n\n## Examples\n\nPrint to console battery state, percent battery remaining, and seconds of battery life remaining. Note that percent and seconds remaining will be nil if no battery is present.\n\n``` lua\nfunction love.load()\n    print(love.system.getPowerInfo())\nend\n```\n\n## See Also\n\n- [love.system](love.system \"love.system\")\n- [PowerState](powerstate \"PowerState\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.system.getPowerInfo](https://love2d.org/wiki/love.system.getPowerInfo)"
- name: love.system.getProcessorCount
  id: love.system.getprocessorcount
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.system.getProcessorCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the amount of logical processor in the system.\n\n## Function\n\n### Synopsis\n\n``` lua\nprocessorCount = love.system.getProcessorCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` processorCount`  \nAmount of logical processors.\n\n## Notes\n\nThe number includes the threads reported if technologies such as Intel's [Hyper-threading](https://en.wikipedia.org/wiki/Hyper-threading) are enabled. For example, on a 4-core CPU with Hyper-threading, this function will return 8.\n\n## See Also\n\n- [love.system](love.system \"love.system\")\n- [love.thread.newThread](love.thread.newthread \"love.thread.newThread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.system.getProcessorCount](https://love2d.org/wiki/love.system.getProcessorCount)"
- name: love.system.hasBackgroundMusic
  id: love.system.hasbackgroundmusic
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.system.hasBackgroundMusic\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether another application on the system is playing music in the background.\n\nCurrently this is implemented on iOS and Android, and will always return false on other operating systems. The `t.audio.mixwithsystem` flag in [love.conf](love.conf \"love.conf\") can be used to configure whether background audio / music from other apps should play while LÖVE is open.\n\n## Function\n\n### Synopsis\n\n``` lua\nbackgroundmusic = love.system.hasBackgroundMusic( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` backgroundmusic`  \nTrue if the user is playing music in the background via another app, false otherwise.\n\n## See Also\n\n- [love.system](love.system \"love.system\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.system.hasBackgroundMusic](https://love2d.org/wiki/love.system.hasBackgroundMusic)"
- name: love.system.openURL
  id: love.system.openurl
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# love.system.openURL\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nOpens a URL with the user's web or file browser.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.system.openURL( url )\n```\n\n### Arguments\n\n[`string`](string \"string\")` url`  \nThe URL to open. Must be formatted as a proper URL.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the URL was opened successfully.\n\n## Notes\n\nPassing `file://` scheme in Android 7.0 (Nougat) and later always result in [failure](https://developer.android.com/about/versions/nougat/android-7.0-changes.html#sharing-files). Prior to [11.2](https://love2d.org/wiki/11.2 \"11.2\"), this will crash LÖVE instead of returning false.\n\n## Examples\n\n### Open love2d.org when the game is loaded.\n\n``` lua\nfunction love.load()\n    love.system.openURL(\"http://love2d.org/\")\nend\n```\n\n### Open the game's save directory when \"s\" is pressed.\n\n``` lua\nfunction love.load()\n    -- Make sure the save directory exists by writing an empty file.\n    love.filesystem.write(\"test.txt\", \"\")\nend\n \nfunction love.keypressed(key)\n    if key == \"s\" then\n        -- To open a file or folder, \"file://\" must be prepended to the path.\n        love.system.openURL(\"file://\"..love.filesystem.getSaveDirectory())\n    end\nend\n```\n\n## See Also\n\n- [love.system](love.system \"love.system\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.system.openURL](https://love2d.org/wiki/love.system.openURL)"
- name: love.system.setClipboardText
  id: love.system.setclipboardtext
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.system.setClipboardText\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nPuts text in the clipboard.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.system.setClipboardText( text )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nThe new text to hold in the system's clipboard.\n\n### Returns\n\nNothing.\n\n## Examples\n\nSet up OS agnostic keybindings for a copy paste buffer.\n\n``` lua\nlocal buffer\n \nfunction love.draw()\n \n  love.graphics.print(\n    \"OS: \"..love.system.getOS()..\"\\n\"..\n    \"Local buffer: \"..tostring(buffer)..\"\\n\"..\n    \"System buffer: \"..tostring(love.system.getClipboardText()))\n \nend\n \nfunction love.keypressed(key)\n \n  local osString = love.system.getOS()\n \n  local control\n \n  if osString == \"OS X\" then\n    control = love.keyboard.isDown(\"lgui\",\"rgui\")\n  elseif osString == \"Windows\" or osString == \"Linux\" then\n    control = love.keyboard.isDown(\"lctrl\",\"rctrl\")\n  end\n \n  if control then\n    if key == \"c\" then\n      if buffer then love.system.setClipboardText(buffer) end\n    end\n    if key == \"v\" then\n      buffer = love.system.getClipboardText()\n    end\n  end\n \nend\n```\n\n## See Also\n\n- [love.system](love.system \"love.system\")\n- [love.system.getClipboardText](love.system.getclipboardtext \"love.system.getClipboardText\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.system.setClipboardText](https://love2d.org/wiki/love.system.setClipboardText)"
- name: love.system.vibrate
  id: love.system.vibrate
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.system.vibrate\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nCauses the device to vibrate, if possible. Currently this will only work on Android and iOS devices that have a built-in vibration motor.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.system.vibrate( seconds )\n```\n\n### Arguments\n\n[`number`](number \"number\")` seconds (0.5)`  \nThe duration to vibrate for. If called on an iOS device, it will always vibrate for 0.5 seconds due to limitations in the iOS system APIs.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.system](love.system \"love.system\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.system.vibrate](https://love2d.org/wiki/love.system.vibrate)"
- name: love.textedited
  id: love.textedited
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.textedited\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nCalled when the candidate text for an IME (Input Method Editor) has changed.\n\nThe candidate text is not the final text that the user will eventually choose. Use [love.textinput](love.textinput \"love.textinput\") for that.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.textedited( text, start, length )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nThe UTF-8 encoded unicode candidate text.\n\n[`number`](number \"number\")` start`  \nThe start cursor of the selected candidate text.\n\n[`number`](number \"number\")` length`  \nThe length of the selected candidate text. May be 0.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love](love \"love\")\n- [love.textinput](love.textinput \"love.textinput\")\n- [love.keyboard.setTextInput](love.keyboard.settextinput \"love.keyboard.setTextInput\")\n- [love.keyboard.hasTextInput](love.keyboard.hastextinput \"love.keyboard.hasTextInput\")\n- [utf8](utf8 \"utf8\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.textedited](https://love2d.org/wiki/love.textedited)"
- name: love.textinput
  id: love.textinput
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.textinput\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCalled when text has been entered by the user. For example if shift-2 is pressed on an American keyboard layout, the text \"@\" will be generated.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.textinput( text )\n```\n\n### Arguments\n\n[`string`](string \"string\")` text`  \nThe UTF-8 encoded unicode text.\n\n### Returns\n\nNothing.\n\n## Notes\n\nAlthough Lua strings can store UTF-8 encoded unicode text just fine, many functions in Lua's string library will not treat the text as you might expect. For example, `#text` (and `string.len(text)`) will give the number of *bytes* in the string, rather than the number of unicode characters. The [Lua wiki](http://lua-users.org/wiki/LuaUnicode) and a [presentation by one of Lua's creators](https://www.lua.org/wshop12/Ierusalimschy.pdf) give more in-depth explanations, with some tips.\n\nThe [utf8](utf8 \"utf8\") library can be used to operate on UTF-8 encoded unicode text (such as the text argument given in this function.)\n\nOn Android and iOS, textinput is disabled by default; call [love.keyboard.setTextInput](love.keyboard.settextinput \"love.keyboard.setTextInput\") to enable it.\n\n## Examples\n\nRecord and print text the user writes.\n\n``` lua\nfunction love.load()\n    text = \"Type away! -- \"\nend\n \nfunction love.textinput(t)\n    text = text .. t\nend\n \nfunction love.draw()\n    love.graphics.printf(text, 0, 0, love.graphics.getWidth())\nend\n```\n\nPrint text the user writes, and erase text when backspace is pressed.\n\n``` lua\nlocal utf8 = require(\"utf8\")\n \nfunction love.load()\n    text = \"Type away! -- \"\n \n    -- enable key repeat so backspace can be held down to trigger love.keypressed multiple times.\n    love.keyboard.setKeyRepeat(true)\nend\n \nfunction love.textinput(t)\n    text = text .. t\nend\n \nfunction love.keypressed(key)\n    if key == \"backspace\" then\n        -- get the byte offset to the last UTF-8 character in the string.\n        local byteoffset = utf8.offset(text, -1)\n \n        if byteoffset then\n            -- remove the last UTF-8 character.\n            -- string.sub operates on bytes rather than UTF-8 characters, so we couldn't do string.sub(text, 1, -2).\n            text = string.sub(text, 1, byteoffset - 1)\n        end\n    end\nend\n \nfunction love.draw()\n    love.graphics.printf(text, 0, 0, love.graphics.getWidth())\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n- [love.keypressed](love.keypressed \"love.keypressed\")\n- [love.keyboard.setTextInput](love.keyboard.settextinput \"love.keyboard.setTextInput\")\n- [love.keyboard.hasTextInput](love.keyboard.hastextinput \"love.keyboard.hasTextInput\")\n- [utf8](utf8 \"utf8\")\n- [textinput vs keypressed](https://wiki.libsdl.org/Tutorials/TextInput)\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.textinput](https://love2d.org/wiki/love.textinput)"
- name: love.thread
  id: love.thread
  summary: Available since LÖVE 0.7.0 This module is not supported in earlier versions
  description: "# love.thread\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis module is not supported in earlier versions.\n\nAllows you to work with threads.\n\nThreads are separate Lua environments, running in parallel to the main code. As their code runs separately, they can be used to compute complex operations without adversely affecting the frame rate of the main thread. However, as they are separate environments, they cannot access the variables and functions of the main thread, and communication between threads is limited.\n\nAll LÖVE objects (userdata) are shared among threads so you'll only have to send their references across threads. You may run into concurrency issues if you manipulate an object on multiple threads at the same time.\n\nWhen a [Thread](thread \"Thread\") is started, it only loads [love.data](love.data \"love.data\"), [love.filesystem](love.filesystem \"love.filesystem\"), and love.thread module. Every other module has to be loaded with [require](require \"require\").\n\nThe [love.graphics](love.graphics \"love.graphics\"), [love.window](love.window \"love.window\"), [love.joystick](love.joystick \"love.joystick\"), [love.keyboard](love.keyboard \"love.keyboard\"), [love.mouse](love.mouse \"love.mouse\"), and [love.touch](love.touch \"love.touch\") modules have several restrictions and therefore can only be used in the main thread.\n\nUnless you define the [love.threaderror](love.threaderror \"love.threaderror\") callback or call [Thread:getError](thread-geterror \"Thread:getError\") you won't see any errors your thread code throws.\n\nIn Android, you have to make sure all threads are terminated before [quitting/restarting](love.event.quit \"love.event.quit\"), otherwise LOVE will fail to start again!\n\n## Types\n\n|                              |                                                                                 |       |     |\n|------------------------------|---------------------------------------------------------------------------------|-------|-----|\n| [Channel](channel \"Channel\") | An object which can be used to send and receive data between different threads. | 0.9.0 |     |\n| [Thread](thread \"Thread\")    | A Thread represents a thread.                                                   | 0.7.0 |     |\n\n## Functions\n\n|                                                                           |                                                                                                             |       |       |\n|---------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------|-------|-------|\n| [love.thread.getChannel](love.thread.getchannel \"love.thread.getChannel\") | Creates or retrieves a named thread channel.                                                                | 0.9.0 |       |\n| [love.thread.getThread](love.thread.getthread \"love.thread.getThread\")    | Look for a thread and get its object.                                                                       | 0.7.0 | 0.9.0 |\n| [love.thread.getThreads](love.thread.getthreads \"love.thread.getThreads\") | Get all threads.                                                                                            | 0.7.0 | 0.9.0 |\n| [love.thread.newChannel](love.thread.newchannel \"love.thread.newChannel\") | Creates a new unnamed thread channel.                                                                       | 0.9.0 |       |\n| [love.thread.newThread](love.thread.newthread \"love.thread.newThread\")    | Creates a new Thread from a filename, string or [FileData](filedata \"FileData\") object containing Lua code. | 0.7.0 |       |\n\n  \n\n## Examples\n\nA simple example showing the general usage of a thread and using channels for communication.\n\n``` lua\n-- This is the code that's going to run on the our thread. It should be moved\n-- to its own dedicated Lua file, but for simplicity's sake we'll create it\n-- here.\nlocal threadCode = [[\n-- Receive values sent via thread:start\nlocal min, max = ...\n \nfor i = min, max do\n    -- The Channel is used to handle communication between our main thread and\n    -- this thread. On each iteration of the loop will push a message to it which\n    -- we can then pop / receive in the main thread.\n    love.thread.getChannel( 'info' ):push( i )\nend\n]]\n \nlocal thread -- Our thread object.\nlocal timer  -- A timer used to animate our circle.\n \nfunction love.load()\n    thread = love.thread.newThread( threadCode )\n    thread:start( 99, 1000 )\nend\n \nfunction love.update( dt )\n    timer = timer and timer + dt or 0\n \n    -- Make sure no errors occured.\n    local error = thread:getError()\n    assert( not error, error )\nend\n \nfunction love.draw()\n    -- Get the info channel and pop the next message from it.\n    local info = love.thread.getChannel( 'info' ):pop()\n    if info then\n        love.graphics.print( info, 10, 10 )\n    end\n \n    -- We smoothly animate a circle to show that the thread isn't blocking our main thread.\n    love.graphics.circle( 'line', 100 + math.sin( timer ) * 20, 100 + math.cos( timer ) * 20, 20 )\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.thread](https://love2d.org/wiki/love.thread)"
- name: love.thread.getChannel
  id: love.thread.getchannel
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.thread.getChannel\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCreates or retrieves a named thread channel.\n\n## Function\n\n### Synopsis\n\n``` lua\nchannel = love.thread.getChannel( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the channel you want to create or retrieve.\n\n### Returns\n\n[`Channel`](channel \"Channel\")` channel`  \nThe Channel object associated with the name.\n\n## Examples\n\n### Communication between main/thread\n\n``` lua\n-- main\nthread      = love.thread.newThread ( \"thread.lua\" );\nthread:start ();\nchannel     = {};\nchannel.a   = love.thread.getChannel ( \"a\" );\nchannel.b   = love.thread.getChannel ( \"b\" );\nchannel.b:push ( \"foo\" );\n \nfunction love.update ( dt )\n    local v = channel.a:pop ();\n    if v then\n        print ( tostring ( v ) );\n        channel.b:push ( \"foo\" );\n    end\nend\n \n-- thread\nchannel     = {};\nchannel.a   = love.thread.getChannel ( \"a\" );\nchannel.b   = love.thread.getChannel ( \"b\" );\n \nwhile true do\n    local v = channel.b:pop ();\n    if v then\n        print ( tostring ( v ) );\n        channel.a:push ( \"bar\" );\n    end\nend\n```\n\n## See Also\n\n- [love.thread](love.thread \"love.thread\")\n- [Channel](channel \"Channel\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.thread.getChannel](https://love2d.org/wiki/love.thread.getChannel)"
- name: love.thread.getThread
  id: love.thread.getthread
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.9.0 This function is not supported in earlier or later versions
  description: "# love.thread.getThread\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier or later versions.\n\nLook for a thread and get its object.\n\n## Function\n\n### Synopsis\n\n``` lua\nthread = love.thread.getThread( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the thread to return.\n\n### Returns\n\n[`Thread`](thread \"Thread\")` thread`  \nThe thread with that name.\n\n## Function\n\n### Synopsis\n\n``` lua\nthread = love.thread.getThread( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Thread`](thread \"Thread\")` thread`  \nThe current thread.\n\n## See Also\n\n- [love.thread](love.thread \"love.thread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.thread.getThread](https://love2d.org/wiki/love.thread.getThread)"
- name: love.thread.getThreads
  id: love.thread.getthreads
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.9.0 This function is not supported in earlier or later versions
  description: "# love.thread.getThreads\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier or later versions.\n\nGet all threads.\n\n## Function\n\n### Synopsis\n\n``` lua\nthreads = love.thread.getThreads( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` threads`  \nA table containing all threads indexed by their names.\n\n## See Also\n\n- [love.thread](love.thread \"love.thread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.thread.getThreads](https://love2d.org/wiki/love.thread.getThreads)"
- name: love.thread.newChannel
  id: love.thread.newchannel
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.thread.newChannel\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nCreate a new unnamed thread channel.\n\nOne use for them is to pass new unnamed channels to other threads via [Channel:push](channel-push \"Channel:push\") on a named channel.\n\n## Function\n\n### Synopsis\n\n``` lua\nchannel = love.thread.newChannel( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Channel`](channel \"Channel\")` channel`  \nThe new Channel object.\n\n## See Also\n\n- [love.thread](love.thread \"love.thread\")\n- [Channel](channel \"Channel\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.thread.newChannel](https://love2d.org/wiki/love.thread.newChannel)"
- name: love.thread.newThread
  id: love.thread.newthread
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# love.thread.newThread\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new Thread from a filename, string or [FileData](filedata \"FileData\") object containing Lua code.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nthread = love.thread.newThread( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe name of the Lua file to use as the source.\n\n### Returns\n\n[`Thread`](thread \"Thread\")` thread`  \nA new Thread that has yet to be started.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nthread = love.thread.newThread( fileData )\n```\n\n### Arguments\n\n[`FileData`](filedata \"FileData\")` fileData`  \nThe FileData containing the Lua code to use as the source.\n\n### Returns\n\n[`Thread`](thread \"Thread\")` thread`  \nA new Thread that has yet to be started.\n\n## Function\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nthread = love.thread.newThread( codestring )\n```\n\n### Arguments\n\n[`string`](string \"string\")` codestring`  \nA string containing the Lua code to use as the source. It needs to either be at least 1024 characters long, or contain at least one newline.\n\n### Returns\n\n[`Thread`](thread \"Thread\")` thread`  \nA new Thread that has yet to be started.\n\n## Function\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nthread = love.thread.newThread( name, filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the thread.\n\n[`string`](string \"string\")` filename`  \nThe name of the File to use as source.\n\n### Returns\n\n[`Thread`](thread \"Thread\")` thread`  \nA new Thread that has yet to be started.\n\n## Function\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nthread = love.thread.newThread( name, file )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the thread.\n\n[`File`](file \"File\")` file`  \nThe file to use as source.\n\n### Returns\n\n[`Thread`](thread \"Thread\")` thread`  \nA new Thread that has yet to be started.\n\n## Function\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nthread = love.thread.newThread( name, data )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the thread.\n\n[`Data`](data \"Data\")` data`  \nThe data to use as source.\n\n### Returns\n\n[`Thread`](thread \"Thread\")` thread`  \nA new Thread that has yet to be started.\n\n## See Also\n\n- [love.thread](love.thread \"love.thread\")\n- [Thread](thread \"Thread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.thread.newThread](https://love2d.org/wiki/love.thread.newThread)"
- name: love.threaderror
  id: love.threaderror
  summary: Available since LÖVE 0.9.0 This callback is not supported in earlier versions
  description: "# love.threaderror\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis callback is not supported in earlier versions.\n\nCallback function triggered when a [Thread](thread \"Thread\") encounters an error.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.threaderror( thread, errorstr )\n```\n\n### Arguments\n\n[`Thread`](thread \"Thread\")` thread`  \nThe thread which produced the error.\n\n[`string`](string \"string\")` errorstr`  \nThe error message.\n\n### Returns\n\nNothing.\n\n## Example\n\n``` lua\nfunction love.load()\n  mythread = love.thread.newThread(\"thread.lua\")\n  mythread:start()\nend\n \nfunction love.threaderror(thread, errorstr)\n  print(\"Thread error!\\n\"..errorstr)\n  -- thread:getError() will return the same error string now.\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.threaderror](https://love2d.org/wiki/love.threaderror)"
- name: love.timer
  id: love.timer
  summary: Provides high-resolution timing functionality
  description: "# love.timer\n\nProvides high-resolution timing functionality.\n\n## Functions\n\n|                                                                                       |                                                             |       |       |\n|---------------------------------------------------------------------------------------|-------------------------------------------------------------|-------|-------|\n| [love.timer.getAverageDelta](love.timer.getaveragedelta \"love.timer.getAverageDelta\") | Returns the average delta time over the last second.        | 0.9.0 |       |\n| [love.timer.getDelta](love.timer.getdelta \"love.timer.getDelta\")                      | Returns the time between the last two frames.               |       |       |\n| [love.timer.getFPS](love.timer.getfps \"love.timer.getFPS\")                            | Returns the current frames per second.                      |       |       |\n| [love.timer.getMicroTime](love.timer.getmicrotime \"love.timer.getMicroTime\")          | Returns the value of a timer with microsecond precision.    |       | 0.9.0 |\n| [love.timer.getTime](love.timer.gettime \"love.timer.getTime\")                         | Returns the amount of time since some time in the past.     | 0.3.2 |       |\n| [love.timer.sleep](love.timer.sleep \"love.timer.sleep\")                               | Pauses the current thread for the specified amount of time. | 0.2.1 |       |\n| [love.timer.step](love.timer.step \"love.timer.step\")                                  | Measures the time between two frames.                       |       |       |\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.timer](https://love2d.org/wiki/love.timer)"
- name: love.timer.getAverageDelta
  id: love.timer.getaveragedelta
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.timer.getAverageDelta\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nReturns the average delta time (seconds per frame) over the last second.\n\n## Function\n\n### Synopsis\n\n``` lua\ndelta = love.timer.getAverageDelta( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` delta`  \nThe average delta time over the last second.\n\n## Examples\n\nDisplay text at the top left of the screen showing the average time taken to [update](love.update \"love.update\") and [draw](love.draw \"love.draw\") each frame.\n\n``` lua\nfunction love.draw()\n   local delta = love.timer.getAverageDelta()\n   -- Display the frame time in milliseconds for convenience.\n   -- A lower frame time means more frames per second.\n   love.graphics.print(string.format(\"Average frame time: %.3f ms\", 1000 * delta), 10, 10)\nend\n```\n\n## See Also\n\n- [love.timer](love.timer \"love.timer\")\n- [love.timer.getDelta](love.timer.getdelta \"love.timer.getDelta\")\n- [love.timer.getFPS](love.timer.getfps \"love.timer.getFPS\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.timer.getAverageDelta](https://love2d.org/wiki/love.timer.getAverageDelta)"
- name: love.timer.getDelta
  id: love.timer.getdelta
  summary: Returns the time between the last two frames
  description: "# love.timer.getDelta\n\nReturns the time between the last two frames.\n\n## Function\n\n### Synopsis\n\n``` lua\ndt = love.timer.getDelta( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` dt`  \nThe time passed (in seconds).\n\n## See Also\n\n- [love.timer](love.timer \"love.timer\")\n- [love.timer.getAverageDelta](love.timer.getaveragedelta \"love.timer.getAverageDelta\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.timer.getDelta](https://love2d.org/wiki/love.timer.getDelta)"
- name: love.timer.getFPS
  id: love.timer.getfps
  summary: Returns the current number of frames per second
  description: "# love.timer.getFPS\n\nReturns the current number of frames per second.\n\n## Function\n\n### Synopsis\n\n``` lua\nfps = love.timer.getFPS( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` fps`  \nThe current FPS.\n\n### Notes\n\nThe returned value is the number of frames rendered during the last second, rounded to the nearest integer value.\n\nIt is one divided by what [love.timer.getAverageDelta](love.timer.getaveragedelta \"love.timer.getAverageDelta\") returns, otherwise known as the reciprocal, or multiplicative inverse of it.\n\nTo get instantaneous frame rate values, use `1.0 / love.timer.getDelta()`, or `1.0 / dt` if in [love.update](love.update \"love.update\"), with `dt` given as the parameter.\n\n## Examples\n\nDisplay text at the top left of the screen showing the current FPS.\n\n``` lua\nfunction love.draw()\n   love.graphics.print(\"Current FPS: \"..tostring(love.timer.getFPS( )), 10, 10)\nend\n```\n\n## See Also\n\n- [love.timer](love.timer \"love.timer\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.timer.getFPS](https://love2d.org/wiki/love.timer.getFPS)"
- name: love.timer.getMicroTime
  id: love.timer.getmicrotime
  summary: Removed in LÖVE 0.9.0 love.timer.getTime is now microsecond-accurate
  description: "# love.timer.getMicroTime\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \n[love.timer.getTime](love.timer.gettime \"love.timer.getTime\") is now microsecond-accurate.\n\n  \nReturns the value of a timer with an unspecified starting time. The time is accurate to the microsecond.\n\n## Function\n\n### Synopsis\n\n``` lua\nt = love.timer.getMicroTime( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` t`  \nThe time passed in seconds.\n\n## See Also\n\n- [love.timer](love.timer \"love.timer\")\n- [love.timer.getTime](love.timer.gettime \"love.timer.getTime\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.timer.getMicroTime](https://love2d.org/wiki/love.timer.getMicroTime)"
- name: love.timer.getTime
  id: love.timer.gettime
  summary: Available since LÖVE 0.3.2 This function is not supported in earlier versions
  description: "# love.timer.getTime\n\n**Available since LÖVE [0.3.2](https://love2d.org/wiki/0.3.2 \"0.3.2\")**  \nThis function is not supported in earlier versions.\n\nReturns the value of a timer with an unspecified starting time. This function should only be used to calculate differences between points in time, as the starting time of the timer is unknown.\n\n## Function\n\n### Synopsis\n\n``` lua\ntime = love.timer.getTime( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` time`  \nThe time in seconds. Given as a decimal, accurate to the microsecond.\n\n## Examples\n\n### Checking how long something takes\n\n``` lua\nlocal start = love.timer.getTime()\n \n-- Concatenate \"bar\" 1000 times.\nlocal foo = \"\"\nfor _ = 1, 1000 do\n    foo = foo .. \"bar\"\nend\n \n-- Resulting time difference in seconds. Multiplying it by 1000 gives us the value in milliseconds.\nlocal result = love.timer.getTime() - start\nprint( string.format( \"It took %.3f milliseconds to concatenate 'bar' 1000 times!\", result * 1000 ))\n```\n\n## See Also\n\n- [love.timer](love.timer \"love.timer\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.timer.getTime](https://love2d.org/wiki/love.timer.getTime)"
- name: love.timer.sleep
  id: love.timer.sleep
  summary: Available since LÖVE 0.2.1 This function is not supported in earlier versions
  description: "# love.timer.sleep\n\n**Available since LÖVE [0.2.1](https://love2d.org/wiki/0.2.1 \"0.2.1\")**  \nThis function is not supported in earlier versions.\n\nPauses the current thread for the specified amount of time.\n\nThis function causes the entire thread to pause for the duration of the sleep. Graphics will not draw, input events will not trigger, code will not run, and the window will be unresponsive if you use this as \"wait()\" in the main thread. Use [love.update](love.update \"love.update\") or a [Timer library](love.timer \"love.timer\") for that instead.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nlove.timer.sleep( s )\n```\n\n### Arguments\n\n[`number`](number \"number\")` s`  \nSeconds to sleep for.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nlove.timer.sleep( ms )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ms`  \nMilliseconds to sleep for.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Use sleep to cap FPS at 30\n\n``` lua\nfunction love.update(dt)\n   if dt < 1/30 then\n      love.timer.sleep(1/30 - dt)\n   end\nend\n```\n\n### More sophisticated way to cap 30 FPS\n\nThis takes into account the time spent updating and drawing each frame.\n\n``` lua\nfunction love.load()\n   min_dt = 1/30\n   next_time = love.timer.getTime()\nend\n \nfunction love.update(dt)\n   next_time = next_time + min_dt\n \n   -- rest of function here\nend\n \nfunction love.draw()\n   -- rest of function here\n \n   local cur_time = love.timer.getTime()\n   if next_time <= cur_time then\n      next_time = cur_time\n      return\n   end\n   love.timer.sleep(next_time - cur_time)\nend\n```\n\n## See Also\n\n- [love.timer](love.timer \"love.timer\")\n\n  \n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.timer.sleep](https://love2d.org/wiki/love.timer.sleep)"
- name: love.timer.step
  id: love.timer.step
  summary: Measures the time between two frames
  description: "# love.timer.step\n\nMeasures the time between two frames. Calling this changes the return value of [love.timer.getDelta](love.timer.getdelta \"love.timer.getDelta\").\n\n## Function\n\n### Synopsis\n\n``` lua\ndt = love.timer.step( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` dt` Available since 11.0  \nThe time passed (in seconds).\n\n## See Also\n\n- [love.timer](love.timer \"love.timer\")\n- [love.run](love.run \"love.run\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.timer.step](https://love2d.org/wiki/love.timer.step)"
- name: love.touch
  id: love.touch
  summary: Available since LÖVE 0.10.0 This module is not supported in earlier versions
  description: "# love.touch\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis module is not supported in earlier versions.\n\nProvides an interface to touch-screen presses.\n\n## Functions\n\n|                                                                           |                                                         |        |     |\n|---------------------------------------------------------------------------|---------------------------------------------------------|--------|-----|\n| [love.touch.getPosition](love.touch.getposition \"love.touch.getPosition\") | Gets the current position of the specified touch-press. | 0.10.0 |     |\n| [love.touch.getPressure](love.touch.getpressure \"love.touch.getPressure\") | Gets the current pressure of the specified touch-press. | 0.10.0 |     |\n| [love.touch.getTouches](love.touch.gettouches \"love.touch.getTouches\")    | Gets a list of all active touch-presses.                | 0.10.0 |     |\n\n## See Also\n\n- [love](love \"love\")\n- [love.touchpressed](love.touchpressed \"love.touchpressed\")\n- [love.touchreleased](love.touchreleased \"love.touchreleased\")\n- [love.touchmoved](love.touchmoved \"love.touchmoved\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.touch](https://love2d.org/wiki/love.touch)"
- name: love.touch.getPosition
  id: love.touch.getposition
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.touch.getPosition\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the current position of the specified touch-press, in pixels.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = love.touch.getPosition( id )\n```\n\n### Arguments\n\n[`light userdata`](light_userdata \"light userdata\")` id`  \nThe identifier of the touch-press. Use [love.touch.getTouches](love.touch.gettouches \"love.touch.getTouches\"), [love.touchpressed](love.touchpressed \"love.touchpressed\"), or [love.touchmoved](love.touchmoved \"love.touchmoved\") to obtain touch id values.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe position along the x-axis of the touch-press inside the window, in pixels.\n\n[`number`](number \"number\")` y`  \nThe position along the y-axis of the touch-press inside the window, in pixels.\n\n## Notes\n\nThe unofficial Android and iOS ports of LÖVE 0.9.2 reported touch-press positions as normalized values in the range of \\[0, 1\\], whereas this API reports positions in pixels.\n\n## Examples\n\n### Draw a circle at each location in the window where a touch press is active.\n\n``` lua\nfunction love.draw()\n    local touches = love.touch.getTouches()\n \n    for i, id in ipairs(touches) do\n        local x, y = love.touch.getPosition(id)\n        love.graphics.circle(\"fill\", x, y, 20)\n    end\nend\n```\n\n## See Also\n\n- [love.touch](love.touch \"love.touch\")\n- [love.touch.getTouches](love.touch.gettouches \"love.touch.getTouches\")\n- [love.touchpressed](love.touchpressed \"love.touchpressed\")\n- [love.touchreleased](love.touchreleased \"love.touchreleased\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.touch.getPosition](https://love2d.org/wiki/love.touch.getPosition)"
- name: love.touch.getPressure
  id: love.touch.getpressure
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.touch.getPressure\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the current pressure of the specified touch-press.\n\n## Function\n\n### Synopsis\n\n``` lua\npressure = love.touch.getPressure( id )\n```\n\n### Arguments\n\n[`light userdata`](light_userdata \"light userdata\")` id`  \nThe identifier of the touch-press. Use [love.touch.getTouches](love.touch.gettouches \"love.touch.getTouches\"), [love.touchpressed](love.touchpressed \"love.touchpressed\"), or [love.touchmoved](love.touchmoved \"love.touchmoved\") to obtain touch id values.\n\n### Returns\n\n[`number`](number \"number\")` pressure`  \nThe pressure of the touch-press. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.\n\n## See Also\n\n- [love.touch](love.touch \"love.touch\")\n- [love.touch.getTouches](love.touch.gettouches \"love.touch.getTouches\")\n- [love.touchpressed](love.touchpressed \"love.touchpressed\")\n- [love.touchmoved](love.touchmoved \"love.touchmoved\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.touch.getPressure](https://love2d.org/wiki/love.touch.getPressure)"
- name: love.touch.getTouches
  id: love.touch.gettouches
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.touch.getTouches\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets a list of all active touch-presses.\n\n## Function\n\n### Synopsis\n\n``` lua\ntouches = love.touch.getTouches( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` touches`  \nA list of active touch-press id values, which can be used with [love.touch.getPosition](love.touch.getposition \"love.touch.getPosition\").\n\n## Notes\n\nThe id values are the same as those used as arguments to [love.touchpressed](love.touchpressed \"love.touchpressed\"), [love.touchmoved](love.touchmoved \"love.touchmoved\"), and [love.touchreleased](love.touchreleased \"love.touchreleased\").\n\nThe id value of a specific touch-press is only guaranteed to be unique for the duration of that touch-press. As soon as [love.touchreleased](love.touchreleased \"love.touchreleased\") is called using that id, it may be reused for a new touch-press via [love.touchpressed](love.touchpressed \"love.touchpressed\").\n\n## See Also\n\n- [love.touch](love.touch \"love.touch\")\n- [love.touch.getPosition](love.touch.getposition \"love.touch.getPosition\")\n- [love.touchpressed](love.touchpressed \"love.touchpressed\")\n- [love.touchreleased](love.touchreleased \"love.touchreleased\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.touch.getTouches](https://love2d.org/wiki/love.touch.getTouches)"
- name: love.touchmoved
  id: love.touchmoved
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.touchmoved\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nCallback function triggered when a touch press moves inside the touch screen.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.touchmoved( id, x, y, dx, dy, pressure )\n```\n\n### Arguments\n\n[`light userdata`](light_userdata \"light userdata\")` id`  \nThe identifier for the touch press.\n\n[`number`](number \"number\")` x`  \nThe x-axis position of the touch inside the window, in pixels.\n\n[`number`](number \"number\")` y`  \nThe y-axis position of the touch inside the window, in pixels.\n\n[`number`](number \"number\")` dx`  \nThe x-axis movement of the touch inside the window, in pixels.\n\n[`number`](number \"number\")` dy`  \nThe y-axis movement of the touch inside the window, in pixels.\n\n[`number`](number \"number\")` pressure`  \nThe amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.\n\n### Returns\n\nNothing.\n\n## Notes\n\nThe identifier is only guaranteed to be unique for the specific touch press until [love.touchreleased](love.touchreleased \"love.touchreleased\") is called with that identifier, at which point it may be reused for new touch presses.\n\nThe unofficial Android and iOS ports of LÖVE 0.9.2 reported touch positions as normalized values in the range of \\[0, 1\\], whereas this API reports positions in pixels.\n\n## See Also\n\n- [love](love \"love\")\n- [love.touchpressed](love.touchpressed \"love.touchpressed\")\n- [love.touchreleased](love.touchreleased \"love.touchreleased\")\n- [love.touch](love.touch \"love.touch\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.touchmoved](https://love2d.org/wiki/love.touchmoved)"
- name: love.touchpressed
  id: love.touchpressed
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.touchpressed\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nCallback function triggered when the touch screen is touched.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.touchpressed( id, x, y, dx, dy, pressure )\n```\n\n### Arguments\n\n[`light userdata`](light_userdata \"light userdata\")` id`  \nThe identifier for the touch press.\n\n[`number`](number \"number\")` x`  \nThe x-axis position of the touch press inside the window, in pixels.\n\n[`number`](number \"number\")` y`  \nThe y-axis position of the touch press inside the window, in pixels.\n\n[`number`](number \"number\")` dx`  \nThe x-axis movement of the touch press inside the window, in pixels. This should always be zero.\n\n[`number`](number \"number\")` dy`  \nThe y-axis movement of the touch press inside the window, in pixels. This should always be zero.\n\n[`number`](number \"number\")` pressure`  \nThe amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.\n\n### Returns\n\nNothing.\n\n## Notes\n\nThe identifier is only guaranteed to be unique for the specific touch press until [love.touchreleased](love.touchreleased \"love.touchreleased\") is called with that identifier, at which point it may be reused for new touch presses.\n\nThe unofficial Android and iOS ports of LÖVE 0.9.2 reported touch positions as normalized values in the range of \\[0, 1\\], whereas this API reports positions in pixels.\n\n## See Also\n\n- [love](love \"love\")\n- [love.touchreleased](love.touchreleased \"love.touchreleased\")\n- [love.touchmoved](love.touchmoved \"love.touchmoved\")\n- [love.touch](love.touch \"love.touch\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.touchpressed](https://love2d.org/wiki/love.touchpressed)"
- name: love.touchreleased
  id: love.touchreleased
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.touchreleased\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nCallback function triggered when the touch screen stops being touched.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.touchreleased( id, x, y, dx, dy, pressure )\n```\n\n### Arguments\n\n[`light userdata`](light_userdata \"light userdata\")` id`  \nThe identifier for the touch press.\n\n[`number`](number \"number\")` x`  \nThe x-axis position of the touch inside the window, in pixels.\n\n[`number`](number \"number\")` y`  \nThe y-axis position of the touch inside the window, in pixels.\n\n[`number`](number \"number\")` dx`  \nThe x-axis movement of the touch inside the window, in pixels.\n\n[`number`](number \"number\")` dy`  \nThe y-axis movement of the touch inside the window, in pixels.\n\n[`number`](number \"number\")` pressure`  \nThe amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.\n\n### Returns\n\nNothing.\n\n## Notes\n\nThe identifier is only guaranteed to be unique for the specific touch press until **love.touchreleased** is called with that identifier, at which point it may be reused for new touch presses.\n\nThe unofficial Android and iOS ports of LÖVE 0.9.2 reported touch positions as normalized values in the range of \\[0, 1\\], whereas this API reports positions in pixels.\n\n## See Also\n\n- [love](love \"love\")\n- [love.touchpressed](love.touchpressed \"love.touchpressed\")\n- [love.touchmoved](love.touchmoved \"love.touchmoved\")\n- [love.touch](love.touch \"love.touch\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.touchreleased](https://love2d.org/wiki/love.touchreleased)"
- name: love.update
  id: love.update
  summary: Callback function used to update the state of the game every frame
  description: "# love.update\n\nCallback function used to update the state of the game every frame.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.update( dt )\n```\n\n### Arguments\n\n[`number`](number \"number\")` dt`  \nTime since the last update in seconds.\n\n### Returns\n\nNothing.\n\n## Examples\n\nRun a function called *think* inside a table called *npc* once per second.\n\n``` lua\ndtotal = 0   -- this keeps track of how much time has passed\nfunction love.update(dt)\n   dtotal = dtotal + dt   -- we add the time passed since the last update, probably a very small number like 0.01\n   if dtotal >= 1 then\n      dtotal = dtotal - 1   -- reduce our timer by a second, but don't discard the change... what if our framerate is 2/3 of a second?\n      npc.think()\n   end\nend\n```\n\nChange a variable *var* at a constant rate (+/- 3 per second in this example).\n\n``` lua\nvar = 10   -- arbitrary starting value\nrate = 3   -- change to change the rate at which the var is changed\nfunction love.update(dt)\n   if love.keyboard.isDown(\"down\") then   -- reduce the value\n      var = var - (dt * rate)\n   end\n   if love.keyboard.isDown(\"up\") then   -- increase the value\n      var = var + (dt * rate)\n   end\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n- [World:update](world-update \"World:update\")\n- [variable](variable \"variable\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.update](https://love2d.org/wiki/love.update)"
- name: love.video
  id: love.video
  summary: Available since LÖVE 0.10.0 This module is not supported in earlier versions
  description: "# love.video\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis module is not supported in earlier versions.\n\nThis module is responsible for decoding, controlling, and streaming video files.\n\nIt can't draw the videos, see [love.graphics.newVideo](love.graphics.newvideo \"love.graphics.newVideo\") and [Video](video \"Video\") objects for that.\n\n## Types\n\n|                                          |                                                                         |        |     |\n|------------------------------------------|-------------------------------------------------------------------------|--------|-----|\n| [VideoStream](videostream \"VideoStream\") | An object which decodes, streams, and controls [Videos](video \"Video\"). | 0.10.0 |     |\n\n## Functions\n\n|                                                                                    |                                                         |        |     |\n|------------------------------------------------------------------------------------|---------------------------------------------------------|--------|-----|\n| [love.video.newVideoStream](love.video.newvideostream \"love.video.newVideoStream\") | Creates a new [VideoStream](videostream \"VideoStream\"). | 0.10.0 |     |\n\n## See Also\n\n- [love](love \"love\")\n- [love.graphics.newVideo](love.graphics.newvideo \"love.graphics.newVideo\")\n- [Video](video \"Video\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.video](https://love2d.org/wiki/love.video)"
- name: love.video.newVideoStream
  id: love.video.newvideostream
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.video.newVideoStream\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new [VideoStream](videostream \"VideoStream\"). Currently only Ogg Theora video files are supported. VideoStreams can't draw videos, see [love.graphics.newVideo](love.graphics.newvideo \"love.graphics.newVideo\") for that.\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). If you need to use a specific resource often, create it once and store it somewhere it can be reused!\n\n## Function\n\n### Synopsis\n\n``` lua\nvideostream = love.video.newVideoStream( filename )\n```\n\n### Arguments\n\n[`string`](string \"string\")` filename`  \nThe file path to the Ogg Theora video file.\n\n### Returns\n\n[`VideoStream`](videostream \"VideoStream\")` videostream`  \nA new VideoStream.\n\n## Function\n\n### Synopsis\n\n``` lua\nvideostream = love.video.newVideoStream( file )\n```\n\n### Arguments\n\n[`File`](file \"File\")` file`  \nThe [File](file \"File\") object containing the Ogg Theora video.\n\n### Returns\n\n[`VideoStream`](videostream \"VideoStream\")` videostream`  \nA new VideoStream.\n\n## See Also\n\n- [love.video](love.video \"love.video\")\n- [VideoStream](videostream \"VideoStream\")\n- [Video](video \"Video\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.video.newVideoStream](https://love2d.org/wiki/love.video.newVideoStream)"
- name: love.visible
  id: love.visible
  summary: Available since LÖVE 0.9.0 This callback is not supported in earlier versions
  description: "# love.visible\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis callback is not supported in earlier versions.\n\nCallback function triggered when window is minimized/hidden or unminimized by the user.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.visible( visible )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` visible`  \nTrue if the window is visible, false if it isn't.\n\n### Returns\n\nNothing.\n\n## Example\n\n``` lua\nfunction love.visible(v)\n    print(v and \"Window is visible!\" or \"Window is not visible!\");\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.visible](https://love2d.org/wiki/love.visible)"
- name: love.wheelmoved
  id: love.wheelmoved
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.wheelmoved\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nCallback function triggered when the mouse wheel is moved.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.wheelmoved( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nAmount of horizontal mouse wheel movement. Positive values indicate movement to the right.\n\n[`number`](number \"number\")` y`  \nAmount of vertical mouse wheel movement. Positive values indicate upward movement.\n\n### Returns\n\nNothing.\n\n## Examples\n\n``` lua\nlocal text = \"\"\n \nfunction love.wheelmoved(x, y)\n    if y > 0 then\n        text = \"Mouse wheel moved up\"\n    elseif y < 0 then\n        text = \"Mouse wheel moved down\"\n    end\nend\n \nfunction love.draw()\n    love.graphics.print(text, 10, 10)\nend\n```\n\n  \n\n### Smooth scrolling\n\n``` lua\nfunction love.load()\n    posx, posy = love.graphics.getWidth() * 0.5, love.graphics.getHeight() * 0.5\n    velx, vely = 0, 0 -- The scroll velocity\nend\n \nfunction love.draw()\n    love.graphics.rectangle( 'line', posx, posy, 50, 50 )\nend\n \nfunction love.update( dt )\n    posx = posx + velx * dt\n    posy = posy + vely * dt\n \n    -- Gradually reduce the velocity to create smooth scrolling effect.\n    velx = velx - velx * math.min( dt * 10, 1 )\n    vely = vely - vely * math.min( dt * 10, 1 )\nend\n \nfunction love.wheelmoved( dx, dy )\n    velx = velx + dx * 20\n    vely = vely + dy * 20\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.wheelmoved](https://love2d.org/wiki/love.wheelmoved)"
- name: love.window
  id: love.window
  summary: Available since LÖVE 0.9.0 This module is not supported in earlier versions
  description: "# love.window\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis module is not supported in earlier versions.\n\n  \nProvides an interface for modifying and retrieving information about the program's window.\n\n## Functions\n\n|                                                                                                               |                                                                                                                                                                              |        |        |\n|---------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------|--------|\n| [love.window.close](love.window.close \"love.window.close\")                                                    | Closes the window.                                                                                                                                                           | 0.10.0 |        |\n| [love.window.fromPixels](love.window.frompixels \"love.window.fromPixels\")                                     | Converts a number from pixels to density-independent units.                                                                                                                  | 0.9.2  |        |\n| [love.window.getDPIScale](love.window.getdpiscale \"love.window.getDPIScale\")                                  | Gets the DPI scale factor associated with the window.                                                                                                                        | 11.0   |        |\n| [love.window.getDesktopDimensions](love.window.getdesktopdimensions \"love.window.getDesktopDimensions\")       | Gets the width and height of the desktop.                                                                                                                                    | 0.9.0  |        |\n| [love.window.getDimensions](love.window.getdimensions \"love.window.getDimensions\")                            | Gets the width and height of the window.                                                                                                                                     | 0.9.0  | 0.10.0 |\n| [love.window.getDisplayCount](love.window.getdisplaycount \"love.window.getDisplayCount\")                      | Gets the number of connected monitors.                                                                                                                                       | 0.9.0  |        |\n| [love.window.getDisplayName](love.window.getdisplayname \"love.window.getDisplayName\")                         | Gets the name of a display.                                                                                                                                                  | 0.9.2  |        |\n| [love.window.getDisplayOrientation](love.window.getdisplayorientation \"love.window.getDisplayOrientation\")    | Gets current device display orientation.                                                                                                                                     | 11.3   |        |\n| [love.window.getFullscreen](love.window.getfullscreen \"love.window.getFullscreen\")                            | Gets whether the window is fullscreen.                                                                                                                                       | 0.9.0  |        |\n| [love.window.getFullscreenModes](love.window.getfullscreenmodes \"love.window.getFullscreenModes\")             | Gets a list of supported fullscreen modes.                                                                                                                                   | 0.9.0  |        |\n| [love.window.getHeight](love.window.getheight \"love.window.getHeight\")                                        | Gets the height of the window.                                                                                                                                               | 0.9.0  | 0.10.0 |\n| [love.window.getIcon](love.window.geticon \"love.window.getIcon\")                                              | Gets the window icon.                                                                                                                                                        | 0.9.0  |        |\n| [love.window.getMode](love.window.getmode \"love.window.getMode\")                                              | Gets the display mode and properties of the window.                                                                                                                          | 0.9.0  |        |\n| [love.window.getPixelScale](love.window.getpixelscale \"love.window.getPixelScale\")                            | Gets the DPI scale factor associated with the window.                                                                                                                        | 0.9.1  | 11.0   |\n| [love.window.getPosition](love.window.getposition \"love.window.getPosition\")                                  | Gets the position of the window on the screen.                                                                                                                               | 0.9.2  |        |\n| [love.window.getSafeArea](love.window.getsafearea \"love.window.getSafeArea\")                                  | Gets unobstructed area inside the window.                                                                                                                                    | 11.3   |        |\n| [love.window.getTitle](love.window.gettitle \"love.window.getTitle\")                                           | Gets the window title.                                                                                                                                                       | 0.9.0  |        |\n| [love.window.getVSync](love.window.getvsync \"love.window.getVSync\")                                           | Gets current vsync value.                                                                                                                                                    | 11.3   |        |\n| [love.window.getWidth](love.window.getwidth \"love.window.getWidth\")                                           | Gets the width of the window.                                                                                                                                                | 0.9.0  | 0.10.0 |\n| [love.window.hasFocus](love.window.hasfocus \"love.window.hasFocus\")                                           | Checks if the game window has keyboard focus.                                                                                                                                | 0.9.0  |        |\n| [love.window.hasMouseFocus](love.window.hasmousefocus \"love.window.hasMouseFocus\")                            | Checks if the game window has mouse focus.                                                                                                                                   | 0.9.0  |        |\n| [love.window.isCreated](love.window.iscreated \"love.window.isCreated\")                                        | Checks if the window has been created.                                                                                                                                       | 0.9.0  | 0.10.0 |\n| [love.window.isDisplaySleepEnabled](love.window.isdisplaysleepenabled \"love.window.isDisplaySleepEnabled\")    | Gets whether the display is allowed to sleep while the program is running.                                                                                                   | 0.10.0 |        |\n| [love.window.isMaximized](love.window.ismaximized \"love.window.isMaximized\")                                  | Gets whether the Window is currently [maximized](love.window.maximize \"love.window.maximize\").                                                                               | 0.10.2 |        |\n| [love.window.isMinimized](love.window.isminimized \"love.window.isMinimized\")                                  | Gets whether the Window is currently [minimized](love.window.minimize \"love.window.minimize\").                                                                               | 11.0   |        |\n| [love.window.isOpen](love.window.isopen \"love.window.isOpen\")                                                 | Checks if the window is open.                                                                                                                                                | 0.10.0 |        |\n| [love.window.isVisible](love.window.isvisible \"love.window.isVisible\")                                        | Checks if the game window is visible.                                                                                                                                        | 0.9.0  |        |\n| [love.window.maximize](love.window.maximize \"love.window.maximize\")                                           | Makes the window as large as possible.                                                                                                                                       | 0.10.0 |        |\n| [love.window.minimize](love.window.minimize \"love.window.minimize\")                                           | Minimizes the window to the system's task bar / dock.                                                                                                                        | 0.9.2  |        |\n| [love.window.requestAttention](love.window.requestattention \"love.window.requestAttention\")                   | Causes the window to request the attention of the user if it is not in the foreground.                                                                                       | 0.10.0 |        |\n| [love.window.restore](love.window.restore \"love.window.restore\")                                              | Restores the size and position of the window if it was [minimized](love.window.minimize \"love.window.minimize\") or [maximized](love.window.maximize \"love.window.maximize\"). | 11.0   |        |\n| [love.window.setDisplaySleepEnabled](love.window.setdisplaysleepenabled \"love.window.setDisplaySleepEnabled\") | Sets whether the display is allowed to sleep while the program is running.                                                                                                   | 0.10.0 |        |\n| [love.window.setFullscreen](love.window.setfullscreen \"love.window.setFullscreen\")                            | Enters or exits fullscreen.                                                                                                                                                  | 0.9.0  |        |\n| [love.window.setIcon](love.window.seticon \"love.window.setIcon\")                                              | Sets the window icon.                                                                                                                                                        | 0.9.0  |        |\n| [love.window.setMode](love.window.setmode \"love.window.setMode\")                                              | Sets the display mode and properties of the window.                                                                                                                          | 0.9.0  |        |\n| [love.window.setPosition](love.window.setposition \"love.window.setPosition\")                                  | Sets the position of the window on the screen.                                                                                                                               | 0.9.2  |        |\n| [love.window.setTitle](love.window.settitle \"love.window.setTitle\")                                           | Sets the window title.                                                                                                                                                       | 0.9.0  |        |\n| [love.window.setVSync](love.window.setvsync \"love.window.setVSync\")                                           | Sets vertical synchronization mode.                                                                                                                                          | 11.3   |        |\n| [love.window.showMessageBox](love.window.showmessagebox \"love.window.showMessageBox\")                         | Displays a message box above the love window.                                                                                                                                | 0.9.2  |        |\n| [love.window.toPixels](love.window.topixels \"love.window.toPixels\")                                           | Converts a number from density-independent units to pixels.                                                                                                                  | 0.9.2  |        |\n| [love.window.updateMode](love.window.updatemode \"love.window.updateMode\")                                     | Sets the display mode and properties of the window, without modifying unspecified properties.                                                                                | 11.0   |        |\n\n## Enums\n\n|                                                               |                                      |       |     |\n|---------------------------------------------------------------|--------------------------------------|-------|-----|\n| [DisplayOrientation](displayorientation \"DisplayOrientation\") | Types of device display orientation. | 11.3  |     |\n| [FullscreenType](fullscreentype \"FullscreenType\")             | Types of fullscreen modes.           | 0.9.0 |     |\n| [MessageBoxType](messageboxtype \"MessageBoxType\")             | Types of message box dialogs.        | 0.9.2 |     |\n\n## See Also\n\n- [love](love \"love\")\n- [love.resize](love.resize \"love.resize\")\n- [love.focus](love.focus \"love.focus\")\n- [love.mousefocus](love.mousefocus \"love.mousefocus\")\n- [love.visible](love.visible \"love.visible\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window](https://love2d.org/wiki/love.window)"
- name: love.window.close
  id: love.window.close
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.window.close\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nCloses the window. It can be reopened with [love.window.setMode](love.window.setmode \"love.window.setMode\").\n\n[love.graphics](love.graphics \"love.graphics\") functions and objects will cause a hard crash of LÖVE if used while the window is closed.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.window.close( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Notes\n\nThis only close the window and leave LÖVE running in the background. If you want to stop the program, consider [love.event.quit](love.event.quit \"love.event.quit\").\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n- [love.graphics.isActive](love.graphics.isactive \"love.graphics.isActive\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.close](https://love2d.org/wiki/love.window.close)"
- name: love.window.fromPixels
  id: love.window.frompixels
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.window.fromPixels\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nConverts a number from pixels to density-independent units.\n\nThe pixel density inside the window might be greater (or smaller) than the \"size\" of the window. For example on a retina screen in Mac OS X with the `highdpi` [window flag](love.window.setmode \"love.window.setMode\") enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. `love.window.fromPixels(1600)` would return `800` in that case.\n\nThis function converts coordinates from pixels to the size users are expecting them to display at onscreen. [love.window.toPixels](love.window.topixels \"love.window.toPixels\") does the opposite. The `highdpi` window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.\n\nMost LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.\n\n## Function\n\n### Synopsis\n\n``` lua\nvalue = love.window.fromPixels( pixelvalue )\n```\n\n### Arguments\n\n[`number`](number \"number\")` pixelvalue`  \nA number in pixels to convert to density-independent units.\n\n### Returns\n\n[`number`](number \"number\")` value`  \nThe converted number, in density-independent units.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = love.window.fromPixels( px, py )\n```\n\n### Arguments\n\n[`number`](number \"number\")` px`  \nThe x-axis value of a coordinate in pixels.\n\n[`number`](number \"number\")` py`  \nThe y-axis value of a coordinate in pixels.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe converted x-axis value of the coordinate, in density-independent units.\n\n[`number`](number \"number\")` y`  \nThe converted y-axis value of the coordinate, in density-independent units.\n\n## Notes\n\nThe units of [love.graphics.getWidth](love.graphics.getwidth \"love.graphics.getWidth\"), [love.graphics.getHeight](love.graphics.getheight \"love.graphics.getHeight\"), [love.mouse.getPosition](love.mouse.getposition \"love.mouse.getPosition\"), mouse events, [love.touch.getPosition](love.touch.getposition \"love.touch.getPosition\"), and touch events are always in terms of pixels.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.toPixels](love.window.topixels \"love.window.toPixels\")\n- [love.window.getPixelScale](love.window.getpixelscale \"love.window.getPixelScale\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n- [Config Files](love.conf \"Config Files\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.fromPixels](https://love2d.org/wiki/love.window.fromPixels)"
- name: love.window.getDesktopDimensions
  id: love.window.getdesktopdimensions
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.window.getDesktopDimensions\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the width and height of the desktop.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth, height = love.window.getDesktopDimensions( display )\n```\n\n### Arguments\n\n[`number`](number \"number\")` display (1)`  \nThe index of the display, if multiple monitors are available.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the desktop.\n\n[`number`](number \"number\")` height`  \nThe height of the desktop.\n\n## Examples\n\n### Show the resolution of the monitor the window is currently in\n\n``` lua\nfunction love.draw()\n    local _, _, flags = love.window.getMode()\n \n    -- The window's flags contain the index of the monitor it's currently in.\n    local width, height = love.window.getDesktopDimensions(flags.display)\n \n    love.graphics.print((\"display %d: %d x %d\"):format(flags.display, width, height), 4, 10)\nend\n```\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getDesktopDimensions](https://love2d.org/wiki/love.window.getDesktopDimensions)"
- name: love.window.getDimensions
  id: love.window.getdimensions
  summary: Available since LÖVE 0.9.0 and removed in LÖVE 0.10.0 Use love.graphics.getDimensions or love.window.getMode instead
  description: "# love.window.getDimensions\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [love.graphics.getDimensions](love.graphics.getdimensions \"love.graphics.getDimensions\") or [love.window.getMode](love.window.getmode \"love.window.getMode\") instead.\n\nGets the width and height of the window.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth, height = love.window.getDimensions( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the window.\n\n[`number`](number \"number\")` height`  \nThe height of the window.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.getWidth](love.window.getwidth \"love.window.getWidth\")\n- [love.window.getHeight](love.window.getheight \"love.window.getHeight\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getDimensions](https://love2d.org/wiki/love.window.getDimensions)"
- name: love.window.getDisplayCount
  id: love.window.getdisplaycount
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.window.getDisplayCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the number of connected monitors.\n\n## Function\n\n### Synopsis\n\n``` lua\ncount = love.window.getDisplayCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` count`  \nThe number of currently connected displays.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n- [love.window.getMode](love.window.getmode \"love.window.getMode\")\n- [love.window.getFullscreenModes](love.window.getfullscreenmodes \"love.window.getFullscreenModes\")\n- [love.window.getDesktopDimensions](love.window.getdesktopdimensions \"love.window.getDesktopDimensions\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getDisplayCount](https://love2d.org/wiki/love.window.getDisplayCount)"
- name: love.window.getDisplayName
  id: love.window.getdisplayname
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.window.getDisplayName\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets the name of a display.\n\n## Function\n\n### Synopsis\n\n``` lua\nname = love.window.getDisplayName( displayindex )\n```\n\n### Arguments\n\n[`number`](number \"number\")` displayindex (1)`  \nThe index of the display to get the name of.\n\n### Returns\n\n[`string`](string \"string\")` name`  \nThe name of the specified display.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.getDisplayCount](love.window.getdisplaycount \"love.window.getDisplayCount\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getDisplayName](https://love2d.org/wiki/love.window.getDisplayName)"
- name: love.window.getDisplayOrientation
  id: love.window.getdisplayorientation
  summary: Available since LÖVE 11.3 This function is not supported in earlier versions
  description: "# love.window.getDisplayOrientation\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis function is not supported in earlier versions.\n\nGets current device display orientation.\n\n## Function\n\n### Synopsis\n\n``` lua\norientation = love.window.getDisplayOrientation( index )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index (nil)`  \nDisplay index to get its display orientation, or nil for default display index.\n\n### Returns\n\n[`DisplayOrientation`](displayorientation \"DisplayOrientation\")` orientation`  \nCurrent device display orientation.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [DisplayOrientation](displayorientation \"DisplayOrientation\")\n- [love.displayrotated](love.displayrotated \"love.displayrotated\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getDisplayOrientation](https://love2d.org/wiki/love.window.getDisplayOrientation)"
- name: love.window.getDPIScale
  id: love.window.getdpiscale
  summary: Available since LÖVE 11.0 This function replaces love.window.getPixelScale
  description: "# love.window.getDPIScale\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function replaces [love.window.getPixelScale](love.window.getpixelscale \"love.window.getPixelScale\").\n\nGets the DPI scale factor associated with the window.\n\nThe pixel density inside the window might be greater (or smaller) than the \"size\" of the window. For example on a retina screen in Mac OS X with the `highdpi` [window flag](love.window.setmode \"love.window.setMode\") enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. `love.window.getDPIScale()` would return `2.0` in that case.\n\nThe [love.window.fromPixels](love.window.frompixels \"love.window.fromPixels\") and [love.window.toPixels](love.window.topixels \"love.window.toPixels\") functions can also be used to convert between units.\n\nThe `highdpi` window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nscale = love.window.getDPIScale( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` scale`  \nThe pixel scale factor associated with the window.\n\n## Notes\n\nThe units of [love.graphics.getWidth](love.graphics.getwidth \"love.graphics.getWidth\"), [love.graphics.getHeight](love.graphics.getheight \"love.graphics.getHeight\"), [love.mouse.getPosition](love.mouse.getposition \"love.mouse.getPosition\"), mouse events, [love.touch.getPosition](love.touch.getposition \"love.touch.getPosition\"), and touch events are always in DPI-scaled units in LOVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")+, unless the `usedpiscale` flag is set to false in [love.window.setMode](love.window.setmode \"love.window.setMode\") or [love.conf](love.conf \"love.conf\").\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.toPixels](love.window.topixels \"love.window.toPixels\")\n- [love.window.fromPixels](love.window.frompixels \"love.window.fromPixels\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n- [Config Files](love.conf \"Config Files\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getDPIScale](https://love2d.org/wiki/love.window.getDPIScale)"
- name: love.window.getFullscreen
  id: love.window.getfullscreen
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.window.getFullscreen\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the window is fullscreen.\n\n## Function\n\n### Synopsis\n\n``` lua\nfullscreen, fstype = love.window.getFullscreen( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` fullscreen`  \nTrue if the window is fullscreen, false otherwise.\n\n[`FullscreenType`](fullscreentype \"FullscreenType\")` fstype`  \nThe type of fullscreen mode used.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.setFullscreen](love.window.setfullscreen \"love.window.setFullscreen\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getFullscreen](https://love2d.org/wiki/love.window.getFullscreen)"
- name: love.window.getFullscreenModes
  id: love.window.getfullscreenmodes
  summary: Available since LÖVE 0.9.0 Moved from love.graphics.getModes
  description: "# love.window.getFullscreenModes\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nMoved from [love.graphics.getModes](love.graphics.getmodes \"love.graphics.getModes\").\n\n  \nGets a list of supported fullscreen modes.\n\n## Function\n\n### Synopsis\n\n``` lua\nmodes = love.window.getFullscreenModes( display )\n```\n\n### Arguments\n\n[`number`](number \"number\")` display (1)`  \nThe index of the display, if multiple monitors are available.\n\n### Returns\n\n[`table`](table \"table\")` modes`  \nA table of width/height pairs. (Note that this may not be in order.)\n\n## Examples\n\n### Format of the returned table\n\n``` lua\nmodes = love.window.getFullscreenModes()\n \n-- modes = {\n--  { width = 320, height = 240 },\n--  { width = 640, height = 480 },\n--  { width = 800, height = 600 },\n--  { width = 1024, height = 768 },\n--  ...\n-- }\n```\n\n### Sort table to ensure it is in order\n\n``` lua\nmodes = love.window.getFullscreenModes()\ntable.sort(modes, function(a, b) return a.width*a.height < b.width*b.height end)   -- sort from smallest to largest\n```\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getFullscreenModes](https://love2d.org/wiki/love.window.getFullscreenModes)"
- name: love.window.getHeight
  id: love.window.getheight
  summary: Available since LÖVE 0.9.0 and removed in LÖVE 0.10.0 Use love.graphics.getHeight or love.window.getMode instead
  description: "# love.window.getHeight\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [love.graphics.getHeight](love.graphics.getheight \"love.graphics.getHeight\") or [love.window.getMode](love.window.getmode \"love.window.getMode\") instead.\n\nGets the height of the window.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = love.window.getHeight( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nThe height of the window.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.getWidth](love.window.getwidth \"love.window.getWidth\")\n- [love.window.getDimensions](love.window.getdimensions \"love.window.getDimensions\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getHeight](https://love2d.org/wiki/love.window.getHeight)"
- name: love.window.getIcon
  id: love.window.geticon
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.window.getIcon\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the window icon.\n\n## Function\n\n### Synopsis\n\n``` lua\nimagedata = love.window.getIcon( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`ImageData`](imagedata \"ImageData\")` imagedata`  \nThe window icon imagedata, or nil if no icon has been set with [love.window.setIcon](love.window.seticon \"love.window.setIcon\").\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.setIcon](love.window.seticon \"love.window.setIcon\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getIcon](https://love2d.org/wiki/love.window.getIcon)"
- name: love.window.getMode
  id: love.window.getmode
  summary: Available since LÖVE 0.9.0 Moved from love.graphics.getMode
  description: "# love.window.getMode\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nMoved from [love.graphics.getMode](love.graphics.getmode \"love.graphics.getMode\").\n\nGets the display mode and properties of the window.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth, height, flags = love.window.getMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nWindow width.\n\n[`number`](number \"number\")` height`  \nWindow height.\n\n[`table`](table \"table\")` flags`  \nTable with the window properties:\n\n[`boolean`](boolean \"boolean\")` fullscreen`  \nFullscreen (true), or windowed (false).\n\n[`FullscreenType`](fullscreentype \"FullscreenType\")` fullscreentype`  \nThe type of fullscreen mode used.\n\n[`number`](number \"number\")` vsync`  \n1 if the graphics framerate is synchronized with the monitor's refresh rate, 0 otherwise.\n\n[`number`](number \"number\")` msaa`  \nThe number of antialiasing samples used (0 if MSAA is disabled).\n\n[`boolean`](boolean \"boolean\")` resizable`  \nTrue if the window is resizable in windowed mode, false otherwise.\n\n[`boolean`](boolean \"boolean\")` borderless`  \nTrue if the window is borderless in windowed mode, false otherwise.\n\n[`boolean`](boolean \"boolean\")` centered`  \nTrue if the window is centered in windowed mode, false otherwise.\n\n[`number`](number \"number\")` display`  \nThe index of the display the window is currently in, if multiple monitors are available.\n\n[`number`](number \"number\")` minwidth`  \nThe minimum width of the window, if it's resizable.\n\n[`number`](number \"number\")` minheight`  \nThe minimum height of the window, if it's resizable.\n\n[`boolean`](boolean \"boolean\")` highdpi` Available since 0.9.1  \nTrue if [high-dpi mode](love.window.getpixelscale \"love.window.getPixelScale\") is allowed on Retina displays in OS X. Does nothing on non-Retina displays.\n\n  \n\n[`number`](number \"number\")` refreshrate` Available since 0.9.2  \nThe refresh rate of the screen's current display mode, in Hz. May be 0 if the value can't be determined.\n\n[`number`](number \"number\")` x` Available since 0.9.2  \nThe x-coordinate of the window's position in its current display.\n\n[`number`](number \"number\")` y` Available since 0.9.2  \nThe y-coordinate of the window's position in its current display.\n\n  \n\n[`boolean`](boolean \"boolean\")` srgb` Available since 0.9.1 and removed in LÖVE 0.10.0  \nRemoved in [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") (use [love.graphics.isGammaCorrect](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") instead). True if sRGB gamma correction is applied when drawing to the screen.\n\n  \n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getMode](https://love2d.org/wiki/love.window.getMode)"
- name: love.window.getPixelScale
  id: love.window.getpixelscale
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# love.window.getPixelScale\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function has been renamed to [love.window.getDPIScale](love.window.getdpiscale \"love.window.getDPIScale\").\n\nGets the DPI scale factor associated with the window.\n\nThe pixel density inside the window might be greater (or smaller) than the \"size\" of the window. For example on a retina screen in Mac OS X with the `highdpi` [window flag](love.window.setmode \"love.window.setMode\") enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. `love.window.getPixelScale()` would return `2.0` in that case.\n\nThe [love.window.fromPixels](love.window.frompixels \"love.window.fromPixels\") and [love.window.toPixels](love.window.topixels \"love.window.toPixels\") functions can also be used to convert between units.\n\nThe `highdpi` window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nscale = love.window.getPixelScale( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` scale`  \nThe pixel scale factor associated with the window.\n\n## Notes\n\nThe units of [love.graphics.getWidth](love.graphics.getwidth \"love.graphics.getWidth\"), [love.graphics.getHeight](love.graphics.getheight \"love.graphics.getHeight\"), [love.mouse.getPosition](love.mouse.getposition \"love.mouse.getPosition\"), mouse events, [love.touch.getPosition](love.touch.getposition \"love.touch.getPosition\"), and touch events are always in terms of pixels.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.toPixels](love.window.topixels \"love.window.toPixels\")\n- [love.window.fromPixels](love.window.frompixels \"love.window.fromPixels\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n- [Config Files](love.conf \"Config Files\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getPixelScale](https://love2d.org/wiki/love.window.getPixelScale)"
- name: love.window.getPosition
  id: love.window.getposition
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.window.getPosition\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets the position of the window on the screen.\n\nThe window position is in the coordinate space of the display it is currently in.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y, display = love.window.getPosition( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x-coordinate of the window's position.\n\n[`number`](number \"number\")` y`  \nThe y-coordinate of the window's position.\n\n[`number`](number \"number\")` display`  \nThe index of the display that the window is in.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.setPosition](love.window.setposition \"love.window.setPosition\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getPosition](https://love2d.org/wiki/love.window.getPosition)"
- name: love.window.getSafeArea
  id: love.window.getsafearea
  summary: Available since LÖVE 11.3 This function is not supported in earlier versions
  description: "# love.window.getSafeArea\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis function is not supported in earlier versions.\n\nGets area inside the window which is known to be unobstructed by a system title bar, the iPhone X notch, etc. Useful for making sure UI elements can be seen by the user.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y, w, h = love.window.getSafeArea( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nStarting position of safe area (x-axis).\n\n[`number`](number \"number\")` y`  \nStarting position of safe area (y-axis).\n\n[`number`](number \"number\")` w`  \nWidth of safe area.\n\n[`number`](number \"number\")` h`  \nHeight of safe area.\n\n## Notes\n\nValues returned are in DPI-scaled units (the same coordinate system as most other window-related APIs), not in pixels.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getSafeArea](https://love2d.org/wiki/love.window.getSafeArea)"
- name: love.window.getTitle
  id: love.window.gettitle
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.window.getTitle\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\n  \nGets the window title.\n\n## Function\n\n### Synopsis\n\n``` lua\ntitle = love.window.getTitle( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` title`  \nThe current window title.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.setTitle](love.window.settitle \"love.window.setTitle\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getTitle](https://love2d.org/wiki/love.window.getTitle)"
- name: love.window.getVSync
  id: love.window.getvsync
  summary: Available since LÖVE 11.3 This function is not supported in earlier versions
  description: "# love.window.getVSync\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis function is not supported in earlier versions.\n\nGets current vertical synchronization (vsync).\n\n## Function\n\n### Synopsis\n\n``` lua\nvsync = love.window.getVSync( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` vsync`  \nCurrent vsync status. 1 if enabled, 0 if disabled, and -1 for adaptive vsync.\n\n## Notes\n\nThis can be less expensive alternative to [love.window.getMode](love.window.getmode \"love.window.getMode\") if you want to get current vsync status.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.setVSync](love.window.setvsync \"love.window.setVSync\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getVSync](https://love2d.org/wiki/love.window.getVSync)"
- name: love.window.getWidth
  id: love.window.getwidth
  summary: Available since LÖVE 0.9.0 and removed in LÖVE 0.10.0 Use love.graphics.getWidth or love.window.getMode instead
  description: "# love.window.getWidth\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [love.graphics.getWidth](love.graphics.getwidth \"love.graphics.getWidth\") or [love.window.getMode](love.window.getmode \"love.window.getMode\") instead.\n\nGets the width of the window.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth = love.window.getWidth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the window.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.getHeight](love.window.getheight \"love.window.getHeight\")\n- [love.window.getDimensions](love.window.getdimensions \"love.window.getDimensions\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.getWidth](https://love2d.org/wiki/love.window.getWidth)"
- name: love.window.hasFocus
  id: love.window.hasfocus
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.window.hasFocus\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nChecks if the game window has keyboard focus.\n\n## Function\n\n### Synopsis\n\n``` lua\nfocus = love.window.hasFocus( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` focus`  \nTrue if the window has the focus or false if not.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.hasFocus](https://love2d.org/wiki/love.window.hasFocus)"
- name: love.window.hasMouseFocus
  id: love.window.hasmousefocus
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.window.hasMouseFocus\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nChecks if the game window has mouse focus.\n\n## Function\n\n### Synopsis\n\n``` lua\nfocus = love.window.hasMouseFocus( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` focus`  \nTrue if the window has mouse focus or false if not.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.hasMouseFocus](https://love2d.org/wiki/love.window.hasMouseFocus)"
- name: love.window.isCreated
  id: love.window.iscreated
  summary: Available since LÖVE 0.9.0 and removed in LÖVE 0.10.0 This function has been renamed to love.window.isOpen
  description: "# love.window.isCreated\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function has been renamed to [love.window.isOpen](love.window.isopen \"love.window.isOpen\").\n\n  \nChecks if the window has been created.\n\n## Function\n\n### Synopsis\n\n``` lua\ncreated = love.window.isCreated( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` created`  \nTrue if the window has been created, false otherwise.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.isCreated](https://love2d.org/wiki/love.window.isCreated)"
- name: love.window.isDisplaySleepEnabled
  id: love.window.isdisplaysleepenabled
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.window.isDisplaySleepEnabled\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the display is allowed to sleep while the program is running.\n\nDisplay sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = love.window.isDisplaySleepEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nTrue if system display sleep is enabled / allowed, false otherwise.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.setDisplaySleepEnabled](love.window.setdisplaysleepenabled \"love.window.setDisplaySleepEnabled\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.isDisplaySleepEnabled](https://love2d.org/wiki/love.window.isDisplaySleepEnabled)"
- name: love.window.isMaximized
  id: love.window.ismaximized
  summary: Available since LÖVE 0.10.2 This function is not supported in earlier versions
  description: "# love.window.isMaximized\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Window is currently [maximized](love.window.maximize \"love.window.maximize\").\n\nThe window can be maximized if it is not fullscreen and is resizable, and either the user has pressed the window's Maximize button or [love.window.maximize](love.window.maximize \"love.window.maximize\") has been called.\n\n## Function\n\n### Synopsis\n\n``` lua\nmaximized = love.window.isMaximized( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` maximized`  \nTrue if the window is currently maximized in windowed mode, false otherwise.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.maximize](love.window.maximize \"love.window.maximize\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.isMaximized](https://love2d.org/wiki/love.window.isMaximized)"
- name: love.window.isMinimized
  id: love.window.isminimized
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.window.isMinimized\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Window is currently [minimized](love.window.minimize \"love.window.minimize\").\n\n## Function\n\n### Synopsis\n\n``` lua\nminimized = love.window.isMinimized( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` minimized`  \nTrue if the window is currently minimized, false otherwise.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.minimize](love.window.minimize \"love.window.minimize\")\n- [love.window.restore](love.window.restore \"love.window.restore\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.isMinimized](https://love2d.org/wiki/love.window.isMinimized)"
- name: love.window.isOpen
  id: love.window.isopen
  summary: Available since LÖVE 0.10.0 This function has been renamed from love.window.isCreated
  description: "# love.window.isOpen\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function has been renamed from [love.window.isCreated](love.window.iscreated \"love.window.isCreated\").\n\n  \nChecks if the window is open.\n\n## Function\n\n### Synopsis\n\n``` lua\nopen = love.window.isOpen( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` open`  \nTrue if the window is open, false otherwise.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.isCreated](love.window.iscreated \"love.window.isCreated\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.isOpen](https://love2d.org/wiki/love.window.isOpen)"
- name: love.window.isVisible
  id: love.window.isvisible
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.window.isVisible\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nChecks if the game window is visible.\n\nThe window is considered visible if it's not minimized and the program isn't hidden.\n\n## Function\n\n### Synopsis\n\n``` lua\nvisible = love.window.isVisible( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` visible`  \nTrue if the window is visible or false if not.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.visible](love.visible \"love.visible\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.isVisible](https://love2d.org/wiki/love.window.isVisible)"
- name: love.window.maximize
  id: love.window.maximize
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.window.maximize\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nMakes the window as large as possible.\n\nThis function has no effect if the window isn't [resizable](love.window.setmode \"love.window.setMode\"), since it essentially programmatically presses the window's \"maximize\" button.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.window.maximize( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.maximize](https://love2d.org/wiki/love.window.maximize)"
- name: love.window.minimize
  id: love.window.minimize
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.window.minimize\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nMinimizes the window to the system's task bar / dock.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.window.minimize( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.minimize](https://love2d.org/wiki/love.window.minimize)"
- name: love.window.requestAttention
  id: love.window.requestattention
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.window.requestAttention\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nCauses the window to request the attention of the user if it is not in the foreground.\n\nIn Windows the taskbar icon will flash, and in OS X the dock icon will bounce.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.window.requestAttention( continuous )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` continuous (false)`  \nWhether to continuously request attention until the window becomes active, or to do it only once.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.requestAttention](https://love2d.org/wiki/love.window.requestAttention)"
- name: love.window.restore
  id: love.window.restore
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.window.restore\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nRestores the size and position of the window if it was [minimized](love.window.minimize \"love.window.minimize\") or [maximized](love.window.maximize \"love.window.maximize\").\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.window.restore( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.minimize](love.window.minimize \"love.window.minimize\")\n- [love.window.maximize](love.window.maximize \"love.window.maximize\")\n- [love.window.isMinimized](love.window.isminimized \"love.window.isMinimized\")\n- [love.window.isMaximized](love.window.ismaximized \"love.window.isMaximized\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.restore](https://love2d.org/wiki/love.window.restore)"
- name: love.window.setDisplaySleepEnabled
  id: love.window.setdisplaysleepenabled
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# love.window.setDisplaySleepEnabled\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nSets whether the display is allowed to sleep while the program is running.\n\nDisplay sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.window.setDisplaySleepEnabled( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue to enable system display sleep, false to disable it.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.isDisplaySleepEnabled](love.window.isdisplaysleepenabled \"love.window.isDisplaySleepEnabled\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.setDisplaySleepEnabled](https://love2d.org/wiki/love.window.setDisplaySleepEnabled)"
- name: love.window.setFullscreen
  id: love.window.setfullscreen
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.window.setFullscreen\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nEnters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.window.setFullscreen( fullscreen )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` fullscreen`  \nWhether to enter or exit fullscreen mode.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if an attempt to enter fullscreen was successful, false otherwise.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.window.setFullscreen( fullscreen, fstype )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` fullscreen`  \nWhether to enter or exit fullscreen mode.\n\n[`FullscreenType`](fullscreentype \"FullscreenType\")` fstype`  \nThe type of fullscreen mode to use.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if an attempt to enter fullscreen was successful, false otherwise.\n\n## Notes\n\nIf fullscreen mode is entered and the window size doesn't match one of the monitor's display modes (in normal fullscreen mode) or the window size doesn't match the desktop size (in 'desktop' fullscreen mode), the window will be resized appropriately. The window will revert back to its original size again when fullscreen mode is exited using this function.\n\n## Examples\n\nMake the window fullscreen in desktop mode.\n\n``` lua\nfunction love.load()\n    love.window.setFullscreen(true, \"desktop\")\nend\n```\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.getFullscreen](love.window.getfullscreen \"love.window.getFullscreen\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n- [love.resize](love.resize \"love.resize\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.setFullscreen](https://love2d.org/wiki/love.window.setFullscreen)"
- name: love.window.setIcon
  id: love.window.seticon
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.window.setIcon\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the window icon until the game is quit. Not all operating systems support very large icon images.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.window.setIcon( imagedata )\n```\n\n### Arguments\n\n[`ImageData`](imagedata \"ImageData\")` imagedata`  \nThe window icon image.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the icon has been set successfully.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.getIcon](love.window.geticon \"love.window.getIcon\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.setIcon](https://love2d.org/wiki/love.window.setIcon)"
- name: love.window.setMode
  id: love.window.setmode
  summary: Available since LÖVE 0.9.0 Moved from love.graphics.setMode
  description: "# love.window.setMode\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nMoved from [love.graphics.setMode](love.graphics.setmode \"love.graphics.setMode\").\n\n  \nSets the display mode and properties of the window.\n\nIf width or height is 0, setMode will use the width and height of the desktop.\n\nChanging the display mode may have side effects: for example, [canvases](canvas \"Canvas\") will be cleared and values sent to shaders with [Shader:send](shader-send \"Shader:send\") will be erased. Make sure to save the contents of [canvases](canvas \"Canvas\") beforehand or re-draw to them afterward if you need to.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.window.setMode( width, height, flags )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nDisplay width.\n\n[`number`](number \"number\")` height`  \nDisplay height.\n\n[`table`](table \"table\")` flags`  \nThe flags table with the options:\n\n[`boolean`](boolean \"boolean\")` fullscreen (false)`  \nFullscreen (true), or windowed (false).\n\n[`FullscreenType`](fullscreentype \"FullscreenType\")` fullscreentype (\"desktop\")`  \nThe type of fullscreen to use. This defaults to \"normal\" in [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") through [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and to \"desktop\" in [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") and older.\n\n[`number`](number \"number\")` vsync (1)`  \nEnables or disables vertical synchronisation ('vsync'): **1** to enable vsync, **0** to disable it, and **-1** to use adaptive vsync (where supported). Prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\") this was a boolean flag, rather than a number.\n\n[`number`](number \"number\")` msaa (0)`  \nThe number of antialiasing samples.\n\n[`boolean`](boolean \"boolean\")` stencil (true)`  \nWhether a stencil buffer should be allocated. If true, the stencil buffer will have 8 bits.\n\n[`number`](number \"number\")` depth (0)`  \nThe number of bits in the depth buffer.\n\n[`boolean`](boolean \"boolean\")` resizable (false)`  \nTrue if the window should be resizable in windowed mode, false otherwise.\n\n[`boolean`](boolean \"boolean\")` borderless (false)`  \nTrue if the window should be borderless in windowed mode, false otherwise.\n\n[`boolean`](boolean \"boolean\")` centered (true)`  \nTrue if the window should be centered in windowed mode, false otherwise.\n\n[`number`](number \"number\")` display (1)`  \nThe index of the display to show the window in, if multiple monitors are available.\n\n[`number`](number \"number\")` minwidth (1)`  \nThe minimum width of the window, if it's resizable. Cannot be less than 1.\n\n[`number`](number \"number\")` minheight (1)`  \nThe minimum height of the window, if it's resizable. Cannot be less than 1.\n\n[`boolean`](boolean \"boolean\")` highdpi (false)` Available since 0.9.1  \nTrue if [high-dpi mode](love.window.getdpiscale \"love.window.getDPIScale\") should be used on Retina displays in macOS and iOS. Does nothing on non-Retina displays. This is always enabled on Android.\n\n  \n\n[`number`](number \"number\")` x (nil)` Available since 0.9.2  \nThe x-coordinate of the window's position in the specified display.\n\n[`number`](number \"number\")` y (nil)` Available since 0.9.2  \nThe y-coordinate of the window's position in the specified display.\n\n  \n\n[`boolean`](boolean \"boolean\")` usedpiscale (true)` Available since 11.3  \nDisables LOVE's automatic DPI scaling on high-DPI displays when false. This only has an effect when the `highdpi` flag is set to true, since the OS (rather than LOVE) takes care of everything otherwise.\n\n  \n\n[`boolean`](boolean \"boolean\")` srgb (false)` Available since 0.9.1 and removed in LÖVE 0.10.0  \nRemoved in [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") (set t.gammacorrect in [conf.lua](love.conf \"conf.lua\") instead). True if sRGB gamma correction should be applied when drawing to the screen.\n\n  \n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if successful, false otherwise.\n\n## Notes\n\n[love.conf](love.conf#window \"love.conf\") may have more extensive documentation on the behavior of each window flag.\n\n- If fullscreen is enabled and the width or height is not supported (see [love.window.getFullscreenModes](love.window.getfullscreenmodes \"love.window.getFullscreenModes\")), the window may be resized to the closest available resolution and a [resize](love.resize \"love.resize\") event will be triggered.\n\n&nbsp;\n\n- If the fullscreen type is \"desktop\", then the window will be automatically resized to the desktop resolution.\n\n&nbsp;\n\n- If the width and height is bigger than or equal to the desktop dimensions (this includes setting both to 0) and fullscreen is set to false, it will appear \"visually\" fullscreen, but it's not true fullscreen and [love.window.getFullscreen](love.window.getfullscreen \"love.window.getFullscreen\") will return false in this case. This also applies to [love.window.updateMode](love.window.updatemode \"love.window.updateMode\") as well.\n\n&nbsp;\n\n- If you have disabled the window in [conf.lua](love.conf \"Config Files\") (i.e. `t.window = false`) and use this function to manually create the window, then you must not call any other [love.graphics](love.graphics \"love.graphics\").\\* function before this one. Doing so will result in undefined behavior and/or crashes because OpenGL cannot function properly without a window.\n\n&nbsp;\n\n- In Android, the aspect ratio deducted from the width and the height is used to determine whetever the game run in landscape or portrait.\n\n&nbsp;\n\n- Transparent backgrounds are currently not supported.\n\n## Examples\n\n### Make the window resizable with vsync disabled and a minimum width and height set.\n\n``` lua\nfunction love.load()\n    love.window.setMode(800, 600, {resizable=true, vsync=false, minwidth=400, minheight=300})\nend\n```\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.getMode](love.window.getmode \"love.window.getMode\")\n- [love.window.getFullscreenModes](love.window.getfullscreenmodes \"love.window.getFullscreenModes\")\n- [love.resize](love.resize \"love.resize\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.setMode](https://love2d.org/wiki/love.window.setMode)"
- name: love.window.setPosition
  id: love.window.setposition
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.window.setPosition\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nSets the position of the window on the screen.\n\nThe window position is in the coordinate space of the specified display.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.window.setPosition( x, y, display )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-coordinate of the window's position.\n\n[`number`](number \"number\")` y`  \nThe y-coordinate of the window's position.\n\n[`number`](number \"number\")` display (1)`  \nThe index of the display that the new window position is relative to.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.getPosition](love.window.getposition \"love.window.getPosition\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.setPosition](https://love2d.org/wiki/love.window.setPosition)"
- name: love.window.setTitle
  id: love.window.settitle
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.window.setTitle\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\n  \nSets the window title.\n\nConstantly updating the window title can lead to issues on some systems and therefore is discouraged.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.window.setTitle( title )\n```\n\n### Arguments\n\n[`string`](string \"string\")` title`  \nThe new window title.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.getTitle](love.window.gettitle \"love.window.getTitle\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.setTitle](https://love2d.org/wiki/love.window.setTitle)"
- name: love.window.setVSync
  id: love.window.setvsync
  summary: Available since LÖVE 11.3 This function is not supported in earlier versions
  description: "# love.window.setVSync\n\n**Available since LÖVE [11.3](https://love2d.org/wiki/11.3 \"11.3\")**  \nThis function is not supported in earlier versions.\n\nSets vertical synchronization mode.\n\n## Function\n\n### Synopsis\n\n``` lua\nlove.window.setVSync( vsync )\n```\n\n### Arguments\n\n[`number`](number \"number\")` vsync`  \nVSync number: 1 to enable, 0 to disable, and -1 for adaptive vsync.\n\n### Returns\n\nNothing.\n\n## Notes\n\n- Not all graphics drivers support adaptive vsync (-1 value) and values more than 1 (vsync at other intervals). In that case, it will be automatically set to 1.\n- It is recommended to keep vsync activated if you don't know about the possible implications of turning it off.\n- This function doesn't recreate the window, unlike [love.window.setMode](love.window.setmode \"love.window.setMode\") and [love.window.updateMode](love.window.updatemode \"love.window.updateMode\").\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.getVSync](love.window.getvsync \"love.window.getVSync\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.setVSync](https://love2d.org/wiki/love.window.setVSync)"
- name: love.window.showMessageBox
  id: love.window.showmessagebox
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.window.showMessageBox\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nDisplays a message box dialog above the love window. The message box contains a title, optional text, and buttons.\n\nThis function will pause all execution of the main thread until the user has clicked a button to exit the message box. Calling the function from a different thread may cause love to crash.\n\n## Function\n\nDisplays a simple message box with a single 'OK' button.\n\n### Synopsis\n\n``` lua\nsuccess = love.window.showMessageBox( title, message, type, attachtowindow )\n```\n\n### Arguments\n\n[`string`](string \"string\")` title`  \nThe title of the message box.\n\n[`string`](string \"string\")` message`  \nThe text inside the message box.\n\n[`MessageBoxType`](messageboxtype \"MessageBoxType\")` type (\"info\")`  \nThe type of the message box.\n\n[`boolean`](boolean \"boolean\")` attachtowindow (true)`  \nWhether the message box should be attached to the love window or free-floating.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the message box was successfully displayed.\n\n## Function\n\nDisplays a message box with a customized list of buttons.\n\n### Synopsis\n\n``` lua\npressedbutton = love.window.showMessageBox( title, message, buttonlist, type, attachtowindow )\n```\n\n### Arguments\n\n[`string`](string \"string\")` title`  \nThe title of the message box.\n\n[`string`](string \"string\")` message`  \nThe text inside the message box.\n\n[`table`](table \"table\")` buttonlist`  \nA table containing a list of button names to show. The table can also contain the fields `enterbutton` and `escapebutton`, which should be the index of the default button to use when the user presses 'enter' or 'escape', respectively.\n\n[`MessageBoxType`](messageboxtype \"MessageBoxType\")` type (\"info\")`  \nThe type of the message box.\n\n[`boolean`](boolean \"boolean\")` attachtowindow (true)`  \nWhether the message box should be attached to the love window or free-floating.\n\n### Returns\n\n[`number`](number \"number\")` pressedbutton`  \nThe index of the button pressed by the user. May be 0 if the message box dialog was closed without pressing a button.\n\n## Examples\n\n### Display a simple message box if the user's system doesn't support shaders\n\n``` lua\nlocal errortitle = \"Shader support is required for the game to run\"\nlocal errormessage = \"This system is below the minimum system requirements for the game.\\\nIf your graphics drivers aren't up-to-date, try updating them and running the game again.\"\n \nif not love.graphics.isSupported(\"shader\") then\n    love.window.showMessageBox(errortitle, errormessage, \"error\")\nend\n```\n\n### Display a message box with customized buttons\n\n``` lua\nlocal title = \"This is a title\"\nlocal message = \"This is some text\"\nlocal buttons = {\"OK\", \"No!\", \"Help\", escapebutton = 2}\n \nlocal pressedbutton = love.window.showMessageBox(title, message, buttons)\nif pressedbutton == 1 then\n    -- \"OK\" was pressed\nelseif pressedbutton == 2 then\n    -- etc.\nend\n```\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.showMessageBox](https://love2d.org/wiki/love.window.showMessageBox)"
- name: love.window.toggleFullscreen
  id: love.window.togglefullscreen
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# love.window.toggleFullscreen\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nEnters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.window.setFullscreen( fullscreen )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` fullscreen`  \nWhether to enter or exit fullscreen mode.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if an attempt to enter fullscreen was successful, false otherwise.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.window.setFullscreen( fullscreen, fstype )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` fullscreen`  \nWhether to enter or exit fullscreen mode.\n\n[`FullscreenType`](fullscreentype \"FullscreenType\")` fstype`  \nThe type of fullscreen mode to use.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if an attempt to enter fullscreen was successful, false otherwise.\n\n## Notes\n\nIf fullscreen mode is entered and the window size doesn't match one of the monitor's display modes (in normal fullscreen mode) or the window size doesn't match the desktop size (in 'desktop' fullscreen mode), the window will be resized appropriately. The window will revert back to its original size again when fullscreen mode is exited using this function.\n\n## Examples\n\nMake the window fullscreen in desktop mode.\n\n``` lua\nfunction love.load()\n    love.window.setFullscreen(true, \"desktop\")\nend\n```\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.getFullscreen](love.window.getfullscreen \"love.window.getFullscreen\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n- [love.resize](love.resize \"love.resize\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.toggleFullscreen](https://love2d.org/wiki/love.window.toggleFullscreen)"
- name: love.window.toPixels
  id: love.window.topixels
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# love.window.toPixels\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nConverts a number from density-independent units to pixels.\n\nThe pixel density inside the window might be greater (or smaller) than the \"size\" of the window. For example on a retina screen in Mac OS X with the `highdpi` [window flag](love.window.setmode \"love.window.setMode\") enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. `love.window.toPixels(800)` would return `1600` in that case.\n\nThis is used to convert coordinates from the size users are expecting them to display at onscreen to pixels. [love.window.fromPixels](love.window.frompixels \"love.window.fromPixels\") does the opposite. The `highdpi` window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.\n\nMost LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.\n\n## Function\n\n### Synopsis\n\n``` lua\npixelvalue = love.window.toPixels( value )\n```\n\n### Arguments\n\n[`number`](number \"number\")` value`  \nA number in density-independent units to convert to pixels.\n\n### Returns\n\n[`number`](number \"number\")` pixelvalue`  \nThe converted number, in pixels.\n\n## Function\n\n### Synopsis\n\n``` lua\npx, py = love.window.toPixels( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-axis value of a coordinate in density-independent units to convert to pixels.\n\n[`number`](number \"number\")` y`  \nThe y-axis value of a coordinate in density-independent units to convert to pixels.\n\n### Returns\n\n[`number`](number \"number\")` px`  \nThe converted x-axis value of the coordinate, in pixels.\n\n[`number`](number \"number\")` py`  \nThe converted y-axis value of the coordinate, in pixels.\n\n## Notes\n\nThe units of [love.graphics.getWidth](love.graphics.getwidth \"love.graphics.getWidth\"), [love.graphics.getHeight](love.graphics.getheight \"love.graphics.getHeight\"), [love.mouse.getPosition](love.mouse.getposition \"love.mouse.getPosition\"), mouse events, [love.touch.getPosition](love.touch.getposition \"love.touch.getPosition\"), and touch events are always in terms of pixels.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.fromPixels](love.window.frompixels \"love.window.fromPixels\")\n- [love.window.getDPIScale](love.window.getdpiscale \"love.window.getDPIScale\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n- [Config Files](love.conf \"Config Files\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.toPixels](https://love2d.org/wiki/love.window.toPixels)"
- name: love.window.updateMode
  id: love.window.updatemode
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# love.window.updateMode\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\n  \nSets the display mode and properties of the window, without modifying unspecified properties.\n\nIf width or height is 0, updateMode will use the width and height of the desktop.\n\nChanging the display mode may have side effects: for example, [canvases](canvas \"Canvas\") will be cleared. Make sure to save the contents of [canvases](canvas \"Canvas\") beforehand or re-draw to them afterward if you need to.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = love.window.updateMode( width, height, settings )\n```\n\n### Arguments\n\n[`number`](number \"number\")` width`  \nWindow width.\n\n[`number`](number \"number\")` height`  \nWindow height.\n\n[`table`](table \"table\")` settings`  \nThe settings table with the following optional fields. Any field not filled in will use the current value that would be returned by [love.window.getMode](love.window.getmode \"love.window.getMode\").\n\n[`boolean`](boolean \"boolean\")` fullscreen`  \nFullscreen (true), or windowed (false).\n\n[`FullscreenType`](fullscreentype \"FullscreenType\")` fullscreentype`  \nThe type of fullscreen to use.\n\n[`boolean`](boolean \"boolean\")` vsync`  \nTrue if LÖVE should wait for vsync, false otherwise.\n\n[`number`](number \"number\")` msaa`  \nThe number of antialiasing samples.\n\n[`boolean`](boolean \"boolean\")` resizable`  \nTrue if the window should be resizable in windowed mode, false otherwise.\n\n[`boolean`](boolean \"boolean\")` borderless`  \nTrue if the window should be borderless in windowed mode, false otherwise.\n\n[`boolean`](boolean \"boolean\")` centered`  \nTrue if the window should be centered in windowed mode, false otherwise.\n\n[`number`](number \"number\")` display`  \nThe index of the display to show the window in, if multiple monitors are available.\n\n[`number`](number \"number\")` minwidth`  \nThe minimum width of the window, if it's resizable. Cannot be less than 1.\n\n[`number`](number \"number\")` minheight`  \nThe minimum height of the window, if it's resizable. Cannot be less than 1.\n\n[`boolean`](boolean \"boolean\")` highdpi`  \nTrue if [high-dpi mode](love.window.getdpiscale \"love.window.getDPIScale\") should be used on Retina displays in macOS and iOS. Does nothing on non-Retina displays.\n\n[`number`](number \"number\")` x`  \nThe x-coordinate of the window's position in the specified display.\n\n[`number`](number \"number\")` y`  \nThe y-coordinate of the window's position in the specified display.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if successful, false otherwise.\n\n## Notes\n\n- If fullscreen is enabled and the width or height is not supported (see [love.window.getFullscreenModes](love.window.getfullscreenmodes \"love.window.getFullscreenModes\")), the window may be resized to the closest available resolution and a [resize](love.resize \"love.resize\") event will be triggered.\n\n- If the fullscreen type is \"desktop\", then the window will be automatically resized to the desktop resolution.\n\n&nbsp;\n\n- In Android, the aspect ratio deducted from the width and the height is used to determine whetever the game run in landscape or portrait.\n\n&nbsp;\n\n- Transparent backgrounds are currently not supported.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.setMode](love.window.setmode \"love.window.setMode\")\n- [love.window.getMode](love.window.getmode \"love.window.getMode\")\n- [love.window.getFullscreenModes](love.window.getfullscreenmodes \"love.window.getFullscreenModes\")\n- [love.resize](love.resize \"love.resize\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/love.window.updateMode](https://love2d.org/wiki/love.window.updateMode)"
- name: lua-enet
  id: lua-enet
  summary: Available since LÖVE 0.9.0 This module is not supported in earlier versions
  description: "# lua-enet\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis module is not supported in earlier versions.\n\n  \n\nOfficial documentation for lua-enet is available [here](http://leafo.net/lua-enet/). ENet's features are listed on its [homepage](http://enet.bespin.org/Features.html). The official documentation may have typos. The documentation on this wiki reflects Löve's implementation, meaning it should be safe to follow what's written here.\n\nlua-enet is simply some Lua bindings for ENet.\n\nENet's purpose is to provide a relatively thin, simple and robust network communication layer for games on top of UDP (User Datagram Protocol).The primary feature it provides is optional reliable, in-order delivery of packets.\n\nENet omits certain higher level networking features such as authentication, lobbying, server discovery, encryption, or other similar tasks that are particularly application specific so that the library remains flexible, portable, and easily embeddable.\n\n## Types\n\n|                                  |                                                               |\n|----------------------------------|---------------------------------------------------------------|\n| Type                             | Description                                                   |\n| [host](enet.host \"enet.host\")    | An ENet host for communicating with peers.                    |\n| [peer](enet.peer \"enet.peer\")    | An ENet peer which data packets may be sent or received from. |\n| [event](enet.event \"enet.event\") | A simple table containing information on an event.            |\n\n## Functions\n\n|                                                             |                                             |\n|-------------------------------------------------------------|---------------------------------------------|\n| Function                                                    | Description                                 |\n| [host_create](enet.host_create \"enet.host create\")          | Returns a new host.                         |\n| [linked_version](enet.linked_version \"enet.linked version\") | Returns the included ENet's version string. |\n\n## Examples\n\n**server.lua**\n\n``` lua\n-- server.lua\nlocal enet = require \"enet\"\nlocal host = enet.host_create(\"localhost:6789\")\nwhile true do\n  local event = host:service(100)\n  while event do\n    if event.type == \"receive\" then\n      print(\"Got message: \", event.data, event.peer)\n      event.peer:send( \"pong\" )\n    elseif event.type == \"connect\" then\n      print(event.peer, \"connected.\")\n    elseif event.type == \"disconnect\" then\n      print(event.peer, \"disconnected.\")\n    end\n    event = host:service()\n  end\nend\n```\n\n**client.lua**\n\n``` lua\n-- client.lua\nlocal enet = require \"enet\"\nlocal host = enet.host_create()\nlocal server = host:connect(\"localhost:6789\")\nwhile true do\n  local event = host:service(100)\n  while event do\n    if event.type == \"receive\" then\n      print(\"Got message: \", event.data, event.peer)\n      event.peer:send( \"ping\" )\n    elseif event.type == \"connect\" then\n      print(event.peer, \"connected.\")\n      event.peer:send( \"ping\" )\n    elseif event.type == \"disconnect\" then\n      print(event.peer, \"disconnected.\")\n    end\n    event = host:service()\n  end\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n- [socket](socket \"socket\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/lua-enet](https://love2d.org/wiki/lua-enet)"
- name: MatrixLayout
  id: matrixlayout
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# MatrixLayout\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nThe layout of matrix elements (row-major or column-major).\n\n## Constants\n\nrow  \nThe matrix is row-major:\n\n``` lua\nmatrix = {\n    {a, b, c, d}, -- row 1\n    {e, f, g, h}, -- row 2\n    -- etc.\n}\n-- or\nmatrix = {\n    a, b, c, d, -- row 1\n    e, f, g, h, -- row 2\n    -- etc.\n}\n```\n\ncolumn  \nThe matrix is column-major:\n\n``` lua\nmatrix = {\n    {a, b, c, d}, -- column 1\n    {e, f, g, h}, -- column 2\n    -- etc.\n}\n-- or\nmatrix = {\n    a, b, c, d, -- column 1\n    e, f, g, h, -- column 2\n    -- etc.\n}\n```\n\n## See Also\n\n- [Transform](transform \"Transform\")\n- [Shader](shader \"Shader\")\n- [Transform:setMatrix](transform-setmatrix \"Transform:setMatrix\")\n- [Shader:send](shader-send \"Shader:send\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MatrixLayout](https://love2d.org/wiki/MatrixLayout)"
- name: Mesh
  id: mesh
  summary: Available since LÖVE 0.9.0 This type is not supported in earlier versions
  description: "# Mesh\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis type is not supported in earlier versions.\n\nA 2D [polygon mesh](https://en.wikipedia.org/wiki/Polygon_mesh) used for drawing arbitrary textured shapes.\n\n## Constructors\n\n|                                                                        |                         |       |     |\n|------------------------------------------------------------------------|-------------------------|-------|-----|\n| [love.graphics.newMesh](love.graphics.newmesh \"love.graphics.newMesh\") | Creates a new **Mesh**. | 0.9.0 |     |\n\n## Functions\n\n|                                                                                 |                                                                                                                                                                                                 |        |        |\n|---------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------|--------|\n| [Mesh:attachAttribute](mesh-attachattribute \"Mesh:attachAttribute\")             | Attaches a vertex attribute from a different Mesh onto this Mesh, for use when drawing. Optionally allows per-[instance](love.graphics.drawinstanced \"love.graphics.drawInstanced\") attributes. | 0.10.0 |        |\n| [Mesh:detachAttribute](mesh-detachattribute \"Mesh:detachAttribute\")             | Removes a previously [attached](mesh-attachattribute \"Mesh:attachAttribute\") vertex attribute from this Mesh.                                                                                   | 11.0   |        |\n| [Mesh:flush](mesh-flush \"Mesh:flush\")                                           | Immediately sends all modified vertex data in the Mesh to the graphics card.                                                                                                                    | 0.10.0 |        |\n| [Mesh:getDrawMode](mesh-getdrawmode \"Mesh:getDrawMode\")                         | Gets the mode used when drawing the Mesh.                                                                                                                                                       | 0.9.0  |        |\n| [Mesh:getDrawRange](mesh-getdrawrange \"Mesh:getDrawRange\")                      | Gets the range of vertices used when drawing the Mesh.                                                                                                                                          | 0.9.1  |        |\n| [Mesh:getImage](mesh-getimage \"Mesh:getImage\")                                  | Gets the [Image](image \"Image\") used when drawing the Mesh.                                                                                                                                     | 0.9.0  | 0.10.0 |\n| [Mesh:getTexture](mesh-gettexture \"Mesh:getTexture\")                            | Gets the texture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) used when drawing the Mesh.                                                                                              | 0.9.1  |        |\n| [Mesh:getVertex](mesh-getvertex \"Mesh:getVertex\")                               | Gets the properties of a vertex in the Mesh.                                                                                                                                                    | 0.9.0  |        |\n| [Mesh:getVertexAttribute](mesh-getvertexattribute \"Mesh:getVertexAttribute\")    | Gets the properties of a specific attribute within a vertex in the Mesh.                                                                                                                        | 0.10.0 |        |\n| [Mesh:getVertexCount](mesh-getvertexcount \"Mesh:getVertexCount\")                | Gets the total number of vertices in the Mesh.                                                                                                                                                  | 0.9.0  |        |\n| [Mesh:getVertexFormat](mesh-getvertexformat \"Mesh:getVertexFormat\")             | Gets the vertex format that the Mesh was [created](love.graphics.newmesh \"love.graphics.newMesh\") with.                                                                                         | 0.10.0 |        |\n| [Mesh:getVertexMap](mesh-getvertexmap \"Mesh:getVertexMap\")                      | Gets the vertex map for the Mesh.                                                                                                                                                               | 0.9.0  |        |\n| [Mesh:getVertices](mesh-getvertices \"Mesh:getVertices\")                         | Gets all the vertices in the Mesh.                                                                                                                                                              | 0.9.0  | 0.10.0 |\n| [Mesh:hasVertexColors](mesh-hasvertexcolors \"Mesh:hasVertexColors\")             | Gets whether per-vertex colors are used when drawing the Mesh.                                                                                                                                  | 0.9.0  | 0.10.0 |\n| [Mesh:isAttributeEnabled](mesh-isattributeenabled \"Mesh:isAttributeEnabled\")    | Gets whether a specific vertex attribute in the Mesh is enabled.                                                                                                                                | 0.10.0 |        |\n| [Mesh:setAttributeEnabled](mesh-setattributeenabled \"Mesh:setAttributeEnabled\") | Enables or disables a specific vertex attribute in the Mesh.                                                                                                                                    | 0.10.0 |        |\n| [Mesh:setDrawMode](mesh-setdrawmode \"Mesh:setDrawMode\")                         | Sets the mode used when drawing the Mesh.                                                                                                                                                       | 0.9.0  |        |\n| [Mesh:setDrawRange](mesh-setdrawrange \"Mesh:setDrawRange\")                      | Restricts the drawn vertices of the Mesh to a subset of the total.                                                                                                                              | 0.9.1  |        |\n| [Mesh:setImage](mesh-setimage \"Mesh:setImage\")                                  | Sets the [Image](image \"Image\") used when drawing the Mesh.                                                                                                                                     | 0.9.0  | 0.10.0 |\n| [Mesh:setTexture](mesh-settexture \"Mesh:setTexture\")                            | Sets the texture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) used when drawing the Mesh.                                                                                              | 0.9.1  |        |\n| [Mesh:setVertex](mesh-setvertex \"Mesh:setVertex\")                               | Sets the properties of a vertex in the Mesh.                                                                                                                                                    | 0.9.0  |        |\n| [Mesh:setVertexAttribute](mesh-setvertexattribute \"Mesh:setVertexAttribute\")    | Sets the properties of a specific attribute within a vertex in the Mesh.                                                                                                                        | 0.10.0 |        |\n| [Mesh:setVertexColors](mesh-setvertexcolors \"Mesh:setVertexColors\")             | Sets whether per-vertex colors are used instead of the constant color when drawing the Mesh.                                                                                                    | 0.9.0  | 0.10.0 |\n| [Mesh:setVertexMap](mesh-setvertexmap \"Mesh:setVertexMap\")                      | Sets the vertex map for the Mesh.                                                                                                                                                               | 0.9.0  |        |\n| [Mesh:setVertices](mesh-setvertices \"Mesh:setVertices\")                         | Replaces a range of vertices in the Mesh with new ones.                                                                                                                                         | 0.9.0  |        |\n| [Object:release](object-release \"Object:release\")                               | Immediately destroys the object's Lua reference.                                                                                                                                                | 11.0   |        |\n| [Object:type](object-type \"Object:type\")                                        | Gets the type of the object as a string.                                                                                                                                                        |        |        |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                  | Checks whether an object is of a certain type.                                                                                                                                                  |        |        |\n\n## Enums\n\n|                                                                  |                                                                                                           |       |     |\n|------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|-------|-----|\n| [IndexDataType](indexdatatype \"IndexDataType\")                   | Vertex map datatype.                                                                                      | 11.0  |     |\n| [MeshDrawMode](meshdrawmode \"MeshDrawMode\")                      | How a Mesh's vertices are used when drawing.                                                              | 0.9.0 |     |\n| [VertexAttributeStep](vertexattributestep \"VertexAttributeStep\") | The frequency at which a vertex shader fetches the vertex attribute's data from the Mesh when it's drawn. | 11.0  |     |\n\n## Supertypes\n\n- [Drawable](drawable \"Drawable\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n- [SpriteBatch:attachAttribute](spritebatch-attachattribute \"SpriteBatch:attachAttribute\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh](https://love2d.org/wiki/Mesh)"
- name: Mesh:attachAttribute
  id: mesh-attachattribute
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Mesh:attachAttribute\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nAttaches a vertex attribute from a different Mesh onto this Mesh, for use when drawing. This can be used to share vertex attribute data between several different Meshes.\n\n## Function\n\n### Synopsis\n\n``` lua\nMesh:attachAttribute( name, mesh )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the vertex attribute to attach.\n\n[`Mesh`](mesh \"Mesh\")` mesh`  \nThe Mesh to get the vertex attribute from.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nMesh:attachAttribute( name, mesh, step, attachname )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the vertex attribute to attach.\n\n[`Mesh`](mesh \"Mesh\")` mesh`  \nThe Mesh to get the vertex attribute from.\n\n[`VertexAttributeStep`](vertexattributestep \"VertexAttributeStep\")` step (\"pervertex\")`  \nWhether the attribute will be per-vertex or [per-instance](love.graphics.drawinstanced \"love.graphics.drawInstanced\") when the mesh is drawn.\n\n[`string`](string \"string\")` attachname (name)`  \nThe name of the attribute to use in shader code. Defaults to the name of the attribute in the given mesh. Can be used to use a different name for this attribute when rendering.\n\n### Returns\n\nNothing.\n\n## Notes\n\nIf a Mesh wasn't [created](love.graphics.newmesh \"love.graphics.newMesh\") with a custom vertex format, it will have 3 vertex attributes named `VertexPosition`, `VertexTexCoord`, and `VertexColor`.\n\nCustom named attributes can be accessed in a [vertex shader](shader \"Shader\") by declaring them as `attribute vec4 MyCustomAttributeName;` at the top-level of the vertex shader code. The name must match what was specified in the Mesh's vertex format and in the `name` argument of **Mesh:attachAttribute**.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:getVertexFormat](mesh-getvertexformat \"Mesh:getVertexFormat\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:attachAttribute](https://love2d.org/wiki/Mesh:attachAttribute)"
- name: Mesh:detachAttribute
  id: mesh-detachattribute
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Mesh:detachAttribute\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nRemoves a previously [attached](mesh-attachattribute \"Mesh:attachAttribute\") vertex attribute from this Mesh.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = Mesh:detachAttribute( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the attached vertex attribute to detach.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the attribute was successfully detached.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:attachAttribute](mesh-attachattribute \"Mesh:attachAttribute\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:detachAttribute](https://love2d.org/wiki/Mesh:detachAttribute)"
- name: Mesh:flush
  id: mesh-flush
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Mesh:flush\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nImmediately sends all modified vertex data in the Mesh to the graphics card.\n\nNormally it isn't necessary to call this method as [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")(mesh, ...) will do it automatically if needed, but explicitly using **Mesh:flush** gives more control over when the work happens.\n\nIf this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(mesh, ...) calls.\n\n## Function\n\n### Synopsis\n\n``` lua\nMesh:flush( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:flush](https://love2d.org/wiki/Mesh:flush)"
- name: Mesh:getDrawMode
  id: mesh-getdrawmode
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Mesh:getDrawMode\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the mode used when drawing the Mesh.\n\n## Function\n\n### Synopsis\n\n``` lua\nmode = Mesh:getDrawMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`MeshDrawMode`](meshdrawmode \"MeshDrawMode\")` mode`  \nThe mode used when drawing the Mesh.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [love.graphics.newMesh](love.graphics.newmesh \"love.graphics.newMesh\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:getDrawMode](https://love2d.org/wiki/Mesh:getDrawMode)"
- name: Mesh:getDrawRange
  id: mesh-getdrawrange
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# Mesh:getDrawRange\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nGets the range of vertices used when drawing the Mesh.\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, max = Mesh:getDrawRange( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` min (nil)`  \nThe index of the first vertex used when drawing, or the index of the first value in the vertex map used if one is set for this Mesh.\n\n[`number`](number \"number\")` max (nil)`  \nThe index of the last vertex used when drawing, or the index of the last value in the vertex map used if one is set for this Mesh.\n\n### Notes\n\nIf the Mesh's draw range has not been set previously with [Mesh:setDrawRange](mesh-setdrawrange \"Mesh:setDrawRange\"), this function will return nil.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:setDrawRange](mesh-setdrawrange \"Mesh:setDrawRange\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:getDrawRange](https://love2d.org/wiki/Mesh:getDrawRange)"
- name: Mesh:getImage
  id: mesh-getimage
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Mesh:getImage\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [Mesh:getTexture](mesh-gettexture \"Mesh:getTexture\") instead.\n\nGets the [Image](image \"Image\") used when drawing the Mesh.\n\n## Function\n\n### Synopsis\n\n``` lua\nimage = Mesh:getImage( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Image`](image \"Image\")` image (nil)`  \nThe Image used to texture the Mesh when drawing. May be nil if no Image is being used with the Mesh.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:setImage](mesh-setimage \"Mesh:setImage\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:getImage](https://love2d.org/wiki/Mesh:getImage)"
- name: Mesh:getTexture
  id: mesh-gettexture
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# Mesh:getTexture\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nGets the texture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) used when drawing the Mesh.\n\n## Function\n\n### Synopsis\n\n``` lua\ntexture = Mesh:getTexture( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Texture`](texture \"Texture\")` texture (nil)`  \nThe Image or Canvas to texture the Mesh with when drawing, or nil if none is set.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:setTexture](mesh-settexture \"Mesh:setTexture\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:getTexture](https://love2d.org/wiki/Mesh:getTexture)"
- name: Mesh:getVertex
  id: mesh-getvertex
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Mesh:getVertex\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the properties of a vertex in the Mesh.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color and byte component values were within the range of 0 to 255 instead of 0 to 1.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nattributecomponent, ... = Mesh:getVertex( index )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nThe one-based index of the vertex you want to retrieve the information for.\n\n### Returns\n\n[`number`](number \"number\")` attributecomponent`  \nThe first component of the first vertex attribute in the specified vertex.\n\n[`number`](number \"number\")` ...`  \nAdditional components of all vertex attributes in the specified vertex.\n\n### Notes\n\nThe values are returned in the same order as the vertex attributes in the Mesh's [vertex format](mesh-getvertexformat \"Mesh:getVertexFormat\"). A standard Mesh that wasn't [created](love.graphics.newmesh \"love.graphics.newMesh\") with a custom vertex format will return two position numbers, two texture coordinate numbers, and four color components: x, y, u, v, r, g, b, a.\n\n## Function\n\nGets the vertex components of a Mesh that wasn't [created](love.graphics.newmesh \"love.graphics.newMesh\") with a custom vertex format.\n\n### Synopsis\n\n``` lua\nx, y, u, v, r, g, b, a = Mesh:getVertex( index )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nThe index of the vertex you want to retrieve the information for.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe position of the vertex on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the vertex on the y-axis.\n\n[`number`](number \"number\")` u`  \nThe horizontal component of the texture coordinate.\n\n[`number`](number \"number\")` v`  \nThe vertical component of the texture coordinate.\n\n[`number`](number \"number\")` r`  \nThe red component of the vertex's color.\n\n[`number`](number \"number\")` g`  \nThe green component of the vertex's color.\n\n[`number`](number \"number\")` b`  \nThe blue component of the vertex's color.\n\n[`number`](number \"number\")` a`  \nThe alpha component of the vertex's color.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:setVertex](mesh-setvertex \"Mesh:setVertex\")\n- [Mesh:getVertexCount](mesh-getvertexcount \"Mesh:getVertexCount\")\n- [Mesh:getVertexAttribute](mesh-getvertexattribute \"Mesh:getVertexAttribute\")\n- [Mesh:getVertexFormat](mesh-getvertexformat \"Mesh:getVertexFormat\")\n- [love.graphics.newMesh](love.graphics.newmesh \"love.graphics.newMesh\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:getVertex](https://love2d.org/wiki/Mesh:getVertex)"
- name: Mesh:getVertexAttribute
  id: mesh-getvertexattribute
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Mesh:getVertexAttribute\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the properties of a specific attribute within a vertex in the Mesh.\n\nMeshes without a custom vertex format specified in [love.graphics.newMesh](love.graphics.newmesh \"love.graphics.newMesh\") have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute.\n\n## Function\n\n### Synopsis\n\n``` lua\nvalue1, value2, ... = Mesh:getVertexAttribute( vertexindex, attributeindex )\n```\n\n### Arguments\n\n[`number`](number \"number\")` vertexindex`  \nThe index of the the vertex you want to retrieve the attribute for (one-based).\n\n[`number`](number \"number\")` attributeindex`  \nThe index of the attribute within the vertex to be retrieved (one-based).\n\n### Returns\n\n[`number`](number \"number\")` value1`  \nThe value of the first component of the attribute.\n\n[`number`](number \"number\")` value2`  \nThe value of the second component of the attribute.\n\n[`number`](number \"number\")` ...`  \nAny additional vertex attribute components.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:setVertexAttribute](mesh-setvertexattribute \"Mesh:setVertexAttribute\")\n- [Mesh:getVertexCount](mesh-getvertexcount \"Mesh:getVertexCount\")\n- [Mesh:getVertexFormat](mesh-getvertexformat \"Mesh:getVertexFormat\")\n- [Mesh:getVertex](mesh-getvertex \"Mesh:getVertex\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:getVertexAttribute](https://love2d.org/wiki/Mesh:getVertexAttribute)"
- name: Mesh:getVertexCount
  id: mesh-getvertexcount
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Mesh:getVertexCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the total number of vertices in the Mesh.\n\n## Function\n\n### Synopsis\n\n``` lua\ncount = Mesh:getVertexCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` count`  \nThe total number of vertices in the mesh.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:getVertex](mesh-getvertex \"Mesh:getVertex\")\n- [Mesh:setVertex](mesh-setvertex \"Mesh:setVertex\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:getVertexCount](https://love2d.org/wiki/Mesh:getVertexCount)"
- name: Mesh:getVertexFormat
  id: mesh-getvertexformat
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Mesh:getVertexFormat\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the vertex format that the Mesh was [created](love.graphics.newmesh \"love.graphics.newMesh\") with.\n\n## Function\n\n### Synopsis\n\n``` lua\nformat = Mesh:getVertexFormat( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` format`  \nThe vertex format of the Mesh, which is a table containing tables for each vertex attribute the Mesh was created with, in the form of `{attribute, ...}`.\n\n[`table`](table \"table\")` attribute`  \nA table containing the attribute's name, it's [data type](attributedatatype \"AttributeDataType\"), and the number of components in the attribute, in the form of `{name, datatype, components}`.\n\n[`table`](table \"table\")` ...`  \nAdditional vertex attributes in the Mesh.\n\n## Notes\n\nIf a Mesh wasn't [created](love.graphics.newmesh \"love.graphics.newMesh\") with a custom vertex format, it will have the following vertex format:\n\n``` lua\ndefaultformat = {\n    {\"VertexPosition\", \"float\", 2}, -- The x,y position of each vertex.\n    {\"VertexTexCoord\", \"float\", 2}, -- The u,v texture coordinates of each vertex.\n    {\"VertexColor\", \"byte\", 4} -- The r,g,b,a color of each vertex.\n}\n```\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [love.graphics.newMesh](love.graphics.newmesh \"love.graphics.newMesh\")\n- [AttributeDataType](attributedatatype \"AttributeDataType\")\n- [Mesh:setVertex](mesh-setvertex \"Mesh:setVertex\")\n- [Mesh:setVertexAttribute](mesh-setvertexattribute \"Mesh:setVertexAttribute\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:getVertexFormat](https://love2d.org/wiki/Mesh:getVertexFormat)"
- name: Mesh:getVertexMap
  id: mesh-getvertexmap
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Mesh:getVertexMap\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.\n\nIf no vertex map has been set previously via [Mesh:setVertexMap](mesh-setvertexmap \"Mesh:setVertexMap\"), then this function will return [nil](nil \"nil\") in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")+, or an empty table in [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older.\n\n## Function\n\n### Synopsis\n\n``` lua\nmap = Mesh:getVertexMap( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` map`  \nA table containing the list of vertex indices used when drawing.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:setVertexMap](mesh-setvertexmap \"Mesh:setVertexMap\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:getVertexMap](https://love2d.org/wiki/Mesh:getVertexMap)"
- name: Mesh:getVertices
  id: mesh-getvertices
  summary: Available since LÖVE 0.9.0 and removed in LÖVE 0.10.0 Use Mesh:getVertex in a loop instead
  description: "# Mesh:getVertices\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [Mesh:getVertex](mesh-getvertex \"Mesh:getVertex\") in a loop instead.\n\nGets all the vertices in the Mesh.\n\nThis method can be slow if the Mesh has a large number of vertices. Keep the original table used to create the Mesh around and update it when necessary instead of using this method frequently, if possible.\n\n## Function\n\n### Synopsis\n\n``` lua\nvertices = Mesh:getVertices( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` vertices`  \nThe table filled with vertex information tables for each vertex as follows:\n\n[`number`](number \"number\")` [1]`  \nThe position of the vertex on the x-axis.\n\n[`number`](number \"number\")` [2]`  \nThe position of the vertex on the y-axis.\n\n[`number`](number \"number\")` [3]`  \nThe horizontal component of the texture coordinate. Texture coordinates are normally in the range of \\[0, 1\\], but can be greater or less (see [WrapMode](wrapmode \"WrapMode\").)\n\n[`number`](number \"number\")` [4]`  \nThe vertical component of the texture coordinate. Texture coordinates are normally in the range of \\[0, 1\\], but can be greater or less (see [WrapMode](wrapmode \"WrapMode\").)\n\n[`number`](number \"number\")` [5] (255)`  \nThe red color component.\n\n[`number`](number \"number\")` [6] (255)`  \nThe green color component.\n\n[`number`](number \"number\")` [7] (255)`  \nThe blue color component.\n\n[`number`](number \"number\")` [8] (255)`  \nThe alpha color component.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:setVertices](mesh-setvertices \"Mesh:setVertices\")\n- [Mesh:getVertex](mesh-getvertex \"Mesh:getVertex\")\n- [Mesh:getVertexCount](mesh-getvertexcount \"Mesh:getVertexCount\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:getVertices](https://love2d.org/wiki/Mesh:getVertices)"
- name: Mesh:hasVertexColors
  id: mesh-hasvertexcolors
  summary: Per-vertex colors are enabled by default for a Mesh if at least one vertex color was not the default (255, 255, 255, 255) when the Mesh was created
  description: "# Mesh:hasVertexColors\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been replaced by [Mesh:isAttributeEnabled](mesh-isattributeenabled \"Mesh:isAttributeEnabled\")(\"VertexColor\").\n\nGets whether per-vertex colors are used instead of the constant color when drawing the Mesh (constant color being [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\").)\n\nPer-vertex colors are enabled by default for a Mesh if at least one vertex color was not the default (255, 255, 255, 255) when the Mesh was [created](love.graphics.newmesh \"love.graphics.newMesh\").\n\n## Function\n\n### Synopsis\n\n``` lua\nvertexcolors = Mesh:hasVertexColors( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` vertexcolors`  \nTrue if per-vertex coloring is used, otherwise [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") is used when drawing the Mesh.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:setVertexColors](mesh-setvertexcolors \"Mesh:setVertexColors\")\n- [love.graphics.newMesh](love.graphics.newmesh \"love.graphics.newMesh\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:hasVertexColors](https://love2d.org/wiki/Mesh:hasVertexColors)"
- name: Mesh:isAttributeEnabled
  id: mesh-isattributeenabled
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Mesh:isAttributeEnabled\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether a specific vertex attribute in the Mesh is enabled. Vertex data from disabled attributes is not used when drawing the Mesh.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = Mesh:isAttributeEnabled( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the vertex attribute to be checked.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nWhether the vertex attribute is used when drawing this Mesh.\n\n## Notes\n\nIf a Mesh wasn't [created](love.graphics.newmesh \"love.graphics.newMesh\") with a custom vertex format, it will have 3 vertex attributes named `VertexPosition`, `VertexTexCoord`, and `VertexColor`. Otherwise the attribute name must either match one of the vertex attributes specified in the [vertex format](mesh-getvertexformat \"Mesh:getVertexFormat\") when [creating the Mesh](love.graphics.newmesh \"love.graphics.newMesh\"), or must match a vertex attribute from another Mesh attached to this Mesh via [Mesh:attachAttribute](mesh-attachattribute \"Mesh:attachAttribute\").\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:setAttributeEnabled](mesh-setattributeenabled \"Mesh:setAttributeEnabled\")\n- [Mesh:getVertexFormat](mesh-getvertexformat \"Mesh:getVertexFormat\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:isAttributeEnabled](https://love2d.org/wiki/Mesh:isAttributeEnabled)"
- name: Mesh:setAttributeEnabled
  id: mesh-setattributeenabled
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Mesh:setAttributeEnabled\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nEnables or disables a specific vertex attribute in the Mesh. Vertex data from disabled attributes is not used when drawing the Mesh.\n\n## Function\n\n### Synopsis\n\n``` lua\nMesh:setAttributeEnabled( name, enable )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the vertex attribute to enable or disable.\n\n[`boolean`](boolean \"boolean\")` enable`  \nWhether the vertex attribute is used when drawing this Mesh.\n\n### Returns\n\nNothing.\n\n## Notes\n\nIf a Mesh wasn't [created](love.graphics.newmesh \"love.graphics.newMesh\") with a custom vertex format, it will have 3 vertex attributes named `VertexPosition`, `VertexTexCoord`, and `VertexColor`. Otherwise the attribute name must either match one of the vertex attributes specified in the [vertex format](mesh-getvertexformat \"Mesh:getVertexFormat\") when [creating the Mesh](love.graphics.newmesh \"love.graphics.newMesh\"), or must match a vertex attribute from another Mesh attached to this Mesh via [Mesh:attachAttribute](mesh-attachattribute \"Mesh:attachAttribute\").\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:isAttributeEnabled](mesh-isattributeenabled \"Mesh:isAttributeEnabled\")\n- [Mesh:getVertexFormat](mesh-getvertexformat \"Mesh:getVertexFormat\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:setAttributeEnabled](https://love2d.org/wiki/Mesh:setAttributeEnabled)"
- name: Mesh:setDrawMode
  id: mesh-setdrawmode
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Mesh:setDrawMode\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the mode used when drawing the Mesh.\n\n## Function\n\n### Synopsis\n\n``` lua\nMesh:setDrawMode( mode )\n```\n\n### Arguments\n\n[`MeshDrawMode`](meshdrawmode \"MeshDrawMode\")` mode`  \nThe mode to use when drawing the Mesh.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:getDrawMode](mesh-getdrawmode \"Mesh:getDrawMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:setDrawMode](https://love2d.org/wiki/Mesh:setDrawMode)"
- name: Mesh:setDrawRange
  id: mesh-setdrawrange
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# Mesh:setDrawRange\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nRestricts the drawn vertices of the Mesh to a subset of the total.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nMesh:setDrawRange( start, count )\n```\n\n### Arguments\n\n[`number`](number \"number\")` start`  \nThe index of the first vertex to use when drawing, or the index of the first value in the vertex map to use if one is set for this Mesh.\n\n[`number`](number \"number\")` count`  \nThe number of vertices to use when drawing, or number of values in the vertex map to use if one is set for this Mesh.\n\n### Returns\n\nNothing.\n\n## Function\n\nAllows all vertices in the Mesh to be drawn.\n\n### Synopsis\n\n``` lua\nMesh:setDrawRange( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nMesh:setDrawRange( min, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe index of the first vertex to use when drawing, or the index of the first value in the vertex map to use if one is set for this Mesh.\n\n[`number`](number \"number\")` max`  \nThe index of the last vertex to use when drawing, or the index of the last value in the vertex map to use if one is set for this Mesh.\n\n### Returns\n\nNothing.\n\n## Notes\n\nIf a [vertex map](mesh-setvertexmap \"Mesh:setVertexMap\") is used with the Mesh, this method will set a subset of the values in the vertex map array to use, instead of a subset of the total vertices in the Mesh.\n\nFor example, if `Mesh:setVertexMap(1, 2, 3, 1, 3, 4)` and `Mesh:setDrawRange(4, 2)` are called, vertices 1, 3, and 4 will be drawn.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:getDrawRange](mesh-getdrawrange \"Mesh:getDrawRange\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:setDrawRange](https://love2d.org/wiki/Mesh:setDrawRange)"
- name: Mesh:setImage
  id: mesh-setimage
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Mesh:setImage\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [Mesh:setTexture](mesh-settexture \"Mesh:setTexture\") instead.\n\n  \n\n[0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") (bug) [Images](image \"Image\") are not released from memory automatically when nil-ing meshes. Call Mesh:setImage() to manually clear.\n\nSets the [Image](image \"Image\") used when drawing the Mesh.\n\n## Function\n\n### Synopsis\n\n``` lua\nMesh:setImage( image )\n```\n\n### Arguments\n\n[`Image`](image \"Image\")` image`  \nThe Image to texture the Mesh with when drawing.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nMesh:setImage( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n### Notes\n\nDisables any Image from being used when drawing the Mesh. Untextured meshes have a white color by default.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:getImage](mesh-getimage \"Mesh:getImage\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:setImage](https://love2d.org/wiki/Mesh:setImage)"
- name: Mesh:setTexture
  id: mesh-settexture
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# Mesh:setTexture\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\n  \n\n[0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\") (bug) [Textures](texture \"Texture\") are not released from memory automatically when nil-ing meshes. Call Mesh:setTexture() to manually clear.\n\nSets the texture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) used when drawing the Mesh.\n\n## Function\n\n### Synopsis\n\n``` lua\nMesh:setTexture( texture )\n```\n\n### Arguments\n\n[`Texture`](texture \"Texture\")` texture`  \nThe Image or Canvas to texture the Mesh with when drawing.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nMesh:setTexture( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n### Notes\n\nDisables any texture from being used when drawing the Mesh. Untextured meshes have a white color by default.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:getTexture](mesh-gettexture \"Mesh:getTexture\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:setTexture](https://love2d.org/wiki/Mesh:setTexture)"
- name: Mesh:setVertex
  id: mesh-setvertex
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Mesh:setVertex\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the properties of a vertex in the Mesh.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color and byte component values were within the range of 0 to 255 instead of 0 to 1.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nMesh:setVertex( index, attributecomponent, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nThe index of the the vertex you want to modify (one-based).\n\n[`number`](number \"number\")` attributecomponent`  \nThe first component of the first vertex attribute in the specified vertex.\n\n[`number`](number \"number\")` ...`  \nAdditional components of all vertex attributes in the specified vertex.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe arguments are in the same order as the vertex attributes in the Mesh's [vertex format](mesh-getvertexformat \"Mesh:getVertexFormat\"). A standard Mesh that wasn't [created](love.graphics.newmesh \"love.graphics.newMesh\") with a custom vertex format will use two position numbers, two texture coordinate numbers, and four color components per vertex: x, y, u, v, r, g, b, a.\n\nIf no value is supplied for a specific vertex attribute component, it will be set to a default value of 0 if its [data type](attributedatatype \"AttributeDataType\") is \"float\", or 1 if its data type is \"byte\".\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nMesh:setVertex( index, vertex )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nThe index of the the vertex you want to modify (one-based).\n\n[`table`](table \"table\")` vertex`  \nA table with vertex information, in the form of `{attributecomponent, ...}`.\n\n[`number`](number \"number\")` attributecomponent`  \nThe first component of the first vertex attribute in the specified vertex.\n\n[`number`](number \"number\")` ...`  \nAdditional components of all vertex attributes in the specified vertex.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe table indices are in the same order as the vertex attributes in the Mesh's [vertex format](mesh-getvertexformat \"Mesh:getVertexFormat\"). A standard Mesh that wasn't [created](love.graphics.newmesh \"love.graphics.newMesh\") with a custom vertex format will use two position numbers, two texture coordinate numbers, and four color components per vertex: x, y, u, v, r, g, b, a.\n\nIf no value is supplied for a specific vertex attribute component, it will be set to a default value of 0 if its [data type](attributedatatype \"AttributeDataType\") is \"float\", or 1 if its data type is \"byte\".\n\n## Function\n\nSets the vertex components of a Mesh that wasn't [created](love.graphics.newmesh \"love.graphics.newMesh\") with a custom vertex format.\n\n### Synopsis\n\n``` lua\nMesh:setVertex( index, x, y, u, v, r, g, b, a )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nThe index of the the vertex you want to modify (one-based).\n\n[`number`](number \"number\")` x`  \nThe position of the vertex on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the vertex on the y-axis.\n\n[`number`](number \"number\")` u`  \nThe horizontal component of the texture coordinate.\n\n[`number`](number \"number\")` v`  \nThe vertical component of the texture coordinate.\n\n[`number`](number \"number\")` r (1)`  \nThe red component of the vertex's color.\n\n[`number`](number \"number\")` g (1)`  \nThe green component of the vertex's color.\n\n[`number`](number \"number\")` b (1)`  \nThe blue component of the vertex's color.\n\n[`number`](number \"number\")` a (1)`  \nThe alpha component of the vertex's color.\n\n### Returns\n\nNothing.\n\n## Function\n\nSets the vertex components of a Mesh that wasn't [created](love.graphics.newmesh \"love.graphics.newMesh\") with a custom vertex format.\n\n### Synopsis\n\n``` lua\nMesh:setVertex( index, vertex )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nThe index of the the vertex you want to modify (one-based).\n\n[`table`](table \"table\")` vertex`  \nA table with vertex information.\n\n[`number`](number \"number\")` [1]`  \nThe position of the vertex on the x-axis.\n\n[`number`](number \"number\")` [2]`  \nThe position of the vertex on the y-axis.\n\n[`number`](number \"number\")` [3]`  \nThe u texture coordinate. Texture coordinates are normally in the range of \\[0, 1\\], but can be greater or less (see [WrapMode](wrapmode \"WrapMode\").)\n\n[`number`](number \"number\")` [4]`  \nThe v texture coordinate. Texture coordinates are normally in the range of \\[0, 1\\], but can be greater or less (see [WrapMode](wrapmode \"WrapMode\").)\n\n[`number`](number \"number\")` [5] (1)`  \nThe red color component.\n\n[`number`](number \"number\")` [6] (1)`  \nThe green color component.\n\n[`number`](number \"number\")` [7] (1)`  \nThe blue color component.\n\n[`number`](number \"number\")` [8] (1)`  \nThe alpha color component.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:getVertex](mesh-getvertex \"Mesh:getVertex\")\n- [Mesh:getVertexCount](mesh-getvertexcount \"Mesh:getVertexCount\")\n- [Mesh:getVertexFormat](mesh-getvertexformat \"Mesh:getVertexFormat\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:setVertex](https://love2d.org/wiki/Mesh:setVertex)"
- name: Mesh:setVertexAttribute
  id: mesh-setvertexattribute
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Mesh:setVertexAttribute\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nSets the properties of a specific attribute within a vertex in the Mesh.\n\nMeshes without a custom vertex format specified in [love.graphics.newMesh](love.graphics.newmesh \"love.graphics.newMesh\") have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute.\n\n## Function\n\n### Synopsis\n\n``` lua\nMesh:setVertexAttribute( vertexindex, attributeindex, value1, value2, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` vertexindex`  \nThe index of the the vertex to be modified (one-based).\n\n[`number`](number \"number\")` attributeindex`  \nThe index of the attribute within the vertex to be modified (one-based).\n\n[`number`](number \"number\")` value1`  \nThe new value for the first component of the attribute.\n\n[`number`](number \"number\")` value2`  \nThe new value for the second component of the attribute.\n\n[`number`](number \"number\")` ...`  \nAny additional vertex attribute components.\n\n### Returns\n\nNothing.\n\n### Notes\n\nAttribute components which exist within the attribute but are not specified as arguments default to 0 for attributes with the `float` data type, and 1 for the `byte` data type.\n\n## Examples\n\nModify the colors of a standard mesh after it's created.\n\n``` lua\n-- Standard mesh with position, texture coordinates, and color attributes.\nmesh = love.graphics.newMesh {\n    {0,   0,    0, 0,  1, 1, 1, 1}, -- first vertex positioned at (0, 0)\n    {400, 0,    0, 0,  1, 1, 1, 1}, -- second vertex positioned at (400, 0)\n    {200, 400,  0, 0,  1, 1, 1, 1}, -- third vertex positioned at (200, 400)\n}\n \nlocal time = 0\n \nfunction love.update(dt)\n    time = time + dt\n \n    for i = 1, mesh:getVertexCount() do\n        -- The 3rd vertex attribute for a standard mesh is its color.\n        mesh:setVertexAttribute(i, 3, (time * 10) % 1, 1, 1)\n    end\nend\n \nfunction love.draw()\n    love.graphics.draw(mesh)\nend\n```\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:getVertexAttribute](mesh-getvertexattribute \"Mesh:getVertexAttribute\")\n- [Mesh:getVertexCount](mesh-getvertexcount \"Mesh:getVertexCount\")\n- [Mesh:getVertexFormat](mesh-getvertexformat \"Mesh:getVertexFormat\")\n- [Mesh:setVertex](mesh-setvertex \"Mesh:setVertex\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:setVertexAttribute](https://love2d.org/wiki/Mesh:setVertexAttribute)"
- name: Mesh:setVertexColors
  id: mesh-setvertexcolors
  summary: Per-vertex colors are enabled by default for a Mesh if at least one vertex color was not the default (255, 255, 255, 255) when the Mesh was created
  description: "# Mesh:setVertexColors\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been replaced by [Mesh:setAttributeEnabled](mesh-setattributeenabled \"Mesh:setAttributeEnabled\")(\"VertexColor\", enable).\n\nSets whether per-vertex colors are used instead of the constant color when drawing the Mesh (constant color being [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\").)\n\nPer-vertex colors are enabled by default for a Mesh if at least one vertex color was not the default (255, 255, 255, 255) when the Mesh was [created](love.graphics.newmesh \"love.graphics.newMesh\").\n\n## Function\n\n### Synopsis\n\n``` lua\nMesh:setVertexColors( on )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` on`  \nTrue to use per-vertex coloring, otherwise [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") is used when drawing.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:hasVertexColors](mesh-hasvertexcolors \"Mesh:hasVertexColors\")\n- [love.graphics.newMesh](love.graphics.newmesh \"love.graphics.newMesh\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:setVertexColors](https://love2d.org/wiki/Mesh:setVertexColors)"
- name: Mesh:setVertexMap
  id: mesh-setvertexmap
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Mesh:setVertexMap\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.\n\nThe vertex map allows you to re-order or reuse vertices when drawing without changing the actual vertex parameters or duplicating vertices. It is especially useful when combined with different [Mesh Draw Modes](meshdrawmode \"MeshDrawMode\").\n\n## Function\n\n### Synopsis\n\n``` lua\nMesh:setVertexMap( map )\n```\n\n### Arguments\n\n[`table`](table \"table\")` map`  \nA table containing a list of vertex indices to use when drawing. Values must be in the range of \\[1, [Mesh:getVertexCount()](mesh-getvertexcount \"Mesh:getVertexCount\")\\].\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nMesh:setVertexMap( vi1, vi2, vi3, ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` vi1`  \nThe index of the first vertex to use when drawing. Must be in the range of \\[1, [Mesh:getVertexCount()](mesh-getvertexcount \"Mesh:getVertexCount\")\\].\n\n[`number`](number \"number\")` vi2`  \nThe index of the second vertex to use when drawing.\n\n[`number`](number \"number\")` vi3`  \nThe index of the third vertex to use when drawing.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nMesh:setVertexMap( data, datatype )\n```\n\n### Arguments\n\n[`Data`](data \"Data\")` data`  \nArray of vertex indices to use when drawing. Values must be in the range of \\[0, [Mesh:getVertexCount()](mesh-getvertexcount \"Mesh:getVertexCount\")-1\\]\n\n[`IndexDataType`](indexdatatype \"IndexDataType\")` datatype`  \nDatatype of the vertex indices array above.\n\n### Returns\n\nNothing.\n\n## Examples\n\nUse a vertex map to fix a visual glitch without copy/pasting vertices.\n\n``` lua\nfunction love.load()\n    image = love.graphics.newImage(\"pig.png\")\n    local w,h = image:getDimensions()\n \n    -- We want to make a Mesh with 1 vertex in the middle of the image, and 4 at the corners.\n    local vertices = {\n        {w/2, h/2,   0.5, 0.5,   1, 0, 0}, -- Center vertex, with a red tint.\n        {0,   0,     0,   0,     1, 1, 1}, -- Top left.\n        {w,   0,     1,   0,     1, 1, 1}, -- Top right.\n        {w,   h,     1,   1,     1, 1, 1}, -- Bottom right.\n        {0,   h,     0,   1,     1, 1, 1}, -- Bottom left.\n    }\n \n    -- But there's a problem! The drawn mesh will have a big triangle missing on its left side.\n    -- This is because, in the default mesh draw mode (\"fan\"), the vertices don't \"loop\": the top left vertex (#2) is unconnected to the bottom left one (#5).\n    mesh = love.graphics.newMesh(vertices)\n    mesh:setTexture(image)\n \n    -- We could copy/paste the second vertex onto the end of the table of vertices.\n    -- But instead we can just change the vertex map!\n    mesh:setVertexMap(1, 2, 3, 4, 5, 2)\nend\n \nfunction love.draw()\n    love.graphics.draw(mesh, 0, 0)\nend\n```\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:getVertexMap](mesh-getvertexmap \"Mesh:getVertexMap\")\n- [MeshDrawMode](meshdrawmode \"MeshDrawMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:setVertexMap](https://love2d.org/wiki/Mesh:setVertexMap)"
- name: Mesh:setVertices
  id: mesh-setvertices
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Mesh:setVertices\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nReplaces a range of vertices in the Mesh with new ones. The total number of vertices in a Mesh cannot be changed after it has been created. This is often more efficient than calling [Mesh:setVertex](mesh-setvertex \"Mesh:setVertex\") in a loop.\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nMesh:setVertices( vertices, startvertex, count )\n```\n\n### Arguments\n\n[`table`](table \"table\")` vertices`  \nThe table filled with vertex information tables for each vertex, in the form of `{vertex, ...}` where each vertex is a table in the form of `{attributecomponent, ...}`.\n\n[`number`](number \"number\")` attributecomponent`  \nThe first component of the first vertex attribute in the vertex.\n\n[`number`](number \"number\")` ...`  \nAdditional components of all vertex attributes in the vertex.\n\n[`number`](number \"number\")` startvertex (1)`  \nThe index of the first vertex to replace.\n\n&nbsp;\n\n[`number`](number \"number\")` count (all)` Available since 11.3  \nAmount of vertices to replace.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe values in each vertex table are in the same order as the vertex attributes in the Mesh's [vertex format](mesh-getvertexformat \"Mesh:getVertexFormat\"). A standard Mesh that wasn't [created](love.graphics.newmesh \"love.graphics.newMesh\") with a custom vertex format will use two position numbers, two texture coordinate numbers, and four color components per vertex: x, y, u, v, r, g, b, a.\n\nIf no value is supplied for a specific vertex attribute component, it will be set to a default value of 0 if its [data type](attributedatatype \"AttributeDataType\") is \"float\", or 255 if its data type is \"byte\".\n\n## Function\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis variant is not supported in earlier versions.\n\nSets the vertex components of the Mesh by copying directly from the memory of a [Data](data \"Data\") object.\n\n### Synopsis\n\n``` lua\nMesh:setVertices( data, startvertex, count )\n```\n\n### Arguments\n\n[`Data`](data \"Data\")` data`  \nA Data object to copy from. The contents of the Data must match the layout of this Mesh's [vertex format](mesh-getvertexformat \"Mesh:getVertexFormat\").\n\n[`number`](number \"number\")` startvertex (1)`  \nThe index of the first vertex to replace.\n\n&nbsp;\n\n[`number`](number \"number\")` count (all)` Available since 11.3  \nAmount of vertices to replace.\n\n### Returns\n\nNothing.\n\n### Notes\n\nIf LuaJIT's [FFI](https://luajit.org/ext_ffi_api.html) is used to populate the Data object via [Data:getPointer](data-getpointer \"Data:getPointer\") and [ffi.cast](https://luajit.org/ext_ffi_api.html#ffi_cast), this variant can be drastically more efficient than other methods of setting Mesh vertex data.\n\n## Function\n\nSets the vertex components of a Mesh that wasn't [created](love.graphics.newmesh \"love.graphics.newMesh\") with a custom vertex format.\n\n### Synopsis\n\n``` lua\nMesh:setVertices( vertices )\n```\n\n### Arguments\n\n[`table`](table \"table\")` vertices`  \nThe table filled with vertex information tables for each vertex as follows:\n\n[`number`](number \"number\")` [1]`  \nThe position of the vertex on the x-axis.\n\n[`number`](number \"number\")` [2]`  \nThe position of the vertex on the y-axis.\n\n[`number`](number \"number\")` [3]`  \nThe horizontal component of the texture coordinate. Texture coordinates are normally in the range of \\[0, 1\\], but can be greater or less (see [WrapMode](wrapmode \"WrapMode\")).\n\n[`number`](number \"number\")` [4]`  \nThe vertical component of the texture coordinate. Texture coordinates are normally in the range of \\[0, 1\\], but can be greater or less (see [WrapMode](wrapmode \"WrapMode\")).\n\n[`number`](number \"number\")` [5] (1)`  \nThe red color component.\n\n[`number`](number \"number\")` [6] (1)`  \nThe green color component.\n\n[`number`](number \"number\")` [7] (1)`  \nThe blue color component.\n\n[`number`](number \"number\")` [8] (1)`  \nThe alpha color component.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Mesh](mesh \"Mesh\")\n- [Mesh:getVertex](mesh-getvertex \"Mesh:getVertex\")\n- [Mesh:getVertexCount](mesh-getvertexcount \"Mesh:getVertexCount\")\n- [Mesh:getVertexFormat](mesh-getvertexformat \"Mesh:getVertexFormat\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Mesh:setVertices](https://love2d.org/wiki/Mesh:setVertices)"
- name: MeshDrawMode
  id: meshdrawmode
  summary: Available since LÖVE 0.9.0 This enum is not supported in earlier versions
  description: "# MeshDrawMode\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in earlier versions.\n\n  \nHow a [Mesh](mesh \"Mesh\")'s vertices are used when drawing.\n\n## Constants\n\nfan  \nThe vertices create a \"fan\" shape with the first vertex acting as the hub point. Can be easily used to draw simple convex polygons.\n\nstrip  \nThe vertices create a series of connected triangles using vertices 1, 2, 3, then 3, 2, 4 (note the order), then 3, 4, 5, and so on.\n\ntriangles  \nThe vertices create unconnected triangles.\n\npoints  \nThe vertices are drawn as unconnected points (see [love.graphics.setPointSize](love.graphics.setpointsize \"love.graphics.setPointSize\").)\n\n## Notes\n\nIf the Mesh has a custom [vertex map](mesh-setvertexmap \"Mesh:setVertexMap\"), then that will determine the order in which the vertices are interpreted by the draw mode.\n\nThe vertex map can also be used to make the draw mode reuse vertices, for example if the Mesh has 4 vertices and is using the \"triangles\" draw mode, the vertex map could be set to {1, 2, 3, 1, 3, 4} to draw 2 triangles using only 4 vertices, effectively drawing a quad using triangles.\n\n[](https://love2d.org/wiki/File:geometry_modes.png)\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.newMesh](love.graphics.newmesh \"love.graphics.newMesh\")\n- [Mesh](mesh \"Mesh\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MeshDrawMode](https://love2d.org/wiki/MeshDrawMode)"
- name: MessageBoxType
  id: messageboxtype
  summary: Available since LÖVE 0.9.2 This enum is not supported in earlier versions
  description: "# MessageBoxType\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis enum is not supported in earlier versions.\n\nTypes of [message box](love.window.showmessagebox \"love.window.showMessageBox\") dialogs. Different types may have slightly different looks.\n\n## Constants\n\ninfo  \nInformational dialog.\n\nwarning  \nWarning dialog.\n\nerror  \nError dialog.\n\n## See Also\n\n- [love.window](love.window \"love.window\")\n- [love.window.showMessageBox](love.window.showmessagebox \"love.window.showMessageBox\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MessageBoxType](https://love2d.org/wiki/MessageBoxType)"
- name: MipmapMode
  id: mipmapmode
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# MipmapMode\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nControls whether a [Canvas](canvas \"Canvas\") has mipmaps, and its behaviour when it does.\n\n## Constants\n\nnone  \nThe Canvas has no mipmaps.\n\nmanual  \nThe Canvas has mipmaps. [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\") can be used to render to a specific mipmap level, or [Canvas:generateMipmaps](canvas-generatemipmaps \"Canvas:generateMipmaps\") can (re-)compute all mipmap levels based on the base level.\n\nauto  \nThe Canvas has mipmaps, and all mipmap levels will automatically be recomputed when switching away from the Canvas with [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\").\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [Canvas](canvas \"Canvas\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MipmapMode](https://love2d.org/wiki/MipmapMode)"
- name: MotorJoint
  id: motorjoint
  summary: Available since LÖVE 0.9.0 This type is not supported in earlier versions
  description: "# MotorJoint\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis type is not supported in earlier versions.\n\nControls the relative motion between two [Bodies](body \"Body\"). Position and rotation offsets can be specified, as well as the maximum motor force and torque that will be applied to reach the target offsets.\n\n## Constructors\n\n|                                                                                       |                                                                                     |       |     |\n|---------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------|-------|-----|\n| [love.physics.newMotorJoint](love.physics.newmotorjoint \"love.physics.newMotorJoint\") | Creates a joint between two bodies which controls the relative motion between them. | 0.9.0 |     |\n\n## Functions\n\n|                                                                                          |                                                                                 |       |       |\n|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------|-------|-------|\n| [Joint:destroy](joint-destroy \"Joint:destroy\")                                           | Explicitly destroys the Joint.                                                  |       |       |\n| [Joint:getAnchors](joint-getanchors \"Joint:getAnchors\")                                  | Get the anchor points of the joint.                                             |       |       |\n| [Joint:getBodies](joint-getbodies \"Joint:getBodies\")                                     | Gets the [bodies](body \"Body\") that the Joint is attached to.                   | 0.9.2 |       |\n| [Joint:getCollideConnected](joint-getcollideconnected \"Joint:getCollideConnected\")       | Gets whether the connected Bodies collide.                                      |       |       |\n| [Joint:getReactionForce](joint-getreactionforce \"Joint:getReactionForce\")                | Returns the reaction force on the second body.                                  |       |       |\n| [Joint:getReactionTorque](joint-getreactiontorque \"Joint:getReactionTorque\")             | Returns the reaction torque on the second body.                                 |       |       |\n| [Joint:getType](joint-gettype \"Joint:getType\")                                           | Gets a string representing the type.                                            |       |       |\n| [Joint:getUserData](joint-getuserdata \"Joint:getUserData\")                               | Returns the Lua value associated with this Joint.                               | 0.9.2 |       |\n| [Joint:isDestroyed](joint-isdestroyed \"Joint:isDestroyed\")                               | Gets whether the Joint is destroyed.                                            | 0.9.2 |       |\n| [Joint:setCollideConnected](joint-setcollideconnected \"Joint:setCollideConnected\")       | Sets whether the connected Bodies should collide with each other.               |       | 0.8.0 |\n| [Joint:setUserData](joint-setuserdata \"Joint:setUserData\")                               | Associates a Lua value with the Joint.                                          | 0.9.2 |       |\n| [MotorJoint:getAngularOffset](motorjoint-getangularoffset \"MotorJoint:getAngularOffset\") | Gets the target angular offset between the two Bodies the Joint is attached to. | 0.9.0 |       |\n| [MotorJoint:getLinearOffset](motorjoint-getlinearoffset \"MotorJoint:getLinearOffset\")    | Gets the target linear offset between the two Bodies the Joint is attached to.  | 0.9.0 |       |\n| [MotorJoint:setAngularOffset](motorjoint-setangularoffset \"MotorJoint:setAngularOffset\") | Sets the target angular offset between the two Bodies the Joint is attached to. | 0.9.0 |       |\n| [MotorJoint:setLinearOffset](motorjoint-setlinearoffset \"MotorJoint:setLinearOffset\")    | Sets the target linear offset between the two Bodies the Joint is attached to.  | 0.9.0 |       |\n\n## Supertypes\n\n- [Joint](joint \"Joint\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MotorJoint](https://love2d.org/wiki/MotorJoint)"
- name: MotorJoint:getAngularOffset
  id: motorjoint-getangularoffset
  summary: Available since LÖVE 0.9.0 This method is not supported in earlier versions
  description: "# MotorJoint:getAngularOffset\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis method is not supported in earlier versions.\n\nGets the target angular offset between the two Bodies the Joint is attached to.\n\n## Function\n\n### Synopsis\n\n``` lua\nangleoffset = MotorJoint:getAngularOffset( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` angleoffset`  \nThe target angular offset in radians: the second body's angle minus the first body's angle.\n\n## See Also\n\n- [MotorJoint](motorjoint \"MotorJoint\")\n- [MotorJoint:setAngularOffset](motorjoint-setangularoffset \"MotorJoint:setAngularOffset\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MotorJoint:getAngularOffset](https://love2d.org/wiki/MotorJoint:getAngularOffset)"
- name: MotorJoint:getLinearOffset
  id: motorjoint-getlinearoffset
  summary: Available since LÖVE 0.9.0 This method is not supported in earlier versions
  description: "# MotorJoint:getLinearOffset\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis method is not supported in earlier versions.\n\nGets the target linear offset between the two Bodies the Joint is attached to.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = MotorJoint:getLinearOffset( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x component of the target linear offset, relative to the first Body.\n\n[`number`](number \"number\")` y`  \nThe y component of the target linear offset, relative to the first Body.\n\n## See Also\n\n- [MotorJoint](motorjoint \"MotorJoint\")\n- [MotorJoint:setLinearOffset](motorjoint-setlinearoffset \"MotorJoint:setLinearOffset\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MotorJoint:getLinearOffset](https://love2d.org/wiki/MotorJoint:getLinearOffset)"
- name: MotorJoint:setAngularOffset
  id: motorjoint-setangularoffset
  summary: Available since LÖVE 0.9.0 This method is not supported in earlier versions
  description: "# MotorJoint:setAngularOffset\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis method is not supported in earlier versions.\n\nSets the target angluar offset between the two Bodies the Joint is attached to.\n\n## Function\n\n### Synopsis\n\n``` lua\nMotorJoint:setAngularOffset( angleoffset )\n```\n\n### Arguments\n\n[`number`](number \"number\")` angleoffset`  \nThe target angular offset in radians: the second body's angle minus the first body's angle.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [MotorJoint](motorjoint \"MotorJoint\")\n- [MotorJoint:getAngularOffset](motorjoint-getangularoffset \"MotorJoint:getAngularOffset\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MotorJoint:setAngularOffset](https://love2d.org/wiki/MotorJoint:setAngularOffset)"
- name: MotorJoint:setLinearOffset
  id: motorjoint-setlinearoffset
  summary: Available since LÖVE 0.9.0 This method is not supported in earlier versions
  description: "# MotorJoint:setLinearOffset\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis method is not supported in earlier versions.\n\nSets the target linear offset between the two Bodies the Joint is attached to.\n\n## Function\n\n### Synopsis\n\n``` lua\nMotorJoint:setLinearOffset( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x component of the target linear offset, relative to the first Body.\n\n[`number`](number \"number\")` y`  \nThe y component of the target linear offset, relative to the first Body.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [MotorJoint](motorjoint \"MotorJoint\")\n- [MotorJoint:getLinearOffset](motorjoint-getlinearoffset \"MotorJoint:getLinearOffset\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MotorJoint:setLinearOffset](https://love2d.org/wiki/MotorJoint:setLinearOffset)"
- name: MouseConstant
  id: mouseconstant
  summary: Removed in LÖVE 0.10.0 Mouse button constants have been replaced with button index numbers
  description: "# MouseConstant\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nMouse button constants have been replaced with button index numbers.\n\n  \nMouse buttons.\n\n## Constants\n\nl  \nLeft Mouse Button.\n\nm  \nMiddle Mouse Button.\n\nr  \nRight Mouse Button.\n\nwd  \nMouse Wheel Down.\n\nwu  \nMouse Wheel Up.\n\nx1  \nMouse X1 (also known as button 4).\n\nx2  \nMouse X2 (also known as button 5).\n\n## See Also\n\n- [love.mouse](love.mouse \"love.mouse\")\n- [love.mouse.isDown](love.mouse.isdown \"love.mouse.isDown\")\n- [love.mousepressed](love.mousepressed \"love.mousepressed\")\n- [love.mousereleased](love.mousereleased \"love.mousereleased\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MouseConstant](https://love2d.org/wiki/MouseConstant)"
- name: MouseJoint
  id: mousejoint
  summary: For controlling objects with the mouse
  description: "# MouseJoint\n\nFor controlling objects with the mouse.\n\n## Constructors\n\n|                                                                                       |                                              |     |     |\n|---------------------------------------------------------------------------------------|----------------------------------------------|-----|-----|\n| [love.physics.newMouseJoint](love.physics.newmousejoint \"love.physics.newMouseJoint\") | Create a joint between a body and the mouse. |     |     |\n\n## Functions\n\n|                                                                                       |                                                                   |       |       |\n|---------------------------------------------------------------------------------------|-------------------------------------------------------------------|-------|-------|\n| [Joint:destroy](joint-destroy \"Joint:destroy\")                                        | Explicitly destroys the Joint.                                    |       |       |\n| [Joint:getAnchors](joint-getanchors \"Joint:getAnchors\")                               | Get the anchor points of the joint.                               |       |       |\n| [Joint:getBodies](joint-getbodies \"Joint:getBodies\")                                  | Gets the [bodies](body \"Body\") that the Joint is attached to.     | 0.9.2 |       |\n| [Joint:getCollideConnected](joint-getcollideconnected \"Joint:getCollideConnected\")    | Gets whether the connected Bodies collide.                        |       |       |\n| [Joint:getReactionForce](joint-getreactionforce \"Joint:getReactionForce\")             | Returns the reaction force on the second body.                    |       |       |\n| [Joint:getReactionTorque](joint-getreactiontorque \"Joint:getReactionTorque\")          | Returns the reaction torque on the second body.                   |       |       |\n| [Joint:getType](joint-gettype \"Joint:getType\")                                        | Gets a string representing the type.                              |       |       |\n| [Joint:getUserData](joint-getuserdata \"Joint:getUserData\")                            | Returns the Lua value associated with this Joint.                 | 0.9.2 |       |\n| [Joint:isDestroyed](joint-isdestroyed \"Joint:isDestroyed\")                            | Gets whether the Joint is destroyed.                              | 0.9.2 |       |\n| [Joint:setCollideConnected](joint-setcollideconnected \"Joint:setCollideConnected\")    | Sets whether the connected Bodies should collide with each other. |       | 0.8.0 |\n| [Joint:setUserData](joint-setuserdata \"Joint:setUserData\")                            | Associates a Lua value with the Joint.                            | 0.9.2 |       |\n| [MouseJoint:getDampingRatio](mousejoint-getdampingratio \"MouseJoint:getDampingRatio\") | Returns the damping ratio.                                        | 0.8.0 |       |\n| [MouseJoint:getFrequency](mousejoint-getfrequency \"MouseJoint:getFrequency\")          | Returns the frequency.                                            | 0.8.0 |       |\n| [MouseJoint:getMaxForce](mousejoint-getmaxforce \"MouseJoint:getMaxForce\")             | Gets the highest allowed force.                                   |       |       |\n| [MouseJoint:getTarget](mousejoint-gettarget \"MouseJoint:getTarget\")                   | Gets the target point.                                            |       |       |\n| [MouseJoint:setDampingRatio](mousejoint-setdampingratio \"MouseJoint:setDampingRatio\") | Sets a new damping ratio.                                         | 0.8.0 |       |\n| [MouseJoint:setFrequency](mousejoint-setfrequency \"MouseJoint:setFrequency\")          | Sets a new frequency.                                             | 0.8.0 |       |\n| [MouseJoint:setMaxForce](mousejoint-setmaxforce \"MouseJoint:setMaxForce\")             | Sets the highest allowed force.                                   |       |       |\n| [MouseJoint:setTarget](mousejoint-settarget \"MouseJoint:setTarget\")                   | Sets the target point.                                            |       |       |\n\n## Supertypes\n\n- [Joint](joint \"Joint\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MouseJoint](https://love2d.org/wiki/MouseJoint)"
- name: MouseJoint:getDampingRatio
  id: mousejoint-getdampingratio
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# MouseJoint:getDampingRatio\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the damping ratio.\n\n## Function\n\n### Synopsis\n\n``` lua\nratio = MouseJoint:getDampingRatio( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` ratio`  \nThe new damping ratio.\n\n## See Also\n\n- [MouseJoint](mousejoint \"MouseJoint\")\n- [MouseJoint:setDampingRatio](mousejoint-setdampingratio \"MouseJoint:setDampingRatio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MouseJoint:getDampingRatio](https://love2d.org/wiki/MouseJoint:getDampingRatio)"
- name: MouseJoint:getFrequency
  id: mousejoint-getfrequency
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# MouseJoint:getFrequency\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the frequency.\n\n## Function\n\n### Synopsis\n\n``` lua\nfreq = MouseJoint:getFrequency( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` freq`  \nThe frequency in hertz.\n\n## See Also\n\n- [MouseJoint](mousejoint \"MouseJoint\")\n- [MouseJoint:setFrequency](mousejoint-setfrequency \"MouseJoint:setFrequency\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MouseJoint:getFrequency](https://love2d.org/wiki/MouseJoint:getFrequency)"
- name: MouseJoint:getMaxForce
  id: mousejoint-getmaxforce
  summary: Gets the highest allowed force
  description: "# MouseJoint:getMaxForce\n\nGets the highest allowed force.\n\n## Function\n\n### Synopsis\n\n``` lua\nf = MouseJoint:getMaxForce( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` f`  \nThe max allowed force.\n\n## See Also\n\n- [MouseJoint](mousejoint \"MouseJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MouseJoint:getMaxForce](https://love2d.org/wiki/MouseJoint:getMaxForce)"
- name: MouseJoint:getTarget
  id: mousejoint-gettarget
  summary: Gets the target point
  description: "# MouseJoint:getTarget\n\nGets the target point.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = MouseJoint:getTarget( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x-component of the target.\n\n[`number`](number \"number\")` y`  \nThe x-component of the target.\n\n## See Also\n\n- [MouseJoint](mousejoint \"MouseJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MouseJoint:getTarget](https://love2d.org/wiki/MouseJoint:getTarget)"
- name: MouseJoint:setDampingRatio
  id: mousejoint-setdampingratio
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# MouseJoint:setDampingRatio\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets a new damping ratio.\n\n## Function\n\n### Synopsis\n\n``` lua\nMouseJoint:setDampingRatio( ratio )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ratio`  \nThe new damping ratio.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [MouseJoint](mousejoint \"MouseJoint\")\n- [MouseJoint:getDampingRatio](mousejoint-getdampingratio \"MouseJoint:getDampingRatio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MouseJoint:setDampingRatio](https://love2d.org/wiki/MouseJoint:setDampingRatio)"
- name: MouseJoint:setFrequency
  id: mousejoint-setfrequency
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# MouseJoint:setFrequency\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets a new frequency.\n\n## Function\n\n### Synopsis\n\n``` lua\nMouseJoint:setFrequency( freq )\n```\n\n### Arguments\n\n[`number`](number \"number\")` freq`  \nThe new frequency in hertz.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [MouseJoint](mousejoint \"MouseJoint\")\n- [MouseJoint:getFrequency](mousejoint-getfrequency \"MouseJoint:getFrequency\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MouseJoint:setFrequency](https://love2d.org/wiki/MouseJoint:setFrequency)"
- name: MouseJoint:setMaxForce
  id: mousejoint-setmaxforce
  summary: Sets the highest allowed force
  description: "# MouseJoint:setMaxForce\n\nSets the highest allowed force.\n\n## Function\n\n### Synopsis\n\n``` lua\nMouseJoint:setMaxForce( f )\n```\n\n### Arguments\n\n[`number`](number \"number\")` f`  \nThe max allowed force.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [MouseJoint](mousejoint \"MouseJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MouseJoint:setMaxForce](https://love2d.org/wiki/MouseJoint:setMaxForce)"
- name: MouseJoint:setTarget
  id: mousejoint-settarget
  summary: Sets the target point
  description: "# MouseJoint:setTarget\n\nSets the target point.\n\n## Function\n\n### Synopsis\n\n``` lua\nMouseJoint:setTarget( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-component of the target.\n\n[`number`](number \"number\")` y`  \nThe y-component of the target.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [MouseJoint](mousejoint \"MouseJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/MouseJoint:setTarget](https://love2d.org/wiki/MouseJoint:setTarget)"
- name: nil
  id: nil
  summary: Nil is the type of the value nil, whose main property is to be different from any other value; it usually represents the absence of a useful value
  description: "# nil\n\nFrom the Lua 5.1 [reference manual §2.2](https://www.lua.org/manual/5.1/manual.html#2.2):\n\nNil is the type of the value nil, whose main property is to be different from any other value; it usually represents the absence of a useful value.\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/nil](https://love2d.org/wiki/nil)"
- name: number
  id: number
  summary: Number represents real (double-precision floating-point) numbers
  description: "# number\n\nFrom the Lua 5.1 [reference manual §2.2](https://www.lua.org/manual/5.1/manual.html#2.2):\n\nNumber represents real (double-precision floating-point) numbers.\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/number](https://love2d.org/wiki/number)"
- name: Object
  id: object
  summary: The superclass of all LÖVE types
  description: "# Object\n\nThe superclass of all LÖVE types.\n\n## Functions\n\n|                                                   |                                                  |      |     |\n|---------------------------------------------------|--------------------------------------------------|------|-----|\n| [Object:release](object-release \"Object:release\") | Immediately destroys the object's Lua reference. | 11.0 |     |\n| [Object:type](object-type \"Object:type\")          | Gets the type of the object as a string.         |      |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")    | Checks whether an object is of a certain type.   |      |     |\n\n## Subtypes\n\n|                                                                                                                    |                                                                                           |        |       |\n|--------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------|--------|-------|\n| [BezierCurve](beziercurve \"BezierCurve\")                                                                           | A Bézier curve object that can evaluate and render Bézier curves of arbitrary degree.     | 0.9.0  |       |\n| [Body](body \"Body\")                                                                                                | Bodies are objects with velocity and position.                                            |        |       |\n| [ByteData](bytedata \"ByteData\")                                                                                    | Data object containing arbitrary bytes in an contiguous memory.                           | 11.0   |       |\n| [Canvas](canvas \"Canvas\")                                                                                          | Off-screen render target.                                                                 | 0.8.0  |       |\n| [ChainShape](chainshape \"ChainShape\")                                                                              | A ChainShape consists of multiple line segments.                                          |        |       |\n| [Channel](channel \"Channel\")                                                                                       | An object which can be used to send and receive data between different threads.           | 0.9.0  |       |\n| [CircleShape](circleshape \"CircleShape\")                                                                           | Circle extends Shape and adds a radius and a local position.                              |        |       |\n| [CompressedData](compresseddata \"CompressedData\")                                                                  | Byte data compressed using a specific algorithm.                                          | 0.10.0 |       |\n| [CompressedImageData](compressedimagedata \"CompressedImageData\")                                                   | Compressed image data designed to stay compressed in RAM and on the GPU.                  | 0.9.0  |       |\n| [Contact](contact \"Contact\")                                                                                       | Contacts are objects created to manage collisions in worlds.                              |        |       |\n| [Cursor](cursor \"Cursor\")                                                                                          | Represents a hardware cursor.                                                             | 0.9.0  |       |\n| [Data](data \"Data\")                                                                                                | The superclass of all data.                                                               |        |       |\n| [Decoder](decoder \"Decoder\")                                                                                       | An object which can gradually decode a sound file.                                        |        |       |\n| [DistanceJoint](distancejoint \"DistanceJoint\")                                                                     | Keeps two bodies at the same distance.                                                    |        |       |\n| [Drawable](drawable \"Drawable\")                                                                                    | Superclass for all things that can be drawn on screen.                                    |        |       |\n| [DroppedFile](droppedfile \"DroppedFile\")                                                                           | Represents a file dropped from the window.                                                | 0.10.0 |       |\n| [EdgeShape](edgeshape \"EdgeShape\")                                                                                 | EdgeShape is a line segment.                                                              |        |       |\n| [File](file \"File\")                                                                                                | Represents a file on the filesystem.                                                      |        |       |\n| [FileData](filedata \"FileData\")                                                                                    | [Data](data \"Data\") representing the contents of a file.                                  |        |       |\n| [Fixture](fixture \"Fixture\")                                                                                       | Fixtures attach shapes to bodies.                                                         | 0.8.0  |       |\n| [Font](font \"Font\")                                                                                                | Defines the shape of characters than can be drawn onto the screen.                        |        |       |\n| [FontData](fontdata \"FontData\")                                                                                    | A FontData represents a font.                                                             | 0.7.0  | 0.8.0 |\n| [Framebuffer](framebuffer \"Framebuffer\")                                                                           | Off-screen render target.                                                                 | 0.7.0  | 0.8.0 |\n| [FrictionJoint](frictionjoint \"FrictionJoint\")                                                                     | A FrictionJoint applies friction to a body.                                               | 0.8.0  |       |\n| [GearJoint](gearjoint \"GearJoint\")                                                                                 | Keeps bodies together in such a way that they act like gears.                             |        |       |\n| [GlyphData](glyphdata \"GlyphData\")                                                                                 | A GlyphData represents a drawable symbol of a font.                                       | 0.7.0  |       |\n| [Image](image \"Image\")                                                                                             | Drawable image type.                                                                      |        |       |\n| [ImageData](imagedata \"ImageData\")                                                                                 | Raw (decoded) image data.                                                                 |        |       |\n| [Joint](joint \"Joint\")                                                                                             | Attach multiple bodies together to interact in unique ways.                               |        |       |\n| [Joystick](joystick \"Joystick\")                                                                                    | Represents a physical joystick.                                                           | 0.9.0  |       |\n| [Mesh](mesh \"Mesh\")                                                                                                | A 2D polygon mesh used for drawing arbitrary textured shapes.                             | 0.9.0  |       |\n| [MotorJoint](motorjoint \"MotorJoint\")                                                                              | Controls the relative motion between two [Bodies](body \"Body\")                            | 0.9.0  |       |\n| [MouseJoint](mousejoint \"MouseJoint\")                                                                              | For controlling objects with the mouse.                                                   |        |       |\n| [ParticleSystem](particlesystem \"ParticleSystem\")                                                                  | Used to create cool effects, like fire.                                                   |        |       |\n| [PixelEffect](pixeleffect \"PixelEffect\")                                                                           | Pixel shader effect.                                                                      | 0.8.0  | 0.9.0 |\n| [PolygonShape](polygonshape \"PolygonShape\")                                                                        | Polygon is a convex polygon with up to 8 sides.                                           |        |       |\n| [PrismaticJoint](prismaticjoint \"PrismaticJoint\")                                                                  | Restricts relative motion between Bodies to one shared axis.                              |        |       |\n| [PulleyJoint](pulleyjoint \"PulleyJoint\")                                                                           | Allows you to simulate bodies connected through pulleys.                                  |        |       |\n| [Quad](quad \"Quad\")                                                                                                | A quadrilateral with texture coordinate information.                                      |        |       |\n| [RandomGenerator](randomgenerator \"RandomGenerator\")                                                               | A random number generation object which has its own random state.                         | 0.9.0  |       |\n| [Rasterizer](rasterizer \"Rasterizer\")                                                                              | A Rasterizer represents font data and glyphs.                                             | 0.7.0  |       |\n| [RecordingDevice](recordingdevice \"RecordingDevice\")                                                               | Represents an audio input device capable of recording sounds.                             | 11.0   |       |\n| [RecordingDevice (Français)](https://love2d.org/wiki/RecordingDevice_(Fran%C3%A7ais) \"RecordingDevice (Français)\") | Représente un périphérique d'entrée audio capable d'enregistrer des sons.                 | 11.0   |       |\n| [RevoluteJoint](revolutejoint \"RevoluteJoint\")                                                                     | Allow two Bodies to revolve around a shared point.                                        |        |       |\n| [RopeJoint](ropejoint \"RopeJoint\")                                                                                 | Enforces a maximum distance between two points on two bodies.                             | 0.8.0  |       |\n| [Shader](shader \"Shader\")                                                                                          | Shader effect.                                                                            | 0.9.0  |       |\n| [Shape](shape \"Shape\")                                                                                             | [Shapes](shape \"Shape\") are objects used to control mass and collisions.                  |        |       |\n| [SoundData](sounddata \"SoundData\")                                                                                 | Contains raw audio samples.                                                               |        |       |\n| [Source](source \"Source\")                                                                                          | A Source represents audio you can play back.                                              |        |       |\n| [SpriteBatch](spritebatch \"SpriteBatch\")                                                                           | Store image positions in a buffer, and draw it in one call.                               |        |       |\n| [Text](text \"Text\")                                                                                                | Drawable text.                                                                            | 0.10.0 |       |\n| [Texture](texture \"Texture\")                                                                                       | Superclass for drawable objects which represent a texture.                                | 0.9.1  |       |\n| [Texture (Français)](https://love2d.org/wiki/Texture_(Fran%C3%A7ais) \"Texture (Français)\")                         | Super classe pour les objets pouvant être dessinés (drawable) qui représente une texture. | 0.9.1  |       |\n| [Thread](thread \"Thread\")                                                                                          | A Thread represents a thread.                                                             | 0.7.0  |       |\n| [Transform](transform \"Transform\")                                                                                 | Object containing a coordinate system transformation.                                     | 11.0   |       |\n| [Video](video \"Video\")                                                                                             | A drawable video.                                                                         | 0.10.0 |       |\n| [VideoStream](videostream \"VideoStream\")                                                                           | An object which decodes, streams, and controls [Videos](video \"Video\").                   | 0.10.0 |       |\n| [WeldJoint](weldjoint \"WeldJoint\")                                                                                 | A WeldJoint essentially glues two bodies together.                                        | 0.8.0  |       |\n| [WheelJoint](wheeljoint \"WheelJoint\")                                                                              | Restricts a point on the second body to a line on the first body.                         |        |       |\n| [World](world \"World\")                                                                                             | A world is an object that contains all bodies and joints.                                 |        |       |\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Object](https://love2d.org/wiki/Object)"
- name: Object:release
  id: object-release
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Object:release\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nDestroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other LÖVE object or thread.\n\nThis method can be used to immediately clean up resources without waiting for Lua's garbage collector.\n\nAfter this method has been called, attempting to call any other method on the object or using the object as an argument in another LÖVE API will cause an error.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = Object:release( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the object was released by this call, false if it had been previously released.\n\n## See Also\n\n- [Object](object \"Object\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Object:release](https://love2d.org/wiki/Object:release)"
- name: Object:type
  id: object-type
  summary: Gets the type of the object as a string
  description: "# Object:type\n\nGets the type of the object as a string.\n\n## Function\n\n### Synopsis\n\n``` lua\ntype = Object:type()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` type`  \nThe type as a string.\n\n## Examples\n\n### Printing the type of an object\n\n``` lua\nimage = love.graphics.newImage(\"test.png\")\nprint(image:type()) -- outputs: Image\nsource = love.audio.newSource(\"test.ogg\")\nprint(source:type()) -- outputs: Source\n```\n\n## See Also\n\n- [Object](object \"Object\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Object:type](https://love2d.org/wiki/Object:type)"
- name: Object:typeOf
  id: object-typeof
  summary: Checks whether an object is of a certain type
  description: "# Object:typeOf\n\nChecks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true.\n\n## Function\n\n### Synopsis\n\n``` lua\nb = Object:typeOf( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the type to check for.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` b`  \nTrue if the object is of the specified type, false otherwise.\n\n## Examples\n\n### Checking the type of an object\n\n``` lua\nimage = love.graphics.newImage(\"test.png\")\nprint(image:typeOf(\"Object\")) -- outputs: true\nprint(image:typeOf(\"Drawable\")) -- outputs: true\nprint(image:typeOf(\"Image\")) -- outputs: true\nprint(image:typeOf(\"MouseJoint\")) -- outputs: false\n```\n\n## See Also\n\n- [Object](object \"Object\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Object:typeOf](https://love2d.org/wiki/Object:typeOf)"
- name: ParticleInsertMode
  id: particleinsertmode
  summary: Available since LÖVE 0.9.0 This enum is not supported in earlier versions
  description: "# ParticleInsertMode\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in earlier versions.\n\nHow newly created particles are added to the ParticleSystem.\n\n## Constants\n\ntop  \nParticles are inserted at the top of the ParticleSystem's list of particles.\n\nbottom  \nParticles are inserted at the bottom of the ParticleSystem's list of particles.\n\nrandom  \nParticles are inserted at random positions in the ParticleSystem's list of particles.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setInsertMode](particlesystem-setinsertmode \"ParticleSystem:setInsertMode\")\n- [ParticleSystem:getInsertMode](particlesystem-getinsertmode \"ParticleSystem:getInsertMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleInsertMode](https://love2d.org/wiki/ParticleInsertMode)"
- name: ParticleSystem
  id: particlesystem
  summary: A ParticleSystem can be used to create particle effects like fire or smoke
  description: "# ParticleSystem\n\nA ParticleSystem can be used to create particle effects like fire or smoke.\n\nThe particle system has to be created using [love.graphics.newParticleSystem](love.graphics.newparticlesystem \"love.graphics.newParticleSystem\"). Just like any other [Drawable](drawable \"Drawable\") it can be drawn to the screen using [love.graphics.draw](love.graphics.draw \"love.graphics.draw\"). You also have to [update](particlesystem-update \"ParticleSystem:update\") it in the [update callback](love.update \"love.update\") to see any changes in the particles emitted.\n\nThe particle system won't create any particles unless you call [setParticleLifetime](particlesystem-setparticlelifetime \"ParticleSystem:setParticleLifetime\") and [setEmissionRate](particlesystem-setemissionrate \"ParticleSystem:setEmissionRate\").\n\n## Constructors\n\n|                                                                                                      |                                   |     |     |\n|------------------------------------------------------------------------------------------------------|-----------------------------------|-----|-----|\n| [love.graphics.newParticleSystem](love.graphics.newparticlesystem \"love.graphics.newParticleSystem\") | Creates a new **ParticleSystem**. |     |     |\n\n## Functions\n\n|                                                                                                                                 |                                                                                                      |       |        |\n|---------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|-------|--------|\n| [Object:release](object-release \"Object:release\")                                                                               | Immediately destroys the object's Lua reference.                                                     | 11.0  |        |\n| [Object:type](object-type \"Object:type\")                                                                                        | Gets the type of the object as a string.                                                             |       |        |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                                                                  | Checks whether an object is of a certain type.                                                       |       |        |\n| [ParticleSystem:clone](particlesystem-clone \"ParticleSystem:clone\")                                                             | Creates an identical copy of the ParticleSystem in the stopped state.                                | 0.9.1 |        |\n| [ParticleSystem:count](particlesystem-count \"ParticleSystem:count\")                                                             | Gets the amount of particles that are currently in the system.                                       |       | 0.9.0  |\n| [ParticleSystem:emit](particlesystem-emit \"ParticleSystem:emit\")                                                                | Emits a burst of particles from the particle emitter.                                                | 0.9.0 |        |\n| [ParticleSystem:getAreaSpread](particlesystem-getareaspread \"ParticleSystem:getAreaSpread\")                                     | Gets the area-based spawn parameters for the particles.                                              | 0.9.0 | 11.0   |\n| [ParticleSystem:getBufferSize](particlesystem-getbuffersize \"ParticleSystem:getBufferSize\")                                     | Gets the maximum number of particles the ParticleSystem can have at once.                            | 0.9.0 |        |\n| [ParticleSystem:getColors](particlesystem-getcolors \"ParticleSystem:getColors\")                                                 | Gets the colors to apply to the particle sprite.                                                     | 0.9.0 |        |\n| [ParticleSystem:getCount](particlesystem-getcount \"ParticleSystem:getCount\")                                                    | Gets the number of particles that are currently in the system.                                       | 0.9.0 |        |\n| [ParticleSystem:getDirection](particlesystem-getdirection \"ParticleSystem:getDirection\")                                        | Gets the direction of the particle emitter (in radians).                                             |       |        |\n| [ParticleSystem:getEmissionArea](particlesystem-getemissionarea \"ParticleSystem:getEmissionArea\")                               | Gets the area-based spawn parameters for the particles.                                              | 11.0  |        |\n| [ParticleSystem:getEmissionRate](particlesystem-getemissionrate \"ParticleSystem:getEmissionRate\")                               | Gets the amount of particles emitted per second.                                                     | 0.9.0 |        |\n| [ParticleSystem:getEmitterLifetime](particlesystem-getemitterlifetime \"ParticleSystem:getEmitterLifetime\")                      | Gets how long the particle system will emit particles                                                | 0.9.0 |        |\n| [ParticleSystem:getImage](particlesystem-getimage \"ParticleSystem:getImage\")                                                    | Gets the image used for the particles.                                                               | 0.9.0 | 0.10.0 |\n| [ParticleSystem:getInsertMode](particlesystem-getinsertmode \"ParticleSystem:getInsertMode\")                                     | Gets the mode used when the ParticleSystem adds new particles.                                       | 0.9.0 |        |\n| [ParticleSystem:getLinearAcceleration](particlesystem-getlinearacceleration \"ParticleSystem:getLinearAcceleration\")             | Gets the linear acceleration (acceleration along the x and y axes) for particles.                    | 0.9.0 |        |\n| [ParticleSystem:getLinearDamping](particlesystem-getlineardamping \"ParticleSystem:getLinearDamping\")                            | Gets the amount of linear damping (constant deceleration) for particles.                             | 0.9.2 |        |\n| [ParticleSystem:getOffset](particlesystem-getoffset \"ParticleSystem:getOffset\")                                                 | Gets the particle image's draw offset.                                                               | 0.9.0 |        |\n| [ParticleSystem:getOffsetX](particlesystem-getoffsetx \"ParticleSystem:getOffsetX\")                                              | Get the x coordinate of the particle rotation offset.                                                |       | 0.9.0  |\n| [ParticleSystem:getOffsetY](particlesystem-getoffsety \"ParticleSystem:getOffsetY\")                                              | Get the y coordinate of the particle rotation offset.                                                |       | 0.9.0  |\n| [ParticleSystem:getParticleLifetime](particlesystem-getparticlelifetime \"ParticleSystem:getParticleLifetime\")                   | Gets the lifetime of the particles.                                                                  | 0.9.0 |        |\n| [ParticleSystem:getPosition](particlesystem-getposition \"ParticleSystem:getPosition\")                                           | Gets the position of the emitter.                                                                    |       |        |\n| [ParticleSystem:getQuads](particlesystem-getquads \"ParticleSystem:getQuads\")                                                    | Gets a series of [Quads](quad \"Quad\") used for the particle sprites.                                 | 0.9.2 |        |\n| [ParticleSystem:getRadialAcceleration](particlesystem-getradialacceleration \"ParticleSystem:getRadialAcceleration\")             | Gets the radial acceleration (away from the emitter).                                                | 0.9.0 |        |\n| [ParticleSystem:getRotation](particlesystem-getrotation \"ParticleSystem:getRotation\")                                           | Gets the rotation of the image upon particle creation (in radians).                                  | 0.9.0 |        |\n| [ParticleSystem:getSizeVariation](particlesystem-getsizevariation \"ParticleSystem:getSizeVariation\")                            | Gets the amount of size variation.                                                                   | 0.9.0 |        |\n| [ParticleSystem:getSizes](particlesystem-getsizes \"ParticleSystem:getSizes\")                                                    | Gets the sizes of the particle over its lifetime.                                                    | 0.9.0 |        |\n| [ParticleSystem:getSpeed](particlesystem-getspeed \"ParticleSystem:getSpeed\")                                                    | Gets the speed of the particles.                                                                     | 0.9.0 |        |\n| [ParticleSystem:getSpin](particlesystem-getspin \"ParticleSystem:getSpin\")                                                       | Gets the spin of the sprite.                                                                         | 0.9.0 |        |\n| [ParticleSystem:getSpinVariation](particlesystem-getspinvariation \"ParticleSystem:getSpinVariation\")                            | Gets the amount of spin variation.                                                                   | 0.9.0 |        |\n| [ParticleSystem:getSpread](particlesystem-getspread \"ParticleSystem:getSpread\")                                                 | Gets the amount of directional spread of the particle emitter (in radians).                          |       |        |\n| [ParticleSystem:getTangentialAcceleration](particlesystem-gettangentialacceleration \"ParticleSystem:getTangentialAcceleration\") | Gets the tangential acceleration (acceleration perpendicular to the particle's direction).           | 0.9.0 |        |\n| [ParticleSystem:getTexture](particlesystem-gettexture \"ParticleSystem:getTexture\")                                              | Gets the texture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) used for the particles.       | 0.9.1 |        |\n| [ParticleSystem:getX](particlesystem-getx \"ParticleSystem:getX\")                                                                | Gets the x-coordinate of the particle emitter's position.                                            |       | 0.9.0  |\n| [ParticleSystem:getY](particlesystem-gety \"ParticleSystem:getY\")                                                                | Gets the y-coordinate of the particle emitter's position.                                            |       | 0.9.0  |\n| [ParticleSystem:hasRelativeRotation](particlesystem-hasrelativerotation \"ParticleSystem:hasRelativeRotation\")                   | Gets whether particle angles and rotations are relative to their velocities.                         | 0.9.1 |        |\n| [ParticleSystem:isActive](particlesystem-isactive \"ParticleSystem:isActive\")                                                    | Checks whether the particle system is actively emitting particles.                                   |       |        |\n| [ParticleSystem:isEmpty](particlesystem-isempty \"ParticleSystem:isEmpty\")                                                       | Checks whether the particle system is empty of particles.                                            |       | 0.9.0  |\n| [ParticleSystem:isFull](particlesystem-isfull \"ParticleSystem:isFull\")                                                          | Checks whether the particle system is full of particles.                                             |       | 0.9.0  |\n| [ParticleSystem:isPaused](particlesystem-ispaused \"ParticleSystem:isPaused\")                                                    | Checks whether the particle system is paused.                                                        | 0.9.0 |        |\n| [ParticleSystem:isStopped](particlesystem-isstopped \"ParticleSystem:isStopped\")                                                 | Checks whether the particle system is stopped.                                                       | 0.9.0 |        |\n| [ParticleSystem:moveTo](particlesystem-moveto \"ParticleSystem:moveTo\")                                                          | Moves the position of the emitter.                                                                   | 0.9.1 |        |\n| [ParticleSystem:pause](particlesystem-pause \"ParticleSystem:pause\")                                                             | Pauses the particle emitter.                                                                         |       |        |\n| [ParticleSystem:reset](particlesystem-reset \"ParticleSystem:reset\")                                                             | Resets the particle emitter, removing existing particles and resetting the lifetime counter.         |       |        |\n| [ParticleSystem:setAreaSpread](particlesystem-setareaspread \"ParticleSystem:setAreaSpread\")                                     | Sets area-based spawn parameters for the particles.                                                  | 0.9.0 | 11.0   |\n| [ParticleSystem:setBufferSize](particlesystem-setbuffersize \"ParticleSystem:setBufferSize\")                                     | Sets the size of the buffer (the max allowed amount of particles in the system).                     |       |        |\n| [ParticleSystem:setColor](particlesystem-setcolor \"ParticleSystem:setColor\")                                                    | Sets the color of the image.                                                                         |       | 0.8.0  |\n| [ParticleSystem:setColors](particlesystem-setcolors \"ParticleSystem:setColors\")                                                 | Sets the colors to apply to the particle sprite.                                                     | 0.8.0 |        |\n| [ParticleSystem:setDirection](particlesystem-setdirection \"ParticleSystem:setDirection\")                                        | Sets the direction the particles will be emitted in.                                                 |       |        |\n| [ParticleSystem:setEmissionArea](particlesystem-setemissionarea \"ParticleSystem:setEmissionArea\")                               | Sets area-based spawn parameters for the particles.                                                  | 11.0  |        |\n| [ParticleSystem:setEmissionRate](particlesystem-setemissionrate \"ParticleSystem:setEmissionRate\")                               | Sets the amount of particles emitted per second.                                                     |       |        |\n| [ParticleSystem:setEmitterLifetime](particlesystem-setemitterlifetime \"ParticleSystem:setEmitterLifetime\")                      | Sets how long the particle system should emit particles                                              | 0.9.0 |        |\n| [ParticleSystem:setGravity](particlesystem-setgravity \"ParticleSystem:setGravity\")                                              | Sets the gravity affecting the particles (acceleration along the y-axis).                            |       | 0.9.0  |\n| [ParticleSystem:setImage](particlesystem-setimage \"ParticleSystem:setImage\")                                                    | Sets the image to be used for the particles.                                                         | 0.9.0 | 0.10.0 |\n| [ParticleSystem:setInsertMode](particlesystem-setinsertmode \"ParticleSystem:setInsertMode\")                                     | Sets the mode to use when the ParticleSystem adds new particles.                                     | 0.9.0 |        |\n| [ParticleSystem:setLifetime](particlesystem-setlifetime \"ParticleSystem:setLifetime\")                                           | Sets how long the particle system should emit particles (if -1 then it emits particles forever).     |       | 0.9.0  |\n| [ParticleSystem:setLinearAcceleration](particlesystem-setlinearacceleration \"ParticleSystem:setLinearAcceleration\")             | Sets the linear acceleration (acceleration along the x and y axes) for particles.                    | 0.9.0 |        |\n| [ParticleSystem:setLinearDamping](particlesystem-setlineardamping \"ParticleSystem:setLinearDamping\")                            | Sets the amount of linear damping (constant deceleration) for particles.                             | 0.9.2 |        |\n| [ParticleSystem:setOffset](particlesystem-setoffset \"ParticleSystem:setOffset\")                                                 | Set the offset position which the particle sprite is rotated around.                                 |       |        |\n| [ParticleSystem:setParticleLife](particlesystem-setparticlelife \"ParticleSystem:setParticleLife\")                               | Sets the life of the particles.                                                                      |       | 0.9.0  |\n| [ParticleSystem:setParticleLifetime](particlesystem-setparticlelifetime \"ParticleSystem:setParticleLifetime\")                   | Sets the lifetime of the particles.                                                                  | 0.9.0 |        |\n| [ParticleSystem:setPosition](particlesystem-setposition \"ParticleSystem:setPosition\")                                           | Sets the position of the emitter.                                                                    |       |        |\n| [ParticleSystem:setQuads](particlesystem-setquads \"ParticleSystem:setQuads\")                                                    | Sets a series of [Quads](quad \"Quad\") to use for the particle sprites.                               | 0.9.2 |        |\n| [ParticleSystem:setRadialAcceleration](particlesystem-setradialacceleration \"ParticleSystem:setRadialAcceleration\")             | Set the radial acceleration (away from the emitter).                                                 |       |        |\n| [ParticleSystem:setRelativeRotation](particlesystem-setrelativerotation \"ParticleSystem:setRelativeRotation\")                   | Sets whether particle angles and rotations are relative to their velocities.                         | 0.9.1 |        |\n| [ParticleSystem:setRotation](particlesystem-setrotation \"ParticleSystem:setRotation\")                                           | Sets the rotation of the image upon particle creation (in radians).                                  |       |        |\n| [ParticleSystem:setSize](particlesystem-setsize \"ParticleSystem:setSize\")                                                       | Sets the size of the particle (1.0 being normal size).                                               |       | 0.8.0  |\n| [ParticleSystem:setSizeVariation](particlesystem-setsizevariation \"ParticleSystem:setSizeVariation\")                            | Sets the amount of size variation.                                                                   |       |        |\n| [ParticleSystem:setSizes](particlesystem-setsizes \"ParticleSystem:setSizes\")                                                    | Sets the sizes of the particle over its lifetime.                                                    | 0.8.0 |        |\n| [ParticleSystem:setSpeed](particlesystem-setspeed \"ParticleSystem:setSpeed\")                                                    | Sets the speed of the particles.                                                                     |       |        |\n| [ParticleSystem:setSpin](particlesystem-setspin \"ParticleSystem:setSpin\")                                                       | Sets the spin of the sprite.                                                                         |       |        |\n| [ParticleSystem:setSpinVariation](particlesystem-setspinvariation \"ParticleSystem:setSpinVariation\")                            | Sets the amount of spin variation.                                                                   |       |        |\n| [ParticleSystem:setSpread](particlesystem-setspread \"ParticleSystem:setSpread\")                                                 | Sets the amount of spread for the system.                                                            |       |        |\n| [ParticleSystem:setSprite](particlesystem-setsprite \"ParticleSystem:setSprite\")                                                 | Sets the image which is to be emitted.                                                               |       | 0.9.0  |\n| [ParticleSystem:setTangentialAcceleration](particlesystem-settangentialacceleration \"ParticleSystem:setTangentialAcceleration\") | Sets the tangential acceleration (acceleration perpendicular to the particle's direction).           |       |        |\n| [ParticleSystem:setTexture](particlesystem-settexture \"ParticleSystem:setTexture\")                                              | Sets the texture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) to be used for the particles. | 0.9.1 |        |\n| [ParticleSystem:start](particlesystem-start \"ParticleSystem:start\")                                                             | Starts the particle emitter.                                                                         |       |        |\n| [ParticleSystem:stop](particlesystem-stop \"ParticleSystem:stop\")                                                                | Stops the particle emitter, resetting the lifetime counter.                                          |       |        |\n| [ParticleSystem:update](particlesystem-update \"ParticleSystem:update\")                                                          | Updates the particle system; moving, creating and killing particles.                                 |       |        |\n\n## Enums\n\n|                                                                           |                                                              |       |     |\n|---------------------------------------------------------------------------|--------------------------------------------------------------|-------|-----|\n| [AreaSpreadDistribution](areaspreaddistribution \"AreaSpreadDistribution\") | Types of particle area spread distribution.                  | 0.9.0 |     |\n| [ParticleInsertMode](particleinsertmode \"ParticleInsertMode\")             | How newly created particles are added to the ParticleSystem. | 0.9.0 |     |\n\n## Supertypes\n\n- [Drawable](drawable \"Drawable\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \nParticle editors:\n\n- [https://love2d.org/forums/viewtopic.php?f=4&t=2110](https://love2d.org/forums/viewtopic.php?f=4&t=2110)\n- [https://love2d.org/forums/viewtopic.php?f=5&t=32954](https://love2d.org/forums/viewtopic.php?f=5&t=32954)\n- [https://love2d.org/forums/viewtopic.php?f=5&t=76986](https://love2d.org/forums/viewtopic.php?f=5&t=76986)\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem](https://love2d.org/wiki/ParticleSystem)"
- name: ParticleSystem:clone
  id: particlesystem-clone
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# ParticleSystem:clone\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nCreates an identical copy of the ParticleSystem in the stopped state.\n\n## Function\n\n### Synopsis\n\n``` lua\nparticlesystem = ParticleSystem:clone( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`ParticleSystem`](particlesystem \"ParticleSystem\")` particlesystem`  \nThe new identical copy of this ParticleSystem.\n\n## Notes\n\nCloned ParticleSystem inherit all the set-able state of the original ParticleSystem, but they are initialized stopped.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:clone](https://love2d.org/wiki/ParticleSystem:clone)"
- name: ParticleSystem:count
  id: particlesystem-count
  summary: Removed in LÖVE 0.9.0 It has been renamed to ParticleSystem:getCount
  description: "# ParticleSystem:count\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [ParticleSystem:getCount](particlesystem-getcount \"ParticleSystem:getCount\").\n\n  \nGets the amount of particles that are currently in the system.\n\n## Function\n\n### Synopsis\n\n``` lua\ncount = ParticleSystem:count( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` count`  \nThe current number of live particles.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:count](https://love2d.org/wiki/ParticleSystem:count)"
- name: ParticleSystem:emit
  id: particlesystem-emit
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:emit\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nEmits a burst of particles from the particle emitter.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:emit( numparticles )\n```\n\n### Arguments\n\n[`number`](number \"number\")` numparticles`  \nThe amount of particles to emit. The number of emitted particles will be truncated if the particle system's max [buffer size](particlesystem-getbuffersize \"ParticleSystem:getBufferSize\") is reached.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Spawn a bunch of particles\n\nThis example will create a burst of particles when the spacebar is pressed. You can use the [löve logo](https://love2d.org/wiki/File:Love-game-logo-256x256.png \"File:Love-game-logo-256x256.png\") as an example image.\n\n``` lua\nfunction love.load()\n    local img = love.graphics.newImage('logo.png')\n \n    psystem = love.graphics.newParticleSystem(img, 32)\n    psystem:setParticleLifetime(2, 5) -- Particles live at least 2s and at most 5s.\n    psystem:setLinearAcceleration(-5, -5, 50, 100) -- Randomized movement towards the bottom of the screen.\n    psystem:setColors(255, 255, 255, 255, 255, 255, 255, 0) -- Fade to black.\nend\n \nfunction love.draw()\n    -- Draw the particle system at the center of the game window.\n    love.graphics.draw(psystem, love.graphics.getWidth() * 0.5, love.graphics.getHeight() * 0.5)\nend\n \nfunction love.update(dt)\n    psystem:update(dt)\nend\n \nfunction love.keypressed(key)\n    if key == 'space' then\n        psystem:emit(32)\n    end\nend\n```\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:emit](https://love2d.org/wiki/ParticleSystem:emit)"
- name: ParticleSystem:getAreaSpread
  id: particlesystem-getareaspread
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getAreaSpread\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\n|                                                                                                                                      |\n|--------------------------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                                 |\n| This function has been renamed to [ParticleSystem:getEmissionArea](particlesystem-getemissionarea \"ParticleSystem:getEmissionArea\"). |\n\nGets the area-based spawn parameters for the particles.\n\n## Function\n\n### Synopsis\n\n``` lua\ndistribution, dx, dy = ParticleSystem:getAreaSpread( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`AreaSpreadDistribution`](areaspreaddistribution \"AreaSpreadDistribution\")` distribution`  \nThe type of distribution for new particles.\n\n[`number`](number \"number\")` dx`  \nThe maximum spawn distance from the emitter along the x-axis for uniform distribution, or the standard deviation along the x-axis for normal distribution.\n\n[`number`](number \"number\")` dy`  \nThe maximum spawn distance from the emitter along the y-axis for uniform distribution, or the standard deviation along the y-axis for normal distribution.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setAreaSpread](particlesystem-setareaspread \"ParticleSystem:setAreaSpread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getAreaSpread](https://love2d.org/wiki/ParticleSystem:getAreaSpread)"
- name: ParticleSystem:getBufferSize
  id: particlesystem-getbuffersize
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getBufferSize\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the maximum number of particles the ParticleSystem can have at once.\n\n## Function\n\n### Synopsis\n\n``` lua\nsize = ParticleSystem:getBufferSize( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` size`  \nThe maximum number of particles.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setBufferSize](particlesystem-setbuffersize \"ParticleSystem:setBufferSize\")\n- [ParticleSystem:getCount](particlesystem-getcount \"ParticleSystem:getCount\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getBufferSize](https://love2d.org/wiki/ParticleSystem:getBufferSize)"
- name: ParticleSystem:getColors
  id: particlesystem-getcolors
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getColors\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the series of colors applied to the particle sprite.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nrgba1, rgba2, ..., rgba8 = ParticleSystem:getColors( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`table`](table \"table\")` rgba1`  \nFirst color, a numerical indexed table with the red, green, blue and alpha values as numbers (0-1).\n\n[`table`](table \"table\")` rgba2`  \nSecond color, a numerical indexed table with the red, green, blue and alpha values as numbers (0-1).\n\n[`table`](table \"table\")` rgba8`  \nEighth color, a numerical indexed table with the red, green, blue and alpha values as numbers (0-1).\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setColors](particlesystem-setcolors \"ParticleSystem:setColors\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getColors](https://love2d.org/wiki/ParticleSystem:getColors)"
- name: ParticleSystem:getCount
  id: particlesystem-getcount
  summary: Available since LÖVE 0.9.0 It has been renamed from ParticleSystem:count
  description: "# ParticleSystem:getCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [ParticleSystem:count](particlesystem-count \"ParticleSystem:count\").\n\nGets the number of particles that are currently in the system.\n\n## Function\n\n### Synopsis\n\n``` lua\ncount = ParticleSystem:getCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` count`  \nThe current number of live particles.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:getBufferSize](particlesystem-getbuffersize \"ParticleSystem:getBufferSize\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getCount](https://love2d.org/wiki/ParticleSystem:getCount)"
- name: ParticleSystem:getDirection
  id: particlesystem-getdirection
  summary: None
  description: "# ParticleSystem:getDirection\n\nGets the direction of the particle emitter (in radians).\n\n## Function\n\n### Synopsis\n\n``` lua\ndirection = ParticleSystem:getDirection( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` direction`  \nThe direction of the emitter (radians).\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getDirection](https://love2d.org/wiki/ParticleSystem:getDirection)"
- name: ParticleSystem:getEmissionArea
  id: particlesystem-getemissionarea
  summary: Available since LÖVE 11.0 It has been renamed from ParticleSystem:getAreaSpread
  description: "# ParticleSystem:getEmissionArea\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [ParticleSystem:getAreaSpread](particlesystem-getareaspread \"ParticleSystem:getAreaSpread\").\n\nGets the area-based spawn parameters for the particles.\n\n## Function\n\n### Synopsis\n\n``` lua\ndistribution, dx, dy, angle, directionRelativeToCenter = ParticleSystem:getEmissionArea( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`AreaSpreadDistribution`](areaspreaddistribution \"AreaSpreadDistribution\")` distribution`  \nThe type of distribution for new particles.\n\n[`number`](number \"number\")` dx`  \nThe maximum spawn distance from the emitter along the x-axis for uniform distribution, or the standard deviation along the x-axis for normal distribution.\n\n[`number`](number \"number\")` dy`  \nThe maximum spawn distance from the emitter along the y-axis for uniform distribution, or the standard deviation along the y-axis for normal distribution.\n\n[`number`](number \"number\")` angle`  \nThe angle in radians of the emission area.\n\n[`boolean`](boolean \"boolean\")` directionRelativeToCenter`  \nTrue if newly spawned particles will be oriented relative to the center of the emission area, false otherwise.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setEmissionArea](particlesystem-setemissionarea \"ParticleSystem:setEmissionArea\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getEmissionArea](https://love2d.org/wiki/ParticleSystem:getEmissionArea)"
- name: ParticleSystem:getEmissionRate
  id: particlesystem-getemissionrate
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getEmissionRate\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the amount of particles emitted per second.\n\n## Function\n\n### Synopsis\n\n``` lua\nrate = ParticleSystem:getEmissionRate( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`number`](number \"number\")` rate`  \nThe amount of particles per second.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setEmissionRate](particlesystem-setemissionrate \"ParticleSystem:setEmissionRate\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getEmissionRate](https://love2d.org/wiki/ParticleSystem:getEmissionRate)"
- name: ParticleSystem:getEmitterLifetime
  id: particlesystem-getemitterlifetime
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getEmitterLifetime\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets how long the particle system will emit particles (if -1 then it emits particles forever).\n\n## Function\n\n### Synopsis\n\n``` lua\nlife = ParticleSystem:getEmitterLifetime( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`number`](number \"number\")` life`  \nThe lifetime of the emitter (in seconds).\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setEmitterLifetime](particlesystem-setemitterlifetime \"ParticleSystem:setEmitterLifetime\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getEmitterLifetime](https://love2d.org/wiki/ParticleSystem:getEmitterLifetime)"
- name: ParticleSystem:getImage
  id: particlesystem-getimage
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getImage\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [ParticleSystem:getTexture](particlesystem-gettexture \"ParticleSystem:getTexture\") instead.\n\nGets the image used for the particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nimage = ParticleSystem:getImage( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`Image`](image \"Image\")` image`  \nAn Image to use for the particles.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setImage](particlesystem-setimage \"ParticleSystem:setImage\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getImage](https://love2d.org/wiki/ParticleSystem:getImage)"
- name: ParticleSystem:getInsertMode
  id: particlesystem-getinsertmode
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getInsertMode\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the mode used when the ParticleSystem adds new particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nmode = ParticleSystem:getInsertMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`ParticleInsertMode`](particleinsertmode \"ParticleInsertMode\")` mode`  \nThe mode used when the ParticleSystem adds new particles.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setInsertMode](particlesystem-setinsertmode \"ParticleSystem:setInsertMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getInsertMode](https://love2d.org/wiki/ParticleSystem:getInsertMode)"
- name: ParticleSystem:getLinearAcceleration
  id: particlesystem-getlinearacceleration
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getLinearAcceleration\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the linear acceleration (acceleration along the x and y axes) for particles.\n\nEvery particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax.\n\n## Function\n\n### Synopsis\n\n``` lua\nxmin, ymin, xmax, ymax = ParticleSystem:getLinearAcceleration( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`number`](number \"number\")` xmin`  \nThe minimum acceleration along the x axis.\n\n[`number`](number \"number\")` ymin`  \nThe minimum acceleration along the y axis.\n\n[`number`](number \"number\")` xmax (xmin)`  \nThe maximum acceleration along the x axis.\n\n[`number`](number \"number\")` ymax (ymin)`  \nThe maximum acceleration along the y axis.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setLinearAcceleration](particlesystem-setlinearacceleration \"ParticleSystem:setLinearAcceleration\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getLinearAcceleration](https://love2d.org/wiki/ParticleSystem:getLinearAcceleration)"
- name: ParticleSystem:getLinearDamping
  id: particlesystem-getlineardamping
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# ParticleSystem:getLinearDamping\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets the amount of linear damping (constant deceleration) for particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, max = ParticleSystem:getLinearDamping( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` min`  \nThe minimum amount of linear damping applied to particles.\n\n[`number`](number \"number\")` max`  \nThe maximum amount of linear damping applied to particles.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setLinearDamping](particlesystem-setlineardamping \"ParticleSystem:setLinearDamping\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getLinearDamping](https://love2d.org/wiki/ParticleSystem:getLinearDamping)"
- name: ParticleSystem:getOffset
  id: particlesystem-getoffset
  summary: Available since LÖVE 0.9.0 It has been moved from ParticleSystem:getOffsetX and ParticleSystem:getOffsetY
  description: "# ParticleSystem:getOffset\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved from [ParticleSystem:getOffsetX](particlesystem-getoffsetx \"ParticleSystem:getOffsetX\") and [ParticleSystem:getOffsetY](particlesystem-getoffsety \"ParticleSystem:getOffsetY\").\n\nGets the particle image's draw offset.\n\n## Function\n\n### Synopsis\n\n``` lua\nox, oy = ParticleSystem:getOffset( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` ox`  \nThe x coordinate of the particle image's draw offset.\n\n[`number`](number \"number\")` oy`  \nThe y coordinate of the particle image's draw offset.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setOffset](particlesystem-setoffset \"ParticleSystem:setOffset\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getOffset](https://love2d.org/wiki/ParticleSystem:getOffset)"
- name: ParticleSystem:getOffsetX
  id: particlesystem-getoffsetx
  summary: Removed in LÖVE 0.9.0 It has been moved to ParticleSystem:getOffset
  description: "# ParticleSystem:getOffsetX\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to [ParticleSystem:getOffset](particlesystem-getoffset \"ParticleSystem:getOffset\").\n\nGet the x coordinate of the particle rotation offset.\n\n## Function\n\n### Synopsis\n\n``` lua\nxOffset = ParticleSystem:getOffsetX( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` xOffset`  \nThe x coordinate of the rotation offset.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:getOffsetY](particlesystem-getoffsety \"ParticleSystem:getOffsetY\")\n- [ParticleSystem:setOffset](particlesystem-setoffset \"ParticleSystem:setOffset\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getOffsetX](https://love2d.org/wiki/ParticleSystem:getOffsetX)"
- name: ParticleSystem:getOffsetY
  id: particlesystem-getoffsety
  summary: Removed in LÖVE 0.9.0 It has been moved to ParticleSystem:getOffset
  description: "# ParticleSystem:getOffsetY\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to [ParticleSystem:getOffset](particlesystem-getoffset \"ParticleSystem:getOffset\").\n\nGet the y coordinate of the particle rotation offset.\n\n## Function\n\n### Synopsis\n\n``` lua\nyOffset = ParticleSystem:getOffsetY( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` yOffset`  \nThe y coordinate of the rotation offset.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:getOffsetX](particlesystem-getoffsetx \"ParticleSystem:getOffsetX\")\n- [ParticleSystem:setOffset](particlesystem-setoffset \"ParticleSystem:setOffset\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getOffsetY](https://love2d.org/wiki/ParticleSystem:getOffsetY)"
- name: ParticleSystem:getParticleLifetime
  id: particlesystem-getparticlelifetime
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getParticleLifetime\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the lifetime of the particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, max = ParticleSystem:getParticleLifetime( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`number`](number \"number\")` min`  \nThe minimum life of the particles (in seconds).\n\n[`number`](number \"number\")` max`  \nThe maximum life of the particles (in seconds).\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setParticleLifetime](particlesystem-setparticlelifetime \"ParticleSystem:setParticleLifetime\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getParticleLifetime](https://love2d.org/wiki/ParticleSystem:getParticleLifetime)"
- name: ParticleSystem:getPosition
  id: particlesystem-getposition
  summary: Gets the position of the emitter
  description: "# ParticleSystem:getPosition\n\nGets the position of the emitter.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = ParticleSystem:getPosition( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nPosition along x-axis.\n\n[`number`](number \"number\")` y`  \nPosition along y-axis.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getPosition](https://love2d.org/wiki/ParticleSystem:getPosition)"
- name: ParticleSystem:getQuads
  id: particlesystem-getquads
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# ParticleSystem:getQuads\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets the series of [Quads](quad \"Quad\") used for the particle sprites.\n\n## Function\n\n### Synopsis\n\n``` lua\nquads = ParticleSystem:getQuads( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`table`](table \"table\")` quads`  \nA table containing the Quads used.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setQuads](particlesystem-setquads \"ParticleSystem:setQuads\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getQuads](https://love2d.org/wiki/ParticleSystem:getQuads)"
- name: ParticleSystem:getRadialAcceleration
  id: particlesystem-getradialacceleration
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getRadialAcceleration\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the radial acceleration (away from the emitter).\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, max = ParticleSystem:getRadialAcceleration( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`number`](number \"number\")` min`  \nThe minimum acceleration.\n\n[`number`](number \"number\")` max`  \nThe maximum acceleration.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setRadialAcceleration](particlesystem-setradialacceleration \"ParticleSystem:setRadialAcceleration\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getRadialAcceleration](https://love2d.org/wiki/ParticleSystem:getRadialAcceleration)"
- name: ParticleSystem:getRotation
  id: particlesystem-getrotation
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getRotation\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the rotation of the image upon particle creation (in radians).\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, max = ParticleSystem:getRotation( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`number`](number \"number\")` min`  \nThe minimum initial angle (radians).\n\n[`number`](number \"number\")` max`  \nThe maximum initial angle (radians).\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setRotation](particlesystem-setrotation \"ParticleSystem:setRotation\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getRotation](https://love2d.org/wiki/ParticleSystem:getRotation)"
- name: ParticleSystem:getSizes
  id: particlesystem-getsizes
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getSizes\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the series of sizes by which the sprite is scaled. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime.\n\n## Function\n\n### Synopsis\n\n``` lua\nsize1, size1, ..., size8 = ParticleSystem:getSizes( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`number`](number \"number\")` size1`  \nThe first size.\n\n[`number`](number \"number\")` size2`  \nThe second size.\n\n[`number`](number \"number\")` size8`  \nThe eighth size.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setSizes](particlesystem-setsizes \"ParticleSystem:setSizes\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getSizes](https://love2d.org/wiki/ParticleSystem:getSizes)"
- name: ParticleSystem:getSizeVariation
  id: particlesystem-getsizevariation
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getSizeVariation\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end).\n\n## Function\n\n### Synopsis\n\n``` lua\nvariation = ParticleSystem:getSizeVariation( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`number`](number \"number\")` variation`  \nThe amount of variation (0 meaning no variation and 1 meaning full variation between start and end).\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setSizeVariation](particlesystem-setsizevariation \"ParticleSystem:setSizeVariation\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getSizeVariation](https://love2d.org/wiki/ParticleSystem:getSizeVariation)"
- name: ParticleSystem:getSpeed
  id: particlesystem-getspeed
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getSpeed\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the speed of the particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, max = ParticleSystem:getSpeed( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`number`](number \"number\")` min`  \nThe minimum linear speed of the particles.\n\n[`number`](number \"number\")` max`  \nThe maximum linear speed of the particles.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setSpeed](particlesystem-setspeed \"ParticleSystem:setSpeed\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getSpeed](https://love2d.org/wiki/ParticleSystem:getSpeed)"
- name: ParticleSystem:getSpin
  id: particlesystem-getspin
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getSpin\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the spin of the sprite.\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, max, variation = ParticleSystem:getSpin( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`number`](number \"number\")` min`  \nThe minimum spin (radians per second).\n\n[`number`](number \"number\")` max (min)`  \nThe maximum spin (radians per second).\n\n[`number`](number \"number\")` variation (0)`  \nThe degree of variation (0 meaning no variation and 1 meaning full variation between start and end).\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setSpin](particlesystem-setspin \"ParticleSystem:setSpin\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getSpin](https://love2d.org/wiki/ParticleSystem:getSpin)"
- name: ParticleSystem:getSpinVariation
  id: particlesystem-getspinvariation
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getSpinVariation\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end).\n\n## Function\n\n### Synopsis\n\n``` lua\nvariation = ParticleSystem:getSpinVariation( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`number`](number \"number\")` variation`  \nThe amount of variation (0 meaning no variation and 1 meaning full variation between start and end).\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setSpinVariation](particlesystem-setspinvariation \"ParticleSystem:setSpinVariation\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getSpinVariation](https://love2d.org/wiki/ParticleSystem:getSpinVariation)"
- name: ParticleSystem:getSpread
  id: particlesystem-getspread
  summary: None
  description: "# ParticleSystem:getSpread\n\nGets the amount of directional spread of the particle emitter (in radians).\n\n## Function\n\n### Synopsis\n\n``` lua\nspread = ParticleSystem:getSpread( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` spread`  \nThe spread of the emitter (radians).\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getSpread](https://love2d.org/wiki/ParticleSystem:getSpread)"
- name: ParticleSystem:getTangentialAcceleration
  id: particlesystem-gettangentialacceleration
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:getTangentialAcceleration\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the tangential acceleration (acceleration perpendicular to the particle's direction).\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, max = ParticleSystem:getTangentialAcceleration( )\n```\n\n### Arguments\n\nNothing.\n\n### Returns\n\n[`number`](number \"number\")` min`  \nThe minimum acceleration.\n\n[`number`](number \"number\")` max`  \nThe maximum acceleration.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setTangentialAcceleration](particlesystem-settangentialacceleration \"ParticleSystem:setTangentialAcceleration\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getTangentialAcceleration](https://love2d.org/wiki/ParticleSystem:getTangentialAcceleration)"
- name: ParticleSystem:getTexture
  id: particlesystem-gettexture
  summary: Available since LÖVE 0.9.1 It has been renamed from ParticleSystem:getImage
  description: "# ParticleSystem:getTexture\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nIt has been renamed from [ParticleSystem:getImage](particlesystem-getimage \"ParticleSystem:getImage\").\n\nGets the texture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) used for the particles.\n\n## Function\n\n### Synopsis\n\n``` lua\ntexture = ParticleSystem:getTexture( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Texture`](texture \"Texture\")` texture`  \nThe [Image](image \"Image\") or [Canvas](canvas \"Canvas\") used for the particles.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setTexture](particlesystem-settexture \"ParticleSystem:setTexture\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getTexture](https://love2d.org/wiki/ParticleSystem:getTexture)"
- name: ParticleSystem:getX
  id: particlesystem-getx
  summary: Removed in LÖVE 0.9.0 Use ParticleSystem:getPosition
  description: "# ParticleSystem:getX\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nUse [ParticleSystem:getPosition](particlesystem-getposition \"ParticleSystem:getPosition\").\n\nGets the x-coordinate of the particle emitter's position.\n\n## Function\n\n### Synopsis\n\n``` lua\nx = ParticleSystem:getX( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nPosition along x-axis.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getX](https://love2d.org/wiki/ParticleSystem:getX)"
- name: ParticleSystem:getY
  id: particlesystem-gety
  summary: Removed in LÖVE 0.9.0 Use ParticleSystem:getPosition
  description: "# ParticleSystem:getY\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nUse [ParticleSystem:getPosition](particlesystem-getposition \"ParticleSystem:getPosition\").\n\nGets the y-coordinate of the particle emitter's position.\n\n## Function\n\n### Synopsis\n\n``` lua\ny = ParticleSystem:getY( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` y`  \nPosition along y-axis.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:getY](https://love2d.org/wiki/ParticleSystem:getY)"
- name: ParticleSystem:hasRelativeRotation
  id: particlesystem-hasrelativerotation
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# ParticleSystem:hasRelativeRotation\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nGets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle.\n\n## Function\n\n### Synopsis\n\n``` lua\nrelative = ParticleSystem:hasRelativeRotation( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue if relative particle rotation is enabled, false if it's disabled.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setRelativeRotation](particlesystem-setrelativerotation \"ParticleSystem:setRelativeRotation\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:hasRelativeRotation](https://love2d.org/wiki/ParticleSystem:hasRelativeRotation)"
- name: ParticleSystem:isActive
  id: particlesystem-isactive
  summary: Checks whether the particle system is actively emitting particles
  description: "# ParticleSystem:isActive\n\nChecks whether the particle system is actively emitting particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nactive = ParticleSystem:isActive( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` active`  \nTrue if system is active, false otherwise.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:isPaused](particlesystem-ispaused \"ParticleSystem:isPaused\")\n- [ParticleSystem:isStopped](particlesystem-isstopped \"ParticleSystem:isStopped\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:isActive](https://love2d.org/wiki/ParticleSystem:isActive)"
- name: ParticleSystem:isEmpty
  id: particlesystem-isempty
  summary: Removed in LÖVE 0.9.0 Use ParticleSystem:getCount and ParticleSystem:getBufferSize
  description: "# ParticleSystem:isEmpty\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nUse [ParticleSystem:getCount](particlesystem-getcount \"ParticleSystem:getCount\") and [ParticleSystem:getBufferSize](particlesystem-getbuffersize \"ParticleSystem:getBufferSize\").\n\nChecks whether the particle system is empty of particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nempty = ParticleSystem:isEmpty( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` empty`  \nTrue if there are no live particles, false otherwise.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:isEmpty](https://love2d.org/wiki/ParticleSystem:isEmpty)"
- name: ParticleSystem:isFull
  id: particlesystem-isfull
  summary: Removed in LÖVE 0.9.0 Use ParticleSystem:getCount and ParticleSystem:getBufferSize
  description: "# ParticleSystem:isFull\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nUse [ParticleSystem:getCount](particlesystem-getcount \"ParticleSystem:getCount\") and [ParticleSystem:getBufferSize](particlesystem-getbuffersize \"ParticleSystem:getBufferSize\").\n\nChecks whether the particle system is full of particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nfull = ParticleSystem:isFull( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` full`  \nTrue if no more particles can be added, false otherwise.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:isFull](https://love2d.org/wiki/ParticleSystem:isFull)"
- name: ParticleSystem:isPaused
  id: particlesystem-ispaused
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:isPaused\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nChecks whether the particle system is paused.\n\n## Function\n\n### Synopsis\n\n``` lua\npaused = ParticleSystem:isPaused( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` paused`  \nTrue if system is paused, false otherwise.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:isActive](particlesystem-isactive \"ParticleSystem:isActive\")\n- [ParticleSystem:isStopped](particlesystem-isstopped \"ParticleSystem:isStopped\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:isPaused](https://love2d.org/wiki/ParticleSystem:isPaused)"
- name: ParticleSystem:isStopped
  id: particlesystem-isstopped
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:isStopped\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nChecks whether the particle system is stopped.\n\n## Function\n\n### Synopsis\n\n``` lua\nstopped = ParticleSystem:isStopped( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` stopped`  \nTrue if system is stopped, false otherwise.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:isActive](particlesystem-isactive \"ParticleSystem:isActive\")\n- [ParticleSystem:isPaused](particlesystem-ispaused \"ParticleSystem:isPaused\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:isStopped](https://love2d.org/wiki/ParticleSystem:isStopped)"
- name: ParticleSystem:moveTo
  id: particlesystem-moveto
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# ParticleSystem:moveTo\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nMoves the position of the emitter. This results in smoother particle spawning behaviour than if [ParticleSystem:setPosition](particlesystem-setposition \"ParticleSystem:setPosition\") is used every frame.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:moveTo( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nPosition along x-axis.\n\n[`number`](number \"number\")` y`  \nPosition along y-axis.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:moveTo](https://love2d.org/wiki/ParticleSystem:moveTo)"
- name: ParticleSystem:pause
  id: particlesystem-pause
  summary: Pauses the particle emitter
  description: "# ParticleSystem:pause\n\nPauses the particle emitter.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:pause( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:pause](https://love2d.org/wiki/ParticleSystem:pause)"
- name: ParticleSystem:reset
  id: particlesystem-reset
  summary: Resets the particle emitter, removing any existing particles and resetting the lifetime counter
  description: "# ParticleSystem:reset\n\nResets the particle emitter, removing any existing particles and resetting the lifetime counter.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:reset( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:reset](https://love2d.org/wiki/ParticleSystem:reset)"
- name: ParticleSystem:setAreaSpread
  id: particlesystem-setareaspread
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:setAreaSpread\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\n|                                                                                                                                      |\n|--------------------------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                                 |\n| This function has been renamed to [ParticleSystem:setEmissionArea](particlesystem-setemissionarea \"ParticleSystem:setEmissionArea\"). |\n\nSets area-based spawn parameters for the particles. Newly created particles will spawn in an area around the emitter based on the parameters to this function.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setAreaSpread( distribution, dx, dy )\n```\n\n### Arguments\n\n[`AreaSpreadDistribution`](areaspreaddistribution \"AreaSpreadDistribution\")` distribution`  \nThe type of distribution for new particles.\n\n[`number`](number \"number\")` dx`  \nThe maximum spawn distance from the emitter along the x-axis for uniform distribution, or the standard deviation along the x-axis for normal distribution.\n\n[`number`](number \"number\")` dy`  \nThe maximum spawn distance from the emitter along the y-axis for uniform distribution, or the standard deviation along the y-axis for normal distribution.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:getAreaSpread](particlesystem-getareaspread \"ParticleSystem:getAreaSpread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setAreaSpread](https://love2d.org/wiki/ParticleSystem:setAreaSpread)"
- name: ParticleSystem:setBufferSize
  id: particlesystem-setbuffersize
  summary: number size The buffer size
  description: "# ParticleSystem:setBufferSize\n\nSets the size of the buffer (the max allowed amount of particles in the system).\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setBufferSize( size )\n```\n\n### Arguments\n\n[`number`](number \"number\")` size`  \nThe buffer size.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setBufferSize](https://love2d.org/wiki/ParticleSystem:setBufferSize)"
- name: ParticleSystem:setColor
  id: particlesystem-setcolor
  summary: Removed in LÖVE 0.8.0 It has been replaced with ParticleSystem:setColors
  description: "# ParticleSystem:setColor\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been replaced with [ParticleSystem:setColors](particlesystem-setcolors \"ParticleSystem:setColors\").\n\nSets the color of the image.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setColor( r1, g1, b1, a1, r2, g2, b2, a2 )\n```\n\n### Arguments\n\n[`number`](number \"number\")` r1`  \nStart color, red component (0-255).\n\n[`number`](number \"number\")` g1`  \nStart color, green component (0-255).\n\n[`number`](number \"number\")` b1`  \nStart color, blue component (0-255).\n\n[`number`](number \"number\")` a1`  \nStart color, alpha component (0-255).\n\n[`number`](number \"number\")` r2 (r1)`  \nEnd color, red component (0-255).\n\n[`number`](number \"number\")` g2 (g1)`  \nEnd color, green component (0-255).\n\n[`number`](number \"number\")` b2 (b1)`  \nEnd color, blue component (0-255).\n\n[`number`](number \"number\")` a2 (a1)`  \nEnd color, alpha component (0-255).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setColor](https://love2d.org/wiki/ParticleSystem:setColor)"
- name: ParticleSystem:setColors
  id: particlesystem-setcolors
  summary: Available since LÖVE 0.8.0 It has replaced ParticleSystem:setColor
  description: "# ParticleSystem:setColors\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has replaced [ParticleSystem:setColor](particlesystem-setcolor \"ParticleSystem:setColor\").\n\nSets a series of colors to apply to the particle sprite. The particle system will interpolate between each color evenly over the particle's lifetime.\n\nArguments can be passed in groups of four, representing the components of the desired RGBA value, or as tables of RGBA component values, with a default alpha value of 1 if only three values are given. At least one color must be specified. A maximum of eight may be used.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setColors( r1, g1, b1, a1, r2, g2, b2, a2, ..., r8, g8, b8, a8 )\n```\n\n### Arguments\n\n[`number`](number \"number\")` r1`  \nFirst color, red component (0-1).\n\n[`number`](number \"number\")` g1`  \nFirst color, green component (0-1).\n\n[`number`](number \"number\")` b1`  \nFirst color, blue component (0-1).\n\n[`number`](number \"number\")` a1`  \nFirst color, alpha component (0-1).\n\n[`number`](number \"number\")` r2`  \nSecond color, red component (0-1).\n\n[`number`](number \"number\")` g2`  \nSecond color, green component (0-1).\n\n[`number`](number \"number\")` b2`  \nSecond color, blue component (0-1).\n\n[`number`](number \"number\")` a2`  \nSecond color, alpha component (0-1).\n\n[`number`](number \"number\")` r8`  \nEighth color, red component (0-1).\n\n[`number`](number \"number\")` g8`  \nEighth color, green component (0-1).\n\n[`number`](number \"number\")` b8`  \nEighth color, blue component (0-1).\n\n[`number`](number \"number\")` a8`  \nEighth color, alpha component (0-1).\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nParticleSystem:setColors( rgba1, rgba2, ..., rgba8 )\n```\n\n### Arguments\n\n[`table`](table \"table\")` rgba1`  \nFirst color, a numerical indexed table with the red, green, blue and alpha values as numbers (0-1). The alpha is optional and defaults to 1 if it is left out.\n\n[`table`](table \"table\")` rgba2`  \nSecond color, a numerical indexed table with the red, green, blue and alpha values as numbers (0-1). The alpha is optional and defaults to 1 if it is left out.\n\n[`table`](table \"table\")` rgba8`  \nEighth color, a numerical indexed table with the red, green, blue and alpha values as numbers (0-1). The alpha is optional and defaults to 1 if it is left out.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setColors](https://love2d.org/wiki/ParticleSystem:setColors)"
- name: ParticleSystem:setDirection
  id: particlesystem-setdirection
  summary: Sets the direction the particles will be emitted in
  description: "# ParticleSystem:setDirection\n\nSets the direction the particles will be emitted in.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setDirection( direction )\n```\n\n### Arguments\n\n[`number`](number \"number\")` direction`  \nThe direction of the particles (in radians).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setDirection](https://love2d.org/wiki/ParticleSystem:setDirection)"
- name: ParticleSystem:setEmissionArea
  id: particlesystem-setemissionarea
  summary: Available since LÖVE 11.0 It has been renamed from ParticleSystem:setAreaSpread
  description: "# ParticleSystem:setEmissionArea\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [ParticleSystem:setAreaSpread](particlesystem-setareaspread \"ParticleSystem:setAreaSpread\").\n\nSets area-based spawn parameters for the particles. Newly created particles will spawn in an area around the emitter based on the parameters to this function.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setEmissionArea( distribution, dx, dy, angle, directionRelativeToCenter )\n```\n\n### Arguments\n\n[`AreaSpreadDistribution`](areaspreaddistribution \"AreaSpreadDistribution\")` distribution`  \nThe type of distribution for new particles.\n\n[`number`](number \"number\")` dx`  \nThe maximum spawn distance from the emitter along the x-axis for uniform distribution, or the standard deviation along the x-axis for normal distribution.\n\n[`number`](number \"number\")` dy`  \nThe maximum spawn distance from the emitter along the y-axis for uniform distribution, or the standard deviation along the y-axis for normal distribution.\n\n[`number`](number \"number\")` angle (0)`  \nThe angle in radians of the emission area.\n\n[`boolean`](boolean \"boolean\")` directionRelativeToCenter (false)`  \nTrue if newly spawned particles will be oriented relative to the center of the emission area, false otherwise.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:getEmissionArea](particlesystem-getemissionarea \"ParticleSystem:getEmissionArea\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setEmissionArea](https://love2d.org/wiki/ParticleSystem:setEmissionArea)"
- name: ParticleSystem:setEmissionRate
  id: particlesystem-setemissionrate
  summary: Sets the amount of particles emitted per second
  description: "# ParticleSystem:setEmissionRate\n\nSets the amount of particles emitted per second.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setEmissionRate( rate )\n```\n\n### Arguments\n\n[`number`](number \"number\")` rate`  \nThe amount of particles per second.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setEmissionRate](https://love2d.org/wiki/ParticleSystem:setEmissionRate)"
- name: ParticleSystem:setEmitterLifetime
  id: particlesystem-setemitterlifetime
  summary: Available since LÖVE 0.9.0 It has been renamed from ParticleSystem:setLifetime
  description: "# ParticleSystem:setEmitterLifetime\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [ParticleSystem:setLifetime](particlesystem-setlifetime \"ParticleSystem:setLifetime\").\n\nSets how long the particle system should emit particles (if -1 then it emits particles forever).\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setEmitterLifetime( life )\n```\n\n### Arguments\n\n[`number`](number \"number\")` life`  \nThe lifetime of the emitter (in seconds).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setEmitterLifetime](https://love2d.org/wiki/ParticleSystem:setEmitterLifetime)"
- name: ParticleSystem:setGravity
  id: particlesystem-setgravity
  summary: Removed in LÖVE 0.9.0 It has been replaced by ParticleSystem:setLinearAcceleration
  description: "# ParticleSystem:setGravity\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been replaced by [ParticleSystem:setLinearAcceleration](particlesystem-setlinearacceleration \"ParticleSystem:setLinearAcceleration\").\n\nSets the gravity affecting the particles (acceleration along the y-axis). Every particle created will have a gravity between min and max.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setGravity( min, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum gravity.\n\n[`number`](number \"number\")` max (min)`  \nThe maximum gravity.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setGravity](https://love2d.org/wiki/ParticleSystem:setGravity)"
- name: ParticleSystem:setImage
  id: particlesystem-setimage
  summary: Available since LÖVE 0.9.0 It has been renamed from ParticleSystem:setSprite
  description: "# ParticleSystem:setImage\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [ParticleSystem:setSprite](particlesystem-setsprite \"ParticleSystem:setSprite\").\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [ParticleSystem:setTexture](particlesystem-settexture \"ParticleSystem:setTexture\") instead.\n\nSets the image to be used for the particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setImage( image )\n```\n\n### Arguments\n\n[`Image`](image \"Image\")` image`  \nAn Image to use for the particles.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setImage](https://love2d.org/wiki/ParticleSystem:setImage)"
- name: ParticleSystem:setInsertMode
  id: particlesystem-setinsertmode
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# ParticleSystem:setInsertMode\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the mode to use when the ParticleSystem adds new particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setInsertMode( mode )\n```\n\n### Arguments\n\n[`ParticleInsertMode`](particleinsertmode \"ParticleInsertMode\")` mode`  \nThe mode to use when the ParticleSystem adds new particles.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:getInsertMode](particlesystem-getinsertmode \"ParticleSystem:getInsertMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setInsertMode](https://love2d.org/wiki/ParticleSystem:setInsertMode)"
- name: ParticleSystem:setLifetime
  id: particlesystem-setlifetime
  summary: Removed in LÖVE 0.9.0 It has been renamed to ParticleSystem:setEmitterLifetime
  description: "# ParticleSystem:setLifetime\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [ParticleSystem:setEmitterLifetime](particlesystem-setemitterlifetime \"ParticleSystem:setEmitterLifetime\").\n\nSets how long the particle system should emit particles (if -1 then it emits particles forever).\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setLifetime( life )\n```\n\n### Arguments\n\n[`number`](number \"number\")` life`  \nThe lifetime of the emitter (in seconds).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setLifetime](https://love2d.org/wiki/ParticleSystem:setLifetime)"
- name: ParticleSystem:setLinearAcceleration
  id: particlesystem-setlinearacceleration
  summary: Available since LÖVE 0.9.0 It has replaced ParticleSystem:setGravity
  description: "# ParticleSystem:setLinearAcceleration\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has replaced [ParticleSystem:setGravity](particlesystem-setgravity \"ParticleSystem:setGravity\").\n\nSets the linear acceleration (acceleration along the x and y axes) for particles.\n\nEvery particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setLinearAcceleration( xmin, ymin, xmax, ymax )\n```\n\n### Arguments\n\n[`number`](number \"number\")` xmin`  \nThe minimum acceleration along the x axis.\n\n[`number`](number \"number\")` ymin`  \nThe minimum acceleration along the y axis.\n\n[`number`](number \"number\")` xmax (xmin)`  \nThe maximum acceleration along the x axis.\n\n[`number`](number \"number\")` ymax (ymin)`  \nThe maximum acceleration along the y axis.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setLinearAcceleration](https://love2d.org/wiki/ParticleSystem:setLinearAcceleration)"
- name: ParticleSystem:setLinearDamping
  id: particlesystem-setlineardamping
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# ParticleSystem:setLinearDamping\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nSets the amount of linear damping (constant deceleration) for particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setLinearDamping( min, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum amount of linear damping applied to particles.\n\n[`number`](number \"number\")` max (min)`  \nThe maximum amount of linear damping applied to particles.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:getLinearDamping](particlesystem-getlineardamping \"ParticleSystem:getLinearDamping\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setLinearDamping](https://love2d.org/wiki/ParticleSystem:setLinearDamping)"
- name: ParticleSystem:setOffset
  id: particlesystem-setoffset
  summary: Set the offset position which the particle sprite is rotated around
  description: "# ParticleSystem:setOffset\n\nSet the offset position which the particle sprite is rotated around. If this function is not used, the particles rotate around their center.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setOffset( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x coordinate of the rotation offset.\n\n[`number`](number \"number\")` y`  \nThe y coordinate of the rotation offset.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setOffset](https://love2d.org/wiki/ParticleSystem:setOffset)"
- name: ParticleSystem:setParticleLife
  id: particlesystem-setparticlelife
  summary: Removed in LÖVE 0.9.0 It has been renamed to ParticleSystem:setParticleLifetime
  description: "# ParticleSystem:setParticleLife\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [ParticleSystem:setParticleLifetime](particlesystem-setparticlelifetime \"ParticleSystem:setParticleLifetime\").\n\nSets the life of the particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setParticleLife( min, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum life of the particles (seconds).\n\n[`number`](number \"number\")` max (min)`  \nThe maximum life of the particles (seconds).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setParticleLife](https://love2d.org/wiki/ParticleSystem:setParticleLife)"
- name: ParticleSystem:setParticleLifetime
  id: particlesystem-setparticlelifetime
  summary: Available since LÖVE 0.9.0 It has been renamed from ParticleSystem:setParticleLife
  description: "# ParticleSystem:setParticleLifetime\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [ParticleSystem:setParticleLife](particlesystem-setparticlelife \"ParticleSystem:setParticleLife\").\n\nSets the lifetime of the particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setParticleLifetime( min, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum life of the particles (in seconds).\n\n[`number`](number \"number\")` max (min)`  \nThe maximum life of the particles (in seconds).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setParticleLifetime](https://love2d.org/wiki/ParticleSystem:setParticleLifetime)"
- name: ParticleSystem:setPosition
  id: particlesystem-setposition
  summary: Sets the position of the emitter
  description: "# ParticleSystem:setPosition\n\nSets the position of the emitter.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setPosition( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nPosition along x-axis.\n\n[`number`](number \"number\")` y`  \nPosition along y-axis.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setPosition](https://love2d.org/wiki/ParticleSystem:setPosition)"
- name: ParticleSystem:setQuads
  id: particlesystem-setquads
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# ParticleSystem:setQuads\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nSets a series of [Quads](quad \"Quad\") to use for the particle sprites. Particles will choose a Quad from the list based on the particle's current lifetime, allowing for the use of animated sprite sheets with ParticleSystems.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setQuads( quad1, quad2, ... )\n```\n\n### Arguments\n\n[`Quad`](quad \"Quad\")` quad1`  \nThe first Quad to use.\n\n[`Quad`](quad \"Quad\")` quad2`  \nThe second Quad to use.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setQuads( quads )\n```\n\n### Arguments\n\n[`table`](table \"table\")` quads`  \nA table containing the Quads to use.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:getQuads](particlesystem-getquads \"ParticleSystem:getQuads\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setQuads](https://love2d.org/wiki/ParticleSystem:setQuads)"
- name: ParticleSystem:setRadialAcceleration
  id: particlesystem-setradialacceleration
  summary: number min The minimum acceleration
  description: "# ParticleSystem:setRadialAcceleration\n\nSet the radial acceleration (away from the emitter).\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setRadialAcceleration( min, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum acceleration.\n\n[`number`](number \"number\")` max (min)`  \nThe maximum acceleration.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:getRadialAcceleration](particlesystem-getradialacceleration \"ParticleSystem:getRadialAcceleration\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setRadialAcceleration](https://love2d.org/wiki/ParticleSystem:setRadialAcceleration)"
- name: ParticleSystem:setRelativeRotation
  id: particlesystem-setrelativerotation
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# ParticleSystem:setRelativeRotation\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nSets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setRelativeRotation( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue to enable relative particle rotation, false to disable it.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:hasRelativeRotation](particlesystem-hasrelativerotation \"ParticleSystem:hasRelativeRotation\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setRelativeRotation](https://love2d.org/wiki/ParticleSystem:setRelativeRotation)"
- name: ParticleSystem:setRotation
  id: particlesystem-setrotation
  summary: Nothing
  description: "# ParticleSystem:setRotation\n\nSets the rotation of the image upon particle creation (in radians).\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setRotation( min, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum initial angle (radians).\n\n[`number`](number \"number\")` max (min)`  \nThe maximum initial angle (radians).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setRotation](https://love2d.org/wiki/ParticleSystem:setRotation)"
- name: ParticleSystem:setSize
  id: particlesystem-setsize
  summary: Removed in LÖVE 0.8.0 It has been replaced with ParticleSystem:setSizes
  description: "# ParticleSystem:setSize\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been replaced with [ParticleSystem:setSizes](particlesystem-setsizes \"ParticleSystem:setSizes\").\n\nSets the size of the particle (1.0 being normal size). The particles will grow/shrink from the starting size to the ending size. The variation affects starting size only.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setSize( min, max, variation )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum size (1.0 being normal size).\n\n[`number`](number \"number\")` max (min)`  \nThe maximum size (1.0 being normal size).\n\n[`number`](number \"number\")` variation (1)`  \nThe degree of variation (0 meaning no variation and 1 meaning full variation between start and end).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setSize](https://love2d.org/wiki/ParticleSystem:setSize)"
- name: ParticleSystem:setSizes
  id: particlesystem-setsizes
  summary: Available since LÖVE 0.8.0 It has replaced ParticleSystem:setSize
  description: "# ParticleSystem:setSizes\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has replaced [ParticleSystem:setSize](particlesystem-setsize \"ParticleSystem:setSize\").\n\nSets a series of sizes by which to scale a particle sprite. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime.\n\nAt least one size must be specified. A maximum of eight may be used.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setSizes( size1, size2, ..., size8 )\n```\n\n### Arguments\n\n[`number`](number \"number\")` size1`  \nThe first size.\n\n[`number`](number \"number\")` size2`  \nThe second size.\n\n[`number`](number \"number\")` size8`  \nThe eighth size.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:setSizeVariation](particlesystem-setsizevariation \"ParticleSystem:setSizeVariation\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setSizes](https://love2d.org/wiki/ParticleSystem:setSizes)"
- name: ParticleSystem:setSizeVariation
  id: particlesystem-setsizevariation
  summary: Nothing
  description: "# ParticleSystem:setSizeVariation\n\nSets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end).\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setSizeVariation( variation )\n```\n\n### Arguments\n\n[`number`](number \"number\")` variation`  \nThe amount of variation (0 meaning no variation and 1 meaning full variation between start and end).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setSizeVariation](https://love2d.org/wiki/ParticleSystem:setSizeVariation)"
- name: ParticleSystem:setSpeed
  id: particlesystem-setspeed
  summary: Sets the speed of the particles
  description: "# ParticleSystem:setSpeed\n\nSets the speed of the particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setSpeed( min, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum linear speed of the particles.\n\n[`number`](number \"number\")` max (min)`  \nThe maximum linear speed of the particles.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setSpeed](https://love2d.org/wiki/ParticleSystem:setSpeed)"
- name: ParticleSystem:setSpin
  id: particlesystem-setspin
  summary: Sets the spin of the sprite
  description: "# ParticleSystem:setSpin\n\nSets the spin of the sprite.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setSpin( min, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum spin (radians per second).\n\n[`number`](number \"number\")` max (min)`  \nThe maximum spin (radians per second).\n\n### Returns\n\nNothing.\n\n## Function\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nUse [ParticleSystem:setSpinVariation](particlesystem-setspinvariation \"ParticleSystem:setSpinVariation\") instead.\n\n### Synopsis\n\n``` lua\nParticleSystem:setSpin( min, max, variation )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum spin (radians per second).\n\n[`number`](number \"number\")` max (min)`  \nThe maximum spin (radians per second).\n\n[`number`](number \"number\")` variation (0)`  \nThe degree of variation (0 meaning no variation and 1 meaning full variation between start and end).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setSpin](https://love2d.org/wiki/ParticleSystem:setSpin)"
- name: ParticleSystem:setSpinVariation
  id: particlesystem-setspinvariation
  summary: Nothing
  description: "# ParticleSystem:setSpinVariation\n\nSets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end).\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setSpinVariation( variation )\n```\n\n### Arguments\n\n[`number`](number \"number\")` variation`  \nThe amount of variation (0 meaning no variation and 1 meaning full variation between start and end).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setSpinVariation](https://love2d.org/wiki/ParticleSystem:setSpinVariation)"
- name: ParticleSystem:setSpread
  id: particlesystem-setspread
  summary: Sets the amount of spread for the system
  description: "# ParticleSystem:setSpread\n\nSets the amount of spread for the system.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setSpread( spread )\n```\n\n### Arguments\n\n[`number`](number \"number\")` spread`  \nThe amount of spread (radians).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setSpread](https://love2d.org/wiki/ParticleSystem:setSpread)"
- name: ParticleSystem:setSprite
  id: particlesystem-setsprite
  summary: Removed in LÖVE 0.9.0 It has been renamed to ParticleSystem:setImage
  description: "# ParticleSystem:setSprite\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [ParticleSystem:setImage](particlesystem-setimage \"ParticleSystem:setImage\").\n\nSets the image which is to be emitted.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setSprite( sprite )\n```\n\n### Arguments\n\n[`Image`](image \"Image\")` sprite`  \nAn Image to use for the particle.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setSprite](https://love2d.org/wiki/ParticleSystem:setSprite)"
- name: ParticleSystem:setTangentialAcceleration
  id: particlesystem-settangentialacceleration
  summary: number min The minimum acceleration
  description: "# ParticleSystem:setTangentialAcceleration\n\nSets the tangential acceleration (acceleration perpendicular to the particle's direction).\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setTangentialAcceleration( min, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum acceleration.\n\n[`number`](number \"number\")` max (min)`  \nThe maximum acceleration.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setTangentialAcceleration](https://love2d.org/wiki/ParticleSystem:setTangentialAcceleration)"
- name: ParticleSystem:setTexture
  id: particlesystem-settexture
  summary: Available since LÖVE 0.9.1 It has been renamed from ParticleSystem:setImage
  description: "# ParticleSystem:setTexture\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nIt has been renamed from [ParticleSystem:setImage](particlesystem-setimage \"ParticleSystem:setImage\").\n\nSets the texture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) to be used for the particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:setTexture( texture )\n```\n\n### Arguments\n\n[`Texture`](texture \"Texture\")` texture`  \nAn [Image](image \"Image\") or [Canvas](canvas \"Canvas\") to use for the particles.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n- [ParticleSystem:getTexture](particlesystem-gettexture \"ParticleSystem:getTexture\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:setTexture](https://love2d.org/wiki/ParticleSystem:setTexture)"
- name: ParticleSystem:start
  id: particlesystem-start
  summary: Starts the particle emitter
  description: "# ParticleSystem:start\n\nStarts the particle emitter.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:start( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:start](https://love2d.org/wiki/ParticleSystem:start)"
- name: ParticleSystem:stop
  id: particlesystem-stop
  summary: Stops the particle emitter, resetting the lifetime counter
  description: "# ParticleSystem:stop\n\nStops the particle emitter, resetting the lifetime counter.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:stop( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:stop](https://love2d.org/wiki/ParticleSystem:stop)"
- name: ParticleSystem:update
  id: particlesystem-update
  summary: Updates the particle system; moving, creating and killing particles
  description: "# ParticleSystem:update\n\nUpdates the particle system; moving, creating and killing particles.\n\n## Function\n\n### Synopsis\n\n``` lua\nParticleSystem:update( dt )\n```\n\n### Arguments\n\n[`number`](number \"number\")` dt`  \nThe time (seconds) since last frame.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [ParticleSystem](particlesystem \"ParticleSystem\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ParticleSystem:update](https://love2d.org/wiki/ParticleSystem:update)"
- name: PixelEffect
  id: pixeleffect
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.9.0 It has been renamed to Shader
  description: "# PixelEffect\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [Shader](shader \"Shader\").\n\nA PixelEffect is used for advanced hardware-accelerated pixel manipulation. These effects are written in a language based on GLSL (OpenGL Shading Language) with a few things simplified for easier coding.\n\nPotential uses for pixel effects include HDR/bloom, motion blur, grayscale/invert/sepia/any kind of color effect, reflection/refraction, distortions, and much more!\n\n## Constructors\n\n|                                                                                             |                                |       |       |\n|---------------------------------------------------------------------------------------------|--------------------------------|-------|-------|\n| [love.graphics.newPixelEffect](love.graphics.newpixeleffect \"love.graphics.newPixelEffect\") | Creates a new **PixelEffect**. | 0.8.0 | 0.9.0 |\n\n## Functions\n\n|                                                                              |                                               |       |       |\n|------------------------------------------------------------------------------|-----------------------------------------------|-------|-------|\n| [PixelEffect:getWarnings](pixeleffect-getwarnings \"PixelEffect:getWarnings\") | Gets warning messages (if any).               | 0.8.0 | 0.9.0 |\n| [PixelEffect:send](pixeleffect-send \"PixelEffect:send\")                      | Sends one or more values to the pixel effect. | 0.8.0 | 0.9.0 |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setPixelEffect](love.graphics.setpixeleffect \"love.graphics.setPixelEffect\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PixelEffect](https://love2d.org/wiki/PixelEffect)"
- name: PixelEffect:getWarnings
  id: pixeleffect-getwarnings
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.9.0 It has been renamed to Shader:getWarnings
  description: "# PixelEffect:getWarnings\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [Shader:getWarnings](shader-getwarnings \"Shader:getWarnings\").\n\n  \nReturns any warning messages from compiling the pixel effect code. This can be used for debugging your pixel effects if there's anything the graphics hardware doesn't like.\n\n## Function\n\n### Synopsis\n\n``` lua\nwarnings = PixelEffect:getWarnings( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` warnings`  \nWarning messages (if any).\n\n## See Also\n\n- [PixelEffect](pixeleffect \"PixelEffect\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PixelEffect:getWarnings](https://love2d.org/wiki/PixelEffect:getWarnings)"
- name: PixelEffect:send
  id: pixeleffect-send
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.9.0 It has been renamed to Shader:send
  description: "# PixelEffect:send\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [Shader:send](shader-send \"Shader:send\").\n\nSends one or more values to a special (*extern*) variable inside the pixel effect. Extern variables have to be marked using the *extern* keyword, e.g.\n\n``` lua\nextern number time;\nextern vec2 light_pos;\nextern vec4 colors[4];\n```\n\nThe corresponding send calls would be\n\n``` lua\neffect:send(\"time\", t)\neffect:send(\"light_pos\", {light_x, light_y})\neffect:send(\"colors\", {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})\n```\n\n## Function\n\n### Synopsis\n\n``` lua\nPixelEffect:send( name, number, ... )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nName of the number to send to the pixel effect.\n\n[`number`](number \"number\")` number`  \nNumber to send to store in the extern.\n\n[`number`](number \"number\")` ...`  \nAdditional numbers to send in case the extern is an array.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nPixelEffect:send( name, vector, ... )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nName of the vector to send to the pixel effect.\n\n[`table`](table \"table\")` vector`  \nNumbers to send to the extern as a vector. The number of elements in the table determines the type of the vector (e.g. two numbers -\\> vec2). At least two and at most four numbers can be used.\n\n[`table`](table \"table\")` ...`  \nAdditional vectors to send in case the extern is an array. All vectors need to be of the same size (e.g. only vec3's)\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nPixelEffect:send( name, matrix, ... )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nName of the matrix to send to the pixel effect.\n\n[`table`](table \"table\")` matrix`  \n2x2, 3x3, or 4x4 matrix to send to the extern. Using table form: `{{a,b,c,d}, {e,f,g,h}, ... }`\n\n[`table`](table \"table\")` ...`  \nAdditional matrices of the same type as *matrix* to store in the extern array.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nPixelEffect:send( name, image, ... )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nName of the Image to send to the pixel effect.\n\n[`Image`](image \"Image\")` image`  \nImage to send to the extern.\n\n[`Image`](image \"Image\")` ...`  \nAdditional images in case the extern is an array.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nPixelEffect:send( name, canvas, ... )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nName of the Canvas to send to the pixel effect.\n\n[`Canvas`](canvas \"Canvas\")` canvas`  \nCanvas to send to the extern. The pixel effect type is *Image*.\n\n[`Image`](image \"Image\")` ...`  \nAdditional canvases to send to the extern array.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [PixelEffect](pixeleffect \"PixelEffect\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PixelEffect:send](https://love2d.org/wiki/PixelEffect:send)"
- name: PixelFormat
  id: pixelformat
  summary: Available since LÖVE 11.0 This enum replaces CanvasFormat and CompressedImageFormat
  description: "# PixelFormat\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum replaces [CanvasFormat](canvasformat \"CanvasFormat\") and [CompressedImageFormat](compressedimageformat \"CompressedImageFormat\").\n\nPixel formats for [Textures](texture \"Texture\"), [ImageData](imagedata \"ImageData\"), and [CompressedImageData](compressedimagedata \"CompressedImageData\").\n\n## Normal color formats\n\n### Constants\n\n|          |            |                |                                   |                                         |                                                |                                                                                                                                      |\n|----------|------------|----------------|-----------------------------------|-----------------------------------------|------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|\n| Name     | Components | Bits per pixel | Range                             | Usable with [Canvases](canvas \"Canvas\") | Usable with [ImageData](imagedata \"ImageData\") | Note(s)                                                                                                                              |\n| normal   | 4          | 32             | \\[0, 1\\]                          | Yes                                     |                                                | Alias for `rgba8`, or `srgba8` if [gamma-correct rendering](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") is enabled. |\n| r8       | 1          | 8              | \\[0, 1\\]                          | Yes                                     | 11.3                                           |                                                                                                                                      |\n| rg8      | 2          | 16             | \\[0, 1\\]                          | Yes                                     | 11.3                                           |                                                                                                                                      |\n| rgba8    | 4          | 32             | \\[0, 1\\]                          | Yes                                     | Yes                                            |                                                                                                                                      |\n| srgba8   | 4          | 32             | \\[0, 1\\]                          | Yes                                     |                                                | [gamma-correct](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") version of rgba8.                                       |\n| r16      | 1          | 16             | \\[0, 1\\]                          |                                         | 11.3                                           |                                                                                                                                      |\n| rg16     | 2          | 32             | \\[0, 1\\]                          |                                         | 11.3                                           |                                                                                                                                      |\n| rgba16   | 4          | 64             | \\[0, 1\\]                          |                                         | Yes                                            |                                                                                                                                      |\n| r16f     | 1          | 16             | \\[-65504, +65504\\]\\*              | Yes                                     | 11.3                                           |                                                                                                                                      |\n| rg16f    | 2          | 32             | \\[-65504, +65504\\]\\*              | Yes                                     | 11.3                                           |                                                                                                                                      |\n| rgba16f  | 4          | 64             | \\[-65504, +65504\\]\\*              | Yes                                     | Yes                                            |                                                                                                                                      |\n| r32f     | 1          | 32             | \\[-3.4028235e38, 3.4028235e38\\]\\* | Yes                                     | 11.3                                           |                                                                                                                                      |\n| rg32f    | 2          | 64             | \\[-3.4028235e38, 3.4028235e38\\]\\* | Yes                                     | 11.3                                           |                                                                                                                                      |\n| rgba32f  | 4          | 128            | \\[-3.4028235e38, 3.4028235e38\\]\\* | Yes                                     | Yes                                            |                                                                                                                                      |\n| rgba4    | 4          | 16             | \\[0, 1\\]                          | Yes                                     | 11.3                                           |                                                                                                                                      |\n| rgb5a1   | 4          | 16             | \\[0, 1\\]                          | Yes                                     | 11.3                                           |                                                                                                                                      |\n| rgb565   | 3          | 16             | \\[0, 1\\]                          | Yes                                     | 11.3                                           |                                                                                                                                      |\n| rgb10a2  | 4          | 32             | \\[0, 1\\]                          | Yes                                     | 11.3                                           |                                                                                                                                      |\n| rg11b10f | 3          | 32             | \\[0, 65024\\]\\*\\*                  | Yes                                     | 11.3                                           |                                                                                                                                      |\n\n\\* -infinity and +infinity are also valid values.  \n\\*\\* +infinity is also a valid value.\n\n## Depth / stencil formats\n\nAll depth and stencil pixel formats are only usable in [Canvases](canvas \"Canvas\").\n\nThey are [non-readable](texture-isreadable \"Texture:isReadable\") by default, and Canvases with a depth/stencil format created with the [readable flag](love.graphics.newcanvas \"love.graphics.newCanvas\") can only access the depth values of their pixels in shaders (stencil values are not readable no matter what).\n\n### Constants\n\n|                  |                |           |             |         |\n|------------------|----------------|-----------|-------------|---------|\n| Name             | Bits per pixel | Has depth | Has stencil | Note(s) |\n| stencil8         | 8              |           | Yes         |         |\n| depth16          | 16             | Yes       |             |         |\n| depth24          | 24             | Yes       |             |         |\n| depth32f         | 32             | Yes       |             |         |\n| depth24stencil8  | 32             | Yes       | Yes         |         |\n| depth32fstencil8 | 40             | Yes       | Yes         |         |\n\n## Compressed formats\n\nAll compressed pixel formats are only usable in [Images](image \"Image\") via [CompressedImageData](compressedimagedata \"CompressedImageData\") (compressed textures).\n\nUnlike regular color formats, these stay compressed in RAM and VRAM. This is good for saving memory space as well as improving performance, since the graphics card will be able to keep more of the image's pixels in its fast-access cache when drawing it.\n\n### Constants (desktop GPUs)\n\n|       |            |                |                          |                                                                                                                                                                  |\n|-------|------------|----------------|--------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Name  | Components | Bits per pixel | Range                    | Note(s)                                                                                                                                                          |\n| DXT1  | 3          | 4              | \\[0, 1\\]                 | Suitable for fully opaque images on desktop systems.                                                                                                             |\n| DXT3  | 4          | 8              | \\[0, 1\\]                 | Smooth variations in opacity do not mix well with this format. DXT1 or DXT5 is generally better in every situation.                                              |\n| DXT5  | 4          | 8              | \\[0, 1\\]                 | Recommended for images with varying opacity on desktop systems.                                                                                                  |\n| BC4   | 1          | 4              | \\[0, 1\\]                 | Also known as 3Dc+ or ATI1. Stores just the red channel.                                                                                                         |\n| BC4s  | 1          | 4              | \\[-1, 1\\]                | Less precision than BC4 but allows negative numbers.                                                                                                             |\n| BC5   | 2          | 8              | \\[0, 1\\]                 | Also known as 3Dc or ATI2. Often used for normal maps on desktop systems.                                                                                        |\n| BC5s  | 2          | 8              | \\[-1, 1\\]                | Less precision than BC5 but allows negative numbers. Often used for normal maps on desktop systems.                                                              |\n| BC6h  | 3          | 8              | \\[0, +infinity\\]         | Stores [half-precision](https://en.wikipedia.org/wiki/Half-precision_floating-point_format) floating point RGB data. Suitable for HDR images on desktop systems. |\n| BC6hs | 3          | 8              | \\[-infinity, +infinity\\] | Less precision than BC6h but allows negative numbers.                                                                                                            |\n| BC7   | 4          | 8              | \\[0, 1\\]                 | Very good at representing opaque or transparent images, but requires a DX11 / OpenGL 4-capable GPU.                                                              |\n\n### Constants (mobile GPUs)\n\n|           |            |                |           |                                                                                            |\n|-----------|------------|----------------|-----------|--------------------------------------------------------------------------------------------|\n| Name      | Components | Bits per pixel | Range     | Note(s)                                                                                    |\n| ETC1      | 3          | 4              | \\[0, 1\\]  | Suitable for fully opaque images on older Android devices.                                 |\n| ETC2rgb   | 3          | 4              | \\[0, 1\\]  | Suitable for fully opaque images on newer mobile devices                                   |\n| ETC2rgba  | 4          | 8              | \\[0, 1\\]  | Recommended for images with varying opacity on newer mobile devices.                       |\n| ETC2rgba1 | 4          | 4              | \\[0, 1\\]  | RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. |\n| EACr      | 1          | 4              | \\[0, 1\\]  | Stores just the red channel.                                                               |\n| EACrs     | 1          | 4              | \\[-1, 1\\] | Less precision than EACr but allows negative numbers.                                      |\n| EACrg     | 2          | 8              | \\[0, 1\\]  | Stores red and green channels.                                                             |\n| EACrgs    | 2          | 8              | \\[-1, 1\\] | Less precision than EACrg but allows negative numbers.                                     |\n| PVR1rgb2  | 3          | 2              | \\[0, 1\\]  | Images using this format must be square and power-of-two sized.                            |\n| PVR1rgb4  | 3          | 4              | \\[0, 1\\]  | Images using this format must be square and power-of-two sized.                            |\n| PVR1rgba2 | 4          | 2              | \\[0, 1\\]  | Images using this format must be square and power-of-two sized.                            |\n| PVR1rgba4 | 4          | 4              | \\[0, 1\\]  | Images using this format must be square and power-of-two sized.                            |\n| ASTC4x4   | 4          | 8              | \\[0, 1\\]  |                                                                                            |\n| ASTC5x4   | 4          | 6.4            | \\[0, 1\\]  |                                                                                            |\n| ASTC5x5   | 4          | 5.12           | \\[0, 1\\]  |                                                                                            |\n| ASTC6x5   | 4          | 4.27           | \\[0, 1\\]  |                                                                                            |\n| ASTC6x6   | 4          | 3.56           | \\[0, 1\\]  |                                                                                            |\n| ASTC8x5   | 4          | 3.2            | \\[0, 1\\]  |                                                                                            |\n| ASTC8x6   | 4          | 2.67           | \\[0, 1\\]  |                                                                                            |\n| ASTC8x8   | 4          | 2              | \\[0, 1\\]  |                                                                                            |\n| ASTC10x5  | 4          | 2.56           | \\[0, 1\\]  |                                                                                            |\n| ASTC10x6  | 4          | 2.13           | \\[0, 1\\]  |                                                                                            |\n| ASTC10x8  | 4          | 1.6            | \\[0, 1\\]  |                                                                                            |\n| ASTC10x10 | 4          | 1.28           | \\[0, 1\\]  |                                                                                            |\n| ASTC12x10 | 4          | 1.07           | \\[0, 1\\]  |                                                                                            |\n| ASTC12x12 | 4          | 0.89           | \\[0, 1\\]  |                                                                                            |\n\n## Notes\n\nNot all formats are supported in love.graphics [Images](image \"Image\") and [Canvases](canvas \"Canvas\") on all systems, although the DXT compressed image formats have close to 100% support on desktop operating systems.\n\nThe BC4 and BC5 formats are supported on systems with DirectX 10 / OpenGL 3-capable desktop hardware and drivers. The BC6H and BC7 formats are only supported on desktop systems with DirectX 11 / OpenGL 4-capable hardware and very recent drivers. macOS does not support BC6H or BC7 at all currently.\n\nETC1 is supported by *most* Android devices, as well as the iPhone 5s and newer.\n\nThe ETC2 and EAC formats are supported by the iPhone 5s and newer, all OpenGL ES 3-capable Android devices, and OpenGL 4.3-capable desktop GPUs.\n\nThe PVR1 formats are supported by all iOS devices, as well as the small number of Android devices which have PowerVR GPUs.\n\nASTC is supported by new mobile devices (e.g. the iPhone 6 and newer), Android devices which have Adreno 4xx (and later) GPUs, and Skylake (and newer) integrated Intel GPUs. It has a variety of variants to allow for picking the most compressed possible one that doesn't have any noticeable compression artifacts, for a given texture.\n\nUse [love.graphics.getCanvasFormats](love.graphics.getcanvasformats \"love.graphics.getCanvasFormats\") and [love.graphics.getImageFormats](love.graphics.getimageformats \"love.graphics.getImageFormats\") to check for Canvas and Image support, respectively:\n\n``` lua\nlocal supportedformats = love.graphics.getImageFormats()\n \nif not supportedformats[\"DXT5\"] then\n    -- Can't load CompressedImageData with the DXT5 format into images!\n    -- On some Linux systems with Mesa drivers, the user will need to install a \"libtxc-dxtn\" package because the DXT (aka S3TC) formats used to be patented.\n    -- Support for DXT formats on all other desktop drivers is pretty much guaranteed.\nend\n \nif not supportedformats[\"BC5\"] then\n    -- Can't load CompressedImageData with the BC5 format into images!\n    -- The user likely doesn't have a video card capable of using that format.\nend\n```\n\n## See Also\n\n- [love.image](love.image \"love.image\")\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.font](love.font \"love.font\")\n- [love.image.newImageData](love.image.newimagedata \"love.image.newImageData\")\n- [love.graphics.getImageFormats](love.graphics.getimageformats \"love.graphics.getImageFormats\")\n- [love.graphics.getCanvasFormats](love.graphics.getcanvasformats \"love.graphics.getCanvasFormats\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [Texture:getFormat](texture-getformat \"Texture:getFormat\")\n- [ImageData:getFormat](imagedata-getformat \"ImageData:getFormat\")\n- [CompressedImageData:getFormat](compressedimagedata-getformat \"CompressedImageData:getFormat\")\n- [GlyphData:getFormat](glyphdata-getformat \"GlyphData:getFormat\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PixelFormat](https://love2d.org/wiki/PixelFormat)"
- name: PointStyle
  id: pointstyle
  summary: Removed in LÖVE 0.10.0 This enum is not supported in that and later versions
  description: "# PointStyle\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis enum is not supported in that and later versions.\n\nHow points should be drawn.\n\n## Constants\n\nrough  \nDraw rough points.\n\nsmooth  \nDraw smooth points.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getPointStyle](love.graphics.getpointstyle \"love.graphics.getPointStyle\")\n- [love.graphics.setPointStyle](love.graphics.setpointstyle \"love.graphics.setPointStyle\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PointStyle](https://love2d.org/wiki/PointStyle)"
- name: PolygonShape
  id: polygonshape
  summary: A PolygonShape is a convex polygon with up to 8 vertices
  description: "# PolygonShape\n\nA PolygonShape is a convex polygon with up to 8 vertices.\n\n## Constructors\n\n|                                                                                                   |                                                       |     |     |\n|---------------------------------------------------------------------------------------------------|-------------------------------------------------------|-----|-----|\n| [love.physics.newPolygonShape](love.physics.newpolygonshape \"love.physics.newPolygonShape\")       | Creates a new **PolygonShape**.                       |     |     |\n| [love.physics.newRectangleShape](love.physics.newrectangleshape \"love.physics.newRectangleShape\") | Shorthand for creating rectangular **PolygonShapes**. |     |     |\n\n## Functions\n\n|                                                                           |                                                                   |       |       |\n|---------------------------------------------------------------------------|-------------------------------------------------------------------|-------|-------|\n| [Object:release](object-release \"Object:release\")                         | Immediately destroys the object's Lua reference.                  | 11.0  |       |\n| [Object:type](object-type \"Object:type\")                                  | Gets the type of the object as a string.                          |       |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                            | Checks whether an object is of a certain type.                    |       |       |\n| [PolygonShape:getPoints](polygonshape-getpoints \"PolygonShape:getPoints\") | Get the local coordinates of the polygon's vertices.              |       |       |\n| [PolygonShape:validate](polygonshape-validate \"PolygonShape:validate\")    | Validates whether the PolygonShape is convex.                     | 0.9.0 |       |\n| [Shape:computeAABB](shape-computeaabb \"Shape:computeAABB\")                | Returns the points of the bounding box for the transformed shape. | 0.8.0 |       |\n| [Shape:computeMass](shape-computemass \"Shape:computeMass\")                | Computes the mass properties for the shape.                       | 0.8.0 |       |\n| [Shape:destroy](shape-destroy \"Shape:destroy\")                            | Explicitly destroys the Shape.                                    |       | 0.8.0 |\n| [Shape:getBody](shape-getbody \"Shape:getBody\")                            | Get the body the shape is attached to.                            | 0.7.0 | 0.8.0 |\n| [Shape:getBoundingBox](shape-getboundingbox \"Shape:getBoundingBox\")       | Gets the bounding box of the shape.                               |       | 0.8.0 |\n| [Shape:getCategory](shape-getcategory \"Shape:getCategory\")                | Gets the categories this shape is a member of.                    |       | 0.8.0 |\n| [Shape:getCategoryBits](shape-getcategorybits \"Shape:getCategoryBits\")    | Gets the categories as a 16-bit integer.                          |       | 0.8.0 |\n| [Shape:getChildCount](shape-getchildcount \"Shape:getChildCount\")          | Returns the number of children the shape has.                     | 0.8.0 |       |\n| [Shape:getData](shape-getdata \"Shape:getData\")                            | Get the data set with setData.                                    |       | 0.8.0 |\n| [Shape:getDensity](shape-getdensity \"Shape:getDensity\")                   | Gets the density of the Shape.                                    |       | 0.8.0 |\n| [Shape:getFilterData](shape-getfilterdata \"Shape:getFilterData\")          | Gets the filter data of the Shape.                                |       | 0.8.0 |\n| [Shape:getFriction](shape-getfriction \"Shape:getFriction\")                | Gets the friction of this shape.                                  |       | 0.8.0 |\n| [Shape:getMask](shape-getmask \"Shape:getMask\")                            | Gets which categories this shape should **NOT** collide with.     |       | 0.8.0 |\n| [Shape:getRadius](shape-getradius \"Shape:getRadius\")                      | Gets the radius of the shape.                                     |       |       |\n| [Shape:getRestitution](shape-getrestitution \"Shape:getRestitution\")       | Gets the restitution of this shape.                               |       | 0.8.0 |\n| [Shape:getType](shape-gettype \"Shape:getType\")                            | Gets a string representing the Shape.                             |       |       |\n| [Shape:isSensor](shape-issensor \"Shape:isSensor\")                         | Checks whether a Shape is a sensor or not.                        |       | 0.8.0 |\n| [Shape:rayCast](shape-raycast \"Shape:rayCast\")                            | Casts a ray against the shape.                                    | 0.8.0 |       |\n| [Shape:setCategory](shape-setcategory \"Shape:setCategory\")                | Sets the categories this shape is a member of.                    |       | 0.8.0 |\n| [Shape:setData](shape-setdata \"Shape:setData\")                            | Set data to be passed to the collision callback.                  |       | 0.8.0 |\n| [Shape:setDensity](shape-setdensity \"Shape:setDensity\")                   | Sets the density of a Shape.                                      |       | 0.8.0 |\n| [Shape:setFilterData](shape-setfilterdata \"Shape:setFilterData\")          | Sets the filter data for a Shape.                                 |       | 0.8.0 |\n| [Shape:setFriction](shape-setfriction \"Shape:setFriction\")                | Sets the friction of the shape.                                   |       | 0.8.0 |\n| [Shape:setMask](shape-setmask \"Shape:setMask\")                            | Sets which categories this shape should **NOT** collide with.     |       | 0.8.0 |\n| [Shape:setRestitution](shape-setrestitution \"Shape:setRestitution\")       | Sets the restitution of the shape.                                |       | 0.8.0 |\n| [Shape:setSensor](shape-setsensor \"Shape:setSensor\")                      | Sets whether this shape should act as a sensor.                   |       | 0.8.0 |\n| [Shape:testPoint](shape-testpoint \"Shape:testPoint\")                      | Checks whether a point lies inside the shape.                     |       |       |\n| [Shape:testSegment](shape-testsegment \"Shape:testSegment\")                | Checks whether a line segment intersects a shape.                 |       | 0.8.0 |\n\n## Supertypes\n\n- [Shape](shape \"Shape\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PolygonShape](https://love2d.org/wiki/PolygonShape)"
- name: PolygonShape:getPoints
  id: polygonshape-getpoints
  summary: Get the local coordinates of the polygon's vertices
  description: "# PolygonShape:getPoints\n\nGet the local coordinates of the polygon's vertices.\n\nThis function has a variable number of return values. It can be used in a nested fashion with [love.graphics.polygon](love.graphics.polygon \"love.graphics.polygon\").\n\n## Function\n\n### Synopsis\n\n``` lua\nx1, y1, x2, y2, ... x8, y8 = PolygonShape:getPoints( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x1`  \nThe x-component of the first vertex.\n\n[`number`](number \"number\")` y1`  \nThe y-component of the first vertex.\n\n[`number`](number \"number\")` x2`  \nThe x-component of the second vertex.\n\n[`number`](number \"number\")` y2`  \nThe y-component of the second vertex.\n\nAnd so on, for up to eight vertices.\n\nThis function may have up to 16 return values, since it returns two values for each vertex in the polygon. In other words, it can return the coordinates of up to 8 points.\n\n## See Also\n\n- [PolygonShape](polygonshape \"PolygonShape\")\n- [Body:getWorldPoints](body-getworldpoints \"Body:getWorldPoints\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PolygonShape:getPoints](https://love2d.org/wiki/PolygonShape:getPoints)"
- name: PolygonShape:validate
  id: polygonshape-validate
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# PolygonShape:validate\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nValidates whether the PolygonShape is convex. Concave PolygonShapes cannot be used in [love.physics](love.physics \"love.physics\").\n\n## Function\n\n### Synopsis\n\n``` lua\nconvex = PolygonShape:validate()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` convex`  \nWhether the PolygonShape is convex.\n\n## See Also\n\n- [PolygonShape](polygonshape \"PolygonShape\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PolygonShape:validate](https://love2d.org/wiki/PolygonShape:validate)"
- name: PowerState
  id: powerstate
  summary: Available since LÖVE 0.9.0 This enum is not supported in earlier versions
  description: "# PowerState\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis enum is not supported in earlier versions.\n\nThe basic state of the system's power supply.\n\n## Constants\n\nunknown  \nCannot determine power status.\n\nbattery  \nNot plugged in, running on a battery.\n\nnobattery  \nPlugged in, no battery available.\n\ncharging  \nPlugged in, charging battery.\n\ncharged  \nPlugged in, battery is fully charged.\n\n## See Also\n\n- [love.system](love.system \"love.system\")\n- [love.system.getPowerInfo](love.system.getpowerinfo \"love.system.getPowerInfo\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PowerState](https://love2d.org/wiki/PowerState)"
- name: PrismaticJoint
  id: prismaticjoint
  summary: Restricts relative motion between Bodies to one shared axis
  description: "# PrismaticJoint\n\nRestricts relative motion between Bodies to one shared axis.\n\n[](https://love2d.org/wiki/File:physicsJointPrismatic.png)\n\n## Constructors\n\n|                                                                                                   |                                                  |     |     |\n|---------------------------------------------------------------------------------------------------|--------------------------------------------------|-----|-----|\n| [love.physics.newPrismaticJoint](love.physics.newprismaticjoint \"love.physics.newPrismaticJoint\") | Creates a **PrismaticJoint** between two bodies. |     |     |\n\n## Functions\n\n|                                                                                                               |                                                                   |        |       |\n|---------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------|--------|-------|\n| [Joint:destroy](joint-destroy \"Joint:destroy\")                                                                | Explicitly destroys the Joint.                                    |        |       |\n| [Joint:getAnchors](joint-getanchors \"Joint:getAnchors\")                                                       | Get the anchor points of the joint.                               |        |       |\n| [Joint:getBodies](joint-getbodies \"Joint:getBodies\")                                                          | Gets the [bodies](body \"Body\") that the Joint is attached to.     | 0.9.2  |       |\n| [Joint:getCollideConnected](joint-getcollideconnected \"Joint:getCollideConnected\")                            | Gets whether the connected Bodies collide.                        |        |       |\n| [Joint:getReactionForce](joint-getreactionforce \"Joint:getReactionForce\")                                     | Returns the reaction force on the second body.                    |        |       |\n| [Joint:getReactionTorque](joint-getreactiontorque \"Joint:getReactionTorque\")                                  | Returns the reaction torque on the second body.                   |        |       |\n| [Joint:getType](joint-gettype \"Joint:getType\")                                                                | Gets a string representing the type.                              |        |       |\n| [Joint:getUserData](joint-getuserdata \"Joint:getUserData\")                                                    | Returns the Lua value associated with this Joint.                 | 0.9.2  |       |\n| [Joint:isDestroyed](joint-isdestroyed \"Joint:isDestroyed\")                                                    | Gets whether the Joint is destroyed.                              | 0.9.2  |       |\n| [Joint:setCollideConnected](joint-setcollideconnected \"Joint:setCollideConnected\")                            | Sets whether the connected Bodies should collide with each other. |        | 0.8.0 |\n| [Joint:setUserData](joint-setuserdata \"Joint:setUserData\")                                                    | Associates a Lua value with the Joint.                            | 0.9.2  |       |\n| [PrismaticJoint:areLimitsEnabled](prismaticjoint-arelimitsenabled \"PrismaticJoint:areLimitsEnabled\")          | Checks whether the limits are enabled.                            | 11.0   |       |\n| [PrismaticJoint:enableLimit](prismaticjoint-enablelimit \"PrismaticJoint:enableLimit\")                         | Enables or disables the limits of the joint.                      | 0.8.0  | 0.9.0 |\n| [PrismaticJoint:enableMotor](prismaticjoint-enablemotor \"PrismaticJoint:enableMotor\")                         | Starts or stops the joint motor.                                  | 0.8.0  | 0.9.0 |\n| [PrismaticJoint:getAxis](prismaticjoint-getaxis \"PrismaticJoint:getAxis\")                                     | Gets the world-space axis vector of the Prismatic Joint.          | 0.10.2 |       |\n| [PrismaticJoint:getJointSpeed](prismaticjoint-getjointspeed \"PrismaticJoint:getJointSpeed\")                   | Get the current joint angle speed.                                |        |       |\n| [PrismaticJoint:getJointTranslation](prismaticjoint-getjointtranslation \"PrismaticJoint:getJointTranslation\") | Get the current joint translation.                                |        |       |\n| [PrismaticJoint:getLimits](prismaticjoint-getlimits \"PrismaticJoint:getLimits\")                               | Gets the joint limits.                                            |        |       |\n| [PrismaticJoint:getLowerLimit](prismaticjoint-getlowerlimit \"PrismaticJoint:getLowerLimit\")                   | Gets the lower limit.                                             |        |       |\n| [PrismaticJoint:getMaxMotorForce](prismaticjoint-getmaxmotorforce \"PrismaticJoint:getMaxMotorForce\")          | Gets the maximum motor force.                                     |        |       |\n| [PrismaticJoint:getMotorForce](prismaticjoint-getmotorforce \"PrismaticJoint:getMotorForce\")                   | Returns the current motor force.                                  |        |       |\n| [PrismaticJoint:getMotorSpeed](prismaticjoint-getmotorspeed \"PrismaticJoint:getMotorSpeed\")                   | Gets the motor speed.                                             |        |       |\n| [PrismaticJoint:getUpperLimit](prismaticjoint-getupperlimit \"PrismaticJoint:getUpperLimit\")                   | Gets the upper limit.                                             |        |       |\n| [PrismaticJoint:hasLimitsEnabled](prismaticjoint-haslimitsenabled \"PrismaticJoint:hasLimitsEnabled\")          | Checks whether the limits are enabled.                            | 0.9.0  |       |\n| [PrismaticJoint:isLimitEnabled](prismaticjoint-islimitenabled \"PrismaticJoint:isLimitEnabled\")                | Checks whether the limits are enabled.                            | 0.8.0  | 0.9.0 |\n| [PrismaticJoint:isLimitsEnabled](prismaticjoint-islimitsenabled \"PrismaticJoint:isLimitsEnabled\")             | Checks whether limits are enabled.                                |        | 0.8.0 |\n| [PrismaticJoint:isMotorEnabled](prismaticjoint-ismotorenabled \"PrismaticJoint:isMotorEnabled\")                | Checks whether the motor is enabled.                              |        |       |\n| [PrismaticJoint:setLimits](prismaticjoint-setlimits \"PrismaticJoint:setLimits\")                               | Sets the limits.                                                  |        |       |\n| [PrismaticJoint:setLimitsEnabled](prismaticjoint-setlimitsenabled \"PrismaticJoint:setLimitsEnabled\")          | Enables/disables the joint limit.                                 | 0.9.0  | 0.8.0 |\n| [PrismaticJoint:setLowerLimit](prismaticjoint-setlowerlimit \"PrismaticJoint:setLowerLimit\")                   | Sets the lower limit.                                             |        |       |\n| [PrismaticJoint:setMaxMotorForce](prismaticjoint-setmaxmotorforce \"PrismaticJoint:setMaxMotorForce\")          | Set the maximum motor force.                                      |        |       |\n| [PrismaticJoint:setMotorEnabled](prismaticjoint-setmotorenabled \"PrismaticJoint:setMotorEnabled\")             | Enables/disables the joint motor.                                 | 0.9.0  | 0.8.0 |\n| [PrismaticJoint:setMotorSpeed](prismaticjoint-setmotorspeed \"PrismaticJoint:setMotorSpeed\")                   | Sets the motor speed.                                             |        |       |\n| [PrismaticJoint:setUpperLimit](prismaticjoint-setupperlimit \"PrismaticJoint:setUpperLimit\")                   | Sets the upper limit.                                             |        |       |\n\n## Supertypes\n\n- [Joint](joint \"Joint\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint](https://love2d.org/wiki/PrismaticJoint)"
- name: PrismaticJoint:areLimitsEnabled
  id: prismaticjoint-arelimitsenabled
  summary: Available since LÖVE 11.0 It has been renamed from PrismaticJoint:hasLimitsEnabled
  description: "# PrismaticJoint:areLimitsEnabled\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [PrismaticJoint:hasLimitsEnabled](prismaticjoint-haslimitsenabled \"PrismaticJoint:hasLimitsEnabled\").\n\nChecks whether the limits are enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = PrismaticJoint:areLimitsEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nTrue if enabled, false otherwise.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:areLimitsEnabled](https://love2d.org/wiki/PrismaticJoint:areLimitsEnabled)"
- name: PrismaticJoint:enableLimit
  id: prismaticjoint-enablelimit
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# PrismaticJoint:enableLimit\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [PrismaticJoint:setLimitsEnabled](prismaticjoint-setlimitsenabled \"PrismaticJoint:setLimitsEnabled\").\n\nEnables or disables the limits of the joint.\n\n## Function\n\n### Synopsis\n\n``` lua\nPrismaticJoint:enableLimit( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue to enable, false to disable.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:enableLimit](https://love2d.org/wiki/PrismaticJoint:enableLimit)"
- name: PrismaticJoint:enableMotor
  id: prismaticjoint-enablemotor
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# PrismaticJoint:enableMotor\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [PrismaticJoint:setMotorEnabled](prismaticjoint-setmotorenabled \"PrismaticJoint:setMotorEnabled\").\n\nStarts or stops the joint motor.\n\n## Function\n\n### Synopsis\n\n``` lua\nPrismaticJoint:enableMotor( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue to enable, false to disable.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:enableMotor](https://love2d.org/wiki/PrismaticJoint:enableMotor)"
- name: PrismaticJoint:getAxis
  id: prismaticjoint-getaxis
  summary: Available since LÖVE 0.10.2 This function is not supported in earlier versions
  description: "# PrismaticJoint:getAxis\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis function is not supported in earlier versions.\n\nGets the world-space axis vector of the Prismatic Joint.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = PrismaticJoint:getAxis( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x-axis coordinate of the world-space axis vector.\n\n[`number`](number \"number\")` y`  \nThe y-axis coordinate of the world-space axis vector.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n- [love.physics.newPrismaticJoint](love.physics.newprismaticjoint \"love.physics.newPrismaticJoint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:getAxis](https://love2d.org/wiki/PrismaticJoint:getAxis)"
- name: PrismaticJoint:getJointSpeed
  id: prismaticjoint-getjointspeed
  summary: Get the current joint angle speed
  description: "# PrismaticJoint:getJointSpeed\n\nGet the current joint angle speed.\n\n## Function\n\n### Synopsis\n\n``` lua\ns = PrismaticJoint:getJointSpeed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` s`  \nJoint angle speed in meters/second.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:getJointSpeed](https://love2d.org/wiki/PrismaticJoint:getJointSpeed)"
- name: PrismaticJoint:getJointTranslation
  id: prismaticjoint-getjointtranslation
  summary: Get the current joint translation
  description: "# PrismaticJoint:getJointTranslation\n\nGet the current joint translation.\n\n## Function\n\n### Synopsis\n\n``` lua\nt = PrismaticJoint:getJointTranslation( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` t`  \nJoint translation, usually in meters..\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:getJointTranslation](https://love2d.org/wiki/PrismaticJoint:getJointTranslation)"
- name: PrismaticJoint:getLimits
  id: prismaticjoint-getlimits
  summary: Gets the joint limits
  description: "# PrismaticJoint:getLimits\n\nGets the joint limits.\n\n## Function\n\n### Synopsis\n\n``` lua\nlower, upper = PrismaticJoint:getLimits( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` lower`  \nThe lower limit, usually in meters.\n\n[`number`](number \"number\")` upper`  \nThe upper limit, usually in meters.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:getLimits](https://love2d.org/wiki/PrismaticJoint:getLimits)"
- name: PrismaticJoint:getLowerLimit
  id: prismaticjoint-getlowerlimit
  summary: Gets the lower limit
  description: "# PrismaticJoint:getLowerLimit\n\nGets the lower limit.\n\n## Function\n\n### Synopsis\n\n``` lua\nlower = PrismaticJoint:getLowerLimit( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` lower`  \nThe lower limit, usually in meters.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:getLowerLimit](https://love2d.org/wiki/PrismaticJoint:getLowerLimit)"
- name: PrismaticJoint:getMaxMotorForce
  id: prismaticjoint-getmaxmotorforce
  summary: Gets the maximum motor force
  description: "# PrismaticJoint:getMaxMotorForce\n\nGets the maximum motor force.\n\n## Function\n\n### Synopsis\n\n``` lua\nf = PrismaticJoint:getMaxMotorForce( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` f`  \nThe maximum motor force, usually in N.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:getMaxMotorForce](https://love2d.org/wiki/PrismaticJoint:getMaxMotorForce)"
- name: PrismaticJoint:getMotorForce
  id: prismaticjoint-getmotorforce
  summary: Returns the current motor force
  description: "# PrismaticJoint:getMotorForce\n\nReturns the current motor force.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nforce = PrismaticJoint:getMotorForce( invdt )\n```\n\n### Arguments\n\n[`number`](number \"number\")` invdt`  \nHow long the force applies. Usually the inverse time step or 1/dt.\n\n### Returns\n\n[`number`](number \"number\")` force`  \nThe force on the motor in newtons.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nf = PrismaticJoint:getMotorForce( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` f`  \nThe current motor force, usually in N.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:getMotorForce](https://love2d.org/wiki/PrismaticJoint:getMotorForce)"
- name: PrismaticJoint:getMotorSpeed
  id: prismaticjoint-getmotorspeed
  summary: Gets the motor speed
  description: "# PrismaticJoint:getMotorSpeed\n\nGets the motor speed.\n\n## Function\n\n### Synopsis\n\n``` lua\ns = PrismaticJoint:getMotorSpeed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` s`  \nThe motor speed, usually in meters per second.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:getMotorSpeed](https://love2d.org/wiki/PrismaticJoint:getMotorSpeed)"
- name: PrismaticJoint:getUpperLimit
  id: prismaticjoint-getupperlimit
  summary: Gets the upper limit
  description: "# PrismaticJoint:getUpperLimit\n\nGets the upper limit.\n\n## Function\n\n### Synopsis\n\n``` lua\nupper = PrismaticJoint:getUpperLimit( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` upper`  \nThe upper limit, usually in meters.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:getUpperLimit](https://love2d.org/wiki/PrismaticJoint:getUpperLimit)"
- name: PrismaticJoint:hasLimitsEnabled
  id: prismaticjoint-haslimitsenabled
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# PrismaticJoint:hasLimitsEnabled\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\n|                                                                                                                                         |\n|-----------------------------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                                    |\n| This function has been renamed to [PrismaticJoint:areLimitsEnabled](prismaticjoint-arelimitsenabled \"PrismaticJoint:areLimitsEnabled\"). |\n\nChecks whether the limits are enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = PrismaticJoint:hasLimitsEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nTrue if enabled, false otherwise.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:hasLimitsEnabled](https://love2d.org/wiki/PrismaticJoint:hasLimitsEnabled)"
- name: PrismaticJoint:isLimitEnabled
  id: prismaticjoint-islimitenabled
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# PrismaticJoint:isLimitEnabled\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [PrismaticJoint:hasLimitsEnabled](prismaticjoint-haslimitsenabled \"PrismaticJoint:hasLimitsEnabled\").\n\nChecks whether the limits are enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = PrismaticJoint:isLimitEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nTrue if enabled, false otherwise.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:isLimitEnabled](https://love2d.org/wiki/PrismaticJoint:isLimitEnabled)"
- name: PrismaticJoint:isLimitsEnabled
  id: prismaticjoint-islimitsenabled
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# PrismaticJoint:isLimitsEnabled\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nChecks whether limits are enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = PrismaticJoint:isLimitsEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nTrue if enabled, false otherwise.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:isLimitsEnabled](https://love2d.org/wiki/PrismaticJoint:isLimitsEnabled)"
- name: PrismaticJoint:isMotorEnabled
  id: prismaticjoint-ismotorenabled
  summary: Checks whether the motor is enabled
  description: "# PrismaticJoint:isMotorEnabled\n\nChecks whether the motor is enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = PrismaticJoint:isMotorEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nTrue if enabled, false if disabled.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:isMotorEnabled](https://love2d.org/wiki/PrismaticJoint:isMotorEnabled)"
- name: PrismaticJoint:setLimits
  id: prismaticjoint-setlimits
  summary: Sets the limits
  description: "# PrismaticJoint:setLimits\n\nSets the limits.\n\n## Function\n\n### Synopsis\n\n``` lua\nPrismaticJoint:setLimits( lower, upper )\n```\n\n### Arguments\n\n[`number`](number \"number\")` lower`  \nThe lower limit, usually in meters.\n\n[`number`](number \"number\")` upper`  \nThe upper limit, usually in meters.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:setLimits](https://love2d.org/wiki/PrismaticJoint:setLimits)"
- name: PrismaticJoint:setLimitsEnabled
  id: prismaticjoint-setlimitsenabled
  summary: Removed in LÖVE 0.8.0 This function is not supported in that version
  description: "# PrismaticJoint:setLimitsEnabled\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that version.\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed again.\n\nEnables/disables the joint limit.\n\n## Function\n\n### Synopsis\n\n``` lua\nenable = PrismaticJoint:setLimitsEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue if enabled, false if disabled.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:setLimitsEnabled](https://love2d.org/wiki/PrismaticJoint:setLimitsEnabled)"
- name: PrismaticJoint:setLowerLimit
  id: prismaticjoint-setlowerlimit
  summary: Sets the lower limit
  description: "# PrismaticJoint:setLowerLimit\n\nSets the lower limit.\n\n## Function\n\n### Synopsis\n\n``` lua\nPrismaticJoint:setLowerLimit( lower )\n```\n\n### Arguments\n\n[`number`](number \"number\")` lower`  \nThe lower limit, usually in meters.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:setLowerLimit](https://love2d.org/wiki/PrismaticJoint:setLowerLimit)"
- name: PrismaticJoint:setMaxMotorForce
  id: prismaticjoint-setmaxmotorforce
  summary: Set the maximum motor force
  description: "# PrismaticJoint:setMaxMotorForce\n\nSet the maximum motor force.\n\n## Function\n\n### Synopsis\n\n``` lua\nPrismaticJoint:setMaxMotorForce( f )\n```\n\n### Arguments\n\n[`number`](number \"number\")` f`  \nThe maximum motor force, usually in N.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:setMaxMotorForce](https://love2d.org/wiki/PrismaticJoint:setMaxMotorForce)"
- name: PrismaticJoint:setMotorEnabled
  id: prismaticjoint-setmotorenabled
  summary: Removed in LÖVE 0.8.0 This function is not supported in that version
  description: "# PrismaticJoint:setMotorEnabled\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that version.\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed again.\n\nEnables/disables the joint motor.\n\n## Function\n\n### Synopsis\n\n``` lua\nPrismaticJoint:setMotorEnabled( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue to enable, false to disable.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:setMotorEnabled](https://love2d.org/wiki/PrismaticJoint:setMotorEnabled)"
- name: PrismaticJoint:setMotorSpeed
  id: prismaticjoint-setmotorspeed
  summary: Sets the motor speed
  description: "# PrismaticJoint:setMotorSpeed\n\nSets the motor speed.\n\n## Function\n\n### Synopsis\n\n``` lua\nPrismaticJoint:setMotorSpeed( s )\n```\n\n### Arguments\n\n[`number`](number \"number\")` s`  \nThe motor speed, usually in meters per second.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:setMotorSpeed](https://love2d.org/wiki/PrismaticJoint:setMotorSpeed)"
- name: PrismaticJoint:setUpperLimit
  id: prismaticjoint-setupperlimit
  summary: Sets the upper limit
  description: "# PrismaticJoint:setUpperLimit\n\nSets the upper limit.\n\n## Function\n\n### Synopsis\n\n``` lua\nPrismaticJoint:setUpperLimit( upper )\n```\n\n### Arguments\n\n[`number`](number \"number\")` upper`  \nThe upper limit, usually in meters.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [PrismaticJoint](prismaticjoint \"PrismaticJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PrismaticJoint:setUpperLimit](https://love2d.org/wiki/PrismaticJoint:setUpperLimit)"
- name: PulleyJoint
  id: pulleyjoint
  summary: Allows you to simulate bodies connected through pulleys
  description: "# PulleyJoint\n\nAllows you to simulate bodies connected through pulleys.\n\n[](https://love2d.org/wiki/File:physicsJointPulley.png)\n\n## Constructors\n\n|                                                                                          |                                                                            |     |     |\n|------------------------------------------------------------------------------------------|----------------------------------------------------------------------------|-----|-----|\n| [love.physics.newPulleyJoint](love.physics.newpulleyjoint \"love.physics.newPulleyJoint\") | Creates a **PulleyJoint** to join two bodies to each other and the ground. |     |     |\n\n## Functions\n\n|                                                                                             |                                                                    |       |       |\n|---------------------------------------------------------------------------------------------|--------------------------------------------------------------------|-------|-------|\n| [Joint:destroy](joint-destroy \"Joint:destroy\")                                              | Explicitly destroys the Joint.                                     |       |       |\n| [Joint:getAnchors](joint-getanchors \"Joint:getAnchors\")                                     | Get the anchor points of the joint.                                |       |       |\n| [Joint:getBodies](joint-getbodies \"Joint:getBodies\")                                        | Gets the [bodies](body \"Body\") that the Joint is attached to.      | 0.9.2 |       |\n| [Joint:getCollideConnected](joint-getcollideconnected \"Joint:getCollideConnected\")          | Gets whether the connected Bodies collide.                         |       |       |\n| [Joint:getReactionForce](joint-getreactionforce \"Joint:getReactionForce\")                   | Returns the reaction force on the second body.                     |       |       |\n| [Joint:getReactionTorque](joint-getreactiontorque \"Joint:getReactionTorque\")                | Returns the reaction torque on the second body.                    |       |       |\n| [Joint:getType](joint-gettype \"Joint:getType\")                                              | Gets a string representing the type.                               |       |       |\n| [Joint:getUserData](joint-getuserdata \"Joint:getUserData\")                                  | Returns the Lua value associated with this Joint.                  | 0.9.2 |       |\n| [Joint:isDestroyed](joint-isdestroyed \"Joint:isDestroyed\")                                  | Gets whether the Joint is destroyed.                               | 0.9.2 |       |\n| [Joint:setCollideConnected](joint-setcollideconnected \"Joint:setCollideConnected\")          | Sets whether the connected Bodies should collide with each other.  |       | 0.8.0 |\n| [Joint:setUserData](joint-setuserdata \"Joint:setUserData\")                                  | Associates a Lua value with the Joint.                             | 0.9.2 |       |\n| [PulleyJoint:getConstant](pulleyjoint-getconstant \"PulleyJoint:getConstant\")                | Get the total length of the rope.                                  |       |       |\n| [PulleyJoint:getGroundAnchors](pulleyjoint-getgroundanchors \"PulleyJoint:getGroundAnchors\") | Get the ground anchor positions in world coordinates.              |       |       |\n| [PulleyJoint:getLength1](pulleyjoint-getlength1 \"PulleyJoint:getLength1\")                   | Get the current length of the segment attached to the first body.  |       | 0.8.0 |\n| [PulleyJoint:getLength2](pulleyjoint-getlength2 \"PulleyJoint:getLength2\")                   | Get the current length of the segment attached to the second body. |       | 0.8.0 |\n| [PulleyJoint:getLengthA](pulleyjoint-getlengtha \"PulleyJoint:getLengthA\")                   | Get the current length of the segment attached to the first body.  | 0.8.0 |       |\n| [PulleyJoint:getLengthB](pulleyjoint-getlengthb \"PulleyJoint:getLengthB\")                   | Get the current length of the segment attached to the second body. | 0.8.0 |       |\n| [PulleyJoint:getMaxLengths](pulleyjoint-getmaxlengths \"PulleyJoint:getMaxLengths\")          | Get the maximum lengths of the rope segments.                      |       |       |\n| [PulleyJoint:getRatio](pulleyjoint-getratio \"PulleyJoint:getRatio\")                         | Get the pulley ratio.                                              |       |       |\n| [PulleyJoint:setConstant](pulleyjoint-setconstant \"PulleyJoint:setConstant\")                | Set the total length of the rope.                                  |       |       |\n| [PulleyJoint:setMaxLengths](pulleyjoint-setmaxlengths \"PulleyJoint:setMaxLengths\")          | Set the maximum lengths of the rope segments.                      |       |       |\n| [PulleyJoint:setRatio](pulleyjoint-setratio \"PulleyJoint:setRatio\")                         | Set the pulley ratio.                                              |       |       |\n\n## Supertypes\n\n- [Joint](joint \"Joint\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PulleyJoint](https://love2d.org/wiki/PulleyJoint)"
- name: PulleyJoint:getConstant
  id: pulleyjoint-getconstant
  summary: Get the total length of the rope
  description: "# PulleyJoint:getConstant\n\nGet the total length of the rope.\n\n## Function\n\n### Synopsis\n\n``` lua\nlength = PulleyJoint:getConstant( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` length`  \nThe length of the rope in the joint.\n\n## See Also\n\n- [PulleyJoint](pulleyjoint \"PulleyJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PulleyJoint:getConstant](https://love2d.org/wiki/PulleyJoint:getConstant)"
- name: PulleyJoint:getGroundAnchors
  id: pulleyjoint-getgroundanchors
  summary: Get the ground anchor positions in world coordinates
  description: "# PulleyJoint:getGroundAnchors\n\nGet the ground anchor positions in world coordinates.\n\n## Function\n\n### Synopsis\n\n``` lua\na1x, a1y, a2x, a2y = PulleyJoint:getGroundAnchors( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` a1x`  \nThe x coordinate of the first anchor.\n\n[`number`](number \"number\")` a1y`  \nThe y coordinate of the first anchor.\n\n[`number`](number \"number\")` a2x`  \nThe x coordinate of the second anchor.\n\n[`number`](number \"number\")` a2y`  \nThe y coordinate of the second anchor.\n\n## See Also\n\n- [PulleyJoint](pulleyjoint \"PulleyJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PulleyJoint:getGroundAnchors](https://love2d.org/wiki/PulleyJoint:getGroundAnchors)"
- name: PulleyJoint:getLength1
  id: pulleyjoint-getlength1
  summary: Removed in LÖVE 0.8.0 This method is not supported in that and later versions
  description: "# PulleyJoint:getLength1\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in that and later versions.\n\n\".0\" can not be assigned to a declared number type with value 0.8.\n\nGet the current length of the rope segment attached to the first body.\n\n## Function\n\n### Synopsis\n\n``` lua\nlength = PulleyJoint:getLength1( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` length`  \nThe length of the rope segment.\n\n## See Also\n\n- [PulleyJoint](pulleyjoint \"PulleyJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PulleyJoint:getLength1](https://love2d.org/wiki/PulleyJoint:getLength1)"
- name: PulleyJoint:getLength2
  id: pulleyjoint-getlength2
  summary: Removed in LÖVE 0.8.0 This method is not supported in that and later versions
  description: "# PulleyJoint:getLength2\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in that and later versions.\n\n\".0\" can not be assigned to a declared number type with value 0.8.\n\nGet the current length of the rope segment attached to the second body.\n\n## Function\n\n### Synopsis\n\n``` lua\nlength = PulleyJoint:getLength2( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` length`  \nThe length of the rope segment.\n\n## See Also\n\n- [PulleyJoint](pulleyjoint \"PulleyJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PulleyJoint:getLength2](https://love2d.org/wiki/PulleyJoint:getLength2)"
- name: PulleyJoint:getLengthA
  id: pulleyjoint-getlengtha
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# PulleyJoint:getLengthA\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nGet the current length of the rope segment attached to the first body.\n\n## Function\n\n### Synopsis\n\n``` lua\nlength = PulleyJoint:getLengthA( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` length`  \nThe length of the rope segment.\n\n## See Also\n\n- [PulleyJoint](pulleyjoint \"PulleyJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PulleyJoint:getLengthA](https://love2d.org/wiki/PulleyJoint:getLengthA)"
- name: PulleyJoint:getLengthB
  id: pulleyjoint-getlengthb
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# PulleyJoint:getLengthB\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nGet the current length of the rope segment attached to the second body.\n\n## Function\n\n### Synopsis\n\n``` lua\nlength = PulleyJoint:getLengthB( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` length`  \nThe length of the rope segment.\n\n## See Also\n\n- [PulleyJoint](pulleyjoint \"PulleyJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PulleyJoint:getLengthB](https://love2d.org/wiki/PulleyJoint:getLengthB)"
- name: PulleyJoint:getMaxLengths
  id: pulleyjoint-getmaxlengths
  summary: Get the maximum lengths of the rope segments
  description: "# PulleyJoint:getMaxLengths\n\nGet the maximum lengths of the rope segments.\n\n## Function\n\n### Synopsis\n\n``` lua\nlen1, len2 = PulleyJoint:getMaxLengths( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` len1`  \nThe maximum length of the first rope segment.\n\n[`number`](number \"number\")` len2`  \nThe maximum length of the second rope segment.\n\n## See Also\n\n- [PulleyJoint](pulleyjoint \"PulleyJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PulleyJoint:getMaxLengths](https://love2d.org/wiki/PulleyJoint:getMaxLengths)"
- name: PulleyJoint:getRatio
  id: pulleyjoint-getratio
  summary: Get the pulley ratio
  description: "# PulleyJoint:getRatio\n\nGet the pulley ratio.\n\n## Function\n\n### Synopsis\n\n``` lua\nratio = PulleyJoint:getRatio( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` ratio`  \nThe pulley ratio of the joint.\n\n## See Also\n\n- [PulleyJoint](pulleyjoint \"PulleyJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PulleyJoint:getRatio](https://love2d.org/wiki/PulleyJoint:getRatio)"
- name: PulleyJoint:setConstant
  id: pulleyjoint-setconstant
  summary: Set the total length of the rope
  description: "# PulleyJoint:setConstant\n\nSet the total length of the rope.\n\nSetting a new length for the rope updates the maximum length values of the joint.\n\n## Function\n\n### Synopsis\n\n``` lua\nPulleyJoint:setConstant( length )\n```\n\n### Arguments\n\n[`number`](number \"number\")` length`  \nThe new length of the rope in the joint.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [PulleyJoint](pulleyjoint \"PulleyJoint\")\n- [PulleyJoint:getMaxLengths](pulleyjoint-getmaxlengths \"PulleyJoint:getMaxLengths\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PulleyJoint:setConstant](https://love2d.org/wiki/PulleyJoint:setConstant)"
- name: PulleyJoint:setMaxLengths
  id: pulleyjoint-setmaxlengths
  summary: Set the maximum lengths of the rope segments
  description: "# PulleyJoint:setMaxLengths\n\nSet the maximum lengths of the rope segments.\n\nThe physics module also imposes maximum values for the rope segments. If the parameters exceed these values, the maximum values are set instead of the requested values.\n\n## Function\n\n### Synopsis\n\n``` lua\nPulleyJoint:setMaxLengths( max1, max2 )\n```\n\n### Arguments\n\n[`number`](number \"number\")` max1`  \nThe new maximum length of the first segment.\n\n[`number`](number \"number\")` max2`  \nThe new maximum length of the second segment.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [PulleyJoint](pulleyjoint \"PulleyJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PulleyJoint:setMaxLengths](https://love2d.org/wiki/PulleyJoint:setMaxLengths)"
- name: PulleyJoint:setRatio
  id: pulleyjoint-setratio
  summary: Set the pulley ratio
  description: "# PulleyJoint:setRatio\n\nSet the pulley ratio.\n\n## Function\n\n### Synopsis\n\n``` lua\nPulleyJoint:setRatio( ratio )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ratio`  \nThe new pulley ratio of the joint.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [PulleyJoint](pulleyjoint \"PulleyJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/PulleyJoint:setRatio](https://love2d.org/wiki/PulleyJoint:setRatio)"
- name: Quad
  id: quad
  summary: A quadrilateral (a polygon with four sides and four corners) with texture coordinate information
  description: "# Quad\n\nA quadrilateral (a polygon with four sides and four corners) with texture coordinate information.\n\nQuads can be used to select part of a texture to draw. In this way, one large [texture atlas](https://en.wikipedia.org/wiki/Texture_atlas) can be loaded, and then split up into sub-images.\n\nQuads 'bleed' when scaled, rotated or drawn at non-integer coordinates, even within [SpriteBatches](spritebatch \"SpriteBatch\"), to compensate for this, use 1px borders around the textures inside the texture atlas (preferably with the same colors as the actual border)\n\n## Constructors\n\n|                                                                        |                         |     |     |\n|------------------------------------------------------------------------|-------------------------|-----|-----|\n| [love.graphics.newQuad](love.graphics.newquad \"love.graphics.newQuad\") | Creates a new **Quad**. |     |     |\n\n## Functions\n\n|                                                                                    |                                                                                                                                  |        |       |\n|------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------|--------|-------|\n| [Object:release](object-release \"Object:release\")                                  | Immediately destroys the object's Lua reference.                                                                                 | 11.0   |       |\n| [Object:type](object-type \"Object:type\")                                           | Gets the type of the object as a string.                                                                                         |        |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                     | Checks whether an object is of a certain type.                                                                                   |        |       |\n| [Quad:flip](quad-flip \"Quad:flip\")                                                 | Flips this quad horizontally, vertically, or both.                                                                               |        | 0.9.0 |\n| [Quad:getTextureDimensions](quad-gettexturedimensions \"Quad:getTextureDimensions\") | Gets reference texture dimensions initially specified in [love.graphics.newQuad](love.graphics.newquad \"love.graphics.newQuad\"). | 0.10.2 |       |\n| [Quad:getViewport](quad-getviewport \"Quad:getViewport\")                            | Gets the current viewport of this Quad.                                                                                          |        |       |\n| [Quad:setViewport](quad-setviewport \"Quad:setViewport\")                            | Sets the texture coordinates according to a viewport.                                                                            |        |       |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Quad](https://love2d.org/wiki/Quad)"
- name: Quad:flip
  id: quad-flip
  summary: Removed in LÖVE 0.9.0 This function is not supported in that and later versions
  description: "# Quad:flip\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in that and later versions.\n\nFlips this quad horizontally, vertically, or both.\n\n## Function\n\n### Synopsis\n\n``` lua\nQuad:flip( x, y )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` x`  \nTrue to flip horizontally, false to leave as-is.\n\n[`boolean`](boolean \"boolean\")` y`  \nTrue to flip vertically, false to leave as-is.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Quad](quad \"Quad\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Quad:flip](https://love2d.org/wiki/Quad:flip)"
- name: Quad:getTextureDimensions
  id: quad-gettexturedimensions
  summary: Available since LÖVE 0.10.2 This function is not supported in earlier versions
  description: "# Quad:getTextureDimensions\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis function is not supported in earlier versions.\n\nGets reference texture dimensions initially specified in [love.graphics.newQuad](love.graphics.newquad \"love.graphics.newQuad\").\n\n## Function\n\n### Synopsis\n\n``` lua\nsw, sh = Quad:getTextureDimensions( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` sw`  \nThe Texture width used by the Quad.\n\n[`number`](number \"number\")` sh`  \nThe Texture height used by the Quad.\n\n## See Also\n\n- [Quad](quad \"Quad\")\n- [Quad:getViewport](quad-getviewport \"Quad:getViewport\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Quad:getTextureDimensions](https://love2d.org/wiki/Quad:getTextureDimensions)"
- name: Quad:getViewport
  id: quad-getviewport
  summary: Gets the current viewport of this Quad
  description: "# Quad:getViewport\n\nGets the current viewport of this Quad.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y, w, h = Quad:getViewport( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe top-left corner along the x-axis.\n\n[`number`](number \"number\")` y`  \nThe top-left corner along the y-axis.\n\n[`number`](number \"number\")` w`  \nThe width of the viewport.\n\n[`number`](number \"number\")` h`  \nThe height of the viewport.\n\n## See Also\n\n- [Quad](quad \"Quad\")\n- [Quad:setViewport](quad-setviewport \"Quad:setViewport\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Quad:getViewport](https://love2d.org/wiki/Quad:getViewport)"
- name: Quad:setViewport
  id: quad-setviewport
  summary: Sets the texture coordinates according to a viewport
  description: "# Quad:setViewport\n\nSets the texture coordinates according to a viewport.\n\n## Function\n\n### Synopsis\n\n``` lua\nQuad:setViewport( x, y, w, h, sw, sh )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe top-left corner along the x-axis.\n\n[`number`](number \"number\")` y`  \nThe top-left corner along the y-axis.\n\n[`number`](number \"number\")` w`  \nThe width of the viewport.\n\n[`number`](number \"number\")` h`  \nThe height of the viewport.\n\n[`number`](number \"number\")` sw` Available since 0.9.0  \nThe reference width, the width of the [Image](image \"Image\"). (Must be greater than 0.)\n\n[`number`](number \"number\")` sh` Available since 0.9.0  \nThe reference height, the height of the [Image](image \"Image\"). (Must be greater than 0.)\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Quad](quad \"Quad\")\n- [Quad:getViewport](quad-getviewport \"Quad:getViewport\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Quad:setViewport](https://love2d.org/wiki/Quad:setViewport)"
- name: RandomGenerator
  id: randomgenerator
  summary: Available since LÖVE 0.9.0 This type is not supported in earlier versions
  description: "# RandomGenerator\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis type is not supported in earlier versions.\n\nA random number generation object which has its own random state.\n\n## Constructors\n\n|                                                                                             |                                           |       |     |\n|---------------------------------------------------------------------------------------------|-------------------------------------------|-------|-----|\n| [love.math.newRandomGenerator](love.math.newrandomgenerator \"love.math.newRandomGenerator\") | Creates a new **RandomGenerator** object. | 0.9.0 |     |\n\n## Functions\n\n|                                                                                             |                                                                    |       |     |\n|---------------------------------------------------------------------------------------------|--------------------------------------------------------------------|-------|-----|\n| [Object:release](object-release \"Object:release\")                                           | Immediately destroys the object's Lua reference.                   | 11.0  |     |\n| [Object:type](object-type \"Object:type\")                                                    | Gets the type of the object as a string.                           |       |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                              | Checks whether an object is of a certain type.                     |       |     |\n| [RandomGenerator:getSeed](randomgenerator-getseed \"RandomGenerator:getSeed\")                | Gets the seed of the random number generator.                      | 0.9.0 |     |\n| [RandomGenerator:getState](randomgenerator-getstate \"RandomGenerator:getState\")             | Gets the current state of the random number generator.             | 0.9.1 |     |\n| [RandomGenerator:random](randomgenerator-random \"RandomGenerator:random\")                   | Generates a pseudo-random number in a platform independent manner. | 0.9.0 |     |\n| [RandomGenerator:randomNormal](randomgenerator-randomnormal \"RandomGenerator:randomNormal\") | Get a normally distributed pseudo random number.                   | 0.9.0 |     |\n| [RandomGenerator:setSeed](randomgenerator-setseed \"RandomGenerator:setSeed\")                | Sets the seed of the random number generator.                      | 0.9.0 |     |\n| [RandomGenerator:setState](randomgenerator-setstate \"RandomGenerator:setState\")             | Sets the current state of the random number generator.             | 0.9.1 |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RandomGenerator](https://love2d.org/wiki/RandomGenerator)"
- name: RandomGenerator:getSeed
  id: randomgenerator-getseed
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# RandomGenerator:getSeed\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the seed of the random number generator object.\n\nThe seed is split into two numbers due to Lua's use of [doubles](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) for all number values - doubles can't accurately represent integer values above 2^53, but the seed value is an integer number in the range of \\[0, 2^64 - 1\\].\n\n## Function\n\n### Synopsis\n\n``` lua\nlow, high = RandomGenerator:getSeed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` low`  \nInteger number representing the lower 32 bits of the RandomGenerator's 64 bit seed value.\n\n[`number`](number \"number\")` high`  \nInteger number representing the higher 32 bits of the RandomGenerator's 64 bit seed value.\n\n## See Also\n\n- [RandomGenerator](randomgenerator \"RandomGenerator\")\n- [RandomGenerator:setSeed](randomgenerator-setseed \"RandomGenerator:setSeed\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RandomGenerator:getSeed](https://love2d.org/wiki/RandomGenerator:getSeed)"
- name: RandomGenerator:getState
  id: randomgenerator-getstate
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# RandomGenerator:getState\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nGets the current state of the random number generator. This returns an opaque string which is only useful for later use with [RandomGenerator:setState](randomgenerator-setstate \"RandomGenerator:setState\") in the same major version of LÖVE.\n\nThis is different from [RandomGenerator:getSeed](randomgenerator-getseed \"RandomGenerator:getSeed\") in that getState gets the RandomGenerator's current state, whereas getSeed gets the previously set seed number.\n\n## Function\n\n### Synopsis\n\n``` lua\nstate = RandomGenerator:getState( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` state`  \nThe current state of the RandomGenerator object, represented as a string.\n\n## Notes\n\nThe value of the state string does not depend on the current operating system.\n\n## Examples\n\n``` lua\nrng = love.math.newRandomGenerator(os.time())\n \nfor i=1, 100 do\n    -- Use some random numbers.\n    rng:random()\nend\n \n-- Make a new RandomGenerator and set its state to the current state of the first one.\nrng2 = love.math.newRandomGenerator()\nrng2:setState(rng:getState())\n \n-- Both 'rng' and 'rng2' will now give the same results. \nassert(rng:random() == rng2:random())\n```\n\n## See Also\n\n- [RandomGenerator](randomgenerator \"RandomGenerator\")\n- [RandomGenerator:setState](randomgenerator-setstate \"RandomGenerator:setState\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RandomGenerator:getState](https://love2d.org/wiki/RandomGenerator:getState)"
- name: RandomGenerator:random
  id: randomgenerator-random
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# RandomGenerator:random\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGenerates a pseudo-random number in a platform independent manner.\n\n## Function\n\nGet uniformly distributed pseudo-random real number within \\[0, 1\\].\n\n### Synopsis\n\n``` lua\nnumber = RandomGenerator:random( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` number`  \nThe pseudo-random number.\n\n## Function\n\nGet uniformly distributed pseudo-random **integer** number within \\[1, max\\].\n\n### Synopsis\n\n``` lua\nnumber = RandomGenerator:random( max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` max`  \nThe maximum possible value it should return.\n\n### Returns\n\n[`number`](number \"number\")` number`  \nThe pseudo-random integer number.\n\n## Function\n\nGet uniformly distributed pseudo-random **integer** number within \\[min, max\\].\n\n### Synopsis\n\n``` lua\nnumber = RandomGenerator:random( min, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum possible value it should return.\n\n[`number`](number \"number\")` max`  \nThe maximum possible value it should return.\n\n### Returns\n\n[`number`](number \"number\")` number`  \nThe pseudo-random integer number.\n\n## Notes\n\nWhen using the 2nd and 3rd variant, numbers passed will be rounded, thus, `RandomGenerator:random(0, 76.767)` may return 77\n\n## See Also\n\n- [RandomGenerator](randomgenerator \"RandomGenerator\")\n- [love.math.random](love.math.random \"love.math.random\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RandomGenerator:random](https://love2d.org/wiki/RandomGenerator:random)"
- name: RandomGenerator:randomNormal
  id: randomgenerator-randomnormal
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# RandomGenerator:randomNormal\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGet a normally distributed pseudo random number.\n\n## Function\n\n### Synopsis\n\n``` lua\nnumber = RandomGenerator:randomNormal( stddev, mean )\n```\n\n### Arguments\n\n[`number`](number \"number\")` stddev (1)`  \nStandard deviation of the distribution.\n\n[`number`](number \"number\")` mean (0)`  \nThe mean of the distribution.\n\n### Returns\n\n[`number`](number \"number\")` number`  \nNormally distributed random number with variance (stddev)² and the specified mean.\n\n## See Also\n\n- [RandomGenerator](randomgenerator \"RandomGenerator\")\n- [love.math.randomNormal](love.math.randomnormal \"love.math.randomNormal\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RandomGenerator:randomNormal](https://love2d.org/wiki/RandomGenerator:randomNormal)"
- name: RandomGenerator:setSeed
  id: randomgenerator-setseed
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# RandomGenerator:setSeed\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the seed of the random number generator using the specified integer number.\n\n## Function\n\n### Synopsis\n\n``` lua\nRandomGenerator:setSeed( seed )\n```\n\n### Arguments\n\n[`number`](number \"number\")` seed`  \nThe integer number with which you want to seed the randomization. Must be within the range of \\[1, 2^53\\].\n\n### Returns\n\nNothing.\n\n### Notes\n\nDue to Lua's use of double-precision floating point numbers, values above 2^53 cannot be accurately represented. Use the other variant of this function if your seed will have a larger value.\n\n## Function\n\nCombines two 32-bit integer numbers into a 64-bit integer value and sets the seed of the random number generator using the value.\n\n### Synopsis\n\n``` lua\nRandomGenerator:setSeed( low, high )\n```\n\n### Arguments\n\n[`number`](number \"number\")` low`  \nThe lower 32 bits of the seed value. Must be within the range of \\[0, 2^32 - 1\\].\n\n[`number`](number \"number\")` high`  \nThe higher 32 bits of the seed value. Must be within the range of \\[0, 2^32 - 1\\].\n\n### Returns\n\nNothing.\n\n## Examples\n\nCreates a new RandomGenerator object, sets the seed to the system clock's time, then generates a number between 1 and 100 inclusive. Note that the seed can be any number within the range of \\[0, 2^53 - 1\\].\n\n``` lua\nfunction love.load()\n    rng = love.math.newRandomGenerator()\n    rng:setSeed(os.time())\n    randomNumber = rng:random(1,100)\nend\n```\n\n## See Also\n\n- [RandomGenerator](randomgenerator \"RandomGenerator\")\n- [RandomGenerator:getSeed](randomgenerator-getseed \"RandomGenerator:getSeed\")\n- [love.math](love.math \"love.math\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RandomGenerator:setSeed](https://love2d.org/wiki/RandomGenerator:setSeed)"
- name: RandomGenerator:setState
  id: randomgenerator-setstate
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# RandomGenerator:setState\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nSets the current state of the random number generator. The value used as an argument for this function is an opaque string and should only originate from a previous call to [RandomGenerator:getState](randomgenerator-getstate \"RandomGenerator:getState\") in the same major version of LÖVE.\n\nThis is different from [RandomGenerator:setSeed](randomgenerator-setseed \"RandomGenerator:setSeed\") in that setState directly sets the RandomGenerator's current implementation-dependent state, whereas setSeed gives it a new seed value.\n\n## Function\n\n### Synopsis\n\n``` lua\nRandomGenerator:setState( state )\n```\n\n### Arguments\n\n[`string`](string \"string\")` state`  \nThe new state of the RandomGenerator object, represented as a string. This should originate from a previous call to [RandomGenerator:getState](randomgenerator-getstate \"RandomGenerator:getState\").\n\n### Returns\n\nNothing.\n\n## Notes\n\nThe effect of the state string does not depend on the current operating system.\n\n## Examples\n\n``` lua\nrng = love.math.newRandomGenerator(os.time())\n \nfor i=1, 100 do\n    -- Use some random numbers.\n    rng:random()\nend\n \n-- Make a new RandomGenerator and set its state to the current state of the first one.\nrng2 = love.math.newRandomGenerator()\nrng2:setState(rng:getState())\n \n-- Both 'rng' and 'rng2' will now give the same results. \nassert(rng:random() == rng2:random())\n```\n\n## See Also\n\n- [RandomGenerator](randomgenerator \"RandomGenerator\")\n- [RandomGenerator:getState](randomgenerator-getstate \"RandomGenerator:getState\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RandomGenerator:setState](https://love2d.org/wiki/RandomGenerator:setState)"
- name: Rasterizer
  id: rasterizer
  summary: Available since LÖVE 0.7.0 This type is not supported in earlier versions
  description: "# Rasterizer\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis type is not supported in earlier versions.\n\nA Rasterizer handles font rendering, containing the font data (image or TrueType font) and drawable glyphs.\n\n## Constructors\n\n|                                                                                                      |                                    |       |     |\n|------------------------------------------------------------------------------------------------------|------------------------------------|-------|-----|\n| [love.font.newBMFontRasterizer](love.font.newbmfontrasterizer \"love.font.newBMFontRasterizer\")       | Creates a new BMFont Rasterizer.   | 0.7.0 |     |\n| [love.font.newImageRasterizer](love.font.newimagerasterizer \"love.font.newImageRasterizer\")          | Creates a new Image Rasterizer.    | 0.7.0 |     |\n| [love.font.newRasterizer](love.font.newrasterizer \"love.font.newRasterizer\")                         | Creates a new Rasterizer.          | 0.7.0 |     |\n| [love.font.newTrueTypeRasterizer](love.font.newtruetyperasterizer \"love.font.newTrueTypeRasterizer\") | Creates a new TrueType Rasterizer. | 0.7.0 |     |\n\n## Functions\n\n|                                                                                 |                                                  |       |     |\n|---------------------------------------------------------------------------------|--------------------------------------------------|-------|-----|\n| [Object:release](object-release \"Object:release\")                               | Immediately destroys the object's Lua reference. | 11.0  |     |\n| [Object:type](object-type \"Object:type\")                                        | Gets the type of the object as a string.         |       |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                  | Checks whether an object is of a certain type.   |       |     |\n| [Rasterizer:getAdvance](rasterizer-getadvance \"Rasterizer:getAdvance\")          | Gets font advance.                               | 0.7.0 |     |\n| [Rasterizer:getAscent](rasterizer-getascent \"Rasterizer:getAscent\")             | Gets ascent height.                              | 0.7.0 |     |\n| [Rasterizer:getDescent](rasterizer-getdescent \"Rasterizer:getDescent\")          | Gets descent height.                             | 0.7.0 |     |\n| [Rasterizer:getGlyphCount](rasterizer-getglyphcount \"Rasterizer:getGlyphCount\") | Gets number of glyphs in font.                   | 0.7.0 |     |\n| [Rasterizer:getGlyphData](rasterizer-getglyphdata \"Rasterizer:getGlyphData\")    | Gets glyph data of a specified glyph.            | 0.7.0 |     |\n| [Rasterizer:getHeight](rasterizer-getheight \"Rasterizer:getHeight\")             | Gets font height.                                | 0.7.0 |     |\n| [Rasterizer:getLineHeight](rasterizer-getlineheight \"Rasterizer:getLineHeight\") | Gets line height of a font.                      | 0.7.0 |     |\n| [Rasterizer:hasGlyphs](rasterizer-hasglyphs \"Rasterizer:hasGlyphs\")             | Checks if font contains specified glyphs.        | 0.7.0 |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.font](love.font \"love.font\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Rasterizer](https://love2d.org/wiki/Rasterizer)"
- name: Rasterizer:getAdvance
  id: rasterizer-getadvance
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Rasterizer:getAdvance\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets font advance.\n\n## Function\n\n### Synopsis\n\n``` lua\nadvance = Rasterizer:getAdvance()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` advance`  \nFont advance.\n\n## See Also\n\n- [Rasterizer](rasterizer \"Rasterizer\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Rasterizer:getAdvance](https://love2d.org/wiki/Rasterizer:getAdvance)"
- name: Rasterizer:getAscent
  id: rasterizer-getascent
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Rasterizer:getAscent\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets ascent height.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = Rasterizer:getAscent()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nAscent height.\n\n## See Also\n\n- [Rasterizer](rasterizer \"Rasterizer\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Rasterizer:getAscent](https://love2d.org/wiki/Rasterizer:getAscent)"
- name: Rasterizer:getDescent
  id: rasterizer-getdescent
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Rasterizer:getDescent\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets descent height.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = Rasterizer:getDescent()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nDescent height.\n\n## See Also\n\n- [Rasterizer](rasterizer \"Rasterizer\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Rasterizer:getDescent](https://love2d.org/wiki/Rasterizer:getDescent)"
- name: Rasterizer:getGlyphCount
  id: rasterizer-getglyphcount
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Rasterizer:getGlyphCount\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets number of glyphs in font.\n\n## Function\n\n### Synopsis\n\n``` lua\ncount = Rasterizer:getGlyphCount()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` count`  \nGlyphs count.\n\n## See Also\n\n- [Rasterizer](rasterizer \"Rasterizer\")\n- [GlyphData](glyphdata \"GlyphData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Rasterizer:getGlyphCount](https://love2d.org/wiki/Rasterizer:getGlyphCount)"
- name: Rasterizer:getGlyphData
  id: rasterizer-getglyphdata
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Rasterizer:getGlyphData\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets glyph data of a specified glyph.\n\n## Function\n\n### Synopsis\n\n``` lua\nglyphData = Rasterizer:getGlyphData( glyph )\n```\n\n### Arguments\n\n[`string`](string \"string\")` glyph`  \nGlyph\n\n### Returns\n\n[`GlyphData`](glyphdata \"GlyphData\")` glyphData`  \nGlyph data\n\n## Function\n\n### Synopsis\n\n``` lua\nglyphData = Rasterizer:getGlyphData( glyphNumber )\n```\n\n### Arguments\n\n[`number`](number \"number\")` glyphNumber`  \nGlyph number\n\n### Returns\n\n[`GlyphData`](glyphdata \"GlyphData\")` glyphData`  \nGlyph data\n\n## See Also\n\n- [Rasterizer](rasterizer \"Rasterizer\")\n- [GlyphData](glyphdata \"GlyphData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Rasterizer:getGlyphData](https://love2d.org/wiki/Rasterizer:getGlyphData)"
- name: Rasterizer:getHeight
  id: rasterizer-getheight
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Rasterizer:getHeight\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets font height.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = Rasterizer:getHeight()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nFont height\n\n## See Also\n\n- [Rasterizer](rasterizer \"Rasterizer\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Rasterizer:getHeight](https://love2d.org/wiki/Rasterizer:getHeight)"
- name: Rasterizer:getLineHeight
  id: rasterizer-getlineheight
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Rasterizer:getLineHeight\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets line height of a font.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = Rasterizer:getLineHeigt()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nLine height of a font.\n\n## See Also\n\n- [Rasterizer](rasterizer \"Rasterizer\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Rasterizer:getLineHeight](https://love2d.org/wiki/Rasterizer:getLineHeight)"
- name: Rasterizer:hasGlyphs
  id: rasterizer-hasglyphs
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Rasterizer:hasGlyphs\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nChecks if font contains specified glyphs.\n\n## Function\n\n### Synopsis\n\n``` lua\nhasGlyphs = Rasterizer:hasGlyphs( glyph1, glyph2, ... )\n```\n\n### Arguments\n\n[`string or number`](https://love2d.org/w/index.php?title=string_or_number&action=edit&redlink=1 \"string or number (page does not exist)\")` glyph1`  \nGlyph\n\n[`string or number`](https://love2d.org/w/index.php?title=string_or_number&action=edit&redlink=1 \"string or number (page does not exist)\")` glyph2`  \nGlyph\n\n[`string or number`](https://love2d.org/w/index.php?title=string_or_number&action=edit&redlink=1 \"string or number (page does not exist)\")` ...`  \nAdditional glyphs\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` hasGlyphs`  \nWhatever font contains specified glyphs.\n\n## See Also\n\n- [Rasterizer](rasterizer \"Rasterizer\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Rasterizer:hasGlyphs](https://love2d.org/wiki/Rasterizer:hasGlyphs)"
- name: RecordingDevice
  id: recordingdevice
  summary: Available since LÖVE 11.0 This type is not supported in earlier versions
  description: "# RecordingDevice\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis type is not supported in earlier versions.\n\n  \nRepresents an audio input device capable of recording sounds.\n\n## Constructors\n\n|                                                                                                   |                                                    |      |     |\n|---------------------------------------------------------------------------------------------------|----------------------------------------------------|------|-----|\n| [love.audio.getRecordingDevices](love.audio.getrecordingdevices \"love.audio.getRecordingDevices\") | Gets a list of **RecordingDevices** on the system. | 11.0 |     |\n\n## Functions\n\n|                                                                                                      |                                                                                                         |      |     |\n|------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------|------|-----|\n| [Object:release](object-release \"Object:release\")                                                    | Immediately destroys the object's Lua reference.                                                        | 11.0 |     |\n| [Object:type](object-type \"Object:type\")                                                             | Gets the type of the object as a string.                                                                |      |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                                       | Checks whether an object is of a certain type.                                                          |      |     |\n| [RecordingDevice:getBitDepth](recordingdevice-getbitdepth \"RecordingDevice:getBitDepth\")             | Gets the number of bits per sample in the data currently being recorded.                                | 11.0 |     |\n| [RecordingDevice:getChannelCount](recordingdevice-getchannelcount \"RecordingDevice:getChannelCount\") | Gets the number of channels currently being recorded (mono or stereo).                                  | 11.0 |     |\n| [RecordingDevice:getData](recordingdevice-getdata \"RecordingDevice:getData\")                         | Gets all recorded audio [SoundData](sounddata \"SoundData\") stored in the device's internal ring buffer. | 11.0 |     |\n| [RecordingDevice:getName](recordingdevice-getname \"RecordingDevice:getName\")                         | Gets the name of the recording device.                                                                  | 11.0 |     |\n| [RecordingDevice:getSampleCount](recordingdevice-getsamplecount \"RecordingDevice:getSampleCount\")    | Gets the number of currently recorded samples.                                                          | 11.0 |     |\n| [RecordingDevice:getSampleRate](recordingdevice-getsamplerate \"RecordingDevice:getSampleRate\")       | Gets the number of samples per second currently being recorded.                                         | 11.0 |     |\n| [RecordingDevice:isRecording](recordingdevice-isrecording \"RecordingDevice:isRecording\")             | Gets whether the device is currently recording.                                                         | 11.0 |     |\n| [RecordingDevice:start](recordingdevice-start \"RecordingDevice:start\")                               | Begins recording audio using this device.                                                               | 11.0 |     |\n| [RecordingDevice:stop](recordingdevice-stop \"RecordingDevice:stop\")                                  | Stops recording audio from this device.                                                                 | 11.0 |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RecordingDevice](https://love2d.org/wiki/RecordingDevice)"
- name: RecordingDevice:getBitDepth
  id: recordingdevice-getbitdepth
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# RecordingDevice:getBitDepth\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the number of bits per sample in the data currently being recorded.\n\n## Function\n\n### Synopsis\n\n``` lua\nbits = RecordingDevice:getBitDepth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` bits`  \nThe number of bits per sample in the data that's currently being recorded.\n\n## See Also\n\n- [RecordingDevice](recordingdevice \"RecordingDevice\")\n- [RecordingDevice:start](recordingdevice-start \"RecordingDevice:start\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RecordingDevice:getBitDepth](https://love2d.org/wiki/RecordingDevice:getBitDepth)"
- name: RecordingDevice:getChannelCount
  id: recordingdevice-getchannelcount
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# RecordingDevice:getChannelCount\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the number of channels currently being recorded (mono or stereo).\n\n## Function\n\n### Synopsis\n\n``` lua\nchannels = RecordingDevice:getChannelCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` channels`  \nThe number of channels being recorded (1 for mono, 2 for stereo).\n\n## See Also\n\n- [RecordingDevice](recordingdevice \"RecordingDevice\")\n- [RecordingDevice:start](recordingdevice-start \"RecordingDevice:start\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RecordingDevice:getChannelCount](https://love2d.org/wiki/RecordingDevice:getChannelCount)"
- name: RecordingDevice:getData
  id: recordingdevice-getdata
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# RecordingDevice:getData\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets all recorded audio [SoundData](sounddata \"SoundData\") stored in the device's internal ring buffer.\n\nThe internal ring buffer is cleared when this function is called, so calling it again will only get audio recorded after the previous call. If the device's internal ring buffer completely fills up before this function is called, the oldest data that doesn't fit into the buffer will be lost.\n\n## Function\n\n### Synopsis\n\n``` lua\ndata = RecordingDevice:getData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`SoundData`](sounddata \"SoundData\")` data (nil)`  \nThe recorded audio data, or nil if the device isn't recording.\n\n## See Also\n\n- [RecordingDevice](recordingdevice \"RecordingDevice\")\n- [RecordingDevice:start](recordingdevice-start \"RecordingDevice:start\")\n- [RecordingDevice:stop](recordingdevice-stop \"RecordingDevice:stop\")\n- [SoundData](sounddata \"SoundData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RecordingDevice:getData](https://love2d.org/wiki/RecordingDevice:getData)"
- name: RecordingDevice:getName
  id: recordingdevice-getname
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# RecordingDevice:getName\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the name of the recording device.\n\n## Function\n\n### Synopsis\n\n``` lua\nname = RecordingDevice:getName( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` name`  \nThe name of the device.\n\n## See Also\n\n- [RecordingDevice](recordingdevice \"RecordingDevice\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RecordingDevice:getName](https://love2d.org/wiki/RecordingDevice:getName)"
- name: RecordingDevice:getSampleCount
  id: recordingdevice-getsamplecount
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# RecordingDevice:getSampleCount\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the number of currently recorded samples.\n\n## Function\n\n### Synopsis\n\n``` lua\nsamples = RecordingDevice:getSampleCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` samples`  \nThe number of samples that have been recorded so far.\n\n## See Also\n\n- [RecordingDevice](recordingdevice \"RecordingDevice\")\n- [RecordingDevice:getData](recordingdevice-getdata \"RecordingDevice:getData\")\n- [RecordingDevice:start](recordingdevice-start \"RecordingDevice:start\")\n- [RecordingDevice:stop](recordingdevice-stop \"RecordingDevice:stop\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RecordingDevice:getSampleCount](https://love2d.org/wiki/RecordingDevice:getSampleCount)"
- name: RecordingDevice:getSampleRate
  id: recordingdevice-getsamplerate
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# RecordingDevice:getSampleRate\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the number of samples per second currently being recorded.\n\n## Function\n\n### Synopsis\n\n``` lua\nrate = RecordingDevice:getSampleRate( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` rate`  \nThe number of samples being recorded per second (sample rate).\n\n## See Also\n\n- [RecordingDevice](recordingdevice \"RecordingDevice\")\n- [RecordingDevice:start](recordingdevice-start \"RecordingDevice:start\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RecordingDevice:getSampleRate](https://love2d.org/wiki/RecordingDevice:getSampleRate)"
- name: RecordingDevice:isRecording
  id: recordingdevice-isrecording
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# RecordingDevice:isRecording\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the device is currently recording.\n\n## Function\n\n### Synopsis\n\n``` lua\nrecording = RecordingDevice:isRecording( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` recording`  \nTrue if the [RecordingDevice](recordingdevice \"RecordingDevice\") is [recording](recordingdevice-start \"RecordingDevice:start\"), false otherwise.\n\n## See Also\n\n- [RecordingDevice](recordingdevice \"RecordingDevice\")\n- [RecordingDevice:start](recordingdevice-start \"RecordingDevice:start\")\n- [RecordingDevice:stop](recordingdevice-stop \"RecordingDevice:stop\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RecordingDevice:isRecording](https://love2d.org/wiki/RecordingDevice:isRecording)"
- name: RecordingDevice:start
  id: recordingdevice-start
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# RecordingDevice:start\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nBegins recording audio using this device.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = RecordingDevice:start( samplecount, samplerate, bitdepth, channels )\n```\n\n### Arguments\n\n[`number`](number \"number\")` samplecount`  \nThe maximum number of samples to store in an internal ring buffer when recording. [RecordingDevice:getData](recordingdevice-getdata \"RecordingDevice:getData\") clears the internal buffer when called.\n\n[`number`](number \"number\")` samplerate (8000)`  \nThe number of samples per second to store when recording.\n\n[`number`](number \"number\")` bitdepth (16)`  \nThe number of bits per sample.\n\n[`number`](number \"number\")` channels (1)`  \nWhether to record in mono or stereo. Most microphones don't support more than 1 channel.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the device successfully began recording using the specified parameters, false if not.\n\n## Notes\n\nA ring buffer is used internally to store recorded data until [RecordingDevice:getData](recordingdevice-getdata \"RecordingDevice:getData\") or [RecordingDevice:stop](recordingdevice-stop \"RecordingDevice:stop\") are called – the former clears the buffer. If the buffer completely fills up before getData or stop are called, the oldest data that doesn't fit into the buffer will be lost.\n\n## See Also\n\n- [RecordingDevice](recordingdevice \"RecordingDevice\")\n- [RecordingDevice:getData](recordingdevice-getdata \"RecordingDevice:getData\")\n- [RecordingDevice:stop](recordingdevice-stop \"RecordingDevice:stop\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RecordingDevice:start](https://love2d.org/wiki/RecordingDevice:start)"
- name: RecordingDevice:stop
  id: recordingdevice-stop
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# RecordingDevice:stop\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nStops recording audio from this device. Any sound data currently in the device's buffer will be returned.\n\n## Function\n\n### Synopsis\n\n``` lua\ndata = RecordingDevice:stop( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`SoundData`](sounddata \"SoundData\")` data (nil)`  \nThe sound data currently in the device's buffer, or nil if the device wasn't recording.\n\n## See Also\n\n- [RecordingDevice](recordingdevice \"RecordingDevice\")\n- [RecordingDevice:start](recordingdevice-start \"RecordingDevice:start\")\n- [RecordingDevice:getData](recordingdevice-getdata \"RecordingDevice:getData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RecordingDevice:stop](https://love2d.org/wiki/RecordingDevice:stop)"
- name: require
  id: require
  summary: Opens and executes Lua modules
  description: "# require\n\nOpens and executes Lua modules.\n\nUse periods to seperate folders. If the module is a lua file, don't use the .lua extension in the string passed to `require`.\n\n``` lua\nrequire(\"foo\")\nrequire(\"subfolder.bar\")\n```\n\n  \nLÖVE adds two loaders (before the Lua loaders) that search for modules in the [game and save directory](love.filesystem \"love.filesystem\"). These loaders are not affected by Lua's `package.path`. The paths can be altered with [love.filesystem.setRequirePath](love.filesystem.setrequirepath \"love.filesystem.setRequirePath\") for Lua modules and [love.filesystem.setCRequirePath](love.filesystem.setcrequirepath \"love.filesystem.setCRequirePath\") for C modules, the latter only work on files located at [save directory](love.filesystem.getsavedirectory \"love.filesystem.getSaveDirectory\").\n\n## Notes\n\nIt's strongly recommended to use period as directory separator! Forward slashes *accidently* work, hence its usage is discouraged!\n\n## See Also\n\n- [require on the Lua manual.](https://www.lua.org/manual/5.1/manual.html#pdf-require)\n- [Programming in Lua.](https://www.lua.org/pil/8.1.html)\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/require](https://love2d.org/wiki/require)"
- name: RevoluteJoint
  id: revolutejoint
  summary: Allow two Bodies to revolve around a shared point
  description: "# RevoluteJoint\n\nAllow two Bodies to revolve around a shared point.\n\n[](https://love2d.org/wiki/File:physicsJointRevolute.png)\n\n## Constructors\n\n|                                                                                                |                                           |     |     |\n|------------------------------------------------------------------------------------------------|-------------------------------------------|-----|-----|\n| [love.physics.newRevoluteJoint](love.physics.newrevolutejoint \"love.physics.newRevoluteJoint\") | Creates a pivot joint between two bodies. |     |     |\n\n## Functions\n\n|                                                                                                      |                                                                   |       |       |\n|------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------|-------|-------|\n| [Joint:destroy](joint-destroy \"Joint:destroy\")                                                       | Explicitly destroys the Joint.                                    |       |       |\n| [Joint:getAnchors](joint-getanchors \"Joint:getAnchors\")                                              | Get the anchor points of the joint.                               |       |       |\n| [Joint:getBodies](joint-getbodies \"Joint:getBodies\")                                                 | Gets the [bodies](body \"Body\") that the Joint is attached to.     | 0.9.2 |       |\n| [Joint:getCollideConnected](joint-getcollideconnected \"Joint:getCollideConnected\")                   | Gets whether the connected Bodies collide.                        |       |       |\n| [Joint:getReactionForce](joint-getreactionforce \"Joint:getReactionForce\")                            | Returns the reaction force on the second body.                    |       |       |\n| [Joint:getReactionTorque](joint-getreactiontorque \"Joint:getReactionTorque\")                         | Returns the reaction torque on the second body.                   |       |       |\n| [Joint:getType](joint-gettype \"Joint:getType\")                                                       | Gets a string representing the type.                              |       |       |\n| [Joint:getUserData](joint-getuserdata \"Joint:getUserData\")                                           | Returns the Lua value associated with this Joint.                 | 0.9.2 |       |\n| [Joint:isDestroyed](joint-isdestroyed \"Joint:isDestroyed\")                                           | Gets whether the Joint is destroyed.                              | 0.9.2 |       |\n| [Joint:setCollideConnected](joint-setcollideconnected \"Joint:setCollideConnected\")                   | Sets whether the connected Bodies should collide with each other. |       | 0.8.0 |\n| [Joint:setUserData](joint-setuserdata \"Joint:setUserData\")                                           | Associates a Lua value with the Joint.                            | 0.9.2 |       |\n| [RevoluteJoint:areLimitsEnabled](revolutejoint-arelimitsenabled \"RevoluteJoint:areLimitsEnabled\")    | Checks whether limits are enabled.                                | 11.0  |       |\n| [RevoluteJoint:enableLimit](revolutejoint-enablelimit \"RevoluteJoint:enableLimit\")                   | Enables or disables the joint limits.                             | 0.8.0 | 0.9.0 |\n| [RevoluteJoint:enableMotor](revolutejoint-enablemotor \"RevoluteJoint:enableMotor\")                   | Starts or stops the joint motor.                                  | 0.8.0 | 0.9.0 |\n| [RevoluteJoint:getJointAngle](revolutejoint-getjointangle \"RevoluteJoint:getJointAngle\")             | Get the current joint angle.                                      |       |       |\n| [RevoluteJoint:getJointSpeed](revolutejoint-getjointspeed \"RevoluteJoint:getJointSpeed\")             | Get the current joint angle speed.                                |       |       |\n| [RevoluteJoint:getLimits](revolutejoint-getlimits \"RevoluteJoint:getLimits\")                         | Gets the joint limits.                                            |       |       |\n| [RevoluteJoint:getLowerLimit](revolutejoint-getlowerlimit \"RevoluteJoint:getLowerLimit\")             | Gets the lower limit.                                             |       |       |\n| [RevoluteJoint:getMaxMotorTorque](revolutejoint-getmaxmotortorque \"RevoluteJoint:getMaxMotorTorque\") | Gets the maximum motor force.                                     |       |       |\n| [RevoluteJoint:getMotorSpeed](revolutejoint-getmotorspeed \"RevoluteJoint:getMotorSpeed\")             | Gets the motor speed.                                             |       |       |\n| [RevoluteJoint:getMotorTorque](revolutejoint-getmotortorque \"RevoluteJoint:getMotorTorque\")          | Get the current motor force.                                      |       |       |\n| [RevoluteJoint:getUpperLimit](revolutejoint-getupperlimit \"RevoluteJoint:getUpperLimit\")             | Gets the upper limit.                                             |       |       |\n| [RevoluteJoint:hasLimitsEnabled](revolutejoint-haslimitsenabled \"RevoluteJoint:hasLimitsEnabled\")    | Checks whether limits are enabled.                                | 0.9.0 |       |\n| [RevoluteJoint:isLimitsEnabled](revolutejoint-islimitsenabled \"RevoluteJoint:isLimitsEnabled\")       | Checks whether limits are enabled.                                |       | 0.9.0 |\n| [RevoluteJoint:isMotorEnabled](revolutejoint-ismotorenabled \"RevoluteJoint:isMotorEnabled\")          | Checks whether the motor is enabled.                              |       |       |\n| [RevoluteJoint:setLimits](revolutejoint-setlimits \"RevoluteJoint:setLimits\")                         | Sets the limits.                                                  |       |       |\n| [RevoluteJoint:setLimitsEnabled](revolutejoint-setlimitsenabled \"RevoluteJoint:setLimitsEnabled\")    | Enables/disables the joint limit.                                 | 0.9.0 |       |\n| [RevoluteJoint:setLowerLimit](revolutejoint-setlowerlimit \"RevoluteJoint:setLowerLimit\")             | Sets the lower limit.                                             |       |       |\n| [RevoluteJoint:setMaxMotorTorque](revolutejoint-setmaxmotortorque \"RevoluteJoint:setMaxMotorTorque\") | Set the maximum motor force.                                      |       |       |\n| [RevoluteJoint:setMotorEnabled](revolutejoint-setmotorenabled \"RevoluteJoint:setMotorEnabled\")       | Enables/disables the joint motor.                                 | 0.9.0 |       |\n| [RevoluteJoint:setMotorSpeed](revolutejoint-setmotorspeed \"RevoluteJoint:setMotorSpeed\")             | Sets the motor speed.                                             |       |       |\n\n## Supertypes\n\n- [Joint](joint \"Joint\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint](https://love2d.org/wiki/RevoluteJoint)"
- name: RevoluteJoint:areLimitsEnabled
  id: revolutejoint-arelimitsenabled
  summary: Available since LÖVE 11.0 It has been renamed from RevoluteJoint:hasLimitsEnabled
  description: "# RevoluteJoint:areLimitsEnabled\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [RevoluteJoint:hasLimitsEnabled](revolutejoint-haslimitsenabled \"RevoluteJoint:hasLimitsEnabled\").\n\nChecks whether limits are enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = RevoluteJoint:areLimitsEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nTrue if enabled, false otherwise.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:areLimitsEnabled](https://love2d.org/wiki/RevoluteJoint:areLimitsEnabled)"
- name: RevoluteJoint:enableLimit
  id: revolutejoint-enablelimit
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# RevoluteJoint:enableLimit\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [RevoluteJoint:setLimitsEnabled](revolutejoint-setlimitsenabled \"RevoluteJoint:setLimitsEnabled\").\n\nEnables or disables the joint limits.\n\n## Function\n\n### Synopsis\n\n``` lua\nRevoluteJoint:enableLimit( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue to enable, false to disable.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n- [RevoluteJoint:isLimitsEnabled](revolutejoint-islimitsenabled \"RevoluteJoint:isLimitsEnabled\")\n- [RevoluteJoint:setLimits](revolutejoint-setlimits \"RevoluteJoint:setLimits\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:enableLimit](https://love2d.org/wiki/RevoluteJoint:enableLimit)"
- name: RevoluteJoint:enableLimits
  id: revolutejoint-enablelimits
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# RevoluteJoint:enableLimits\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [RevoluteJoint:setLimitsEnabled](revolutejoint-setlimitsenabled \"RevoluteJoint:setLimitsEnabled\").\n\nEnables or disables the joint limits.\n\n## Function\n\n### Synopsis\n\n``` lua\nRevoluteJoint:enableLimit( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue to enable, false to disable.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n- [RevoluteJoint:isLimitsEnabled](revolutejoint-islimitsenabled \"RevoluteJoint:isLimitsEnabled\")\n- [RevoluteJoint:setLimits](revolutejoint-setlimits \"RevoluteJoint:setLimits\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:enableLimits](https://love2d.org/wiki/RevoluteJoint:enableLimits)"
- name: RevoluteJoint:enableMotor
  id: revolutejoint-enablemotor
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# RevoluteJoint:enableMotor\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [RevoluteJoint:setMotorEnabled](revolutejoint-setmotorenabled \"RevoluteJoint:setMotorEnabled\").\n\nStarts or stops the joint motor.\n\n## Function\n\n### Synopsis\n\n``` lua\nRevoluteJoint:enableMotor( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue to enable, false to disable.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:enableMotor](https://love2d.org/wiki/RevoluteJoint:enableMotor)"
- name: RevoluteJoint:getJointAngle
  id: revolutejoint-getjointangle
  summary: Get the current joint angle
  description: "# RevoluteJoint:getJointAngle\n\nGet the current joint angle.\n\n## Function\n\n### Synopsis\n\n``` lua\nangle = RevoluteJoint:getJointAngle( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` angle`  \nThe joint angle in radians.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:getJointAngle](https://love2d.org/wiki/RevoluteJoint:getJointAngle)"
- name: RevoluteJoint:getJointSpeed
  id: revolutejoint-getjointspeed
  summary: Get the current joint angle speed
  description: "# RevoluteJoint:getJointSpeed\n\nGet the current joint angle speed.\n\n## Function\n\n### Synopsis\n\n``` lua\ns = RevoluteJoint:getJointSpeed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` s`  \nJoint angle speed in radians/second.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:getJointSpeed](https://love2d.org/wiki/RevoluteJoint:getJointSpeed)"
- name: RevoluteJoint:getLimits
  id: revolutejoint-getlimits
  summary: Gets the joint limits
  description: "# RevoluteJoint:getLimits\n\nGets the joint limits.\n\n## Function\n\n### Synopsis\n\n``` lua\nlower, upper = RevoluteJoint:getLimits( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` lower`  \nThe lower limit, in radians.\n\n[`number`](number \"number\")` upper`  \nThe upper limit, in radians.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:getLimits](https://love2d.org/wiki/RevoluteJoint:getLimits)"
- name: RevoluteJoint:getLowerLimit
  id: revolutejoint-getlowerlimit
  summary: Gets the lower limit
  description: "# RevoluteJoint:getLowerLimit\n\nGets the lower limit.\n\n## Function\n\n### Synopsis\n\n``` lua\nlower = RevoluteJoint:getLowerLimit( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` lower`  \nThe lower limit, in radians.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:getLowerLimit](https://love2d.org/wiki/RevoluteJoint:getLowerLimit)"
- name: RevoluteJoint:getMaxMotorTorque
  id: revolutejoint-getmaxmotortorque
  summary: Gets the maximum motor force
  description: "# RevoluteJoint:getMaxMotorTorque\n\nGets the maximum motor force.\n\n## Function\n\n### Synopsis\n\n``` lua\nf = RevoluteJoint:getMaxMotorTorque( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` f`  \nThe maximum motor force, in Nm.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:getMaxMotorTorque](https://love2d.org/wiki/RevoluteJoint:getMaxMotorTorque)"
- name: RevoluteJoint:getMotorSpeed
  id: revolutejoint-getmotorspeed
  summary: Gets the motor speed
  description: "# RevoluteJoint:getMotorSpeed\n\nGets the motor speed.\n\n## Function\n\n### Synopsis\n\n``` lua\ns = RevoluteJoint:getMotorSpeed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` s`  \nThe motor speed, radians per second.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:getMotorSpeed](https://love2d.org/wiki/RevoluteJoint:getMotorSpeed)"
- name: RevoluteJoint:getMotorTorque
  id: revolutejoint-getmotortorque
  summary: Get the current motor force
  description: "# RevoluteJoint:getMotorTorque\n\nGet the current motor force.\n\n## Function\n\n### Synopsis\n\n``` lua\nf = RevoluteJoint:getMotorTorque( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` f`  \nThe current motor force, in Nm.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:getMotorTorque](https://love2d.org/wiki/RevoluteJoint:getMotorTorque)"
- name: RevoluteJoint:getUpperLimit
  id: revolutejoint-getupperlimit
  summary: Gets the upper limit
  description: "# RevoluteJoint:getUpperLimit\n\nGets the upper limit.\n\n## Function\n\n### Synopsis\n\n``` lua\nupper = RevoluteJoint:getUpperLimit( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` upper`  \nThe upper limit, in radians.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:getUpperLimit](https://love2d.org/wiki/RevoluteJoint:getUpperLimit)"
- name: RevoluteJoint:hasLimitsEnabled
  id: revolutejoint-haslimitsenabled
  summary: Available since LÖVE 0.9.0 It has been renamed from RevoluteJoint:isLimitsEnabled
  description: "# RevoluteJoint:hasLimitsEnabled\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [RevoluteJoint:isLimitsEnabled](revolutejoint-islimitsenabled \"RevoluteJoint:isLimitsEnabled\").\n\n|                                                                                                                                      |\n|--------------------------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                                 |\n| This function has been renamed to [RevoluteJoint:areLimitsEnabled](revolutejoint-arelimitsenabled \"RevoluteJoint:areLimitsEnabled\"). |\n\nChecks whether limits are enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = RevoluteJoint:hasLimitsEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nTrue if enabled, false otherwise.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:hasLimitsEnabled](https://love2d.org/wiki/RevoluteJoint:hasLimitsEnabled)"
- name: RevoluteJoint:isLimitsEnabled
  id: revolutejoint-islimitsenabled
  summary: Removed in LÖVE 0.9.0 It has been renamed to RevoluteJoint:hasLimitsEnabled
  description: "# RevoluteJoint:isLimitsEnabled\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [RevoluteJoint:hasLimitsEnabled](revolutejoint-haslimitsenabled \"RevoluteJoint:hasLimitsEnabled\").\n\nChecks whether limits are enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = RevoluteJoint:isLimitsEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nTrue if enabled, false otherwise.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:isLimitsEnabled](https://love2d.org/wiki/RevoluteJoint:isLimitsEnabled)"
- name: RevoluteJoint:isMotorEnabled
  id: revolutejoint-ismotorenabled
  summary: Checks whether the motor is enabled
  description: "# RevoluteJoint:isMotorEnabled\n\nChecks whether the motor is enabled.\n\n## Function\n\n### Synopsis\n\n``` lua\nenabled = RevoluteJoint:isMotorEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` enabled`  \nTrue if enabled, false if disabled.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:isMotorEnabled](https://love2d.org/wiki/RevoluteJoint:isMotorEnabled)"
- name: RevoluteJoint:setLimits
  id: revolutejoint-setlimits
  summary: Sets the limits
  description: "# RevoluteJoint:setLimits\n\nSets the limits.\n\n## Function\n\n### Synopsis\n\n``` lua\nRevoluteJoint:setLimits( lower, upper )\n```\n\n### Arguments\n\n[`number`](number \"number\")` lower`  \nThe lower limit, in radians.\n\n[`number`](number \"number\")` upper`  \nThe upper limit, in radians.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:setLimits](https://love2d.org/wiki/RevoluteJoint:setLimits)"
- name: RevoluteJoint:setLimitsEnabled
  id: revolutejoint-setlimitsenabled
  summary: Available since LÖVE 0.9.0 It has been renamed from RevoluteJoint:enableLimits
  description: "# RevoluteJoint:setLimitsEnabled\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [RevoluteJoint:enableLimits](revolutejoint-enablelimits \"RevoluteJoint:enableLimits\").\n\nEnables/disables the joint limit.\n\n## Function\n\n### Synopsis\n\n``` lua\nRevoluteJoint:setLimitsEnabled( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue to enable, false to disable.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:setLimitsEnabled](https://love2d.org/wiki/RevoluteJoint:setLimitsEnabled)"
- name: RevoluteJoint:setLowerLimit
  id: revolutejoint-setlowerlimit
  summary: Sets the lower limit
  description: "# RevoluteJoint:setLowerLimit\n\nSets the lower limit.\n\n## Function\n\n### Synopsis\n\n``` lua\nRevoluteJoint:setLowerLimit( lower )\n```\n\n### Arguments\n\n[`number`](number \"number\")` lower`  \nThe lower limit, in radians.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:setLowerLimit](https://love2d.org/wiki/RevoluteJoint:setLowerLimit)"
- name: RevoluteJoint:setMaxMotorTorque
  id: revolutejoint-setmaxmotortorque
  summary: Set the maximum motor force
  description: "# RevoluteJoint:setMaxMotorTorque\n\nSet the maximum motor force.\n\n## Function\n\n### Synopsis\n\n``` lua\nRevoluteJoint:setMaxMotorTorque( f )\n```\n\n### Arguments\n\n[`number`](number \"number\")` f`  \nThe maximum motor force, in Nm.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:setMaxMotorTorque](https://love2d.org/wiki/RevoluteJoint:setMaxMotorTorque)"
- name: RevoluteJoint:setMotorEnabled
  id: revolutejoint-setmotorenabled
  summary: Available since LÖVE 0.9.0 It has been renamed from RevoluteJoint:enableMotor
  description: "# RevoluteJoint:setMotorEnabled\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [RevoluteJoint:enableMotor](revolutejoint-enablemotor \"RevoluteJoint:enableMotor\").\n\nEnables/disables the joint motor.\n\n## Function\n\n### Synopsis\n\n``` lua\nRevoluteJoint:setMotorEnabled( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue to enable, false to disable.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:setMotorEnabled](https://love2d.org/wiki/RevoluteJoint:setMotorEnabled)"
- name: RevoluteJoint:setMotorSpeed
  id: revolutejoint-setmotorspeed
  summary: Sets the motor speed
  description: "# RevoluteJoint:setMotorSpeed\n\nSets the motor speed.\n\n## Function\n\n### Synopsis\n\n``` lua\nRevoluteJoint:setMotorSpeed( s )\n```\n\n### Arguments\n\n[`number`](number \"number\")` s`  \nThe motor speed, radians per second.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [RevoluteJoint](revolutejoint \"RevoluteJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RevoluteJoint:setMotorSpeed](https://love2d.org/wiki/RevoluteJoint:setMotorSpeed)"
- name: RopeJoint
  id: ropejoint
  summary: Available since LÖVE 0.8.0 This type is not supported in earlier versions
  description: "# RopeJoint\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis type is not supported in earlier versions.\n\nThe RopeJoint enforces a maximum distance between two points on two bodies. It has no other effect.\n\n## Constructors\n\n|                                                                                    |                                                                               |       |     |\n|------------------------------------------------------------------------------------|-------------------------------------------------------------------------------|-------|-----|\n| [love.physics.newRopeJoint](love.physics.newropejoint \"love.physics.newRopeJoint\") | Creates a joint between two bodies that enforces a max distance between them. | 0.8.0 |     |\n\n## Functions\n\n|                                                                                    |                                                                   |       |       |\n|------------------------------------------------------------------------------------|-------------------------------------------------------------------|-------|-------|\n| [Joint:destroy](joint-destroy \"Joint:destroy\")                                     | Explicitly destroys the Joint.                                    |       |       |\n| [Joint:getAnchors](joint-getanchors \"Joint:getAnchors\")                            | Get the anchor points of the joint.                               |       |       |\n| [Joint:getBodies](joint-getbodies \"Joint:getBodies\")                               | Gets the [bodies](body \"Body\") that the Joint is attached to.     | 0.9.2 |       |\n| [Joint:getCollideConnected](joint-getcollideconnected \"Joint:getCollideConnected\") | Gets whether the connected Bodies collide.                        |       |       |\n| [Joint:getReactionForce](joint-getreactionforce \"Joint:getReactionForce\")          | Returns the reaction force on the second body.                    |       |       |\n| [Joint:getReactionTorque](joint-getreactiontorque \"Joint:getReactionTorque\")       | Returns the reaction torque on the second body.                   |       |       |\n| [Joint:getType](joint-gettype \"Joint:getType\")                                     | Gets a string representing the type.                              |       |       |\n| [Joint:getUserData](joint-getuserdata \"Joint:getUserData\")                         | Returns the Lua value associated with this Joint.                 | 0.9.2 |       |\n| [Joint:isDestroyed](joint-isdestroyed \"Joint:isDestroyed\")                         | Gets whether the Joint is destroyed.                              | 0.9.2 |       |\n| [Joint:setCollideConnected](joint-setcollideconnected \"Joint:setCollideConnected\") | Sets whether the connected Bodies should collide with each other. |       | 0.8.0 |\n| [Joint:setUserData](joint-setuserdata \"Joint:setUserData\")                         | Associates a Lua value with the Joint.                            | 0.9.2 |       |\n| [RopeJoint:getMaxLength](ropejoint-getmaxlength \"RopeJoint:getMaxLength\")          | Gets the maximum length of a RopeJoint.                           | 0.8.0 |       |\n| [RopeJoint:setMaxLength](ropejoint-setmaxlength \"RopeJoint:setMaxLength\")          | Sets the maximum length of a RopeJoint.                           | 11.0  |       |\n\n## Supertypes\n\n- [Joint](joint \"Joint\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RopeJoint](https://love2d.org/wiki/RopeJoint)"
- name: RopeJoint:getMaxLength
  id: ropejoint-getmaxlength
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# RopeJoint:getMaxLength\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nGets the maximum length of a RopeJoint.\n\n## Function\n\n### Synopsis\n\n``` lua\nmaxLength = RopeJoint:getMaxLength( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` maxLength`  \nThe maximum length of the RopeJoint.\n\n## See Also\n\n- [RopeJoint](ropejoint \"RopeJoint\")\n- [RopeJoint:setMaxLength](ropejoint-setmaxlength \"RopeJoint:setMaxLength\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RopeJoint:getMaxLength](https://love2d.org/wiki/RopeJoint:getMaxLength)"
- name: RopeJoint:setMaxLength
  id: ropejoint-setmaxlength
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# RopeJoint:setMaxLength\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nSets the maximum length of a RopeJoint.\n\n## Function\n\n### Synopsis\n\n``` lua\nRopeJoint:setMaxLength( maxlength )\n```\n\n### Arguments\n\n[`number`](number \"number\")` maxLength`  \nThe new maximum length of the RopeJoint.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [RopeJoint](ropejoint \"RopeJoint\")\n- [RopeJoint:getMaxLength](ropejoint-getmaxlength \"RopeJoint:getMaxLength\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/RopeJoint:setMaxLength](https://love2d.org/wiki/RopeJoint:setMaxLength)"
- name: Scancode
  id: scancode
  summary: Available since LÖVE 0.9.2 This enum is not supported in earlier versions
  description: "# Scancode\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis enum is not supported in earlier versions.\n\nKeyboard scancodes.\n\nScancodes are keyboard layout-independent, so the scancode \"w\" will be generated if the key in the same place as the \"w\" key on an [American QWERTY keyboard](https://en.wikipedia.org/wiki/Keyboard_layout#/media/File:ISO_keyboard_(105)_QWERTY_UK.svg) is pressed, no matter what the key is labelled or what the user's operating system settings are.\n\nUsing scancodes, rather than keycodes, is useful because keyboards with layouts differing from the US/UK layout(s) might have keys that generate 'unknown' keycodes, but the scancodes will still be detected. This however would necessitate having a list for each keyboard layout one would choose to support.\n\nOne could use textinput or textedited instead, but those only give back the end result of keys used, i.e. you can't get modifiers on their own from it, only the final symbols that were generated.\n\n## Constants\n\na  \nThe 'A' key on an American layout.\n\nb  \nThe 'B' key on an American layout.\n\nc  \nThe 'C' key on an American layout.\n\nd  \nThe 'D' key on an American layout.\n\ne  \nThe 'E' key on an American layout.\n\nf  \nThe 'F' key on an American layout.\n\ng  \nThe 'G' key on an American layout.\n\nh  \nThe 'H' key on an American layout.\n\ni  \nThe 'I' key on an American layout.\n\nj  \nThe 'J' key on an American layout.\n\nk  \nThe 'K' key on an American layout.\n\nl  \nThe 'L' key on an American layout.\n\nm  \nThe 'M' key on an American layout.\n\nn  \nThe 'N' key on an American layout.\n\no  \nThe 'O' key on an American layout.\n\np  \nThe 'P' key on an American layout.\n\nq  \nThe 'Q' key on an American layout.\n\nr  \nThe 'R' key on an American layout.\n\ns  \nThe 'S' key on an American layout.\n\nt  \nThe 'T' key on an American layout.\n\nu  \nThe 'U' key on an American layout.\n\nv  \nThe 'V' key on an American layout.\n\nw  \nThe 'W' key on an American layout.\n\nx  \nThe 'X' key on an American layout.\n\ny  \nThe 'Y' key on an American layout.\n\nz  \nThe 'Z' key on an American layout.\n\n1  \nThe '1' key on an American layout.\n\n2  \nThe '2' key on an American layout.\n\n3  \nThe '3' key on an American layout.\n\n4  \nThe '4' key on an American layout.\n\n5  \nThe '5' key on an American layout.\n\n6  \nThe '6' key on an American layout.\n\n7  \nThe '7' key on an American layout.\n\n8  \nThe '8' key on an American layout.\n\n9  \nThe '9' key on an American layout.\n\n0  \nThe '0' key on an American layout.\n\n&nbsp;\n\nreturn  \nThe 'return' / 'enter' key on an American layout.\n\nescape  \nThe 'escape' key on an American layout.\n\nbackspace  \nThe 'backspace' key on an American layout.\n\ntab  \nThe 'tab' key on an American layout.\n\nspace  \nThe spacebar on an American layout.\n\n&nbsp;\n\n\\-  \nThe minus key on an American layout.\n\n=  \nThe equals key on an American layout.\n\n\\[  \nThe left-bracket key on an American layout.\n\n\\]  \nThe right-bracket key on an American layout.\n\n\\\\  \nThe backslash key on an American layout.\n\nnonus#  \nThe non-U.S. hash scancode.\n\n;  \nThe semicolon key on an American layout.\n\n'  \nThe apostrophe key on an American layout.\n\n\\`  \nThe back-tick / grave key on an American layout.\n\n,  \nThe comma key on an American layout.\n\n.  \nThe period key on an American layout.\n\n/  \nThe forward-slash key on an American layout.\n\n&nbsp;\n\ncapslock  \nThe capslock key on an American layout.\n\n&nbsp;\n\nf1  \nThe F1 key on an American layout.\n\nf2  \nThe F2 key on an American layout.\n\nf3  \nThe F3 key on an American layout.\n\nf4  \nThe F4 key on an American layout.\n\nf5  \nThe F5 key on an American layout.\n\nf6  \nThe F6 key on an American layout.\n\nf7  \nThe F7 key on an American layout.\n\nf8  \nThe F8 key on an American layout.\n\nf9  \nThe F9 key on an American layout.\n\nf10  \nThe F10 key on an American layout.\n\nf11  \nThe F11 key on an American layout.\n\nf12  \nThe F12 key on an American layout.\n\nf13  \nThe F13 key on an American layout.\n\nf14  \nThe F14 key on an American layout.\n\nf15  \nThe F15 key on an American layout.\n\nf16  \nThe F16 key on an American layout.\n\nf17  \nThe F17 key on an American layout.\n\nf18  \nThe F18 key on an American layout.\n\nf19  \nThe F19 key on an American layout.\n\nf20  \nThe F20 key on an American layout.\n\nf21  \nThe F21 key on an American layout.\n\nf22  \nThe F22 key on an American layout.\n\nf23  \nThe F23 key on an American layout.\n\nf24  \nThe F24 key on an American layout.\n\n&nbsp;\n\nlctrl  \nThe left control key on an American layout.\n\nlshift  \nThe left shift key on an American layout.\n\nlalt  \nThe left alt / option key on an American layout.\n\nlgui  \nThe left GUI (command / windows / super) key on an American layout.\n\nrctrl  \nThe right control key on an American layout.\n\nrshift  \nThe right shift key on an American layout.\n\nralt  \nThe right alt / option key on an American layout.\n\nrgui  \nThe right GUI (command / windows / super) key on an American layout.\n\n&nbsp;\n\nprintscreen  \nThe printscreen key on an American layout.\n\nscrolllock  \nThe scroll-lock key on an American layout.\n\npause  \nThe pause key on an American layout.\n\ninsert  \nThe insert key on an American layout.\n\nhome  \nThe home key on an American layout.\n\nnumlock  \nThe numlock / clear key on an American layout.\n\npageup  \nThe page-up key on an American layout.\n\ndelete  \nThe forward-delete key on an American layout.\n\nend  \nThe end key on an American layout.\n\npagedown  \nThe page-down key on an American layout.\n\nright  \nThe right-arrow key on an American layout.\n\nleft  \nThe left-arrow key on an American layout.\n\ndown  \nThe down-arrow key on an American layout.\n\nup  \nThe up-arrow key on an American layout.\n\n&nbsp;\n\nnonusbackslash  \nThe non-U.S. backslash scancode.\n\napplication  \nThe application key on an American layout. Windows contextual menu, compose key.\n\nexecute  \nThe 'execute' key on an American layout.\n\nhelp  \nThe 'help' key on an American layout.\n\nmenu  \nThe 'menu' key on an American layout.\n\nselect  \nThe 'select' key on an American layout.\n\nstop  \nThe 'stop' key on an American layout.\n\nagain  \nThe 'again' key on an American layout.\n\nundo  \nThe 'undo' key on an American layout.\n\ncut  \nThe 'cut' key on an American layout.\n\ncopy  \nThe 'copy' key on an American layout.\n\npaste  \nThe 'paste' key on an American layout.\n\nfind  \nThe 'find' key on an American layout.\n\n### Keypad scancodes\n\nkp/  \nThe keypad forward-slash key on an American layout.\n\nkp\\*  \nThe keypad '\\*' key on an American layout.\n\nkp-  \nThe keypad minus key on an American layout.\n\nkp+  \nThe keypad plus key on an American layout.\n\nkp=  \nThe keypad equals key on an American layout.\n\nkpenter  \nThe keypad enter key on an American layout.\n\nkp1  \nThe keypad '1' key on an American layout.\n\nkp2  \nThe keypad '2' key on an American layout.\n\nkp3  \nThe keypad '3' key on an American layout.\n\nkp4  \nThe keypad '4' key on an American layout.\n\nkp5  \nThe keypad '5' key on an American layout.\n\nkp6  \nThe keypad '6' key on an American layout.\n\nkp7  \nThe keypad '7' key on an American layout.\n\nkp8  \nThe keypad '8' key on an American layout.\n\nkp9  \nThe keypad '9' key on an American layout.\n\nkp0  \nThe keypad '0' key on an American layout.\n\nkp.  \nThe keypad period key on an American layout.\n\n### International / language scancodes\n\ninternational1  \nThe 1st international key on an American layout. Used on Asian keyboards.\n\ninternational2  \nThe 2nd international key on an American layout.\n\ninternational3  \nThe 3rd international key on an American layout. Yen.\n\ninternational4  \nThe 4th international key on an American layout.\n\ninternational5  \nThe 5th international key on an American layout.\n\ninternational6  \nThe 6th international key on an American layout.\n\ninternational7  \nThe 7th international key on an American layout.\n\ninternational8  \nThe 8th international key on an American layout.\n\ninternational9  \nThe 9th international key on an American layout.\n\nlang1  \nHangul/English toggle scancode.\n\nlang2  \nHanja conversion scancode.\n\nlang3  \nKatakana scancode.\n\nlang4  \nHiragana scancode.\n\nlang5  \nZenkaku/Hankaku scancode.\n\n### Media scancodes\n\nmute  \nThe mute key on an American layout.\n\nvolumeup  \nThe volume up key on an American layout.\n\nvolumedown  \nThe volume down key on an American layout.\n\naudionext  \nThe audio next track key on an American layout.\n\naudioprev  \nThe audio previous track key on an American layout.\n\naudiostop  \nThe audio stop key on an American layout.\n\naudioplay  \nThe audio play key on an American layout.\n\naudiomute  \nThe audio mute key on an American layout.\n\nmediaselect  \nThe media select key on an American layout.\n\nwww  \nThe 'WWW' key on an American layout.\n\nmail  \nThe Mail key on an American layout.\n\ncalculator  \nThe calculator key on an American layout.\n\ncomputer  \nThe 'computer' key on an American layout.\n\nacsearch  \nThe AC Search key on an American layout.\n\nachome  \nThe AC Home key on an American layout.\n\nacback  \nThe AC Back key on an American layout.\n\nacforward  \nThe AC Forward key on an American layout.\n\nacstop  \nTh AC Stop key on an American layout.\n\nacrefresh  \nThe AC Refresh key on an American layout.\n\nacbookmarks  \nThe AC Bookmarks key on an American layout.\n\n### Hardware setting scancodes\n\npower  \nThe system power scancode.\n\nbrightnessdown  \nThe brightness-down scancode.\n\nbrightnessup  \nThe brightness-up scancode.\n\ndisplayswitch  \nThe display switch scancode.\n\nkbdillumtoggle  \nThe keyboard illumination toggle scancode.\n\nkbdillumdown  \nThe keyboard illumination down scancode.\n\nkbdillumup  \nThe keyboard illumination up scancode.\n\neject  \nThe eject scancode.\n\nsleep  \nThe system sleep scancode.\n\n### Misc.\n\nalterase  \nThe alt-erase key on an American layout.\n\nsysreq  \nThe sysreq key on an American layout.\n\ncancel  \nThe 'cancel' key on an American layout.\n\nclear  \nThe 'clear' key on an American layout.\n\nprior  \nThe 'prior' key on an American layout.\n\nreturn2  \nThe 'return2' key on an American layout.\n\nseparator  \nThe 'separator' key on an American layout.\n\nout  \nThe 'out' key on an American layout.\n\noper  \nThe 'oper' key on an American layout.\n\nclearagain  \nThe 'clearagain' key on an American layout.\n\ncrsel  \nThe 'crsel' key on an American layout.\n\nexsel  \nThe 'exsel' key on an American layout.\n\n&nbsp;\n\nkp00  \nThe keypad 00 key on an American layout.\n\nkp000  \nThe keypad 000 key on an American layout.\n\nthsousandsseparator  \nThe thousands-separator key on an American layout.\n\ndecimalseparator  \nThe decimal separator key on an American layout.\n\ncurrencyunit  \nThe currency unit key on an American layout.\n\ncurrencysubunit  \nThe currency sub-unit key on an American layout.\n\n&nbsp;\n\napp1  \nThe 'app1' scancode.\n\napp2  \nThe 'app2' scancode.\n\n&nbsp;\n\nunknown  \nAn unknown key.\n\n## See Also\n\n- [Scancodes in plain text](https://pastebin.com/kpxCK6qU)\n- [love.keyboard](love.keyboard \"love.keyboard\")\n- [love.keypressed](love.keypressed \"love.keypressed\")\n- [love.keyreleased](love.keyreleased \"love.keyreleased\")\n- [love.keyboard.isScancodeDown](love.keyboard.isscancodedown \"love.keyboard.isScancodeDown\")\n- [love.keyboard.getScancodeFromKey](love.keyboard.getscancodefromkey \"love.keyboard.getScancodeFromKey\")\n- [love.keyboard.getKeyFromScancode](love.keyboard.getkeyfromscancode \"love.keyboard.getKeyFromScancode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Scancode](https://love2d.org/wiki/Scancode)"
- name: sequence
  id: sequence
  summary: © 2006–2020 LÖVE Development Team Licensed under the GNU Free Documentation License, Version 1.3
  description: "# sequence\n\nFrom the Lua 5.2 [reference manual §2.1](https://www.lua.org/manual/5.2/manual.html#2.1):\n\nWe use the term sequence to denote a [table](table \"table\") where the set of all positive numeric keys is equal to {1..n} for some integer n, which is called the length of the sequence (see [§3.4.6](https://www.lua.org/manual/5.2/manual.html#3.4.6)).\n\n``` lua\nsequence = { 'foo', 'bar', 'baz', 'qux', --[[ ... ]] }\n \n-- or\n \nsequence = {\n    [1] = 'foo',\n    [2] = 'bar',\n    [3] = 'baz',\n    [4] = 'qux',\n    -- [n] = ...,\n}\n```\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/sequence](https://love2d.org/wiki/sequence)"
- name: Shader
  id: shader
  summary: Available since LÖVE 0.9.0 This type is not supported in earlier versions
  description: "# Shader\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis type is not supported in earlier versions.\n\nA Shader is used for advanced hardware-accelerated pixel or vertex manipulation. These effects are written in a language based on GLSL (OpenGL Shading Language) with a few things simplified for easier coding.\n\nPotential uses for shaders include HDR/bloom, motion blur, grayscale/invert/sepia/any kind of color effect, reflection/refraction, distortions, bump mapping, and much more! Here is a collection of basic shaders and good starting point to learn: [https://github.com/vrld/moonshine](https://github.com/vrld/moonshine)\n\n## Constructors\n\n|                                                                              |                           |       |     |\n|------------------------------------------------------------------------------|---------------------------|-------|-----|\n| [love.graphics.newShader](love.graphics.newshader \"love.graphics.newShader\") | Creates a new **Shader**. | 0.9.0 |     |\n\n## Functions\n\n|                                                                                 |                                                                        |        |      |\n|---------------------------------------------------------------------------------|------------------------------------------------------------------------|--------|------|\n| [Object:release](object-release \"Object:release\")                               | Immediately destroys the object's Lua reference.                       | 11.0   |      |\n| [Object:type](object-type \"Object:type\")                                        | Gets the type of the object as a string.                               |        |      |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                  | Checks whether an object is of a certain type.                         |        |      |\n| [Shader:getExternVariable](shader-getexternvariable \"Shader:getExternVariable\") | Gets information about an 'extern' ('uniform') variable in the Shader. | 0.9.2  | 11.0 |\n| [Shader:getWarnings](shader-getwarnings \"Shader:getWarnings\")                   | Gets warning and error messages (if any).                              | 0.9.0  |      |\n| [Shader:hasUniform](shader-hasuniform \"Shader:hasUniform\")                      | Gets whether a uniform / extern variable exists in the Shader.         | 11.0   |      |\n| [Shader:send](shader-send \"Shader:send\")                                        | Sends one or more values to the shader.                                | 0.9.0  |      |\n| [Shader:sendColor](shader-sendcolor \"Shader:sendColor\")                         | Sends one or more colors to the shader.                                | 0.10.0 |      |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.setShader](love.graphics.setshader \"love.graphics.setShader\")\n- [Shader Variables](shader_variables \"Shader Variables\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shader](https://love2d.org/wiki/Shader)"
- name: Shader Variables
  id: shader_variables
  summary: Available since LÖVE 0.9.0 These built-in shader variables are not supported in earlier versions
  description: "# Shader Variables\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThese built-in shader variables are not supported in earlier versions.\n\nThere are several built-in variables LÖVE provides in vertex and pixel shaders. All built-in variables are read-only unless otherwise specified.\n\n## Global built-in variables\n\n[`mat4`](https://love2d.org/w/index.php?title=mat4&action=edit&redlink=1 \"mat4 (page does not exist)\")` TransformMatrix`  \nThe transformation matrix affected by [love.graphics.translate](love.graphics.translate \"love.graphics.translate\") and friends. Note that automatically batched vertices are transformed on the CPU, and their TransformMatrix will be an identity matrix.\n\n[`mat4`](https://love2d.org/w/index.php?title=mat4&action=edit&redlink=1 \"mat4 (page does not exist)\")` ProjectionMatrix`  \nThe orthographic projection matrix.\n\n&nbsp;\n\n[`mat4`](https://love2d.org/w/index.php?title=mat4&action=edit&redlink=1 \"mat4 (page does not exist)\")` TransformProjectionMatrix`  \nThe combined transform and projection matrices. Used as the `transform_projection` argument to the [vertex shader position](love.graphics.newshader#Vertex_Shader_Function \"love.graphics.newShader\") function.\n\n&nbsp;\n\n[`vec4`](https://love2d.org/w/index.php?title=vec4&action=edit&redlink=1 \"vec4 (page does not exist)\")` VaryingTexCoord`  \nThe interpolated per-vertex texture coordinate. Automatically set to the value of `VertexTexCoord` in the vertex shader before the [position](love.graphics.newshader#Vertex_Shader_Function \"love.graphics.newShader\") function is called. Used as the `texture_coords` argument to the [pixel shader effect](love.graphics.newshader#Pixel_Shader_Function \"love.graphics.newShader\") function. Writable in the vertex shader. Use this variable to change the texture coordinate in the vertex shader.\n\n&nbsp;\n\n[`vec4`](https://love2d.org/w/index.php?title=vec4&action=edit&redlink=1 \"vec4 (page does not exist)\")` VaryingColor`  \nThe interpolated per-vertex color. Automatically set to the value of `ConstantColor * gammaCorrectColor(VertexColor)` in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") and newer, or `VertexColor` in [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older, in the vertex shader before the [position](love.graphics.newshader#Vertex_Shader_Function \"love.graphics.newShader\") function is called. Used as the `color` argument to the [pixel shader effect](love.graphics.newshader#Pixel_Shader_Function \"love.graphics.newShader\") function. Writable in the vertex shader. Use this variable to change the per-vertex or constant color in the vertex shader.\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis shader variable is not supported in earlier versions.\n\n[`vec4`](https://love2d.org/w/index.php?title=vec4&action=edit&redlink=1 \"vec4 (page does not exist)\")` love_ScreenSize`  \nThe width and height of the screen (or canvas) currently being rendered to, stored in the x and y components of the variable. The z and w components are used internally by LÖVE. You can convert it to a vec2 with `love_ScreenSize.xy` or `vec2(love_ScreenSize)`.\n\n## Vertex Shader built-in variables\n\n[`vec4`](https://love2d.org/w/index.php?title=vec4&action=edit&redlink=1 \"vec4 (page does not exist)\")` VertexPosition`  \nThe pre-transformed position of the vertex. Used as the `vertex_position` argument to the [vertex shader position](love.graphics.newshader#Vertex_Shader_Function \"love.graphics.newShader\") function. The third and fourth components of the vector are normally (0, 1).\n\n&nbsp;\n\n[`vec4`](https://love2d.org/w/index.php?title=vec4&action=edit&redlink=1 \"vec4 (page does not exist)\")` VertexTexCoord`  \nThe texture coordinate of the vertex. The third and fourth components of the vector are normally (0, 1). [Meshes](mesh \"Mesh\") allow for custom texture coordinates.\n\n&nbsp;\n\n[`vec4`](https://love2d.org/w/index.php?title=vec4&action=edit&redlink=1 \"vec4 (page does not exist)\")` VertexColor`  \nThe color of the vertex, sprite, or text character if a [Mesh](mesh \"Mesh\"), [SpriteBatch](spritebatch \"SpriteBatch\"), or [Text](text \"Text\") object with per-vertex colors is drawn, or in LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older the global color set with [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\"). It does not have [gamma-correction](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") applied.\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis shader variable is not supported in earlier versions.\n\n[`vec4`](https://love2d.org/w/index.php?title=vec4&action=edit&redlink=1 \"vec4 (page does not exist)\")` ConstantColor`  \nThe global color set with [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\"). If global [gamma-correction](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") is enabled, it will already be gamma-corrected.\n\n## Pixel Shader built-in variables\n\n[`vec4 array`](https://love2d.org/w/index.php?title=vec4_array&action=edit&redlink=1 \"vec4 array (page does not exist)\")` love_Canvases[]`  \nArray used to set per-canvas pixel colors when multiple canvases are set with [love.graphics.setCanvas](love.graphics.setcanvas \"love.graphics.setCanvas\") and the [effects](love.graphics.newshader#Pixel_Shader_Function \"love.graphics.newShader\") function is used instead of `effect`. Note that arrays in shaders are 0-based. Writable in the pixel shader when the **effects** function is used.\n\n&nbsp;\n\n[`vec2`](https://love2d.org/w/index.php?title=vec2&action=edit&redlink=1 \"vec2 (page does not exist)\")` love_PixelCoord`  \nCoordinates of the pixel on screen. The same as `screen_coords` passed to the `vec4 effect` [Shader function](love.graphics.newshader#Pixel_Shader_Function \"love.graphics.newShader\")\n\n### Notes\n\nIf you wish to access the texture used for the drawing operation, you may define a uniform called `MainTex` of the appropriate type yourself, e.g. `uniform Image MainTex;`\n\n## See Also\n\n- [Shader](shader \"Shader\")\n- [love.graphics.newShader](love.graphics.newshader \"love.graphics.newShader\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shader_Variables](https://love2d.org/wiki/Shader_Variables)"
- name: Shader:getExternVariable
  id: shader-getexternvariable
  summary: Available since LÖVE 0.9.2 and removed in LÖVE 11.0 It has been replaced by Shader:hasUniform
  description: "# Shader:getExternVariable\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been replaced by [Shader:hasUniform](shader-hasuniform \"Shader:hasUniform\").\n\nGets information about an 'extern' ('uniform') variable in the shader.\n\nReturns nil if the variable name doesn't exist in the shader, or if the video driver's shader compiler has determined that the variable doesn't affect the final output of the shader.\n\n## Function\n\n### Synopsis\n\n``` lua\ntype, components, arrayelements = Shader:getExternVariable( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the extern variable.\n\n### Returns\n\n[`ShaderVariableType`](https://love2d.org/w/index.php?title=ShaderVariableType&action=edit&redlink=1 \"ShaderVariableType (page does not exist)\")` type (nil)`  \nThe base type of the variable.\n\n[`number`](number \"number\")` components (nil)`  \nThe number of components in the variable (e.g. 2 for a vec2 or mat2.)\n\n[`number`](number \"number\")` arrayelements (nil)`  \nThe number of elements in the array if the variable is an array, or 1 if not.\n\n## See Also\n\n- [Shader](shader \"Shader\")\n- [Shader:send](shader-send \"Shader:send\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shader:getExternVariable](https://love2d.org/wiki/Shader:getExternVariable)"
- name: Shader:getWarnings
  id: shader-getwarnings
  summary: Available since LÖVE 0.9.0 It has been renamed from PixelEffect:getWarnings
  description: "# Shader:getWarnings\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [PixelEffect:getWarnings](pixeleffect-getwarnings \"PixelEffect:getWarnings\").\n\n  \nReturns any warning and error messages from compiling the shader code. This can be used for debugging your shaders if there's anything the graphics hardware doesn't like.\n\n## Function\n\n### Synopsis\n\n``` lua\nwarnings = Shader:getWarnings( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` warnings`  \nWarning and error messages (if any).\n\n## See Also\n\n- [Shader](shader \"Shader\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shader:getWarnings](https://love2d.org/wiki/Shader:getWarnings)"
- name: Shader:hasUniform
  id: shader-hasuniform
  summary: Available since LÖVE 11.0 It has replaced Shader:getExternVariable
  description: "# Shader:hasUniform\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has replaced [Shader:getExternVariable](shader-getexternvariable \"Shader:getExternVariable\").\n\nGets whether a uniform / extern variable exists in the Shader.\n\nIf a graphics driver's shader compiler determines that a uniform / extern variable doesn't affect the final output of the shader, it may optimize the variable out. This function will return false in that case.\n\n## Function\n\n### Synopsis\n\n``` lua\nhasuniform = Shader:hasUniform( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the uniform variable.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` hasuniform`  \nWhether the uniform exists in the shader and affects its final output.\n\n## See Also\n\n- [Shader](shader \"Shader\")\n- [Shader:send](shader-send \"Shader:send\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shader:hasUniform](https://love2d.org/wiki/Shader:hasUniform)"
- name: Shader:send
  id: shader-send
  summary: Available since LÖVE 0.9.0 It has been renamed from PixelEffect:send
  description: "# Shader:send\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [PixelEffect:send](pixeleffect-send \"PixelEffect:send\").\n\nSends one or more values to a special (*uniform*) variable inside the shader. Uniform variables have to be marked using the *uniform* or *extern* keyword, e.g.\n\n``` lua\nuniform float time;  // \"float\" is the typical number type used in GLSL shaders.\nuniform float vars[2];\nuniform vec2 light_pos;\nuniform vec4 colors[4];\n```\n\nThe corresponding send calls would be\n\n``` lua\nshader:send(\"time\", t)\nshader:send(\"vars\",a,b)\nshader:send(\"light_pos\", {light_x, light_y})\nshader:send(\"colors\", {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})\n```\n\n  \nUniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.\n\nThere is a bug in version [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\") which causes Shader:send to ignore the last argument when sending arrays. A simple workaround is to add an extra dummy argument when sending multiple values to a uniform array.\n\n## Function\n\n### Synopsis\n\n``` lua\nShader:send( name, number, ... )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nName of the number to send to the shader.\n\n[`number`](number \"number\")` number`  \nNumber to send to store in the uniform variable.\n\n[`number`](number \"number\")` ...`  \nAdditional numbers to send if the uniform variable is an array.\n\n### Returns\n\nNothing.\n\n### Notes\n\nBecause all numbers in Lua are floating point, in versions prior to [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\") you must use the function [Shader:sendInt](https://love2d.org/w/index.php?title=Shader:sendInt&action=edit&redlink=1 \"Shader:sendInt (page does not exist)\") to send values to `uniform int` variables in the shader's code.\n\n## Function\n\n### Synopsis\n\n``` lua\nShader:send( name, vector, ... )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nName of the vector to send to the shader.\n\n[`table`](table \"table\")` vector`  \nNumbers to send to the uniform variable as a vector. The number of elements in the table determines the type of the vector (e.g. two numbers -\\> vec2). At least two and at most four numbers can be used.\n\n[`table`](table \"table\")` ...`  \nAdditional vectors to send if the uniform variable is an array. All vectors need to be of the same size (e.g. only vec3's).\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nShader:send( name, matrix, ... )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nName of the matrix to send to the shader.\n\n[`table`](table \"table\")` matrix`  \n2x2, 3x3, or 4x4 matrix to send to the uniform variable. Using table form: `{{a,b,c,d}, {e,f,g,h}, ... }` or (since version [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")) `{a,b,c,d, e,f,g,h, ...}`. The order in 0.10.2 is column-major; starting in [11.0](https://love2d.org/wiki/11.0 \"11.0\") it's row-major instead.\n\n[`table`](table \"table\")` ...`  \nAdditional matrices of the same type as *matrix* to store in a uniform array.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nShader:send( name, texture )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nName of the [Texture](texture \"Texture\") to send to the shader.\n\n[`Texture`](texture \"Texture\")` texture`  \nTexture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) to send to the uniform variable.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nShader:send( name, boolean, ... )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nName of the boolean to send to the shader.\n\n[`boolean`](boolean \"boolean\")` boolean`  \nBoolean to send to store in the uniform variable.\n\n[`boolean`](boolean \"boolean\")` ...`  \nAdditional booleans to send if the uniform variable is an array.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nShader:send( name, matrixlayout, matrix, ... )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nName of the matrix to send to the shader.\n\n[`MatrixLayout`](matrixlayout \"MatrixLayout\")` matrixlayout`  \nThe layout (row- or column-major) of the matrix.\n\n[`table`](table \"table\")` matrix`  \n2x2, 3x3, or 4x4 matrix to send to the uniform variable. Using table form: `{{a,b,c,d}, {e,f,g,h}, ... }` or `{a,b,c,d, e,f,g,h, ...}`.\n\n[`table`](table \"table\")` ...`  \nAdditional matrices of the same type as *matrix* to store in a uniform array.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nSends uniform values to the Shader sourced from the contents of a [Data](data \"Data\") object. This directly copies the bytes of the data.\n\n### Synopsis\n\n``` lua\nShader:send( name, data, offset, size )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nName of the uniform to send to the shader.\n\n[`Data`](data \"Data\")` data`  \nData object containing the values to send.\n\n[`number`](number \"number\")` offset (0)`  \nOffset in bytes from the start of the Data object.\n\n[`number`](number \"number\")` size (all)`  \nSize in bytes of the data to send. If nil, as many bytes as the specified uniform uses will be copied.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nSends uniform matrices to the Shader sourced from the contents of a [Data](data \"Data\") object. This directly copies the bytes of the data.\n\n### Synopsis\n\n``` lua\nShader:send( name, data, matrixlayout, offset, size )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nName of the uniform matrix to send to the shader.\n\n[`Data`](data \"Data\")` data`  \nData object containing the values to send.\n\n[`MatrixLayout`](matrixlayout \"MatrixLayout\")` matrixlayout`  \nThe layout (row- or column-major) of the matrix in memory.\n\n[`number`](number \"number\")` offset (0)`  \nOffset in bytes from the start of the Data object.\n\n[`number`](number \"number\")` size (all)`  \nSize in bytes of the data to send. If nil, as many bytes as the specified uniform uses will be copied.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Shader](shader \"Shader\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shader:send](https://love2d.org/wiki/Shader:send)"
- name: Shader:sendColor
  id: shader-sendcolor
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Shader:sendColor\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nSends one or more colors to a special (*extern* / *uniform*) vec3 or vec4 variable inside the shader. The color components must be in the range of \\[0, 1\\]. The colors are gamma-corrected if global [gamma-correction](love.graphics.isgammacorrect \"love.graphics.isGammaCorrect\") is enabled.\n\nExtern variables must be marked using the *extern* keyword, e.g.\n\n``` lua\nextern vec4 Color;\n```\n\nThe corresponding sendColor call would be\n\n``` lua\nshader:sendColor(\"Color\", {r, g, b, a})\n```\n\n  \nExtern variables can be accessed in both the Vertex and Pixel stages of a shader, as long as the variable is declared in each.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nShader:sendColor( name, color, ... )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the color extern variable to send to in the shader.\n\n[`table`](table \"table\")` color`  \nA table with red, green, blue, and optional alpha color components in the range of \\[0, 1\\] to send to the extern as a vector.\n\n[`table`](table \"table\")` ...`  \nAdditional colors to send in case the extern is an array. All colors need to be of the same size (e.g. only vec3's).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Shader](shader \"Shader\")\n- [Shader:send](shader-send \"Shader:send\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shader:sendColor](https://love2d.org/wiki/Shader:sendColor)"
- name: Shape
  id: shape
  summary: Shapes are solid 2d geometrical objects which handle the mass and collision of a Body in love.physics
  description: "# Shape\n\n**Shapes** are solid 2d geometrical objects which handle the mass and collision of a [Body](body \"Body\") in [love.physics](love.physics \"love.physics\").\n\n**Shapes** are attached to a [Body](body \"Body\") via a [Fixture](fixture \"Fixture\"). The **Shape** object is copied when this happens.\n\nThe **Shape**'s position is relative to the position of the [Body](body \"Body\") it has been attached to.\n\n## Constructors\n\n|                                                                                                   |                                                                                  |       |     |\n|---------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------|-------|-----|\n| [love.physics.newChainShape](love.physics.newchainshape \"love.physics.newChainShape\")             | Creates a new [ChainShape](chainshape \"ChainShape\").                             | 0.8.0 |     |\n| [love.physics.newCircleShape](love.physics.newcircleshape \"love.physics.newCircleShape\")          | Creates a new [CircleShape](circleshape \"CircleShape\").                          |       |     |\n| [love.physics.newEdgeShape](love.physics.newedgeshape \"love.physics.newEdgeShape\")                | Creates a new [EdgeShape](edgeshape \"EdgeShape\").                                | 0.8.0 |     |\n| [love.physics.newPolygonShape](love.physics.newpolygonshape \"love.physics.newPolygonShape\")       | Creates a new [PolygonShape](polygonshape \"PolygonShape\").                       |       |     |\n| [love.physics.newRectangleShape](love.physics.newrectangleshape \"love.physics.newRectangleShape\") | Shorthand for creating rectangular [PolygonShapes](polygonshape \"PolygonShape\"). |       |     |\n\n## Functions\n\n|                                                                        |                                                                   |       |       |\n|------------------------------------------------------------------------|-------------------------------------------------------------------|-------|-------|\n| [Object:release](object-release \"Object:release\")                      | Immediately destroys the object's Lua reference.                  | 11.0  |       |\n| [Object:type](object-type \"Object:type\")                               | Gets the type of the object as a string.                          |       |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                         | Checks whether an object is of a certain type.                    |       |       |\n| [Shape:computeAABB](shape-computeaabb \"Shape:computeAABB\")             | Returns the points of the bounding box for the transformed shape. | 0.8.0 |       |\n| [Shape:computeMass](shape-computemass \"Shape:computeMass\")             | Computes the mass properties for the shape.                       | 0.8.0 |       |\n| [Shape:destroy](shape-destroy \"Shape:destroy\")                         | Explicitly destroys the Shape.                                    |       | 0.8.0 |\n| [Shape:getBody](shape-getbody \"Shape:getBody\")                         | Get the body the shape is attached to.                            | 0.7.0 | 0.8.0 |\n| [Shape:getBoundingBox](shape-getboundingbox \"Shape:getBoundingBox\")    | Gets the bounding box of the shape.                               |       | 0.8.0 |\n| [Shape:getCategory](shape-getcategory \"Shape:getCategory\")             | Gets the categories this shape is a member of.                    |       | 0.8.0 |\n| [Shape:getCategoryBits](shape-getcategorybits \"Shape:getCategoryBits\") | Gets the categories as a 16-bit integer.                          |       | 0.8.0 |\n| [Shape:getChildCount](shape-getchildcount \"Shape:getChildCount\")       | Returns the number of children the shape has.                     | 0.8.0 |       |\n| [Shape:getData](shape-getdata \"Shape:getData\")                         | Get the data set with setData.                                    |       | 0.8.0 |\n| [Shape:getDensity](shape-getdensity \"Shape:getDensity\")                | Gets the density of the Shape.                                    |       | 0.8.0 |\n| [Shape:getFilterData](shape-getfilterdata \"Shape:getFilterData\")       | Gets the filter data of the Shape.                                |       | 0.8.0 |\n| [Shape:getFriction](shape-getfriction \"Shape:getFriction\")             | Gets the friction of this shape.                                  |       | 0.8.0 |\n| [Shape:getMask](shape-getmask \"Shape:getMask\")                         | Gets which categories this shape should **NOT** collide with.     |       | 0.8.0 |\n| [Shape:getRadius](shape-getradius \"Shape:getRadius\")                   | Gets the radius of the shape.                                     |       |       |\n| [Shape:getRestitution](shape-getrestitution \"Shape:getRestitution\")    | Gets the restitution of this shape.                               |       | 0.8.0 |\n| [Shape:getType](shape-gettype \"Shape:getType\")                         | Gets a string representing the Shape.                             |       |       |\n| [Shape:isSensor](shape-issensor \"Shape:isSensor\")                      | Checks whether a Shape is a sensor or not.                        |       | 0.8.0 |\n| [Shape:rayCast](shape-raycast \"Shape:rayCast\")                         | Casts a ray against the shape.                                    | 0.8.0 |       |\n| [Shape:setCategory](shape-setcategory \"Shape:setCategory\")             | Sets the categories this shape is a member of.                    |       | 0.8.0 |\n| [Shape:setData](shape-setdata \"Shape:setData\")                         | Set data to be passed to the collision callback.                  |       | 0.8.0 |\n| [Shape:setDensity](shape-setdensity \"Shape:setDensity\")                | Sets the density of a Shape.                                      |       | 0.8.0 |\n| [Shape:setFilterData](shape-setfilterdata \"Shape:setFilterData\")       | Sets the filter data for a Shape.                                 |       | 0.8.0 |\n| [Shape:setFriction](shape-setfriction \"Shape:setFriction\")             | Sets the friction of the shape.                                   |       | 0.8.0 |\n| [Shape:setMask](shape-setmask \"Shape:setMask\")                         | Sets which categories this shape should **NOT** collide with.     |       | 0.8.0 |\n| [Shape:setRestitution](shape-setrestitution \"Shape:setRestitution\")    | Sets the restitution of the shape.                                |       | 0.8.0 |\n| [Shape:setSensor](shape-setsensor \"Shape:setSensor\")                   | Sets whether this shape should act as a sensor.                   |       | 0.8.0 |\n| [Shape:testPoint](shape-testpoint \"Shape:testPoint\")                   | Checks whether a point lies inside the shape.                     |       |       |\n| [Shape:testSegment](shape-testsegment \"Shape:testSegment\")             | Checks whether a line segment intersects a shape.                 |       | 0.8.0 |\n\n## Enums\n\n|                                    |                                                                                                   |     |     |\n|------------------------------------|---------------------------------------------------------------------------------------------------|-----|-----|\n| [ShapeType](shapetype \"ShapeType\") | The different types of **Shapes**, as returned by [Shape:getType](shape-gettype \"Shape:getType\"). |     |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## Subtypes\n\n|                                             |                                                              |     |     |\n|---------------------------------------------|--------------------------------------------------------------|-----|-----|\n| [ChainShape](chainshape \"ChainShape\")       | A ChainShape consists of multiple line segments.             |     |     |\n| [CircleShape](circleshape \"CircleShape\")    | Circle extends Shape and adds a radius and a local position. |     |     |\n| [EdgeShape](edgeshape \"EdgeShape\")          | EdgeShape is a line segment.                                 |     |     |\n| [PolygonShape](polygonshape \"PolygonShape\") | Polygon is a convex polygon with up to 8 sides.              |     |     |\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape](https://love2d.org/wiki/Shape)"
- name: Shape:computeAABB
  id: shape-computeaabb
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Shape:computeAABB\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns the points of the bounding box for the transformed shape.\n\n## Function\n\n### Synopsis\n\n``` lua\ntopLeftX, topLeftY, bottomRightX, bottomRightY = Shape:computeAABB( tx, ty, tr, childIndex )\n```\n\n### Arguments\n\n[`number`](number \"number\")` tx`  \nThe translation of the shape on the x-axis.\n\n[`number`](number \"number\")` ty`  \nThe translation of the shape on the y-axis.\n\n[`number`](number \"number\")` tr`  \nThe shape rotation.\n\n[`number`](number \"number\")` childIndex (1)`  \nThe index of the child to compute the bounding box of.\n\n### Returns\n\n[`number`](number \"number\")` topLeftX`  \nThe x position of the top-left point.\n\n[`number`](number \"number\")` topLeftY`  \nThe y position of the top-left point.\n\n[`number`](number \"number\")` bottomRightX`  \nThe x position of the bottom-right point.\n\n[`number`](number \"number\")` bottomRightY`  \nThe y position of the bottom-right point.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:computeAABB](https://love2d.org/wiki/Shape:computeAABB)"
- name: Shape:computeMass
  id: shape-computemass
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Shape:computeMass\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nComputes the mass properties for the shape with the specified density.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y, mass, inertia = Shape:computeMass( density )\n```\n\n### Arguments\n\n[`number`](number \"number\")` density`  \nThe shape density.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x postition of the center of mass.\n\n[`number`](number \"number\")` y`  \nThe y postition of the center of mass.\n\n[`number`](number \"number\")` mass`  \nThe mass of the shape.\n\n[`number`](number \"number\")` inertia`  \nThe rotational inertia.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:computeMass](https://love2d.org/wiki/Shape:computeMass)"
- name: Shape:destroy
  id: shape-destroy
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Shape:destroy\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nExplicitly destroys the Shape. When you don't have time to wait for garbage collection, this function may be used to free the object immediately, but note that an error will occur if you attempt to use the object after calling this function.\n\nNote that Box2D doesn't allow destroying or creating shapes during collision callbacks.\n\n  \n\n## Function\n\n### Synopsis\n\n``` lua\nShape:destroy( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:destroy](https://love2d.org/wiki/Shape:destroy)"
- name: Shape:getBody
  id: shape-getbody
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Shape:getBody\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nGet the [Body](body \"Body\") the shape is attached to.\n\n## Function\n\n### Synopsis\n\n``` lua\nbody = Shape:getBody( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Body`](body \"Body\")` body`  \nThe body the shape is attached to.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:getBody](https://love2d.org/wiki/Shape:getBody)"
- name: Shape:getBoundingBox
  id: shape-getboundingbox
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Shape:getBoundingBox\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nGets the bounding box of the shape. This function can be used in a nested fashion with [love.graphics.polygon](love.graphics.polygon \"love.graphics.polygon\").\n\n## Function\n\n### Synopsis\n\nA bounding box is the smallest rectangle that encapsulates the entire polygon.\n\n``` lua\nx1, y1, x2, y2, x3, y3, x4, y4 = Shape:getBoundingBox( )\n```\n\nVertexes are returned starting from the bottom-left in a clockwise fashion (bottom-left, top-left, top-right, bottom-right).\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x1`  \nThe x-component of the first vertex, bottom-left.\n\n[`number`](number \"number\")` y1`  \nThe y-component of the first vertex, bottom-left.\n\n[`number`](number \"number\")` x2`  \nThe x-component of the second vertex, top-left.\n\n[`number`](number \"number\")` y2`  \nThe y-component of the second vertex, top-left.\n\n[`number`](number \"number\")` x3`  \nThe x-component of the third vertex, top-right.\n\n[`number`](number \"number\")` y3`  \nThe y-component of the third vertex, top-right.\n\n[`number`](number \"number\")` x4`  \nThe x-component of the fourth vertex, bottom-right.\n\n[`number`](number \"number\")` y4`  \nThe y-component of the fourth vertex, bottom-right.\n\n## Example\n\n[](https://love2d.org/wiki/File:Love_Ex_getBoundingBox.png)\n\n  \n\nAnd here's the source code if you want to try/test/see it yourself.\n\n``` lua\nfunction love.load()\n \n    world = love.physics.newWorld(650, 650)\n        world:setGravity(0,700)\n        world:setMeter(64)\n \n    body = love.physics.newBody(world, 650/2, 650/2, 0, 0)\n    shape = love.physics.newRectangleShape(body, 0, 0, 300, 300, 0)\n \n \n    love.graphics.setFont(18)\n    love.graphics.setBackgroundColor(255, 255, 255, 255)\n    love.graphics.setMode(650, 650, false, true, 0)\n \nend\n \nfunction love.draw()\n \n    X1, Y1, X2, Y2, X3, Y3, X4, Y4 = shape:getBoundingBox()\n \n    love.graphics.setColor(0,0,0,255)\n \n    love.graphics.print(\"X1, Y1\", X1, Y1)\n    love.graphics.print(\"X2, Y2\", X2, Y2)\n    love.graphics.print(\"X3, Y3\", X3, Y3)\n    love.graphics.print(\"X4, Y4\", X4, Y4)\n \nend\n```\n\n  \n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:getBoundingBox](https://love2d.org/wiki/Shape:getBoundingBox)"
- name: Shape:getCategory
  id: shape-getcategory
  summary: Removed in LÖVE 0.8.0 Use Fixture:setCategory instead
  description: "# Shape:getCategory\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nUse [Fixture:setCategory](fixture-setcategory \"Fixture:setCategory\") instead.\n\n  \nGets the categories this shape is a member of. The number of categories the shape is a member of is the number of return values. Categories are used for allowing/disallowing certain collision.\n\n## Function\n\n### Synopsis\n\n``` lua\n... = Shape:getCategory( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`numbers`](https://love2d.org/w/index.php?title=numbers&action=edit&redlink=1 \"numbers (page does not exist)\")` ...`  \nNumbers from 1-16.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:getCategory](https://love2d.org/wiki/Shape:getCategory)"
- name: Shape:getCategoryBits
  id: shape-getcategorybits
  summary: Removed in LÖVE 0.8.0 Use Fixture:getCategory instead
  description: "# Shape:getCategoryBits\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nUse [Fixture:getCategory](fixture-getcategory \"Fixture:getCategory\") instead.\n\n  \nGets the categories as a 16-bit integer. A set bit indicates membership of that category.\n\n## Function\n\n### Synopsis\n\n``` lua\nAn = Shape:getCategoryBits( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` An`  \nInteger value representing the categories.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:getCategoryBits](https://love2d.org/wiki/Shape:getCategoryBits)"
- name: Shape:getChildCount
  id: shape-getchildcount
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Shape:getChildCount\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns the number of children the shape has.\n\n## Function\n\n### Synopsis\n\n``` lua\ncount = Shape:getChildCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` count`  \nThe number of children.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:getChildCount](https://love2d.org/wiki/Shape:getChildCount)"
- name: Shape:getData
  id: shape-getdata
  summary: Removed in LÖVE 0.8.0 Use Fixture:getUserData instead
  description: "# Shape:getData\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nUse [Fixture:getUserData](fixture-getuserdata \"Fixture:getUserData\") instead.\n\nGet the data set with setData.\n\n## Function\n\n### Synopsis\n\n``` lua\nv = Shape:getData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`any`](https://love2d.org/w/index.php?title=any&action=edit&redlink=1 \"any (page does not exist)\")` v`  \nThe data previously set, or nil if none.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n- [Shape:setData](shape-setdata \"Shape:setData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:getData](https://love2d.org/wiki/Shape:getData)"
- name: Shape:getDensity
  id: shape-getdensity
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Shape:getDensity\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nGets the density of the Shape.\n\n## Function\n\n### Synopsis\n\n``` lua\ndensity = Shape:getDensity( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` density`  \nThe density of the Shape.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:getDensity](https://love2d.org/wiki/Shape:getDensity)"
- name: Shape:getFilterData
  id: shape-getfilterdata
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Shape:getFilterData\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nGets the filter data of the Shape.\n\n## Function\n\n### Synopsis\n\n``` lua\ncategoryBits, maskBits, groupIndex = Shape:getFilterData( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` categoryBits`  \nA 16-bit integer representing category membership.\n\n[`number`](number \"number\")` maskBits`  \nA 16-bit integer representing masked categories.\n\n[`number`](number \"number\")` groupIndex`  \nAn integer representing the group index.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:getFilterData](https://love2d.org/wiki/Shape:getFilterData)"
- name: Shape:getFriction
  id: shape-getfriction
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Shape:getFriction\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nGets the friction of this shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nfriction = Shape:getFriction( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` friction`  \nThe friction of this Shape.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:getFriction](https://love2d.org/wiki/Shape:getFriction)"
- name: Shape:getMask
  id: shape-getmask
  summary: Removed in LÖVE 0.8.0 Use Fixture:getMask instead
  description: "# Shape:getMask\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nUse [Fixture:getMask](fixture-getmask \"Fixture:getMask\") instead.\n\n  \nGets which categories this shape should **NOT** collide with. The number of masked categories is the number of return values.\n\n## Function\n\n### Synopsis\n\n``` lua\n... = Shape:getMask( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` ...`  \nNumbers from 1-16\n\n## Examples\n\n### With how many categories does this shape collide?\n\n``` lua\nprint('shape collides with', select('#', shape:getMask()), 'categories')\n```\n\n## See Also\n\n- [Shape](shape \"Shape\")\n- [Shape:setMask](shape-setmask \"Shape:setMask\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:getMask](https://love2d.org/wiki/Shape:getMask)"
- name: Shape:getRadius
  id: shape-getradius
  summary: Gets the radius of the shape
  description: "# Shape:getRadius\n\nGets the radius of the shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nradius = Shape:getRadius()\n```\n\nFrom the Box2D manual:\n\n> Polygons inherit a radius from [Shape](shape \"Shape\"). The radius creates a skin around the polygon. The skin is used in stacking scenarios to keep polygons slightly separated. This allows continuous collision to work against the core polygon.\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` radius`  \nThe radius of the shape.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:getRadius](https://love2d.org/wiki/Shape:getRadius)"
- name: Shape:getRestitution
  id: shape-getrestitution
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Shape:getRestitution\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nGets the restitution of this shape.\n\n## Function\n\n### Synopsis\n\n``` lua\nrestitution = Shape:getRestitution( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` restitution`  \nThe restitution of this Shape.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:getRestitution](https://love2d.org/wiki/Shape:getRestitution)"
- name: Shape:getType
  id: shape-gettype
  summary: Gets a string representing the Shape
  description: "# Shape:getType\n\nGets a string representing the Shape. This function can be useful for conditional debug drawing.\n\n## Function\n\n### Synopsis\n\n``` lua\ntype = Shape:getType( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`ShapeType`](shapetype \"ShapeType\")` type`  \nThe type of the Shape.\n\n## Examples\n\n### Printing the type of a shape\n\n``` lua\nshape1 = love.physics.newCircleShape( my_body, 0, 0, 20 )\nprint(shape1:getType()) -- outputs: 'circle'\n \nshape2 = love.physics.newPolygonShape( my_body, ... )\nprint(shape2:getType()) -- outputs: 'polygon'\n \nshape3 = love.physics.newRectangleShape( my_body, x, y, w, h, angle )\nprint(shape3:getType()) -- outputs: 'polygon'\n```\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:getType](https://love2d.org/wiki/Shape:getType)"
- name: Shape:isSensor
  id: shape-issensor
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Shape:isSensor\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nChecks whether a Shape is a sensor or not.\n\n## Function\n\n### Synopsis\n\n``` lua\ns = Shape:isSensor( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` s`  \nTrue if sensor, false otherwise.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:isSensor](https://love2d.org/wiki/Shape:isSensor)"
- name: Shape:rayCast
  id: shape-raycast
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Shape:rayCast\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nCasts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position.\n\nThe ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length.\n\nThe childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children.\n\nThe world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point.\n\n``` lua\nhitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction\n```\n\n  \n\nThere is a bug in [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") where the normal vector returned by this function gets scaled by [love.physics.getMeter](love.physics.getmeter \"love.physics.getMeter\").\n\n## Function\n\n### Synopsis\n\n``` lua\nxn, yn, fraction = Shape:rayCast( x1, y1, x2, y2, maxFraction, tx, ty, tr, childIndex )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x1`  \nThe x position of the input line starting point.\n\n[`number`](number \"number\")` y1`  \nThe y position of the input line starting point.\n\n[`number`](number \"number\")` x2`  \nThe x position of the input line end point.\n\n[`number`](number \"number\")` y2`  \nThe y position of the input line end point.\n\n[`number`](number \"number\")` maxFraction`  \nRay length parameter.\n\n[`number`](number \"number\")` tx`  \nThe translation of the shape on the x-axis.\n\n[`number`](number \"number\")` ty`  \nThe translation of the shape on the y-axis.\n\n[`number`](number \"number\")` tr`  \nThe shape rotation.\n\n[`number`](number \"number\")` childIndex (1)`  \nThe index of the child the ray gets cast against.\n\n### Returns\n\n[`number`](number \"number\")` xn`  \nThe x component of the normal vector of the edge where the ray hit the shape.\n\n[`number`](number \"number\")` yn`  \nThe y component of the normal vector of the edge where the ray hit the shape.\n\n[`number`](number \"number\")` fraction`  \nThe position on the input line where the intersection happened as a factor of the line length.\n\n## Examples\n\n### Casting 2 different rays against a box.\n\n``` lua\nfunction love.load()\n    -- Setting this to 1 to avoid all current scaling bugs.\n    love.physics.setMeter(1)\n \n    Box = {}\n    Box.x, Box.y, Box.r = 400, 300, 3.3\n    Box.Shape = love.physics.newRectangleShape(150, 150)\n \n \n    Ray1 = {\n        point1 = {},\n        point2 = {},\n    }\n    Ray1.point1.x, Ray1.point1.y = 50, 50\n    Ray1.point2.x, Ray1.point2.y = 400, 300\n    Ray1.scale = 1\n \n    Ray2 = {\n        point1 = {},\n        point2 = {},\n    }\n    Ray2.point1.x, Ray2.point1.y = 500, 400\n    Ray2.point2.x, Ray2.point2.y = Ray2.point1.x + math.cos(math.pi*1.45), Ray2.point1.y + math.sin(math.pi*1.45)\n    Ray2.scale = 150\nend\n \nfunction love.draw()\n    -- Drawing the box.\n    love.graphics.setColor(255, 255, 255)\n    love.graphics.push()\n    -- For great point rotation!\n    love.graphics.translate(Box.x, Box.y)\n    love.graphics.rotate(Box.r)\n    love.graphics.polygon(\"line\", Box.Shape:getPoints())\n    love.graphics.pop()\n \n    -- Drawing the input lines of the rays and the reach of ray 2 in gray.\n    love.graphics.setLineWidth(3)\n    love.graphics.setColor(50, 50, 50)\n    love.graphics.line(Ray2.point1.x, Ray2.point1.y, Ray2.point1.x + (Ray2.point2.x - Ray2.point1.x) * Ray2.scale, Ray2.point1.y + (Ray2.point2.y - Ray2.point1.y) * Ray2.scale)\n    love.graphics.setColor(255, 255, 255)\n    love.graphics.line(Ray1.point1.x, Ray1.point1.y, Ray1.point2.x, Ray1.point2.y)\n    love.graphics.line(Ray2.point1.x, Ray2.point1.y, Ray2.point2.x, Ray2.point2.y)\n    love.graphics.setLineWidth(1)\n \n    -- Remember that the ray cast can return nil if it hits nothing.\n    local r1nx, r1ny, r1f = Box.Shape:rayCast(Ray1.point1.x, Ray1.point1.y, Ray1.point2.x, Ray1.point2.y, Ray1.scale, Box.x, Box.y, Box.r)\n    local r2nx, r2ny, r2f = Box.Shape:rayCast(Ray2.point1.x, Ray2.point1.y, Ray2.point2.x, Ray2.point2.y, Ray2.scale, Box.x, Box.y, Box.r)\n \n    if r1nx then\n        -- Calculating the world position where the ray hit.\n        local r1HitX = Ray1.point1.x + (Ray1.point2.x - Ray1.point1.x) * r1f\n        local r1HitY = Ray1.point1.y + (Ray1.point2.y - Ray1.point1.y) * r1f\n \n        -- Drawing the ray from the starting point to the position on the shape.\n        love.graphics.setColor(255, 0, 0)\n        love.graphics.line(Ray1.point1.x, Ray1.point1.y, r1HitX, r1HitY)\n \n        -- We also get the surface normal of the edge the ray hit. Here drawn in green\n        love.graphics.setColor(0, 255, 0)\n        love.graphics.line(r1HitX, r1HitY, r1HitX + r1nx * 25, r1HitY + r1ny * 25)\n    end\n \n    if r2nx then\n        -- Calculating the world position where the ray hit.\n        local r2HitX = Ray2.point1.x + (Ray2.point2.x - Ray2.point1.x) * r2f\n        local r2HitY = Ray2.point1.y + (Ray2.point2.y - Ray2.point1.y) * r2f\n \n        -- Drawing the ray from the starting point to the position on the shape.\n        love.graphics.setColor(255, 0, 0)\n        love.graphics.line(Ray2.point1.x, Ray2.point1.y, r2HitX, r2HitY)\n \n        -- We also get the surface normal of the edge the ray hit. Here drawn in green\n        love.graphics.setColor(0, 255, 0)\n        love.graphics.line(r2HitX, r2HitY, r2HitX + r2nx * 25, r2HitY + r2ny * 25)\n    end\nend\n```\n\n[](https://love2d.org/wiki/File:raycast_example_screenshot.png)\n\nScreenshot of how the example could look like.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:rayCast](https://love2d.org/wiki/Shape:rayCast)"
- name: Shape:setCategory
  id: shape-setcategory
  summary: Removed in LÖVE 0.8.0 Use Fixture:setCategory instead
  description: "# Shape:setCategory\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nUse [Fixture:setCategory](fixture-setcategory \"Fixture:setCategory\") instead.\n\nSets the categories this shape is a member of. Sets the categories of this shape by specifying numbers from 1-16 as parameters. Categories can be used to prevent certain shapes from colliding.\n\n## Function\n\n### Synopsis\n\n``` lua\nShape:setCategory( ... )\n```\n\n### Arguments\n\n[`numbers`](https://love2d.org/w/index.php?title=numbers&action=edit&redlink=1 \"numbers (page does not exist)\")` ...`  \nNumbers from 1-16\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:setCategory](https://love2d.org/wiki/Shape:setCategory)"
- name: Shape:setData
  id: shape-setdata
  summary: Removed in LÖVE 0.8.0 Use Fixture:setUserData instead
  description: "# Shape:setData\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nUse [Fixture:setUserData](fixture-setuserdata \"Fixture:setUserData\") instead.\n\nSet data to be passed to the collision callback.\n\nWhen a shape collides, the value set here will be passed to the collision callback as one of the parameters. Typically, you would want to store a table reference here, but any value can be used.\n\n## Function\n\n### Synopsis\n\n``` lua\nShape:setData( v )\n```\n\n### Arguments\n\n[`any`](https://love2d.org/w/index.php?title=any&action=edit&redlink=1 \"any (page does not exist)\")` v`  \nAny Lua value.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n- [Shape:getData](shape-getdata \"Shape:getData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:setData](https://love2d.org/wiki/Shape:setData)"
- name: Shape:setDensity
  id: shape-setdensity
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Shape:setDensity\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nSets the density of a Shape. Do this before calling [Body:setMassFromShapes](body-setmassfromshapes \"Body:setMassFromShapes\").\n\n## Function\n\n### Synopsis\n\n``` lua\nShape:setDensity( density )\n```\n\n### Arguments\n\n[`number`](number \"number\")` density`  \nThe new density of the Shape.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:setDensity](https://love2d.org/wiki/Shape:setDensity)"
- name: Shape:setFilterData
  id: shape-setfilterdata
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Shape:setFilterData\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nSets the filter data for a Shape. Info stolen from box2d.org:\n\n*Collision filtering is a system for preventing collision between shapes. For example, say you make a character that rides a bicycle. You want the bicycle to collide with the terrain and the character to collide with the terrain, but you don't want the character to collide with the bicycle (because they must overlap). Box2D supports such collision filtering using categories and groups.*\n\nRead more about this in the [Box2D documentation](http://box2d.org/manual.html#d0e845).\n\n## Function\n\n### Synopsis\n\n``` lua\nShape:setFilterData( categoryBits, maskBits, groupIndex )\n```\n\n### Arguments\n\n[`number`](number \"number\")` categoryBits`  \nA 16-bit integer representing category membership.\n\n[`number`](number \"number\")` maskBits`  \nA 16-bit integer representing masked categories.\n\n[`number`](number \"number\")` groupIndex`  \nAn integer representing the group index.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:setFilterData](https://love2d.org/wiki/Shape:setFilterData)"
- name: Shape:setFriction
  id: shape-setfriction
  summary: Removed in LÖVE 0.8.0 Has been replaced by Fixture:setFriction
  description: "# Shape:setFriction\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nHas been replaced by [Fixture:setFriction](fixture-setfriction \"Fixture:setFriction\").\n\n  \nSets the friction of the shape. Friction determines how shapes react when they \"slide\" along other shapes. Low friction indicates a slippery surface, like ice, while high friction indicates a rough surface, like concrete. Range: 0.0 - 1.0.\n\n## Function\n\n### Synopsis\n\n``` lua\nShape:setFriction( friction )\n```\n\n### Arguments\n\n[`number`](number \"number\")` friction`  \nThe friction of the shape.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:setFriction](https://love2d.org/wiki/Shape:setFriction)"
- name: Shape:setMask
  id: shape-setmask
  summary: Removed in LÖVE 0.8.0 Use Fixture:setMask instead
  description: "# Shape:setMask\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nUse [Fixture:setMask](fixture-setmask \"Fixture:setMask\") instead.\n\nSets which categories this shape should **NOT** collide with. With this function, you can exclude certain shape categories from collisions with this shape. The categories passed as parameters will be excluded from collisions - all others included.\n\n## Function\n\n### Synopsis\n\n``` lua\nShape:setMask( ... )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ...`  \nNumbers from 1-16.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Only collide with category 6\n\n``` lua\nshape:setMask(1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16)\n```\n\n## See Also\n\n- [Shape](shape \"Shape\")\n- [Shape:getMask](shape-getmask \"Shape:getMask\")\n\n  \n\n## Others Languages\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:setMask](https://love2d.org/wiki/Shape:setMask)"
- name: Shape:setRestitution
  id: shape-setrestitution
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Shape:setRestitution\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nSets the restitution of the shape. Restitution indicates the \"bounciness\" of the shape. High restitution can be used to model stuff like a rubber ball, while low restitution can be used for \"dull\" objects, like a bag of sand.\n\n## Function\n\n### Synopsis\n\n``` lua\nShape:setRestitution( restitution )\n```\n\n### Arguments\n\n[`number`](number \"number\")` restitution`  \nThe restitution of the shape.\n\n### Returns\n\nNothing.\n\n## Notes\n\nA shape with a restitution of 0 will still bounce a little if the shape it collides with has a restitution higher than 0.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:setRestitution](https://love2d.org/wiki/Shape:setRestitution)"
- name: Shape:setSensor
  id: shape-setsensor
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Shape:setSensor\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nSets whether this shape should act as a sensor. Set the shape as a sensor if you want to be notified when collision between shapes occur, but don't want a physical response (for instance, maybe you want enemies to appear when the player \"touches\" a certain point).\n\n## Function\n\n### Synopsis\n\n``` lua\nShape:setSensor( sensor )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` sensor`  \nTrue for sensor, false otherwise.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:setSensor](https://love2d.org/wiki/Shape:setSensor)"
- name: Shape:testPoint
  id: shape-testpoint
  summary: This is particularly useful for mouse interaction with the shapes
  description: "# Shape:testPoint\n\nThis is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches.\n\nThere's a bug in [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") preventing this function from working.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nhit = Shape:testPoint( tx, ty, tr, x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` tx`  \nTranslates the shape along the x-axis.\n\n[`number`](number \"number\")` ty`  \nTranslates the shape along the y-axis.\n\n[`number`](number \"number\")` tr`  \nRotates the shape.\n\n[`number`](number \"number\")` x`  \nThe x-component of the point.\n\n[`number`](number \"number\")` y`  \nThe y-component of the point.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` hit`  \nTrue if inside, false if outside\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nhit = Shape:testPoint( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x-component of the point.\n\n[`number`](number \"number\")` y`  \nThe y-component of the point.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` hit`  \nTrue if inside, false if outside\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:testPoint](https://love2d.org/wiki/Shape:testPoint)"
- name: Shape:testSegment
  id: shape-testsegment
  summary: Removed in LÖVE 0.8.0 This function is not supported in that and later versions
  description: "# Shape:testSegment\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in that and later versions.\n\nChecks whether a line segment intersects a shape. This function will either return the \"time\" of impact and the surface normal at the point of collision, or nil if the line does not intersect the shape. The \"time\" is a value between 0.0 and 1.0 and can be used to calculate where the collision occured.\n\n## Function\n\n### Synopsis\n\n``` lua\nt, xn, yn = Shape:testSegment( x1, y1, x2, y2 )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x1`  \nThe x-component of the first endpoint.\n\n[`number`](number \"number\")` y1`  \nThe y-component of the first endpoint.\n\n[`number`](number \"number\")` x2`  \nThe x-component of the second endpoint.\n\n[`number`](number \"number\")` y2`  \nThe y-component of the second endpoint.\n\n### Returns\n\n[`number`](number \"number\")` t`  \nThe time of impact, or nil if no impact.\n\n[`number`](number \"number\")` xn`  \nThe x-component of the surface normal.\n\n[`number`](number \"number\")` yn`  \nThe y-component of the surface normal.\n\n## See Also\n\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Shape:testSegment](https://love2d.org/wiki/Shape:testSegment)"
- name: ShapeType
  id: shapetype
  summary: The different types of Shapes, as returned by Shape:getType
  description: "# ShapeType\n\nThe different types of [Shapes](shape \"Shape\"), as returned by [Shape:getType](shape-gettype \"Shape:getType\").\n\n## Constants\n\ncircle  \nThe Shape is a [CircleShape](circleshape \"CircleShape\").\n\npolygon  \nThe Shape is a [PolygonShape](polygonshape \"PolygonShape\").\n\nedge Available since 0.8.0  \nThe Shape is a [EdgeShape](edgeshape \"EdgeShape\").\n\nchain Available since 0.8.0  \nThe Shape is a [ChainShape](chainshape \"ChainShape\").\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n- [Shape](shape \"Shape\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/ShapeType](https://love2d.org/wiki/ShapeType)"
- name: socket
  id: socket
  summary: Available since LÖVE 0.5.0 This module is not supported in earlier versions
  description: "# socket\n\nSince [11.0](https://love2d.org/wiki/11.0 \"11.0\"), LÖVE does fully support non-blocking TCP connections on Windows\n\n**Available since LÖVE [0.5.0](https://love2d.org/wiki/0.5.0 \"0.5.0\")**  \nThis module is not supported in earlier versions.\n\nImplements a [luasocket](http://w3.impa.br/~diego/software/luasocket/) module for TCP/UDP networking. The luasocket module is bundled with love binary, but in order to use it, you need to require the module like this:\n\n``` lua\nrequire(\"socket\")\n```\n\nor even better:\n\n``` lua\nlocal socket = require(\"socket\")\n```\n\n**Note:** Since ~~lua 5.2~~ LÖVE 11.0, the latter method is ~~preferred~~ recommended, as modules will no longer register themselves in the global space, instead they will return a table.\n\n**Note:** When using blocking operations (network connect/read/write, or socket.sleep), the whole LÖVE main loop will be blocked, and it is usually a bad idea. So use only non-blocking operations if possible, or use it in a thread.\n\n## Reference Manual\n\nFor detailed usage, see the [reference manual](http://w3.impa.br/~diego/software/luasocket/reference.html).\n\n## See Also\n\n- [love](love \"love\")\n- [Tutorial:Networking with UDP](https://love2d.org/wiki/Tutorial:Networking_with_UDP \"Tutorial:Networking with UDP\")\n- [enet](lua-enet \"enet\")\n- [LUBE](https://love2d.org/forums/viewtopic.php?f=5&t=230)\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/socket](https://love2d.org/wiki/socket)"
- name: SoundData
  id: sounddata
  summary: Contains raw audio samples
  description: "# SoundData\n\nContains raw audio samples. You can not play SoundData back directly. You must wrap a [Source](source \"Source\") object around it.\n\n## Constructors\n\n|                                                                              |                                                                                    |      |     |\n|------------------------------------------------------------------------------|------------------------------------------------------------------------------------|------|-----|\n| [Decoder:decode](decoder-decode \"Decoder:decode\")                            | Decodes a chunk of audio data to a SoundData.                                      | 11.0 |     |\n| [RecordingDevice:getData](recordingdevice-getdata \"RecordingDevice:getData\") | Gets all recorded audio **SoundData** stored in the device's internal ring buffer. | 11.0 |     |\n| [love.sound.newSoundData](love.sound.newsounddata \"love.sound.newSoundData\") | Creates a new SoundData.                                                           |      |     |\n\n## Functions\n\n|                                                                                    |                                                              |       |       |\n|------------------------------------------------------------------------------------|--------------------------------------------------------------|-------|-------|\n| [Data:clone](data-clone \"Data:clone\")                                              | Creates a new copy of the Data object.                       | 11.0  |       |\n| [Data:getFFIPointer](data-getffipointer \"Data:getFFIPointer\")                      | Gets an FFI pointer to the Data.                             | 11.3  |       |\n| [Data:getPointer](data-getpointer \"Data:getPointer\")                               | Gets a pointer to the Data.                                  |       |       |\n| [Data:getSize](data-getsize \"Data:getSize\")                                        | Gets the [Data](data \"Data\")'s size in bytes.                |       |       |\n| [Data:getString](data-getstring \"Data:getString\")                                  | Gets the full Data as a string.                              | 0.9.0 |       |\n| [Object:release](object-release \"Object:release\")                                  | Immediately destroys the object's Lua reference.             | 11.0  |       |\n| [Object:type](object-type \"Object:type\")                                           | Gets the type of the object as a string.                     |       |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                     | Checks whether an object is of a certain type.               |       |       |\n| [SoundData:getBitDepth](sounddata-getbitdepth \"SoundData:getBitDepth\")             | Returns the number of bits per sample.                       | 0.9.0 |       |\n| [SoundData:getBits](sounddata-getbits \"SoundData:getBits\")                         | Returns the number of bits per sample.                       |       | 0.9.0 |\n| [SoundData:getChannelCount](sounddata-getchannelcount \"SoundData:getChannelCount\") | Returns the number of channels in the SoundData.             | 11.0  |       |\n| [SoundData:getChannels](sounddata-getchannels \"SoundData:getChannels\")             | Returns the number of channels in the stream.                |       | 11.0  |\n| [SoundData:getDuration](sounddata-getduration \"SoundData:getDuration\")             | Gets the duration of the sound data.                         | 0.9.0 |       |\n| [SoundData:getSample](sounddata-getsample \"SoundData:getSample\")                   | Gets the value of the samplepoint at the specified position. |       |       |\n| [SoundData:getSampleCount](sounddata-getsamplecount \"SoundData:getSampleCount\")    | Returns the sample count of the SoundData.                   | 0.9.0 |       |\n| [SoundData:getSampleRate](sounddata-getsamplerate \"SoundData:getSampleRate\")       | Returns the sample rate of the SoundData.                    |       |       |\n| [SoundData:setSample](sounddata-setsample \"SoundData:setSample\")                   | Sets the sample at the specified position.                   |       |       |\n\n## Supertypes\n\n- [Data](data \"Data\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.sound](love.sound \"love.sound\")\n- [love.audio](love.audio \"love.audio\")\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SoundData](https://love2d.org/wiki/SoundData)"
- name: SoundData:getBitDepth
  id: sounddata-getbitdepth
  summary: Available since LÖVE 0.9.0 It has been renamed from SoundData:getBits
  description: "# SoundData:getBitDepth\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [SoundData:getBits](sounddata-getbits \"SoundData:getBits\").\n\nReturns the number of bits per sample.\n\n## Function\n\n### Synopsis\n\n``` lua\nbitdepth = SoundData:getBitDepth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` bitdepth`  \nEither 8, or 16.\n\n## See Also\n\n- [SoundData](sounddata \"SoundData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SoundData:getBitDepth](https://love2d.org/wiki/SoundData:getBitDepth)"
- name: SoundData:getBits
  id: sounddata-getbits
  summary: Removed in LÖVE 0.9.0 It has been renamed to SoundData:getBitDepth
  description: "# SoundData:getBits\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [SoundData:getBitDepth](sounddata-getbitdepth \"SoundData:getBitDepth\").\n\nReturns the number of bits per sample.\n\n## Function\n\n### Synopsis\n\n``` lua\nbits = SoundData:getBits( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` bits`  \nEither 8, or 16.\n\n## See Also\n\n- [SoundData](sounddata \"SoundData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SoundData:getBits](https://love2d.org/wiki/SoundData:getBits)"
- name: SoundData:getChannelCount
  id: sounddata-getchannelcount
  summary: Available since LÖVE 11.0 It has been renamed from SoundData:getChannels
  description: "# SoundData:getChannelCount\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [SoundData:getChannels](sounddata-getchannels \"SoundData:getChannels\").\n\nReturns the number of channels in the SoundData.\n\n## Function\n\n### Synopsis\n\n``` lua\nchannels = SoundData:getChannelCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` channels`  \n1 for mono, 2 for stereo.\n\n## See Also\n\n- [SoundData](sounddata \"SoundData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SoundData:getChannelCount](https://love2d.org/wiki/SoundData:getChannelCount)"
- name: SoundData:getChannels
  id: sounddata-getchannels
  summary: Returns the number of channels in the stream
  description: "# SoundData:getChannels\n\n|                                                                                                                       |\n|-----------------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                                  |\n| This function has been renamed to [SoundData:getChannelCount](sounddata-getchannelcount \"SoundData:getChannelCount\"). |\n\nReturns the number of channels in the stream.\n\n## Function\n\n### Synopsis\n\n``` lua\nchannels = SoundData:getChannels( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` channels`  \n1 for mono, 2 for stereo.\n\n## See Also\n\n- [SoundData](sounddata \"SoundData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SoundData:getChannels](https://love2d.org/wiki/SoundData:getChannels)"
- name: SoundData:getDuration
  id: sounddata-getduration
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# SoundData:getDuration\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the duration of the sound data.\n\n## Function\n\n### Synopsis\n\n``` lua\nduration = SoundData:getDuration( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` duration`  \nThe duration of the sound data in seconds.\n\n## See Also\n\n- [SoundData](sounddata \"SoundData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SoundData:getDuration](https://love2d.org/wiki/SoundData:getDuration)"
- name: SoundData:getSample
  id: sounddata-getsample
  summary: Gets the value of the sample-point at the specified position
  description: "# SoundData:getSample\n\nGets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.\n\n## Function\n\n### Synopsis\n\n``` lua\nsample = SoundData:getSample( i )\n```\n\n### Arguments\n\n[`number`](number \"number\")` i`  \nAn integer value specifying the position of the sample (starting at 0).\n\n### Returns\n\n[`number`](number \"number\")` sample`  \nThe normalized samplepoint (range -1.0 to 1.0).\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nGets the value of a sample using an explicit sample index instead of interleaving them in the sample position parameter.\n\n### Synopsis\n\n``` lua\nsample = SoundData:getSample( i, channel )\n```\n\n### Arguments\n\n[`number`](number \"number\")` i`  \nAn integer value specifying the position of the sample (starting at 0).\n\n[`number`](number \"number\")` channel`  \nThe index of the channel to get within the given sample.\n\n### Returns\n\n[`number`](number \"number\")` sample`  \nThe normalized samplepoint (range -1.0 to 1.0).\n\n  \n\n## See Also\n\n- [SoundData](sounddata \"SoundData\")\n- [SoundData:setSample](sounddata-setsample \"SoundData:setSample\")\n- [SoundData:getSampleCount](sounddata-getsamplecount \"SoundData:getSampleCount\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SoundData:getSample](https://love2d.org/wiki/SoundData:getSample)"
- name: SoundData:getSampleCount
  id: sounddata-getsamplecount
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# SoundData:getSampleCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nReturns the number of samples per channel of the SoundData.\n\n## Function\n\n### Synopsis\n\n``` lua\ncount = SoundData:getSampleCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` count`  \nTotal number of samples.\n\n## See Also\n\n- [SoundData](sounddata \"SoundData\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SoundData:getSampleCount](https://love2d.org/wiki/SoundData:getSampleCount)"
- name: SoundData:getSampleRate
  id: sounddata-getsamplerate
  summary: Returns the sample rate of the SoundData
  description: "# SoundData:getSampleRate\n\nReturns the sample rate of the SoundData.\n\n## Function\n\n### Synopsis\n\n``` lua\nrate = SoundData:getSampleRate( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` rate`  \nNumber of samples per second.\n\n## See Also\n\n- [SoundData](sounddata \"SoundData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SoundData:getSampleRate](https://love2d.org/wiki/SoundData:getSampleRate)"
- name: SoundData:setSample
  id: sounddata-setsample
  summary: Sets the value of the sample-point at the specified position
  description: "# SoundData:setSample\n\nSets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.\n\n## Function\n\n### Synopsis\n\n``` lua\nSoundData:setSample( i, sample )\n```\n\n### Arguments\n\n[`number`](number \"number\")` i`  \nAn integer value specifying the position of the sample (starting at 0).\n\n[`number`](number \"number\")` sample`  \nThe normalized samplepoint (range -1.0 to 1.0).\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis variant is not supported in earlier versions.\n\nSets the value of a sample using an explicit sample index instead of interleaving them in the sample position parameter.\n\n### Synopsis\n\n``` lua\nSoundData:setSample( i, channel, sample )\n```\n\n### Arguments\n\n[`number`](number \"number\")` i`  \nAn integer value specifying the position of the sample (starting at 0).\n\n[`number`](number \"number\")` channel`  \nThe index of the channel to set within the given sample.\n\n[`number`](number \"number\")` sample`  \nThe normalized samplepoint (range -1.0 to 1.0).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [SoundData](sounddata \"SoundData\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SoundData:setSample](https://love2d.org/wiki/SoundData:setSample)"
- name: Source
  id: source
  summary: A Source represents audio you can play back
  description: "# Source\n\nA Source represents audio you can play back. You can do interesting things with Sources, like set the volume, pitch, and its position relative to the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources.\n\nThe Source controls (play/pause/stop) act according to the following state table.\n\n|         |                |           |\n|---------|----------------|-----------|\n|         | Playing        | Paused    |\n| play()  | No change      | Play      |\n| stop()  | Pause + Rewind | Rewind    |\n| pause() | Pause          | No change |\n\nAnd for fans of flowcharts (note: omitted calls have no effect, stopping always rewinds).\n\n[](https://love2d.org/wiki/File:NewSourceControls.png)\n\n## Constructors\n\n|                                                                                                |                                                                                                                      |      |     |\n|------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------|------|-----|\n| [love.audio.newQueueableSource](love.audio.newqueueablesource \"love.audio.newQueueableSource\") | Creates a new Source usable for real-time generated sound playback with [Source:queue](source-queue \"Source:queue\"). | 11.0 |     |\n| [love.audio.newSource](love.audio.newsource \"love.audio.newSource\")                            | Creates a new **Source** from a file, [SoundData](sounddata \"SoundData\"), or [Decoder](decoder \"Decoder\").           |      |     |\n\n## Functions\n\n|                                                                                                   |                                                                                                                       |        |        |\n|---------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------|--------|--------|\n| [Object:release](object-release \"Object:release\")                                                 | Immediately destroys the object's Lua reference.                                                                      | 11.0   |        |\n| [Object:type](object-type \"Object:type\")                                                          | Gets the type of the object as a string.                                                                              |        |        |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                                    | Checks whether an object is of a certain type.                                                                        |        |        |\n| [Source:clone](source-clone \"Source:clone\")                                                       | Creates an identical copy of the Source in the stopped state.                                                         | 0.9.1  |        |\n| [Source:getActiveEffects](source-getactiveeffects \"Source:getActiveEffects\")                      | Gets a list of the Source's active effect names.                                                                      | 11.0   |        |\n| [Source:getAirAbsorption](source-getairabsorption \"Source:getAirAbsorption\")                      | Gets the amount of air absorption applied to the Source.                                                              | 11.2   |        |\n| [Source:getAttenuationDistances](source-getattenuationdistances \"Source:getAttenuationDistances\") | Gets the reference and maximum attenuation distances of the Source.                                                   | 0.9.0  |        |\n| [Source:getChannelCount](source-getchannelcount \"Source:getChannelCount\")                         | Gets the number of channels in the Source.                                                                            | 11.0   |        |\n| [Source:getChannels](source-getchannels \"Source:getChannels\")                                     | Gets the number of channels in the Source.                                                                            | 0.9.0  |        |\n| [Source:getCone](source-getcone \"Source:getCone\")                                                 | Gets the Source's directional volume cones.                                                                           | 0.9.0  |        |\n| [Source:getDirection](source-getdirection \"Source:getDirection\")                                  | Gets the direction of the Source.                                                                                     | 0.7.0  |        |\n| [Source:getDistance](source-getdistance \"Source:getDistance\")                                     | Returns the reference and maximum distance of the source.                                                             | 0.8.0  | 0.9.0  |\n| [Source:getDuration](source-getduration \"Source:getDuration\")                                     | Gets the duration of the Source.                                                                                      | 0.10.0 |        |\n| [Source:getEffect](source-geteffect \"Source:getEffect\")                                           | Retrieve filter settings associated to a specific effect.                                                             | 11.0   |        |\n| [Source:getFilter](source-getfilter \"Source:getFilter\")                                           | Gets the [filter](source-setfilter \"Source:setFilter\") settings currently applied to the Source.                      | 11.0   |        |\n| [Source:getFreeBufferCount](source-getfreebuffercount \"Source:getFreeBufferCount\")                | Gets the number of free buffer slots of a queueable Source.                                                           | 11.0   |        |\n| [Source:getPitch](source-getpitch \"Source:getPitch\")                                              | Gets the current pitch of the Source.                                                                                 |        |        |\n| [Source:getPosition](source-getposition \"Source:getPosition\")                                     | Gets the position of the Source.                                                                                      | 0.7.0  |        |\n| [Source:getRolloff](source-getrolloff \"Source:getRolloff\")                                        | Returns the rolloff factor of the source.                                                                             | 0.8.0  |        |\n| [Source:getType](source-gettype \"Source:getType\")                                                 | Gets the type of the Source.                                                                                          | 0.10.0 |        |\n| [Source:getVelocity](source-getvelocity \"Source:getVelocity\")                                     | Gets the velocity of the Source.                                                                                      | 0.7.0  |        |\n| [Source:getVolume](source-getvolume \"Source:getVolume\")                                           | Gets the current volume of the Source.                                                                                |        |        |\n| [Source:getVolumeLimits](source-getvolumelimits \"Source:getVolumeLimits\")                         | Returns the volume limits of the source.                                                                              | 0.8.0  |        |\n| [Source:isLooping](source-islooping \"Source:isLooping\")                                           | Returns whether the Source will loop.                                                                                 |        |        |\n| [Source:isPaused](source-ispaused \"Source:isPaused\")                                              | Returns whether the Source is paused.                                                                                 |        | 11.0   |\n| [Source:isPlaying](source-isplaying \"Source:isPlaying\")                                           | Returns whether the Source is playing.                                                                                | 0.9.0  |        |\n| [Source:isRelative](source-isrelative \"Source:isRelative\")                                        | Gets whether the Source's position and direction are relative to the listener.                                        | 0.9.0  |        |\n| [Source:isStatic](source-isstatic \"Source:isStatic\")                                              | Returns whether the Source is static.                                                                                 | 0.7.0  | 0.10.0 |\n| [Source:isStopped](source-isstopped \"Source:isStopped\")                                           | Returns whether the Source is stopped.                                                                                |        | 11.0   |\n| [Source:pause](source-pause \"Source:pause\")                                                       | Pauses a source.                                                                                                      | 0.7.0  |        |\n| [Source:play](source-play \"Source:play\")                                                          | Plays a source.                                                                                                       | 0.7.0  |        |\n| [Source:queue](source-queue \"Source:queue\")                                                       | Queues SoundData for playback in a [queueable Source](love.audio.newqueueablesource \"love.audio.newQueueableSource\"). | 11.0   |        |\n| [Source:resume](source-resume \"Source:resume\")                                                    | Resumes a paused source.                                                                                              | 0.7.0  | 11.0   |\n| [Source:rewind](source-rewind \"Source:rewind\")                                                    | Rewinds a source.                                                                                                     | 0.7.0  | 11.0   |\n| [Source:seek](source-seek \"Source:seek\")                                                          | Sets the currently playing position of the Source.                                                                    | 0.8.0  |        |\n| [Source:setAirAbsorption](source-setairabsorption \"Source:setAirAbsorption\")                      | Sets the amount of air absorption applied to the Source.                                                              | 11.2   |        |\n| [Source:setAttenuationDistances](source-setattenuationdistances \"Source:setAttenuationDistances\") | Sets the reference and maximum attenuation distances of the Source.                                                   | 0.9.0  |        |\n| [Source:setCone](source-setcone \"Source:setCone\")                                                 | Sets the Source's directional volume cones.                                                                           | 0.9.0  |        |\n| [Source:setDirection](source-setdirection \"Source:setDirection\")                                  | Sets the direction of the Source.                                                                                     | 0.7.0  |        |\n| [Source:setDistance](source-setdistance \"Source:setDistance\")                                     | Sets the reference and maximum distance of the source.                                                                | 0.8.0  | 0.9.0  |\n| [Source:setEffect](source-seteffect \"Source:setEffect\")                                           | Applies an audio [effect](effecttype \"EffectType\") to the Source.                                                     | 11.0   |        |\n| [Source:setFilter](source-setfilter \"Source:setFilter\")                                           | Sets a low-pass, high-pass, or band-pass filter to apply when playing the Source.                                     | 11.0   |        |\n| [Source:setLooping](source-setlooping \"Source:setLooping\")                                        | Sets whether the Source should loop.                                                                                  |        |        |\n| [Source:setPitch](source-setpitch \"Source:setPitch\")                                              | Sets the pitch of the Source.                                                                                         |        |        |\n| [Source:setPosition](source-setposition \"Source:setPosition\")                                     | Sets the position of the Source.                                                                                      | 0.7.0  |        |\n| [Source:setRelative](source-setrelative \"Source:setRelative\")                                     | Sets whether the Source's position and direction are relative to the listener.                                        | 0.9.0  |        |\n| [Source:setRolloff](source-setrolloff \"Source:setRolloff\")                                        | Sets the rolloff factor.                                                                                              | 0.8.0  |        |\n| [Source:setVelocity](source-setvelocity \"Source:setVelocity\")                                     | Sets the velocity of the Source.                                                                                      | 0.7.0  |        |\n| [Source:setVolume](source-setvolume \"Source:setVolume\")                                           | Sets the current volume of the Source.                                                                                |        |        |\n| [Source:setVolumeLimits](source-setvolumelimits \"Source:setVolumeLimits\")                         | Sets the volume limits of the source.                                                                                 | 0.8.0  |        |\n| [Source:stop](source-stop \"Source:stop\")                                                          | Stops a source.                                                                                                       | 0.7.0  |        |\n| [Source:tell](source-tell \"Source:tell\")                                                          | Gets the currently playing position of the Source.                                                                    | 0.8.0  |        |\n\n## Enums\n\n|                                       |                               |      |     |\n|---------------------------------------|-------------------------------|------|-----|\n| [FilterType](filtertype \"FilterType\") | Types of filters for Sources. | 11.0 |     |\n| [SourceType](sourcetype \"SourceType\") | Types of audio sources.       |      |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source](https://love2d.org/wiki/Source)"
- name: Source:clone
  id: source-clone
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# Source:clone\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nCreates an identical copy of the Source in the stopped state.\n\nStatic Sources will use significantly less memory and take much less time to be created if **Source:clone** is used to create them instead of [love.audio.newSource](love.audio.newsource \"love.audio.newSource\"), so this method should be preferred when making multiple Sources which play the same sound.\n\n## Function\n\n### Synopsis\n\n``` lua\nsource = Source:clone( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Source`](source \"Source\")` source`  \nThe new identical copy of this Source.\n\n## Notes\n\nCloned Sources inherit all the set-able state of the original Source, but they are initialized stopped.\n\n## See Also\n\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:clone](https://love2d.org/wiki/Source:clone)"
- name: Source:getActiveEffects
  id: source-getactiveeffects
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Source:getActiveEffects\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets a list of the [Source's](source \"Source\") active [effect](effecttype \"EffectType\") names.\n\n## Function\n\n### Synopsis\n\n``` lua\neffects = Source:getActiveEffects()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` effects`  \nA list of the source's active effect names.\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:setEffect](source-seteffect \"Source:setEffect\")\n- [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getActiveEffects](https://love2d.org/wiki/Source:getActiveEffects)"
- name: Source:getAirAbsorption
  id: source-getairabsorption
  summary: Available since LÖVE 11.2 This function is not supported in earlier versions
  description: "# Source:getAirAbsorption\n\n**Available since LÖVE [11.2](https://love2d.org/wiki/11.2 \"11.2\")**  \nThis function is not supported in earlier versions.\n\nGets the amount of air absorption applied to the Source.\n\nBy default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter.\n\n## Function\n\n### Synopsis\n\n``` lua\namount = Source:getAirAbsorption( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` amount`  \nThe amount of air absorption applied to the Source.\n\n## Notes\n\nAudio air absorption functionality is not supported on iOS.\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:setAirAbsorption](source-setairabsorption \"Source:setAirAbsorption\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getAirAbsorption](https://love2d.org/wiki/Source:getAirAbsorption)"
- name: Source:getAttenuationDistances
  id: source-getattenuationdistances
  summary: Available since LÖVE 0.9.0 It has been renamed from Source:getDistance
  description: "# Source:getAttenuationDistances\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [Source:getDistance](source-getdistance \"Source:getDistance\").\n\nGets the reference and maximum attenuation distances of the Source. The values, combined with the current [DistanceModel](distancemodel \"DistanceModel\"), affect how the Source's volume attenuates based on distance from the listener.\n\n## Function\n\n### Synopsis\n\n``` lua\nref, max = Source:getAttenuationDistances( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` ref`  \nThe current reference attenuation distance. If the current [DistanceModel](distancemodel \"DistanceModel\") is clamped, this is the minimum distance before the Source is no longer attenuated.\n\n[`number`](number \"number\")` max`  \nThe current maximum attenuation distance.\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:setAttenuationDistances](source-setattenuationdistances \"Source:setAttenuationDistances\")\n- [love.audio.setDistanceModel](love.audio.setdistancemodel \"love.audio.setDistanceModel\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getAttenuationDistances](https://love2d.org/wiki/Source:getAttenuationDistances)"
- name: Source:getChannelCount
  id: source-getchannelcount
  summary: Available since LÖVE 11.0 It has been renamed from Source:getChannels
  description: "# Source:getChannelCount\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [Source:getChannels](source-getchannels \"Source:getChannels\").\n\nGets the number of channels in the Source. Only 1-channel (mono) Sources can use directional and positional effects.\n\n## Function\n\n### Synopsis\n\n``` lua\nchannels = Source:getChannelCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` channels`  \n1 for mono, 2 for stereo.\n\n## See Also\n\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getChannelCount](https://love2d.org/wiki/Source:getChannelCount)"
- name: Source:getChannels
  id: source-getchannels
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Source:getChannels\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\n|                                                                                                              |\n|--------------------------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                                         |\n| This function has been renamed to [Source:getChannelCount](source-getchannelcount \"Source:getChannelCount\"). |\n\nGets the number of channels in the Source. Only 1-channel (mono) Sources can use directional and positional effects.\n\n## Function\n\n### Synopsis\n\n``` lua\nchannels = Source:getChannels( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` channels`  \n1 for mono, 2 for stereo.\n\n## See Also\n\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getChannels](https://love2d.org/wiki/Source:getChannels)"
- name: Source:getCone
  id: source-getcone
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Source:getCone\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the Source's directional volume cones. Together with [Source:setDirection](source-setdirection \"Source:setDirection\"), the cone angles allow for the Source's volume to vary depending on its direction.\n\n## Function\n\n### Synopsis\n\n``` lua\ninnerAngle, outerAngle, outerVolume = Source:getCone( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` innerAngle`  \nThe inner angle from the Source's direction, in radians. The Source will play at normal volume if the listener is inside the cone defined by this angle.\n\n[`number`](number \"number\")` outerAngle`  \nThe outer angle from the Source's direction, in radians. The Source will play at a volume between the normal and outer volumes, if the listener is in between the cones defined by the inner and outer angles.\n\n[`number`](number \"number\")` outerVolume`  \nThe Source's volume when the listener is outside both the inner and outer cone angles.\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:setCone](source-setcone \"Source:setCone\")\n- [Source:setDirection](source-setdirection \"Source:setDirection\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getCone](https://love2d.org/wiki/Source:getCone)"
- name: Source:getDirection
  id: source-getdirection
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Source:getDirection\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets the direction of the Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y, z = Source:getDirection( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe X part of the direction vector.\n\n[`number`](number \"number\")` y`  \nThe Y part of the direction vector.\n\n[`number`](number \"number\")` z`  \nThe Z part of the direction vector.\n\n## See Also\n\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getDirection](https://love2d.org/wiki/Source:getDirection)"
- name: Source:getDistance
  id: source-getdistance
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Source:getDistance\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [Source:getAttenuationDistances](source-getattenuationdistances \"Source:getAttenuationDistances\").\n\nReturns the reference and maximum distance of the source.\n\nThere's a bug in [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") preventing this function from working\n\n## Function\n\n### Synopsis\n\n``` lua\nref, max = Source:getDistance( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` ref`  \nThe reference distance.\n\n[`number`](number \"number\")` max`  \nThe maximum distance.\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getDistance](https://love2d.org/wiki/Source:getDistance)"
- name: Source:getDuration
  id: source-getduration
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Source:getDuration\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the duration of the Source. For [streaming](sourcetype \"SourceType\") Sources it may not always be sample-accurate, and may return -1 if the duration cannot be determined at all.\n\n## Function\n\n### Synopsis\n\n``` lua\nduration = Source:getDuration( unit )\n```\n\n### Arguments\n\n[`TimeUnit`](timeunit \"TimeUnit\")` unit (\"seconds\")`  \nThe time unit for the return value.\n\n### Returns\n\n[`number`](number \"number\")` duration`  \nThe duration of the Source, or -1 if it cannot be determined.\n\n## See Also\n\n- [Source:tell](source-tell \"Source:tell\")\n- [Source:seek](source-seek \"Source:seek\")\n- [Source](source \"Source\")\n- [Decoder:getDuration](decoder-getduration \"Decoder:getDuration\")\n- [SoundData:getDuration](sounddata-getduration \"SoundData:getDuration\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getDuration](https://love2d.org/wiki/Source:getDuration)"
- name: Source:getEffect
  id: source-geteffect
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Source:getEffect\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the filter settings associated to a specific effect.\n\nThis function returns nil if the effect was applied with no filter settings associated to it.\n\n## Function\n\n### Synopsis\n\n``` lua\nfiltersettings = Source:getEffect( name, filtersettings )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the effect.\n\n[`table`](table \"table\")` filtersettings ({})`  \nAn optional empty table that will be filled with the filter settings.\n\n### Returns\n\n[`table`](table \"table\")` filtersettings`  \nThe settings for the filter associated to this effect, or nil if the effect is not present in this Source or has no filter associated. The table has the following fields:\n\n[`number`](number \"number\")` volume`  \nThe overall volume of the audio.\n\n[`number`](number \"number\")` highgain`  \nVolume of high-frequency audio. Only applies to low-pass and band-pass filters.\n\n[`number`](number \"number\")` lowgain`  \nVolume of low-frequency audio. Only applies to high-pass and band-pass filters.\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:setEffect](source-seteffect \"Source:setEffect\")\n- [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getEffect](https://love2d.org/wiki/Source:getEffect)"
- name: Source:getFilter
  id: source-getfilter
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Source:getFilter\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the [filter](source-setfilter \"Source:setFilter\") settings currently applied to the Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nsettings = Source:getFilter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` settings (nil)`  \nThe filter settings to use for this Source, or nil if the Source has no active filter. The table has the following fields:\n\n[`FilterType`](filtertype \"FilterType\")` type`  \nThe type of filter to use.\n\n[`number`](number \"number\")` volume`  \nThe overall volume of the audio.\n\n[`number`](number \"number\")` highgain`  \nVolume of high-frequency audio. Only applies to low-pass and band-pass filters.\n\n[`number`](number \"number\")` lowgain`  \nVolume of low-frequency audio. Only applies to high-pass and band-pass filters.\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:setFilter](source-setfilter \"Source:setFilter\")\n- [Source:setEffect](source-seteffect \"Source:setEffect\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getFilter](https://love2d.org/wiki/Source:getFilter)"
- name: Source:getFreeBufferCount
  id: source-getfreebuffercount
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Source:getFreeBufferCount\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the number of free buffer slots in a [queueable Source](love.audio.newqueueablesource \"love.audio.newQueueableSource\"). If the queueable Source is playing, this value will increase up to the amount the Source was created with. If the queueable Source is stopped, it will process all of its internal buffers first, in which case this function will always return the amount it was created with.\n\n## Function\n\n### Synopsis\n\n``` lua\nsettings = Source:getFreeBufferCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` buffers`  \nHow many more SoundData objects can be queued up.\n\n## See Also\n\n- [Source](source \"Source\")\n- [love.audio.newQueueableSource](love.audio.newqueueablesource \"love.audio.newQueueableSource\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getFreeBufferCount](https://love2d.org/wiki/Source:getFreeBufferCount)"
- name: Source:getPitch
  id: source-getpitch
  summary: Gets the current pitch of the Source
  description: "# Source:getPitch\n\nGets the current pitch of the Source.\n\n## Function\n\n### Synopsis\n\n``` lua\npitch = Source:getPitch( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` pitch`  \nThe pitch, where 1.0 is normal.\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getPitch](https://love2d.org/wiki/Source:getPitch)"
- name: Source:getPosition
  id: source-getposition
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Source:getPosition\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets the position of the Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y, z = Source:getPosition( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe X position of the Source.\n\n[`number`](number \"number\")` y`  \nThe Y position of the Source.\n\n[`number`](number \"number\")` z`  \nThe Z position of the Source.\n\n## See Also\n\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getPosition](https://love2d.org/wiki/Source:getPosition)"
- name: Source:getRolloff
  id: source-getrolloff
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Source:getRolloff\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns the rolloff factor of the source.\n\n## Function\n\n### Synopsis\n\n``` lua\nrolloff = Source:getRolloff( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` rolloff`  \nThe rolloff factor.\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getRolloff](https://love2d.org/wiki/Source:getRolloff)"
- name: Source:getType
  id: source-gettype
  summary: Available since LÖVE 0.10.0 It has replaced Source:isStatic
  description: "# Source:getType\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has replaced [Source:isStatic](source-isstatic \"Source:isStatic\").\n\nGets the type of the Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nsourcetype = Source:getType( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`SourceType`](sourcetype \"SourceType\")` sourcetype`  \nThe type of the source.\n\n## See Also\n\n- [Source](source \"Source\")\n- [love.audio.newSource](love.audio.newsource \"love.audio.newSource\")\n- [SourceType](sourcetype \"SourceType\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getType](https://love2d.org/wiki/Source:getType)"
- name: Source:getVelocity
  id: source-getvelocity
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Source:getVelocity\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nGets the velocity of the Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y, z = Source:getVelocity( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe X part of the velocity vector.\n\n[`number`](number \"number\")` y`  \nThe Y part of the velocity vector.\n\n[`number`](number \"number\")` z`  \nThe Z part of the velocity vector.\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:setVelocity](source-setvelocity \"Source:setVelocity\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getVelocity](https://love2d.org/wiki/Source:getVelocity)"
- name: Source:getVolume
  id: source-getvolume
  summary: Gets the current volume of the Source
  description: "# Source:getVolume\n\nGets the current volume of the Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nvolume = Source:getVolume( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` volume`  \nThe volume of the Source, where 1.0 is normal volume.\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getVolume](https://love2d.org/wiki/Source:getVolume)"
- name: Source:getVolumeLimits
  id: source-getvolumelimits
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Source:getVolumeLimits\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nReturns the volume limits of the source.\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, max = Source:getVolumeLimits( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` min`  \nThe minimum volume.\n\n[`number`](number \"number\")` max`  \nThe maximum volume.\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:getVolumeLimits](https://love2d.org/wiki/Source:getVolumeLimits)"
- name: Source:isLooping
  id: source-islooping
  summary: Returns whether the Source will loop
  description: "# Source:isLooping\n\nReturns whether the Source will loop.\n\n## Function\n\n### Synopsis\n\n``` lua\nloop = Source:isLooping( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` loop`  \nTrue if the Source will loop, false otherwise.\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:isLooping](https://love2d.org/wiki/Source:isLooping)"
- name: Source:isPaused
  id: source-ispaused
  summary: Removed in LÖVE 11.0 It has been replaced by Source:isPlaying
  description: "# Source:isPaused\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been replaced by [Source:isPlaying](source-isplaying \"Source:isPlaying\").\n\nReturns whether the Source is paused.\n\n## Function\n\n### Synopsis\n\n``` lua\npaused = Source:isPaused( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` paused`  \nTrue if the Source is paused, false otherwise.\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:isPaused](https://love2d.org/wiki/Source:isPaused)"
- name: Source:isPlaying
  id: source-isplaying
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Source:isPlaying\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nReturns whether the Source is playing.\n\n## Function\n\n### Synopsis\n\n``` lua\nplaying = Source:isPlaying( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` playing`  \nTrue if the Source is playing, false otherwise.\n\n## See Also\n\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:isPlaying](https://love2d.org/wiki/Source:isPlaying)"
- name: Source:isRelative
  id: source-isrelative
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Source:isRelative\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Source's position, velocity, direction, and cone angles are relative to the listener.\n\n## Function\n\n### Synopsis\n\n``` lua\nrelative = Source:isRelative( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` relative`  \nTrue if the position, velocity, direction and cone angles are relative to the listener, false if they're absolute.\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:setRelative](source-setrelative \"Source:setRelative\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:isRelative](https://love2d.org/wiki/Source:isRelative)"
- name: Source:isStatic
  id: source-isstatic
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.10.0 It has been replaced by Source:getType
  description: "# Source:isStatic\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nIt has been replaced by [Source:getType](source-gettype \"Source:getType\").\n\nReturns whether the Source is static.\n\n## Function\n\n### Synopsis\n\n``` lua\nstatic = Source:isStatic( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` static`  \nTrue if the Source is static, false otherwise.\n\n## See Also\n\n- [Source](source \"Source\")\n- [SourceType](sourcetype \"SourceType\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:isStatic](https://love2d.org/wiki/Source:isStatic)"
- name: Source:isStopped
  id: source-isstopped
  summary: Removed in LÖVE 11.0 It has been replaced by Source:isPlaying
  description: "# Source:isStopped\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been replaced by [Source:isPlaying](source-isplaying \"Source:isPlaying\").\n\nReturns whether the Source is stopped.\n\n## Function\n\n### Synopsis\n\n``` lua\nstopped = Source:isStopped( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` stopped`  \nTrue if the Source is stopped, false otherwise.\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:isStopped](https://love2d.org/wiki/Source:isStopped)"
- name: Source:pause
  id: source-pause
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Source:pause\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nPauses the Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:pause()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:pause](https://love2d.org/wiki/Source:pause)"
- name: Source:play
  id: source-play
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Source:play\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nStarts playing the Source.\n\n## Function\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nsuccess = Source:play()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the Source was able to successfully start playing.\n\n## Function\n\n**Removed in LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nSource:play()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:play](https://love2d.org/wiki/Source:play)"
- name: Source:queue
  id: source-queue
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Source:queue\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nQueues SoundData for playback in a [queueable Source](love.audio.newqueueablesource \"love.audio.newQueueableSource\").\n\nThis method requires the Source to be created via [love.audio.newQueueableSource](love.audio.newqueueablesource \"love.audio.newQueueableSource\").\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = Source:queue( soundData, length )\n```\n\n### Arguments\n\n[`SoundData`](sounddata \"SoundData\")` soundData`  \nThe data to queue. The SoundData's sample rate, bit depth, and channel count must match the Source's.\n\n[`number`](number \"number\")` length (`[`sounddata:getSize()`](data-getsize \"Data:getSize\")`)`  \nLength in bytes to queue.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the data was successfully queued for playback, false if there were no [available buffers](source-getfreebuffercount \"Source:getFreeBufferCount\") to use for queueing.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = Source:queue( soundData, offset, length )\n```\n\n### Arguments\n\n[`SoundData`](sounddata \"SoundData\")` soundData`  \nThe data to queue. The SoundData's sample rate, bit depth, and channel count must match the Source's.\n\n[`number`](number \"number\")` offset`  \nStarting position in bytes to queue.\n\n[`number`](number \"number\")` length`  \nLength in bytes to queue starting from specified offset.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nTrue if the data was successfully queued for playback, false if there were no [available buffers](source-getfreebuffercount \"Source:getFreeBufferCount\") to use for queueing.\n\n## Notes\n\nTo convert sample unit to bytes, multiply the sample unit by `SoundData:getBitDepth() * SoundData:getChannelCount() / 8`.\n\n## See Also\n\n- [Source](source \"Source\")\n- [love.audio.newQueueableSource](love.audio.newqueueablesource \"love.audio.newQueueableSource\")\n- [SourceType](sourcetype \"SourceType\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:queue](https://love2d.org/wiki/Source:queue)"
- name: Source:resume
  id: source-resume
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 11.0 Use Source:play instead
  description: "# Source:resume\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nUse [Source:play](source-play \"Source:play\") instead.\n\nResumes a paused Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:resume()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:resume](https://love2d.org/wiki/Source:resume)"
- name: Source:rewind
  id: source-rewind
  summary: Rewinds a Source
  description: "# Source:rewind\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been replaced by [Source:stop](source-stop \"Source:stop\") or [Source:seek](source-seek \"Source:seek\")(0).\n\nRewinds a Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:rewind()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:rewind](https://love2d.org/wiki/Source:rewind)"
- name: Source:seek
  id: source-seek
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Source:seek\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nSets the currently playing position of the Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:seek( offset, unit )\n```\n\n### Arguments\n\n[`number`](number \"number\")` offset`  \nThe position to seek to.\n\n[`TimeUnit`](timeunit \"TimeUnit\")` unit (\"seconds\")`  \nThe unit of the position value.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source:tell](source-tell \"Source:tell\")\n- [Source:getDuration](source-getduration \"Source:getDuration\")\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:seek](https://love2d.org/wiki/Source:seek)"
- name: Source:setAirAbsorption
  id: source-setairabsorption
  summary: Available since LÖVE 11.2 This function is not supported in earlier versions
  description: "# Source:setAirAbsorption\n\n**Available since LÖVE [11.2](https://love2d.org/wiki/11.2 \"11.2\")**  \nThis function is not supported in earlier versions.\n\nSets the amount of air absorption applied to the Source.\n\nBy default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter.\n\nAir absorption can simulate sound transmission through foggy air, dry air, smoky atmosphere, etc. It can be used to simulate different atmospheric conditions within different locations in an area.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:setAirAbsorption( amount )\n```\n\n### Arguments\n\n[`number`](number \"number\")` amount`  \nThe amount of air absorption applied to the Source. Must be between 0 and 10.\n\n### Returns\n\nNothing.\n\n## Notes\n\nAudio air absorption functionality is not supported on iOS.\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:getAirAbsorption](source-getairabsorption \"Source:getAirAbsorption\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setAirAbsorption](https://love2d.org/wiki/Source:setAirAbsorption)"
- name: Source:setAttenuationDistances
  id: source-setattenuationdistances
  summary: Available since LÖVE 0.9.0 It has been renamed from Source:setDistance
  description: "# Source:setAttenuationDistances\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [Source:setDistance](source-setdistance \"Source:setDistance\").\n\nSets the reference and maximum attenuation distances of the Source. The parameters, combined with the current [DistanceModel](distancemodel \"DistanceModel\"), affect how the Source's volume attenuates based on distance. Distance attenuation is only applicable to Sources based on mono (rather than stereo) audio.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:setAttenuationDistances( ref, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ref`  \nThe new reference attenuation distance. If the current [DistanceModel](distancemodel \"DistanceModel\") is clamped, this is the minimum attenuation distance.\n\n[`number`](number \"number\")` max`  \nThe new maximum attenuation distance.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:getAttenuationDistances](source-getattenuationdistances \"Source:getAttenuationDistances\")\n- [love.audio.setDistanceModel](love.audio.setdistancemodel \"love.audio.setDistanceModel\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setAttenuationDistances](https://love2d.org/wiki/Source:setAttenuationDistances)"
- name: Source:setCone
  id: source-setcone
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Source:setCone\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the Source's directional volume cones. Together with [Source:setDirection](source-setdirection \"Source:setDirection\"), the cone angles allow for the Source's volume to vary depending on its direction.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:setCone( innerAngle, outerAngle, outerVolume )\n```\n\n### Arguments\n\n[`number`](number \"number\")` innerAngle`  \nThe inner angle from the Source's direction, in radians. The Source will play at normal volume if the listener is inside the cone defined by this angle.\n\n[`number`](number \"number\")` outerAngle`  \nThe outer angle from the Source's direction, in radians. The Source will play at a volume between the normal and outer volumes, if the listener is in between the cones defined by the inner and outer angles.\n\n[`number`](number \"number\")` outerVolume (0)`  \nThe Source's volume when the listener is outside both the inner and outer cone angles.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:getCone](source-getcone \"Source:getCone\")\n- [Source:setDirection](source-setdirection \"Source:setDirection\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setCone](https://love2d.org/wiki/Source:setCone)"
- name: Source:setDirection
  id: source-setdirection
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Source:setDirection\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nSets the direction vector of the Source. A zero vector makes the source non-directional.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:setDirection( x, y, z )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe X part of the direction vector.\n\n[`number`](number \"number\")` y`  \nThe Y part of the direction vector.\n\n[`number`](number \"number\")` z`  \nThe Z part of the direction vector.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setDirection](https://love2d.org/wiki/Source:setDirection)"
- name: Source:setDistance
  id: source-setdistance
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Source:setDistance\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [Source:setAttenuationDistances](source-setattenuationdistances \"Source:setAttenuationDistances\").\n\nSets the reference and maximum distance of the source.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:setDistance( ref, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ref`  \nThe new reference distance.\n\n[`number`](number \"number\")` max`  \nThe new maximum distance.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setDistance](https://love2d.org/wiki/Source:setDistance)"
- name: Source:setEffect
  id: source-seteffect
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Source:setEffect\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nApplies an audio [effect](effecttype \"EffectType\") to the Source.\n\nThe effect must have been previously defined using [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\").\n\n## Function\n\nApplies the given previously defined effect to this Source.\n\n### Synopsis\n\n``` lua\nsuccess = Source:setEffect( name, enable )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the effect previously set up with [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\").\n\n[`boolean`](boolean \"boolean\")` enable (true)`  \nIf false and the given effect name was previously enabled on this Source, disables the effect.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the effect was successfully applied to this Source.\n\n## Function\n\nApplies the given previously defined effect to this Source, and applies a [filter](source-setfilter \"Source:setFilter\") to the Source which affects the sound fed into the effect.\n\n### Synopsis\n\n``` lua\nsuccess = Source:setEffect( name, filtersettings )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the effect previously set up with [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\").\n\n[`table`](table \"table\")` filtersettings`  \nThe filter settings to apply prior to the effect, with the following fields:\n\n[`FilterType`](filtertype \"FilterType\")` type`  \nThe type of filter to use.\n\n[`number`](number \"number\")` volume`  \nThe overall volume of the audio. Must be between 0 and 1.\n\n[`number`](number \"number\")` highgain`  \nVolume of high-frequency audio. Only applies to low-pass and band-pass filters. Must be between 0 and 1.\n\n[`number`](number \"number\")` lowgain`  \nVolume of low-frequency audio. Only applies to high-pass and band-pass filters. Must be between 0 and 1.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the effect and filter were successfully applied to this Source.\n\n## Notes\n\nAudio effect functionality is not supported on iOS.\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:getEffect](source-geteffect \"Source:getEffect\")\n- [Source:setFilter](source-setfilter \"Source:setFilter\")\n- [love.audio.setEffect](love.audio.seteffect \"love.audio.setEffect\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setEffect](https://love2d.org/wiki/Source:setEffect)"
- name: Source:setFilter
  id: source-setfilter
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Source:setFilter\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nSets a low-pass, high-pass, or band-pass filter to apply when playing the Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nsuccess = Source:setFilter( settings )\n```\n\n### Arguments\n\n[`table`](table \"table\")` settings`  \nThe filter settings to use for this Source, with the following fields:\n\n[`FilterType`](filtertype \"FilterType\")` type`  \nThe type of filter to use.\n\n[`number`](number \"number\")` volume`  \nThe overall volume of the audio. Must be between 0 and 1.\n\n[`number`](number \"number\")` highgain`  \nVolume of high-frequency audio. Only applies to low-pass and band-pass filters. Must be between 0 and 1.\n\n[`number`](number \"number\")` lowgain`  \nVolume of low-frequency audio. Only applies to high-pass and band-pass filters. Must be between 0 and 1.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` success`  \nWhether the filter was successfully applied to the Source.\n\n## Function\n\nDisables filtering on this Source.\n\n### Synopsis\n\n``` lua\nSource:setFilter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Playing music at half volume with a low pass filter applied\n\n``` lua\nfunction love.load()\n    local source = love.audio.newSource('music.ogg', 'stream')\n    source:setFilter {\n        type = 'lowpass',\n        volume = .5,\n        highgain = .4,\n    }\n    source:play()\nend\n```\n\n## Notes\n\nAudio filter functionality is not supported on iOS.\n\nWhile the cutoff frequency cannot be set directly, changing high/lowgain has the effect of altering the cutoff. See it explained in [this thread](https://github.com/kcat/openal-soft/issues/164).\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:getFilter](source-getfilter \"Source:getFilter\")\n- [Source:setEffect](source-seteffect \"Source:setEffect\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setFilter](https://love2d.org/wiki/Source:setFilter)"
- name: Source:setLooping
  id: source-setlooping
  summary: Sets whether the Source should loop
  description: "# Source:setLooping\n\nSets whether the Source should loop.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:setLooping( loop )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` loop`  \nTrue if the source should loop, false otherwise.\n\n### Returns\n\nNothing.\n\n## Examples\n\n``` lua\nfunction love.load()\n    music = love.audio.newSource(\"music_loop.wav\")\n \n    music:setLooping(true)\n    music:play()\n    -- Music will now play forever, until stopped or paused.\nend\n```\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setLooping](https://love2d.org/wiki/Source:setLooping)"
- name: Source:setPitch
  id: source-setpitch
  summary: Sets the pitch of the Source
  description: "# Source:setPitch\n\nSets the pitch of the Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:setPitch( pitch )\n```\n\n### Arguments\n\n[`number`](number \"number\")` pitch`  \nCalculated with regard to 1 being the base pitch. Each reduction by 50 percent equals a pitch shift of -12 semitones (one octave reduction). Each doubling equals a pitch shift of 12 semitones (one octave increase). Zero is not a legal value.\n\n### Returns\n\nNothing.\n\n## Examples\n\n``` lua\nfunction love.load()\n    sound = love.audio.newSource(\"sound.wav\")\n \n    -- Note that this code, as-is, will set the pitch to 1.0, as per the last line, and that's how sound:play() will play it back.\n    sound:setPitch(0.5) -- One octave lower\n    sound:setPitch(2) -- One octave higher\n    sound:setPitch(1) -- Reset to normal pitch\nend\n```\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setPitch](https://love2d.org/wiki/Source:setPitch)"
- name: Source:setPosition
  id: source-setposition
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Source:setPosition\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nSets the position of the Source. Please note that this only works for mono (i.e. non-stereo) sound files!\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:setPosition( x, y, z )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe X position of the Source.\n\n[`number`](number \"number\")` y`  \nThe Y position of the Source.\n\n[`number`](number \"number\")` z`  \nThe Z position of the Source.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source](source \"Source\")\n- [love.audio.setPosition](love.audio.setposition \"love.audio.setPosition\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setPosition](https://love2d.org/wiki/Source:setPosition)"
- name: Source:setRelative
  id: source-setrelative
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Source:setRelative\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets whether the [Source](source \"Source\")'s position, velocity, direction, and cone angles are relative to the listener, or absolute.\n\nBy default, all sources are absolute and therefore relative to the origin of love's coordinate system \\[0, 0, 0\\]. Only absolute sources are affected by the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:setRelative( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable (false)`  \nTrue to make the position, velocity, direction and cone angles relative to the listener, false to make them absolute.\n\n### Returns\n\nNothing.\n\n### Absolute Source Demonstration\n\nThis example demonstrates how an absolute source is affected by the position of the listener.\n\n``` lua\nlocal x, y, z = 0, 0, 0;\nlocal snd;\nlocal relative;\n \nfunction love.load()\n    snd = love.audio.newSource('beep.wav', 'static')\n    snd:setLooping(true);\n    snd:play();\n \n    -- By default the sound is not relative.\n    relative = snd:isRelative();\nend\n \nfunction love.keypressed(key)\n    -- Move the listener via WASD.\n    if key == 'a' then\n        x = x - 1;\n    elseif key == 'd' then\n        x = x + 1;\n    elseif key == 'w' then\n        y = y - 1;\n    elseif key == 's' then\n        y = y + 1;\n    end\n    love.audio.setPosition(x, y, z);\n \n    -- Toggle between a relative and absolute source.\n    if key == 'r' then\n        relative = snd:isRelative();\n        snd:setRelative(not relative);\n    end\nend\n \nfunction love.draw()\n    love.graphics.print('Relative: ' .. tostring(relative), 20, 20);\n    love.graphics.print('Listener: (x = ' .. x .. ', y = ' .. y .. ')', 20, 40);\nend\n```\n\n## See Also\n\n- [Source](source \"Source\")\n- [Source:isRelative](source-isrelative \"Source:isRelative\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setRelative](https://love2d.org/wiki/Source:setRelative)"
- name: Source:setRolloff
  id: source-setrolloff
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Source:setRolloff\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nSets the rolloff factor which affects the strength of the used [distance attenuation](distancemodel \"DistanceModel\").\n\nExtended information and detailed formulas can be found in the chapter \"3.4. Attenuation By Distance\" of [OpenAL 1.1 specification](https://www.openal.org/documentation/openal-1.1-specification.pdf).\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:setRolloff( rolloff )\n```\n\n### Arguments\n\n[`number`](number \"number\")` rolloff`  \nThe new rolloff factor.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setRolloff](https://love2d.org/wiki/Source:setRolloff)"
- name: Source:setVelocity
  id: source-setvelocity
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Source:setVelocity\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nSets the velocity of the Source.\n\nThis does **not** change the position of the Source, but lets the application know how it has to calculate the doppler effect.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:setVelocity( x, y, z )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe X part of the velocity vector.\n\n[`number`](number \"number\")` y`  \nThe Y part of the velocity vector.\n\n[`number`](number \"number\")` z`  \nThe Z part of the velocity vector.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setVelocity](https://love2d.org/wiki/Source:setVelocity)"
- name: Source:setVolume
  id: source-setvolume
  summary: Sets the current volume of the Source
  description: "# Source:setVolume\n\nSets the current volume of the Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:setVolume( volume )\n```\n\n### Arguments\n\n[`number`](number \"number\")` volume`  \nThe volume for a Source, where 1.0 is normal volume. Volume cannot be raised above 1.0.\n\n### Returns\n\nNothing.\n\n## Examples\n\nMake a sound quieter or completely silent.\n\n``` lua\nfunction love.load()\n    sound = love.audio.newSource(\"sound.wav\")\n \n    -- Note that this code, as-is, will set the volume to 1.0, as per the last line, and that's how sound:play() will play it back.\n    sound:setVolume(0.5) -- 50% volume\n    sound:setVolume(0) -- No sound\n    sound:setVolume(1) -- Reset to maximum volume.\nend\n```\n\nSet different volumes depending on the sound type.\n\n``` lua\nfunction love.load()\n    effect = love.audio.newSource(\"soundeffect.wav\")\n    music = love.audio.newSource(\"music.mp3\")\n \n    masterVolume = 0.5 -- Maximum volume for all sounds\n    effectVolume = 0.75\n    musicVolume = 1\n \n    effect:setVolume(masterVolume * effectVolume)\n    music:setVolume(masterVolume * musicVolume)\nend\n```\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setVolume](https://love2d.org/wiki/Source:setVolume)"
- name: Source:setVolumeLimits
  id: source-setvolumelimits
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Source:setVolumeLimits\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nSets the volume limits of the source. The limits have to be numbers from 0 to 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:setVolumeLimits( min, max )\n```\n\n### Arguments\n\n[`number`](number \"number\")` min`  \nThe minimum volume.\n\n[`number`](number \"number\")` max`  \nThe maximum volume.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:setVolumeLimits](https://love2d.org/wiki/Source:setVolumeLimits)"
- name: Source:stop
  id: source-stop
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Source:stop\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nStops a Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nSource:stop()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:stop](https://love2d.org/wiki/Source:stop)"
- name: Source:tell
  id: source-tell
  summary: Available since LÖVE 0.8.0 This function is not supported in earlier versions
  description: "# Source:tell\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis function is not supported in earlier versions.\n\nGets the currently playing position of the Source.\n\n## Function\n\n### Synopsis\n\n``` lua\nposition = Source:tell( unit )\n```\n\n### Arguments\n\n[`TimeUnit`](timeunit \"TimeUnit\")` unit (\"seconds\")`  \nThe type of unit for the return value.\n\n### Returns\n\n[`number`](number \"number\")` position`  \nThe currently playing position of the [Source](source \"Source\").\n\n## See Also\n\n- [Source:seek](source-seek \"Source:seek\")\n- [Source:getDuration](source-getduration \"Source:getDuration\")\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Source:tell](https://love2d.org/wiki/Source:tell)"
- name: SourceType
  id: sourcetype
  summary: Types of audio sources
  description: "# SourceType\n\nTypes of audio sources.\n\nA good rule of thumb is to use `stream` for music files and `static` for all short sound effects. Basically, you want to avoid loading large files into memory at once.\n\n## Constants\n\nstatic  \nThe whole audio is decoded.\n\nstream  \nThe audio is decoded in chunks when needed.\n\nqueue Available since 11.0  \nThe audio must be [manually queued](source-queue \"Source:queue\") by the user.\n\n  \n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n- [Source](source \"Source\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SourceType](https://love2d.org/wiki/SourceType)"
- name: SpriteBatch
  id: spritebatch
  summary: Using a single image, draw any number of identical copies of the image using a single call to love.graphics.draw(). This can be used, for example, to draw repeating copies of a single background image with high performance
  description: "# SpriteBatch\n\nUsing a single image, draw any number of identical copies of the image using a single call to [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")(). This can be used, for example, to draw repeating copies of a single background image with high performance.\n\nA SpriteBatch can be even more useful when the underlying image is a [texture atlas](https://en.wikipedia.org/wiki/Texture_atlas) (a single image file containing many independent images); by adding [Quads](quad \"Quad\") to the batch, different sub-images from within the atlas can be drawn.\n\n## Constructors\n\n|                                                                                             |                                |     |     |\n|---------------------------------------------------------------------------------------------|--------------------------------|-----|-----|\n| [love.graphics.newSpriteBatch](love.graphics.newspritebatch \"love.graphics.newSpriteBatch\") | Creates a new **SpriteBatch**. |     |     |\n\n## Functions\n\n|                                                                                          |                                                                                                                                                                                                                    |        |        |\n|------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------|--------|\n| [Object:release](object-release \"Object:release\")                                        | Immediately destroys the object's Lua reference.                                                                                                                                                                   | 11.0   |        |\n| [Object:type](object-type \"Object:type\")                                                 | Gets the type of the object as a string.                                                                                                                                                                           |        |        |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                           | Checks whether an object is of a certain type.                                                                                                                                                                     |        |        |\n| [SpriteBatch:add](spritebatch-add \"SpriteBatch:add\")                                     | Adds a sprite to the batch.                                                                                                                                                                                        |        |        |\n| [SpriteBatch:addLayer](spritebatch-addlayer \"SpriteBatch:addLayer\")                      | Adds a sprite to a batch created with an [Array Texture](texturetype \"TextureType\").                                                                                                                               | 11.0   |        |\n| [SpriteBatch:addq](spritebatch-addq \"SpriteBatch:addq\")                                  | Adds a Quad to the batch.                                                                                                                                                                                          |        | 0.9.0  |\n| [SpriteBatch:attachAttribute](spritebatch-attachattribute \"SpriteBatch:attachAttribute\") | Attaches a per-vertex attribute from a [Mesh](mesh \"Mesh\") onto this SpriteBatch, for use when drawing.                                                                                                            | 0.10.0 |        |\n| [SpriteBatch:bind](spritebatch-bind \"SpriteBatch:bind\")                                  | Binds the SpriteBatch to memory for more efficient updating.                                                                                                                                                       | 0.8.0  | 0.10.0 |\n| [SpriteBatch:clear](spritebatch-clear \"SpriteBatch:clear\")                               | Removes all sprites from the buffer.                                                                                                                                                                               |        |        |\n| [SpriteBatch:flush](spritebatch-flush \"SpriteBatch:flush\")                               | Immediately sends all new and modified sprite data to the graphics card.                                                                                                                                           | 0.9.2  |        |\n| [SpriteBatch:getBufferSize](spritebatch-getbuffersize \"SpriteBatch:getBufferSize\")       | Gets the maximum number of sprites the SpriteBatch can hold.                                                                                                                                                       | 0.9.0  |        |\n| [SpriteBatch:getColor](spritebatch-getcolor \"SpriteBatch:getColor\")                      | Gets the color that will be used for the next add and set operations.                                                                                                                                              | 0.9.0  |        |\n| [SpriteBatch:getCount](spritebatch-getcount \"SpriteBatch:getCount\")                      | Gets the number of sprites currently in the SpriteBatch.                                                                                                                                                           | 0.9.0  |        |\n| [SpriteBatch:getImage](spritebatch-getimage \"SpriteBatch:getImage\")                      | Returns the image used by the SpriteBatch.                                                                                                                                                                         | 0.8.0  | 0.10.0 |\n| [SpriteBatch:getTexture](spritebatch-gettexture \"SpriteBatch:getTexture\")                | Gets the texture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) used by the SpriteBatch.                                                                                                                    | 0.9.1  |        |\n| [SpriteBatch:set](spritebatch-set \"SpriteBatch:set\")                                     | Changes a sprite in the batch.                                                                                                                                                                                     | 0.8.0  |        |\n| [SpriteBatch:setBufferSize](spritebatch-setbuffersize \"SpriteBatch:setBufferSize\")       | Sets the maximum number of sprites the SpriteBatch can hold.                                                                                                                                                       | 0.9.0  | 11.0   |\n| [SpriteBatch:setColor](spritebatch-setcolor \"SpriteBatch:setColor\")                      | Sets the color that will be used for the next add or set operations.                                                                                                                                               | 0.8.0  |        |\n| [SpriteBatch:setDrawRange](spritebatch-setdrawrange \"SpriteBatch:setDrawRange\")          | Restricts the drawn sprites in the SpriteBatch to a subset of the total.                                                                                                                                           | 11.0   |        |\n| [SpriteBatch:setImage](spritebatch-setimage \"SpriteBatch:setImage\")                      | Replaces the image used for the sprites.                                                                                                                                                                           | 0.7.2  | 0.10.0 |\n| [SpriteBatch:setLayer](spritebatch-setlayer \"SpriteBatch:setLayer\")                      | Changes a sprite previously added with [add](spritebatch-add \"SpriteBatch:add\") or [addLayer](spritebatch-addlayer \"SpriteBatch:addLayer\"), in a batch created with an [Array Texture](texturetype \"TextureType\"). | 11.0   |        |\n| [SpriteBatch:setTexture](spritebatch-settexture \"SpriteBatch:setTexture\")                | Sets the texture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) used for the sprites in the batch.                                                                                                          | 0.9.1  |        |\n| [SpriteBatch:setq](spritebatch-setq \"SpriteBatch:setq\")                                  | Changes a sprite with a quad in the batch.                                                                                                                                                                         | 0.8.0  | 0.9.0  |\n| [SpriteBatch:unbind](spritebatch-unbind \"SpriteBatch:unbind\")                            | Unbinds the SpriteBatch.                                                                                                                                                                                           | 0.8.0  | 0.10.0 |\n\n## Enums\n\n|                                                         |                                                              |       |     |\n|---------------------------------------------------------|--------------------------------------------------------------|-------|-----|\n| [SpriteBatchUsage](spritebatchusage \"SpriteBatchUsage\") | Usage hints for **SpriteBatches** and [Meshes](mesh \"Mesh\"). | 0.8.0 |     |\n\n## Supertypes\n\n- [Drawable](drawable \"Drawable\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch](https://love2d.org/wiki/SpriteBatch)"
- name: SpriteBatch:add
  id: spritebatch-add
  summary: Adds a sprite to the batch
  description: "# SpriteBatch:add\n\nAdds a sprite to the batch. Sprites are drawn in the order they are added.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nid = SpriteBatch:add( x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe position to draw the object (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position to draw the object (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShear factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShear factor (y-axis).\n\n### Returns\n\n[`number`](number \"number\")` id`  \nAn identifier for the added sprite.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant has replaced [SpriteBatch:addq](spritebatch-addq \"SpriteBatch:addq\").\n\nAdds a [Quad](quad \"Quad\") to the batch.\n\n### Synopsis\n\n``` lua\nid = SpriteBatch:add( quad, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`Quad`](quad \"Quad\")` quad`  \nThe Quad to add.\n\n[`number`](number \"number\")` x`  \nThe position to draw the object (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position to draw the object (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShear factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShear factor (y-axis).\n\n### Returns\n\n[`number`](number \"number\")` id`  \nAn identifier for the added sprite.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nSpriteBatch:add( x, y, r, sx, sy, ox, oy )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe position to draw the object (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position to draw the object (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n### Returns\n\nNothing.\n\n## Notes\n\nThe returned `id`s range from 1 to the set [buffer size](spritebatch-setbuffersize \"SpriteBatch:setBufferSize\"). If the buffer size is exceeded the returned `id` will default to 0 and the sprite won't be drawn.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:set](spritebatch-set \"SpriteBatch:set\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:add](https://love2d.org/wiki/SpriteBatch:add)"
- name: SpriteBatch:addLayer
  id: spritebatch-addlayer
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# SpriteBatch:addLayer\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nAdds a sprite to a batch created with an [Array Texture](texturetype \"TextureType\").\n\n## Function\n\nAdds a layer of the SpriteBatch's Array Texture.\n\n### Synopsis\n\n``` lua\nspriteindex = SpriteBatch:addLayer( layerindex, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`number`](number \"number\")` layerindex`  \nThe index of the layer to use for this sprite.\n\n[`number`](number \"number\")` x (0)`  \nThe position to draw the sprite (x-axis).\n\n[`number`](number \"number\")` y (0)`  \nThe position to draw the sprite (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShearing factor (y-axis).\n\n### Returns\n\n[`number`](number \"number\")` spriteindex`  \nThe index of the added sprite, for use with [SpriteBatch:set](spritebatch-set \"SpriteBatch:set\") or [SpriteBatch:setLayer](spritebatch-setlayer \"SpriteBatch:setLayer\").\n\n## Function\n\nAdds a layer of the SpriteBatch's Array Texture using the specified [Quad](quad \"Quad\").\n\n### Synopsis\n\n``` lua\nspriteindex = SpriteBatch:addLayer( layerindex, quad, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`number`](number \"number\")` layerindex`  \nThe index of the layer to use for this sprite.\n\n[`Quad`](quad \"Quad\")` quad`  \nThe subsection of the texture's layer to use when drawing the sprite.\n\n[`number`](number \"number\")` x (0)`  \nThe position to draw the sprite (x-axis).\n\n[`number`](number \"number\")` y (0)`  \nThe position to draw the sprite (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShearing factor (y-axis).\n\n### Returns\n\n[`number`](number \"number\")` spriteindex`  \nThe index of the added sprite, for use with [SpriteBatch:set](spritebatch-set \"SpriteBatch:set\") or [SpriteBatch:setLayer](spritebatch-setlayer \"SpriteBatch:setLayer\").\n\n### Notes\n\nThe specified layer index overrides any layer index set on the Quad via [Quad:setLayer](https://love2d.org/w/index.php?title=Quad:setLayer&action=edit&redlink=1 \"Quad:setLayer (page does not exist)\").\n\n## Function\n\nAdds a layer of the SpriteBatch's Array Texture using the specified [Transform](transform \"Transform\").\n\n### Synopsis\n\n``` lua\nspriteindex = SpriteBatch:addLayer( layerindex, transform )\n```\n\n### Arguments\n\n[`number`](number \"number\")` layerindex`  \nThe index of the layer to use for this sprite.\n\n[`Transform`](transform \"Transform\")` transform`  \nA transform object.\n\n### Returns\n\n[`number`](number \"number\")` spriteindex`  \nThe index of the added sprite, for use with [SpriteBatch:set](spritebatch-set \"SpriteBatch:set\") or [SpriteBatch:setLayer](spritebatch-setlayer \"SpriteBatch:setLayer\").\n\n## Function\n\nAdds a layer of the SpriteBatch's Array Texture using the specified [Quad](quad \"Quad\") and [Transform](transform \"Transform\").\n\n### Synopsis\n\n``` lua\nspriteindex = SpriteBatch:addLayer( layerindex, quad, transform )\n```\n\n### Arguments\n\n[`number`](number \"number\")` layerindex`  \nThe index of the layer to use for this sprite.\n\n[`Quad`](quad \"Quad\")` quad`  \nThe subsection of the texture's layer to use when drawing the sprite.\n\n[`Transform`](transform \"Transform\")` transform`  \nA transform object.\n\n### Returns\n\n[`number`](number \"number\")` spriteindex`  \nThe index of the added sprite, for use with [SpriteBatch:set](spritebatch-set \"SpriteBatch:set\") or [SpriteBatch:setLayer](spritebatch-setlayer \"SpriteBatch:setLayer\").\n\n### Notes\n\nThe specified layer index overrides any layer index set on the Quad via [Quad:setLayer](https://love2d.org/w/index.php?title=Quad:setLayer&action=edit&redlink=1 \"Quad:setLayer (page does not exist)\").\n\n## Notes\n\nIn order to use an Array Texture or other non-2D texture types as the main texture in a custom [Shader](shader \"Shader\"), the [void effect()](love.graphics.newshader \"love.graphics.newShader\") variant must be used in the pixel shader, and MainTex must be declared as an ArrayImage or sampler2DArray like so: `uniform ArrayImage MainTex;`.\n\n## Examples\n\n### Draw multiple layers of an Array Image in a SpriteBatch\n\n``` lua\nfunction love.load()\n    local sprites = {\"sprite1.png\", \"sprite2.png\"}\n    image = love.graphics.newArrayImage(sprites)\n \n    batch = love.graphics.newSpriteBatch(image)\n    batch:addLayer(1, 50, 50)\n    batch:addLayer(2, 250, 50)\nend\n \nfunction love.draw()\n    love.graphics.draw(batch)\nend\n```\n\n### Use a custom shader\n\n``` lua\nshader = love.graphics.newShader[[\nuniform ArrayImage MainTex;\n \nvoid effect() {\n    // Texel uses a third component of the texture coordinate for the layer index, when an Array Texture is passed in.\n    // love sets up the texture coordinates to contain the layer index specified in love.graphics.drawLayer, when\n    // rendering the Array Texture.\n    love_PixelColor = Texel(MainTex, VaryingTexCoord.xyz) * VaryingColor;\n}\n]]\n \nfunction love.load()\n    local sprites = {\"sprite1.png\", \"sprite2.png\"}\n    image = love.graphics.newArrayImage(sprites)\n \n    batch = love.graphics.newSpriteBatch(image)\n    batch:addLayer(1, 50, 50)\n    batch:addLayer(2, 250, 50)\nend\n \nfunction love.draw()\n    love.graphics.setShader(shader)\n    love.graphics.draw(batch)\nend\n```\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:setLayer](spritebatch-setlayer \"SpriteBatch:setLayer\")\n- [love.graphics.newArrayImage](love.graphics.newarrayimage \"love.graphics.newArrayImage\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [love.graphics.newShader](love.graphics.newshader \"love.graphics.newShader\")\n- [TextureType](texturetype \"TextureType\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:addLayer](https://love2d.org/wiki/SpriteBatch:addLayer)"
- name: SpriteBatch:addq
  id: spritebatch-addq
  summary: Removed in LÖVE 0.9.0 It has been merged into SpriteBatch:add
  description: "# SpriteBatch:addq\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been merged into [SpriteBatch:add](spritebatch-add \"SpriteBatch:add\").\n\nAdds a Quad to the batch.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nid = SpriteBatch:addq( quad, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`Quad`](quad \"Quad\")` quad`  \nThe Quad to add.\n\n[`number`](number \"number\")` x`  \nThe position to draw the object (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position to draw the object (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShear factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShear factor (y-axis).\n\n### Returns\n\n[`number`](number \"number\")` id`  \nAn identifier for the added sprite.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nSpriteBatch:addq( quad, x, y, r, sx, sy, ox, oy )\n```\n\n### Arguments\n\n[`Quad`](quad \"Quad\")` quad`  \nThe Quad to add.\n\n[`number`](number \"number\")` x`  \nThe position to draw the object (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position to draw the object (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:add](spritebatch-add \"SpriteBatch:add\")\n- [SpriteBatch:set](spritebatch-set \"SpriteBatch:set\")\n- [SpriteBatch:setq](spritebatch-setq \"SpriteBatch:setq\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:addq](https://love2d.org/wiki/SpriteBatch:addq)"
- name: SpriteBatch:attachAttribute
  id: spritebatch-attachattribute
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# SpriteBatch:attachAttribute\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nAttaches a per-vertex attribute from a [Mesh](mesh \"Mesh\") onto this SpriteBatch, for use when drawing. This can be combined with a [Shader](shader \"Shader\") to augment a SpriteBatch with per-vertex or additional per-sprite information instead of just having per-sprite colors.\n\nEach sprite in a SpriteBatch has 4 vertices in the following order: top-left, bottom-left, top-right, bottom-right. The index returned by [SpriteBatch:add](spritebatch-add \"SpriteBatch:add\") (and used by [SpriteBatch:set](spritebatch-set \"SpriteBatch:set\")) can used to determine the first vertex of a specific sprite with the formula `1 + 4 * ( id - 1 )`.\n\n## Function\n\n### Synopsis\n\n``` lua\nSpriteBatch:attachAttribute( name, mesh )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the vertex attribute to attach.\n\n[`Mesh`](mesh \"Mesh\")` mesh`  \nThe Mesh to get the vertex attribute from.\n\n### Returns\n\nNothing.\n\n## Notes\n\nIf a [Mesh](mesh \"Mesh\") wasn't [created](love.graphics.newmesh \"love.graphics.newMesh\") with a custom vertex format, it will have 3 vertex attributes named `VertexPosition`, `VertexTexCoord`, and `VertexColor`. If vertex attributes with those names are attached to the SpriteBatch, it will override the SpriteBatch's sprite positions, texture coordinates, and sprite colors, respectively.\n\nCustom named attributes can be accessed in a [vertex shader](shader \"Shader\") by declaring them as `attribute vec4 MyCustomAttributeName;` at the top-level of the vertex shader code. The name must match what was specified in the Mesh's vertex format and in the `name` argument of **SpriteBatch:attachAttribute**.\n\nA Mesh must have at least 4 \\* [SpriteBatch:getBufferSize](spritebatch-getbuffersize \"SpriteBatch:getBufferSize\") vertices in order to be attachable to a SpriteBatch.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [Mesh](mesh \"Mesh\")\n- [Mesh:getVertexFormat](mesh-getvertexformat \"Mesh:getVertexFormat\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:attachAttribute](https://love2d.org/wiki/SpriteBatch:attachAttribute)"
- name: SpriteBatch:bind
  id: spritebatch-bind
  summary: Available since LÖVE 0.8.0 It has been renamed from SpriteBatch:lock
  description: "# SpriteBatch:bind\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed from [SpriteBatch:lock](spritebatch-lock \"SpriteBatch:lock\").\n\n|                                                                         |\n|-------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")*** |\n| It happends automatically since this version.                           |\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [SpriteBatch:flush](spritebatch-flush \"SpriteBatch:flush\") if absolutely necessary.\n\n  \nBinds the [SpriteBatch](spritebatch \"SpriteBatch\") to memory for more efficient updating.\n\nBinding a SpriteBatch before updating its content can improve the performance as it doesn't push each update to the graphics card separately. Don't forget to [unbind](spritebatch-unbind \"SpriteBatch:unbind\") the SpriteBatch or the updates won't show up.\n\n## Function\n\n### Synopsis\n\n``` lua\nSpriteBatch:bind( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Updating a SpriteBatch with binding\n\n``` lua\nfunction update_spritebatch(spritebatch)\n    spritebatch:bind()\n \n    for i = 1, 100 do\n        add_tile(spritebatch)\n    end\n \n    spritebatch:unbind()\nend\n```\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:unbind](spritebatch-unbind \"SpriteBatch:unbind\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:bind](https://love2d.org/wiki/SpriteBatch:bind)"
- name: SpriteBatch:clear
  id: spritebatch-clear
  summary: Removes all sprites from the buffer
  description: "# SpriteBatch:clear\n\nRemoves all sprites from the buffer.\n\n## Function\n\n### Synopsis\n\n``` lua\nSpriteBatch:clear( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:clear](https://love2d.org/wiki/SpriteBatch:clear)"
- name: SpriteBatch:flush
  id: spritebatch-flush
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# SpriteBatch:flush\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nImmediately sends all new and modified sprite data in the batch to the graphics card.\n\nNormally it isn't necessary to call this method as love.graphics.draw(spritebatch, ...) will do it automatically if needed, but explicitly using **SpriteBatch:flush** gives more control over when the work happens.\n\nIf this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(spritebatch, ...) calls.\n\n## Function\n\n### Synopsis\n\n``` lua\nSpriteBatch:flush( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Examples\n\n### Initialize a static spritebatch with sprites and immediately send the data to the graphics card\n\n``` lua\nfunction love.load()\n    image = love.graphics.newImage(\"tile.png\")\n    spritebatch = love.graphics.newSpriteBatch(image, 20 * 20, \"static\")\n \n    for y = 1, 20 do\n        for x = 1, 20 do\n            spritebatch:add((x - 1) * 64, (y - 1) * 64)\n        end\n    end\n \n    -- If we call SpriteBatch:flush now then it won't be called internally when the SpriteBatch is drawn for the first time.\n    -- In other words, we're choosing to do the work in love.load instead of the first love.draw.\n    spritebatch:flush()\nend\n \nfunction love.draw()\n    love.graphics.draw(spritebatch, 0, 0)\nend\n```\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:flush](https://love2d.org/wiki/SpriteBatch:flush)"
- name: SpriteBatch:getBufferSize
  id: spritebatch-getbuffersize
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# SpriteBatch:getBufferSize\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the maximum number of sprites the SpriteBatch can hold.\n\n## Function\n\n### Synopsis\n\n``` lua\nsize = SpriteBatch:getBufferSize( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` size`  \nThe maximum number of sprites the batch can hold.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:setBufferSize](spritebatch-setbuffersize \"SpriteBatch:setBufferSize\")\n- [SpriteBatch:getCount](spritebatch-getcount \"SpriteBatch:getCount\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:getBufferSize](https://love2d.org/wiki/SpriteBatch:getBufferSize)"
- name: SpriteBatch:getColor
  id: spritebatch-getcolor
  summary: Available since LÖVE 0.9.0 This method is not supported in earlier versions
  description: "# SpriteBatch:getColor\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis method is not supported in earlier versions.\n\nGets the color that will be used for the next add and set operations.\n\nIf no color has been set with [SpriteBatch:setColor](spritebatch-setcolor \"SpriteBatch:setColor\") or the current SpriteBatch color has been cleared, this method will return nil.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nr, g, b, a = SpriteBatch:getColor( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` r`  \nThe red component (0-1).\n\n[`number`](number \"number\")` g`  \nThe green component (0-1).\n\n[`number`](number \"number\")` b`  \nThe blue component (0-1).\n\n[`number`](number \"number\")` a`  \nThe alpha component (0-1).\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:setColor](spritebatch-setcolor \"SpriteBatch:setColor\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:getColor](https://love2d.org/wiki/SpriteBatch:getColor)"
- name: SpriteBatch:getCount
  id: spritebatch-getcount
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# SpriteBatch:getCount\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the number of sprites currently in the SpriteBatch.\n\n## Function\n\n### Synopsis\n\n``` lua\ncount = SpriteBatch:getCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` count`  \nThe number of sprites currently in the batch.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:getBufferSize](spritebatch-getbuffersize \"SpriteBatch:getBufferSize\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:getCount](https://love2d.org/wiki/SpriteBatch:getCount)"
- name: SpriteBatch:getImage
  id: spritebatch-getimage
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# SpriteBatch:getImage\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [SpriteBatch:getTexture](spritebatch-gettexture \"SpriteBatch:getTexture\") instead.\n\nReturns the image used by the SpriteBatch.\n\n## Function\n\n### Synopsis\n\n``` lua\nimage = SpriteBatch:getImage( )\n```\n\n### Arguments\n\nNone\n\n### Returns\n\n[`Image`](image \"Image\")` image`  \nThe image for the sprites.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:setImage](spritebatch-setimage \"SpriteBatch:setImage\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:getImage](https://love2d.org/wiki/SpriteBatch:getImage)"
- name: SpriteBatch:getTexture
  id: spritebatch-gettexture
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# SpriteBatch:getTexture\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nGets the texture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) used by the SpriteBatch.\n\n## Function\n\n### Synopsis\n\n``` lua\ntexture = SpriteBatch:getTexture( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Texture`](texture \"Texture\")` texture`  \nThe Image or Canvas used by the SpriteBatch.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:setTexture](spritebatch-settexture \"SpriteBatch:setTexture\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:getTexture](https://love2d.org/wiki/SpriteBatch:getTexture)"
- name: SpriteBatch:lock
  id: spritebatch-lock
  summary: © 2006–2020 LÖVE Development Team Licensed under the GNU Free Documentation License, Version 1.3
  description: "# SpriteBatch:lock\n\nThis has been changed to [SpriteBatch:bind](spritebatch-bind \"SpriteBatch:bind\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:lock](https://love2d.org/wiki/SpriteBatch:lock)"
- name: SpriteBatch:set
  id: spritebatch-set
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# SpriteBatch:set\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nChanges a sprite in the batch. This requires the sprite index returned by [SpriteBatch:add](spritebatch-add \"SpriteBatch:add\") or [SpriteBatch:addLayer](spritebatch-addlayer \"SpriteBatch:addLayer\").\n\n## Function\n\n### Synopsis\n\n``` lua\nSpriteBatch:set( spriteindex, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`number`](number \"number\")` spriteindex`  \nThe index of the sprite that will be changed.\n\n[`number`](number \"number\")` x`  \nThe position to draw the object (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position to draw the object (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShear factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShear factor (y-axis).\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant has replaced [SpriteBatch:setq](spritebatch-setq \"SpriteBatch:setq\").\n\nChanges a sprite with a [Quad](quad \"Quad\") in the batch. This requires the index returned by [SpriteBatch:add](spritebatch-add \"SpriteBatch:add\") or [SpriteBatch:addLayer](spritebatch-addlayer \"SpriteBatch:addLayer\").\n\n### Synopsis\n\n``` lua\nSpriteBatch:set( spriteindex, quad, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`number`](number \"number\")` spriteindex`  \nThe index of the sprite that will be changed.\n\n[`Quad`](quad \"Quad\")` quad`  \nThe Quad used on the image of the batch.\n\n[`number`](number \"number\")` x`  \nThe position to draw the object (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position to draw the object (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShear factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShear factor (y-axis).\n\n### Returns\n\nNothing.\n\n## Notes\n\nSpriteBatches do not support removing individual sprites. One can do a pseudo removal (instead of clearing and re-adding everything) by:\n\n``` lua\nSpriteBatch:set(id, 0, 0, 0, 0, 0)\n```\n\nThis makes all the sprite's vertices equal (because the x and y scales are 0), which prevents the GPU from fully processing the sprite when drawing the SpriteBatch.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:add](spritebatch-add \"SpriteBatch:add\")\n- [SpriteBatch:addLayer](spritebatch-addlayer \"SpriteBatch:addLayer\")\n- [SpriteBatch:setLayer](spritebatch-setlayer \"SpriteBatch:setLayer\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:set](https://love2d.org/wiki/SpriteBatch:set)"
- name: SpriteBatch:setBufferSize
  id: spritebatch-setbuffersize
  summary: Available since LÖVE 0.9.0 and removed in LÖVE 11.0 SpriteBatches now automatically grow when necessary
  description: "# SpriteBatch:setBufferSize\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nSpriteBatches now automatically grow when necessary.\n\nSets the maximum number of sprites the SpriteBatch can hold. Existing sprites in the batch (up to the new maximum) will *not* be cleared when this function is called.\n\nThis function can be slow if it is called every frame, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\").\n\n## Function\n\n### Synopsis\n\n``` lua\nSpriteBatch:setBufferSize( size )\n```\n\n### Arguments\n\n[`number`](number \"number\")` size`  \nThe new maximum number of sprites the batch can hold.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:getBufferSize](spritebatch-getbuffersize \"SpriteBatch:getBufferSize\")\n- [SpriteBatch:getCount](spritebatch-getcount \"SpriteBatch:getCount\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:setBufferSize](https://love2d.org/wiki/SpriteBatch:setBufferSize)"
- name: SpriteBatch:setColor
  id: spritebatch-setcolor
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# SpriteBatch:setColor\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets the color that will be used for the next add and set operations. Calling the function without arguments will disable all per-sprite colors for the SpriteBatch.\n\nIn versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\"), color component values were within the range of 0 to 255 instead of 0 to 1.\n\nIn version [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\") and older, the global color set with love.graphics.setColor will not work on the SpriteBatch if any of the sprites has its own color.\n\n## Function\n\n### Synopsis\n\n``` lua\nSpriteBatch:setColor( r, g, b, a )\n```\n\n### Arguments\n\n[`number`](number \"number\")` r`  \nThe amount of red.\n\n[`number`](number \"number\")` g`  \nThe amount of green.\n\n[`number`](number \"number\")` b`  \nThe amount of blue.\n\n[`number`](number \"number\")` a (1)`  \nThe amount of alpha.\n\n### Returns\n\nNothing.\n\n## Function\n\nDisables all per-sprite colors for this SpriteBatch.\n\n### Synopsis\n\n``` lua\nSpriteBatch:setColor( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:getColor](spritebatch-getcolor \"SpriteBatch:getColor\")\n- [SpriteBatch:add](spritebatch-add \"SpriteBatch:add\")\n- [SpriteBatch:set](spritebatch-set \"SpriteBatch:set\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:setColor](https://love2d.org/wiki/SpriteBatch:setColor)"
- name: SpriteBatch:setDrawRange
  id: spritebatch-setdrawrange
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# SpriteBatch:setDrawRange\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nRestricts the drawn sprites in the SpriteBatch to a subset of the total.\n\n## Function\n\n### Synopsis\n\n``` lua\nSpriteBatch:setDrawRange( start, count )\n```\n\n### Arguments\n\n[`number`](number \"number\")` start`  \nThe index of the first sprite to draw. Index 1 corresponds to the first sprite added with [SpriteBatch:add](spritebatch-add \"SpriteBatch:add\").\n\n[`number`](number \"number\")` count`  \nThe number of sprites to draw.\n\n### Returns\n\nNothing.\n\n## Function\n\nAllows all sprites in the SpriteBatch to be drawn.\n\n### Synopsis\n\n``` lua\nSpriteBatch:setDrawRange( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:getDrawRange](https://love2d.org/w/index.php?title=SpriteBatch:getDrawRange&action=edit&redlink=1 \"SpriteBatch:getDrawRange (page does not exist)\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:setDrawRange](https://love2d.org/wiki/SpriteBatch:setDrawRange)"
- name: SpriteBatch:setImage
  id: spritebatch-setimage
  summary: Available since LÖVE 0.7.2 This method is not supported in earlier versions
  description: "# SpriteBatch:setImage\n\n**Available since LÖVE [0.7.2](https://love2d.org/wiki/0.7.2 \"0.7.2\")**  \nThis method is not supported in earlier versions.\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nUse [SpriteBatch:setTexture](spritebatch-settexture \"SpriteBatch:setTexture\") instead.\n\nReplaces the image used for the sprites.\n\n## Function\n\n### Synopsis\n\n``` lua\nSpriteBatch:setImage( image )\n```\n\n### Arguments\n\n[`Image`](image \"Image\")` image`  \nThe new Image to use for the sprites.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:getImage](spritebatch-getimage \"SpriteBatch:getImage\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:setImage](https://love2d.org/wiki/SpriteBatch:setImage)"
- name: SpriteBatch:setLayer
  id: spritebatch-setlayer
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# SpriteBatch:setLayer\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nChanges a sprite previously added with [add](spritebatch-add \"SpriteBatch:add\") or [addLayer](spritebatch-addlayer \"SpriteBatch:addLayer\"), in a batch created with an [Array Texture](texturetype \"TextureType\").\n\n## Function\n\nChanges the sprite in the SpriteBatch.\n\n### Synopsis\n\n``` lua\nSpriteBatch:setLayer( spriteindex, layerindex, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`number`](number \"number\")` spriteindex`  \nThe index of the existing sprite to replace.\n\n[`number`](number \"number\")` layerindex`  \nThe index of the layer in the Array Texture to use for this sprite.\n\n[`number`](number \"number\")` x (0)`  \nThe position to draw the sprite (x-axis).\n\n[`number`](number \"number\")` y (0)`  \nThe position to draw the sprite (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShearing factor (y-axis).\n\n### Returns\n\nNothing.\n\n## Function\n\nAdds a layer of the SpriteBatch's Array Texture using the specified [Quad](quad \"Quad\").\n\n### Synopsis\n\n``` lua\nSpriteBatch:setLayer( spriteindex, layerindex, quad, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`number`](number \"number\")` spriteindex`  \nThe index of the existing sprite to replace.\n\n[`number`](number \"number\")` layerindex`  \nThe index of the layer to use for this sprite.\n\n[`Quad`](quad \"Quad\")` quad`  \nThe subsection of the texture's layer to use when drawing the sprite.\n\n[`number`](number \"number\")` x (0)`  \nThe position to draw the sprite (x-axis).\n\n[`number`](number \"number\")` y (0)`  \nThe position to draw the sprite (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShearing factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShearing factor (y-axis).\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe specified layer index overrides any layer index set on the Quad via [Quad:setLayer](https://love2d.org/w/index.php?title=Quad:setLayer&action=edit&redlink=1 \"Quad:setLayer (page does not exist)\").\n\n## Function\n\nAdds a layer of the SpriteBatch's Array Texture using the specified [Transform](transform \"Transform\").\n\n### Synopsis\n\n``` lua\nSpriteBatch:setLayer( spriteindex, layerindex, transform )\n```\n\n### Arguments\n\n[`number`](number \"number\")` spriteindex`  \nThe index of the existing sprite to replace.\n\n[`number`](number \"number\")` layerindex`  \nThe index of the layer to use for the sprite.\n\n[`Transform`](transform \"Transform\")` transform`  \nA transform object.\n\n### Returns\n\nNothing.\n\n## Function\n\nAdds a layer of the SpriteBatch's Array Texture using the specified [Quad](quad \"Quad\") and [Transform](transform \"Transform\").\n\n### Synopsis\n\n``` lua\nSpriteBatch:setLayer( spriteindex, layerindex, quad, transform )\n```\n\n### Arguments\n\n[`number`](number \"number\")` spriteindex`  \nThe index of the existing sprite to replace.\n\n[`number`](number \"number\")` layerindex`  \nThe index of the layer to use for the sprite.\n\n[`Quad`](quad \"Quad\")` quad`  \nThe subsection of the texture's layer to use when drawing the sprite.\n\n[`Transform`](transform \"Transform\")` transform`  \nA transform object.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe specified layer index overrides any layer index set on the Quad via [Quad:setLayer](https://love2d.org/w/index.php?title=Quad:setLayer&action=edit&redlink=1 \"Quad:setLayer (page does not exist)\").\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:addLayer](spritebatch-addlayer \"SpriteBatch:addLayer\")\n- [love.graphics.newArrayImage](love.graphics.newarrayimage \"love.graphics.newArrayImage\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [love.graphics.newShader](love.graphics.newshader \"love.graphics.newShader\")\n- [TextureType](texturetype \"TextureType\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:setLayer](https://love2d.org/wiki/SpriteBatch:setLayer)"
- name: SpriteBatch:setq
  id: spritebatch-setq
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# SpriteBatch:setq\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been merged into [SpriteBatch:set](spritebatch-set \"SpriteBatch:set\").\n\nChanges a sprite with a quad in the batch. This requires the identifier returned by add and addq.\n\n## Function\n\n### Synopsis\n\n``` lua\nSpriteBatch:setq( id, quad, x, y, r, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`number`](number \"number\")` id`  \nThe identifier of the sprite that will be changed.\n\n[`Quad`](quad \"Quad\")` quad`  \nThe quad used on the image of the batch.\n\n[`number`](number \"number\")` x`  \nThe position to draw the object (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position to draw the object (y-axis).\n\n[`number`](number \"number\")` r (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShear factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShear factor (y-axis).\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:add](spritebatch-add \"SpriteBatch:add\")\n- [SpriteBatch:addq](spritebatch-addq \"SpriteBatch:addq\")\n- [SpriteBatch:set](spritebatch-set \"SpriteBatch:set\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:setq](https://love2d.org/wiki/SpriteBatch:setq)"
- name: SpriteBatch:setTexture
  id: spritebatch-settexture
  summary: Available since LÖVE 0.9.1 This function is not supported in earlier versions
  description: "# SpriteBatch:setTexture\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis function is not supported in earlier versions.\n\nSets the texture ([Image](image \"Image\") or [Canvas](canvas \"Canvas\")) used for the sprites in the batch, when drawing.\n\n## Function\n\n### Synopsis\n\n``` lua\nSpriteBatch:setTexture( texture )\n```\n\n### Arguments\n\n[`Texture`](texture \"Texture\")` texture`  \nThe new Image or Canvas to use for the sprites in the batch.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:getTexture](spritebatch-gettexture \"SpriteBatch:getTexture\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:setTexture](https://love2d.org/wiki/SpriteBatch:setTexture)"
- name: SpriteBatch:unbind
  id: spritebatch-unbind
  summary: Available since LÖVE 0.8.0 It has been renamed from SpriteBatch:unlock
  description: "# SpriteBatch:unbind\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed from [SpriteBatch:unlock](spritebatch-unlock \"SpriteBatch:unlock\").\n\n|                                                                         |\n|-------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")*** |\n| It happens automatically since this version.                            |\n\n**Removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in that and later versions.\n\nUnbinds the [SpriteBatch](spritebatch \"SpriteBatch\").\n\nAll [SpriteBatch:bind](spritebatch-bind \"SpriteBatch:bind\") calls should have a matching *SpriteBatch:unbind* after the batch has been updated.\n\n## Function\n\n### Synopsis\n\n``` lua\nSpriteBatch:unbind( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n- [SpriteBatch:bind](spritebatch-bind \"SpriteBatch:bind\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:unbind](https://love2d.org/wiki/SpriteBatch:unbind)"
- name: SpriteBatch:unlock
  id: spritebatch-unlock
  summary: © 2006–2020 LÖVE Development Team Licensed under the GNU Free Documentation License, Version 1.3
  description: "# SpriteBatch:unlock\n\nThis has been changed to [SpriteBatch:unbind](spritebatch-unbind \"SpriteBatch:unbind\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatch:unlock](https://love2d.org/wiki/SpriteBatch:unlock)"
- name: SpriteBatchUsage
  id: spritebatchusage
  summary: Available since LÖVE 0.8.0 This enum is not supported in earlier versions
  description: "# SpriteBatchUsage\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis enum is not supported in earlier versions.\n\nUsage hints for [SpriteBatches](spritebatch \"SpriteBatch\") and [Meshes](mesh \"Mesh\") to optimize data storage and access.\n\n## Constants\n\ndynamic  \nThe object's data will change occasionally during its lifetime.\n\nstatic  \nThe object will not be modified after initial sprites or vertices are added.\n\nstream  \nThe object data will always change between draws.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.newMesh](love.graphics.newmesh \"love.graphics.newMesh\")\n- [love.graphics.newSpriteBatch](love.graphics.newspritebatch \"love.graphics.newSpriteBatch\")\n- [SpriteBatch](spritebatch \"SpriteBatch\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/SpriteBatchUsage](https://love2d.org/wiki/SpriteBatchUsage)"
- name: StackType
  id: stacktype
  summary: Available since LÖVE 0.9.2 This enum is not supported in earlier versions
  description: "# StackType\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis enum is not supported in earlier versions.\n\nGraphics state stack types used with [love.graphics.push](love.graphics.push \"love.graphics.push\").\n\n## Constants\n\ntransform  \nThe transformation stack ([love.graphics.translate](love.graphics.translate \"love.graphics.translate\"), [love.graphics.rotate](love.graphics.rotate \"love.graphics.rotate\"), etc.)\n\nall  \nAll [love.graphics](love.graphics \"love.graphics\") state, including transform state.\n\n## Notes\n\nAside from the graphics transform state, the `all` Stack Type constant affects the following:\n\n- [background color](love.graphics.setbackgroundcolor \"love.graphics.setBackgroundColor\")\n- [blend mode](love.graphics.setblendmode \"love.graphics.setBlendMode\")\n- [active canvas](love.graphics.setcanvas \"love.graphics.setCanvas\")\n- [current color](love.graphics.setcolor \"love.graphics.setColor\")\n- [color mask](love.graphics.setcolormask \"love.graphics.setColorMask\")\n- [default filter mode](love.graphics.setdefaultfilter \"love.graphics.setDefaultFilter\")\n- [active font](love.graphics.setfont \"love.graphics.setFont\")\n- [scissor rectangle](love.graphics.setscissor \"love.graphics.setScissor\")\n- [active shader](love.graphics.setshader \"love.graphics.setShader\")\n- [wireframe mode](love.graphics.setwireframe \"love.graphics.setWireframe\")\n- [stencil test mode](love.graphics.setstenciltest \"love.graphics.setStencilTest\")\n- [line join mode](love.graphics.setlinejoin \"love.graphics.setLineJoin\")\n- [line style](love.graphics.setlinestyle \"love.graphics.setLineStyle\")\n- [line width](love.graphics.setlinewidth \"love.graphics.setLineWidth\")\n- [point size](love.graphics.setpointsize \"love.graphics.setPointSize\")\n- [point style](love.graphics.setpointstyle \"love.graphics.setPointStyle\")\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.push](love.graphics.push \"love.graphics.push\")\n- [love.graphics.pop](love.graphics.pop \"love.graphics.pop\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/StackType](https://love2d.org/wiki/StackType)"
- name: StencilAction
  id: stencilaction
  summary: Available since LÖVE 0.10.0 This enum is not supported in earlier versions
  description: "# StencilAction\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis enum is not supported in earlier versions.\n\nHow a [stencil function](love.graphics.stencil \"love.graphics.stencil\") modifies the stencil values of pixels it touches.\n\n## Constants\n\nreplace  \nThe stencil value of a pixel will be replaced by the value specified in [love.graphics.stencil](love.graphics.stencil \"love.graphics.stencil\"), if any object touches the pixel.\n\nincrement  \nThe stencil value of a pixel will be incremented by 1 for each object that touches the pixel. If the stencil value reaches 255 it will stay at 255.\n\ndecrement  \nThe stencil value of a pixel will be decremented by 1 for each object that touches the pixel. If the stencil value reaches 0 it will stay at 0.\n\nincrementwrap  \nThe stencil value of a pixel will be incremented by 1 for each object that touches the pixel. If a stencil value of 255 is incremented it will be set to 0.\n\ndecrementwrap  \nThe stencil value of a pixel will be decremented by 1 for each object that touches the pixel. If the stencil value of 0 is decremented it will be set to 255.\n\ninvert  \nThe stencil value of a pixel will be bitwise-inverted for each object that touches the pixel. If a stencil value of 0 is inverted it will become 255.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.stencil](love.graphics.stencil \"love.graphics.stencil\")\n- [love.graphics.setStencilTest](love.graphics.setstenciltest \"love.graphics.setStencilTest\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/StencilAction](https://love2d.org/wiki/StencilAction)"
- name: string
  id: string
  summary: String represents arrays of characters
  description: "# string\n\nFrom the Lua 5.1 [reference manual §2.2](https://www.lua.org/manual/5.1/manual.html#2.2):\n\nString represents arrays of characters. Lua is 8-bit clean: strings can contain any 8-bit character, including embedded zeros ('\\0') (see [§2.1](https://www.lua.org/manual/5.1/manual.html#2.1)).\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/string](https://love2d.org/wiki/string)"
- name: table
  id: table
  summary: The type table implements associative arrays, that is, arrays that can be indexed not only with numbers, but with any value (except nil). Tables can be heterogeneous; that is, they can contain values of all types (except nil). Tables are the sole data structuring mechanism in Lua; they can be used to represent ordinary arrays, symbol tables, sets, records, graphs, trees, etc
  description: "# table\n\nFrom the Lua 5.1 [reference manual §2.2](https://www.lua.org/manual/5.1/manual.html#2.2):\n\nThe type table implements associative arrays, that is, arrays that can be indexed not only with [numbers](number \"number\"), but with any value (except [nil](nil \"nil\")). Tables can be heterogeneous; that is, they can contain values of all types (except [nil](nil \"nil\")). Tables are the sole data structuring mechanism in Lua; they can be used to represent ordinary arrays, symbol tables, sets, records, graphs, trees, etc. To represent records, Lua uses the field name as an index. The language supports this representation by providing a.name as syntactic sugar for a\\[\"name\"\\]. There are several convenient ways to create tables in Lua (see [§2.5.7](https://www.lua.org/manual/5.1/manual.html#2.5.7)).\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/table](https://love2d.org/wiki/table)"
- name: Text
  id: text
  summary: Available since LÖVE 0.10.0 This type is not supported in earlier versions
  description: "# Text\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis type is not supported in earlier versions.\n\nDrawable text.\n\nText may appear blurry if it's rendered at non-integer pixel locations.\n\n## Constructors\n\n|                                                                        |                                         |        |     |\n|------------------------------------------------------------------------|-----------------------------------------|--------|-----|\n| [love.graphics.newText](love.graphics.newtext \"love.graphics.newText\") | Creates a new drawable **Text** object. | 0.10.0 |     |\n\n## Functions\n\n|                                                               |                                                                                        |        |     |\n|---------------------------------------------------------------|----------------------------------------------------------------------------------------|--------|-----|\n| [Object:release](object-release \"Object:release\")             | Immediately destroys the object's Lua reference.                                       | 11.0   |     |\n| [Object:type](object-type \"Object:type\")                      | Gets the type of the object as a string.                                               |        |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                | Checks whether an object is of a certain type.                                         |        |     |\n| [Text:add](text-add \"Text:add\")                               | Adds additional colored text to the Text object at the specified position.             | 0.10.0 |     |\n| [Text:addf](text-addf \"Text:addf\")                            | Adds additional formatted / colored text to the Text object at the specified position. | 0.10.0 |     |\n| [Text:clear](text-clear \"Text:clear\")                         | Clears the contents of the Text object.                                                | 0.10.0 |     |\n| [Text:getDimensions](text-getdimensions \"Text:getDimensions\") | Gets the width and height of the text.                                                 | 0.10.1 |     |\n| [Text:getFont](text-getfont \"Text:getFont\")                   | Gets the [Font](font \"Font\") used with the **Text** object.                            | 0.10.0 |     |\n| [Text:getHeight](text-getheight \"Text:getHeight\")             | Gets the height of the text.                                                           | 0.10.0 |     |\n| [Text:getWidth](text-getwidth \"Text:getWidth\")                | Gets the width of the text.                                                            | 0.10.0 |     |\n| [Text:set](text-set \"Text:set\")                               | Replaces the contents of the Text object with a new string.                            | 0.10.0 |     |\n| [Text:setFont](text-setfont \"Text:setFont\")                   | Replaces the [Font](font \"Font\") used with the text.                                   | 0.10.0 |     |\n| [Text:setf](text-setf \"Text:setf\")                            | Replaces the contents of the Text object with a new formatted string.                  | 0.10.0 |     |\n\n## Supertypes\n\n- [Drawable](drawable \"Drawable\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Font](font \"Font\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Text](https://love2d.org/wiki/Text)"
- name: Text:add
  id: text-add
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Text:add\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nAdds additional colored text to the Text object at the specified position.\n\nText may appear blurry if it's rendered at non-integer pixel locations.\n\n## Function\n\n### Synopsis\n\n``` lua\nindex = Text:add( textstring, x, y, angle, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`string`](string \"string\")` textstring`  \nThe text to add to the object.\n\n[`number`](number \"number\")` x (0)`  \nThe position of the new text on the x-axis.\n\n[`number`](number \"number\")` y (0)`  \nThe position of the new text on the y-axis.\n\n[`number`](number \"number\")` angle (0)`  \nThe orientation of the new text in radians.\n\n[`number`](number \"number\")` sx (1)`  \nScale factor on the x-axis.\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor on the y-axis.\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset on the x-axis.\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset on the y-axis.\n\n[`number`](number \"number\")` kx (0)`  \nShearing / skew factor on the x-axis.\n\n[`number`](number \"number\")` ky (0)`  \nShearing / skew factor on the y-axis.\n\n### Returns\n\n[`number`](number \"number\")` index`  \nAn index number that can be used with [Text:getWidth](text-getwidth \"Text:getWidth\") or [Text:getHeight](text-getheight \"Text:getHeight\").\n\n## Function\n\n### Synopsis\n\n``` lua\nindex = Text:add( coloredtext, x, y, angle, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`table`](table \"table\")` coloredtext`  \nA table containing colors and strings to add to the object, in the form of `{color1, string1, color2, string2, ...}`.\n\n[`table`](table \"table\")` color1`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string1`  \nA string of text which has a color specified by the previous color.\n\n[`table`](table \"table\")` color2`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string2`  \nA string of text which has a color specified by the previous color.\n\n[`tables and strings`](https://love2d.org/w/index.php?title=tables_and_strings&action=edit&redlink=1 \"tables and strings (page does not exist)\")` ...`  \nAdditional colors and strings.\n\n[`number`](number \"number\")` x (0)`  \nThe position of the new text on the x-axis.\n\n[`number`](number \"number\")` y (0)`  \nThe position of the new text on the y-axis.\n\n[`number`](number \"number\")` angle (0)`  \nThe orientation of the new text in radians.\n\n[`number`](number \"number\")` sx (1)`  \nScale factor on the x-axis.\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor on the y-axis.\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset on the x-axis.\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset on the y-axis.\n\n[`number`](number \"number\")` kx (0)`  \nShearing / skew factor on the x-axis.\n\n[`number`](number \"number\")` ky (0)`  \nShearing / skew factor on the y-axis.\n\n### Returns\n\n[`number`](number \"number\")` index`  \nAn index number that can be used with [Text:getWidth](text-getwidth \"Text:getWidth\") or [Text:getHeight](text-getheight \"Text:getHeight\").\n\n### Notes\n\nThe color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") will be combined (multiplied) with the colors of the text, when drawing the Text object.\n\n## See Also\n\n- [Text](text \"Text\")\n- [Text:addf](text-addf \"Text:addf\")\n- [Text:set](text-set \"Text:set\")\n- [Text:setf](text-setf \"Text:setf\")\n- [Text:clear](text-clear \"Text:clear\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Text:add](https://love2d.org/wiki/Text:add)"
- name: Text:addf
  id: text-addf
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Text:addf\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nAdds additional formatted / colored text to the Text object at the specified position.\n\nThe word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.\n\nText may appear blurry if it's rendered at non-integer pixel locations.\n\n## Function\n\n### Synopsis\n\n``` lua\nindex = Text:addf( textstring, wraplimit, alignmode, x, y, angle, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`string`](string \"string\")` textstring`  \nThe text to add to the object.\n\n[`number`](number \"number\")` wraplimit`  \nThe maximum width in pixels of the text before it gets automatically wrapped to a new line.\n\n[`AlignMode`](alignmode \"AlignMode\")` align`  \nThe alignment of the text.\n\n[`number`](number \"number\")` x`  \nThe position of the new text (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position of the new text (y-axis).\n\n[`number`](number \"number\")` angle (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShearing / skew factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShearing / skew factor (y-axis).\n\n### Returns\n\n[`number`](number \"number\")` index`  \nAn index number that can be used with [Text:getWidth](text-getwidth \"Text:getWidth\") or [Text:getHeight](text-getheight \"Text:getHeight\").\n\n## Function\n\n### Synopsis\n\n``` lua\nindex = Text:addf( coloredtext, wraplimit, alignmode, x, y, angle, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`table`](table \"table\")` coloredtext`  \nA table containing colors and strings to add to the object, in the form of `{color1, string1, color2, string2, ...}`.\n\n[`table`](table \"table\")` color1`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string1`  \nA string of text which has a color specified by the previous color.\n\n[`table`](table \"table\")` color2`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string2`  \nA string of text which has a color specified by the previous color.\n\n[`tables and strings`](https://love2d.org/w/index.php?title=tables_and_strings&action=edit&redlink=1 \"tables and strings (page does not exist)\")` ...`  \nAdditional colors and strings.\n\n[`number`](number \"number\")` wraplimit`  \nThe maximum width in pixels of the text before it gets automatically wrapped to a new line.\n\n[`AlignMode`](alignmode \"AlignMode\")` align`  \nThe alignment of the text.\n\n[`number`](number \"number\")` x`  \nThe position of the new text (x-axis).\n\n[`number`](number \"number\")` y`  \nThe position of the new text (y-axis).\n\n[`number`](number \"number\")` angle (0)`  \nOrientation (radians).\n\n[`number`](number \"number\")` sx (1)`  \nScale factor (x-axis).\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor (y-axis).\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset (x-axis).\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset (y-axis).\n\n[`number`](number \"number\")` kx (0)`  \nShearing / skew factor (x-axis).\n\n[`number`](number \"number\")` ky (0)`  \nShearing / skew factor (y-axis).\n\n### Returns\n\n[`number`](number \"number\")` index`  \nAn index number that can be used with [Text:getWidth](text-getwidth \"Text:getWidth\") or [Text:getHeight](text-getheight \"Text:getHeight\").\n\n### Notes\n\nThe color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") will be combined (multiplied) with the colors of the text, when drawing the Text object.\n\n## See Also\n\n- [Text](text \"Text\")\n- [Text:add](text-add \"Text:add\")\n- [Text:set](text-set \"Text:set\")\n- [Text:setf](text-setf \"Text:setf\")\n- [Text:clear](text-clear \"Text:clear\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Text:addf](https://love2d.org/wiki/Text:addf)"
- name: Text:clear
  id: text-clear
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Text:clear\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nClears the contents of the Text object.\n\n## Function\n\n### Synopsis\n\n``` lua\nText:clear( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Text](text \"Text\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Text:clear](https://love2d.org/wiki/Text:clear)"
- name: Text:getDimensions
  id: text-getdimensions
  summary: Available since LÖVE 0.10.1 This function is not supported in earlier versions
  description: "# Text:getDimensions\n\n**Available since LÖVE [0.10.1](https://love2d.org/wiki/0.10.1 \"0.10.1\")**  \nThis function is not supported in earlier versions.\n\nGets the width and height of the text in pixels.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth, height = Text:getDimensions( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the text. If multiple sub-strings have been added with [Text:add](text-add \"Text:add\"), the width of the last sub-string is returned.\n\n[`number`](number \"number\")` height`  \nThe height of the text. If multiple sub-strings have been added with [Text:add](text-add \"Text:add\"), the height of the last sub-string is returned.\n\n## Function\n\nGets the width and height of a specific sub-string that was previously added to the Text object.\n\n### Synopsis\n\n``` lua\nwidth, height = Text:getDimensions( index )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nAn index number returned by [Text:add](text-add \"Text:add\") or [Text:addf](text-addf \"Text:addf\").\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the sub-string (before scaling and other transformations).\n\n[`number`](number \"number\")` height`  \nThe height of the sub-string (before scaling and other transformations).\n\n## See Also\n\n- [Text](text \"Text\")\n- [Text:set](text-set \"Text:set\")\n- [Text:setf](text-setf \"Text:setf\")\n- [Text:add](text-add \"Text:add\")\n- [Text:addf](text-addf \"Text:addf\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Text:getDimensions](https://love2d.org/wiki/Text:getDimensions)"
- name: Text:getFont
  id: text-getfont
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Text:getFont\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the [Font](font \"Font\") used with the [Text](text \"Text\") object.\n\n## Function\n\n### Synopsis\n\n``` lua\nfont = Text:getFont( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Font`](font \"Font\")` font`  \nThe font used with this Text object.\n\n## See Also\n\n- [Text](text \"Text\")\n- [Text:setFont](text-setfont \"Text:setFont\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Text:getFont](https://love2d.org/wiki/Text:getFont)"
- name: Text:getHeight
  id: text-getheight
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Text:getHeight\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the height of the text in pixels.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = Text:getHeight( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nThe height of the text. If multiple sub-strings have been added with [Text:add](text-add \"Text:add\"), the height of the last sub-string is returned.\n\n## Function\n\nGets the height of a specific sub-string that was previously added to the Text object.\n\n### Synopsis\n\n``` lua\nheight = Text:getHeight( index )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nAn index number returned by [Text:add](text-add \"Text:add\") or [Text:addf](text-addf \"Text:addf\").\n\n### Returns\n\n[`number`](number \"number\")` height`  \nThe height of the sub-string (before scaling and other transformations).\n\n## See Also\n\n- [Text](text \"Text\")\n- [Text:getWidth](text-getwidth \"Text:getWidth\")\n- [Text:set](text-set \"Text:set\")\n- [Text:setf](text-setf \"Text:setf\")\n- [Text:add](text-add \"Text:add\")\n- [Text:addf](text-addf \"Text:addf\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Text:getHeight](https://love2d.org/wiki/Text:getHeight)"
- name: Text:getWidth
  id: text-getwidth
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Text:getWidth\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the width of the text in pixels.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth = Text:getWidth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the text. If multiple sub-strings have been added with [Text:add](text-add \"Text:add\"), the width of the last sub-string is returned.\n\n## Function\n\nGets the width of a specific sub-string that was previously added to the Text object.\n\n### Synopsis\n\n``` lua\nwidth = Text:getWidth( index )\n```\n\n### Arguments\n\n[`number`](number \"number\")` index`  \nAn index number returned by [Text:add](text-add \"Text:add\") or [Text:addf](text-addf \"Text:addf\").\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the sub-string (before scaling and other transformations).\n\n## See Also\n\n- [Text](text \"Text\")\n- [Text:getHeight](text-getheight \"Text:getHeight\")\n- [Text:set](text-set \"Text:set\")\n- [Text:setf](text-setf \"Text:setf\")\n- [Text:add](text-add \"Text:add\")\n- [Text:addf](text-addf \"Text:addf\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Text:getWidth](https://love2d.org/wiki/Text:getWidth)"
- name: Text:set
  id: text-set
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Text:set\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nReplaces the contents of the Text object with a new unformatted string.\n\n## Function\n\n### Synopsis\n\n``` lua\nText:set( textstring )\n```\n\n### Arguments\n\n[`string`](string \"string\")` textstring`  \nThe new string of text to use.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nText:set( coloredtext )\n```\n\n### Arguments\n\n[`table`](table \"table\")` coloredtext`  \nA table containing colors and strings to use as the new text, in the form of `{color1, string1, color2, string2, ...}`.\n\n[`table`](table \"table\")` color1`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string1`  \nA string of text which has a color specified by the previous color.\n\n[`table`](table \"table\")` color2`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string2`  \nA string of text which has a color specified by the previous color.\n\n[`tables and strings`](https://love2d.org/w/index.php?title=tables_and_strings&action=edit&redlink=1 \"tables and strings (page does not exist)\")` ...`  \nAdditional colors and strings.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") will be combined (multiplied) with the colors of the text, when drawing the Text object.\n\n## Function\n\n**Removed in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nUse [Text:clear](text-clear \"Text:clear\") instead.\n\nClears the contents of the Text object.\n\n### Synopsis\n\n``` lua\nText:set( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Text](text \"Text\")\n- [Text:setf](text-setf \"Text:setf\")\n- [Text:add](text-add \"Text:add\")\n- [Text:addf](text-addf \"Text:addf\")\n- [Text:clear](text-clear \"Text:clear\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Text:set](https://love2d.org/wiki/Text:set)"
- name: Text:setf
  id: text-setf
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Text:setf\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nReplaces the contents of the Text object with a new formatted string.\n\n## Function\n\n### Synopsis\n\n``` lua\nText:setf( textstring, wraplimit, alignmode )\n```\n\n### Arguments\n\n[`string`](string \"string\")` textstring`  \nThe new string of text to use.\n\n[`number`](number \"number\")` wraplimit`  \nThe maximum width in pixels of the text before it gets automatically wrapped to a new line.\n\n[`AlignMode`](alignmode \"AlignMode\")` align`  \nThe alignment of the text.\n\n### Returns\n\nNothing.\n\n## Function\n\n### Synopsis\n\n``` lua\nText:setf( coloredtext, wraplimit, alignmode )\n```\n\n### Arguments\n\n[`table`](table \"table\")` coloredtext`  \nA table containing colors and strings to use as the new text, in the form of `{color1, string1, color2, string2, ...}`.\n\n[`table`](table \"table\")` color1`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string1`  \nA string of text which has a color specified by the previous color.\n\n[`table`](table \"table\")` color2`  \nA table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of `{red, green, blue, alpha}`.\n\n[`string`](string \"string\")` string2`  \nA string of text which has a color specified by the previous color.\n\n[`tables and strings`](https://love2d.org/w/index.php?title=tables_and_strings&action=edit&redlink=1 \"tables and strings (page does not exist)\")` ...`  \nAdditional colors and strings.\n\n[`number`](number \"number\")` wraplimit`  \nThe maximum width in pixels of the text before it gets automatically wrapped to a new line.\n\n[`AlignMode`](alignmode \"AlignMode\")` align`  \nThe alignment of the text.\n\n### Returns\n\nNothing.\n\n### Notes\n\nThe color set by [love.graphics.setColor](love.graphics.setcolor \"love.graphics.setColor\") will be combined (multiplied) with the colors of the text, when drawing the Text object.\n\n## See Also\n\n- [Text](text \"Text\")\n- [Text:set](text-set \"Text:set\")\n- [Text:add](text-add \"Text:add\")\n- [Text:addf](text-addf \"Text:addf\")\n- [Text:clear](text-clear \"Text:clear\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Text:setf](https://love2d.org/wiki/Text:setf)"
- name: Text:setFont
  id: text-setfont
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Text:setFont\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nReplaces the [Font](font \"Font\") used with the text.\n\nThis function can be slow if it is called repeatedly, such as from [love.update](love.update \"love.update\") or [love.draw](love.draw \"love.draw\"). Create multiple Text objects with different Fonts if you need to rapidly switch fonts.\n\n## Function\n\n### Synopsis\n\n``` lua\nText:setFont( font )\n```\n\n### Arguments\n\n[`Font`](font \"Font\")` font`  \nThe new font to use with this Text object.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Text](text \"Text\")\n- [Text:getFont](text-getfont \"Text:getFont\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Text:setFont](https://love2d.org/wiki/Text:setFont)"
- name: Texture
  id: texture
  summary: Available since LÖVE 0.9.1 This type is not supported in earlier versions, but the methods were still available on Canvas and Image objects
  description: "# Texture\n\n**Available since LÖVE [0.9.1](https://love2d.org/wiki/0.9.1 \"0.9.1\")**  \nThis type is not supported in earlier versions, but the methods were still available on [Canvas](canvas \"Canvas\") and [Image](image \"Image\") objects.\n\nSuperclass for drawable objects which represent a texture. All Textures can be drawn with [Quads](quad \"Quad\"). This is an abstract type that can't be created directly.\n\n## Functions\n\n|                                                                                       |                                                                                                            |       |     |\n|---------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------|-------|-----|\n| [Texture:getDPIScale](texture-getdpiscale \"Texture:getDPIScale\")                      | Gets the DPI scale factor of the Texture.                                                                  | 11.0  |     |\n| [Texture:getDepth](texture-getdepth \"Texture:getDepth\")                               | Gets the depth of a [Volume Texture](texturetype \"TextureType\").                                           | 11.0  |     |\n| [Texture:getDepthSampleMode](texture-getdepthsamplemode \"Texture:getDepthSampleMode\") | Gets the comparison mode used when sampling from a [depth texture](pixelformat \"PixelFormat\") in a shader. | 11.0  |     |\n| [Texture:getDimensions](texture-getdimensions \"Texture:getDimensions\")                | Gets the width and height of the Texture.                                                                  | 0.9.0 |     |\n| [Texture:getFilter](texture-getfilter \"Texture:getFilter\")                            | Gets the [filter mode](filtermode \"FilterMode\") of the Texture.                                            |       |     |\n| [Texture:getFormat](texture-getformat \"Texture:getFormat\")                            | Gets the [pixel format](pixelformat \"PixelFormat\") of the Texture.                                         | 11.0  |     |\n| [Texture:getHeight](texture-getheight \"Texture:getHeight\")                            | Gets the height of the Texture.                                                                            |       |     |\n| [Texture:getLayerCount](texture-getlayercount \"Texture:getLayerCount\")                | Gets the number of layers / slices in an [Array Texture](texturetype \"TextureType\").                       | 11.0  |     |\n| [Texture:getMipmapCount](texture-getmipmapcount \"Texture:getMipmapCount\")             | Gets the number of mipmaps contained in the Texture.                                                       | 11.0  |     |\n| [Texture:getMipmapFilter](texture-getmipmapfilter \"Texture:getMipmapFilter\")          | Gets the mipmap filter mode for a Texture.                                                                 | 0.9.0 |     |\n| [Texture:getPixelDimensions](texture-getpixeldimensions \"Texture:getPixelDimensions\") | Gets the width and height in pixels of the Texture.                                                        | 11.0  |     |\n| [Texture:getPixelHeight](texture-getpixelheight \"Texture:getPixelHeight\")             | Gets the height in pixels of the Texture.                                                                  | 11.0  |     |\n| [Texture:getPixelWidth](texture-getpixelwidth \"Texture:getPixelWidth\")                | Gets the width in pixels of the Texture.                                                                   | 11.0  |     |\n| [Texture:getTextureType](texture-gettexturetype \"Texture:getTextureType\")             | Gets the [type](texturetype \"TextureType\") of the Texture.                                                 | 11.0  |     |\n| [Texture:getWidth](texture-getwidth \"Texture:getWidth\")                               | Gets the width of the Texture.                                                                             |       |     |\n| [Texture:getWrap](texture-getwrap \"Texture:getWrap\")                                  | Gets the wrapping properties of a Texture.                                                                 |       |     |\n| [Texture:isReadable](texture-isreadable \"Texture:isReadable\")                         | Gets whether the Texture can be drawn sent to a Shader.                                                    | 11.0  |     |\n| [Texture:setDepthSampleMode](texture-setdepthsamplemode \"Texture:setDepthSampleMode\") | Sets the comparison mode used when sampling from a [depth texture](pixelformat \"PixelFormat\") in a shader. | 11.0  |     |\n| [Texture:setFilter](texture-setfilter \"Texture:setFilter\")                            | Sets the [filter mode](filtermode \"FilterMode\") of the Texture.                                            |       |     |\n| [Texture:setMipmapFilter](texture-setmipmapfilter \"Texture:setMipmapFilter\")          | Sets the mipmap filter mode for a Texture.                                                                 | 0.9.0 |     |\n| [Texture:setWrap](texture-setwrap \"Texture:setWrap\")                                  | Sets the wrapping properties of a Texture.                                                                 |       |     |\n\n## Supertypes\n\n- [Drawable](drawable \"Drawable\")\n- [Object](object \"Object\")\n\n## Subtypes\n\n|                           |                           |       |     |\n|---------------------------|---------------------------|-------|-----|\n| [Canvas](canvas \"Canvas\") | Off-screen render target. | 0.8.0 |     |\n| [Image](image \"Image\")    | Drawable image type.      |       |     |\n\n## Enums\n\n|                                          |                                       |      |     |\n|------------------------------------------|---------------------------------------|------|-----|\n| [TextureType](texturetype \"TextureType\") | Types of textures (2D, cubemap, etc.) | 11.0 |     |\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n- [Mesh:setTexture](mesh-settexture \"Mesh:setTexture\")\n- [ParticleSystem:setTexture](particlesystem-settexture \"ParticleSystem:setTexture\")\n- [SpriteBatch:setTexture](spritebatch-settexture \"SpriteBatch:setTexture\")\n- [Shader:send](shader-send \"Shader:send\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture](https://love2d.org/wiki/Texture)"
- name: Texture:getDepth
  id: texture-getdepth
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Texture:getDepth\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the depth of a [Volume Texture](texturetype \"TextureType\"). Returns 1 for 2D, Cubemap, and Array textures.\n\n## Function\n\n### Synopsis\n\n``` lua\ndepth = Texture:getDepth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` depth`  \nThe depth of the volume Texture.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [love.graphics.newVolumeImage](love.graphics.newvolumeimage \"love.graphics.newVolumeImage\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getDepth](https://love2d.org/wiki/Texture:getDepth)"
- name: Texture:getDepthSampleMode
  id: texture-getdepthsamplemode
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Texture:getDepthSampleMode\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the comparison mode used when sampling from a [depth texture](pixelformat \"PixelFormat\") in a shader.\n\nDepth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D.\n\n## Function\n\n### Synopsis\n\n``` lua\ncompare = Texture:getDepthSampleMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`CompareMode`](comparemode \"CompareMode\")` compare (nil)`  \nThe comparison mode used when sampling from this texture in a shader, or nil if setDepthSampleMode has not been called on this Texture.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:setDepthSampleMode](texture-setdepthsamplemode \"Texture:setDepthSampleMode\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getDepthSampleMode](https://love2d.org/wiki/Texture:getDepthSampleMode)"
- name: Texture:getDimensions
  id: texture-getdimensions
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Texture:getDimensions\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the width and height of the Texture.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth, height = Texture:getDimensions( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the Texture, in pixels.\n\n[`number`](number \"number\")` height`  \nThe height of the Texture, in pixels.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:getWidth](texture-getwidth \"Texture:getWidth\")\n- [Texture:getHeight](texture-getheight \"Texture:getHeight\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getDimensions](https://love2d.org/wiki/Texture:getDimensions)"
- name: Texture:getDPIScale
  id: texture-getdpiscale
  summary: Available since LÖVE 11.0 This method is not supported in earlier versions
  description: "# Texture:getDPIScale\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis method is not supported in earlier versions.\n\nGets the DPI scale factor of the Texture.\n\nThe DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the texture has twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a texture with a DPI scale factor of 1.\n\nFor example, a texture with pixel dimensions of 100x100 with a DPI scale factor of 2 will be drawn as if it was 50x50. This is useful with high-dpi / retina displays to easily allow swapping out higher or lower pixel density Images and Canvases without needing any extra manual scaling logic.\n\n## Function\n\n### Synopsis\n\n``` lua\ndpiscale = Texture:getDPIScale( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` dpiscale`  \nThe DPI scale factor of the Texture.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:getDimensions](texture-getdimensions \"Texture:getDimensions\")\n- [Texture:getPixelDimensions](texture-getpixeldimensions \"Texture:getPixelDimensions\")\n- [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [Config Files](love.conf \"Config Files\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getDPIScale](https://love2d.org/wiki/Texture:getDPIScale)"
- name: Texture:getFilter
  id: texture-getfilter
  summary: Gets the filter mode of the Texture
  description: "# Texture:getFilter\n\nGets the [filter mode](filtermode \"FilterMode\") of the Texture.\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, mag = Texture:getFilter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`FilterMode`](filtermode \"FilterMode\")` min`  \nFilter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels).\n\n[`FilterMode`](filtermode \"FilterMode\")` mag`  \nFilter mode to use when magnifying the texture (rendering it at a smaller size on-screen than its size in pixels).\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nmin, mag, anisotropy = Texture:getFilter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`FilterMode`](filtermode \"FilterMode\")` min`  \nFilter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels).\n\n[`FilterMode`](filtermode \"FilterMode\")` mag`  \nFilter mode to use when magnifying the texture (rendering it at a smaller size on-screen than its size in pixels).\n\n[`number`](number \"number\")` anisotropy`  \nMaximum amount of anisotropic filtering used.\n\n### Notes\n\nWhen mipmapping is used, higher anisotropic filtering values increase the quality of the texture when rendering it with a non-uniform scale, at the expense of a bit of performance.\n\nMost systems support up to 8x or 16x anisotropic filtering.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:setFilter](texture-setfilter \"Texture:setFilter\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getFilter](https://love2d.org/wiki/Texture:getFilter)"
- name: Texture:getFormat
  id: texture-getformat
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Texture:getFormat\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the [pixel format](pixelformat \"PixelFormat\") of the Texture.\n\n## Function\n\n### Synopsis\n\n``` lua\nformat = Texture:getFormat( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`PixelFormat`](pixelformat \"PixelFormat\")` format`  \nThe pixel format the Texture was created with.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getFormat](https://love2d.org/wiki/Texture:getFormat)"
- name: Texture:getHeight
  id: texture-getheight
  summary: Gets the height of the Texture
  description: "# Texture:getHeight\n\nGets the height of the Texture.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = Texture:getHeight( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nThe height of the Texture, in pixels.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:getWidth](texture-getwidth \"Texture:getWidth\")\n- [Texture:getDimensions](texture-getdimensions \"Texture:getDimensions\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getHeight](https://love2d.org/wiki/Texture:getHeight)"
- name: Texture:getLayerCount
  id: texture-getlayercount
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Texture:getLayerCount\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the number of layers / slices in an [Array Texture](texturetype \"TextureType\"). Returns 1 for 2D, Cubemap, and Volume textures.\n\n## Function\n\n### Synopsis\n\n``` lua\nlayers = Texture:getLayerCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` layers`  \nThe number of layers in the Array Texture.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [love.graphics.newArrayImage](love.graphics.newarrayimage \"love.graphics.newArrayImage\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getLayerCount](https://love2d.org/wiki/Texture:getLayerCount)"
- name: Texture:getMipmapCount
  id: texture-getmipmapcount
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Texture:getMipmapCount\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the number of mipmaps contained in the Texture. If the texture was not created with mipmaps, it will return 1.\n\n## Function\n\n### Synopsis\n\n``` lua\nmipmaps = Texture:getMipmapCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` mipmaps`  \nThe number of mipmaps in the Texture.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:setMipmapFilter](texture-setmipmapfilter \"Texture:setMipmapFilter\")\n- [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getMipmapCount](https://love2d.org/wiki/Texture:getMipmapCount)"
- name: Texture:getMipmapFilter
  id: texture-getmipmapfilter
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Texture:getMipmapFilter\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nGets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images.\n\n## Function\n\n### Synopsis\n\n``` lua\nmode, sharpness = Texture:getMipmapFilter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`FilterMode`](filtermode \"FilterMode\")` mode`  \nThe filter mode used in between mipmap levels. [nil](nil \"nil\") if mipmap filtering is not enabled.\n\n[`number`](number \"number\")` sharpness`  \nValue used to determine whether the image should use more or less detailed mipmap levels than normal when drawing.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:setMipmapFilter](texture-setmipmapfilter \"Texture:setMipmapFilter\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getMipmapFilter](https://love2d.org/wiki/Texture:getMipmapFilter)"
- name: Texture:getPixelDimensions
  id: texture-getpixeldimensions
  summary: Available since LÖVE 11.0 This method is not supported in earlier versions
  description: "# Texture:getPixelDimensions\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis method is not supported in earlier versions.\n\nGets the width and height in pixels of the Texture.\n\n[Texture:getDimensions](texture-getdimensions \"Texture:getDimensions\") gets the dimensions of the texture in units scaled by the texture's [DPI scale factor](texture-getdpiscale \"Texture:getDPIScale\"), rather than pixels. Use getDimensions for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelDimensions only when dealing specifically with pixels, for example when using [Canvas:newImageData](canvas-newimagedata \"Canvas:newImageData\").\n\n## Function\n\n### Synopsis\n\n``` lua\npixelwidth, pixelheight = Texture:getPixelDimensions( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` pixelwidth`  \nThe width of the Texture, in pixels.\n\n[`number`](number \"number\")` pixelheight`  \nThe height of the Texture, in pixels.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:getDPIScale](texture-getdpiscale \"Texture:getDPIScale\")\n- [Texture:getPixelWidth](texture-getpixelwidth \"Texture:getPixelWidth\")\n- [Texture:getPixelHeight](texture-getpixelheight \"Texture:getPixelHeight\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getPixelDimensions](https://love2d.org/wiki/Texture:getPixelDimensions)"
- name: Texture:getPixelHeight
  id: texture-getpixelheight
  summary: Available since LÖVE 11.0 This method is not supported in earlier versions
  description: "# Texture:getPixelHeight\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis method is not supported in earlier versions.\n\nGets the height in pixels of the Texture.\n\n[Texture:getHeight](texture-getheight \"Texture:getHeight\") gets the height of the texture in units scaled by the texture's [DPI scale factor](texture-getdpiscale \"Texture:getDPIScale\"), rather than pixels. Use getHeight for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelHeight only when dealing specifically with pixels, for example when using [Canvas:newImageData](canvas-newimagedata \"Canvas:newImageData\").\n\n## Function\n\n### Synopsis\n\n``` lua\npixelheight = Texture:getPixelHeight( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` pixelheight`  \nThe height of the Texture, in pixels.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:getDPIScale](texture-getdpiscale \"Texture:getDPIScale\")\n- [Texture:getPixelWidth](texture-getpixelwidth \"Texture:getPixelWidth\")\n- [Texture:getPixelDimensions](texture-getpixeldimensions \"Texture:getPixelDimensions\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getPixelHeight](https://love2d.org/wiki/Texture:getPixelHeight)"
- name: Texture:getPixelWidth
  id: texture-getpixelwidth
  summary: Available since LÖVE 11.0 This method is not supported in earlier versions
  description: "# Texture:getPixelWidth\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis method is not supported in earlier versions.\n\nGets the width in pixels of the Texture.\n\n[Texture:getWidth](texture-getwidth \"Texture:getWidth\") gets the width of the texture in units scaled by the texture's [DPI scale factor](texture-getdpiscale \"Texture:getDPIScale\"), rather than pixels. Use getWidth for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelWidth only when dealing specifically with pixels, for example when using [Canvas:newImageData](canvas-newimagedata \"Canvas:newImageData\").\n\n## Function\n\n### Synopsis\n\n``` lua\npixelwidth = Texture:getPixelWidth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` pixelwidth`  \nThe width of the Texture, in pixels.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:getDPIScale](texture-getdpiscale \"Texture:getDPIScale\")\n- [Texture:getPixelHeight](texture-getpixelheight \"Texture:getPixelHeight\")\n- [Texture:getPixelDimensions](texture-getpixeldimensions \"Texture:getPixelDimensions\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getPixelWidth](https://love2d.org/wiki/Texture:getPixelWidth)"
- name: Texture:getTextureType
  id: texture-gettexturetype
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Texture:getTextureType\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the [type](texturetype \"TextureType\") of the Texture.\n\n## Function\n\n### Synopsis\n\n``` lua\ntexturetype = Texture:getTextureType( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`TextureType`](texturetype \"TextureType\")` texturetype`  \nThe type of the Texture.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getTextureType](https://love2d.org/wiki/Texture:getTextureType)"
- name: Texture:getWidth
  id: texture-getwidth
  summary: Gets the width of the Texture
  description: "# Texture:getWidth\n\nGets the width of the Texture.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth = Texture:getWidth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the Texture, in pixels.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:getHeight](texture-getheight \"Texture:getHeight\")\n- [Texture:getDimensions](texture-getdimensions \"Texture:getDimensions\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getWidth](https://love2d.org/wiki/Texture:getWidth)"
- name: Texture:getWrap
  id: texture-getwrap
  summary: Gets the wrapping properties of a Texture
  description: "# Texture:getWrap\n\nGets the wrapping properties of a Texture.\n\nThis function returns the currently set horizontal and vertical [wrapping modes](wrapmode \"WrapMode\") for the texture.\n\n## Function\n\n### Synopsis\n\n``` lua\nhoriz, vert, depth = Texture:getWrap( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`WrapMode`](wrapmode \"WrapMode\")` horiz`  \nHorizontal wrapping mode of the texture.\n\n[`WrapMode`](wrapmode \"WrapMode\")` vert`  \nVertical wrapping mode of the texture.\n\n[`WrapMode`](wrapmode \"WrapMode\")` depth` Available since 11.0  \nWrapping mode for the z-axis of a [Volume texture](texturetype \"TextureType\").\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:setWrap](texture-setwrap \"Texture:setWrap\")\n- [WrapMode](wrapmode \"WrapMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:getWrap](https://love2d.org/wiki/Texture:getWrap)"
- name: Texture:isReadable
  id: texture-isreadable
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Texture:isReadable\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Texture can be drawn and sent to a Shader.\n\n[Canvases](canvas \"Canvas\") created with stencil and/or depth [PixelFormats](pixelformat \"PixelFormat\") are not readable by default, unless `readable=true` is specified in the settings table passed into [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\").\n\nNon-readable Canvases can still be rendered to.\n\n## Function\n\n### Synopsis\n\n``` lua\nreadable = Texture:isReadable( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` readable`  \nWhether the Texture is readable.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:isReadable](https://love2d.org/wiki/Texture:isReadable)"
- name: Texture:setDepthSampleMode
  id: texture-setdepthsamplemode
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Texture:setDepthSampleMode\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nSets the comparison mode used when sampling from a [depth texture](pixelformat \"PixelFormat\") in a shader.\n\nDepth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D.\n\nWhen using a depth texture with a comparison mode set in a shader, it must be declared as a `sampler2DShadow` and used in a GLSL 3 [Shader](shader \"Shader\"). The result of accessing the texture in the shader will return a float between 0 and 1, proportional to the number of samples (up to 4 samples will be used if bilinear filtering is enabled) that passed the test set by the [comparison](comparemode \"CompareMode\") operation.\n\nDepth texture comparison can only be used with [readable](texture-isreadable \"Texture:isReadable\") depth-formatted [Canvases](canvas \"Canvas\").\n\n## Function\n\n### Synopsis\n\n``` lua\nTexture:setDepthSampleMode( compare )\n```\n\n### Arguments\n\n[`CompareMode`](comparemode \"CompareMode\")` compare`  \nThe comparison mode used when sampling from this texture in a shader.\n\n### Returns\n\nNothing.\n\n## Function\n\nDisables depth texture comparison functionality for this texture.\n\n### Synopsis\n\n``` lua\nTexture:setDepthSampleMode( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:getDepthSampleMode](texture-getdepthsamplemode \"Texture:getDepthSampleMode\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:setDepthSampleMode](https://love2d.org/wiki/Texture:setDepthSampleMode)"
- name: Texture:setFilter
  id: texture-setfilter
  summary: Sets the filter mode of the Texture
  description: "# Texture:setFilter\n\nSets the [filter mode](filtermode \"FilterMode\") of the Texture.\n\n## Function\n\n### Synopsis\n\n``` lua\nTexture:setFilter( min, mag )\n```\n\n### Arguments\n\n[`FilterMode`](filtermode \"FilterMode\")` min`  \nFilter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels).\n\n[`FilterMode`](filtermode \"FilterMode\")` mag`  \nFilter mode to use when magnifying the texture (rendering it at a larger size on-screen than its size in pixels).\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nTexture:setFilter( min, mag, anisotropy )\n```\n\n### Arguments\n\n[`FilterMode`](filtermode \"FilterMode\")` min`  \nFilter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels).\n\n[`FilterMode`](filtermode \"FilterMode\")` mag`  \nFilter mode to use when magnifying the texture (rendering it at a larger size on-screen than its size in pixels).\n\n[`number`](number \"number\")` anisotropy (1)`  \nMaximum amount of anisotropic filtering to use.\n\n### Returns\n\nNothing.\n\n### Notes\n\nWhen mipmapping is used, higher anisotropic filtering values increase the quality of the texture when rendering it with a non-uniform scale, at the expense of a bit of performance.\n\nMost systems support up to 8x or 16x anisotropic filtering.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:getFilter](texture-getfilter \"Texture:getFilter\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:setFilter](https://love2d.org/wiki/Texture:setFilter)"
- name: Texture:setMipmapFilter
  id: texture-setmipmapfilter
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Texture:setMipmapFilter\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nSets the mipmap filter mode for a Texture. Prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\") this method only worked on [Images](image \"Image\").\n\n[Mipmapping](https://en.wikipedia.org/wiki/Mipmap) is useful when drawing a texture at a reduced scale. It can improve performance and reduce aliasing issues.\n\nIn [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") and newer, the texture must be [created](love.graphics.newimage \"love.graphics.newImage\") with the `mipmaps` flag enabled for the mipmap filter to have any effect. In versions prior to [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") it's best to call this method directly after creating the image with [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\"), to avoid bugs in certain graphics drivers.\n\nDue to hardware restrictions and driver bugs, in versions prior to [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\") images that weren't loaded from a [CompressedData](compresseddata \"CompressedData\") must have power-of-two dimensions (64x64, 512x256, etc.) to use mipmaps.\n\n## Function\n\n### Synopsis\n\n``` lua\nTexture:setMipmapFilter( filtermode, sharpness )\n```\n\n### Arguments\n\n[`FilterMode`](filtermode \"FilterMode\")` filtermode`  \nThe filter mode to use in between mipmap levels. \"nearest\" will often give better performance.\n\n[`number`](number \"number\")` sharpness (0)`  \nA positive sharpness value makes the texture use a more detailed mipmap level when drawing, at the expense of performance. A negative value does the reverse.\n\n### Returns\n\nNothing.\n\n### Notes\n\nOn mobile devices (Android and iOS), the sharpness parameter is not supported and will do nothing. You can use a custom [Shader](shader \"Shader\") instead, and specify the mipmap sharpness in the optional third parameter to the `Texel` function in the shader (a *negative* value makes the texture use a more detailed mipmap level.)\n\nIn versions prior to [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\"), calling this function automatically creates mipmaps for the Image if none exist yet. If the image is [compressed]((image)-iscompressed \"(Image):isCompressed\") and its [CompressedData](compresseddata \"CompressedData\") has mipmap data included, it will use that.\n\n## Function\n\nDisables mipmap filtering.\n\n### Synopsis\n\n``` lua\nTexture:setMipmapFilter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:getMipmapFilter](texture-getmipmapfilter \"Texture:getMipmapFilter\")\n- [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [MipmapMode](mipmapmode \"MipmapMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:setMipmapFilter](https://love2d.org/wiki/Texture:setMipmapFilter)"
- name: Texture:setWrap
  id: texture-setwrap
  summary: Sets the wrapping properties of a Texture
  description: "# Texture:setWrap\n\nSets the wrapping properties of a Texture.\n\nThis function sets the way a Texture is repeated when it is drawn with a [Quad](quad \"Quad\") that is larger than the texture's extent, or when a custom [Shader](shader \"Shader\") is used which uses texture coordinates outside of \\[0, 1\\]. A texture may be clamped or set to repeat in both horizontal and vertical directions.\n\nClamped textures appear only once (with the edges of the texture stretching to fill the extent of the Quad), whereas repeated ones repeat as many times as there is room in the Quad.\n\n## Function\n\n### Synopsis\n\n``` lua\nTexture:setWrap( horiz, vert, depth )\n```\n\n### Arguments\n\n[`WrapMode`](wrapmode \"WrapMode\")` horiz`  \nHorizontal wrapping mode of the texture.\n\n[`WrapMode`](wrapmode \"WrapMode\")` vert (horiz)`  \nVertical wrapping mode of the texture.\n\n[`WrapMode`](wrapmode \"WrapMode\")` depth (horiz)` Available since 11.0  \nWrapping mode for the z-axis of a [Volume texture](texturetype \"TextureType\").\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Texture](texture \"Texture\")\n- [Texture:getWrap](texture-getwrap \"Texture:getWrap\")\n- [WrapMode](wrapmode \"WrapMode\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Texture:setWrap](https://love2d.org/wiki/Texture:setWrap)"
- name: TextureFormat
  id: textureformat
  summary: Available since LÖVE 0.9.0 and removed in LÖVE 0.10.0 This enum is not supported in earlier or later versions
  description: "# TextureFormat\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis enum is not supported in earlier or later versions.\n\n[Image](image \"Image\") texture formats.\n\nAs of LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\"), [Canvases](canvas \"Canvas\") use [CanvasFormats](canvasformat \"CanvasFormat\") rather than TextureFormats.\n\n## Constants\n\nnormal  \nThe default texture format: 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders.)\n\nhdr  \nOnly usable in Canvases. The high dynamic range texture format: floating point 16 bits per channel (64 bpp) RGBA. Color channel values inside the Canvas range from -infinity to +infinity.\n\nsrgb Available since 0.9.1  \nThe same as `normal`, but the texture is *interpreted* as being in the sRGB color space. It will be decoded from sRGB to linear RGB when drawn or sampled from in a shader. For Canvases, this will also convert everything drawn *to* the Canvas from linear RGB to sRGB.\n\n## Notes\n\nThe HDR format is most useful when combined with pixel shaders. Effects such as tonemapped HDR with bloom can be accomplished, or the canvas can be used to store arbitrary non-color data such as positions which are then interpreted and used in a shader, as long as you draw the right things to the canvas.\n\nThe sRGB format should only be used when doing gamma-correct rendering, which is an advanced topic and it's easy to get color-spaces mixed up. If you're not sure whether you need this, you might want to avoid it. Read more about gamma-correct rendering [here](http://http.developer.nvidia.com/GPUGems3/gpugems3_ch24.html), [here](http://filmicgames.com/archives/299), and [here](http://renderwonk.com/blog/index.php/archive/adventures-with-gamma-correct-rendering/).\n\nNot all systems support the HDR and sRGB formats. Use [love.graphics.isSupported](love.graphics.issupported \"love.graphics.isSupported\") to check before creating the Canvas or Image.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [love.graphics.isSupported](love.graphics.issupported \"love.graphics.isSupported\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/TextureFormat](https://love2d.org/wiki/TextureFormat)"
- name: TextureMode
  id: texturemode
  summary: Available since LÖVE 0.9.0 and removed in LÖVE 0.10.0 This enum is not supported in earlier or later versions
  description: "# TextureMode\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\") and removed in LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis enum is not supported in earlier or later versions.\n\n[Image](image \"Image\") texture formats.\n\nAs of LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\"), [Canvases](canvas \"Canvas\") use [CanvasFormats](canvasformat \"CanvasFormat\") rather than TextureFormats.\n\n## Constants\n\nnormal  \nThe default texture format: 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders.)\n\nhdr  \nOnly usable in Canvases. The high dynamic range texture format: floating point 16 bits per channel (64 bpp) RGBA. Color channel values inside the Canvas range from -infinity to +infinity.\n\nsrgb Available since 0.9.1  \nThe same as `normal`, but the texture is *interpreted* as being in the sRGB color space. It will be decoded from sRGB to linear RGB when drawn or sampled from in a shader. For Canvases, this will also convert everything drawn *to* the Canvas from linear RGB to sRGB.\n\n## Notes\n\nThe HDR format is most useful when combined with pixel shaders. Effects such as tonemapped HDR with bloom can be accomplished, or the canvas can be used to store arbitrary non-color data such as positions which are then interpreted and used in a shader, as long as you draw the right things to the canvas.\n\nThe sRGB format should only be used when doing gamma-correct rendering, which is an advanced topic and it's easy to get color-spaces mixed up. If you're not sure whether you need this, you might want to avoid it. Read more about gamma-correct rendering [here](http://http.developer.nvidia.com/GPUGems3/gpugems3_ch24.html), [here](http://filmicgames.com/archives/299), and [here](http://renderwonk.com/blog/index.php/archive/adventures-with-gamma-correct-rendering/).\n\nNot all systems support the HDR and sRGB formats. Use [love.graphics.isSupported](love.graphics.issupported \"love.graphics.isSupported\") to check before creating the Canvas or Image.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [love.graphics.isSupported](love.graphics.issupported \"love.graphics.isSupported\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/TextureMode](https://love2d.org/wiki/TextureMode)"
- name: TextureType
  id: texturetype
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# TextureType\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nTypes of textures (2D, cubemap, etc.)\n\n## Constants\n\n2d  \nRegular 2D texture with width and height.\n\narray  \nSeveral same-size 2D textures organized into a single object. Similar to a texture atlas / sprite sheet, but avoids sprite bleeding and other issues.\n\ncube  \n[Cubemap](https://en.wikipedia.org/wiki/Cube_mapping) texture with 6 faces. Requires a custom shader (and [Shader:send](shader-send \"Shader:send\")) to use. Sampling from a cube texture in a shader takes a 3D direction vector instead of a texture coordinate.\n\nvolume  \n3D texture with width, height, and [depth](texture-getdepth \"Texture:getDepth\"). Requires a custom shader to use. Volume textures can have [texture filtering](texture-setfilter \"Texture:setFilter\") applied along the 3rd axis.\n\n## Notes\n\n[Array textures](http://codeflow.org/entries/2010/dec/09/minecraft-like-rendering-experiments-in-opengl-4/illustrations/textures.jpg) can be rendered with [love.graphics.drawLayer](love.graphics.drawlayer \"love.graphics.drawLayer\"), with [love.graphics.draw](love.graphics.draw \"love.graphics.draw\") and a [Quad](quad \"Quad\") via [Quad:setLayer](https://love2d.org/w/index.php?title=Quad:setLayer&action=edit&redlink=1 \"Quad:setLayer (page does not exist)\"), or by [sending](shader-send \"Shader:send\") it to a custom [Shader](shader \"Shader\"). When getting the pixels of a layer of an Array Texture in a shader, a third texture coordinate component is used to choose which layer to get.\n\n  \nWhen using a custom Shader, each texture type has a different GLSL type.\n\n- `Image` (or `sampler2D`) is a 2D texture.\n- `ArrayImage` (or `sampler2DArray`) is an array texture.\n- `CubeImage` (or `samplerCube`) is a cubemap texture.\n- `VolumeImage` (or `sampler3D`) is a volume texture.\n\n  \nThe `Texel` shader function can be used to sample from all types of textures in a shader. `Texel` is recommended instead of `texture2D`, `textureCube` etc., because the latter do not work across all versions of GLSL supported by LÖVE, whereas Texel does (GLSL 3 removed `texture2D` and added a generic `texture` function).\n\n  \nEach texture type has a different [maximum size](graphicslimit \"GraphicsLimit\") on a user's system. Use [love.graphics.getSystemLimits](love.graphics.getsystemlimits \"love.graphics.getSystemLimits\") to check.\n\nNot all texture types are supported by all systems. [love.graphics.getTextureTypes](love.graphics.gettexturetypes \"love.graphics.getTextureTypes\") can check for support.\n\n2D and cube texture types are supported everywhere. Array textures require a system that supports OpenGL 3 or OpenGL ES 3. Volume / 3D textures require a system that supports OpenGL 2 or OpenGL ES 3.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Texture](texture \"Texture\")\n- [Texture:getTextureType](texture-gettexturetype \"Texture:getTextureType\")\n- [love.graphics.newImage](love.graphics.newimage \"love.graphics.newImage\")\n- [love.graphics.newArrayImage](love.graphics.newarrayimage \"love.graphics.newArrayImage\")\n- [love.graphics.newCubeImage](love.graphics.newcubeimage \"love.graphics.newCubeImage\")\n- [love.graphics.newVolumeImage](love.graphics.newvolumeimage \"love.graphics.newVolumeImage\")\n- [love.graphics.newCanvas](love.graphics.newcanvas \"love.graphics.newCanvas\")\n- [love.graphics.drawLayer](love.graphics.drawlayer \"love.graphics.drawLayer\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/TextureType](https://love2d.org/wiki/TextureType)"
- name: Thread
  id: thread
  summary: Available since LÖVE 0.7.0 This type is not supported in earlier versions
  description: "# Thread\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis type is not supported in earlier versions.\n\nA Thread is a chunk of code that can run in parallel with other threads. Data can be sent between different threads with [Channel](channel \"Channel\") objects.\n\n## Constructors\n\n|                                                                        |                                                                                                             |       |     |\n|------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------|-------|-----|\n| [love.thread.newThread](love.thread.newthread \"love.thread.newThread\") | Creates a new Thread from a filename, string or [FileData](filedata \"FileData\") object containing Lua code. | 0.7.0 |     |\n\n## Functions\n\n|                                                         |                                                                                  |       |       |\n|---------------------------------------------------------|----------------------------------------------------------------------------------|-------|-------|\n| [Object:release](object-release \"Object:release\")       | Immediately destroys the object's Lua reference.                                 | 11.0  |       |\n| [Object:type](object-type \"Object:type\")                | Gets the type of the object as a string.                                         |       |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")          | Checks whether an object is of a certain type.                                   |       |       |\n| [Thread:demand](thread-demand \"Thread:demand\")          | Receive a message from a thread. Wait for the message to exist before returning. | 0.7.0 | 0.9.0 |\n| [Thread:get](thread-get \"Thread:get\")                   | Get a value.                                                                     | 0.8.0 | 0.9.0 |\n| [Thread:getError](thread-geterror \"Thread:getError\")    | Retrieves the error string from the thread.                                      | 0.9.0 |       |\n| [Thread:getKeys](thread-getkeys \"Thread:getKeys\")       | Returns the names of all messages as a table.                                    | 0.8.0 | 0.9.0 |\n| [Thread:getName](thread-getname \"Thread:getName\")       | Get the name of a thread.                                                        | 0.7.0 | 0.9.0 |\n| [Thread:isRunning](thread-isrunning \"Thread:isRunning\") | Returns whether the thread is currently running.                                 | 0.9.0 |       |\n| [Thread:kill](thread-kill \"Thread:kill\")                | Forcefully terminate the thread.                                                 | 0.7.0 | 0.8.0 |\n| [Thread:peek](thread-peek \"Thread:peek\")                | Receive a message from a thread, but leave it in the message box.                | 0.7.0 | 0.9.0 |\n| [Thread:receive](thread-receive \"Thread:receive\")       | Receive a message from a thread.                                                 | 0.7.0 | 0.8.0 |\n| [Thread:send](thread-send \"Thread:send\")                | Send a message.                                                                  | 0.7.0 | 0.8.0 |\n| [Thread:set](thread-set \"Thread:set\")                   | Set a value.                                                                     | 0.8.0 | 0.9.0 |\n| [Thread:start](thread-start \"Thread:start\")             | Starts the thread.                                                               | 0.7.0 |       |\n| [Thread:wait](thread-wait \"Thread:wait\")                | Wait for a thread to finish.                                                     | 0.7.0 |       |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## Notes\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis method for retrieving errors has been replaced by [Thread:getError](thread-geterror \"Thread:getError\") and [love.threaderror](love.threaderror \"love.threaderror\").\n\nIf a Lua error occurs in the thread, a message with the name \"error\" gets pushed to its message pool. Retrieve the message with `Thread:get('error')`.\n\n## See Also\n\n- [love.thread](love.thread \"love.thread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread](https://love2d.org/wiki/Thread)"
- name: Thread:demand
  id: thread-demand
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.9.0 It has been moved to the Channel API
  description: "# Thread:demand\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to the [Channel](channel \"Channel\") API.\n\nReceive a message from a thread. Wait for the message to exist before returning. (Can return nil in case of an error in the thread.)\n\n## Function\n\n### Synopsis\n\n``` lua\nvalue = Thread:demand( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the message.\n\n### Returns\n\n[`Variant`](variant \"Variant\")` value`  \nThe contents of the message.\n\n## See Also\n\n- [Thread](thread \"Thread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread:demand](https://love2d.org/wiki/Thread:demand)"
- name: Thread:get
  id: thread-get
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.9.0 It has been moved to the Channel api
  description: "# Thread:get\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to the [Channel](channel \"Channel\") api.\n\nRetrieves the value of a message and removes it from the thread's message box.\n\n## Function\n\n### Synopsis\n\n``` lua\nvalue = Thread:get( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the message.\n\n### Returns\n\n[`Variant`](variant \"Variant\")` value`  \nThe contents of the message or nil when no message in message box.\n\n## See Also\n\n- [Thread](thread \"Thread\")\n- [Thread:set](thread-set \"Thread:set\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread:get](https://love2d.org/wiki/Thread:get)"
- name: Thread:getError
  id: thread-geterror
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Thread:getError\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nRetrieves the error string from the thread if it produced an error.\n\n## Function\n\n### Synopsis\n\n``` lua\nerr = Thread:getError( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` err (nil)`  \nThe error message, or nil if the Thread has not caused an error.\n\n## See Also\n\n- [Thread](thread \"Thread\")\n- [love.threaderror](love.threaderror \"love.threaderror\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread:getError](https://love2d.org/wiki/Thread:getError)"
- name: Thread:getKeys
  id: thread-getkeys
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.9.0 This method is not supported in earlier or later versions
  description: "# Thread:getKeys\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis method is not supported in earlier or later versions.\n\nReturns a table with the names of all messages in the message box.\n\n## Function\n\n### Synopsis\n\n``` lua\nmsgNames = Thread:getKeys()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` msgNames`  \nA [sequence](sequence \"sequence\") with all the message names.\n\n## See Also\n\n- [Thread](thread \"Thread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread:getKeys](https://love2d.org/wiki/Thread:getKeys)"
- name: Thread:getName
  id: thread-getname
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.9.0 This function is not supported in earlier or later versions
  description: "# Thread:getName\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier or later versions.\n\nGet the name of a thread.\n\n## Function\n\n### Synopsis\n\n``` lua\nname = Thread:getName( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` name`  \nThe name of the thread.\n\n## See Also\n\n- [Thread](thread \"Thread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread:getName](https://love2d.org/wiki/Thread:getName)"
- name: Thread:isRunning
  id: thread-isrunning
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# Thread:isRunning\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nReturns whether the thread is currently running.\n\nThreads which are not running can be (re)started with [Thread:start](thread-start \"Thread:start\").\n\n## Function\n\n### Synopsis\n\n``` lua\nrunning = Thread:isRunning( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` value`  \nTrue if the thread is running, false otherwise.\n\n## See Also\n\n- [Thread](thread \"Thread\")\n- [Thread:start](thread-start \"Thread:start\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread:isRunning](https://love2d.org/wiki/Thread:isRunning)"
- name: Thread:kill
  id: thread-kill
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.8.0 This method is not supported in earlier or later versions
  description: "# Thread:kill\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier or later versions.\n\nForcefully terminate the thread.\n\nThis function terminates the thread wherever it is, which is capable of locking the game, or doing anything evil for that matter, its use is strongly discouraged.\n\n## Function\n\n### Synopsis\n\n``` lua\nThread:kill( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Thread](thread \"Thread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread:kill](https://love2d.org/wiki/Thread:kill)"
- name: Thread:peek
  id: thread-peek
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.9.0 It has been moved to the Channel api
  description: "# Thread:peek\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to the [Channel](channel \"Channel\") api.\n\nRetrieves the value of a message, but leaves it in the thread's message box. The name of the message can be any string. The value of the message can be a boolean, string, number or a LÖVE userdata. It returns nil, if there's no message with the given name.\n\n## Function\n\n### Synopsis\n\n``` lua\nvalue = Thread:peek( name )\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the message.\n\n### Returns\n\n[`boolean, number, string or LÖVE userdata`](https://love2d.org/w/index.php?title=boolean,_number,_string_or_L%C3%96VE_userdata&action=edit&redlink=1 \"boolean, number, string or LÖVE userdata (page does not exist)\")` value`  \nThe contents of the message.\n\n## See Also\n\n- [Thread](thread \"Thread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread:peek](https://love2d.org/wiki/Thread:peek)"
- name: Thread:receive
  id: thread-receive
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.8.0 It has been renamed to Thread:get
  description: "# Thread:receive\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed to [Thread:get](thread-get \"Thread:get\").\n\nReceive a message from a thread. Returns nil when a message is not in the message box.\n\n## Function\n\n### Synopsis\n\n``` lua\nvalue = Thread:receive(name)\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the message.\n\n### Returns\n\n[`Variant`](variant \"Variant\")` value`  \nThe contents of the message or nil when no message in message box.\n\n## See Also\n\n- [Thread](thread \"Thread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread:receive](https://love2d.org/wiki/Thread:receive)"
- name: Thread:send
  id: thread-send
  summary: Available since LÖVE 0.7.0 and removed in LÖVE 0.8.0 It has been renamed to Thread:set
  description: "# Thread:send\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\") and removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nIt has been renamed to [Thread:set](thread-set \"Thread:set\").\n\nSend a message (put it in the message box).\n\n## Function\n\n### Synopsis\n\n``` lua\nThread:send(name, value)\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the message.\n\n[`Variant`](variant \"Variant\")` value`  \nThe contents of the message.\n\n### Returns\n\nNone.\n\n## See Also\n\n- [Thread](thread \"Thread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread:send](https://love2d.org/wiki/Thread:send)"
- name: Thread:set
  id: thread-set
  summary: Available since LÖVE 0.8.0 and removed in LÖVE 0.9.0 It has been moved to the Channel API
  description: "# Thread:set\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") and removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been moved to the [Channel](channel \"Channel\") API.\n\nSets a value in the message box of the thread. The name of the message can be any string. The value of the message can be a boolean, string, number or a LÖVE userdata. Foreign userdata (Lua's files, LuaSocket, ...), functions or tables are not supported.\n\n## Function\n\n### Synopsis\n\n``` lua\nThread:set(name, value)\n```\n\n### Arguments\n\n[`string`](string \"string\")` name`  \nThe name of the message.\n\n[`boolean, string, number or LÖVE userdata`](https://love2d.org/w/index.php?title=boolean,_string,_number_or_L%C3%96VE_userdata&action=edit&redlink=1 \"boolean, string, number or LÖVE userdata (page does not exist)\")` value`  \nThe contents of the message.\n\n### Returns\n\nNone.\n\n## See Also\n\n- [Thread](thread \"Thread\")\n- [Thread:get](thread-get \"Thread:get\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread:set](https://love2d.org/wiki/Thread:set)"
- name: Thread:start
  id: thread-start
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Thread:start\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nStarts the thread.\n\nBeginning with version [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\"), threads can be restarted after they have completed their execution.\n\n## Function\n\n### Synopsis\n\n``` lua\nThread:start( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## Function\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nThread:start( arg1, arg2, ... )\n```\n\n### Arguments\n\n[`Variant`](variant \"Variant\")` arg1`  \nA string, number, boolean, LÖVE object, or simple table.\n\n[`Variant`](variant \"Variant\")` arg2`  \nA string, number, boolean, LÖVE object, or simple table.\n\n[`Variant`](variant \"Variant\")` ...`  \nYou can continue passing values to the thread.\n\n### Returns\n\nNothing.\n\n### Notes\n\nArguments passed to Thread:start are accessible in the thread's main file via **...** (the vararg expression.)\n\n## See Also\n\n- [Thread](thread \"Thread\")\n- [Thread:wait](thread-wait \"Thread:wait\")\n- [Thread:isRunning](thread-isrunning \"Thread:isRunning\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread:start](https://love2d.org/wiki/Thread:start)"
- name: Thread:wait
  id: thread-wait
  summary: Available since LÖVE 0.7.0 This function is not supported in earlier versions
  description: "# Thread:wait\n\n**Available since LÖVE [0.7.0](https://love2d.org/wiki/0.7.0 \"0.7.0\")**  \nThis function is not supported in earlier versions.\n\nWait for a thread to finish. This call will block until the thread finishes.\n\n## Function\n\n### Synopsis\n\n``` lua\nThread:wait( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNone.\n\n## See Also\n\n- [Thread](thread \"Thread\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Thread:wait](https://love2d.org/wiki/Thread:wait)"
- name: TimeUnit
  id: timeunit
  summary: Available since LÖVE 0.8.0 This enum is not supported in earlier versions
  description: "# TimeUnit\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis enum is not supported in earlier versions.\n\nUnits that represent time.\n\n## Constants\n\nseconds  \nRegular seconds.\n\nsamples  \nAudio samples.\n\n## See Also\n\n- [love.audio](love.audio \"love.audio\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/TimeUnit](https://love2d.org/wiki/TimeUnit)"
- name: Transform
  id: transform
  summary: Available since LÖVE 11.0 This type is not supported in earlier versions
  description: "# Transform\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis type is not supported in earlier versions.\n\nObject containing a coordinate system transformation.\n\nThe [love.graphics](love.graphics \"love.graphics\") module has several functions and function variants which accept Transform objects.\n\n## Constructors\n\n|                                                                           |                                     |      |     |\n|---------------------------------------------------------------------------|-------------------------------------|------|-----|\n| [love.math.newTransform](love.math.newtransform \"love.math.newTransform\") | Creates a new **Transform** object. | 11.0 |     |\n\n## Functions\n\n|                                                                                                      |                                                                                                                    |      |     |\n|------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|------|-----|\n| [Object:release](object-release \"Object:release\")                                                    | Immediately destroys the object's Lua reference.                                                                   | 11.0 |     |\n| [Object:type](object-type \"Object:type\")                                                             | Gets the type of the object as a string.                                                                           |      |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                                       | Checks whether an object is of a certain type.                                                                     |      |     |\n| [Transform:apply](transform-apply \"Transform:apply\")                                                 | Applies the given other Transform object to this one.                                                              | 11.0 |     |\n| [Transform:clone](transform-clone \"Transform:clone\")                                                 | Creates a new copy of this Transform.                                                                              | 11.0 |     |\n| [Transform:getMatrix](transform-getmatrix \"Transform:getMatrix\")                                     | Gets the internal transformation matrix stored by this Transform.                                                  | 11.0 |     |\n| [Transform:inverse](transform-inverse \"Transform:inverse\")                                           | Creates a new Transform containing the inverse of this Transform.                                                  | 11.0 |     |\n| [Transform:inverseTransformPoint](transform-inversetransformpoint \"Transform:inverseTransformPoint\") | Applies the reverse of the Transform object's transformation to the given 2D position.                             | 11.0 |     |\n| [Transform:isAffine2DTransform](transform-isaffine2dtransform \"Transform:isAffine2DTransform\")       | Checks whether the Transform is an affine transformation.                                                          | 11.0 |     |\n| [Transform:reset](transform-reset \"Transform:reset\")                                                 | Resets the Transform to an identity state.                                                                         | 11.0 |     |\n| [Transform:rotate](transform-rotate \"Transform:rotate\")                                              | Applies a rotation to the Transform's coordinate system.                                                           | 11.0 |     |\n| [Transform:scale](transform-scale \"Transform:scale\")                                                 | Scales the Transform's coordinate system.                                                                          | 11.0 |     |\n| [Transform:setMatrix](transform-setmatrix \"Transform:setMatrix\")                                     | Directly sets the Transform's internal transformation matrix.                                                      | 11.0 |     |\n| [Transform:setTransformation](transform-settransformation \"Transform:setTransformation\")             | Resets the Transform to the specified transformation parameters.                                                   | 11.0 |     |\n| [Transform:shear](transform-shear \"Transform:shear\")                                                 | Applies a [shear factor](https://en.wikipedia.org/wiki/Shear_mapping) (skew) to the Transform's coordinate system. | 11.0 |     |\n| [Transform:transformPoint](transform-transformpoint \"Transform:transformPoint\")                      | Applies the Transform object's transformation to the given 2D position.                                            | 11.0 |     |\n| [Transform:translate](transform-translate \"Transform:translate\")                                     | Applies a translation to the Transform's coordinate system.                                                        | 11.0 |     |\n\n## Enums\n\n|                                             |                                                            |      |     |\n|---------------------------------------------|------------------------------------------------------------|------|-----|\n| [MatrixLayout](matrixlayout \"MatrixLayout\") | The layout of matrix elements (row-major or column-major). | 11.0 |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## Notes\n\nTransform objects have a custom `*` (multiplication) operator. `result = tA * tB` is equivalent to `result = tA:clone():apply(tB)`. It maps to the matrix multiplication operation that [Transform:apply](transform-apply \"Transform:apply\") performs.\n\nThe `*` operator creates a new Transform object, so it is not recommended to use it heavily in per-frame code.\n\n## See Also\n\n- [love.math](love.math \"love.math\")\n- [love.graphics.applyTransform](love.graphics.applytransform \"love.graphics.applyTransform\")\n- [love.graphics.replaceTransform](love.graphics.replacetransform \"love.graphics.replaceTransform\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n- [love.graphics.print](love.graphics.print \"love.graphics.print\")\n- [SpriteBatch:add](spritebatch-add \"SpriteBatch:add\")\n- [Text:add](text-add \"Text:add\")\n- [Shader:send](shader-send \"Shader:send\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform](https://love2d.org/wiki/Transform)"
- name: Transform:apply
  id: transform-apply
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:apply\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nApplies the given other Transform object to this one.\n\nThis effectively multiplies this Transform's internal transformation matrix with the other Transform's (i.e. `self * other`), and stores the result in this object.\n\n## Function\n\n### Synopsis\n\n``` lua\ntransform = Transform:apply( other )\n```\n\n### Arguments\n\n[`Transform`](transform \"Transform\")` other`  \nThe other Transform object to apply to this Transform.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` transform`  \nThe Transform object the method was called on. Allows easily chaining Transform methods.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:apply](https://love2d.org/wiki/Transform:apply)"
- name: Transform:clone
  id: transform-clone
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:clone\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new copy of this Transform.\n\n## Function\n\n### Synopsis\n\n``` lua\nclone = Transform:clone( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` clone`  \nThe copy of this Transform.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n- [love.math.newTransform](love.math.newtransform \"love.math.newTransform\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:clone](https://love2d.org/wiki/Transform:clone)"
- name: Transform:getMatrix
  id: transform-getmatrix
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:getMatrix\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nGets the internal 4x4 transformation matrix stored by this Transform. The matrix is returned in [row-major](matrixlayout \"MatrixLayout\") order.\n\n## Function\n\n### Synopsis\n\n``` lua\ne1_1, e1_2, ..., e4_4 = Transform:getMatrix( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` e1_1`  \nThe first column of the first row of the matrix.\n\n[`number`](number \"number\")` e1_2`  \nThe second column of the first row of the matrix.\n\n[`number`](number \"number\")` ...`  \nAdditional matrix elements.\n\n[`number`](number \"number\")` e4_4`  \nThe fourth column of the fourth row of the matrix.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n- [Transform:setMatrix](transform-setmatrix \"Transform:setMatrix\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:getMatrix](https://love2d.org/wiki/Transform:getMatrix)"
- name: Transform:inverse
  id: transform-inverse
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:inverse\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nCreates a new Transform containing the inverse of this Transform.\n\n## Function\n\n### Synopsis\n\n``` lua\ninverse = Transform:inverse( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` inverse`  \nA new Transform object representing the inverse of this Transform's matrix.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:inverse](https://love2d.org/wiki/Transform:inverse)"
- name: Transform:inverseTransformPoint
  id: transform-inversetransformpoint
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:inverseTransformPoint\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nApplies the reverse of the Transform object's transformation to the given 2D position.\n\nThis effectively converts the given position from the local coordinate space of the Transform into global coordinates.\n\nOne use of this method can be to convert a screen-space mouse position into global world coordinates, if the given Transform has transformations applied that are used for a camera system in-game.\n\n## Function\n\n### Synopsis\n\n``` lua\nglobalX, globalY = Transform:inverseTransformPoint( localX, localY )\n```\n\n### Arguments\n\n[`number`](number \"number\")` localX`  \nThe x component of the position with the transform applied.\n\n[`number`](number \"number\")` localY`  \nThe y component of the position with the transform applied.\n\n### Returns\n\n[`number`](number \"number\")` globalX`  \nThe x component of the position in global coordinates.\n\n[`number`](number \"number\")` globalY`  \nThe y component of the position in global coordinates.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n- [Transform:transformPoint](transform-transformpoint \"Transform:transformPoint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:inverseTransformPoint](https://love2d.org/wiki/Transform:inverseTransformPoint)"
- name: Transform:isAffine2DTransform
  id: transform-isaffine2dtransform
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:isAffine2DTransform\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nChecks whether the Transform is an affine transformation.\n\n## Function\n\n### Synopsis\n\n``` lua\naffine = Transform:isAffine2DTransform()\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` affine`  \n`true` if the transform object is an affine transformation, `false` otherwise.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:isAffine2DTransform](https://love2d.org/wiki/Transform:isAffine2DTransform)"
- name: Transform:reset
  id: transform-reset
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:reset\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nResets the Transform to an identity state. All previously applied transformations are erased.\n\n## Function\n\n### Synopsis\n\n``` lua\ntransform = Transform:reset( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` transform`  \nThe Transform object the method was called on. Allows easily chaining Transform methods.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:reset](https://love2d.org/wiki/Transform:reset)"
- name: Transform:rotate
  id: transform-rotate
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:rotate\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nApplies a rotation to the Transform's coordinate system. This method does not reset any previously applied transformations.\n\n## Function\n\n### Synopsis\n\n``` lua\ntransform = Transform:rotate( angle )\n```\n\n### Arguments\n\n[`number`](number \"number\")` angle`  \nThe relative angle in radians to rotate this Transform by.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` transform`  \nThe Transform object the method was called on. Allows easily chaining Transform methods.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n- [Transform:reset](transform-reset \"Transform:reset\")\n- [Transform:translate](transform-translate \"Transform:translate\")\n- [Transform:scale](transform-scale \"Transform:scale\")\n- [Transform:shear](transform-shear \"Transform:shear\")\n- [Transform:setTransformation](transform-settransformation \"Transform:setTransformation\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:rotate](https://love2d.org/wiki/Transform:rotate)"
- name: Transform:scale
  id: transform-scale
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:scale\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nScales the Transform's coordinate system. This method does not reset any previously applied transformations.\n\n## Function\n\n### Synopsis\n\n``` lua\ntransform = Transform:scale( sx, sy )\n```\n\n### Arguments\n\n[`number`](number \"number\")` sx`  \nThe relative scale factor along the x-axis.\n\n[`number`](number \"number\")` sy (sx)`  \nThe relative scale factor along the y-axis.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` transform`  \nThe Transform object the method was called on. Allows easily chaining Transform methods.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n- [Transform:reset](transform-reset \"Transform:reset\")\n- [Transform:translate](transform-translate \"Transform:translate\")\n- [Transform:rotate](transform-rotate \"Transform:rotate\")\n- [Transform:shear](transform-shear \"Transform:shear\")\n- [Transform:setTransformation](transform-settransformation \"Transform:setTransformation\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:scale](https://love2d.org/wiki/Transform:scale)"
- name: Transform:setMatrix
  id: transform-setmatrix
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:setMatrix\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nDirectly sets the Transform's internal 4x4 transformation matrix.\n\n## Function\n\n### Synopsis\n\n``` lua\ntransform = Transform:setMatrix( e1_1, e1_2, ..., e4_4 )\n```\n\n### Arguments\n\n[`number`](number \"number\")` e1_1`  \nThe first column of the first row of the matrix.\n\n[`number`](number \"number\")` e1_2`  \nThe second column of the first row of the matrix.\n\n[`number`](number \"number\")` ...`  \nAdditional matrix elements.\n\n[`number`](number \"number\")` e4_4`  \nThe fourth column of the fourth row of the matrix.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` transform`  \nThe Transform object the method was called on. Allows easily chaining Transform methods.\n\n## Function\n\n### Synopsis\n\n``` lua\ntransform = Transform:setMatrix( layout, e1_1, e1_2, ..., e4_4 )\n```\n\n### Arguments\n\n[`MatrixLayout`](matrixlayout \"MatrixLayout\")` layout`  \nHow to interpret the matrix element arguments (row-major or column-major).\n\n[`number`](number \"number\")` e1_1`  \nThe first column of the first row of the matrix.\n\n[`number`](number \"number\")` e1_2`  \nThe second column of the first row or the first column of the second row of the matrix, depending on the specified layout.\n\n[`number`](number \"number\")` ...`  \nAdditional matrix elements.\n\n[`number`](number \"number\")` e4_4`  \nThe fourth column of the fourth row of the matrix.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` transform`  \nThe Transform object the method was called on. Allows easily chaining Transform methods.\n\n## Function\n\n### Synopsis\n\n``` lua\ntransform = Transform:setMatrix( layout, matrix )\n```\n\n### Arguments\n\n[`MatrixLayout`](matrixlayout \"MatrixLayout\")` layout`  \nHow to interpret the matrix element arguments (row-major or column-major).\n\n[`table`](table \"table\")` matrix`  \nA flat table containing the 16 matrix elements.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` transform`  \nThe Transform object the method was called on. Allows easily chaining Transform methods.\n\n## Function\n\n### Synopsis\n\n``` lua\ntransform = Transform:setMatrix( layout, matrix )\n```\n\n### Arguments\n\n[`MatrixLayout`](matrixlayout \"MatrixLayout\")` layout`  \nHow to interpret the matrix element arguments (row-major or column-major).\n\n[`table`](table \"table\")` matrix`  \nA table of 4 tables, with each sub-table containing 4 matrix elements.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` transform`  \nThe Transform object the method was called on. Allows easily chaining Transform methods.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n- [Transform:getMatrix](transform-getmatrix \"Transform:getMatrix\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:setMatrix](https://love2d.org/wiki/Transform:setMatrix)"
- name: Transform:setTransformation
  id: transform-settransformation
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:setTransformation\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nResets the Transform to the specified transformation parameters.\n\n## Function\n\n### Synopsis\n\n``` lua\ntransform = Transform:setTransformation( x, y, angle, sx, sy, ox, oy, kx, ky )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe position of the Transform on the x-axis.\n\n[`number`](number \"number\")` y`  \nThe position of the Transform on the y-axis.\n\n[`number`](number \"number\")` angle (0)`  \nThe orientation of the Transform in radians.\n\n[`number`](number \"number\")` sx (1)`  \nScale factor on the x-axis.\n\n[`number`](number \"number\")` sy (sx)`  \nScale factor on the y-axis.\n\n[`number`](number \"number\")` ox (0)`  \nOrigin offset on the x-axis.\n\n[`number`](number \"number\")` oy (0)`  \nOrigin offset on the y-axis.\n\n[`number`](number \"number\")` kx (0)`  \nShearing / skew factor on the x-axis.\n\n[`number`](number \"number\")` ky (0)`  \nShearing / skew factor on the y-axis.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` transform`  \nThe Transform object the method was called on. Allows easily chaining Transform methods.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n- [love.math.newTransform](love.math.newtransform \"love.math.newTransform\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:setTransformation](https://love2d.org/wiki/Transform:setTransformation)"
- name: Transform:shear
  id: transform-shear
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:shear\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nApplies a [shear factor](https://en.wikipedia.org/wiki/Shear_mapping) (skew) to the Transform's coordinate system. This method does not reset any previously applied transformations.\n\n## Function\n\n### Synopsis\n\n``` lua\ntransform = Transform:shear( kx, ky )\n```\n\n### Arguments\n\n[`number`](number \"number\")` kx`  \nThe shear factor along the x-axis.\n\n[`number`](number \"number\")` ky`  \nThe shear factor along the y-axis.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` transform`  \nThe Transform object the method was called on. Allows easily chaining Transform methods.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n- [Transform:reset](transform-reset \"Transform:reset\")\n- [Transform:translate](transform-translate \"Transform:translate\")\n- [Transform:rotate](transform-rotate \"Transform:rotate\")\n- [Transform:scale](transform-scale \"Transform:scale\")\n- [Transform:setTransformation](transform-settransformation \"Transform:setTransformation\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:shear](https://love2d.org/wiki/Transform:shear)"
- name: Transform:transformPoint
  id: transform-transformpoint
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:transformPoint\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nApplies the Transform object's transformation to the given 2D position.\n\nThis effectively converts the given position from global coordinates into the local coordinate space of the Transform.\n\n## Function\n\n### Synopsis\n\n``` lua\nlocalX, localY = Transform:transformPoint( globalX, globalY )\n```\n\n### Arguments\n\n[`number`](number \"number\")` globalX`  \nThe x component of the position in global coordinates.\n\n[`number`](number \"number\")` globalY`  \nThe y component of the position in global coordinates.\n\n### Returns\n\n[`number`](number \"number\")` localX`  \nThe x component of the position with the transform applied.\n\n[`number`](number \"number\")` localY`  \nThe y component of the position with the transform applied.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n- [Transform:inverseTransformPoint](transform-inversetransformpoint \"Transform:inverseTransformPoint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:transformPoint](https://love2d.org/wiki/Transform:transformPoint)"
- name: Transform:translate
  id: transform-translate
  summary: Available since LÖVE 11.0 This function is not supported in earlier versions
  description: "# Transform:translate\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis function is not supported in earlier versions.\n\nApplies a translation to the Transform's coordinate system. This method does not reset any previously applied transformations.\n\n## Function\n\n### Synopsis\n\n``` lua\ntransform = Transform:translate( dx, dy )\n```\n\n### Arguments\n\n[`number`](number \"number\")` dx`  \nThe relative translation along the x-axis.\n\n[`number`](number \"number\")` dy`  \nThe relative translation along the y-axis.\n\n### Returns\n\n[`Transform`](transform \"Transform\")` transform`  \nThe Transform object the method was called on. Allows easily chaining Transform methods.\n\n## See Also\n\n- [Transform](transform \"Transform\")\n- [Transform:reset](transform-reset \"Transform:reset\")\n- [Transform:rotate](transform-rotate \"Transform:rotate\")\n- [Transform:scale](transform-scale \"Transform:scale\")\n- [Transform:shear](transform-shear \"Transform:shear\")\n- [Transform:setTransformation](transform-settransformation \"Transform:setTransformation\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Transform:translate](https://love2d.org/wiki/Transform:translate)"
- name: utf8
  id: utf8
  summary: Available since LÖVE 0.9.2 This module is not supported in earlier versions
  description: "# utf8\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis module is not supported in earlier versions.\n\n  \nThis library provides basic support for handling UTF-8 encoded strings.\n\nIt provides all its functions inside the table returned by `require(\"utf8\")`. This library does not provide any support for Unicode other than handling UTF-8 encoding. Any operation that needs the meaning of a character, such as character classification, is outside its scope.\n\nFor detailed usage, see the [reference manual](https://www.lua.org/manual/5.3/manual.html#6.5).\n\nThe utf8.char function does not work correctly in [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\"); However, it is not an issue since [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")\n\n  \n\n## Examples\n\nPrint text the user writes, and erase it using the UTF-8 module.\n\n``` lua\nlocal utf8 = require(\"utf8\")\n \nfunction love.load()\n    text = \"Type away! -- \"\n \n    -- enable key repeat so backspace can be held down to trigger love.keypressed multiple times.\n    love.keyboard.setKeyRepeat(true)\nend\n \nfunction love.textinput(t)\n    text = text .. t\nend\n \nfunction love.keypressed(key)\n    if key == \"backspace\" then\n        -- get the byte offset to the last UTF-8 character in the string.\n        local byteoffset = utf8.offset(text, -1)\n \n        if byteoffset then\n            -- remove the last UTF-8 character.\n            -- string.sub operates on bytes rather than UTF-8 characters, so we couldn't do string.sub(text, 1, -2).\n            text = string.sub(text, 1, byteoffset - 1)\n        end\n    end\nend\n \nfunction love.draw()\n    love.graphics.printf(text, 0, 0, love.graphics.getWidth())\nend\n```\n\n## See Also\n\n- [love](love \"love\")\n- [love.textinput](love.textinput \"love.textinput\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/utf8](https://love2d.org/wiki/utf8)"
- name: value
  id: value
  summary: The Variant type is not a real lua type, but instead indicates what lua values LÖVE can store internally
  description: "# value\n\nThe **Variant** type is not a real lua type, but instead indicates what lua values LÖVE can store internally. It is used in [love.thread](love.thread \"love.thread\") and [love.event](love.event \"love.event\"). Indeed, as it is a \"virtual\" type, it has no specific representation in lua, and no methods.\n\n## Types\n\nA **Variant** can be a [table](table \"table\"), a [boolean](boolean \"boolean\"), a [string](string \"string\"), a [number](number \"number\") or LÖVE [Objects](object \"Object\").\n\n## Notes\n\nForeign userdata (Lua's files, LuaSocket, ENet, ...), and functions are not supported.\n\nNested tables are not officially supported in versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\").\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/value](https://love2d.org/wiki/value)"
- name: variable
  id: variable
  summary: A variable is a value like val, var, and any other letter or word that is not already assigned to something else
  description: "# variable\n\nA variable is a value like val, var, and any other letter or word that is not already assigned to something else.\n\n## Example\n\nChanges a variable by 1 each time the left mouse button is clicked\n\n``` lua\nfunction love.mousepressed( x, y, button )\n    if button == 1 then -- Versions prior to 0.10.0 use the MouseConstant 'l'\n        time = time + 1\n    end\nend\n```\n\n## See Also\n\n- [love.mousepressed](love.mousepressed \"love.mousepressed\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/variable](https://love2d.org/wiki/variable)"
- name: Variant
  id: variant
  summary: The Variant type is not a real lua type, but instead indicates what lua values LÖVE can store internally
  description: "# Variant\n\nThe **Variant** type is not a real lua type, but instead indicates what lua values LÖVE can store internally. It is used in [love.thread](love.thread \"love.thread\") and [love.event](love.event \"love.event\"). Indeed, as it is a \"virtual\" type, it has no specific representation in lua, and no methods.\n\n## Types\n\nA **Variant** can be a [table](table \"table\"), a [boolean](boolean \"boolean\"), a [string](string \"string\"), a [number](number \"number\") or LÖVE [Objects](object \"Object\").\n\n## Notes\n\nForeign userdata (Lua's files, LuaSocket, ENet, ...), and functions are not supported.\n\nNested tables are not officially supported in versions prior to [11.0](https://love2d.org/wiki/11.0 \"11.0\").\n\n## See Also\n\n- [love](love \"love\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Variant](https://love2d.org/wiki/Variant)"
- name: VertexAttributeStep
  id: vertexattributestep
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# VertexAttributeStep\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nThe frequency at which a vertex shader fetches the vertex attribute's data from the Mesh when it's drawn.\n\nPer-instance attributes can be used to render a Mesh many times with different positions, colors, or other attributes via a single [love.graphics.drawInstanced](love.graphics.drawinstanced \"love.graphics.drawInstanced\") call, without using the `love_InstanceID` vertex shader variable.\n\n## Constants\n\npervertex  \nThe vertex attribute will have a unique value for each vertex in the Mesh within a single instance.\n\nperinstance  \nThe vertex attribute will have a unique value for each [instance](love.graphics.drawinstanced \"love.graphics.drawInstanced\") of the Mesh.\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Mesh:attachAttribute](mesh-attachattribute \"Mesh:attachAttribute\")\n- [love.graphics.drawInstanced](love.graphics.drawinstanced \"love.graphics.drawInstanced\")\n- [Mesh](mesh \"Mesh\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/VertexAttributeStep](https://love2d.org/wiki/VertexAttributeStep)"
- name: VertexWinding
  id: vertexwinding
  summary: Available since LÖVE 11.0 This enum is not supported in earlier versions
  description: "# VertexWinding\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nThis enum is not supported in earlier versions.\n\nHow Mesh geometry vertices are ordered.\n\n## Constants\n\ncw  \nClockwise\n\nccw  \nCounter-clockwise\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.getFrontFaceWinding](love.graphics.getfrontfacewinding \"love.graphics.getFrontFaceWinding\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/VertexWinding](https://love2d.org/wiki/VertexWinding)"
- name: Video
  id: video
  summary: Available since LÖVE 0.10.0 This type is not supported in earlier versions
  description: "# Video\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis type is not supported in earlier versions.\n\nA drawable video.\n\n## Constructors\n\n|                                                                           |                          |        |     |\n|---------------------------------------------------------------------------|--------------------------|--------|-----|\n| [love.graphics.newVideo](love.graphics.newvideo \"love.graphics.newVideo\") | Creates a new **Video**. | 0.10.0 |     |\n\n## Functions\n\n|                                                                  |                                                                                                       |        |     |\n|------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------|--------|-----|\n| [Object:release](object-release \"Object:release\")                | Immediately destroys the object's Lua reference.                                                      | 11.0   |     |\n| [Object:type](object-type \"Object:type\")                         | Gets the type of the object as a string.                                                              |        |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                   | Checks whether an object is of a certain type.                                                        |        |     |\n| [Video:getDimensions](video-getdimensions \"Video:getDimensions\") | Gets the width and height of the Video.                                                               | 0.10.0 |     |\n| [Video:getFilter](video-getfilter \"Video:getFilter\")             | Gets the scaling filters used when drawing the Video.                                                 | 0.10.0 |     |\n| [Video:getHeight](video-getheight \"Video:getHeight\")             | Gets the height of the Video.                                                                         | 0.10.0 |     |\n| [Video:getSource](video-getsource \"Video:getSource\")             | Gets the audio [Source](source \"Source\") used for playing back the video's audio.                     | 0.10.0 |     |\n| [Video:getStream](video-getstream \"Video:getStream\")             | Gets the [VideoStream](videostream \"VideoStream\") object used for decoding and controlling the video. | 0.10.0 |     |\n| [Video:getWidth](video-getwidth \"Video:getWidth\")                | Gets the width of the Video.                                                                          | 0.10.0 |     |\n| [Video:isPlaying](video-isplaying \"Video:isPlaying\")             | Gets whether the Video is currently playing.                                                          | 0.10.0 |     |\n| [Video:pause](video-pause \"Video:pause\")                         | Pauses the Video.                                                                                     | 0.10.0 |     |\n| [Video:play](video-play \"Video:play\")                            | Starts playing the Video.                                                                             | 0.10.0 |     |\n| [Video:rewind](video-rewind \"Video:rewind\")                      | Rewinds the Video to the beginning.                                                                   | 0.10.0 |     |\n| [Video:seek](video-seek \"Video:seek\")                            | Sets the current playback position of the Video.                                                      | 0.10.0 |     |\n| [Video:setFilter](video-setfilter \"Video:setFilter\")             | Sets the scaling filters used when drawing the Video.                                                 | 0.10.0 |     |\n| [Video:setSource](video-setsource \"Video:setSource\")             | Sets the audio [Source](source \"Source\") used for playing back the video's audio.                     | 0.10.0 |     |\n| [Video:tell](video-tell \"Video:tell\")                            | Gets the current playback position of the Video.                                                      | 0.10.0 |     |\n\n## Supertypes\n\n- [Drawable](drawable \"Drawable\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [love.graphics.draw](love.graphics.draw \"love.graphics.draw\")\n- [VideoStream](videostream \"VideoStream\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video](https://love2d.org/wiki/Video)"
- name: Video:getDimensions
  id: video-getdimensions
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:getDimensions\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the width and height of the Video in pixels.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth, height = Video:getDimensions( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the Video.\n\n[`number`](number \"number\")` height`  \nThe height of the Video.\n\n## See Also\n\n- [Video](video \"Video\")\n- [Video:getWidth](video-getwidth \"Video:getWidth\")\n- [Video:getHeight](video-getheight \"Video:getHeight\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:getDimensions](https://love2d.org/wiki/Video:getDimensions)"
- name: Video:getFilter
  id: video-getfilter
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:getFilter\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the scaling filters used when drawing the Video.\n\n## Function\n\n### Synopsis\n\n``` lua\nmin, mag, anisotropy = Video:getFilter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`FilterMode`](filtermode \"FilterMode\")` min`  \nThe filter mode used when scaling the Video down.\n\n[`FilterMode`](filtermode \"FilterMode\")` mag`  \nThe filter mode used when scaling the Video up.\n\n[`number`](number \"number\")` anisotropy (1)`  \nMaximum amount of anisotropic filtering used.\n\n## See Also\n\n- [Video](video \"Video\")\n- [Video:setFilter](video-setfilter \"Video:setFilter\")\n- [FilterMode](filtermode \"FilterMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:getFilter](https://love2d.org/wiki/Video:getFilter)"
- name: Video:getHeight
  id: video-getheight
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:getHeight\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the height of the Video in pixels.\n\n## Function\n\n### Synopsis\n\n``` lua\nheight = Video:getHeight( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` height`  \nThe height of the Video.\n\n## See Also\n\n- [Video](video \"Video\")\n- [Video:getWidth](video-getwidth \"Video:getWidth\")\n- [Video:getDimensions](video-getdimensions \"Video:getDimensions\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:getHeight](https://love2d.org/wiki/Video:getHeight)"
- name: Video:getSource
  id: video-getsource
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:getSource\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the audio [Source](source \"Source\") used for playing back the video's audio. May return nil if the video has no audio, or if [Video:setSource](video-setsource \"Video:setSource\") is called with a nil argument.\n\n## Function\n\n### Synopsis\n\n``` lua\nsource = Video:getSource( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`Source`](source \"Source\")` source`  \nThe audio Source used for audio playback, or nil if the video has no audio.\n\n## See Also\n\n- [Video](video \"Video\")\n- [Video:setSource](video-setsource \"Video:setSource\")\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:getSource](https://love2d.org/wiki/Video:getSource)"
- name: Video:getStream
  id: video-getstream
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:getStream\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the [VideoStream](videostream \"VideoStream\") object used for decoding and controlling the video.\n\n## Function\n\n### Synopsis\n\n``` lua\nstream = Video:getStream( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`VideoStream`](videostream \"VideoStream\")` stream`  \nThe VideoStream used for decoding and controlling the video.\n\n## See Also\n\n- [Video](video \"Video\")\n- [VideoStream](videostream \"VideoStream\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:getStream](https://love2d.org/wiki/Video:getStream)"
- name: Video:getWidth
  id: video-getwidth
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:getWidth\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the width of the Video in pixels.\n\n## Function\n\n### Synopsis\n\n``` lua\nwidth = Video:getWidth( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` width`  \nThe width of the Video.\n\n## See Also\n\n- [Video](video \"Video\")\n- [Video:getHeight](video-getheight \"Video:getHeight\")\n- [Video:getDimensions](video-getdimensions \"Video:getDimensions\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:getWidth](https://love2d.org/wiki/Video:getWidth)"
- name: Video:isPlaying
  id: video-isplaying
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:isPlaying\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets whether the Video is currently playing.\n\n## Function\n\n### Synopsis\n\n``` lua\nplaying = Video:isPlaying( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` playing`  \nWhether the video is playing.\n\n## See Also\n\n- [Video](video \"Video\")\n- [Video:play](video-play \"Video:play\")\n- [Video:pause](video-pause \"Video:pause\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:isPlaying](https://love2d.org/wiki/Video:isPlaying)"
- name: Video:pause
  id: video-pause
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:pause\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nPauses the Video.\n\n## Function\n\n### Synopsis\n\n``` lua\nVideo:pause( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Video](video \"Video\")\n- [Video:play](video-play \"Video:play\")\n- [Video:isPlaying](video-isplaying \"Video:isPlaying\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:pause](https://love2d.org/wiki/Video:pause)"
- name: Video:play
  id: video-play
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:play\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nStarts playing the Video. In order for the video to appear onscreen it must be drawn with [love.graphics.draw](love.graphics.draw \"love.graphics.draw\").\n\n## Function\n\n### Synopsis\n\n``` lua\nVideo:play( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Video](video \"Video\")\n- [Video:pause](video-pause \"Video:pause\")\n- [Video:isPlaying](video-isplaying \"Video:isPlaying\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:play](https://love2d.org/wiki/Video:play)"
- name: Video:rewind
  id: video-rewind
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:rewind\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nRewinds the Video to the beginning.\n\n## Function\n\n### Synopsis\n\n``` lua\nVideo:rewind( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Video](video \"Video\")\n- [Video:play](video-play \"Video:play\")\n- [Video:seek](video-seek \"Video:seek\")\n- [Video:tell](video-tell \"Video:tell\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:rewind](https://love2d.org/wiki/Video:rewind)"
- name: Video:seek
  id: video-seek
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:seek\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nSets the current playback position of the Video.\n\n## Function\n\n### Synopsis\n\n``` lua\nVideo:seek( offset )\n```\n\n### Arguments\n\n[`number`](number \"number\")` offset`  \nThe time in seconds since the beginning of the Video.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Video](video \"Video\")\n- [Video:rewind](video-rewind \"Video:rewind\")\n- [Video:tell](video-tell \"Video:tell\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:seek](https://love2d.org/wiki/Video:seek)"
- name: Video:setFilter
  id: video-setfilter
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:setFilter\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nSets the scaling filters used when drawing the Video.\n\n## Function\n\n### Synopsis\n\n``` lua\nVideo:setFilter( min, mag, anisotropy )\n```\n\n### Arguments\n\n[`FilterMode`](filtermode \"FilterMode\")` min`  \nThe filter mode used when scaling the Video down.\n\n[`FilterMode`](filtermode \"FilterMode\")` mag`  \nThe filter mode used when scaling the Video up.\n\n[`number`](number \"number\")` anisotropy (1)`  \nMaximum amount of anisotropic filtering used.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Video](video \"Video\")\n- [Video:getFilter](video-getfilter \"Video:getFilter\")\n- [FilterMode](filtermode \"FilterMode\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:setFilter](https://love2d.org/wiki/Video:setFilter)"
- name: Video:setSource
  id: video-setsource
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:setSource\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nSets the audio [Source](source \"Source\") used for playing back the video's audio. The audio Source also controls playback speed and synchronization.\n\n## Function\n\n### Synopsis\n\n``` lua\nVideo:setSource( source )\n```\n\n### Arguments\n\n[`Source`](source \"Source\")` source (nil)`  \nThe audio Source used for audio playback, or nil to disable audio synchronization.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [Video](video \"Video\")\n- [Video:getSource](video-getsource \"Video:getSource\")\n- [Source](source \"Source\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:setSource](https://love2d.org/wiki/Video:setSource)"
- name: Video:tell
  id: video-tell
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# Video:tell\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the current playback position of the Video.\n\n## Function\n\n### Synopsis\n\n``` lua\nseconds = Video:tell( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` seconds`  \nThe time in seconds since the beginning of the Video.\n\n## See Also\n\n- [Video](video \"Video\")\n- [Video:rewind](video-rewind \"Video:rewind\")\n- [Video:seek](video-seek \"Video:seek\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/Video:tell](https://love2d.org/wiki/Video:tell)"
- name: VideoStream
  id: videostream
  summary: Available since LÖVE 0.10.0 This type is not supported in earlier versions
  description: "# VideoStream\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis type is not supported in earlier versions.\n\nAn object which decodes, streams, and controls [Videos](video \"Video\").\n\n## Constructors\n\n|                                                                                    |                                |        |     |\n|------------------------------------------------------------------------------------|--------------------------------|--------|-----|\n| [love.video.newVideoStream](love.video.newvideostream \"love.video.newVideoStream\") | Creates a new **VideoStream**. | 0.10.0 |     |\n\n## Functions\n\n|                                                                              |                                                     |        |     |\n|------------------------------------------------------------------------------|-----------------------------------------------------|--------|-----|\n| [Object:release](object-release \"Object:release\")                            | Immediately destroys the object's Lua reference.    | 11.0   |     |\n| [Object:type](object-type \"Object:type\")                                     | Gets the type of the object as a string.            |        |     |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                               | Checks whether an object is of a certain type.      |        |     |\n| [VideoStream:getFilename](videostream-getfilename \"VideoStream:getFilename\") | Gets filename of video stream.                      | 0.10.0 |     |\n| [VideoStream:isPlaying](videostream-isplaying \"VideoStream:isPlaying\")       | Gets whatever the video stream is playing.          | 0.10.0 |     |\n| [VideoStream:pause](videostream-pause \"VideoStream:pause\")                   | Pauses video stream.                                | 0.10.0 |     |\n| [VideoStream:play](videostream-play \"VideoStream:play\")                      | Plays video stream.                                 | 0.10.0 |     |\n| [VideoStream:rewind](videostream-rewind \"VideoStream:rewind\")                | Rewinds video stream.                               | 0.10.0 |     |\n| [VideoStream:seek](videostream-seek \"VideoStream:seek\")                      | Sets the current playback position of the Video.    | 0.10.0 |     |\n| [VideoStream:setSync](videostream-setsync \"VideoStream:setSync\")             | TODO                                                | 0.10.0 |     |\n| [VideoStream:tell](videostream-tell \"VideoStream:tell\")                      | Gets the current playback position of video stream. | 0.10.0 |     |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.video](love.video \"love.video\")\n- [Video](video \"Video\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/VideoStream](https://love2d.org/wiki/VideoStream)"
- name: VideoStream:getFilename
  id: videostream-getfilename
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# VideoStream:getFilename\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets filename of video stream.\n\n## Function\n\n### Synopsis\n\n``` lua\nfilename = VideoStream:getFilename( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`string`](string \"string\")` filename`  \nThe filename of video stream\n\n## See Also\n\n- [VideoStream](videostream \"VideoStream\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/VideoStream:getFilename](https://love2d.org/wiki/VideoStream:getFilename)"
- name: VideoStream:isPlaying
  id: videostream-isplaying
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# VideoStream:isPlaying\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets whatever the video stream is playing.\n\n## Function\n\n### Synopsis\n\n``` lua\nplaying = VideoStream:isPlaying( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` playing`  \nWhatever video stream is playing.\n\n## See Also\n\n- [VideoStream](videostream \"VideoStream\")\n- [VideoStream:play](videostream-play \"VideoStream:play\")\n- [VideoStream:pause](videostream-pause \"VideoStream:pause\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/VideoStream:isPlaying](https://love2d.org/wiki/VideoStream:isPlaying)"
- name: VideoStream:pause
  id: videostream-pause
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# VideoStream:pause\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nPauses video stream.\n\n## Function\n\n### Synopsis\n\n``` lua\nVideoStream:pause( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNone.\n\n## See Also\n\n- [VideoStream](videostream \"VideoStream\")\n- [VideoStream:play](videostream-play \"VideoStream:play\")\n- [VideoStream:isPlaying](videostream-isplaying \"VideoStream:isPlaying\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/VideoStream:pause](https://love2d.org/wiki/VideoStream:pause)"
- name: VideoStream:play
  id: videostream-play
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# VideoStream:play\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nPlays video stream.\n\n## Function\n\n### Synopsis\n\n``` lua\nVideoStream:play( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNone.\n\n## See Also\n\n- [VideoStream](videostream \"VideoStream\")\n- [VideoStream:pause](videostream-pause \"VideoStream:pause\")\n- [VideoStream:isPlaying](videostream-isplaying \"VideoStream:isPlaying\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/VideoStream:play](https://love2d.org/wiki/VideoStream:play)"
- name: VideoStream:rewind
  id: videostream-rewind
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# VideoStream:rewind\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nRewinds video stream. Synonym to `VideoStream:seek(0)`\n\n## Function\n\n### Synopsis\n\n``` lua\nVideoStream:rewind( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNone.\n\n## See Also\n\n- [VideoStream](videostream \"VideoStream\")\n- [VideoStream:seek](videostream-seek \"VideoStream:seek\")\n- [VideoStream:tell](videostream-tell \"VideoStream:tell\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/VideoStream:rewind](https://love2d.org/wiki/VideoStream:rewind)"
- name: VideoStream:seek
  id: videostream-seek
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# VideoStream:seek\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nSets the current playback position of the Video.\n\n## Function\n\n### Synopsis\n\n``` lua\nVideoStream:seek( offset )\n```\n\n### Arguments\n\n[`number`](number \"number\")` offset`  \nThe time in seconds since the beginning of the Video.\n\n### Returns\n\nNone.\n\n## See Also\n\n- [VideoStream](videostream \"VideoStream\")\n- [VideoStream:rewind](videostream-rewind \"VideoStream:rewind\")\n- [VideoStream:tell](videostream-tell \"VideoStream:tell\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/VideoStream:seek](https://love2d.org/wiki/VideoStream:seek)"
- name: VideoStream:setSync
  id: videostream-setsync
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# VideoStream:setSync\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nTODO\n\n## Function\n\nTODO\n\n### Synopsis\n\n``` lua\nVideoStream:setSync( source )\n```\n\n### Arguments\n\n[`Source`](source \"Source\")` source`  \nTODO\n\n### Returns\n\nNone.\n\n## Function\n\nTODO\n\n### Synopsis\n\n``` lua\nVideoStream:setSync( source )\n```\n\n### Arguments\n\n[`VideoStream`](videostream \"VideoStream\")` source`  \nTODO\n\n### Returns\n\nNone.\n\n## Function\n\nTODO\n\n### Synopsis\n\n``` lua\nVideoStream:setSync(  )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNone.\n\n## See Also\n\n- [VideoStream](videostream \"VideoStream\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/VideoStream:setSync](https://love2d.org/wiki/VideoStream:setSync)"
- name: VideoStream:tell
  id: videostream-tell
  summary: Available since LÖVE 0.10.0 This function is not supported in earlier versions
  description: "# VideoStream:tell\n\n**Available since LÖVE [0.10.0](https://love2d.org/wiki/0.10.0 \"0.10.0\")**  \nThis function is not supported in earlier versions.\n\nGets the current playback position of video stream.\n\n## Function\n\n### Synopsis\n\n``` lua\nseconds = VideoStream:tell( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` seconds`  \nThe seconds since the beginning of the video.\n\n## See Also\n\n- [VideoStream](videostream \"VideoStream\")\n- [VideoStream:seek](videostream-seek \"VideoStream:seek\")\n- [VideoStream:rewind](videostream-rewind \"VideoStream:rewind\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/VideoStream:tell](https://love2d.org/wiki/VideoStream:tell)"
- name: WeldJoint
  id: weldjoint
  summary: Available since LÖVE 0.8.0 This type is not supported in earlier versions
  description: "# WeldJoint\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis type is not supported in earlier versions.\n\nA WeldJoint essentially glues two bodies together.\n\n## Constructors\n\n|                                                                                    |                                                        |       |     |\n|------------------------------------------------------------------------------------|--------------------------------------------------------|-------|-----|\n| [love.physics.newWeldJoint](love.physics.newweldjoint \"love.physics.newWeldJoint\") | A **WeldJoint** essentially glues two bodies together. | 0.8.0 |     |\n\n## Functions\n\n|                                                                                    |                                                                   |       |       |\n|------------------------------------------------------------------------------------|-------------------------------------------------------------------|-------|-------|\n| [Joint:destroy](joint-destroy \"Joint:destroy\")                                     | Explicitly destroys the Joint.                                    |       |       |\n| [Joint:getAnchors](joint-getanchors \"Joint:getAnchors\")                            | Get the anchor points of the joint.                               |       |       |\n| [Joint:getBodies](joint-getbodies \"Joint:getBodies\")                               | Gets the [bodies](body \"Body\") that the Joint is attached to.     | 0.9.2 |       |\n| [Joint:getCollideConnected](joint-getcollideconnected \"Joint:getCollideConnected\") | Gets whether the connected Bodies collide.                        |       |       |\n| [Joint:getReactionForce](joint-getreactionforce \"Joint:getReactionForce\")          | Returns the reaction force on the second body.                    |       |       |\n| [Joint:getReactionTorque](joint-getreactiontorque \"Joint:getReactionTorque\")       | Returns the reaction torque on the second body.                   |       |       |\n| [Joint:getType](joint-gettype \"Joint:getType\")                                     | Gets a string representing the type.                              |       |       |\n| [Joint:getUserData](joint-getuserdata \"Joint:getUserData\")                         | Returns the Lua value associated with this Joint.                 | 0.9.2 |       |\n| [Joint:isDestroyed](joint-isdestroyed \"Joint:isDestroyed\")                         | Gets whether the Joint is destroyed.                              | 0.9.2 |       |\n| [Joint:setCollideConnected](joint-setcollideconnected \"Joint:setCollideConnected\") | Sets whether the connected Bodies should collide with each other. |       | 0.8.0 |\n| [Joint:setUserData](joint-setuserdata \"Joint:setUserData\")                         | Associates a Lua value with the Joint.                            | 0.9.2 |       |\n| [WeldJoint:getDampingRatio](weldjoint-getdampingratio \"WeldJoint:getDampingRatio\") | Returns the damping ratio of the joint.                           | 0.8.0 |       |\n| [WeldJoint:getFrequency](weldjoint-getfrequency \"WeldJoint:getFrequency\")          | Returns the frequency.                                            | 0.8.0 |       |\n| [WeldJoint:setDampingRatio](weldjoint-setdampingratio \"WeldJoint:setDampingRatio\") | Sets a new damping ratio.                                         | 0.8.0 |       |\n| [WeldJoint:setFrequency](weldjoint-setfrequency \"WeldJoint:setFrequency\")          | Sets a new frequency.                                             | 0.8.0 |       |\n\n## Supertypes\n\n- [Joint](joint \"Joint\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WeldJoint](https://love2d.org/wiki/WeldJoint)"
- name: WeldJoint:getDampingRatio
  id: weldjoint-getdampingratio
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WeldJoint:getDampingRatio\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the damping ratio of the joint.\n\n## Function\n\n### Synopsis\n\n``` lua\nratio = WeldJoint:getDampingRatio( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` ratio`  \nThe damping ratio.\n\n## See Also\n\n- [WeldJoint](weldjoint \"WeldJoint\")\n- [WeldJoint:setDampingRatio](weldjoint-setdampingratio \"WeldJoint:setDampingRatio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WeldJoint:getDampingRatio](https://love2d.org/wiki/WeldJoint:getDampingRatio)"
- name: WeldJoint:getFrequency
  id: weldjoint-getfrequency
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WeldJoint:getFrequency\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the frequency.\n\n## Function\n\n### Synopsis\n\n``` lua\nfreq = WeldJoint:getFrequency( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` freq`  \nThe frequency in hertz.\n\n## See Also\n\n- [WeldJoint](weldjoint \"WeldJoint\")\n- [WeldJoint:setFrequency](weldjoint-setfrequency \"WeldJoint:setFrequency\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WeldJoint:getFrequency](https://love2d.org/wiki/WeldJoint:getFrequency)"
- name: WeldJoint:setDampingRatio
  id: weldjoint-setdampingratio
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WeldJoint:setDampingRatio\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets a new damping ratio.\n\n## Function\n\n### Synopsis\n\n``` lua\nWeldJoint:setDampingRatio( ratio )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ratio`  \nThe new damping ratio.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [WeldJoint](weldjoint \"WeldJoint\")\n- [WeldJoint:getDampingRatio](weldjoint-getdampingratio \"WeldJoint:getDampingRatio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WeldJoint:setDampingRatio](https://love2d.org/wiki/WeldJoint:setDampingRatio)"
- name: WeldJoint:setFrequency
  id: weldjoint-setfrequency
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WeldJoint:setFrequency\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets a new frequency.\n\n## Function\n\n### Synopsis\n\n``` lua\nWeldJoint:setFrequency( freq )\n```\n\n### Arguments\n\n[`number`](number \"number\")` freq`  \nThe new frequency in hertz.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [WeldJoint](weldjoint \"WeldJoint\")\n- [WeldJoint:getFrequency](weldjoint-getfrequency \"WeldJoint:getFrequency\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WeldJoint:setFrequency](https://love2d.org/wiki/WeldJoint:setFrequency)"
- name: WheelJoint
  id: wheeljoint
  summary: Restricts a point on the second body to a line on the first body
  description: "# WheelJoint\n\nRestricts a point on the second body to a line on the first body.\n\n[](https://love2d.org/wiki/File:physicsJointWheel.png)\n\n## Constructors\n\n|                                                                                       |                        |       |     |\n|---------------------------------------------------------------------------------------|------------------------|-------|-----|\n| [love.physics.newWheelJoint](love.physics.newwheeljoint \"love.physics.newWheelJoint\") | Creates a wheel joint. | 0.8.0 |     |\n\n## Functions\n\n|                                                                                                         |                                                                   |        |       |\n|---------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------|--------|-------|\n| [Joint:destroy](joint-destroy \"Joint:destroy\")                                                          | Explicitly destroys the Joint.                                    |        |       |\n| [Joint:getAnchors](joint-getanchors \"Joint:getAnchors\")                                                 | Get the anchor points of the joint.                               |        |       |\n| [Joint:getBodies](joint-getbodies \"Joint:getBodies\")                                                    | Gets the [bodies](body \"Body\") that the Joint is attached to.     | 0.9.2  |       |\n| [Joint:getCollideConnected](joint-getcollideconnected \"Joint:getCollideConnected\")                      | Gets whether the connected Bodies collide.                        |        |       |\n| [Joint:getReactionForce](joint-getreactionforce \"Joint:getReactionForce\")                               | Returns the reaction force on the second body.                    |        |       |\n| [Joint:getReactionTorque](joint-getreactiontorque \"Joint:getReactionTorque\")                            | Returns the reaction torque on the second body.                   |        |       |\n| [Joint:getType](joint-gettype \"Joint:getType\")                                                          | Gets a string representing the type.                              |        |       |\n| [Joint:getUserData](joint-getuserdata \"Joint:getUserData\")                                              | Returns the Lua value associated with this Joint.                 | 0.9.2  |       |\n| [Joint:isDestroyed](joint-isdestroyed \"Joint:isDestroyed\")                                              | Gets whether the Joint is destroyed.                              | 0.9.2  |       |\n| [Joint:setCollideConnected](joint-setcollideconnected \"Joint:setCollideConnected\")                      | Sets whether the connected Bodies should collide with each other. |        | 0.8.0 |\n| [Joint:setUserData](joint-setuserdata \"Joint:setUserData\")                                              | Associates a Lua value with the Joint.                            | 0.9.2  |       |\n| [WheelJoint:enableMotor](wheeljoint-enablemotor \"WheelJoint:enableMotor\")                               | Starts and stops the joint motor.                                 | 0.8.0  | 0.9.0 |\n| [WheelJoint:getAxis](wheeljoint-getaxis \"WheelJoint:getAxis\")                                           | Gets the world-space axis vector of the Prismatic Joint.          | 0.10.2 |       |\n| [WheelJoint:getJointSpeed](wheeljoint-getjointspeed \"WheelJoint:getJointSpeed\")                         | Returns the current joint translation speed.                      | 0.8.0  |       |\n| [WheelJoint:getJointTranslation](wheeljoint-getjointtranslation \"WheelJoint:getJointTranslation\")       | Returns the current joint translation.                            | 0.8.0  |       |\n| [WheelJoint:getMaxMotorTorque](wheeljoint-getmaxmotortorque \"WheelJoint:getMaxMotorTorque\")             | Returns the maximum motor torque.                                 | 0.8.0  |       |\n| [WheelJoint:getMotorSpeed](wheeljoint-getmotorspeed \"WheelJoint:getMotorSpeed\")                         | Returns the speed of the motor.                                   | 0.8.0  |       |\n| [WheelJoint:getMotorTorque](wheeljoint-getmotortorque \"WheelJoint:getMotorTorque\")                      | Returns the current torque on the motor.                          | 0.8.0  |       |\n| [WheelJoint:getSpringDampingRatio](wheeljoint-getspringdampingratio \"WheelJoint:getSpringDampingRatio\") | Returns the damping ratio.                                        | 0.8.0  |       |\n| [WheelJoint:getSpringFrequency](wheeljoint-getspringfrequency \"WheelJoint:getSpringFrequency\")          | Returns the spring frequency.                                     | 0.8.0  |       |\n| [WheelJoint:isMotorEnabled](wheeljoint-ismotorenabled \"WheelJoint:isMotorEnabled\")                      | Checks if the joint motor is running.                             | 0.8.0  |       |\n| [WheelJoint:setMaxMotorTorque](wheeljoint-setmaxmotortorque \"WheelJoint:setMaxMotorTorque\")             | Sets a new maximum motor torque.                                  | 0.8.0  |       |\n| [WheelJoint:setMotorEnabled](wheeljoint-setmotorenabled \"WheelJoint:setMotorEnabled\")                   | Starts and stops the joint motor.                                 | 0.9.0  |       |\n| [WheelJoint:setMotorSpeed](wheeljoint-setmotorspeed \"WheelJoint:setMotorSpeed\")                         | Sets a new speed for the motor.                                   | 0.8.0  |       |\n| [WheelJoint:setSpringDampingRatio](wheeljoint-setspringdampingratio \"WheelJoint:setSpringDampingRatio\") | Sets a new damping ratio.                                         | 0.8.0  |       |\n| [WheelJoint:setSpringFrequency](wheeljoint-setspringfrequency \"WheelJoint:setSpringFrequency\")          | Sets a new spring frequency.                                      | 0.8.0  |       |\n\n## Supertypes\n\n- [Joint](joint \"Joint\")\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint](https://love2d.org/wiki/WheelJoint)"
- name: WheelJoint:enableMotor
  id: wheeljoint-enablemotor
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WheelJoint:enableMotor\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [WheelJoint:setMotorEnabled](wheeljoint-setmotorenabled \"WheelJoint:setMotorEnabled\").\n\nStarts and stops the joint motor.\n\n## Function\n\n### Synopsis\n\n``` lua\nWheelJoint:enableMotor( on )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` on`  \nTrue turns the motor on and false turns it off.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:enableMotor](https://love2d.org/wiki/WheelJoint:enableMotor)"
- name: WheelJoint:getAxis
  id: wheeljoint-getaxis
  summary: Available since LÖVE 0.10.2 This function is not supported in earlier versions
  description: "# WheelJoint:getAxis\n\n**Available since LÖVE [0.10.2](https://love2d.org/wiki/0.10.2 \"0.10.2\")**  \nThis function is not supported in earlier versions.\n\nGets the world-space axis vector of the Wheel Joint.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = WheelJoint:getAxis( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x-axis coordinate of the world-space axis vector.\n\n[`number`](number \"number\")` y`  \nThe y-axis coordinate of the world-space axis vector.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n- [love.physics.newWheelJoint](love.physics.newwheeljoint \"love.physics.newWheelJoint\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:getAxis](https://love2d.org/wiki/WheelJoint:getAxis)"
- name: WheelJoint:getJointSpeed
  id: wheeljoint-getjointspeed
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WheelJoint:getJointSpeed\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the current joint translation speed.\n\n## Function\n\n### Synopsis\n\n``` lua\nspeed = WheelJoint:getJointSpeed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` speed`  \nThe translation speed of the joint in meters per second.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:getJointSpeed](https://love2d.org/wiki/WheelJoint:getJointSpeed)"
- name: WheelJoint:getJointTranslation
  id: wheeljoint-getjointtranslation
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WheelJoint:getJointTranslation\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the current joint translation.\n\n## Function\n\n### Synopsis\n\n``` lua\nposition = WheelJoint:getJointTranslation( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` position`  \nThe translation of the joint in meters.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:getJointTranslation](https://love2d.org/wiki/WheelJoint:getJointTranslation)"
- name: WheelJoint:getMaxMotorTorque
  id: wheeljoint-getmaxmotortorque
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WheelJoint:getMaxMotorTorque\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the maximum motor torque.\n\n## Function\n\n### Synopsis\n\n``` lua\nmaxTorque = WheelJoint:getMaxMotorTorque( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` maxTorque`  \nThe maximum torque of the joint motor in newton meters.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n- [WheelJoint:setMaxMotorTorque](wheeljoint-setmaxmotortorque \"WheelJoint:setMaxMotorTorque\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:getMaxMotorTorque](https://love2d.org/wiki/WheelJoint:getMaxMotorTorque)"
- name: WheelJoint:getMotorSpeed
  id: wheeljoint-getmotorspeed
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WheelJoint:getMotorSpeed\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the speed of the motor.\n\n## Function\n\n### Synopsis\n\n``` lua\nspeed = WheelJoint:getMotorSpeed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` speed`  \nThe speed of the joint motor in radians per second.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n- [WheelJoint:setMotorSpeed](wheeljoint-setmotorspeed \"WheelJoint:setMotorSpeed\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:getMotorSpeed](https://love2d.org/wiki/WheelJoint:getMotorSpeed)"
- name: WheelJoint:getMotorTorque
  id: wheeljoint-getmotortorque
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WheelJoint:getMotorTorque\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the current torque on the motor.\n\n## Function\n\n### Synopsis\n\n``` lua\ntorque = WheelJoint:getMotorTorque( invdt )\n```\n\n### Arguments\n\n[`number`](number \"number\")` invdt`  \nHow long the force applies. Usually the inverse time step or 1/dt.\n\n### Returns\n\n[`number`](number \"number\")` torque`  \nThe torque on the motor in newton meters.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:getMotorTorque](https://love2d.org/wiki/WheelJoint:getMotorTorque)"
- name: WheelJoint:getSpringDampingRatio
  id: wheeljoint-getspringdampingratio
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WheelJoint:getSpringDampingRatio\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the damping ratio.\n\n## Function\n\n### Synopsis\n\n``` lua\nratio = WheelJoint:getSpringDampingRatio( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` ratio`  \nThe damping ratio.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n- [WheelJoint:setSpringDampingRatio](wheeljoint-setspringdampingratio \"WheelJoint:setSpringDampingRatio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:getSpringDampingRatio](https://love2d.org/wiki/WheelJoint:getSpringDampingRatio)"
- name: WheelJoint:getSpringFrequency
  id: wheeljoint-getspringfrequency
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WheelJoint:getSpringFrequency\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the spring frequency.\n\n## Function\n\n### Synopsis\n\n``` lua\nfreq = WheelJoint:getSpringFrequency( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` freq`  \nThe frequency in hertz.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n- [WheelJoint:setSpringFrequency](wheeljoint-setspringfrequency \"WheelJoint:setSpringFrequency\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:getSpringFrequency](https://love2d.org/wiki/WheelJoint:getSpringFrequency)"
- name: WheelJoint:isMotorEnabled
  id: wheeljoint-ismotorenabled
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WheelJoint:isMotorEnabled\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nChecks if the joint motor is running.\n\n## Function\n\n### Synopsis\n\n``` lua\non = WheelJoint:isMotorEnabled( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` on`  \nThe status of the joint motor.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:isMotorEnabled](https://love2d.org/wiki/WheelJoint:isMotorEnabled)"
- name: WheelJoint:setMaxMotorTorque
  id: wheeljoint-setmaxmotortorque
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WheelJoint:setMaxMotorTorque\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets a new maximum motor torque.\n\n## Function\n\n### Synopsis\n\n``` lua\nWheelJoint:setMaxMotorTorque( maxTorque )\n```\n\n### Arguments\n\n[`number`](number \"number\")` maxTorque`  \nThe new maximum torque for the joint motor in newton meters.\n\n### Returns\n\nNothing\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n- [WheelJoint:getMaxMotorTorque](wheeljoint-getmaxmotortorque \"WheelJoint:getMaxMotorTorque\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:setMaxMotorTorque](https://love2d.org/wiki/WheelJoint:setMaxMotorTorque)"
- name: WheelJoint:setMotorEnabled
  id: wheeljoint-setmotorenabled
  summary: Available since LÖVE 0.9.0 This method is not supported in earlier versions
  description: "# WheelJoint:setMotorEnabled\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis method is not supported in earlier versions.\n\nStarts and stops the joint motor.\n\n## Function\n\n### Synopsis\n\n``` lua\nWheelJoint:setMotorEnabled( enable )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` enable`  \nTrue turns the motor on and false turns it off.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:setMotorEnabled](https://love2d.org/wiki/WheelJoint:setMotorEnabled)"
- name: WheelJoint:setMotorSpeed
  id: wheeljoint-setmotorspeed
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WheelJoint:setMotorSpeed\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets a new speed for the motor.\n\n## Function\n\n### Synopsis\n\n``` lua\nWheelJoint:setMotorSpeed( speed )\n```\n\n### Arguments\n\n[`number`](number \"number\")` speed`  \nThe new speed for the joint motor in radians per second.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n- [WheelJoint:getMotorSpeed](wheeljoint-getmotorspeed \"WheelJoint:getMotorSpeed\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:setMotorSpeed](https://love2d.org/wiki/WheelJoint:setMotorSpeed)"
- name: WheelJoint:setSpringDampingRatio
  id: wheeljoint-setspringdampingratio
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WheelJoint:setSpringDampingRatio\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets a new damping ratio.\n\n## Function\n\n### Synopsis\n\n``` lua\nWheelJoint:setSpringDampingRatio( ratio )\n```\n\n### Arguments\n\n[`number`](number \"number\")` ratio`  \nThe new damping ratio.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n- [WheelJoint:getSpringDampingRatio](wheeljoint-getspringdampingratio \"WheelJoint:getSpringDampingRatio\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:setSpringDampingRatio](https://love2d.org/wiki/WheelJoint:setSpringDampingRatio)"
- name: WheelJoint:setSpringFrequency
  id: wheeljoint-setspringfrequency
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# WheelJoint:setSpringFrequency\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets a new spring frequency.\n\n## Function\n\n### Synopsis\n\n``` lua\nWheelJoint:setSpringFrequency( freq )\n```\n\n### Arguments\n\n[`number`](number \"number\")` freq`  \nThe new frequency in hertz.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [WheelJoint](wheeljoint \"WheelJoint\")\n- [WheelJoint:getSpringFrequency](wheeljoint-getspringfrequency \"WheelJoint:getSpringFrequency\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WheelJoint:setSpringFrequency](https://love2d.org/wiki/WheelJoint:setSpringFrequency)"
- name: World
  id: world
  summary: A world is an object that contains all bodies and joints
  description: "# World\n\nA world is an object that contains all bodies and joints.\n\n## Constructors\n\n|                                                                        |                      |     |     |\n|------------------------------------------------------------------------|----------------------|-----|-----|\n| [love.physics.newWorld](love.physics.newworld \"love.physics.newWorld\") | Creates a new World. |     |     |\n\n## Functions\n\n|                                                                                 |                                                                       |       |       |\n|---------------------------------------------------------------------------------|-----------------------------------------------------------------------|-------|-------|\n| [Object:release](object-release \"Object:release\")                               | Immediately destroys the object's Lua reference.                      | 11.0  |       |\n| [Object:type](object-type \"Object:type\")                                        | Gets the type of the object as a string.                              |       |       |\n| [Object:typeOf](object-typeof \"Object:typeOf\")                                  | Checks whether an object is of a certain type.                        |       |       |\n| [World:destroy](world-destroy \"World:destroy\")                                  | Destroys the world.                                                   | 0.8.0 |       |\n| [World:getAllowSleeping](world-getallowsleeping \"World:getAllowSleeping\")       | Returns the sleep behaviour of the world.                             | 0.8.0 | 0.9.0 |\n| [World:getBodies](world-getbodies \"World:getBodies\")                            | Returns a table with all bodies.                                      | 11.0  |       |\n| [World:getBodyCount](world-getbodycount \"World:getBodyCount\")                   | Returns the number of bodies in the world.                            |       |       |\n| [World:getBodyList](world-getbodylist \"World:getBodyList\")                      | Returns a table with all bodies.                                      | 0.8.0 | 11.0  |\n| [World:getCallbacks](world-getcallbacks \"World:getCallbacks\")                   | Returns functions for the callbacks during the world update.          |       |       |\n| [World:getContactCount](world-getcontactcount \"World:getContactCount\")          | Returns the number of contacts in the world.                          | 0.8.0 |       |\n| [World:getContactFilter](world-getcontactfilter \"World:getContactFilter\")       | Returns the function for collision filtering.                         | 0.8.0 |       |\n| [World:getContactList](world-getcontactlist \"World:getContactList\")             | Returns a table with all contacts.                                    | 0.8.0 | 11.0  |\n| [World:getContacts](world-getcontacts \"World:getContacts\")                      | Returns a table with all [Contacts](contact \"Contact\").               | 11.0  |       |\n| [World:getGravity](world-getgravity \"World:getGravity\")                         | Get the gravity of the world.                                         |       |       |\n| [World:getJointCount](world-getjointcount \"World:getJointCount\")                | Returns the number of joints in the world.                            |       |       |\n| [World:getJointList](world-getjointlist \"World:getJointList\")                   | Returns a table with all joints.                                      | 0.8.0 | 11.0  |\n| [World:getJoints](world-getjoints \"World:getJoints\")                            | Returns a table with all joints.                                      | 11.0  |       |\n| [World:isAllowSleep](world-isallowsleep \"World:isAllowSleep\")                   | Get the sleep behaviour of the world.                                 |       | 0.8.0 |\n| [World:isDestroyed](world-isdestroyed \"World:isDestroyed\")                      | Gets whether the World is destroyed.                                  | 0.9.2 |       |\n| [World:isLocked](world-islocked \"World:isLocked\")                               | Returns if the world is updating its state.                           | 0.8.0 |       |\n| [World:isSleepingAllowed](world-issleepingallowed \"World:isSleepingAllowed\")    | Gets the sleep behaviour of the world.                                | 0.9.0 |       |\n| [World:queryBoundingBox](world-queryboundingbox \"World:queryBoundingBox\")       | Calls a function for each fixture inside the specified area.          | 0.8.0 |       |\n| [World:rayCast](world-raycast \"World:rayCast\")                                  | Casts a ray and calls a function with the fixtures that intersect it. | 0.8.0 |       |\n| [World:setAllowSleep](world-setallowsleep \"World:setAllowSleep\")                | Set the sleep behaviour of the world.                                 |       | 0.8.0 |\n| [World:setAllowSleeping](world-setallowsleeping \"World:setAllowSleeping\")       | Sets the sleep behaviour of the world.                                | 0.8.0 | 0.9.0 |\n| [World:setCallbacks](world-setcallbacks \"World:setCallbacks\")                   | Sets functions to be called when shapes collide.                      | 0.8.0 |       |\n| [World:setContactFilter](world-setcontactfilter \"World:setContactFilter\")       | Sets a function for collision filtering.                              | 0.8.0 |       |\n| [World:setGravity](world-setgravity \"World:setGravity\")                         | Set the gravity of the world.                                         |       |       |\n| [World:setMeter](world-setmeter \"World:setMeter\")                               | Set the scale of the world.                                           |       | 0.8.0 |\n| [World:setSleepingAllowed](world-setsleepingallowed \"World:setSleepingAllowed\") | Sets the sleep behaviour of the world.                                | 0.9.0 |       |\n| [World:translateOrigin](world-translateorigin \"World:translateOrigin\")          | Translates the World's origin.                                        | 0.9.0 |       |\n| [World:update](world-update \"World:update\")                                     | Update the state of the world.                                        |       |       |\n\n## Supertypes\n\n- [Object](object \"Object\")\n\n## See Also\n\n- [love.physics](love.physics \"love.physics\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World](https://love2d.org/wiki/World)"
- name: World:destroy
  id: world-destroy
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# World:destroy\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nDestroys the world, taking all bodies, joints, fixtures and their shapes with it.\n\nAn error will occur if you attempt to use any of the destroyed objects after calling this function.\n\n## Function\n\n### Synopsis\n\n``` lua\nWorld:destroy( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:destroy](https://love2d.org/wiki/World:destroy)"
- name: World:getAllowSleeping
  id: world-getallowsleeping
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# World:getAllowSleeping\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [World:isSleepingAllowed](world-issleepingallowed \"World:isSleepingAllowed\").\n\nReturns the sleep behaviour of the world.\n\n## Function\n\n### Synopsis\n\n``` lua\nallowSleep = World:getAllowSleeping( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` allowSleep`  \nTrue if the bodies are allowed to sleep or false if not.\n\n## See Also\n\n- [World](world \"World\")\n- [World:setAllowSleeping](world-setallowsleeping \"World:setAllowSleeping\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:getAllowSleeping](https://love2d.org/wiki/World:getAllowSleeping)"
- name: World:getBodies
  id: world-getbodies
  summary: Available since LÖVE 11.0 It has renamed from World:getBodyList
  description: "# World:getBodies\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has renamed from [World:getBodyList](world-getbodylist \"World:getBodyList\").\n\nReturns a table with all bodies.\n\n## Function\n\n### Synopsis\n\n``` lua\nbodies = World:getBodies( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` bodies`  \nA [sequence](sequence \"sequence\") with all bodies.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:getBodies](https://love2d.org/wiki/World:getBodies)"
- name: World:getBodyCount
  id: world-getbodycount
  summary: Returns the number of bodies in the world
  description: "# World:getBodyCount\n\nReturns the number of bodies in the world.\n\n## Function\n\n### Synopsis\n\n``` lua\nn = World:getBodyCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` n`  \nThe number of bodies in the world.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:getBodyCount](https://love2d.org/wiki/World:getBodyCount)"
- name: World:getBodyList
  id: world-getbodylist
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# World:getBodyList\n\n|                                                                              |\n|------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***         |\n| It has been renamed to [World:getBodies](world-getbodies \"World:getBodies\"). |\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns a table with all bodies.\n\n## Function\n\n### Synopsis\n\n``` lua\nbodies = World:getBodyList( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` bodies`  \nA [sequence](sequence \"sequence\") with all bodies.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:getBodyList](https://love2d.org/wiki/World:getBodyList)"
- name: World:getCallbacks
  id: world-getcallbacks
  summary: Returns functions for the callbacks during the world update
  description: "# World:getCallbacks\n\nReturns functions for the callbacks during the world update.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nbeginContact, endContact, preSolve, postSolve = World:getCallbacks( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`function`](function \"function\")` beginContact`  \nGets called when two fixtures begin to overlap.\n\n[`function`](function \"function\")` endContact`  \nGets called when two fixtures cease to overlap.\n\n[`function`](function \"function\")` preSolve`  \nGets called before a collision gets resolved.\n\n[`function`](function \"function\")` postSolve`  \nGets called after the collision has been resolved.\n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nadd, persist, remove, result = World:getCallbacks( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`function`](function \"function\")` add`  \nCalled when two shapes first collide.\n\n[`function`](function \"function\")` persist`  \nCalled each frame, if collision lasts more than 1 frame.\n\n[`function`](function \"function\")` remove`  \nCalled when two shapes finish colliding.\n\n[`function`](function \"function\")` result`  \nNo idea. Never seems to be called...\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:getCallbacks](https://love2d.org/wiki/World:getCallbacks)"
- name: World:getContactCount
  id: world-getcontactcount
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# World:getContactCount\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the number of contacts in the world.\n\n## Function\n\n### Synopsis\n\n``` lua\nn = World:getContactCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` n`  \nThe number of contacts in the world.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:getContactCount](https://love2d.org/wiki/World:getContactCount)"
- name: World:getContactFilter
  id: world-getcontactfilter
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# World:getContactFilter\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns the function for collision filtering.\n\n## Function\n\n### Synopsis\n\n``` lua\ncontactFilter = World:getContactFilter( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`function`](function \"function\")` contactFilter`  \nThe function that handles the contact filtering.\n\n## See Also\n\n- [World](world \"World\")\n- [World:setContactFilter](world-setcontactfilter \"World:setContactFilter\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:getContactFilter](https://love2d.org/wiki/World:getContactFilter)"
- name: World:getContactList
  id: world-getcontactlist
  summary: Not stable in 0.8.0
  description: "# World:getContactList\n\nNot stable in 0.8.0. You may experience crashing.\n\n|                                                                                               |\n|-----------------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                          |\n| This function has been renamed to [World:getContacts](world-getcontacts \"World:getContacts\"). |\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\n  \nReturns a table with all contacts.\n\n## Function\n\n### Synopsis\n\n``` lua\ncontacts = World:getContactList( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` contacts`  \nA [sequence](sequence \"sequence\") with all contacts.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:getContactList](https://love2d.org/wiki/World:getContactList)"
- name: World:getContacts
  id: world-getcontacts
  summary: Available since LÖVE 11.0 It has been renamed from World:getContactList
  description: "# World:getContacts\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [World:getContactList](world-getcontactlist \"World:getContactList\").\n\n  \nReturns a table with all [Contacts](contact \"Contact\").\n\n## Function\n\n### Synopsis\n\n``` lua\ncontacts = World:getContacts( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` contacts`  \nA [sequence](sequence \"sequence\") with all [Contacts](contact \"Contact\").\n\n## See Also\n\n- [World](world \"World\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:getContacts](https://love2d.org/wiki/World:getContacts)"
- name: World:getGravity
  id: world-getgravity
  summary: Get the gravity of the world
  description: "# World:getGravity\n\nGet the gravity of the world.\n\n## Function\n\n### Synopsis\n\n``` lua\nx, y = World:getGravity( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` x`  \nThe x component of gravity.\n\n[`number`](number \"number\")` y`  \nThe y component of gravity.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:getGravity](https://love2d.org/wiki/World:getGravity)"
- name: World:getJointCount
  id: world-getjointcount
  summary: Returns the number of joints in the world
  description: "# World:getJointCount\n\nReturns the number of joints in the world.\n\n## Function\n\n### Synopsis\n\n``` lua\nn = World:getJointCount( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`number`](number \"number\")` n`  \nThe number of joints in the world.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:getJointCount](https://love2d.org/wiki/World:getJointCount)"
- name: World:getJointList
  id: world-getjointlist
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# World:getJointList\n\n|                                                                                         |\n|-----------------------------------------------------------------------------------------|\n| ***Deprecated in LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")***                    |\n| This function has been renamed to [World:getJoints](world-getjoints \"World:getJoints\"). |\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns a table with all joints.\n\n## Function\n\n### Synopsis\n\n``` lua\njoints = World:getJointList( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` joints`  \nA [sequence](sequence \"sequence\") with all joints.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:getJointList](https://love2d.org/wiki/World:getJointList)"
- name: World:getJoints
  id: world-getjoints
  summary: Available since LÖVE 11.0 It has been renamed from World:getJointList
  description: "# World:getJoints\n\n**Available since LÖVE [11.0](https://love2d.org/wiki/11.0 \"11.0\")**  \nIt has been renamed from [World:getJointList](world-getjointlist \"World:getJointList\").\n\nReturns a table with all joints.\n\n## Function\n\n### Synopsis\n\n``` lua\njoints = World:getJoints( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`table`](table \"table\")` joints`  \nA [sequence](sequence \"sequence\") with all joints.\n\n## See Also\n\n- [World](world \"World\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:getJoints](https://love2d.org/wiki/World:getJoints)"
- name: World:isAllowSleep
  id: world-isallowsleep
  summary: Removed in LÖVE 0.8.0 This method is not supported in that and later versions
  description: "# World:isAllowSleep\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in that and later versions.\n\nGet the sleep behaviour of the world.\n\nA sleeping body is much more efficient to simulate than when awake.\n\n  \nIf sleeping is allowed, any body that has come to rest will sleep.\n\n## Function\n\n### Synopsis\n\n``` lua\npermission = World:isAllowSleep( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` permission`  \nPermission for any body to sleep.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:isAllowSleep](https://love2d.org/wiki/World:isAllowSleep)"
- name: World:isDestroyed
  id: world-isdestroyed
  summary: Available since LÖVE 0.9.2 This function is not supported in earlier versions
  description: "# World:isDestroyed\n\n**Available since LÖVE [0.9.2](https://love2d.org/wiki/0.9.2 \"0.9.2\")**  \nThis function is not supported in earlier versions.\n\nGets whether the World is destroyed. Destroyed worlds cannot be used.\n\n## Function\n\n### Synopsis\n\n``` lua\ndestroyed = World:isDestroyed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` destroyed`  \nWhether the World is destroyed.\n\n## See Also\n\n- [World](world \"World\")\n- [World:destroy](world-destroy \"World:destroy\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:isDestroyed](https://love2d.org/wiki/World:isDestroyed)"
- name: World:isLocked
  id: world-islocked
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# World:isLocked\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nReturns if the world is updating its state.\n\nThis will return true inside the callbacks from [World:setCallbacks](world-setcallbacks \"World:setCallbacks\").\n\n## Function\n\n### Synopsis\n\n``` lua\nlocked = World:isLocked( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` locked`  \nWill be true if the world is in the process of updating its state.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:isLocked](https://love2d.org/wiki/World:isLocked)"
- name: World:isSleepingAllowed
  id: world-issleepingallowed
  summary: Available since LÖVE 0.9.0 It has been renamed from World:getAllowSleeping
  description: "# World:isSleepingAllowed\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [World:getAllowSleeping](world-getallowsleeping \"World:getAllowSleeping\").\n\nGets the sleep behaviour of the world.\n\n## Function\n\n### Synopsis\n\n``` lua\nallow = World:isSleepingAllowed( )\n```\n\n### Arguments\n\nNone.\n\n### Returns\n\n[`boolean`](boolean \"boolean\")` allow`  \nTrue if bodies in the world are allowed to sleep, or false if not.\n\n## See Also\n\n- [World](world \"World\")\n- [World:setSleepingAllowed](world-setsleepingallowed \"World:setSleepingAllowed\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:isSleepingAllowed](https://love2d.org/wiki/World:isSleepingAllowed)"
- name: World:queryBoundingBox
  id: world-queryboundingbox
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# World:queryBoundingBox\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nCalls a function for each fixture inside the specified area by searching for any overlapping bounding box ([Fixture:getBoundingBox](fixture-getboundingbox \"Fixture:getBoundingBox\")).\n\n[](https://love2d.org/wiki/File:WorldqueryBoundingBox.png)\n\n## Function\n\n### Synopsis\n\n``` lua\nWorld:queryBoundingBox( topLeftX, topLeftY, bottomRightX, bottomRightY, callback )\n```\n\n### Arguments\n\n[`number`](number \"number\")` topLeftX`  \nThe x position of the top-left point.\n\n[`number`](number \"number\")` topLeftY`  \nThe y position of the top-left point.\n\n[`number`](number \"number\")` bottomRightX`  \nThe x position of the bottom-right point.\n\n[`number`](number \"number\")` bottomRightY`  \nThe y position of the bottom-right point.\n\n[`function`](function \"function\")` callback`  \nThis function gets passed one argument, the fixture, and should return a boolean. The search will continue if it is true or stop if it is false.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:queryBoundingBox](https://love2d.org/wiki/World:queryBoundingBox)"
- name: World:rayCast
  id: world-raycast
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# World:rayCast\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nCasts a ray and calls a function for each fixtures it intersects.\n\n## Function\n\n### Synopsis\n\n``` lua\nWorld:rayCast( x1, y1, x2, y2, callback )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x1`  \nThe x position of the starting point of the ray.\n\n[`number`](number \"number\")` y1`  \nThe y position of the starting point of the ray.\n\n[`number`](number \"number\")` x2`  \nThe x position of the end point of the ray.\n\n[`number`](number \"number\")` y2`  \nThe y position of the end point of the ray.\n\n[`function`](function \"function\")` callback`  \nA function called for each fixture intersected by the ray. The function gets six arguments and should return a number as a control value. The intersection points fed into the function will be in an arbitrary order. If you wish to find the closest point of intersection, you'll need to do that yourself within the function. The easiest way to do that is by using the fraction value.\n\n### Returns\n\nNothing.\n\n## Callback\n\n### Synopsis\n\n``` lua\ncontrol = callback( fixture, x, y, xn, yn, fraction )\n```\n\n### Arguments\n\n[`Fixture`](fixture \"Fixture\")` fixture`  \nThe fixture intersecting the ray.\n\n[`number`](number \"number\")` x`  \nThe x position of the intersection point.\n\n[`number`](number \"number\")` y`  \nThe y position of the intersection point.\n\n[`number`](number \"number\")` xn`  \nThe x value of the surface normal vector of the shape edge.\n\n[`number`](number \"number\")` yn`  \nThe y value of the surface normal vector of the shape edge.\n\n[`number`](number \"number\")` fraction`  \nThe position of the intersection on the ray as a number from 0 to 1 (or even higher if the ray length was changed with the return value).\n\n### Returns\n\n[`number`](number \"number\")` control`  \nThe ray can be controlled with the return value. A positive value sets a new ray length where 1 is the default value. A value of 0 terminates the ray. If the callback function returns -1, the intersection gets ignored as if it didn't happen.\n\n## Notes\n\nThere is a bug in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\") where the normal vector passed to the callback function gets scaled by [love.physics.getMeter](love.physics.getmeter \"love.physics.getMeter\").\n\n## Examples\n\n### Casting a ray over some random shapes.\n\n``` lua\nfunction worldRayCastCallback(fixture, x, y, xn, yn, fraction)\n    local hit = {}\n    hit.fixture = fixture\n    hit.x, hit.y = x, y\n    hit.xn, hit.yn = xn, yn\n    hit.fraction = fraction\n \n    table.insert(Ray.hitList, hit)\n \n    return 1 -- Continues with ray cast through all shapes.\nend\n \nfunction createStuff()\n    -- Cleaning up the previous stuff.\n    for i = #Terrain.Stuff, 1, -1 do\n        Terrain.Stuff[i].Fixture:destroy()\n        Terrain.Stuff[i] = nil\n    end\n \n    -- Generates some random shapes.\n    for i = 1, 30 do\n        local p = {}\n \n        p.x, p.y = math.random(100, 700), math.random(100, 500)\n        local shapetype = math.random(3)\n        if shapetype == 1 then\n            local w, h, r = math.random() * 10 + 40, math.random() * 10 + 40, math.random() * math.pi * 2\n            p.Shape = love.physics.newRectangleShape(p.x, p.y, w, h, r)\n        elseif shapetype == 2 then\n            local a = math.random() * math.pi * 2\n            local x2, y2 = p.x + math.cos(a) * (math.random() * 30 + 20), p.y + math.sin(a) * (math.random() * 30 + 20)\n            p.Shape = love.physics.newEdgeShape(p.x, p.y, x2, y2)\n        else\n            local r = math.random() * 40 + 10\n            p.Shape = love.physics.newCircleShape(p.x, p.y, r)\n        end\n \n        p.Fixture = love.physics.newFixture(Terrain.Body, p.Shape)\n \n        Terrain.Stuff[i] = p\n    end\nend\n \nfunction love.keypressed()\n    createStuff()\nend\n \nfunction love.load()\n    -- Setting this to 1 to avoid all current scaling bugs.\n    love.physics.setMeter(1)\n \n    -- Start out with the same random stuff each start.\n    math.randomseed(0xfacef00d)\n \n    World = love.physics.newWorld()\n \n    Terrain = {}\n    Terrain.Body = love.physics.newBody(World, 0, 0, \"static\")\n    Terrain.Stuff = {}\n    createStuff()\n \n    Ray = {\n        x1 = 0,\n        y1 = 0,\n        x2 = 0,\n        y2 = 0,\n        hitList = {}\n    }\nend\n \nfunction love.update(dt)\n    local now = love.timer.getTime()\n \n    World:update(dt)\n \n    -- Clear fixture hit list.\n    Ray.hitList = {}\n \n    -- Calculate ray position.\n    local pos = (math.sin(now/4) + 1.2) * 0.4\n    Ray.x2, Ray.y2 = math.cos(pos * (math.pi/2)) * 1000, math.sin(pos * (math.pi/2)) * 1000\n \n    -- Cast the ray and populate the hitList table.\n    World:rayCast(Ray.x1, Ray.y1, Ray.x2, Ray.y2, worldRayCastCallback)\nend\n \nfunction love.draw()\n    -- Drawing the terrain.\n    love.graphics.setColor(255, 255, 255)\n    for i, v in ipairs(Terrain.Stuff) do\n        if v.Shape:getType() == \"polygon\" then\n            love.graphics.polygon(\"line\", Terrain.Body:getWorldPoints( v.Shape:getPoints() ))\n        elseif v.Shape:getType() == \"edge\" then\n            love.graphics.line(Terrain.Body:getWorldPoints( v.Shape:getPoints() ))\n        else\n            local x, y = Terrain.Body:getWorldPoints(v.x, v.y)\n            love.graphics.circle(\"line\", x, y, v.Shape:getRadius())\n        end\n    end\n \n    -- Drawing the ray.\n    love.graphics.setLineWidth(3)\n    love.graphics.setColor(255, 255, 255, 100)\n    love.graphics.line(Ray.x1, Ray.y1, Ray.x2, Ray.y2)\n    love.graphics.setLineWidth(1)\n \n    -- Drawing the intersection points and normal vectors if there were any.\n    for i, hit in ipairs(Ray.hitList) do\n        love.graphics.setColor(255, 0, 0)\n        love.graphics.print(i, hit.x, hit.y) -- Prints the hit order besides the point.\n        love.graphics.circle(\"line\", hit.x, hit.y, 3)\n        love.graphics.setColor(0, 255, 0)\n        love.graphics.line(hit.x, hit.y, hit.x + hit.xn * 25, hit.y + hit.yn * 25)\n    end\nend\n```\n\n[](https://love2d.org/wiki/File:world_raycast_callback_example.png)\n\nScreenshot of the example.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:rayCast](https://love2d.org/wiki/World:rayCast)"
- name: World:setAllowSleep
  id: world-setallowsleep
  summary: Removed in LÖVE 0.8.0 This method is not supported in that and later versions
  description: "# World:setAllowSleep\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in that and later versions.\n\nSet the sleep behaviour of the world.\n\nA sleeping body is much more efficient to simulate than when awake.\n\n  \nIf sleeping is allowed, any body that has come to rest will sleep.\n\n## Function\n\n### Synopsis\n\n``` lua\nWorld:setAllowSleep( permission )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` permission`  \nPermission for any body to sleep.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:setAllowSleep](https://love2d.org/wiki/World:setAllowSleep)"
- name: World:setAllowSleeping
  id: world-setallowsleeping
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# World:setAllowSleeping\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\n**Removed in LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed to [World:setSleepingAllowed](world-setsleepingallowed \"World:setSleepingAllowed\").\n\nSets the sleep behaviour of the world.\n\n## Function\n\n### Synopsis\n\n``` lua\nWorld:setAllowSleeping( allowSleep )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` allowSleep`  \nTrue if the bodies are allowed to sleep or false if not.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [World](world \"World\")\n- [World:getAllowSleeping](world-getallowsleeping \"World:getAllowSleeping\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:setAllowSleeping](https://love2d.org/wiki/World:setAllowSleeping)"
- name: World:setCallbacks
  id: world-setcallbacks
  summary: Sets functions for the collision callbacks during the world update
  description: "# World:setCallbacks\n\nSets functions for the collision callbacks during the world update.\n\nFour Lua functions can be given as arguments. The value nil removes a function.\n\nWhen called, each function will be passed three arguments. The first two arguments are the colliding fixtures and the third argument is the [Contact](contact \"Contact\") between them. The postSolve callback additionally gets the normal and tangent impulse for each contact point. See notes.\n\nIf you are interested to know when exactly each callback is called, consult a Box2d [manual](http://www.iforce2d.net/b2dtut/collision-anatomy)\n\nMaking changes to a [World](world \"World\") is not allowed inside of the [beginContact](https://love2d.org/w/index.php?title=beginContact&action=edit&redlink=1 \"beginContact (page does not exist)\"), [endContact](https://love2d.org/w/index.php?title=endContact&action=edit&redlink=1 \"endContact (page does not exist)\"), [preSolve](https://love2d.org/w/index.php?title=preSolve&action=edit&redlink=1 \"preSolve (page does not exist)\"), and [postSolve](https://love2d.org/w/index.php?title=postSolve&action=edit&redlink=1 \"postSolve (page does not exist)\") callback functions, as BOX2D locks the world during these callbacks.\n\n## Function\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\n### Synopsis\n\n``` lua\nWorld:setCallbacks( beginContact, endContact, preSolve, postSolve )\n```\n\n### Arguments\n\n[`function`](function \"function\")` beginContact`  \nGets called when two fixtures begin to overlap.\n\n[`function`](function \"function\")` endContact`  \nGets called when two fixtures cease to overlap. This will also be called outside of a world update, when colliding objects are destroyed.\n\n[`function`](function \"function\")` preSolve`  \nGets called before a collision gets resolved.\n\n[`function`](function \"function\")` postSolve`  \nGets called after the collision has been resolved.\n\n### Returns\n\nNothing.\n\n  \n  \n\n## Function\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis variant is not supported in that and later versions.\n\n### Synopsis\n\n``` lua\nWorld:setCallbacks( add, persist, remove, result )\n```\n\n### Arguments\n\n[`function`](function \"function\")` add`  \nCalled when two shapes first collide.\n\n[`function`](function \"function\")` persist`  \nCalled each frame, if collision lasts more than 1 frame.\n\n[`function`](function \"function\")` remove`  \nCalled when two shapes finish colliding.\n\n[`function`](function \"function\")` result`  \nCalled after a collision has been calculated. Note: This callback is not properly bound in LOVE at the time of writing, as a result, this callback does not get called, nor do proper arguments get passed for it.\n\n### Returns\n\nNothing.\n\n## Notes\n\nBelow are the parameters for the postSolve callback. Note that the numbers of normal and tangent impulse correspond with the numbers of contact points.\n\n``` lua\nfunction postSolve(fixture1, fixture2, contact, normal_impulse1, tangent_impulse1, normal_impulse2, tangent_impulse2)\n-- do stuff\nend\n```\n\n## See Also\n\n- [World](world \"World\")\n- [Tutorial:PhysicsCollisionCallbacks](https://love2d.org/wiki/Tutorial:PhysicsCollisionCallbacks \"Tutorial:PhysicsCollisionCallbacks\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:setCallbacks](https://love2d.org/wiki/World:setCallbacks)"
- name: World:setContactFilter
  id: world-setcontactfilter
  summary: Available since LÖVE 0.8.0 This method is not supported in earlier versions
  description: "# World:setContactFilter\n\n**Available since LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in earlier versions.\n\nSets a function for collision filtering.\n\nIf the group and category filtering doesn't generate a collision decision, this function gets called with the two fixtures as arguments. The function should return a boolean value where true means the fixtures will collide and false means they will pass through each other.\n\n## Function\n\n### Synopsis\n\n``` lua\nWorld:setContactFilter( filter )\n```\n\n### Arguments\n\n[`function`](function \"function\")` filter`  \nThe function handling the contact filtering.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:setContactFilter](https://love2d.org/wiki/World:setContactFilter)"
- name: World:setGravity
  id: world-setgravity
  summary: Set the gravity of the world
  description: "# World:setGravity\n\nSet the gravity of the world.\n\n## Function\n\n### Synopsis\n\n``` lua\nWorld:setGravity( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x component of gravity.\n\n[`number`](number \"number\")` y`  \nThe y component of gravity.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:setGravity](https://love2d.org/wiki/World:setGravity)"
- name: World:setMeter
  id: world-setmeter
  summary: Removed in LÖVE 0.8.0 This method is not supported in that and later versions
  description: "# World:setMeter\n\n**Removed in LÖVE [0.8.0](https://love2d.org/wiki/0.8.0 \"0.8.0\")**  \nThis method is not supported in that and later versions.\n\nSet the scale of the world.\n\nThe world scale is the number of pixels per meter. Try to keep your shape sizes less than 10 times this scale.\n\nThe default scale for new worlds is 30 pixels per meter.\n\nThis is important because the physics in Box2D is tuned to work well for objects of size 0.1m up to 10m. All physics coordinates are divided by this number for the physics calculations.\n\n## Function\n\n### Synopsis\n\n``` lua\nWorld:setMeter( scale )\n```\n\n### Arguments\n\n[`number`](number \"number\")` scale`  \nThe size of 1 meter in pixels.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:setMeter](https://love2d.org/wiki/World:setMeter)"
- name: World:setSleepingAllowed
  id: world-setsleepingallowed
  summary: Available since LÖVE 0.9.0 It has been renamed from World:setAllowSleeping
  description: "# World:setSleepingAllowed\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nIt has been renamed from [World:setAllowSleeping](world-setallowsleeping \"World:setAllowSleeping\").\n\nSets the sleep behaviour of the world.\n\n## Function\n\n### Synopsis\n\n``` lua\nWorld:setSleepingAllowed( allow )\n```\n\n### Arguments\n\n[`boolean`](boolean \"boolean\")` allow`  \nTrue if bodies in the world are allowed to sleep, or false if not.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [World](world \"World\")\n- [World:isSleepingAllowed](world-issleepingallowed \"World:isSleepingAllowed\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:setSleepingAllowed](https://love2d.org/wiki/World:setSleepingAllowed)"
- name: World:translateOrigin
  id: world-translateorigin
  summary: Available since LÖVE 0.9.0 This function is not supported in earlier versions
  description: "# World:translateOrigin\n\n**Available since LÖVE [0.9.0](https://love2d.org/wiki/0.9.0 \"0.9.0\")**  \nThis function is not supported in earlier versions.\n\nTranslates the World's origin. Useful in large worlds where floating point precision issues become noticeable at far distances from the origin.\n\n## Function\n\n### Synopsis\n\n``` lua\nWorld:translateOrigin( x, y )\n```\n\n### Arguments\n\n[`number`](number \"number\")` x`  \nThe x component of the new origin with respect to the old origin.\n\n[`number`](number \"number\")` y`  \nThe y component of the new origin with respect to the old origin.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [World](world \"World\")\n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:translateOrigin](https://love2d.org/wiki/World:translateOrigin)"
- name: World:update
  id: world-update
  summary: Update the state of the world
  description: "# World:update\n\nUpdate the state of the world.\n\n## Function\n\n### Synopsis\n\n``` lua\nWorld:update( dt, velocityiterations, positioniterations )\n```\n\n### Arguments\n\n[`number`](number \"number\")` dt`  \nThe time (in seconds) to advance the physics simulation.\n\n[`number`](number \"number\")` velocityiterations (8)` Available since 11.0  \nThe maximum number of steps used to determine the new velocities when resolving a collision.\n\n[`number`](number \"number\")` positioniterations (3)` Available since 11.0  \nThe maximum number of steps used to determine the new positions when resolving a collision.\n\n### Returns\n\nNothing.\n\n## See Also\n\n- [World](world \"World\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/World:update](https://love2d.org/wiki/World:update)"
- name: WrapMode
  id: wrapmode
  summary: How the image wraps inside a Quad with a larger quad size than image size
  description: "# WrapMode\n\nHow the image wraps inside a [Quad](quad \"Quad\") with a larger quad size than image size. This also affects how [Meshes](mesh \"Mesh\") with texture coordinates which are outside the range of \\[0, 1\\] are drawn, and the color returned by the `Texel` [Shader](shader \"Shader\") function when using it to sample from texture coordinates outside of the range of \\[0, 1\\].\n\n[](https://love2d.org/wiki/File:ComparisonWraps.png)\n\n## Constants\n\nclamp  \nClamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture.\n\nrepeat  \nRepeat the texture. Fills the whole available extent.\n\nmirroredrepeat Available since 0.9.2  \nRepeat the texture, flipping it each time it repeats. May produce better visual results than the `repeat` mode when the texture doesn't seamlessly tile.\n\n  \n\nclampzero Available since 0.10.0  \nClamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.)\n\n  \n\n## Notes\n\nThe `clampzero` mode is not available on most mobile devices, and will fall back to the `clamp` mode when it's unsupported. Check the `clampzero` [GraphicsFeature](graphicsfeature \"GraphicsFeature\") constant by calling [love.graphics.getSupported](love.graphics.getsupported \"love.graphics.getSupported\").\n\n## See Also\n\n- [love.graphics](love.graphics \"love.graphics\")\n- [Texture:setWrap](texture-setwrap \"Texture:setWrap\")\n- [Texture:getWrap](texture-getwrap \"Texture:getWrap\")\n\n  \n\n© 2006–2020 LÖVE Development Team  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://love2d.org/wiki/WrapMode](https://love2d.org/wiki/WrapMode)"
