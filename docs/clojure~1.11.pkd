---
name: Clojure
slug: clojure~1.11
text_format: markdown
generator: src:devdocs
version: '1.11'
copyright: |-
  © Rich Hickey
  Licensed under the Eclipse Public License 1.0.
  https://clojure.github.io/clojure/api-index.html
homepage: https://clojure.org

---
- name: '&'
  id: clojure.core-api#clojure.core/&
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.core
  description: "# clojure.core\n\nFull namespace name: clojure.core\n\n## Overview\n\n```\nFundamental library of the Clojure language\n```\n\n## Types\n\n## ArrayChunk\n\nFields: \\[am arr off end\\]  \nProtocols:  \nInterfaces: clojure.lang.IChunk, clojure.lang.Indexed  \n\n## Eduction\n\nFields: \\[xform coll\\]  \nProtocols:  \nInterfaces: clojure.lang.IReduceInit, clojure.lang.Sequential, java.lang.Iterable  \n\n## Vec\n\nFields: \\[am cnt shift root tail \\_meta\\]  \nProtocols:  \nInterfaces: clojure.core.IVecImpl, clojure.lang.Associative, clojure.lang.Counted, clojure.lang.IFn, clojure.lang.IHashEq, clojure.lang.ILookup, clojure.lang.IMeta, clojure.lang.IObj, clojure.lang.IPersistentCollection, clojure.lang.IPersistentStack, clojure.lang.IPersistentVector, clojure.lang.Indexed, clojure.lang.Reversible, clojure.lang.Seqable, clojure.lang.Sequential, java.lang.Comparable, java.lang.Iterable, java.util.Collection, java.util.List  \n\n## VecNode\n\nFields: \\[edit arr\\]  \nProtocols:  \nInterfaces:  \n\n## VecSeq\n\nFields: \\[am vec anode i offset \\_meta\\]  \nProtocols: [clojure.core.protocols/InternalReduce](clojure.core-api#clojure.core.protocols/InternalReduce)  \nInterfaces: clojure.lang.IChunkedSeq, clojure.lang.IHashEq, clojure.lang.IMeta, clojure.lang.IObj, clojure.lang.ISeq, clojure.lang.Seqable, java.lang.Iterable  \n\n## Public Variables and Functions\n\n## &\n\n```\nSyntax for use with fn.\n\nPlease see https://clojure.org/reference/special_forms#fn\n```\n\nAdded in Clojure version 1.0\n\n## \\*\n\n```\nUsage: (*)\n       (* x)\n       (* x y)\n       (* x y & more)\n```\n\n```\nReturns the product of nums. (*) returns 1. Does not auto-promote\nlongs, will throw on overflow. See also: *'\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1010)  \n\n## \\*'\n\n```\nUsage: (*')\n       (*' x)\n       (*' x y)\n       (*' x y & more)\n```\n\n```\nReturns the product of nums. (*') returns 1. Supports arbitrary precision.\nSee also: *\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L998)  \n\n## \\*1\n\n```\nbound in a repl thread to the most recent value printed\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6314)  \n\n## \\*2\n\n```\nbound in a repl thread to the second most recent value printed\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6319)  \n\n## \\*3\n\n```\nbound in a repl thread to the third most recent value printed\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6324)  \n\n## \\*agent\\*\n\n```\nThe agent currently running an action on this thread, else nil\n```\n\nAdded in Clojure version 1.0\n\n## \\*clojure-version\\*\n\n```\nThe version info for Clojure core, as a map containing :major :minor \n:incremental and :qualifier keys. Feature releases may increment \n:minor and/or :major, bugfix releases will increment :incremental. \nPossible values of :qualifier include \"GA\", \"SNAPSHOT\", \"RC-x\" \"BETA-x\"\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7137)  \n\n## \\*command-line-args\\*\n\n```\nA sequence of the supplied command line arguments, or nil if\nnone were supplied\n```\n\nAdded in Clojure version 1.0\n\n## \\*compile-files\\*\n\n```\nSet to true when compiling files, false otherwise.\n```\n\nAdded in Clojure version 1.0\n\n## \\*compile-path\\*\n\n```\nSpecifies the directory where 'compile' will write out .class\nfiles. This directory must be in the classpath for 'compile' to\nwork.\n\nDefaults to \"classes\"\n```\n\nAdded in Clojure version 1.0\n\n## \\*compiler-options\\*\n\n```\nA map of keys to options.\nNote, when binding dynamically make sure to merge with previous value.\nSupported options:\n:elide-meta - a collection of metadata keys to elide during compilation.\n:disable-locals-clearing - set to true to disable clearing, useful for using a debugger\n:direct-linking - set to true to use direct static invocation of functions, rather than vars\n  Note that call sites compiled with direct linking will not be affected by var redefinition.\n  Use ^:redef (or ^:dynamic) on a var to prevent direct linking and allow redefinition.\nSee https://clojure.org/reference/compilation for more information.\n```\n\nAdded in Clojure version 1.4\n\n## \\*data-readers\\*\n\n```\nMap from reader tag symbols to data reader Vars.\n\nWhen Clojure starts, it searches for files named 'data_readers.clj'\nand 'data_readers.cljc' at the root of the classpath. Each such file\nmust contain a literal map of symbols, like this:\n\n    {foo/bar my.project.foo/bar\n     foo/baz my.project/baz}\n\nThe first symbol in each pair is a tag that will be recognized by\nthe Clojure reader. The second symbol in the pair is the\nfully-qualified name of a Var which will be invoked by the reader to\nparse the form following the tag. For example, given the\ndata_readers.clj file above, the Clojure reader would parse this\nform:\n\n    #foo/bar [1 2 3]\n\nby invoking the Var #'my.project.foo/bar on the vector [1 2 3]. The\ndata reader function is invoked on the form AFTER it has been read\nas a normal Clojure data structure by the reader.\n\nReader tags without namespace qualifiers are reserved for\nClojure. Default reader tags are defined in\nclojure.core/default-data-readers but may be overridden in\ndata_readers.clj, data_readers.cljc, or by rebinding this Var.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7872)  \n\n## \\*default-data-reader-fn\\*\n\n```\nWhen no data reader is found for a tag and *default-data-reader-fn*\nis non-nil, it will be called with two arguments,\nthe tag and the value.  If *default-data-reader-fn* is nil (the\ndefault), an exception will be thrown for the unknown tag.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7901)  \n\n## \\*e\n\n```\nbound in a repl thread to the most recent exception caught by the repl\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6329)  \n\n## \\*err\\*\n\n```\nA java.io.Writer object representing standard error for print operations.\n\nDefaults to System/err, wrapped in a PrintWriter\n```\n\nAdded in Clojure version 1.0\n\n## \\*file\\*\n\n```\nThe path of the file being evaluated, as a String.\n\nWhen there is no file, e.g. in the REPL, the value is not defined.\n```\n\nAdded in Clojure version 1.0\n\n## \\*flush-on-newline\\*\n\n```\nWhen set to true, output will be flushed whenever a newline is printed.\n\nDefaults to true.\n```\n\nAdded in Clojure version 1.0\n\n## \\*in\\*\n\n```\nA java.io.Reader object representing standard input for read operations.\n\nDefaults to System/in, wrapped in a LineNumberingPushbackReader\n```\n\nAdded in Clojure version 1.0\n\n## \\*ns\\*\n\n```\nA clojure.lang.Namespace object representing the current namespace.\n```\n\nAdded in Clojure version 1.0\n\n## \\*out\\*\n\n```\nA java.io.Writer object representing standard output for print operations.\n\nDefaults to System/out, wrapped in an OutputStreamWriter\n```\n\nAdded in Clojure version 1.0\n\n## \\*print-dup\\*\n\n```\nWhen set to logical true, objects will be printed in a way that preserves\ntheir type when read in later.\n\nDefaults to false.\n```\n\nAdded in Clojure version 1.0\n\n## \\*print-length\\*\n\n```\n*print-length* controls how many items of each collection the\nprinter will print. If it is bound to logical false, there is no\nlimit. Otherwise, it must be bound to an integer indicating the maximum\nnumber of items of each collection to print. If a collection contains\nmore items, the printer will print items up to the limit followed by\n'...' to represent the remaining items. The root binding is nil\nindicating no limit.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L16)  \n\n## \\*print-level\\*\n\n```\n*print-level* controls how many levels deep the printer will\nprint nested objects. If it is bound to logical false, there is no\nlimit. Otherwise, it must be bound to an integer indicating the maximum\nlevel to print. Each argument to print is at level 0; if an argument is a\ncollection, its items are at level 1; and so on. If an object is a\ncollection and is at a level greater than or equal to the value bound to\n*print-level*, the printer prints '#' to represent it. The root binding\nis nil indicating no limit.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L27)  \n\n## \\*print-meta\\*\n\n```\nIf set to logical true, when printing an object, its metadata will also\nbe printed in a form that can be read back by the reader.\n\nDefaults to false.\n```\n\nAdded in Clojure version 1.0\n\n## \\*print-namespace-maps\\*\n\n```\n*print-namespace-maps* controls whether the printer will print\nnamespace map literal syntax. It defaults to false, but the REPL binds\nto true.\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L41)  \n\n## \\*print-readably\\*\n\n```\nWhen set to logical false, strings and characters will be printed with\nnon-alphanumeric characters converted to the appropriate escape sequences.\n\nDefaults to true\n```\n\nAdded in Clojure version 1.0\n\n## \\*read-eval\\*\n\n```\nDefaults to true (or value specified by system property, see below)\n***This setting implies that the full power of the reader is in play,\nincluding syntax that can cause code to execute. It should never be\nused with untrusted sources. See also: clojure.edn/read.***\n\nWhen set to logical false in the thread-local binding,\nthe eval reader (#=) and record/type literal syntax are disabled in read/load.\nExample (will fail): (binding [*read-eval* false] (read-string \"#=(* 2 21)\"))\n\nThe default binding can be controlled by the system property\n'clojure.read.eval' System properties can be set on the command line\nlike this:\n\njava -Dclojure.read.eval=false ...\n\nThe system property can also be set to 'unknown' via\n-Dclojure.read.eval=unknown, in which case the default binding\nis :unknown and all reads will fail in contexts where *read-eval*\nhas not been explicitly bound to either true or false. This setting\ncan be a useful diagnostic tool to ensure that all of your reads\noccur in considered contexts. You can also accomplish this in a\nparticular scope by binding *read-eval* to :unknown\n```\n\nAdded in Clojure version 1.0\n\n## \\*unchecked-math\\*\n\n```\nWhile bound to true, compilations of +, -, *, inc, dec and the\ncoercions will be done without overflow checks. While bound\nto :warn-on-boxed, same behavior as true, and a warning is emitted\nwhen compilation uses boxed math. Default: false.\n```\n\nAdded in Clojure version 1.3\n\n## \\*warn-on-reflection\\*\n\n```\nWhen set to true, the compiler will emit warnings when reflection is\nneeded to resolve Java method calls or field accesses.\n\nDefaults to false.\n```\n\nAdded in Clojure version 1.0\n\n## +\n\n```\nUsage: (+)\n       (+ x)\n       (+ x y)\n       (+ x y & more)\n```\n\n```\nReturns the sum of nums. (+) returns 0. Does not auto-promote\nlongs, will throw on overflow. See also: +'\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L986)  \n\n## +'\n\n```\nUsage: (+')\n       (+' x)\n       (+' x y)\n       (+' x y & more)\n```\n\n```\nReturns the sum of nums. (+') returns 0. Supports arbitrary precision.\nSee also: +\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L974)  \n\n## -\n\n```\nUsage: (- x)\n       (- x y)\n       (- x y & more)\n```\n\n```\nIf no ys are supplied, returns the negation of x, else subtracts\nthe ys from x and returns the result. Does not auto-promote\nlongs, will throw on overflow. See also: -'\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1045)  \n\n## -'\n\n```\nUsage: (-' x)\n       (-' x y)\n       (-' x y & more)\n```\n\n```\nIf no ys are supplied, returns the negation of x, else subtracts\nthe ys from x and returns the result. Supports arbitrary precision.\nSee also: -\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1033)  \n\n## -\\>\n\n```\nUsage: (-> x & forms)\n```\n\n```\nThreads the expr through the forms. Inserts x as the\nsecond item in the first form, making a list of it if it is not a\nlist already. If there are more forms, inserts the first form as the\nsecond item in second form, etc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1694)  \n\n## -\\>\\>\n\n```\nUsage: (->> x & forms)\n```\n\n```\nThreads the expr through the forms. Inserts x as the\nlast item in the first form, making a list of it if it is not a\nlist already. If there are more forms, inserts the first form as the\nlast item in second form, etc.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1710)  \n\n## -\\>ArrayChunk\n\n```\nUsage: (->ArrayChunk am arr off end)\n```\n\n```\nPositional factory function for class clojure.core.ArrayChunk.\n```\n\n[Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L37)  \n\n## -\\>Eduction\n\n```\nUsage: (->Eduction xform coll)\n```\n\n```\nPositional factory function for class clojure.core.Eduction.\n```\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7750)  \n\n## -\\>Vec\n\n```\nUsage: (->Vec am cnt shift root tail _meta)\n```\n\n```\nPositional factory function for class clojure.core.Vec.\n```\n\n[Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L170)  \n\n## -\\>VecNode\n\n```\nUsage: (->VecNode edit arr)\n```\n\n```\nPositional factory function for class clojure.core.VecNode.\n```\n\n[Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L18)  \n\n## -\\>VecSeq\n\n```\nUsage: (->VecSeq am vec anode i offset _meta)\n```\n\n```\nPositional factory function for class clojure.core.VecSeq.\n```\n\n[Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L59)  \n\n## .\n\n```\nUsage: (.instanceMember instance args*)\n       (.instanceMember Classname args*)\n       (Classname/staticMethod args*)\n       Classname/staticField\n```\n\n```\nThe instance member form works for both fields and methods.\nThey all expand into calls to the dot operator at macroexpansion time.\n\nPlease see https://clojure.org/java_interop#dot\n```\n\nAdded in Clojure version 1.0\n\n## ..\n\n```\nUsage: (.. x form)\n       (.. x form & more)\n```\n\n```\nform => fieldName-symbol or (instanceMethodName-symbol args*)\n\nExpands into a member access (.) of the first member on the first\nargument, followed by the next member on the result, etc. For\ninstance:\n\n(.. System (getProperties) (get \"os.name\"))\n\nexpands to:\n\n(. (. System (getProperties)) (get \"os.name\"))\n\nbut is easier to write, read, and understand.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1676)  \n\n## /\n\n```\nUsage: (/ x)\n       (/ x y)\n       (/ x y & more)\n```\n\n```\nIf no denominators are supplied, returns 1/numerator,\nelse returns numerator divided by all of the denominators.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1022)  \n\n## \\<\n\n```\nUsage: (< x)\n       (< x y)\n       (< x y & more)\n```\n\n```\nReturns non-nil if nums are in monotonically increasing order,\notherwise false.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L902)  \n\n## \\<=\n\n```\nUsage: (<= x)\n       (<= x y)\n       (<= x y & more)\n```\n\n```\nReturns non-nil if nums are in monotonically non-decreasing order,\notherwise false.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1057)  \n\n## =\n\n```\nUsage: (= x)\n       (= x y)\n       (= x y & more)\n```\n\n```\nEquality. Returns true if x equals y, false if not. Same as\nJava x.equals(y) except it also works for nil, and compares\nnumbers and collections in a type-independent manner.  Clojure's immutable data\nstructures define equals() (and thus =) as a value, not an identity,\ncomparison.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L785)  \n\n## ==\n\n```\nUsage: (== x)\n       (== x y)\n       (== x y & more)\n```\n\n```\nReturns non-nil if nums all have the equivalent\nvalue (type-independent), otherwise false\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1102)  \n\n## \\>\n\n```\nUsage: (> x)\n       (> x y)\n       (> x y & more)\n```\n\n```\nReturns non-nil if nums are in monotonically decreasing order,\notherwise false.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1072)  \n\n## \\>=\n\n```\nUsage: (>= x)\n       (>= x y)\n       (>= x y & more)\n```\n\n```\nReturns non-nil if nums are in monotonically non-increasing order,\notherwise false.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1087)  \n\n## NaN?\n\n```\nUsage: (NaN? num)\n```\n\n```\nReturns true if num is NaN, else false\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8090)  \n\n## PrintWriter-on\n\n```\nUsage: (PrintWriter-on flush-fn close-fn)\n```\n\n```\nimplements java.io.PrintWriter given flush-fn, which will be called\nwhen .flush() is called, with a string built up since the last call to .flush().\nif not nil, close-fn will be called with no arguments when .close is called\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L559)  \n\n## StackTraceElement-\\>vec\n\n```\nUsage: (StackTraceElement->vec o)\n```\n\n```\nConstructs a data representation for a StackTraceElement: [class method file line]\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L465)  \n\n## Throwable-\\>map\n\n```\nUsage: (Throwable->map o)\n```\n\n```\nConstructs a data representation for a Throwable with keys:\n:cause - root cause message\n:phase - error phase\n:via - cause chain, with cause keys:\n         :type - exception class symbol\n         :message - exception message\n         :data - ex-data\n         :at - top stack element\n:trace - root cause stack elements\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L471)  \n\n## abs\n\n```\nUsage: (abs a)\n```\n\n```\nReturns the absolute value of a.\nIf a is Long/MIN_VALUE => Long/MIN_VALUE\nIf a is a double and zero => +0.0\nIf a is a double and ##Inf or ##-Inf => ##Inf\nIf a is a double and ##NaN => ##NaN\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1137)  \n\n## accessor\n\n```\nUsage: (accessor s key)\n```\n\n```\nReturns a fn that, given an instance of a structmap with the basis,\nreturns the value at the key.  The key must be in the basis. The\nreturned function should be (slightly) more efficient than using\nget, but such use of accessors should be limited to known\nperformance-critical areas.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4072)  \n\n## aclone\n\n```\nUsage: (aclone array)\n```\n\n```\nReturns a clone of the Java array. Works on arrays of known\ntypes.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3906)  \n\n## add-classpath\n\n```\nUsage: (add-classpath url)\n```\n\n```\nDEPRECATED \n\nAdds the url (String or URL object) to the classpath per\nURLClassLoader.addURL\n```\n\nAdded in Clojure version 1.0\n\nDeprecated since Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5177)  \n\n## add-tap\n\n```\nUsage: (add-tap f)\n```\n\n```\nadds f, a fn of one argument, to the tap set. This function will be called with anything sent via tap>.\nThis function may (briefly) block (e.g. for streams), and will never impede calls to tap>,\nbut blocking indefinitely may cause tap values to be dropped.\nRemember f in order to remove-tap\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7982)  \n\n## add-watch\n\n```\nUsage: (add-watch reference key fn)\n```\n\n```\nAdds a watch function to an agent/atom/var/ref reference. The watch\nfn must be a fn of 4 args: a key, the reference, its old-state, its\nnew-state. Whenever the reference's state might have been changed,\nany registered watches will have their functions called. The watch fn\nwill be called synchronously, on the agent's thread if an agent,\nbefore any pending sends if agent or ref. Note that an atom's or\nref's state may have changed again prior to the fn call, so use\nold/new-state rather than derefing the reference. Note also that watch\nfns may be called from multiple threads simultaneously. Var watchers\nare triggered only by root binding changes, not thread-local\nset!s. Keys must be unique per reference, and can be used to remove\nthe watch with remove-watch, but are otherwise considered opaque by\nthe watch mechanism.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2161)  \n\n## agent\n\n```\nUsage: (agent state & options)\n```\n\n```\nCreates and returns an agent with an initial value of state and\nzero or more options (in any order):\n\n:meta metadata-map\n\n:validator validate-fn\n\n:error-handler handler-fn\n\n:error-mode mode-keyword\n\nIf metadata-map is supplied, it will become the metadata on the\nagent. validate-fn must be nil or a side-effect-free fn of one\nargument, which will be passed the intended new state on any state\nchange. If the new state is unacceptable, the validate-fn should\nreturn false or throw an exception.  handler-fn is called if an\naction throws an exception or if validate-fn rejects a new state --\nsee set-error-handler! for details.  The mode-keyword may be either\n:continue (the default if an error-handler is given) or :fail (the\ndefault if no error-handler is given) -- see set-error-mode! for\ndetails.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2071)  \n\n## agent-error\n\n```\nUsage: (agent-error a)\n```\n\n```\nReturns the exception thrown during an asynchronous action of the\nagent if the agent is failed.  Returns nil if the agent is not\nfailed.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2186)  \n\n## agent-errors\n\n```\nUsage: (agent-errors a)\n```\n\n```\nDEPRECATED: Use 'agent-error' instead.\nReturns a sequence of the exceptions thrown during asynchronous\nactions of the agent.\n```\n\nAdded in Clojure version 1.0\n\nDeprecated since Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2253)  \n\n## aget\n\n```\nUsage: (aget array idx)\n       (aget array idx & idxs)\n```\n\n```\nReturns the value at the index/indices. Works on Java arrays of all\ntypes.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3913)  \n\n## alength\n\n```\nUsage: (alength array)\n```\n\n```\nReturns the length of the Java array. Works on arrays of all\ntypes.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3899)  \n\n## alias\n\n```\nUsage: (alias alias namespace-sym)\n```\n\n```\nAdd an alias in the current namespace to another\nnamespace. Arguments are two symbols: the alias to be used, and\nthe symbolic name of the target namespace. Use :as in the ns macro in preference\nto calling this directly.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4265)  \n\n## all-ns\n\n```\nUsage: (all-ns)\n```\n\n```\nReturns a sequence of all namespaces.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4148)  \n\n## alter\n\n```\nUsage: (alter ref fun & args)\n```\n\n```\nMust be called in a transaction. Sets the in-transaction-value of\nref to:\n\n(apply fun in-transaction-value-of-ref args)\n\nand returns the in-transaction-value of ref.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2460)  \n\n## alter-meta!\n\n```\nUsage: (alter-meta! iref f & args)\n```\n\n```\nAtomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n(apply f its-current-meta args)\n\nf must be free of side-effects\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2423)  \n\n## alter-var-root\n\n```\nUsage: (alter-var-root v f & args)\n```\n\n```\nAtomically alters the root binding of var v by applying f to its\ncurrent value plus any args\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5530)  \n\n## amap\n\n```\nUsage: (amap a idx ret expr)\n```\n\n```\nMaps an expression across an array a, using an index named idx, and\nreturn value named ret, initialized to a clone of a, then setting \neach element of ret to the evaluation of expr, returning the new \narray ret.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5274)  \n\n## ancestors\n\n```\nUsage: (ancestors tag)\n       (ancestors h tag)\n```\n\n```\nReturns the immediate and indirect parents of tag, either via a Java type\ninheritance relationship or a relationship established via derive. h\nmust be a hierarchy obtained from make-hierarchy, if not supplied\ndefaults to the global hierarchy\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5623)  \n\n## and\n\n```\nUsage: (and)\n       (and x)\n       (and x & next)\n```\n\n```\nEvaluates exprs one at a time, from left to right. If a form\nreturns logical false (nil or false), and returns that value and\ndoesn't evaluate any of the other expressions, otherwise it returns\nthe value of the last expr. (and) returns true.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L844)  \n\n## any?\n\n```\nUsage: (any? x)\n```\n\n```\nReturns true given any argument.\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L540)  \n\n## apply\n\n```\nUsage: (apply f args)\n       (apply f x args)\n       (apply f x y args)\n       (apply f x y z args)\n       (apply f a b c d & args)\n```\n\n```\nApplies fn f to the argument list formed by prepending intervening arguments to args.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L662)  \n\n## areduce\n\n```\nUsage: (areduce a idx ret init expr)\n```\n\n```\nReduces an expression across an array a, using an index named idx,\nand return value named ret, initialized to init, setting ret to the \nevaluation of expr at each step, returning ret.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5290)  \n\n## array-map\n\n```\nUsage: (array-map)\n       (array-map & keyvals)\n```\n\n```\nConstructs an array-map. If any keys are equal, they are handled as\nif by repeated uses of assoc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4380)  \n\n## as-\\>\n\n```\nUsage: (as-> expr name & forms)\n```\n\n```\nBinds name to expr, evaluates the first form in the lexical context\nof that binding, then binds name to that result, repeating for each\nsuccessive form, returning the result of the last form.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7640)  \n\n## aset\n\n```\nUsage: (aset array idx val)\n       (aset array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on Java arrays of\nreference types. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3924)  \n\n## aset-boolean\n\n```\nUsage: (aset-boolean array idx val)\n       (aset-boolean array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of boolean. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3957)  \n\n## aset-byte\n\n```\nUsage: (aset-byte array idx val)\n       (aset-byte array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of byte. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3977)  \n\n## aset-char\n\n```\nUsage: (aset-char array idx val)\n       (aset-char array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of char. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3982)  \n\n## aset-double\n\n```\nUsage: (aset-double array idx val)\n       (aset-double array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of double. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3967)  \n\n## aset-float\n\n```\nUsage: (aset-float array idx val)\n       (aset-float array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of float. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3962)  \n\n## aset-int\n\n```\nUsage: (aset-int array idx val)\n       (aset-int array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of int. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3947)  \n\n## aset-long\n\n```\nUsage: (aset-long array idx val)\n       (aset-long array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of long. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3952)  \n\n## aset-short\n\n```\nUsage: (aset-short array idx val)\n       (aset-short array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of short. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3972)  \n\n## assert\n\n```\nUsage: (assert x)\n       (assert x message)\n```\n\n```\nEvaluates expr and throws an exception if it does not evaluate to\nlogical true.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4841)  \n\n## assoc\n\n```\nUsage: (assoc map key val)\n       (assoc map key val & kvs)\n```\n\n```\nassoc[iate]. When applied to a map, returns a new map of the\nsame (hashed/sorted) type, that contains the mapping of key(s) to\nval(s). When applied to a vector, returns a new vector that\ncontains val at index. Note - index must be <= (count vector).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L183)  \n\n## assoc!\n\n```\nUsage: (assoc! coll key val)\n       (assoc! coll key val & kvs)\n```\n\n```\nWhen applied to a transient map, adds mapping of key(s) to\nval(s). When applied to a transient vector, sets the val at index.\nNote - index must be <= (count vector). Returns coll.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3369)  \n\n## assoc-in\n\n```\nUsage: (assoc-in m [k & ks] v)\n```\n\n```\nAssociates a value in a nested associative structure, where ks is a\nsequence of keys and v is the new value and returns a new nested structure.\nIf any levels do not exist, hash-maps will be created.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6196)  \n\n## associative?\n\n```\nUsage: (associative? coll)\n```\n\n```\nReturns true if coll implements Associative\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6279)  \n\n## atom\n\n```\nUsage: (atom x)\n       (atom x & options)\n```\n\n```\nCreates and returns an Atom with an initial value of x and zero or\nmore options (in any order):\n\n:meta metadata-map\n\n:validator validate-fn\n\nIf metadata-map is supplied, it will become the metadata on the\natom. validate-fn must be nil or a side-effect-free fn of one\nargument, which will be passed the intended new state on any state\nchange. If the new state is unacceptable, the validate-fn should\nreturn false or throw an exception.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2344)  \n\n## await\n\n```\nUsage: (await & agents)\n```\n\n```\nBlocks the current thread (indefinitely!) until all actions\ndispatched thus far, from this thread or agent, to the agent(s) have\noccurred.  Will block on failed agents.  Will never return if\na failed agent is restarted with :clear-actions true or shutdown-agents was called.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3275)  \n\n## await-for\n\n```\nUsage: (await-for timeout-ms & agents)\n```\n\n```\nBlocks the current thread until all actions dispatched thus\nfar (from this thread or agent) to the agents have occurred, or the\ntimeout (in milliseconds) has elapsed. Returns logical false if\nreturning due to timeout, logical true otherwise.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3297)  \n\n## bases\n\n```\nUsage: (bases c)\n```\n\n```\nReturns the immediate superclass and direct interfaces of c, if any\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5568)  \n\n## bean\n\n```\nUsage: (bean x)\n```\n\n```\nTakes a Java object and returns a read-only implementation of the\nmap abstraction based upon its JavaBean properties.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L403)  \n\n## bigdec\n\n```\nUsage: (bigdec x)\n```\n\n```\nCoerce to BigDecimal\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3648)  \n\n## bigint\n\n```\nUsage: (bigint x)\n```\n\n```\nCoerce to BigInt\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3620)  \n\n## biginteger\n\n```\nUsage: (biginteger x)\n```\n\n```\nCoerce to BigInteger\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3634)  \n\n## binding\n\n```\nUsage: (binding bindings & body)\n```\n\n```\nbinding => var-symbol init-expr\n\nCreates new bindings for the (already-existing) vars, with the\nsupplied initial values, executes the exprs in an implicit do, then\nre-establishes the bindings that existed before.  The new bindings\nare made in parallel (unlike let); all init-exprs are evaluated\nbefore the vars are bound to their new values.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1964)  \n\n## bit-and\n\n```\nUsage: (bit-and x y)\n       (bit-and x y & more)\n```\n\n```\nBitwise and\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1307)  \n\n## bit-and-not\n\n```\nUsage: (bit-and-not x y)\n       (bit-and-not x y & more)\n```\n\n```\nBitwise and with complement\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1334)  \n\n## bit-clear\n\n```\nUsage: (bit-clear x n)\n```\n\n```\nClear bit at index n\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1345)  \n\n## bit-flip\n\n```\nUsage: (bit-flip x n)\n```\n\n```\nFlip bit at index n\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1357)  \n\n## bit-not\n\n```\nUsage: (bit-not x)\n```\n\n```\nBitwise complement\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1300)  \n\n## bit-or\n\n```\nUsage: (bit-or x y)\n       (bit-or x y & more)\n```\n\n```\nBitwise or\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1316)  \n\n## bit-set\n\n```\nUsage: (bit-set x n)\n```\n\n```\nSet bit at index n\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1351)  \n\n## bit-shift-left\n\n```\nUsage: (bit-shift-left x n)\n```\n\n```\nBitwise shift left\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1370)  \n\n## bit-shift-right\n\n```\nUsage: (bit-shift-right x n)\n```\n\n```\nBitwise shift right\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1376)  \n\n## bit-test\n\n```\nUsage: (bit-test x n)\n```\n\n```\nTest bit at index n\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1363)  \n\n## bit-xor\n\n```\nUsage: (bit-xor x y)\n       (bit-xor x y & more)\n```\n\n```\nBitwise exclusive or\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1325)  \n\n## boolean\n\n```\nUsage: (boolean x)\n```\n\n```\nCoerce to boolean\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1620)  \n\n## boolean-array\n\n```\nUsage: (boolean-array size-or-seq)\n       (boolean-array size init-val-or-seq)\n```\n\n```\nCreates an array of booleans\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5310)  \n\n## boolean?\n\n```\nUsage: (boolean? x)\n```\n\n```\nReturn true if x is a Boolean\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L521)  \n\n## booleans\n\n```\nUsage: (booleans xs)\n```\n\n```\nCasts to boolean[]\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5373)  \n\n## bound-fn\n\n```\nUsage: (bound-fn & fntail)\n```\n\n```\nReturns a function defined by the given fntail, which will install the\nsame bindings in effect as in the thread at the time bound-fn was called.\nThis may be used to define a helper function which runs on a different\nthread, but needs the same bindings in place.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2023)  \n\n## bound-fn\\*\n\n```\nUsage: (bound-fn* f)\n```\n\n```\nReturns a function, which will install the same bindings in effect as in\nthe thread at the time bound-fn* was called and then call f with any given\narguments. This may be used to define a helper function which runs on a\ndifferent thread, but needs the same bindings in place.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2011)  \n\n## bound?\n\n```\nUsage: (bound? & vars)\n```\n\n```\nReturns true if all of the vars provided as arguments have any bound value, root or thread-local.\nImplies that deref'ing the provided vars will succeed. Returns true if no vars are provided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5537)  \n\n## bounded-count\n\n```\nUsage: (bounded-count n coll)\n```\n\n```\nIf coll is counted? returns its count, else will count at most the first n\nelements of coll using its seq\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7452)  \n\n## butlast\n\n```\nUsage: (butlast coll)\n```\n\n```\nReturn a seq of all but the last item in coll, in linear time\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L274)  \n\n## byte\n\n```\nUsage: (byte x)\n```\n\n```\nCoerce to byte\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3505)  \n\n## byte-array\n\n```\nUsage: (byte-array size-or-seq)\n       (byte-array size init-val-or-seq)\n```\n\n```\nCreates an array of bytes\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5318)  \n\n## bytes\n\n```\nUsage: (bytes xs)\n```\n\n```\nCasts to bytes[]\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5378)  \n\n## bytes?\n\n```\nUsage: (bytes? x)\n```\n\n```\nReturn true if x is a byte array\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5413)  \n\n## case\n\n```\nUsage: (case e & clauses)\n```\n\n```\nTakes an expression, and a set of clauses.\n\nEach clause can take the form of either:\n\ntest-constant result-expr\n\n(test-constant1 ... test-constantN)  result-expr\n\nThe test-constants are not evaluated. They must be compile-time\nliterals, and need not be quoted.  If the expression is equal to a\ntest-constant, the corresponding result-expr is returned. A single\ndefault expression can follow the clauses, and its value will be\nreturned if no clause matches. If no default expression is provided\nand no clause matches, an IllegalArgumentException is thrown.\n\nUnlike cond and condp, case does a constant-time dispatch, the\nclauses are not considered sequentially.  All manner of constant\nexpressions are acceptable in case, including numbers, strings,\nsymbols, keywords, and (Clojure) composites thereof. Note that since\nlists are used to group multiple constants that map to the same\nexpression, a vector can be used to match a list if needed. The\ntest-constants need not be all of the same type.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6748)  \n\n## cast\n\n```\nUsage: (cast c x)\n```\n\n```\nThrows a ClassCastException if x is not a c, else returns x.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L348)  \n\n## cat\n\n```\nUsage: (cat rf)\n```\n\n```\nA transducer which concatenates the contents of each input, which must be a\ncollection, into the reduction.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7687)  \n\n## catch\n\n```\nSyntax for use with try.\n\nPlease see https://clojure.org/reference/special_forms#try\n```\n\nAdded in Clojure version 1.0\n\n## char\n\n```\nUsage: (char x)\n```\n\n```\nCoerce to char\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3511)  \n\n## char-array\n\n```\nUsage: (char-array size-or-seq)\n       (char-array size init-val-or-seq)\n```\n\n```\nCreates an array of chars\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5326)  \n\n## char-escape-string\n\n```\nReturns escape string for char or nil if none\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L200)  \n\n## char-name-string\n\n```\nReturns name string for char or nil if none\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L342)  \n\n## char?\n\n```\nUsage: (char? x)\n```\n\n```\nReturn true if x is a Character\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L155)  \n\n## chars\n\n```\nUsage: (chars xs)\n```\n\n```\nCasts to chars[]\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5383)  \n\n## class\n\n```\nUsage: (class x)\n```\n\n```\nReturns the Class of x\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3461)  \n\n## class?\n\n```\nUsage: (class? x)\n```\n\n```\nReturns true if x is an instance of Class\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5468)  \n\n## clear-agent-errors\n\n```\nUsage: (clear-agent-errors a)\n```\n\n```\nDEPRECATED: Use 'restart-agent' instead.\nClears any exceptions thrown during asynchronous actions of the\nagent, allowing subsequent actions to occur.\n```\n\nAdded in Clojure version 1.0\n\nDeprecated since Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2263)  \n\n## clojure-version\n\n```\nUsage: (clojure-version)\n```\n\n```\nReturns clojure version as a printable string.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7149)  \n\n## coll?\n\n```\nUsage: (coll? x)\n```\n\n```\nReturns true if x implements IPersistentCollection\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6248)  \n\n## comment\n\n```\nUsage: (comment & body)\n```\n\n```\nIgnores body, yields nil\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4735)  \n\n## commute\n\n```\nUsage: (commute ref fun & args)\n```\n\n```\nMust be called in a transaction. Sets the in-transaction-value of\nref to:\n\n(apply fun in-transaction-value-of-ref args)\n\nand returns the in-transaction-value of ref.\n\nAt the commit point of the transaction, sets the value of ref to be:\n\n(apply fun most-recently-committed-value-of-ref args)\n\nThus fun should be commutative, or, failing that, you must accept\nlast-one-in-wins behavior.  commute allows for more concurrency than\nref-set.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2439)  \n\n## comp\n\n```\nUsage: (comp)\n       (comp f)\n       (comp f g)\n       (comp f g & fs)\n```\n\n```\nTakes a set of functions and returns a fn that is the composition\nof those fns.  The returned fn takes a variable number of args,\napplies the rightmost of fns to the args, the next\nfn (right-to-left) to the result, etc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2574)  \n\n## comparator\n\n```\nUsage: (comparator pred)\n```\n\n```\nReturns an implementation of java.util.Comparator based upon pred.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3095)  \n\n## compare\n\n```\nUsage: (compare x y)\n```\n\n```\nComparator. Returns a negative number, zero, or a positive number\nwhen x is logically 'less than', 'equal to', or 'greater than'\ny. Same as Java x.compareTo(y) except it also works for nil, and\ncompares numbers and collections in a type-independent manner. x\nmust implement Comparable\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L833)  \n\n## compare-and-set!\n\n```\nUsage: (compare-and-set! atom oldval newval)\n```\n\n```\nAtomically sets the value of atom to newval if and only if the\ncurrent value of the atom is identical to oldval. Returns true if\nset happened, else false\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2385)  \n\n## compile\n\n```\nUsage: (compile lib)\n```\n\n```\nCompiles the namespace named by the symbol lib into a set of\nclassfiles. The source for the lib must be in a proper\nclasspath-relative directory. The output files will go into the\ndirectory specified by *compile-path*, and that directory too must\nbe in the classpath.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6163)  \n\n## complement\n\n```\nUsage: (complement f)\n```\n\n```\nTakes a fn f and returns a fn that takes the same arguments as f,\nhas the same effects, if any, and returns the opposite truth value.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1447)  \n\n## completing\n\n```\nUsage: (completing f)\n       (completing f cf)\n```\n\n```\nTakes a reducing function f of 2 args and returns a fn suitable for\ntransduce by adding an arity-1 signature that calls cf (default -\nidentity) on the result argument.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6921)  \n\n## concat\n\n```\nUsage: (concat)\n       (concat x)\n       (concat x y)\n       (concat x y & zs)\n```\n\n```\nReturns a lazy seq representing the concatenation of the elements in the supplied colls.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L720)  \n\n## cond\n\n```\nUsage: (cond & clauses)\n```\n\n```\nTakes a set of test/expr pairs. It evaluates each test one at a\ntime.  If a test returns logical true, cond evaluates and returns\nthe value of the corresponding expr and doesn't evaluate any of the\nother tests or exprs. (cond) returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L576)  \n\n## cond-\\>\n\n```\nUsage: (cond-> expr & clauses)\n```\n\n```\nTakes an expression and a set of test/form pairs. Threads expr (via ->)\nthrough each form for which the corresponding test\nexpression is true. Note that, unlike cond branching, cond-> threading does\nnot short circuit after the first true test expression.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7606)  \n\n## cond-\\>\\>\n\n```\nUsage: (cond->> expr & clauses)\n```\n\n```\nTakes an expression and a set of test/form pairs. Threads expr (via ->>)\nthrough each form for which the corresponding test expression\nis true.  Note that, unlike cond branching, cond->> threading does not short circuit\nafter the first true test expression.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7623)  \n\n## condp\n\n```\nUsage: (condp pred expr & clauses)\n```\n\n```\nTakes a binary predicate, an expression, and a set of clauses.\nEach clause can take the form of either:\n\ntest-expr result-expr\n\ntest-expr :>> result-fn\n\nNote :>> is an ordinary keyword.\n\nFor each clause, (pred test-expr expr) is evaluated. If it returns\nlogical true, the clause is a match. If a binary clause matches, the\nresult-expr is returned, if a ternary clause matches, its result-fn,\nwhich must be a unary function, is called with the result of the\npredicate as its argument, the result of that call being the return\nvalue of condp. A single default expression can follow the clauses,\nand its value will be returned if no clause matches. If no default\nexpression is provided and no clause matches, an\nIllegalArgumentException is thrown.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6394)  \n\n## conj\n\n```\nUsage: (conj)\n       (conj coll)\n       (conj coll x)\n       (conj coll x & xs)\n```\n\n```\nconj[oin]. Returns a new collection with the xs\n'added'. (conj nil item) returns (item).\n(conj coll) returns coll. (conj) returns [].\nThe 'addition' may happen at different 'places' depending\non the concrete type.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L75)  \n\n## conj!\n\n```\nUsage: (conj!)\n       (conj! coll)\n       (conj! coll x)\n```\n\n```\nAdds x to the transient collection, and return coll. The 'addition'\nmay happen at different 'places' depending on the concrete type.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3359)  \n\n## cons\n\n```\nUsage: (cons x seq)\n```\n\n```\nReturns a new seq where x is the first element and seq is\nthe rest.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L22)  \n\n## constantly\n\n```\nUsage: (constantly x)\n```\n\n```\nReturns a function that takes any number of arguments and returns x.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1459)  \n\n## construct-proxy\n\n```\nUsage: (construct-proxy c & ctor-args)\n```\n\n```\nTakes a proxy class and any arguments for its superclass ctor and\ncreates and returns an instance of the proxy.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L295)  \n\n## contains?\n\n```\nUsage: (contains? coll key)\n```\n\n```\nReturns true if key is present in the given collection, otherwise\nreturns false.  Note that for numerically indexed collections like\nvectors and Java arrays, this tests if the numeric key is within the\nrange of indexes. 'contains?' operates constant or logarithmic time;\nit will not perform a linear search for a value.  See also 'some'.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1498)  \n\n## count\n\n```\nUsage: (count coll)\n```\n\n```\nReturns the number of items in the collection. (count nil) returns\n0.  Also works on strings, arrays, and Java Collections and Maps\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L876)  \n\n## counted?\n\n```\nUsage: (counted? coll)\n```\n\n```\nReturns true if coll implements count in constant time\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6297)  \n\n## create-ns\n\n```\nUsage: (create-ns sym)\n```\n\n```\nCreate a new namespace named by the symbol if one doesn't already\nexist, returns it or the already-existing namespace of the same\nname.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4133)  \n\n## create-struct\n\n```\nUsage: (create-struct & keys)\n```\n\n```\nReturns a structure basis object.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4039)  \n\n## cycle\n\n```\nUsage: (cycle coll)\n```\n\n```\nReturns a lazy (infinite!) sequence of repetitions of the items in coll.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2996)  \n\n## dec\n\n```\nUsage: (dec x)\n```\n\n```\nReturns a number one less than num. Does not auto-promote\nlongs, will throw on overflow. See also: dec'\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1156)  \n\n## dec'\n\n```\nUsage: (dec' x)\n```\n\n```\nReturns a number one less than num. Supports arbitrary precision.\nSee also: dec\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1149)  \n\n## decimal?\n\n```\nUsage: (decimal? n)\n```\n\n```\nReturns true if n is a BigDecimal\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3599)  \n\n## declare\n\n```\nUsage: (declare & names)\n```\n\n```\ndefs the supplied var names with no bindings, useful for making forward declarations.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2793)  \n\n## dedupe\n\n```\nUsage: (dedupe)\n       (dedupe coll)\n```\n\n```\nReturns a lazy sequence removing consecutive duplicates in coll.\nReturns a transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7723)  \n\n## def\n\n```\nUsage: (def symbol doc-string? init?)\n```\n\n```\nCreates and interns a global var with the name\nof symbol in the current namespace (*ns*) or locates such a var if\nit already exists.  If init is supplied, it is evaluated, and the\nroot binding of the var is set to the resulting value.  If init is\nnot supplied, the root binding of the var is unaffected.\n\nPlease see https://clojure.org/reference/special_forms#def\n```\n\nAdded in Clojure version 1.0\n\n## default-data-readers\n\n```\nDefault map of data reader functions provided by Clojure. May be\noverridden by binding *data-readers*.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7864)  \n\n## definline\n\n```\nUsage: (definline name & decl)\n```\n\n```\nExperimental - like defmacro, except defines a named function whose\nbody is the expansion, calls to which may be expanded inline as if\nit were a macro. Cannot be used with variadic (&) args.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5254)  \n\n## definterface\n\n```\nUsage: (definterface name & sigs)\n```\n\n```\nCreates a new Java interface with the given name and method sigs.\nThe method return types and parameter types may be specified with type hints,\ndefaulting to Object if omitted.\n\n(definterface MyInterface\n  (^int method1 [x])\n  (^Bar method2 [^Baz b ^Quux q]))\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L20)  \n\n## defmacro\n\n```\nUsage: (defmacro name doc-string? attr-map? [params*] body)\n       (defmacro name doc-string? attr-map? ([params*] body) + attr-map?)\n```\n\n```\nLike defn, but the resulting function name is declared as a\nmacro and will be used as a macro by the compiler when it is\ncalled.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L446)  \n\n## defmethod\n\n```\nUsage: (defmethod multifn dispatch-val & fn-tail)\n```\n\n```\nCreates and installs a new method of multimethod associated with dispatch-value. \n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1800)  \n\n## defmulti\n\n```\nUsage: (defmulti name docstring? attr-map? dispatch-fn & options)\n```\n\n```\nCreates a new multimethod with the associated dispatch function.\nThe docstring and attr-map are optional.\n\nOptions are key-value pairs and may be one of:\n\n:default\n\nThe default dispatch value, defaults to :default\n\n:hierarchy\n\nThe value used for hierarchical dispatch (e.g. ::square is-a ::shape)\n\nHierarchies are type-like relationships that do not depend upon type\ninheritance. By default Clojure's multimethods dispatch off of a\nglobal hierarchy map.  However, a hierarchy relationship can be\ncreated with the derive function used to augment the root ancestor\ncreated with make-hierarchy.\n\nMultimethods expect the value of the hierarchy option to be supplied as\na reference type e.g. a var (i.e. via the Var-quote dispatch macro #'\nor the var special form).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1742)  \n\n## defn\n\n```\nUsage: (defn name doc-string? attr-map? [params*] prepost-map? body)\n       (defn name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?)\n```\n\n```\nSame as (def name (fn [params* ] exprs*)) or (def\nname (fn ([params* ] exprs*)+)) with any doc-string or attrs added\nto the var metadata. prepost-map defines a map with optional keys\n:pre and :post that contain collections of pre or post conditions.\n```\n\n```\nSpecs:\n  Args: (cat\n         :fn-name simple-symbol?\n         :docstring (? string?)\n         :meta (? map?)\n         :fn-tail (alt\n                   :arity-1 :clojure.core.specs.alpha/params+body\n                   :arity-n (cat\n                             :bodies (+\n                                       (spec\n                                         :clojure.core.specs.alpha/params+body))\n                             :attr-map (? map?))))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L285)  \n\n## defn-\n\n```\nUsage: (defn- name & decls)\n```\n\n```\nsame as defn, yielding non-public def\n```\n\n```\nSpecs:\n  Args: (cat\n         :fn-name simple-symbol?\n         :docstring (? string?)\n         :meta (? map?)\n         :fn-tail (alt\n                   :arity-1 :clojure.core.specs.alpha/params+body\n                   :arity-n (cat\n                             :bodies (+\n                                       (spec\n                                         :clojure.core.specs.alpha/params+body))\n                             :attr-map (? map?))))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4950)  \n\n## defonce\n\n```\nUsage: (defonce name expr)\n```\n\n```\ndefs name to have the root value of the expr iff the named var has no root value,\nelse expr is unevaluated\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5853)  \n\n## defprotocol\n\n```\nUsage: (defprotocol name & opts+sigs)\n```\n\n```\nA protocol is a named set of named methods and their signatures:\n(defprotocol AProtocolName\n\n  ;optional doc string\n  \"A doc string for AProtocol abstraction\"\n\n ;options\n :extend-via-metadata true\n\n;method signatures\n  (bar [this a b] \"bar docs\")\n  (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\nNo implementations are provided. Docs can be specified for the\nprotocol overall and for each method. The above yields a set of\npolymorphic functions and a protocol object. All are\nnamespace-qualified by the ns enclosing the definition The resulting\nfunctions dispatch on the type of their first argument, which is\nrequired and corresponds to the implicit target object ('this' in \nJava parlance). defprotocol is dynamic, has no special compile-time \neffect, and defines no new types or classes. Implementations of \nthe protocol methods can be provided using extend.\n\nWhen :extend-via-metadata is true, values can extend protocols by\nadding metadata where keys are fully-qualified protocol function\nsymbols and values are function implementations. Protocol\nimplementations are checked first for direct definitions (defrecord,\ndeftype, reify), then metadata definitions, then external\nextensions (extend, extend-type, extend-protocol)\n\ndefprotocol will automatically generate a corresponding interface,\nwith the same name as the protocol, i.e. given a protocol:\nmy.ns/Protocol, an interface: my.ns.Protocol. The interface will\nhave methods corresponding to the protocol functions, and the\nprotocol will automatically work with instances of the interface.\n\nNote that you should not use this interface with deftype or\nreify, as they support the protocol directly:\n\n(defprotocol P \n  (foo [this]) \n  (bar-me [this] [this y]))\n\n(deftype Foo [a b c] \n P\n  (foo [this] a)\n  (bar-me [this] b)\n  (bar-me [this y] (+ c y)))\n\n(bar-me (Foo. 1 2 3) 42)\n=> 45\n\n(foo \n  (let [x 42]\n    (reify P \n      (foo [this] 17)\n      (bar-me [this] x)\n      (bar-me [this y] x))))\n=> 17\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L713)  \n\n## defrecord\n\n```\nUsage: (defrecord name [& fields] & opts+specs)\n```\n\n```\n(defrecord name [fields*]  options* specs*)\n\nOptions are expressed as sequential keywords and arguments (in any order).\n\nSupported options:\n:load-ns - if true, importing the record class will cause the\n           namespace in which the record was defined to be loaded.\n           Defaults to false.\n\nEach spec consists of a protocol or interface name followed by zero\nor more method bodies:\n\nprotocol-or-interface-or-Object\n(methodName [args*] body)*\n\nDynamically generates compiled bytecode for class with the given\nname, in a package with the same name as the current namespace, the\ngiven fields, and, optionally, methods for protocols and/or\ninterfaces.\n\nThe class will have the (immutable) fields named by\nfields, which can have type hints. Protocols/interfaces and methods\nare optional. The only methods that can be supplied are those\ndeclared in the protocols/interfaces.  Note that method bodies are\nnot closures, the local environment includes only the named fields,\nand those fields can be accessed directly.\n\nMethod definitions take the form:\n\n(methodname [args*] body)\n\nThe argument and return types can be hinted on the arg and\nmethodname symbols. If not supplied, they will be inferred, so type\nhints should be reserved for disambiguation.\n\nMethods should be supplied for all methods of the desired\nprotocol(s) and interface(s). You can also define overrides for\nmethods of Object. Note that a parameter must be supplied to\ncorrespond to the target object ('this' in Java parlance). Thus\nmethods for interfaces will take one more argument than do the\ninterface declarations. Note also that recur calls to the method\nhead should *not* pass the target object, it will be supplied\nautomatically and can not be substituted.\n\nIn the method bodies, the (unqualified) name can be used to name the\nclass (for calls to new, instance? etc).\n\nThe class will have implementations of several (clojure.lang)\ninterfaces generated automatically: IObj (metadata support) and\nIPersistentMap, and all of their superinterfaces.\n\nIn addition, defrecord will define type-and-value-based =,\nand will defined Java .hashCode and .equals consistent with the\ncontract for java.util.Map.\n\nWhen AOT compiling, generates compiled bytecode for a class with the\ngiven name (a symbol), prepends the current ns as the package, and\nwrites the .class file to the *compile-path* directory.\n\nTwo constructors will be defined, one taking the designated fields\nfollowed by a metadata map (nil for none) and an extension field\nmap (nil for none), and one taking only the fields (using nil for\nmeta and extension fields). Note that the field names __meta,\n__extmap, __hash and __hasheq are currently reserved and should not\nbe used when defining your own records.\n\nGiven (defrecord TypeName ...), two factory functions will be\ndefined: ->TypeName, taking positional parameters for the fields,\nand map->TypeName, taking a map of keywords to field values.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L313)  \n\n## defstruct\n\n```\nUsage: (defstruct name & keys)\n```\n\n```\nSame as (def name (create-struct keys...))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4046)  \n\n## deftype\n\n```\nUsage: (deftype name [& fields] & opts+specs)\n```\n\n```\n(deftype name [fields*]  options* specs*)\n\nOptions are expressed as sequential keywords and arguments (in any order).\n\nSupported options:\n:load-ns - if true, importing the type class will cause the\n           namespace in which the type was defined to be loaded.\n           Defaults to false.\n\nEach spec consists of a protocol or interface name followed by zero\nor more method bodies:\n\nprotocol-or-interface-or-Object\n(methodName [args*] body)*\n\nDynamically generates compiled bytecode for class with the given\nname, in a package with the same name as the current namespace, the\ngiven fields, and, optionally, methods for protocols and/or\ninterfaces. \n\nThe class will have the (by default, immutable) fields named by\nfields, which can have type hints. Protocols/interfaces and methods\nare optional. The only methods that can be supplied are those\ndeclared in the protocols/interfaces.  Note that method bodies are\nnot closures, the local environment includes only the named fields,\nand those fields can be accessed directly. Fields can be qualified\nwith the metadata :volatile-mutable true or :unsynchronized-mutable\ntrue, at which point (set! afield aval) will be supported in method\nbodies. Note well that mutable fields are extremely difficult to use\ncorrectly, and are present only to facilitate the building of higher\nlevel constructs, such as Clojure's reference types, in Clojure\nitself. They are for experts only - if the semantics and\nimplications of :volatile-mutable or :unsynchronized-mutable are not\nimmediately apparent to you, you should not be using them.\n\nMethod definitions take the form:\n\n(methodname [args*] body)\n\nThe argument and return types can be hinted on the arg and\nmethodname symbols. If not supplied, they will be inferred, so type\nhints should be reserved for disambiguation.\n\nMethods should be supplied for all methods of the desired\nprotocol(s) and interface(s). You can also define overrides for\nmethods of Object. Note that a parameter must be supplied to\ncorrespond to the target object ('this' in Java parlance). Thus\nmethods for interfaces will take one more argument than do the\ninterface declarations. Note also that recur calls to the method\nhead should *not* pass the target object, it will be supplied\nautomatically and can not be substituted.\n\nIn the method bodies, the (unqualified) name can be used to name the\nclass (for calls to new, instance? etc).\n\nWhen AOT compiling, generates compiled bytecode for a class with the\ngiven name (a symbol), prepends the current ns as the package, and\nwrites the .class file to the *compile-path* directory.\n\nOne constructor will be defined, taking the designated fields.  Note\nthat the field names __meta, __extmap, __hash and __hasheq are currently\nreserved and should not be used when defining your own types.\n\nGiven (deftype TypeName ...), a factory function called ->TypeName\nwill be defined, taking positional parameters for the fields\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L423)  \n\n## delay\n\n```\nUsage: (delay & body)\n```\n\n```\nTakes a body of expressions and yields a Delay object that will\ninvoke the body only the first time it is forced (with force or deref/@), and\nwill cache the result and return it on all subsequent force\ncalls. See also - realized?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L748)  \n\n## delay?\n\n```\nUsage: (delay? x)\n```\n\n```\nreturns true if x is a Delay created with delay\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L757)  \n\n## deliver\n\n```\nUsage: (deliver promise val)\n```\n\n```\nDelivers the supplied value to the promise, releasing any pending\nderefs. A subsequent call to deliver on a promise will have no effect.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7195)  \n\n## denominator\n\n```\nUsage: (denominator r)\n```\n\n```\nReturns the denominator part of a Ratio.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3591)  \n\n## deref\n\n```\nUsage: (deref ref)\n       (deref ref timeout-ms timeout-val)\n```\n\n```\nAlso reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,\nreturns the in-transaction-value of ref, else returns the\nmost-recently-committed value of ref. When applied to a var, agent\nor atom, returns its current state. When applied to a delay, forces\nit if not already forced. When applied to a future, will block if\ncomputation not complete. When applied to a promise, will block\nuntil a value is delivered.  The variant taking a timeout can be\nused for blocking references (futures and promises), and will return\ntimeout-val if the timeout (in milliseconds) is reached before a\nvalue is available. See also - realized?.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2323)  \n\n## derive\n\n```\nUsage: (derive tag parent)\n       (derive h tag parent)\n```\n\n```\nEstablishes a parent/child relationship between parent and\ntag. Parent must be a namespace-qualified symbol or keyword and\nchild can be either a namespace-qualified symbol or keyword or a\nclass. h must be a hierarchy obtained from make-hierarchy, if not\nsupplied defaults to, and modifies, the global hierarchy.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5651)  \n\n## descendants\n\n```\nUsage: (descendants tag)\n       (descendants h tag)\n```\n\n```\nReturns the immediate and indirect children of tag, through a\nrelationship established via derive. h must be a hierarchy obtained\nfrom make-hierarchy, if not supplied defaults to the global\nhierarchy. Note: does not work on Java type inheritance\nrelationships.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5639)  \n\n## disj\n\n```\nUsage: (disj set)\n       (disj set key)\n       (disj set key & ks)\n```\n\n```\ndisj[oin]. Returns a new set of the same (hashed/sorted) type, that\ndoes not contain key(s).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1533)  \n\n## disj!\n\n```\nUsage: (disj! set)\n       (disj! set key)\n       (disj! set key & ks)\n```\n\n```\ndisj[oin]. Returns a transient set of the same (hashed/sorted) type, that\ndoes not contain key(s).\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3401)  \n\n## dissoc\n\n```\nUsage: (dissoc map)\n       (dissoc map key)\n       (dissoc map key & ks)\n```\n\n```\ndissoc[iate]. Returns a new map of the same (hashed/sorted) type,\nthat does not contain a mapping for key(s).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1519)  \n\n## dissoc!\n\n```\nUsage: (dissoc! map key)\n       (dissoc! map key & ks)\n```\n\n```\nReturns a transient map that doesn't contain a mapping for key(s).\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3382)  \n\n## distinct\n\n```\nUsage: (distinct)\n       (distinct coll)\n```\n\n```\nReturns a lazy sequence of the elements of coll with duplicates removed.\nReturns a stateful transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5054)  \n\n## distinct?\n\n```\nUsage: (distinct? x)\n       (distinct? x y)\n       (distinct? x y & more)\n```\n\n```\nReturns true if no two of the arguments are =\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5710)  \n\n## do\n\n```\nUsage: (do exprs*)\n```\n\n```\nEvaluates the expressions in order and returns the value of\nthe last. If no expressions are supplied, returns nil.\n\nPlease see https://clojure.org/reference/special_forms#do\n```\n\nAdded in Clojure version 1.0\n\n## doall\n\n```\nUsage: (doall coll)\n       (doall n coll)\n```\n\n```\nWhen lazy sequences are produced via functions that have side\neffects, any effects other than those needed to produce the first\nelement in the seq do not occur until the seq is consumed. doall can\nbe used to force any effects. Walks through the successive nexts of\nthe seq, retains the head and returns it, thus causing the entire\nseq to reside in memory at one time.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3149)  \n\n## dorun\n\n```\nUsage: (dorun coll)\n       (dorun n coll)\n```\n\n```\nWhen lazy sequences are produced via functions that have side\neffects, any effects other than those needed to produce the first\nelement in the seq do not occur until the seq is consumed. dorun can\nbe used to force any effects. Walks through the successive nexts of\nthe seq, does not retain the head and returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3134)  \n\n## doseq\n\n```\nUsage: (doseq seq-exprs & body)\n```\n\n```\nRepeatedly executes body (presumably for side-effects) with\nbindings and filtering as provided by \"for\".  Does not retain\nthe head of the sequence. Returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3217)  \n\n## dosync\n\n```\nUsage: (dosync & exprs)\n```\n\n```\nRuns the exprs (in an implicit do) in a transaction that encompasses\nexprs and any nested calls.  Starts a transaction if none is already\nrunning on this thread. Any uncaught exception will abort the\ntransaction and flow out of dosync. The exprs may be run more than\nonce, but any effects on Refs will be atomic.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5101)  \n\n## dotimes\n\n```\nUsage: (dotimes bindings & body)\n```\n\n```\nbindings => name n\n\nRepeatedly executes body (presumably for side-effects) with name\nbound to integers from 0 through n-1.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3314)  \n\n## doto\n\n```\nUsage: (doto x & forms)\n```\n\n```\nEvaluates x then calls all of the methods and functions with the\nvalue of x supplied at the front of the given arguments.  The forms\nare evaluated in order.  Returns x.\n\n(doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3853)  \n\n## double\n\n```\nUsage: (double x)\n```\n\n```\nCoerce to double\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3493)  \n\n## double-array\n\n```\nUsage: (double-array size-or-seq)\n       (double-array size init-val-or-seq)\n```\n\n```\nCreates an array of doubles\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5342)  \n\n## double?\n\n```\nUsage: (double? x)\n```\n\n```\nReturn true if x is a Double\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1440)  \n\n## doubles\n\n```\nUsage: (doubles xs)\n```\n\n```\nCasts to double[]\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5403)  \n\n## drop\n\n```\nUsage: (drop n)\n       (drop n coll)\n```\n\n```\nReturns a lazy sequence of all but the first n items in coll.\nReturns a stateful transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2926)  \n\n## drop-last\n\n```\nUsage: (drop-last coll)\n       (drop-last n coll)\n```\n\n```\nReturn a lazy sequence of all but the last n (default 1) items in coll\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2951)  \n\n## drop-while\n\n```\nUsage: (drop-while pred)\n       (drop-while pred coll)\n```\n\n```\nReturns a lazy sequence of the items in coll starting from the\nfirst item for which (pred item) returns logical false.  Returns a\nstateful transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2969)  \n\n## eduction\n\n```\nUsage: (eduction xform* coll)\n```\n\n```\nReturns a reducible/iterable application of the transducers\nto the items in coll. Transducers are applied in order as if\ncombined with comp. Note that these applications will be\nperformed every time reduce/iterator is called.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7762)  \n\n## empty\n\n```\nUsage: (empty coll)\n```\n\n```\nReturns an empty collection of the same category as coll, or nil\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5266)  \n\n## empty?\n\n```\nUsage: (empty? coll)\n```\n\n```\nReturns true if coll has no items - same as (not (seq coll)).\nPlease use the idiom (seq x) rather than (not (empty? x))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6241)  \n\n## ensure\n\n```\nUsage: (ensure ref)\n```\n\n```\nMust be called in a transaction. Protects the ref from modification\nby other transactions.  Returns the in-transaction-value of\nref. Allows for more concurrency than (ref-set ref @ref)\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2505)  \n\n## ensure-reduced\n\n```\nUsage: (ensure-reduced x)\n```\n\n```\nIf x is already reduced?, returns it, else returns (reduced x)\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2866)  \n\n## enumeration-seq\n\n```\nUsage: (enumeration-seq e)\n```\n\n```\nReturns a seq on a java.util.Enumeration\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5756)  \n\n## error-handler\n\n```\nUsage: (error-handler a)\n```\n\n```\nReturns the error-handler of agent a, or nil if there is none.\nSee set-error-handler!\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2221)  \n\n## error-mode\n\n```\nUsage: (error-mode a)\n```\n\n```\nReturns the error-mode of agent a.  See set-error-mode!\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2246)  \n\n## eval\n\n```\nUsage: (eval form)\n```\n\n```\nEvaluates the form data structure (not text!) and returns the result.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3211)  \n\n## even?\n\n```\nUsage: (even? n)\n```\n\n```\nReturns true if n is even, throws an exception if n is not an integer\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1400)  \n\n## every-pred\n\n```\nUsage: (every-pred p)\n       (every-pred p1 p2)\n       (every-pred p1 p2 p3)\n       (every-pred p1 p2 p3 & ps)\n```\n\n```\nTakes a set of predicates and returns a function f that returns true if all of its\ncomposing predicates return a logical true value against all of its arguments, else it returns\nfalse. Note that f is short-circuiting in that it will stop execution on the first\nargument that triggers a logical false result against the original predicates.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7464)  \n\n## every?\n\n```\nUsage: (every? pred coll)\n```\n\n```\nReturns true if (pred x) is logical true for every x in coll, else\nfalse.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2689)  \n\n## ex-cause\n\n```\nUsage: (ex-cause ex)\n```\n\n```\nReturns the cause of ex if ex is a Throwable.\nOtherwise returns nil.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4832)  \n\n## ex-data\n\n```\nUsage: (ex-data ex)\n```\n\n```\nReturns exception data (a map) if ex is an IExceptionInfo.\nOtherwise returns nil.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4816)  \n\n## ex-info\n\n```\nUsage: (ex-info msg map)\n       (ex-info msg map cause)\n```\n\n```\nCreate an instance of ExceptionInfo, a RuntimeException subclass\nthat carries a map of additional data.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4807)  \n\n## ex-message\n\n```\nUsage: (ex-message ex)\n```\n\n```\nReturns the message attached to ex if ex is a Throwable.\nOtherwise returns nil.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4824)  \n\n## extend\n\n```\nUsage: (extend atype & proto+mmaps)\n```\n\n```\nImplementations of protocol methods can be provided using the extend construct:\n\n (extend AType\n   AProtocol\n    {:foo an-existing-fn\n     :bar (fn [a b] ...)\n     :baz (fn ([a]...) ([a b] ...)...)}\n   BProtocol \n     {...} \n   ...)\n\n extend takes a type/class (or interface, see below), and one or more\n protocol + method map pairs. It will extend the polymorphism of the\n protocol's methods to call the supplied methods when an AType is\n provided as the first argument. \n\n Method maps are maps of the keyword-ized method names to ordinary\n fns. This facilitates easy reuse of existing fns and fn maps, for\n code reuse/mixins without derivation or composition. You can extend\n an interface to a protocol. This is primarily to facilitate interop\n with the host (e.g. Java) but opens the door to incidental multiple\n inheritance of implementation since a class can inherit from more\n than one interface, both of which extend the protocol. It is TBD how\n to specify which impl to use. You can extend a protocol on nil.\n\n If you are supplying the definitions explicitly (i.e. not reusing\n exsting functions or mixin maps), you may find it more convenient to\n use the extend-type or extend-protocol macros.\n\n Note that multiple independent extend clauses can exist for the same\n type, not all protocols need be defined in a single extend call.\n\n See also:\n extends?, satisfies?, extenders\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L777)  \n\n## extend-protocol\n\n```\nUsage: (extend-protocol p & specs)\n```\n\n```\nUseful when you want to provide several implementations of the same\nprotocol all at once. Takes a single protocol and the implementation\nof that protocol for one or more types. Expands into calls to\nextend-type:\n\n(extend-protocol Protocol\n  AType\n    (foo [x] ...)\n    (bar [x y] ...)\n  BType\n    (foo [x] ...)\n    (bar [x y] ...)\n  AClass\n    (foo [x] ...)\n    (bar [x y] ...)\n  nil\n    (foo [x] ...)\n    (bar [x y] ...))\n\nexpands into:\n\n(do\n (clojure.core/extend-type AType Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type BType Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type AClass Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type nil Protocol \n   (foo [x] ...) \n   (bar [x y] ...)))\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L877)  \n\n## extend-type\n\n```\nUsage: (extend-type t & specs)\n```\n\n```\nA macro that expands into an extend call. Useful when you are\nsupplying the definitions explicitly inline, extend-type\nautomatically creates the maps required by extend.  Propagates the\nclass as a type hint on the first argument of all fns.\n\n(extend-type MyType \n  Countable\n    (cnt [c] ...)\n  Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y & zs] ...)))\n\nexpands into:\n\n(extend MyType\n Countable\n   {:cnt (fn [c] ...)}\n Foo\n   {:baz (fn ([x] ...) ([x y & zs] ...))\n    :bar (fn [x y] ...)})\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L845)  \n\n## extenders\n\n```\nUsage: (extenders protocol)\n```\n\n```\nReturns a collection of the types explicitly extending protocol\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L564)  \n\n## extends?\n\n```\nUsage: (extends? protocol atype)\n```\n\n```\nReturns true if atype extends protocol\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L557)  \n\n## false?\n\n```\nUsage: (false? x)\n```\n\n```\nReturns true if x is the value false, false otherwise.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L507)  \n\n## ffirst\n\n```\nUsage: (ffirst x)\n```\n\n```\nSame as (first (first x))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L100)  \n\n## file-seq\n\n```\nUsage: (file-seq dir)\n```\n\n```\nA tree seq on java.io.Files\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4973)  \n\n## filter\n\n```\nUsage: (filter pred)\n       (filter pred coll)\n```\n\n```\nReturns a lazy sequence of the items in coll for which\n(pred item) returns logical true. pred must be free of side-effects.\nReturns a transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2810)  \n\n## filterv\n\n```\nUsage: (filterv pred coll)\n```\n\n```\nReturns a vector of the items in coll for which\n(pred item) returns logical true. pred must be free of side-effects.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6988)  \n\n## finally\n\n```\nSyntax for use with try.\n\nPlease see https://clojure.org/reference/special_forms#try\n```\n\nAdded in Clojure version 1.0\n\n## find\n\n```\nUsage: (find map key)\n```\n\n```\nReturns the map entry for key, or nil if key not present.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1549)  \n\n## find-keyword\n\n```\nUsage: (find-keyword name)\n       (find-keyword ns name)\n```\n\n```\nReturns a Keyword with the given namespace and name if one already\nexists.  This function will not intern a new keyword. If the keyword\nhas not already been interned, it will return nil.  Do not use :\nin the keyword strings, it will be added automatically.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L627)  \n\n## find-ns\n\n```\nUsage: (find-ns sym)\n```\n\n```\nReturns the namespace named by the symbol or nil if it doesn't exist.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4127)  \n\n## find-var\n\n```\nUsage: (find-var sym)\n```\n\n```\nReturns the global var named by the namespace-qualified symbol, or\nnil if no var with that name.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2032)  \n\n## first\n\n```\nUsage: (first coll)\n```\n\n```\nReturns the first item in the collection. Calls seq on its\nargument. If coll is nil, returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L49)  \n\n## flatten\n\n```\nUsage: (flatten x)\n```\n\n```\nTakes any nested combination of sequential things (lists, vectors,\netc.) and returns their contents as a single, flat lazy sequence.\n(flatten nil) returns an empty sequence.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7204)  \n\n## float\n\n```\nUsage: (float x)\n```\n\n```\nCoerce to float\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3487)  \n\n## float-array\n\n```\nUsage: (float-array size-or-seq)\n       (float-array size init-val-or-seq)\n```\n\n```\nCreates an array of floats\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5302)  \n\n## float?\n\n```\nUsage: (float? n)\n```\n\n```\nReturns true if n is a floating point number\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3605)  \n\n## floats\n\n```\nUsage: (floats xs)\n```\n\n```\nCasts to float[]\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5393)  \n\n## flush\n\n```\nUsage: (flush)\n```\n\n```\nFlushes the output stream that is the current value of\n*out*\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3706)  \n\n## fn\n\n```\nUsage: (fn name? [params*] exprs*)\n       (fn name? ([params*] exprs*) +)\n```\n\n```\nparams => positional-params*, or positional-params* & rest-param\npositional-param => binding-form\nrest-param => binding-form\nbinding-form => name, or destructuring-form\n\nDefines a function.\n\nSee https://clojure.org/reference/special_forms#fn for more information\n```\n\n```\nSpecs:\n  Args: (cat\n         :fn-name (? simple-symbol?)\n         :fn-tail (alt\n                   :arity-1 :clojure.core.specs.alpha/params+body\n                   :arity-n (+\n                              (spec\n                                :clojure.core.specs.alpha/params+body))))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4535)  \n\n## fn?\n\n```\nUsage: (fn? x)\n```\n\n```\nReturns true if x implements Fn, i.e. is an object created via fn.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6272)  \n\n## fnext\n\n```\nUsage: (fnext x)\n```\n\n```\nSame as (first (next x))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L114)  \n\n## fnil\n\n```\nUsage: (fnil f x)\n       (fnil f x y)\n       (fnil f x y z)\n```\n\n```\nTakes a function f, and returns a function that calls f, replacing\na nil first argument to f with the supplied value x. Higher arity\nversions can replace arguments in the second and third\npositions (y, z). Note that the function f can take any number of\narguments, not just the one(s) being nil-patched.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6594)  \n\n## for\n\n```\nUsage: (for seq-exprs body-expr)\n```\n\n```\nList comprehension. Takes a vector of one or more\n binding-form/collection-expr pairs, each followed by zero or more\n modifiers, and yields a lazy sequence of evaluations of expr.\n Collections are iterated in a nested fashion, rightmost fastest,\n and nested coll-exprs can refer to bindings created in prior\n binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n :while test, :when test.\n\n(take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4648)  \n\n## force\n\n```\nUsage: (force x)\n```\n\n```\nIf x is a Delay, returns the (possibly cached) value of its expression, else returns x\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L763)  \n\n## format\n\n```\nUsage: (format fmt & args)\n```\n\n```\nFormats a string using java.lang.String.format, see java.util.Formatter for format\nstring syntax\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5763)  \n\n## frequencies\n\n```\nUsage: (frequencies coll)\n```\n\n```\nReturns a map from distinct items in coll to the number of times\nthey appear.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7271)  \n\n## future\n\n```\nUsage: (future & body)\n```\n\n```\nTakes a body of expressions and yields a future object that will\ninvoke the body in another thread, and will cache the result and\nreturn it on all subsequent calls to deref/@. If the computation has\nnot yet finished, calls to deref/@ will block, unless the variant of\nderef with timeout is used. See also - realized?.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7057)  \n\n## future-call\n\n```\nUsage: (future-call f)\n```\n\n```\nTakes a function of no args and yields a future object that will\ninvoke the function in another thread, and will cache the result and\nreturn it on all subsequent calls to deref/@. If the computation has\nnot yet finished, calls to deref/@ will block, unless the variant\nof deref with timeout is used. See also - realized?.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7030)  \n\n## future-cancel\n\n```\nUsage: (future-cancel f)\n```\n\n```\nCancels the future, if possible.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7067)  \n\n## future-cancelled?\n\n```\nUsage: (future-cancelled? f)\n```\n\n```\nReturns true if future f is cancelled\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7073)  \n\n## future-done?\n\n```\nUsage: (future-done? f)\n```\n\n```\nReturns true if future f is done\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6574)  \n\n## future?\n\n```\nUsage: (future? x)\n```\n\n```\nReturns true if x is a future\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6568)  \n\n## gen-class\n\n```\nUsage: (gen-class & options)\n```\n\n```\nWhen compiling, generates compiled bytecode for a class with the\ngiven package-qualified :name (which, as all names in these\nparameters, can be a string or symbol), and writes the .class file\nto the *compile-path* directory.  When not compiling, does\nnothing. The gen-class construct contains no implementation, as the\nimplementation will be dynamically sought by the generated class in\nfunctions in an implementing Clojure namespace. Given a generated\nclass org.mydomain.MyClass with a method named mymethod, gen-class\nwill generate an implementation that looks for a function named by \n(str prefix mymethod) (default prefix: \"-\") in a\nClojure namespace specified by :impl-ns\n(defaults to the current namespace). All inherited methods,\ngenerated methods, and init and main functions (see :methods, :init,\nand :main below) will be found similarly prefixed. By default, the\nstatic initializer for the generated class will attempt to load the\nClojure support code for the class as a resource from the classpath,\ne.g. in the example case, ``org/mydomain/MyClass__init.class``. This\nbehavior can be controlled by :load-impl-ns\n\nNote that methods with a maximum of 18 parameters are supported.\n\nIn all subsequent sections taking types, the primitive types can be\nreferred to by their Java names (int, float etc), and classes in the\njava.lang package can be used without a package qualifier. All other\nclasses must be fully qualified.\n\nOptions should be a set of key/value pairs, all except for :name are optional:\n\n:name aname\n\nThe package-qualified name of the class to be generated\n\n:extends aclass\n\nSpecifies the superclass, the non-private methods of which will be\noverridden by the class. If not provided, defaults to Object.\n\n:implements [interface ...]\n\nOne or more interfaces, the methods of which will be implemented by the class.\n\n:init name\n\nIf supplied, names a function that will be called with the arguments\nto the constructor. Must return [ [superclass-constructor-args] state] \nIf not supplied, the constructor args are passed directly to\nthe superclass constructor and the state will be nil\n\n:constructors {[param-types] [super-param-types], ...}\n\nBy default, constructors are created for the generated class which\nmatch the signature(s) of the constructors for the superclass. This\nparameter may be used to explicitly specify constructors, each entry\nproviding a mapping from a constructor signature to a superclass\nconstructor signature. When you supply this, you must supply an :init\nspecifier. \n\n:post-init name\n\nIf supplied, names a function that will be called with the object as\nthe first argument, followed by the arguments to the constructor.\nIt will be called every time an object of this class is created,\nimmediately after all the inherited constructors have completed.\nIts return value is ignored.\n\n:methods [ [name [param-types] return-type], ...]\n\nThe generated class automatically defines all of the non-private\nmethods of its superclasses/interfaces. This parameter can be used\nto specify the signatures of additional methods of the generated\nclass. Static methods can be specified with ^{:static true} in the\nsignature's metadata. Do not repeat superclass/interface signatures\nhere.\n\n:main boolean\n\nIf supplied and true, a static public main function will be generated. It will\npass each string of the String[] argument as a separate argument to\na function called (str prefix main).\n\n:factory name\n\nIf supplied, a (set of) public static factory function(s) will be\ncreated with the given name, and the same signature(s) as the\nconstructor(s).\n\n:state name\n\nIf supplied, a public final instance field with the given name will be\ncreated. You must supply an :init function in order to provide a\nvalue for the state. Note that, though final, the state can be a ref\nor agent, supporting the creation of Java objects with transactional\nor asynchronous mutation semantics.\n\n:exposes {protected-field-name {:get name :set name}, ...}\n\nSince the implementations of the methods of the generated class\noccur in Clojure functions, they have no access to the inherited\nprotected fields of the superclass. This parameter can be used to\ngenerate public getter/setter methods exposing the protected field(s)\nfor use in the implementation.\n\n:exposes-methods {super-method-name exposed-name, ...}\n\nIt is sometimes necessary to call the superclass' implementation of an\noverridden method.  Those methods may be exposed and referred in \nthe new method implementation by a local name.\n\n:prefix string\n\nDefault: \"-\" Methods called e.g. Foo will be looked up in vars called\nprefixFoo in the implementing ns.\n\n:impl-ns name\n\nDefault: the name of the current ns. Implementations of methods will be \nlooked up in this namespace.\n\n:load-impl-ns boolean\n\nDefault: true. Causes the static initializer for the generated class\nto reference the load code for the implementing namespace. Should be\ntrue when implementing-ns is the default, false if you intend to\nload the code via some other method.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/38705b49fd3dbae11e94c576ef49ff3eb1c47395/src/clj/clojure/genclass.clj#L507)  \n\n## gen-interface\n\n```\nUsage: (gen-interface & options)\n```\n\n```\nWhen compiling, generates compiled bytecode for an interface with\n the given package-qualified :name (which, as all names in these\n parameters, can be a string or symbol), and writes the .class file\n to the *compile-path* directory.  When not compiling, does nothing.\n\n In all subsequent sections taking types, the primitive types can be\n referred to by their Java names (int, float etc), and classes in the\n java.lang package can be used without a package qualifier. All other\n classes must be fully qualified.\n\n Options should be a set of key/value pairs, all except for :name are\n optional:\n\n :name aname\n\n The package-qualified name of the class to be generated\n\n :extends [interface ...]\n\n One or more interfaces, which will be extended by this interface.\n\n :methods [ [name [param-types] return-type], ...]\n\n This parameter is used to specify the signatures of the methods of\n the generated interface.  Do not repeat superinterface signatures\n here.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/38705b49fd3dbae11e94c576ef49ff3eb1c47395/src/clj/clojure/genclass.clj#L688)  \n\n## gensym\n\n```\nUsage: (gensym)\n       (gensym prefix-string)\n```\n\n```\nReturns a new symbol with a unique name. If a prefix string is\nsupplied, the name is prefix# where # is some unique number. If\nprefix is not supplied, the prefix is 'G__'.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L606)  \n\n## get\n\n```\nUsage: (get map key)\n       (get map key not-found)\n```\n\n```\nReturns the value mapped to key, not-found or nil if key not present\nin associative collection, set, string, array, or ILookup instance.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1508)  \n\n## get-in\n\n```\nUsage: (get-in m ks)\n       (get-in m ks not-found)\n```\n\n```\nReturns the value in a nested associative structure,\nwhere ks is a sequence of keys. Returns nil if the key\nis not present, or the not-found value if supplied.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6177)  \n\n## get-method\n\n```\nUsage: (get-method multifn dispatch-val)\n```\n\n```\nGiven a multimethod and a dispatch value, returns the dispatch fn\nthat would apply to that value, or nil if none apply and no default\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1834)  \n\n## get-proxy-class\n\n```\nUsage: (get-proxy-class & bases)\n```\n\n```\nTakes an optional single class followed by zero or more\ninterfaces. If not supplied class defaults to Object.  Creates an\nreturns an instance of a proxy class derived from the supplied\nclasses. The resulting value is cached and used for any subsequent\nrequests for the same class set. Returns a Class object.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L281)  \n\n## get-thread-bindings\n\n```\nUsage: (get-thread-bindings)\n```\n\n```\nGet a map with the Var/value pairs which is currently in effect for the\ncurrent thread.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1956)  \n\n## get-validator\n\n```\nUsage: (get-validator iref)\n```\n\n```\nGets the validator-fn for a var/ref/agent/atom.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2417)  \n\n## group-by\n\n```\nUsage: (group-by f coll)\n```\n\n```\nReturns a map of the elements of coll keyed by the result of\nf on each element. The value at each key will be a vector of the\ncorresponding elements, in the order they appeared in coll.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7214)  \n\n## halt-when\n\n```\nUsage: (halt-when pred)\n       (halt-when pred retf)\n```\n\n```\nReturns a transducer that ends transduction when pred returns true\nfor an input. When retf is supplied it must be a fn of 2 arguments -\nit will be passed the (completed) result so far and the input that\ntriggered the predicate, and its return value (if it does not throw\nan exception) will be the return value of the transducer. If retf\nis not supplied, the input that triggered the predicate will be\nreturned. If the predicate never returns true the transduction is\nunaffected.\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7699)  \n\n## hash\n\n```\nUsage: (hash x)\n```\n\n```\nReturns the hash code of its argument. Note this is the hash code\nconsistent with =, and thus is different than .hashCode for Integer,\nShort, Byte and Clojure collections.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5190)  \n\n## hash-map\n\n```\nUsage: (hash-map)\n       (hash-map & keyvals)\n```\n\n```\nkeyval => key val\nReturns a new hash map with supplied mappings.  If any keys are\nequal, they are handled as if by repeated uses of assoc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L381)  \n\n## hash-ordered-coll\n\n```\nUsage: (hash-ordered-coll coll)\n```\n\n```\nReturns the hash code, consistent with =, for an external ordered\ncollection implementing Iterable.\nSee http://clojure.org/data_structures#hash for full algorithms.\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5211)  \n\n## hash-set\n\n```\nUsage: (hash-set)\n       (hash-set & keys)\n```\n\n```\nReturns a new hash set with supplied keys.  Any equal keys are\nhandled as if by repeated uses of conj.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L391)  \n\n## hash-unordered-coll\n\n```\nUsage: (hash-unordered-coll coll)\n```\n\n```\nReturns the hash code, consistent with =, for an external unordered\ncollection implementing Iterable. For maps, the iterator should\nreturn map entries whose hash is computed as\n  (hash-ordered-coll [k v]).\nSee http://clojure.org/data_structures#hash for full algorithms.\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5220)  \n\n## ident?\n\n```\nUsage: (ident? x)\n```\n\n```\nReturn true if x is a symbol or keyword\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1627)  \n\n## identical?\n\n```\nUsage: (identical? x y)\n```\n\n```\nTests if 2 arguments are the same object\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L777)  \n\n## identity\n\n```\nUsage: (identity x)\n```\n\n```\nReturns its argument.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1465)  \n\n## if\n\n```\nUsage: (if test then else?)\n```\n\n```\nEvaluates test. If not the singular values nil or false,\nevaluates and yields then, otherwise, evaluates and yields else. If\nelse is not supplied it defaults to nil.\n\nPlease see https://clojure.org/reference/special_forms#if\n```\n\nAdded in Clojure version 1.0\n\n## if-let\n\n```\nUsage: (if-let bindings then)\n       (if-let bindings then else & oldform)\n```\n\n```\nbindings => binding-form test\n\nIf test is true, evaluates then with binding-form bound to the value of \ntest, if not, yields else\n```\n\n```\nSpecs:\n  Args: (cat\n         :bindings (and vector? :clojure.core.specs.alpha/binding)\n         :then any?\n         :else (? any?))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1858)  \n\n## if-not\n\n```\nUsage: (if-not test then)\n       (if-not test then else)\n```\n\n```\nEvaluates test. If logical false, evaluates and returns then expr, \notherwise else expr, if supplied, else nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L769)  \n\n## if-some\n\n```\nUsage: (if-some bindings then)\n       (if-some bindings then else & oldform)\n```\n\n```\nbindings => binding-form test\n\nIf test is not nil, evaluates then with binding-form bound to the\nvalue of test, if not, yields else\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1893)  \n\n## ifn?\n\n```\nUsage: (ifn? x)\n```\n\n```\nReturns true if x implements IFn. Note that many data structures\n(e.g. sets and maps) implement IFn\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6265)  \n\n## import\n\n```\nUsage: (import & import-symbols-or-lists)\n```\n\n```\nimport-list => (package-symbol class-name-symbols*)\n\nFor each name in class-name-symbols, adds a mapping from name to the\nclass named by package.name to the current namespace. Use :import in the ns\nmacro in preference to calling this directly.\n```\n\n```\nSpecs:\n  Args: (*\n          (alt\n           :class (quotable simple-symbol?)\n           :package-list (quotable\n                           :clojure.core.specs.alpha/package-list)))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3426)  \n\n## in-ns\n\n```\nUsage: (in-ns name)\n```\n\n```\nSets *ns* to the namespace named by the symbol, creating it if needed.\n```\n\nAdded in Clojure version 1.0\n\n## inc\n\n```\nUsage: (inc x)\n```\n\n```\nReturns a number one greater than num. Does not auto-promote\nlongs, will throw on overflow. See also: inc'\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L924)  \n\n## inc'\n\n```\nUsage: (inc' x)\n```\n\n```\nReturns a number one greater than num. Supports arbitrary precision.\nSee also: inc\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L917)  \n\n## indexed?\n\n```\nUsage: (indexed? coll)\n```\n\n```\nReturn true if coll implements Indexed, indicating efficient lookup by index\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6309)  \n\n## infinite?\n\n```\nUsage: (infinite? num)\n```\n\n```\nReturns true if num is negative or positive infinity, else false\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8099)  \n\n## init-proxy\n\n```\nUsage: (init-proxy proxy mappings)\n```\n\n```\nTakes a proxy instance and a map of strings (which must\ncorrespond to methods of the proxy superclass/superinterfaces) to\nfns (which must take arguments matching the corresponding method,\nplus an additional (explicit) first arg corresponding to this, and\nsets the proxy's fn map.  Returns the proxy.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L302)  \n\n## inst-ms\n\n```\nUsage: (inst-ms inst)\n```\n\n```\nReturn the number of milliseconds since January 1, 1970, 00:00:00 GMT\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6838)  \n\n## inst?\n\n```\nUsage: (inst? x)\n```\n\n```\nReturn true if x satisfies Inst\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6844)  \n\n## instance?\n\n```\nUsage: (instance? c x)\n```\n\n```\nEvaluates x and tests if it is an instance of the class\nc. Returns true or false\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L141)  \n\n## int\n\n```\nUsage: (int x)\n```\n\n```\nCoerce to int\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L884)  \n\n## int-array\n\n```\nUsage: (int-array size-or-seq)\n       (int-array size init-val-or-seq)\n```\n\n```\nCreates an array of ints\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5357)  \n\n## int?\n\n```\nUsage: (int? x)\n```\n\n```\nReturn true if x is a fixed precision integer\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1414)  \n\n## integer?\n\n```\nUsage: (integer? n)\n```\n\n```\nReturns true if n is an integer\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1388)  \n\n## interleave\n\n```\nUsage: (interleave)\n       (interleave c1)\n       (interleave c1 c2)\n       (interleave c1 c2 & colls)\n```\n\n```\nReturns a lazy seq of the first item in each coll, then the second etc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4310)  \n\n## intern\n\n```\nUsage: (intern ns name)\n       (intern ns name val)\n```\n\n```\nFinds or creates a var named by the symbol name in the namespace\nns (which can be a symbol or a namespace), setting its root binding\nto val if supplied. The namespace must exist. The var will adopt any\nmetadata from the name symbol.  Returns the var.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6352)  \n\n## interpose\n\n```\nUsage: (interpose sep)\n       (interpose sep coll)\n```\n\n```\nReturns a lazy seq of the elements of coll separated by sep.\nReturns a stateful transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5231)  \n\n## into\n\n```\nUsage: (into)\n       (into to)\n       (into to from)\n       (into to xform from)\n```\n\n```\nReturns a new coll consisting of to-coll with all of the items of\nfrom-coll conjoined. A transducer may be supplied.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6950)  \n\n## into-array\n\n```\nUsage: (into-array aseq)\n       (into-array type aseq)\n```\n\n```\nReturns an array with components set to the values in aseq. The array's\ncomponent type is type if provided, or the type of the first value in\naseq if present, or Object. All values in aseq must be compatible with\nthe component type. Class objects for the primitive types can be obtained\nusing, e.g., Integer/TYPE.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3444)  \n\n## ints\n\n```\nUsage: (ints xs)\n```\n\n```\nCasts to int[]\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5398)  \n\n## io!\n\n```\nUsage: (io! & body)\n```\n\n```\nIf an io! block occurs in a transaction, throws an\nIllegalStateException, else runs body in an implicit do. If the\nfirst expression in body is a literal string, will use that as the\nexception message.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2529)  \n\n## isa?\n\n```\nUsage: (isa? child parent)\n       (isa? h child parent)\n```\n\n```\nReturns true if (= child parent), or child is directly or indirectly derived from\nparent, either via a Java type inheritance relationship or a\nrelationship established via derive. h must be a hierarchy obtained\nfrom make-hierarchy, if not supplied defaults to the global\nhierarchy\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5589)  \n\n## iterate\n\n```\nUsage: (iterate f x)\n```\n\n```\nReturns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3030)  \n\n## iteration\n\n```\nUsage: (iteration step & {:keys [somef vf kf initk], :or {vf identity, kf identity, somef some?, initk nil}})\n```\n\n```\nCreates a seqable/reducible via repeated calls to step,\na function of some (continuation token) 'k'. The first call to step\nwill be passed initk, returning 'ret'. Iff (somef ret) is true,\n(vf ret) will be included in the iteration, else iteration will\nterminate and vf/kf will not be called. If (kf ret) is non-nil it\nwill be passed to the next step call, else iteration will terminate.\n\nThis can be used e.g. to consume APIs that return paginated or batched data.\n\n step - (possibly impure) fn of 'k' -> 'ret'\n\n :somef - fn of 'ret' -> logical true/false, default 'some?'\n :vf - fn of 'ret' -> 'v', a value produced by the iteration, default 'identity'\n :kf - fn of 'ret' -> 'next-k' or nil (signaling 'do not continue'), default 'identity'\n :initk - the first value passed to step, default 'nil'\n\nIt is presumed that step with non-initk is unreproducible/non-idempotent.\nIf step with initk is unreproducible it is on the consumer to not consume twice.\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7786)  \n\n## iterator-seq\n\n```\nUsage: (iterator-seq iter)\n```\n\n```\nReturns a seq on a java.util.Iterator. Note that most collections\nproviding iterators implement Iterable and thus support seq directly.\nSeqs cache values, thus iterator-seq should not be used on any\niterator that repeatedly returns the same mutable object.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5746)  \n\n## juxt\n\n```\nUsage: (juxt f)\n       (juxt f g)\n       (juxt f g h)\n       (juxt f g h & fs)\n```\n\n```\nTakes a set of functions and returns a fn that is the juxtaposition\nof those fns.  The returned fn takes a variable number of args, and\nreturns a vector containing the result of applying each fn to the\nargs (left-to-right).\n((juxt a b c) x) => [(a x) (b x) (c x)]\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2593)  \n\n## keep\n\n```\nUsage: (keep f)\n       (keep f coll)\n```\n\n```\nReturns a lazy sequence of the non-nil results of (f item). Note,\nthis means false return values will be included.  f must be free of\nside-effects.  Returns a transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7381)  \n\n## keep-indexed\n\n```\nUsage: (keep-indexed f)\n       (keep-indexed f coll)\n```\n\n```\nReturns a lazy sequence of the non-nil results of (f index item). Note,\nthis means false return values will be included.  f must be free of\nside-effects.  Returns a stateful transducer when no collection is\nprovided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7414)  \n\n## key\n\n```\nUsage: (key e)\n```\n\n```\nReturns the key of the map entry.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1582)  \n\n## keys\n\n```\nUsage: (keys map)\n```\n\n```\nReturns a sequence of the map's keys, in the same order as (seq map).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1570)  \n\n## keyword\n\n```\nUsage: (keyword name)\n       (keyword ns name)\n```\n\n```\nReturns a Keyword with the given namespace and name.  Do not use :\nin the keyword strings, it will be added automatically.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L616)  \n\n## keyword?\n\n```\nUsage: (keyword? x)\n```\n\n```\nReturn true if x is a Keyword\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L570)  \n\n## last\n\n```\nUsage: (last coll)\n```\n\n```\nReturn the last item in coll, in linear time\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L264)  \n\n## lazy-cat\n\n```\nUsage: (lazy-cat & colls)\n```\n\n```\nExpands to code which yields a lazy sequence of the concatenation\nof the supplied colls.  Each coll expr is not evaluated until it is\nneeded. \n\n(lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4638)  \n\n## lazy-seq\n\n```\nUsage: (lazy-seq & body)\n```\n\n```\nTakes a body of expressions that returns an ISeq or nil, and yields\na Seqable object that will invoke the body only the first time seq\nis called, and will cache the result and return it on all subsequent\nseq calls. See also - realized?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L685)  \n\n## let\n\n```\nUsage: (let [bindings*] exprs*)\n```\n\n```\nbinding => binding-form init-expr\nbinding-form => name, or destructuring-form\ndestructuring-form => map-destructure-form, or seq-destructure-form\n\nEvaluates the exprs in a lexical context in which the symbols in\nthe binding-forms are bound to their respective init-exprs or parts\ntherein.\n\nSee https://clojure.org/reference/special_forms#binding-forms for\nmore information about destructuring.\n```\n\n```\nSpecs:\n  Args: (cat\n         :bindings :clojure.core.specs.alpha/bindings\n         :body (* any?))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4498)  \n\n## letfn\n\n```\nUsage: (letfn [fnspecs*] exprs*)\n```\n\n```\nfnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\nTakes a vector of function specs and a body, and generates a set of\nbindings of functions to their names. All of the names are available\nin all of the definitions of the functions, as well as the body.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6581)  \n\n## line-seq\n\n```\nUsage: (line-seq rdr)\n```\n\n```\nReturns the lines of text from rdr as a lazy sequence of strings.\nrdr must implement java.io.BufferedReader.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3086)  \n\n## list\n\n```\nUsage: (list & items)\n```\n\n```\nCreates a new list containing the items.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L16)  \n\n## list\\*\n\n```\nUsage: (list* args)\n       (list* a args)\n       (list* a b args)\n       (list* a b c args)\n       (list* a b c d & more)\n```\n\n```\nCreates a new seq containing the items prepended to the rest, the\nlast of which will be treated as a sequence.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L650)  \n\n## list?\n\n```\nUsage: (list? x)\n```\n\n```\nReturns true if x implements IPersistentList\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6254)  \n\n## load\n\n```\nUsage: (load & paths)\n```\n\n```\nLoads Clojure code from resources in classpath. A path is interpreted as\nclasspath-relative if it begins with a slash or relative to the root\ndirectory for the current namespace otherwise.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6144)  \n\n## load-file\n\n```\nUsage: (load-file name)\n```\n\n```\nSequentially read and evaluate the set of forms contained in the file.\n```\n\nAdded in Clojure version 1.0\n\n## load-reader\n\n```\nUsage: (load-reader rdr)\n```\n\n```\nSequentially read and evaluate the set of forms contained in the\nstream/file\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4083)  \n\n## load-string\n\n```\nUsage: (load-string s)\n```\n\n```\nSequentially read and evaluate the set of forms contained in the\nstring\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4090)  \n\n## loaded-libs\n\n```\nUsage: (loaded-libs)\n```\n\n```\nReturns a sorted set of symbols naming the currently loaded libs\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6139)  \n\n## locking\n\n```\nUsage: (locking x & body)\n```\n\n```\nExecutes exprs in an implicit do, while holding the monitor of x.\nWill release the monitor of x in all circumstances.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1662)  \n\n## long\n\n```\nUsage: (long x)\n```\n\n```\nCoerce to long\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3481)  \n\n## long-array\n\n```\nUsage: (long-array size-or-seq)\n       (long-array size init-val-or-seq)\n```\n\n```\nCreates an array of longs\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5365)  \n\n## longs\n\n```\nUsage: (longs xs)\n```\n\n```\nCasts to long[]\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5408)  \n\n## loop\n\n```\nUsage: (loop [bindings*] exprs*)\n```\n\n```\nEvaluates the exprs in a lexical context in which the symbols in\nthe binding-forms are bound to their respective init-exprs or parts\ntherein. Acts as a recur target.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4599)  \n\n## macroexpand\n\n```\nUsage: (macroexpand form)\n```\n\n```\nRepeatedly calls macroexpand-1 on form until it no longer\nrepresents a macro form, then returns it.  Note neither\nmacroexpand-1 nor macroexpand expand macros in subforms.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4027)  \n\n## macroexpand-1\n\n```\nUsage: (macroexpand-1 form)\n```\n\n```\nIf form represents a macro form, returns its expansion,\nelse returns form.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4019)  \n\n## make-array\n\n```\nUsage: (make-array type len)\n       (make-array type dim & more-dims)\n```\n\n```\nCreates and returns an array of instances of the specified class of\nthe specified dimension(s).  Note that a class object is required.\nClass objects can be obtained by using their imported or\nfully-qualified name.  Class objects for the primitive types can be\nobtained using, e.g., Integer/TYPE.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3987)  \n\n## make-hierarchy\n\n```\nUsage: (make-hierarchy)\n```\n\n```\nCreates a hierarchy object for use with derive, isa? etc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5553)  \n\n## map\n\n```\nUsage: (map f)\n       (map f coll)\n       (map f c1 c2)\n       (map f c1 c2 c3)\n       (map f c1 c2 c3 & colls)\n```\n\n```\nReturns a lazy sequence consisting of the result of applying f to\nthe set of first items of each coll, followed by applying f to the\nset of second items in each coll, until any one of the colls is\nexhausted.  Any remaining items in other colls are ignored. Function\nf should accept number-of-colls arguments. Returns a transducer when\nno collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2744)  \n\n## map-entry?\n\n```\nUsage: (map-entry? x)\n```\n\n```\nReturn true if x is a map entry\n```\n\nAdded in Clojure version 1.8\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1492)  \n\n## map-indexed\n\n```\nUsage: (map-indexed f)\n       (map-indexed f coll)\n```\n\n```\nReturns a lazy sequence consisting of the result of applying f to 0\nand the first item of coll, followed by applying f to 1 and the second\nitem in coll, etc, until coll is exhausted. Thus function f should\naccept 2 arguments, index and item. Returns a stateful transducer when\nno collection is provided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7351)  \n\n## map?\n\n```\nUsage: (map? x)\n```\n\n```\nReturn true if x implements IPersistentMap\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L169)  \n\n## mapcat\n\n```\nUsage: (mapcat f)\n       (mapcat f & colls)\n```\n\n```\nReturns the result of applying concat to the result of applying map\nto f and colls.  Thus function f should return a collection. Returns\na transducer when no collections are provided\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2800)  \n\n## mapv\n\n```\nUsage: (mapv f coll)\n       (mapv f c1 c2)\n       (mapv f c1 c2 c3)\n       (mapv f c1 c2 c3 & colls)\n```\n\n```\nReturns a vector consisting of the result of applying f to the\nset of first items of each coll, followed by applying f to the set\nof second items in each coll, until any one of the colls is\nexhausted.  Any remaining items in other colls are ignored. Function\nf should accept number-of-colls arguments.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6970)  \n\n## max\n\n```\nUsage: (max x)\n       (max x y)\n       (max x y & more)\n```\n\n```\nReturns the greatest of the nums.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1117)  \n\n## max-key\n\n```\nUsage: (max-key k x)\n       (max-key k x y)\n       (max-key k x y & more)\n```\n\n```\nReturns the x for which (k x), a number, is greatest.\n\nIf there are multiple such xs, the last one is returned.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5014)  \n\n## memfn\n\n```\nUsage: (memfn name & args)\n```\n\n```\nExpands into code that creates a fn that expects to be passed an\nobject and any args and calls the named instance method on the\nobject passing the args. Use when you want to treat a Java method as\na first-class fn. name may be type-hinted with the method receiver's\ntype in order to avoid reflective calls.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3872)  \n\n## memoize\n\n```\nUsage: (memoize f)\n```\n\n```\nReturns a memoized version of a referentially transparent function. The\nmemoized version of the function keeps a cache of the mapping from arguments\nto results and, when calls with the same arguments are repeated often, has\nhigher performance at the expense of higher memory use.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6378)  \n\n## merge\n\n```\nUsage: (merge & maps)\n```\n\n```\nReturns a map that consists of the rest of the maps conj-ed onto\nthe first.  If a key occurs in more than one map, the mapping from\nthe latter (left-to-right) will be the mapping in the result.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3058)  \n\n## merge-with\n\n```\nUsage: (merge-with f & maps)\n```\n\n```\nReturns a map that consists of the rest of the maps conj-ed onto\nthe first.  If a key occurs in more than one map, the mapping(s)\nfrom the latter (left-to-right) will be combined with the mapping in\nthe result by calling (f val-in-result val-in-latter).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3068)  \n\n## meta\n\n```\nUsage: (meta obj)\n```\n\n```\nReturns the metadata of obj, returns nil if there is no metadata.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L204)  \n\n## methods\n\n```\nUsage: (methods multifn)\n```\n\n```\nGiven a multimethod, returns a map of dispatch values -> dispatch fns\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1828)  \n\n## min\n\n```\nUsage: (min x)\n       (min x y)\n       (min x y & more)\n```\n\n```\nReturns the least of the nums.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1127)  \n\n## min-key\n\n```\nUsage: (min-key k x)\n       (min-key k x y)\n       (min-key k x y & more)\n```\n\n```\nReturns the x for which (k x), a number, is least.\n\nIf there are multiple such xs, the last one is returned.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5034)  \n\n## mix-collection-hash\n\n```\nUsage: (mix-collection-hash hash-basis count)\n```\n\n```\nMix final collection hash for ordered or unordered collections.\nhash-basis is the combined collection hash, count is the number\nof elements included in the basis. Note this is the hash code\nconsistent with =, different from .hashCode.\nSee http://clojure.org/data_structures#hash for full algorithms.\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5200)  \n\n## mod\n\n```\nUsage: (mod num div)\n```\n\n```\nModulus of num and div. Truncates toward negative infinity.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3567)  \n\n## monitor-enter\n\n```\nUsage: (monitor-enter x)\n```\n\n```\nSynchronization primitive that should be avoided\nin user code. Use the 'locking' macro.\n\nPlease see https://clojure.org/reference/special_forms#monitor-enter\n```\n\nAdded in Clojure version 1.0\n\n## monitor-exit\n\n```\nUsage: (monitor-exit x)\n```\n\n```\nSynchronization primitive that should be avoided\nin user code. Use the 'locking' macro.\n\nPlease see https://clojure.org/reference/special_forms#monitor-exit\n```\n\nAdded in Clojure version 1.0\n\n## name\n\n```\nUsage: (name x)\n```\n\n```\nReturns the name String of a string, symbol or keyword.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1604)  \n\n## namespace\n\n```\nUsage: (namespace x)\n```\n\n```\nReturns the namespace String of a symbol or keyword, or nil if not present.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1612)  \n\n## namespace-munge\n\n```\nUsage: (namespace-munge ns)\n```\n\n```\nConvert a Clojure namespace name to a legal Java package name.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L13)  \n\n## nat-int?\n\n```\nUsage: (nat-int? x)\n```\n\n```\nReturn true if x is a non-negative fixed precision integer\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1434)  \n\n## neg-int?\n\n```\nUsage: (neg-int? x)\n```\n\n```\nReturn true if x is a negative fixed precision integer\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1428)  \n\n## neg?\n\n```\nUsage: (neg? num)\n```\n\n```\nReturns true if num is less than zero, else false\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1268)  \n\n## new\n\n```\nUsage: (Classname. args*)\n       (new Classname args*)\n```\n\n```\nThe args, if any, are evaluated from left to right, and\npassed to the constructor of the class named by Classname. The\nconstructed object is returned.\n\nPlease see https://clojure.org/java_interop#new\n```\n\nAdded in Clojure version 1.0\n\n## newline\n\n```\nUsage: (newline)\n```\n\n```\nWrites a platform-specific newline to *out*\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3698)  \n\n## next\n\n```\nUsage: (next coll)\n```\n\n```\nReturns a seq of the items after the first. Calls seq on its\nargument.  If there are no more items, returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L57)  \n\n## nfirst\n\n```\nUsage: (nfirst x)\n```\n\n```\nSame as (next (first x))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L107)  \n\n## nil?\n\n```\nUsage: (nil? x)\n```\n\n```\nReturns true if x is nil, false otherwise.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L438)  \n\n## nnext\n\n```\nUsage: (nnext x)\n```\n\n```\nSame as (next (next x))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L121)  \n\n## not\n\n```\nUsage: (not x)\n```\n\n```\nReturns true if x is logical false, false otherwise.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L526)  \n\n## not-any?\n\n```\nUsage: (not-any? pred coll)\n```\n\n```\nReturns false if (pred x) is logical true for any x in coll,\nelse true.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2720)  \n\n## not-empty\n\n```\nUsage: (not-empty coll)\n```\n\n```\nIf coll is empty, returns nil, else coll\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5562)  \n\n## not-every?\n\n```\nUsage: (not-every? pred coll)\n```\n\n```\nReturns false if (pred x) is logical true for every x in\ncoll, else true.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2701)  \n\n## not=\n\n```\nUsage: (not= x)\n       (not= x y)\n       (not= x y & more)\n```\n\n```\nSame as (not (= obj1 obj2))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L821)  \n\n## ns\n\n```\nUsage: (ns name docstring? attr-map? references*)\n```\n\n```\nSets *ns* to the namespace named by name (unevaluated), creating it\nif needed.  references can be zero or more of: (:refer-clojure ...)\n(:require ...) (:use ...) (:import ...) (:load ...) (:gen-class)\nwith the syntax of refer-clojure/require/use/import/load/gen-class\nrespectively, except the arguments are unevaluated and need not be\nquoted. (:gen-class ...), when supplied, defaults to :name\ncorresponding to the ns name, :main true, :impl-ns same as ns, and\n:init-impl-ns true. All options of gen-class are\nsupported. The :gen-class directive is ignored when not\ncompiling. If :gen-class is not supplied, when compiled only an\nnsname__init.class will be generated. If :refer-clojure is not used, a\ndefault (refer 'clojure.core) is used.  Use of ns is preferred to\nindividual calls to in-ns/require/use/import:\n\n(ns foo.bar\n  (:refer-clojure :exclude [ancestors printf])\n  (:require (clojure.contrib sql combinatorics))\n  (:use (my.lib this that))\n  (:import (java.util Date Timer Random)\n           (java.sql Connection Statement)))\n```\n\n```\nSpecs:\n  Args: (cat\n         :ns-name simple-symbol?\n         :docstring (? string?)\n         :attr-map (? map?)\n         :ns-clauses :clojure.core.specs.alpha/ns-clauses)\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5789)  \n\n## ns-aliases\n\n```\nUsage: (ns-aliases ns)\n```\n\n```\nReturns a map of the aliases for the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4275)  \n\n## ns-imports\n\n```\nUsage: (ns-imports ns)\n```\n\n```\nReturns a map of the import mappings for the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4201)  \n\n## ns-interns\n\n```\nUsage: (ns-interns ns)\n```\n\n```\nReturns a map of the intern mappings for the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4208)  \n\n## ns-map\n\n```\nUsage: (ns-map ns)\n```\n\n```\nReturns a map of all the mappings for the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4172)  \n\n## ns-name\n\n```\nUsage: (ns-name ns)\n```\n\n```\nReturns the name of the namespace, a symbol.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4165)  \n\n## ns-publics\n\n```\nUsage: (ns-publics ns)\n```\n\n```\nReturns a map of the public intern mappings for the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4190)  \n\n## ns-refers\n\n```\nUsage: (ns-refers ns)\n```\n\n```\nReturns a map of the refer mappings for the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4255)  \n\n## ns-resolve\n\n```\nUsage: (ns-resolve ns sym)\n       (ns-resolve ns env sym)\n```\n\n```\nReturns the var or Class to which a symbol will be resolved in the\nnamespace (unless found in the environment), else nil.  Note that\nif the symbol is fully qualified, the var/Class to which it resolves\nneed not be present in the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4360)  \n\n## ns-unalias\n\n```\nUsage: (ns-unalias ns sym)\n```\n\n```\nRemoves the alias for the symbol from the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4282)  \n\n## ns-unmap\n\n```\nUsage: (ns-unmap ns sym)\n```\n\n```\nRemoves the mappings for the symbol from the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4179)  \n\n## nth\n\n```\nUsage: (nth coll index)\n       (nth coll index not-found)\n```\n\n```\nReturns the value at the index. get returns nil if index out of\nbounds, nth throws an exception unless not-found is supplied.  nth\nalso works for strings, Java arrays, regex Matchers and Lists, and,\nin O(n) time, for sequences.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L891)  \n\n## nthnext\n\n```\nUsage: (nthnext coll n)\n```\n\n```\nReturns the nth next of coll, (seq coll) when n is 0.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3165)  \n\n## nthrest\n\n```\nUsage: (nthrest coll n)\n```\n\n```\nReturns the nth rest of coll, coll when n is 0.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3175)  \n\n## num\n\n```\nUsage: (num x)\n```\n\n```\nCoerce to Number\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3474)  \n\n## number?\n\n```\nUsage: (number? x)\n```\n\n```\nReturns true if x is a Number\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3560)  \n\n## numerator\n\n```\nUsage: (numerator r)\n```\n\n```\nReturns the numerator part of a Ratio.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3583)  \n\n## object-array\n\n```\nUsage: (object-array size-or-seq)\n```\n\n```\nCreates an array of objects\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5350)  \n\n## odd?\n\n```\nUsage: (odd? n)\n```\n\n```\nReturns true if n is odd, throws an exception if n is not an integer\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1408)  \n\n## or\n\n```\nUsage: (or)\n       (or x)\n       (or x & next)\n```\n\n```\nEvaluates exprs one at a time, from left to right. If a form\nreturns a logical true value, or returns that value and doesn't\nevaluate any of the other expressions, otherwise it returns the\nvalue of the last expression. (or) returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L856)  \n\n## parents\n\n```\nUsage: (parents tag)\n       (parents h tag)\n```\n\n```\nReturns the immediate parents of tag, either via a Java type\ninheritance relationship or a relationship established via derive. h\nmust be a hierarchy obtained from make-hierarchy, if not supplied\ndefaults to the global hierarchy\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5610)  \n\n## parse-boolean\n\n```\nUsage: (parse-boolean s)\n```\n\n```\nParse strings \"true\" or \"false\" and return a boolean, or nil if invalid\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8079)  \n\n## parse-double\n\n```\nUsage: (parse-double s)\n```\n\n```\nParse string with floating point components and return a Double value,\nor nil if parse fails.\n\nGrammar: https://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#valueOf-java.lang.String-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8055)  \n\n## parse-long\n\n```\nUsage: (parse-long s)\n```\n\n```\nParse string of decimal digits with optional leading -/+ and return a\nLong value, or nil if parse fails\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8044)  \n\n## parse-uuid\n\n```\nUsage: (parse-uuid s)\n```\n\n```\nParse a string representing a UUID and return a java.util.UUID instance,\nor nil if parse fails.\n\nGrammar: https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html#toString--\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8068)  \n\n## partial\n\n```\nUsage: (partial f)\n       (partial f arg1)\n       (partial f arg1 arg2)\n       (partial f arg1 arg2 arg3)\n       (partial f arg1 arg2 arg3 & more)\n```\n\n```\nTakes a function f and fewer than the normal arguments to f, and\nreturns a fn that takes a variable number of additional args. When\ncalled, the returned function calls f with args + additional args.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2631)  \n\n## partition\n\n```\nUsage: (partition n coll)\n       (partition n step coll)\n       (partition n step pad coll)\n```\n\n```\nReturns a lazy sequence of lists of n items each, at offsets step\napart. If step is not supplied, defaults to n, i.e. the partitions\ndo not overlap. If a pad collection is supplied, use its elements as\nnecessary to complete last partition upto n items. In case there are\nnot enough padding elements, return a partition with less than n items.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3185)  \n\n## partition-all\n\n```\nUsage: (partition-all n)\n       (partition-all n coll)\n       (partition-all n step coll)\n```\n\n```\nReturns a lazy sequence of lists like partition, but may include\npartitions with fewer than n items at the end.  Returns a stateful\ntransducer when no collection is provided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7308)  \n\n## partition-by\n\n```\nUsage: (partition-by f)\n       (partition-by f coll)\n```\n\n```\nApplies f to each value in coll, splitting it each time f returns a\nnew value.  Returns a lazy seq of partitions.  Returns a stateful\ntransducer when no collection is provided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7228)  \n\n## pcalls\n\n```\nUsage: (pcalls & fns)\n```\n\n```\nExecutes the no-arg fns in parallel, returning a lazy sequence of\ntheir values\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7104)  \n\n## peek\n\n```\nUsage: (peek coll)\n```\n\n```\nFor a list or queue, same as first, for a vector, same as, but much\nmore efficient than, last. If the collection is empty, returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1474)  \n\n## persistent!\n\n```\nUsage: (persistent! coll)\n```\n\n```\nReturns a new, persistent version of the transient collection, in\nconstant time. The transient collection cannot be used after this\ncall, any such use will throw an exception.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3350)  \n\n## pmap\n\n```\nUsage: (pmap f coll)\n       (pmap f coll & colls)\n```\n\n```\nLike map, except f is applied in parallel. Semi-lazy in that the\nparallel computation stays ahead of the consumption, but doesn't\nrealize the entire result unless required. Only useful for\ncomputationally intensive functions where the time of f dominates\nthe coordination overhead.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7079)  \n\n## pop\n\n```\nUsage: (pop coll)\n```\n\n```\nFor a list or queue, returns a new list/queue without the first\nitem, for a vector, returns a new vector without the last item. If\nthe collection is empty, throws an exception.  Note - not the same\nas next/butlast.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1481)  \n\n## pop!\n\n```\nUsage: (pop! coll)\n```\n\n```\nRemoves the last item from a transient vector. If\nthe collection is empty, throws an exception. Returns coll\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3393)  \n\n## pop-thread-bindings\n\n```\nUsage: (pop-thread-bindings)\n```\n\n```\nPop one set of bindings pushed with push-binding before. It is an error to\npop bindings without pushing before.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1948)  \n\n## pos-int?\n\n```\nUsage: (pos-int? x)\n```\n\n```\nReturn true if x is a positive fixed precision integer\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1422)  \n\n## pos?\n\n```\nUsage: (pos? num)\n```\n\n```\nReturns true if num is greater than zero, else false\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1261)  \n\n## pr\n\n```\nUsage: (pr)\n       (pr x)\n       (pr x & more)\n```\n\n```\nPrints the object(s) to the output stream that is the current value\nof *out*.  Prints the object(s), separated by spaces if there is\nmore than one.  By default, pr and prn print in a way that objects\ncan be read by the reader\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3678)  \n\n## pr-str\n\n```\nUsage: (pr-str & xs)\n```\n\n```\npr to a string, returning it\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4760)  \n\n## prefer-method\n\n```\nUsage: (prefer-method multifn dispatch-val-x dispatch-val-y)\n```\n\n```\nCauses the multimethod to prefer matches of dispatch-val-x over dispatch-val-y \nwhen there is a conflict\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1820)  \n\n## prefers\n\n```\nUsage: (prefers multifn)\n```\n\n```\nGiven a multimethod, returns a map of preferred value -> set of other values\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1841)  \n\n## print\n\n```\nUsage: (print & more)\n```\n\n```\nPrints the object(s) to the output stream that is the current value\nof *out*.  print and println produce output for human consumption.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3725)  \n\n## print-str\n\n```\nUsage: (print-str & xs)\n```\n\n```\nprint to a string, returning it\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4778)  \n\n## printf\n\n```\nUsage: (printf fmt & args)\n```\n\n```\nPrints formatted output, as per format\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5771)  \n\n## println\n\n```\nUsage: (println & more)\n```\n\n```\nSame as print followed by (newline)\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3734)  \n\n## println-str\n\n```\nUsage: (println-str & xs)\n```\n\n```\nprintln to a string, returning it\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4787)  \n\n## prn\n\n```\nUsage: (prn & more)\n```\n\n```\nSame as pr followed by (newline). Observes *flush-on-newline*\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3715)  \n\n## prn-str\n\n```\nUsage: (prn-str & xs)\n```\n\n```\nprn to a string, returning it\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4769)  \n\n## promise\n\n```\nUsage: (promise)\n```\n\n```\nReturns a promise object that can be read with deref/@, and set,\nonce only, with deliver. Calls to deref/@ prior to delivery will\nblock, unless the variant of deref with timeout is used. All\nsubsequent derefs will return the same delivered value without\nblocking. See also - realized?.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7164)  \n\n## proxy\n\n```\nUsage: (proxy class-and-interfaces args & fs)\n```\n\n```\nclass-and-interfaces - a vector of class names\n\nargs - a (possibly empty) vector of arguments to the superclass\nconstructor.\n\nf => (name [params*] body) or\n(name ([params*] body) ([params+] body) ...)\n\nExpands to code which creates a instance of a proxy class that\nimplements the named class/interface(s) by calling the supplied\nfns. A single class, if provided, must be first. If not provided it\ndefaults to Object.\n\nThe interfaces names must be valid interface types. If a method fn\nis not provided for a class method, the superclass method will be\ncalled. If a method fn is not provided for an interface method, an\nUnsupportedOperationException will be thrown should it be\ncalled. Method fns are closures and can capture the environment in\nwhich proxy is called. Each method fn takes an additional implicit\nfirst arg, which is bound to 'this. Note that while method fns can\nbe provided to override protected methods, they have no other access\nto protected members, nor to super, as these capabilities cannot be\nproxied.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L334)  \n\n## proxy-mappings\n\n```\nUsage: (proxy-mappings proxy)\n```\n\n```\nTakes a proxy instance and returns the proxy's fn map.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L328)  \n\n## proxy-super\n\n```\nUsage: (proxy-super meth & args)\n```\n\n```\nUse to call a superclass method in the body of a proxy method. \nNote, expansion captures 'this\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L396)  \n\n## push-thread-bindings\n\n```\nUsage: (push-thread-bindings bindings)\n```\n\n```\nWARNING: This is a low-level function. Prefer high-level macros like\nbinding where ever possible.\n\nTakes a map of Var/value pairs. Binds each Var to the associated value for\nthe current thread. Each call *MUST* be accompanied by a matching call to\npop-thread-bindings wrapped in a try-finally!\n\n    (push-thread-bindings bindings)\n    (try\n      ...\n      (finally\n        (pop-thread-bindings)))\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1930)  \n\n## pvalues\n\n```\nUsage: (pvalues & exprs)\n```\n\n```\nReturns a lazy sequence of the values of the exprs, which are\nevaluated in parallel\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7111)  \n\n## qualified-ident?\n\n```\nUsage: (qualified-ident? x)\n```\n\n```\nReturn true if x is a symbol or keyword with a namespace\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1637)  \n\n## qualified-keyword?\n\n```\nUsage: (qualified-keyword? x)\n```\n\n```\nReturn true if x is a keyword with a namespace\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1657)  \n\n## qualified-symbol?\n\n```\nUsage: (qualified-symbol? x)\n```\n\n```\nReturn true if x is a symbol with a namespace\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1647)  \n\n## quot\n\n```\nUsage: (quot num div)\n```\n\n```\nquot[ient] of dividing numerator by denominator.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1275)  \n\n## quote\n\n```\nUsage: (quote form)\n```\n\n```\nYields the unevaluated form.\n\nPlease see https://clojure.org/reference/special_forms#quote\n```\n\nAdded in Clojure version 1.0\n\n## rand\n\n```\nUsage: (rand)\n       (rand n)\n```\n\n```\nReturns a random floating point number between 0 (inclusive) and\nn (default 1) (exclusive).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4936)  \n\n## rand-int\n\n```\nUsage: (rand-int n)\n```\n\n```\nReturns a random integer between 0 (inclusive) and n (exclusive).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4944)  \n\n## rand-nth\n\n```\nUsage: (rand-nth coll)\n```\n\n```\nReturn a random element of the (sequential) collection. Will have\nthe same performance characteristics as nth for the given\ncollection.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7299)  \n\n## random-sample\n\n```\nUsage: (random-sample prob)\n       (random-sample prob coll)\n```\n\n```\nReturns items from coll with random probability of prob (0.0 -\n1.0).  Returns a transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7741)  \n\n## random-uuid\n\n```\nUsage: (random-uuid)\n```\n\n```\nReturns a pseudo-randomly generated java.util.UUID instance (i.e. type 4).\n\nSee: https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html#randomUUID--\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6861)  \n\n## range\n\n```\nUsage: (range)\n       (range end)\n       (range start end)\n       (range start end step)\n```\n\n```\nReturns a lazy seq of nums from start (inclusive) to end\n(exclusive), by step, where start defaults to 0, step to 1, and end to\ninfinity. When step is equal to 0, returns an infinite sequence of\nstart. When start is equal to end, returns empty list.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3036)  \n\n## ratio?\n\n```\nUsage: (ratio? n)\n```\n\n```\nReturns true if n is a Ratio\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3577)  \n\n## rational?\n\n```\nUsage: (rational? n)\n```\n\n```\nReturns true if n is a rational number\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3613)  \n\n## rationalize\n\n```\nUsage: (rationalize num)\n```\n\n```\nreturns the rational value of num\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1291)  \n\n## re-find\n\n```\nUsage: (re-find m)\n       (re-find re s)\n```\n\n```\nReturns the next regex match, if any, of string to pattern, using\njava.util.regex.Matcher.find().  Uses re-groups to return the\ngroups.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4923)  \n\n## re-groups\n\n```\nUsage: (re-groups m)\n```\n\n```\nReturns the groups from the most recent match/find. If there are no\nnested groups, returns a string of the entire match. If there are\nnested groups, returns a vector of the groups, the first element\nbeing the entire match.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4883)  \n\n## re-matcher\n\n```\nUsage: (re-matcher re s)\n```\n\n```\nReturns an instance of java.util.regex.Matcher, for use, e.g. in\nre-find.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4874)  \n\n## re-matches\n\n```\nUsage: (re-matches re s)\n```\n\n```\nReturns the match, if any, of string to pattern, using\njava.util.regex.Matcher.matches().  Uses re-groups to return the\ngroups.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4911)  \n\n## re-pattern\n\n```\nUsage: (re-pattern s)\n```\n\n```\nReturns an instance of java.util.regex.Pattern, for use, e.g. in\nre-matcher.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4864)  \n\n## re-seq\n\n```\nUsage: (re-seq re s)\n```\n\n```\nReturns a lazy sequence of successive matches of pattern in string,\nusing java.util.regex.Matcher.find(), each such match processed with\nre-groups.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4899)  \n\n## read\n\n```\nUsage: (read)\n       (read stream)\n       (read stream eof-error? eof-value)\n       (read stream eof-error? eof-value recursive?)\n       (read opts stream)\n```\n\n```\nReads the next object from stream, which must be an instance of\njava.io.PushbackReader or some derivee.  stream defaults to the\ncurrent value of *in*.\n\nOpts is a persistent map with valid keys:\n  :read-cond - :allow to process reader conditionals, or\n               :preserve to keep all branches\n  :features - persistent set of feature keywords for reader conditionals\n  :eof - on eof, return value unless :eofthrow, then throw.\n         if not specified, will throw\n\nNote that read can execute code (controlled by *read-eval*),\nand as such should be used only with trusted sources.\n\nFor data structure interop use clojure.edn/read\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3742)  \n\n## read+string\n\n```\nUsage: (read+string)\n       (read+string stream)\n       (read+string stream eof-error? eof-value)\n       (read+string stream eof-error? eof-value recursive?)\n       (read+string opts stream)\n```\n\n```\nLike read, and taking the same args. stream must be a LineNumberingPushbackReader.\nReturns a vector containing the object read and the (whitespace-trimmed) string read.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3771)  \n\n## read-line\n\n```\nUsage: (read-line)\n```\n\n```\nReads the next line from stream that is the current value of *in* .\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3797)  \n\n## read-string\n\n```\nUsage: (read-string s)\n       (read-string opts s)\n```\n\n```\nReads one object from the string s. Optionally include reader\noptions, as specified in read.\n\nNote that read-string can execute code (controlled by *read-eval*),\nand as such should be used only with trusted sources.\n\nFor data structure interop use clojure.edn/read-string\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3806)  \n\n## reader-conditional\n\n```\nUsage: (reader-conditional form splicing?)\n```\n\n```\nConstruct a data representation of a reader conditional.\nIf true, splicing? indicates read-cond-splicing.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7852)  \n\n## reader-conditional?\n\n```\nUsage: (reader-conditional? value)\n```\n\n```\nReturn true if the value is the data representation of a reader conditional\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7846)  \n\n## realized?\n\n```\nUsage: (realized? x)\n```\n\n```\nReturns true if a value has been produced for a promise, delay, future or lazy sequence.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7601)  \n\n## record?\n\n```\nUsage: (record? x)\n```\n\n```\nReturns true if x is a record\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L406)  \n\n## recur\n\n```\nUsage: (recur exprs*)\n```\n\n```\nEvaluates the exprs in order, then, in parallel, rebinds\nthe bindings of the recursion point to the values of the exprs.\nExecution then jumps back to the recursion point, a loop or fn method.\n\nPlease see https://clojure.org/reference/special_forms#recur\n```\n\nAdded in Clojure version 1.0\n\n## reduce\n\n```\nUsage: (reduce f coll)\n       (reduce f val coll)\n```\n\n```\nf should be a function of 2 arguments. If val is not supplied,\nreturns the result of applying f to the first 2 items in coll, then\napplying f to that result and the 3rd item, etc. If coll contains no\nitems, f must accept no arguments as well, and reduce returns the\nresult of calling f with no arguments.  If coll has only 1 item, it\nis returned and f is not called.  If val is supplied, returns the\nresult of applying f to val and the first item in coll, then\napplying f to that result and the 2nd item, etc. If coll contains no\nitems, returns val and f is not called.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6868)  \n\n## reduce-kv\n\n```\nUsage: (reduce-kv f init coll)\n```\n\n```\nReduces an associative collection. f should be a function of 3\narguments. Returns the result of applying f to init, the first key\nand the first value in coll, then applying f to that result and the\n2nd key and value, etc. If coll contains no entries, returns init\nand f is not called. Note that reduce-kv is supported on vectors,\nwhere the keys will be the ordinals.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6910)  \n\n## reduced\n\n```\nUsage: (reduced x)\n```\n\n```\nWraps x in a way such that a reduce will terminate with the value x\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2853)  \n\n## reduced?\n\n```\nUsage: (reduced? x)\n```\n\n```\nReturns true if x is the result of a call to reduced\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2859)  \n\n## reductions\n\n```\nUsage: (reductions f coll)\n       (reductions f init coll)\n```\n\n```\nReturns a lazy seq of the intermediate values of the reduction (as\nper reduce) of coll by f, starting with init.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7282)  \n\n## ref\n\n```\nUsage: (ref x)\n       (ref x & options)\n```\n\n```\nCreates and returns a Ref with an initial value of x and zero or\nmore options (in any order):\n\n:meta metadata-map\n\n:validator validate-fn\n\n:min-history (default 0)\n:max-history (default 10)\n\nIf metadata-map is supplied, it will become the metadata on the\nref. validate-fn must be nil or a side-effect-free fn of one\nargument, which will be passed the intended new state on any state\nchange. If the new state is unacceptable, the validate-fn should\nreturn false or throw an exception. validate-fn will be called on\ntransaction commit, when all refs have their final values.\n\nNormally refs accumulate history dynamically as needed to deal with\nread demands. If you know in advance you will need history you can\nset :min-history to ensure it will be available when first needed (instead\nof after a read fault). History is limited, and the limit can be set\nwith :max-history.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2279)  \n\n## ref-history-count\n\n```\nUsage: (ref-history-count ref)\n```\n\n```\nReturns the history count of a ref\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2480)  \n\n## ref-max-history\n\n```\nUsage: (ref-max-history ref)\n       (ref-max-history ref n)\n```\n\n```\nGets the max-history of a ref, or sets it and returns the ref\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2496)  \n\n## ref-min-history\n\n```\nUsage: (ref-min-history ref)\n       (ref-min-history ref n)\n```\n\n```\nGets the min-history of a ref, or sets it and returns the ref\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2487)  \n\n## ref-set\n\n```\nUsage: (ref-set ref val)\n```\n\n```\nMust be called in a transaction. Sets the value of ref.\nReturns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2472)  \n\n## refer\n\n```\nUsage: (refer ns-sym & filters)\n```\n\n```\nrefers to all public vars of ns, subject to filters.\nfilters can include at most one each of:\n\n:exclude list-of-symbols\n:only list-of-symbols\n:rename map-of-fromsymbol-tosymbol\n\nFor each public interned var in the namespace named by the symbol,\nadds a mapping from the name of the var to the var to the current\nnamespace.  Throws an exception if name is already mapped to\nsomething else in the current namespace. Filters can be used to\nselect a subset, via inclusion or exclusion, or to provide a mapping\nto a symbol different from the var's name, in order to prevent\nclashes. Use :use in the ns macro in preference to calling this directly.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4218)  \n\n## refer-clojure\n\n```\nUsage: (refer-clojure & filters)\n```\n\n```\nSame as (refer 'clojure.core <filters>)\n```\n\n```\nSpecs:\n  Args: (*\n          (alt\n           :exclude (cat\n                     :op (quotable #{:exclude})\n                     :arg (quotable :clojure.core.specs.alpha/exclude))\n           :only (cat\n                  :op (quotable #{:only})\n                  :arg (quotable :clojure.core.specs.alpha/only))\n           :rename (cat\n                    :op (quotable #{:rename})\n                    :arg (quotable :clojure.core.specs.alpha/rename))))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5847)  \n\n## reify\n\n```\nUsage: (reify & opts+specs)\n```\n\n```\nreify creates an object implementing a protocol or interface.\n reify is a macro with the following structure:\n\n(reify options* specs*)\n \n Currently there are no options.\n\n Each spec consists of the protocol or interface name followed by zero\n or more method bodies:\n\n protocol-or-interface-or-Object\n (methodName [args+] body)*\n\n Methods should be supplied for all methods of the desired\n protocol(s) and interface(s). You can also define overrides for\n methods of Object. Note that the first parameter must be supplied to\n correspond to the target object ('this' in Java parlance). Thus\n methods for interfaces will take one more argument than do the\n interface declarations.  Note also that recur calls to the method\n head should *not* pass the target object, it will be supplied\n automatically and can not be substituted.\n\n The return type can be indicated by a type hint on the method name,\n and arg types can be indicated by a type hint on arg names. If you\n leave out all hints, reify will try to match on same name/arity\n method in the protocol(s)/interface(s) - this is preferred. If you\n supply any hints at all, no inference is done, so all hints (or\n default of Object) must be correct, for both arguments and return\n type. If a method is overloaded in a protocol/interface, multiple\n independent method definitions must be supplied.  If overloaded with\n same arity in an interface you must specify complete hints to\n disambiguate - a missing hint implies Object.\n\n recur works to method heads The method bodies of reify are lexical\n closures, and can refer to the surrounding local scope:\n \n (str (let [f \"foo\"] \n      (reify Object \n        (toString [this] f))))\n == \"foo\"\n\n (seq (let [f \"foo\"] \n      (reify clojure.lang.Seqable \n        (seq [this] (seq f)))))\n == (\\f \\o \\o))\n \n reify always implements clojure.lang.IObj and transfers meta\n data of the form to the created object.\n \n (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n == {:k :v}\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L70)  \n\n## release-pending-sends\n\n```\nUsage: (release-pending-sends)\n```\n\n```\nNormally, actions sent directly or indirectly during another action\nare held until the action completes (changes the agent's\nstate). This function can be used to dispatch any pending sent\nactions immediately. This has no impact on actions sent during a\ntransaction, which are still held until commit. If no action is\noccurring, does nothing. Returns the number of actions dispatched.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2150)  \n\n## rem\n\n```\nUsage: (rem num div)\n```\n\n```\nremainder of dividing numerator by denominator.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1283)  \n\n## remove\n\n```\nUsage: (remove pred)\n       (remove pred coll)\n```\n\n```\nReturns a lazy sequence of the items in coll for which\n(pred item) returns logical false. pred must be free of side-effects.\nReturns a transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2843)  \n\n## remove-all-methods\n\n```\nUsage: (remove-all-methods multifn)\n```\n\n```\nRemoves all of the methods of multimethod.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1806)  \n\n## remove-method\n\n```\nUsage: (remove-method multifn dispatch-val)\n```\n\n```\nRemoves the method of multimethod associated with dispatch-value.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1813)  \n\n## remove-ns\n\n```\nUsage: (remove-ns sym)\n```\n\n```\nRemoves the namespace named by the symbol. Use with caution.\nCannot be used to remove the clojure namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4141)  \n\n## remove-tap\n\n```\nUsage: (remove-tap f)\n```\n\n```\nRemove f from the tap set.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7993)  \n\n## remove-watch\n\n```\nUsage: (remove-watch reference key)\n```\n\n```\nRemoves a watch (set by add-watch) from a reference\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2179)  \n\n## repeat\n\n```\nUsage: (repeat x)\n       (repeat n x)\n```\n\n```\nReturns a lazy (infinite!, or length n if supplied) sequence of xs.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3016)  \n\n## repeatedly\n\n```\nUsage: (repeatedly f)\n       (repeatedly n f)\n```\n\n```\nTakes a function of no args, presumably with side effects, and\nreturns an infinite (or length n if supplied) lazy sequence of calls\nto it\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5168)  \n\n## replace\n\n```\nUsage: (replace smap)\n       (replace smap coll)\n```\n\n```\nGiven a map of replacement pairs and a vector/collection, returns a\nvector/seq with any elements = a key in smap replaced with the\ncorresponding val in smap.  Returns a transducer when no collection\nis provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5083)  \n\n## replicate\n\n```\nUsage: (replicate n x)\n```\n\n```\nDEPRECATED: Use 'repeat' instead.\nReturns a lazy seq of n xs.\n```\n\nAdded in Clojure version 1.0\n\nDeprecated since Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3023)  \n\n## require\n\n```\nUsage: (require & args)\n```\n\n```\nLoads libs, skipping any that are already loaded. Each argument is\neither a libspec that identifies a lib, a prefix list that identifies\nmultiple libs whose names share a common prefix, or a flag that modifies\nhow all the identified libs are loaded. Use :require in the ns macro\nin preference to calling this directly.\n\nLibs\n\nA 'lib' is a named set of resources in classpath whose contents define a\nlibrary of Clojure code. Lib names are symbols and each lib is associated\nwith a Clojure namespace and a Java package that share its name. A lib's\nname also locates its root directory within classpath using Java's\npackage name to classpath-relative path mapping. All resources in a lib\nshould be contained in the directory structure under its root directory.\nAll definitions a lib makes should be in its associated namespace.\n\n'require loads a lib by loading its root resource. The root resource path\nis derived from the lib name in the following manner:\nConsider a lib named by the symbol 'x.y.z; it has the root directory\n<classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj, or\n<classpath>/x/y/z.cljc if <classpath>/x/y/z.clj does not exist. The\nroot resource should contain code to create the lib's\nnamespace (usually by using the ns macro) and load any additional\nlib resources.\n\nLibspecs\n\nA libspec is a lib name or a vector containing a lib name followed by\noptions expressed as sequential keywords and arguments.\n\nRecognized options:\n:as takes a symbol as its argument and makes that symbol an alias to the\n  lib's namespace in the current namespace.\n:as-alias takes a symbol as its argument and aliases like :as, however\n  the lib will not be loaded. If the lib has not been loaded, a new\n  empty namespace will be created (as with create-ns).\n:refer takes a list of symbols to refer from the namespace or the :all\n  keyword to bring in all public vars.\n\nPrefix Lists\n\nIt's common for Clojure code to depend on several libs whose names have\nthe same prefix. When specifying libs, prefix lists can be used to reduce\nrepetition. A prefix list contains the shared prefix followed by libspecs\nwith the shared prefix removed from the lib names. After removing the\nprefix, the names that remain must not contain any periods.\n\nFlags\n\nA flag is a keyword.\nRecognized flags: :reload, :reload-all, :verbose\n:reload forces loading of all the identified libs even if they are\n  already loaded (has no effect on libspecs using :as-alias)\n:reload-all implies :reload and also forces loading of all libs that the\n  identified libs directly or indirectly load via require or use\n  (has no effect on libspecs using :as-alias)\n:verbose triggers printing information about each load, alias, and refer\n\nExample:\n\nThe following would load the libraries clojure.zip and clojure.set\nabbreviated as 's'.\n\n(require '(clojure zip [set :as s]))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6038)  \n\n## requiring-resolve\n\n```\nUsage: (requiring-resolve sym)\n```\n\n```\nResolves namespace-qualified sym per 'resolve'. If initial resolve\nfails, attempts to require sym's namespace and retries.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6117)  \n\n## reset!\n\n```\nUsage: (reset! atom newval)\n```\n\n```\nSets the value of atom to newval without regard for the\ncurrent value. Returns newval.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2393)  \n\n## reset-meta!\n\n```\nUsage: (reset-meta! iref metadata-map)\n```\n\n```\nAtomically resets the metadata for a namespace/var/ref/agent/atom\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2433)  \n\n## reset-vals!\n\n```\nUsage: (reset-vals! atom newval)\n```\n\n```\nSets the value of atom to newval. Returns [old new], the value of the\natom before and after the reset.\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2400)  \n\n## resolve\n\n```\nUsage: (resolve sym)\n       (resolve env sym)\n```\n\n```\nsame as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4373)  \n\n## rest\n\n```\nUsage: (rest coll)\n```\n\n```\nReturns a possibly empty seq of the items after the first. Calls seq on its\nargument.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L66)  \n\n## restart-agent\n\n```\nUsage: (restart-agent a new-state & options)\n```\n\n```\nWhen an agent is failed, changes the agent state to new-state and\nthen un-fails the agent so that sends are allowed again.  If\na :clear-actions true option is given, any actions queued on the\nagent that were being held while it was failed will be discarded,\notherwise those held actions will proceed.  The new-state must pass\nthe validator if any, or restart will throw an exception and the\nagent will remain failed with its old state and error.  Watchers, if\nany, will NOT be notified of the new state.  Throws an exception if\nthe agent is not failed.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2194)  \n\n## resultset-seq\n\n```\nUsage: (resultset-seq rs)\n```\n\n```\nCreates and returns a lazy sequence of structmaps corresponding to\nthe rows in the java.sql.ResultSet rs\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5727)  \n\n## reverse\n\n```\nUsage: (reverse coll)\n```\n\n```\nReturns a seq of the items in coll in reverse order. Not lazy.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L949)  \n\n## reversible?\n\n```\nUsage: (reversible? coll)\n```\n\n```\nReturns true if coll implements Reversible\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6303)  \n\n## rseq\n\n```\nUsage: (rseq rev)\n```\n\n```\nReturns, in constant time, a seq of the items in rev (which\ncan be a vector or sorted-map), in reverse order. If rev is empty returns nil\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1596)  \n\n## rsubseq\n\n```\nUsage: (rsubseq sc test key)\n       (rsubseq sc start-test start-key end-test end-key)\n```\n\n```\nsc must be a sorted collection, test(s) one of <, <=, > or\n>=. Returns a reverse seq of those entries with keys ek for\nwhich (test (.. sc comparator (compare ek key)) 0) is true\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5151)  \n\n## run!\n\n```\nUsage: (run! proc coll)\n```\n\n```\nRuns the supplied procedure (via reduce), for purposes of side\neffects, on successive items in the collection. Returns nil\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7778)  \n\n## satisfies?\n\n```\nUsage: (satisfies? protocol x)\n```\n\n```\nReturns true if x satisfies the protocol\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L570)  \n\n## second\n\n```\nUsage: (second x)\n```\n\n```\nSame as (first (next x))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L93)  \n\n## select-keys\n\n```\nUsage: (select-keys map keyseq)\n```\n\n```\nReturns a map containing only those entries in map whose key is in keys\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1555)  \n\n## send\n\n```\nUsage: (send a f & args)\n```\n\n```\nDispatch an action to an agent. Returns the agent immediately.\nSubsequently, in a thread from a thread pool, the state of the agent\nwill be set to the value of:\n\n(apply action-fn state-of-agent args)\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2128)  \n\n## send-off\n\n```\nUsage: (send-off a f & args)\n```\n\n```\nDispatch a potentially blocking action to an agent. Returns the\nagent immediately. Subsequently, in a separate thread, the state of\nthe agent will be set to the value of:\n\n(apply action-fn state-of-agent args)\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2139)  \n\n## send-via\n\n```\nUsage: (send-via executor a f & args)\n```\n\n```\nDispatch an action to an agent. Returns the agent immediately.\nSubsequently, in a thread supplied by executor, the state of the agent\nwill be set to the value of:\n\n(apply action-fn state-of-agent args)\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2118)  \n\n## seq\n\n```\nUsage: (seq coll)\n```\n\n```\nReturns a seq on the collection. If the collection is\nempty, returns nil.  (seq nil) returns nil. seq also works on\nStrings, native Java arrays (of reference types) and any objects\nthat implement Iterable. Note that seqs cache values, thus seq\nshould not be used on any Iterable whose iterator repeatedly\nreturns the same mutable object.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L128)  \n\n## seq-to-map-for-destructuring\n\n```\nUsage: (seq-to-map-for-destructuring s)\n```\n\n```\nBuilds a map from a seq as described in\nhttps://clojure.org/reference/special_forms#keyword-arguments\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4392)  \n\n## seq?\n\n```\nUsage: (seq? x)\n```\n\n```\nReturn true if x implements ISeq\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L148)  \n\n## seqable?\n\n```\nUsage: (seqable? x)\n```\n\n```\nReturn true if the seq function is supported for x\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6260)  \n\n## seque\n\n```\nUsage: (seque s)\n       (seque n-or-q s)\n```\n\n```\nCreates a queued seq on another (presumably lazy) seq s. The queued\nseq will produce a concrete seq in the background, and can get up to\nn items ahead of the consumer. n-or-q can be an integer n buffer\nsize, or an instance of java.util.concurrent BlockingQueue. Note\nthat reading from a seque can block if the reader gets ahead of the\nproducer.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5422)  \n\n## sequence\n\n```\nUsage: (sequence coll)\n       (sequence xform coll)\n       (sequence xform coll & colls)\n```\n\n```\nCoerces coll to a (possibly empty) sequence, if it is not already\none. Will not force a lazy seq. (sequence nil) yields (), When a\ntransducer is supplied, returns a lazy sequence of applications of\nthe transform to the items in coll(s), i.e. to the set of first\nitems of each coll, followed by the set of second\nitems in each coll, until any one of the colls is exhausted.  Any\nremaining items in other colls are ignored. The transform should accept\nnumber-of-colls arguments\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2664)  \n\n## sequential?\n\n```\nUsage: (sequential? coll)\n```\n\n```\nReturns true if coll implements Sequential\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6285)  \n\n## set\n\n```\nUsage: (set coll)\n```\n\n```\nReturns a set of the distinct elements of coll.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4106)  \n\n## set!\n\n```\nUsage: (set! var-symbol expr)\n       (set! (. instance-expr instanceFieldName-symbol) expr)\n       (set! (. Classname-symbol staticFieldName-symbol) expr)\n```\n\n```\nUsed to set thread-local-bound vars, Java object instance\nfields, and Java class static fields.\n\nPlease see https://clojure.org/vars#set\n```\n\nAdded in Clojure version 1.0\n\n## set-agent-send-executor!\n\n```\nUsage: (set-agent-send-executor! executor)\n```\n\n```\nSets the ExecutorService to be used by send\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2106)  \n\n## set-agent-send-off-executor!\n\n```\nUsage: (set-agent-send-off-executor! executor)\n```\n\n```\nSets the ExecutorService to be used by send-off\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2112)  \n\n## set-error-handler!\n\n```\nUsage: (set-error-handler! a handler-fn)\n```\n\n```\nSets the error-handler of agent a to handler-fn.  If an action\nbeing run by the agent throws an exception or doesn't pass the\nvalidator fn, handler-fn will be called with two arguments: the\nagent and the exception.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2211)  \n\n## set-error-mode!\n\n```\nUsage: (set-error-mode! a mode-keyword)\n```\n\n```\nSets the error-mode of agent a to mode-keyword, which must be\neither :fail or :continue.  If an action being run by the agent\nthrows an exception or doesn't pass the validator fn, an\nerror-handler may be called (see set-error-handler!), after which,\nif the mode is :continue, the agent will continue as if neither the\naction that caused the error nor the error itself ever happened.\n\nIf the mode is :fail, the agent will become failed and will stop\naccepting new 'send' and 'send-off' actions, and any previously\nqueued actions will be held until a 'restart-agent'.  Deref will\nstill work, returning the state of the agent before the error.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2229)  \n\n## set-validator!\n\n```\nUsage: (set-validator! iref validator-fn)\n```\n\n```\nSets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a\nside-effect-free fn of one argument, which will be passed the intended\nnew state on any state change. If the new state is unacceptable, the\nvalidator-fn should return false or throw an exception. If the current state (root\nvalue if var) is not acceptable to the new validator, an exception\nwill be thrown and the validator will not be changed.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2406)  \n\n## set?\n\n```\nUsage: (set? x)\n```\n\n```\nReturns true if x implements IPersistentSet\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4100)  \n\n## short\n\n```\nUsage: (short x)\n```\n\n```\nCoerce to short\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3499)  \n\n## short-array\n\n```\nUsage: (short-array size-or-seq)\n       (short-array size init-val-or-seq)\n```\n\n```\nCreates an array of shorts\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5334)  \n\n## shorts\n\n```\nUsage: (shorts xs)\n```\n\n```\nCasts to shorts[]\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5388)  \n\n## shuffle\n\n```\nUsage: (shuffle coll)\n```\n\n```\nReturn a random permutation of coll\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7342)  \n\n## shutdown-agents\n\n```\nUsage: (shutdown-agents)\n```\n\n```\nInitiates a shutdown of the thread pools that back the agent\nsystem. Running actions will complete, but no new actions will be\naccepted\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2271)  \n\n## simple-ident?\n\n```\nUsage: (simple-ident? x)\n```\n\n```\nReturn true if x is a symbol or keyword without a namespace\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1632)  \n\n## simple-keyword?\n\n```\nUsage: (simple-keyword? x)\n```\n\n```\nReturn true if x is a keyword without a namespace\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1652)  \n\n## simple-symbol?\n\n```\nUsage: (simple-symbol? x)\n```\n\n```\nReturn true if x is a symbol without a namespace\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1642)  \n\n## slurp\n\n```\nUsage: (slurp f & opts)\n```\n\n```\nOpens a reader on f and reads all its contents, returning a string.\nSee clojure.java.io/reader for a complete list of supported arguments.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7009)  \n\n## some\n\n```\nUsage: (some pred coll)\n```\n\n```\nReturns the first logical true value of (pred x) for any x in coll,\nelse nil.  One common idiom is to use a set as pred, for example\nthis will return :fred if :fred is in the sequence, otherwise nil:\n(some #{:fred} coll)\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2709)  \n\n## some-\\>\n\n```\nUsage: (some-> expr & forms)\n```\n\n```\nWhen expr is not nil, threads it into the first form (via ->),\nand when that result is not nil, through the next etc\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7652)  \n\n## some-\\>\\>\n\n```\nUsage: (some->> expr & forms)\n```\n\n```\nWhen expr is not nil, threads it into the first form (via ->>),\nand when that result is not nil, through the next etc\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7666)  \n\n## some-fn\n\n```\nUsage: (some-fn p)\n       (some-fn p1 p2)\n       (some-fn p1 p2 p3)\n       (some-fn p1 p2 p3 & ps)\n```\n\n```\nTakes a set of predicates and returns a function f that returns the first logical true value\nreturned by one of its composing predicates against any of its arguments, else it returns\nlogical false. Note that f is short-circuiting in that it will stop execution on the first\nargument that triggers a logical true result against the original predicates.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7504)  \n\n## some?\n\n```\nUsage: (some? x)\n```\n\n```\nReturns true if x is not nil, false otherwise.\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L533)  \n\n## sort\n\n```\nUsage: (sort coll)\n       (sort comp coll)\n```\n\n```\nReturns a sorted sequence of the items in coll. If no comparator is\nsupplied, uses compare.  comparator must implement\njava.util.Comparator.  Guaranteed to be stable: equal elements will\nnot be reordered.  If coll is a Java array, it will be modified.  To\navoid this, sort a copy of the array.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3103)  \n\n## sort-by\n\n```\nUsage: (sort-by keyfn coll)\n       (sort-by keyfn comp coll)\n```\n\n```\nReturns a sorted sequence of the items in coll, where the sort\norder is determined by comparing (keyfn item).  If no comparator is\nsupplied, uses compare.  comparator must implement\njava.util.Comparator.  Guaranteed to be stable: equal elements will\nnot be reordered.  If coll is a Java array, it will be modified.  To\navoid this, sort a copy of the array.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3120)  \n\n## sorted-map\n\n```\nUsage: (sorted-map & keyvals)\n```\n\n```\nkeyval => key val\nReturns a new sorted map with supplied mappings.  If any keys are\nequal, they are handled as if by repeated uses of assoc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L400)  \n\n## sorted-map-by\n\n```\nUsage: (sorted-map-by comparator & keyvals)\n```\n\n```\nkeyval => key val\nReturns a new sorted map with supplied mappings, using the supplied\ncomparator.  If any keys are equal, they are handled as if by\nrepeated uses of assoc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L409)  \n\n## sorted-set\n\n```\nUsage: (sorted-set & keys)\n```\n\n```\nReturns a new sorted set with supplied keys.  Any equal keys are\nhandled as if by repeated uses of conj.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L419)  \n\n## sorted-set-by\n\n```\nUsage: (sorted-set-by comparator & keys)\n```\n\n```\nReturns a new sorted set with supplied keys, using the supplied\ncomparator.  Any equal keys are handled as if by repeated uses of\nconj.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L427)  \n\n## sorted?\n\n```\nUsage: (sorted? coll)\n```\n\n```\nReturns true if coll implements Sorted\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6291)  \n\n## special-symbol?\n\n```\nUsage: (special-symbol? s)\n```\n\n```\nReturns true if s names a special form\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4993)  \n\n## spit\n\n```\nUsage: (spit f content & options)\n```\n\n```\nOpposite of slurp.  Opens f with writer, writes content, then\ncloses f. Options passed to clojure.java.io/writer.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7021)  \n\n## split-at\n\n```\nUsage: (split-at n coll)\n```\n\n```\nReturns a vector of [(take n coll) (drop n coll)]\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3002)  \n\n## split-with\n\n```\nUsage: (split-with pred coll)\n```\n\n```\nReturns a vector of [(take-while pred coll) (drop-while pred coll)]\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3009)  \n\n## str\n\n```\nUsage: (str)\n       (str x)\n       (str x & ys)\n```\n\n```\nWith no args, returns the empty string. With one arg x, returns\nx.toString().  (str nil) returns the empty string. With more than\none arg, returns the concatenation of the str values of the args.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L546)  \n\n## string?\n\n```\nUsage: (string? x)\n```\n\n```\nReturn true if x is a String\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L162)  \n\n## struct\n\n```\nUsage: (struct s & vals)\n```\n\n```\nReturns a new structmap instance with the keys of the\nstructure-basis. vals must be supplied for basis keys in order -\nwhere values are not supplied they will default to nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4063)  \n\n## struct-map\n\n```\nUsage: (struct-map s & inits)\n```\n\n```\nReturns a new structmap instance with the keys of the\nstructure-basis. keyvals may contain all, some or none of the basis\nkeys - where values are not supplied they will default to nil.\nkeyvals can also contain keys not in the basis.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4053)  \n\n## subs\n\n```\nUsage: (subs s start)\n       (subs s start end)\n```\n\n```\nReturns the substring of s beginning at start inclusive, and ending\nat end (defaults to length of string), exclusive.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5006)  \n\n## subseq\n\n```\nUsage: (subseq sc test key)\n       (subseq sc start-test start-key end-test end-key)\n```\n\n```\nsc must be a sorted collection, test(s) one of <, <=, > or\n>=. Returns a seq of those entries with keys ek for\nwhich (test (.. sc comparator (compare ek key)) 0) is true\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5134)  \n\n## subvec\n\n```\nUsage: (subvec v start)\n       (subvec v start end)\n```\n\n```\nReturns a persistent vector of the items in vector from\nstart (inclusive) to end (exclusive).  If end is not supplied,\ndefaults to (count vector). This operation is O(1) and very fast, as\nthe resulting vector shares structure with the original and no\ntrimming is done.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3819)  \n\n## supers\n\n```\nUsage: (supers class)\n```\n\n```\nReturns the immediate and indirect superclasses and interfaces of c, if any\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5578)  \n\n## swap!\n\n```\nUsage: (swap! atom f)\n       (swap! atom f x)\n       (swap! atom f x y)\n       (swap! atom f x y & args)\n```\n\n```\nAtomically swaps the value of atom to be:\n(apply f current-value-of-atom args). Note that f may be called\nmultiple times, and thus should be free of side effects.  Returns\nthe value that was swapped in.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2362)  \n\n## swap-vals!\n\n```\nUsage: (swap-vals! atom f)\n       (swap-vals! atom f x)\n       (swap-vals! atom f x y)\n       (swap-vals! atom f x y & args)\n```\n\n```\nAtomically swaps the value of atom to be:\n(apply f current-value-of-atom args). Note that f may be called\nmultiple times, and thus should be free of side effects.\nReturns [old new], the value of the atom before and after the swap.\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2374)  \n\n## symbol\n\n```\nUsage: (symbol name)\n       (symbol ns name)\n```\n\n```\nReturns a Symbol with the given namespace and name. Arity-1 works\non strings, keywords, and vars.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L591)  \n\n## symbol?\n\n```\nUsage: (symbol? x)\n```\n\n```\nReturn true if x is a Symbol\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L564)  \n\n## sync\n\n```\nUsage: (sync flags-ignored-for-now & body)\n```\n\n```\ntransaction-flags => TBD, pass nil for now\n\nRuns the exprs (in an implicit do) in a transaction that encompasses\nexprs and any nested calls.  Starts a transaction if none is already\nrunning on this thread. Any uncaught exception will abort the\ntransaction and flow out of sync. The exprs may be run more than\nonce, but any effects on Refs will be atomic.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2515)  \n\n## tagged-literal\n\n```\nUsage: (tagged-literal tag form)\n```\n\n```\nConstruct a data representation of a tagged literal from a\ntag symbol and a form.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7839)  \n\n## tagged-literal?\n\n```\nUsage: (tagged-literal? value)\n```\n\n```\nReturn true if the value is the data representation of a tagged literal\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7833)  \n\n## take\n\n```\nUsage: (take n)\n       (take n coll)\n```\n\n```\nReturns a lazy sequence of the first n items in coll, or all items if\nthere are fewer than n.  Returns a stateful transducer when\nno collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2878)  \n\n## take-last\n\n```\nUsage: (take-last n coll)\n```\n\n```\nReturns a seq of the last n items in coll.  Depending on the type\nof coll may be no better than linear time.  For vectors, see also subvec.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2958)  \n\n## take-nth\n\n```\nUsage: (take-nth n)\n       (take-nth n coll)\n```\n\n```\nReturns a lazy seq of every nth item in coll.  Returns a stateful\ntransducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4289)  \n\n## take-while\n\n```\nUsage: (take-while pred)\n       (take-while pred coll)\n```\n\n```\nReturns a lazy sequence of successive items from coll while\n(pred item) returns logical true. pred must be free of side-effects.\nReturns a transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2905)  \n\n## tap\\>\n\n```\nUsage: (tap> x)\n```\n\n```\nsends x to any taps. Will not block. Returns true if there was room in the queue,\nfalse if not (dropped).\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8000)  \n\n## test\n\n```\nUsage: (test v)\n```\n\n```\ntest [v] finds fn at key :test in var metadata and calls it,\npresuming failure will throw exception\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4854)  \n\n## the-ns\n\n```\nUsage: (the-ns x)\n```\n\n```\nIf passed a namespace, returns it. Else, when passed a symbol,\nreturns the namespace named by it, throwing an exception if not\nfound.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4154)  \n\n## thread-bound?\n\n```\nUsage: (thread-bound? & vars)\n```\n\n```\nReturns true if all of the vars provided as arguments have thread-local bindings.\nImplies that set!'ing the provided vars will succeed.  Returns true if no vars are provided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5545)  \n\n## throw\n\n```\nUsage: (throw expr)\n```\n\n```\nThe expr is evaluated and thrown, therefore it should\nyield an instance of some derivee of Throwable.\n\nPlease see https://clojure.org/reference/special_forms#throw\n```\n\nAdded in Clojure version 1.0\n\n## time\n\n```\nUsage: (time expr)\n```\n\n```\nEvaluates expr and prints the time it took.  Returns the value of\nexpr.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3885)  \n\n## to-array\n\n```\nUsage: (to-array coll)\n```\n\n```\nReturns an array of Objects containing the contents of coll, which\ncan be any Collection.  Maps to java.util.Collection.toArray().\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L340)  \n\n## to-array-2d\n\n```\nUsage: (to-array-2d coll)\n```\n\n```\nReturns a (potentially-ragged) 2-dimensional array of Objects\ncontaining the contents of coll, which can be any Collection of any\nCollection.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4004)  \n\n## trampoline\n\n```\nUsage: (trampoline f)\n       (trampoline f & args)\n```\n\n```\ntrampoline can be used to convert algorithms requiring mutual\nrecursion without stack consumption. Calls f with supplied args, if\nany. If f returns a fn, calls that fn with no arguments, and\ncontinues to repeat, until the return value is not a fn, then\nreturns that non-fn value. Note that if you want to return a fn as a\nfinal value, you must wrap it in some data structure and unpack it\nafter trampoline returns.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6334)  \n\n## transduce\n\n```\nUsage: (transduce xform f coll)\n       (transduce xform f init coll)\n```\n\n```\nreduce with a transformation of f (xf). If init is not\nsupplied, (f) will be called to produce it. f should be a reducing\nstep function that accepts both 1 and 2 arguments, if it accepts\nonly 2 you can add the arity-1 with 'completing'. Returns the result\nof applying (the transformed) xf to init and the first item in coll,\nthen applying xf to that result and the 2nd item, etc. If coll\ncontains no items, returns init and f is not called. Note that\ncertain transforms may inject or skip items.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6933)  \n\n## transient\n\n```\nUsage: (transient coll)\n```\n\n```\nReturns a new, transient version of the collection, in constant time.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3343)  \n\n## tree-seq\n\n```\nUsage: (tree-seq branch? children root)\n```\n\n```\nReturns a lazy sequence of the nodes in a tree, via a depth-first walk.\n branch? must be a fn of one arg that returns true if passed a node\n that can have children (but may not).  children must be a fn of one\n arg that returns a sequence of the children. Will only be called on\n nodes for which branch? returns true. Root is the root node of the\ntree.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4956)  \n\n## true?\n\n```\nUsage: (true? x)\n```\n\n```\nReturns true if x is the value true, false otherwise.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L514)  \n\n## try\n\n```\nUsage: (try expr* catch-clause* finally-clause?)\n```\n\n```\ncatch-clause => (catch classname name expr*)\nfinally-clause => (finally expr*)\n\nCatches and handles Java exceptions.\n\nPlease see https://clojure.org/reference/special_forms#try\n```\n\nAdded in Clojure version 1.0\n\n## type\n\n```\nUsage: (type x)\n```\n\n```\nReturns the :type metadata of x, or its Class if none\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3467)  \n\n## unchecked-add\n\n```\nUsage: (unchecked-add x y)\n```\n\n```\nReturns the sum of x and y, both long.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1212)  \n\n## unchecked-add-int\n\n```\nUsage: (unchecked-add-int x y)\n```\n\n```\nReturns the sum of x and y, both int.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1205)  \n\n## unchecked-byte\n\n```\nUsage: (unchecked-byte x)\n```\n\n```\nCoerce to byte. Subject to rounding or truncation.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3517)  \n\n## unchecked-char\n\n```\nUsage: (unchecked-char x)\n```\n\n```\nCoerce to char. Subject to rounding or truncation.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3529)  \n\n## unchecked-dec\n\n```\nUsage: (unchecked-dec x)\n```\n\n```\nReturns a number one less than x, a long.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1184)  \n\n## unchecked-dec-int\n\n```\nUsage: (unchecked-dec-int x)\n```\n\n```\nReturns a number one less than x, an int.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1177)  \n\n## unchecked-divide-int\n\n```\nUsage: (unchecked-divide-int x y)\n```\n\n```\nReturns the division of x by y, both int.\nNote - uses a primitive operator subject to truncation.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1247)  \n\n## unchecked-double\n\n```\nUsage: (unchecked-double x)\n```\n\n```\nCoerce to double. Subject to rounding.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3553)  \n\n## unchecked-float\n\n```\nUsage: (unchecked-float x)\n```\n\n```\nCoerce to float. Subject to rounding.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3547)  \n\n## unchecked-inc\n\n```\nUsage: (unchecked-inc x)\n```\n\n```\nReturns a number one greater than x, a long.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1170)  \n\n## unchecked-inc-int\n\n```\nUsage: (unchecked-inc-int x)\n```\n\n```\nReturns a number one greater than x, an int.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1163)  \n\n## unchecked-int\n\n```\nUsage: (unchecked-int x)\n```\n\n```\nCoerce to int. Subject to rounding or truncation.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3535)  \n\n## unchecked-long\n\n```\nUsage: (unchecked-long x)\n```\n\n```\nCoerce to long. Subject to rounding or truncation.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3541)  \n\n## unchecked-multiply\n\n```\nUsage: (unchecked-multiply x y)\n```\n\n```\nReturns the product of x and y, both long.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1240)  \n\n## unchecked-multiply-int\n\n```\nUsage: (unchecked-multiply-int x y)\n```\n\n```\nReturns the product of x and y, both int.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1233)  \n\n## unchecked-negate\n\n```\nUsage: (unchecked-negate x)\n```\n\n```\nReturns the negation of x, a long.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1198)  \n\n## unchecked-negate-int\n\n```\nUsage: (unchecked-negate-int x)\n```\n\n```\nReturns the negation of x, an int.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1191)  \n\n## unchecked-remainder-int\n\n```\nUsage: (unchecked-remainder-int x y)\n```\n\n```\nReturns the remainder of division of x by y, both int.\nNote - uses a primitive operator subject to truncation.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1254)  \n\n## unchecked-short\n\n```\nUsage: (unchecked-short x)\n```\n\n```\nCoerce to short. Subject to rounding or truncation.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3523)  \n\n## unchecked-subtract\n\n```\nUsage: (unchecked-subtract x y)\n```\n\n```\nReturns the difference of x and y, both long.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1226)  \n\n## unchecked-subtract-int\n\n```\nUsage: (unchecked-subtract-int x y)\n```\n\n```\nReturns the difference of x and y, both int.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1219)  \n\n## underive\n\n```\nUsage: (underive tag parent)\n       (underive h tag parent)\n```\n\n```\nRemoves a parent/child relationship between parent and\ntag. h must be a hierarchy obtained from make-hierarchy, if not\nsupplied defaults to, and modifies, the global hierarchy.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5689)  \n\n## unreduced\n\n```\nUsage: (unreduced x)\n```\n\n```\nIf x is reduced?, returns (deref x), else returns x\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2872)  \n\n## unsigned-bit-shift-right\n\n```\nUsage: (unsigned-bit-shift-right x n)\n```\n\n```\nBitwise shift right, without sign-extension.\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1382)  \n\n## update\n\n```\nUsage: (update m k f)\n       (update m k f x)\n       (update m k f x y)\n       (update m k f x y z)\n       (update m k f x y z & more)\n```\n\n```\n'Updates' a value in an associative structure, where k is a\nkey and f is a function that will take the old value\nand any supplied args and return the new value, and returns a new\nstructure.  If the key does not exist, nil is passed as the old value.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6223)  \n\n## update-in\n\n```\nUsage: (update-in m ks f & args)\n```\n\n```\n'Updates' a value in a nested associative structure, where ks is a\nsequence of keys and f is a function that will take the old value\nand any supplied args and return the new value, and returns a new\nnested structure.  If any levels do not exist, hash-maps will be\ncreated.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6207)  \n\n## update-keys\n\n```\nUsage: (update-keys m f)\n```\n\n```\nm f => {(f k) v ...}\n\nGiven a map m and a function f of 1-argument, returns a new map whose\nkeys are the result of applying f to the keys of m, mapped to the\ncorresponding values of m.\nf must return a unique key for each key of m, else the behavior is undefined.\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8024)  \n\n## update-proxy\n\n```\nUsage: (update-proxy proxy mappings)\n```\n\n```\nTakes a proxy instance and a map of strings (which must\ncorrespond to methods of the proxy superclass/superinterfaces) to\nfns (which must take arguments matching the corresponding method,\nplus an additional (explicit) first arg corresponding to this, and\nupdates (via assoc) the proxy's fn map. nil can be passed instead of\na fn, in which case the corresponding method will revert to the\ndefault behavior. Note that this function can be used to update the\nbehavior of an existing instance without changing its identity.\nReturns the proxy.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L313)  \n\n## update-vals\n\n```\nUsage: (update-vals m f)\n```\n\n```\nm f => {k (f v) ...}\n\nGiven a map m and a function f of 1-argument, returns a new map where the keys of m\nare mapped to result of applying f to the corresponding values of m.\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8008)  \n\n## uri?\n\n```\nUsage: (uri? x)\n```\n\n```\nReturn true if x is a java.net.URI\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7959)  \n\n## use\n\n```\nUsage: (use & args)\n```\n\n```\nLike 'require, but also refers to each lib's namespace using\nclojure.core/refer. Use :use in the ns macro in preference to calling\nthis directly.\n\n'use accepts additional options in libspecs: :exclude, :only, :rename.\nThe arguments and semantics for :exclude, :only, and :rename are the same\nas those documented for clojure.core/refer.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6128)  \n\n## uuid?\n\n```\nUsage: (uuid? x)\n```\n\n```\nReturn true if x is a java.util.UUID\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6856)  \n\n## val\n\n```\nUsage: (val e)\n```\n\n```\nReturns the value in the map entry.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1589)  \n\n## vals\n\n```\nUsage: (vals map)\n```\n\n```\nReturns a sequence of the map's values, in the same order as (seq map).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1576)  \n\n## var\n\n```\nUsage: (var symbol)\n```\n\n```\nThe symbol must resolve to a var, and the Var object\nitself (not its value) is returned. The reader macro #'x\nexpands to (var x).\n\nPlease see https://clojure.org/reference/special_forms#var\n```\n\nAdded in Clojure version 1.0\n\n## var-get\n\n```\nUsage: (var-get x)\n```\n\n```\nGets the value in the var object\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4328)  \n\n## var-set\n\n```\nUsage: (var-set x val)\n```\n\n```\nSets the value in the var object to val. The var must be\nthread-locally bound.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4334)  \n\n## var?\n\n```\nUsage: (var? v)\n```\n\n```\nReturns true if v is of type clojure.lang.Var\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5000)  \n\n## vary-meta\n\n```\nUsage: (vary-meta obj f & args)\n```\n\n```\nReturns an object of the same type and value as obj, with\n(apply f (meta obj) args) as its metadata.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L677)  \n\n## vec\n\n```\nUsage: (vec coll)\n```\n\n```\nCreates a new vector containing the contents of coll. Java arrays\nwill be aliased and should not be modified.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L369)  \n\n## vector\n\n```\nUsage: (vector)\n       (vector a)\n       (vector a b)\n       (vector a b c)\n       (vector a b c d)\n       (vector a b c d e)\n       (vector a b c d e f)\n       (vector a b c d e f & args)\n```\n\n```\nCreates a new vector containing the args.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L355)  \n\n## vector-of\n\n```\nUsage: (vector-of t)\n       (vector-of t & elements)\n```\n\n```\nCreates a new vector of a single primitive type t, where t is one\nof :int :long :float :double :byte :short :char or :boolean. The\nresulting vector complies with the interface of vectors in general,\nbut stores the values unboxed internally.\n\nOptionally takes one or more elements to populate the vector.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L523)  \n\n## vector?\n\n```\nUsage: (vector? x)\n```\n\n```\nReturn true if x implements IPersistentVector\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L176)  \n\n## volatile!\n\n```\nUsage: (volatile! val)\n```\n\n```\nCreates and returns a Volatile with an initial value of val.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2542)  \n\n## volatile?\n\n```\nUsage: (volatile? x)\n```\n\n```\nReturns true if x is a volatile.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2565)  \n\n## vreset!\n\n```\nUsage: (vreset! vol newval)\n```\n\n```\nSets the value of volatile to newval without regard for the\ncurrent value. Returns newval.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2549)  \n\n## vswap!\n\n```\nUsage: (vswap! vol f & args)\n```\n\n```\nNon-atomically swaps the value of the volatile as if:\n(apply f current-value-of-vol args). Returns the value that\nwas swapped in.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2556)  \n\n## when\n\n```\nUsage: (when test & body)\n```\n\n```\nEvaluates test. If logical true, evaluates body in an implicit do.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L495)  \n\n## when-first\n\n```\nUsage: (when-first bindings & body)\n```\n\n```\nbindings => x xs\n\nRoughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4624)  \n\n## when-let\n\n```\nUsage: (when-let bindings & body)\n```\n\n```\nbindings => binding-form test\n\nWhen test is true, evaluates body with binding-form bound to the value of test\n```\n\n```\nSpecs:\n  Args: (cat\n         :bindings (and vector? :clojure.core.specs.alpha/binding)\n         :body (* any?))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1878)  \n\n## when-not\n\n```\nUsage: (when-not test & body)\n```\n\n```\nEvaluates test. If logical false, evaluates body in an implicit do.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L501)  \n\n## when-some\n\n```\nUsage: (when-some bindings & body)\n```\n\n```\nbindings => binding-form test\n\nWhen test is not nil, evaluates body with binding-form bound to the\nvalue of test\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1913)  \n\n## while\n\n```\nUsage: (while test & body)\n```\n\n```\nRepeatedly executes body while test expression is true. Presumes\nsome side-effect will cause test to become false/nil. Returns nil\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6368)  \n\n## with-bindings\n\n```\nUsage: (with-bindings binding-map & body)\n```\n\n```\nTakes a map of Var/value pairs. Installs for the given Vars the associated\nvalues as thread-local bindings. Then executes body. Pops the installed\nbindings after body was evaluated. Returns the value of body.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2003)  \n\n## with-bindings\\*\n\n```\nUsage: (with-bindings* binding-map f & args)\n```\n\n```\nTakes a map of Var/value pairs. Installs for the given Vars the associated\nvalues as thread-local bindings. Then calls f with the supplied arguments.\nPops the installed bindings after f returned. Returns whatever f returns.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1990)  \n\n## with-in-str\n\n```\nUsage: (with-in-str s & body)\n```\n\n```\nEvaluates body in a context in which *in* is bound to a fresh\nStringReader initialized with the string s.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4751)  \n\n## with-local-vars\n\n```\nUsage: (with-local-vars name-vals-vec & body)\n```\n\n```\nvarbinding=> symbol init-expr\n\nExecutes the exprs in a context in which the symbols are bound to\nvars with per-thread bindings to the init-exprs.  The symbols refer\nto the var objects themselves, and must be accessed with var-get and\nvar-set\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4341)  \n\n## with-meta\n\n```\nUsage: (with-meta obj m)\n```\n\n```\nReturns an object of the same type and value as obj, with\nmap m as its metadata.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L213)  \n\n## with-open\n\n```\nUsage: (with-open bindings & body)\n```\n\n```\nbindings => [name init ...]\n\nEvaluates body in a try expression with names bound to the values\nof the inits, and a finally clause that calls (.close name) on each\nname in reverse order.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3832)  \n\n## with-out-str\n\n```\nUsage: (with-out-str & body)\n```\n\n```\nEvaluates exprs in a context in which *out* is bound to a fresh\nStringWriter.  Returns the string created by any nested printing\ncalls.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4740)  \n\n## with-precision\n\n```\nUsage: (with-precision precision & exprs)\n```\n\n```\nSets the precision and rounding mode to be used for BigDecimal operations.\n\nUsage: (with-precision 10 (/ 1M 3))\nor:    (with-precision 10 :rounding HALF_DOWN (/ 1M 3))\n\nThe rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN,\nHALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5111)  \n\n## with-redefs\n\n```\nUsage: (with-redefs bindings & body)\n```\n\n```\nbinding => var-symbol temp-value-expr\n\nTemporarily redefines Vars while executing the body.  The\ntemp-value-exprs will be evaluated and each resulting value will\nreplace in parallel the root value of its Var.  After the body is\nexecuted, the root values of all the Vars will be set back to their\nold values.  These temporary changes will be visible in all threads.\nUseful for mocking out functions during testing.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7586)  \n\n## with-redefs-fn\n\n```\nUsage: (with-redefs-fn binding-map func)\n```\n\n```\nTemporarily redefines Vars during a call to func.  Each val of\nbinding-map will replace the root value of its key which must be\na Var.  After func is called with no args, the root values of all\nthe Vars will be set back to their old values.  These temporary\nchanges will be visible in all threads.  Useful for mocking out\nfunctions during testing.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7566)  \n\n## xml-seq\n\n```\nUsage: (xml-seq root)\n```\n\n```\nA tree seq on the xml elements as per xml/parse\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4983)  \n\n## zero?\n\n```\nUsage: (zero? num)\n```\n\n```\nReturns true if num is zero, else false\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L869)  \n\n## zipmap\n\n```\nUsage: (zipmap keys vals)\n```\n\n```\nReturns a map with the keys mapped to the corresponding vals.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6619)  \n\n## clojure.core.protocols\n\n## Protocols\n\n## CollReduce\n\n```\nProtocol for collection types that can implement reduce faster than\nfirst/next recursion. Called by clojure.core/reduce. Baseline\nimplementation defined in terms of Iterable.\n```\n\nKnown implementations: [clojure.core.reducers.Cat](clojure.core.reducers-api#clojure.core.reducers/Cat), clojure.lang.APersistentMap$KeySeq, clojure.lang.APersistentMap$ValSeq, clojure.lang.ASeq, clojure.lang.IReduceInit, clojure.lang.LazySeq, clojure.lang.PersistentVector, java.lang.Iterable, nil, Object  \n\n### coll-reduce\n\n```\nUsage: (coll-reduce coll f)\n       (coll-reduce coll f val)\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L13)  \n\n## Datafiable\n\nKnown implementations: clojure.lang.IRef, clojure.lang.Namespace, java.lang.Class, java.lang.Throwable, nil, Object  \n\n### datafy\n\n```\nUsage: (datafy o)\n```\n\n```\nreturn a representation of o as data (default identity)\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L182)  \n\n## IKVReduce\n\n```\nProtocol for concrete associative types that can reduce themselves\nvia a function of key and val faster than first/next recursion over map\nentries. Called by clojure.core/reduce-kv, and has same\nsemantics (just different arg order).\n```\n\nKnown implementations: clojure.lang.IKVReduce, nil, Object  \n\n### kv-reduce\n\n```\nUsage: (kv-reduce amap f init)\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L175)  \n\n## InternalReduce\n\n```\nProtocol for concrete seq types that can reduce themselves\nfaster than first/next recursion. Called by clojure.core/reduce.\n```\n\nKnown implementations: [clojure.core.VecSeq](clojure.core-api#clojure.core/VecSeq), clojure.lang.IChunkedSeq, clojure.lang.StringSeq, nil, Object  \n\n### internal-reduce\n\n```\nUsage: (internal-reduce seq f start)\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L19)  \n\n## Navigable\n\nKnown implementations: Object  \n\n### nav\n\n```\nUsage: (nav coll k v)\n```\n\n```\nreturn (possibly transformed) v in the context of coll and k (a key/index or nil),\ndefaults to returning v.\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L194)  \n\n## clojure.core.reducers\n\n```\nA library for reduction and parallel folding. Alpha and subject\nto change.\n```\n\n## Types\n\n## Cat\n\nFields: \\[cnt left right\\]  \nProtocols: [clojure.core.protocols/CollReduce](clojure.core-api#clojure.core.protocols/CollReduce), [CollFold](#clojure.core.reducers/CollFold)  \nInterfaces: clojure.lang.Counted, clojure.lang.Seqable  \n\n## Public Variables and Functions\n\n## -\\>Cat\n\n```\nUsage: (->Cat cnt left right)\n```\n\n```\nPositional factory function for class clojure.core.reducers.Cat.\n```\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L230)  \n\n## append!\n\n```\nUsage: (append! acc x)\n```\n\n```\n.adds x to acc and returns acc\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L275)  \n\n## cat\n\n```\nUsage: (cat)\n       (cat ctor)\n       (cat left right)\n```\n\n```\nA high-performance combining fn that yields the catenation of the\nreduced values. The result is reducible, foldable, seqable and\ncounted, providing the identity collections are reducible, seqable\nand counted. The single argument version will build a combining fn\nwith the supplied identity constructor. Tests for identity\nwith (zero? (count x)). See also foldcat.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L255)  \n\n## drop\n\n```\nUsage: (drop n)\n       (drop n coll)\n```\n\n```\nElides the first n values from the reduction of coll.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L215)  \n\n## filter\n\n```\nUsage: (filter pred)\n       (filter pred coll)\n```\n\n```\nRetains values in the reduction of coll for which (pred val)\nreturns logical true. Foldable.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L154)  \n\n## flatten\n\n```\nUsage: (flatten)\n       (flatten coll)\n```\n\n```\nTakes any nested combination of sequential things (lists, vectors,\netc.) and returns their contents as a single, flat foldable\ncollection.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L174)  \n\n## fold\n\n```\nUsage: (fold reducef coll)\n       (fold combinef reducef coll)\n       (fold n combinef reducef coll)\n```\n\n```\nReduces a collection using a (potentially parallel) reduce-combine\nstrategy. The collection is partitioned into groups of approximately\nn (default 512), each of which is reduced with reducef (with a seed\nvalue obtained by calling (combinef) with no arguments). The results\nof these reductions are then reduced with combinef (default\nreducef). combinef must be associative, and, when called with no\narguments, (combinef) must produce its identity element. These\noperations may be performed in parallel, but the results will\npreserve order.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L51)  \n\n## foldcat\n\n```\nUsage: (foldcat coll)\n```\n\n```\nEquivalent to (fold cat append! coll)\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L281)  \n\n## folder\n\n```\nUsage: (folder coll xf)\n```\n\n```\nGiven a foldable collection, and a transformation function xf,\nreturns a foldable collection, where any supplied reducing\nfn will be transformed by xf. xf is a function of reducing fn to\nreducing fn.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L81)  \n\n## map\n\n```\nUsage: (map f)\n       (map f coll)\n```\n\n```\nApplies f to every value in the reduction of coll. Foldable.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L128)  \n\n## mapcat\n\n```\nUsage: (mapcat f)\n       (mapcat f coll)\n```\n\n```\nApplies f to every value in the reduction of coll, concatenating the result\ncolls of (f val). Foldable.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L138)  \n\n## monoid\n\n```\nUsage: (monoid op ctor)\n```\n\n```\nBuilds a combining fn out of the supplied operator and identity\nconstructor. op must be associative and ctor called with no args\nmust return an identity value for it.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L287)  \n\n## reduce\n\n```\nUsage: (reduce f coll)\n       (reduce f init coll)\n```\n\n```\nLike core/reduce except:\nWhen init is not provided, (f) is used.\nMaps are reduced with reduce-kv\n```\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L38)  \n\n## reducer\n\n```\nUsage: (reducer coll xf)\n```\n\n```\nGiven a reducible collection, and a transformation function xf,\nreturns a reducible collection, where any supplied reducing\nfn will be transformed by xf. xf is a function of reducing fn to\nreducing fn.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L67)  \n\n## remove\n\n```\nUsage: (remove pred)\n       (remove pred coll)\n```\n\n```\nRemoves values in the reduction of coll for which (pred val)\nreturns logical true. Foldable.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L167)  \n\n## take\n\n```\nUsage: (take n)\n       (take n coll)\n```\n\n```\nEnds the reduction of coll after consuming n values.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L201)  \n\n## take-while\n\n```\nUsage: (take-while pred)\n       (take-while pred coll)\n```\n\n```\nEnds the reduction of coll when (pred val) returns logical false.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L189)  \n\n## clojure.core.server\n\n```\nSocket server support\n```\n\n## Public Variables and Functions\n\n## io-prepl\n\n```\nUsage: (io-prepl & {:keys [valf], :or {valf pr-str}})\n```\n\n```\nprepl bound to *in* and *out*, suitable for use with e.g. server/repl (socket-repl).\n:ret and :tap vals will be processed by valf, a fn of one argument\nor a symbol naming same (default pr-str)\n\nAlpha, subject to change.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L272)  \n\n## prepl\n\n```\nUsage: (prepl in-reader out-fn & {:keys [stdin]})\n```\n\n```\na REPL with structured output (for programs)\nreads forms to eval from in-reader (a LineNumberingPushbackReader)\nClosing the input or passing the form :repl/quit will cause it to return\n\nCalls out-fn with data, one of:\n{:tag :ret\n :val val ;;eval result, or Throwable->map data if exception thrown\n :ns ns-name-string\n :ms long ;;eval time in milliseconds\n :form string ;;iff successfully read\n :exception true ;;iff exception thrown\n}\n{:tag :out\n :val string} ;chars from during-eval *out*\n{:tag :err\n :val string} ;chars from during-eval *err*\n{:tag :tap\n :val val} ;values from tap>\n\nYou might get more than one :out or :err per eval, but exactly one :ret\ntap output can happen at any time (i.e. between evals)\nIf during eval an attempt is made to read *in* it will read from in-reader unless :stdin is supplied\n\nAlpha, subject to change.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L191)  \n\n## remote-prepl\n\n```\nUsage: (remote-prepl host port in-reader out-fn & {:keys [valf readf], :or {valf read-string, readf (fn* [p1__6786# p2__6787#] (read p1__6786# false p2__6787#))}})\n```\n\n```\nImplements a prepl on in-reader and out-fn by forwarding to a\nremote [io-]prepl over a socket.  Messages will be read by readf, a\nfn of a LineNumberingPushbackReader and EOF value or a symbol naming\nsame (default #(read %1 false %2)),\n:ret and :tap vals will be processed by valf, a fn of one argument\nor a symbol naming same (default read-string). If that function\nthrows, :val will be unprocessed.\n\nAlpha, subject to change.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L295)  \n\n## repl\n\n```\nUsage: (repl)\n```\n\n```\nREPL with predefined hooks for attachable socket server.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L180)  \n\n## repl-init\n\n```\nUsage: (repl-init)\n```\n\n```\nInitialize repl in user namespace and make standard repl requires.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L163)  \n\n## repl-read\n\n```\nUsage: (repl-read request-prompt request-exit)\n```\n\n```\nEnhanced :read hook for repl supporting :repl/quit.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L169)  \n\n## start-server\n\n```\nUsage: (start-server opts)\n```\n\n```\nStart a socket server given the specified opts:\n :address Host or address, string, defaults to loopback address\n :port Port, integer, required\n :name Name, required\n :accept Namespaced symbol of the accept function to invoke, required\n :args Vector of args to pass to accept function\n :bind-err Bind *err* to socket out stream?, defaults to true\n :server-daemon Is server thread a daemon?, defaults to true\n :client-daemon Are client threads daemons?, defaults to true\nReturns server socket.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L84)  \n\n## start-servers\n\n```\nUsage: (start-servers system-props)\n```\n\n```\nStart all servers specified in the system properties.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L157)  \n\n## stop-server\n\n```\nUsage: (stop-server)\n       (stop-server name)\n```\n\n```\nStop server with name or use the server-name from *session* if none supplied.\nReturns true if server stopped successfully, nil if not found, or throws if\nthere is an error closing the socket.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L125)  \n\n## stop-servers\n\n```\nUsage: (stop-servers)\n```\n\n```\nStop all servers ignores all errors, and returns nil.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L139)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.core-api.html](https://clojure.github.io/clojure/clojure.core-api.html)"
- name: '*'
  id: clojure.core-api#clojure.core/*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*

    ```
    Usage: (*)
           (* x)
           (* x y)
           (* x y & more)
    ```

    ```
    Returns the product of nums. (*) returns 1. Does not auto-promote
    longs, will throw on overflow. See also: *'
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1010)
- name: '*'''
  id: clojure.core-api#clojure.core/*'
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*'

    ```
    Usage: (*')
           (*' x)
           (*' x y)
           (*' x y & more)
    ```

    ```
    Returns the product of nums. (*') returns 1. Supports arbitrary precision.
    See also: *
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L998)
- name: '*1'
  id: clojure.core-api#clojure.core/*1
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*1

    ```
    bound in a repl thread to the most recent value printed
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6314)
- name: '*2'
  id: clojure.core-api#clojure.core/*2
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*2

    ```
    bound in a repl thread to the second most recent value printed
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6319)
- name: '*3'
  id: clojure.core-api#clojure.core/*3
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*3

    ```
    bound in a repl thread to the third most recent value printed
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6324)
- name: '*agent*'
  id: clojure.core-api#clojure.core/*agent*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*agent\*

    ```
    The agent currently running an action on this thread, else nil
    ```

    Added in Clojure version 1.0
- name: '*clojure-version*'
  id: clojure.core-api#clojure.core/*clojure-version*
  summary: null
  belongs_to: clojure.core
  description: "## \\*clojure-version\\*\n\n```\nThe version info for Clojure core, as a map containing :major :minor \n:incremental and :qualifier keys. Feature releases may increment \n:minor and/or :major, bugfix releases will increment :incremental. \nPossible values of :qualifier include \"GA\", \"SNAPSHOT\", \"RC-x\" \"BETA-x\"\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7137)"
- name: '*command-line-args*'
  id: clojure.core-api#clojure.core/*command-line-args*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*command-line-args\*

    ```
    A sequence of the supplied command line arguments, or nil if
    none were supplied
    ```

    Added in Clojure version 1.0
- name: '*compile-files*'
  id: clojure.core-api#clojure.core/*compile-files*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*compile-files\*

    ```
    Set to true when compiling files, false otherwise.
    ```

    Added in Clojure version 1.0
- name: '*compile-path*'
  id: clojure.core-api#clojure.core/*compile-path*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*compile-path\*

    ```
    Specifies the directory where 'compile' will write out .class
    files. This directory must be in the classpath for 'compile' to
    work.

    Defaults to "classes"
    ```

    Added in Clojure version 1.0
- name: '*compiler-options*'
  id: clojure.core-api#clojure.core/*compiler-options*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*compiler-options\*

    ```
    A map of keys to options.
    Note, when binding dynamically make sure to merge with previous value.
    Supported options:
    :elide-meta - a collection of metadata keys to elide during compilation.
    :disable-locals-clearing - set to true to disable clearing, useful for using a debugger
    :direct-linking - set to true to use direct static invocation of functions, rather than vars
      Note that call sites compiled with direct linking will not be affected by var redefinition.
      Use ^:redef (or ^:dynamic) on a var to prevent direct linking and allow redefinition.
    See https://clojure.org/reference/compilation for more information.
    ```

    Added in Clojure version 1.4
- name: '*data-readers*'
  id: clojure.core-api#clojure.core/*data-readers*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*data-readers\*

    ```
    Map from reader tag symbols to data reader Vars.

    When Clojure starts, it searches for files named 'data_readers.clj'
    and 'data_readers.cljc' at the root of the classpath. Each such file
    must contain a literal map of symbols, like this:

        {foo/bar my.project.foo/bar
         foo/baz my.project/baz}

    The first symbol in each pair is a tag that will be recognized by
    the Clojure reader. The second symbol in the pair is the
    fully-qualified name of a Var which will be invoked by the reader to
    parse the form following the tag. For example, given the
    data_readers.clj file above, the Clojure reader would parse this
    form:

        #foo/bar [1 2 3]

    by invoking the Var #'my.project.foo/bar on the vector [1 2 3]. The
    data reader function is invoked on the form AFTER it has been read
    as a normal Clojure data structure by the reader.

    Reader tags without namespace qualifiers are reserved for
    Clojure. Default reader tags are defined in
    clojure.core/default-data-readers but may be overridden in
    data_readers.clj, data_readers.cljc, or by rebinding this Var.
    ```

    Added in Clojure version 1.4

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7872)
- name: '*default-data-reader-fn*'
  id: clojure.core-api#clojure.core/*default-data-reader-fn*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*default-data-reader-fn\*

    ```
    When no data reader is found for a tag and *default-data-reader-fn*
    is non-nil, it will be called with two arguments,
    the tag and the value.  If *default-data-reader-fn* is nil (the
    default), an exception will be thrown for the unknown tag.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7901)
- name: '*e'
  id: clojure.core-api#clojure.core/*e
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*e

    ```
    bound in a repl thread to the most recent exception caught by the repl
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6329)
- name: '*err*'
  id: clojure.core-api#clojure.core/*err*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*err\*

    ```
    A java.io.Writer object representing standard error for print operations.

    Defaults to System/err, wrapped in a PrintWriter
    ```

    Added in Clojure version 1.0
- name: '*file*'
  id: clojure.core-api#clojure.core/*file*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*file\*

    ```
    The path of the file being evaluated, as a String.

    When there is no file, e.g. in the REPL, the value is not defined.
    ```

    Added in Clojure version 1.0
- name: '*flush-on-newline*'
  id: clojure.core-api#clojure.core/*flush-on-newline*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*flush-on-newline\*

    ```
    When set to true, output will be flushed whenever a newline is printed.

    Defaults to true.
    ```

    Added in Clojure version 1.0
- name: '*in*'
  id: clojure.core-api#clojure.core/*in*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*in\*

    ```
    A java.io.Reader object representing standard input for read operations.

    Defaults to System/in, wrapped in a LineNumberingPushbackReader
    ```

    Added in Clojure version 1.0
- name: '*load-tests*'
  id: clojure.test-api#clojure.test/*load-tests*
  summary: null
  belongs_to: clojure.test
  description: |-
    ## \*load-tests\*

    ```
    True by default.  If set to false, no test functions will
    be created by deftest, set-test, or with-test.  Use this to omit
    tests when compiling or loading production code.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L245)
- name: '*ns*'
  id: clojure.core-api#clojure.core/*ns*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*ns\*

    ```
    A clojure.lang.Namespace object representing the current namespace.
    ```

    Added in Clojure version 1.0
- name: '*out*'
  id: clojure.core-api#clojure.core/*out*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*out\*

    ```
    A java.io.Writer object representing standard output for print operations.

    Defaults to System/out, wrapped in an OutputStreamWriter
    ```

    Added in Clojure version 1.0
- name: '*print-base*'
  id: clojure.pprint-api#clojure.pprint/*print-base*
  summary: null
  belongs_to: clojure.pprint
  description: |-
    ## \*print-base\*

    ```
    The base to use for printing integers and rationals.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L87)
- name: '*print-dup*'
  id: clojure.core-api#clojure.core/*print-dup*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*print-dup\*

    ```
    When set to logical true, objects will be printed in a way that preserves
    their type when read in later.

    Defaults to false.
    ```

    Added in Clojure version 1.0
- name: '*print-length*'
  id: clojure.core-api#clojure.core/*print-length*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*print-length\*

    ```
    *print-length* controls how many items of each collection the
    printer will print. If it is bound to logical false, there is no
    limit. Otherwise, it must be bound to an integer indicating the maximum
    number of items of each collection to print. If a collection contains
    more items, the printer will print items up to the limit followed by
    '...' to represent the remaining items. The root binding is nil
    indicating no limit.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L16)
- name: '*print-level*'
  id: clojure.core-api#clojure.core/*print-level*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*print-level\*

    ```
    *print-level* controls how many levels deep the printer will
    print nested objects. If it is bound to logical false, there is no
    limit. Otherwise, it must be bound to an integer indicating the maximum
    level to print. Each argument to print is at level 0; if an argument is a
    collection, its items are at level 1; and so on. If an object is a
    collection and is at a level greater than or equal to the value bound to
    *print-level*, the printer prints '#' to represent it. The root binding
    is nil indicating no limit.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L27)
- name: '*print-meta*'
  id: clojure.core-api#clojure.core/*print-meta*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*print-meta\*

    ```
    If set to logical true, when printing an object, its metadata will also
    be printed in a form that can be read back by the reader.

    Defaults to false.
    ```

    Added in Clojure version 1.0
- name: '*print-miser-width*'
  id: clojure.pprint-api#clojure.pprint/*print-miser-width*
  summary: null
  belongs_to: clojure.pprint
  description: "## \\*print-miser-width\\*\n\n```\nThe column at which to enter miser style. Depending on the dispatch table, \nmiser style add newlines in more places to try to keep lines short allowing for further \nlevels of nesting.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L47)"
- name: '*print-namespace-maps*'
  id: clojure.core-api#clojure.core/*print-namespace-maps*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*print-namespace-maps\*

    ```
    *print-namespace-maps* controls whether the printer will print
    namespace map literal syntax. It defaults to false, but the REPL binds
    to true.
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L41)
- name: '*print-pprint-dispatch*'
  id: clojure.pprint-api#clojure.pprint/*print-pprint-dispatch*
  summary: null
  belongs_to: clojure.pprint
  description: |-
    ## \*print-pprint-dispatch\*

    ```
    No usage documentation available
    ```

    ```
    The pretty print dispatch function. Use with-pprint-dispatch or set-pprint-dispatch
    to modify.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L34)
- name: '*print-pretty*'
  id: clojure.pprint-api#clojure.pprint/*print-pretty*
  summary: null
  belongs_to: clojure.pprint
  description: |-
    ## \*print-pretty\*

    ```
    Bind to true if you want write to use pretty printing
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L30)
- name: '*print-radix*'
  id: clojure.pprint-api#clojure.pprint/*print-radix*
  summary: null
  belongs_to: clojure.pprint
  description: "## \\*print-radix\\*\n\n```\nPrint a radix specifier in front of integers and rationals. If *print-base* is 2, 8, \nor 16, then the radix specifier used is #b, #o, or #x, respectively. Otherwise the \nradix specifier is in the form #XXr where XX is the decimal value of *print-base* \n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L80)"
- name: '*print-readably*'
  id: clojure.core-api#clojure.core/*print-readably*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*print-readably\*

    ```
    When set to logical false, strings and characters will be printed with
    non-alphanumeric characters converted to the appropriate escape sequences.

    Defaults to true
    ```

    Added in Clojure version 1.0
- name: '*print-right-margin*'
  id: clojure.pprint-api#clojure.pprint/*print-right-margin*
  summary: null
  belongs_to: clojure.pprint
  description: "## \\*print-right-margin\\*\n\n```\nPretty printing will try to avoid anything going beyond this column.\nSet it to nil to have pprint let the line be arbitrarily long. This will ignore all \nnon-mandatory newlines.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L40)"
- name: '*print-suppress-namespaces*'
  id: clojure.pprint-api#clojure.pprint/*print-suppress-namespaces*
  summary: null
  belongs_to: clojure.pprint
  description: "## \\*print-suppress-namespaces\\*\n\n```\nDon't print namespaces with symbols. This is particularly useful when \npretty printing the results of macro expansions\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L72)"
- name: '*read-eval*'
  id: clojure.core-api#clojure.core/*read-eval*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*read-eval\*

    ```
    Defaults to true (or value specified by system property, see below)
    ***This setting implies that the full power of the reader is in play,
    including syntax that can cause code to execute. It should never be
    used with untrusted sources. See also: clojure.edn/read.***

    When set to logical false in the thread-local binding,
    the eval reader (#=) and record/type literal syntax are disabled in read/load.
    Example (will fail): (binding [*read-eval* false] (read-string "#=(* 2 21)"))

    The default binding can be controlled by the system property
    'clojure.read.eval' System properties can be set on the command line
    like this:

    java -Dclojure.read.eval=false ...

    The system property can also be set to 'unknown' via
    -Dclojure.read.eval=unknown, in which case the default binding
    is :unknown and all reads will fail in contexts where *read-eval*
    has not been explicitly bound to either true or false. This setting
    can be a useful diagnostic tool to ensure that all of your reads
    occur in considered contexts. You can also accomplish this in a
    particular scope by binding *read-eval* to :unknown
    ```

    Added in Clojure version 1.0
- name: '*stack-trace-depth*'
  id: clojure.test-api#clojure.test/*stack-trace-depth*
  summary: null
  belongs_to: clojure.test
  description: "## \\*stack-trace-depth\\*\n\n```\nThe maximum depth of stack traces to print when an Exception\nis thrown during a test.  Defaults to nil, which means print the \ncomplete stack trace.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L252)"
- name: '*unchecked-math*'
  id: clojure.core-api#clojure.core/*unchecked-math*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*unchecked-math\*

    ```
    While bound to true, compilations of +, -, *, inc, dec and the
    coercions will be done without overflow checks. While bound
    to :warn-on-boxed, same behavior as true, and a warning is emitted
    when compilation uses boxed math. Default: false.
    ```

    Added in Clojure version 1.3
- name: '*warn-on-reflection*'
  id: clojure.core-api#clojure.core/*warn-on-reflection*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \*warn-on-reflection\*

    ```
    When set to true, the compiler will emit warnings when reflection is
    needed to resolve Java method calls or field accesses.

    Defaults to false.
    ```

    Added in Clojure version 1.0
- name: +
  id: clojure.core-api#clojure.core/+
  summary: null
  belongs_to: clojure.core
  description: |-
    ## +

    ```
    Usage: (+)
           (+ x)
           (+ x y)
           (+ x y & more)
    ```

    ```
    Returns the sum of nums. (+) returns 0. Does not auto-promote
    longs, will throw on overflow. See also: +'
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L986)
- name: +'
  id: clojure.core-api#clojure.core/+'
  summary: null
  belongs_to: clojure.core
  description: |-
    ## +'

    ```
    Usage: (+')
           (+' x)
           (+' x y)
           (+' x y & more)
    ```

    ```
    Returns the sum of nums. (+') returns 0. Supports arbitrary precision.
    See also: +
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L974)
- name: '-'
  id: clojure.core-api#clojure.core/-
  summary: null
  belongs_to: clojure.core
  description: |-
    ## -

    ```
    Usage: (- x)
           (- x y)
           (- x y & more)
    ```

    ```
    If no ys are supplied, returns the negation of x, else subtracts
    the ys from x and returns the result. Does not auto-promote
    longs, will throw on overflow. See also: -'
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1045)
- name: -'
  id: clojure.core-api#clojure.core/-'
  summary: null
  belongs_to: clojure.core
  description: |-
    ## -'

    ```
    Usage: (-' x)
           (-' x y)
           (-' x y & more)
    ```

    ```
    If no ys are supplied, returns the negation of x, else subtracts
    the ys from x and returns the result. Supports arbitrary precision.
    See also: -
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1033)
- name: ->
  id: clojure.core-api#clojure.core/->
  summary: null
  belongs_to: clojure.core
  description: |-
    ## -\>

    ```
    Usage: (-> x & forms)
    ```

    ```
    Threads the expr through the forms. Inserts x as the
    second item in the first form, making a list of it if it is not a
    list already. If there are more forms, inserts the first form as the
    second item in second form, etc.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1694)
- name: ->>
  id: clojure.core-api#clojure.core/->>
  summary: null
  belongs_to: clojure.core
  description: |-
    ## -\>\>

    ```
    Usage: (->> x & forms)
    ```

    ```
    Threads the expr through the forms. Inserts x as the
    last item in the first form, making a list of it if it is not a
    list already. If there are more forms, inserts the first form as the
    last item in second form, etc.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1710)
- name: ->ArrayChunk
  id: clojure.core-api#clojure.core/->ArrayChunk
  summary: null
  belongs_to: clojure.core
  description: |-
    ## -\>ArrayChunk

    ```
    Usage: (->ArrayChunk am arr off end)
    ```

    ```
    Positional factory function for class clojure.core.ArrayChunk.
    ```

    [Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L37)
- name: ->AsmReflector
  id: clojure.reflect-api#clojure.reflect/->AsmReflector
  summary: null
  belongs_to: clojure.reflect
  description: |-
    ## -\>AsmReflector

    ```
    Usage: (->AsmReflector class-resolver)
    ```

    ```
    Positional factory function for class clojure.reflect.AsmReflector.
    ```

    [Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L208)
- name: ->Cat
  id: clojure.core-api#clojure.core.reducers/->Cat
  summary: null
  belongs_to: clojure.core
  description: |-
    ## -\>Cat

    ```
    Usage: (->Cat cnt left right)
    ```

    ```
    Positional factory function for class clojure.core.reducers.Cat.
    ```

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L230)
- name: ->Constructor
  id: clojure.reflect-api#clojure.reflect/->Constructor
  summary: null
  belongs_to: clojure.reflect
  description: |-
    ## -\>Constructor

    ```
    Usage: (->Constructor name declaring-class parameter-types exception-types flags)
    ```

    ```
    Positional factory function for class clojure.reflect.Constructor.
    ```

    [Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L115)
- name: ->Eduction
  id: clojure.core-api#clojure.core/->Eduction
  summary: null
  belongs_to: clojure.core
  description: |-
    ## -\>Eduction

    ```
    Usage: (->Eduction xform coll)
    ```

    ```
    Positional factory function for class clojure.core.Eduction.
    ```

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7750)
- name: ->Field
  id: clojure.reflect-api#clojure.reflect/->Field
  summary: null
  belongs_to: clojure.reflect
  description: |-
    ## -\>Field

    ```
    Usage: (->Field name type declaring-class flags)
    ```

    ```
    Positional factory function for class clojure.reflect.Field.
    ```

    [Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L154)
- name: ->JavaReflector
  id: clojure.reflect-api#clojure.reflect/->JavaReflector
  summary: null
  belongs_to: clojure.reflect
  description: |-
    ## -\>JavaReflector

    ```
    Usage: (->JavaReflector classloader)
    ```

    ```
    Positional factory function for class clojure.reflect.JavaReflector.
    ```

    [Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L178)
- name: ->Method
  id: clojure.reflect-api#clojure.reflect/->Method
  summary: null
  belongs_to: clojure.reflect
  description: |-
    ## -\>Method

    ```
    Usage: (->Method name return-type declaring-class parameter-types exception-types flags)
    ```

    ```
    Positional factory function for class clojure.reflect.Method.
    ```

    [Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L134)
- name: ->Vec
  id: clojure.core-api#clojure.core/->Vec
  summary: null
  belongs_to: clojure.core
  description: |-
    ## -\>Vec

    ```
    Usage: (->Vec am cnt shift root tail _meta)
    ```

    ```
    Positional factory function for class clojure.core.Vec.
    ```

    [Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L170)
- name: ->VecNode
  id: clojure.core-api#clojure.core/->VecNode
  summary: null
  belongs_to: clojure.core
  description: |-
    ## -\>VecNode

    ```
    Usage: (->VecNode edit arr)
    ```

    ```
    Positional factory function for class clojure.core.VecNode.
    ```

    [Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L18)
- name: ->VecSeq
  id: clojure.core-api#clojure.core/->VecSeq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## -\>VecSeq

    ```
    Usage: (->VecSeq am vec anode i offset _meta)
    ```

    ```
    Positional factory function for class clojure.core.VecSeq.
    ```

    [Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L59)
- name: .
  id: clojure.core-api#clojure.core/.
  summary: null
  belongs_to: clojure.core
  description: |-
    ## .

    ```
    Usage: (.instanceMember instance args*)
           (.instanceMember Classname args*)
           (Classname/staticMethod args*)
           Classname/staticField
    ```

    ```
    The instance member form works for both fields and methods.
    They all expand into calls to the dot operator at macroexpansion time.

    Please see https://clojure.org/java_interop#dot
    ```

    Added in Clojure version 1.0
- name: ..
  id: clojure.core-api#clojure.core/..
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ..

    ```
    Usage: (.. x form)
           (.. x form & more)
    ```

    ```
    form => fieldName-symbol or (instanceMethodName-symbol args*)

    Expands into a member access (.) of the first member on the first
    argument, followed by the next member on the result, etc. For
    instance:

    (.. System (getProperties) (get "os.name"))

    expands to:

    (. (. System (getProperties)) (get "os.name"))

    but is easier to write, read, and understand.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1676)
- name: /
  id: clojure.core-api#clojure.core//
  summary: null
  belongs_to: clojure.core
  description: |-
    ## /

    ```
    Usage: (/ x)
           (/ x y)
           (/ x y & more)
    ```

    ```
    If no denominators are supplied, returns 1/numerator,
    else returns numerator divided by all of the denominators.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1022)
- name: <
  id: clojure.core-api#clojure.core/<
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \<

    ```
    Usage: (< x)
           (< x y)
           (< x y & more)
    ```

    ```
    Returns non-nil if nums are in monotonically increasing order,
    otherwise false.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L902)
- name: <=
  id: clojure.core-api#clojure.core/<=
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \<=

    ```
    Usage: (<= x)
           (<= x y)
           (<= x y & more)
    ```

    ```
    Returns non-nil if nums are in monotonically non-decreasing order,
    otherwise false.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1057)
- name: =
  id: clojure.core-api#clojure.core/=
  summary: null
  belongs_to: clojure.core
  description: |-
    ## =

    ```
    Usage: (= x)
           (= x y)
           (= x y & more)
    ```

    ```
    Equality. Returns true if x equals y, false if not. Same as
    Java x.equals(y) except it also works for nil, and compares
    numbers and collections in a type-independent manner.  Clojure's immutable data
    structures define equals() (and thus =) as a value, not an identity,
    comparison.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L785)
- name: ==
  id: clojure.core-api#clojure.core/==
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ==

    ```
    Usage: (== x)
           (== x y)
           (== x y & more)
    ```

    ```
    Returns non-nil if nums all have the equivalent
    value (type-independent), otherwise false
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1102)
- name: '>'
  id: clojure.core-api#clojure.core/>
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \>

    ```
    Usage: (> x)
           (> x y)
           (> x y & more)
    ```

    ```
    Returns non-nil if nums are in monotonically decreasing order,
    otherwise false.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1072)
- name: '>='
  id: clojure.core-api#clojure.core/>=
  summary: null
  belongs_to: clojure.core
  description: |-
    ## \>=

    ```
    Usage: (>= x)
           (>= x y)
           (>= x y & more)
    ```

    ```
    Returns non-nil if nums are in monotonically non-increasing order,
    otherwise false.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1087)
- name: abs
  id: clojure.core-api#clojure.core/abs
  summary: null
  belongs_to: clojure.core
  description: |-
    ## abs

    ```
    Usage: (abs a)
    ```

    ```
    Returns the absolute value of a.
    If a is Long/MIN_VALUE => Long/MIN_VALUE
    If a is a double and zero => +0.0
    If a is a double and ##Inf or ##-Inf => ##Inf
    If a is a double and ##NaN => ##NaN
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1137)
- name: accessor
  id: clojure.core-api#clojure.core/accessor
  summary: null
  belongs_to: clojure.core
  description: |-
    ## accessor

    ```
    Usage: (accessor s key)
    ```

    ```
    Returns a fn that, given an instance of a structmap with the basis,
    returns the value at the key.  The key must be in the basis. The
    returned function should be (slightly) more efficient than using
    get, but such use of accessors should be limited to known
    performance-critical areas.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4072)
- name: aclone
  id: clojure.core-api#clojure.core/aclone
  summary: null
  belongs_to: clojure.core
  description: |-
    ## aclone

    ```
    Usage: (aclone array)
    ```

    ```
    Returns a clone of the Java array. Works on arrays of known
    types.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3906)
- name: acos
  id: clojure.math-api#clojure.math/acos
  summary: null
  belongs_to: clojure.math
  description: |-
    ## acos

    ```
    Usage: (acos a)
    ```

    ```
    Returns the arc cosine of a, in the range 0.0 to pi.
    If a is ##NaN or |a|>1 => ##NaN
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#acos-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L85)
- name: add-classpath
  id: clojure.core-api#clojure.core/add-classpath
  summary: null
  belongs_to: clojure.core
  description: "## add-classpath\n\n```\nUsage: (add-classpath url)\n```\n\n```\nDEPRECATED \n\nAdds the url (String or URL object) to the classpath per\nURLClassLoader.addURL\n```\n\nAdded in Clojure version 1.0\n\nDeprecated since Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5177)"
- name: add-exact
  id: clojure.math-api#clojure.math/add-exact
  summary: null
  belongs_to: clojure.math
  description: |-
    ## add-exact

    ```
    Usage: (add-exact x y)
    ```

    ```
    Returns the sum of x and y, throws ArithmeticException on overflow.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#addExact-long-long-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L277)
- name: add-local-javadoc
  id: clojure.java.javadoc-api#clojure.java.javadoc/add-local-javadoc
  summary: null
  belongs_to: clojure.java.javadoc
  description: |-
    ## add-local-javadoc

    ```
    Usage: (add-local-javadoc path)
    ```

    ```
    Adds to the list of local Javadoc paths.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/3b6c31bc503afe8f25d01d6d7d05ebc960095abd/src/clj/clojure/java/javadoc.clj#L47)
- name: add-remote-javadoc
  id: clojure.java.javadoc-api#clojure.java.javadoc/add-remote-javadoc
  summary: null
  belongs_to: clojure.java.javadoc
  description: |-
    ## add-remote-javadoc

    ```
    Usage: (add-remote-javadoc package-prefix url)
    ```

    ```
    Adds to the list of remote Javadoc URLs.  package-prefix is the
    beginning of the package name that has docs at this URL.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/3b6c31bc503afe8f25d01d6d7d05ebc960095abd/src/clj/clojure/java/javadoc.clj#L53)
- name: add-tap
  id: clojure.core-api#clojure.core/add-tap
  summary: null
  belongs_to: clojure.core
  description: |-
    ## add-tap

    ```
    Usage: (add-tap f)
    ```

    ```
    adds f, a fn of one argument, to the tap set. This function will be called with anything sent via tap>.
    This function may (briefly) block (e.g. for streams), and will never impede calls to tap>,
    but blocking indefinitely may cause tap values to be dropped.
    Remember f in order to remove-tap
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7982)
- name: add-watch
  id: clojure.core-api#clojure.core/add-watch
  summary: null
  belongs_to: clojure.core
  description: |-
    ## add-watch

    ```
    Usage: (add-watch reference key fn)
    ```

    ```
    Adds a watch function to an agent/atom/var/ref reference. The watch
    fn must be a fn of 4 args: a key, the reference, its old-state, its
    new-state. Whenever the reference's state might have been changed,
    any registered watches will have their functions called. The watch fn
    will be called synchronously, on the agent's thread if an agent,
    before any pending sends if agent or ref. Note that an atom's or
    ref's state may have changed again prior to the fn call, so use
    old/new-state rather than derefing the reference. Note also that watch
    fns may be called from multiple threads simultaneously. Var watchers
    are triggered only by root binding changes, not thread-local
    set!s. Keys must be unique per reference, and can be used to remove
    the watch with remove-watch, but are otherwise considered opaque by
    the watch mechanism.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2161)
- name: agent
  id: clojure.core-api#clojure.core/agent
  summary: null
  belongs_to: clojure.core
  description: |-
    ## agent

    ```
    Usage: (agent state & options)
    ```

    ```
    Creates and returns an agent with an initial value of state and
    zero or more options (in any order):

    :meta metadata-map

    :validator validate-fn

    :error-handler handler-fn

    :error-mode mode-keyword

    If metadata-map is supplied, it will become the metadata on the
    agent. validate-fn must be nil or a side-effect-free fn of one
    argument, which will be passed the intended new state on any state
    change. If the new state is unacceptable, the validate-fn should
    return false or throw an exception.  handler-fn is called if an
    action throws an exception or if validate-fn rejects a new state --
    see set-error-handler! for details.  The mode-keyword may be either
    :continue (the default if an error-handler is given) or :fail (the
    default if no error-handler is given) -- see set-error-mode! for
    details.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2071)
- name: agent-error
  id: clojure.core-api#clojure.core/agent-error
  summary: null
  belongs_to: clojure.core
  description: |-
    ## agent-error

    ```
    Usage: (agent-error a)
    ```

    ```
    Returns the exception thrown during an asynchronous action of the
    agent if the agent is failed.  Returns nil if the agent is not
    failed.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2186)
- name: agent-errors
  id: clojure.core-api#clojure.core/agent-errors
  summary: null
  belongs_to: clojure.core
  description: |-
    ## agent-errors

    ```
    Usage: (agent-errors a)
    ```

    ```
    DEPRECATED: Use 'agent-error' instead.
    Returns a sequence of the exceptions thrown during asynchronous
    actions of the agent.
    ```

    Added in Clojure version 1.0

    Deprecated since Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2253)
- name: aget
  id: clojure.core-api#clojure.core/aget
  summary: null
  belongs_to: clojure.core
  description: |-
    ## aget

    ```
    Usage: (aget array idx)
           (aget array idx & idxs)
    ```

    ```
    Returns the value at the index/indices. Works on Java arrays of all
    types.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3913)
- name: alength
  id: clojure.core-api#clojure.core/alength
  summary: null
  belongs_to: clojure.core
  description: |-
    ## alength

    ```
    Usage: (alength array)
    ```

    ```
    Returns the length of the Java array. Works on arrays of all
    types.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3899)
- name: alias
  id: clojure.core-api#clojure.core/alias
  summary: null
  belongs_to: clojure.core
  description: |-
    ## alias

    ```
    Usage: (alias alias namespace-sym)
    ```

    ```
    Add an alias in the current namespace to another
    namespace. Arguments are two symbols: the alias to be used, and
    the symbolic name of the target namespace. Use :as in the ns macro in preference
    to calling this directly.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4265)
- name: all-ns
  id: clojure.core-api#clojure.core/all-ns
  summary: null
  belongs_to: clojure.core
  description: |-
    ## all-ns

    ```
    Usage: (all-ns)
    ```

    ```
    Returns a sequence of all namespaces.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4148)
- name: alter
  id: clojure.core-api#clojure.core/alter
  summary: null
  belongs_to: clojure.core
  description: |-
    ## alter

    ```
    Usage: (alter ref fun & args)
    ```

    ```
    Must be called in a transaction. Sets the in-transaction-value of
    ref to:

    (apply fun in-transaction-value-of-ref args)

    and returns the in-transaction-value of ref.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2460)
- name: alter-meta!
  id: clojure.core-api#clojure.core/alter-meta!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## alter-meta!

    ```
    Usage: (alter-meta! iref f & args)
    ```

    ```
    Atomically sets the metadata for a namespace/var/ref/agent/atom to be:

    (apply f its-current-meta args)

    f must be free of side-effects
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2423)
- name: alter-var-root
  id: clojure.core-api#clojure.core/alter-var-root
  summary: null
  belongs_to: clojure.core
  description: |-
    ## alter-var-root

    ```
    Usage: (alter-var-root v f & args)
    ```

    ```
    Atomically alters the root binding of var v by applying f to its
    current value plus any args
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5530)
- name: amap
  id: clojure.core-api#clojure.core/amap
  summary: null
  belongs_to: clojure.core
  description: "## amap\n\n```\nUsage: (amap a idx ret expr)\n```\n\n```\nMaps an expression across an array a, using an index named idx, and\nreturn value named ret, initialized to a clone of a, then setting \neach element of ret to the evaluation of expr, returning the new \narray ret.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5274)"
- name: ancestors
  id: clojure.core-api#clojure.core/ancestors
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ancestors

    ```
    Usage: (ancestors tag)
           (ancestors h tag)
    ```

    ```
    Returns the immediate and indirect parents of tag, either via a Java type
    inheritance relationship or a relationship established via derive. h
    must be a hierarchy obtained from make-hierarchy, if not supplied
    defaults to the global hierarchy
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5623)
- name: and
  id: clojure.core-api#clojure.core/and
  summary: null
  belongs_to: clojure.core
  description: |-
    ## and

    ```
    Usage: (and)
           (and x)
           (and x & next)
    ```

    ```
    Evaluates exprs one at a time, from left to right. If a form
    returns logical false (nil or false), and returns that value and
    doesn't evaluate any of the other expressions, otherwise it returns
    the value of the last expr. (and) returns true.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L844)
- name: any?
  id: clojure.core-api#clojure.core/any?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## any?

    ```
    Usage: (any? x)
    ```

    ```
    Returns true given any argument.
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L540)
- name: append!
  id: clojure.core-api#clojure.core.reducers/append!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## append!

    ```
    Usage: (append! acc x)
    ```

    ```
    .adds x to acc and returns acc
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L275)
- name: append-child
  id: clojure.zip-api#clojure.zip/append-child
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## append-child

    ```
    Usage: (append-child loc item)
    ```

    ```
    Inserts the item as the rightmost child of the node at this loc,
    without moving
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L223)
- name: apply
  id: clojure.core-api#clojure.core/apply
  summary: null
  belongs_to: clojure.core
  description: |-
    ## apply

    ```
    Usage: (apply f args)
           (apply f x args)
           (apply f x y args)
           (apply f x y z args)
           (apply f a b c d & args)
    ```

    ```
    Applies fn f to the argument list formed by prepending intervening arguments to args.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L662)
- name: apply-template
  id: clojure.template-api#clojure.template/apply-template
  summary: null
  belongs_to: clojure.template
  description: |-
    ## apply-template

    ```
    Usage: (apply-template argv expr values)
    ```

    ```
    For use in macros.  argv is an argument list, as in defn.  expr is
    a quoted expression using the symbols in argv.  values is a sequence
    of values to be used for the arguments.

    apply-template will recursively replace argument symbols in expr
    with their corresponding values, returning a modified expr.

    Example: (apply-template '[x] '(+ x x) '[2])
             ;=> (+ 2 2)
    ```

    [Source](https://github.com/clojure/clojure/blob/c4c0740a0696bc95b2184c0fef55ed7c3bb097f6/src/clj/clojure/template.clj#L30)
- name: apropos
  id: clojure.repl-api#clojure.repl/apropos
  summary: null
  belongs_to: clojure.repl
  description: |-
    ## apropos

    ```
    Usage: (apropos str-or-pattern)
    ```

    ```
    Given a regular expression or stringable thing, return a seq of all
    public definitions in all currently-loaded namespaces that match the
    str-or-pattern.
    ```

    [Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L181)
- name: are
  id: clojure.test-api#clojure.test/are
  summary: null
  belongs_to: clojure.test
  description: "## are\n\n```\nUsage: (are argv expr & args)\n```\n\n```\nChecks multiple assertions with a template expression.\nSee clojure.template/do-template for an explanation of\ntemplates.\n\nExample: (are [x y] (= x y)  \n              2 (+ 1 1)\n              4 (* 2 2))\nExpands to: \n         (do (is (= 2 (+ 1 1)))\n             (is (= 4 (* 2 2))))\n\nNote: This breaks some reporting features, such as line numbers.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L572)"
- name: areduce
  id: clojure.core-api#clojure.core/areduce
  summary: null
  belongs_to: clojure.core
  description: "## areduce\n\n```\nUsage: (areduce a idx ret init expr)\n```\n\n```\nReduces an expression across an array a, using an index named idx,\nand return value named ret, initialized to init, setting ret to the \nevaluation of expr at each step, returning ret.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5290)"
- name: array-map
  id: clojure.core-api#clojure.core/array-map
  summary: null
  belongs_to: clojure.core
  description: |-
    ## array-map

    ```
    Usage: (array-map)
           (array-map & keyvals)
    ```

    ```
    Constructs an array-map. If any keys are equal, they are handled as
    if by repeated uses of assoc.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4380)
- name: ArrayChunk
  id: clojure.core-api#clojure.core/ArrayChunk
  summary: null
  belongs_to: clojure.core
  description: "## ArrayChunk\n\nFields: \\[am arr off end\\]  \nProtocols:  \nInterfaces: clojure.lang.IChunk, clojure.lang.Indexed"
- name: as->
  id: clojure.core-api#clojure.core/as->
  summary: null
  belongs_to: clojure.core
  description: |-
    ## as-\>

    ```
    Usage: (as-> expr name & forms)
    ```

    ```
    Binds name to expr, evaluates the first form in the lexical context
    of that binding, then binds name to that result, repeating for each
    successive form, returning the result of the last form.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7640)
- name: as-relative-path
  id: clojure.java.io-api#clojure.java.io/as-relative-path
  summary: null
  belongs_to: clojure.java.io
  description: |-
    ## as-relative-path

    ```
    Usage: (as-relative-path x)
    ```

    ```
    Take an as-file-able thing and return a string if it is
    a relative path, else IllegalArgumentException.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L408)
- name: aset
  id: clojure.core-api#clojure.core/aset
  summary: null
  belongs_to: clojure.core
  description: |-
    ## aset

    ```
    Usage: (aset array idx val)
           (aset array idx idx2 & idxv)
    ```

    ```
    Sets the value at the index/indices. Works on Java arrays of
    reference types. Returns val.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3924)
- name: aset-boolean
  id: clojure.core-api#clojure.core/aset-boolean
  summary: null
  belongs_to: clojure.core
  description: |-
    ## aset-boolean

    ```
    Usage: (aset-boolean array idx val)
           (aset-boolean array idx idx2 & idxv)
    ```

    ```
    Sets the value at the index/indices. Works on arrays of boolean. Returns val.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3957)
- name: aset-byte
  id: clojure.core-api#clojure.core/aset-byte
  summary: null
  belongs_to: clojure.core
  description: |-
    ## aset-byte

    ```
    Usage: (aset-byte array idx val)
           (aset-byte array idx idx2 & idxv)
    ```

    ```
    Sets the value at the index/indices. Works on arrays of byte. Returns val.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3977)
- name: aset-char
  id: clojure.core-api#clojure.core/aset-char
  summary: null
  belongs_to: clojure.core
  description: |-
    ## aset-char

    ```
    Usage: (aset-char array idx val)
           (aset-char array idx idx2 & idxv)
    ```

    ```
    Sets the value at the index/indices. Works on arrays of char. Returns val.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3982)
- name: aset-double
  id: clojure.core-api#clojure.core/aset-double
  summary: null
  belongs_to: clojure.core
  description: |-
    ## aset-double

    ```
    Usage: (aset-double array idx val)
           (aset-double array idx idx2 & idxv)
    ```

    ```
    Sets the value at the index/indices. Works on arrays of double. Returns val.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3967)
- name: aset-float
  id: clojure.core-api#clojure.core/aset-float
  summary: null
  belongs_to: clojure.core
  description: |-
    ## aset-float

    ```
    Usage: (aset-float array idx val)
           (aset-float array idx idx2 & idxv)
    ```

    ```
    Sets the value at the index/indices. Works on arrays of float. Returns val.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3962)
- name: aset-int
  id: clojure.core-api#clojure.core/aset-int
  summary: null
  belongs_to: clojure.core
  description: |-
    ## aset-int

    ```
    Usage: (aset-int array idx val)
           (aset-int array idx idx2 & idxv)
    ```

    ```
    Sets the value at the index/indices. Works on arrays of int. Returns val.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3947)
- name: aset-long
  id: clojure.core-api#clojure.core/aset-long
  summary: null
  belongs_to: clojure.core
  description: |-
    ## aset-long

    ```
    Usage: (aset-long array idx val)
           (aset-long array idx idx2 & idxv)
    ```

    ```
    Sets the value at the index/indices. Works on arrays of long. Returns val.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3952)
- name: aset-short
  id: clojure.core-api#clojure.core/aset-short
  summary: null
  belongs_to: clojure.core
  description: |-
    ## aset-short

    ```
    Usage: (aset-short array idx val)
           (aset-short array idx idx2 & idxv)
    ```

    ```
    Sets the value at the index/indices. Works on arrays of short. Returns val.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3972)
- name: asin
  id: clojure.math-api#clojure.math/asin
  summary: null
  belongs_to: clojure.math
  description: |-
    ## asin

    ```
    Usage: (asin a)
    ```

    ```
    Returns the arc sine of an angle, in the range -pi/2 to pi/2.
    If a is ##NaN or |a|>1 => ##NaN
    If a is zero => zero with the same sign as a
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#asin-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L74)
- name: AsmReflector
  id: clojure.reflect-api#clojure.reflect/AsmReflector
  summary: null
  belongs_to: clojure.reflect
  description: "## AsmReflector\n\nFields: \\[class-resolver\\]  \nProtocols: [Reflector](#clojure.reflect/Reflector)  \nInterfaces:"
- name: assert
  id: clojure.core-api#clojure.core/assert
  summary: null
  belongs_to: clojure.core
  description: |-
    ## assert

    ```
    Usage: (assert x)
           (assert x message)
    ```

    ```
    Evaluates expr and throws an exception if it does not evaluate to
    logical true.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4841)
- name: assert-any
  id: clojure.test-api#clojure.test/assert-any
  summary: null
  belongs_to: clojure.test
  description: |-
    ## assert-any

    ```
    Usage: (assert-any msg form)
    ```

    ```
    Returns generic assertion code for any test, including macros, Java
    method calls, or isolated symbols.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L455)
- name: assert-predicate
  id: clojure.test-api#clojure.test/assert-predicate
  summary: null
  belongs_to: clojure.test
  description: |-
    ## assert-predicate

    ```
    Usage: (assert-predicate msg form)
    ```

    ```
    Returns generic assertion code for any functional predicate.  The
    'expected' argument to 'report' will contains the original form, the
    'actual' argument will contain the form with all its sub-forms
    evaluated.  If the predicate returns false, the 'actual' form will
    be wrapped in (not...).
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L436)
- name: assoc
  id: clojure.core-api#clojure.core/assoc
  summary: null
  belongs_to: clojure.core
  description: |-
    ## assoc

    ```
    Usage: (assoc map key val)
           (assoc map key val & kvs)
    ```

    ```
    assoc[iate]. When applied to a map, returns a new map of the
    same (hashed/sorted) type, that contains the mapping of key(s) to
    val(s). When applied to a vector, returns a new vector that
    contains val at index. Note - index must be <= (count vector).
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L183)
- name: assoc!
  id: clojure.core-api#clojure.core/assoc!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## assoc!

    ```
    Usage: (assoc! coll key val)
           (assoc! coll key val & kvs)
    ```

    ```
    When applied to a transient map, adds mapping of key(s) to
    val(s). When applied to a transient vector, sets the val at index.
    Note - index must be <= (count vector). Returns coll.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3369)
- name: assoc-in
  id: clojure.core-api#clojure.core/assoc-in
  summary: null
  belongs_to: clojure.core
  description: |-
    ## assoc-in

    ```
    Usage: (assoc-in m [k & ks] v)
    ```

    ```
    Associates a value in a nested associative structure, where ks is a
    sequence of keys and v is the new value and returns a new nested structure.
    If any levels do not exist, hash-maps will be created.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6196)
- name: associative?
  id: clojure.core-api#clojure.core/associative?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## associative?

    ```
    Usage: (associative? coll)
    ```

    ```
    Returns true if coll implements Associative
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6279)
- name: atan
  id: clojure.math-api#clojure.math/atan
  summary: null
  belongs_to: clojure.math
  description: |-
    ## atan

    ```
    Usage: (atan a)
    ```

    ```
    Returns the arc tangent of a, in the range of -pi/2 to pi/2.
    If a is ##NaN => ##NaN
    If a is zero => zero with the same sign as a
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#atan-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L95)
- name: atan2
  id: clojure.math-api#clojure.math/atan2
  summary: null
  belongs_to: clojure.math
  description: |-
    ## atan2

    ```
    Usage: (atan2 y x)
    ```

    ```
    Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).
    Computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi.
    For more details on special cases, see:
    https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#atan2-double-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L233)
- name: atom
  id: clojure.core-api#clojure.core/atom
  summary: null
  belongs_to: clojure.core
  description: |-
    ## atom

    ```
    Usage: (atom x)
           (atom x & options)
    ```

    ```
    Creates and returns an Atom with an initial value of x and zero or
    more options (in any order):

    :meta metadata-map

    :validator validate-fn

    If metadata-map is supplied, it will become the metadata on the
    atom. validate-fn must be nil or a side-effect-free fn of one
    argument, which will be passed the intended new state on any state
    change. If the new state is unacceptable, the validate-fn should
    return false or throw an exception.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2344)
- name: await
  id: clojure.core-api#clojure.core/await
  summary: null
  belongs_to: clojure.core
  description: |-
    ## await

    ```
    Usage: (await & agents)
    ```

    ```
    Blocks the current thread (indefinitely!) until all actions
    dispatched thus far, from this thread or agent, to the agent(s) have
    occurred.  Will block on failed agents.  Will never return if
    a failed agent is restarted with :clear-actions true or shutdown-agents was called.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3275)
- name: await-for
  id: clojure.core-api#clojure.core/await-for
  summary: null
  belongs_to: clojure.core
  description: |-
    ## await-for

    ```
    Usage: (await-for timeout-ms & agents)
    ```

    ```
    Blocks the current thread until all actions dispatched thus
    far (from this thread or agent) to the agents have occurred, or the
    timeout (in milliseconds) has elapsed. Returns logical false if
    returning due to timeout, logical true otherwise.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3297)
- name: bases
  id: clojure.core-api#clojure.core/bases
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bases

    ```
    Usage: (bases c)
    ```

    ```
    Returns the immediate superclass and direct interfaces of c, if any
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5568)
- name: bean
  id: clojure.core-api#clojure.core/bean
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bean

    ```
    Usage: (bean x)
    ```

    ```
    Takes a Java object and returns a read-only implementation of the
    map abstraction based upon its JavaBean properties.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L403)
- name: bigdec
  id: clojure.core-api#clojure.core/bigdec
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bigdec

    ```
    Usage: (bigdec x)
    ```

    ```
    Coerce to BigDecimal
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3648)
- name: bigint
  id: clojure.core-api#clojure.core/bigint
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bigint

    ```
    Usage: (bigint x)
    ```

    ```
    Coerce to BigInt
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3620)
- name: biginteger
  id: clojure.core-api#clojure.core/biginteger
  summary: null
  belongs_to: clojure.core
  description: |-
    ## biginteger

    ```
    Usage: (biginteger x)
    ```

    ```
    Coerce to BigInteger
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3634)
- name: binding
  id: clojure.core-api#clojure.core/binding
  summary: null
  belongs_to: clojure.core
  description: |-
    ## binding

    ```
    Usage: (binding bindings & body)
    ```

    ```
    binding => var-symbol init-expr

    Creates new bindings for the (already-existing) vars, with the
    supplied initial values, executes the exprs in an implicit do, then
    re-establishes the bindings that existed before.  The new bindings
    are made in parallel (unlike let); all init-exprs are evaluated
    before the vars are bound to their new values.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1964)
- name: bit-and
  id: clojure.core-api#clojure.core/bit-and
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bit-and

    ```
    Usage: (bit-and x y)
           (bit-and x y & more)
    ```

    ```
    Bitwise and
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1307)
- name: bit-and-not
  id: clojure.core-api#clojure.core/bit-and-not
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bit-and-not

    ```
    Usage: (bit-and-not x y)
           (bit-and-not x y & more)
    ```

    ```
    Bitwise and with complement
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1334)
- name: bit-clear
  id: clojure.core-api#clojure.core/bit-clear
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bit-clear

    ```
    Usage: (bit-clear x n)
    ```

    ```
    Clear bit at index n
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1345)
- name: bit-flip
  id: clojure.core-api#clojure.core/bit-flip
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bit-flip

    ```
    Usage: (bit-flip x n)
    ```

    ```
    Flip bit at index n
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1357)
- name: bit-not
  id: clojure.core-api#clojure.core/bit-not
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bit-not

    ```
    Usage: (bit-not x)
    ```

    ```
    Bitwise complement
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1300)
- name: bit-or
  id: clojure.core-api#clojure.core/bit-or
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bit-or

    ```
    Usage: (bit-or x y)
           (bit-or x y & more)
    ```

    ```
    Bitwise or
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1316)
- name: bit-set
  id: clojure.core-api#clojure.core/bit-set
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bit-set

    ```
    Usage: (bit-set x n)
    ```

    ```
    Set bit at index n
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1351)
- name: bit-shift-left
  id: clojure.core-api#clojure.core/bit-shift-left
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bit-shift-left

    ```
    Usage: (bit-shift-left x n)
    ```

    ```
    Bitwise shift left
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1370)
- name: bit-shift-right
  id: clojure.core-api#clojure.core/bit-shift-right
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bit-shift-right

    ```
    Usage: (bit-shift-right x n)
    ```

    ```
    Bitwise shift right
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1376)
- name: bit-test
  id: clojure.core-api#clojure.core/bit-test
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bit-test

    ```
    Usage: (bit-test x n)
    ```

    ```
    Test bit at index n
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1363)
- name: bit-xor
  id: clojure.core-api#clojure.core/bit-xor
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bit-xor

    ```
    Usage: (bit-xor x y)
           (bit-xor x y & more)
    ```

    ```
    Bitwise exclusive or
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1325)
- name: blank?
  id: clojure.string-api#clojure.string/blank?
  summary: null
  belongs_to: clojure.string
  description: |-
    ## blank?

    ```
    Usage: (blank? s)
    ```

    ```
    True if s is nil, empty, or contains only whitespace.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L288)
- name: boolean
  id: clojure.core-api#clojure.core/boolean
  summary: null
  belongs_to: clojure.core
  description: |-
    ## boolean

    ```
    Usage: (boolean x)
    ```

    ```
    Coerce to boolean
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1620)
- name: boolean-array
  id: clojure.core-api#clojure.core/boolean-array
  summary: null
  belongs_to: clojure.core
  description: |-
    ## boolean-array

    ```
    Usage: (boolean-array size-or-seq)
           (boolean-array size init-val-or-seq)
    ```

    ```
    Creates an array of booleans
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5310)
- name: boolean?
  id: clojure.core-api#clojure.core/boolean?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## boolean?

    ```
    Usage: (boolean? x)
    ```

    ```
    Return true if x is a Boolean
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L521)
- name: booleans
  id: clojure.core-api#clojure.core/booleans
  summary: null
  belongs_to: clojure.core
  description: |-
    ## booleans

    ```
    Usage: (booleans xs)
    ```

    ```
    Casts to boolean[]
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5373)
- name: bound-fn
  id: clojure.core-api#clojure.core/bound-fn
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bound-fn

    ```
    Usage: (bound-fn & fntail)
    ```

    ```
    Returns a function defined by the given fntail, which will install the
    same bindings in effect as in the thread at the time bound-fn was called.
    This may be used to define a helper function which runs on a different
    thread, but needs the same bindings in place.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2023)
- name: bound-fn*
  id: clojure.core-api#clojure.core/bound-fn*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bound-fn\*

    ```
    Usage: (bound-fn* f)
    ```

    ```
    Returns a function, which will install the same bindings in effect as in
    the thread at the time bound-fn* was called and then call f with any given
    arguments. This may be used to define a helper function which runs on a
    different thread, but needs the same bindings in place.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2011)
- name: bound?
  id: clojure.core-api#clojure.core/bound?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bound?

    ```
    Usage: (bound? & vars)
    ```

    ```
    Returns true if all of the vars provided as arguments have any bound value, root or thread-local.
    Implies that deref'ing the provided vars will succeed. Returns true if no vars are provided.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5537)
- name: bounded-count
  id: clojure.core-api#clojure.core/bounded-count
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bounded-count

    ```
    Usage: (bounded-count n coll)
    ```

    ```
    If coll is counted? returns its count, else will count at most the first n
    elements of coll using its seq
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7452)
- name: branch?
  id: clojure.zip-api#clojure.zip/branch?
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## branch?

    ```
    Usage: (branch? loc)
    ```

    ```
    Returns true if the node at loc is a branch
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L69)
- name: browse-url
  id: clojure.java.browse-api#clojure.java.browse/browse-url
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.java.browse
  description: "## browse-url\n\n```\nUsage: (browse-url url)\n```\n\n```\nOpen url in a browser\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/19e3a2708def5ffb7f2be030d8e8e895464ce2d2/src/clj/clojure/java/browse.clj#L68)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.java.browse-api.html](https://clojure.github.io/clojure/clojure.java.browse-api.html)"
- name: butlast
  id: clojure.core-api#clojure.core/butlast
  summary: null
  belongs_to: clojure.core
  description: |-
    ## butlast

    ```
    Usage: (butlast coll)
    ```

    ```
    Return a seq of all but the last item in coll, in linear time
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L274)
- name: byte
  id: clojure.core-api#clojure.core/byte
  summary: null
  belongs_to: clojure.core
  description: |-
    ## byte

    ```
    Usage: (byte x)
    ```

    ```
    Coerce to byte
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3505)
- name: byte-array
  id: clojure.core-api#clojure.core/byte-array
  summary: null
  belongs_to: clojure.core
  description: |-
    ## byte-array

    ```
    Usage: (byte-array size-or-seq)
           (byte-array size init-val-or-seq)
    ```

    ```
    Creates an array of bytes
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5318)
- name: bytes
  id: clojure.core-api#clojure.core/bytes
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bytes

    ```
    Usage: (bytes xs)
    ```

    ```
    Casts to bytes[]
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5378)
- name: bytes?
  id: clojure.core-api#clojure.core/bytes?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## bytes?

    ```
    Usage: (bytes? x)
    ```

    ```
    Return true if x is a byte array
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5413)
- name: capitalize
  id: clojure.string-api#clojure.string/capitalize
  summary: null
  belongs_to: clojure.string
  description: |-
    ## capitalize

    ```
    Usage: (capitalize s)
    ```

    ```
    Converts first character of the string to upper-case, all other
    characters to lower-case.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L196)
- name: case
  id: clojure.core-api#clojure.core/case
  summary: null
  belongs_to: clojure.core
  description: |-
    ## case

    ```
    Usage: (case e & clauses)
    ```

    ```
    Takes an expression, and a set of clauses.

    Each clause can take the form of either:

    test-constant result-expr

    (test-constant1 ... test-constantN)  result-expr

    The test-constants are not evaluated. They must be compile-time
    literals, and need not be quoted.  If the expression is equal to a
    test-constant, the corresponding result-expr is returned. A single
    default expression can follow the clauses, and its value will be
    returned if no clause matches. If no default expression is provided
    and no clause matches, an IllegalArgumentException is thrown.

    Unlike cond and condp, case does a constant-time dispatch, the
    clauses are not considered sequentially.  All manner of constant
    expressions are acceptable in case, including numbers, strings,
    symbols, keywords, and (Clojure) composites thereof. Note that since
    lists are used to group multiple constants that map to the same
    expression, a vector can be used to match a list if needed. The
    test-constants need not be all of the same type.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6748)
- name: cast
  id: clojure.core-api#clojure.core/cast
  summary: null
  belongs_to: clojure.core
  description: |-
    ## cast

    ```
    Usage: (cast c x)
    ```

    ```
    Throws a ClassCastException if x is not a c, else returns x.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L348)
- name: cat
  id: clojure.core-api#clojure.core/cat
  summary: null
  belongs_to: clojure.core
  description: |-
    ## cat

    ```
    Usage: (cat rf)
    ```

    ```
    A transducer which concatenates the contents of each input, which must be a
    collection, into the reduction.
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7687)
- name: cat
  id: clojure.core-api#clojure.core.reducers/cat
  summary: null
  belongs_to: clojure.core
  description: "## Cat\n\nFields: \\[cnt left right\\]  \nProtocols: [clojure.core.protocols/CollReduce](clojure.core-api#clojure.core.protocols/CollReduce), [CollFold](#clojure.core.reducers/CollFold)  \nInterfaces: clojure.lang.Counted, clojure.lang.Seqable  \n\n## Public Variables and Functions"
- name: Cat
  id: clojure.core-api#clojure.core.reducers/Cat
  summary: null
  belongs_to: clojure.core
  description: "## Cat\n\nFields: \\[cnt left right\\]  \nProtocols: [clojure.core.protocols/CollReduce](clojure.core-api#clojure.core.protocols/CollReduce), [CollFold](#clojure.core.reducers/CollFold)  \nInterfaces: clojure.lang.Counted, clojure.lang.Seqable  \n\n## Public Variables and Functions"
- name: catch
  id: clojure.core-api#clojure.core/catch
  summary: null
  belongs_to: clojure.core
  description: |-
    ## catch

    ```
    Syntax for use with try.

    Please see https://clojure.org/reference/special_forms#try
    ```

    Added in Clojure version 1.0
- name: cbrt
  id: clojure.math-api#clojure.math/cbrt
  summary: null
  belongs_to: clojure.math
  description: |-
    ## cbrt

    ```
    Usage: (cbrt a)
    ```

    ```
    Returns the cube root of a.
    If a is ##NaN => ##NaN
    If a is ##Inf or ##-Inf => a
    If a is zero => zero with sign matching a
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cbrt-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L172)
- name: ceil
  id: clojure.math-api#clojure.math/ceil
  summary: null
  belongs_to: clojure.math
  description: |-
    ## ceil

    ```
    Usage: (ceil a)
    ```

    ```
    Returns the smallest double greater than or equal to a, and equal to a
    mathematical integer.
    If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ceil-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L199)
- name: char
  id: clojure.core-api#clojure.core/char
  summary: null
  belongs_to: clojure.core
  description: |-
    ## char

    ```
    Usage: (char x)
    ```

    ```
    Coerce to char
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3511)
- name: char-array
  id: clojure.core-api#clojure.core/char-array
  summary: null
  belongs_to: clojure.core
  description: |-
    ## char-array

    ```
    Usage: (char-array size-or-seq)
           (char-array size init-val-or-seq)
    ```

    ```
    Creates an array of chars
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5326)
- name: char-escape-string
  id: clojure.core-api#clojure.core/char-escape-string
  summary: null
  belongs_to: clojure.core
  description: |-
    ## char-escape-string

    ```
    Returns escape string for char or nil if none
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L200)
- name: char-name-string
  id: clojure.core-api#clojure.core/char-name-string
  summary: null
  belongs_to: clojure.core
  description: |-
    ## char-name-string

    ```
    Returns name string for char or nil if none
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L342)
- name: char?
  id: clojure.core-api#clojure.core/char?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## char?

    ```
    Usage: (char? x)
    ```

    ```
    Return true if x is a Character
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L155)
- name: chars
  id: clojure.core-api#clojure.core/chars
  summary: null
  belongs_to: clojure.core
  description: |-
    ## chars

    ```
    Usage: (chars xs)
    ```

    ```
    Casts to chars[]
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5383)
- name: children
  id: clojure.zip-api#clojure.zip/children
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## children

    ```
    Usage: (children loc)
    ```

    ```
    Returns a seq of the children of node at loc, which must be a branch
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L75)
- name: cl-format
  id: clojure.pprint-api#clojure.pprint/cl-format
  summary: null
  belongs_to: clojure.pprint
  description: "## cl-format\n\n```\nUsage: (cl-format writer format-in & args)\n```\n\n```\nAn implementation of a Common Lisp compatible format function. cl-format formats its\narguments to an output stream or string based on the format control string given. It \nsupports sophisticated formatting of structured data.\n\nWriter is an instance of java.io.Writer, true to output to *out* or nil to output \nto a string, format-in is the format control string and the remaining arguments \nare the data to be formatted.\n\nThe format control string is a string to be output with embedded 'format directives' \ndescribing how to format the various arguments passed in.\n\nIf writer is nil, cl-format returns the formatted result string. Otherwise, cl-format \nreturns nil.\n\nFor example:\n (let [results [46 38 22]]\n        (cl-format true \"There ~[are~;is~:;are~]~:* ~d result~:p: ~{~d~^, ~}~%\" \n                   (count results) results))\n\nPrints to *out*:\n There are 3 results: 46, 38, 22\n\nDetailed documentation on format control strings is available in the \"Common Lisp the \nLanguage, 2nd edition\", Chapter 22 (available online at:\nhttp://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000) \nand in the Common Lisp HyperSpec at \nhttp://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/fb916808669ef65dce5dfe58e23d4a902253ca55/src/clj/clojure/pprint/cl_format.clj#L27)"
- name: class
  id: clojure.core-api#clojure.core/class
  summary: null
  belongs_to: clojure.core
  description: |-
    ## class

    ```
    Usage: (class x)
    ```

    ```
    Returns the Class of x
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3461)
- name: class?
  id: clojure.core-api#clojure.core/class?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## class?

    ```
    Usage: (class? x)
    ```

    ```
    Returns true if x is an instance of Class
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5468)
- name: ClassResolver
  id: clojure.reflect-api#clojure.reflect/ClassResolver
  summary: null
  belongs_to: clojure.reflect
  description: "## ClassResolver\n\nKnown implementations: clojure.lang.Fn, java.lang.ClassLoader  \n\n### resolve-class\n\n```\nUsage: (resolve-class this name)\n```\n\n```\nGiven a class name, return that typeref's class bytes as an InputStream.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L196)"
- name: clear-agent-errors
  id: clojure.core-api#clojure.core/clear-agent-errors
  summary: null
  belongs_to: clojure.core
  description: |-
    ## clear-agent-errors

    ```
    Usage: (clear-agent-errors a)
    ```

    ```
    DEPRECATED: Use 'restart-agent' instead.
    Clears any exceptions thrown during asynchronous actions of the
    agent, allowing subsequent actions to occur.
    ```

    Added in Clojure version 1.0

    Deprecated since Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2263)
- name: clojure-version
  id: clojure.core-api#clojure.core/clojure-version
  summary: null
  belongs_to: clojure.core
  description: |-
    ## clojure-version

    ```
    Usage: (clojure-version)
    ```

    ```
    Returns clojure version as a printable string.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7149)
- name: clojure.core
  id: clojure.core-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.core\n\nFull namespace name: clojure.core\n\n## Overview\n\n```\nFundamental library of the Clojure language\n```\n\n## Types\n\n## ArrayChunk\n\nFields: \\[am arr off end\\]  \nProtocols:  \nInterfaces: clojure.lang.IChunk, clojure.lang.Indexed  \n\n## Eduction\n\nFields: \\[xform coll\\]  \nProtocols:  \nInterfaces: clojure.lang.IReduceInit, clojure.lang.Sequential, java.lang.Iterable  \n\n## Vec\n\nFields: \\[am cnt shift root tail \\_meta\\]  \nProtocols:  \nInterfaces: clojure.core.IVecImpl, clojure.lang.Associative, clojure.lang.Counted, clojure.lang.IFn, clojure.lang.IHashEq, clojure.lang.ILookup, clojure.lang.IMeta, clojure.lang.IObj, clojure.lang.IPersistentCollection, clojure.lang.IPersistentStack, clojure.lang.IPersistentVector, clojure.lang.Indexed, clojure.lang.Reversible, clojure.lang.Seqable, clojure.lang.Sequential, java.lang.Comparable, java.lang.Iterable, java.util.Collection, java.util.List  \n\n## VecNode\n\nFields: \\[edit arr\\]  \nProtocols:  \nInterfaces:  \n\n## VecSeq\n\nFields: \\[am vec anode i offset \\_meta\\]  \nProtocols: [clojure.core.protocols/InternalReduce](clojure.core-api#clojure.core.protocols/InternalReduce)  \nInterfaces: clojure.lang.IChunkedSeq, clojure.lang.IHashEq, clojure.lang.IMeta, clojure.lang.IObj, clojure.lang.ISeq, clojure.lang.Seqable, java.lang.Iterable  \n\n## Public Variables and Functions\n\n## &\n\n```\nSyntax for use with fn.\n\nPlease see https://clojure.org/reference/special_forms#fn\n```\n\nAdded in Clojure version 1.0\n\n## \\*\n\n```\nUsage: (*)\n       (* x)\n       (* x y)\n       (* x y & more)\n```\n\n```\nReturns the product of nums. (*) returns 1. Does not auto-promote\nlongs, will throw on overflow. See also: *'\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1010)  \n\n## \\*'\n\n```\nUsage: (*')\n       (*' x)\n       (*' x y)\n       (*' x y & more)\n```\n\n```\nReturns the product of nums. (*') returns 1. Supports arbitrary precision.\nSee also: *\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L998)  \n\n## \\*1\n\n```\nbound in a repl thread to the most recent value printed\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6314)  \n\n## \\*2\n\n```\nbound in a repl thread to the second most recent value printed\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6319)  \n\n## \\*3\n\n```\nbound in a repl thread to the third most recent value printed\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6324)  \n\n## \\*agent\\*\n\n```\nThe agent currently running an action on this thread, else nil\n```\n\nAdded in Clojure version 1.0\n\n## \\*clojure-version\\*\n\n```\nThe version info for Clojure core, as a map containing :major :minor \n:incremental and :qualifier keys. Feature releases may increment \n:minor and/or :major, bugfix releases will increment :incremental. \nPossible values of :qualifier include \"GA\", \"SNAPSHOT\", \"RC-x\" \"BETA-x\"\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7137)  \n\n## \\*command-line-args\\*\n\n```\nA sequence of the supplied command line arguments, or nil if\nnone were supplied\n```\n\nAdded in Clojure version 1.0\n\n## \\*compile-files\\*\n\n```\nSet to true when compiling files, false otherwise.\n```\n\nAdded in Clojure version 1.0\n\n## \\*compile-path\\*\n\n```\nSpecifies the directory where 'compile' will write out .class\nfiles. This directory must be in the classpath for 'compile' to\nwork.\n\nDefaults to \"classes\"\n```\n\nAdded in Clojure version 1.0\n\n## \\*compiler-options\\*\n\n```\nA map of keys to options.\nNote, when binding dynamically make sure to merge with previous value.\nSupported options:\n:elide-meta - a collection of metadata keys to elide during compilation.\n:disable-locals-clearing - set to true to disable clearing, useful for using a debugger\n:direct-linking - set to true to use direct static invocation of functions, rather than vars\n  Note that call sites compiled with direct linking will not be affected by var redefinition.\n  Use ^:redef (or ^:dynamic) on a var to prevent direct linking and allow redefinition.\nSee https://clojure.org/reference/compilation for more information.\n```\n\nAdded in Clojure version 1.4\n\n## \\*data-readers\\*\n\n```\nMap from reader tag symbols to data reader Vars.\n\nWhen Clojure starts, it searches for files named 'data_readers.clj'\nand 'data_readers.cljc' at the root of the classpath. Each such file\nmust contain a literal map of symbols, like this:\n\n    {foo/bar my.project.foo/bar\n     foo/baz my.project/baz}\n\nThe first symbol in each pair is a tag that will be recognized by\nthe Clojure reader. The second symbol in the pair is the\nfully-qualified name of a Var which will be invoked by the reader to\nparse the form following the tag. For example, given the\ndata_readers.clj file above, the Clojure reader would parse this\nform:\n\n    #foo/bar [1 2 3]\n\nby invoking the Var #'my.project.foo/bar on the vector [1 2 3]. The\ndata reader function is invoked on the form AFTER it has been read\nas a normal Clojure data structure by the reader.\n\nReader tags without namespace qualifiers are reserved for\nClojure. Default reader tags are defined in\nclojure.core/default-data-readers but may be overridden in\ndata_readers.clj, data_readers.cljc, or by rebinding this Var.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7872)  \n\n## \\*default-data-reader-fn\\*\n\n```\nWhen no data reader is found for a tag and *default-data-reader-fn*\nis non-nil, it will be called with two arguments,\nthe tag and the value.  If *default-data-reader-fn* is nil (the\ndefault), an exception will be thrown for the unknown tag.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7901)  \n\n## \\*e\n\n```\nbound in a repl thread to the most recent exception caught by the repl\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6329)  \n\n## \\*err\\*\n\n```\nA java.io.Writer object representing standard error for print operations.\n\nDefaults to System/err, wrapped in a PrintWriter\n```\n\nAdded in Clojure version 1.0\n\n## \\*file\\*\n\n```\nThe path of the file being evaluated, as a String.\n\nWhen there is no file, e.g. in the REPL, the value is not defined.\n```\n\nAdded in Clojure version 1.0\n\n## \\*flush-on-newline\\*\n\n```\nWhen set to true, output will be flushed whenever a newline is printed.\n\nDefaults to true.\n```\n\nAdded in Clojure version 1.0\n\n## \\*in\\*\n\n```\nA java.io.Reader object representing standard input for read operations.\n\nDefaults to System/in, wrapped in a LineNumberingPushbackReader\n```\n\nAdded in Clojure version 1.0\n\n## \\*ns\\*\n\n```\nA clojure.lang.Namespace object representing the current namespace.\n```\n\nAdded in Clojure version 1.0\n\n## \\*out\\*\n\n```\nA java.io.Writer object representing standard output for print operations.\n\nDefaults to System/out, wrapped in an OutputStreamWriter\n```\n\nAdded in Clojure version 1.0\n\n## \\*print-dup\\*\n\n```\nWhen set to logical true, objects will be printed in a way that preserves\ntheir type when read in later.\n\nDefaults to false.\n```\n\nAdded in Clojure version 1.0\n\n## \\*print-length\\*\n\n```\n*print-length* controls how many items of each collection the\nprinter will print. If it is bound to logical false, there is no\nlimit. Otherwise, it must be bound to an integer indicating the maximum\nnumber of items of each collection to print. If a collection contains\nmore items, the printer will print items up to the limit followed by\n'...' to represent the remaining items. The root binding is nil\nindicating no limit.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L16)  \n\n## \\*print-level\\*\n\n```\n*print-level* controls how many levels deep the printer will\nprint nested objects. If it is bound to logical false, there is no\nlimit. Otherwise, it must be bound to an integer indicating the maximum\nlevel to print. Each argument to print is at level 0; if an argument is a\ncollection, its items are at level 1; and so on. If an object is a\ncollection and is at a level greater than or equal to the value bound to\n*print-level*, the printer prints '#' to represent it. The root binding\nis nil indicating no limit.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L27)  \n\n## \\*print-meta\\*\n\n```\nIf set to logical true, when printing an object, its metadata will also\nbe printed in a form that can be read back by the reader.\n\nDefaults to false.\n```\n\nAdded in Clojure version 1.0\n\n## \\*print-namespace-maps\\*\n\n```\n*print-namespace-maps* controls whether the printer will print\nnamespace map literal syntax. It defaults to false, but the REPL binds\nto true.\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L41)  \n\n## \\*print-readably\\*\n\n```\nWhen set to logical false, strings and characters will be printed with\nnon-alphanumeric characters converted to the appropriate escape sequences.\n\nDefaults to true\n```\n\nAdded in Clojure version 1.0\n\n## \\*read-eval\\*\n\n```\nDefaults to true (or value specified by system property, see below)\n***This setting implies that the full power of the reader is in play,\nincluding syntax that can cause code to execute. It should never be\nused with untrusted sources. See also: clojure.edn/read.***\n\nWhen set to logical false in the thread-local binding,\nthe eval reader (#=) and record/type literal syntax are disabled in read/load.\nExample (will fail): (binding [*read-eval* false] (read-string \"#=(* 2 21)\"))\n\nThe default binding can be controlled by the system property\n'clojure.read.eval' System properties can be set on the command line\nlike this:\n\njava -Dclojure.read.eval=false ...\n\nThe system property can also be set to 'unknown' via\n-Dclojure.read.eval=unknown, in which case the default binding\nis :unknown and all reads will fail in contexts where *read-eval*\nhas not been explicitly bound to either true or false. This setting\ncan be a useful diagnostic tool to ensure that all of your reads\noccur in considered contexts. You can also accomplish this in a\nparticular scope by binding *read-eval* to :unknown\n```\n\nAdded in Clojure version 1.0\n\n## \\*unchecked-math\\*\n\n```\nWhile bound to true, compilations of +, -, *, inc, dec and the\ncoercions will be done without overflow checks. While bound\nto :warn-on-boxed, same behavior as true, and a warning is emitted\nwhen compilation uses boxed math. Default: false.\n```\n\nAdded in Clojure version 1.3\n\n## \\*warn-on-reflection\\*\n\n```\nWhen set to true, the compiler will emit warnings when reflection is\nneeded to resolve Java method calls or field accesses.\n\nDefaults to false.\n```\n\nAdded in Clojure version 1.0\n\n## +\n\n```\nUsage: (+)\n       (+ x)\n       (+ x y)\n       (+ x y & more)\n```\n\n```\nReturns the sum of nums. (+) returns 0. Does not auto-promote\nlongs, will throw on overflow. See also: +'\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L986)  \n\n## +'\n\n```\nUsage: (+')\n       (+' x)\n       (+' x y)\n       (+' x y & more)\n```\n\n```\nReturns the sum of nums. (+') returns 0. Supports arbitrary precision.\nSee also: +\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L974)  \n\n## -\n\n```\nUsage: (- x)\n       (- x y)\n       (- x y & more)\n```\n\n```\nIf no ys are supplied, returns the negation of x, else subtracts\nthe ys from x and returns the result. Does not auto-promote\nlongs, will throw on overflow. See also: -'\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1045)  \n\n## -'\n\n```\nUsage: (-' x)\n       (-' x y)\n       (-' x y & more)\n```\n\n```\nIf no ys are supplied, returns the negation of x, else subtracts\nthe ys from x and returns the result. Supports arbitrary precision.\nSee also: -\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1033)  \n\n## -\\>\n\n```\nUsage: (-> x & forms)\n```\n\n```\nThreads the expr through the forms. Inserts x as the\nsecond item in the first form, making a list of it if it is not a\nlist already. If there are more forms, inserts the first form as the\nsecond item in second form, etc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1694)  \n\n## -\\>\\>\n\n```\nUsage: (->> x & forms)\n```\n\n```\nThreads the expr through the forms. Inserts x as the\nlast item in the first form, making a list of it if it is not a\nlist already. If there are more forms, inserts the first form as the\nlast item in second form, etc.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1710)  \n\n## -\\>ArrayChunk\n\n```\nUsage: (->ArrayChunk am arr off end)\n```\n\n```\nPositional factory function for class clojure.core.ArrayChunk.\n```\n\n[Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L37)  \n\n## -\\>Eduction\n\n```\nUsage: (->Eduction xform coll)\n```\n\n```\nPositional factory function for class clojure.core.Eduction.\n```\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7750)  \n\n## -\\>Vec\n\n```\nUsage: (->Vec am cnt shift root tail _meta)\n```\n\n```\nPositional factory function for class clojure.core.Vec.\n```\n\n[Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L170)  \n\n## -\\>VecNode\n\n```\nUsage: (->VecNode edit arr)\n```\n\n```\nPositional factory function for class clojure.core.VecNode.\n```\n\n[Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L18)  \n\n## -\\>VecSeq\n\n```\nUsage: (->VecSeq am vec anode i offset _meta)\n```\n\n```\nPositional factory function for class clojure.core.VecSeq.\n```\n\n[Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L59)  \n\n## .\n\n```\nUsage: (.instanceMember instance args*)\n       (.instanceMember Classname args*)\n       (Classname/staticMethod args*)\n       Classname/staticField\n```\n\n```\nThe instance member form works for both fields and methods.\nThey all expand into calls to the dot operator at macroexpansion time.\n\nPlease see https://clojure.org/java_interop#dot\n```\n\nAdded in Clojure version 1.0\n\n## ..\n\n```\nUsage: (.. x form)\n       (.. x form & more)\n```\n\n```\nform => fieldName-symbol or (instanceMethodName-symbol args*)\n\nExpands into a member access (.) of the first member on the first\nargument, followed by the next member on the result, etc. For\ninstance:\n\n(.. System (getProperties) (get \"os.name\"))\n\nexpands to:\n\n(. (. System (getProperties)) (get \"os.name\"))\n\nbut is easier to write, read, and understand.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1676)  \n\n## /\n\n```\nUsage: (/ x)\n       (/ x y)\n       (/ x y & more)\n```\n\n```\nIf no denominators are supplied, returns 1/numerator,\nelse returns numerator divided by all of the denominators.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1022)  \n\n## \\<\n\n```\nUsage: (< x)\n       (< x y)\n       (< x y & more)\n```\n\n```\nReturns non-nil if nums are in monotonically increasing order,\notherwise false.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L902)  \n\n## \\<=\n\n```\nUsage: (<= x)\n       (<= x y)\n       (<= x y & more)\n```\n\n```\nReturns non-nil if nums are in monotonically non-decreasing order,\notherwise false.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1057)  \n\n## =\n\n```\nUsage: (= x)\n       (= x y)\n       (= x y & more)\n```\n\n```\nEquality. Returns true if x equals y, false if not. Same as\nJava x.equals(y) except it also works for nil, and compares\nnumbers and collections in a type-independent manner.  Clojure's immutable data\nstructures define equals() (and thus =) as a value, not an identity,\ncomparison.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L785)  \n\n## ==\n\n```\nUsage: (== x)\n       (== x y)\n       (== x y & more)\n```\n\n```\nReturns non-nil if nums all have the equivalent\nvalue (type-independent), otherwise false\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1102)  \n\n## \\>\n\n```\nUsage: (> x)\n       (> x y)\n       (> x y & more)\n```\n\n```\nReturns non-nil if nums are in monotonically decreasing order,\notherwise false.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1072)  \n\n## \\>=\n\n```\nUsage: (>= x)\n       (>= x y)\n       (>= x y & more)\n```\n\n```\nReturns non-nil if nums are in monotonically non-increasing order,\notherwise false.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1087)  \n\n## NaN?\n\n```\nUsage: (NaN? num)\n```\n\n```\nReturns true if num is NaN, else false\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8090)  \n\n## PrintWriter-on\n\n```\nUsage: (PrintWriter-on flush-fn close-fn)\n```\n\n```\nimplements java.io.PrintWriter given flush-fn, which will be called\nwhen .flush() is called, with a string built up since the last call to .flush().\nif not nil, close-fn will be called with no arguments when .close is called\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L559)  \n\n## StackTraceElement-\\>vec\n\n```\nUsage: (StackTraceElement->vec o)\n```\n\n```\nConstructs a data representation for a StackTraceElement: [class method file line]\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L465)  \n\n## Throwable-\\>map\n\n```\nUsage: (Throwable->map o)\n```\n\n```\nConstructs a data representation for a Throwable with keys:\n:cause - root cause message\n:phase - error phase\n:via - cause chain, with cause keys:\n         :type - exception class symbol\n         :message - exception message\n         :data - ex-data\n         :at - top stack element\n:trace - root cause stack elements\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L471)  \n\n## abs\n\n```\nUsage: (abs a)\n```\n\n```\nReturns the absolute value of a.\nIf a is Long/MIN_VALUE => Long/MIN_VALUE\nIf a is a double and zero => +0.0\nIf a is a double and ##Inf or ##-Inf => ##Inf\nIf a is a double and ##NaN => ##NaN\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1137)  \n\n## accessor\n\n```\nUsage: (accessor s key)\n```\n\n```\nReturns a fn that, given an instance of a structmap with the basis,\nreturns the value at the key.  The key must be in the basis. The\nreturned function should be (slightly) more efficient than using\nget, but such use of accessors should be limited to known\nperformance-critical areas.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4072)  \n\n## aclone\n\n```\nUsage: (aclone array)\n```\n\n```\nReturns a clone of the Java array. Works on arrays of known\ntypes.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3906)  \n\n## add-classpath\n\n```\nUsage: (add-classpath url)\n```\n\n```\nDEPRECATED \n\nAdds the url (String or URL object) to the classpath per\nURLClassLoader.addURL\n```\n\nAdded in Clojure version 1.0\n\nDeprecated since Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5177)  \n\n## add-tap\n\n```\nUsage: (add-tap f)\n```\n\n```\nadds f, a fn of one argument, to the tap set. This function will be called with anything sent via tap>.\nThis function may (briefly) block (e.g. for streams), and will never impede calls to tap>,\nbut blocking indefinitely may cause tap values to be dropped.\nRemember f in order to remove-tap\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7982)  \n\n## add-watch\n\n```\nUsage: (add-watch reference key fn)\n```\n\n```\nAdds a watch function to an agent/atom/var/ref reference. The watch\nfn must be a fn of 4 args: a key, the reference, its old-state, its\nnew-state. Whenever the reference's state might have been changed,\nany registered watches will have their functions called. The watch fn\nwill be called synchronously, on the agent's thread if an agent,\nbefore any pending sends if agent or ref. Note that an atom's or\nref's state may have changed again prior to the fn call, so use\nold/new-state rather than derefing the reference. Note also that watch\nfns may be called from multiple threads simultaneously. Var watchers\nare triggered only by root binding changes, not thread-local\nset!s. Keys must be unique per reference, and can be used to remove\nthe watch with remove-watch, but are otherwise considered opaque by\nthe watch mechanism.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2161)  \n\n## agent\n\n```\nUsage: (agent state & options)\n```\n\n```\nCreates and returns an agent with an initial value of state and\nzero or more options (in any order):\n\n:meta metadata-map\n\n:validator validate-fn\n\n:error-handler handler-fn\n\n:error-mode mode-keyword\n\nIf metadata-map is supplied, it will become the metadata on the\nagent. validate-fn must be nil or a side-effect-free fn of one\nargument, which will be passed the intended new state on any state\nchange. If the new state is unacceptable, the validate-fn should\nreturn false or throw an exception.  handler-fn is called if an\naction throws an exception or if validate-fn rejects a new state --\nsee set-error-handler! for details.  The mode-keyword may be either\n:continue (the default if an error-handler is given) or :fail (the\ndefault if no error-handler is given) -- see set-error-mode! for\ndetails.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2071)  \n\n## agent-error\n\n```\nUsage: (agent-error a)\n```\n\n```\nReturns the exception thrown during an asynchronous action of the\nagent if the agent is failed.  Returns nil if the agent is not\nfailed.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2186)  \n\n## agent-errors\n\n```\nUsage: (agent-errors a)\n```\n\n```\nDEPRECATED: Use 'agent-error' instead.\nReturns a sequence of the exceptions thrown during asynchronous\nactions of the agent.\n```\n\nAdded in Clojure version 1.0\n\nDeprecated since Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2253)  \n\n## aget\n\n```\nUsage: (aget array idx)\n       (aget array idx & idxs)\n```\n\n```\nReturns the value at the index/indices. Works on Java arrays of all\ntypes.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3913)  \n\n## alength\n\n```\nUsage: (alength array)\n```\n\n```\nReturns the length of the Java array. Works on arrays of all\ntypes.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3899)  \n\n## alias\n\n```\nUsage: (alias alias namespace-sym)\n```\n\n```\nAdd an alias in the current namespace to another\nnamespace. Arguments are two symbols: the alias to be used, and\nthe symbolic name of the target namespace. Use :as in the ns macro in preference\nto calling this directly.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4265)  \n\n## all-ns\n\n```\nUsage: (all-ns)\n```\n\n```\nReturns a sequence of all namespaces.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4148)  \n\n## alter\n\n```\nUsage: (alter ref fun & args)\n```\n\n```\nMust be called in a transaction. Sets the in-transaction-value of\nref to:\n\n(apply fun in-transaction-value-of-ref args)\n\nand returns the in-transaction-value of ref.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2460)  \n\n## alter-meta!\n\n```\nUsage: (alter-meta! iref f & args)\n```\n\n```\nAtomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n(apply f its-current-meta args)\n\nf must be free of side-effects\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2423)  \n\n## alter-var-root\n\n```\nUsage: (alter-var-root v f & args)\n```\n\n```\nAtomically alters the root binding of var v by applying f to its\ncurrent value plus any args\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5530)  \n\n## amap\n\n```\nUsage: (amap a idx ret expr)\n```\n\n```\nMaps an expression across an array a, using an index named idx, and\nreturn value named ret, initialized to a clone of a, then setting \neach element of ret to the evaluation of expr, returning the new \narray ret.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5274)  \n\n## ancestors\n\n```\nUsage: (ancestors tag)\n       (ancestors h tag)\n```\n\n```\nReturns the immediate and indirect parents of tag, either via a Java type\ninheritance relationship or a relationship established via derive. h\nmust be a hierarchy obtained from make-hierarchy, if not supplied\ndefaults to the global hierarchy\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5623)  \n\n## and\n\n```\nUsage: (and)\n       (and x)\n       (and x & next)\n```\n\n```\nEvaluates exprs one at a time, from left to right. If a form\nreturns logical false (nil or false), and returns that value and\ndoesn't evaluate any of the other expressions, otherwise it returns\nthe value of the last expr. (and) returns true.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L844)  \n\n## any?\n\n```\nUsage: (any? x)\n```\n\n```\nReturns true given any argument.\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L540)  \n\n## apply\n\n```\nUsage: (apply f args)\n       (apply f x args)\n       (apply f x y args)\n       (apply f x y z args)\n       (apply f a b c d & args)\n```\n\n```\nApplies fn f to the argument list formed by prepending intervening arguments to args.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L662)  \n\n## areduce\n\n```\nUsage: (areduce a idx ret init expr)\n```\n\n```\nReduces an expression across an array a, using an index named idx,\nand return value named ret, initialized to init, setting ret to the \nevaluation of expr at each step, returning ret.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5290)  \n\n## array-map\n\n```\nUsage: (array-map)\n       (array-map & keyvals)\n```\n\n```\nConstructs an array-map. If any keys are equal, they are handled as\nif by repeated uses of assoc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4380)  \n\n## as-\\>\n\n```\nUsage: (as-> expr name & forms)\n```\n\n```\nBinds name to expr, evaluates the first form in the lexical context\nof that binding, then binds name to that result, repeating for each\nsuccessive form, returning the result of the last form.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7640)  \n\n## aset\n\n```\nUsage: (aset array idx val)\n       (aset array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on Java arrays of\nreference types. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3924)  \n\n## aset-boolean\n\n```\nUsage: (aset-boolean array idx val)\n       (aset-boolean array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of boolean. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3957)  \n\n## aset-byte\n\n```\nUsage: (aset-byte array idx val)\n       (aset-byte array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of byte. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3977)  \n\n## aset-char\n\n```\nUsage: (aset-char array idx val)\n       (aset-char array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of char. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3982)  \n\n## aset-double\n\n```\nUsage: (aset-double array idx val)\n       (aset-double array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of double. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3967)  \n\n## aset-float\n\n```\nUsage: (aset-float array idx val)\n       (aset-float array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of float. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3962)  \n\n## aset-int\n\n```\nUsage: (aset-int array idx val)\n       (aset-int array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of int. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3947)  \n\n## aset-long\n\n```\nUsage: (aset-long array idx val)\n       (aset-long array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of long. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3952)  \n\n## aset-short\n\n```\nUsage: (aset-short array idx val)\n       (aset-short array idx idx2 & idxv)\n```\n\n```\nSets the value at the index/indices. Works on arrays of short. Returns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3972)  \n\n## assert\n\n```\nUsage: (assert x)\n       (assert x message)\n```\n\n```\nEvaluates expr and throws an exception if it does not evaluate to\nlogical true.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4841)  \n\n## assoc\n\n```\nUsage: (assoc map key val)\n       (assoc map key val & kvs)\n```\n\n```\nassoc[iate]. When applied to a map, returns a new map of the\nsame (hashed/sorted) type, that contains the mapping of key(s) to\nval(s). When applied to a vector, returns a new vector that\ncontains val at index. Note - index must be <= (count vector).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L183)  \n\n## assoc!\n\n```\nUsage: (assoc! coll key val)\n       (assoc! coll key val & kvs)\n```\n\n```\nWhen applied to a transient map, adds mapping of key(s) to\nval(s). When applied to a transient vector, sets the val at index.\nNote - index must be <= (count vector). Returns coll.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3369)  \n\n## assoc-in\n\n```\nUsage: (assoc-in m [k & ks] v)\n```\n\n```\nAssociates a value in a nested associative structure, where ks is a\nsequence of keys and v is the new value and returns a new nested structure.\nIf any levels do not exist, hash-maps will be created.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6196)  \n\n## associative?\n\n```\nUsage: (associative? coll)\n```\n\n```\nReturns true if coll implements Associative\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6279)  \n\n## atom\n\n```\nUsage: (atom x)\n       (atom x & options)\n```\n\n```\nCreates and returns an Atom with an initial value of x and zero or\nmore options (in any order):\n\n:meta metadata-map\n\n:validator validate-fn\n\nIf metadata-map is supplied, it will become the metadata on the\natom. validate-fn must be nil or a side-effect-free fn of one\nargument, which will be passed the intended new state on any state\nchange. If the new state is unacceptable, the validate-fn should\nreturn false or throw an exception.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2344)  \n\n## await\n\n```\nUsage: (await & agents)\n```\n\n```\nBlocks the current thread (indefinitely!) until all actions\ndispatched thus far, from this thread or agent, to the agent(s) have\noccurred.  Will block on failed agents.  Will never return if\na failed agent is restarted with :clear-actions true or shutdown-agents was called.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3275)  \n\n## await-for\n\n```\nUsage: (await-for timeout-ms & agents)\n```\n\n```\nBlocks the current thread until all actions dispatched thus\nfar (from this thread or agent) to the agents have occurred, or the\ntimeout (in milliseconds) has elapsed. Returns logical false if\nreturning due to timeout, logical true otherwise.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3297)  \n\n## bases\n\n```\nUsage: (bases c)\n```\n\n```\nReturns the immediate superclass and direct interfaces of c, if any\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5568)  \n\n## bean\n\n```\nUsage: (bean x)\n```\n\n```\nTakes a Java object and returns a read-only implementation of the\nmap abstraction based upon its JavaBean properties.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L403)  \n\n## bigdec\n\n```\nUsage: (bigdec x)\n```\n\n```\nCoerce to BigDecimal\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3648)  \n\n## bigint\n\n```\nUsage: (bigint x)\n```\n\n```\nCoerce to BigInt\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3620)  \n\n## biginteger\n\n```\nUsage: (biginteger x)\n```\n\n```\nCoerce to BigInteger\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3634)  \n\n## binding\n\n```\nUsage: (binding bindings & body)\n```\n\n```\nbinding => var-symbol init-expr\n\nCreates new bindings for the (already-existing) vars, with the\nsupplied initial values, executes the exprs in an implicit do, then\nre-establishes the bindings that existed before.  The new bindings\nare made in parallel (unlike let); all init-exprs are evaluated\nbefore the vars are bound to their new values.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1964)  \n\n## bit-and\n\n```\nUsage: (bit-and x y)\n       (bit-and x y & more)\n```\n\n```\nBitwise and\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1307)  \n\n## bit-and-not\n\n```\nUsage: (bit-and-not x y)\n       (bit-and-not x y & more)\n```\n\n```\nBitwise and with complement\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1334)  \n\n## bit-clear\n\n```\nUsage: (bit-clear x n)\n```\n\n```\nClear bit at index n\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1345)  \n\n## bit-flip\n\n```\nUsage: (bit-flip x n)\n```\n\n```\nFlip bit at index n\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1357)  \n\n## bit-not\n\n```\nUsage: (bit-not x)\n```\n\n```\nBitwise complement\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1300)  \n\n## bit-or\n\n```\nUsage: (bit-or x y)\n       (bit-or x y & more)\n```\n\n```\nBitwise or\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1316)  \n\n## bit-set\n\n```\nUsage: (bit-set x n)\n```\n\n```\nSet bit at index n\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1351)  \n\n## bit-shift-left\n\n```\nUsage: (bit-shift-left x n)\n```\n\n```\nBitwise shift left\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1370)  \n\n## bit-shift-right\n\n```\nUsage: (bit-shift-right x n)\n```\n\n```\nBitwise shift right\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1376)  \n\n## bit-test\n\n```\nUsage: (bit-test x n)\n```\n\n```\nTest bit at index n\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1363)  \n\n## bit-xor\n\n```\nUsage: (bit-xor x y)\n       (bit-xor x y & more)\n```\n\n```\nBitwise exclusive or\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1325)  \n\n## boolean\n\n```\nUsage: (boolean x)\n```\n\n```\nCoerce to boolean\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1620)  \n\n## boolean-array\n\n```\nUsage: (boolean-array size-or-seq)\n       (boolean-array size init-val-or-seq)\n```\n\n```\nCreates an array of booleans\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5310)  \n\n## boolean?\n\n```\nUsage: (boolean? x)\n```\n\n```\nReturn true if x is a Boolean\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L521)  \n\n## booleans\n\n```\nUsage: (booleans xs)\n```\n\n```\nCasts to boolean[]\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5373)  \n\n## bound-fn\n\n```\nUsage: (bound-fn & fntail)\n```\n\n```\nReturns a function defined by the given fntail, which will install the\nsame bindings in effect as in the thread at the time bound-fn was called.\nThis may be used to define a helper function which runs on a different\nthread, but needs the same bindings in place.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2023)  \n\n## bound-fn\\*\n\n```\nUsage: (bound-fn* f)\n```\n\n```\nReturns a function, which will install the same bindings in effect as in\nthe thread at the time bound-fn* was called and then call f with any given\narguments. This may be used to define a helper function which runs on a\ndifferent thread, but needs the same bindings in place.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2011)  \n\n## bound?\n\n```\nUsage: (bound? & vars)\n```\n\n```\nReturns true if all of the vars provided as arguments have any bound value, root or thread-local.\nImplies that deref'ing the provided vars will succeed. Returns true if no vars are provided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5537)  \n\n## bounded-count\n\n```\nUsage: (bounded-count n coll)\n```\n\n```\nIf coll is counted? returns its count, else will count at most the first n\nelements of coll using its seq\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7452)  \n\n## butlast\n\n```\nUsage: (butlast coll)\n```\n\n```\nReturn a seq of all but the last item in coll, in linear time\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L274)  \n\n## byte\n\n```\nUsage: (byte x)\n```\n\n```\nCoerce to byte\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3505)  \n\n## byte-array\n\n```\nUsage: (byte-array size-or-seq)\n       (byte-array size init-val-or-seq)\n```\n\n```\nCreates an array of bytes\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5318)  \n\n## bytes\n\n```\nUsage: (bytes xs)\n```\n\n```\nCasts to bytes[]\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5378)  \n\n## bytes?\n\n```\nUsage: (bytes? x)\n```\n\n```\nReturn true if x is a byte array\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5413)  \n\n## case\n\n```\nUsage: (case e & clauses)\n```\n\n```\nTakes an expression, and a set of clauses.\n\nEach clause can take the form of either:\n\ntest-constant result-expr\n\n(test-constant1 ... test-constantN)  result-expr\n\nThe test-constants are not evaluated. They must be compile-time\nliterals, and need not be quoted.  If the expression is equal to a\ntest-constant, the corresponding result-expr is returned. A single\ndefault expression can follow the clauses, and its value will be\nreturned if no clause matches. If no default expression is provided\nand no clause matches, an IllegalArgumentException is thrown.\n\nUnlike cond and condp, case does a constant-time dispatch, the\nclauses are not considered sequentially.  All manner of constant\nexpressions are acceptable in case, including numbers, strings,\nsymbols, keywords, and (Clojure) composites thereof. Note that since\nlists are used to group multiple constants that map to the same\nexpression, a vector can be used to match a list if needed. The\ntest-constants need not be all of the same type.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6748)  \n\n## cast\n\n```\nUsage: (cast c x)\n```\n\n```\nThrows a ClassCastException if x is not a c, else returns x.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L348)  \n\n## cat\n\n```\nUsage: (cat rf)\n```\n\n```\nA transducer which concatenates the contents of each input, which must be a\ncollection, into the reduction.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7687)  \n\n## catch\n\n```\nSyntax for use with try.\n\nPlease see https://clojure.org/reference/special_forms#try\n```\n\nAdded in Clojure version 1.0\n\n## char\n\n```\nUsage: (char x)\n```\n\n```\nCoerce to char\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3511)  \n\n## char-array\n\n```\nUsage: (char-array size-or-seq)\n       (char-array size init-val-or-seq)\n```\n\n```\nCreates an array of chars\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5326)  \n\n## char-escape-string\n\n```\nReturns escape string for char or nil if none\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L200)  \n\n## char-name-string\n\n```\nReturns name string for char or nil if none\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L342)  \n\n## char?\n\n```\nUsage: (char? x)\n```\n\n```\nReturn true if x is a Character\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L155)  \n\n## chars\n\n```\nUsage: (chars xs)\n```\n\n```\nCasts to chars[]\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5383)  \n\n## class\n\n```\nUsage: (class x)\n```\n\n```\nReturns the Class of x\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3461)  \n\n## class?\n\n```\nUsage: (class? x)\n```\n\n```\nReturns true if x is an instance of Class\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5468)  \n\n## clear-agent-errors\n\n```\nUsage: (clear-agent-errors a)\n```\n\n```\nDEPRECATED: Use 'restart-agent' instead.\nClears any exceptions thrown during asynchronous actions of the\nagent, allowing subsequent actions to occur.\n```\n\nAdded in Clojure version 1.0\n\nDeprecated since Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2263)  \n\n## clojure-version\n\n```\nUsage: (clojure-version)\n```\n\n```\nReturns clojure version as a printable string.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7149)  \n\n## coll?\n\n```\nUsage: (coll? x)\n```\n\n```\nReturns true if x implements IPersistentCollection\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6248)  \n\n## comment\n\n```\nUsage: (comment & body)\n```\n\n```\nIgnores body, yields nil\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4735)  \n\n## commute\n\n```\nUsage: (commute ref fun & args)\n```\n\n```\nMust be called in a transaction. Sets the in-transaction-value of\nref to:\n\n(apply fun in-transaction-value-of-ref args)\n\nand returns the in-transaction-value of ref.\n\nAt the commit point of the transaction, sets the value of ref to be:\n\n(apply fun most-recently-committed-value-of-ref args)\n\nThus fun should be commutative, or, failing that, you must accept\nlast-one-in-wins behavior.  commute allows for more concurrency than\nref-set.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2439)  \n\n## comp\n\n```\nUsage: (comp)\n       (comp f)\n       (comp f g)\n       (comp f g & fs)\n```\n\n```\nTakes a set of functions and returns a fn that is the composition\nof those fns.  The returned fn takes a variable number of args,\napplies the rightmost of fns to the args, the next\nfn (right-to-left) to the result, etc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2574)  \n\n## comparator\n\n```\nUsage: (comparator pred)\n```\n\n```\nReturns an implementation of java.util.Comparator based upon pred.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3095)  \n\n## compare\n\n```\nUsage: (compare x y)\n```\n\n```\nComparator. Returns a negative number, zero, or a positive number\nwhen x is logically 'less than', 'equal to', or 'greater than'\ny. Same as Java x.compareTo(y) except it also works for nil, and\ncompares numbers and collections in a type-independent manner. x\nmust implement Comparable\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L833)  \n\n## compare-and-set!\n\n```\nUsage: (compare-and-set! atom oldval newval)\n```\n\n```\nAtomically sets the value of atom to newval if and only if the\ncurrent value of the atom is identical to oldval. Returns true if\nset happened, else false\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2385)  \n\n## compile\n\n```\nUsage: (compile lib)\n```\n\n```\nCompiles the namespace named by the symbol lib into a set of\nclassfiles. The source for the lib must be in a proper\nclasspath-relative directory. The output files will go into the\ndirectory specified by *compile-path*, and that directory too must\nbe in the classpath.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6163)  \n\n## complement\n\n```\nUsage: (complement f)\n```\n\n```\nTakes a fn f and returns a fn that takes the same arguments as f,\nhas the same effects, if any, and returns the opposite truth value.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1447)  \n\n## completing\n\n```\nUsage: (completing f)\n       (completing f cf)\n```\n\n```\nTakes a reducing function f of 2 args and returns a fn suitable for\ntransduce by adding an arity-1 signature that calls cf (default -\nidentity) on the result argument.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6921)  \n\n## concat\n\n```\nUsage: (concat)\n       (concat x)\n       (concat x y)\n       (concat x y & zs)\n```\n\n```\nReturns a lazy seq representing the concatenation of the elements in the supplied colls.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L720)  \n\n## cond\n\n```\nUsage: (cond & clauses)\n```\n\n```\nTakes a set of test/expr pairs. It evaluates each test one at a\ntime.  If a test returns logical true, cond evaluates and returns\nthe value of the corresponding expr and doesn't evaluate any of the\nother tests or exprs. (cond) returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L576)  \n\n## cond-\\>\n\n```\nUsage: (cond-> expr & clauses)\n```\n\n```\nTakes an expression and a set of test/form pairs. Threads expr (via ->)\nthrough each form for which the corresponding test\nexpression is true. Note that, unlike cond branching, cond-> threading does\nnot short circuit after the first true test expression.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7606)  \n\n## cond-\\>\\>\n\n```\nUsage: (cond->> expr & clauses)\n```\n\n```\nTakes an expression and a set of test/form pairs. Threads expr (via ->>)\nthrough each form for which the corresponding test expression\nis true.  Note that, unlike cond branching, cond->> threading does not short circuit\nafter the first true test expression.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7623)  \n\n## condp\n\n```\nUsage: (condp pred expr & clauses)\n```\n\n```\nTakes a binary predicate, an expression, and a set of clauses.\nEach clause can take the form of either:\n\ntest-expr result-expr\n\ntest-expr :>> result-fn\n\nNote :>> is an ordinary keyword.\n\nFor each clause, (pred test-expr expr) is evaluated. If it returns\nlogical true, the clause is a match. If a binary clause matches, the\nresult-expr is returned, if a ternary clause matches, its result-fn,\nwhich must be a unary function, is called with the result of the\npredicate as its argument, the result of that call being the return\nvalue of condp. A single default expression can follow the clauses,\nand its value will be returned if no clause matches. If no default\nexpression is provided and no clause matches, an\nIllegalArgumentException is thrown.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6394)  \n\n## conj\n\n```\nUsage: (conj)\n       (conj coll)\n       (conj coll x)\n       (conj coll x & xs)\n```\n\n```\nconj[oin]. Returns a new collection with the xs\n'added'. (conj nil item) returns (item).\n(conj coll) returns coll. (conj) returns [].\nThe 'addition' may happen at different 'places' depending\non the concrete type.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L75)  \n\n## conj!\n\n```\nUsage: (conj!)\n       (conj! coll)\n       (conj! coll x)\n```\n\n```\nAdds x to the transient collection, and return coll. The 'addition'\nmay happen at different 'places' depending on the concrete type.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3359)  \n\n## cons\n\n```\nUsage: (cons x seq)\n```\n\n```\nReturns a new seq where x is the first element and seq is\nthe rest.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L22)  \n\n## constantly\n\n```\nUsage: (constantly x)\n```\n\n```\nReturns a function that takes any number of arguments and returns x.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1459)  \n\n## construct-proxy\n\n```\nUsage: (construct-proxy c & ctor-args)\n```\n\n```\nTakes a proxy class and any arguments for its superclass ctor and\ncreates and returns an instance of the proxy.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L295)  \n\n## contains?\n\n```\nUsage: (contains? coll key)\n```\n\n```\nReturns true if key is present in the given collection, otherwise\nreturns false.  Note that for numerically indexed collections like\nvectors and Java arrays, this tests if the numeric key is within the\nrange of indexes. 'contains?' operates constant or logarithmic time;\nit will not perform a linear search for a value.  See also 'some'.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1498)  \n\n## count\n\n```\nUsage: (count coll)\n```\n\n```\nReturns the number of items in the collection. (count nil) returns\n0.  Also works on strings, arrays, and Java Collections and Maps\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L876)  \n\n## counted?\n\n```\nUsage: (counted? coll)\n```\n\n```\nReturns true if coll implements count in constant time\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6297)  \n\n## create-ns\n\n```\nUsage: (create-ns sym)\n```\n\n```\nCreate a new namespace named by the symbol if one doesn't already\nexist, returns it or the already-existing namespace of the same\nname.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4133)  \n\n## create-struct\n\n```\nUsage: (create-struct & keys)\n```\n\n```\nReturns a structure basis object.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4039)  \n\n## cycle\n\n```\nUsage: (cycle coll)\n```\n\n```\nReturns a lazy (infinite!) sequence of repetitions of the items in coll.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2996)  \n\n## dec\n\n```\nUsage: (dec x)\n```\n\n```\nReturns a number one less than num. Does not auto-promote\nlongs, will throw on overflow. See also: dec'\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1156)  \n\n## dec'\n\n```\nUsage: (dec' x)\n```\n\n```\nReturns a number one less than num. Supports arbitrary precision.\nSee also: dec\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1149)  \n\n## decimal?\n\n```\nUsage: (decimal? n)\n```\n\n```\nReturns true if n is a BigDecimal\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3599)  \n\n## declare\n\n```\nUsage: (declare & names)\n```\n\n```\ndefs the supplied var names with no bindings, useful for making forward declarations.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2793)  \n\n## dedupe\n\n```\nUsage: (dedupe)\n       (dedupe coll)\n```\n\n```\nReturns a lazy sequence removing consecutive duplicates in coll.\nReturns a transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7723)  \n\n## def\n\n```\nUsage: (def symbol doc-string? init?)\n```\n\n```\nCreates and interns a global var with the name\nof symbol in the current namespace (*ns*) or locates such a var if\nit already exists.  If init is supplied, it is evaluated, and the\nroot binding of the var is set to the resulting value.  If init is\nnot supplied, the root binding of the var is unaffected.\n\nPlease see https://clojure.org/reference/special_forms#def\n```\n\nAdded in Clojure version 1.0\n\n## default-data-readers\n\n```\nDefault map of data reader functions provided by Clojure. May be\noverridden by binding *data-readers*.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7864)  \n\n## definline\n\n```\nUsage: (definline name & decl)\n```\n\n```\nExperimental - like defmacro, except defines a named function whose\nbody is the expansion, calls to which may be expanded inline as if\nit were a macro. Cannot be used with variadic (&) args.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5254)  \n\n## definterface\n\n```\nUsage: (definterface name & sigs)\n```\n\n```\nCreates a new Java interface with the given name and method sigs.\nThe method return types and parameter types may be specified with type hints,\ndefaulting to Object if omitted.\n\n(definterface MyInterface\n  (^int method1 [x])\n  (^Bar method2 [^Baz b ^Quux q]))\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L20)  \n\n## defmacro\n\n```\nUsage: (defmacro name doc-string? attr-map? [params*] body)\n       (defmacro name doc-string? attr-map? ([params*] body) + attr-map?)\n```\n\n```\nLike defn, but the resulting function name is declared as a\nmacro and will be used as a macro by the compiler when it is\ncalled.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L446)  \n\n## defmethod\n\n```\nUsage: (defmethod multifn dispatch-val & fn-tail)\n```\n\n```\nCreates and installs a new method of multimethod associated with dispatch-value. \n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1800)  \n\n## defmulti\n\n```\nUsage: (defmulti name docstring? attr-map? dispatch-fn & options)\n```\n\n```\nCreates a new multimethod with the associated dispatch function.\nThe docstring and attr-map are optional.\n\nOptions are key-value pairs and may be one of:\n\n:default\n\nThe default dispatch value, defaults to :default\n\n:hierarchy\n\nThe value used for hierarchical dispatch (e.g. ::square is-a ::shape)\n\nHierarchies are type-like relationships that do not depend upon type\ninheritance. By default Clojure's multimethods dispatch off of a\nglobal hierarchy map.  However, a hierarchy relationship can be\ncreated with the derive function used to augment the root ancestor\ncreated with make-hierarchy.\n\nMultimethods expect the value of the hierarchy option to be supplied as\na reference type e.g. a var (i.e. via the Var-quote dispatch macro #'\nor the var special form).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1742)  \n\n## defn\n\n```\nUsage: (defn name doc-string? attr-map? [params*] prepost-map? body)\n       (defn name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?)\n```\n\n```\nSame as (def name (fn [params* ] exprs*)) or (def\nname (fn ([params* ] exprs*)+)) with any doc-string or attrs added\nto the var metadata. prepost-map defines a map with optional keys\n:pre and :post that contain collections of pre or post conditions.\n```\n\n```\nSpecs:\n  Args: (cat\n         :fn-name simple-symbol?\n         :docstring (? string?)\n         :meta (? map?)\n         :fn-tail (alt\n                   :arity-1 :clojure.core.specs.alpha/params+body\n                   :arity-n (cat\n                             :bodies (+\n                                       (spec\n                                         :clojure.core.specs.alpha/params+body))\n                             :attr-map (? map?))))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L285)  \n\n## defn-\n\n```\nUsage: (defn- name & decls)\n```\n\n```\nsame as defn, yielding non-public def\n```\n\n```\nSpecs:\n  Args: (cat\n         :fn-name simple-symbol?\n         :docstring (? string?)\n         :meta (? map?)\n         :fn-tail (alt\n                   :arity-1 :clojure.core.specs.alpha/params+body\n                   :arity-n (cat\n                             :bodies (+\n                                       (spec\n                                         :clojure.core.specs.alpha/params+body))\n                             :attr-map (? map?))))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4950)  \n\n## defonce\n\n```\nUsage: (defonce name expr)\n```\n\n```\ndefs name to have the root value of the expr iff the named var has no root value,\nelse expr is unevaluated\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5853)  \n\n## defprotocol\n\n```\nUsage: (defprotocol name & opts+sigs)\n```\n\n```\nA protocol is a named set of named methods and their signatures:\n(defprotocol AProtocolName\n\n  ;optional doc string\n  \"A doc string for AProtocol abstraction\"\n\n ;options\n :extend-via-metadata true\n\n;method signatures\n  (bar [this a b] \"bar docs\")\n  (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\nNo implementations are provided. Docs can be specified for the\nprotocol overall and for each method. The above yields a set of\npolymorphic functions and a protocol object. All are\nnamespace-qualified by the ns enclosing the definition The resulting\nfunctions dispatch on the type of their first argument, which is\nrequired and corresponds to the implicit target object ('this' in \nJava parlance). defprotocol is dynamic, has no special compile-time \neffect, and defines no new types or classes. Implementations of \nthe protocol methods can be provided using extend.\n\nWhen :extend-via-metadata is true, values can extend protocols by\nadding metadata where keys are fully-qualified protocol function\nsymbols and values are function implementations. Protocol\nimplementations are checked first for direct definitions (defrecord,\ndeftype, reify), then metadata definitions, then external\nextensions (extend, extend-type, extend-protocol)\n\ndefprotocol will automatically generate a corresponding interface,\nwith the same name as the protocol, i.e. given a protocol:\nmy.ns/Protocol, an interface: my.ns.Protocol. The interface will\nhave methods corresponding to the protocol functions, and the\nprotocol will automatically work with instances of the interface.\n\nNote that you should not use this interface with deftype or\nreify, as they support the protocol directly:\n\n(defprotocol P \n  (foo [this]) \n  (bar-me [this] [this y]))\n\n(deftype Foo [a b c] \n P\n  (foo [this] a)\n  (bar-me [this] b)\n  (bar-me [this y] (+ c y)))\n\n(bar-me (Foo. 1 2 3) 42)\n=> 45\n\n(foo \n  (let [x 42]\n    (reify P \n      (foo [this] 17)\n      (bar-me [this] x)\n      (bar-me [this y] x))))\n=> 17\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L713)  \n\n## defrecord\n\n```\nUsage: (defrecord name [& fields] & opts+specs)\n```\n\n```\n(defrecord name [fields*]  options* specs*)\n\nOptions are expressed as sequential keywords and arguments (in any order).\n\nSupported options:\n:load-ns - if true, importing the record class will cause the\n           namespace in which the record was defined to be loaded.\n           Defaults to false.\n\nEach spec consists of a protocol or interface name followed by zero\nor more method bodies:\n\nprotocol-or-interface-or-Object\n(methodName [args*] body)*\n\nDynamically generates compiled bytecode for class with the given\nname, in a package with the same name as the current namespace, the\ngiven fields, and, optionally, methods for protocols and/or\ninterfaces.\n\nThe class will have the (immutable) fields named by\nfields, which can have type hints. Protocols/interfaces and methods\nare optional. The only methods that can be supplied are those\ndeclared in the protocols/interfaces.  Note that method bodies are\nnot closures, the local environment includes only the named fields,\nand those fields can be accessed directly.\n\nMethod definitions take the form:\n\n(methodname [args*] body)\n\nThe argument and return types can be hinted on the arg and\nmethodname symbols. If not supplied, they will be inferred, so type\nhints should be reserved for disambiguation.\n\nMethods should be supplied for all methods of the desired\nprotocol(s) and interface(s). You can also define overrides for\nmethods of Object. Note that a parameter must be supplied to\ncorrespond to the target object ('this' in Java parlance). Thus\nmethods for interfaces will take one more argument than do the\ninterface declarations. Note also that recur calls to the method\nhead should *not* pass the target object, it will be supplied\nautomatically and can not be substituted.\n\nIn the method bodies, the (unqualified) name can be used to name the\nclass (for calls to new, instance? etc).\n\nThe class will have implementations of several (clojure.lang)\ninterfaces generated automatically: IObj (metadata support) and\nIPersistentMap, and all of their superinterfaces.\n\nIn addition, defrecord will define type-and-value-based =,\nand will defined Java .hashCode and .equals consistent with the\ncontract for java.util.Map.\n\nWhen AOT compiling, generates compiled bytecode for a class with the\ngiven name (a symbol), prepends the current ns as the package, and\nwrites the .class file to the *compile-path* directory.\n\nTwo constructors will be defined, one taking the designated fields\nfollowed by a metadata map (nil for none) and an extension field\nmap (nil for none), and one taking only the fields (using nil for\nmeta and extension fields). Note that the field names __meta,\n__extmap, __hash and __hasheq are currently reserved and should not\nbe used when defining your own records.\n\nGiven (defrecord TypeName ...), two factory functions will be\ndefined: ->TypeName, taking positional parameters for the fields,\nand map->TypeName, taking a map of keywords to field values.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L313)  \n\n## defstruct\n\n```\nUsage: (defstruct name & keys)\n```\n\n```\nSame as (def name (create-struct keys...))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4046)  \n\n## deftype\n\n```\nUsage: (deftype name [& fields] & opts+specs)\n```\n\n```\n(deftype name [fields*]  options* specs*)\n\nOptions are expressed as sequential keywords and arguments (in any order).\n\nSupported options:\n:load-ns - if true, importing the type class will cause the\n           namespace in which the type was defined to be loaded.\n           Defaults to false.\n\nEach spec consists of a protocol or interface name followed by zero\nor more method bodies:\n\nprotocol-or-interface-or-Object\n(methodName [args*] body)*\n\nDynamically generates compiled bytecode for class with the given\nname, in a package with the same name as the current namespace, the\ngiven fields, and, optionally, methods for protocols and/or\ninterfaces. \n\nThe class will have the (by default, immutable) fields named by\nfields, which can have type hints. Protocols/interfaces and methods\nare optional. The only methods that can be supplied are those\ndeclared in the protocols/interfaces.  Note that method bodies are\nnot closures, the local environment includes only the named fields,\nand those fields can be accessed directly. Fields can be qualified\nwith the metadata :volatile-mutable true or :unsynchronized-mutable\ntrue, at which point (set! afield aval) will be supported in method\nbodies. Note well that mutable fields are extremely difficult to use\ncorrectly, and are present only to facilitate the building of higher\nlevel constructs, such as Clojure's reference types, in Clojure\nitself. They are for experts only - if the semantics and\nimplications of :volatile-mutable or :unsynchronized-mutable are not\nimmediately apparent to you, you should not be using them.\n\nMethod definitions take the form:\n\n(methodname [args*] body)\n\nThe argument and return types can be hinted on the arg and\nmethodname symbols. If not supplied, they will be inferred, so type\nhints should be reserved for disambiguation.\n\nMethods should be supplied for all methods of the desired\nprotocol(s) and interface(s). You can also define overrides for\nmethods of Object. Note that a parameter must be supplied to\ncorrespond to the target object ('this' in Java parlance). Thus\nmethods for interfaces will take one more argument than do the\ninterface declarations. Note also that recur calls to the method\nhead should *not* pass the target object, it will be supplied\nautomatically and can not be substituted.\n\nIn the method bodies, the (unqualified) name can be used to name the\nclass (for calls to new, instance? etc).\n\nWhen AOT compiling, generates compiled bytecode for a class with the\ngiven name (a symbol), prepends the current ns as the package, and\nwrites the .class file to the *compile-path* directory.\n\nOne constructor will be defined, taking the designated fields.  Note\nthat the field names __meta, __extmap, __hash and __hasheq are currently\nreserved and should not be used when defining your own types.\n\nGiven (deftype TypeName ...), a factory function called ->TypeName\nwill be defined, taking positional parameters for the fields\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L423)  \n\n## delay\n\n```\nUsage: (delay & body)\n```\n\n```\nTakes a body of expressions and yields a Delay object that will\ninvoke the body only the first time it is forced (with force or deref/@), and\nwill cache the result and return it on all subsequent force\ncalls. See also - realized?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L748)  \n\n## delay?\n\n```\nUsage: (delay? x)\n```\n\n```\nreturns true if x is a Delay created with delay\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L757)  \n\n## deliver\n\n```\nUsage: (deliver promise val)\n```\n\n```\nDelivers the supplied value to the promise, releasing any pending\nderefs. A subsequent call to deliver on a promise will have no effect.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7195)  \n\n## denominator\n\n```\nUsage: (denominator r)\n```\n\n```\nReturns the denominator part of a Ratio.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3591)  \n\n## deref\n\n```\nUsage: (deref ref)\n       (deref ref timeout-ms timeout-val)\n```\n\n```\nAlso reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,\nreturns the in-transaction-value of ref, else returns the\nmost-recently-committed value of ref. When applied to a var, agent\nor atom, returns its current state. When applied to a delay, forces\nit if not already forced. When applied to a future, will block if\ncomputation not complete. When applied to a promise, will block\nuntil a value is delivered.  The variant taking a timeout can be\nused for blocking references (futures and promises), and will return\ntimeout-val if the timeout (in milliseconds) is reached before a\nvalue is available. See also - realized?.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2323)  \n\n## derive\n\n```\nUsage: (derive tag parent)\n       (derive h tag parent)\n```\n\n```\nEstablishes a parent/child relationship between parent and\ntag. Parent must be a namespace-qualified symbol or keyword and\nchild can be either a namespace-qualified symbol or keyword or a\nclass. h must be a hierarchy obtained from make-hierarchy, if not\nsupplied defaults to, and modifies, the global hierarchy.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5651)  \n\n## descendants\n\n```\nUsage: (descendants tag)\n       (descendants h tag)\n```\n\n```\nReturns the immediate and indirect children of tag, through a\nrelationship established via derive. h must be a hierarchy obtained\nfrom make-hierarchy, if not supplied defaults to the global\nhierarchy. Note: does not work on Java type inheritance\nrelationships.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5639)  \n\n## disj\n\n```\nUsage: (disj set)\n       (disj set key)\n       (disj set key & ks)\n```\n\n```\ndisj[oin]. Returns a new set of the same (hashed/sorted) type, that\ndoes not contain key(s).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1533)  \n\n## disj!\n\n```\nUsage: (disj! set)\n       (disj! set key)\n       (disj! set key & ks)\n```\n\n```\ndisj[oin]. Returns a transient set of the same (hashed/sorted) type, that\ndoes not contain key(s).\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3401)  \n\n## dissoc\n\n```\nUsage: (dissoc map)\n       (dissoc map key)\n       (dissoc map key & ks)\n```\n\n```\ndissoc[iate]. Returns a new map of the same (hashed/sorted) type,\nthat does not contain a mapping for key(s).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1519)  \n\n## dissoc!\n\n```\nUsage: (dissoc! map key)\n       (dissoc! map key & ks)\n```\n\n```\nReturns a transient map that doesn't contain a mapping for key(s).\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3382)  \n\n## distinct\n\n```\nUsage: (distinct)\n       (distinct coll)\n```\n\n```\nReturns a lazy sequence of the elements of coll with duplicates removed.\nReturns a stateful transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5054)  \n\n## distinct?\n\n```\nUsage: (distinct? x)\n       (distinct? x y)\n       (distinct? x y & more)\n```\n\n```\nReturns true if no two of the arguments are =\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5710)  \n\n## do\n\n```\nUsage: (do exprs*)\n```\n\n```\nEvaluates the expressions in order and returns the value of\nthe last. If no expressions are supplied, returns nil.\n\nPlease see https://clojure.org/reference/special_forms#do\n```\n\nAdded in Clojure version 1.0\n\n## doall\n\n```\nUsage: (doall coll)\n       (doall n coll)\n```\n\n```\nWhen lazy sequences are produced via functions that have side\neffects, any effects other than those needed to produce the first\nelement in the seq do not occur until the seq is consumed. doall can\nbe used to force any effects. Walks through the successive nexts of\nthe seq, retains the head and returns it, thus causing the entire\nseq to reside in memory at one time.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3149)  \n\n## dorun\n\n```\nUsage: (dorun coll)\n       (dorun n coll)\n```\n\n```\nWhen lazy sequences are produced via functions that have side\neffects, any effects other than those needed to produce the first\nelement in the seq do not occur until the seq is consumed. dorun can\nbe used to force any effects. Walks through the successive nexts of\nthe seq, does not retain the head and returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3134)  \n\n## doseq\n\n```\nUsage: (doseq seq-exprs & body)\n```\n\n```\nRepeatedly executes body (presumably for side-effects) with\nbindings and filtering as provided by \"for\".  Does not retain\nthe head of the sequence. Returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3217)  \n\n## dosync\n\n```\nUsage: (dosync & exprs)\n```\n\n```\nRuns the exprs (in an implicit do) in a transaction that encompasses\nexprs and any nested calls.  Starts a transaction if none is already\nrunning on this thread. Any uncaught exception will abort the\ntransaction and flow out of dosync. The exprs may be run more than\nonce, but any effects on Refs will be atomic.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5101)  \n\n## dotimes\n\n```\nUsage: (dotimes bindings & body)\n```\n\n```\nbindings => name n\n\nRepeatedly executes body (presumably for side-effects) with name\nbound to integers from 0 through n-1.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3314)  \n\n## doto\n\n```\nUsage: (doto x & forms)\n```\n\n```\nEvaluates x then calls all of the methods and functions with the\nvalue of x supplied at the front of the given arguments.  The forms\nare evaluated in order.  Returns x.\n\n(doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3853)  \n\n## double\n\n```\nUsage: (double x)\n```\n\n```\nCoerce to double\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3493)  \n\n## double-array\n\n```\nUsage: (double-array size-or-seq)\n       (double-array size init-val-or-seq)\n```\n\n```\nCreates an array of doubles\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5342)  \n\n## double?\n\n```\nUsage: (double? x)\n```\n\n```\nReturn true if x is a Double\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1440)  \n\n## doubles\n\n```\nUsage: (doubles xs)\n```\n\n```\nCasts to double[]\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5403)  \n\n## drop\n\n```\nUsage: (drop n)\n       (drop n coll)\n```\n\n```\nReturns a lazy sequence of all but the first n items in coll.\nReturns a stateful transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2926)  \n\n## drop-last\n\n```\nUsage: (drop-last coll)\n       (drop-last n coll)\n```\n\n```\nReturn a lazy sequence of all but the last n (default 1) items in coll\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2951)  \n\n## drop-while\n\n```\nUsage: (drop-while pred)\n       (drop-while pred coll)\n```\n\n```\nReturns a lazy sequence of the items in coll starting from the\nfirst item for which (pred item) returns logical false.  Returns a\nstateful transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2969)  \n\n## eduction\n\n```\nUsage: (eduction xform* coll)\n```\n\n```\nReturns a reducible/iterable application of the transducers\nto the items in coll. Transducers are applied in order as if\ncombined with comp. Note that these applications will be\nperformed every time reduce/iterator is called.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7762)  \n\n## empty\n\n```\nUsage: (empty coll)\n```\n\n```\nReturns an empty collection of the same category as coll, or nil\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5266)  \n\n## empty?\n\n```\nUsage: (empty? coll)\n```\n\n```\nReturns true if coll has no items - same as (not (seq coll)).\nPlease use the idiom (seq x) rather than (not (empty? x))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6241)  \n\n## ensure\n\n```\nUsage: (ensure ref)\n```\n\n```\nMust be called in a transaction. Protects the ref from modification\nby other transactions.  Returns the in-transaction-value of\nref. Allows for more concurrency than (ref-set ref @ref)\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2505)  \n\n## ensure-reduced\n\n```\nUsage: (ensure-reduced x)\n```\n\n```\nIf x is already reduced?, returns it, else returns (reduced x)\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2866)  \n\n## enumeration-seq\n\n```\nUsage: (enumeration-seq e)\n```\n\n```\nReturns a seq on a java.util.Enumeration\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5756)  \n\n## error-handler\n\n```\nUsage: (error-handler a)\n```\n\n```\nReturns the error-handler of agent a, or nil if there is none.\nSee set-error-handler!\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2221)  \n\n## error-mode\n\n```\nUsage: (error-mode a)\n```\n\n```\nReturns the error-mode of agent a.  See set-error-mode!\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2246)  \n\n## eval\n\n```\nUsage: (eval form)\n```\n\n```\nEvaluates the form data structure (not text!) and returns the result.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3211)  \n\n## even?\n\n```\nUsage: (even? n)\n```\n\n```\nReturns true if n is even, throws an exception if n is not an integer\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1400)  \n\n## every-pred\n\n```\nUsage: (every-pred p)\n       (every-pred p1 p2)\n       (every-pred p1 p2 p3)\n       (every-pred p1 p2 p3 & ps)\n```\n\n```\nTakes a set of predicates and returns a function f that returns true if all of its\ncomposing predicates return a logical true value against all of its arguments, else it returns\nfalse. Note that f is short-circuiting in that it will stop execution on the first\nargument that triggers a logical false result against the original predicates.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7464)  \n\n## every?\n\n```\nUsage: (every? pred coll)\n```\n\n```\nReturns true if (pred x) is logical true for every x in coll, else\nfalse.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2689)  \n\n## ex-cause\n\n```\nUsage: (ex-cause ex)\n```\n\n```\nReturns the cause of ex if ex is a Throwable.\nOtherwise returns nil.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4832)  \n\n## ex-data\n\n```\nUsage: (ex-data ex)\n```\n\n```\nReturns exception data (a map) if ex is an IExceptionInfo.\nOtherwise returns nil.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4816)  \n\n## ex-info\n\n```\nUsage: (ex-info msg map)\n       (ex-info msg map cause)\n```\n\n```\nCreate an instance of ExceptionInfo, a RuntimeException subclass\nthat carries a map of additional data.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4807)  \n\n## ex-message\n\n```\nUsage: (ex-message ex)\n```\n\n```\nReturns the message attached to ex if ex is a Throwable.\nOtherwise returns nil.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4824)  \n\n## extend\n\n```\nUsage: (extend atype & proto+mmaps)\n```\n\n```\nImplementations of protocol methods can be provided using the extend construct:\n\n (extend AType\n   AProtocol\n    {:foo an-existing-fn\n     :bar (fn [a b] ...)\n     :baz (fn ([a]...) ([a b] ...)...)}\n   BProtocol \n     {...} \n   ...)\n\n extend takes a type/class (or interface, see below), and one or more\n protocol + method map pairs. It will extend the polymorphism of the\n protocol's methods to call the supplied methods when an AType is\n provided as the first argument. \n\n Method maps are maps of the keyword-ized method names to ordinary\n fns. This facilitates easy reuse of existing fns and fn maps, for\n code reuse/mixins without derivation or composition. You can extend\n an interface to a protocol. This is primarily to facilitate interop\n with the host (e.g. Java) but opens the door to incidental multiple\n inheritance of implementation since a class can inherit from more\n than one interface, both of which extend the protocol. It is TBD how\n to specify which impl to use. You can extend a protocol on nil.\n\n If you are supplying the definitions explicitly (i.e. not reusing\n exsting functions or mixin maps), you may find it more convenient to\n use the extend-type or extend-protocol macros.\n\n Note that multiple independent extend clauses can exist for the same\n type, not all protocols need be defined in a single extend call.\n\n See also:\n extends?, satisfies?, extenders\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L777)  \n\n## extend-protocol\n\n```\nUsage: (extend-protocol p & specs)\n```\n\n```\nUseful when you want to provide several implementations of the same\nprotocol all at once. Takes a single protocol and the implementation\nof that protocol for one or more types. Expands into calls to\nextend-type:\n\n(extend-protocol Protocol\n  AType\n    (foo [x] ...)\n    (bar [x y] ...)\n  BType\n    (foo [x] ...)\n    (bar [x y] ...)\n  AClass\n    (foo [x] ...)\n    (bar [x y] ...)\n  nil\n    (foo [x] ...)\n    (bar [x y] ...))\n\nexpands into:\n\n(do\n (clojure.core/extend-type AType Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type BType Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type AClass Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type nil Protocol \n   (foo [x] ...) \n   (bar [x y] ...)))\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L877)  \n\n## extend-type\n\n```\nUsage: (extend-type t & specs)\n```\n\n```\nA macro that expands into an extend call. Useful when you are\nsupplying the definitions explicitly inline, extend-type\nautomatically creates the maps required by extend.  Propagates the\nclass as a type hint on the first argument of all fns.\n\n(extend-type MyType \n  Countable\n    (cnt [c] ...)\n  Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y & zs] ...)))\n\nexpands into:\n\n(extend MyType\n Countable\n   {:cnt (fn [c] ...)}\n Foo\n   {:baz (fn ([x] ...) ([x y & zs] ...))\n    :bar (fn [x y] ...)})\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L845)  \n\n## extenders\n\n```\nUsage: (extenders protocol)\n```\n\n```\nReturns a collection of the types explicitly extending protocol\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L564)  \n\n## extends?\n\n```\nUsage: (extends? protocol atype)\n```\n\n```\nReturns true if atype extends protocol\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L557)  \n\n## false?\n\n```\nUsage: (false? x)\n```\n\n```\nReturns true if x is the value false, false otherwise.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L507)  \n\n## ffirst\n\n```\nUsage: (ffirst x)\n```\n\n```\nSame as (first (first x))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L100)  \n\n## file-seq\n\n```\nUsage: (file-seq dir)\n```\n\n```\nA tree seq on java.io.Files\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4973)  \n\n## filter\n\n```\nUsage: (filter pred)\n       (filter pred coll)\n```\n\n```\nReturns a lazy sequence of the items in coll for which\n(pred item) returns logical true. pred must be free of side-effects.\nReturns a transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2810)  \n\n## filterv\n\n```\nUsage: (filterv pred coll)\n```\n\n```\nReturns a vector of the items in coll for which\n(pred item) returns logical true. pred must be free of side-effects.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6988)  \n\n## finally\n\n```\nSyntax for use with try.\n\nPlease see https://clojure.org/reference/special_forms#try\n```\n\nAdded in Clojure version 1.0\n\n## find\n\n```\nUsage: (find map key)\n```\n\n```\nReturns the map entry for key, or nil if key not present.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1549)  \n\n## find-keyword\n\n```\nUsage: (find-keyword name)\n       (find-keyword ns name)\n```\n\n```\nReturns a Keyword with the given namespace and name if one already\nexists.  This function will not intern a new keyword. If the keyword\nhas not already been interned, it will return nil.  Do not use :\nin the keyword strings, it will be added automatically.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L627)  \n\n## find-ns\n\n```\nUsage: (find-ns sym)\n```\n\n```\nReturns the namespace named by the symbol or nil if it doesn't exist.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4127)  \n\n## find-var\n\n```\nUsage: (find-var sym)\n```\n\n```\nReturns the global var named by the namespace-qualified symbol, or\nnil if no var with that name.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2032)  \n\n## first\n\n```\nUsage: (first coll)\n```\n\n```\nReturns the first item in the collection. Calls seq on its\nargument. If coll is nil, returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L49)  \n\n## flatten\n\n```\nUsage: (flatten x)\n```\n\n```\nTakes any nested combination of sequential things (lists, vectors,\netc.) and returns their contents as a single, flat lazy sequence.\n(flatten nil) returns an empty sequence.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7204)  \n\n## float\n\n```\nUsage: (float x)\n```\n\n```\nCoerce to float\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3487)  \n\n## float-array\n\n```\nUsage: (float-array size-or-seq)\n       (float-array size init-val-or-seq)\n```\n\n```\nCreates an array of floats\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5302)  \n\n## float?\n\n```\nUsage: (float? n)\n```\n\n```\nReturns true if n is a floating point number\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3605)  \n\n## floats\n\n```\nUsage: (floats xs)\n```\n\n```\nCasts to float[]\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5393)  \n\n## flush\n\n```\nUsage: (flush)\n```\n\n```\nFlushes the output stream that is the current value of\n*out*\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3706)  \n\n## fn\n\n```\nUsage: (fn name? [params*] exprs*)\n       (fn name? ([params*] exprs*) +)\n```\n\n```\nparams => positional-params*, or positional-params* & rest-param\npositional-param => binding-form\nrest-param => binding-form\nbinding-form => name, or destructuring-form\n\nDefines a function.\n\nSee https://clojure.org/reference/special_forms#fn for more information\n```\n\n```\nSpecs:\n  Args: (cat\n         :fn-name (? simple-symbol?)\n         :fn-tail (alt\n                   :arity-1 :clojure.core.specs.alpha/params+body\n                   :arity-n (+\n                              (spec\n                                :clojure.core.specs.alpha/params+body))))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4535)  \n\n## fn?\n\n```\nUsage: (fn? x)\n```\n\n```\nReturns true if x implements Fn, i.e. is an object created via fn.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6272)  \n\n## fnext\n\n```\nUsage: (fnext x)\n```\n\n```\nSame as (first (next x))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L114)  \n\n## fnil\n\n```\nUsage: (fnil f x)\n       (fnil f x y)\n       (fnil f x y z)\n```\n\n```\nTakes a function f, and returns a function that calls f, replacing\na nil first argument to f with the supplied value x. Higher arity\nversions can replace arguments in the second and third\npositions (y, z). Note that the function f can take any number of\narguments, not just the one(s) being nil-patched.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6594)  \n\n## for\n\n```\nUsage: (for seq-exprs body-expr)\n```\n\n```\nList comprehension. Takes a vector of one or more\n binding-form/collection-expr pairs, each followed by zero or more\n modifiers, and yields a lazy sequence of evaluations of expr.\n Collections are iterated in a nested fashion, rightmost fastest,\n and nested coll-exprs can refer to bindings created in prior\n binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n :while test, :when test.\n\n(take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4648)  \n\n## force\n\n```\nUsage: (force x)\n```\n\n```\nIf x is a Delay, returns the (possibly cached) value of its expression, else returns x\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L763)  \n\n## format\n\n```\nUsage: (format fmt & args)\n```\n\n```\nFormats a string using java.lang.String.format, see java.util.Formatter for format\nstring syntax\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5763)  \n\n## frequencies\n\n```\nUsage: (frequencies coll)\n```\n\n```\nReturns a map from distinct items in coll to the number of times\nthey appear.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7271)  \n\n## future\n\n```\nUsage: (future & body)\n```\n\n```\nTakes a body of expressions and yields a future object that will\ninvoke the body in another thread, and will cache the result and\nreturn it on all subsequent calls to deref/@. If the computation has\nnot yet finished, calls to deref/@ will block, unless the variant of\nderef with timeout is used. See also - realized?.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7057)  \n\n## future-call\n\n```\nUsage: (future-call f)\n```\n\n```\nTakes a function of no args and yields a future object that will\ninvoke the function in another thread, and will cache the result and\nreturn it on all subsequent calls to deref/@. If the computation has\nnot yet finished, calls to deref/@ will block, unless the variant\nof deref with timeout is used. See also - realized?.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7030)  \n\n## future-cancel\n\n```\nUsage: (future-cancel f)\n```\n\n```\nCancels the future, if possible.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7067)  \n\n## future-cancelled?\n\n```\nUsage: (future-cancelled? f)\n```\n\n```\nReturns true if future f is cancelled\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7073)  \n\n## future-done?\n\n```\nUsage: (future-done? f)\n```\n\n```\nReturns true if future f is done\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6574)  \n\n## future?\n\n```\nUsage: (future? x)\n```\n\n```\nReturns true if x is a future\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6568)  \n\n## gen-class\n\n```\nUsage: (gen-class & options)\n```\n\n```\nWhen compiling, generates compiled bytecode for a class with the\ngiven package-qualified :name (which, as all names in these\nparameters, can be a string or symbol), and writes the .class file\nto the *compile-path* directory.  When not compiling, does\nnothing. The gen-class construct contains no implementation, as the\nimplementation will be dynamically sought by the generated class in\nfunctions in an implementing Clojure namespace. Given a generated\nclass org.mydomain.MyClass with a method named mymethod, gen-class\nwill generate an implementation that looks for a function named by \n(str prefix mymethod) (default prefix: \"-\") in a\nClojure namespace specified by :impl-ns\n(defaults to the current namespace). All inherited methods,\ngenerated methods, and init and main functions (see :methods, :init,\nand :main below) will be found similarly prefixed. By default, the\nstatic initializer for the generated class will attempt to load the\nClojure support code for the class as a resource from the classpath,\ne.g. in the example case, ``org/mydomain/MyClass__init.class``. This\nbehavior can be controlled by :load-impl-ns\n\nNote that methods with a maximum of 18 parameters are supported.\n\nIn all subsequent sections taking types, the primitive types can be\nreferred to by their Java names (int, float etc), and classes in the\njava.lang package can be used without a package qualifier. All other\nclasses must be fully qualified.\n\nOptions should be a set of key/value pairs, all except for :name are optional:\n\n:name aname\n\nThe package-qualified name of the class to be generated\n\n:extends aclass\n\nSpecifies the superclass, the non-private methods of which will be\noverridden by the class. If not provided, defaults to Object.\n\n:implements [interface ...]\n\nOne or more interfaces, the methods of which will be implemented by the class.\n\n:init name\n\nIf supplied, names a function that will be called with the arguments\nto the constructor. Must return [ [superclass-constructor-args] state] \nIf not supplied, the constructor args are passed directly to\nthe superclass constructor and the state will be nil\n\n:constructors {[param-types] [super-param-types], ...}\n\nBy default, constructors are created for the generated class which\nmatch the signature(s) of the constructors for the superclass. This\nparameter may be used to explicitly specify constructors, each entry\nproviding a mapping from a constructor signature to a superclass\nconstructor signature. When you supply this, you must supply an :init\nspecifier. \n\n:post-init name\n\nIf supplied, names a function that will be called with the object as\nthe first argument, followed by the arguments to the constructor.\nIt will be called every time an object of this class is created,\nimmediately after all the inherited constructors have completed.\nIts return value is ignored.\n\n:methods [ [name [param-types] return-type], ...]\n\nThe generated class automatically defines all of the non-private\nmethods of its superclasses/interfaces. This parameter can be used\nto specify the signatures of additional methods of the generated\nclass. Static methods can be specified with ^{:static true} in the\nsignature's metadata. Do not repeat superclass/interface signatures\nhere.\n\n:main boolean\n\nIf supplied and true, a static public main function will be generated. It will\npass each string of the String[] argument as a separate argument to\na function called (str prefix main).\n\n:factory name\n\nIf supplied, a (set of) public static factory function(s) will be\ncreated with the given name, and the same signature(s) as the\nconstructor(s).\n\n:state name\n\nIf supplied, a public final instance field with the given name will be\ncreated. You must supply an :init function in order to provide a\nvalue for the state. Note that, though final, the state can be a ref\nor agent, supporting the creation of Java objects with transactional\nor asynchronous mutation semantics.\n\n:exposes {protected-field-name {:get name :set name}, ...}\n\nSince the implementations of the methods of the generated class\noccur in Clojure functions, they have no access to the inherited\nprotected fields of the superclass. This parameter can be used to\ngenerate public getter/setter methods exposing the protected field(s)\nfor use in the implementation.\n\n:exposes-methods {super-method-name exposed-name, ...}\n\nIt is sometimes necessary to call the superclass' implementation of an\noverridden method.  Those methods may be exposed and referred in \nthe new method implementation by a local name.\n\n:prefix string\n\nDefault: \"-\" Methods called e.g. Foo will be looked up in vars called\nprefixFoo in the implementing ns.\n\n:impl-ns name\n\nDefault: the name of the current ns. Implementations of methods will be \nlooked up in this namespace.\n\n:load-impl-ns boolean\n\nDefault: true. Causes the static initializer for the generated class\nto reference the load code for the implementing namespace. Should be\ntrue when implementing-ns is the default, false if you intend to\nload the code via some other method.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/38705b49fd3dbae11e94c576ef49ff3eb1c47395/src/clj/clojure/genclass.clj#L507)  \n\n## gen-interface\n\n```\nUsage: (gen-interface & options)\n```\n\n```\nWhen compiling, generates compiled bytecode for an interface with\n the given package-qualified :name (which, as all names in these\n parameters, can be a string or symbol), and writes the .class file\n to the *compile-path* directory.  When not compiling, does nothing.\n\n In all subsequent sections taking types, the primitive types can be\n referred to by their Java names (int, float etc), and classes in the\n java.lang package can be used without a package qualifier. All other\n classes must be fully qualified.\n\n Options should be a set of key/value pairs, all except for :name are\n optional:\n\n :name aname\n\n The package-qualified name of the class to be generated\n\n :extends [interface ...]\n\n One or more interfaces, which will be extended by this interface.\n\n :methods [ [name [param-types] return-type], ...]\n\n This parameter is used to specify the signatures of the methods of\n the generated interface.  Do not repeat superinterface signatures\n here.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/38705b49fd3dbae11e94c576ef49ff3eb1c47395/src/clj/clojure/genclass.clj#L688)  \n\n## gensym\n\n```\nUsage: (gensym)\n       (gensym prefix-string)\n```\n\n```\nReturns a new symbol with a unique name. If a prefix string is\nsupplied, the name is prefix# where # is some unique number. If\nprefix is not supplied, the prefix is 'G__'.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L606)  \n\n## get\n\n```\nUsage: (get map key)\n       (get map key not-found)\n```\n\n```\nReturns the value mapped to key, not-found or nil if key not present\nin associative collection, set, string, array, or ILookup instance.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1508)  \n\n## get-in\n\n```\nUsage: (get-in m ks)\n       (get-in m ks not-found)\n```\n\n```\nReturns the value in a nested associative structure,\nwhere ks is a sequence of keys. Returns nil if the key\nis not present, or the not-found value if supplied.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6177)  \n\n## get-method\n\n```\nUsage: (get-method multifn dispatch-val)\n```\n\n```\nGiven a multimethod and a dispatch value, returns the dispatch fn\nthat would apply to that value, or nil if none apply and no default\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1834)  \n\n## get-proxy-class\n\n```\nUsage: (get-proxy-class & bases)\n```\n\n```\nTakes an optional single class followed by zero or more\ninterfaces. If not supplied class defaults to Object.  Creates an\nreturns an instance of a proxy class derived from the supplied\nclasses. The resulting value is cached and used for any subsequent\nrequests for the same class set. Returns a Class object.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L281)  \n\n## get-thread-bindings\n\n```\nUsage: (get-thread-bindings)\n```\n\n```\nGet a map with the Var/value pairs which is currently in effect for the\ncurrent thread.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1956)  \n\n## get-validator\n\n```\nUsage: (get-validator iref)\n```\n\n```\nGets the validator-fn for a var/ref/agent/atom.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2417)  \n\n## group-by\n\n```\nUsage: (group-by f coll)\n```\n\n```\nReturns a map of the elements of coll keyed by the result of\nf on each element. The value at each key will be a vector of the\ncorresponding elements, in the order they appeared in coll.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7214)  \n\n## halt-when\n\n```\nUsage: (halt-when pred)\n       (halt-when pred retf)\n```\n\n```\nReturns a transducer that ends transduction when pred returns true\nfor an input. When retf is supplied it must be a fn of 2 arguments -\nit will be passed the (completed) result so far and the input that\ntriggered the predicate, and its return value (if it does not throw\nan exception) will be the return value of the transducer. If retf\nis not supplied, the input that triggered the predicate will be\nreturned. If the predicate never returns true the transduction is\nunaffected.\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7699)  \n\n## hash\n\n```\nUsage: (hash x)\n```\n\n```\nReturns the hash code of its argument. Note this is the hash code\nconsistent with =, and thus is different than .hashCode for Integer,\nShort, Byte and Clojure collections.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5190)  \n\n## hash-map\n\n```\nUsage: (hash-map)\n       (hash-map & keyvals)\n```\n\n```\nkeyval => key val\nReturns a new hash map with supplied mappings.  If any keys are\nequal, they are handled as if by repeated uses of assoc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L381)  \n\n## hash-ordered-coll\n\n```\nUsage: (hash-ordered-coll coll)\n```\n\n```\nReturns the hash code, consistent with =, for an external ordered\ncollection implementing Iterable.\nSee http://clojure.org/data_structures#hash for full algorithms.\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5211)  \n\n## hash-set\n\n```\nUsage: (hash-set)\n       (hash-set & keys)\n```\n\n```\nReturns a new hash set with supplied keys.  Any equal keys are\nhandled as if by repeated uses of conj.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L391)  \n\n## hash-unordered-coll\n\n```\nUsage: (hash-unordered-coll coll)\n```\n\n```\nReturns the hash code, consistent with =, for an external unordered\ncollection implementing Iterable. For maps, the iterator should\nreturn map entries whose hash is computed as\n  (hash-ordered-coll [k v]).\nSee http://clojure.org/data_structures#hash for full algorithms.\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5220)  \n\n## ident?\n\n```\nUsage: (ident? x)\n```\n\n```\nReturn true if x is a symbol or keyword\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1627)  \n\n## identical?\n\n```\nUsage: (identical? x y)\n```\n\n```\nTests if 2 arguments are the same object\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L777)  \n\n## identity\n\n```\nUsage: (identity x)\n```\n\n```\nReturns its argument.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1465)  \n\n## if\n\n```\nUsage: (if test then else?)\n```\n\n```\nEvaluates test. If not the singular values nil or false,\nevaluates and yields then, otherwise, evaluates and yields else. If\nelse is not supplied it defaults to nil.\n\nPlease see https://clojure.org/reference/special_forms#if\n```\n\nAdded in Clojure version 1.0\n\n## if-let\n\n```\nUsage: (if-let bindings then)\n       (if-let bindings then else & oldform)\n```\n\n```\nbindings => binding-form test\n\nIf test is true, evaluates then with binding-form bound to the value of \ntest, if not, yields else\n```\n\n```\nSpecs:\n  Args: (cat\n         :bindings (and vector? :clojure.core.specs.alpha/binding)\n         :then any?\n         :else (? any?))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1858)  \n\n## if-not\n\n```\nUsage: (if-not test then)\n       (if-not test then else)\n```\n\n```\nEvaluates test. If logical false, evaluates and returns then expr, \notherwise else expr, if supplied, else nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L769)  \n\n## if-some\n\n```\nUsage: (if-some bindings then)\n       (if-some bindings then else & oldform)\n```\n\n```\nbindings => binding-form test\n\nIf test is not nil, evaluates then with binding-form bound to the\nvalue of test, if not, yields else\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1893)  \n\n## ifn?\n\n```\nUsage: (ifn? x)\n```\n\n```\nReturns true if x implements IFn. Note that many data structures\n(e.g. sets and maps) implement IFn\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6265)  \n\n## import\n\n```\nUsage: (import & import-symbols-or-lists)\n```\n\n```\nimport-list => (package-symbol class-name-symbols*)\n\nFor each name in class-name-symbols, adds a mapping from name to the\nclass named by package.name to the current namespace. Use :import in the ns\nmacro in preference to calling this directly.\n```\n\n```\nSpecs:\n  Args: (*\n          (alt\n           :class (quotable simple-symbol?)\n           :package-list (quotable\n                           :clojure.core.specs.alpha/package-list)))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3426)  \n\n## in-ns\n\n```\nUsage: (in-ns name)\n```\n\n```\nSets *ns* to the namespace named by the symbol, creating it if needed.\n```\n\nAdded in Clojure version 1.0\n\n## inc\n\n```\nUsage: (inc x)\n```\n\n```\nReturns a number one greater than num. Does not auto-promote\nlongs, will throw on overflow. See also: inc'\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L924)  \n\n## inc'\n\n```\nUsage: (inc' x)\n```\n\n```\nReturns a number one greater than num. Supports arbitrary precision.\nSee also: inc\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L917)  \n\n## indexed?\n\n```\nUsage: (indexed? coll)\n```\n\n```\nReturn true if coll implements Indexed, indicating efficient lookup by index\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6309)  \n\n## infinite?\n\n```\nUsage: (infinite? num)\n```\n\n```\nReturns true if num is negative or positive infinity, else false\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8099)  \n\n## init-proxy\n\n```\nUsage: (init-proxy proxy mappings)\n```\n\n```\nTakes a proxy instance and a map of strings (which must\ncorrespond to methods of the proxy superclass/superinterfaces) to\nfns (which must take arguments matching the corresponding method,\nplus an additional (explicit) first arg corresponding to this, and\nsets the proxy's fn map.  Returns the proxy.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L302)  \n\n## inst-ms\n\n```\nUsage: (inst-ms inst)\n```\n\n```\nReturn the number of milliseconds since January 1, 1970, 00:00:00 GMT\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6838)  \n\n## inst?\n\n```\nUsage: (inst? x)\n```\n\n```\nReturn true if x satisfies Inst\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6844)  \n\n## instance?\n\n```\nUsage: (instance? c x)\n```\n\n```\nEvaluates x and tests if it is an instance of the class\nc. Returns true or false\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L141)  \n\n## int\n\n```\nUsage: (int x)\n```\n\n```\nCoerce to int\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L884)  \n\n## int-array\n\n```\nUsage: (int-array size-or-seq)\n       (int-array size init-val-or-seq)\n```\n\n```\nCreates an array of ints\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5357)  \n\n## int?\n\n```\nUsage: (int? x)\n```\n\n```\nReturn true if x is a fixed precision integer\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1414)  \n\n## integer?\n\n```\nUsage: (integer? n)\n```\n\n```\nReturns true if n is an integer\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1388)  \n\n## interleave\n\n```\nUsage: (interleave)\n       (interleave c1)\n       (interleave c1 c2)\n       (interleave c1 c2 & colls)\n```\n\n```\nReturns a lazy seq of the first item in each coll, then the second etc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4310)  \n\n## intern\n\n```\nUsage: (intern ns name)\n       (intern ns name val)\n```\n\n```\nFinds or creates a var named by the symbol name in the namespace\nns (which can be a symbol or a namespace), setting its root binding\nto val if supplied. The namespace must exist. The var will adopt any\nmetadata from the name symbol.  Returns the var.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6352)  \n\n## interpose\n\n```\nUsage: (interpose sep)\n       (interpose sep coll)\n```\n\n```\nReturns a lazy seq of the elements of coll separated by sep.\nReturns a stateful transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5231)  \n\n## into\n\n```\nUsage: (into)\n       (into to)\n       (into to from)\n       (into to xform from)\n```\n\n```\nReturns a new coll consisting of to-coll with all of the items of\nfrom-coll conjoined. A transducer may be supplied.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6950)  \n\n## into-array\n\n```\nUsage: (into-array aseq)\n       (into-array type aseq)\n```\n\n```\nReturns an array with components set to the values in aseq. The array's\ncomponent type is type if provided, or the type of the first value in\naseq if present, or Object. All values in aseq must be compatible with\nthe component type. Class objects for the primitive types can be obtained\nusing, e.g., Integer/TYPE.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3444)  \n\n## ints\n\n```\nUsage: (ints xs)\n```\n\n```\nCasts to int[]\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5398)  \n\n## io!\n\n```\nUsage: (io! & body)\n```\n\n```\nIf an io! block occurs in a transaction, throws an\nIllegalStateException, else runs body in an implicit do. If the\nfirst expression in body is a literal string, will use that as the\nexception message.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2529)  \n\n## isa?\n\n```\nUsage: (isa? child parent)\n       (isa? h child parent)\n```\n\n```\nReturns true if (= child parent), or child is directly or indirectly derived from\nparent, either via a Java type inheritance relationship or a\nrelationship established via derive. h must be a hierarchy obtained\nfrom make-hierarchy, if not supplied defaults to the global\nhierarchy\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5589)  \n\n## iterate\n\n```\nUsage: (iterate f x)\n```\n\n```\nReturns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3030)  \n\n## iteration\n\n```\nUsage: (iteration step & {:keys [somef vf kf initk], :or {vf identity, kf identity, somef some?, initk nil}})\n```\n\n```\nCreates a seqable/reducible via repeated calls to step,\na function of some (continuation token) 'k'. The first call to step\nwill be passed initk, returning 'ret'. Iff (somef ret) is true,\n(vf ret) will be included in the iteration, else iteration will\nterminate and vf/kf will not be called. If (kf ret) is non-nil it\nwill be passed to the next step call, else iteration will terminate.\n\nThis can be used e.g. to consume APIs that return paginated or batched data.\n\n step - (possibly impure) fn of 'k' -> 'ret'\n\n :somef - fn of 'ret' -> logical true/false, default 'some?'\n :vf - fn of 'ret' -> 'v', a value produced by the iteration, default 'identity'\n :kf - fn of 'ret' -> 'next-k' or nil (signaling 'do not continue'), default 'identity'\n :initk - the first value passed to step, default 'nil'\n\nIt is presumed that step with non-initk is unreproducible/non-idempotent.\nIf step with initk is unreproducible it is on the consumer to not consume twice.\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7786)  \n\n## iterator-seq\n\n```\nUsage: (iterator-seq iter)\n```\n\n```\nReturns a seq on a java.util.Iterator. Note that most collections\nproviding iterators implement Iterable and thus support seq directly.\nSeqs cache values, thus iterator-seq should not be used on any\niterator that repeatedly returns the same mutable object.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5746)  \n\n## juxt\n\n```\nUsage: (juxt f)\n       (juxt f g)\n       (juxt f g h)\n       (juxt f g h & fs)\n```\n\n```\nTakes a set of functions and returns a fn that is the juxtaposition\nof those fns.  The returned fn takes a variable number of args, and\nreturns a vector containing the result of applying each fn to the\nargs (left-to-right).\n((juxt a b c) x) => [(a x) (b x) (c x)]\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2593)  \n\n## keep\n\n```\nUsage: (keep f)\n       (keep f coll)\n```\n\n```\nReturns a lazy sequence of the non-nil results of (f item). Note,\nthis means false return values will be included.  f must be free of\nside-effects.  Returns a transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7381)  \n\n## keep-indexed\n\n```\nUsage: (keep-indexed f)\n       (keep-indexed f coll)\n```\n\n```\nReturns a lazy sequence of the non-nil results of (f index item). Note,\nthis means false return values will be included.  f must be free of\nside-effects.  Returns a stateful transducer when no collection is\nprovided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7414)  \n\n## key\n\n```\nUsage: (key e)\n```\n\n```\nReturns the key of the map entry.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1582)  \n\n## keys\n\n```\nUsage: (keys map)\n```\n\n```\nReturns a sequence of the map's keys, in the same order as (seq map).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1570)  \n\n## keyword\n\n```\nUsage: (keyword name)\n       (keyword ns name)\n```\n\n```\nReturns a Keyword with the given namespace and name.  Do not use :\nin the keyword strings, it will be added automatically.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L616)  \n\n## keyword?\n\n```\nUsage: (keyword? x)\n```\n\n```\nReturn true if x is a Keyword\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L570)  \n\n## last\n\n```\nUsage: (last coll)\n```\n\n```\nReturn the last item in coll, in linear time\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L264)  \n\n## lazy-cat\n\n```\nUsage: (lazy-cat & colls)\n```\n\n```\nExpands to code which yields a lazy sequence of the concatenation\nof the supplied colls.  Each coll expr is not evaluated until it is\nneeded. \n\n(lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4638)  \n\n## lazy-seq\n\n```\nUsage: (lazy-seq & body)\n```\n\n```\nTakes a body of expressions that returns an ISeq or nil, and yields\na Seqable object that will invoke the body only the first time seq\nis called, and will cache the result and return it on all subsequent\nseq calls. See also - realized?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L685)  \n\n## let\n\n```\nUsage: (let [bindings*] exprs*)\n```\n\n```\nbinding => binding-form init-expr\nbinding-form => name, or destructuring-form\ndestructuring-form => map-destructure-form, or seq-destructure-form\n\nEvaluates the exprs in a lexical context in which the symbols in\nthe binding-forms are bound to their respective init-exprs or parts\ntherein.\n\nSee https://clojure.org/reference/special_forms#binding-forms for\nmore information about destructuring.\n```\n\n```\nSpecs:\n  Args: (cat\n         :bindings :clojure.core.specs.alpha/bindings\n         :body (* any?))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4498)  \n\n## letfn\n\n```\nUsage: (letfn [fnspecs*] exprs*)\n```\n\n```\nfnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\nTakes a vector of function specs and a body, and generates a set of\nbindings of functions to their names. All of the names are available\nin all of the definitions of the functions, as well as the body.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6581)  \n\n## line-seq\n\n```\nUsage: (line-seq rdr)\n```\n\n```\nReturns the lines of text from rdr as a lazy sequence of strings.\nrdr must implement java.io.BufferedReader.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3086)  \n\n## list\n\n```\nUsage: (list & items)\n```\n\n```\nCreates a new list containing the items.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L16)  \n\n## list\\*\n\n```\nUsage: (list* args)\n       (list* a args)\n       (list* a b args)\n       (list* a b c args)\n       (list* a b c d & more)\n```\n\n```\nCreates a new seq containing the items prepended to the rest, the\nlast of which will be treated as a sequence.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L650)  \n\n## list?\n\n```\nUsage: (list? x)\n```\n\n```\nReturns true if x implements IPersistentList\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6254)  \n\n## load\n\n```\nUsage: (load & paths)\n```\n\n```\nLoads Clojure code from resources in classpath. A path is interpreted as\nclasspath-relative if it begins with a slash or relative to the root\ndirectory for the current namespace otherwise.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6144)  \n\n## load-file\n\n```\nUsage: (load-file name)\n```\n\n```\nSequentially read and evaluate the set of forms contained in the file.\n```\n\nAdded in Clojure version 1.0\n\n## load-reader\n\n```\nUsage: (load-reader rdr)\n```\n\n```\nSequentially read and evaluate the set of forms contained in the\nstream/file\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4083)  \n\n## load-string\n\n```\nUsage: (load-string s)\n```\n\n```\nSequentially read and evaluate the set of forms contained in the\nstring\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4090)  \n\n## loaded-libs\n\n```\nUsage: (loaded-libs)\n```\n\n```\nReturns a sorted set of symbols naming the currently loaded libs\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6139)  \n\n## locking\n\n```\nUsage: (locking x & body)\n```\n\n```\nExecutes exprs in an implicit do, while holding the monitor of x.\nWill release the monitor of x in all circumstances.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1662)  \n\n## long\n\n```\nUsage: (long x)\n```\n\n```\nCoerce to long\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3481)  \n\n## long-array\n\n```\nUsage: (long-array size-or-seq)\n       (long-array size init-val-or-seq)\n```\n\n```\nCreates an array of longs\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5365)  \n\n## longs\n\n```\nUsage: (longs xs)\n```\n\n```\nCasts to long[]\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5408)  \n\n## loop\n\n```\nUsage: (loop [bindings*] exprs*)\n```\n\n```\nEvaluates the exprs in a lexical context in which the symbols in\nthe binding-forms are bound to their respective init-exprs or parts\ntherein. Acts as a recur target.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4599)  \n\n## macroexpand\n\n```\nUsage: (macroexpand form)\n```\n\n```\nRepeatedly calls macroexpand-1 on form until it no longer\nrepresents a macro form, then returns it.  Note neither\nmacroexpand-1 nor macroexpand expand macros in subforms.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4027)  \n\n## macroexpand-1\n\n```\nUsage: (macroexpand-1 form)\n```\n\n```\nIf form represents a macro form, returns its expansion,\nelse returns form.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4019)  \n\n## make-array\n\n```\nUsage: (make-array type len)\n       (make-array type dim & more-dims)\n```\n\n```\nCreates and returns an array of instances of the specified class of\nthe specified dimension(s).  Note that a class object is required.\nClass objects can be obtained by using their imported or\nfully-qualified name.  Class objects for the primitive types can be\nobtained using, e.g., Integer/TYPE.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3987)  \n\n## make-hierarchy\n\n```\nUsage: (make-hierarchy)\n```\n\n```\nCreates a hierarchy object for use with derive, isa? etc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5553)  \n\n## map\n\n```\nUsage: (map f)\n       (map f coll)\n       (map f c1 c2)\n       (map f c1 c2 c3)\n       (map f c1 c2 c3 & colls)\n```\n\n```\nReturns a lazy sequence consisting of the result of applying f to\nthe set of first items of each coll, followed by applying f to the\nset of second items in each coll, until any one of the colls is\nexhausted.  Any remaining items in other colls are ignored. Function\nf should accept number-of-colls arguments. Returns a transducer when\nno collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2744)  \n\n## map-entry?\n\n```\nUsage: (map-entry? x)\n```\n\n```\nReturn true if x is a map entry\n```\n\nAdded in Clojure version 1.8\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1492)  \n\n## map-indexed\n\n```\nUsage: (map-indexed f)\n       (map-indexed f coll)\n```\n\n```\nReturns a lazy sequence consisting of the result of applying f to 0\nand the first item of coll, followed by applying f to 1 and the second\nitem in coll, etc, until coll is exhausted. Thus function f should\naccept 2 arguments, index and item. Returns a stateful transducer when\nno collection is provided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7351)  \n\n## map?\n\n```\nUsage: (map? x)\n```\n\n```\nReturn true if x implements IPersistentMap\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L169)  \n\n## mapcat\n\n```\nUsage: (mapcat f)\n       (mapcat f & colls)\n```\n\n```\nReturns the result of applying concat to the result of applying map\nto f and colls.  Thus function f should return a collection. Returns\na transducer when no collections are provided\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2800)  \n\n## mapv\n\n```\nUsage: (mapv f coll)\n       (mapv f c1 c2)\n       (mapv f c1 c2 c3)\n       (mapv f c1 c2 c3 & colls)\n```\n\n```\nReturns a vector consisting of the result of applying f to the\nset of first items of each coll, followed by applying f to the set\nof second items in each coll, until any one of the colls is\nexhausted.  Any remaining items in other colls are ignored. Function\nf should accept number-of-colls arguments.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6970)  \n\n## max\n\n```\nUsage: (max x)\n       (max x y)\n       (max x y & more)\n```\n\n```\nReturns the greatest of the nums.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1117)  \n\n## max-key\n\n```\nUsage: (max-key k x)\n       (max-key k x y)\n       (max-key k x y & more)\n```\n\n```\nReturns the x for which (k x), a number, is greatest.\n\nIf there are multiple such xs, the last one is returned.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5014)  \n\n## memfn\n\n```\nUsage: (memfn name & args)\n```\n\n```\nExpands into code that creates a fn that expects to be passed an\nobject and any args and calls the named instance method on the\nobject passing the args. Use when you want to treat a Java method as\na first-class fn. name may be type-hinted with the method receiver's\ntype in order to avoid reflective calls.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3872)  \n\n## memoize\n\n```\nUsage: (memoize f)\n```\n\n```\nReturns a memoized version of a referentially transparent function. The\nmemoized version of the function keeps a cache of the mapping from arguments\nto results and, when calls with the same arguments are repeated often, has\nhigher performance at the expense of higher memory use.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6378)  \n\n## merge\n\n```\nUsage: (merge & maps)\n```\n\n```\nReturns a map that consists of the rest of the maps conj-ed onto\nthe first.  If a key occurs in more than one map, the mapping from\nthe latter (left-to-right) will be the mapping in the result.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3058)  \n\n## merge-with\n\n```\nUsage: (merge-with f & maps)\n```\n\n```\nReturns a map that consists of the rest of the maps conj-ed onto\nthe first.  If a key occurs in more than one map, the mapping(s)\nfrom the latter (left-to-right) will be combined with the mapping in\nthe result by calling (f val-in-result val-in-latter).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3068)  \n\n## meta\n\n```\nUsage: (meta obj)\n```\n\n```\nReturns the metadata of obj, returns nil if there is no metadata.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L204)  \n\n## methods\n\n```\nUsage: (methods multifn)\n```\n\n```\nGiven a multimethod, returns a map of dispatch values -> dispatch fns\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1828)  \n\n## min\n\n```\nUsage: (min x)\n       (min x y)\n       (min x y & more)\n```\n\n```\nReturns the least of the nums.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1127)  \n\n## min-key\n\n```\nUsage: (min-key k x)\n       (min-key k x y)\n       (min-key k x y & more)\n```\n\n```\nReturns the x for which (k x), a number, is least.\n\nIf there are multiple such xs, the last one is returned.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5034)  \n\n## mix-collection-hash\n\n```\nUsage: (mix-collection-hash hash-basis count)\n```\n\n```\nMix final collection hash for ordered or unordered collections.\nhash-basis is the combined collection hash, count is the number\nof elements included in the basis. Note this is the hash code\nconsistent with =, different from .hashCode.\nSee http://clojure.org/data_structures#hash for full algorithms.\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5200)  \n\n## mod\n\n```\nUsage: (mod num div)\n```\n\n```\nModulus of num and div. Truncates toward negative infinity.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3567)  \n\n## monitor-enter\n\n```\nUsage: (monitor-enter x)\n```\n\n```\nSynchronization primitive that should be avoided\nin user code. Use the 'locking' macro.\n\nPlease see https://clojure.org/reference/special_forms#monitor-enter\n```\n\nAdded in Clojure version 1.0\n\n## monitor-exit\n\n```\nUsage: (monitor-exit x)\n```\n\n```\nSynchronization primitive that should be avoided\nin user code. Use the 'locking' macro.\n\nPlease see https://clojure.org/reference/special_forms#monitor-exit\n```\n\nAdded in Clojure version 1.0\n\n## name\n\n```\nUsage: (name x)\n```\n\n```\nReturns the name String of a string, symbol or keyword.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1604)  \n\n## namespace\n\n```\nUsage: (namespace x)\n```\n\n```\nReturns the namespace String of a symbol or keyword, or nil if not present.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1612)  \n\n## namespace-munge\n\n```\nUsage: (namespace-munge ns)\n```\n\n```\nConvert a Clojure namespace name to a legal Java package name.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L13)  \n\n## nat-int?\n\n```\nUsage: (nat-int? x)\n```\n\n```\nReturn true if x is a non-negative fixed precision integer\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1434)  \n\n## neg-int?\n\n```\nUsage: (neg-int? x)\n```\n\n```\nReturn true if x is a negative fixed precision integer\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1428)  \n\n## neg?\n\n```\nUsage: (neg? num)\n```\n\n```\nReturns true if num is less than zero, else false\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1268)  \n\n## new\n\n```\nUsage: (Classname. args*)\n       (new Classname args*)\n```\n\n```\nThe args, if any, are evaluated from left to right, and\npassed to the constructor of the class named by Classname. The\nconstructed object is returned.\n\nPlease see https://clojure.org/java_interop#new\n```\n\nAdded in Clojure version 1.0\n\n## newline\n\n```\nUsage: (newline)\n```\n\n```\nWrites a platform-specific newline to *out*\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3698)  \n\n## next\n\n```\nUsage: (next coll)\n```\n\n```\nReturns a seq of the items after the first. Calls seq on its\nargument.  If there are no more items, returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L57)  \n\n## nfirst\n\n```\nUsage: (nfirst x)\n```\n\n```\nSame as (next (first x))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L107)  \n\n## nil?\n\n```\nUsage: (nil? x)\n```\n\n```\nReturns true if x is nil, false otherwise.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L438)  \n\n## nnext\n\n```\nUsage: (nnext x)\n```\n\n```\nSame as (next (next x))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L121)  \n\n## not\n\n```\nUsage: (not x)\n```\n\n```\nReturns true if x is logical false, false otherwise.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L526)  \n\n## not-any?\n\n```\nUsage: (not-any? pred coll)\n```\n\n```\nReturns false if (pred x) is logical true for any x in coll,\nelse true.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2720)  \n\n## not-empty\n\n```\nUsage: (not-empty coll)\n```\n\n```\nIf coll is empty, returns nil, else coll\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5562)  \n\n## not-every?\n\n```\nUsage: (not-every? pred coll)\n```\n\n```\nReturns false if (pred x) is logical true for every x in\ncoll, else true.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2701)  \n\n## not=\n\n```\nUsage: (not= x)\n       (not= x y)\n       (not= x y & more)\n```\n\n```\nSame as (not (= obj1 obj2))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L821)  \n\n## ns\n\n```\nUsage: (ns name docstring? attr-map? references*)\n```\n\n```\nSets *ns* to the namespace named by name (unevaluated), creating it\nif needed.  references can be zero or more of: (:refer-clojure ...)\n(:require ...) (:use ...) (:import ...) (:load ...) (:gen-class)\nwith the syntax of refer-clojure/require/use/import/load/gen-class\nrespectively, except the arguments are unevaluated and need not be\nquoted. (:gen-class ...), when supplied, defaults to :name\ncorresponding to the ns name, :main true, :impl-ns same as ns, and\n:init-impl-ns true. All options of gen-class are\nsupported. The :gen-class directive is ignored when not\ncompiling. If :gen-class is not supplied, when compiled only an\nnsname__init.class will be generated. If :refer-clojure is not used, a\ndefault (refer 'clojure.core) is used.  Use of ns is preferred to\nindividual calls to in-ns/require/use/import:\n\n(ns foo.bar\n  (:refer-clojure :exclude [ancestors printf])\n  (:require (clojure.contrib sql combinatorics))\n  (:use (my.lib this that))\n  (:import (java.util Date Timer Random)\n           (java.sql Connection Statement)))\n```\n\n```\nSpecs:\n  Args: (cat\n         :ns-name simple-symbol?\n         :docstring (? string?)\n         :attr-map (? map?)\n         :ns-clauses :clojure.core.specs.alpha/ns-clauses)\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5789)  \n\n## ns-aliases\n\n```\nUsage: (ns-aliases ns)\n```\n\n```\nReturns a map of the aliases for the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4275)  \n\n## ns-imports\n\n```\nUsage: (ns-imports ns)\n```\n\n```\nReturns a map of the import mappings for the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4201)  \n\n## ns-interns\n\n```\nUsage: (ns-interns ns)\n```\n\n```\nReturns a map of the intern mappings for the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4208)  \n\n## ns-map\n\n```\nUsage: (ns-map ns)\n```\n\n```\nReturns a map of all the mappings for the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4172)  \n\n## ns-name\n\n```\nUsage: (ns-name ns)\n```\n\n```\nReturns the name of the namespace, a symbol.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4165)  \n\n## ns-publics\n\n```\nUsage: (ns-publics ns)\n```\n\n```\nReturns a map of the public intern mappings for the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4190)  \n\n## ns-refers\n\n```\nUsage: (ns-refers ns)\n```\n\n```\nReturns a map of the refer mappings for the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4255)  \n\n## ns-resolve\n\n```\nUsage: (ns-resolve ns sym)\n       (ns-resolve ns env sym)\n```\n\n```\nReturns the var or Class to which a symbol will be resolved in the\nnamespace (unless found in the environment), else nil.  Note that\nif the symbol is fully qualified, the var/Class to which it resolves\nneed not be present in the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4360)  \n\n## ns-unalias\n\n```\nUsage: (ns-unalias ns sym)\n```\n\n```\nRemoves the alias for the symbol from the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4282)  \n\n## ns-unmap\n\n```\nUsage: (ns-unmap ns sym)\n```\n\n```\nRemoves the mappings for the symbol from the namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4179)  \n\n## nth\n\n```\nUsage: (nth coll index)\n       (nth coll index not-found)\n```\n\n```\nReturns the value at the index. get returns nil if index out of\nbounds, nth throws an exception unless not-found is supplied.  nth\nalso works for strings, Java arrays, regex Matchers and Lists, and,\nin O(n) time, for sequences.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L891)  \n\n## nthnext\n\n```\nUsage: (nthnext coll n)\n```\n\n```\nReturns the nth next of coll, (seq coll) when n is 0.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3165)  \n\n## nthrest\n\n```\nUsage: (nthrest coll n)\n```\n\n```\nReturns the nth rest of coll, coll when n is 0.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3175)  \n\n## num\n\n```\nUsage: (num x)\n```\n\n```\nCoerce to Number\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3474)  \n\n## number?\n\n```\nUsage: (number? x)\n```\n\n```\nReturns true if x is a Number\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3560)  \n\n## numerator\n\n```\nUsage: (numerator r)\n```\n\n```\nReturns the numerator part of a Ratio.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3583)  \n\n## object-array\n\n```\nUsage: (object-array size-or-seq)\n```\n\n```\nCreates an array of objects\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5350)  \n\n## odd?\n\n```\nUsage: (odd? n)\n```\n\n```\nReturns true if n is odd, throws an exception if n is not an integer\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1408)  \n\n## or\n\n```\nUsage: (or)\n       (or x)\n       (or x & next)\n```\n\n```\nEvaluates exprs one at a time, from left to right. If a form\nreturns a logical true value, or returns that value and doesn't\nevaluate any of the other expressions, otherwise it returns the\nvalue of the last expression. (or) returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L856)  \n\n## parents\n\n```\nUsage: (parents tag)\n       (parents h tag)\n```\n\n```\nReturns the immediate parents of tag, either via a Java type\ninheritance relationship or a relationship established via derive. h\nmust be a hierarchy obtained from make-hierarchy, if not supplied\ndefaults to the global hierarchy\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5610)  \n\n## parse-boolean\n\n```\nUsage: (parse-boolean s)\n```\n\n```\nParse strings \"true\" or \"false\" and return a boolean, or nil if invalid\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8079)  \n\n## parse-double\n\n```\nUsage: (parse-double s)\n```\n\n```\nParse string with floating point components and return a Double value,\nor nil if parse fails.\n\nGrammar: https://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#valueOf-java.lang.String-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8055)  \n\n## parse-long\n\n```\nUsage: (parse-long s)\n```\n\n```\nParse string of decimal digits with optional leading -/+ and return a\nLong value, or nil if parse fails\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8044)  \n\n## parse-uuid\n\n```\nUsage: (parse-uuid s)\n```\n\n```\nParse a string representing a UUID and return a java.util.UUID instance,\nor nil if parse fails.\n\nGrammar: https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html#toString--\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8068)  \n\n## partial\n\n```\nUsage: (partial f)\n       (partial f arg1)\n       (partial f arg1 arg2)\n       (partial f arg1 arg2 arg3)\n       (partial f arg1 arg2 arg3 & more)\n```\n\n```\nTakes a function f and fewer than the normal arguments to f, and\nreturns a fn that takes a variable number of additional args. When\ncalled, the returned function calls f with args + additional args.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2631)  \n\n## partition\n\n```\nUsage: (partition n coll)\n       (partition n step coll)\n       (partition n step pad coll)\n```\n\n```\nReturns a lazy sequence of lists of n items each, at offsets step\napart. If step is not supplied, defaults to n, i.e. the partitions\ndo not overlap. If a pad collection is supplied, use its elements as\nnecessary to complete last partition upto n items. In case there are\nnot enough padding elements, return a partition with less than n items.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3185)  \n\n## partition-all\n\n```\nUsage: (partition-all n)\n       (partition-all n coll)\n       (partition-all n step coll)\n```\n\n```\nReturns a lazy sequence of lists like partition, but may include\npartitions with fewer than n items at the end.  Returns a stateful\ntransducer when no collection is provided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7308)  \n\n## partition-by\n\n```\nUsage: (partition-by f)\n       (partition-by f coll)\n```\n\n```\nApplies f to each value in coll, splitting it each time f returns a\nnew value.  Returns a lazy seq of partitions.  Returns a stateful\ntransducer when no collection is provided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7228)  \n\n## pcalls\n\n```\nUsage: (pcalls & fns)\n```\n\n```\nExecutes the no-arg fns in parallel, returning a lazy sequence of\ntheir values\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7104)  \n\n## peek\n\n```\nUsage: (peek coll)\n```\n\n```\nFor a list or queue, same as first, for a vector, same as, but much\nmore efficient than, last. If the collection is empty, returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1474)  \n\n## persistent!\n\n```\nUsage: (persistent! coll)\n```\n\n```\nReturns a new, persistent version of the transient collection, in\nconstant time. The transient collection cannot be used after this\ncall, any such use will throw an exception.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3350)  \n\n## pmap\n\n```\nUsage: (pmap f coll)\n       (pmap f coll & colls)\n```\n\n```\nLike map, except f is applied in parallel. Semi-lazy in that the\nparallel computation stays ahead of the consumption, but doesn't\nrealize the entire result unless required. Only useful for\ncomputationally intensive functions where the time of f dominates\nthe coordination overhead.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7079)  \n\n## pop\n\n```\nUsage: (pop coll)\n```\n\n```\nFor a list or queue, returns a new list/queue without the first\nitem, for a vector, returns a new vector without the last item. If\nthe collection is empty, throws an exception.  Note - not the same\nas next/butlast.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1481)  \n\n## pop!\n\n```\nUsage: (pop! coll)\n```\n\n```\nRemoves the last item from a transient vector. If\nthe collection is empty, throws an exception. Returns coll\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3393)  \n\n## pop-thread-bindings\n\n```\nUsage: (pop-thread-bindings)\n```\n\n```\nPop one set of bindings pushed with push-binding before. It is an error to\npop bindings without pushing before.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1948)  \n\n## pos-int?\n\n```\nUsage: (pos-int? x)\n```\n\n```\nReturn true if x is a positive fixed precision integer\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1422)  \n\n## pos?\n\n```\nUsage: (pos? num)\n```\n\n```\nReturns true if num is greater than zero, else false\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1261)  \n\n## pr\n\n```\nUsage: (pr)\n       (pr x)\n       (pr x & more)\n```\n\n```\nPrints the object(s) to the output stream that is the current value\nof *out*.  Prints the object(s), separated by spaces if there is\nmore than one.  By default, pr and prn print in a way that objects\ncan be read by the reader\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3678)  \n\n## pr-str\n\n```\nUsage: (pr-str & xs)\n```\n\n```\npr to a string, returning it\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4760)  \n\n## prefer-method\n\n```\nUsage: (prefer-method multifn dispatch-val-x dispatch-val-y)\n```\n\n```\nCauses the multimethod to prefer matches of dispatch-val-x over dispatch-val-y \nwhen there is a conflict\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1820)  \n\n## prefers\n\n```\nUsage: (prefers multifn)\n```\n\n```\nGiven a multimethod, returns a map of preferred value -> set of other values\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1841)  \n\n## print\n\n```\nUsage: (print & more)\n```\n\n```\nPrints the object(s) to the output stream that is the current value\nof *out*.  print and println produce output for human consumption.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3725)  \n\n## print-str\n\n```\nUsage: (print-str & xs)\n```\n\n```\nprint to a string, returning it\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4778)  \n\n## printf\n\n```\nUsage: (printf fmt & args)\n```\n\n```\nPrints formatted output, as per format\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5771)  \n\n## println\n\n```\nUsage: (println & more)\n```\n\n```\nSame as print followed by (newline)\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3734)  \n\n## println-str\n\n```\nUsage: (println-str & xs)\n```\n\n```\nprintln to a string, returning it\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4787)  \n\n## prn\n\n```\nUsage: (prn & more)\n```\n\n```\nSame as pr followed by (newline). Observes *flush-on-newline*\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3715)  \n\n## prn-str\n\n```\nUsage: (prn-str & xs)\n```\n\n```\nprn to a string, returning it\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4769)  \n\n## promise\n\n```\nUsage: (promise)\n```\n\n```\nReturns a promise object that can be read with deref/@, and set,\nonce only, with deliver. Calls to deref/@ prior to delivery will\nblock, unless the variant of deref with timeout is used. All\nsubsequent derefs will return the same delivered value without\nblocking. See also - realized?.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7164)  \n\n## proxy\n\n```\nUsage: (proxy class-and-interfaces args & fs)\n```\n\n```\nclass-and-interfaces - a vector of class names\n\nargs - a (possibly empty) vector of arguments to the superclass\nconstructor.\n\nf => (name [params*] body) or\n(name ([params*] body) ([params+] body) ...)\n\nExpands to code which creates a instance of a proxy class that\nimplements the named class/interface(s) by calling the supplied\nfns. A single class, if provided, must be first. If not provided it\ndefaults to Object.\n\nThe interfaces names must be valid interface types. If a method fn\nis not provided for a class method, the superclass method will be\ncalled. If a method fn is not provided for an interface method, an\nUnsupportedOperationException will be thrown should it be\ncalled. Method fns are closures and can capture the environment in\nwhich proxy is called. Each method fn takes an additional implicit\nfirst arg, which is bound to 'this. Note that while method fns can\nbe provided to override protected methods, they have no other access\nto protected members, nor to super, as these capabilities cannot be\nproxied.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L334)  \n\n## proxy-mappings\n\n```\nUsage: (proxy-mappings proxy)\n```\n\n```\nTakes a proxy instance and returns the proxy's fn map.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L328)  \n\n## proxy-super\n\n```\nUsage: (proxy-super meth & args)\n```\n\n```\nUse to call a superclass method in the body of a proxy method. \nNote, expansion captures 'this\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L396)  \n\n## push-thread-bindings\n\n```\nUsage: (push-thread-bindings bindings)\n```\n\n```\nWARNING: This is a low-level function. Prefer high-level macros like\nbinding where ever possible.\n\nTakes a map of Var/value pairs. Binds each Var to the associated value for\nthe current thread. Each call *MUST* be accompanied by a matching call to\npop-thread-bindings wrapped in a try-finally!\n\n    (push-thread-bindings bindings)\n    (try\n      ...\n      (finally\n        (pop-thread-bindings)))\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1930)  \n\n## pvalues\n\n```\nUsage: (pvalues & exprs)\n```\n\n```\nReturns a lazy sequence of the values of the exprs, which are\nevaluated in parallel\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7111)  \n\n## qualified-ident?\n\n```\nUsage: (qualified-ident? x)\n```\n\n```\nReturn true if x is a symbol or keyword with a namespace\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1637)  \n\n## qualified-keyword?\n\n```\nUsage: (qualified-keyword? x)\n```\n\n```\nReturn true if x is a keyword with a namespace\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1657)  \n\n## qualified-symbol?\n\n```\nUsage: (qualified-symbol? x)\n```\n\n```\nReturn true if x is a symbol with a namespace\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1647)  \n\n## quot\n\n```\nUsage: (quot num div)\n```\n\n```\nquot[ient] of dividing numerator by denominator.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1275)  \n\n## quote\n\n```\nUsage: (quote form)\n```\n\n```\nYields the unevaluated form.\n\nPlease see https://clojure.org/reference/special_forms#quote\n```\n\nAdded in Clojure version 1.0\n\n## rand\n\n```\nUsage: (rand)\n       (rand n)\n```\n\n```\nReturns a random floating point number between 0 (inclusive) and\nn (default 1) (exclusive).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4936)  \n\n## rand-int\n\n```\nUsage: (rand-int n)\n```\n\n```\nReturns a random integer between 0 (inclusive) and n (exclusive).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4944)  \n\n## rand-nth\n\n```\nUsage: (rand-nth coll)\n```\n\n```\nReturn a random element of the (sequential) collection. Will have\nthe same performance characteristics as nth for the given\ncollection.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7299)  \n\n## random-sample\n\n```\nUsage: (random-sample prob)\n       (random-sample prob coll)\n```\n\n```\nReturns items from coll with random probability of prob (0.0 -\n1.0).  Returns a transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7741)  \n\n## random-uuid\n\n```\nUsage: (random-uuid)\n```\n\n```\nReturns a pseudo-randomly generated java.util.UUID instance (i.e. type 4).\n\nSee: https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html#randomUUID--\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6861)  \n\n## range\n\n```\nUsage: (range)\n       (range end)\n       (range start end)\n       (range start end step)\n```\n\n```\nReturns a lazy seq of nums from start (inclusive) to end\n(exclusive), by step, where start defaults to 0, step to 1, and end to\ninfinity. When step is equal to 0, returns an infinite sequence of\nstart. When start is equal to end, returns empty list.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3036)  \n\n## ratio?\n\n```\nUsage: (ratio? n)\n```\n\n```\nReturns true if n is a Ratio\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3577)  \n\n## rational?\n\n```\nUsage: (rational? n)\n```\n\n```\nReturns true if n is a rational number\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3613)  \n\n## rationalize\n\n```\nUsage: (rationalize num)\n```\n\n```\nreturns the rational value of num\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1291)  \n\n## re-find\n\n```\nUsage: (re-find m)\n       (re-find re s)\n```\n\n```\nReturns the next regex match, if any, of string to pattern, using\njava.util.regex.Matcher.find().  Uses re-groups to return the\ngroups.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4923)  \n\n## re-groups\n\n```\nUsage: (re-groups m)\n```\n\n```\nReturns the groups from the most recent match/find. If there are no\nnested groups, returns a string of the entire match. If there are\nnested groups, returns a vector of the groups, the first element\nbeing the entire match.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4883)  \n\n## re-matcher\n\n```\nUsage: (re-matcher re s)\n```\n\n```\nReturns an instance of java.util.regex.Matcher, for use, e.g. in\nre-find.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4874)  \n\n## re-matches\n\n```\nUsage: (re-matches re s)\n```\n\n```\nReturns the match, if any, of string to pattern, using\njava.util.regex.Matcher.matches().  Uses re-groups to return the\ngroups.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4911)  \n\n## re-pattern\n\n```\nUsage: (re-pattern s)\n```\n\n```\nReturns an instance of java.util.regex.Pattern, for use, e.g. in\nre-matcher.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4864)  \n\n## re-seq\n\n```\nUsage: (re-seq re s)\n```\n\n```\nReturns a lazy sequence of successive matches of pattern in string,\nusing java.util.regex.Matcher.find(), each such match processed with\nre-groups.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4899)  \n\n## read\n\n```\nUsage: (read)\n       (read stream)\n       (read stream eof-error? eof-value)\n       (read stream eof-error? eof-value recursive?)\n       (read opts stream)\n```\n\n```\nReads the next object from stream, which must be an instance of\njava.io.PushbackReader or some derivee.  stream defaults to the\ncurrent value of *in*.\n\nOpts is a persistent map with valid keys:\n  :read-cond - :allow to process reader conditionals, or\n               :preserve to keep all branches\n  :features - persistent set of feature keywords for reader conditionals\n  :eof - on eof, return value unless :eofthrow, then throw.\n         if not specified, will throw\n\nNote that read can execute code (controlled by *read-eval*),\nand as such should be used only with trusted sources.\n\nFor data structure interop use clojure.edn/read\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3742)  \n\n## read+string\n\n```\nUsage: (read+string)\n       (read+string stream)\n       (read+string stream eof-error? eof-value)\n       (read+string stream eof-error? eof-value recursive?)\n       (read+string opts stream)\n```\n\n```\nLike read, and taking the same args. stream must be a LineNumberingPushbackReader.\nReturns a vector containing the object read and the (whitespace-trimmed) string read.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3771)  \n\n## read-line\n\n```\nUsage: (read-line)\n```\n\n```\nReads the next line from stream that is the current value of *in* .\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3797)  \n\n## read-string\n\n```\nUsage: (read-string s)\n       (read-string opts s)\n```\n\n```\nReads one object from the string s. Optionally include reader\noptions, as specified in read.\n\nNote that read-string can execute code (controlled by *read-eval*),\nand as such should be used only with trusted sources.\n\nFor data structure interop use clojure.edn/read-string\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3806)  \n\n## reader-conditional\n\n```\nUsage: (reader-conditional form splicing?)\n```\n\n```\nConstruct a data representation of a reader conditional.\nIf true, splicing? indicates read-cond-splicing.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7852)  \n\n## reader-conditional?\n\n```\nUsage: (reader-conditional? value)\n```\n\n```\nReturn true if the value is the data representation of a reader conditional\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7846)  \n\n## realized?\n\n```\nUsage: (realized? x)\n```\n\n```\nReturns true if a value has been produced for a promise, delay, future or lazy sequence.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7601)  \n\n## record?\n\n```\nUsage: (record? x)\n```\n\n```\nReturns true if x is a record\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L406)  \n\n## recur\n\n```\nUsage: (recur exprs*)\n```\n\n```\nEvaluates the exprs in order, then, in parallel, rebinds\nthe bindings of the recursion point to the values of the exprs.\nExecution then jumps back to the recursion point, a loop or fn method.\n\nPlease see https://clojure.org/reference/special_forms#recur\n```\n\nAdded in Clojure version 1.0\n\n## reduce\n\n```\nUsage: (reduce f coll)\n       (reduce f val coll)\n```\n\n```\nf should be a function of 2 arguments. If val is not supplied,\nreturns the result of applying f to the first 2 items in coll, then\napplying f to that result and the 3rd item, etc. If coll contains no\nitems, f must accept no arguments as well, and reduce returns the\nresult of calling f with no arguments.  If coll has only 1 item, it\nis returned and f is not called.  If val is supplied, returns the\nresult of applying f to val and the first item in coll, then\napplying f to that result and the 2nd item, etc. If coll contains no\nitems, returns val and f is not called.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6868)  \n\n## reduce-kv\n\n```\nUsage: (reduce-kv f init coll)\n```\n\n```\nReduces an associative collection. f should be a function of 3\narguments. Returns the result of applying f to init, the first key\nand the first value in coll, then applying f to that result and the\n2nd key and value, etc. If coll contains no entries, returns init\nand f is not called. Note that reduce-kv is supported on vectors,\nwhere the keys will be the ordinals.\n```\n\nAdded in Clojure version 1.4\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6910)  \n\n## reduced\n\n```\nUsage: (reduced x)\n```\n\n```\nWraps x in a way such that a reduce will terminate with the value x\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2853)  \n\n## reduced?\n\n```\nUsage: (reduced? x)\n```\n\n```\nReturns true if x is the result of a call to reduced\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2859)  \n\n## reductions\n\n```\nUsage: (reductions f coll)\n       (reductions f init coll)\n```\n\n```\nReturns a lazy seq of the intermediate values of the reduction (as\nper reduce) of coll by f, starting with init.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7282)  \n\n## ref\n\n```\nUsage: (ref x)\n       (ref x & options)\n```\n\n```\nCreates and returns a Ref with an initial value of x and zero or\nmore options (in any order):\n\n:meta metadata-map\n\n:validator validate-fn\n\n:min-history (default 0)\n:max-history (default 10)\n\nIf metadata-map is supplied, it will become the metadata on the\nref. validate-fn must be nil or a side-effect-free fn of one\nargument, which will be passed the intended new state on any state\nchange. If the new state is unacceptable, the validate-fn should\nreturn false or throw an exception. validate-fn will be called on\ntransaction commit, when all refs have their final values.\n\nNormally refs accumulate history dynamically as needed to deal with\nread demands. If you know in advance you will need history you can\nset :min-history to ensure it will be available when first needed (instead\nof after a read fault). History is limited, and the limit can be set\nwith :max-history.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2279)  \n\n## ref-history-count\n\n```\nUsage: (ref-history-count ref)\n```\n\n```\nReturns the history count of a ref\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2480)  \n\n## ref-max-history\n\n```\nUsage: (ref-max-history ref)\n       (ref-max-history ref n)\n```\n\n```\nGets the max-history of a ref, or sets it and returns the ref\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2496)  \n\n## ref-min-history\n\n```\nUsage: (ref-min-history ref)\n       (ref-min-history ref n)\n```\n\n```\nGets the min-history of a ref, or sets it and returns the ref\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2487)  \n\n## ref-set\n\n```\nUsage: (ref-set ref val)\n```\n\n```\nMust be called in a transaction. Sets the value of ref.\nReturns val.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2472)  \n\n## refer\n\n```\nUsage: (refer ns-sym & filters)\n```\n\n```\nrefers to all public vars of ns, subject to filters.\nfilters can include at most one each of:\n\n:exclude list-of-symbols\n:only list-of-symbols\n:rename map-of-fromsymbol-tosymbol\n\nFor each public interned var in the namespace named by the symbol,\nadds a mapping from the name of the var to the var to the current\nnamespace.  Throws an exception if name is already mapped to\nsomething else in the current namespace. Filters can be used to\nselect a subset, via inclusion or exclusion, or to provide a mapping\nto a symbol different from the var's name, in order to prevent\nclashes. Use :use in the ns macro in preference to calling this directly.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4218)  \n\n## refer-clojure\n\n```\nUsage: (refer-clojure & filters)\n```\n\n```\nSame as (refer 'clojure.core <filters>)\n```\n\n```\nSpecs:\n  Args: (*\n          (alt\n           :exclude (cat\n                     :op (quotable #{:exclude})\n                     :arg (quotable :clojure.core.specs.alpha/exclude))\n           :only (cat\n                  :op (quotable #{:only})\n                  :arg (quotable :clojure.core.specs.alpha/only))\n           :rename (cat\n                    :op (quotable #{:rename})\n                    :arg (quotable :clojure.core.specs.alpha/rename))))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5847)  \n\n## reify\n\n```\nUsage: (reify & opts+specs)\n```\n\n```\nreify creates an object implementing a protocol or interface.\n reify is a macro with the following structure:\n\n(reify options* specs*)\n \n Currently there are no options.\n\n Each spec consists of the protocol or interface name followed by zero\n or more method bodies:\n\n protocol-or-interface-or-Object\n (methodName [args+] body)*\n\n Methods should be supplied for all methods of the desired\n protocol(s) and interface(s). You can also define overrides for\n methods of Object. Note that the first parameter must be supplied to\n correspond to the target object ('this' in Java parlance). Thus\n methods for interfaces will take one more argument than do the\n interface declarations.  Note also that recur calls to the method\n head should *not* pass the target object, it will be supplied\n automatically and can not be substituted.\n\n The return type can be indicated by a type hint on the method name,\n and arg types can be indicated by a type hint on arg names. If you\n leave out all hints, reify will try to match on same name/arity\n method in the protocol(s)/interface(s) - this is preferred. If you\n supply any hints at all, no inference is done, so all hints (or\n default of Object) must be correct, for both arguments and return\n type. If a method is overloaded in a protocol/interface, multiple\n independent method definitions must be supplied.  If overloaded with\n same arity in an interface you must specify complete hints to\n disambiguate - a missing hint implies Object.\n\n recur works to method heads The method bodies of reify are lexical\n closures, and can refer to the surrounding local scope:\n \n (str (let [f \"foo\"] \n      (reify Object \n        (toString [this] f))))\n == \"foo\"\n\n (seq (let [f \"foo\"] \n      (reify clojure.lang.Seqable \n        (seq [this] (seq f)))))\n == (\\f \\o \\o))\n \n reify always implements clojure.lang.IObj and transfers meta\n data of the form to the created object.\n \n (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n == {:k :v}\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L70)  \n\n## release-pending-sends\n\n```\nUsage: (release-pending-sends)\n```\n\n```\nNormally, actions sent directly or indirectly during another action\nare held until the action completes (changes the agent's\nstate). This function can be used to dispatch any pending sent\nactions immediately. This has no impact on actions sent during a\ntransaction, which are still held until commit. If no action is\noccurring, does nothing. Returns the number of actions dispatched.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2150)  \n\n## rem\n\n```\nUsage: (rem num div)\n```\n\n```\nremainder of dividing numerator by denominator.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1283)  \n\n## remove\n\n```\nUsage: (remove pred)\n       (remove pred coll)\n```\n\n```\nReturns a lazy sequence of the items in coll for which\n(pred item) returns logical false. pred must be free of side-effects.\nReturns a transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2843)  \n\n## remove-all-methods\n\n```\nUsage: (remove-all-methods multifn)\n```\n\n```\nRemoves all of the methods of multimethod.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1806)  \n\n## remove-method\n\n```\nUsage: (remove-method multifn dispatch-val)\n```\n\n```\nRemoves the method of multimethod associated with dispatch-value.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1813)  \n\n## remove-ns\n\n```\nUsage: (remove-ns sym)\n```\n\n```\nRemoves the namespace named by the symbol. Use with caution.\nCannot be used to remove the clojure namespace.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4141)  \n\n## remove-tap\n\n```\nUsage: (remove-tap f)\n```\n\n```\nRemove f from the tap set.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7993)  \n\n## remove-watch\n\n```\nUsage: (remove-watch reference key)\n```\n\n```\nRemoves a watch (set by add-watch) from a reference\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2179)  \n\n## repeat\n\n```\nUsage: (repeat x)\n       (repeat n x)\n```\n\n```\nReturns a lazy (infinite!, or length n if supplied) sequence of xs.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3016)  \n\n## repeatedly\n\n```\nUsage: (repeatedly f)\n       (repeatedly n f)\n```\n\n```\nTakes a function of no args, presumably with side effects, and\nreturns an infinite (or length n if supplied) lazy sequence of calls\nto it\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5168)  \n\n## replace\n\n```\nUsage: (replace smap)\n       (replace smap coll)\n```\n\n```\nGiven a map of replacement pairs and a vector/collection, returns a\nvector/seq with any elements = a key in smap replaced with the\ncorresponding val in smap.  Returns a transducer when no collection\nis provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5083)  \n\n## replicate\n\n```\nUsage: (replicate n x)\n```\n\n```\nDEPRECATED: Use 'repeat' instead.\nReturns a lazy seq of n xs.\n```\n\nAdded in Clojure version 1.0\n\nDeprecated since Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3023)  \n\n## require\n\n```\nUsage: (require & args)\n```\n\n```\nLoads libs, skipping any that are already loaded. Each argument is\neither a libspec that identifies a lib, a prefix list that identifies\nmultiple libs whose names share a common prefix, or a flag that modifies\nhow all the identified libs are loaded. Use :require in the ns macro\nin preference to calling this directly.\n\nLibs\n\nA 'lib' is a named set of resources in classpath whose contents define a\nlibrary of Clojure code. Lib names are symbols and each lib is associated\nwith a Clojure namespace and a Java package that share its name. A lib's\nname also locates its root directory within classpath using Java's\npackage name to classpath-relative path mapping. All resources in a lib\nshould be contained in the directory structure under its root directory.\nAll definitions a lib makes should be in its associated namespace.\n\n'require loads a lib by loading its root resource. The root resource path\nis derived from the lib name in the following manner:\nConsider a lib named by the symbol 'x.y.z; it has the root directory\n<classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj, or\n<classpath>/x/y/z.cljc if <classpath>/x/y/z.clj does not exist. The\nroot resource should contain code to create the lib's\nnamespace (usually by using the ns macro) and load any additional\nlib resources.\n\nLibspecs\n\nA libspec is a lib name or a vector containing a lib name followed by\noptions expressed as sequential keywords and arguments.\n\nRecognized options:\n:as takes a symbol as its argument and makes that symbol an alias to the\n  lib's namespace in the current namespace.\n:as-alias takes a symbol as its argument and aliases like :as, however\n  the lib will not be loaded. If the lib has not been loaded, a new\n  empty namespace will be created (as with create-ns).\n:refer takes a list of symbols to refer from the namespace or the :all\n  keyword to bring in all public vars.\n\nPrefix Lists\n\nIt's common for Clojure code to depend on several libs whose names have\nthe same prefix. When specifying libs, prefix lists can be used to reduce\nrepetition. A prefix list contains the shared prefix followed by libspecs\nwith the shared prefix removed from the lib names. After removing the\nprefix, the names that remain must not contain any periods.\n\nFlags\n\nA flag is a keyword.\nRecognized flags: :reload, :reload-all, :verbose\n:reload forces loading of all the identified libs even if they are\n  already loaded (has no effect on libspecs using :as-alias)\n:reload-all implies :reload and also forces loading of all libs that the\n  identified libs directly or indirectly load via require or use\n  (has no effect on libspecs using :as-alias)\n:verbose triggers printing information about each load, alias, and refer\n\nExample:\n\nThe following would load the libraries clojure.zip and clojure.set\nabbreviated as 's'.\n\n(require '(clojure zip [set :as s]))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6038)  \n\n## requiring-resolve\n\n```\nUsage: (requiring-resolve sym)\n```\n\n```\nResolves namespace-qualified sym per 'resolve'. If initial resolve\nfails, attempts to require sym's namespace and retries.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6117)  \n\n## reset!\n\n```\nUsage: (reset! atom newval)\n```\n\n```\nSets the value of atom to newval without regard for the\ncurrent value. Returns newval.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2393)  \n\n## reset-meta!\n\n```\nUsage: (reset-meta! iref metadata-map)\n```\n\n```\nAtomically resets the metadata for a namespace/var/ref/agent/atom\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2433)  \n\n## reset-vals!\n\n```\nUsage: (reset-vals! atom newval)\n```\n\n```\nSets the value of atom to newval. Returns [old new], the value of the\natom before and after the reset.\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2400)  \n\n## resolve\n\n```\nUsage: (resolve sym)\n       (resolve env sym)\n```\n\n```\nsame as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4373)  \n\n## rest\n\n```\nUsage: (rest coll)\n```\n\n```\nReturns a possibly empty seq of the items after the first. Calls seq on its\nargument.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L66)  \n\n## restart-agent\n\n```\nUsage: (restart-agent a new-state & options)\n```\n\n```\nWhen an agent is failed, changes the agent state to new-state and\nthen un-fails the agent so that sends are allowed again.  If\na :clear-actions true option is given, any actions queued on the\nagent that were being held while it was failed will be discarded,\notherwise those held actions will proceed.  The new-state must pass\nthe validator if any, or restart will throw an exception and the\nagent will remain failed with its old state and error.  Watchers, if\nany, will NOT be notified of the new state.  Throws an exception if\nthe agent is not failed.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2194)  \n\n## resultset-seq\n\n```\nUsage: (resultset-seq rs)\n```\n\n```\nCreates and returns a lazy sequence of structmaps corresponding to\nthe rows in the java.sql.ResultSet rs\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5727)  \n\n## reverse\n\n```\nUsage: (reverse coll)\n```\n\n```\nReturns a seq of the items in coll in reverse order. Not lazy.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L949)  \n\n## reversible?\n\n```\nUsage: (reversible? coll)\n```\n\n```\nReturns true if coll implements Reversible\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6303)  \n\n## rseq\n\n```\nUsage: (rseq rev)\n```\n\n```\nReturns, in constant time, a seq of the items in rev (which\ncan be a vector or sorted-map), in reverse order. If rev is empty returns nil\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1596)  \n\n## rsubseq\n\n```\nUsage: (rsubseq sc test key)\n       (rsubseq sc start-test start-key end-test end-key)\n```\n\n```\nsc must be a sorted collection, test(s) one of <, <=, > or\n>=. Returns a reverse seq of those entries with keys ek for\nwhich (test (.. sc comparator (compare ek key)) 0) is true\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5151)  \n\n## run!\n\n```\nUsage: (run! proc coll)\n```\n\n```\nRuns the supplied procedure (via reduce), for purposes of side\neffects, on successive items in the collection. Returns nil\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7778)  \n\n## satisfies?\n\n```\nUsage: (satisfies? protocol x)\n```\n\n```\nReturns true if x satisfies the protocol\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L570)  \n\n## second\n\n```\nUsage: (second x)\n```\n\n```\nSame as (first (next x))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L93)  \n\n## select-keys\n\n```\nUsage: (select-keys map keyseq)\n```\n\n```\nReturns a map containing only those entries in map whose key is in keys\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1555)  \n\n## send\n\n```\nUsage: (send a f & args)\n```\n\n```\nDispatch an action to an agent. Returns the agent immediately.\nSubsequently, in a thread from a thread pool, the state of the agent\nwill be set to the value of:\n\n(apply action-fn state-of-agent args)\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2128)  \n\n## send-off\n\n```\nUsage: (send-off a f & args)\n```\n\n```\nDispatch a potentially blocking action to an agent. Returns the\nagent immediately. Subsequently, in a separate thread, the state of\nthe agent will be set to the value of:\n\n(apply action-fn state-of-agent args)\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2139)  \n\n## send-via\n\n```\nUsage: (send-via executor a f & args)\n```\n\n```\nDispatch an action to an agent. Returns the agent immediately.\nSubsequently, in a thread supplied by executor, the state of the agent\nwill be set to the value of:\n\n(apply action-fn state-of-agent args)\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2118)  \n\n## seq\n\n```\nUsage: (seq coll)\n```\n\n```\nReturns a seq on the collection. If the collection is\nempty, returns nil.  (seq nil) returns nil. seq also works on\nStrings, native Java arrays (of reference types) and any objects\nthat implement Iterable. Note that seqs cache values, thus seq\nshould not be used on any Iterable whose iterator repeatedly\nreturns the same mutable object.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L128)  \n\n## seq-to-map-for-destructuring\n\n```\nUsage: (seq-to-map-for-destructuring s)\n```\n\n```\nBuilds a map from a seq as described in\nhttps://clojure.org/reference/special_forms#keyword-arguments\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4392)  \n\n## seq?\n\n```\nUsage: (seq? x)\n```\n\n```\nReturn true if x implements ISeq\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L148)  \n\n## seqable?\n\n```\nUsage: (seqable? x)\n```\n\n```\nReturn true if the seq function is supported for x\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6260)  \n\n## seque\n\n```\nUsage: (seque s)\n       (seque n-or-q s)\n```\n\n```\nCreates a queued seq on another (presumably lazy) seq s. The queued\nseq will produce a concrete seq in the background, and can get up to\nn items ahead of the consumer. n-or-q can be an integer n buffer\nsize, or an instance of java.util.concurrent BlockingQueue. Note\nthat reading from a seque can block if the reader gets ahead of the\nproducer.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5422)  \n\n## sequence\n\n```\nUsage: (sequence coll)\n       (sequence xform coll)\n       (sequence xform coll & colls)\n```\n\n```\nCoerces coll to a (possibly empty) sequence, if it is not already\none. Will not force a lazy seq. (sequence nil) yields (), When a\ntransducer is supplied, returns a lazy sequence of applications of\nthe transform to the items in coll(s), i.e. to the set of first\nitems of each coll, followed by the set of second\nitems in each coll, until any one of the colls is exhausted.  Any\nremaining items in other colls are ignored. The transform should accept\nnumber-of-colls arguments\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2664)  \n\n## sequential?\n\n```\nUsage: (sequential? coll)\n```\n\n```\nReturns true if coll implements Sequential\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6285)  \n\n## set\n\n```\nUsage: (set coll)\n```\n\n```\nReturns a set of the distinct elements of coll.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4106)  \n\n## set!\n\n```\nUsage: (set! var-symbol expr)\n       (set! (. instance-expr instanceFieldName-symbol) expr)\n       (set! (. Classname-symbol staticFieldName-symbol) expr)\n```\n\n```\nUsed to set thread-local-bound vars, Java object instance\nfields, and Java class static fields.\n\nPlease see https://clojure.org/vars#set\n```\n\nAdded in Clojure version 1.0\n\n## set-agent-send-executor!\n\n```\nUsage: (set-agent-send-executor! executor)\n```\n\n```\nSets the ExecutorService to be used by send\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2106)  \n\n## set-agent-send-off-executor!\n\n```\nUsage: (set-agent-send-off-executor! executor)\n```\n\n```\nSets the ExecutorService to be used by send-off\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2112)  \n\n## set-error-handler!\n\n```\nUsage: (set-error-handler! a handler-fn)\n```\n\n```\nSets the error-handler of agent a to handler-fn.  If an action\nbeing run by the agent throws an exception or doesn't pass the\nvalidator fn, handler-fn will be called with two arguments: the\nagent and the exception.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2211)  \n\n## set-error-mode!\n\n```\nUsage: (set-error-mode! a mode-keyword)\n```\n\n```\nSets the error-mode of agent a to mode-keyword, which must be\neither :fail or :continue.  If an action being run by the agent\nthrows an exception or doesn't pass the validator fn, an\nerror-handler may be called (see set-error-handler!), after which,\nif the mode is :continue, the agent will continue as if neither the\naction that caused the error nor the error itself ever happened.\n\nIf the mode is :fail, the agent will become failed and will stop\naccepting new 'send' and 'send-off' actions, and any previously\nqueued actions will be held until a 'restart-agent'.  Deref will\nstill work, returning the state of the agent before the error.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2229)  \n\n## set-validator!\n\n```\nUsage: (set-validator! iref validator-fn)\n```\n\n```\nSets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a\nside-effect-free fn of one argument, which will be passed the intended\nnew state on any state change. If the new state is unacceptable, the\nvalidator-fn should return false or throw an exception. If the current state (root\nvalue if var) is not acceptable to the new validator, an exception\nwill be thrown and the validator will not be changed.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2406)  \n\n## set?\n\n```\nUsage: (set? x)\n```\n\n```\nReturns true if x implements IPersistentSet\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4100)  \n\n## short\n\n```\nUsage: (short x)\n```\n\n```\nCoerce to short\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3499)  \n\n## short-array\n\n```\nUsage: (short-array size-or-seq)\n       (short-array size init-val-or-seq)\n```\n\n```\nCreates an array of shorts\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5334)  \n\n## shorts\n\n```\nUsage: (shorts xs)\n```\n\n```\nCasts to shorts[]\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5388)  \n\n## shuffle\n\n```\nUsage: (shuffle coll)\n```\n\n```\nReturn a random permutation of coll\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7342)  \n\n## shutdown-agents\n\n```\nUsage: (shutdown-agents)\n```\n\n```\nInitiates a shutdown of the thread pools that back the agent\nsystem. Running actions will complete, but no new actions will be\naccepted\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2271)  \n\n## simple-ident?\n\n```\nUsage: (simple-ident? x)\n```\n\n```\nReturn true if x is a symbol or keyword without a namespace\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1632)  \n\n## simple-keyword?\n\n```\nUsage: (simple-keyword? x)\n```\n\n```\nReturn true if x is a keyword without a namespace\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1652)  \n\n## simple-symbol?\n\n```\nUsage: (simple-symbol? x)\n```\n\n```\nReturn true if x is a symbol without a namespace\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1642)  \n\n## slurp\n\n```\nUsage: (slurp f & opts)\n```\n\n```\nOpens a reader on f and reads all its contents, returning a string.\nSee clojure.java.io/reader for a complete list of supported arguments.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7009)  \n\n## some\n\n```\nUsage: (some pred coll)\n```\n\n```\nReturns the first logical true value of (pred x) for any x in coll,\nelse nil.  One common idiom is to use a set as pred, for example\nthis will return :fred if :fred is in the sequence, otherwise nil:\n(some #{:fred} coll)\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2709)  \n\n## some-\\>\n\n```\nUsage: (some-> expr & forms)\n```\n\n```\nWhen expr is not nil, threads it into the first form (via ->),\nand when that result is not nil, through the next etc\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7652)  \n\n## some-\\>\\>\n\n```\nUsage: (some->> expr & forms)\n```\n\n```\nWhen expr is not nil, threads it into the first form (via ->>),\nand when that result is not nil, through the next etc\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7666)  \n\n## some-fn\n\n```\nUsage: (some-fn p)\n       (some-fn p1 p2)\n       (some-fn p1 p2 p3)\n       (some-fn p1 p2 p3 & ps)\n```\n\n```\nTakes a set of predicates and returns a function f that returns the first logical true value\nreturned by one of its composing predicates against any of its arguments, else it returns\nlogical false. Note that f is short-circuiting in that it will stop execution on the first\nargument that triggers a logical true result against the original predicates.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7504)  \n\n## some?\n\n```\nUsage: (some? x)\n```\n\n```\nReturns true if x is not nil, false otherwise.\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L533)  \n\n## sort\n\n```\nUsage: (sort coll)\n       (sort comp coll)\n```\n\n```\nReturns a sorted sequence of the items in coll. If no comparator is\nsupplied, uses compare.  comparator must implement\njava.util.Comparator.  Guaranteed to be stable: equal elements will\nnot be reordered.  If coll is a Java array, it will be modified.  To\navoid this, sort a copy of the array.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3103)  \n\n## sort-by\n\n```\nUsage: (sort-by keyfn coll)\n       (sort-by keyfn comp coll)\n```\n\n```\nReturns a sorted sequence of the items in coll, where the sort\norder is determined by comparing (keyfn item).  If no comparator is\nsupplied, uses compare.  comparator must implement\njava.util.Comparator.  Guaranteed to be stable: equal elements will\nnot be reordered.  If coll is a Java array, it will be modified.  To\navoid this, sort a copy of the array.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3120)  \n\n## sorted-map\n\n```\nUsage: (sorted-map & keyvals)\n```\n\n```\nkeyval => key val\nReturns a new sorted map with supplied mappings.  If any keys are\nequal, they are handled as if by repeated uses of assoc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L400)  \n\n## sorted-map-by\n\n```\nUsage: (sorted-map-by comparator & keyvals)\n```\n\n```\nkeyval => key val\nReturns a new sorted map with supplied mappings, using the supplied\ncomparator.  If any keys are equal, they are handled as if by\nrepeated uses of assoc.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L409)  \n\n## sorted-set\n\n```\nUsage: (sorted-set & keys)\n```\n\n```\nReturns a new sorted set with supplied keys.  Any equal keys are\nhandled as if by repeated uses of conj.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L419)  \n\n## sorted-set-by\n\n```\nUsage: (sorted-set-by comparator & keys)\n```\n\n```\nReturns a new sorted set with supplied keys, using the supplied\ncomparator.  Any equal keys are handled as if by repeated uses of\nconj.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L427)  \n\n## sorted?\n\n```\nUsage: (sorted? coll)\n```\n\n```\nReturns true if coll implements Sorted\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6291)  \n\n## special-symbol?\n\n```\nUsage: (special-symbol? s)\n```\n\n```\nReturns true if s names a special form\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4993)  \n\n## spit\n\n```\nUsage: (spit f content & options)\n```\n\n```\nOpposite of slurp.  Opens f with writer, writes content, then\ncloses f. Options passed to clojure.java.io/writer.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7021)  \n\n## split-at\n\n```\nUsage: (split-at n coll)\n```\n\n```\nReturns a vector of [(take n coll) (drop n coll)]\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3002)  \n\n## split-with\n\n```\nUsage: (split-with pred coll)\n```\n\n```\nReturns a vector of [(take-while pred coll) (drop-while pred coll)]\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3009)  \n\n## str\n\n```\nUsage: (str)\n       (str x)\n       (str x & ys)\n```\n\n```\nWith no args, returns the empty string. With one arg x, returns\nx.toString().  (str nil) returns the empty string. With more than\none arg, returns the concatenation of the str values of the args.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L546)  \n\n## string?\n\n```\nUsage: (string? x)\n```\n\n```\nReturn true if x is a String\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L162)  \n\n## struct\n\n```\nUsage: (struct s & vals)\n```\n\n```\nReturns a new structmap instance with the keys of the\nstructure-basis. vals must be supplied for basis keys in order -\nwhere values are not supplied they will default to nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4063)  \n\n## struct-map\n\n```\nUsage: (struct-map s & inits)\n```\n\n```\nReturns a new structmap instance with the keys of the\nstructure-basis. keyvals may contain all, some or none of the basis\nkeys - where values are not supplied they will default to nil.\nkeyvals can also contain keys not in the basis.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4053)  \n\n## subs\n\n```\nUsage: (subs s start)\n       (subs s start end)\n```\n\n```\nReturns the substring of s beginning at start inclusive, and ending\nat end (defaults to length of string), exclusive.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5006)  \n\n## subseq\n\n```\nUsage: (subseq sc test key)\n       (subseq sc start-test start-key end-test end-key)\n```\n\n```\nsc must be a sorted collection, test(s) one of <, <=, > or\n>=. Returns a seq of those entries with keys ek for\nwhich (test (.. sc comparator (compare ek key)) 0) is true\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5134)  \n\n## subvec\n\n```\nUsage: (subvec v start)\n       (subvec v start end)\n```\n\n```\nReturns a persistent vector of the items in vector from\nstart (inclusive) to end (exclusive).  If end is not supplied,\ndefaults to (count vector). This operation is O(1) and very fast, as\nthe resulting vector shares structure with the original and no\ntrimming is done.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3819)  \n\n## supers\n\n```\nUsage: (supers class)\n```\n\n```\nReturns the immediate and indirect superclasses and interfaces of c, if any\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5578)  \n\n## swap!\n\n```\nUsage: (swap! atom f)\n       (swap! atom f x)\n       (swap! atom f x y)\n       (swap! atom f x y & args)\n```\n\n```\nAtomically swaps the value of atom to be:\n(apply f current-value-of-atom args). Note that f may be called\nmultiple times, and thus should be free of side effects.  Returns\nthe value that was swapped in.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2362)  \n\n## swap-vals!\n\n```\nUsage: (swap-vals! atom f)\n       (swap-vals! atom f x)\n       (swap-vals! atom f x y)\n       (swap-vals! atom f x y & args)\n```\n\n```\nAtomically swaps the value of atom to be:\n(apply f current-value-of-atom args). Note that f may be called\nmultiple times, and thus should be free of side effects.\nReturns [old new], the value of the atom before and after the swap.\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2374)  \n\n## symbol\n\n```\nUsage: (symbol name)\n       (symbol ns name)\n```\n\n```\nReturns a Symbol with the given namespace and name. Arity-1 works\non strings, keywords, and vars.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L591)  \n\n## symbol?\n\n```\nUsage: (symbol? x)\n```\n\n```\nReturn true if x is a Symbol\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L564)  \n\n## sync\n\n```\nUsage: (sync flags-ignored-for-now & body)\n```\n\n```\ntransaction-flags => TBD, pass nil for now\n\nRuns the exprs (in an implicit do) in a transaction that encompasses\nexprs and any nested calls.  Starts a transaction if none is already\nrunning on this thread. Any uncaught exception will abort the\ntransaction and flow out of sync. The exprs may be run more than\nonce, but any effects on Refs will be atomic.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2515)  \n\n## tagged-literal\n\n```\nUsage: (tagged-literal tag form)\n```\n\n```\nConstruct a data representation of a tagged literal from a\ntag symbol and a form.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7839)  \n\n## tagged-literal?\n\n```\nUsage: (tagged-literal? value)\n```\n\n```\nReturn true if the value is the data representation of a tagged literal\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7833)  \n\n## take\n\n```\nUsage: (take n)\n       (take n coll)\n```\n\n```\nReturns a lazy sequence of the first n items in coll, or all items if\nthere are fewer than n.  Returns a stateful transducer when\nno collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2878)  \n\n## take-last\n\n```\nUsage: (take-last n coll)\n```\n\n```\nReturns a seq of the last n items in coll.  Depending on the type\nof coll may be no better than linear time.  For vectors, see also subvec.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2958)  \n\n## take-nth\n\n```\nUsage: (take-nth n)\n       (take-nth n coll)\n```\n\n```\nReturns a lazy seq of every nth item in coll.  Returns a stateful\ntransducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4289)  \n\n## take-while\n\n```\nUsage: (take-while pred)\n       (take-while pred coll)\n```\n\n```\nReturns a lazy sequence of successive items from coll while\n(pred item) returns logical true. pred must be free of side-effects.\nReturns a transducer when no collection is provided.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2905)  \n\n## tap\\>\n\n```\nUsage: (tap> x)\n```\n\n```\nsends x to any taps. Will not block. Returns true if there was room in the queue,\nfalse if not (dropped).\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8000)  \n\n## test\n\n```\nUsage: (test v)\n```\n\n```\ntest [v] finds fn at key :test in var metadata and calls it,\npresuming failure will throw exception\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4854)  \n\n## the-ns\n\n```\nUsage: (the-ns x)\n```\n\n```\nIf passed a namespace, returns it. Else, when passed a symbol,\nreturns the namespace named by it, throwing an exception if not\nfound.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4154)  \n\n## thread-bound?\n\n```\nUsage: (thread-bound? & vars)\n```\n\n```\nReturns true if all of the vars provided as arguments have thread-local bindings.\nImplies that set!'ing the provided vars will succeed.  Returns true if no vars are provided.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5545)  \n\n## throw\n\n```\nUsage: (throw expr)\n```\n\n```\nThe expr is evaluated and thrown, therefore it should\nyield an instance of some derivee of Throwable.\n\nPlease see https://clojure.org/reference/special_forms#throw\n```\n\nAdded in Clojure version 1.0\n\n## time\n\n```\nUsage: (time expr)\n```\n\n```\nEvaluates expr and prints the time it took.  Returns the value of\nexpr.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3885)  \n\n## to-array\n\n```\nUsage: (to-array coll)\n```\n\n```\nReturns an array of Objects containing the contents of coll, which\ncan be any Collection.  Maps to java.util.Collection.toArray().\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L340)  \n\n## to-array-2d\n\n```\nUsage: (to-array-2d coll)\n```\n\n```\nReturns a (potentially-ragged) 2-dimensional array of Objects\ncontaining the contents of coll, which can be any Collection of any\nCollection.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4004)  \n\n## trampoline\n\n```\nUsage: (trampoline f)\n       (trampoline f & args)\n```\n\n```\ntrampoline can be used to convert algorithms requiring mutual\nrecursion without stack consumption. Calls f with supplied args, if\nany. If f returns a fn, calls that fn with no arguments, and\ncontinues to repeat, until the return value is not a fn, then\nreturns that non-fn value. Note that if you want to return a fn as a\nfinal value, you must wrap it in some data structure and unpack it\nafter trampoline returns.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6334)  \n\n## transduce\n\n```\nUsage: (transduce xform f coll)\n       (transduce xform f init coll)\n```\n\n```\nreduce with a transformation of f (xf). If init is not\nsupplied, (f) will be called to produce it. f should be a reducing\nstep function that accepts both 1 and 2 arguments, if it accepts\nonly 2 you can add the arity-1 with 'completing'. Returns the result\nof applying (the transformed) xf to init and the first item in coll,\nthen applying xf to that result and the 2nd item, etc. If coll\ncontains no items, returns init and f is not called. Note that\ncertain transforms may inject or skip items.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6933)  \n\n## transient\n\n```\nUsage: (transient coll)\n```\n\n```\nReturns a new, transient version of the collection, in constant time.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3343)  \n\n## tree-seq\n\n```\nUsage: (tree-seq branch? children root)\n```\n\n```\nReturns a lazy sequence of the nodes in a tree, via a depth-first walk.\n branch? must be a fn of one arg that returns true if passed a node\n that can have children (but may not).  children must be a fn of one\n arg that returns a sequence of the children. Will only be called on\n nodes for which branch? returns true. Root is the root node of the\ntree.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4956)  \n\n## true?\n\n```\nUsage: (true? x)\n```\n\n```\nReturns true if x is the value true, false otherwise.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L514)  \n\n## try\n\n```\nUsage: (try expr* catch-clause* finally-clause?)\n```\n\n```\ncatch-clause => (catch classname name expr*)\nfinally-clause => (finally expr*)\n\nCatches and handles Java exceptions.\n\nPlease see https://clojure.org/reference/special_forms#try\n```\n\nAdded in Clojure version 1.0\n\n## type\n\n```\nUsage: (type x)\n```\n\n```\nReturns the :type metadata of x, or its Class if none\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3467)  \n\n## unchecked-add\n\n```\nUsage: (unchecked-add x y)\n```\n\n```\nReturns the sum of x and y, both long.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1212)  \n\n## unchecked-add-int\n\n```\nUsage: (unchecked-add-int x y)\n```\n\n```\nReturns the sum of x and y, both int.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1205)  \n\n## unchecked-byte\n\n```\nUsage: (unchecked-byte x)\n```\n\n```\nCoerce to byte. Subject to rounding or truncation.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3517)  \n\n## unchecked-char\n\n```\nUsage: (unchecked-char x)\n```\n\n```\nCoerce to char. Subject to rounding or truncation.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3529)  \n\n## unchecked-dec\n\n```\nUsage: (unchecked-dec x)\n```\n\n```\nReturns a number one less than x, a long.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1184)  \n\n## unchecked-dec-int\n\n```\nUsage: (unchecked-dec-int x)\n```\n\n```\nReturns a number one less than x, an int.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1177)  \n\n## unchecked-divide-int\n\n```\nUsage: (unchecked-divide-int x y)\n```\n\n```\nReturns the division of x by y, both int.\nNote - uses a primitive operator subject to truncation.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1247)  \n\n## unchecked-double\n\n```\nUsage: (unchecked-double x)\n```\n\n```\nCoerce to double. Subject to rounding.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3553)  \n\n## unchecked-float\n\n```\nUsage: (unchecked-float x)\n```\n\n```\nCoerce to float. Subject to rounding.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3547)  \n\n## unchecked-inc\n\n```\nUsage: (unchecked-inc x)\n```\n\n```\nReturns a number one greater than x, a long.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1170)  \n\n## unchecked-inc-int\n\n```\nUsage: (unchecked-inc-int x)\n```\n\n```\nReturns a number one greater than x, an int.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1163)  \n\n## unchecked-int\n\n```\nUsage: (unchecked-int x)\n```\n\n```\nCoerce to int. Subject to rounding or truncation.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3535)  \n\n## unchecked-long\n\n```\nUsage: (unchecked-long x)\n```\n\n```\nCoerce to long. Subject to rounding or truncation.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3541)  \n\n## unchecked-multiply\n\n```\nUsage: (unchecked-multiply x y)\n```\n\n```\nReturns the product of x and y, both long.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1240)  \n\n## unchecked-multiply-int\n\n```\nUsage: (unchecked-multiply-int x y)\n```\n\n```\nReturns the product of x and y, both int.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1233)  \n\n## unchecked-negate\n\n```\nUsage: (unchecked-negate x)\n```\n\n```\nReturns the negation of x, a long.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1198)  \n\n## unchecked-negate-int\n\n```\nUsage: (unchecked-negate-int x)\n```\n\n```\nReturns the negation of x, an int.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1191)  \n\n## unchecked-remainder-int\n\n```\nUsage: (unchecked-remainder-int x y)\n```\n\n```\nReturns the remainder of division of x by y, both int.\nNote - uses a primitive operator subject to truncation.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1254)  \n\n## unchecked-short\n\n```\nUsage: (unchecked-short x)\n```\n\n```\nCoerce to short. Subject to rounding or truncation.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3523)  \n\n## unchecked-subtract\n\n```\nUsage: (unchecked-subtract x y)\n```\n\n```\nReturns the difference of x and y, both long.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1226)  \n\n## unchecked-subtract-int\n\n```\nUsage: (unchecked-subtract-int x y)\n```\n\n```\nReturns the difference of x and y, both int.\nNote - uses a primitive operator subject to overflow.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1219)  \n\n## underive\n\n```\nUsage: (underive tag parent)\n       (underive h tag parent)\n```\n\n```\nRemoves a parent/child relationship between parent and\ntag. h must be a hierarchy obtained from make-hierarchy, if not\nsupplied defaults to, and modifies, the global hierarchy.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5689)  \n\n## unreduced\n\n```\nUsage: (unreduced x)\n```\n\n```\nIf x is reduced?, returns (deref x), else returns x\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2872)  \n\n## unsigned-bit-shift-right\n\n```\nUsage: (unsigned-bit-shift-right x n)\n```\n\n```\nBitwise shift right, without sign-extension.\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1382)  \n\n## update\n\n```\nUsage: (update m k f)\n       (update m k f x)\n       (update m k f x y)\n       (update m k f x y z)\n       (update m k f x y z & more)\n```\n\n```\n'Updates' a value in an associative structure, where k is a\nkey and f is a function that will take the old value\nand any supplied args and return the new value, and returns a new\nstructure.  If the key does not exist, nil is passed as the old value.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6223)  \n\n## update-in\n\n```\nUsage: (update-in m ks f & args)\n```\n\n```\n'Updates' a value in a nested associative structure, where ks is a\nsequence of keys and f is a function that will take the old value\nand any supplied args and return the new value, and returns a new\nnested structure.  If any levels do not exist, hash-maps will be\ncreated.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6207)  \n\n## update-keys\n\n```\nUsage: (update-keys m f)\n```\n\n```\nm f => {(f k) v ...}\n\nGiven a map m and a function f of 1-argument, returns a new map whose\nkeys are the result of applying f to the keys of m, mapped to the\ncorresponding values of m.\nf must return a unique key for each key of m, else the behavior is undefined.\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8024)  \n\n## update-proxy\n\n```\nUsage: (update-proxy proxy mappings)\n```\n\n```\nTakes a proxy instance and a map of strings (which must\ncorrespond to methods of the proxy superclass/superinterfaces) to\nfns (which must take arguments matching the corresponding method,\nplus an additional (explicit) first arg corresponding to this, and\nupdates (via assoc) the proxy's fn map. nil can be passed instead of\na fn, in which case the corresponding method will revert to the\ndefault behavior. Note that this function can be used to update the\nbehavior of an existing instance without changing its identity.\nReturns the proxy.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L313)  \n\n## update-vals\n\n```\nUsage: (update-vals m f)\n```\n\n```\nm f => {k (f v) ...}\n\nGiven a map m and a function f of 1-argument, returns a new map where the keys of m\nare mapped to result of applying f to the corresponding values of m.\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8008)  \n\n## uri?\n\n```\nUsage: (uri? x)\n```\n\n```\nReturn true if x is a java.net.URI\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7959)  \n\n## use\n\n```\nUsage: (use & args)\n```\n\n```\nLike 'require, but also refers to each lib's namespace using\nclojure.core/refer. Use :use in the ns macro in preference to calling\nthis directly.\n\n'use accepts additional options in libspecs: :exclude, :only, :rename.\nThe arguments and semantics for :exclude, :only, and :rename are the same\nas those documented for clojure.core/refer.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6128)  \n\n## uuid?\n\n```\nUsage: (uuid? x)\n```\n\n```\nReturn true if x is a java.util.UUID\n```\n\nAdded in Clojure version 1.9\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6856)  \n\n## val\n\n```\nUsage: (val e)\n```\n\n```\nReturns the value in the map entry.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1589)  \n\n## vals\n\n```\nUsage: (vals map)\n```\n\n```\nReturns a sequence of the map's values, in the same order as (seq map).\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1576)  \n\n## var\n\n```\nUsage: (var symbol)\n```\n\n```\nThe symbol must resolve to a var, and the Var object\nitself (not its value) is returned. The reader macro #'x\nexpands to (var x).\n\nPlease see https://clojure.org/reference/special_forms#var\n```\n\nAdded in Clojure version 1.0\n\n## var-get\n\n```\nUsage: (var-get x)\n```\n\n```\nGets the value in the var object\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4328)  \n\n## var-set\n\n```\nUsage: (var-set x val)\n```\n\n```\nSets the value in the var object to val. The var must be\nthread-locally bound.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4334)  \n\n## var?\n\n```\nUsage: (var? v)\n```\n\n```\nReturns true if v is of type clojure.lang.Var\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5000)  \n\n## vary-meta\n\n```\nUsage: (vary-meta obj f & args)\n```\n\n```\nReturns an object of the same type and value as obj, with\n(apply f (meta obj) args) as its metadata.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L677)  \n\n## vec\n\n```\nUsage: (vec coll)\n```\n\n```\nCreates a new vector containing the contents of coll. Java arrays\nwill be aliased and should not be modified.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L369)  \n\n## vector\n\n```\nUsage: (vector)\n       (vector a)\n       (vector a b)\n       (vector a b c)\n       (vector a b c d)\n       (vector a b c d e)\n       (vector a b c d e f)\n       (vector a b c d e f & args)\n```\n\n```\nCreates a new vector containing the args.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L355)  \n\n## vector-of\n\n```\nUsage: (vector-of t)\n       (vector-of t & elements)\n```\n\n```\nCreates a new vector of a single primitive type t, where t is one\nof :int :long :float :double :byte :short :char or :boolean. The\nresulting vector complies with the interface of vectors in general,\nbut stores the values unboxed internally.\n\nOptionally takes one or more elements to populate the vector.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L523)  \n\n## vector?\n\n```\nUsage: (vector? x)\n```\n\n```\nReturn true if x implements IPersistentVector\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L176)  \n\n## volatile!\n\n```\nUsage: (volatile! val)\n```\n\n```\nCreates and returns a Volatile with an initial value of val.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2542)  \n\n## volatile?\n\n```\nUsage: (volatile? x)\n```\n\n```\nReturns true if x is a volatile.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2565)  \n\n## vreset!\n\n```\nUsage: (vreset! vol newval)\n```\n\n```\nSets the value of volatile to newval without regard for the\ncurrent value. Returns newval.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2549)  \n\n## vswap!\n\n```\nUsage: (vswap! vol f & args)\n```\n\n```\nNon-atomically swaps the value of the volatile as if:\n(apply f current-value-of-vol args). Returns the value that\nwas swapped in.\n```\n\nAdded in Clojure version 1.7\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2556)  \n\n## when\n\n```\nUsage: (when test & body)\n```\n\n```\nEvaluates test. If logical true, evaluates body in an implicit do.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L495)  \n\n## when-first\n\n```\nUsage: (when-first bindings & body)\n```\n\n```\nbindings => x xs\n\nRoughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4624)  \n\n## when-let\n\n```\nUsage: (when-let bindings & body)\n```\n\n```\nbindings => binding-form test\n\nWhen test is true, evaluates body with binding-form bound to the value of test\n```\n\n```\nSpecs:\n  Args: (cat\n         :bindings (and vector? :clojure.core.specs.alpha/binding)\n         :body (* any?))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1878)  \n\n## when-not\n\n```\nUsage: (when-not test & body)\n```\n\n```\nEvaluates test. If logical false, evaluates body in an implicit do.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L501)  \n\n## when-some\n\n```\nUsage: (when-some bindings & body)\n```\n\n```\nbindings => binding-form test\n\nWhen test is not nil, evaluates body with binding-form bound to the\nvalue of test\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1913)  \n\n## while\n\n```\nUsage: (while test & body)\n```\n\n```\nRepeatedly executes body while test expression is true. Presumes\nsome side-effect will cause test to become false/nil. Returns nil\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6368)  \n\n## with-bindings\n\n```\nUsage: (with-bindings binding-map & body)\n```\n\n```\nTakes a map of Var/value pairs. Installs for the given Vars the associated\nvalues as thread-local bindings. Then executes body. Pops the installed\nbindings after body was evaluated. Returns the value of body.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2003)  \n\n## with-bindings\\*\n\n```\nUsage: (with-bindings* binding-map f & args)\n```\n\n```\nTakes a map of Var/value pairs. Installs for the given Vars the associated\nvalues as thread-local bindings. Then calls f with the supplied arguments.\nPops the installed bindings after f returned. Returns whatever f returns.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1990)  \n\n## with-in-str\n\n```\nUsage: (with-in-str s & body)\n```\n\n```\nEvaluates body in a context in which *in* is bound to a fresh\nStringReader initialized with the string s.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4751)  \n\n## with-local-vars\n\n```\nUsage: (with-local-vars name-vals-vec & body)\n```\n\n```\nvarbinding=> symbol init-expr\n\nExecutes the exprs in a context in which the symbols are bound to\nvars with per-thread bindings to the init-exprs.  The symbols refer\nto the var objects themselves, and must be accessed with var-get and\nvar-set\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4341)  \n\n## with-meta\n\n```\nUsage: (with-meta obj m)\n```\n\n```\nReturns an object of the same type and value as obj, with\nmap m as its metadata.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L213)  \n\n## with-open\n\n```\nUsage: (with-open bindings & body)\n```\n\n```\nbindings => [name init ...]\n\nEvaluates body in a try expression with names bound to the values\nof the inits, and a finally clause that calls (.close name) on each\nname in reverse order.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3832)  \n\n## with-out-str\n\n```\nUsage: (with-out-str & body)\n```\n\n```\nEvaluates exprs in a context in which *out* is bound to a fresh\nStringWriter.  Returns the string created by any nested printing\ncalls.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4740)  \n\n## with-precision\n\n```\nUsage: (with-precision precision & exprs)\n```\n\n```\nSets the precision and rounding mode to be used for BigDecimal operations.\n\nUsage: (with-precision 10 (/ 1M 3))\nor:    (with-precision 10 :rounding HALF_DOWN (/ 1M 3))\n\nThe rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN,\nHALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5111)  \n\n## with-redefs\n\n```\nUsage: (with-redefs bindings & body)\n```\n\n```\nbinding => var-symbol temp-value-expr\n\nTemporarily redefines Vars while executing the body.  The\ntemp-value-exprs will be evaluated and each resulting value will\nreplace in parallel the root value of its Var.  After the body is\nexecuted, the root values of all the Vars will be set back to their\nold values.  These temporary changes will be visible in all threads.\nUseful for mocking out functions during testing.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7586)  \n\n## with-redefs-fn\n\n```\nUsage: (with-redefs-fn binding-map func)\n```\n\n```\nTemporarily redefines Vars during a call to func.  Each val of\nbinding-map will replace the root value of its key which must be\na Var.  After func is called with no args, the root values of all\nthe Vars will be set back to their old values.  These temporary\nchanges will be visible in all threads.  Useful for mocking out\nfunctions during testing.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7566)  \n\n## xml-seq\n\n```\nUsage: (xml-seq root)\n```\n\n```\nA tree seq on the xml elements as per xml/parse\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4983)  \n\n## zero?\n\n```\nUsage: (zero? num)\n```\n\n```\nReturns true if num is zero, else false\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L869)  \n\n## zipmap\n\n```\nUsage: (zipmap keys vals)\n```\n\n```\nReturns a map with the keys mapped to the corresponding vals.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6619)  \n\n## clojure.core.protocols\n\n## Protocols\n\n## CollReduce\n\n```\nProtocol for collection types that can implement reduce faster than\nfirst/next recursion. Called by clojure.core/reduce. Baseline\nimplementation defined in terms of Iterable.\n```\n\nKnown implementations: [clojure.core.reducers.Cat](clojure.core.reducers-api#clojure.core.reducers/Cat), clojure.lang.APersistentMap$KeySeq, clojure.lang.APersistentMap$ValSeq, clojure.lang.ASeq, clojure.lang.IReduceInit, clojure.lang.LazySeq, clojure.lang.PersistentVector, java.lang.Iterable, nil, Object  \n\n### coll-reduce\n\n```\nUsage: (coll-reduce coll f)\n       (coll-reduce coll f val)\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L13)  \n\n## Datafiable\n\nKnown implementations: clojure.lang.IRef, clojure.lang.Namespace, java.lang.Class, java.lang.Throwable, nil, Object  \n\n### datafy\n\n```\nUsage: (datafy o)\n```\n\n```\nreturn a representation of o as data (default identity)\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L182)  \n\n## IKVReduce\n\n```\nProtocol for concrete associative types that can reduce themselves\nvia a function of key and val faster than first/next recursion over map\nentries. Called by clojure.core/reduce-kv, and has same\nsemantics (just different arg order).\n```\n\nKnown implementations: clojure.lang.IKVReduce, nil, Object  \n\n### kv-reduce\n\n```\nUsage: (kv-reduce amap f init)\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L175)  \n\n## InternalReduce\n\n```\nProtocol for concrete seq types that can reduce themselves\nfaster than first/next recursion. Called by clojure.core/reduce.\n```\n\nKnown implementations: [clojure.core.VecSeq](clojure.core-api#clojure.core/VecSeq), clojure.lang.IChunkedSeq, clojure.lang.StringSeq, nil, Object  \n\n### internal-reduce\n\n```\nUsage: (internal-reduce seq f start)\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L19)  \n\n## Navigable\n\nKnown implementations: Object  \n\n### nav\n\n```\nUsage: (nav coll k v)\n```\n\n```\nreturn (possibly transformed) v in the context of coll and k (a key/index or nil),\ndefaults to returning v.\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L194)  \n\n## clojure.core.reducers\n\n```\nA library for reduction and parallel folding. Alpha and subject\nto change.\n```\n\n## Types\n\n## Cat\n\nFields: \\[cnt left right\\]  \nProtocols: [clojure.core.protocols/CollReduce](clojure.core-api#clojure.core.protocols/CollReduce), [CollFold](#clojure.core.reducers/CollFold)  \nInterfaces: clojure.lang.Counted, clojure.lang.Seqable  \n\n## Public Variables and Functions\n\n## -\\>Cat\n\n```\nUsage: (->Cat cnt left right)\n```\n\n```\nPositional factory function for class clojure.core.reducers.Cat.\n```\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L230)  \n\n## append!\n\n```\nUsage: (append! acc x)\n```\n\n```\n.adds x to acc and returns acc\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L275)  \n\n## cat\n\n```\nUsage: (cat)\n       (cat ctor)\n       (cat left right)\n```\n\n```\nA high-performance combining fn that yields the catenation of the\nreduced values. The result is reducible, foldable, seqable and\ncounted, providing the identity collections are reducible, seqable\nand counted. The single argument version will build a combining fn\nwith the supplied identity constructor. Tests for identity\nwith (zero? (count x)). See also foldcat.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L255)  \n\n## drop\n\n```\nUsage: (drop n)\n       (drop n coll)\n```\n\n```\nElides the first n values from the reduction of coll.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L215)  \n\n## filter\n\n```\nUsage: (filter pred)\n       (filter pred coll)\n```\n\n```\nRetains values in the reduction of coll for which (pred val)\nreturns logical true. Foldable.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L154)  \n\n## flatten\n\n```\nUsage: (flatten)\n       (flatten coll)\n```\n\n```\nTakes any nested combination of sequential things (lists, vectors,\netc.) and returns their contents as a single, flat foldable\ncollection.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L174)  \n\n## fold\n\n```\nUsage: (fold reducef coll)\n       (fold combinef reducef coll)\n       (fold n combinef reducef coll)\n```\n\n```\nReduces a collection using a (potentially parallel) reduce-combine\nstrategy. The collection is partitioned into groups of approximately\nn (default 512), each of which is reduced with reducef (with a seed\nvalue obtained by calling (combinef) with no arguments). The results\nof these reductions are then reduced with combinef (default\nreducef). combinef must be associative, and, when called with no\narguments, (combinef) must produce its identity element. These\noperations may be performed in parallel, but the results will\npreserve order.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L51)  \n\n## foldcat\n\n```\nUsage: (foldcat coll)\n```\n\n```\nEquivalent to (fold cat append! coll)\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L281)  \n\n## folder\n\n```\nUsage: (folder coll xf)\n```\n\n```\nGiven a foldable collection, and a transformation function xf,\nreturns a foldable collection, where any supplied reducing\nfn will be transformed by xf. xf is a function of reducing fn to\nreducing fn.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L81)  \n\n## map\n\n```\nUsage: (map f)\n       (map f coll)\n```\n\n```\nApplies f to every value in the reduction of coll. Foldable.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L128)  \n\n## mapcat\n\n```\nUsage: (mapcat f)\n       (mapcat f coll)\n```\n\n```\nApplies f to every value in the reduction of coll, concatenating the result\ncolls of (f val). Foldable.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L138)  \n\n## monoid\n\n```\nUsage: (monoid op ctor)\n```\n\n```\nBuilds a combining fn out of the supplied operator and identity\nconstructor. op must be associative and ctor called with no args\nmust return an identity value for it.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L287)  \n\n## reduce\n\n```\nUsage: (reduce f coll)\n       (reduce f init coll)\n```\n\n```\nLike core/reduce except:\nWhen init is not provided, (f) is used.\nMaps are reduced with reduce-kv\n```\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L38)  \n\n## reducer\n\n```\nUsage: (reducer coll xf)\n```\n\n```\nGiven a reducible collection, and a transformation function xf,\nreturns a reducible collection, where any supplied reducing\nfn will be transformed by xf. xf is a function of reducing fn to\nreducing fn.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L67)  \n\n## remove\n\n```\nUsage: (remove pred)\n       (remove pred coll)\n```\n\n```\nRemoves values in the reduction of coll for which (pred val)\nreturns logical true. Foldable.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L167)  \n\n## take\n\n```\nUsage: (take n)\n       (take n coll)\n```\n\n```\nEnds the reduction of coll after consuming n values.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L201)  \n\n## take-while\n\n```\nUsage: (take-while pred)\n       (take-while pred coll)\n```\n\n```\nEnds the reduction of coll when (pred val) returns logical false.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L189)  \n\n## clojure.core.server\n\n```\nSocket server support\n```\n\n## Public Variables and Functions\n\n## io-prepl\n\n```\nUsage: (io-prepl & {:keys [valf], :or {valf pr-str}})\n```\n\n```\nprepl bound to *in* and *out*, suitable for use with e.g. server/repl (socket-repl).\n:ret and :tap vals will be processed by valf, a fn of one argument\nor a symbol naming same (default pr-str)\n\nAlpha, subject to change.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L272)  \n\n## prepl\n\n```\nUsage: (prepl in-reader out-fn & {:keys [stdin]})\n```\n\n```\na REPL with structured output (for programs)\nreads forms to eval from in-reader (a LineNumberingPushbackReader)\nClosing the input or passing the form :repl/quit will cause it to return\n\nCalls out-fn with data, one of:\n{:tag :ret\n :val val ;;eval result, or Throwable->map data if exception thrown\n :ns ns-name-string\n :ms long ;;eval time in milliseconds\n :form string ;;iff successfully read\n :exception true ;;iff exception thrown\n}\n{:tag :out\n :val string} ;chars from during-eval *out*\n{:tag :err\n :val string} ;chars from during-eval *err*\n{:tag :tap\n :val val} ;values from tap>\n\nYou might get more than one :out or :err per eval, but exactly one :ret\ntap output can happen at any time (i.e. between evals)\nIf during eval an attempt is made to read *in* it will read from in-reader unless :stdin is supplied\n\nAlpha, subject to change.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L191)  \n\n## remote-prepl\n\n```\nUsage: (remote-prepl host port in-reader out-fn & {:keys [valf readf], :or {valf read-string, readf (fn* [p1__6786# p2__6787#] (read p1__6786# false p2__6787#))}})\n```\n\n```\nImplements a prepl on in-reader and out-fn by forwarding to a\nremote [io-]prepl over a socket.  Messages will be read by readf, a\nfn of a LineNumberingPushbackReader and EOF value or a symbol naming\nsame (default #(read %1 false %2)),\n:ret and :tap vals will be processed by valf, a fn of one argument\nor a symbol naming same (default read-string). If that function\nthrows, :val will be unprocessed.\n\nAlpha, subject to change.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L295)  \n\n## repl\n\n```\nUsage: (repl)\n```\n\n```\nREPL with predefined hooks for attachable socket server.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L180)  \n\n## repl-init\n\n```\nUsage: (repl-init)\n```\n\n```\nInitialize repl in user namespace and make standard repl requires.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L163)  \n\n## repl-read\n\n```\nUsage: (repl-read request-prompt request-exit)\n```\n\n```\nEnhanced :read hook for repl supporting :repl/quit.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L169)  \n\n## start-server\n\n```\nUsage: (start-server opts)\n```\n\n```\nStart a socket server given the specified opts:\n :address Host or address, string, defaults to loopback address\n :port Port, integer, required\n :name Name, required\n :accept Namespaced symbol of the accept function to invoke, required\n :args Vector of args to pass to accept function\n :bind-err Bind *err* to socket out stream?, defaults to true\n :server-daemon Is server thread a daemon?, defaults to true\n :client-daemon Are client threads daemons?, defaults to true\nReturns server socket.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L84)  \n\n## start-servers\n\n```\nUsage: (start-servers system-props)\n```\n\n```\nStart all servers specified in the system properties.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L157)  \n\n## stop-server\n\n```\nUsage: (stop-server)\n       (stop-server name)\n```\n\n```\nStop server with name or use the server-name from *session* if none supplied.\nReturns true if server stopped successfully, nil if not found, or throws if\nthere is an error closing the socket.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L125)  \n\n## stop-servers\n\n```\nUsage: (stop-servers)\n```\n\n```\nStop all servers ignores all errors, and returns nil.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L139)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.core-api.html](https://clojure.github.io/clojure/clojure.core-api.html)"
- name: clojure.data
  id: clojure.data-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.data\n\nby Stuart Halloway  \n  \nFull namespace name: clojure.data\n\n## Overview\n\n```\nNon-core data functions.\n```\n\n## Protocols\n\n## Diff\n\n```\nImplementation detail. Subject to change.\n```\n\nKnown implementations: java.util.List, java.util.Map, java.util.Set, nil, Object  \n\n### diff-similar\n\n```\nUsage: (diff-similar a b)\n```\n\n```\nImplementation detail. Subject to change.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/51c6d7a70912a8f65e81a8e11ae6f56c94920725/src/clj/clojure/data.clj#L73)  \n\n## EqualityPartition\n\n```\nImplementation detail. Subject to change.\n```\n\nKnown implementations: java.util.List, java.util.Map, java.util.Set, nil, Object  \n\n### equality-partition\n\n```\nUsage: (equality-partition x)\n```\n\n```\nImplementation detail. Subject to change.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/51c6d7a70912a8f65e81a8e11ae6f56c94920725/src/clj/clojure/data.clj#L69)\n\n## Public Variables and Functions\n\n## diff\n\n```\nUsage: (diff a b)\n```\n\n```\nRecursively compares a and b, returning a tuple of\n[things-only-in-a things-only-in-b things-in-both].\nComparison rules:\n\n* For equal a and b, return [nil nil a].\n* Maps are subdiffed where keys match and values differ.\n* Sets are never subdiffed.\n* All sequential things are treated as associative collections\n  by their indexes, with results returned as vectors.\n* Everything else (including strings!) is treated as\n  an atom and compared for equality.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/51c6d7a70912a8f65e81a8e11ae6f56c94920725/src/clj/clojure/data.clj#L124)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.data-api.html](https://clojure.github.io/clojure/clojure.data-api.html)"
- name: clojure.datafy
  id: clojure.datafy-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.datafy\n\nFull namespace name: clojure.datafy\n\n## Overview\n\n```\nFunctions to turn objects into data. Alpha, subject to change\n```\n\n## Public Variables and Functions\n\n## datafy\n\n```\nUsage: (datafy x)\n```\n\n```\nAttempts to return x as data.\ndatafy will return the value of clojure.core.protocols/datafy. If\nthe value has been transformed and the result supports\nmetadata, :clojure.datafy/obj will be set on the metadata to the\noriginal value of x, and :clojure.datafy/class to the name of the\nclass of x, as a symbol.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b70db9639f9acddcabf7f760ea4bb050d6bfaa16/src/clj/clojure/datafy.clj#L15)  \n\n## nav\n\n```\nUsage: (nav coll k v)\n```\n\n```\nReturns (possibly transformed) v in the context of coll and k (a\nkey/index or nil). Callers should attempt to provide the key/index\ncontext k for Indexed/Associative/ILookup colls if possible, but not\nto fabricate one e.g. for sequences (pass nil). nav returns the\nvalue of clojure.core.protocols/nav.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b70db9639f9acddcabf7f760ea4bb050d6bfaa16/src/clj/clojure/datafy.clj#L30)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.datafy-api.html](https://clojure.github.io/clojure/clojure.datafy-api.html)"
- name: clojure.edn
  id: clojure.edn-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.edn\n\nby Rich Hickey  \n  \nFull namespace name: clojure.edn\n\n## Overview\n\n```\nedn reading.\n```\n\n## Public Variables and Functions\n\n## read\n\n```\nUsage: (read)\n       (read stream)\n       (read opts stream)\n```\n\n```\nReads the next object from stream, which must be an instance of\njava.io.PushbackReader or some derivee.  stream defaults to the\ncurrent value of *in*.\n\nReads data in the edn format (subset of Clojure data):\nhttp://edn-format.org\n\nopts is a map that can include the following keys:\n:eof - value to return on end-of-file. When not supplied, eof throws an exception.\n:readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n            When not supplied, only the default-data-readers will be used.\n:default - A function of two args, that will, if present and no reader is found for a tag,\n           be called with the tag and the value.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c6756a8bab137128c8119add29a25b0a88509900/src/clj/clojure/edn.clj#L14)  \n\n## read-string\n\n```\nUsage: (read-string s)\n       (read-string opts s)\n```\n\n```\nReads one object from the string s. Returns nil when s is nil or empty.\n\nReads data in the edn format (subset of Clojure data):\nhttp://edn-format.org\n\nopts is a map as per clojure.edn/read\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c6756a8bab137128c8119add29a25b0a88509900/src/clj/clojure/edn.clj#L37)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.edn-api.html](https://clojure.github.io/clojure/clojure.edn-api.html)"
- name: clojure.inspector
  id: clojure.inspector-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.inspector\n\nby Rich Hickey  \n  \nFull namespace name: clojure.inspector\n\n## Overview\n\n```\nGraphical object inspector for Clojure data structures.\n```\n\n## Public Variables and Functions\n\n## inspect\n\n```\nUsage: (inspect x)\n```\n\n```\ncreates a graphical (Swing) inspector on the supplied object\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/5da21b38470d175b3cecbf93b9cd145ca36940c1/src/clj/clojure/inspector.clj#L154)  \n\n## inspect-table\n\n```\nUsage: (inspect-table data)\n```\n\n```\ncreates a graphical (Swing) inspector on the supplied regular\ndata, which must be a sequential data structure of data structures\nof equal length\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/5da21b38470d175b3cecbf93b9cd145ca36940c1/src/clj/clojure/inspector.clj#L100)  \n\n## inspect-tree\n\n```\nUsage: (inspect-tree data)\n```\n\n```\ncreates a graphical (Swing) inspector on the supplied hierarchical data\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/5da21b38470d175b3cecbf93b9cd145ca36940c1/src/clj/clojure/inspector.clj#L91)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.inspector-api.html](https://clojure.github.io/clojure/clojure.inspector-api.html)"
- name: clojure.instant
  id: clojure.instant-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.instant\n\nFull namespace name: clojure.instant\n\n## Overview\n\n## Public Variables and Functions\n\n## parse-timestamp\n\n```\nUsage: (parse-timestamp new-instant cs)\n```\n\n```\nParse a string containing an RFC3339-like like timestamp.\n\nThe function new-instant is called with the following arguments.\n\n                min  max           default\n                ---  ------------  -------\n  years          0           9999      N/A (s must provide years)\n  months         1             12        1\n  days           1             31        1 (actual max days depends\n  hours          0             23        0  on month and year)\n  minutes        0             59        0\n  seconds        0             60        0 (though 60 is only valid\n  nanoseconds    0      999999999        0  when minutes is 59)\n  offset-sign   -1              1        0\n  offset-hours   0             23        0\n  offset-minutes 0             59        0\n\nThese are all integers and will be non-nil. (The listed defaults\nwill be passed if the corresponding field is not present in s.)\n\nGrammar (of s):\n\n  date-fullyear   = 4DIGIT\n  date-month      = 2DIGIT  ; 01-12\n  date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n                            ; month/year\n  time-hour       = 2DIGIT  ; 00-23\n  time-minute     = 2DIGIT  ; 00-59\n  time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\n                            ; rules\n  time-secfrac    = '.' 1*DIGIT\n  time-numoffset  = ('+' / '-') time-hour ':' time-minute\n  time-offset     = 'Z' / time-numoffset\n\n  time-part       = time-hour [ ':' time-minute [ ':' time-second\n                    [time-secfrac] [time-offset] ] ]\n\n  timestamp       = date-year [ '-' date-month [ '-' date-mday\n                    [ 'T' time-part ] ] ]\n\nUnlike RFC3339:\n\n  - we only parse the timestamp format\n  - timestamp can elide trailing components\n  - time-offset is optional (defaults to +00:00)\n\nThough time-offset is syntactically optional, a missing time-offset\nwill be treated as if the time-offset zero (+00:00) had been\nspecified.\n```\n\n[Source](https://github.com/clojure/clojure/blob/385d0593efa658ada19f9a55af39cef146c75341/src/clj/clojure/instant.clj#L53)  \n\n## read-instant-calendar\n\n```\nUsage: (read-instant-calendar cs)\n```\n\n```\nTo read an instant as a java.util.Calendar, bind *data-readers* to a map with\nthis var as the value for the 'inst key.  Calendar preserves the timezone\noffset.\n```\n\n[Source](https://github.com/clojure/clojure/blob/385d0593efa658ada19f9a55af39cef146c75341/src/clj/clojure/instant.clj#L281)  \n\n## read-instant-date\n\n```\nUsage: (read-instant-date cs)\n```\n\n```\nTo read an instant as a java.util.Date, bind *data-readers* to a map with\nthis var as the value for the 'inst key. The timezone offset will be used\nto convert into UTC.\n```\n\n[Source](https://github.com/clojure/clojure/blob/385d0593efa658ada19f9a55af39cef146c75341/src/clj/clojure/instant.clj#L274)  \n\n## read-instant-timestamp\n\n```\nUsage: (read-instant-timestamp cs)\n```\n\n```\nTo read an instant as a java.sql.Timestamp, bind *data-readers* to a\nmap with this var as the value for the 'inst key. Timestamp preserves\nfractional seconds with nanosecond precision. The timezone offset will\nbe used to convert into UTC.\n```\n\n[Source](https://github.com/clojure/clojure/blob/385d0593efa658ada19f9a55af39cef146c75341/src/clj/clojure/instant.clj#L288)  \n\n## validated\n\n```\nUsage: (validated new-instance)\n```\n\n```\nReturn a function which constructs an instant by calling constructor\nafter first validating that those arguments are in range and otherwise\nplausible. The resulting function will throw an exception if called\nwith invalid arguments.\n```\n\n[Source](https://github.com/clojure/clojure/blob/385d0593efa658ada19f9a55af39cef146c75341/src/clj/clojure/instant.clj#L139)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.instant-api.html](https://clojure.github.io/clojure/clojure.instant-api.html)"
- name: clojure.java.browse
  id: clojure.java.browse-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.java.browse\n\nby Christophe Grand  \n  \nFull namespace name: clojure.java.browse\n\n## Overview\n\n```\nStart a web browser from Clojure\n```\n\n## Public Variables and Functions\n\n## browse-url\n\n```\nUsage: (browse-url url)\n```\n\n```\nOpen url in a browser\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/19e3a2708def5ffb7f2be030d8e8e895464ce2d2/src/clj/clojure/java/browse.clj#L68)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.java.browse-api.html](https://clojure.github.io/clojure/clojure.java.browse-api.html)"
- name: clojure.java.io
  id: clojure.java.io-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.java.io\n\nby Stuart Sierra, Chas Emerick, Stuart Halloway  \n  \nFull namespace name: clojure.java.io\n\n## Overview\n\n```\nThis file defines polymorphic I/O utility functions for Clojure.\n```\n\n## Protocols\n\n## Coercions\n\n```\nCoerce between various 'resource-namish' things.\n```\n\nKnown implementations: java.io.File, java.lang.String, java.net.URI, java.net.URL, nil  \n\n### as-file\n\n```\nUsage: (as-file x)\n```\n\n```\nCoerce argument to a file.\n```\n\nAdded in Clojure version 1.2\n\n### as-url\n\n```\nUsage: (as-url x)\n```\n\n```\nCoerce argument to a URL.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L35)  \n\n## IOFactory\n\n```\nFactory functions that create ready-to-use, buffered versions of\nthe various Java I/O stream types, on top of anything that can\nbe unequivocally converted to the requested kind of stream.\n\nCommon options include\n\n  :append    true to open stream in append mode\n  :encoding  string name of encoding to use, e.g. \"UTF-8\".\n\nCallers should generally prefer the higher level API provided by\nreader, writer, input-stream, and output-stream.\n```\n\nKnown implementations: array-of-bytes, array-of-characters, java.io.BufferedInputStream, java.io.BufferedOutputStream, java.io.BufferedReader, java.io.BufferedWriter, java.io.File, java.io.InputStream, java.io.OutputStream, java.io.Reader, java.io.Writer, java.lang.String, java.net.Socket, java.net.URI, java.net.URL, nil, Object  \n\n### make-input-stream\n\n```\nUsage: (make-input-stream x opts)\n```\n\n```\nCreates a BufferedInputStream. See also IOFactory docs.\n```\n\nAdded in Clojure version 1.2\n\n### make-output-stream\n\n```\nUsage: (make-output-stream x opts)\n```\n\n```\nCreates a BufferedOutputStream. See also IOFactory docs.\n```\n\nAdded in Clojure version 1.2\n\n### make-reader\n\n```\nUsage: (make-reader x opts)\n```\n\n```\nCreates a BufferedReader. See also IOFactory docs.\n```\n\nAdded in Clojure version 1.2\n\n### make-writer\n\n```\nUsage: (make-writer x opts)\n```\n\n```\nCreates a BufferedWriter. See also IOFactory docs.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L69)\n\n## Public Variables and Functions\n\n## as-relative-path\n\n```\nUsage: (as-relative-path x)\n```\n\n```\nTake an as-file-able thing and return a string if it is\na relative path, else IllegalArgumentException.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L408)  \n\n## copy\n\n```\nUsage: (copy input output & opts)\n```\n\n```\nCopies input to output.  Returns nil or throws IOException.\nInput may be an InputStream, Reader, File, byte[], char[], or String.\nOutput may be an OutputStream, Writer, or File.\n\nOptions are key/value pairs and may be one of\n\n  :buffer-size  buffer size to use, default is 1024.\n  :encoding     encoding to use if converting between\n                byte and char streams.   \n\nDoes not close any streams except those it opens itself \n(on a File).\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L391)  \n\n## delete-file\n\n```\nUsage: (delete-file f & [silently])\n```\n\n```\nDelete file f. If silently is nil or false, raise an exception on failure, else return the value of silently.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L430)  \n\n## file\n\n```\nUsage: (file arg)\n       (file parent child)\n       (file parent child & more)\n```\n\n```\nReturns a java.io.File, passing each arg to as-file.  Multiple-arg\nversions treat the first argument as parent and subsequent args as\nchildren relative to the parent.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L418)  \n\n## input-stream\n\n```\nUsage: (input-stream x & opts)\n```\n\n```\nAttempts to coerce its argument into an open java.io.InputStream.\nDefault implementations always return a java.io.BufferedInputStream.\n\nDefault implementations are defined for InputStream, File, URI, URL,\nSocket, byte array, and String arguments.\n\nIf the argument is a String, it tries to resolve it first as a URI, then\nas a local file name.  URIs with a 'file' protocol are converted to\nlocal file names.\n\nShould be used inside with-open to ensure the InputStream is properly\nclosed.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L121)  \n\n## make-parents\n\n```\nUsage: (make-parents f & more)\n```\n\n```\nGiven the same arg(s) as for file, creates all parent directories of\nthe file they represent.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L438)  \n\n## output-stream\n\n```\nUsage: (output-stream x & opts)\n```\n\n```\nAttempts to coerce its argument into an open java.io.OutputStream.\nDefault implementations always return a java.io.BufferedOutputStream.\n\nDefault implementations are defined for OutputStream, File, URI, URL,\nSocket, and String arguments.\n\nIf the argument is a String, it tries to resolve it first as a URI, then\nas a local file name.  URIs with a 'file' protocol are converted to\nlocal file names.\n\nShould be used inside with-open to ensure the OutputStream is\nproperly closed.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L138)  \n\n## reader\n\n```\nUsage: (reader x & opts)\n```\n\n```\nAttempts to coerce its argument into an open java.io.Reader.\nDefault implementations always return a java.io.BufferedReader.\n\nDefault implementations are provided for Reader, BufferedReader,\nInputStream, File, URI, URL, Socket, byte arrays, character arrays,\nand String.\n\nIf argument is a String, it tries to resolve it first as a URI, then\nas a local file name.  URIs with a 'file' protocol are converted to\nlocal file names.\n\nShould be used inside with-open to ensure the Reader is properly\nclosed.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L86)  \n\n## resource\n\n```\nUsage: (resource n)\n       (resource n loader)\n```\n\n```\nReturns the URL for a named resource. Use the context class loader\nif no loader is specified.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L446)  \n\n## writer\n\n```\nUsage: (writer x & opts)\n```\n\n```\nAttempts to coerce its argument into an open java.io.Writer.\nDefault implementations always return a java.io.BufferedWriter.\n\nDefault implementations are provided for Writer, BufferedWriter,\nOutputStream, File, URI, URL, Socket, and String.\n\nIf the argument is a String, it tries to resolve it first as a URI, then\nas a local file name.  URIs with a 'file' protocol are converted to\nlocal file names.\n\nShould be used inside with-open to ensure the Writer is properly\nclosed.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L104)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.java.io-api.html](https://clojure.github.io/clojure/clojure.java.io-api.html)"
- name: clojure.java.javadoc
  id: clojure.java.javadoc-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.java.javadoc\n\nby Christophe Grand, Stuart Sierra  \n  \nFull namespace name: clojure.java.javadoc\n\n## Overview\n\n```\nA repl helper to quickly open javadocs.\n```\n\n## Public Variables and Functions\n\n## add-local-javadoc\n\n```\nUsage: (add-local-javadoc path)\n```\n\n```\nAdds to the list of local Javadoc paths.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/3b6c31bc503afe8f25d01d6d7d05ebc960095abd/src/clj/clojure/java/javadoc.clj#L47)  \n\n## add-remote-javadoc\n\n```\nUsage: (add-remote-javadoc package-prefix url)\n```\n\n```\nAdds to the list of remote Javadoc URLs.  package-prefix is the\nbeginning of the package name that has docs at this URL.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/3b6c31bc503afe8f25d01d6d7d05ebc960095abd/src/clj/clojure/java/javadoc.clj#L53)  \n\n## javadoc\n\n```\nUsage: (javadoc class-or-object)\n```\n\n```\nOpens a browser window displaying the javadoc for the argument.\nTries *local-javadocs* first, then *remote-javadocs*.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/3b6c31bc503afe8f25d01d6d7d05ebc960095abd/src/clj/clojure/java/javadoc.clj#L92)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.java.javadoc-api.html](https://clojure.github.io/clojure/clojure.java.javadoc-api.html)"
- name: clojure.java.shell
  id: clojure.java.shell-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.java.shell\n\nby Chris Houser, Stuart Halloway  \n  \nFull namespace name: clojure.java.shell\n\n## Overview\n\n```\nConveniently launch a sub-process providing its stdin and\ncollecting its stdout\n```\n\n## Public Variables and Functions\n\n## sh\n\n```\nUsage: (sh & args)\n```\n\n```\nPasses the given strings to Runtime.exec() to launch a sub-process.\n\nOptions are\n\n:in      may be given followed by any legal input source for\n         clojure.java.io/copy, e.g. InputStream, Reader, File, byte[],\n         or String, to be fed to the sub-process's stdin.\n:in-enc  option may be given followed by a String, used as a character\n         encoding name (for example \"UTF-8\" or \"ISO-8859-1\") to\n         convert the input string specified by the :in option to the\n         sub-process's stdin.  Defaults to UTF-8.\n         If the :in option provides a byte array, then the bytes are passed\n         unencoded, and this option is ignored.\n:out-enc option may be given followed by :bytes or a String. If a\n         String is given, it will be used as a character encoding\n         name (for example \"UTF-8\" or \"ISO-8859-1\") to convert\n         the sub-process's stdout to a String which is returned.\n         If :bytes is given, the sub-process's stdout will be stored\n         in a byte array and returned.  Defaults to UTF-8.\n:env     override the process env with a map (or the underlying Java\n         String[] if you are a masochist).\n:dir     override the process dir with a String or java.io.File.\n\nYou can bind :env or :dir for multiple operations using with-sh-env\nand with-sh-dir.\n\nsh returns a map of\n  :exit => sub-process's exit code\n  :out  => sub-process's stdout (as byte[] or String)\n  :err  => sub-process's stderr (String via platform default encoding)\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/027d8ff2859442b222bf9cfa4c1be45567b788eb/src/clj/clojure/java/shell.clj#L79)  \n\n## with-sh-dir\n\n```\nUsage: (with-sh-dir dir & forms)\n```\n\n```\nSets the directory for use with sh, see sh for details.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/027d8ff2859442b222bf9cfa4c1be45567b788eb/src/clj/clojure/java/shell.clj#L21)  \n\n## with-sh-env\n\n```\nUsage: (with-sh-env env & forms)\n```\n\n```\nSets the environment for use with sh, see sh for details.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/027d8ff2859442b222bf9cfa4c1be45567b788eb/src/clj/clojure/java/shell.clj#L28)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.java.shell-api.html](https://clojure.github.io/clojure/clojure.java.shell-api.html)"
- name: clojure.main
  id: clojure.main-api
  summary: by Stephen C
  description: "# clojure.main\n\nby Stephen C. Gilardi and Rich Hickey  \n  \nFull namespace name: clojure.main\n\n## Overview\n\n```\nTop-level main function for Clojure REPL and scripts.\n```\n\n## Public Variables and Functions\n\n## demunge\n\n```\nUsage: (demunge fn-name)\n```\n\n```\nGiven a string representation of a fn class,\nas in a stack trace element, returns a readable version.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L28)  \n\n## err-\\>msg\n\n```\nUsage: (err->msg e)\n```\n\n```\nHelper to return an error message string from an exception.\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L343)  \n\n## ex-str\n\n```\nUsage: (ex-str {:clojure.error/keys [phase source path line column symbol class cause spec], :as triage-data})\n```\n\n```\nReturns a string from exception data, as produced by ex-triage.\nThe first line summarizes the exception phase and location.\nThe subsequent lines describe the cause.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L269)  \n\n## ex-triage\n\n```\nUsage: (ex-triage datafied-throwable)\n```\n\n```\nReturns an analysis of the phase, error, cause, and location of an error that occurred\nbased on Throwable data, as returned by Throwable->map. All attributes other than phase\nare optional:\n  :clojure.error/phase - keyword phase indicator, one of:\n    :read-source :compile-syntax-check :compilation :macro-syntax-check :macroexpansion\n    :execution :read-eval-result :print-eval-result\n  :clojure.error/source - file name (no path)\n  :clojure.error/path - source path\n  :clojure.error/line - integer line number\n  :clojure.error/column - integer column number\n  :clojure.error/symbol - symbol being expanded/compiled/invoked\n  :clojure.error/class - cause exception class symbol\n  :clojure.error/cause - cause exception message\n  :clojure.error/spec - explain-data for spec error\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L208)  \n\n## load-script\n\n```\nUsage: (load-script path)\n```\n\n```\nLoads Clojure source from a file or resource given its path. Paths\nbeginning with @ or @/ are considered relative to classpath.\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L468)  \n\n## main\n\n```\nUsage: (main & args)\n```\n\n```\nUsage: java -cp clojure.jar clojure.main [init-opt*] [main-opt] [arg*]\n\nWith no options or args, runs an interactive Read-Eval-Print Loop\n\ninit options:\n  -i, --init path     Load a file or resource\n  -e, --eval string   Evaluate expressions in string; print non-nil values\n  --report target     Report uncaught exception to \"file\" (default), \"stderr\",\n                      or \"none\", overrides System property clojure.main.report\n\nmain options:\n  -m, --main ns-name  Call the -main function from a namespace with args\n  -r, --repl          Run a repl\n  path                Run a script from a file or resource\n  -                   Run a script from standard input\n  -h, -?, --help      Print this help message and exit\n\noperation:\n\n  - Establishes thread-local bindings for commonly set!-able vars\n  - Enters the user namespace\n  - Binds *command-line-args* to a seq of strings containing command line\n    args that appear after any main option\n  - Runs all init options in order\n  - Calls a -main function or runs a repl or script if requested\n\nThe init options may be repeated and mixed freely, but must appear before\nany main option. The appearance of any eval option before running a repl\nsuppresses the usual repl greeting message: \"Clojure ~(clojure-version)\".\n\nPaths may be absolute or relative in the filesystem or relative to\nclasspath. Classpath-relative paths have prefix of @ or @/\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L616)  \n\n## renumbering-read\n\n```\nUsage: (renumbering-read opts reader line-number)\n```\n\n```\nReads from reader, which must be a LineNumberingPushbackReader, while capturing\nthe read string. If the read is successful, reset the line number and re-read.\nThe line number on re-read is the passed line-number unless :line or\n:clojure.core/eval-file meta are explicitly set on the read value.\n```\n\nAdded in Clojure version 1.10\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L140)  \n\n## repl\n\n```\nUsage: (repl & options)\n```\n\n```\nGeneric, reusable, read-eval-print loop. By default, reads from *in*,\nwrites to *out*, and prints exception summaries to *err*. If you use the\ndefault :read hook, *in* must either be an instance of\nLineNumberingPushbackReader or duplicate its behavior of both supporting\n.unread and collapsing CR, LF, and CRLF into a single \\newline. Options\nare sequential keyword-value pairs. Available options and their defaults:\n\n   - :init, function of no arguments, initialization hook called with\n     bindings for set!-able vars in place.\n     default: #()\n\n   - :need-prompt, function of no arguments, called before each\n     read-eval-print except the first, the user will be prompted if it\n     returns true.\n     default: (if (instance? LineNumberingPushbackReader *in*)\n                #(.atLineStart *in*)\n                #(identity true))\n\n   - :prompt, function of no arguments, prompts for more input.\n     default: repl-prompt\n\n   - :flush, function of no arguments, flushes output\n     default: flush\n\n   - :read, function of two arguments, reads from *in*:\n       - returns its first argument to request a fresh prompt\n         - depending on need-prompt, this may cause the repl to prompt\n           before reading again\n       - returns its second argument to request an exit from the repl\n       - else returns the next object read from the input stream\n     default: repl-read\n\n   - :eval, function of one argument, returns the evaluation of its\n     argument\n     default: eval\n\n   - :print, function of one argument, prints its argument to the output\n     default: prn\n\n   - :caught, function of one argument, a throwable, called when\n     read, eval, or print throws an exception or error\n     default: repl-caught\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L368)  \n\n## repl-caught\n\n```\nUsage: (repl-caught e)\n```\n\n```\nDefault :caught hook for repl\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L348)  \n\n## repl-exception\n\n```\nUsage: (repl-exception throwable)\n```\n\n```\nReturns the root cause of throwables\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L172)  \n\n## repl-prompt\n\n```\nUsage: (repl-prompt)\n```\n\n```\nDefault :prompt hook for repl\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L103)  \n\n## repl-read\n\n```\nUsage: (repl-read request-prompt request-exit)\n```\n\n```\nDefault :read hook for repl. Reads from *in* which must either be an\ninstance of LineNumberingPushbackReader or duplicate its behavior of both\nsupporting .unread and collapsing all of CR, LF, and CRLF into a single\n\\newline. repl-read:\n  - skips whitespace, then\n    - returns request-prompt on start of line, or\n    - returns request-exit on end of stream, or\n    - reads an object from the input stream, then\n      - skips the next input character if it's end of line, then\n      - returns the object.\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L154)  \n\n## repl-requires\n\n```\nA sequence of lib specs that are applied to `require`\nby default when a new command-line REPL is started.\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L355)  \n\n## report-error\n\n```\nUsage: (report-error t & {:keys [target], :or {target file}, :as opts})\n```\n\n```\nCreate and output an exception report for a Throwable to target.\n\nOptions:\n  :target - \"file\" (default), \"stderr\", \"none\"\n\nIf file is specified but cannot be written, falls back to stderr.\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L584)  \n\n## root-cause\n\n```\nUsage: (root-cause t)\n```\n\n```\nReturns the initial cause of an exception or error by peeling off all of\nits wrappers\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L35)  \n\n## skip-if-eol\n\n```\nUsage: (skip-if-eol s)\n```\n\n```\nIf the next character on stream s is a newline, skips it, otherwise\nleaves the stream untouched. Returns :line-start, :stream-end, or :body\nto indicate the relative location of the next character on s. The stream\nmust either be an instance of LineNumberingPushbackReader or duplicate\nits behavior of both supporting .unread and collapsing all of CR, LF, and\nCRLF to a single \\newline.\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L108)  \n\n## skip-whitespace\n\n```\nUsage: (skip-whitespace s)\n```\n\n```\nSkips whitespace characters on stream s. Returns :line-start, :stream-end,\nor :body to indicate the relative location of the next character on s.\nInterprets comma as whitespace and semicolon as comment to end of line.\nDoes not interpret #! as comment to end of line because only one\ncharacter of lookahead is available. The stream must either be an\ninstance of LineNumberingPushbackReader or duplicate its behavior of both\nsupporting .unread and collapsing all of CR, LF, and CRLF to a single\n\\newline.\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L122)  \n\n## stack-element-str\n\n```\nUsage: (stack-element-str el)\n```\n\n```\nReturns a (possibly unmunged) string representation of a StackTraceElement\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L62)  \n\n## with-bindings\n\n```\nUsage: (with-bindings & body)\n```\n\n```\nExecutes body in the context of thread-local bindings for several vars\nthat often need to be set!: *ns* *warn-on-reflection* *math-context*\n*print-meta* *print-length* *print-level* *compile-path*\n*command-line-args* *1 *2 *3 *e\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L77)  \n\n## with-read-known\n\n```\nUsage: (with-read-known & body)\n```\n\n```\nEvaluates body with *read-eval* set to a \"known\" value,\ni.e. substituting true for :unknown if necessary.\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L361)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.main-api.html](https://clojure.github.io/clojure/clojure.main-api.html)"
- name: clojure.math
  id: clojure.math-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.math\n\nby Alex Miller  \n  \nFull namespace name: clojure.math\n\n## Overview\n\n```\nClojure wrapper functions for java.lang.Math static methods.\n\nFunction calls are inlined for performance, and type hinted for primitive\nlong or double parameters where appropriate. In general, Math methods are\noptimized for performance and have bounds for error tolerance. If\ngreater precision is needed, use java.lang.StrictMath directly instead.\n\nFor more complete information, see:\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Math.html\n```\n\n## Public Variables and Functions\n\n## E\n\n```\nConstant for e, the base for natural logarithms.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#E\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L24)  \n\n## IEEE-remainder\n\n```\nUsage: (IEEE-remainder dividend divisor)\n```\n\n```\nReturns the remainder per IEEE 754 such that\n  remainder = dividend - divisor * n\nwhere n is the integer closest to the exact value of dividend / divisor.\nIf two integers are equally close, then n is the even one.\nIf the remainder is zero, sign will match dividend.\nIf dividend or divisor is ##NaN, or dividend is ##Inf or ##-Inf, or divisor is zero => ##NaN\nIf dividend is finite and divisor is infinite => dividend\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#IEEEremainder-double-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L184)  \n\n## PI\n\n```\nConstant for pi, the ratio of the circumference of a circle to its diameter.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#PI\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L33)  \n\n## acos\n\n```\nUsage: (acos a)\n```\n\n```\nReturns the arc cosine of a, in the range 0.0 to pi.\nIf a is ##NaN or |a|>1 => ##NaN\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#acos-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L85)  \n\n## add-exact\n\n```\nUsage: (add-exact x y)\n```\n\n```\nReturns the sum of x and y, throws ArithmeticException on overflow.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#addExact-long-long-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L277)  \n\n## asin\n\n```\nUsage: (asin a)\n```\n\n```\nReturns the arc sine of an angle, in the range -pi/2 to pi/2.\nIf a is ##NaN or |a|>1 => ##NaN\nIf a is zero => zero with the same sign as a\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#asin-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L74)  \n\n## atan\n\n```\nUsage: (atan a)\n```\n\n```\nReturns the arc tangent of a, in the range of -pi/2 to pi/2.\nIf a is ##NaN => ##NaN\nIf a is zero => zero with the same sign as a\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#atan-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L95)  \n\n## atan2\n\n```\nUsage: (atan2 y x)\n```\n\n```\nReturns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).\nComputes the phase theta by computing an arc tangent of y/x in the range of -pi to pi.\nFor more details on special cases, see:\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#atan2-double-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L233)  \n\n## cbrt\n\n```\nUsage: (cbrt a)\n```\n\n```\nReturns the cube root of a.\nIf a is ##NaN => ##NaN\nIf a is ##Inf or ##-Inf => a\nIf a is zero => zero with sign matching a\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cbrt-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L172)  \n\n## ceil\n\n```\nUsage: (ceil a)\n```\n\n```\nReturns the smallest double greater than or equal to a, and equal to a\nmathematical integer.\nIf a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ceil-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L199)  \n\n## copy-sign\n\n```\nUsage: (copy-sign magnitude sign)\n```\n\n```\nReturns a double with the magnitude of the first argument and the sign of\nthe second.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#copySign-double-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L448)  \n\n## cos\n\n```\nUsage: (cos a)\n```\n\n```\nReturns the cosine of an angle.\nIf a is ##NaN, ##-Inf, ##Inf => ##NaN\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cos-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L53)  \n\n## cosh\n\n```\nUsage: (cosh x)\n```\n\n```\nReturns the hyperbolic cosine of x, (e^x + e^-x)/2.\nIf x is ##NaN => ##NaN\nIf x is ##Inf or ##-Inf => ##Inf\nIf x is zero => 1.0\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cosh-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L385)  \n\n## decrement-exact\n\n```\nUsage: (decrement-exact a)\n```\n\n```\nReturns a decremented by 1, throws ArithmeticException on overflow.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#decrementExact-long-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L313)  \n\n## exp\n\n```\nUsage: (exp a)\n```\n\n```\nReturns Euler's number e raised to the power of a.\nIf a is ##NaN => ##NaN\nIf a is ##Inf => ##Inf\nIf a is ##-Inf => +0.0\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#exp-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L124)  \n\n## expm1\n\n```\nUsage: (expm1 x)\n```\n\n```\nReturns e^x - 1. Near 0, expm1(x)+1 is more accurate to e^x than exp(x).\nIf x is ##NaN => ##NaN\nIf x is ##Inf => #Inf\nIf x is ##-Inf => -1.0\nIf x is zero => x\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#expm1-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L421)  \n\n## floor\n\n```\nUsage: (floor a)\n```\n\n```\nReturns the largest double less than or equal to a, and equal to a\nmathematical integer.\nIf a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\nIf a is less than zero but greater than -1.0 => -0.0\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floor-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L210)  \n\n## floor-div\n\n```\nUsage: (floor-div x y)\n```\n\n```\nInteger division that rounds to negative infinity (as opposed to zero).\nThe special case (floorDiv Long/MIN_VALUE -1) overflows and returns Long/MIN_VALUE.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorDiv-long-long-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L331)  \n\n## floor-mod\n\n```\nUsage: (floor-mod x y)\n```\n\n```\nInteger modulus x - (floorDiv(x, y) * y). Sign matches y and is in the\nrange -|y| < r < |y|.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorMod-long-long-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L341)  \n\n## get-exponent\n\n```\nUsage: (get-exponent d)\n```\n\n```\nReturns the exponent of d.\nIf d is ##NaN, ##Inf, ##-Inf => Double/MAX_EXPONENT + 1\nIf d is zero or subnormal => Double/MIN_EXPONENT - 1\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#getExponent-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L458)  \n\n## hypot\n\n```\nUsage: (hypot x y)\n```\n\n```\nReturns sqrt(x^2 + y^2) without intermediate underflow or overflow.\nIf x or y is ##Inf or ##-Inf => ##Inf\nIf x or y is ##NaN and neither is ##Inf or ##-Inf => ##NaN\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#hypot-double-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L410)  \n\n## increment-exact\n\n```\nUsage: (increment-exact a)\n```\n\n```\nReturns a incremented by 1, throws ArithmeticException on overflow.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#incrementExact-long-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L304)  \n\n## log\n\n```\nUsage: (log a)\n```\n\n```\nReturns the natural logarithm (base e) of a.\nIf a is ##NaN or negative => ##NaN\nIf a is ##Inf => ##Inf\nIf a is zero => ##-Inf\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L136)  \n\n## log10\n\n```\nUsage: (log10 a)\n```\n\n```\nReturns the logarithm (base 10) of a.\nIf a is ##NaN or negative => ##NaN\nIf a is ##Inf => ##Inf\nIf a is zero => ##-Inf\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log10-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L148)  \n\n## log1p\n\n```\nUsage: (log1p x)\n```\n\n```\nReturns ln(1+x). For small values of x, log1p(x) is more accurate than\nlog(1.0+x).\nIf x is ##NaN or < -1 => ##NaN\nIf x is ##Inf => ##Inf\nIf x is -1 => ##-Inf\nIf x is 0 => 0 with sign matching x\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log1p-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L434)  \n\n## multiply-exact\n\n```\nUsage: (multiply-exact x y)\n```\n\n```\nReturns the product of x and y, throws ArithmeticException on overflow.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#multiplyExact-long-long-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L295)  \n\n## negate-exact\n\n```\nUsage: (negate-exact a)\n```\n\n```\nReturns the negation of a, throws ArithmeticException on overflow.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#negateExact-long-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L322)  \n\n## next-after\n\n```\nUsage: (next-after start direction)\n```\n\n```\nReturns the adjacent floating point number to start in the direction of\nthe second argument. If the arguments are equal, the second is returned.\nIf either arg is #NaN => #NaN\nIf both arguments are signed zeros => direction\nIf start is +-Double/MIN_VALUE and direction would cause a smaller magnitude\n  => zero with sign matching start\nIf start is ##Inf or ##-Inf and direction would cause a smaller magnitude\n  => Double/MAX_VALUE with same sign as start\nIf start is equal to +=Double/MAX_VALUE and direction would cause a larger magnitude\n  => ##Inf or ##-Inf with sign matching start\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextAfter-double-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L469)  \n\n## next-down\n\n```\nUsage: (next-down d)\n```\n\n```\nReturns the adjacent double of d in the direction of ##-Inf.\nIf d is ##NaN => ##NaN\nIf d is ##-Inf => ##-Inf\nIf d is zero => -Double/MIN_VALUE\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L499)  \n\n## next-up\n\n```\nUsage: (next-up d)\n```\n\n```\nReturns the adjacent double of d in the direction of ##Inf.\nIf d is ##NaN => ##NaN\nIf d is ##Inf => ##Inf\nIf d is zero => Double/MIN_VALUE\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextUp-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L487)  \n\n## pow\n\n```\nUsage: (pow a b)\n```\n\n```\nReturns the value of a raised to the power of b.\nFor more details on special cases, see:\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#pow-double-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L244)  \n\n## random\n\n```\nUsage: (random)\n```\n\n```\nReturns a positive double between 0.0 and 1.0, chosen pseudorandomly with\napproximately random distribution.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#random--\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L267)  \n\n## rint\n\n```\nUsage: (rint a)\n```\n\n```\nReturns the double closest to a and equal to a mathematical integer.\nIf two values are equally close, return the even one.\nIf a is ##NaN or ##Inf or ##-Inf or zero => a\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#rint-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L222)  \n\n## round\n\n```\nUsage: (round a)\n```\n\n```\nReturns the closest long to a. If equally close to two values, return the one\ncloser to ##Inf.\nIf a is ##NaN => 0\nIf a is ##-Inf or < Long/MIN_VALUE => Long/MIN_VALUE\nIf a is ##Inf or > Long/MAX_VALUE => Long/MAX_VALUE\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#round-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L254)  \n\n## scalb\n\n```\nUsage: (scalb d scaleFactor)\n```\n\n```\nReturns d * 2^scaleFactor, scaling by a factor of 2. If the exponent\nis between Double/MIN_EXPONENT and Double/MAX_EXPONENT, the answer is exact.\nIf d is ##NaN => ##NaN\nIf d is ##Inf or ##-Inf => ##Inf or ##-Inf respectively\nIf d is zero => zero of same sign as d\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L511)  \n\n## signum\n\n```\nUsage: (signum d)\n```\n\n```\nReturns the signum function of d - zero for zero, 1.0 if >0, -1.0 if <0.\nIf d is ##NaN => ##NaN\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#signum-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L364)  \n\n## sin\n\n```\nUsage: (sin a)\n```\n\n```\nReturns the sine of an angle.\nIf a is ##NaN, ##-Inf, ##Inf => ##NaN\nIf a is zero => zero with the same sign as a\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sin-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L42)  \n\n## sinh\n\n```\nUsage: (sinh x)\n```\n\n```\nReturns the hyperbolic sine of x, (e^x - e^-x)/2.\nIf x is ##NaN => ##NaN\nIf x is ##Inf or ##-Inf or zero => x\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sinh-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L374)  \n\n## sqrt\n\n```\nUsage: (sqrt a)\n```\n\n```\nReturns the positive square root of a.\nIf a is ##NaN or negative => ##NaN\nIf a is ##Inf => ##Inf\nIf a is zero => a\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sqrt-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L160)  \n\n## subtract-exact\n\n```\nUsage: (subtract-exact x y)\n```\n\n```\nReturns the difference of x and y, throws ArithmeticException on overflow.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#subtractExact-long-long-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L286)  \n\n## tan\n\n```\nUsage: (tan a)\n```\n\n```\nReturns the tangent of an angle.\nIf a is ##NaN, ##-Inf, ##Inf => ##NaN\nIf a is zero => zero with the same sign as a\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#tan-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L63)  \n\n## tanh\n\n```\nUsage: (tanh x)\n```\n\n```\nReturns the hyperbolic tangent of x, sinh(x)/cosh(x).\nIf x is ##NaN => ##NaN\nIf x is zero => zero, with same sign\nIf x is ##Inf => +1.0\nIf x is ##-Inf => -1.0\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#tanh-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L397)  \n\n## to-degrees\n\n```\nUsage: (to-degrees r)\n```\n\n```\nConverts an angle in radians to an approximate equivalent angle in degrees.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toDegrees-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L115)  \n\n## to-radians\n\n```\nUsage: (to-radians deg)\n```\n\n```\nConverts an angle in degrees to an approximate equivalent angle in radians.\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toRadians-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L106)  \n\n## ulp\n\n```\nUsage: (ulp d)\n```\n\n```\nReturns the size of an ulp (unit in last place) for d.\nIf d is ##NaN => ##NaN\nIf d is ##Inf or ##-Inf => ##Inf\nIf d is zero => Double/MIN_VALUE\nIf d is +/- Double/MAX_VALUE => 2^971\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ulp-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L351)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.math-api.html](https://clojure.github.io/clojure/clojure.math-api.html)"
- name: clojure.pprint
  id: clojure.pprint-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.pprint\n\nby Tom Faulhaber  \n  \nFull namespace name: clojure.pprint\n\n## Overview\n\n```\nA Pretty Printer for Clojure\n\nclojure.pprint implements a flexible system for printing structured data\nin a pleasing, easy-to-understand format. Basic use of the pretty printer is \nsimple, just call pprint instead of println. More advanced users can use \nthe building blocks provided to create custom output formats. \n\nOut of the box, pprint supports a simple structured format for basic data \nand a specialized format for Clojure source code. More advanced formats, \nincluding formats that don't look like Clojure data at all like XML and \nJSON, can be rendered by creating custom dispatch functions. \n\nIn addition to the pprint function, this module contains cl-format, a text \nformatting function which is fully compatible with the format function in \nCommon Lisp. Because pretty printing directives are directly integrated with\ncl-format, it supports very concise custom dispatch. It also provides\na more powerful alternative to Clojure's standard format function.\n\nSee documentation for pprint and cl-format for more information or \ncomplete documentation on the Clojure web site on GitHub.\n```\n\nAdded in Clojure version 1.2  \n  \nRelated documentation: [A Common Lisp-compatible Format Function](https://clojure.github.io/clojure/doc/clojure/pprint/CommonLispFormat.html)  \n[A Pretty Printer for Clojure](https://clojure.github.io/clojure/doc/clojure/pprint/PrettyPrinting.html)  \n  \n\n## Public Variables and Functions\n\n## \\*print-base\\*\n\n```\nThe base to use for printing integers and rationals.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L87)  \n\n## \\*print-miser-width\\*\n\n```\nThe column at which to enter miser style. Depending on the dispatch table, \nmiser style add newlines in more places to try to keep lines short allowing for further \nlevels of nesting.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L47)  \n\n## \\*print-pprint-dispatch\\*\n\n```\nNo usage documentation available\n```\n\n```\nThe pretty print dispatch function. Use with-pprint-dispatch or set-pprint-dispatch\nto modify.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L34)  \n\n## \\*print-pretty\\*\n\n```\nBind to true if you want write to use pretty printing\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L30)  \n\n## \\*print-radix\\*\n\n```\nPrint a radix specifier in front of integers and rationals. If *print-base* is 2, 8, \nor 16, then the radix specifier used is #b, #o, or #x, respectively. Otherwise the \nradix specifier is in the form #XXr where XX is the decimal value of *print-base* \n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L80)  \n\n## \\*print-right-margin\\*\n\n```\nPretty printing will try to avoid anything going beyond this column.\nSet it to nil to have pprint let the line be arbitrarily long. This will ignore all \nnon-mandatory newlines.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L40)  \n\n## \\*print-suppress-namespaces\\*\n\n```\nDon't print namespaces with symbols. This is particularly useful when \npretty printing the results of macro expansions\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L72)  \n\n## cl-format\n\n```\nUsage: (cl-format writer format-in & args)\n```\n\n```\nAn implementation of a Common Lisp compatible format function. cl-format formats its\narguments to an output stream or string based on the format control string given. It \nsupports sophisticated formatting of structured data.\n\nWriter is an instance of java.io.Writer, true to output to *out* or nil to output \nto a string, format-in is the format control string and the remaining arguments \nare the data to be formatted.\n\nThe format control string is a string to be output with embedded 'format directives' \ndescribing how to format the various arguments passed in.\n\nIf writer is nil, cl-format returns the formatted result string. Otherwise, cl-format \nreturns nil.\n\nFor example:\n (let [results [46 38 22]]\n        (cl-format true \"There ~[are~;is~:;are~]~:* ~d result~:p: ~{~d~^, ~}~%\" \n                   (count results) results))\n\nPrints to *out*:\n There are 3 results: 46, 38, 22\n\nDetailed documentation on format control strings is available in the \"Common Lisp the \nLanguage, 2nd edition\", Chapter 22 (available online at:\nhttp://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000) \nand in the Common Lisp HyperSpec at \nhttp://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/fb916808669ef65dce5dfe58e23d4a902253ca55/src/clj/clojure/pprint/cl_format.clj#L27)  \n\n## code-dispatch\n\n```\nUsage: (code-dispatch object)\n```\n\n```\nThe pretty print dispatch function for pretty printing Clojure code.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/af9f2ed34326a5f590f245155c73958e7a2dc17f/src/clj/clojure/pprint/dispatch.clj#L476)  \n\n## formatter\n\n```\nUsage: (formatter format-in)\n```\n\n```\nMakes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning \noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/fb916808669ef65dce5dfe58e23d4a902253ca55/src/clj/clojure/pprint/cl_format.clj#L1916)  \n\n## formatter-out\n\n```\nUsage: (formatter-out format-in)\n```\n\n```\nMakes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/fb916808669ef65dce5dfe58e23d4a902253ca55/src/clj/clojure/pprint/cl_format.clj#L1936)  \n\n## fresh-line\n\n```\nUsage: (fresh-line)\n```\n\n```\nMake a newline if *out* is not already at the beginning of the line. If *out* is\nnot a pretty writer (which keeps track of columns), this function always outputs a newline.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/fb916808669ef65dce5dfe58e23d4a902253ca55/src/clj/clojure/pprint/cl_format.clj#L1245)  \n\n## get-pretty-writer\n\n```\nUsage: (get-pretty-writer writer)\n```\n\n```\nReturns the java.io.Writer passed in wrapped in a pretty writer proxy, unless it's \nalready a pretty writer. Generally, it is unnecessary to call this function, since pprint,\nwrite, and cl-format all call it if they need to. However if you want the state to be \npreserved across calls, you will want to wrap them with this. \n\nFor example, when you want to generate column-aware output with multiple calls to cl-format, \ndo it like in this example:\n\n    (defn print-table [aseq column-width]\n      (binding [*out* (get-pretty-writer *out*)]\n        (doseq [row aseq]\n          (doseq [col row]\n            (cl-format true \"~4D~7,vT\" col column-width))\n          (prn))))\n\nNow when you run:\n\n    user> (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)\n\nIt prints a table of squares and cubes for the numbers from 1 to 10:\n\n       1      1       1    \n       2      4       8    \n       3      9      27    \n       4     16      64    \n       5     25     125    \n       6     36     216    \n       7     49     343    \n       8     64     512    \n       9     81     729    \n      10    100    1000\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/fb916808669ef65dce5dfe58e23d4a902253ca55/src/clj/clojure/pprint/cl_format.clj#L1203)  \n\n## pp\n\n```\nUsage: (pp)\n```\n\n```\nA convenience macro that pretty prints the last thing output. This is\nexactly equivalent to (pprint *1).\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L254)  \n\n## pprint\n\n```\nUsage: (pprint object)\n       (pprint object writer)\n```\n\n```\nPretty print object to the optional output writer. If the writer is not provided, \nprint the object to the currently bound value of *out*.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L241)  \n\n## pprint-indent\n\n```\nUsage: (pprint-indent relative-to n)\n```\n\n```\nCreate an indent at this point in the pretty printing stream. This defines how \nfollowing lines are indented. relative-to can be either :block or :current depending \nwhether the indent should be computed relative to the start of the logical block or\nthe current column position. n is an offset. \n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L341)  \n\n## pprint-logical-block\n\n```\nUsage: (pprint-logical-block options* body)\n```\n\n```\nExecute the body as a pretty printing logical block with output to *out* which \nmust be a pretty printing writer. When used from pprint or cl-format, this can be \nassumed. \n\nThis function is intended for use when writing custom dispatch functions.\n\nBefore the body, the caller can optionally specify options: :prefix, :per-line-prefix, \nand :suffix.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L302)  \n\n## pprint-newline\n\n```\nUsage: (pprint-newline kind)\n```\n\n```\nPrint a conditional newline to a pretty printing stream. kind specifies if the \nnewline is :linear, :miser, :fill, or :mandatory. \n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L329)  \n\n## pprint-tab\n\n```\nUsage: (pprint-tab kind colnum colinc)\n```\n\n```\nTab at this point in the pretty printing stream. kind specifies whether the tab\nis :line, :section, :line-relative, or :section-relative. \n\nColnum and colinc specify the target column and the increment to move the target\nforward if the output is already past the original target.\n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer.\n\nTHIS FUNCTION IS NOT YET IMPLEMENTED.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L356)  \n\n## print-length-loop\n\n```\nUsage: (print-length-loop bindings & body)\n```\n\n```\nA version of loop that iterates at most *print-length* times. This is designed \nfor use in pretty-printer dispatch functions.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L391)  \n\n## print-table\n\n```\nUsage: (print-table ks rows)\n       (print-table rows)\n```\n\n```\nPrints a collection of maps in a textual table. Prints table headings\nks, and then a line of output for each row, corresponding to the keys\nin ks. If ks are not specified, use the keys of the first item in rows.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/93d13d0c0671130b329863570080c72799563ac7/src/clj/clojure/pprint/print_table.clj#L11)  \n\n## set-pprint-dispatch\n\n```\nUsage: (set-pprint-dispatch function)\n```\n\n```\nSet the pretty print dispatch function to a function matching (fn [obj] ...)\nwhere obj is the object to pretty print. That function will be called with *out* set\nto a pretty printing writer to which it should do its printing.\n\nFor example functions, see simple-dispatch and code-dispatch in \nclojure.pprint.dispatch.clj.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L260)  \n\n## simple-dispatch\n\n```\nUsage: (simple-dispatch object)\n```\n\n```\nThe pretty print dispatch function for simple data structure format.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/af9f2ed34326a5f590f245155c73958e7a2dc17f/src/clj/clojure/pprint/dispatch.clj#L174)  \n\n## with-pprint-dispatch\n\n```\nUsage: (with-pprint-dispatch function & body)\n```\n\n```\nExecute body with the pretty print dispatch function bound to function.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L274)  \n\n## write\n\n```\nUsage: (write object & kw-args)\n```\n\n```\nWrite an object subject to the current bindings of the printer control variables.\nUse the kw-args argument to override individual variables for this call (and any \nrecursive calls). Returns the string result if :stream is nil or nil otherwise.\n\nThe following keyword arguments can be passed with values:\n  Keyword              Meaning                              Default value\n  :stream              Writer for output or nil             true (indicates *out*)\n  :base                Base to use for writing rationals    Current value of *print-base*\n  :circle*             If true, mark circular structures    Current value of *print-circle*\n  :length              Maximum elements to show in sublists Current value of *print-length*\n  :level               Maximum depth                        Current value of *print-level*\n  :lines*              Maximum lines of output              Current value of *print-lines*\n  :miser-width         Width to enter miser mode            Current value of *print-miser-width*\n  :dispatch            The pretty print dispatch function   Current value of *print-pprint-dispatch*\n  :pretty              If true, do pretty printing          Current value of *print-pretty*\n  :radix               If true, prepend a radix specifier   Current value of *print-radix*\n  :readably*           If true, print readably              Current value of *print-readably*\n  :right-margin        The column for the right margin      Current value of *print-right-margin*\n  :suppress-namespaces If true, no namespaces in symbols    Current value of *print-suppress-namespaces*\n\n  * = not yet supported\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L197)  \n\n## write-out\n\n```\nUsage: (write-out object)\n```\n\n```\nWrite an object to *out* subject to the current bindings of the printer control \nvariables. Use the kw-args argument to override individual variables for this call (and \nany recursive calls).\n\n*out* must be a PrettyWriter if pretty printing is enabled. This is the responsibility\nof the caller.\n\nThis method is primarily intended for use by pretty print dispatch functions that \nalready know that the pretty printer will have set up their environment appropriately.\nNormal library clients should use the standard \"write\" interface. \n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L171)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.pprint-api.html](https://clojure.github.io/clojure/clojure.pprint-api.html)"
- name: clojure.reflect
  id: clojure.reflect-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.reflect\n\nby Stuart Halloway  \n  \nFull namespace name: clojure.reflect\n\n## Overview\n\n```\nReflection on Host Types\nAlpha - subject to change.\n\nTwo main entry points: \n\n* type-reflect reflects on something that implements TypeReference.\n* reflect (for REPL use) reflects on the class of an instance, or\n  on a class if passed a class\n\nKey features:\n\n* Exposes the read side of reflection as pure data. Reflecting\n  on a type returns a map with keys :bases, :flags, and :members.\n\n* Canonicalizes class names as Clojure symbols. Types can extend\n  to the TypeReference protocol to indicate that they can be\n  unambiguously resolved as a type name. The canonical format\n  requires one non-Java-ish convention: array brackets are <>\n  instead of [] so they can be part of a Clojure symbol.\n\n* Pluggable Reflectors for different implementations. The default\n  JavaReflector is good when you have a class in hand, or use\n  the AsmReflector for \"hands off\" reflection without forcing\n  classes to load.\n\nPlatform implementers must:\n\n* Create an implementation of Reflector.\n* Create one or more implementations of TypeReference.\n* def default-reflector to be an instance that satisfies Reflector.\n```\n\nAdded in Clojure version 1.3  \n  \n\n## Protocols\n\n## ClassResolver\n\nKnown implementations: clojure.lang.Fn, java.lang.ClassLoader  \n\n### resolve-class\n\n```\nUsage: (resolve-class this name)\n```\n\n```\nGiven a class name, return that typeref's class bytes as an InputStream.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L196)  \n\n## Reflector\n\n```\nProtocol for reflection implementers.\n```\n\nKnown implementations: [AsmReflector](#clojure.reflect/AsmReflector), [JavaReflector](#clojure.reflect/JavaReflector)  \n\n### do-reflect\n\n```\nUsage: (do-reflect reflector typeref)\n```\n\n[Source](https://github.com/clojure/clojure/blob/ee00807bac64d55dbc7ec49442d6376352b77200/src/clj/clojure/reflect.clj#L44)  \n\n## TypeReference\n\n```\nA TypeReference can be unambiguously converted to a type name on\nthe host platform.\n\nAll typerefs are normalized into symbols. If you need to\nnormalize a typeref yourself, call typesym.\n```\n\nKnown implementations: clojure.asm.Type, clojure.lang.Symbol, java.lang.Class  \n\n### typename\n\n```\nUsage: (typename o)\n```\n\n```\nReturns Java name as returned by ASM getClassName, e.g. byte[], java.lang.String[]\n```\n\n[Source](https://github.com/clojure/clojure/blob/ee00807bac64d55dbc7ec49442d6376352b77200/src/clj/clojure/reflect.clj#L48)\n\n## Types\n\n## AsmReflector\n\nFields: \\[class-resolver\\]  \nProtocols: [Reflector](#clojure.reflect/Reflector)  \nInterfaces:  \n\n## Constructor\n\nFields: \\[name declaring-class parameter-types exception-types flags\\]  \nProtocols:  \nInterfaces: clojure.lang.IHashEq, clojure.lang.IKeywordLookup, clojure.lang.ILookup, clojure.lang.IObj, clojure.lang.IPersistentMap, java.io.Serializable, java.util.Map  \n\n## Field\n\nFields: \\[name type declaring-class flags\\]  \nProtocols:  \nInterfaces: clojure.lang.IHashEq, clojure.lang.IKeywordLookup, clojure.lang.ILookup, clojure.lang.IObj, clojure.lang.IPersistentMap, java.io.Serializable, java.util.Map  \n\n## JavaReflector\n\nFields: \\[classloader\\]  \nProtocols: [Reflector](#clojure.reflect/Reflector)  \nInterfaces:  \n\n## Method\n\nFields: \\[name return-type declaring-class parameter-types exception-types flags\\]  \nProtocols:  \nInterfaces: clojure.lang.IHashEq, clojure.lang.IKeywordLookup, clojure.lang.ILookup, clojure.lang.IObj, clojure.lang.IPersistentMap, java.io.Serializable, java.util.Map  \n\n## Public Variables and Functions\n\n## -\\>AsmReflector\n\n```\nUsage: (->AsmReflector class-resolver)\n```\n\n```\nPositional factory function for class clojure.reflect.AsmReflector.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L208)  \n\n## -\\>Constructor\n\n```\nUsage: (->Constructor name declaring-class parameter-types exception-types flags)\n```\n\n```\nPositional factory function for class clojure.reflect.Constructor.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L115)  \n\n## -\\>Field\n\n```\nUsage: (->Field name type declaring-class flags)\n```\n\n```\nPositional factory function for class clojure.reflect.Field.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L154)  \n\n## -\\>JavaReflector\n\n```\nUsage: (->JavaReflector classloader)\n```\n\n```\nPositional factory function for class clojure.reflect.JavaReflector.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L178)  \n\n## -\\>Method\n\n```\nUsage: (->Method name return-type declaring-class parameter-types exception-types flags)\n```\n\n```\nPositional factory function for class clojure.reflect.Method.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L134)  \n\n## flag-descriptors\n\n```\nThe Java access bitflags, along with their friendly names and\nthe kinds of objects to which they can apply.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L77)  \n\n## map-\\>Constructor\n\n```\nUsage: (map->Constructor m#)\n```\n\n```\nFactory function for class clojure.reflect.Constructor, taking a map of keywords to field values.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L115)  \n\n## map-\\>Field\n\n```\nUsage: (map->Field m#)\n```\n\n```\nFactory function for class clojure.reflect.Field, taking a map of keywords to field values.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L154)  \n\n## map-\\>Method\n\n```\nUsage: (map->Method m#)\n```\n\n```\nFactory function for class clojure.reflect.Method, taking a map of keywords to field values.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L134)  \n\n## reflect\n\n```\nUsage: (reflect obj & options)\n```\n\n```\nAlpha - subject to change.\nReflect on the type of obj (or obj itself if obj is a class).\nReturn value and options are the same as for type-reflect. \n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/ee00807bac64d55dbc7ec49442d6376352b77200/src/clj/clojure/reflect.clj#L115)  \n\n## type-reflect\n\n```\nUsage: (type-reflect typeref & options)\n```\n\n```\nAlpha - subject to change.\n Reflect on a typeref, returning a map with :bases, :flags, and\n:members. In the discussion below, names are always Clojure symbols.\n\n :bases            a set of names of the type's bases\n :flags            a set of keywords naming the boolean attributes\n                   of the type.\n :members          a set of the type's members. Each member is a map\n                   and can be a constructor, method, or field.\n\n Keys common to all members:\n :name             name of the type \n :declaring-class  name of the declarer\n :flags            keyword naming boolean attributes of the member\n\n Keys specific to constructors:\n :parameter-types  vector of parameter type names\n :exception-types  vector of exception type names\n\n Key specific to methods:\n :parameter-types  vector of parameter type names\n :exception-types  vector of exception type names\n :return-type      return type name\n\n Keys specific to fields:\n :type             type name\n\n Options:\n\n   :ancestors     in addition to the keys described above, also\n                  include an :ancestors key with the entire set of\n                  ancestors, and add all ancestor members to\n                  :members.\n   :reflector     implementation to use. Defaults to JavaReflector,\n                  AsmReflector is also an option.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/ee00807bac64d55dbc7ec49442d6376352b77200/src/clj/clojure/reflect.clj#L58)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.reflect-api.html](https://clojure.github.io/clojure/clojure.reflect-api.html)"
- name: clojure.repl
  id: clojure.repl-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.repl\n\nby Chris Houser, Christophe Grand, Stephen Gilardi, Michel Salim  \n  \nFull namespace name: clojure.repl\n\n## Overview\n\n```\nUtilities meant to be used interactively at the REPL\n```\n\n## Public Variables and Functions\n\n## apropos\n\n```\nUsage: (apropos str-or-pattern)\n```\n\n```\nGiven a regular expression or stringable thing, return a seq of all\npublic definitions in all currently-loaded namespaces that match the\nstr-or-pattern.\n```\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L181)  \n\n## demunge\n\n```\nUsage: (demunge fn-name)\n```\n\n```\nGiven a string representation of a fn class,\nas in a stack trace element, returns a readable version.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L207)  \n\n## dir\n\n```\nUsage: (dir nsname)\n```\n\n```\nPrints a sorted directory of public vars in a namespace\n```\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L201)  \n\n## dir-fn\n\n```\nUsage: (dir-fn ns)\n```\n\n```\nReturns a sorted seq of symbols naming public vars in\na namespace or namespace alias. Looks for aliases in *ns*\n```\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L195)  \n\n## doc\n\n```\nUsage: (doc name)\n```\n\n```\nPrints documentation for a var or special form given its name,\nor for a spec if given a keyword\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L131)  \n\n## find-doc\n\n```\nUsage: (find-doc re-string-or-pattern)\n```\n\n```\nPrints documentation for any var whose documentation or name\ncontains a match for re-string-or-pattern\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L115)  \n\n## pst\n\n```\nUsage: (pst)\n       (pst e-or-depth)\n       (pst e depth)\n```\n\n```\nPrints a stack trace of the exception, to the depth requested. If none supplied, uses the root cause of the\nmost recent repl exception (*e), and a depth of 12.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L240)  \n\n## root-cause\n\n```\nUsage: (root-cause t)\n```\n\n```\nReturns the initial cause of an exception or error by peeling off all of\nits wrappers\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L214)  \n\n## set-break-handler!\n\n```\nUsage: (set-break-handler!)\n       (set-break-handler! f)\n```\n\n```\nRegister INT signal handler.  After calling this, Ctrl-C will cause\nthe given function f to be called with a single argument, the signal.\nUses thread-stopper if no function given.\n```\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L279)  \n\n## source\n\n```\nUsage: (source n)\n```\n\n```\nPrints the source code for the given symbol, if it can find it.\nThis requires that the symbol resolve to a Var defined in a\nnamespace for which the .clj is in the classpath.\n\nExample: (source filter)\n```\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L172)  \n\n## source-fn\n\n```\nUsage: (source-fn x)\n```\n\n```\nReturns a string of the source code for the given symbol, if it can\nfind it.  This requires that the symbol resolve to a Var defined in\na namespace for which the .clj is in the classpath.  Returns nil if\nit can't find the source.  For most REPL usage, 'source' is more\nconvenient.\n\nExample: (source-fn 'filter)\n```\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L147)  \n\n## stack-element-str\n\n```\nUsage: (stack-element-str el)\n```\n\n```\nReturns a (possibly unmunged) string representation of a StackTraceElement\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L227)  \n\n## thread-stopper\n\n```\nUsage: (thread-stopper)\n       (thread-stopper thread)\n```\n\n```\nReturns a function that takes one arg and uses that as an exception message\nto stop the given thread.  Defaults to the current thread\n```\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L273)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.repl-api.html](https://clojure.github.io/clojure/clojure.repl-api.html)"
- name: clojure.set
  id: clojure.set-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.set\n\nby Rich Hickey  \n  \nFull namespace name: clojure.set\n\n## Overview\n\n```\nSet operations such as union/intersection.\n```\n\n## Public Variables and Functions\n\n## difference\n\n```\nUsage: (difference s1)\n       (difference s1 s2)\n       (difference s1 s2 & sets)\n```\n\n```\nReturn a set that is the first set without elements of the remaining sets\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L49)  \n\n## index\n\n```\nUsage: (index xrel ks)\n```\n\n```\nReturns a map of the distinct values of ks in the xrel mapped to a\nset of the maps in xrel with the corresponding values of ks.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L95)  \n\n## intersection\n\n```\nUsage: (intersection s1)\n       (intersection s1 s2)\n       (intersection s1 s2 & sets)\n```\n\n```\nReturn a set that is the intersection of the input sets\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L33)  \n\n## join\n\n```\nUsage: (join xrel yrel)\n       (join xrel yrel km)\n```\n\n```\nWhen passed 2 rels, returns the rel corresponding to the natural\njoin. When passed an additional keymap, joins on the corresponding\nkeys.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L115)  \n\n## map-invert\n\n```\nUsage: (map-invert m)\n```\n\n```\nReturns the map with the vals mapped to the keys.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L106)  \n\n## project\n\n```\nUsage: (project xrel ks)\n```\n\n```\nReturns a rel of the elements of xrel with only the keys in ks\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L72)  \n\n## rename\n\n```\nUsage: (rename xrel kmap)\n```\n\n```\nReturns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L89)  \n\n## rename-keys\n\n```\nUsage: (rename-keys map kmap)\n```\n\n```\nReturns the map with the keys in kmap renamed to the vals in kmap\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L78)  \n\n## select\n\n```\nUsage: (select pred xset)\n```\n\n```\nReturns a set of the elements for which pred is true\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L65)  \n\n## subset?\n\n```\nUsage: (subset? set1 set2)\n```\n\n```\nIs set1 a subset of set2?\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L146)  \n\n## superset?\n\n```\nUsage: (superset? set1 set2)\n```\n\n```\nIs set1 a superset of set2?\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L154)  \n\n## union\n\n```\nUsage: (union)\n       (union s1)\n       (union s1 s2)\n       (union s1 s2 & sets)\n```\n\n```\nReturn a set that is the union of the input sets\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L20)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.set-api.html](https://clojure.github.io/clojure/clojure.set-api.html)"
- name: clojure.stacktrace
  id: clojure.stacktrace-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.stacktrace\n\nby Stuart Sierra  \n  \nFull namespace name: clojure.stacktrace\n\n## Overview\n\n```\nPrint stack traces oriented towards Clojure, not Java.\n```\n\n## Public Variables and Functions\n\n## e\n\n```\nUsage: (e)\n```\n\n```\nREPL utility.  Prints a brief stack trace for the root cause of the\nmost recent exception.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/dbb448f7709b20c392558e7d7871d1e9b28c9440/src/clj/clojure/stacktrace.clj#L82)  \n\n## print-cause-trace\n\n```\nUsage: (print-cause-trace tr)\n       (print-cause-trace tr n)\n```\n\n```\nLike print-stack-trace but prints chained exceptions (causes).\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/dbb448f7709b20c392558e7d7871d1e9b28c9440/src/clj/clojure/stacktrace.clj#L72)  \n\n## print-stack-trace\n\n```\nUsage: (print-stack-trace tr)\n       (print-stack-trace tr n)\n```\n\n```\nPrints a Clojure-oriented stack trace of tr, a Throwable.\nPrints a maximum of n stack frames (default: unlimited).\nDoes not print chained exceptions (causes).\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/dbb448f7709b20c392558e7d7871d1e9b28c9440/src/clj/clojure/stacktrace.clj#L50)  \n\n## print-throwable\n\n```\nUsage: (print-throwable tr)\n```\n\n```\nPrints the class and message of a Throwable. Prints the ex-data map\nif present.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/dbb448f7709b20c392558e7d7871d1e9b28c9440/src/clj/clojure/stacktrace.clj#L40)  \n\n## print-trace-element\n\n```\nUsage: (print-trace-element e)\n```\n\n```\nPrints a Clojure-oriented view of one element in a stack trace.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/dbb448f7709b20c392558e7d7871d1e9b28c9440/src/clj/clojure/stacktrace.clj#L28)  \n\n## root-cause\n\n```\nUsage: (root-cause tr)\n```\n\n```\nReturns the last 'cause' Throwable in a chain of Throwables.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/dbb448f7709b20c392558e7d7871d1e9b28c9440/src/clj/clojure/stacktrace.clj#L20)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.stacktrace-api.html](https://clojure.github.io/clojure/clojure.stacktrace-api.html)"
- name: clojure.string
  id: clojure.string-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.string\n\nby Stuart Sierra, Stuart Halloway, David Liebke  \n  \nFull namespace name: clojure.string\n\n## Overview\n\n```\nClojure String utilities\n\nIt is poor form to (:use clojure.string). Instead, use require\nwith :as to specify a prefix, e.g.\n\n(ns your.namespace.here\n  (:require [clojure.string :as str]))\n\nDesign notes for clojure.string:\n\n1. Strings are objects (as opposed to sequences). As such, the\n   string being manipulated is the first argument to a function;\n   passing nil will result in a NullPointerException unless\n   documented otherwise. If you want sequence-y behavior instead,\n   use a sequence.\n\n2. Functions are generally not lazy, and call straight to host\n   methods where those are available and efficient.\n\n3. Functions take advantage of String implementation details to\n   write high-performing loop/recurs instead of using higher-order\n   functions. (This is not idiomatic in general-purpose application\n   code.)\n\n4. When a function is documented to accept a string argument, it\n   will take any implementation of the correct *interface* on the\n   host platform. In Java, this is CharSequence, which is more\n   general than String. In ordinary usage you will almost always\n   pass concrete strings. If you are doing something unusual,\n   e.g. passing a mutable implementation of CharSequence, then\n   thread-safety is your responsibility.\n```\n\n## Public Variables and Functions\n\n## blank?\n\n```\nUsage: (blank? s)\n```\n\n```\nTrue if s is nil, empty, or contains only whitespace.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L288)  \n\n## capitalize\n\n```\nUsage: (capitalize s)\n```\n\n```\nConverts first character of the string to upper-case, all other\ncharacters to lower-case.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L196)  \n\n## ends-with?\n\n```\nUsage: (ends-with? s substr)\n```\n\n```\nTrue if s ends with substr.\n```\n\nAdded in Clojure version 1.8\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L367)  \n\n## escape\n\n```\nUsage: (escape s cmap)\n```\n\n```\nReturn a new string, using cmap to escape each character ch\nfrom s as follows:\n\nIf (cmap ch) is nil, append ch to the new string.\nIf (cmap ch) is non-nil, append (str (cmap ch)) instead.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L301)  \n\n## includes?\n\n```\nUsage: (includes? s substr)\n```\n\n```\nTrue if s includes substr.\n```\n\nAdded in Clojure version 1.8\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L373)  \n\n## index-of\n\n```\nUsage: (index-of s value)\n       (index-of s value from-index)\n```\n\n```\nReturn index of value (string or char) in s, optionally searching\nforward from from-index. Return nil if value not found.\n```\n\nAdded in Clojure version 1.8\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L319)  \n\n## join\n\n```\nUsage: (join coll)\n       (join separator coll)\n```\n\n```\nReturns a string of all elements in coll, as returned by (seq coll),\nseparated by an optional separator.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L180)  \n\n## last-index-of\n\n```\nUsage: (last-index-of s value)\n       (last-index-of s value from-index)\n```\n\n```\nReturn last index of value (string or char) in s, optionally\nsearching backward from from-index. Return nil if value not found.\n```\n\nAdded in Clojure version 1.8\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L340)  \n\n## lower-case\n\n```\nUsage: (lower-case s)\n```\n\n```\nConverts string to all lower-case.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L213)  \n\n## re-quote-replacement\n\n```\nUsage: (re-quote-replacement replacement)\n```\n\n```\nGiven a replacement string that you wish to be a literal\nreplacement for a pattern match in replace or replace-first, do the\nnecessary escaping of special characters in the replacement.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L54)  \n\n## replace\n\n```\nUsage: (replace s match replacement)\n```\n\n```\nReplaces all instance of match with replacement in s.\n\nmatch/replacement can be:\n\nstring / string\nchar / char\npattern / (string or function of match).\n\nSee also replace-first.\n\nThe replacement is literal (i.e. none of its characters are treated\nspecially) for all cases above except pattern / string.\n\nFor pattern / string, $1, $2, etc. in the replacement string are\nsubstituted with the string that matched the corresponding\nparenthesized group in the pattern.  If you wish your replacement\nstring r to be used literally, use (re-quote-replacement r) as the\nreplacement argument.  See also documentation for\njava.util.regex.Matcher's appendReplacement method.\n\nExample:\n(clojure.string/replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n-> \"lmostAay igPay atinLay\"\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L75)  \n\n## replace-first\n\n```\nUsage: (replace-first s match replacement)\n```\n\n```\nReplaces the first instance of match with replacement in s.\n\nmatch/replacement can be:\n\nchar / char\nstring / string\npattern / (string or function of match).\n\nSee also replace.\n\nThe replacement is literal (i.e. none of its characters are treated\nspecially) for all cases above except pattern / string.\n\nFor pattern / string, $1, $2, etc. in the replacement string are\nsubstituted with the string that matched the corresponding\nparenthesized group in the pattern.  If you wish your replacement\nstring r to be used literally, use (re-quote-replacement r) as the\nreplacement argument.  See also documentation for\njava.util.regex.Matcher's appendReplacement method.\n\nExample:\n(clojure.string/replace-first \"swap first two words\"\n                              #\"(\\w+)(\\s+)(\\w+)\" \"$3$2$1\")\n-> \"first swap two words\"\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L138)  \n\n## reverse\n\n```\nUsage: (reverse s)\n```\n\n```\nReturns s with its characters reversed.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L48)  \n\n## split\n\n```\nUsage: (split s re)\n       (split s re limit)\n```\n\n```\nSplits string on a regular expression.  Optional argument limit is\nthe maximum number of parts. Not lazy. Returns vector of the parts.\nTrailing empty strings are not returned - pass limit of -1 to return all.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L219)  \n\n## split-lines\n\n```\nUsage: (split-lines s)\n```\n\n```\nSplits s on \\n or \\r\\n. Trailing empty lines are not returned.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L229)  \n\n## starts-with?\n\n```\nUsage: (starts-with? s substr)\n```\n\n```\nTrue if s starts with substr.\n```\n\nAdded in Clojure version 1.8\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L361)  \n\n## trim\n\n```\nUsage: (trim s)\n```\n\n```\nRemoves whitespace from both ends of string.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L235)  \n\n## trim-newline\n\n```\nUsage: (trim-newline s)\n```\n\n```\nRemoves all trailing newline \\n or return \\r characters from\nstring.  Similar to Perl's chomp.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L275)  \n\n## triml\n\n```\nUsage: (triml s)\n```\n\n```\nRemoves whitespace from the left side of string.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L252)  \n\n## trimr\n\n```\nUsage: (trimr s)\n```\n\n```\nRemoves whitespace from the right side of string.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L264)  \n\n## upper-case\n\n```\nUsage: (upper-case s)\n```\n\n```\nConverts string to all upper-case.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L207)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.string-api.html](https://clojure.github.io/clojure/clojure.string-api.html)"
- name: clojure.template
  id: clojure.template-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.template\n\nby Stuart Sierra  \n  \nFull namespace name: clojure.template\n\n## Overview\n\n```\nMacros that expand to repeated copies of a template expression.\n```\n\n## Public Variables and Functions\n\n## apply-template\n\n```\nUsage: (apply-template argv expr values)\n```\n\n```\nFor use in macros.  argv is an argument list, as in defn.  expr is\na quoted expression using the symbols in argv.  values is a sequence\nof values to be used for the arguments.\n\napply-template will recursively replace argument symbols in expr\nwith their corresponding values, returning a modified expr.\n\nExample: (apply-template '[x] '(+ x x) '[2])\n         ;=> (+ 2 2)\n```\n\n[Source](https://github.com/clojure/clojure/blob/c4c0740a0696bc95b2184c0fef55ed7c3bb097f6/src/clj/clojure/template.clj#L30)  \n\n## do-template\n\n```\nUsage: (do-template argv expr & values)\n```\n\n```\nRepeatedly copies expr (in a do block) for each group of arguments\nin values.  values are automatically partitioned by the number of\narguments in argv, an argument vector as in defn.\n\nExample: (macroexpand '(do-template [x y] (+ y x) 2 4 3 5))\n         ;=> (do (+ 4 2) (+ 5 3))\n```\n\n[Source](https://github.com/clojure/clojure/blob/c4c0740a0696bc95b2184c0fef55ed7c3bb097f6/src/clj/clojure/template.clj#L45)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.template-api.html](https://clojure.github.io/clojure/clojure.template-api.html)"
- name: clojure.test
  id: clojure.test-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.test\n\nby Stuart Sierra, with contributions and suggestions by Chas Emerick, Allen Rohner, and Stuart Halloway  \n  \nFull namespace name: clojure.test\n\n## Overview\n\n```\nA unit testing framework.\n\nASSERTIONS\n\nThe core of the library is the \"is\" macro, which lets you make\nassertions of any arbitrary expression:\n\n(is (= 4 (+ 2 2)))\n(is (instance? Integer 256))\n(is (.startsWith \"abcde\" \"ab\"))\n\nYou can type an \"is\" expression directly at the REPL, which will\nprint a message if it fails.\n\n    user> (is (= 5 (+ 2 2)))\n\n    FAIL in  (:1)\n    expected: (= 5 (+ 2 2))\n      actual: (not (= 5 4))\n    false\n\nThe \"expected:\" line shows you the original expression, and the\n\"actual:\" shows you what actually happened.  In this case, it\nshows that (+ 2 2) returned 4, which is not = to 5.  Finally, the\n\"false\" on the last line is the value returned from the\nexpression.  The \"is\" macro always returns the result of the\ninner expression.\n\nThere are two special assertions for testing exceptions.  The\n\"(is (thrown? c ...))\" form tests if an exception of class c is\nthrown:\n\n(is (thrown? ArithmeticException (/ 1 0))) \n\n\"(is (thrown-with-msg? c re ...))\" does the same thing and also\ntests that the message on the exception matches the regular\nexpression re:\n\n(is (thrown-with-msg? ArithmeticException #\"Divide by zero\"\n                      (/ 1 0)))\n\nDOCUMENTING TESTS\n\n\"is\" takes an optional second argument, a string describing the\nassertion.  This message will be included in the error report.\n\n(is (= 5 (+ 2 2)) \"Crazy arithmetic\")\n\nIn addition, you can document groups of assertions with the\n\"testing\" macro, which takes a string followed by any number of\nassertions.  The string will be included in failure reports.\nCalls to \"testing\" may be nested, and all of the strings will be\njoined together with spaces in the final report, in a style\nsimilar to RSpec <http://rspec.info/>\n\n(testing \"Arithmetic\"\n  (testing \"with positive integers\"\n    (is (= 4 (+ 2 2)))\n    (is (= 7 (+ 3 4))))\n  (testing \"with negative integers\"\n    (is (= -4 (+ -2 -2)))\n    (is (= -1 (+ 3 -4)))))\n\nNote that, unlike RSpec, the \"testing\" macro may only be used\nINSIDE a \"deftest\" or \"with-test\" form (see below).\n\n\nDEFINING TESTS\n\nThere are two ways to define tests.  The \"with-test\" macro takes\na defn or def form as its first argument, followed by any number\nof assertions.  The tests will be stored as metadata on the\ndefinition.\n\n(with-test\n    (defn my-function [x y]\n      (+ x y))\n  (is (= 4 (my-function 2 2)))\n  (is (= 7 (my-function 3 4))))\n\nAs of Clojure SVN rev. 1221, this does not work with defmacro.\nSee http://code.google.com/p/clojure/issues/detail?id=51\n\nThe other way lets you define tests separately from the rest of\nyour code, even in a different namespace:\n\n(deftest addition\n  (is (= 4 (+ 2 2)))\n  (is (= 7 (+ 3 4))))\n\n(deftest subtraction\n  (is (= 1 (- 4 3)))\n  (is (= 3 (- 7 4))))\n\nThis creates functions named \"addition\" and \"subtraction\", which\ncan be called like any other function.  Therefore, tests can be\ngrouped and composed, in a style similar to the test framework in\nPeter Seibel's \"Practical Common Lisp\"\n<http://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html>\n\n(deftest arithmetic\n  (addition)\n  (subtraction))\n\nThe names of the nested tests will be joined in a list, like\n\"(arithmetic addition)\", in failure reports.  You can use nested\ntests to set up a context shared by several tests.\n\n\nRUNNING TESTS\n\nRun tests with the function \"(run-tests namespaces...)\":\n\n(run-tests 'your.namespace 'some.other.namespace)\n\nIf you don't specify any namespaces, the current namespace is\nused.  To run all tests in all namespaces, use \"(run-all-tests)\".\n\nBy default, these functions will search for all tests defined in\na namespace and run them in an undefined order.  However, if you\nare composing tests, as in the \"arithmetic\" example above, you\nprobably do not want the \"addition\" and \"subtraction\" tests run\nseparately.  In that case, you must define a special function\nnamed \"test-ns-hook\" that runs your tests in the correct order:\n\n(defn test-ns-hook []\n  (arithmetic))\n\nNote: test-ns-hook prevents execution of fixtures (see below).\n\n\nOMITTING TESTS FROM PRODUCTION CODE\n\nYou can bind the variable \"*load-tests*\" to false when loading or\ncompiling code in production.  This will prevent any tests from\nbeing created by \"with-test\" or \"deftest\".\n\n\nFIXTURES\n\nFixtures allow you to run code before and after tests, to set up\nthe context in which tests should be run.\n\nA fixture is just a function that calls another function passed as\nan argument.  It looks like this:\n\n(defn my-fixture [f]\n   Perform setup, establish bindings, whatever.\n  (f)  Then call the function we were passed.\n   Tear-down / clean-up code here.\n )\n\nFixtures are attached to namespaces in one of two ways.  \"each\"\nfixtures are run repeatedly, once for each test function created\nwith \"deftest\" or \"with-test\".  \"each\" fixtures are useful for\nestablishing a consistent before/after state for each test, like\nclearing out database tables.\n\n\"each\" fixtures can be attached to the current namespace like this:\n(use-fixtures :each fixture1 fixture2 ...)\nThe fixture1, fixture2 are just functions like the example above.\nThey can also be anonymous functions, like this:\n(use-fixtures :each (fn [f] setup... (f) cleanup...))\n\nThe other kind of fixture, a \"once\" fixture, is only run once,\naround ALL the tests in the namespace.  \"once\" fixtures are useful\nfor tasks that only need to be performed once, like establishing\ndatabase connections, or for time-consuming tasks.\n\nAttach \"once\" fixtures to the current namespace like this:\n(use-fixtures :once fixture1 fixture2 ...)\n\nNote: Fixtures and test-ns-hook are mutually incompatible.  If you\nare using test-ns-hook, fixture functions will *never* be run.\n\n\nSAVING TEST OUTPUT TO A FILE\n\nAll the test reporting functions write to the var *test-out*.  By\ndefault, this is the same as *out*, but you can rebind it to any\nPrintWriter.  For example, it could be a file opened with\nclojure.java.io/writer.\n\n\nEXTENDING TEST-IS (ADVANCED)\n\nYou can extend the behavior of the \"is\" macro by defining new\nmethods for the \"assert-expr\" multimethod.  These methods are\ncalled during expansion of the \"is\" macro, so they should return\nquoted forms to be evaluated.\n\nYou can plug in your own test-reporting framework by rebinding\nthe \"report\" function: (report event)\n\nThe 'event' argument is a map.  It will always have a :type key,\nwhose value will be a keyword signaling the type of event being\nreported.  Standard events with :type value of :pass, :fail, and\n:error are called when an assertion passes, fails, and throws an\nexception, respectively.  In that case, the event will also have\nthe following keys:\n\n  :expected   The form that was expected to be true\n  :actual     A form representing what actually occurred\n  :message    The string message given as an argument to 'is'\n\nThe \"testing\" strings will be a list in \"*testing-contexts*\", and\nthe vars being tested will be a list in \"*testing-vars*\".\n\nYour \"report\" function should wrap any printing calls in the\n\"with-test-out\" macro, which rebinds *out* to the current value\nof *test-out*.\n\nFor additional event types, see the examples in the code.\n```\n\n## Public Variables and Functions\n\n## \\*load-tests\\*\n\n```\nTrue by default.  If set to false, no test functions will\nbe created by deftest, set-test, or with-test.  Use this to omit\ntests when compiling or loading production code.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L245)  \n\n## \\*stack-trace-depth\\*\n\n```\nThe maximum depth of stack traces to print when an Exception\nis thrown during a test.  Defaults to nil, which means print the \ncomplete stack trace.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L252)  \n\n## are\n\n```\nUsage: (are argv expr & args)\n```\n\n```\nChecks multiple assertions with a template expression.\nSee clojure.template/do-template for an explanation of\ntemplates.\n\nExample: (are [x y] (= x y)  \n              2 (+ 1 1)\n              4 (* 2 2))\nExpands to: \n         (do (is (= 2 (+ 1 1)))\n             (is (= 4 (* 2 2))))\n\nNote: This breaks some reporting features, such as line numbers.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L572)  \n\n## assert-any\n\n```\nUsage: (assert-any msg form)\n```\n\n```\nReturns generic assertion code for any test, including macros, Java\nmethod calls, or isolated symbols.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L455)  \n\n## assert-predicate\n\n```\nUsage: (assert-predicate msg form)\n```\n\n```\nReturns generic assertion code for any functional predicate.  The\n'expected' argument to 'report' will contains the original form, the\n'actual' argument will contain the form with all its sub-forms\nevaluated.  If the predicate returns false, the 'actual' form will\nbe wrapped in (not...).\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L436)  \n\n## compose-fixtures\n\n```\nUsage: (compose-fixtures f1 f2)\n```\n\n```\nComposes two fixture functions, creating a new fixture function\nthat combines their behavior.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L689)  \n\n## deftest\n\n```\nUsage: (deftest name & body)\n```\n\n```\nDefines a test function with no arguments.  Test functions may call\nother tests, so tests may be composed.  If you compose tests, you\nshould also define a function named test-ns-hook; run-tests will\ncall test-ns-hook instead of testing all vars.\n\nNote: Actually, the test body goes in the :test metadata on the var,\nand the real function (the value of the var) calls test-var on\nitself.\n\nWhen *load-tests* is false, deftest is ignored.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L622)  \n\n## deftest-\n\n```\nUsage: (deftest- name & body)\n```\n\n```\nLike deftest but creates a private var.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L639)  \n\n## do-report\n\n```\nUsage: (do-report m)\n```\n\n```\nAdd file and line information to a test result and call report.\nIf you are writing a custom assert-expr method, call this function\nto pass test results to report.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L351)  \n\n## file-position\n\n```\nUsage: (file-position n)\n```\n\n```\nReturns a vector [filename line-number] for the nth call up the\nstack.\n\nDeprecated in 1.2: The information needed for test reporting is\nnow on :file and :line keys in the result map.\n```\n\nAdded in Clojure version 1.1\n\nDeprecated since Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L282)  \n\n## function?\n\n```\nUsage: (function? x)\n```\n\n```\nReturns true if argument is a function or a symbol that resolves to\na function (not a macro).\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L424)  \n\n## get-possibly-unbound-var\n\n```\nUsage: (get-possibly-unbound-var v)\n```\n\n```\nLike var-get but returns nil if the var is unbound.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L416)  \n\n## inc-report-counter\n\n```\nUsage: (inc-report-counter name)\n```\n\n```\nIncrements the named counter in *report-counters*, a ref to a map.\nDoes nothing if *report-counters* is nil.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L314)  \n\n## is\n\n```\nUsage: (is form)\n       (is form msg)\n```\n\n```\nGeneric assertion macro.  'form' is any predicate test.\n'msg' is an optional message to attach to the assertion.\n\nExample: (is (= 4 (+ 2 2)) \"Two plus two should be 4\")\n\nSpecial forms:\n\n(is (thrown? c body)) checks that an instance of c is thrown from\nbody, fails if not; then returns the thing thrown.\n\n(is (thrown-with-msg? c re body)) checks that an instance of c is\nthrown AND that the message on the exception matches (with\nre-find) the regular expression re.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L554)  \n\n## join-fixtures\n\n```\nUsage: (join-fixtures fixtures)\n```\n\n```\nComposes a collection of fixtures, in order.  Always returns a valid\nfixture function, even if the collection is empty.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L696)  \n\n## report\n\n```\nNo usage documentation available\n```\n\n```\nGeneric reporting function, may be overridden to plug in\ndifferent report formats (e.g., TAP, JUnit).  Assertions such as\n'is' call 'report' to indicate results.  The argument given to\n'report' will be a map with a :type key.  See the documentation at\nthe top of test_is.clj for more information on the types of\narguments for 'report'.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L324)  \n\n## run-all-tests\n\n```\nUsage: (run-all-tests)\n       (run-all-tests re)\n```\n\n```\nRuns all tests in all namespaces; prints results.\nOptional argument is a regular expression; only namespaces with\nnames matching the regular expression (with re-matches) will be\ntested.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L780)  \n\n## run-test\n\n```\nUsage: (run-test test-symbol)\n```\n\n```\nRuns a single test.\n\nBecause the intent is to run a single test, there is no check for the namespace test-ns-hook.\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L813)  \n\n## run-test-var\n\n```\nUsage: (run-test-var v)\n```\n\n```\nRuns the tests for a single Var, with fixtures executed around the test, and summary output after.\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L797)  \n\n## run-tests\n\n```\nUsage: (run-tests)\n       (run-tests & namespaces)\n```\n\n```\nRuns all tests in the given namespaces; prints results.\nDefaults to current namespace if none given.  Returns a map\nsummarizing test results.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L768)  \n\n## set-test\n\n```\nUsage: (set-test name & body)\n```\n\n```\nExperimental.\nSets :test metadata of the named var to a fn with the given body.\nThe var must already exist.  Does not modify the value of the var.\n\nWhen *load-tests* is false, set-test is ignored.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L648)  \n\n## successful?\n\n```\nUsage: (successful? summary)\n```\n\n```\nReturns true if the given test summary indicates all tests\nwere successful, false otherwise.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L789)  \n\n## test-all-vars\n\n```\nUsage: (test-all-vars ns)\n```\n\n```\nCalls test-vars on every var interned in the namespace, with fixtures.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L737)  \n\n## test-ns\n\n```\nUsage: (test-ns ns)\n```\n\n```\nIf the namespace defines a function named test-ns-hook, calls that.\nOtherwise, calls test-all-vars on the namespace.  'ns' is a\nnamespace object or a symbol.\n\nInternally binds *report-counters* to a ref initialized to\n*initial-report-counters*.  Returns the final, dereferenced state of\n*report-counters*.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L743)  \n\n## test-var\n\n```\nUsage: (test-var v)\n```\n\n```\nIf v has a function in its :test metadata, calls that function,\nwith *testing-vars* bound to (conj *testing-vars* v).\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L708)  \n\n## test-vars\n\n```\nUsage: (test-vars vars)\n```\n\n```\nGroups vars by their namespace and runs test-var on them with\nappropriate fixtures applied.\n```\n\nAdded in Clojure version 1.6\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L723)  \n\n## testing\n\n```\nUsage: (testing string & body)\n```\n\n```\nAdds a new string to the list of testing contexts.  May be nested,\nbut must occur inside a test function (deftest).\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L597)  \n\n## testing-contexts-str\n\n```\nUsage: (testing-contexts-str)\n```\n\n```\nReturns a string representation of the current test context. Joins\nstrings in *testing-contexts* with spaces.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L307)  \n\n## testing-vars-str\n\n```\nUsage: (testing-vars-str m)\n```\n\n```\nReturns a string representation of the current test.  Renders names\nin *testing-vars* as a list, then the source file and line of\ncurrent assertion.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L294)  \n\n## try-expr\n\n```\nUsage: (try-expr msg form)\n```\n\n```\nUsed by the 'is' macro to catch unexpected exceptions.\nYou don't call this.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L538)  \n\n## use-fixtures\n\n```\nNo usage documentation available\n```\n\n```\nWrap test runs in a fixture function to perform setup and\nteardown. Using a fixture-type of :each wraps every test\nindividually, while :once wraps the whole run in a single function.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L670)  \n\n## with-test\n\n```\nUsage: (with-test definition & body)\n```\n\n```\nTakes any definition form (that returns a Var) as the first argument.\nRemaining body goes in the :test metadata function for that Var.\n\nWhen *load-tests* is false, only evaluates the definition, ignoring\nthe tests.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L609)  \n\n## with-test-out\n\n```\nUsage: (with-test-out & body)\n```\n\n```\nRuns body with *out* bound to the value of *test-out*.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L273)  \n\n## clojure.test.junit\n\n```\nclojure.test extension for JUnit-compatible XML output.\n\nJUnit (http://junit.org/) is the most popular unit-testing library\nfor Java.  As such, tool support for JUnit output formats is\ncommon.  By producing compatible output from tests, this tool\nsupport can be exploited.\n\nTo use, wrap any calls to clojure.test/run-tests in the\nwith-junit-output macro, like this:\n\n  (use 'clojure.test)\n  (use 'clojure.test.junit)\n\n  (with-junit-output\n    (run-tests 'my.cool.library))\n\nTo write the output to a file, rebind clojure.test/*test-out* to\nyour own PrintWriter (perhaps opened using\nclojure.java.io/writer).\n```\n\n## Public Variables and Functions\n\n## with-junit-output\n\n```\nUsage: (with-junit-output & body)\n```\n\n```\nExecute body with modified test-is reporting functions that write\nJUnit-compatible XML output.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/d9f3f83182e146525a78cf638f0613487d7e18c6/src/clj/clojure/test/junit.clj#L182)  \n\n## clojure.test.tap\n\n```\nclojure.test extensions for the Test Anything Protocol (TAP)\n\nTAP is a simple text-based syntax for reporting test results.  TAP\nwas originally developed for Perl, and now has implementations in\nseveral languages.  For more information on TAP, see\nhttp://testanything.org/ and\nhttp://search.cpan.org/~petdance/TAP-1.0.0/TAP.pm\n\nTo use this library, wrap any calls to\nclojure.test/run-tests in the with-tap-output macro,\nlike this:\n\n  (use 'clojure.test)\n  (use 'clojure.test.tap)\n\n  (with-tap-output\n   (run-tests 'my.cool.library))\n```\n\n## Public Variables and Functions\n\n## print-tap-diagnostic\n\n```\nUsage: (print-tap-diagnostic data)\n```\n\n```\nPrints a TAP diagnostic line.  data is a (possibly multi-line)\nstring.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L51)  \n\n## print-tap-fail\n\n```\nUsage: (print-tap-fail msg)\n```\n\n```\nPrints a TAP 'not ok' line.  msg is a string, with no line breaks\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L65)  \n\n## print-tap-pass\n\n```\nUsage: (print-tap-pass msg)\n```\n\n```\nPrints a TAP 'ok' line.  msg is a string, with no line breaks\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L59)  \n\n## print-tap-plan\n\n```\nUsage: (print-tap-plan n)\n```\n\n```\nPrints a TAP plan line like '1..n'.  n is the number of tests\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L45)  \n\n## with-tap-output\n\n```\nUsage: (with-tap-output & body)\n```\n\n```\nExecute body with modified test reporting functions that produce\nTAP output\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L117)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.test-api.html](https://clojure.github.io/clojure/clojure.test-api.html)"
- name: clojure.walk
  id: clojure.walk-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.walk\n\nby Stuart Sierra  \n  \nFull namespace name: clojure.walk\n\n## Overview\n\n```\nThis file defines a generic tree walker for Clojure data\nstructures.  It takes any data structure (list, vector, map, set,\nseq), calls a function on every element, and uses the return value\nof the function in place of the original.  This makes it fairly\neasy to write recursive search-and-replace functions, as shown in\nthe examples.\n\nNote: \"walk\" supports all Clojure data structures EXCEPT maps\ncreated with sorted-map-by.  There is no (obvious) way to retrieve\nthe sorting function.\n```\n\n## Public Variables and Functions\n\n## keywordize-keys\n\n```\nUsage: (keywordize-keys m)\n```\n\n```\nRecursively transforms all map keys from strings to keywords.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L94)  \n\n## macroexpand-all\n\n```\nUsage: (macroexpand-all form)\n```\n\n```\nRecursively performs all possible macroexpansions in form.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L126)  \n\n## postwalk\n\n```\nUsage: (postwalk f form)\n```\n\n```\nPerforms a depth-first, post-order traversal of form.  Calls f on\neach sub-form, uses f's return value in place of the original.\nRecognizes all Clojure data structures. Consumes seqs as with doall.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L53)  \n\n## postwalk-demo\n\n```\nUsage: (postwalk-demo form)\n```\n\n```\nDemonstrates the behavior of postwalk by printing each form as it is\nwalked.  Returns form.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L80)  \n\n## postwalk-replace\n\n```\nUsage: (postwalk-replace smap form)\n```\n\n```\nRecursively transforms form by replacing keys in smap with their\nvalues.  Like clojure/replace but works on any data structure.  Does\nreplacement at the leaves of the tree first.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L118)  \n\n## prewalk\n\n```\nUsage: (prewalk f form)\n```\n\n```\nLike postwalk, but does pre-order traversal.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L61)  \n\n## prewalk-demo\n\n```\nUsage: (prewalk-demo form)\n```\n\n```\nDemonstrates the behavior of prewalk by printing each form as it is\nwalked.  Returns form.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L87)  \n\n## prewalk-replace\n\n```\nUsage: (prewalk-replace smap form)\n```\n\n```\nRecursively transforms form by replacing keys in smap with their\nvalues.  Like clojure/replace but works on any data structure.  Does\nreplacement at the root of the tree first.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L110)  \n\n## stringify-keys\n\n```\nUsage: (stringify-keys m)\n```\n\n```\nRecursively transforms all map keys from keywords to strings.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L102)  \n\n## walk\n\n```\nUsage: (walk inner outer form)\n```\n\n```\nTraverses form, an arbitrary data structure.  inner and outer are\nfunctions.  Applies inner to each element of form, building up a\ndata structure of the same type, then applies outer to the result.\nRecognizes all Clojure data structures. Consumes seqs as with doall.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L35)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.walk-api.html](https://clojure.github.io/clojure/clojure.walk-api.html)"
- name: clojure.xml
  id: clojure.xml-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.xml\n\nby Rich Hickey  \n  \nFull namespace name: clojure.xml\n\n## Overview\n\n```\nXML reading/writing.\n```\n\n## Public Variables and Functions\n\n## disable-external-entities\n\n```\nUsage: (disable-external-entities parser)\n```\n\n```\nModifies a SAXParser to disable external entity resolution to prevent XXE attacks\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/4a4a6e7717d411679820c4a3ce735a77aef45cc3/src/clj/clojure/xml.clj#L81)  \n\n## parse\n\n```\nUsage: (parse s)\n       (parse s startparse)\n```\n\n```\nParses and loads the source s, which can be a File, InputStream or\nString naming a URI. Returns a tree of the xml/element struct-map,\nwhich has the keys :tag, :attrs, and :content. and accessor fns tag,\nattrs, and content. Other parsers can be supplied by passing\nstartparse, a fn taking a source and a ContentHandler and returning\na parser.\n\nPrior to 1.11, used startparse-sax by default. As of 1.11, uses\nstartparse-sax-safe, which disables XXE (XML External Entity)\nprocessing. Pass startparse-sax to revert to prior behavior.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/4a4a6e7717d411679820c4a3ce735a77aef45cc3/src/clj/clojure/xml.clj#L106)  \n\n## sax-parser\n\n```\nUsage: (sax-parser)\n```\n\n```\nCreate a new SAXParser\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/4a4a6e7717d411679820c4a3ce735a77aef45cc3/src/clj/clojure/xml.clj#L75)  \n\n## startparse-sax\n\n```\nUsage: (startparse-sax s ch)\n```\n\n```\nA startparse function suitable for use with clojure.xml/parse.\nNote that this function is open to XXE entity attacks, see startparse-sax-safe.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/4a4a6e7717d411679820c4a3ce735a77aef45cc3/src/clj/clojure/xml.clj#L92)  \n\n## startparse-sax-safe\n\n```\nUsage: (startparse-sax-safe s ch)\n```\n\n```\nA startparse function suitable for use with clojure.xml/parse.\nExternal entity resolution is disabled to prevent XXE entity attacks.\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/4a4a6e7717d411679820c4a3ce735a77aef45cc3/src/clj/clojure/xml.clj#L99)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.xml-api.html](https://clojure.github.io/clojure/clojure.xml-api.html)"
- name: clojure.zip
  id: clojure.zip-api
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  description: "# clojure.zip\n\nby Rich Hickey  \n  \nFull namespace name: clojure.zip\n\n## Overview\n\n```\nFunctional hierarchical zipper, with navigation, editing,\nand enumeration.  See Huet\n```\n\n## Public Variables and Functions\n\n## append-child\n\n```\nUsage: (append-child loc item)\n```\n\n```\nInserts the item as the rightmost child of the node at this loc,\nwithout moving\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L223)  \n\n## branch?\n\n```\nUsage: (branch? loc)\n```\n\n```\nReturns true if the node at loc is a branch\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L69)  \n\n## children\n\n```\nUsage: (children loc)\n```\n\n```\nReturns a seq of the children of node at loc, which must be a branch\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L75)  \n\n## down\n\n```\nUsage: (down loc)\n```\n\n```\nReturns the loc of the leftmost child of the node at this loc, or\nnil if no children\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L109)  \n\n## edit\n\n```\nUsage: (edit loc f & args)\n```\n\n```\nReplaces the node at this loc with the value of (f node args)\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L210)  \n\n## end?\n\n```\nUsage: (end? loc)\n```\n\n```\nReturns true if loc represents the end of a depth-first walk\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L258)  \n\n## insert-child\n\n```\nUsage: (insert-child loc item)\n```\n\n```\nInserts the item as the leftmost child of the node at this loc,\nwithout moving\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L216)  \n\n## insert-left\n\n```\nUsage: (insert-left loc item)\n```\n\n```\nInserts the item as the left sibling of the node at this loc,\nwithout moving\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L183)  \n\n## insert-right\n\n```\nUsage: (insert-right loc item)\n```\n\n```\nInserts the item as the right sibling of the node at this loc,\nwithout moving\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L193)  \n\n## left\n\n```\nUsage: (left loc)\n```\n\n```\nReturns the loc of the left sibling of the node at this loc, or nil\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L166)  \n\n## leftmost\n\n```\nUsage: (leftmost loc)\n```\n\n```\nReturns the loc of the leftmost sibling of the node at this loc, or self\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L174)  \n\n## lefts\n\n```\nUsage: (lefts loc)\n```\n\n```\nReturns a seq of the left siblings of this loc\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L96)  \n\n## make-node\n\n```\nUsage: (make-node loc node children)\n```\n\n```\nReturns a new branch node, given an existing node and new\nchildren. The loc is only used to supply the constructor.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L83)  \n\n## next\n\n```\nUsage: (next loc)\n```\n\n```\nMoves to the next loc in the hierarchy, depth-first. When reaching\nthe end, returns a distinguished loc detectable via end?. If already\nat the end, stays there.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L230)  \n\n## node\n\n```\nUsage: (node loc)\n```\n\n```\nReturns the node at loc\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L64)  \n\n## path\n\n```\nUsage: (path loc)\n```\n\n```\nReturns a seq of nodes leading to this loc\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L90)  \n\n## prev\n\n```\nUsage: (prev loc)\n```\n\n```\nMoves to the previous loc in the hierarchy, depth-first. If already\nat the root, returns nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L246)  \n\n## remove\n\n```\nUsage: (remove loc)\n```\n\n```\nRemoves the node at loc, returning the loc that would have preceded\nit in a depth-first walk.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L264)  \n\n## replace\n\n```\nUsage: (replace loc node)\n```\n\n```\nReplaces the node at this loc, without moving\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L203)  \n\n## right\n\n```\nUsage: (right loc)\n```\n\n```\nReturns the loc of the right sibling of the node at this loc, or nil\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L149)  \n\n## rightmost\n\n```\nUsage: (rightmost loc)\n```\n\n```\nReturns the loc of the rightmost sibling of the node at this loc, or self\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L157)  \n\n## rights\n\n```\nUsage: (rights loc)\n```\n\n```\nReturns a seq of the right siblings of this loc\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L102)  \n\n## root\n\n```\nUsage: (root loc)\n```\n\n```\nzips all the way up and returns the root node, reflecting any\nchanges.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L137)  \n\n## seq-zip\n\n```\nUsage: (seq-zip root)\n```\n\n```\nReturns a zipper for nested sequences, given a root sequence\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L35)  \n\n## up\n\n```\nUsage: (up loc)\n```\n\n```\nReturns the loc of the parent of the node at this loc, or nil if at\nthe top\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L123)  \n\n## vector-zip\n\n```\nUsage: (vector-zip root)\n```\n\n```\nReturns a zipper for nested vectors, given a root vector\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L44)  \n\n## xml-zip\n\n```\nUsage: (xml-zip root)\n```\n\n```\nReturns a zipper for xml elements (as from xml/parse),\ngiven a root element\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L53)  \n\n## zipper\n\n```\nUsage: (zipper branch? children make-node root)\n```\n\n```\nCreates a new zipper structure. \n\nbranch? is a fn that, given a node, returns true if can have\nchildren, even if it currently doesn't.\n\nchildren is a fn that, given a branch node, returns a seq of its\nchildren.\n\nmake-node is a fn that, given an existing node and a seq of\nchildren, returns a new branch node with the supplied children.\nroot is the root node.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L18)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.zip-api.html](https://clojure.github.io/clojure/clojure.zip-api.html)"
- name: code-dispatch
  id: clojure.pprint-api#clojure.pprint/code-dispatch
  summary: null
  belongs_to: clojure.pprint
  description: |-
    ## code-dispatch

    ```
    Usage: (code-dispatch object)
    ```

    ```
    The pretty print dispatch function for pretty printing Clojure code.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/af9f2ed34326a5f590f245155c73958e7a2dc17f/src/clj/clojure/pprint/dispatch.clj#L476)
- name: Coercions
  id: clojure.java.io-api#clojure.java.io/Coercions
  summary: null
  belongs_to: clojure.java.io
  description: "## Coercions\n\n```\nCoerce between various 'resource-namish' things.\n```\n\nKnown implementations: java.io.File, java.lang.String, java.net.URI, java.net.URL, nil  \n\n### as-file\n\n```\nUsage: (as-file x)\n```\n\n```\nCoerce argument to a file.\n```\n\nAdded in Clojure version 1.2\n\n### as-url\n\n```\nUsage: (as-url x)\n```\n\n```\nCoerce argument to a URL.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L35)"
- name: coll?
  id: clojure.core-api#clojure.core/coll?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## coll?

    ```
    Usage: (coll? x)
    ```

    ```
    Returns true if x implements IPersistentCollection
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6248)
- name: CollReduce
  id: clojure.core-api#clojure.core.protocols/CollReduce
  summary: null
  belongs_to: clojure.core
  description: "## CollReduce\n\n```\nProtocol for collection types that can implement reduce faster than\nfirst/next recursion. Called by clojure.core/reduce. Baseline\nimplementation defined in terms of Iterable.\n```\n\nKnown implementations: [clojure.core.reducers.Cat](clojure.core.reducers-api#clojure.core.reducers/Cat), clojure.lang.APersistentMap$KeySeq, clojure.lang.APersistentMap$ValSeq, clojure.lang.ASeq, clojure.lang.IReduceInit, clojure.lang.LazySeq, clojure.lang.PersistentVector, java.lang.Iterable, nil, Object  \n\n### coll-reduce\n\n```\nUsage: (coll-reduce coll f)\n       (coll-reduce coll f val)\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L13)"
- name: comment
  id: clojure.core-api#clojure.core/comment
  summary: null
  belongs_to: clojure.core
  description: |-
    ## comment

    ```
    Usage: (comment & body)
    ```

    ```
    Ignores body, yields nil
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4735)
- name: commute
  id: clojure.core-api#clojure.core/commute
  summary: null
  belongs_to: clojure.core
  description: |-
    ## commute

    ```
    Usage: (commute ref fun & args)
    ```

    ```
    Must be called in a transaction. Sets the in-transaction-value of
    ref to:

    (apply fun in-transaction-value-of-ref args)

    and returns the in-transaction-value of ref.

    At the commit point of the transaction, sets the value of ref to be:

    (apply fun most-recently-committed-value-of-ref args)

    Thus fun should be commutative, or, failing that, you must accept
    last-one-in-wins behavior.  commute allows for more concurrency than
    ref-set.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2439)
- name: comp
  id: clojure.core-api#clojure.core/comp
  summary: null
  belongs_to: clojure.core
  description: |-
    ## comp

    ```
    Usage: (comp)
           (comp f)
           (comp f g)
           (comp f g & fs)
    ```

    ```
    Takes a set of functions and returns a fn that is the composition
    of those fns.  The returned fn takes a variable number of args,
    applies the rightmost of fns to the args, the next
    fn (right-to-left) to the result, etc.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2574)
- name: comparator
  id: clojure.core-api#clojure.core/comparator
  summary: null
  belongs_to: clojure.core
  description: |-
    ## comparator

    ```
    Usage: (comparator pred)
    ```

    ```
    Returns an implementation of java.util.Comparator based upon pred.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3095)
- name: compare
  id: clojure.core-api#clojure.core/compare
  summary: null
  belongs_to: clojure.core
  description: |-
    ## compare

    ```
    Usage: (compare x y)
    ```

    ```
    Comparator. Returns a negative number, zero, or a positive number
    when x is logically 'less than', 'equal to', or 'greater than'
    y. Same as Java x.compareTo(y) except it also works for nil, and
    compares numbers and collections in a type-independent manner. x
    must implement Comparable
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L833)
- name: compare-and-set!
  id: clojure.core-api#clojure.core/compare-and-set!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## compare-and-set!

    ```
    Usage: (compare-and-set! atom oldval newval)
    ```

    ```
    Atomically sets the value of atom to newval if and only if the
    current value of the atom is identical to oldval. Returns true if
    set happened, else false
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2385)
- name: compile
  id: clojure.core-api#clojure.core/compile
  summary: null
  belongs_to: clojure.core
  description: |-
    ## compile

    ```
    Usage: (compile lib)
    ```

    ```
    Compiles the namespace named by the symbol lib into a set of
    classfiles. The source for the lib must be in a proper
    classpath-relative directory. The output files will go into the
    directory specified by *compile-path*, and that directory too must
    be in the classpath.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6163)
- name: complement
  id: clojure.core-api#clojure.core/complement
  summary: null
  belongs_to: clojure.core
  description: |-
    ## complement

    ```
    Usage: (complement f)
    ```

    ```
    Takes a fn f and returns a fn that takes the same arguments as f,
    has the same effects, if any, and returns the opposite truth value.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1447)
- name: completing
  id: clojure.core-api#clojure.core/completing
  summary: null
  belongs_to: clojure.core
  description: |-
    ## completing

    ```
    Usage: (completing f)
           (completing f cf)
    ```

    ```
    Takes a reducing function f of 2 args and returns a fn suitable for
    transduce by adding an arity-1 signature that calls cf (default -
    identity) on the result argument.
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6921)
- name: compose-fixtures
  id: clojure.test-api#clojure.test/compose-fixtures
  summary: null
  belongs_to: clojure.test
  description: |-
    ## compose-fixtures

    ```
    Usage: (compose-fixtures f1 f2)
    ```

    ```
    Composes two fixture functions, creating a new fixture function
    that combines their behavior.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L689)
- name: concat
  id: clojure.core-api#clojure.core/concat
  summary: null
  belongs_to: clojure.core
  description: |-
    ## concat

    ```
    Usage: (concat)
           (concat x)
           (concat x y)
           (concat x y & zs)
    ```

    ```
    Returns a lazy seq representing the concatenation of the elements in the supplied colls.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L720)
- name: cond
  id: clojure.core-api#clojure.core/cond
  summary: null
  belongs_to: clojure.core
  description: |-
    ## cond

    ```
    Usage: (cond & clauses)
    ```

    ```
    Takes a set of test/expr pairs. It evaluates each test one at a
    time.  If a test returns logical true, cond evaluates and returns
    the value of the corresponding expr and doesn't evaluate any of the
    other tests or exprs. (cond) returns nil.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L576)
- name: cond->
  id: clojure.core-api#clojure.core/cond->
  summary: null
  belongs_to: clojure.core
  description: |-
    ## cond-\>

    ```
    Usage: (cond-> expr & clauses)
    ```

    ```
    Takes an expression and a set of test/form pairs. Threads expr (via ->)
    through each form for which the corresponding test
    expression is true. Note that, unlike cond branching, cond-> threading does
    not short circuit after the first true test expression.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7606)
- name: cond->>
  id: clojure.core-api#clojure.core/cond->>
  summary: null
  belongs_to: clojure.core
  description: |-
    ## cond-\>\>

    ```
    Usage: (cond->> expr & clauses)
    ```

    ```
    Takes an expression and a set of test/form pairs. Threads expr (via ->>)
    through each form for which the corresponding test expression
    is true.  Note that, unlike cond branching, cond->> threading does not short circuit
    after the first true test expression.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7623)
- name: condp
  id: clojure.core-api#clojure.core/condp
  summary: null
  belongs_to: clojure.core
  description: |-
    ## condp

    ```
    Usage: (condp pred expr & clauses)
    ```

    ```
    Takes a binary predicate, an expression, and a set of clauses.
    Each clause can take the form of either:

    test-expr result-expr

    test-expr :>> result-fn

    Note :>> is an ordinary keyword.

    For each clause, (pred test-expr expr) is evaluated. If it returns
    logical true, the clause is a match. If a binary clause matches, the
    result-expr is returned, if a ternary clause matches, its result-fn,
    which must be a unary function, is called with the result of the
    predicate as its argument, the result of that call being the return
    value of condp. A single default expression can follow the clauses,
    and its value will be returned if no clause matches. If no default
    expression is provided and no clause matches, an
    IllegalArgumentException is thrown.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6394)
- name: conj
  id: clojure.core-api#clojure.core/conj
  summary: null
  belongs_to: clojure.core
  description: |-
    ## conj

    ```
    Usage: (conj)
           (conj coll)
           (conj coll x)
           (conj coll x & xs)
    ```

    ```
    conj[oin]. Returns a new collection with the xs
    'added'. (conj nil item) returns (item).
    (conj coll) returns coll. (conj) returns [].
    The 'addition' may happen at different 'places' depending
    on the concrete type.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L75)
- name: conj!
  id: clojure.core-api#clojure.core/conj!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## conj!

    ```
    Usage: (conj!)
           (conj! coll)
           (conj! coll x)
    ```

    ```
    Adds x to the transient collection, and return coll. The 'addition'
    may happen at different 'places' depending on the concrete type.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3359)
- name: cons
  id: clojure.core-api#clojure.core/cons
  summary: null
  belongs_to: clojure.core
  description: |-
    ## cons

    ```
    Usage: (cons x seq)
    ```

    ```
    Returns a new seq where x is the first element and seq is
    the rest.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L22)
- name: constantly
  id: clojure.core-api#clojure.core/constantly
  summary: null
  belongs_to: clojure.core
  description: |-
    ## constantly

    ```
    Usage: (constantly x)
    ```

    ```
    Returns a function that takes any number of arguments and returns x.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1459)
- name: construct-proxy
  id: clojure.core-api#clojure.core/construct-proxy
  summary: null
  belongs_to: clojure.core
  description: |-
    ## construct-proxy

    ```
    Usage: (construct-proxy c & ctor-args)
    ```

    ```
    Takes a proxy class and any arguments for its superclass ctor and
    creates and returns an instance of the proxy.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L295)
- name: Constructor
  id: clojure.reflect-api#clojure.reflect/Constructor
  summary: null
  belongs_to: clojure.reflect
  description: "## Constructor\n\nFields: \\[name declaring-class parameter-types exception-types flags\\]  \nProtocols:  \nInterfaces: clojure.lang.IHashEq, clojure.lang.IKeywordLookup, clojure.lang.ILookup, clojure.lang.IObj, clojure.lang.IPersistentMap, java.io.Serializable, java.util.Map"
- name: contains?
  id: clojure.core-api#clojure.core/contains?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## contains?

    ```
    Usage: (contains? coll key)
    ```

    ```
    Returns true if key is present in the given collection, otherwise
    returns false.  Note that for numerically indexed collections like
    vectors and Java arrays, this tests if the numeric key is within the
    range of indexes. 'contains?' operates constant or logarithmic time;
    it will not perform a linear search for a value.  See also 'some'.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1498)
- name: copy
  id: clojure.java.io-api#clojure.java.io/copy
  summary: null
  belongs_to: clojure.java.io
  description: "## copy\n\n```\nUsage: (copy input output & opts)\n```\n\n```\nCopies input to output.  Returns nil or throws IOException.\nInput may be an InputStream, Reader, File, byte[], char[], or String.\nOutput may be an OutputStream, Writer, or File.\n\nOptions are key/value pairs and may be one of\n\n  :buffer-size  buffer size to use, default is 1024.\n  :encoding     encoding to use if converting between\n                byte and char streams.   \n\nDoes not close any streams except those it opens itself \n(on a File).\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L391)"
- name: copy-sign
  id: clojure.math-api#clojure.math/copy-sign
  summary: null
  belongs_to: clojure.math
  description: |-
    ## copy-sign

    ```
    Usage: (copy-sign magnitude sign)
    ```

    ```
    Returns a double with the magnitude of the first argument and the sign of
    the second.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#copySign-double-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L448)
- name: cos
  id: clojure.math-api#clojure.math/cos
  summary: null
  belongs_to: clojure.math
  description: |-
    ## cos

    ```
    Usage: (cos a)
    ```

    ```
    Returns the cosine of an angle.
    If a is ##NaN, ##-Inf, ##Inf => ##NaN
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cos-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L53)
- name: cosh
  id: clojure.math-api#clojure.math/cosh
  summary: null
  belongs_to: clojure.math
  description: |-
    ## cosh

    ```
    Usage: (cosh x)
    ```

    ```
    Returns the hyperbolic cosine of x, (e^x + e^-x)/2.
    If x is ##NaN => ##NaN
    If x is ##Inf or ##-Inf => ##Inf
    If x is zero => 1.0
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cosh-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L385)
- name: count
  id: clojure.core-api#clojure.core/count
  summary: null
  belongs_to: clojure.core
  description: |-
    ## count

    ```
    Usage: (count coll)
    ```

    ```
    Returns the number of items in the collection. (count nil) returns
    0.  Also works on strings, arrays, and Java Collections and Maps
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L876)
- name: counted?
  id: clojure.core-api#clojure.core/counted?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## counted?

    ```
    Usage: (counted? coll)
    ```

    ```
    Returns true if coll implements count in constant time
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6297)
- name: create-ns
  id: clojure.core-api#clojure.core/create-ns
  summary: null
  belongs_to: clojure.core
  description: |-
    ## create-ns

    ```
    Usage: (create-ns sym)
    ```

    ```
    Create a new namespace named by the symbol if one doesn't already
    exist, returns it or the already-existing namespace of the same
    name.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4133)
- name: create-struct
  id: clojure.core-api#clojure.core/create-struct
  summary: null
  belongs_to: clojure.core
  description: |-
    ## create-struct

    ```
    Usage: (create-struct & keys)
    ```

    ```
    Returns a structure basis object.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4039)
- name: cycle
  id: clojure.core-api#clojure.core/cycle
  summary: null
  belongs_to: clojure.core
  description: |-
    ## cycle

    ```
    Usage: (cycle coll)
    ```

    ```
    Returns a lazy (infinite!) sequence of repetitions of the items in coll.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2996)
- name: Datafiable
  id: clojure.core-api#clojure.core.protocols/Datafiable
  summary: null
  belongs_to: clojure.core
  description: "## Datafiable\n\nKnown implementations: clojure.lang.IRef, clojure.lang.Namespace, java.lang.Class, java.lang.Throwable, nil, Object  \n\n### datafy\n\n```\nUsage: (datafy o)\n```\n\n```\nreturn a representation of o as data (default identity)\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L182)"
- name: datafy
  id: clojure.datafy-api#clojure.datafy/datafy
  summary: null
  belongs_to: clojure.datafy
  description: |-
    ## datafy

    ```
    Usage: (datafy x)
    ```

    ```
    Attempts to return x as data.
    datafy will return the value of clojure.core.protocols/datafy. If
    the value has been transformed and the result supports
    metadata, :clojure.datafy/obj will be set on the metadata to the
    original value of x, and :clojure.datafy/class to the name of the
    class of x, as a symbol.
    ```

    [Source](https://github.com/clojure/clojure/blob/b70db9639f9acddcabf7f760ea4bb050d6bfaa16/src/clj/clojure/datafy.clj#L15)
- name: dec
  id: clojure.core-api#clojure.core/dec
  summary: null
  belongs_to: clojure.core
  description: |-
    ## dec

    ```
    Usage: (dec x)
    ```

    ```
    Returns a number one less than num. Does not auto-promote
    longs, will throw on overflow. See also: dec'
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1156)
- name: dec'
  id: clojure.core-api#clojure.core/dec'
  summary: null
  belongs_to: clojure.core
  description: |-
    ## dec'

    ```
    Usage: (dec' x)
    ```

    ```
    Returns a number one less than num. Supports arbitrary precision.
    See also: dec
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1149)
- name: decimal?
  id: clojure.core-api#clojure.core/decimal?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## decimal?

    ```
    Usage: (decimal? n)
    ```

    ```
    Returns true if n is a BigDecimal
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3599)
- name: declare
  id: clojure.core-api#clojure.core/declare
  summary: null
  belongs_to: clojure.core
  description: |-
    ## declare

    ```
    Usage: (declare & names)
    ```

    ```
    defs the supplied var names with no bindings, useful for making forward declarations.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2793)
- name: decrement-exact
  id: clojure.math-api#clojure.math/decrement-exact
  summary: null
  belongs_to: clojure.math
  description: |-
    ## decrement-exact

    ```
    Usage: (decrement-exact a)
    ```

    ```
    Returns a decremented by 1, throws ArithmeticException on overflow.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#decrementExact-long-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L313)
- name: dedupe
  id: clojure.core-api#clojure.core/dedupe
  summary: null
  belongs_to: clojure.core
  description: |-
    ## dedupe

    ```
    Usage: (dedupe)
           (dedupe coll)
    ```

    ```
    Returns a lazy sequence removing consecutive duplicates in coll.
    Returns a transducer when no collection is provided.
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7723)
- name: def
  id: clojure.core-api#clojure.core/def
  summary: null
  belongs_to: clojure.core
  description: |-
    ## def

    ```
    Usage: (def symbol doc-string? init?)
    ```

    ```
    Creates and interns a global var with the name
    of symbol in the current namespace (*ns*) or locates such a var if
    it already exists.  If init is supplied, it is evaluated, and the
    root binding of the var is set to the resulting value.  If init is
    not supplied, the root binding of the var is unaffected.

    Please see https://clojure.org/reference/special_forms#def
    ```

    Added in Clojure version 1.0
- name: default-data-readers
  id: clojure.core-api#clojure.core/default-data-readers
  summary: null
  belongs_to: clojure.core
  description: |-
    ## default-data-readers

    ```
    Default map of data reader functions provided by Clojure. May be
    overridden by binding *data-readers*.
    ```

    Added in Clojure version 1.4

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7864)
- name: definline
  id: clojure.core-api#clojure.core/definline
  summary: null
  belongs_to: clojure.core
  description: |-
    ## definline

    ```
    Usage: (definline name & decl)
    ```

    ```
    Experimental - like defmacro, except defines a named function whose
    body is the expansion, calls to which may be expanded inline as if
    it were a macro. Cannot be used with variadic (&) args.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5254)
- name: definterface
  id: clojure.core-api#clojure.core/definterface
  summary: null
  belongs_to: clojure.core
  description: |-
    ## definterface

    ```
    Usage: (definterface name & sigs)
    ```

    ```
    Creates a new Java interface with the given name and method sigs.
    The method return types and parameter types may be specified with type hints,
    defaulting to Object if omitted.

    (definterface MyInterface
      (^int method1 [x])
      (^Bar method2 [^Baz b ^Quux q]))
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L20)
- name: defmacro
  id: clojure.core-api#clojure.core/defmacro
  summary: null
  belongs_to: clojure.core
  description: |-
    ## defmacro

    ```
    Usage: (defmacro name doc-string? attr-map? [params*] body)
           (defmacro name doc-string? attr-map? ([params*] body) + attr-map?)
    ```

    ```
    Like defn, but the resulting function name is declared as a
    macro and will be used as a macro by the compiler when it is
    called.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L446)
- name: defmethod
  id: clojure.core-api#clojure.core/defmethod
  summary: null
  belongs_to: clojure.core
  description: "## defmethod\n\n```\nUsage: (defmethod multifn dispatch-val & fn-tail)\n```\n\n```\nCreates and installs a new method of multimethod associated with dispatch-value. \n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1800)"
- name: defmulti
  id: clojure.core-api#clojure.core/defmulti
  summary: null
  belongs_to: clojure.core
  description: |-
    ## defmulti

    ```
    Usage: (defmulti name docstring? attr-map? dispatch-fn & options)
    ```

    ```
    Creates a new multimethod with the associated dispatch function.
    The docstring and attr-map are optional.

    Options are key-value pairs and may be one of:

    :default

    The default dispatch value, defaults to :default

    :hierarchy

    The value used for hierarchical dispatch (e.g. ::square is-a ::shape)

    Hierarchies are type-like relationships that do not depend upon type
    inheritance. By default Clojure's multimethods dispatch off of a
    global hierarchy map.  However, a hierarchy relationship can be
    created with the derive function used to augment the root ancestor
    created with make-hierarchy.

    Multimethods expect the value of the hierarchy option to be supplied as
    a reference type e.g. a var (i.e. via the Var-quote dispatch macro #'
    or the var special form).
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1742)
- name: defn
  id: clojure.core-api#clojure.core/defn
  summary: null
  belongs_to: clojure.core
  description: |-
    ## defn

    ```
    Usage: (defn name doc-string? attr-map? [params*] prepost-map? body)
           (defn name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?)
    ```

    ```
    Same as (def name (fn [params* ] exprs*)) or (def
    name (fn ([params* ] exprs*)+)) with any doc-string or attrs added
    to the var metadata. prepost-map defines a map with optional keys
    :pre and :post that contain collections of pre or post conditions.
    ```

    ```
    Specs:
      Args: (cat
             :fn-name simple-symbol?
             :docstring (? string?)
             :meta (? map?)
             :fn-tail (alt
                       :arity-1 :clojure.core.specs.alpha/params+body
                       :arity-n (cat
                                 :bodies (+
                                           (spec
                                             :clojure.core.specs.alpha/params+body))
                                 :attr-map (? map?))))
      Ret:  any?
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L285)
- name: defn-
  id: clojure.core-api#clojure.core/defn-
  summary: null
  belongs_to: clojure.core
  description: |-
    ## defn-

    ```
    Usage: (defn- name & decls)
    ```

    ```
    same as defn, yielding non-public def
    ```

    ```
    Specs:
      Args: (cat
             :fn-name simple-symbol?
             :docstring (? string?)
             :meta (? map?)
             :fn-tail (alt
                       :arity-1 :clojure.core.specs.alpha/params+body
                       :arity-n (cat
                                 :bodies (+
                                           (spec
                                             :clojure.core.specs.alpha/params+body))
                                 :attr-map (? map?))))
      Ret:  any?
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4950)
- name: defonce
  id: clojure.core-api#clojure.core/defonce
  summary: null
  belongs_to: clojure.core
  description: |-
    ## defonce

    ```
    Usage: (defonce name expr)
    ```

    ```
    defs name to have the root value of the expr iff the named var has no root value,
    else expr is unevaluated
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5853)
- name: defprotocol
  id: clojure.core-api#clojure.core/defprotocol
  summary: null
  belongs_to: clojure.core
  description: "## defprotocol\n\n```\nUsage: (defprotocol name & opts+sigs)\n```\n\n```\nA protocol is a named set of named methods and their signatures:\n(defprotocol AProtocolName\n\n  ;optional doc string\n  \"A doc string for AProtocol abstraction\"\n\n ;options\n :extend-via-metadata true\n\n;method signatures\n  (bar [this a b] \"bar docs\")\n  (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\nNo implementations are provided. Docs can be specified for the\nprotocol overall and for each method. The above yields a set of\npolymorphic functions and a protocol object. All are\nnamespace-qualified by the ns enclosing the definition The resulting\nfunctions dispatch on the type of their first argument, which is\nrequired and corresponds to the implicit target object ('this' in \nJava parlance). defprotocol is dynamic, has no special compile-time \neffect, and defines no new types or classes. Implementations of \nthe protocol methods can be provided using extend.\n\nWhen :extend-via-metadata is true, values can extend protocols by\nadding metadata where keys are fully-qualified protocol function\nsymbols and values are function implementations. Protocol\nimplementations are checked first for direct definitions (defrecord,\ndeftype, reify), then metadata definitions, then external\nextensions (extend, extend-type, extend-protocol)\n\ndefprotocol will automatically generate a corresponding interface,\nwith the same name as the protocol, i.e. given a protocol:\nmy.ns/Protocol, an interface: my.ns.Protocol. The interface will\nhave methods corresponding to the protocol functions, and the\nprotocol will automatically work with instances of the interface.\n\nNote that you should not use this interface with deftype or\nreify, as they support the protocol directly:\n\n(defprotocol P \n  (foo [this]) \n  (bar-me [this] [this y]))\n\n(deftype Foo [a b c] \n P\n  (foo [this] a)\n  (bar-me [this] b)\n  (bar-me [this y] (+ c y)))\n\n(bar-me (Foo. 1 2 3) 42)\n=> 45\n\n(foo \n  (let [x 42]\n    (reify P \n      (foo [this] 17)\n      (bar-me [this] x)\n      (bar-me [this y] x))))\n=> 17\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L713)"
- name: defrecord
  id: clojure.core-api#clojure.core/defrecord
  summary: null
  belongs_to: clojure.core
  description: |-
    ## defrecord

    ```
    Usage: (defrecord name [& fields] & opts+specs)
    ```

    ```
    (defrecord name [fields*]  options* specs*)

    Options are expressed as sequential keywords and arguments (in any order).

    Supported options:
    :load-ns - if true, importing the record class will cause the
               namespace in which the record was defined to be loaded.
               Defaults to false.

    Each spec consists of a protocol or interface name followed by zero
    or more method bodies:

    protocol-or-interface-or-Object
    (methodName [args*] body)*

    Dynamically generates compiled bytecode for class with the given
    name, in a package with the same name as the current namespace, the
    given fields, and, optionally, methods for protocols and/or
    interfaces.

    The class will have the (immutable) fields named by
    fields, which can have type hints. Protocols/interfaces and methods
    are optional. The only methods that can be supplied are those
    declared in the protocols/interfaces.  Note that method bodies are
    not closures, the local environment includes only the named fields,
    and those fields can be accessed directly.

    Method definitions take the form:

    (methodname [args*] body)

    The argument and return types can be hinted on the arg and
    methodname symbols. If not supplied, they will be inferred, so type
    hints should be reserved for disambiguation.

    Methods should be supplied for all methods of the desired
    protocol(s) and interface(s). You can also define overrides for
    methods of Object. Note that a parameter must be supplied to
    correspond to the target object ('this' in Java parlance). Thus
    methods for interfaces will take one more argument than do the
    interface declarations. Note also that recur calls to the method
    head should *not* pass the target object, it will be supplied
    automatically and can not be substituted.

    In the method bodies, the (unqualified) name can be used to name the
    class (for calls to new, instance? etc).

    The class will have implementations of several (clojure.lang)
    interfaces generated automatically: IObj (metadata support) and
    IPersistentMap, and all of their superinterfaces.

    In addition, defrecord will define type-and-value-based =,
    and will defined Java .hashCode and .equals consistent with the
    contract for java.util.Map.

    When AOT compiling, generates compiled bytecode for a class with the
    given name (a symbol), prepends the current ns as the package, and
    writes the .class file to the *compile-path* directory.

    Two constructors will be defined, one taking the designated fields
    followed by a metadata map (nil for none) and an extension field
    map (nil for none), and one taking only the fields (using nil for
    meta and extension fields). Note that the field names __meta,
    __extmap, __hash and __hasheq are currently reserved and should not
    be used when defining your own records.

    Given (defrecord TypeName ...), two factory functions will be
    defined: ->TypeName, taking positional parameters for the fields,
    and map->TypeName, taking a map of keywords to field values.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L313)
- name: defstruct
  id: clojure.core-api#clojure.core/defstruct
  summary: null
  belongs_to: clojure.core
  description: |-
    ## defstruct

    ```
    Usage: (defstruct name & keys)
    ```

    ```
    Same as (def name (create-struct keys...))
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4046)
- name: deftest
  id: clojure.test-api#clojure.test/deftest
  summary: null
  belongs_to: clojure.test
  description: |-
    ## deftest

    ```
    Usage: (deftest name & body)
    ```

    ```
    Defines a test function with no arguments.  Test functions may call
    other tests, so tests may be composed.  If you compose tests, you
    should also define a function named test-ns-hook; run-tests will
    call test-ns-hook instead of testing all vars.

    Note: Actually, the test body goes in the :test metadata on the var,
    and the real function (the value of the var) calls test-var on
    itself.

    When *load-tests* is false, deftest is ignored.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L622)
- name: deftest-
  id: clojure.test-api#clojure.test/deftest-
  summary: null
  belongs_to: clojure.test
  description: |-
    ## deftest-

    ```
    Usage: (deftest- name & body)
    ```

    ```
    Like deftest but creates a private var.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L639)
- name: deftype
  id: clojure.core-api#clojure.core/deftype
  summary: null
  belongs_to: clojure.core
  description: "## deftype\n\n```\nUsage: (deftype name [& fields] & opts+specs)\n```\n\n```\n(deftype name [fields*]  options* specs*)\n\nOptions are expressed as sequential keywords and arguments (in any order).\n\nSupported options:\n:load-ns - if true, importing the type class will cause the\n           namespace in which the type was defined to be loaded.\n           Defaults to false.\n\nEach spec consists of a protocol or interface name followed by zero\nor more method bodies:\n\nprotocol-or-interface-or-Object\n(methodName [args*] body)*\n\nDynamically generates compiled bytecode for class with the given\nname, in a package with the same name as the current namespace, the\ngiven fields, and, optionally, methods for protocols and/or\ninterfaces. \n\nThe class will have the (by default, immutable) fields named by\nfields, which can have type hints. Protocols/interfaces and methods\nare optional. The only methods that can be supplied are those\ndeclared in the protocols/interfaces.  Note that method bodies are\nnot closures, the local environment includes only the named fields,\nand those fields can be accessed directly. Fields can be qualified\nwith the metadata :volatile-mutable true or :unsynchronized-mutable\ntrue, at which point (set! afield aval) will be supported in method\nbodies. Note well that mutable fields are extremely difficult to use\ncorrectly, and are present only to facilitate the building of higher\nlevel constructs, such as Clojure's reference types, in Clojure\nitself. They are for experts only - if the semantics and\nimplications of :volatile-mutable or :unsynchronized-mutable are not\nimmediately apparent to you, you should not be using them.\n\nMethod definitions take the form:\n\n(methodname [args*] body)\n\nThe argument and return types can be hinted on the arg and\nmethodname symbols. If not supplied, they will be inferred, so type\nhints should be reserved for disambiguation.\n\nMethods should be supplied for all methods of the desired\nprotocol(s) and interface(s). You can also define overrides for\nmethods of Object. Note that a parameter must be supplied to\ncorrespond to the target object ('this' in Java parlance). Thus\nmethods for interfaces will take one more argument than do the\ninterface declarations. Note also that recur calls to the method\nhead should *not* pass the target object, it will be supplied\nautomatically and can not be substituted.\n\nIn the method bodies, the (unqualified) name can be used to name the\nclass (for calls to new, instance? etc).\n\nWhen AOT compiling, generates compiled bytecode for a class with the\ngiven name (a symbol), prepends the current ns as the package, and\nwrites the .class file to the *compile-path* directory.\n\nOne constructor will be defined, taking the designated fields.  Note\nthat the field names __meta, __extmap, __hash and __hasheq are currently\nreserved and should not be used when defining your own types.\n\nGiven (deftype TypeName ...), a factory function called ->TypeName\nwill be defined, taking positional parameters for the fields\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L423)"
- name: delay
  id: clojure.core-api#clojure.core/delay
  summary: null
  belongs_to: clojure.core
  description: |-
    ## delay

    ```
    Usage: (delay & body)
    ```

    ```
    Takes a body of expressions and yields a Delay object that will
    invoke the body only the first time it is forced (with force or deref/@), and
    will cache the result and return it on all subsequent force
    calls. See also - realized?
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L748)
- name: delay?
  id: clojure.core-api#clojure.core/delay?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## delay?

    ```
    Usage: (delay? x)
    ```

    ```
    returns true if x is a Delay created with delay
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L757)
- name: delete-file
  id: clojure.java.io-api#clojure.java.io/delete-file
  summary: null
  belongs_to: clojure.java.io
  description: |-
    ## delete-file

    ```
    Usage: (delete-file f & [silently])
    ```

    ```
    Delete file f. If silently is nil or false, raise an exception on failure, else return the value of silently.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L430)
- name: deliver
  id: clojure.core-api#clojure.core/deliver
  summary: null
  belongs_to: clojure.core
  description: |-
    ## deliver

    ```
    Usage: (deliver promise val)
    ```

    ```
    Delivers the supplied value to the promise, releasing any pending
    derefs. A subsequent call to deliver on a promise will have no effect.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7195)
- name: demunge
  id: clojure.main-api#clojure.main/demunge
  summary: null
  belongs_to: clojure.main
  description: |-
    ## demunge

    ```
    Usage: (demunge fn-name)
    ```

    ```
    Given a string representation of a fn class,
    as in a stack trace element, returns a readable version.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L28)
- name: demunge
  id: clojure.repl-api#clojure.repl/demunge
  summary: null
  belongs_to: clojure.repl
  description: |-
    ## demunge

    ```
    Usage: (demunge fn-name)
    ```

    ```
    Given a string representation of a fn class,
    as in a stack trace element, returns a readable version.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L207)
- name: denominator
  id: clojure.core-api#clojure.core/denominator
  summary: null
  belongs_to: clojure.core
  description: |-
    ## denominator

    ```
    Usage: (denominator r)
    ```

    ```
    Returns the denominator part of a Ratio.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3591)
- name: deref
  id: clojure.core-api#clojure.core/deref
  summary: null
  belongs_to: clojure.core
  description: |-
    ## deref

    ```
    Usage: (deref ref)
           (deref ref timeout-ms timeout-val)
    ```

    ```
    Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,
    returns the in-transaction-value of ref, else returns the
    most-recently-committed value of ref. When applied to a var, agent
    or atom, returns its current state. When applied to a delay, forces
    it if not already forced. When applied to a future, will block if
    computation not complete. When applied to a promise, will block
    until a value is delivered.  The variant taking a timeout can be
    used for blocking references (futures and promises), and will return
    timeout-val if the timeout (in milliseconds) is reached before a
    value is available. See also - realized?.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2323)
- name: derive
  id: clojure.core-api#clojure.core/derive
  summary: null
  belongs_to: clojure.core
  description: |-
    ## derive

    ```
    Usage: (derive tag parent)
           (derive h tag parent)
    ```

    ```
    Establishes a parent/child relationship between parent and
    tag. Parent must be a namespace-qualified symbol or keyword and
    child can be either a namespace-qualified symbol or keyword or a
    class. h must be a hierarchy obtained from make-hierarchy, if not
    supplied defaults to, and modifies, the global hierarchy.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5651)
- name: descendants
  id: clojure.core-api#clojure.core/descendants
  summary: null
  belongs_to: clojure.core
  description: |-
    ## descendants

    ```
    Usage: (descendants tag)
           (descendants h tag)
    ```

    ```
    Returns the immediate and indirect children of tag, through a
    relationship established via derive. h must be a hierarchy obtained
    from make-hierarchy, if not supplied defaults to the global
    hierarchy. Note: does not work on Java type inheritance
    relationships.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5639)
- name: Diff
  id: clojure.data-api#clojure.data/Diff
  summary: null
  belongs_to: clojure.data
  description: "## Diff\n\n```\nImplementation detail. Subject to change.\n```\n\nKnown implementations: java.util.List, java.util.Map, java.util.Set, nil, Object  \n\n### diff-similar\n\n```\nUsage: (diff-similar a b)\n```\n\n```\nImplementation detail. Subject to change.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/51c6d7a70912a8f65e81a8e11ae6f56c94920725/src/clj/clojure/data.clj#L73)"
- name: diff
  id: clojure.data-api#clojure.data/diff
  summary: null
  belongs_to: clojure.data
  description: "## Diff\n\n```\nImplementation detail. Subject to change.\n```\n\nKnown implementations: java.util.List, java.util.Map, java.util.Set, nil, Object  \n\n### diff-similar\n\n```\nUsage: (diff-similar a b)\n```\n\n```\nImplementation detail. Subject to change.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/51c6d7a70912a8f65e81a8e11ae6f56c94920725/src/clj/clojure/data.clj#L73)"
- name: difference
  id: clojure.set-api#clojure.set/difference
  summary: null
  belongs_to: clojure.set
  description: |-
    ## difference

    ```
    Usage: (difference s1)
           (difference s1 s2)
           (difference s1 s2 & sets)
    ```

    ```
    Return a set that is the first set without elements of the remaining sets
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L49)
- name: dir
  id: clojure.repl-api#clojure.repl/dir
  summary: null
  belongs_to: clojure.repl
  description: |-
    ## dir

    ```
    Usage: (dir nsname)
    ```

    ```
    Prints a sorted directory of public vars in a namespace
    ```

    [Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L201)
- name: dir-fn
  id: clojure.repl-api#clojure.repl/dir-fn
  summary: null
  belongs_to: clojure.repl
  description: |-
    ## dir-fn

    ```
    Usage: (dir-fn ns)
    ```

    ```
    Returns a sorted seq of symbols naming public vars in
    a namespace or namespace alias. Looks for aliases in *ns*
    ```

    [Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L195)
- name: disable-external-entities
  id: clojure.xml-api#clojure.xml/disable-external-entities
  summary: null
  belongs_to: clojure.xml
  description: |-
    ## disable-external-entities

    ```
    Usage: (disable-external-entities parser)
    ```

    ```
    Modifies a SAXParser to disable external entity resolution to prevent XXE attacks
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/4a4a6e7717d411679820c4a3ce735a77aef45cc3/src/clj/clojure/xml.clj#L81)
- name: disj
  id: clojure.core-api#clojure.core/disj
  summary: null
  belongs_to: clojure.core
  description: |-
    ## disj

    ```
    Usage: (disj set)
           (disj set key)
           (disj set key & ks)
    ```

    ```
    disj[oin]. Returns a new set of the same (hashed/sorted) type, that
    does not contain key(s).
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1533)
- name: disj!
  id: clojure.core-api#clojure.core/disj!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## disj!

    ```
    Usage: (disj! set)
           (disj! set key)
           (disj! set key & ks)
    ```

    ```
    disj[oin]. Returns a transient set of the same (hashed/sorted) type, that
    does not contain key(s).
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3401)
- name: dissoc
  id: clojure.core-api#clojure.core/dissoc
  summary: null
  belongs_to: clojure.core
  description: |-
    ## dissoc

    ```
    Usage: (dissoc map)
           (dissoc map key)
           (dissoc map key & ks)
    ```

    ```
    dissoc[iate]. Returns a new map of the same (hashed/sorted) type,
    that does not contain a mapping for key(s).
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1519)
- name: dissoc!
  id: clojure.core-api#clojure.core/dissoc!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## dissoc!

    ```
    Usage: (dissoc! map key)
           (dissoc! map key & ks)
    ```

    ```
    Returns a transient map that doesn't contain a mapping for key(s).
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3382)
- name: distinct
  id: clojure.core-api#clojure.core/distinct
  summary: null
  belongs_to: clojure.core
  description: |-
    ## distinct

    ```
    Usage: (distinct)
           (distinct coll)
    ```

    ```
    Returns a lazy sequence of the elements of coll with duplicates removed.
    Returns a stateful transducer when no collection is provided.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5054)
- name: distinct?
  id: clojure.core-api#clojure.core/distinct?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## distinct?

    ```
    Usage: (distinct? x)
           (distinct? x y)
           (distinct? x y & more)
    ```

    ```
    Returns true if no two of the arguments are =
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5710)
- name: do
  id: clojure.core-api#clojure.core/do
  summary: null
  belongs_to: clojure.core
  description: |-
    ## do

    ```
    Usage: (do exprs*)
    ```

    ```
    Evaluates the expressions in order and returns the value of
    the last. If no expressions are supplied, returns nil.

    Please see https://clojure.org/reference/special_forms#do
    ```

    Added in Clojure version 1.0
- name: do-report
  id: clojure.test-api#clojure.test/do-report
  summary: null
  belongs_to: clojure.test
  description: |-
    ## do-report

    ```
    Usage: (do-report m)
    ```

    ```
    Add file and line information to a test result and call report.
    If you are writing a custom assert-expr method, call this function
    to pass test results to report.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L351)
- name: do-template
  id: clojure.template-api#clojure.template/do-template
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.template
  description: "## do-template\n\n```\nUsage: (do-template argv expr & values)\n```\n\n```\nRepeatedly copies expr (in a do block) for each group of arguments\nin values.  values are automatically partitioned by the number of\narguments in argv, an argument vector as in defn.\n\nExample: (macroexpand '(do-template [x y] (+ y x) 2 4 3 5))\n         ;=> (do (+ 4 2) (+ 5 3))\n```\n\n[Source](https://github.com/clojure/clojure/blob/c4c0740a0696bc95b2184c0fef55ed7c3bb097f6/src/clj/clojure/template.clj#L45)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.template-api.html](https://clojure.github.io/clojure/clojure.template-api.html)"
- name: doall
  id: clojure.core-api#clojure.core/doall
  summary: null
  belongs_to: clojure.core
  description: |-
    ## doall

    ```
    Usage: (doall coll)
           (doall n coll)
    ```

    ```
    When lazy sequences are produced via functions that have side
    effects, any effects other than those needed to produce the first
    element in the seq do not occur until the seq is consumed. doall can
    be used to force any effects. Walks through the successive nexts of
    the seq, retains the head and returns it, thus causing the entire
    seq to reside in memory at one time.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3149)
- name: doc
  id: clojure.repl-api#clojure.repl/doc
  summary: null
  belongs_to: clojure.repl
  description: |-
    ## doc

    ```
    Usage: (doc name)
    ```

    ```
    Prints documentation for a var or special form given its name,
    or for a spec if given a keyword
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L131)
- name: dorun
  id: clojure.core-api#clojure.core/dorun
  summary: null
  belongs_to: clojure.core
  description: |-
    ## dorun

    ```
    Usage: (dorun coll)
           (dorun n coll)
    ```

    ```
    When lazy sequences are produced via functions that have side
    effects, any effects other than those needed to produce the first
    element in the seq do not occur until the seq is consumed. dorun can
    be used to force any effects. Walks through the successive nexts of
    the seq, does not retain the head and returns nil.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3134)
- name: doseq
  id: clojure.core-api#clojure.core/doseq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## doseq

    ```
    Usage: (doseq seq-exprs & body)
    ```

    ```
    Repeatedly executes body (presumably for side-effects) with
    bindings and filtering as provided by "for".  Does not retain
    the head of the sequence. Returns nil.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3217)
- name: dosync
  id: clojure.core-api#clojure.core/dosync
  summary: null
  belongs_to: clojure.core
  description: |-
    ## dosync

    ```
    Usage: (dosync & exprs)
    ```

    ```
    Runs the exprs (in an implicit do) in a transaction that encompasses
    exprs and any nested calls.  Starts a transaction if none is already
    running on this thread. Any uncaught exception will abort the
    transaction and flow out of dosync. The exprs may be run more than
    once, but any effects on Refs will be atomic.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5101)
- name: dotimes
  id: clojure.core-api#clojure.core/dotimes
  summary: null
  belongs_to: clojure.core
  description: |-
    ## dotimes

    ```
    Usage: (dotimes bindings & body)
    ```

    ```
    bindings => name n

    Repeatedly executes body (presumably for side-effects) with name
    bound to integers from 0 through n-1.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3314)
- name: doto
  id: clojure.core-api#clojure.core/doto
  summary: null
  belongs_to: clojure.core
  description: |-
    ## doto

    ```
    Usage: (doto x & forms)
    ```

    ```
    Evaluates x then calls all of the methods and functions with the
    value of x supplied at the front of the given arguments.  The forms
    are evaluated in order.  Returns x.

    (doto (new java.util.HashMap) (.put "a" 1) (.put "b" 2))
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3853)
- name: double
  id: clojure.core-api#clojure.core/double
  summary: null
  belongs_to: clojure.core
  description: |-
    ## double

    ```
    Usage: (double x)
    ```

    ```
    Coerce to double
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3493)
- name: double-array
  id: clojure.core-api#clojure.core/double-array
  summary: null
  belongs_to: clojure.core
  description: |-
    ## double-array

    ```
    Usage: (double-array size-or-seq)
           (double-array size init-val-or-seq)
    ```

    ```
    Creates an array of doubles
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5342)
- name: double?
  id: clojure.core-api#clojure.core/double?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## double?

    ```
    Usage: (double? x)
    ```

    ```
    Return true if x is a Double
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1440)
- name: doubles
  id: clojure.core-api#clojure.core/doubles
  summary: null
  belongs_to: clojure.core
  description: |-
    ## doubles

    ```
    Usage: (doubles xs)
    ```

    ```
    Casts to double[]
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5403)
- name: down
  id: clojure.zip-api#clojure.zip/down
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## down

    ```
    Usage: (down loc)
    ```

    ```
    Returns the loc of the leftmost child of the node at this loc, or
    nil if no children
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L109)
- name: drop
  id: clojure.core-api#clojure.core.reducers/drop
  summary: null
  belongs_to: clojure.core
  description: |-
    ## drop

    ```
    Usage: (drop n)
           (drop n coll)
    ```

    ```
    Elides the first n values from the reduction of coll.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L215)
- name: drop
  id: clojure.core-api#clojure.core/drop
  summary: null
  belongs_to: clojure.core
  description: |-
    ## drop

    ```
    Usage: (drop n)
           (drop n coll)
    ```

    ```
    Returns a lazy sequence of all but the first n items in coll.
    Returns a stateful transducer when no collection is provided.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2926)
- name: drop-last
  id: clojure.core-api#clojure.core/drop-last
  summary: null
  belongs_to: clojure.core
  description: |-
    ## drop-last

    ```
    Usage: (drop-last coll)
           (drop-last n coll)
    ```

    ```
    Return a lazy sequence of all but the last n (default 1) items in coll
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2951)
- name: drop-while
  id: clojure.core-api#clojure.core/drop-while
  summary: null
  belongs_to: clojure.core
  description: |-
    ## drop-while

    ```
    Usage: (drop-while pred)
           (drop-while pred coll)
    ```

    ```
    Returns a lazy sequence of the items in coll starting from the
    first item for which (pred item) returns logical false.  Returns a
    stateful transducer when no collection is provided.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2969)
- name: e
  id: clojure.stacktrace-api#clojure.stacktrace/e
  summary: null
  belongs_to: clojure.stacktrace
  description: |-
    ## e

    ```
    Usage: (e)
    ```

    ```
    REPL utility.  Prints a brief stack trace for the root cause of the
    most recent exception.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/dbb448f7709b20c392558e7d7871d1e9b28c9440/src/clj/clojure/stacktrace.clj#L82)
- name: E
  id: clojure.math-api#clojure.math/E
  summary: null
  belongs_to: clojure.math
  description: |-
    ## E

    ```
    Constant for e, the base for natural logarithms.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#E
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L24)
- name: edit
  id: clojure.zip-api#clojure.zip/edit
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## edit

    ```
    Usage: (edit loc f & args)
    ```

    ```
    Replaces the node at this loc with the value of (f node args)
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L210)
- name: Eduction
  id: clojure.core-api#clojure.core/Eduction
  summary: null
  belongs_to: clojure.core
  description: "## Eduction\n\nFields: \\[xform coll\\]  \nProtocols:  \nInterfaces: clojure.lang.IReduceInit, clojure.lang.Sequential, java.lang.Iterable"
- name: eduction
  id: clojure.core-api#clojure.core/eduction
  summary: null
  belongs_to: clojure.core
  description: "## Eduction\n\nFields: \\[xform coll\\]  \nProtocols:  \nInterfaces: clojure.lang.IReduceInit, clojure.lang.Sequential, java.lang.Iterable"
- name: empty
  id: clojure.core-api#clojure.core/empty
  summary: null
  belongs_to: clojure.core
  description: |-
    ## empty

    ```
    Usage: (empty coll)
    ```

    ```
    Returns an empty collection of the same category as coll, or nil
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5266)
- name: empty?
  id: clojure.core-api#clojure.core/empty?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## empty?

    ```
    Usage: (empty? coll)
    ```

    ```
    Returns true if coll has no items - same as (not (seq coll)).
    Please use the idiom (seq x) rather than (not (empty? x))
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6241)
- name: end?
  id: clojure.zip-api#clojure.zip/end?
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## end?

    ```
    Usage: (end? loc)
    ```

    ```
    Returns true if loc represents the end of a depth-first walk
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L258)
- name: ends-with?
  id: clojure.string-api#clojure.string/ends-with?
  summary: null
  belongs_to: clojure.string
  description: |-
    ## ends-with?

    ```
    Usage: (ends-with? s substr)
    ```

    ```
    True if s ends with substr.
    ```

    Added in Clojure version 1.8

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L367)
- name: ensure
  id: clojure.core-api#clojure.core/ensure
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ensure

    ```
    Usage: (ensure ref)
    ```

    ```
    Must be called in a transaction. Protects the ref from modification
    by other transactions.  Returns the in-transaction-value of
    ref. Allows for more concurrency than (ref-set ref @ref)
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2505)
- name: ensure-reduced
  id: clojure.core-api#clojure.core/ensure-reduced
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ensure-reduced

    ```
    Usage: (ensure-reduced x)
    ```

    ```
    If x is already reduced?, returns it, else returns (reduced x)
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2866)
- name: enumeration-seq
  id: clojure.core-api#clojure.core/enumeration-seq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## enumeration-seq

    ```
    Usage: (enumeration-seq e)
    ```

    ```
    Returns a seq on a java.util.Enumeration
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5756)
- name: EqualityPartition
  id: clojure.data-api#clojure.data/EqualityPartition
  summary: null
  belongs_to: clojure.data
  description: "## EqualityPartition\n\n```\nImplementation detail. Subject to change.\n```\n\nKnown implementations: java.util.List, java.util.Map, java.util.Set, nil, Object  \n\n### equality-partition\n\n```\nUsage: (equality-partition x)\n```\n\n```\nImplementation detail. Subject to change.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/51c6d7a70912a8f65e81a8e11ae6f56c94920725/src/clj/clojure/data.clj#L69)\n\n## Public Variables and Functions"
- name: err->msg
  id: clojure.main-api#clojure.main/err->msg
  summary: null
  belongs_to: clojure.main
  description: |-
    ## err-\>msg

    ```
    Usage: (err->msg e)
    ```

    ```
    Helper to return an error message string from an exception.
    ```

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L343)
- name: error-handler
  id: clojure.core-api#clojure.core/error-handler
  summary: null
  belongs_to: clojure.core
  description: |-
    ## error-handler

    ```
    Usage: (error-handler a)
    ```

    ```
    Returns the error-handler of agent a, or nil if there is none.
    See set-error-handler!
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2221)
- name: error-mode
  id: clojure.core-api#clojure.core/error-mode
  summary: null
  belongs_to: clojure.core
  description: |-
    ## error-mode

    ```
    Usage: (error-mode a)
    ```

    ```
    Returns the error-mode of agent a.  See set-error-mode!
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2246)
- name: escape
  id: clojure.string-api#clojure.string/escape
  summary: null
  belongs_to: clojure.string
  description: |-
    ## escape

    ```
    Usage: (escape s cmap)
    ```

    ```
    Return a new string, using cmap to escape each character ch
    from s as follows:

    If (cmap ch) is nil, append ch to the new string.
    If (cmap ch) is non-nil, append (str (cmap ch)) instead.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L301)
- name: eval
  id: clojure.core-api#clojure.core/eval
  summary: null
  belongs_to: clojure.core
  description: |-
    ## eval

    ```
    Usage: (eval form)
    ```

    ```
    Evaluates the form data structure (not text!) and returns the result.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3211)
- name: even?
  id: clojure.core-api#clojure.core/even?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## even?

    ```
    Usage: (even? n)
    ```

    ```
    Returns true if n is even, throws an exception if n is not an integer
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1400)
- name: every-pred
  id: clojure.core-api#clojure.core/every-pred
  summary: null
  belongs_to: clojure.core
  description: |-
    ## every-pred

    ```
    Usage: (every-pred p)
           (every-pred p1 p2)
           (every-pred p1 p2 p3)
           (every-pred p1 p2 p3 & ps)
    ```

    ```
    Takes a set of predicates and returns a function f that returns true if all of its
    composing predicates return a logical true value against all of its arguments, else it returns
    false. Note that f is short-circuiting in that it will stop execution on the first
    argument that triggers a logical false result against the original predicates.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7464)
- name: every?
  id: clojure.core-api#clojure.core/every?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## every?

    ```
    Usage: (every? pred coll)
    ```

    ```
    Returns true if (pred x) is logical true for every x in coll, else
    false.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2689)
- name: ex-cause
  id: clojure.core-api#clojure.core/ex-cause
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ex-cause

    ```
    Usage: (ex-cause ex)
    ```

    ```
    Returns the cause of ex if ex is a Throwable.
    Otherwise returns nil.
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4832)
- name: ex-data
  id: clojure.core-api#clojure.core/ex-data
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ex-data

    ```
    Usage: (ex-data ex)
    ```

    ```
    Returns exception data (a map) if ex is an IExceptionInfo.
    Otherwise returns nil.
    ```

    Added in Clojure version 1.4

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4816)
- name: ex-info
  id: clojure.core-api#clojure.core/ex-info
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ex-info

    ```
    Usage: (ex-info msg map)
           (ex-info msg map cause)
    ```

    ```
    Create an instance of ExceptionInfo, a RuntimeException subclass
    that carries a map of additional data.
    ```

    Added in Clojure version 1.4

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4807)
- name: ex-message
  id: clojure.core-api#clojure.core/ex-message
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ex-message

    ```
    Usage: (ex-message ex)
    ```

    ```
    Returns the message attached to ex if ex is a Throwable.
    Otherwise returns nil.
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4824)
- name: ex-str
  id: clojure.main-api#clojure.main/ex-str
  summary: null
  belongs_to: clojure.main
  description: |-
    ## ex-str

    ```
    Usage: (ex-str {:clojure.error/keys [phase source path line column symbol class cause spec], :as triage-data})
    ```

    ```
    Returns a string from exception data, as produced by ex-triage.
    The first line summarizes the exception phase and location.
    The subsequent lines describe the cause.
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L269)
- name: ex-triage
  id: clojure.main-api#clojure.main/ex-triage
  summary: null
  belongs_to: clojure.main
  description: |-
    ## ex-triage

    ```
    Usage: (ex-triage datafied-throwable)
    ```

    ```
    Returns an analysis of the phase, error, cause, and location of an error that occurred
    based on Throwable data, as returned by Throwable->map. All attributes other than phase
    are optional:
      :clojure.error/phase - keyword phase indicator, one of:
        :read-source :compile-syntax-check :compilation :macro-syntax-check :macroexpansion
        :execution :read-eval-result :print-eval-result
      :clojure.error/source - file name (no path)
      :clojure.error/path - source path
      :clojure.error/line - integer line number
      :clojure.error/column - integer column number
      :clojure.error/symbol - symbol being expanded/compiled/invoked
      :clojure.error/class - cause exception class symbol
      :clojure.error/cause - cause exception message
      :clojure.error/spec - explain-data for spec error
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L208)
- name: exp
  id: clojure.math-api#clojure.math/exp
  summary: null
  belongs_to: clojure.math
  description: |-
    ## exp

    ```
    Usage: (exp a)
    ```

    ```
    Returns Euler's number e raised to the power of a.
    If a is ##NaN => ##NaN
    If a is ##Inf => ##Inf
    If a is ##-Inf => +0.0
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#exp-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L124)
- name: expm1
  id: clojure.math-api#clojure.math/expm1
  summary: null
  belongs_to: clojure.math
  description: |-
    ## expm1

    ```
    Usage: (expm1 x)
    ```

    ```
    Returns e^x - 1. Near 0, expm1(x)+1 is more accurate to e^x than exp(x).
    If x is ##NaN => ##NaN
    If x is ##Inf => #Inf
    If x is ##-Inf => -1.0
    If x is zero => x
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#expm1-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L421)
- name: extend
  id: clojure.core-api#clojure.core/extend
  summary: null
  belongs_to: clojure.core
  description: "## extend\n\n```\nUsage: (extend atype & proto+mmaps)\n```\n\n```\nImplementations of protocol methods can be provided using the extend construct:\n\n (extend AType\n   AProtocol\n    {:foo an-existing-fn\n     :bar (fn [a b] ...)\n     :baz (fn ([a]...) ([a b] ...)...)}\n   BProtocol \n     {...} \n   ...)\n\n extend takes a type/class (or interface, see below), and one or more\n protocol + method map pairs. It will extend the polymorphism of the\n protocol's methods to call the supplied methods when an AType is\n provided as the first argument. \n\n Method maps are maps of the keyword-ized method names to ordinary\n fns. This facilitates easy reuse of existing fns and fn maps, for\n code reuse/mixins without derivation or composition. You can extend\n an interface to a protocol. This is primarily to facilitate interop\n with the host (e.g. Java) but opens the door to incidental multiple\n inheritance of implementation since a class can inherit from more\n than one interface, both of which extend the protocol. It is TBD how\n to specify which impl to use. You can extend a protocol on nil.\n\n If you are supplying the definitions explicitly (i.e. not reusing\n exsting functions or mixin maps), you may find it more convenient to\n use the extend-type or extend-protocol macros.\n\n Note that multiple independent extend clauses can exist for the same\n type, not all protocols need be defined in a single extend call.\n\n See also:\n extends?, satisfies?, extenders\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L777)"
- name: extend-protocol
  id: clojure.core-api#clojure.core/extend-protocol
  summary: null
  belongs_to: clojure.core
  description: "## extend-protocol\n\n```\nUsage: (extend-protocol p & specs)\n```\n\n```\nUseful when you want to provide several implementations of the same\nprotocol all at once. Takes a single protocol and the implementation\nof that protocol for one or more types. Expands into calls to\nextend-type:\n\n(extend-protocol Protocol\n  AType\n    (foo [x] ...)\n    (bar [x y] ...)\n  BType\n    (foo [x] ...)\n    (bar [x y] ...)\n  AClass\n    (foo [x] ...)\n    (bar [x y] ...)\n  nil\n    (foo [x] ...)\n    (bar [x y] ...))\n\nexpands into:\n\n(do\n (clojure.core/extend-type AType Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type BType Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type AClass Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type nil Protocol \n   (foo [x] ...) \n   (bar [x y] ...)))\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L877)"
- name: extend-type
  id: clojure.core-api#clojure.core/extend-type
  summary: null
  belongs_to: clojure.core
  description: "## extend-type\n\n```\nUsage: (extend-type t & specs)\n```\n\n```\nA macro that expands into an extend call. Useful when you are\nsupplying the definitions explicitly inline, extend-type\nautomatically creates the maps required by extend.  Propagates the\nclass as a type hint on the first argument of all fns.\n\n(extend-type MyType \n  Countable\n    (cnt [c] ...)\n  Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y & zs] ...)))\n\nexpands into:\n\n(extend MyType\n Countable\n   {:cnt (fn [c] ...)}\n Foo\n   {:baz (fn ([x] ...) ([x y & zs] ...))\n    :bar (fn [x y] ...)})\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L845)"
- name: extenders
  id: clojure.core-api#clojure.core/extenders
  summary: null
  belongs_to: clojure.core
  description: |-
    ## extenders

    ```
    Usage: (extenders protocol)
    ```

    ```
    Returns a collection of the types explicitly extending protocol
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L564)
- name: extends?
  id: clojure.core-api#clojure.core/extends?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## extends?

    ```
    Usage: (extends? protocol atype)
    ```

    ```
    Returns true if atype extends protocol
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L557)
- name: false?
  id: clojure.core-api#clojure.core/false?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## false?

    ```
    Usage: (false? x)
    ```

    ```
    Returns true if x is the value false, false otherwise.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L507)
- name: ffirst
  id: clojure.core-api#clojure.core/ffirst
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ffirst

    ```
    Usage: (ffirst x)
    ```

    ```
    Same as (first (first x))
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L100)
- name: Field
  id: clojure.reflect-api#clojure.reflect/Field
  summary: null
  belongs_to: clojure.reflect
  description: "## Field\n\nFields: \\[name type declaring-class flags\\]  \nProtocols:  \nInterfaces: clojure.lang.IHashEq, clojure.lang.IKeywordLookup, clojure.lang.ILookup, clojure.lang.IObj, clojure.lang.IPersistentMap, java.io.Serializable, java.util.Map"
- name: file
  id: clojure.java.io-api#clojure.java.io/file
  summary: null
  belongs_to: clojure.java.io
  description: |-
    ## file

    ```
    Usage: (file arg)
           (file parent child)
           (file parent child & more)
    ```

    ```
    Returns a java.io.File, passing each arg to as-file.  Multiple-arg
    versions treat the first argument as parent and subsequent args as
    children relative to the parent.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L418)
- name: file-position
  id: clojure.test-api#clojure.test/file-position
  summary: null
  belongs_to: clojure.test
  description: |-
    ## file-position

    ```
    Usage: (file-position n)
    ```

    ```
    Returns a vector [filename line-number] for the nth call up the
    stack.

    Deprecated in 1.2: The information needed for test reporting is
    now on :file and :line keys in the result map.
    ```

    Added in Clojure version 1.1

    Deprecated since Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L282)
- name: file-seq
  id: clojure.core-api#clojure.core/file-seq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## file-seq

    ```
    Usage: (file-seq dir)
    ```

    ```
    A tree seq on java.io.Files
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4973)
- name: filter
  id: clojure.core-api#clojure.core.reducers/filter
  summary: null
  belongs_to: clojure.core
  description: |-
    ## filter

    ```
    Usage: (filter pred)
           (filter pred coll)
    ```

    ```
    Retains values in the reduction of coll for which (pred val)
    returns logical true. Foldable.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L154)
- name: filter
  id: clojure.core-api#clojure.core/filter
  summary: null
  belongs_to: clojure.core
  description: |-
    ## filter

    ```
    Usage: (filter pred)
           (filter pred coll)
    ```

    ```
    Returns a lazy sequence of the items in coll for which
    (pred item) returns logical true. pred must be free of side-effects.
    Returns a transducer when no collection is provided.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2810)
- name: filterv
  id: clojure.core-api#clojure.core/filterv
  summary: null
  belongs_to: clojure.core
  description: |-
    ## filterv

    ```
    Usage: (filterv pred coll)
    ```

    ```
    Returns a vector of the items in coll for which
    (pred item) returns logical true. pred must be free of side-effects.
    ```

    Added in Clojure version 1.4

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6988)
- name: finally
  id: clojure.core-api#clojure.core/finally
  summary: null
  belongs_to: clojure.core
  description: |-
    ## finally

    ```
    Syntax for use with try.

    Please see https://clojure.org/reference/special_forms#try
    ```

    Added in Clojure version 1.0
- name: find
  id: clojure.core-api#clojure.core/find
  summary: null
  belongs_to: clojure.core
  description: |-
    ## find

    ```
    Usage: (find map key)
    ```

    ```
    Returns the map entry for key, or nil if key not present.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1549)
- name: find-doc
  id: clojure.repl-api#clojure.repl/find-doc
  summary: null
  belongs_to: clojure.repl
  description: |-
    ## find-doc

    ```
    Usage: (find-doc re-string-or-pattern)
    ```

    ```
    Prints documentation for any var whose documentation or name
    contains a match for re-string-or-pattern
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L115)
- name: find-keyword
  id: clojure.core-api#clojure.core/find-keyword
  summary: null
  belongs_to: clojure.core
  description: |-
    ## find-keyword

    ```
    Usage: (find-keyword name)
           (find-keyword ns name)
    ```

    ```
    Returns a Keyword with the given namespace and name if one already
    exists.  This function will not intern a new keyword. If the keyword
    has not already been interned, it will return nil.  Do not use :
    in the keyword strings, it will be added automatically.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L627)
- name: find-ns
  id: clojure.core-api#clojure.core/find-ns
  summary: null
  belongs_to: clojure.core
  description: |-
    ## find-ns

    ```
    Usage: (find-ns sym)
    ```

    ```
    Returns the namespace named by the symbol or nil if it doesn't exist.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4127)
- name: find-var
  id: clojure.core-api#clojure.core/find-var
  summary: null
  belongs_to: clojure.core
  description: |-
    ## find-var

    ```
    Usage: (find-var sym)
    ```

    ```
    Returns the global var named by the namespace-qualified symbol, or
    nil if no var with that name.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2032)
- name: first
  id: clojure.core-api#clojure.core/first
  summary: null
  belongs_to: clojure.core
  description: |-
    ## first

    ```
    Usage: (first coll)
    ```

    ```
    Returns the first item in the collection. Calls seq on its
    argument. If coll is nil, returns nil.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L49)
- name: flag-descriptors
  id: clojure.reflect-api#clojure.reflect/flag-descriptors
  summary: null
  belongs_to: clojure.reflect
  description: |-
    ## flag-descriptors

    ```
    The Java access bitflags, along with their friendly names and
    the kinds of objects to which they can apply.
    ```

    [Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L77)
- name: flatten
  id: clojure.core-api#clojure.core.reducers/flatten
  summary: null
  belongs_to: clojure.core
  description: |-
    ## flatten

    ```
    Usage: (flatten)
           (flatten coll)
    ```

    ```
    Takes any nested combination of sequential things (lists, vectors,
    etc.) and returns their contents as a single, flat foldable
    collection.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L174)
- name: flatten
  id: clojure.core-api#clojure.core/flatten
  summary: null
  belongs_to: clojure.core
  description: |-
    ## flatten

    ```
    Usage: (flatten x)
    ```

    ```
    Takes any nested combination of sequential things (lists, vectors,
    etc.) and returns their contents as a single, flat lazy sequence.
    (flatten nil) returns an empty sequence.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7204)
- name: float
  id: clojure.core-api#clojure.core/float
  summary: null
  belongs_to: clojure.core
  description: |-
    ## float

    ```
    Usage: (float x)
    ```

    ```
    Coerce to float
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3487)
- name: float-array
  id: clojure.core-api#clojure.core/float-array
  summary: null
  belongs_to: clojure.core
  description: |-
    ## float-array

    ```
    Usage: (float-array size-or-seq)
           (float-array size init-val-or-seq)
    ```

    ```
    Creates an array of floats
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5302)
- name: float?
  id: clojure.core-api#clojure.core/float?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## float?

    ```
    Usage: (float? n)
    ```

    ```
    Returns true if n is a floating point number
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3605)
- name: floats
  id: clojure.core-api#clojure.core/floats
  summary: null
  belongs_to: clojure.core
  description: |-
    ## floats

    ```
    Usage: (floats xs)
    ```

    ```
    Casts to float[]
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5393)
- name: floor
  id: clojure.math-api#clojure.math/floor
  summary: null
  belongs_to: clojure.math
  description: |-
    ## floor

    ```
    Usage: (floor a)
    ```

    ```
    Returns the largest double less than or equal to a, and equal to a
    mathematical integer.
    If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a
    If a is less than zero but greater than -1.0 => -0.0
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floor-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L210)
- name: floor-div
  id: clojure.math-api#clojure.math/floor-div
  summary: null
  belongs_to: clojure.math
  description: |-
    ## floor-div

    ```
    Usage: (floor-div x y)
    ```

    ```
    Integer division that rounds to negative infinity (as opposed to zero).
    The special case (floorDiv Long/MIN_VALUE -1) overflows and returns Long/MIN_VALUE.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorDiv-long-long-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L331)
- name: floor-mod
  id: clojure.math-api#clojure.math/floor-mod
  summary: null
  belongs_to: clojure.math
  description: |-
    ## floor-mod

    ```
    Usage: (floor-mod x y)
    ```

    ```
    Integer modulus x - (floorDiv(x, y) * y). Sign matches y and is in the
    range -|y| < r < |y|.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorMod-long-long-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L341)
- name: flush
  id: clojure.core-api#clojure.core/flush
  summary: null
  belongs_to: clojure.core
  description: |-
    ## flush

    ```
    Usage: (flush)
    ```

    ```
    Flushes the output stream that is the current value of
    *out*
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3706)
- name: fn
  id: clojure.core-api#clojure.core/fn
  summary: null
  belongs_to: clojure.core
  description: |-
    ## fn

    ```
    Usage: (fn name? [params*] exprs*)
           (fn name? ([params*] exprs*) +)
    ```

    ```
    params => positional-params*, or positional-params* & rest-param
    positional-param => binding-form
    rest-param => binding-form
    binding-form => name, or destructuring-form

    Defines a function.

    See https://clojure.org/reference/special_forms#fn for more information
    ```

    ```
    Specs:
      Args: (cat
             :fn-name (? simple-symbol?)
             :fn-tail (alt
                       :arity-1 :clojure.core.specs.alpha/params+body
                       :arity-n (+
                                  (spec
                                    :clojure.core.specs.alpha/params+body))))
      Ret:  any?
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4535)
- name: fn?
  id: clojure.core-api#clojure.core/fn?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## fn?

    ```
    Usage: (fn? x)
    ```

    ```
    Returns true if x implements Fn, i.e. is an object created via fn.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6272)
- name: fnext
  id: clojure.core-api#clojure.core/fnext
  summary: null
  belongs_to: clojure.core
  description: |-
    ## fnext

    ```
    Usage: (fnext x)
    ```

    ```
    Same as (first (next x))
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L114)
- name: fnil
  id: clojure.core-api#clojure.core/fnil
  summary: null
  belongs_to: clojure.core
  description: |-
    ## fnil

    ```
    Usage: (fnil f x)
           (fnil f x y)
           (fnil f x y z)
    ```

    ```
    Takes a function f, and returns a function that calls f, replacing
    a nil first argument to f with the supplied value x. Higher arity
    versions can replace arguments in the second and third
    positions (y, z). Note that the function f can take any number of
    arguments, not just the one(s) being nil-patched.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6594)
- name: fold
  id: clojure.core-api#clojure.core.reducers/fold
  summary: null
  belongs_to: clojure.core
  description: |-
    ## fold

    ```
    Usage: (fold reducef coll)
           (fold combinef reducef coll)
           (fold n combinef reducef coll)
    ```

    ```
    Reduces a collection using a (potentially parallel) reduce-combine
    strategy. The collection is partitioned into groups of approximately
    n (default 512), each of which is reduced with reducef (with a seed
    value obtained by calling (combinef) with no arguments). The results
    of these reductions are then reduced with combinef (default
    reducef). combinef must be associative, and, when called with no
    arguments, (combinef) must produce its identity element. These
    operations may be performed in parallel, but the results will
    preserve order.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L51)
- name: foldcat
  id: clojure.core-api#clojure.core.reducers/foldcat
  summary: null
  belongs_to: clojure.core
  description: |-
    ## foldcat

    ```
    Usage: (foldcat coll)
    ```

    ```
    Equivalent to (fold cat append! coll)
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L281)
- name: folder
  id: clojure.core-api#clojure.core.reducers/folder
  summary: null
  belongs_to: clojure.core
  description: |-
    ## folder

    ```
    Usage: (folder coll xf)
    ```

    ```
    Given a foldable collection, and a transformation function xf,
    returns a foldable collection, where any supplied reducing
    fn will be transformed by xf. xf is a function of reducing fn to
    reducing fn.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L81)
- name: for
  id: clojure.core-api#clojure.core/for
  summary: null
  belongs_to: clojure.core
  description: |-
    ## for

    ```
    Usage: (for seq-exprs body-expr)
    ```

    ```
    List comprehension. Takes a vector of one or more
     binding-form/collection-expr pairs, each followed by zero or more
     modifiers, and yields a lazy sequence of evaluations of expr.
     Collections are iterated in a nested fashion, rightmost fastest,
     and nested coll-exprs can refer to bindings created in prior
     binding-forms.  Supported modifiers are: :let [binding-form expr ...],
     :while test, :when test.

    (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4648)
- name: force
  id: clojure.core-api#clojure.core/force
  summary: null
  belongs_to: clojure.core
  description: |-
    ## force

    ```
    Usage: (force x)
    ```

    ```
    If x is a Delay, returns the (possibly cached) value of its expression, else returns x
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L763)
- name: format
  id: clojure.core-api#clojure.core/format
  summary: null
  belongs_to: clojure.core
  description: |-
    ## format

    ```
    Usage: (format fmt & args)
    ```

    ```
    Formats a string using java.lang.String.format, see java.util.Formatter for format
    string syntax
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5763)
- name: formatter
  id: clojure.pprint-api#clojure.pprint/formatter
  summary: null
  belongs_to: clojure.pprint
  description: "## formatter\n\n```\nUsage: (formatter format-in)\n```\n\n```\nMakes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning \noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/fb916808669ef65dce5dfe58e23d4a902253ca55/src/clj/clojure/pprint/cl_format.clj#L1916)"
- name: formatter-out
  id: clojure.pprint-api#clojure.pprint/formatter-out
  summary: null
  belongs_to: clojure.pprint
  description: |-
    ## formatter-out

    ```
    Usage: (formatter-out format-in)
    ```

    ```
    Makes a function which can directly run format-in. The function is
    fn [& args] ... and returns nil. This version of the formatter macro is
    designed to be used with *out* set to an appropriate Writer. In particular,
    this is meant to be used as part of a pretty printer dispatch method.

    format-in can be either a control string or a previously compiled format.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/fb916808669ef65dce5dfe58e23d4a902253ca55/src/clj/clojure/pprint/cl_format.clj#L1936)
- name: frequencies
  id: clojure.core-api#clojure.core/frequencies
  summary: null
  belongs_to: clojure.core
  description: |-
    ## frequencies

    ```
    Usage: (frequencies coll)
    ```

    ```
    Returns a map from distinct items in coll to the number of times
    they appear.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7271)
- name: fresh-line
  id: clojure.pprint-api#clojure.pprint/fresh-line
  summary: null
  belongs_to: clojure.pprint
  description: |-
    ## fresh-line

    ```
    Usage: (fresh-line)
    ```

    ```
    Make a newline if *out* is not already at the beginning of the line. If *out* is
    not a pretty writer (which keeps track of columns), this function always outputs a newline.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/fb916808669ef65dce5dfe58e23d4a902253ca55/src/clj/clojure/pprint/cl_format.clj#L1245)
- name: function?
  id: clojure.test-api#clojure.test/function?
  summary: null
  belongs_to: clojure.test
  description: |-
    ## function?

    ```
    Usage: (function? x)
    ```

    ```
    Returns true if argument is a function or a symbol that resolves to
    a function (not a macro).
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L424)
- name: future
  id: clojure.core-api#clojure.core/future
  summary: null
  belongs_to: clojure.core
  description: |-
    ## future

    ```
    Usage: (future & body)
    ```

    ```
    Takes a body of expressions and yields a future object that will
    invoke the body in another thread, and will cache the result and
    return it on all subsequent calls to deref/@. If the computation has
    not yet finished, calls to deref/@ will block, unless the variant of
    deref with timeout is used. See also - realized?.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7057)
- name: future-call
  id: clojure.core-api#clojure.core/future-call
  summary: null
  belongs_to: clojure.core
  description: |-
    ## future-call

    ```
    Usage: (future-call f)
    ```

    ```
    Takes a function of no args and yields a future object that will
    invoke the function in another thread, and will cache the result and
    return it on all subsequent calls to deref/@. If the computation has
    not yet finished, calls to deref/@ will block, unless the variant
    of deref with timeout is used. See also - realized?.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7030)
- name: future-cancel
  id: clojure.core-api#clojure.core/future-cancel
  summary: null
  belongs_to: clojure.core
  description: |-
    ## future-cancel

    ```
    Usage: (future-cancel f)
    ```

    ```
    Cancels the future, if possible.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7067)
- name: future-cancelled?
  id: clojure.core-api#clojure.core/future-cancelled?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## future-cancelled?

    ```
    Usage: (future-cancelled? f)
    ```

    ```
    Returns true if future f is cancelled
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7073)
- name: future-done?
  id: clojure.core-api#clojure.core/future-done?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## future-done?

    ```
    Usage: (future-done? f)
    ```

    ```
    Returns true if future f is done
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6574)
- name: future?
  id: clojure.core-api#clojure.core/future?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## future?

    ```
    Usage: (future? x)
    ```

    ```
    Returns true if x is a future
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6568)
- name: gen-class
  id: clojure.core-api#clojure.core/gen-class
  summary: null
  belongs_to: clojure.core
  description: "## gen-class\n\n```\nUsage: (gen-class & options)\n```\n\n```\nWhen compiling, generates compiled bytecode for a class with the\ngiven package-qualified :name (which, as all names in these\nparameters, can be a string or symbol), and writes the .class file\nto the *compile-path* directory.  When not compiling, does\nnothing. The gen-class construct contains no implementation, as the\nimplementation will be dynamically sought by the generated class in\nfunctions in an implementing Clojure namespace. Given a generated\nclass org.mydomain.MyClass with a method named mymethod, gen-class\nwill generate an implementation that looks for a function named by \n(str prefix mymethod) (default prefix: \"-\") in a\nClojure namespace specified by :impl-ns\n(defaults to the current namespace). All inherited methods,\ngenerated methods, and init and main functions (see :methods, :init,\nand :main below) will be found similarly prefixed. By default, the\nstatic initializer for the generated class will attempt to load the\nClojure support code for the class as a resource from the classpath,\ne.g. in the example case, ``org/mydomain/MyClass__init.class``. This\nbehavior can be controlled by :load-impl-ns\n\nNote that methods with a maximum of 18 parameters are supported.\n\nIn all subsequent sections taking types, the primitive types can be\nreferred to by their Java names (int, float etc), and classes in the\njava.lang package can be used without a package qualifier. All other\nclasses must be fully qualified.\n\nOptions should be a set of key/value pairs, all except for :name are optional:\n\n:name aname\n\nThe package-qualified name of the class to be generated\n\n:extends aclass\n\nSpecifies the superclass, the non-private methods of which will be\noverridden by the class. If not provided, defaults to Object.\n\n:implements [interface ...]\n\nOne or more interfaces, the methods of which will be implemented by the class.\n\n:init name\n\nIf supplied, names a function that will be called with the arguments\nto the constructor. Must return [ [superclass-constructor-args] state] \nIf not supplied, the constructor args are passed directly to\nthe superclass constructor and the state will be nil\n\n:constructors {[param-types] [super-param-types], ...}\n\nBy default, constructors are created for the generated class which\nmatch the signature(s) of the constructors for the superclass. This\nparameter may be used to explicitly specify constructors, each entry\nproviding a mapping from a constructor signature to a superclass\nconstructor signature. When you supply this, you must supply an :init\nspecifier. \n\n:post-init name\n\nIf supplied, names a function that will be called with the object as\nthe first argument, followed by the arguments to the constructor.\nIt will be called every time an object of this class is created,\nimmediately after all the inherited constructors have completed.\nIts return value is ignored.\n\n:methods [ [name [param-types] return-type], ...]\n\nThe generated class automatically defines all of the non-private\nmethods of its superclasses/interfaces. This parameter can be used\nto specify the signatures of additional methods of the generated\nclass. Static methods can be specified with ^{:static true} in the\nsignature's metadata. Do not repeat superclass/interface signatures\nhere.\n\n:main boolean\n\nIf supplied and true, a static public main function will be generated. It will\npass each string of the String[] argument as a separate argument to\na function called (str prefix main).\n\n:factory name\n\nIf supplied, a (set of) public static factory function(s) will be\ncreated with the given name, and the same signature(s) as the\nconstructor(s).\n\n:state name\n\nIf supplied, a public final instance field with the given name will be\ncreated. You must supply an :init function in order to provide a\nvalue for the state. Note that, though final, the state can be a ref\nor agent, supporting the creation of Java objects with transactional\nor asynchronous mutation semantics.\n\n:exposes {protected-field-name {:get name :set name}, ...}\n\nSince the implementations of the methods of the generated class\noccur in Clojure functions, they have no access to the inherited\nprotected fields of the superclass. This parameter can be used to\ngenerate public getter/setter methods exposing the protected field(s)\nfor use in the implementation.\n\n:exposes-methods {super-method-name exposed-name, ...}\n\nIt is sometimes necessary to call the superclass' implementation of an\noverridden method.  Those methods may be exposed and referred in \nthe new method implementation by a local name.\n\n:prefix string\n\nDefault: \"-\" Methods called e.g. Foo will be looked up in vars called\nprefixFoo in the implementing ns.\n\n:impl-ns name\n\nDefault: the name of the current ns. Implementations of methods will be \nlooked up in this namespace.\n\n:load-impl-ns boolean\n\nDefault: true. Causes the static initializer for the generated class\nto reference the load code for the implementing namespace. Should be\ntrue when implementing-ns is the default, false if you intend to\nload the code via some other method.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/38705b49fd3dbae11e94c576ef49ff3eb1c47395/src/clj/clojure/genclass.clj#L507)"
- name: gen-interface
  id: clojure.core-api#clojure.core/gen-interface
  summary: null
  belongs_to: clojure.core
  description: |-
    ## gen-interface

    ```
    Usage: (gen-interface & options)
    ```

    ```
    When compiling, generates compiled bytecode for an interface with
     the given package-qualified :name (which, as all names in these
     parameters, can be a string or symbol), and writes the .class file
     to the *compile-path* directory.  When not compiling, does nothing.

     In all subsequent sections taking types, the primitive types can be
     referred to by their Java names (int, float etc), and classes in the
     java.lang package can be used without a package qualifier. All other
     classes must be fully qualified.

     Options should be a set of key/value pairs, all except for :name are
     optional:

     :name aname

     The package-qualified name of the class to be generated

     :extends [interface ...]

     One or more interfaces, which will be extended by this interface.

     :methods [ [name [param-types] return-type], ...]

     This parameter is used to specify the signatures of the methods of
     the generated interface.  Do not repeat superinterface signatures
     here.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/38705b49fd3dbae11e94c576ef49ff3eb1c47395/src/clj/clojure/genclass.clj#L688)
- name: gensym
  id: clojure.core-api#clojure.core/gensym
  summary: null
  belongs_to: clojure.core
  description: |-
    ## gensym

    ```
    Usage: (gensym)
           (gensym prefix-string)
    ```

    ```
    Returns a new symbol with a unique name. If a prefix string is
    supplied, the name is prefix# where # is some unique number. If
    prefix is not supplied, the prefix is 'G__'.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L606)
- name: get
  id: clojure.core-api#clojure.core/get
  summary: null
  belongs_to: clojure.core
  description: |-
    ## get

    ```
    Usage: (get map key)
           (get map key not-found)
    ```

    ```
    Returns the value mapped to key, not-found or nil if key not present
    in associative collection, set, string, array, or ILookup instance.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1508)
- name: get-exponent
  id: clojure.math-api#clojure.math/get-exponent
  summary: null
  belongs_to: clojure.math
  description: |-
    ## get-exponent

    ```
    Usage: (get-exponent d)
    ```

    ```
    Returns the exponent of d.
    If d is ##NaN, ##Inf, ##-Inf => Double/MAX_EXPONENT + 1
    If d is zero or subnormal => Double/MIN_EXPONENT - 1
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#getExponent-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L458)
- name: get-in
  id: clojure.core-api#clojure.core/get-in
  summary: null
  belongs_to: clojure.core
  description: |-
    ## get-in

    ```
    Usage: (get-in m ks)
           (get-in m ks not-found)
    ```

    ```
    Returns the value in a nested associative structure,
    where ks is a sequence of keys. Returns nil if the key
    is not present, or the not-found value if supplied.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6177)
- name: get-method
  id: clojure.core-api#clojure.core/get-method
  summary: null
  belongs_to: clojure.core
  description: |-
    ## get-method

    ```
    Usage: (get-method multifn dispatch-val)
    ```

    ```
    Given a multimethod and a dispatch value, returns the dispatch fn
    that would apply to that value, or nil if none apply and no default
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1834)
- name: get-possibly-unbound-var
  id: clojure.test-api#clojure.test/get-possibly-unbound-var
  summary: null
  belongs_to: clojure.test
  description: |-
    ## get-possibly-unbound-var

    ```
    Usage: (get-possibly-unbound-var v)
    ```

    ```
    Like var-get but returns nil if the var is unbound.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L416)
- name: get-pretty-writer
  id: clojure.pprint-api#clojure.pprint/get-pretty-writer
  summary: null
  belongs_to: clojure.pprint
  description: "## get-pretty-writer\n\n```\nUsage: (get-pretty-writer writer)\n```\n\n```\nReturns the java.io.Writer passed in wrapped in a pretty writer proxy, unless it's \nalready a pretty writer. Generally, it is unnecessary to call this function, since pprint,\nwrite, and cl-format all call it if they need to. However if you want the state to be \npreserved across calls, you will want to wrap them with this. \n\nFor example, when you want to generate column-aware output with multiple calls to cl-format, \ndo it like in this example:\n\n    (defn print-table [aseq column-width]\n      (binding [*out* (get-pretty-writer *out*)]\n        (doseq [row aseq]\n          (doseq [col row]\n            (cl-format true \"~4D~7,vT\" col column-width))\n          (prn))))\n\nNow when you run:\n\n    user> (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)\n\nIt prints a table of squares and cubes for the numbers from 1 to 10:\n\n       1      1       1    \n       2      4       8    \n       3      9      27    \n       4     16      64    \n       5     25     125    \n       6     36     216    \n       7     49     343    \n       8     64     512    \n       9     81     729    \n      10    100    1000\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/fb916808669ef65dce5dfe58e23d4a902253ca55/src/clj/clojure/pprint/cl_format.clj#L1203)"
- name: get-proxy-class
  id: clojure.core-api#clojure.core/get-proxy-class
  summary: null
  belongs_to: clojure.core
  description: |-
    ## get-proxy-class

    ```
    Usage: (get-proxy-class & bases)
    ```

    ```
    Takes an optional single class followed by zero or more
    interfaces. If not supplied class defaults to Object.  Creates an
    returns an instance of a proxy class derived from the supplied
    classes. The resulting value is cached and used for any subsequent
    requests for the same class set. Returns a Class object.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L281)
- name: get-thread-bindings
  id: clojure.core-api#clojure.core/get-thread-bindings
  summary: null
  belongs_to: clojure.core
  description: |-
    ## get-thread-bindings

    ```
    Usage: (get-thread-bindings)
    ```

    ```
    Get a map with the Var/value pairs which is currently in effect for the
    current thread.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1956)
- name: get-validator
  id: clojure.core-api#clojure.core/get-validator
  summary: null
  belongs_to: clojure.core
  description: |-
    ## get-validator

    ```
    Usage: (get-validator iref)
    ```

    ```
    Gets the validator-fn for a var/ref/agent/atom.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2417)
- name: group-by
  id: clojure.core-api#clojure.core/group-by
  summary: null
  belongs_to: clojure.core
  description: |-
    ## group-by

    ```
    Usage: (group-by f coll)
    ```

    ```
    Returns a map of the elements of coll keyed by the result of
    f on each element. The value at each key will be a vector of the
    corresponding elements, in the order they appeared in coll.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7214)
- name: halt-when
  id: clojure.core-api#clojure.core/halt-when
  summary: null
  belongs_to: clojure.core
  description: |-
    ## halt-when

    ```
    Usage: (halt-when pred)
           (halt-when pred retf)
    ```

    ```
    Returns a transducer that ends transduction when pred returns true
    for an input. When retf is supplied it must be a fn of 2 arguments -
    it will be passed the (completed) result so far and the input that
    triggered the predicate, and its return value (if it does not throw
    an exception) will be the return value of the transducer. If retf
    is not supplied, the input that triggered the predicate will be
    returned. If the predicate never returns true the transduction is
    unaffected.
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7699)
- name: hash
  id: clojure.core-api#clojure.core/hash
  summary: null
  belongs_to: clojure.core
  description: |-
    ## hash

    ```
    Usage: (hash x)
    ```

    ```
    Returns the hash code of its argument. Note this is the hash code
    consistent with =, and thus is different than .hashCode for Integer,
    Short, Byte and Clojure collections.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5190)
- name: hash-map
  id: clojure.core-api#clojure.core/hash-map
  summary: null
  belongs_to: clojure.core
  description: |-
    ## hash-map

    ```
    Usage: (hash-map)
           (hash-map & keyvals)
    ```

    ```
    keyval => key val
    Returns a new hash map with supplied mappings.  If any keys are
    equal, they are handled as if by repeated uses of assoc.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L381)
- name: hash-ordered-coll
  id: clojure.core-api#clojure.core/hash-ordered-coll
  summary: null
  belongs_to: clojure.core
  description: |-
    ## hash-ordered-coll

    ```
    Usage: (hash-ordered-coll coll)
    ```

    ```
    Returns the hash code, consistent with =, for an external ordered
    collection implementing Iterable.
    See http://clojure.org/data_structures#hash for full algorithms.
    ```

    Added in Clojure version 1.6

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5211)
- name: hash-set
  id: clojure.core-api#clojure.core/hash-set
  summary: null
  belongs_to: clojure.core
  description: |-
    ## hash-set

    ```
    Usage: (hash-set)
           (hash-set & keys)
    ```

    ```
    Returns a new hash set with supplied keys.  Any equal keys are
    handled as if by repeated uses of conj.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L391)
- name: hash-unordered-coll
  id: clojure.core-api#clojure.core/hash-unordered-coll
  summary: null
  belongs_to: clojure.core
  description: |-
    ## hash-unordered-coll

    ```
    Usage: (hash-unordered-coll coll)
    ```

    ```
    Returns the hash code, consistent with =, for an external unordered
    collection implementing Iterable. For maps, the iterator should
    return map entries whose hash is computed as
      (hash-ordered-coll [k v]).
    See http://clojure.org/data_structures#hash for full algorithms.
    ```

    Added in Clojure version 1.6

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5220)
- name: hypot
  id: clojure.math-api#clojure.math/hypot
  summary: null
  belongs_to: clojure.math
  description: |-
    ## hypot

    ```
    Usage: (hypot x y)
    ```

    ```
    Returns sqrt(x^2 + y^2) without intermediate underflow or overflow.
    If x or y is ##Inf or ##-Inf => ##Inf
    If x or y is ##NaN and neither is ##Inf or ##-Inf => ##NaN
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#hypot-double-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L410)
- name: ident?
  id: clojure.core-api#clojure.core/ident?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ident?

    ```
    Usage: (ident? x)
    ```

    ```
    Return true if x is a symbol or keyword
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1627)
- name: identical?
  id: clojure.core-api#clojure.core/identical?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## identical?

    ```
    Usage: (identical? x y)
    ```

    ```
    Tests if 2 arguments are the same object
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L777)
- name: identity
  id: clojure.core-api#clojure.core/identity
  summary: null
  belongs_to: clojure.core
  description: |-
    ## identity

    ```
    Usage: (identity x)
    ```

    ```
    Returns its argument.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1465)
- name: IEEE-remainder
  id: clojure.math-api#clojure.math/IEEE-remainder
  summary: null
  belongs_to: clojure.math
  description: |-
    ## IEEE-remainder

    ```
    Usage: (IEEE-remainder dividend divisor)
    ```

    ```
    Returns the remainder per IEEE 754 such that
      remainder = dividend - divisor * n
    where n is the integer closest to the exact value of dividend / divisor.
    If two integers are equally close, then n is the even one.
    If the remainder is zero, sign will match dividend.
    If dividend or divisor is ##NaN, or dividend is ##Inf or ##-Inf, or divisor is zero => ##NaN
    If dividend is finite and divisor is infinite => dividend
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#IEEEremainder-double-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L184)
- name: if
  id: clojure.core-api#clojure.core/if
  summary: null
  belongs_to: clojure.core
  description: |-
    ## if

    ```
    Usage: (if test then else?)
    ```

    ```
    Evaluates test. If not the singular values nil or false,
    evaluates and yields then, otherwise, evaluates and yields else. If
    else is not supplied it defaults to nil.

    Please see https://clojure.org/reference/special_forms#if
    ```

    Added in Clojure version 1.0
- name: if-let
  id: clojure.core-api#clojure.core/if-let
  summary: null
  belongs_to: clojure.core
  description: "## if-let\n\n```\nUsage: (if-let bindings then)\n       (if-let bindings then else & oldform)\n```\n\n```\nbindings => binding-form test\n\nIf test is true, evaluates then with binding-form bound to the value of \ntest, if not, yields else\n```\n\n```\nSpecs:\n  Args: (cat\n         :bindings (and vector? :clojure.core.specs.alpha/binding)\n         :then any?\n         :else (? any?))\n  Ret:  any?\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1858)"
- name: if-not
  id: clojure.core-api#clojure.core/if-not
  summary: null
  belongs_to: clojure.core
  description: "## if-not\n\n```\nUsage: (if-not test then)\n       (if-not test then else)\n```\n\n```\nEvaluates test. If logical false, evaluates and returns then expr, \notherwise else expr, if supplied, else nil.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L769)"
- name: if-some
  id: clojure.core-api#clojure.core/if-some
  summary: null
  belongs_to: clojure.core
  description: |-
    ## if-some

    ```
    Usage: (if-some bindings then)
           (if-some bindings then else & oldform)
    ```

    ```
    bindings => binding-form test

    If test is not nil, evaluates then with binding-form bound to the
    value of test, if not, yields else
    ```

    Added in Clojure version 1.6

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1893)
- name: ifn?
  id: clojure.core-api#clojure.core/ifn?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ifn?

    ```
    Usage: (ifn? x)
    ```

    ```
    Returns true if x implements IFn. Note that many data structures
    (e.g. sets and maps) implement IFn
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6265)
- name: IKVReduce
  id: clojure.core-api#clojure.core.protocols/IKVReduce
  summary: null
  belongs_to: clojure.core
  description: "## IKVReduce\n\n```\nProtocol for concrete associative types that can reduce themselves\nvia a function of key and val faster than first/next recursion over map\nentries. Called by clojure.core/reduce-kv, and has same\nsemantics (just different arg order).\n```\n\nKnown implementations: clojure.lang.IKVReduce, nil, Object  \n\n### kv-reduce\n\n```\nUsage: (kv-reduce amap f init)\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L175)"
- name: import
  id: clojure.core-api#clojure.core/import
  summary: null
  belongs_to: clojure.core
  description: |-
    ## import

    ```
    Usage: (import & import-symbols-or-lists)
    ```

    ```
    import-list => (package-symbol class-name-symbols*)

    For each name in class-name-symbols, adds a mapping from name to the
    class named by package.name to the current namespace. Use :import in the ns
    macro in preference to calling this directly.
    ```

    ```
    Specs:
      Args: (*
              (alt
               :class (quotable simple-symbol?)
               :package-list (quotable
                               :clojure.core.specs.alpha/package-list)))
      Ret:  any?
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3426)
- name: in-ns
  id: clojure.core-api#clojure.core/in-ns
  summary: null
  belongs_to: clojure.core
  description: |-
    ## in-ns

    ```
    Usage: (in-ns name)
    ```

    ```
    Sets *ns* to the namespace named by the symbol, creating it if needed.
    ```

    Added in Clojure version 1.0
- name: inc
  id: clojure.core-api#clojure.core/inc
  summary: null
  belongs_to: clojure.core
  description: |-
    ## inc

    ```
    Usage: (inc x)
    ```

    ```
    Returns a number one greater than num. Does not auto-promote
    longs, will throw on overflow. See also: inc'
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L924)
- name: inc'
  id: clojure.core-api#clojure.core/inc'
  summary: null
  belongs_to: clojure.core
  description: |-
    ## inc'

    ```
    Usage: (inc' x)
    ```

    ```
    Returns a number one greater than num. Supports arbitrary precision.
    See also: inc
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L917)
- name: inc-report-counter
  id: clojure.test-api#clojure.test/inc-report-counter
  summary: null
  belongs_to: clojure.test
  description: |-
    ## inc-report-counter

    ```
    Usage: (inc-report-counter name)
    ```

    ```
    Increments the named counter in *report-counters*, a ref to a map.
    Does nothing if *report-counters* is nil.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L314)
- name: includes?
  id: clojure.string-api#clojure.string/includes?
  summary: null
  belongs_to: clojure.string
  description: |-
    ## includes?

    ```
    Usage: (includes? s substr)
    ```

    ```
    True if s includes substr.
    ```

    Added in Clojure version 1.8

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L373)
- name: increment-exact
  id: clojure.math-api#clojure.math/increment-exact
  summary: null
  belongs_to: clojure.math
  description: |-
    ## increment-exact

    ```
    Usage: (increment-exact a)
    ```

    ```
    Returns a incremented by 1, throws ArithmeticException on overflow.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#incrementExact-long-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L304)
- name: index
  id: clojure.set-api#clojure.set/index
  summary: null
  belongs_to: clojure.set
  description: |-
    ## index

    ```
    Usage: (index xrel ks)
    ```

    ```
    Returns a map of the distinct values of ks in the xrel mapped to a
    set of the maps in xrel with the corresponding values of ks.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L95)
- name: index-of
  id: clojure.string-api#clojure.string/index-of
  summary: null
  belongs_to: clojure.string
  description: |-
    ## index-of

    ```
    Usage: (index-of s value)
           (index-of s value from-index)
    ```

    ```
    Return index of value (string or char) in s, optionally searching
    forward from from-index. Return nil if value not found.
    ```

    Added in Clojure version 1.8

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L319)
- name: indexed?
  id: clojure.core-api#clojure.core/indexed?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## indexed?

    ```
    Usage: (indexed? coll)
    ```

    ```
    Return true if coll implements Indexed, indicating efficient lookup by index
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6309)
- name: infinite?
  id: clojure.core-api#clojure.core/infinite?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## infinite?

    ```
    Usage: (infinite? num)
    ```

    ```
    Returns true if num is negative or positive infinity, else false
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8099)
- name: init-proxy
  id: clojure.core-api#clojure.core/init-proxy
  summary: null
  belongs_to: clojure.core
  description: |-
    ## init-proxy

    ```
    Usage: (init-proxy proxy mappings)
    ```

    ```
    Takes a proxy instance and a map of strings (which must
    correspond to methods of the proxy superclass/superinterfaces) to
    fns (which must take arguments matching the corresponding method,
    plus an additional (explicit) first arg corresponding to this, and
    sets the proxy's fn map.  Returns the proxy.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L302)
- name: input-stream
  id: clojure.java.io-api#clojure.java.io/input-stream
  summary: null
  belongs_to: clojure.java.io
  description: |-
    ## input-stream

    ```
    Usage: (input-stream x & opts)
    ```

    ```
    Attempts to coerce its argument into an open java.io.InputStream.
    Default implementations always return a java.io.BufferedInputStream.

    Default implementations are defined for InputStream, File, URI, URL,
    Socket, byte array, and String arguments.

    If the argument is a String, it tries to resolve it first as a URI, then
    as a local file name.  URIs with a 'file' protocol are converted to
    local file names.

    Should be used inside with-open to ensure the InputStream is properly
    closed.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L121)
- name: insert-child
  id: clojure.zip-api#clojure.zip/insert-child
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## insert-child

    ```
    Usage: (insert-child loc item)
    ```

    ```
    Inserts the item as the leftmost child of the node at this loc,
    without moving
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L216)
- name: insert-left
  id: clojure.zip-api#clojure.zip/insert-left
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## insert-left

    ```
    Usage: (insert-left loc item)
    ```

    ```
    Inserts the item as the left sibling of the node at this loc,
    without moving
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L183)
- name: insert-right
  id: clojure.zip-api#clojure.zip/insert-right
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## insert-right

    ```
    Usage: (insert-right loc item)
    ```

    ```
    Inserts the item as the right sibling of the node at this loc,
    without moving
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L193)
- name: inspect
  id: clojure.inspector-api#clojure.inspector/inspect
  summary: null
  belongs_to: clojure.inspector
  description: |-
    ## inspect

    ```
    Usage: (inspect x)
    ```

    ```
    creates a graphical (Swing) inspector on the supplied object
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/5da21b38470d175b3cecbf93b9cd145ca36940c1/src/clj/clojure/inspector.clj#L154)
- name: inspect-table
  id: clojure.inspector-api#clojure.inspector/inspect-table
  summary: null
  belongs_to: clojure.inspector
  description: |-
    ## inspect-table

    ```
    Usage: (inspect-table data)
    ```

    ```
    creates a graphical (Swing) inspector on the supplied regular
    data, which must be a sequential data structure of data structures
    of equal length
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/5da21b38470d175b3cecbf93b9cd145ca36940c1/src/clj/clojure/inspector.clj#L100)
- name: inspect-tree
  id: clojure.inspector-api#clojure.inspector/inspect-tree
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.inspector
  description: "## inspect-tree\n\n```\nUsage: (inspect-tree data)\n```\n\n```\ncreates a graphical (Swing) inspector on the supplied hierarchical data\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/5da21b38470d175b3cecbf93b9cd145ca36940c1/src/clj/clojure/inspector.clj#L91)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.inspector-api.html](https://clojure.github.io/clojure/clojure.inspector-api.html)"
- name: inst-ms
  id: clojure.core-api#clojure.core/inst-ms
  summary: null
  belongs_to: clojure.core
  description: |-
    ## inst-ms

    ```
    Usage: (inst-ms inst)
    ```

    ```
    Return the number of milliseconds since January 1, 1970, 00:00:00 GMT
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6838)
- name: inst?
  id: clojure.core-api#clojure.core/inst?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## inst?

    ```
    Usage: (inst? x)
    ```

    ```
    Return true if x satisfies Inst
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6844)
- name: instance?
  id: clojure.core-api#clojure.core/instance?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## instance?

    ```
    Usage: (instance? c x)
    ```

    ```
    Evaluates x and tests if it is an instance of the class
    c. Returns true or false
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L141)
- name: int
  id: clojure.core-api#clojure.core/int
  summary: null
  belongs_to: clojure.core
  description: |-
    ## int

    ```
    Usage: (int x)
    ```

    ```
    Coerce to int
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L884)
- name: int-array
  id: clojure.core-api#clojure.core/int-array
  summary: null
  belongs_to: clojure.core
  description: |-
    ## int-array

    ```
    Usage: (int-array size-or-seq)
           (int-array size init-val-or-seq)
    ```

    ```
    Creates an array of ints
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5357)
- name: int?
  id: clojure.core-api#clojure.core/int?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## int?

    ```
    Usage: (int? x)
    ```

    ```
    Return true if x is a fixed precision integer
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1414)
- name: integer?
  id: clojure.core-api#clojure.core/integer?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## integer?

    ```
    Usage: (integer? n)
    ```

    ```
    Returns true if n is an integer
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1388)
- name: interleave
  id: clojure.core-api#clojure.core/interleave
  summary: null
  belongs_to: clojure.core
  description: |-
    ## interleave

    ```
    Usage: (interleave)
           (interleave c1)
           (interleave c1 c2)
           (interleave c1 c2 & colls)
    ```

    ```
    Returns a lazy seq of the first item in each coll, then the second etc.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4310)
- name: intern
  id: clojure.core-api#clojure.core/intern
  summary: null
  belongs_to: clojure.core
  description: |-
    ## intern

    ```
    Usage: (intern ns name)
           (intern ns name val)
    ```

    ```
    Finds or creates a var named by the symbol name in the namespace
    ns (which can be a symbol or a namespace), setting its root binding
    to val if supplied. The namespace must exist. The var will adopt any
    metadata from the name symbol.  Returns the var.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6352)
- name: InternalReduce
  id: clojure.core-api#clojure.core.protocols/InternalReduce
  summary: null
  belongs_to: clojure.core
  description: "## InternalReduce\n\n```\nProtocol for concrete seq types that can reduce themselves\nfaster than first/next recursion. Called by clojure.core/reduce.\n```\n\nKnown implementations: [clojure.core.VecSeq](clojure.core-api#clojure.core/VecSeq), clojure.lang.IChunkedSeq, clojure.lang.StringSeq, nil, Object  \n\n### internal-reduce\n\n```\nUsage: (internal-reduce seq f start)\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L19)"
- name: interpose
  id: clojure.core-api#clojure.core/interpose
  summary: null
  belongs_to: clojure.core
  description: |-
    ## interpose

    ```
    Usage: (interpose sep)
           (interpose sep coll)
    ```

    ```
    Returns a lazy seq of the elements of coll separated by sep.
    Returns a stateful transducer when no collection is provided.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5231)
- name: intersection
  id: clojure.set-api#clojure.set/intersection
  summary: null
  belongs_to: clojure.set
  description: |-
    ## intersection

    ```
    Usage: (intersection s1)
           (intersection s1 s2)
           (intersection s1 s2 & sets)
    ```

    ```
    Return a set that is the intersection of the input sets
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L33)
- name: into
  id: clojure.core-api#clojure.core/into
  summary: null
  belongs_to: clojure.core
  description: |-
    ## into

    ```
    Usage: (into)
           (into to)
           (into to from)
           (into to xform from)
    ```

    ```
    Returns a new coll consisting of to-coll with all of the items of
    from-coll conjoined. A transducer may be supplied.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6950)
- name: into-array
  id: clojure.core-api#clojure.core/into-array
  summary: null
  belongs_to: clojure.core
  description: |-
    ## into-array

    ```
    Usage: (into-array aseq)
           (into-array type aseq)
    ```

    ```
    Returns an array with components set to the values in aseq. The array's
    component type is type if provided, or the type of the first value in
    aseq if present, or Object. All values in aseq must be compatible with
    the component type. Class objects for the primitive types can be obtained
    using, e.g., Integer/TYPE.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3444)
- name: ints
  id: clojure.core-api#clojure.core/ints
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ints

    ```
    Usage: (ints xs)
    ```

    ```
    Casts to int[]
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5398)
- name: io!
  id: clojure.core-api#clojure.core/io!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## io!

    ```
    Usage: (io! & body)
    ```

    ```
    If an io! block occurs in a transaction, throws an
    IllegalStateException, else runs body in an implicit do. If the
    first expression in body is a literal string, will use that as the
    exception message.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2529)
- name: io-prepl
  id: clojure.core-api#clojure.core.server/io-prepl
  summary: null
  belongs_to: clojure.core
  description: |-
    ## io-prepl

    ```
    Usage: (io-prepl & {:keys [valf], :or {valf pr-str}})
    ```

    ```
    prepl bound to *in* and *out*, suitable for use with e.g. server/repl (socket-repl).
    :ret and :tap vals will be processed by valf, a fn of one argument
    or a symbol naming same (default pr-str)

    Alpha, subject to change.
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L272)
- name: IOFactory
  id: clojure.java.io-api#clojure.java.io/IOFactory
  summary: null
  belongs_to: clojure.java.io
  description: "## IOFactory\n\n```\nFactory functions that create ready-to-use, buffered versions of\nthe various Java I/O stream types, on top of anything that can\nbe unequivocally converted to the requested kind of stream.\n\nCommon options include\n\n  :append    true to open stream in append mode\n  :encoding  string name of encoding to use, e.g. \"UTF-8\".\n\nCallers should generally prefer the higher level API provided by\nreader, writer, input-stream, and output-stream.\n```\n\nKnown implementations: array-of-bytes, array-of-characters, java.io.BufferedInputStream, java.io.BufferedOutputStream, java.io.BufferedReader, java.io.BufferedWriter, java.io.File, java.io.InputStream, java.io.OutputStream, java.io.Reader, java.io.Writer, java.lang.String, java.net.Socket, java.net.URI, java.net.URL, nil, Object  \n\n### make-input-stream\n\n```\nUsage: (make-input-stream x opts)\n```\n\n```\nCreates a BufferedInputStream. See also IOFactory docs.\n```\n\nAdded in Clojure version 1.2\n\n### make-output-stream\n\n```\nUsage: (make-output-stream x opts)\n```\n\n```\nCreates a BufferedOutputStream. See also IOFactory docs.\n```\n\nAdded in Clojure version 1.2\n\n### make-reader\n\n```\nUsage: (make-reader x opts)\n```\n\n```\nCreates a BufferedReader. See also IOFactory docs.\n```\n\nAdded in Clojure version 1.2\n\n### make-writer\n\n```\nUsage: (make-writer x opts)\n```\n\n```\nCreates a BufferedWriter. See also IOFactory docs.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L69)\n\n## Public Variables and Functions"
- name: is
  id: clojure.test-api#clojure.test/is
  summary: null
  belongs_to: clojure.test
  description: |-
    ## is

    ```
    Usage: (is form)
           (is form msg)
    ```

    ```
    Generic assertion macro.  'form' is any predicate test.
    'msg' is an optional message to attach to the assertion.

    Example: (is (= 4 (+ 2 2)) "Two plus two should be 4")

    Special forms:

    (is (thrown? c body)) checks that an instance of c is thrown from
    body, fails if not; then returns the thing thrown.

    (is (thrown-with-msg? c re body)) checks that an instance of c is
    thrown AND that the message on the exception matches (with
    re-find) the regular expression re.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L554)
- name: isa?
  id: clojure.core-api#clojure.core/isa?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## isa?

    ```
    Usage: (isa? child parent)
           (isa? h child parent)
    ```

    ```
    Returns true if (= child parent), or child is directly or indirectly derived from
    parent, either via a Java type inheritance relationship or a
    relationship established via derive. h must be a hierarchy obtained
    from make-hierarchy, if not supplied defaults to the global
    hierarchy
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5589)
- name: iterate
  id: clojure.core-api#clojure.core/iterate
  summary: null
  belongs_to: clojure.core
  description: |-
    ## iterate

    ```
    Usage: (iterate f x)
    ```

    ```
    Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3030)
- name: iteration
  id: clojure.core-api#clojure.core/iteration
  summary: null
  belongs_to: clojure.core
  description: |-
    ## iteration

    ```
    Usage: (iteration step & {:keys [somef vf kf initk], :or {vf identity, kf identity, somef some?, initk nil}})
    ```

    ```
    Creates a seqable/reducible via repeated calls to step,
    a function of some (continuation token) 'k'. The first call to step
    will be passed initk, returning 'ret'. Iff (somef ret) is true,
    (vf ret) will be included in the iteration, else iteration will
    terminate and vf/kf will not be called. If (kf ret) is non-nil it
    will be passed to the next step call, else iteration will terminate.

    This can be used e.g. to consume APIs that return paginated or batched data.

     step - (possibly impure) fn of 'k' -> 'ret'

     :somef - fn of 'ret' -> logical true/false, default 'some?'
     :vf - fn of 'ret' -> 'v', a value produced by the iteration, default 'identity'
     :kf - fn of 'ret' -> 'next-k' or nil (signaling 'do not continue'), default 'identity'
     :initk - the first value passed to step, default 'nil'

    It is presumed that step with non-initk is unreproducible/non-idempotent.
    If step with initk is unreproducible it is on the consumer to not consume twice.
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7786)
- name: iterator-seq
  id: clojure.core-api#clojure.core/iterator-seq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## iterator-seq

    ```
    Usage: (iterator-seq iter)
    ```

    ```
    Returns a seq on a java.util.Iterator. Note that most collections
    providing iterators implement Iterable and thus support seq directly.
    Seqs cache values, thus iterator-seq should not be used on any
    iterator that repeatedly returns the same mutable object.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5746)
- name: javadoc
  id: clojure.java.javadoc-api#clojure.java.javadoc/javadoc
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.java.javadoc
  description: "## javadoc\n\n```\nUsage: (javadoc class-or-object)\n```\n\n```\nOpens a browser window displaying the javadoc for the argument.\nTries *local-javadocs* first, then *remote-javadocs*.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/3b6c31bc503afe8f25d01d6d7d05ebc960095abd/src/clj/clojure/java/javadoc.clj#L92)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.java.javadoc-api.html](https://clojure.github.io/clojure/clojure.java.javadoc-api.html)"
- name: JavaReflector
  id: clojure.reflect-api#clojure.reflect/JavaReflector
  summary: null
  belongs_to: clojure.reflect
  description: "## JavaReflector\n\nFields: \\[classloader\\]  \nProtocols: [Reflector](#clojure.reflect/Reflector)  \nInterfaces:"
- name: join
  id: clojure.string-api#clojure.string/join
  summary: null
  belongs_to: clojure.string
  description: |-
    ## join

    ```
    Usage: (join coll)
           (join separator coll)
    ```

    ```
    Returns a string of all elements in coll, as returned by (seq coll),
    separated by an optional separator.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L180)
- name: join
  id: clojure.set-api#clojure.set/join
  summary: null
  belongs_to: clojure.set
  description: |-
    ## join

    ```
    Usage: (join xrel yrel)
           (join xrel yrel km)
    ```

    ```
    When passed 2 rels, returns the rel corresponding to the natural
    join. When passed an additional keymap, joins on the corresponding
    keys.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L115)
- name: join-fixtures
  id: clojure.test-api#clojure.test/join-fixtures
  summary: null
  belongs_to: clojure.test
  description: |-
    ## join-fixtures

    ```
    Usage: (join-fixtures fixtures)
    ```

    ```
    Composes a collection of fixtures, in order.  Always returns a valid
    fixture function, even if the collection is empty.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L696)
- name: juxt
  id: clojure.core-api#clojure.core/juxt
  summary: null
  belongs_to: clojure.core
  description: |-
    ## juxt

    ```
    Usage: (juxt f)
           (juxt f g)
           (juxt f g h)
           (juxt f g h & fs)
    ```

    ```
    Takes a set of functions and returns a fn that is the juxtaposition
    of those fns.  The returned fn takes a variable number of args, and
    returns a vector containing the result of applying each fn to the
    args (left-to-right).
    ((juxt a b c) x) => [(a x) (b x) (c x)]
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2593)
- name: keep
  id: clojure.core-api#clojure.core/keep
  summary: null
  belongs_to: clojure.core
  description: |-
    ## keep

    ```
    Usage: (keep f)
           (keep f coll)
    ```

    ```
    Returns a lazy sequence of the non-nil results of (f item). Note,
    this means false return values will be included.  f must be free of
    side-effects.  Returns a transducer when no collection is provided.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7381)
- name: keep-indexed
  id: clojure.core-api#clojure.core/keep-indexed
  summary: null
  belongs_to: clojure.core
  description: |-
    ## keep-indexed

    ```
    Usage: (keep-indexed f)
           (keep-indexed f coll)
    ```

    ```
    Returns a lazy sequence of the non-nil results of (f index item). Note,
    this means false return values will be included.  f must be free of
    side-effects.  Returns a stateful transducer when no collection is
    provided.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7414)
- name: key
  id: clojure.core-api#clojure.core/key
  summary: null
  belongs_to: clojure.core
  description: |-
    ## key

    ```
    Usage: (key e)
    ```

    ```
    Returns the key of the map entry.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1582)
- name: keys
  id: clojure.core-api#clojure.core/keys
  summary: null
  belongs_to: clojure.core
  description: |-
    ## keys

    ```
    Usage: (keys map)
    ```

    ```
    Returns a sequence of the map's keys, in the same order as (seq map).
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1570)
- name: keyword
  id: clojure.core-api#clojure.core/keyword
  summary: null
  belongs_to: clojure.core
  description: |-
    ## keyword

    ```
    Usage: (keyword name)
           (keyword ns name)
    ```

    ```
    Returns a Keyword with the given namespace and name.  Do not use :
    in the keyword strings, it will be added automatically.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L616)
- name: keyword?
  id: clojure.core-api#clojure.core/keyword?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## keyword?

    ```
    Usage: (keyword? x)
    ```

    ```
    Return true if x is a Keyword
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L570)
- name: keywordize-keys
  id: clojure.walk-api#clojure.walk/keywordize-keys
  summary: null
  belongs_to: clojure.walk
  description: |-
    ## keywordize-keys

    ```
    Usage: (keywordize-keys m)
    ```

    ```
    Recursively transforms all map keys from strings to keywords.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L94)
- name: last
  id: clojure.core-api#clojure.core/last
  summary: null
  belongs_to: clojure.core
  description: |-
    ## last

    ```
    Usage: (last coll)
    ```

    ```
    Return the last item in coll, in linear time
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L264)
- name: last-index-of
  id: clojure.string-api#clojure.string/last-index-of
  summary: null
  belongs_to: clojure.string
  description: |-
    ## last-index-of

    ```
    Usage: (last-index-of s value)
           (last-index-of s value from-index)
    ```

    ```
    Return last index of value (string or char) in s, optionally
    searching backward from from-index. Return nil if value not found.
    ```

    Added in Clojure version 1.8

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L340)
- name: lazy-cat
  id: clojure.core-api#clojure.core/lazy-cat
  summary: null
  belongs_to: clojure.core
  description: "## lazy-cat\n\n```\nUsage: (lazy-cat & colls)\n```\n\n```\nExpands to code which yields a lazy sequence of the concatenation\nof the supplied colls.  Each coll expr is not evaluated until it is\nneeded. \n\n(lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4638)"
- name: lazy-seq
  id: clojure.core-api#clojure.core/lazy-seq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## lazy-seq

    ```
    Usage: (lazy-seq & body)
    ```

    ```
    Takes a body of expressions that returns an ISeq or nil, and yields
    a Seqable object that will invoke the body only the first time seq
    is called, and will cache the result and return it on all subsequent
    seq calls. See also - realized?
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L685)
- name: left
  id: clojure.zip-api#clojure.zip/left
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## left

    ```
    Usage: (left loc)
    ```

    ```
    Returns the loc of the left sibling of the node at this loc, or nil
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L166)
- name: leftmost
  id: clojure.zip-api#clojure.zip/leftmost
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## leftmost

    ```
    Usage: (leftmost loc)
    ```

    ```
    Returns the loc of the leftmost sibling of the node at this loc, or self
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L174)
- name: lefts
  id: clojure.zip-api#clojure.zip/lefts
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## lefts

    ```
    Usage: (lefts loc)
    ```

    ```
    Returns a seq of the left siblings of this loc
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L96)
- name: let
  id: clojure.core-api#clojure.core/let
  summary: null
  belongs_to: clojure.core
  description: |-
    ## let

    ```
    Usage: (let [bindings*] exprs*)
    ```

    ```
    binding => binding-form init-expr
    binding-form => name, or destructuring-form
    destructuring-form => map-destructure-form, or seq-destructure-form

    Evaluates the exprs in a lexical context in which the symbols in
    the binding-forms are bound to their respective init-exprs or parts
    therein.

    See https://clojure.org/reference/special_forms#binding-forms for
    more information about destructuring.
    ```

    ```
    Specs:
      Args: (cat
             :bindings :clojure.core.specs.alpha/bindings
             :body (* any?))
      Ret:  any?
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4498)
- name: letfn
  id: clojure.core-api#clojure.core/letfn
  summary: null
  belongs_to: clojure.core
  description: |-
    ## letfn

    ```
    Usage: (letfn [fnspecs*] exprs*)
    ```

    ```
    fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)

    Takes a vector of function specs and a body, and generates a set of
    bindings of functions to their names. All of the names are available
    in all of the definitions of the functions, as well as the body.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6581)
- name: line-seq
  id: clojure.core-api#clojure.core/line-seq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## line-seq

    ```
    Usage: (line-seq rdr)
    ```

    ```
    Returns the lines of text from rdr as a lazy sequence of strings.
    rdr must implement java.io.BufferedReader.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3086)
- name: list
  id: clojure.core-api#clojure.core/list
  summary: null
  belongs_to: clojure.core
  description: |-
    ## list

    ```
    Usage: (list & items)
    ```

    ```
    Creates a new list containing the items.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L16)
- name: list*
  id: clojure.core-api#clojure.core/list*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## list\*

    ```
    Usage: (list* args)
           (list* a args)
           (list* a b args)
           (list* a b c args)
           (list* a b c d & more)
    ```

    ```
    Creates a new seq containing the items prepended to the rest, the
    last of which will be treated as a sequence.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L650)
- name: list?
  id: clojure.core-api#clojure.core/list?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## list?

    ```
    Usage: (list? x)
    ```

    ```
    Returns true if x implements IPersistentList
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6254)
- name: load
  id: clojure.core-api#clojure.core/load
  summary: null
  belongs_to: clojure.core
  description: |-
    ## load

    ```
    Usage: (load & paths)
    ```

    ```
    Loads Clojure code from resources in classpath. A path is interpreted as
    classpath-relative if it begins with a slash or relative to the root
    directory for the current namespace otherwise.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6144)
- name: load-file
  id: clojure.core-api#clojure.core/load-file
  summary: null
  belongs_to: clojure.core
  description: |-
    ## load-file

    ```
    Usage: (load-file name)
    ```

    ```
    Sequentially read and evaluate the set of forms contained in the file.
    ```

    Added in Clojure version 1.0
- name: load-reader
  id: clojure.core-api#clojure.core/load-reader
  summary: null
  belongs_to: clojure.core
  description: |-
    ## load-reader

    ```
    Usage: (load-reader rdr)
    ```

    ```
    Sequentially read and evaluate the set of forms contained in the
    stream/file
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4083)
- name: load-script
  id: clojure.main-api#clojure.main/load-script
  summary: null
  belongs_to: clojure.main
  description: |-
    ## load-script

    ```
    Usage: (load-script path)
    ```

    ```
    Loads Clojure source from a file or resource given its path. Paths
    beginning with @ or @/ are considered relative to classpath.
    ```

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L468)
- name: load-string
  id: clojure.core-api#clojure.core/load-string
  summary: null
  belongs_to: clojure.core
  description: |-
    ## load-string

    ```
    Usage: (load-string s)
    ```

    ```
    Sequentially read and evaluate the set of forms contained in the
    string
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4090)
- name: loaded-libs
  id: clojure.core-api#clojure.core/loaded-libs
  summary: null
  belongs_to: clojure.core
  description: |-
    ## loaded-libs

    ```
    Usage: (loaded-libs)
    ```

    ```
    Returns a sorted set of symbols naming the currently loaded libs
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6139)
- name: locking
  id: clojure.core-api#clojure.core/locking
  summary: null
  belongs_to: clojure.core
  description: |-
    ## locking

    ```
    Usage: (locking x & body)
    ```

    ```
    Executes exprs in an implicit do, while holding the monitor of x.
    Will release the monitor of x in all circumstances.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1662)
- name: log
  id: clojure.math-api#clojure.math/log
  summary: null
  belongs_to: clojure.math
  description: |-
    ## log

    ```
    Usage: (log a)
    ```

    ```
    Returns the natural logarithm (base e) of a.
    If a is ##NaN or negative => ##NaN
    If a is ##Inf => ##Inf
    If a is zero => ##-Inf
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L136)
- name: log10
  id: clojure.math-api#clojure.math/log10
  summary: null
  belongs_to: clojure.math
  description: |-
    ## log10

    ```
    Usage: (log10 a)
    ```

    ```
    Returns the logarithm (base 10) of a.
    If a is ##NaN or negative => ##NaN
    If a is ##Inf => ##Inf
    If a is zero => ##-Inf
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log10-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L148)
- name: log1p
  id: clojure.math-api#clojure.math/log1p
  summary: null
  belongs_to: clojure.math
  description: |-
    ## log1p

    ```
    Usage: (log1p x)
    ```

    ```
    Returns ln(1+x). For small values of x, log1p(x) is more accurate than
    log(1.0+x).
    If x is ##NaN or < -1 => ##NaN
    If x is ##Inf => ##Inf
    If x is -1 => ##-Inf
    If x is 0 => 0 with sign matching x
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log1p-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L434)
- name: long
  id: clojure.core-api#clojure.core/long
  summary: null
  belongs_to: clojure.core
  description: |-
    ## long

    ```
    Usage: (long x)
    ```

    ```
    Coerce to long
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3481)
- name: long-array
  id: clojure.core-api#clojure.core/long-array
  summary: null
  belongs_to: clojure.core
  description: |-
    ## long-array

    ```
    Usage: (long-array size-or-seq)
           (long-array size init-val-or-seq)
    ```

    ```
    Creates an array of longs
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5365)
- name: longs
  id: clojure.core-api#clojure.core/longs
  summary: null
  belongs_to: clojure.core
  description: |-
    ## longs

    ```
    Usage: (longs xs)
    ```

    ```
    Casts to long[]
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5408)
- name: loop
  id: clojure.core-api#clojure.core/loop
  summary: null
  belongs_to: clojure.core
  description: |-
    ## loop

    ```
    Usage: (loop [bindings*] exprs*)
    ```

    ```
    Evaluates the exprs in a lexical context in which the symbols in
    the binding-forms are bound to their respective init-exprs or parts
    therein. Acts as a recur target.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4599)
- name: lower-case
  id: clojure.string-api#clojure.string/lower-case
  summary: null
  belongs_to: clojure.string
  description: |-
    ## lower-case

    ```
    Usage: (lower-case s)
    ```

    ```
    Converts string to all lower-case.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L213)
- name: macroexpand
  id: clojure.core-api#clojure.core/macroexpand
  summary: null
  belongs_to: clojure.core
  description: |-
    ## macroexpand

    ```
    Usage: (macroexpand form)
    ```

    ```
    Repeatedly calls macroexpand-1 on form until it no longer
    represents a macro form, then returns it.  Note neither
    macroexpand-1 nor macroexpand expand macros in subforms.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4027)
- name: macroexpand-1
  id: clojure.core-api#clojure.core/macroexpand-1
  summary: null
  belongs_to: clojure.core
  description: |-
    ## macroexpand-1

    ```
    Usage: (macroexpand-1 form)
    ```

    ```
    If form represents a macro form, returns its expansion,
    else returns form.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4019)
- name: macroexpand-all
  id: clojure.walk-api#clojure.walk/macroexpand-all
  summary: null
  belongs_to: clojure.walk
  description: |-
    ## macroexpand-all

    ```
    Usage: (macroexpand-all form)
    ```

    ```
    Recursively performs all possible macroexpansions in form.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L126)
- name: main
  id: clojure.main-api#clojure.main/main
  summary: null
  belongs_to: clojure.main
  description: |-
    ## main

    ```
    Usage: (main & args)
    ```

    ```
    Usage: java -cp clojure.jar clojure.main [init-opt*] [main-opt] [arg*]

    With no options or args, runs an interactive Read-Eval-Print Loop

    init options:
      -i, --init path     Load a file or resource
      -e, --eval string   Evaluate expressions in string; print non-nil values
      --report target     Report uncaught exception to "file" (default), "stderr",
                          or "none", overrides System property clojure.main.report

    main options:
      -m, --main ns-name  Call the -main function from a namespace with args
      -r, --repl          Run a repl
      path                Run a script from a file or resource
      -                   Run a script from standard input
      -h, -?, --help      Print this help message and exit

    operation:

      - Establishes thread-local bindings for commonly set!-able vars
      - Enters the user namespace
      - Binds *command-line-args* to a seq of strings containing command line
        args that appear after any main option
      - Runs all init options in order
      - Calls a -main function or runs a repl or script if requested

    The init options may be repeated and mixed freely, but must appear before
    any main option. The appearance of any eval option before running a repl
    suppresses the usual repl greeting message: "Clojure ~(clojure-version)".

    Paths may be absolute or relative in the filesystem or relative to
    classpath. Classpath-relative paths have prefix of @ or @/
    ```

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L616)
- name: make-array
  id: clojure.core-api#clojure.core/make-array
  summary: null
  belongs_to: clojure.core
  description: |-
    ## make-array

    ```
    Usage: (make-array type len)
           (make-array type dim & more-dims)
    ```

    ```
    Creates and returns an array of instances of the specified class of
    the specified dimension(s).  Note that a class object is required.
    Class objects can be obtained by using their imported or
    fully-qualified name.  Class objects for the primitive types can be
    obtained using, e.g., Integer/TYPE.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3987)
- name: make-hierarchy
  id: clojure.core-api#clojure.core/make-hierarchy
  summary: null
  belongs_to: clojure.core
  description: |-
    ## make-hierarchy

    ```
    Usage: (make-hierarchy)
    ```

    ```
    Creates a hierarchy object for use with derive, isa? etc.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5553)
- name: make-node
  id: clojure.zip-api#clojure.zip/make-node
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## make-node

    ```
    Usage: (make-node loc node children)
    ```

    ```
    Returns a new branch node, given an existing node and new
    children. The loc is only used to supply the constructor.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L83)
- name: make-parents
  id: clojure.java.io-api#clojure.java.io/make-parents
  summary: null
  belongs_to: clojure.java.io
  description: |-
    ## make-parents

    ```
    Usage: (make-parents f & more)
    ```

    ```
    Given the same arg(s) as for file, creates all parent directories of
    the file they represent.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L438)
- name: map
  id: clojure.core-api#clojure.core.reducers/map
  summary: null
  belongs_to: clojure.core
  description: |-
    ## map

    ```
    Usage: (map f)
           (map f coll)
    ```

    ```
    Applies f to every value in the reduction of coll. Foldable.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L128)
- name: map
  id: clojure.core-api#clojure.core/map
  summary: null
  belongs_to: clojure.core
  description: |-
    ## map

    ```
    Usage: (map f)
           (map f coll)
           (map f c1 c2)
           (map f c1 c2 c3)
           (map f c1 c2 c3 & colls)
    ```

    ```
    Returns a lazy sequence consisting of the result of applying f to
    the set of first items of each coll, followed by applying f to the
    set of second items in each coll, until any one of the colls is
    exhausted.  Any remaining items in other colls are ignored. Function
    f should accept number-of-colls arguments. Returns a transducer when
    no collection is provided.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2744)
- name: map->Constructor
  id: clojure.reflect-api#clojure.reflect/map->Constructor
  summary: null
  belongs_to: clojure.reflect
  description: |-
    ## map-\>Constructor

    ```
    Usage: (map->Constructor m#)
    ```

    ```
    Factory function for class clojure.reflect.Constructor, taking a map of keywords to field values.
    ```

    [Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L115)
- name: map->Field
  id: clojure.reflect-api#clojure.reflect/map->Field
  summary: null
  belongs_to: clojure.reflect
  description: |-
    ## map-\>Field

    ```
    Usage: (map->Field m#)
    ```

    ```
    Factory function for class clojure.reflect.Field, taking a map of keywords to field values.
    ```

    [Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L154)
- name: map->Method
  id: clojure.reflect-api#clojure.reflect/map->Method
  summary: null
  belongs_to: clojure.reflect
  description: |-
    ## map-\>Method

    ```
    Usage: (map->Method m#)
    ```

    ```
    Factory function for class clojure.reflect.Method, taking a map of keywords to field values.
    ```

    [Source](https://github.com/clojure/clojure/blob/b0e5056217454073288e1643cd19e44999f081b8/src/clj/clojure/reflect/java.clj#L134)
- name: map-entry?
  id: clojure.core-api#clojure.core/map-entry?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## map-entry?

    ```
    Usage: (map-entry? x)
    ```

    ```
    Return true if x is a map entry
    ```

    Added in Clojure version 1.8

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1492)
- name: map-indexed
  id: clojure.core-api#clojure.core/map-indexed
  summary: null
  belongs_to: clojure.core
  description: |-
    ## map-indexed

    ```
    Usage: (map-indexed f)
           (map-indexed f coll)
    ```

    ```
    Returns a lazy sequence consisting of the result of applying f to 0
    and the first item of coll, followed by applying f to 1 and the second
    item in coll, etc, until coll is exhausted. Thus function f should
    accept 2 arguments, index and item. Returns a stateful transducer when
    no collection is provided.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7351)
- name: map-invert
  id: clojure.set-api#clojure.set/map-invert
  summary: null
  belongs_to: clojure.set
  description: |-
    ## map-invert

    ```
    Usage: (map-invert m)
    ```

    ```
    Returns the map with the vals mapped to the keys.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L106)
- name: map?
  id: clojure.core-api#clojure.core/map?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## map?

    ```
    Usage: (map? x)
    ```

    ```
    Return true if x implements IPersistentMap
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L169)
- name: mapcat
  id: clojure.core-api#clojure.core/mapcat
  summary: null
  belongs_to: clojure.core
  description: |-
    ## mapcat

    ```
    Usage: (mapcat f)
           (mapcat f & colls)
    ```

    ```
    Returns the result of applying concat to the result of applying map
    to f and colls.  Thus function f should return a collection. Returns
    a transducer when no collections are provided
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2800)
- name: mapcat
  id: clojure.core-api#clojure.core.reducers/mapcat
  summary: null
  belongs_to: clojure.core
  description: |-
    ## mapcat

    ```
    Usage: (mapcat f)
           (mapcat f coll)
    ```

    ```
    Applies f to every value in the reduction of coll, concatenating the result
    colls of (f val). Foldable.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L138)
- name: mapv
  id: clojure.core-api#clojure.core/mapv
  summary: null
  belongs_to: clojure.core
  description: |-
    ## mapv

    ```
    Usage: (mapv f coll)
           (mapv f c1 c2)
           (mapv f c1 c2 c3)
           (mapv f c1 c2 c3 & colls)
    ```

    ```
    Returns a vector consisting of the result of applying f to the
    set of first items of each coll, followed by applying f to the set
    of second items in each coll, until any one of the colls is
    exhausted.  Any remaining items in other colls are ignored. Function
    f should accept number-of-colls arguments.
    ```

    Added in Clojure version 1.4

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6970)
- name: max
  id: clojure.core-api#clojure.core/max
  summary: null
  belongs_to: clojure.core
  description: |-
    ## max

    ```
    Usage: (max x)
           (max x y)
           (max x y & more)
    ```

    ```
    Returns the greatest of the nums.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1117)
- name: max-key
  id: clojure.core-api#clojure.core/max-key
  summary: null
  belongs_to: clojure.core
  description: |-
    ## max-key

    ```
    Usage: (max-key k x)
           (max-key k x y)
           (max-key k x y & more)
    ```

    ```
    Returns the x for which (k x), a number, is greatest.

    If there are multiple such xs, the last one is returned.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5014)
- name: memfn
  id: clojure.core-api#clojure.core/memfn
  summary: null
  belongs_to: clojure.core
  description: |-
    ## memfn

    ```
    Usage: (memfn name & args)
    ```

    ```
    Expands into code that creates a fn that expects to be passed an
    object and any args and calls the named instance method on the
    object passing the args. Use when you want to treat a Java method as
    a first-class fn. name may be type-hinted with the method receiver's
    type in order to avoid reflective calls.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3872)
- name: memoize
  id: clojure.core-api#clojure.core/memoize
  summary: null
  belongs_to: clojure.core
  description: |-
    ## memoize

    ```
    Usage: (memoize f)
    ```

    ```
    Returns a memoized version of a referentially transparent function. The
    memoized version of the function keeps a cache of the mapping from arguments
    to results and, when calls with the same arguments are repeated often, has
    higher performance at the expense of higher memory use.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6378)
- name: merge
  id: clojure.core-api#clojure.core/merge
  summary: null
  belongs_to: clojure.core
  description: |-
    ## merge

    ```
    Usage: (merge & maps)
    ```

    ```
    Returns a map that consists of the rest of the maps conj-ed onto
    the first.  If a key occurs in more than one map, the mapping from
    the latter (left-to-right) will be the mapping in the result.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3058)
- name: merge-with
  id: clojure.core-api#clojure.core/merge-with
  summary: null
  belongs_to: clojure.core
  description: |-
    ## merge-with

    ```
    Usage: (merge-with f & maps)
    ```

    ```
    Returns a map that consists of the rest of the maps conj-ed onto
    the first.  If a key occurs in more than one map, the mapping(s)
    from the latter (left-to-right) will be combined with the mapping in
    the result by calling (f val-in-result val-in-latter).
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3068)
- name: meta
  id: clojure.core-api#clojure.core/meta
  summary: null
  belongs_to: clojure.core
  description: |-
    ## meta

    ```
    Usage: (meta obj)
    ```

    ```
    Returns the metadata of obj, returns nil if there is no metadata.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L204)
- name: Method
  id: clojure.reflect-api#clojure.reflect/Method
  summary: null
  belongs_to: clojure.reflect
  description: "## Method\n\nFields: \\[name return-type declaring-class parameter-types exception-types flags\\]  \nProtocols:  \nInterfaces: clojure.lang.IHashEq, clojure.lang.IKeywordLookup, clojure.lang.ILookup, clojure.lang.IObj, clojure.lang.IPersistentMap, java.io.Serializable, java.util.Map  \n\n## Public Variables and Functions"
- name: methods
  id: clojure.core-api#clojure.core/methods
  summary: null
  belongs_to: clojure.core
  description: |-
    ## methods

    ```
    Usage: (methods multifn)
    ```

    ```
    Given a multimethod, returns a map of dispatch values -> dispatch fns
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1828)
- name: min
  id: clojure.core-api#clojure.core/min
  summary: null
  belongs_to: clojure.core
  description: |-
    ## min

    ```
    Usage: (min x)
           (min x y)
           (min x y & more)
    ```

    ```
    Returns the least of the nums.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1127)
- name: min-key
  id: clojure.core-api#clojure.core/min-key
  summary: null
  belongs_to: clojure.core
  description: |-
    ## min-key

    ```
    Usage: (min-key k x)
           (min-key k x y)
           (min-key k x y & more)
    ```

    ```
    Returns the x for which (k x), a number, is least.

    If there are multiple such xs, the last one is returned.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5034)
- name: mix-collection-hash
  id: clojure.core-api#clojure.core/mix-collection-hash
  summary: null
  belongs_to: clojure.core
  description: |-
    ## mix-collection-hash

    ```
    Usage: (mix-collection-hash hash-basis count)
    ```

    ```
    Mix final collection hash for ordered or unordered collections.
    hash-basis is the combined collection hash, count is the number
    of elements included in the basis. Note this is the hash code
    consistent with =, different from .hashCode.
    See http://clojure.org/data_structures#hash for full algorithms.
    ```

    Added in Clojure version 1.6

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5200)
- name: mod
  id: clojure.core-api#clojure.core/mod
  summary: null
  belongs_to: clojure.core
  description: |-
    ## mod

    ```
    Usage: (mod num div)
    ```

    ```
    Modulus of num and div. Truncates toward negative infinity.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3567)
- name: monitor-enter
  id: clojure.core-api#clojure.core/monitor-enter
  summary: null
  belongs_to: clojure.core
  description: |-
    ## monitor-enter

    ```
    Usage: (monitor-enter x)
    ```

    ```
    Synchronization primitive that should be avoided
    in user code. Use the 'locking' macro.

    Please see https://clojure.org/reference/special_forms#monitor-enter
    ```

    Added in Clojure version 1.0
- name: monitor-exit
  id: clojure.core-api#clojure.core/monitor-exit
  summary: null
  belongs_to: clojure.core
  description: |-
    ## monitor-exit

    ```
    Usage: (monitor-exit x)
    ```

    ```
    Synchronization primitive that should be avoided
    in user code. Use the 'locking' macro.

    Please see https://clojure.org/reference/special_forms#monitor-exit
    ```

    Added in Clojure version 1.0
- name: monoid
  id: clojure.core-api#clojure.core.reducers/monoid
  summary: null
  belongs_to: clojure.core
  description: |-
    ## monoid

    ```
    Usage: (monoid op ctor)
    ```

    ```
    Builds a combining fn out of the supplied operator and identity
    constructor. op must be associative and ctor called with no args
    must return an identity value for it.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L287)
- name: multiply-exact
  id: clojure.math-api#clojure.math/multiply-exact
  summary: null
  belongs_to: clojure.math
  description: |-
    ## multiply-exact

    ```
    Usage: (multiply-exact x y)
    ```

    ```
    Returns the product of x and y, throws ArithmeticException on overflow.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#multiplyExact-long-long-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L295)
- name: name
  id: clojure.core-api#clojure.core/name
  summary: null
  belongs_to: clojure.core
  description: |-
    ## name

    ```
    Usage: (name x)
    ```

    ```
    Returns the name String of a string, symbol or keyword.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1604)
- name: namespace
  id: clojure.core-api#clojure.core/namespace
  summary: null
  belongs_to: clojure.core
  description: |-
    ## namespace

    ```
    Usage: (namespace x)
    ```

    ```
    Returns the namespace String of a symbol or keyword, or nil if not present.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1612)
- name: namespace-munge
  id: clojure.core-api#clojure.core/namespace-munge
  summary: null
  belongs_to: clojure.core
  description: |-
    ## namespace-munge

    ```
    Usage: (namespace-munge ns)
    ```

    ```
    Convert a Clojure namespace name to a legal Java package name.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L13)
- name: NaN?
  id: clojure.core-api#clojure.core/NaN?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## NaN?

    ```
    Usage: (NaN? num)
    ```

    ```
    Returns true if num is NaN, else false
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8090)
- name: nat-int?
  id: clojure.core-api#clojure.core/nat-int?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## nat-int?

    ```
    Usage: (nat-int? x)
    ```

    ```
    Return true if x is a non-negative fixed precision integer
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1434)
- name: nav
  id: clojure.datafy-api#clojure.datafy/nav
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.datafy
  description: "## nav\n\n```\nUsage: (nav coll k v)\n```\n\n```\nReturns (possibly transformed) v in the context of coll and k (a\nkey/index or nil). Callers should attempt to provide the key/index\ncontext k for Indexed/Associative/ILookup colls if possible, but not\nto fabricate one e.g. for sequences (pass nil). nav returns the\nvalue of clojure.core.protocols/nav.\n```\n\n[Source](https://github.com/clojure/clojure/blob/b70db9639f9acddcabf7f760ea4bb050d6bfaa16/src/clj/clojure/datafy.clj#L30)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.datafy-api.html](https://clojure.github.io/clojure/clojure.datafy-api.html)"
- name: Navigable
  id: clojure.core-api#clojure.core.protocols/Navigable
  summary: null
  belongs_to: clojure.core
  description: "## Navigable\n\nKnown implementations: Object  \n\n### nav\n\n```\nUsage: (nav coll k v)\n```\n\n```\nreturn (possibly transformed) v in the context of coll and k (a key/index or nil),\ndefaults to returning v.\n```\n\n[Source](https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/clj/clojure/core/protocols.clj#L194)  \n\n## clojure.core.reducers\n\n```\nA library for reduction and parallel folding. Alpha and subject\nto change.\n```\n\n## Types"
- name: neg-int?
  id: clojure.core-api#clojure.core/neg-int?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## neg-int?

    ```
    Usage: (neg-int? x)
    ```

    ```
    Return true if x is a negative fixed precision integer
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1428)
- name: neg?
  id: clojure.core-api#clojure.core/neg?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## neg?

    ```
    Usage: (neg? num)
    ```

    ```
    Returns true if num is less than zero, else false
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1268)
- name: negate-exact
  id: clojure.math-api#clojure.math/negate-exact
  summary: null
  belongs_to: clojure.math
  description: |-
    ## negate-exact

    ```
    Usage: (negate-exact a)
    ```

    ```
    Returns the negation of a, throws ArithmeticException on overflow.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#negateExact-long-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L322)
- name: new
  id: clojure.core-api#clojure.core/new
  summary: null
  belongs_to: clojure.core
  description: |-
    ## new

    ```
    Usage: (Classname. args*)
           (new Classname args*)
    ```

    ```
    The args, if any, are evaluated from left to right, and
    passed to the constructor of the class named by Classname. The
    constructed object is returned.

    Please see https://clojure.org/java_interop#new
    ```

    Added in Clojure version 1.0
- name: newline
  id: clojure.core-api#clojure.core/newline
  summary: null
  belongs_to: clojure.core
  description: |-
    ## newline

    ```
    Usage: (newline)
    ```

    ```
    Writes a platform-specific newline to *out*
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3698)
- name: next
  id: clojure.core-api#clojure.core/next
  summary: null
  belongs_to: clojure.core
  description: |-
    ## next

    ```
    Usage: (next coll)
    ```

    ```
    Returns a seq of the items after the first. Calls seq on its
    argument.  If there are no more items, returns nil.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L57)
- name: next
  id: clojure.zip-api#clojure.zip/next
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## next

    ```
    Usage: (next loc)
    ```

    ```
    Moves to the next loc in the hierarchy, depth-first. When reaching
    the end, returns a distinguished loc detectable via end?. If already
    at the end, stays there.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L230)
- name: next-after
  id: clojure.math-api#clojure.math/next-after
  summary: null
  belongs_to: clojure.math
  description: |-
    ## next-after

    ```
    Usage: (next-after start direction)
    ```

    ```
    Returns the adjacent floating point number to start in the direction of
    the second argument. If the arguments are equal, the second is returned.
    If either arg is #NaN => #NaN
    If both arguments are signed zeros => direction
    If start is +-Double/MIN_VALUE and direction would cause a smaller magnitude
      => zero with sign matching start
    If start is ##Inf or ##-Inf and direction would cause a smaller magnitude
      => Double/MAX_VALUE with same sign as start
    If start is equal to +=Double/MAX_VALUE and direction would cause a larger magnitude
      => ##Inf or ##-Inf with sign matching start
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextAfter-double-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L469)
- name: next-down
  id: clojure.math-api#clojure.math/next-down
  summary: null
  belongs_to: clojure.math
  description: |-
    ## next-down

    ```
    Usage: (next-down d)
    ```

    ```
    Returns the adjacent double of d in the direction of ##-Inf.
    If d is ##NaN => ##NaN
    If d is ##-Inf => ##-Inf
    If d is zero => -Double/MIN_VALUE
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L499)
- name: next-up
  id: clojure.math-api#clojure.math/next-up
  summary: null
  belongs_to: clojure.math
  description: |-
    ## next-up

    ```
    Usage: (next-up d)
    ```

    ```
    Returns the adjacent double of d in the direction of ##Inf.
    If d is ##NaN => ##NaN
    If d is ##Inf => ##Inf
    If d is zero => Double/MIN_VALUE
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextUp-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L487)
- name: nfirst
  id: clojure.core-api#clojure.core/nfirst
  summary: null
  belongs_to: clojure.core
  description: |-
    ## nfirst

    ```
    Usage: (nfirst x)
    ```

    ```
    Same as (next (first x))
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L107)
- name: nil?
  id: clojure.core-api#clojure.core/nil?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## nil?

    ```
    Usage: (nil? x)
    ```

    ```
    Returns true if x is nil, false otherwise.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L438)
- name: nnext
  id: clojure.core-api#clojure.core/nnext
  summary: null
  belongs_to: clojure.core
  description: |-
    ## nnext

    ```
    Usage: (nnext x)
    ```

    ```
    Same as (next (next x))
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L121)
- name: node
  id: clojure.zip-api#clojure.zip/node
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## node

    ```
    Usage: (node loc)
    ```

    ```
    Returns the node at loc
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L64)
- name: not
  id: clojure.core-api#clojure.core/not
  summary: null
  belongs_to: clojure.core
  description: |-
    ## not

    ```
    Usage: (not x)
    ```

    ```
    Returns true if x is logical false, false otherwise.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L526)
- name: not-any?
  id: clojure.core-api#clojure.core/not-any?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## not-any?

    ```
    Usage: (not-any? pred coll)
    ```

    ```
    Returns false if (pred x) is logical true for any x in coll,
    else true.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2720)
- name: not-empty
  id: clojure.core-api#clojure.core/not-empty
  summary: null
  belongs_to: clojure.core
  description: |-
    ## not-empty

    ```
    Usage: (not-empty coll)
    ```

    ```
    If coll is empty, returns nil, else coll
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5562)
- name: not-every?
  id: clojure.core-api#clojure.core/not-every?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## not-every?

    ```
    Usage: (not-every? pred coll)
    ```

    ```
    Returns false if (pred x) is logical true for every x in
    coll, else true.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2701)
- name: not=
  id: clojure.core-api#clojure.core/not=
  summary: null
  belongs_to: clojure.core
  description: |-
    ## not=

    ```
    Usage: (not= x)
           (not= x y)
           (not= x y & more)
    ```

    ```
    Same as (not (= obj1 obj2))
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L821)
- name: ns
  id: clojure.core-api#clojure.core/ns
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ns

    ```
    Usage: (ns name docstring? attr-map? references*)
    ```

    ```
    Sets *ns* to the namespace named by name (unevaluated), creating it
    if needed.  references can be zero or more of: (:refer-clojure ...)
    (:require ...) (:use ...) (:import ...) (:load ...) (:gen-class)
    with the syntax of refer-clojure/require/use/import/load/gen-class
    respectively, except the arguments are unevaluated and need not be
    quoted. (:gen-class ...), when supplied, defaults to :name
    corresponding to the ns name, :main true, :impl-ns same as ns, and
    :init-impl-ns true. All options of gen-class are
    supported. The :gen-class directive is ignored when not
    compiling. If :gen-class is not supplied, when compiled only an
    nsname__init.class will be generated. If :refer-clojure is not used, a
    default (refer 'clojure.core) is used.  Use of ns is preferred to
    individual calls to in-ns/require/use/import:

    (ns foo.bar
      (:refer-clojure :exclude [ancestors printf])
      (:require (clojure.contrib sql combinatorics))
      (:use (my.lib this that))
      (:import (java.util Date Timer Random)
               (java.sql Connection Statement)))
    ```

    ```
    Specs:
      Args: (cat
             :ns-name simple-symbol?
             :docstring (? string?)
             :attr-map (? map?)
             :ns-clauses :clojure.core.specs.alpha/ns-clauses)
      Ret:  any?
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5789)
- name: ns-aliases
  id: clojure.core-api#clojure.core/ns-aliases
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ns-aliases

    ```
    Usage: (ns-aliases ns)
    ```

    ```
    Returns a map of the aliases for the namespace.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4275)
- name: ns-imports
  id: clojure.core-api#clojure.core/ns-imports
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ns-imports

    ```
    Usage: (ns-imports ns)
    ```

    ```
    Returns a map of the import mappings for the namespace.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4201)
- name: ns-interns
  id: clojure.core-api#clojure.core/ns-interns
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ns-interns

    ```
    Usage: (ns-interns ns)
    ```

    ```
    Returns a map of the intern mappings for the namespace.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4208)
- name: ns-map
  id: clojure.core-api#clojure.core/ns-map
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ns-map

    ```
    Usage: (ns-map ns)
    ```

    ```
    Returns a map of all the mappings for the namespace.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4172)
- name: ns-name
  id: clojure.core-api#clojure.core/ns-name
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ns-name

    ```
    Usage: (ns-name ns)
    ```

    ```
    Returns the name of the namespace, a symbol.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4165)
- name: ns-publics
  id: clojure.core-api#clojure.core/ns-publics
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ns-publics

    ```
    Usage: (ns-publics ns)
    ```

    ```
    Returns a map of the public intern mappings for the namespace.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4190)
- name: ns-refers
  id: clojure.core-api#clojure.core/ns-refers
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ns-refers

    ```
    Usage: (ns-refers ns)
    ```

    ```
    Returns a map of the refer mappings for the namespace.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4255)
- name: ns-resolve
  id: clojure.core-api#clojure.core/ns-resolve
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ns-resolve

    ```
    Usage: (ns-resolve ns sym)
           (ns-resolve ns env sym)
    ```

    ```
    Returns the var or Class to which a symbol will be resolved in the
    namespace (unless found in the environment), else nil.  Note that
    if the symbol is fully qualified, the var/Class to which it resolves
    need not be present in the namespace.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4360)
- name: ns-unalias
  id: clojure.core-api#clojure.core/ns-unalias
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ns-unalias

    ```
    Usage: (ns-unalias ns sym)
    ```

    ```
    Removes the alias for the symbol from the namespace.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4282)
- name: ns-unmap
  id: clojure.core-api#clojure.core/ns-unmap
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ns-unmap

    ```
    Usage: (ns-unmap ns sym)
    ```

    ```
    Removes the mappings for the symbol from the namespace.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4179)
- name: nth
  id: clojure.core-api#clojure.core/nth
  summary: null
  belongs_to: clojure.core
  description: |-
    ## nth

    ```
    Usage: (nth coll index)
           (nth coll index not-found)
    ```

    ```
    Returns the value at the index. get returns nil if index out of
    bounds, nth throws an exception unless not-found is supplied.  nth
    also works for strings, Java arrays, regex Matchers and Lists, and,
    in O(n) time, for sequences.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L891)
- name: nthnext
  id: clojure.core-api#clojure.core/nthnext
  summary: null
  belongs_to: clojure.core
  description: |-
    ## nthnext

    ```
    Usage: (nthnext coll n)
    ```

    ```
    Returns the nth next of coll, (seq coll) when n is 0.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3165)
- name: nthrest
  id: clojure.core-api#clojure.core/nthrest
  summary: null
  belongs_to: clojure.core
  description: |-
    ## nthrest

    ```
    Usage: (nthrest coll n)
    ```

    ```
    Returns the nth rest of coll, coll when n is 0.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3175)
- name: num
  id: clojure.core-api#clojure.core/num
  summary: null
  belongs_to: clojure.core
  description: |-
    ## num

    ```
    Usage: (num x)
    ```

    ```
    Coerce to Number
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3474)
- name: number?
  id: clojure.core-api#clojure.core/number?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## number?

    ```
    Usage: (number? x)
    ```

    ```
    Returns true if x is a Number
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3560)
- name: numerator
  id: clojure.core-api#clojure.core/numerator
  summary: null
  belongs_to: clojure.core
  description: |-
    ## numerator

    ```
    Usage: (numerator r)
    ```

    ```
    Returns the numerator part of a Ratio.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3583)
- name: object-array
  id: clojure.core-api#clojure.core/object-array
  summary: null
  belongs_to: clojure.core
  description: |-
    ## object-array

    ```
    Usage: (object-array size-or-seq)
    ```

    ```
    Creates an array of objects
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5350)
- name: odd?
  id: clojure.core-api#clojure.core/odd?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## odd?

    ```
    Usage: (odd? n)
    ```

    ```
    Returns true if n is odd, throws an exception if n is not an integer
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1408)
- name: or
  id: clojure.core-api#clojure.core/or
  summary: null
  belongs_to: clojure.core
  description: |-
    ## or

    ```
    Usage: (or)
           (or x)
           (or x & next)
    ```

    ```
    Evaluates exprs one at a time, from left to right. If a form
    returns a logical true value, or returns that value and doesn't
    evaluate any of the other expressions, otherwise it returns the
    value of the last expression. (or) returns nil.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L856)
- name: output-stream
  id: clojure.java.io-api#clojure.java.io/output-stream
  summary: null
  belongs_to: clojure.java.io
  description: |-
    ## output-stream

    ```
    Usage: (output-stream x & opts)
    ```

    ```
    Attempts to coerce its argument into an open java.io.OutputStream.
    Default implementations always return a java.io.BufferedOutputStream.

    Default implementations are defined for OutputStream, File, URI, URL,
    Socket, and String arguments.

    If the argument is a String, it tries to resolve it first as a URI, then
    as a local file name.  URIs with a 'file' protocol are converted to
    local file names.

    Should be used inside with-open to ensure the OutputStream is
    properly closed.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L138)
- name: parents
  id: clojure.core-api#clojure.core/parents
  summary: null
  belongs_to: clojure.core
  description: |-
    ## parents

    ```
    Usage: (parents tag)
           (parents h tag)
    ```

    ```
    Returns the immediate parents of tag, either via a Java type
    inheritance relationship or a relationship established via derive. h
    must be a hierarchy obtained from make-hierarchy, if not supplied
    defaults to the global hierarchy
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5610)
- name: parse
  id: clojure.xml-api#clojure.xml/parse
  summary: null
  belongs_to: clojure.xml
  description: |-
    ## parse

    ```
    Usage: (parse s)
           (parse s startparse)
    ```

    ```
    Parses and loads the source s, which can be a File, InputStream or
    String naming a URI. Returns a tree of the xml/element struct-map,
    which has the keys :tag, :attrs, and :content. and accessor fns tag,
    attrs, and content. Other parsers can be supplied by passing
    startparse, a fn taking a source and a ContentHandler and returning
    a parser.

    Prior to 1.11, used startparse-sax by default. As of 1.11, uses
    startparse-sax-safe, which disables XXE (XML External Entity)
    processing. Pass startparse-sax to revert to prior behavior.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/4a4a6e7717d411679820c4a3ce735a77aef45cc3/src/clj/clojure/xml.clj#L106)
- name: parse-boolean
  id: clojure.core-api#clojure.core/parse-boolean
  summary: null
  belongs_to: clojure.core
  description: |-
    ## parse-boolean

    ```
    Usage: (parse-boolean s)
    ```

    ```
    Parse strings "true" or "false" and return a boolean, or nil if invalid
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8079)
- name: parse-double
  id: clojure.core-api#clojure.core/parse-double
  summary: null
  belongs_to: clojure.core
  description: |-
    ## parse-double

    ```
    Usage: (parse-double s)
    ```

    ```
    Parse string with floating point components and return a Double value,
    or nil if parse fails.

    Grammar: https://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#valueOf-java.lang.String-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8055)
- name: parse-long
  id: clojure.core-api#clojure.core/parse-long
  summary: null
  belongs_to: clojure.core
  description: |-
    ## parse-long

    ```
    Usage: (parse-long s)
    ```

    ```
    Parse string of decimal digits with optional leading -/+ and return a
    Long value, or nil if parse fails
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8044)
- name: parse-timestamp
  id: clojure.instant-api#clojure.instant/parse-timestamp
  summary: null
  belongs_to: clojure.instant
  description: |-
    ## parse-timestamp

    ```
    Usage: (parse-timestamp new-instant cs)
    ```

    ```
    Parse a string containing an RFC3339-like like timestamp.

    The function new-instant is called with the following arguments.

                    min  max           default
                    ---  ------------  -------
      years          0           9999      N/A (s must provide years)
      months         1             12        1
      days           1             31        1 (actual max days depends
      hours          0             23        0  on month and year)
      minutes        0             59        0
      seconds        0             60        0 (though 60 is only valid
      nanoseconds    0      999999999        0  when minutes is 59)
      offset-sign   -1              1        0
      offset-hours   0             23        0
      offset-minutes 0             59        0

    These are all integers and will be non-nil. (The listed defaults
    will be passed if the corresponding field is not present in s.)

    Grammar (of s):

      date-fullyear   = 4DIGIT
      date-month      = 2DIGIT  ; 01-12
      date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on
                                ; month/year
      time-hour       = 2DIGIT  ; 00-23
      time-minute     = 2DIGIT  ; 00-59
      time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second
                                ; rules
      time-secfrac    = '.' 1*DIGIT
      time-numoffset  = ('+' / '-') time-hour ':' time-minute
      time-offset     = 'Z' / time-numoffset

      time-part       = time-hour [ ':' time-minute [ ':' time-second
                        [time-secfrac] [time-offset] ] ]

      timestamp       = date-year [ '-' date-month [ '-' date-mday
                        [ 'T' time-part ] ] ]

    Unlike RFC3339:

      - we only parse the timestamp format
      - timestamp can elide trailing components
      - time-offset is optional (defaults to +00:00)

    Though time-offset is syntactically optional, a missing time-offset
    will be treated as if the time-offset zero (+00:00) had been
    specified.
    ```

    [Source](https://github.com/clojure/clojure/blob/385d0593efa658ada19f9a55af39cef146c75341/src/clj/clojure/instant.clj#L53)
- name: parse-uuid
  id: clojure.core-api#clojure.core/parse-uuid
  summary: null
  belongs_to: clojure.core
  description: |-
    ## parse-uuid

    ```
    Usage: (parse-uuid s)
    ```

    ```
    Parse a string representing a UUID and return a java.util.UUID instance,
    or nil if parse fails.

    Grammar: https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html#toString--
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8068)
- name: partial
  id: clojure.core-api#clojure.core/partial
  summary: null
  belongs_to: clojure.core
  description: |-
    ## partial

    ```
    Usage: (partial f)
           (partial f arg1)
           (partial f arg1 arg2)
           (partial f arg1 arg2 arg3)
           (partial f arg1 arg2 arg3 & more)
    ```

    ```
    Takes a function f and fewer than the normal arguments to f, and
    returns a fn that takes a variable number of additional args. When
    called, the returned function calls f with args + additional args.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2631)
- name: partition
  id: clojure.core-api#clojure.core/partition
  summary: null
  belongs_to: clojure.core
  description: |-
    ## partition

    ```
    Usage: (partition n coll)
           (partition n step coll)
           (partition n step pad coll)
    ```

    ```
    Returns a lazy sequence of lists of n items each, at offsets step
    apart. If step is not supplied, defaults to n, i.e. the partitions
    do not overlap. If a pad collection is supplied, use its elements as
    necessary to complete last partition upto n items. In case there are
    not enough padding elements, return a partition with less than n items.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3185)
- name: partition-all
  id: clojure.core-api#clojure.core/partition-all
  summary: null
  belongs_to: clojure.core
  description: |-
    ## partition-all

    ```
    Usage: (partition-all n)
           (partition-all n coll)
           (partition-all n step coll)
    ```

    ```
    Returns a lazy sequence of lists like partition, but may include
    partitions with fewer than n items at the end.  Returns a stateful
    transducer when no collection is provided.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7308)
- name: partition-by
  id: clojure.core-api#clojure.core/partition-by
  summary: null
  belongs_to: clojure.core
  description: |-
    ## partition-by

    ```
    Usage: (partition-by f)
           (partition-by f coll)
    ```

    ```
    Applies f to each value in coll, splitting it each time f returns a
    new value.  Returns a lazy seq of partitions.  Returns a stateful
    transducer when no collection is provided.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7228)
- name: path
  id: clojure.zip-api#clojure.zip/path
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## path

    ```
    Usage: (path loc)
    ```

    ```
    Returns a seq of nodes leading to this loc
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L90)
- name: pcalls
  id: clojure.core-api#clojure.core/pcalls
  summary: null
  belongs_to: clojure.core
  description: |-
    ## pcalls

    ```
    Usage: (pcalls & fns)
    ```

    ```
    Executes the no-arg fns in parallel, returning a lazy sequence of
    their values
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7104)
- name: peek
  id: clojure.core-api#clojure.core/peek
  summary: null
  belongs_to: clojure.core
  description: |-
    ## peek

    ```
    Usage: (peek coll)
    ```

    ```
    For a list or queue, same as first, for a vector, same as, but much
    more efficient than, last. If the collection is empty, returns nil.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1474)
- name: persistent!
  id: clojure.core-api#clojure.core/persistent!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## persistent!

    ```
    Usage: (persistent! coll)
    ```

    ```
    Returns a new, persistent version of the transient collection, in
    constant time. The transient collection cannot be used after this
    call, any such use will throw an exception.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3350)
- name: PI
  id: clojure.math-api#clojure.math/PI
  summary: null
  belongs_to: clojure.math
  description: |-
    ## PI

    ```
    Constant for pi, the ratio of the circumference of a circle to its diameter.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#PI
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L33)
- name: pmap
  id: clojure.core-api#clojure.core/pmap
  summary: null
  belongs_to: clojure.core
  description: |-
    ## pmap

    ```
    Usage: (pmap f coll)
           (pmap f coll & colls)
    ```

    ```
    Like map, except f is applied in parallel. Semi-lazy in that the
    parallel computation stays ahead of the consumption, but doesn't
    realize the entire result unless required. Only useful for
    computationally intensive functions where the time of f dominates
    the coordination overhead.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7079)
- name: pop
  id: clojure.core-api#clojure.core/pop
  summary: null
  belongs_to: clojure.core
  description: |-
    ## pop

    ```
    Usage: (pop coll)
    ```

    ```
    For a list or queue, returns a new list/queue without the first
    item, for a vector, returns a new vector without the last item. If
    the collection is empty, throws an exception.  Note - not the same
    as next/butlast.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1481)
- name: pop!
  id: clojure.core-api#clojure.core/pop!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## pop!

    ```
    Usage: (pop! coll)
    ```

    ```
    Removes the last item from a transient vector. If
    the collection is empty, throws an exception. Returns coll
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3393)
- name: pop-thread-bindings
  id: clojure.core-api#clojure.core/pop-thread-bindings
  summary: null
  belongs_to: clojure.core
  description: |-
    ## pop-thread-bindings

    ```
    Usage: (pop-thread-bindings)
    ```

    ```
    Pop one set of bindings pushed with push-binding before. It is an error to
    pop bindings without pushing before.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1948)
- name: pos-int?
  id: clojure.core-api#clojure.core/pos-int?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## pos-int?

    ```
    Usage: (pos-int? x)
    ```

    ```
    Return true if x is a positive fixed precision integer
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1422)
- name: pos?
  id: clojure.core-api#clojure.core/pos?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## pos?

    ```
    Usage: (pos? num)
    ```

    ```
    Returns true if num is greater than zero, else false
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1261)
- name: postwalk
  id: clojure.walk-api#clojure.walk/postwalk
  summary: null
  belongs_to: clojure.walk
  description: |-
    ## postwalk

    ```
    Usage: (postwalk f form)
    ```

    ```
    Performs a depth-first, post-order traversal of form.  Calls f on
    each sub-form, uses f's return value in place of the original.
    Recognizes all Clojure data structures. Consumes seqs as with doall.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L53)
- name: postwalk-demo
  id: clojure.walk-api#clojure.walk/postwalk-demo
  summary: null
  belongs_to: clojure.walk
  description: |-
    ## postwalk-demo

    ```
    Usage: (postwalk-demo form)
    ```

    ```
    Demonstrates the behavior of postwalk by printing each form as it is
    walked.  Returns form.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L80)
- name: postwalk-replace
  id: clojure.walk-api#clojure.walk/postwalk-replace
  summary: null
  belongs_to: clojure.walk
  description: |-
    ## postwalk-replace

    ```
    Usage: (postwalk-replace smap form)
    ```

    ```
    Recursively transforms form by replacing keys in smap with their
    values.  Like clojure/replace but works on any data structure.  Does
    replacement at the leaves of the tree first.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L118)
- name: pow
  id: clojure.math-api#clojure.math/pow
  summary: null
  belongs_to: clojure.math
  description: |-
    ## pow

    ```
    Usage: (pow a b)
    ```

    ```
    Returns the value of a raised to the power of b.
    For more details on special cases, see:
    https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#pow-double-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L244)
- name: pp
  id: clojure.pprint-api#clojure.pprint/pp
  summary: null
  belongs_to: clojure.pprint
  description: |-
    ## pp

    ```
    Usage: (pp)
    ```

    ```
    A convenience macro that pretty prints the last thing output. This is
    exactly equivalent to (pprint *1).
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L254)
- name: pprint
  id: clojure.pprint-api#clojure.pprint/pprint
  summary: null
  belongs_to: clojure.pprint
  description: "## pprint\n\n```\nUsage: (pprint object)\n       (pprint object writer)\n```\n\n```\nPretty print object to the optional output writer. If the writer is not provided, \nprint the object to the currently bound value of *out*.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L241)"
- name: pprint-indent
  id: clojure.pprint-api#clojure.pprint/pprint-indent
  summary: null
  belongs_to: clojure.pprint
  description: "## pprint-indent\n\n```\nUsage: (pprint-indent relative-to n)\n```\n\n```\nCreate an indent at this point in the pretty printing stream. This defines how \nfollowing lines are indented. relative-to can be either :block or :current depending \nwhether the indent should be computed relative to the start of the logical block or\nthe current column position. n is an offset. \n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L341)"
- name: pprint-logical-block
  id: clojure.pprint-api#clojure.pprint/pprint-logical-block
  summary: null
  belongs_to: clojure.pprint
  description: "## pprint-logical-block\n\n```\nUsage: (pprint-logical-block options* body)\n```\n\n```\nExecute the body as a pretty printing logical block with output to *out* which \nmust be a pretty printing writer. When used from pprint or cl-format, this can be \nassumed. \n\nThis function is intended for use when writing custom dispatch functions.\n\nBefore the body, the caller can optionally specify options: :prefix, :per-line-prefix, \nand :suffix.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L302)"
- name: pprint-newline
  id: clojure.pprint-api#clojure.pprint/pprint-newline
  summary: null
  belongs_to: clojure.pprint
  description: "## pprint-newline\n\n```\nUsage: (pprint-newline kind)\n```\n\n```\nPrint a conditional newline to a pretty printing stream. kind specifies if the \nnewline is :linear, :miser, :fill, or :mandatory. \n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L329)"
- name: pprint-tab
  id: clojure.pprint-api#clojure.pprint/pprint-tab
  summary: null
  belongs_to: clojure.pprint
  description: "## pprint-tab\n\n```\nUsage: (pprint-tab kind colnum colinc)\n```\n\n```\nTab at this point in the pretty printing stream. kind specifies whether the tab\nis :line, :section, :line-relative, or :section-relative. \n\nColnum and colinc specify the target column and the increment to move the target\nforward if the output is already past the original target.\n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer.\n\nTHIS FUNCTION IS NOT YET IMPLEMENTED.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L356)"
- name: pr
  id: clojure.core-api#clojure.core/pr
  summary: null
  belongs_to: clojure.core
  description: |-
    ## pr

    ```
    Usage: (pr)
           (pr x)
           (pr x & more)
    ```

    ```
    Prints the object(s) to the output stream that is the current value
    of *out*.  Prints the object(s), separated by spaces if there is
    more than one.  By default, pr and prn print in a way that objects
    can be read by the reader
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3678)
- name: pr-str
  id: clojure.core-api#clojure.core/pr-str
  summary: null
  belongs_to: clojure.core
  description: |-
    ## pr-str

    ```
    Usage: (pr-str & xs)
    ```

    ```
    pr to a string, returning it
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4760)
- name: prefer-method
  id: clojure.core-api#clojure.core/prefer-method
  summary: null
  belongs_to: clojure.core
  description: "## prefer-method\n\n```\nUsage: (prefer-method multifn dispatch-val-x dispatch-val-y)\n```\n\n```\nCauses the multimethod to prefer matches of dispatch-val-x over dispatch-val-y \nwhen there is a conflict\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1820)"
- name: prefers
  id: clojure.core-api#clojure.core/prefers
  summary: null
  belongs_to: clojure.core
  description: |-
    ## prefers

    ```
    Usage: (prefers multifn)
    ```

    ```
    Given a multimethod, returns a map of preferred value -> set of other values
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1841)
- name: prepl
  id: clojure.core-api#clojure.core.server/prepl
  summary: null
  belongs_to: clojure.core
  description: |-
    ## prepl

    ```
    Usage: (prepl in-reader out-fn & {:keys [stdin]})
    ```

    ```
    a REPL with structured output (for programs)
    reads forms to eval from in-reader (a LineNumberingPushbackReader)
    Closing the input or passing the form :repl/quit will cause it to return

    Calls out-fn with data, one of:
    {:tag :ret
     :val val ;;eval result, or Throwable->map data if exception thrown
     :ns ns-name-string
     :ms long ;;eval time in milliseconds
     :form string ;;iff successfully read
     :exception true ;;iff exception thrown
    }
    {:tag :out
     :val string} ;chars from during-eval *out*
    {:tag :err
     :val string} ;chars from during-eval *err*
    {:tag :tap
     :val val} ;values from tap>

    You might get more than one :out or :err per eval, but exactly one :ret
    tap output can happen at any time (i.e. between evals)
    If during eval an attempt is made to read *in* it will read from in-reader unless :stdin is supplied

    Alpha, subject to change.
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L191)
- name: prev
  id: clojure.zip-api#clojure.zip/prev
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## prev

    ```
    Usage: (prev loc)
    ```

    ```
    Moves to the previous loc in the hierarchy, depth-first. If already
    at the root, returns nil.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L246)
- name: prewalk
  id: clojure.walk-api#clojure.walk/prewalk
  summary: null
  belongs_to: clojure.walk
  description: |-
    ## prewalk

    ```
    Usage: (prewalk f form)
    ```

    ```
    Like postwalk, but does pre-order traversal.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L61)
- name: prewalk-demo
  id: clojure.walk-api#clojure.walk/prewalk-demo
  summary: null
  belongs_to: clojure.walk
  description: |-
    ## prewalk-demo

    ```
    Usage: (prewalk-demo form)
    ```

    ```
    Demonstrates the behavior of prewalk by printing each form as it is
    walked.  Returns form.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L87)
- name: prewalk-replace
  id: clojure.walk-api#clojure.walk/prewalk-replace
  summary: null
  belongs_to: clojure.walk
  description: |-
    ## prewalk-replace

    ```
    Usage: (prewalk-replace smap form)
    ```

    ```
    Recursively transforms form by replacing keys in smap with their
    values.  Like clojure/replace but works on any data structure.  Does
    replacement at the root of the tree first.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L110)
- name: print
  id: clojure.core-api#clojure.core/print
  summary: null
  belongs_to: clojure.core
  description: |-
    ## print

    ```
    Usage: (print & more)
    ```

    ```
    Prints the object(s) to the output stream that is the current value
    of *out*.  print and println produce output for human consumption.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3725)
- name: print-cause-trace
  id: clojure.stacktrace-api#clojure.stacktrace/print-cause-trace
  summary: null
  belongs_to: clojure.stacktrace
  description: |-
    ## print-cause-trace

    ```
    Usage: (print-cause-trace tr)
           (print-cause-trace tr n)
    ```

    ```
    Like print-stack-trace but prints chained exceptions (causes).
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/dbb448f7709b20c392558e7d7871d1e9b28c9440/src/clj/clojure/stacktrace.clj#L72)
- name: print-length-loop
  id: clojure.pprint-api#clojure.pprint/print-length-loop
  summary: null
  belongs_to: clojure.pprint
  description: "## print-length-loop\n\n```\nUsage: (print-length-loop bindings & body)\n```\n\n```\nA version of loop that iterates at most *print-length* times. This is designed \nfor use in pretty-printer dispatch functions.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L391)"
- name: print-stack-trace
  id: clojure.stacktrace-api#clojure.stacktrace/print-stack-trace
  summary: null
  belongs_to: clojure.stacktrace
  description: |-
    ## print-stack-trace

    ```
    Usage: (print-stack-trace tr)
           (print-stack-trace tr n)
    ```

    ```
    Prints a Clojure-oriented stack trace of tr, a Throwable.
    Prints a maximum of n stack frames (default: unlimited).
    Does not print chained exceptions (causes).
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/dbb448f7709b20c392558e7d7871d1e9b28c9440/src/clj/clojure/stacktrace.clj#L50)
- name: print-str
  id: clojure.core-api#clojure.core/print-str
  summary: null
  belongs_to: clojure.core
  description: |-
    ## print-str

    ```
    Usage: (print-str & xs)
    ```

    ```
    print to a string, returning it
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4778)
- name: print-table
  id: clojure.pprint-api#clojure.pprint/print-table
  summary: null
  belongs_to: clojure.pprint
  description: |-
    ## print-table

    ```
    Usage: (print-table ks rows)
           (print-table rows)
    ```

    ```
    Prints a collection of maps in a textual table. Prints table headings
    ks, and then a line of output for each row, corresponding to the keys
    in ks. If ks are not specified, use the keys of the first item in rows.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/93d13d0c0671130b329863570080c72799563ac7/src/clj/clojure/pprint/print_table.clj#L11)
- name: print-tap-diagnostic
  id: clojure.test-api#clojure.test.tap/print-tap-diagnostic
  summary: null
  belongs_to: clojure.test
  description: |-
    ## print-tap-diagnostic

    ```
    Usage: (print-tap-diagnostic data)
    ```

    ```
    Prints a TAP diagnostic line.  data is a (possibly multi-line)
    string.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L51)
- name: print-tap-fail
  id: clojure.test-api#clojure.test.tap/print-tap-fail
  summary: null
  belongs_to: clojure.test
  description: |-
    ## print-tap-fail

    ```
    Usage: (print-tap-fail msg)
    ```

    ```
    Prints a TAP 'not ok' line.  msg is a string, with no line breaks
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L65)
- name: print-tap-pass
  id: clojure.test-api#clojure.test.tap/print-tap-pass
  summary: null
  belongs_to: clojure.test
  description: |-
    ## print-tap-pass

    ```
    Usage: (print-tap-pass msg)
    ```

    ```
    Prints a TAP 'ok' line.  msg is a string, with no line breaks
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L59)
- name: print-tap-plan
  id: clojure.test-api#clojure.test.tap/print-tap-plan
  summary: null
  belongs_to: clojure.test
  description: |-
    ## print-tap-plan

    ```
    Usage: (print-tap-plan n)
    ```

    ```
    Prints a TAP plan line like '1..n'.  n is the number of tests
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L45)
- name: print-throwable
  id: clojure.stacktrace-api#clojure.stacktrace/print-throwable
  summary: null
  belongs_to: clojure.stacktrace
  description: |-
    ## print-throwable

    ```
    Usage: (print-throwable tr)
    ```

    ```
    Prints the class and message of a Throwable. Prints the ex-data map
    if present.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/dbb448f7709b20c392558e7d7871d1e9b28c9440/src/clj/clojure/stacktrace.clj#L40)
- name: print-trace-element
  id: clojure.stacktrace-api#clojure.stacktrace/print-trace-element
  summary: null
  belongs_to: clojure.stacktrace
  description: |-
    ## print-trace-element

    ```
    Usage: (print-trace-element e)
    ```

    ```
    Prints a Clojure-oriented view of one element in a stack trace.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/dbb448f7709b20c392558e7d7871d1e9b28c9440/src/clj/clojure/stacktrace.clj#L28)
- name: printf
  id: clojure.core-api#clojure.core/printf
  summary: null
  belongs_to: clojure.core
  description: |-
    ## printf

    ```
    Usage: (printf fmt & args)
    ```

    ```
    Prints formatted output, as per format
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5771)
- name: println
  id: clojure.core-api#clojure.core/println
  summary: null
  belongs_to: clojure.core
  description: |-
    ## println

    ```
    Usage: (println & more)
    ```

    ```
    Same as print followed by (newline)
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3734)
- name: println-str
  id: clojure.core-api#clojure.core/println-str
  summary: null
  belongs_to: clojure.core
  description: |-
    ## println-str

    ```
    Usage: (println-str & xs)
    ```

    ```
    println to a string, returning it
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4787)
- name: PrintWriter-on
  id: clojure.core-api#clojure.core/PrintWriter-on
  summary: null
  belongs_to: clojure.core
  description: |-
    ## PrintWriter-on

    ```
    Usage: (PrintWriter-on flush-fn close-fn)
    ```

    ```
    implements java.io.PrintWriter given flush-fn, which will be called
    when .flush() is called, with a string built up since the last call to .flush().
    if not nil, close-fn will be called with no arguments when .close is called
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L559)
- name: prn
  id: clojure.core-api#clojure.core/prn
  summary: null
  belongs_to: clojure.core
  description: |-
    ## prn

    ```
    Usage: (prn & more)
    ```

    ```
    Same as pr followed by (newline). Observes *flush-on-newline*
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3715)
- name: prn-str
  id: clojure.core-api#clojure.core/prn-str
  summary: null
  belongs_to: clojure.core
  description: |-
    ## prn-str

    ```
    Usage: (prn-str & xs)
    ```

    ```
    prn to a string, returning it
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4769)
- name: project
  id: clojure.set-api#clojure.set/project
  summary: null
  belongs_to: clojure.set
  description: |-
    ## project

    ```
    Usage: (project xrel ks)
    ```

    ```
    Returns a rel of the elements of xrel with only the keys in ks
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L72)
- name: promise
  id: clojure.core-api#clojure.core/promise
  summary: null
  belongs_to: clojure.core
  description: |-
    ## promise

    ```
    Usage: (promise)
    ```

    ```
    Returns a promise object that can be read with deref/@, and set,
    once only, with deliver. Calls to deref/@ prior to delivery will
    block, unless the variant of deref with timeout is used. All
    subsequent derefs will return the same delivered value without
    blocking. See also - realized?.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7164)
- name: proxy
  id: clojure.core-api#clojure.core/proxy
  summary: null
  belongs_to: clojure.core
  description: |-
    ## proxy

    ```
    Usage: (proxy class-and-interfaces args & fs)
    ```

    ```
    class-and-interfaces - a vector of class names

    args - a (possibly empty) vector of arguments to the superclass
    constructor.

    f => (name [params*] body) or
    (name ([params*] body) ([params+] body) ...)

    Expands to code which creates a instance of a proxy class that
    implements the named class/interface(s) by calling the supplied
    fns. A single class, if provided, must be first. If not provided it
    defaults to Object.

    The interfaces names must be valid interface types. If a method fn
    is not provided for a class method, the superclass method will be
    called. If a method fn is not provided for an interface method, an
    UnsupportedOperationException will be thrown should it be
    called. Method fns are closures and can capture the environment in
    which proxy is called. Each method fn takes an additional implicit
    first arg, which is bound to 'this. Note that while method fns can
    be provided to override protected methods, they have no other access
    to protected members, nor to super, as these capabilities cannot be
    proxied.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L334)
- name: proxy-mappings
  id: clojure.core-api#clojure.core/proxy-mappings
  summary: null
  belongs_to: clojure.core
  description: |-
    ## proxy-mappings

    ```
    Usage: (proxy-mappings proxy)
    ```

    ```
    Takes a proxy instance and returns the proxy's fn map.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L328)
- name: proxy-super
  id: clojure.core-api#clojure.core/proxy-super
  summary: null
  belongs_to: clojure.core
  description: "## proxy-super\n\n```\nUsage: (proxy-super meth & args)\n```\n\n```\nUse to call a superclass method in the body of a proxy method. \nNote, expansion captures 'this\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L396)"
- name: pst
  id: clojure.repl-api#clojure.repl/pst
  summary: null
  belongs_to: clojure.repl
  description: |-
    ## pst

    ```
    Usage: (pst)
           (pst e-or-depth)
           (pst e depth)
    ```

    ```
    Prints a stack trace of the exception, to the depth requested. If none supplied, uses the root cause of the
    most recent repl exception (*e), and a depth of 12.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L240)
- name: push-thread-bindings
  id: clojure.core-api#clojure.core/push-thread-bindings
  summary: null
  belongs_to: clojure.core
  description: |-
    ## push-thread-bindings

    ```
    Usage: (push-thread-bindings bindings)
    ```

    ```
    WARNING: This is a low-level function. Prefer high-level macros like
    binding where ever possible.

    Takes a map of Var/value pairs. Binds each Var to the associated value for
    the current thread. Each call *MUST* be accompanied by a matching call to
    pop-thread-bindings wrapped in a try-finally!

        (push-thread-bindings bindings)
        (try
          ...
          (finally
            (pop-thread-bindings)))
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1930)
- name: pvalues
  id: clojure.core-api#clojure.core/pvalues
  summary: null
  belongs_to: clojure.core
  description: |-
    ## pvalues

    ```
    Usage: (pvalues & exprs)
    ```

    ```
    Returns a lazy sequence of the values of the exprs, which are
    evaluated in parallel
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7111)
- name: qualified-ident?
  id: clojure.core-api#clojure.core/qualified-ident?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## qualified-ident?

    ```
    Usage: (qualified-ident? x)
    ```

    ```
    Return true if x is a symbol or keyword with a namespace
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1637)
- name: qualified-keyword?
  id: clojure.core-api#clojure.core/qualified-keyword?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## qualified-keyword?

    ```
    Usage: (qualified-keyword? x)
    ```

    ```
    Return true if x is a keyword with a namespace
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1657)
- name: qualified-symbol?
  id: clojure.core-api#clojure.core/qualified-symbol?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## qualified-symbol?

    ```
    Usage: (qualified-symbol? x)
    ```

    ```
    Return true if x is a symbol with a namespace
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1647)
- name: quot
  id: clojure.core-api#clojure.core/quot
  summary: null
  belongs_to: clojure.core
  description: |-
    ## quot

    ```
    Usage: (quot num div)
    ```

    ```
    quot[ient] of dividing numerator by denominator.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1275)
- name: quote
  id: clojure.core-api#clojure.core/quote
  summary: null
  belongs_to: clojure.core
  description: |-
    ## quote

    ```
    Usage: (quote form)
    ```

    ```
    Yields the unevaluated form.

    Please see https://clojure.org/reference/special_forms#quote
    ```

    Added in Clojure version 1.0
- name: rand
  id: clojure.core-api#clojure.core/rand
  summary: null
  belongs_to: clojure.core
  description: |-
    ## rand

    ```
    Usage: (rand)
           (rand n)
    ```

    ```
    Returns a random floating point number between 0 (inclusive) and
    n (default 1) (exclusive).
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4936)
- name: rand-int
  id: clojure.core-api#clojure.core/rand-int
  summary: null
  belongs_to: clojure.core
  description: |-
    ## rand-int

    ```
    Usage: (rand-int n)
    ```

    ```
    Returns a random integer between 0 (inclusive) and n (exclusive).
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4944)
- name: rand-nth
  id: clojure.core-api#clojure.core/rand-nth
  summary: null
  belongs_to: clojure.core
  description: |-
    ## rand-nth

    ```
    Usage: (rand-nth coll)
    ```

    ```
    Return a random element of the (sequential) collection. Will have
    the same performance characteristics as nth for the given
    collection.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7299)
- name: random
  id: clojure.math-api#clojure.math/random
  summary: null
  belongs_to: clojure.math
  description: |-
    ## random

    ```
    Usage: (random)
    ```

    ```
    Returns a positive double between 0.0 and 1.0, chosen pseudorandomly with
    approximately random distribution.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#random--
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L267)
- name: random-sample
  id: clojure.core-api#clojure.core/random-sample
  summary: null
  belongs_to: clojure.core
  description: |-
    ## random-sample

    ```
    Usage: (random-sample prob)
           (random-sample prob coll)
    ```

    ```
    Returns items from coll with random probability of prob (0.0 -
    1.0).  Returns a transducer when no collection is provided.
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7741)
- name: random-uuid
  id: clojure.core-api#clojure.core/random-uuid
  summary: null
  belongs_to: clojure.core
  description: |-
    ## random-uuid

    ```
    Usage: (random-uuid)
    ```

    ```
    Returns a pseudo-randomly generated java.util.UUID instance (i.e. type 4).

    See: https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html#randomUUID--
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6861)
- name: range
  id: clojure.core-api#clojure.core/range
  summary: null
  belongs_to: clojure.core
  description: |-
    ## range

    ```
    Usage: (range)
           (range end)
           (range start end)
           (range start end step)
    ```

    ```
    Returns a lazy seq of nums from start (inclusive) to end
    (exclusive), by step, where start defaults to 0, step to 1, and end to
    infinity. When step is equal to 0, returns an infinite sequence of
    start. When start is equal to end, returns empty list.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3036)
- name: ratio?
  id: clojure.core-api#clojure.core/ratio?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ratio?

    ```
    Usage: (ratio? n)
    ```

    ```
    Returns true if n is a Ratio
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3577)
- name: rational?
  id: clojure.core-api#clojure.core/rational?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## rational?

    ```
    Usage: (rational? n)
    ```

    ```
    Returns true if n is a rational number
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3613)
- name: rationalize
  id: clojure.core-api#clojure.core/rationalize
  summary: null
  belongs_to: clojure.core
  description: |-
    ## rationalize

    ```
    Usage: (rationalize num)
    ```

    ```
    returns the rational value of num
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1291)
- name: re-find
  id: clojure.core-api#clojure.core/re-find
  summary: null
  belongs_to: clojure.core
  description: |-
    ## re-find

    ```
    Usage: (re-find m)
           (re-find re s)
    ```

    ```
    Returns the next regex match, if any, of string to pattern, using
    java.util.regex.Matcher.find().  Uses re-groups to return the
    groups.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4923)
- name: re-groups
  id: clojure.core-api#clojure.core/re-groups
  summary: null
  belongs_to: clojure.core
  description: |-
    ## re-groups

    ```
    Usage: (re-groups m)
    ```

    ```
    Returns the groups from the most recent match/find. If there are no
    nested groups, returns a string of the entire match. If there are
    nested groups, returns a vector of the groups, the first element
    being the entire match.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4883)
- name: re-matcher
  id: clojure.core-api#clojure.core/re-matcher
  summary: null
  belongs_to: clojure.core
  description: |-
    ## re-matcher

    ```
    Usage: (re-matcher re s)
    ```

    ```
    Returns an instance of java.util.regex.Matcher, for use, e.g. in
    re-find.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4874)
- name: re-matches
  id: clojure.core-api#clojure.core/re-matches
  summary: null
  belongs_to: clojure.core
  description: |-
    ## re-matches

    ```
    Usage: (re-matches re s)
    ```

    ```
    Returns the match, if any, of string to pattern, using
    java.util.regex.Matcher.matches().  Uses re-groups to return the
    groups.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4911)
- name: re-pattern
  id: clojure.core-api#clojure.core/re-pattern
  summary: null
  belongs_to: clojure.core
  description: |-
    ## re-pattern

    ```
    Usage: (re-pattern s)
    ```

    ```
    Returns an instance of java.util.regex.Pattern, for use, e.g. in
    re-matcher.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4864)
- name: re-quote-replacement
  id: clojure.string-api#clojure.string/re-quote-replacement
  summary: null
  belongs_to: clojure.string
  description: |-
    ## re-quote-replacement

    ```
    Usage: (re-quote-replacement replacement)
    ```

    ```
    Given a replacement string that you wish to be a literal
    replacement for a pattern match in replace or replace-first, do the
    necessary escaping of special characters in the replacement.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L54)
- name: re-seq
  id: clojure.core-api#clojure.core/re-seq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## re-seq

    ```
    Usage: (re-seq re s)
    ```

    ```
    Returns a lazy sequence of successive matches of pattern in string,
    using java.util.regex.Matcher.find(), each such match processed with
    re-groups.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4899)
- name: read
  id: clojure.core-api#clojure.core/read
  summary: null
  belongs_to: clojure.core
  description: |-
    ## read

    ```
    Usage: (read)
           (read stream)
           (read stream eof-error? eof-value)
           (read stream eof-error? eof-value recursive?)
           (read opts stream)
    ```

    ```
    Reads the next object from stream, which must be an instance of
    java.io.PushbackReader or some derivee.  stream defaults to the
    current value of *in*.

    Opts is a persistent map with valid keys:
      :read-cond - :allow to process reader conditionals, or
                   :preserve to keep all branches
      :features - persistent set of feature keywords for reader conditionals
      :eof - on eof, return value unless :eofthrow, then throw.
             if not specified, will throw

    Note that read can execute code (controlled by *read-eval*),
    and as such should be used only with trusted sources.

    For data structure interop use clojure.edn/read
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3742)
- name: read
  id: clojure.edn-api#clojure.edn/read
  summary: null
  belongs_to: clojure.edn
  description: |-
    ## read

    ```
    Usage: (read)
           (read stream)
           (read opts stream)
    ```

    ```
    Reads the next object from stream, which must be an instance of
    java.io.PushbackReader or some derivee.  stream defaults to the
    current value of *in*.

    Reads data in the edn format (subset of Clojure data):
    http://edn-format.org

    opts is a map that can include the following keys:
    :eof - value to return on end-of-file. When not supplied, eof throws an exception.
    :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.
                When not supplied, only the default-data-readers will be used.
    :default - A function of two args, that will, if present and no reader is found for a tag,
               be called with the tag and the value.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c6756a8bab137128c8119add29a25b0a88509900/src/clj/clojure/edn.clj#L14)
- name: read+string
  id: clojure.core-api#clojure.core/read+string
  summary: null
  belongs_to: clojure.core
  description: |-
    ## read+string

    ```
    Usage: (read+string)
           (read+string stream)
           (read+string stream eof-error? eof-value)
           (read+string stream eof-error? eof-value recursive?)
           (read+string opts stream)
    ```

    ```
    Like read, and taking the same args. stream must be a LineNumberingPushbackReader.
    Returns a vector containing the object read and the (whitespace-trimmed) string read.
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3771)
- name: read-instant-calendar
  id: clojure.instant-api#clojure.instant/read-instant-calendar
  summary: null
  belongs_to: clojure.instant
  description: |-
    ## read-instant-calendar

    ```
    Usage: (read-instant-calendar cs)
    ```

    ```
    To read an instant as a java.util.Calendar, bind *data-readers* to a map with
    this var as the value for the 'inst key.  Calendar preserves the timezone
    offset.
    ```

    [Source](https://github.com/clojure/clojure/blob/385d0593efa658ada19f9a55af39cef146c75341/src/clj/clojure/instant.clj#L281)
- name: read-instant-date
  id: clojure.instant-api#clojure.instant/read-instant-date
  summary: null
  belongs_to: clojure.instant
  description: |-
    ## read-instant-date

    ```
    Usage: (read-instant-date cs)
    ```

    ```
    To read an instant as a java.util.Date, bind *data-readers* to a map with
    this var as the value for the 'inst key. The timezone offset will be used
    to convert into UTC.
    ```

    [Source](https://github.com/clojure/clojure/blob/385d0593efa658ada19f9a55af39cef146c75341/src/clj/clojure/instant.clj#L274)
- name: read-instant-timestamp
  id: clojure.instant-api#clojure.instant/read-instant-timestamp
  summary: null
  belongs_to: clojure.instant
  description: |-
    ## read-instant-timestamp

    ```
    Usage: (read-instant-timestamp cs)
    ```

    ```
    To read an instant as a java.sql.Timestamp, bind *data-readers* to a
    map with this var as the value for the 'inst key. Timestamp preserves
    fractional seconds with nanosecond precision. The timezone offset will
    be used to convert into UTC.
    ```

    [Source](https://github.com/clojure/clojure/blob/385d0593efa658ada19f9a55af39cef146c75341/src/clj/clojure/instant.clj#L288)
- name: read-line
  id: clojure.core-api#clojure.core/read-line
  summary: null
  belongs_to: clojure.core
  description: |-
    ## read-line

    ```
    Usage: (read-line)
    ```

    ```
    Reads the next line from stream that is the current value of *in* .
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3797)
- name: read-string
  id: clojure.core-api#clojure.core/read-string
  summary: null
  belongs_to: clojure.core
  description: |-
    ## read-string

    ```
    Usage: (read-string s)
           (read-string opts s)
    ```

    ```
    Reads one object from the string s. Optionally include reader
    options, as specified in read.

    Note that read-string can execute code (controlled by *read-eval*),
    and as such should be used only with trusted sources.

    For data structure interop use clojure.edn/read-string
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3806)
- name: read-string
  id: clojure.edn-api#clojure.edn/read-string
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.edn
  description: "## read-string\n\n```\nUsage: (read-string s)\n       (read-string opts s)\n```\n\n```\nReads one object from the string s. Returns nil when s is nil or empty.\n\nReads data in the edn format (subset of Clojure data):\nhttp://edn-format.org\n\nopts is a map as per clojure.edn/read\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c6756a8bab137128c8119add29a25b0a88509900/src/clj/clojure/edn.clj#L37)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.edn-api.html](https://clojure.github.io/clojure/clojure.edn-api.html)"
- name: reader
  id: clojure.java.io-api#clojure.java.io/reader
  summary: null
  belongs_to: clojure.java.io
  description: |-
    ## reader

    ```
    Usage: (reader x & opts)
    ```

    ```
    Attempts to coerce its argument into an open java.io.Reader.
    Default implementations always return a java.io.BufferedReader.

    Default implementations are provided for Reader, BufferedReader,
    InputStream, File, URI, URL, Socket, byte arrays, character arrays,
    and String.

    If argument is a String, it tries to resolve it first as a URI, then
    as a local file name.  URIs with a 'file' protocol are converted to
    local file names.

    Should be used inside with-open to ensure the Reader is properly
    closed.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L86)
- name: reader-conditional
  id: clojure.core-api#clojure.core/reader-conditional
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reader-conditional

    ```
    Usage: (reader-conditional form splicing?)
    ```

    ```
    Construct a data representation of a reader conditional.
    If true, splicing? indicates read-cond-splicing.
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7852)
- name: reader-conditional?
  id: clojure.core-api#clojure.core/reader-conditional?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reader-conditional?

    ```
    Usage: (reader-conditional? value)
    ```

    ```
    Return true if the value is the data representation of a reader conditional
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7846)
- name: realized?
  id: clojure.core-api#clojure.core/realized?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## realized?

    ```
    Usage: (realized? x)
    ```

    ```
    Returns true if a value has been produced for a promise, delay, future or lazy sequence.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7601)
- name: record?
  id: clojure.core-api#clojure.core/record?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## record?

    ```
    Usage: (record? x)
    ```

    ```
    Returns true if x is a record
    ```

    Added in Clojure version 1.6

    [Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L406)
- name: recur
  id: clojure.core-api#clojure.core/recur
  summary: null
  belongs_to: clojure.core
  description: |-
    ## recur

    ```
    Usage: (recur exprs*)
    ```

    ```
    Evaluates the exprs in order, then, in parallel, rebinds
    the bindings of the recursion point to the values of the exprs.
    Execution then jumps back to the recursion point, a loop or fn method.

    Please see https://clojure.org/reference/special_forms#recur
    ```

    Added in Clojure version 1.0
- name: reduce
  id: clojure.core-api#clojure.core.reducers/reduce
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reduce

    ```
    Usage: (reduce f coll)
           (reduce f init coll)
    ```

    ```
    Like core/reduce except:
    When init is not provided, (f) is used.
    Maps are reduced with reduce-kv
    ```

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L38)
- name: reduce
  id: clojure.core-api#clojure.core/reduce
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reduce

    ```
    Usage: (reduce f coll)
           (reduce f val coll)
    ```

    ```
    f should be a function of 2 arguments. If val is not supplied,
    returns the result of applying f to the first 2 items in coll, then
    applying f to that result and the 3rd item, etc. If coll contains no
    items, f must accept no arguments as well, and reduce returns the
    result of calling f with no arguments.  If coll has only 1 item, it
    is returned and f is not called.  If val is supplied, returns the
    result of applying f to val and the first item in coll, then
    applying f to that result and the 2nd item, etc. If coll contains no
    items, returns val and f is not called.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6868)
- name: reduce-kv
  id: clojure.core-api#clojure.core/reduce-kv
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reduce-kv

    ```
    Usage: (reduce-kv f init coll)
    ```

    ```
    Reduces an associative collection. f should be a function of 3
    arguments. Returns the result of applying f to init, the first key
    and the first value in coll, then applying f to that result and the
    2nd key and value, etc. If coll contains no entries, returns init
    and f is not called. Note that reduce-kv is supported on vectors,
    where the keys will be the ordinals.
    ```

    Added in Clojure version 1.4

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6910)
- name: reduced
  id: clojure.core-api#clojure.core/reduced
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reduced

    ```
    Usage: (reduced x)
    ```

    ```
    Wraps x in a way such that a reduce will terminate with the value x
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2853)
- name: reduced?
  id: clojure.core-api#clojure.core/reduced?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reduced?

    ```
    Usage: (reduced? x)
    ```

    ```
    Returns true if x is the result of a call to reduced
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2859)
- name: reducer
  id: clojure.core-api#clojure.core.reducers/reducer
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reducer

    ```
    Usage: (reducer coll xf)
    ```

    ```
    Given a reducible collection, and a transformation function xf,
    returns a reducible collection, where any supplied reducing
    fn will be transformed by xf. xf is a function of reducing fn to
    reducing fn.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L67)
- name: reductions
  id: clojure.core-api#clojure.core/reductions
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reductions

    ```
    Usage: (reductions f coll)
           (reductions f init coll)
    ```

    ```
    Returns a lazy seq of the intermediate values of the reduction (as
    per reduce) of coll by f, starting with init.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7282)
- name: ref
  id: clojure.core-api#clojure.core/ref
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ref

    ```
    Usage: (ref x)
           (ref x & options)
    ```

    ```
    Creates and returns a Ref with an initial value of x and zero or
    more options (in any order):

    :meta metadata-map

    :validator validate-fn

    :min-history (default 0)
    :max-history (default 10)

    If metadata-map is supplied, it will become the metadata on the
    ref. validate-fn must be nil or a side-effect-free fn of one
    argument, which will be passed the intended new state on any state
    change. If the new state is unacceptable, the validate-fn should
    return false or throw an exception. validate-fn will be called on
    transaction commit, when all refs have their final values.

    Normally refs accumulate history dynamically as needed to deal with
    read demands. If you know in advance you will need history you can
    set :min-history to ensure it will be available when first needed (instead
    of after a read fault). History is limited, and the limit can be set
    with :max-history.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2279)
- name: ref-history-count
  id: clojure.core-api#clojure.core/ref-history-count
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ref-history-count

    ```
    Usage: (ref-history-count ref)
    ```

    ```
    Returns the history count of a ref
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2480)
- name: ref-max-history
  id: clojure.core-api#clojure.core/ref-max-history
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ref-max-history

    ```
    Usage: (ref-max-history ref)
           (ref-max-history ref n)
    ```

    ```
    Gets the max-history of a ref, or sets it and returns the ref
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2496)
- name: ref-min-history
  id: clojure.core-api#clojure.core/ref-min-history
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ref-min-history

    ```
    Usage: (ref-min-history ref)
           (ref-min-history ref n)
    ```

    ```
    Gets the min-history of a ref, or sets it and returns the ref
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2487)
- name: ref-set
  id: clojure.core-api#clojure.core/ref-set
  summary: null
  belongs_to: clojure.core
  description: |-
    ## ref-set

    ```
    Usage: (ref-set ref val)
    ```

    ```
    Must be called in a transaction. Sets the value of ref.
    Returns val.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2472)
- name: refer
  id: clojure.core-api#clojure.core/refer
  summary: null
  belongs_to: clojure.core
  description: |-
    ## refer

    ```
    Usage: (refer ns-sym & filters)
    ```

    ```
    refers to all public vars of ns, subject to filters.
    filters can include at most one each of:

    :exclude list-of-symbols
    :only list-of-symbols
    :rename map-of-fromsymbol-tosymbol

    For each public interned var in the namespace named by the symbol,
    adds a mapping from the name of the var to the var to the current
    namespace.  Throws an exception if name is already mapped to
    something else in the current namespace. Filters can be used to
    select a subset, via inclusion or exclusion, or to provide a mapping
    to a symbol different from the var's name, in order to prevent
    clashes. Use :use in the ns macro in preference to calling this directly.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4218)
- name: refer-clojure
  id: clojure.core-api#clojure.core/refer-clojure
  summary: null
  belongs_to: clojure.core
  description: |-
    ## refer-clojure

    ```
    Usage: (refer-clojure & filters)
    ```

    ```
    Same as (refer 'clojure.core <filters>)
    ```

    ```
    Specs:
      Args: (*
              (alt
               :exclude (cat
                         :op (quotable #{:exclude})
                         :arg (quotable :clojure.core.specs.alpha/exclude))
               :only (cat
                      :op (quotable #{:only})
                      :arg (quotable :clojure.core.specs.alpha/only))
               :rename (cat
                        :op (quotable #{:rename})
                        :arg (quotable :clojure.core.specs.alpha/rename))))
      Ret:  any?
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5847)
- name: reflect
  id: clojure.reflect-api#clojure.reflect/reflect
  summary: null
  belongs_to: clojure.reflect
  description: "## reflect\n\n```\nUsage: (reflect obj & options)\n```\n\n```\nAlpha - subject to change.\nReflect on the type of obj (or obj itself if obj is a class).\nReturn value and options are the same as for type-reflect. \n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/ee00807bac64d55dbc7ec49442d6376352b77200/src/clj/clojure/reflect.clj#L115)"
- name: Reflector
  id: clojure.reflect-api#clojure.reflect/Reflector
  summary: null
  belongs_to: clojure.reflect
  description: "## Reflector\n\n```\nProtocol for reflection implementers.\n```\n\nKnown implementations: [AsmReflector](#clojure.reflect/AsmReflector), [JavaReflector](#clojure.reflect/JavaReflector)  \n\n### do-reflect\n\n```\nUsage: (do-reflect reflector typeref)\n```\n\n[Source](https://github.com/clojure/clojure/blob/ee00807bac64d55dbc7ec49442d6376352b77200/src/clj/clojure/reflect.clj#L44)"
- name: reify
  id: clojure.core-api#clojure.core/reify
  summary: null
  belongs_to: clojure.core
  description: "## reify\n\n```\nUsage: (reify & opts+specs)\n```\n\n```\nreify creates an object implementing a protocol or interface.\n reify is a macro with the following structure:\n\n(reify options* specs*)\n \n Currently there are no options.\n\n Each spec consists of the protocol or interface name followed by zero\n or more method bodies:\n\n protocol-or-interface-or-Object\n (methodName [args+] body)*\n\n Methods should be supplied for all methods of the desired\n protocol(s) and interface(s). You can also define overrides for\n methods of Object. Note that the first parameter must be supplied to\n correspond to the target object ('this' in Java parlance). Thus\n methods for interfaces will take one more argument than do the\n interface declarations.  Note also that recur calls to the method\n head should *not* pass the target object, it will be supplied\n automatically and can not be substituted.\n\n The return type can be indicated by a type hint on the method name,\n and arg types can be indicated by a type hint on arg names. If you\n leave out all hints, reify will try to match on same name/arity\n method in the protocol(s)/interface(s) - this is preferred. If you\n supply any hints at all, no inference is done, so all hints (or\n default of Object) must be correct, for both arguments and return\n type. If a method is overloaded in a protocol/interface, multiple\n independent method definitions must be supplied.  If overloaded with\n same arity in an interface you must specify complete hints to\n disambiguate - a missing hint implies Object.\n\n recur works to method heads The method bodies of reify are lexical\n closures, and can refer to the surrounding local scope:\n \n (str (let [f \"foo\"] \n      (reify Object \n        (toString [this] f))))\n == \"foo\"\n\n (seq (let [f \"foo\"] \n      (reify clojure.lang.Seqable \n        (seq [this] (seq f)))))\n == (\\f \\o \\o))\n \n reify always implements clojure.lang.IObj and transfers meta\n data of the form to the created object.\n \n (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n == {:k :v}\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L70)"
- name: release-pending-sends
  id: clojure.core-api#clojure.core/release-pending-sends
  summary: null
  belongs_to: clojure.core
  description: |-
    ## release-pending-sends

    ```
    Usage: (release-pending-sends)
    ```

    ```
    Normally, actions sent directly or indirectly during another action
    are held until the action completes (changes the agent's
    state). This function can be used to dispatch any pending sent
    actions immediately. This has no impact on actions sent during a
    transaction, which are still held until commit. If no action is
    occurring, does nothing. Returns the number of actions dispatched.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2150)
- name: rem
  id: clojure.core-api#clojure.core/rem
  summary: null
  belongs_to: clojure.core
  description: |-
    ## rem

    ```
    Usage: (rem num div)
    ```

    ```
    remainder of dividing numerator by denominator.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1283)
- name: remote-prepl
  id: clojure.core-api#clojure.core.server/remote-prepl
  summary: null
  belongs_to: clojure.core
  description: |-
    ## remote-prepl

    ```
    Usage: (remote-prepl host port in-reader out-fn & {:keys [valf readf], :or {valf read-string, readf (fn* [p1__6786# p2__6787#] (read p1__6786# false p2__6787#))}})
    ```

    ```
    Implements a prepl on in-reader and out-fn by forwarding to a
    remote [io-]prepl over a socket.  Messages will be read by readf, a
    fn of a LineNumberingPushbackReader and EOF value or a symbol naming
    same (default #(read %1 false %2)),
    :ret and :tap vals will be processed by valf, a fn of one argument
    or a symbol naming same (default read-string). If that function
    throws, :val will be unprocessed.

    Alpha, subject to change.
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L295)
- name: remove
  id: clojure.core-api#clojure.core.reducers/remove
  summary: null
  belongs_to: clojure.core
  description: |-
    ## remove

    ```
    Usage: (remove pred)
           (remove pred coll)
    ```

    ```
    Removes values in the reduction of coll for which (pred val)
    returns logical true. Foldable.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L167)
- name: remove
  id: clojure.zip-api#clojure.zip/remove
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## remove

    ```
    Usage: (remove loc)
    ```

    ```
    Removes the node at loc, returning the loc that would have preceded
    it in a depth-first walk.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L264)
- name: remove
  id: clojure.core-api#clojure.core/remove
  summary: null
  belongs_to: clojure.core
  description: |-
    ## remove

    ```
    Usage: (remove pred)
           (remove pred coll)
    ```

    ```
    Returns a lazy sequence of the items in coll for which
    (pred item) returns logical false. pred must be free of side-effects.
    Returns a transducer when no collection is provided.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2843)
- name: remove-all-methods
  id: clojure.core-api#clojure.core/remove-all-methods
  summary: null
  belongs_to: clojure.core
  description: |-
    ## remove-all-methods

    ```
    Usage: (remove-all-methods multifn)
    ```

    ```
    Removes all of the methods of multimethod.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1806)
- name: remove-method
  id: clojure.core-api#clojure.core/remove-method
  summary: null
  belongs_to: clojure.core
  description: |-
    ## remove-method

    ```
    Usage: (remove-method multifn dispatch-val)
    ```

    ```
    Removes the method of multimethod associated with dispatch-value.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1813)
- name: remove-ns
  id: clojure.core-api#clojure.core/remove-ns
  summary: null
  belongs_to: clojure.core
  description: |-
    ## remove-ns

    ```
    Usage: (remove-ns sym)
    ```

    ```
    Removes the namespace named by the symbol. Use with caution.
    Cannot be used to remove the clojure namespace.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4141)
- name: remove-tap
  id: clojure.core-api#clojure.core/remove-tap
  summary: null
  belongs_to: clojure.core
  description: |-
    ## remove-tap

    ```
    Usage: (remove-tap f)
    ```

    ```
    Remove f from the tap set.
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7993)
- name: remove-watch
  id: clojure.core-api#clojure.core/remove-watch
  summary: null
  belongs_to: clojure.core
  description: |-
    ## remove-watch

    ```
    Usage: (remove-watch reference key)
    ```

    ```
    Removes a watch (set by add-watch) from a reference
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2179)
- name: rename
  id: clojure.set-api#clojure.set/rename
  summary: null
  belongs_to: clojure.set
  description: |-
    ## rename

    ```
    Usage: (rename xrel kmap)
    ```

    ```
    Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L89)
- name: rename-keys
  id: clojure.set-api#clojure.set/rename-keys
  summary: null
  belongs_to: clojure.set
  description: |-
    ## rename-keys

    ```
    Usage: (rename-keys map kmap)
    ```

    ```
    Returns the map with the keys in kmap renamed to the vals in kmap
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L78)
- name: renumbering-read
  id: clojure.main-api#clojure.main/renumbering-read
  summary: null
  belongs_to: clojure.main
  description: |-
    ## renumbering-read

    ```
    Usage: (renumbering-read opts reader line-number)
    ```

    ```
    Reads from reader, which must be a LineNumberingPushbackReader, while capturing
    the read string. If the read is successful, reset the line number and re-read.
    The line number on re-read is the passed line-number unless :line or
    :clojure.core/eval-file meta are explicitly set on the read value.
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L140)
- name: repeat
  id: clojure.core-api#clojure.core/repeat
  summary: null
  belongs_to: clojure.core
  description: |-
    ## repeat

    ```
    Usage: (repeat x)
           (repeat n x)
    ```

    ```
    Returns a lazy (infinite!, or length n if supplied) sequence of xs.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3016)
- name: repeatedly
  id: clojure.core-api#clojure.core/repeatedly
  summary: null
  belongs_to: clojure.core
  description: |-
    ## repeatedly

    ```
    Usage: (repeatedly f)
           (repeatedly n f)
    ```

    ```
    Takes a function of no args, presumably with side effects, and
    returns an infinite (or length n if supplied) lazy sequence of calls
    to it
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5168)
- name: repl
  id: clojure.main-api#clojure.main/repl
  summary: null
  belongs_to: clojure.main
  description: |-
    ## repl

    ```
    Usage: (repl & options)
    ```

    ```
    Generic, reusable, read-eval-print loop. By default, reads from *in*,
    writes to *out*, and prints exception summaries to *err*. If you use the
    default :read hook, *in* must either be an instance of
    LineNumberingPushbackReader or duplicate its behavior of both supporting
    .unread and collapsing CR, LF, and CRLF into a single \newline. Options
    are sequential keyword-value pairs. Available options and their defaults:

       - :init, function of no arguments, initialization hook called with
         bindings for set!-able vars in place.
         default: #()

       - :need-prompt, function of no arguments, called before each
         read-eval-print except the first, the user will be prompted if it
         returns true.
         default: (if (instance? LineNumberingPushbackReader *in*)
                    #(.atLineStart *in*)
                    #(identity true))

       - :prompt, function of no arguments, prompts for more input.
         default: repl-prompt

       - :flush, function of no arguments, flushes output
         default: flush

       - :read, function of two arguments, reads from *in*:
           - returns its first argument to request a fresh prompt
             - depending on need-prompt, this may cause the repl to prompt
               before reading again
           - returns its second argument to request an exit from the repl
           - else returns the next object read from the input stream
         default: repl-read

       - :eval, function of one argument, returns the evaluation of its
         argument
         default: eval

       - :print, function of one argument, prints its argument to the output
         default: prn

       - :caught, function of one argument, a throwable, called when
         read, eval, or print throws an exception or error
         default: repl-caught
    ```

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L368)
- name: repl
  id: clojure.core-api#clojure.core.server/repl
  summary: null
  belongs_to: clojure.core
  description: |-
    ## repl

    ```
    Usage: (repl)
    ```

    ```
    REPL with predefined hooks for attachable socket server.
    ```

    [Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L180)
- name: repl-caught
  id: clojure.main-api#clojure.main/repl-caught
  summary: null
  belongs_to: clojure.main
  description: |-
    ## repl-caught

    ```
    Usage: (repl-caught e)
    ```

    ```
    Default :caught hook for repl
    ```

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L348)
- name: repl-exception
  id: clojure.main-api#clojure.main/repl-exception
  summary: null
  belongs_to: clojure.main
  description: |-
    ## repl-exception

    ```
    Usage: (repl-exception throwable)
    ```

    ```
    Returns the root cause of throwables
    ```

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L172)
- name: repl-init
  id: clojure.core-api#clojure.core.server/repl-init
  summary: null
  belongs_to: clojure.core
  description: |-
    ## repl-init

    ```
    Usage: (repl-init)
    ```

    ```
    Initialize repl in user namespace and make standard repl requires.
    ```

    [Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L163)
- name: repl-prompt
  id: clojure.main-api#clojure.main/repl-prompt
  summary: null
  belongs_to: clojure.main
  description: |-
    ## repl-prompt

    ```
    Usage: (repl-prompt)
    ```

    ```
    Default :prompt hook for repl
    ```

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L103)
- name: repl-read
  id: clojure.core-api#clojure.core.server/repl-read
  summary: null
  belongs_to: clojure.core
  description: |-
    ## repl-read

    ```
    Usage: (repl-read request-prompt request-exit)
    ```

    ```
    Enhanced :read hook for repl supporting :repl/quit.
    ```

    [Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L169)
- name: repl-read
  id: clojure.main-api#clojure.main/repl-read
  summary: null
  belongs_to: clojure.main
  description: |-
    ## repl-read

    ```
    Usage: (repl-read request-prompt request-exit)
    ```

    ```
    Default :read hook for repl. Reads from *in* which must either be an
    instance of LineNumberingPushbackReader or duplicate its behavior of both
    supporting .unread and collapsing all of CR, LF, and CRLF into a single
    \newline. repl-read:
      - skips whitespace, then
        - returns request-prompt on start of line, or
        - returns request-exit on end of stream, or
        - reads an object from the input stream, then
          - skips the next input character if it's end of line, then
          - returns the object.
    ```

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L154)
- name: repl-requires
  id: clojure.main-api#clojure.main/repl-requires
  summary: null
  belongs_to: clojure.main
  description: |-
    ## repl-requires

    ```
    A sequence of lib specs that are applied to `require`
    by default when a new command-line REPL is started.
    ```

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L355)
- name: replace
  id: clojure.core-api#clojure.core/replace
  summary: null
  belongs_to: clojure.core
  description: |-
    ## replace

    ```
    Usage: (replace smap)
           (replace smap coll)
    ```

    ```
    Given a map of replacement pairs and a vector/collection, returns a
    vector/seq with any elements = a key in smap replaced with the
    corresponding val in smap.  Returns a transducer when no collection
    is provided.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5083)
- name: replace
  id: clojure.string-api#clojure.string/replace
  summary: null
  belongs_to: clojure.string
  description: |-
    ## replace

    ```
    Usage: (replace s match replacement)
    ```

    ```
    Replaces all instance of match with replacement in s.

    match/replacement can be:

    string / string
    char / char
    pattern / (string or function of match).

    See also replace-first.

    The replacement is literal (i.e. none of its characters are treated
    specially) for all cases above except pattern / string.

    For pattern / string, $1, $2, etc. in the replacement string are
    substituted with the string that matched the corresponding
    parenthesized group in the pattern.  If you wish your replacement
    string r to be used literally, use (re-quote-replacement r) as the
    replacement argument.  See also documentation for
    java.util.regex.Matcher's appendReplacement method.

    Example:
    (clojure.string/replace "Almost Pig Latin" #"\b(\w)(\w+)\b" "$2$1ay")
    -> "lmostAay igPay atinLay"
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L75)
- name: replace
  id: clojure.zip-api#clojure.zip/replace
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## replace

    ```
    Usage: (replace loc node)
    ```

    ```
    Replaces the node at this loc, without moving
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L203)
- name: replace-first
  id: clojure.string-api#clojure.string/replace-first
  summary: null
  belongs_to: clojure.string
  description: |-
    ## replace-first

    ```
    Usage: (replace-first s match replacement)
    ```

    ```
    Replaces the first instance of match with replacement in s.

    match/replacement can be:

    char / char
    string / string
    pattern / (string or function of match).

    See also replace.

    The replacement is literal (i.e. none of its characters are treated
    specially) for all cases above except pattern / string.

    For pattern / string, $1, $2, etc. in the replacement string are
    substituted with the string that matched the corresponding
    parenthesized group in the pattern.  If you wish your replacement
    string r to be used literally, use (re-quote-replacement r) as the
    replacement argument.  See also documentation for
    java.util.regex.Matcher's appendReplacement method.

    Example:
    (clojure.string/replace-first "swap first two words"
                                  #"(\w+)(\s+)(\w+)" "$3$2$1")
    -> "first swap two words"
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L138)
- name: replicate
  id: clojure.core-api#clojure.core/replicate
  summary: null
  belongs_to: clojure.core
  description: |-
    ## replicate

    ```
    Usage: (replicate n x)
    ```

    ```
    DEPRECATED: Use 'repeat' instead.
    Returns a lazy seq of n xs.
    ```

    Added in Clojure version 1.0

    Deprecated since Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3023)
- name: report
  id: clojure.test-api#clojure.test/report
  summary: null
  belongs_to: clojure.test
  description: |-
    ## report

    ```
    No usage documentation available
    ```

    ```
    Generic reporting function, may be overridden to plug in
    different report formats (e.g., TAP, JUnit).  Assertions such as
    'is' call 'report' to indicate results.  The argument given to
    'report' will be a map with a :type key.  See the documentation at
    the top of test_is.clj for more information on the types of
    arguments for 'report'.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L324)
- name: report-error
  id: clojure.main-api#clojure.main/report-error
  summary: null
  belongs_to: clojure.main
  description: |-
    ## report-error

    ```
    Usage: (report-error t & {:keys [target], :or {target file}, :as opts})
    ```

    ```
    Create and output an exception report for a Throwable to target.

    Options:
      :target - "file" (default), "stderr", "none"

    If file is specified but cannot be written, falls back to stderr.
    ```

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L584)
- name: require
  id: clojure.core-api#clojure.core/require
  summary: null
  belongs_to: clojure.core
  description: |-
    ## require

    ```
    Usage: (require & args)
    ```

    ```
    Loads libs, skipping any that are already loaded. Each argument is
    either a libspec that identifies a lib, a prefix list that identifies
    multiple libs whose names share a common prefix, or a flag that modifies
    how all the identified libs are loaded. Use :require in the ns macro
    in preference to calling this directly.

    Libs

    A 'lib' is a named set of resources in classpath whose contents define a
    library of Clojure code. Lib names are symbols and each lib is associated
    with a Clojure namespace and a Java package that share its name. A lib's
    name also locates its root directory within classpath using Java's
    package name to classpath-relative path mapping. All resources in a lib
    should be contained in the directory structure under its root directory.
    All definitions a lib makes should be in its associated namespace.

    'require loads a lib by loading its root resource. The root resource path
    is derived from the lib name in the following manner:
    Consider a lib named by the symbol 'x.y.z; it has the root directory
    <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj, or
    <classpath>/x/y/z.cljc if <classpath>/x/y/z.clj does not exist. The
    root resource should contain code to create the lib's
    namespace (usually by using the ns macro) and load any additional
    lib resources.

    Libspecs

    A libspec is a lib name or a vector containing a lib name followed by
    options expressed as sequential keywords and arguments.

    Recognized options:
    :as takes a symbol as its argument and makes that symbol an alias to the
      lib's namespace in the current namespace.
    :as-alias takes a symbol as its argument and aliases like :as, however
      the lib will not be loaded. If the lib has not been loaded, a new
      empty namespace will be created (as with create-ns).
    :refer takes a list of symbols to refer from the namespace or the :all
      keyword to bring in all public vars.

    Prefix Lists

    It's common for Clojure code to depend on several libs whose names have
    the same prefix. When specifying libs, prefix lists can be used to reduce
    repetition. A prefix list contains the shared prefix followed by libspecs
    with the shared prefix removed from the lib names. After removing the
    prefix, the names that remain must not contain any periods.

    Flags

    A flag is a keyword.
    Recognized flags: :reload, :reload-all, :verbose
    :reload forces loading of all the identified libs even if they are
      already loaded (has no effect on libspecs using :as-alias)
    :reload-all implies :reload and also forces loading of all libs that the
      identified libs directly or indirectly load via require or use
      (has no effect on libspecs using :as-alias)
    :verbose triggers printing information about each load, alias, and refer

    Example:

    The following would load the libraries clojure.zip and clojure.set
    abbreviated as 's'.

    (require '(clojure zip [set :as s]))
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6038)
- name: requiring-resolve
  id: clojure.core-api#clojure.core/requiring-resolve
  summary: null
  belongs_to: clojure.core
  description: |-
    ## requiring-resolve

    ```
    Usage: (requiring-resolve sym)
    ```

    ```
    Resolves namespace-qualified sym per 'resolve'. If initial resolve
    fails, attempts to require sym's namespace and retries.
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6117)
- name: reset!
  id: clojure.core-api#clojure.core/reset!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reset!

    ```
    Usage: (reset! atom newval)
    ```

    ```
    Sets the value of atom to newval without regard for the
    current value. Returns newval.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2393)
- name: reset-meta!
  id: clojure.core-api#clojure.core/reset-meta!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reset-meta!

    ```
    Usage: (reset-meta! iref metadata-map)
    ```

    ```
    Atomically resets the metadata for a namespace/var/ref/agent/atom
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2433)
- name: reset-vals!
  id: clojure.core-api#clojure.core/reset-vals!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reset-vals!

    ```
    Usage: (reset-vals! atom newval)
    ```

    ```
    Sets the value of atom to newval. Returns [old new], the value of the
    atom before and after the reset.
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2400)
- name: resolve
  id: clojure.core-api#clojure.core/resolve
  summary: null
  belongs_to: clojure.core
  description: |-
    ## resolve

    ```
    Usage: (resolve sym)
           (resolve env sym)
    ```

    ```
    same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4373)
- name: resource
  id: clojure.java.io-api#clojure.java.io/resource
  summary: null
  belongs_to: clojure.java.io
  description: |-
    ## resource

    ```
    Usage: (resource n)
           (resource n loader)
    ```

    ```
    Returns the URL for a named resource. Use the context class loader
    if no loader is specified.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L446)
- name: rest
  id: clojure.core-api#clojure.core/rest
  summary: null
  belongs_to: clojure.core
  description: |-
    ## rest

    ```
    Usage: (rest coll)
    ```

    ```
    Returns a possibly empty seq of the items after the first. Calls seq on its
    argument.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L66)
- name: restart-agent
  id: clojure.core-api#clojure.core/restart-agent
  summary: null
  belongs_to: clojure.core
  description: |-
    ## restart-agent

    ```
    Usage: (restart-agent a new-state & options)
    ```

    ```
    When an agent is failed, changes the agent state to new-state and
    then un-fails the agent so that sends are allowed again.  If
    a :clear-actions true option is given, any actions queued on the
    agent that were being held while it was failed will be discarded,
    otherwise those held actions will proceed.  The new-state must pass
    the validator if any, or restart will throw an exception and the
    agent will remain failed with its old state and error.  Watchers, if
    any, will NOT be notified of the new state.  Throws an exception if
    the agent is not failed.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2194)
- name: resultset-seq
  id: clojure.core-api#clojure.core/resultset-seq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## resultset-seq

    ```
    Usage: (resultset-seq rs)
    ```

    ```
    Creates and returns a lazy sequence of structmaps corresponding to
    the rows in the java.sql.ResultSet rs
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5727)
- name: reverse
  id: clojure.core-api#clojure.core/reverse
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reverse

    ```
    Usage: (reverse coll)
    ```

    ```
    Returns a seq of the items in coll in reverse order. Not lazy.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L949)
- name: reverse
  id: clojure.string-api#clojure.string/reverse
  summary: null
  belongs_to: clojure.string
  description: |-
    ## reverse

    ```
    Usage: (reverse s)
    ```

    ```
    Returns s with its characters reversed.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L48)
- name: reversible?
  id: clojure.core-api#clojure.core/reversible?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## reversible?

    ```
    Usage: (reversible? coll)
    ```

    ```
    Returns true if coll implements Reversible
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6303)
- name: right
  id: clojure.zip-api#clojure.zip/right
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## right

    ```
    Usage: (right loc)
    ```

    ```
    Returns the loc of the right sibling of the node at this loc, or nil
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L149)
- name: rightmost
  id: clojure.zip-api#clojure.zip/rightmost
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## rightmost

    ```
    Usage: (rightmost loc)
    ```

    ```
    Returns the loc of the rightmost sibling of the node at this loc, or self
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L157)
- name: rights
  id: clojure.zip-api#clojure.zip/rights
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## rights

    ```
    Usage: (rights loc)
    ```

    ```
    Returns a seq of the right siblings of this loc
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L102)
- name: rint
  id: clojure.math-api#clojure.math/rint
  summary: null
  belongs_to: clojure.math
  description: |-
    ## rint

    ```
    Usage: (rint a)
    ```

    ```
    Returns the double closest to a and equal to a mathematical integer.
    If two values are equally close, return the even one.
    If a is ##NaN or ##Inf or ##-Inf or zero => a
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#rint-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L222)
- name: root
  id: clojure.zip-api#clojure.zip/root
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## root

    ```
    Usage: (root loc)
    ```

    ```
    zips all the way up and returns the root node, reflecting any
    changes.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L137)
- name: root-cause
  id: clojure.main-api#clojure.main/root-cause
  summary: null
  belongs_to: clojure.main
  description: |-
    ## root-cause

    ```
    Usage: (root-cause t)
    ```

    ```
    Returns the initial cause of an exception or error by peeling off all of
    its wrappers
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L35)
- name: root-cause
  id: clojure.repl-api#clojure.repl/root-cause
  summary: null
  belongs_to: clojure.repl
  description: |-
    ## root-cause

    ```
    Usage: (root-cause t)
    ```

    ```
    Returns the initial cause of an exception or error by peeling off all of
    its wrappers
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L214)
- name: root-cause
  id: clojure.stacktrace-api#clojure.stacktrace/root-cause
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.stacktrace
  description: "## root-cause\n\n```\nUsage: (root-cause tr)\n```\n\n```\nReturns the last 'cause' Throwable in a chain of Throwables.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/dbb448f7709b20c392558e7d7871d1e9b28c9440/src/clj/clojure/stacktrace.clj#L20)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.stacktrace-api.html](https://clojure.github.io/clojure/clojure.stacktrace-api.html)"
- name: round
  id: clojure.math-api#clojure.math/round
  summary: null
  belongs_to: clojure.math
  description: |-
    ## round

    ```
    Usage: (round a)
    ```

    ```
    Returns the closest long to a. If equally close to two values, return the one
    closer to ##Inf.
    If a is ##NaN => 0
    If a is ##-Inf or < Long/MIN_VALUE => Long/MIN_VALUE
    If a is ##Inf or > Long/MAX_VALUE => Long/MAX_VALUE
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#round-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L254)
- name: rseq
  id: clojure.core-api#clojure.core/rseq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## rseq

    ```
    Usage: (rseq rev)
    ```

    ```
    Returns, in constant time, a seq of the items in rev (which
    can be a vector or sorted-map), in reverse order. If rev is empty returns nil
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1596)
- name: rsubseq
  id: clojure.core-api#clojure.core/rsubseq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## rsubseq

    ```
    Usage: (rsubseq sc test key)
           (rsubseq sc start-test start-key end-test end-key)
    ```

    ```
    sc must be a sorted collection, test(s) one of <, <=, > or
    >=. Returns a reverse seq of those entries with keys ek for
    which (test (.. sc comparator (compare ek key)) 0) is true
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5151)
- name: run!
  id: clojure.core-api#clojure.core/run!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## run!

    ```
    Usage: (run! proc coll)
    ```

    ```
    Runs the supplied procedure (via reduce), for purposes of side
    effects, on successive items in the collection. Returns nil
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7778)
- name: run-all-tests
  id: clojure.test-api#clojure.test/run-all-tests
  summary: null
  belongs_to: clojure.test
  description: |-
    ## run-all-tests

    ```
    Usage: (run-all-tests)
           (run-all-tests re)
    ```

    ```
    Runs all tests in all namespaces; prints results.
    Optional argument is a regular expression; only namespaces with
    names matching the regular expression (with re-matches) will be
    tested.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L780)
- name: run-test
  id: clojure.test-api#clojure.test/run-test
  summary: null
  belongs_to: clojure.test
  description: |-
    ## run-test

    ```
    Usage: (run-test test-symbol)
    ```

    ```
    Runs a single test.

    Because the intent is to run a single test, there is no check for the namespace test-ns-hook.
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L813)
- name: run-test-var
  id: clojure.test-api#clojure.test/run-test-var
  summary: null
  belongs_to: clojure.test
  description: |-
    ## run-test-var

    ```
    Usage: (run-test-var v)
    ```

    ```
    Runs the tests for a single Var, with fixtures executed around the test, and summary output after.
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L797)
- name: run-tests
  id: clojure.test-api#clojure.test/run-tests
  summary: null
  belongs_to: clojure.test
  description: |-
    ## run-tests

    ```
    Usage: (run-tests)
           (run-tests & namespaces)
    ```

    ```
    Runs all tests in the given namespaces; prints results.
    Defaults to current namespace if none given.  Returns a map
    summarizing test results.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L768)
- name: satisfies?
  id: clojure.core-api#clojure.core/satisfies?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## satisfies?

    ```
    Usage: (satisfies? protocol x)
    ```

    ```
    Returns true if x satisfies the protocol
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/8957a93099fc506c3b24ed5739bf9e2fc1811bef/src/clj/clojure/core_deftype.clj#L570)
- name: sax-parser
  id: clojure.xml-api#clojure.xml/sax-parser
  summary: null
  belongs_to: clojure.xml
  description: |-
    ## sax-parser

    ```
    Usage: (sax-parser)
    ```

    ```
    Create a new SAXParser
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/4a4a6e7717d411679820c4a3ce735a77aef45cc3/src/clj/clojure/xml.clj#L75)
- name: scalb
  id: clojure.math-api#clojure.math/scalb
  summary: null
  belongs_to: clojure.math
  description: |-
    ## scalb

    ```
    Usage: (scalb d scaleFactor)
    ```

    ```
    Returns d * 2^scaleFactor, scaling by a factor of 2. If the exponent
    is between Double/MIN_EXPONENT and Double/MAX_EXPONENT, the answer is exact.
    If d is ##NaN => ##NaN
    If d is ##Inf or ##-Inf => ##Inf or ##-Inf respectively
    If d is zero => zero of same sign as d
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L511)
- name: second
  id: clojure.core-api#clojure.core/second
  summary: null
  belongs_to: clojure.core
  description: |-
    ## second

    ```
    Usage: (second x)
    ```

    ```
    Same as (first (next x))
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L93)
- name: select
  id: clojure.set-api#clojure.set/select
  summary: null
  belongs_to: clojure.set
  description: |-
    ## select

    ```
    Usage: (select pred xset)
    ```

    ```
    Returns a set of the elements for which pred is true
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L65)
- name: select-keys
  id: clojure.core-api#clojure.core/select-keys
  summary: null
  belongs_to: clojure.core
  description: |-
    ## select-keys

    ```
    Usage: (select-keys map keyseq)
    ```

    ```
    Returns a map containing only those entries in map whose key is in keys
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1555)
- name: send
  id: clojure.core-api#clojure.core/send
  summary: null
  belongs_to: clojure.core
  description: |-
    ## send

    ```
    Usage: (send a f & args)
    ```

    ```
    Dispatch an action to an agent. Returns the agent immediately.
    Subsequently, in a thread from a thread pool, the state of the agent
    will be set to the value of:

    (apply action-fn state-of-agent args)
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2128)
- name: send-off
  id: clojure.core-api#clojure.core/send-off
  summary: null
  belongs_to: clojure.core
  description: |-
    ## send-off

    ```
    Usage: (send-off a f & args)
    ```

    ```
    Dispatch a potentially blocking action to an agent. Returns the
    agent immediately. Subsequently, in a separate thread, the state of
    the agent will be set to the value of:

    (apply action-fn state-of-agent args)
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2139)
- name: send-via
  id: clojure.core-api#clojure.core/send-via
  summary: null
  belongs_to: clojure.core
  description: |-
    ## send-via

    ```
    Usage: (send-via executor a f & args)
    ```

    ```
    Dispatch an action to an agent. Returns the agent immediately.
    Subsequently, in a thread supplied by executor, the state of the agent
    will be set to the value of:

    (apply action-fn state-of-agent args)
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2118)
- name: seq
  id: clojure.core-api#clojure.core/seq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## seq

    ```
    Usage: (seq coll)
    ```

    ```
    Returns a seq on the collection. If the collection is
    empty, returns nil.  (seq nil) returns nil. seq also works on
    Strings, native Java arrays (of reference types) and any objects
    that implement Iterable. Note that seqs cache values, thus seq
    should not be used on any Iterable whose iterator repeatedly
    returns the same mutable object.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L128)
- name: seq-to-map-for-destructuring
  id: clojure.core-api#clojure.core/seq-to-map-for-destructuring
  summary: null
  belongs_to: clojure.core
  description: |-
    ## seq-to-map-for-destructuring

    ```
    Usage: (seq-to-map-for-destructuring s)
    ```

    ```
    Builds a map from a seq as described in
    https://clojure.org/reference/special_forms#keyword-arguments
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4392)
- name: seq-zip
  id: clojure.zip-api#clojure.zip/seq-zip
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## seq-zip

    ```
    Usage: (seq-zip root)
    ```

    ```
    Returns a zipper for nested sequences, given a root sequence
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L35)
- name: seq?
  id: clojure.core-api#clojure.core/seq?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## seq?

    ```
    Usage: (seq? x)
    ```

    ```
    Return true if x implements ISeq
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L148)
- name: seqable?
  id: clojure.core-api#clojure.core/seqable?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## seqable?

    ```
    Usage: (seqable? x)
    ```

    ```
    Return true if the seq function is supported for x
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6260)
- name: seque
  id: clojure.core-api#clojure.core/seque
  summary: null
  belongs_to: clojure.core
  description: |-
    ## seque

    ```
    Usage: (seque s)
           (seque n-or-q s)
    ```

    ```
    Creates a queued seq on another (presumably lazy) seq s. The queued
    seq will produce a concrete seq in the background, and can get up to
    n items ahead of the consumer. n-or-q can be an integer n buffer
    size, or an instance of java.util.concurrent BlockingQueue. Note
    that reading from a seque can block if the reader gets ahead of the
    producer.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5422)
- name: sequence
  id: clojure.core-api#clojure.core/sequence
  summary: null
  belongs_to: clojure.core
  description: |-
    ## sequence

    ```
    Usage: (sequence coll)
           (sequence xform coll)
           (sequence xform coll & colls)
    ```

    ```
    Coerces coll to a (possibly empty) sequence, if it is not already
    one. Will not force a lazy seq. (sequence nil) yields (), When a
    transducer is supplied, returns a lazy sequence of applications of
    the transform to the items in coll(s), i.e. to the set of first
    items of each coll, followed by the set of second
    items in each coll, until any one of the colls is exhausted.  Any
    remaining items in other colls are ignored. The transform should accept
    number-of-colls arguments
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2664)
- name: sequential?
  id: clojure.core-api#clojure.core/sequential?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## sequential?

    ```
    Usage: (sequential? coll)
    ```

    ```
    Returns true if coll implements Sequential
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6285)
- name: set
  id: clojure.core-api#clojure.core/set
  summary: null
  belongs_to: clojure.core
  description: |-
    ## set

    ```
    Usage: (set coll)
    ```

    ```
    Returns a set of the distinct elements of coll.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4106)
- name: set!
  id: clojure.core-api#clojure.core/set!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## set!

    ```
    Usage: (set! var-symbol expr)
           (set! (. instance-expr instanceFieldName-symbol) expr)
           (set! (. Classname-symbol staticFieldName-symbol) expr)
    ```

    ```
    Used to set thread-local-bound vars, Java object instance
    fields, and Java class static fields.

    Please see https://clojure.org/vars#set
    ```

    Added in Clojure version 1.0
- name: set-agent-send-executor!
  id: clojure.core-api#clojure.core/set-agent-send-executor!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## set-agent-send-executor!

    ```
    Usage: (set-agent-send-executor! executor)
    ```

    ```
    Sets the ExecutorService to be used by send
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2106)
- name: set-agent-send-off-executor!
  id: clojure.core-api#clojure.core/set-agent-send-off-executor!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## set-agent-send-off-executor!

    ```
    Usage: (set-agent-send-off-executor! executor)
    ```

    ```
    Sets the ExecutorService to be used by send-off
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2112)
- name: set-break-handler!
  id: clojure.repl-api#clojure.repl/set-break-handler!
  summary: null
  belongs_to: clojure.repl
  description: |-
    ## set-break-handler!

    ```
    Usage: (set-break-handler!)
           (set-break-handler! f)
    ```

    ```
    Register INT signal handler.  After calling this, Ctrl-C will cause
    the given function f to be called with a single argument, the signal.
    Uses thread-stopper if no function given.
    ```

    [Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L279)
- name: set-error-handler!
  id: clojure.core-api#clojure.core/set-error-handler!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## set-error-handler!

    ```
    Usage: (set-error-handler! a handler-fn)
    ```

    ```
    Sets the error-handler of agent a to handler-fn.  If an action
    being run by the agent throws an exception or doesn't pass the
    validator fn, handler-fn will be called with two arguments: the
    agent and the exception.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2211)
- name: set-error-mode!
  id: clojure.core-api#clojure.core/set-error-mode!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## set-error-mode!

    ```
    Usage: (set-error-mode! a mode-keyword)
    ```

    ```
    Sets the error-mode of agent a to mode-keyword, which must be
    either :fail or :continue.  If an action being run by the agent
    throws an exception or doesn't pass the validator fn, an
    error-handler may be called (see set-error-handler!), after which,
    if the mode is :continue, the agent will continue as if neither the
    action that caused the error nor the error itself ever happened.

    If the mode is :fail, the agent will become failed and will stop
    accepting new 'send' and 'send-off' actions, and any previously
    queued actions will be held until a 'restart-agent'.  Deref will
    still work, returning the state of the agent before the error.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2229)
- name: set-pprint-dispatch
  id: clojure.pprint-api#clojure.pprint/set-pprint-dispatch
  summary: null
  belongs_to: clojure.pprint
  description: "## set-pprint-dispatch\n\n```\nUsage: (set-pprint-dispatch function)\n```\n\n```\nSet the pretty print dispatch function to a function matching (fn [obj] ...)\nwhere obj is the object to pretty print. That function will be called with *out* set\nto a pretty printing writer to which it should do its printing.\n\nFor example functions, see simple-dispatch and code-dispatch in \nclojure.pprint.dispatch.clj.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L260)"
- name: set-test
  id: clojure.test-api#clojure.test/set-test
  summary: null
  belongs_to: clojure.test
  description: |-
    ## set-test

    ```
    Usage: (set-test name & body)
    ```

    ```
    Experimental.
    Sets :test metadata of the named var to a fn with the given body.
    The var must already exist.  Does not modify the value of the var.

    When *load-tests* is false, set-test is ignored.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L648)
- name: set-validator!
  id: clojure.core-api#clojure.core/set-validator!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## set-validator!

    ```
    Usage: (set-validator! iref validator-fn)
    ```

    ```
    Sets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a
    side-effect-free fn of one argument, which will be passed the intended
    new state on any state change. If the new state is unacceptable, the
    validator-fn should return false or throw an exception. If the current state (root
    value if var) is not acceptable to the new validator, an exception
    will be thrown and the validator will not be changed.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2406)
- name: set?
  id: clojure.core-api#clojure.core/set?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## set?

    ```
    Usage: (set? x)
    ```

    ```
    Returns true if x implements IPersistentSet
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4100)
- name: sh
  id: clojure.java.shell-api#clojure.java.shell/sh
  summary: null
  belongs_to: clojure.java.shell
  description: |-
    ## sh

    ```
    Usage: (sh & args)
    ```

    ```
    Passes the given strings to Runtime.exec() to launch a sub-process.

    Options are

    :in      may be given followed by any legal input source for
             clojure.java.io/copy, e.g. InputStream, Reader, File, byte[],
             or String, to be fed to the sub-process's stdin.
    :in-enc  option may be given followed by a String, used as a character
             encoding name (for example "UTF-8" or "ISO-8859-1") to
             convert the input string specified by the :in option to the
             sub-process's stdin.  Defaults to UTF-8.
             If the :in option provides a byte array, then the bytes are passed
             unencoded, and this option is ignored.
    :out-enc option may be given followed by :bytes or a String. If a
             String is given, it will be used as a character encoding
             name (for example "UTF-8" or "ISO-8859-1") to convert
             the sub-process's stdout to a String which is returned.
             If :bytes is given, the sub-process's stdout will be stored
             in a byte array and returned.  Defaults to UTF-8.
    :env     override the process env with a map (or the underlying Java
             String[] if you are a masochist).
    :dir     override the process dir with a String or java.io.File.

    You can bind :env or :dir for multiple operations using with-sh-env
    and with-sh-dir.

    sh returns a map of
      :exit => sub-process's exit code
      :out  => sub-process's stdout (as byte[] or String)
      :err  => sub-process's stderr (String via platform default encoding)
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/027d8ff2859442b222bf9cfa4c1be45567b788eb/src/clj/clojure/java/shell.clj#L79)
- name: short
  id: clojure.core-api#clojure.core/short
  summary: null
  belongs_to: clojure.core
  description: |-
    ## short

    ```
    Usage: (short x)
    ```

    ```
    Coerce to short
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3499)
- name: short-array
  id: clojure.core-api#clojure.core/short-array
  summary: null
  belongs_to: clojure.core
  description: |-
    ## short-array

    ```
    Usage: (short-array size-or-seq)
           (short-array size init-val-or-seq)
    ```

    ```
    Creates an array of shorts
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5334)
- name: shorts
  id: clojure.core-api#clojure.core/shorts
  summary: null
  belongs_to: clojure.core
  description: |-
    ## shorts

    ```
    Usage: (shorts xs)
    ```

    ```
    Casts to shorts[]
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5388)
- name: shuffle
  id: clojure.core-api#clojure.core/shuffle
  summary: null
  belongs_to: clojure.core
  description: |-
    ## shuffle

    ```
    Usage: (shuffle coll)
    ```

    ```
    Return a random permutation of coll
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7342)
- name: shutdown-agents
  id: clojure.core-api#clojure.core/shutdown-agents
  summary: null
  belongs_to: clojure.core
  description: |-
    ## shutdown-agents

    ```
    Usage: (shutdown-agents)
    ```

    ```
    Initiates a shutdown of the thread pools that back the agent
    system. Running actions will complete, but no new actions will be
    accepted
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2271)
- name: signum
  id: clojure.math-api#clojure.math/signum
  summary: null
  belongs_to: clojure.math
  description: |-
    ## signum

    ```
    Usage: (signum d)
    ```

    ```
    Returns the signum function of d - zero for zero, 1.0 if >0, -1.0 if <0.
    If d is ##NaN => ##NaN
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#signum-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L364)
- name: simple-dispatch
  id: clojure.pprint-api#clojure.pprint/simple-dispatch
  summary: null
  belongs_to: clojure.pprint
  description: |-
    ## simple-dispatch

    ```
    Usage: (simple-dispatch object)
    ```

    ```
    The pretty print dispatch function for simple data structure format.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/af9f2ed34326a5f590f245155c73958e7a2dc17f/src/clj/clojure/pprint/dispatch.clj#L174)
- name: simple-ident?
  id: clojure.core-api#clojure.core/simple-ident?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## simple-ident?

    ```
    Usage: (simple-ident? x)
    ```

    ```
    Return true if x is a symbol or keyword without a namespace
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1632)
- name: simple-keyword?
  id: clojure.core-api#clojure.core/simple-keyword?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## simple-keyword?

    ```
    Usage: (simple-keyword? x)
    ```

    ```
    Return true if x is a keyword without a namespace
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1652)
- name: simple-symbol?
  id: clojure.core-api#clojure.core/simple-symbol?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## simple-symbol?

    ```
    Usage: (simple-symbol? x)
    ```

    ```
    Return true if x is a symbol without a namespace
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1642)
- name: sin
  id: clojure.math-api#clojure.math/sin
  summary: null
  belongs_to: clojure.math
  description: |-
    ## sin

    ```
    Usage: (sin a)
    ```

    ```
    Returns the sine of an angle.
    If a is ##NaN, ##-Inf, ##Inf => ##NaN
    If a is zero => zero with the same sign as a
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sin-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L42)
- name: sinh
  id: clojure.math-api#clojure.math/sinh
  summary: null
  belongs_to: clojure.math
  description: |-
    ## sinh

    ```
    Usage: (sinh x)
    ```

    ```
    Returns the hyperbolic sine of x, (e^x - e^-x)/2.
    If x is ##NaN => ##NaN
    If x is ##Inf or ##-Inf or zero => x
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sinh-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L374)
- name: skip-if-eol
  id: clojure.main-api#clojure.main/skip-if-eol
  summary: null
  belongs_to: clojure.main
  description: |-
    ## skip-if-eol

    ```
    Usage: (skip-if-eol s)
    ```

    ```
    If the next character on stream s is a newline, skips it, otherwise
    leaves the stream untouched. Returns :line-start, :stream-end, or :body
    to indicate the relative location of the next character on s. The stream
    must either be an instance of LineNumberingPushbackReader or duplicate
    its behavior of both supporting .unread and collapsing all of CR, LF, and
    CRLF to a single \newline.
    ```

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L108)
- name: skip-whitespace
  id: clojure.main-api#clojure.main/skip-whitespace
  summary: null
  belongs_to: clojure.main
  description: |-
    ## skip-whitespace

    ```
    Usage: (skip-whitespace s)
    ```

    ```
    Skips whitespace characters on stream s. Returns :line-start, :stream-end,
    or :body to indicate the relative location of the next character on s.
    Interprets comma as whitespace and semicolon as comment to end of line.
    Does not interpret #! as comment to end of line because only one
    character of lookahead is available. The stream must either be an
    instance of LineNumberingPushbackReader or duplicate its behavior of both
    supporting .unread and collapsing all of CR, LF, and CRLF to a single
    \newline.
    ```

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L122)
- name: slurp
  id: clojure.core-api#clojure.core/slurp
  summary: null
  belongs_to: clojure.core
  description: |-
    ## slurp

    ```
    Usage: (slurp f & opts)
    ```

    ```
    Opens a reader on f and reads all its contents, returning a string.
    See clojure.java.io/reader for a complete list of supported arguments.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7009)
- name: some
  id: clojure.core-api#clojure.core/some
  summary: null
  belongs_to: clojure.core
  description: |-
    ## some

    ```
    Usage: (some pred coll)
    ```

    ```
    Returns the first logical true value of (pred x) for any x in coll,
    else nil.  One common idiom is to use a set as pred, for example
    this will return :fred if :fred is in the sequence, otherwise nil:
    (some #{:fred} coll)
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2709)
- name: some->
  id: clojure.core-api#clojure.core/some->
  summary: null
  belongs_to: clojure.core
  description: |-
    ## some-\>

    ```
    Usage: (some-> expr & forms)
    ```

    ```
    When expr is not nil, threads it into the first form (via ->),
    and when that result is not nil, through the next etc
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7652)
- name: some->>
  id: clojure.core-api#clojure.core/some->>
  summary: null
  belongs_to: clojure.core
  description: |-
    ## some-\>\>

    ```
    Usage: (some->> expr & forms)
    ```

    ```
    When expr is not nil, threads it into the first form (via ->>),
    and when that result is not nil, through the next etc
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7666)
- name: some-fn
  id: clojure.core-api#clojure.core/some-fn
  summary: null
  belongs_to: clojure.core
  description: |-
    ## some-fn

    ```
    Usage: (some-fn p)
           (some-fn p1 p2)
           (some-fn p1 p2 p3)
           (some-fn p1 p2 p3 & ps)
    ```

    ```
    Takes a set of predicates and returns a function f that returns the first logical true value
    returned by one of its composing predicates against any of its arguments, else it returns
    logical false. Note that f is short-circuiting in that it will stop execution on the first
    argument that triggers a logical true result against the original predicates.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7504)
- name: some?
  id: clojure.core-api#clojure.core/some?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## some?

    ```
    Usage: (some? x)
    ```

    ```
    Returns true if x is not nil, false otherwise.
    ```

    Added in Clojure version 1.6

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L533)
- name: sort
  id: clojure.core-api#clojure.core/sort
  summary: null
  belongs_to: clojure.core
  description: |-
    ## sort

    ```
    Usage: (sort coll)
           (sort comp coll)
    ```

    ```
    Returns a sorted sequence of the items in coll. If no comparator is
    supplied, uses compare.  comparator must implement
    java.util.Comparator.  Guaranteed to be stable: equal elements will
    not be reordered.  If coll is a Java array, it will be modified.  To
    avoid this, sort a copy of the array.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3103)
- name: sort-by
  id: clojure.core-api#clojure.core/sort-by
  summary: null
  belongs_to: clojure.core
  description: |-
    ## sort-by

    ```
    Usage: (sort-by keyfn coll)
           (sort-by keyfn comp coll)
    ```

    ```
    Returns a sorted sequence of the items in coll, where the sort
    order is determined by comparing (keyfn item).  If no comparator is
    supplied, uses compare.  comparator must implement
    java.util.Comparator.  Guaranteed to be stable: equal elements will
    not be reordered.  If coll is a Java array, it will be modified.  To
    avoid this, sort a copy of the array.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3120)
- name: sorted-map
  id: clojure.core-api#clojure.core/sorted-map
  summary: null
  belongs_to: clojure.core
  description: |-
    ## sorted-map

    ```
    Usage: (sorted-map & keyvals)
    ```

    ```
    keyval => key val
    Returns a new sorted map with supplied mappings.  If any keys are
    equal, they are handled as if by repeated uses of assoc.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L400)
- name: sorted-map-by
  id: clojure.core-api#clojure.core/sorted-map-by
  summary: null
  belongs_to: clojure.core
  description: |-
    ## sorted-map-by

    ```
    Usage: (sorted-map-by comparator & keyvals)
    ```

    ```
    keyval => key val
    Returns a new sorted map with supplied mappings, using the supplied
    comparator.  If any keys are equal, they are handled as if by
    repeated uses of assoc.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L409)
- name: sorted-set
  id: clojure.core-api#clojure.core/sorted-set
  summary: null
  belongs_to: clojure.core
  description: |-
    ## sorted-set

    ```
    Usage: (sorted-set & keys)
    ```

    ```
    Returns a new sorted set with supplied keys.  Any equal keys are
    handled as if by repeated uses of conj.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L419)
- name: sorted-set-by
  id: clojure.core-api#clojure.core/sorted-set-by
  summary: null
  belongs_to: clojure.core
  description: |-
    ## sorted-set-by

    ```
    Usage: (sorted-set-by comparator & keys)
    ```

    ```
    Returns a new sorted set with supplied keys, using the supplied
    comparator.  Any equal keys are handled as if by repeated uses of
    conj.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L427)
- name: sorted?
  id: clojure.core-api#clojure.core/sorted?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## sorted?

    ```
    Usage: (sorted? coll)
    ```

    ```
    Returns true if coll implements Sorted
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6291)
- name: source
  id: clojure.repl-api#clojure.repl/source
  summary: null
  belongs_to: clojure.repl
  description: |-
    ## source

    ```
    Usage: (source n)
    ```

    ```
    Prints the source code for the given symbol, if it can find it.
    This requires that the symbol resolve to a Var defined in a
    namespace for which the .clj is in the classpath.

    Example: (source filter)
    ```

    [Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L172)
- name: source-fn
  id: clojure.repl-api#clojure.repl/source-fn
  summary: null
  belongs_to: clojure.repl
  description: |-
    ## source-fn

    ```
    Usage: (source-fn x)
    ```

    ```
    Returns a string of the source code for the given symbol, if it can
    find it.  This requires that the symbol resolve to a Var defined in
    a namespace for which the .clj is in the classpath.  Returns nil if
    it can't find the source.  For most REPL usage, 'source' is more
    convenient.

    Example: (source-fn 'filter)
    ```

    [Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L147)
- name: special-symbol?
  id: clojure.core-api#clojure.core/special-symbol?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## special-symbol?

    ```
    Usage: (special-symbol? s)
    ```

    ```
    Returns true if s names a special form
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4993)
- name: spit
  id: clojure.core-api#clojure.core/spit
  summary: null
  belongs_to: clojure.core
  description: |-
    ## spit

    ```
    Usage: (spit f content & options)
    ```

    ```
    Opposite of slurp.  Opens f with writer, writes content, then
    closes f. Options passed to clojure.java.io/writer.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7021)
- name: split
  id: clojure.string-api#clojure.string/split
  summary: null
  belongs_to: clojure.string
  description: |-
    ## split

    ```
    Usage: (split s re)
           (split s re limit)
    ```

    ```
    Splits string on a regular expression.  Optional argument limit is
    the maximum number of parts. Not lazy. Returns vector of the parts.
    Trailing empty strings are not returned - pass limit of -1 to return all.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L219)
- name: split-at
  id: clojure.core-api#clojure.core/split-at
  summary: null
  belongs_to: clojure.core
  description: |-
    ## split-at

    ```
    Usage: (split-at n coll)
    ```

    ```
    Returns a vector of [(take n coll) (drop n coll)]
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3002)
- name: split-lines
  id: clojure.string-api#clojure.string/split-lines
  summary: null
  belongs_to: clojure.string
  description: |-
    ## split-lines

    ```
    Usage: (split-lines s)
    ```

    ```
    Splits s on \n or \r\n. Trailing empty lines are not returned.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L229)
- name: split-with
  id: clojure.core-api#clojure.core/split-with
  summary: null
  belongs_to: clojure.core
  description: |-
    ## split-with

    ```
    Usage: (split-with pred coll)
    ```

    ```
    Returns a vector of [(take-while pred coll) (drop-while pred coll)]
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3009)
- name: sqrt
  id: clojure.math-api#clojure.math/sqrt
  summary: null
  belongs_to: clojure.math
  description: |-
    ## sqrt

    ```
    Usage: (sqrt a)
    ```

    ```
    Returns the positive square root of a.
    If a is ##NaN or negative => ##NaN
    If a is ##Inf => ##Inf
    If a is zero => a
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sqrt-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L160)
- name: stack-element-str
  id: clojure.repl-api#clojure.repl/stack-element-str
  summary: null
  belongs_to: clojure.repl
  description: |-
    ## stack-element-str

    ```
    Usage: (stack-element-str el)
    ```

    ```
    Returns a (possibly unmunged) string representation of a StackTraceElement
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L227)
- name: stack-element-str
  id: clojure.main-api#clojure.main/stack-element-str
  summary: null
  belongs_to: clojure.main
  description: |-
    ## stack-element-str

    ```
    Usage: (stack-element-str el)
    ```

    ```
    Returns a (possibly unmunged) string representation of a StackTraceElement
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L62)
- name: StackTraceElement->vec
  id: clojure.core-api#clojure.core/StackTraceElement->vec
  summary: null
  belongs_to: clojure.core
  description: |-
    ## StackTraceElement-\>vec

    ```
    Usage: (StackTraceElement->vec o)
    ```

    ```
    Constructs a data representation for a StackTraceElement: [class method file line]
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L465)
- name: start-server
  id: clojure.core-api#clojure.core.server/start-server
  summary: null
  belongs_to: clojure.core
  description: |-
    ## start-server

    ```
    Usage: (start-server opts)
    ```

    ```
    Start a socket server given the specified opts:
     :address Host or address, string, defaults to loopback address
     :port Port, integer, required
     :name Name, required
     :accept Namespaced symbol of the accept function to invoke, required
     :args Vector of args to pass to accept function
     :bind-err Bind *err* to socket out stream?, defaults to true
     :server-daemon Is server thread a daemon?, defaults to true
     :client-daemon Are client threads daemons?, defaults to true
    Returns server socket.
    ```

    [Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L84)
- name: start-servers
  id: clojure.core-api#clojure.core.server/start-servers
  summary: null
  belongs_to: clojure.core
  description: |-
    ## start-servers

    ```
    Usage: (start-servers system-props)
    ```

    ```
    Start all servers specified in the system properties.
    ```

    [Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L157)
- name: startparse-sax
  id: clojure.xml-api#clojure.xml/startparse-sax
  summary: null
  belongs_to: clojure.xml
  description: |-
    ## startparse-sax

    ```
    Usage: (startparse-sax s ch)
    ```

    ```
    A startparse function suitable for use with clojure.xml/parse.
    Note that this function is open to XXE entity attacks, see startparse-sax-safe.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/4a4a6e7717d411679820c4a3ce735a77aef45cc3/src/clj/clojure/xml.clj#L92)
- name: startparse-sax-safe
  id: clojure.xml-api#clojure.xml/startparse-sax-safe
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.xml
  description: "## startparse-sax-safe\n\n```\nUsage: (startparse-sax-safe s ch)\n```\n\n```\nA startparse function suitable for use with clojure.xml/parse.\nExternal entity resolution is disabled to prevent XXE entity attacks.\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/4a4a6e7717d411679820c4a3ce735a77aef45cc3/src/clj/clojure/xml.clj#L99)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.xml-api.html](https://clojure.github.io/clojure/clojure.xml-api.html)"
- name: starts-with?
  id: clojure.string-api#clojure.string/starts-with?
  summary: null
  belongs_to: clojure.string
  description: |-
    ## starts-with?

    ```
    Usage: (starts-with? s substr)
    ```

    ```
    True if s starts with substr.
    ```

    Added in Clojure version 1.8

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L361)
- name: stop-server
  id: clojure.core-api#clojure.core.server/stop-server
  summary: null
  belongs_to: clojure.core
  description: |-
    ## stop-server

    ```
    Usage: (stop-server)
           (stop-server name)
    ```

    ```
    Stop server with name or use the server-name from *session* if none supplied.
    Returns true if server stopped successfully, nil if not found, or throws if
    there is an error closing the socket.
    ```

    [Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L125)
- name: stop-servers
  id: clojure.core-api#clojure.core.server/stop-servers
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.core
  description: "## stop-servers\n\n```\nUsage: (stop-servers)\n```\n\n```\nStop all servers ignores all errors, and returns nil.\n```\n\n[Source](https://github.com/clojure/clojure/blob/fc98f92c76254c5a6306debaf0f9df28c3bb3646/src/clj/clojure/core/server.clj#L139)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.core-api.html](https://clojure.github.io/clojure/clojure.core-api.html)"
- name: str
  id: clojure.core-api#clojure.core/str
  summary: null
  belongs_to: clojure.core
  description: |-
    ## str

    ```
    Usage: (str)
           (str x)
           (str x & ys)
    ```

    ```
    With no args, returns the empty string. With one arg x, returns
    x.toString().  (str nil) returns the empty string. With more than
    one arg, returns the concatenation of the str values of the args.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L546)
- name: string?
  id: clojure.core-api#clojure.core/string?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## string?

    ```
    Usage: (string? x)
    ```

    ```
    Return true if x is a String
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L162)
- name: stringify-keys
  id: clojure.walk-api#clojure.walk/stringify-keys
  summary: null
  belongs_to: clojure.walk
  description: |-
    ## stringify-keys

    ```
    Usage: (stringify-keys m)
    ```

    ```
    Recursively transforms all map keys from keywords to strings.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L102)
- name: struct
  id: clojure.core-api#clojure.core/struct
  summary: null
  belongs_to: clojure.core
  description: |-
    ## struct

    ```
    Usage: (struct s & vals)
    ```

    ```
    Returns a new structmap instance with the keys of the
    structure-basis. vals must be supplied for basis keys in order -
    where values are not supplied they will default to nil.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4063)
- name: struct-map
  id: clojure.core-api#clojure.core/struct-map
  summary: null
  belongs_to: clojure.core
  description: |-
    ## struct-map

    ```
    Usage: (struct-map s & inits)
    ```

    ```
    Returns a new structmap instance with the keys of the
    structure-basis. keyvals may contain all, some or none of the basis
    keys - where values are not supplied they will default to nil.
    keyvals can also contain keys not in the basis.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4053)
- name: subs
  id: clojure.core-api#clojure.core/subs
  summary: null
  belongs_to: clojure.core
  description: |-
    ## subs

    ```
    Usage: (subs s start)
           (subs s start end)
    ```

    ```
    Returns the substring of s beginning at start inclusive, and ending
    at end (defaults to length of string), exclusive.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5006)
- name: subseq
  id: clojure.core-api#clojure.core/subseq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## subseq

    ```
    Usage: (subseq sc test key)
           (subseq sc start-test start-key end-test end-key)
    ```

    ```
    sc must be a sorted collection, test(s) one of <, <=, > or
    >=. Returns a seq of those entries with keys ek for
    which (test (.. sc comparator (compare ek key)) 0) is true
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5134)
- name: subset?
  id: clojure.set-api#clojure.set/subset?
  summary: null
  belongs_to: clojure.set
  description: |-
    ## subset?

    ```
    Usage: (subset? set1 set2)
    ```

    ```
    Is set1 a subset of set2?
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L146)
- name: subtract-exact
  id: clojure.math-api#clojure.math/subtract-exact
  summary: null
  belongs_to: clojure.math
  description: |-
    ## subtract-exact

    ```
    Usage: (subtract-exact x y)
    ```

    ```
    Returns the difference of x and y, throws ArithmeticException on overflow.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#subtractExact-long-long-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L286)
- name: subvec
  id: clojure.core-api#clojure.core/subvec
  summary: null
  belongs_to: clojure.core
  description: |-
    ## subvec

    ```
    Usage: (subvec v start)
           (subvec v start end)
    ```

    ```
    Returns a persistent vector of the items in vector from
    start (inclusive) to end (exclusive).  If end is not supplied,
    defaults to (count vector). This operation is O(1) and very fast, as
    the resulting vector shares structure with the original and no
    trimming is done.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3819)
- name: successful?
  id: clojure.test-api#clojure.test/successful?
  summary: null
  belongs_to: clojure.test
  description: |-
    ## successful?

    ```
    Usage: (successful? summary)
    ```

    ```
    Returns true if the given test summary indicates all tests
    were successful, false otherwise.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L789)
- name: supers
  id: clojure.core-api#clojure.core/supers
  summary: null
  belongs_to: clojure.core
  description: |-
    ## supers

    ```
    Usage: (supers class)
    ```

    ```
    Returns the immediate and indirect superclasses and interfaces of c, if any
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5578)
- name: superset?
  id: clojure.set-api#clojure.set/superset?
  summary: null
  belongs_to: clojure.set
  description: |-
    ## superset?

    ```
    Usage: (superset? set1 set2)
    ```

    ```
    Is set1 a superset of set2?
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L154)
- name: swap!
  id: clojure.core-api#clojure.core/swap!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## swap!

    ```
    Usage: (swap! atom f)
           (swap! atom f x)
           (swap! atom f x y)
           (swap! atom f x y & args)
    ```

    ```
    Atomically swaps the value of atom to be:
    (apply f current-value-of-atom args). Note that f may be called
    multiple times, and thus should be free of side effects.  Returns
    the value that was swapped in.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2362)
- name: swap-vals!
  id: clojure.core-api#clojure.core/swap-vals!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## swap-vals!

    ```
    Usage: (swap-vals! atom f)
           (swap-vals! atom f x)
           (swap-vals! atom f x y)
           (swap-vals! atom f x y & args)
    ```

    ```
    Atomically swaps the value of atom to be:
    (apply f current-value-of-atom args). Note that f may be called
    multiple times, and thus should be free of side effects.
    Returns [old new], the value of the atom before and after the swap.
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2374)
- name: symbol
  id: clojure.core-api#clojure.core/symbol
  summary: null
  belongs_to: clojure.core
  description: |-
    ## symbol

    ```
    Usage: (symbol name)
           (symbol ns name)
    ```

    ```
    Returns a Symbol with the given namespace and name. Arity-1 works
    on strings, keywords, and vars.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L591)
- name: symbol?
  id: clojure.core-api#clojure.core/symbol?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## symbol?

    ```
    Usage: (symbol? x)
    ```

    ```
    Return true if x is a Symbol
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L564)
- name: sync
  id: clojure.core-api#clojure.core/sync
  summary: null
  belongs_to: clojure.core
  description: |-
    ## sync

    ```
    Usage: (sync flags-ignored-for-now & body)
    ```

    ```
    transaction-flags => TBD, pass nil for now

    Runs the exprs (in an implicit do) in a transaction that encompasses
    exprs and any nested calls.  Starts a transaction if none is already
    running on this thread. Any uncaught exception will abort the
    transaction and flow out of sync. The exprs may be run more than
    once, but any effects on Refs will be atomic.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2515)
- name: tagged-literal
  id: clojure.core-api#clojure.core/tagged-literal
  summary: null
  belongs_to: clojure.core
  description: |-
    ## tagged-literal

    ```
    Usage: (tagged-literal tag form)
    ```

    ```
    Construct a data representation of a tagged literal from a
    tag symbol and a form.
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7839)
- name: tagged-literal?
  id: clojure.core-api#clojure.core/tagged-literal?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## tagged-literal?

    ```
    Usage: (tagged-literal? value)
    ```

    ```
    Return true if the value is the data representation of a tagged literal
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7833)
- name: take
  id: clojure.core-api#clojure.core.reducers/take
  summary: null
  belongs_to: clojure.core
  description: |-
    ## take

    ```
    Usage: (take n)
           (take n coll)
    ```

    ```
    Ends the reduction of coll after consuming n values.
    ```

    Added in Clojure version 1.5

    [Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L201)
- name: take
  id: clojure.core-api#clojure.core/take
  summary: null
  belongs_to: clojure.core
  description: |-
    ## take

    ```
    Usage: (take n)
           (take n coll)
    ```

    ```
    Returns a lazy sequence of the first n items in coll, or all items if
    there are fewer than n.  Returns a stateful transducer when
    no collection is provided.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2878)
- name: take-last
  id: clojure.core-api#clojure.core/take-last
  summary: null
  belongs_to: clojure.core
  description: |-
    ## take-last

    ```
    Usage: (take-last n coll)
    ```

    ```
    Returns a seq of the last n items in coll.  Depending on the type
    of coll may be no better than linear time.  For vectors, see also subvec.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2958)
- name: take-nth
  id: clojure.core-api#clojure.core/take-nth
  summary: null
  belongs_to: clojure.core
  description: |-
    ## take-nth

    ```
    Usage: (take-nth n)
           (take-nth n coll)
    ```

    ```
    Returns a lazy seq of every nth item in coll.  Returns a stateful
    transducer when no collection is provided.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4289)
- name: take-while
  id: clojure.core-api#clojure.core.reducers/take-while
  summary: null
  belongs_to: clojure.core
  description: "## take-while\n\n```\nUsage: (take-while pred)\n       (take-while pred coll)\n```\n\n```\nEnds the reduction of coll when (pred val) returns logical false.\n```\n\nAdded in Clojure version 1.5\n\n[Source](https://github.com/clojure/clojure/blob/c8752b4fbf317e9715b2d94cfb6b6939631a9bcb/src/clj/clojure/core/reducers.clj#L189)  \n\n## clojure.core.server\n\n```\nSocket server support\n```\n\n## Public Variables and Functions"
- name: take-while
  id: clojure.core-api#clojure.core/take-while
  summary: null
  belongs_to: clojure.core
  description: |-
    ## take-while

    ```
    Usage: (take-while pred)
           (take-while pred coll)
    ```

    ```
    Returns a lazy sequence of successive items from coll while
    (pred item) returns logical true. pred must be free of side-effects.
    Returns a transducer when no collection is provided.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2905)
- name: tan
  id: clojure.math-api#clojure.math/tan
  summary: null
  belongs_to: clojure.math
  description: |-
    ## tan

    ```
    Usage: (tan a)
    ```

    ```
    Returns the tangent of an angle.
    If a is ##NaN, ##-Inf, ##Inf => ##NaN
    If a is zero => zero with the same sign as a
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#tan-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L63)
- name: tanh
  id: clojure.math-api#clojure.math/tanh
  summary: null
  belongs_to: clojure.math
  description: |-
    ## tanh

    ```
    Usage: (tanh x)
    ```

    ```
    Returns the hyperbolic tangent of x, sinh(x)/cosh(x).
    If x is ##NaN => ##NaN
    If x is zero => zero, with same sign
    If x is ##Inf => +1.0
    If x is ##-Inf => -1.0
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#tanh-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L397)
- name: tap>
  id: clojure.core-api#clojure.core/tap>
  summary: null
  belongs_to: clojure.core
  description: |-
    ## tap\>

    ```
    Usage: (tap> x)
    ```

    ```
    sends x to any taps. Will not block. Returns true if there was room in the queue,
    false if not (dropped).
    ```

    Added in Clojure version 1.10

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8000)
- name: test
  id: clojure.core-api#clojure.core/test
  summary: null
  belongs_to: clojure.core
  description: |-
    ## test

    ```
    Usage: (test v)
    ```

    ```
    test [v] finds fn at key :test in var metadata and calls it,
    presuming failure will throw exception
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4854)
- name: test-all-vars
  id: clojure.test-api#clojure.test/test-all-vars
  summary: null
  belongs_to: clojure.test
  description: |-
    ## test-all-vars

    ```
    Usage: (test-all-vars ns)
    ```

    ```
    Calls test-vars on every var interned in the namespace, with fixtures.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L737)
- name: test-ns
  id: clojure.test-api#clojure.test/test-ns
  summary: null
  belongs_to: clojure.test
  description: |-
    ## test-ns

    ```
    Usage: (test-ns ns)
    ```

    ```
    If the namespace defines a function named test-ns-hook, calls that.
    Otherwise, calls test-all-vars on the namespace.  'ns' is a
    namespace object or a symbol.

    Internally binds *report-counters* to a ref initialized to
    *initial-report-counters*.  Returns the final, dereferenced state of
    *report-counters*.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L743)
- name: test-var
  id: clojure.test-api#clojure.test/test-var
  summary: null
  belongs_to: clojure.test
  description: |-
    ## test-var

    ```
    Usage: (test-var v)
    ```

    ```
    If v has a function in its :test metadata, calls that function,
    with *testing-vars* bound to (conj *testing-vars* v).
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L708)
- name: test-vars
  id: clojure.test-api#clojure.test/test-vars
  summary: null
  belongs_to: clojure.test
  description: |-
    ## test-vars

    ```
    Usage: (test-vars vars)
    ```

    ```
    Groups vars by their namespace and runs test-var on them with
    appropriate fixtures applied.
    ```

    Added in Clojure version 1.6

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L723)
- name: testing
  id: clojure.test-api#clojure.test/testing
  summary: null
  belongs_to: clojure.test
  description: |-
    ## testing

    ```
    Usage: (testing string & body)
    ```

    ```
    Adds a new string to the list of testing contexts.  May be nested,
    but must occur inside a test function (deftest).
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L597)
- name: testing-contexts-str
  id: clojure.test-api#clojure.test/testing-contexts-str
  summary: null
  belongs_to: clojure.test
  description: |-
    ## testing-contexts-str

    ```
    Usage: (testing-contexts-str)
    ```

    ```
    Returns a string representation of the current test context. Joins
    strings in *testing-contexts* with spaces.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L307)
- name: testing-vars-str
  id: clojure.test-api#clojure.test/testing-vars-str
  summary: null
  belongs_to: clojure.test
  description: |-
    ## testing-vars-str

    ```
    Usage: (testing-vars-str m)
    ```

    ```
    Returns a string representation of the current test.  Renders names
    in *testing-vars* as a list, then the source file and line of
    current assertion.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L294)
- name: the-ns
  id: clojure.core-api#clojure.core/the-ns
  summary: null
  belongs_to: clojure.core
  description: |-
    ## the-ns

    ```
    Usage: (the-ns x)
    ```

    ```
    If passed a namespace, returns it. Else, when passed a symbol,
    returns the namespace named by it, throwing an exception if not
    found.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4154)
- name: thread-bound?
  id: clojure.core-api#clojure.core/thread-bound?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## thread-bound?

    ```
    Usage: (thread-bound? & vars)
    ```

    ```
    Returns true if all of the vars provided as arguments have thread-local bindings.
    Implies that set!'ing the provided vars will succeed.  Returns true if no vars are provided.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5545)
- name: thread-stopper
  id: clojure.repl-api#clojure.repl/thread-stopper
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.repl
  description: "## thread-stopper\n\n```\nUsage: (thread-stopper)\n       (thread-stopper thread)\n```\n\n```\nReturns a function that takes one arg and uses that as an exception message\nto stop the given thread.  Defaults to the current thread\n```\n\n[Source](https://github.com/clojure/clojure/blob/3b6256e654bf250ddfd01cdaa4be9f39a74c2de6/src/clj/clojure/repl.clj#L273)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.repl-api.html](https://clojure.github.io/clojure/clojure.repl-api.html)"
- name: throw
  id: clojure.core-api#clojure.core/throw
  summary: null
  belongs_to: clojure.core
  description: |-
    ## throw

    ```
    Usage: (throw expr)
    ```

    ```
    The expr is evaluated and thrown, therefore it should
    yield an instance of some derivee of Throwable.

    Please see https://clojure.org/reference/special_forms#throw
    ```

    Added in Clojure version 1.0
- name: Throwable->map
  id: clojure.core-api#clojure.core/Throwable->map
  summary: null
  belongs_to: clojure.core
  description: |-
    ## Throwable-\>map

    ```
    Usage: (Throwable->map o)
    ```

    ```
    Constructs a data representation for a Throwable with keys:
    :cause - root cause message
    :phase - error phase
    :via - cause chain, with cause keys:
             :type - exception class symbol
             :message - exception message
             :data - ex-data
             :at - top stack element
    :trace - root cause stack elements
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/51261641817005f872f9b6a752c5aef0bb7a5be4/src/clj/clojure/core_print.clj#L471)
- name: time
  id: clojure.core-api#clojure.core/time
  summary: null
  belongs_to: clojure.core
  description: |-
    ## time

    ```
    Usage: (time expr)
    ```

    ```
    Evaluates expr and prints the time it took.  Returns the value of
    expr.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3885)
- name: to-array
  id: clojure.core-api#clojure.core/to-array
  summary: null
  belongs_to: clojure.core
  description: |-
    ## to-array

    ```
    Usage: (to-array coll)
    ```

    ```
    Returns an array of Objects containing the contents of coll, which
    can be any Collection.  Maps to java.util.Collection.toArray().
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L340)
- name: to-array-2d
  id: clojure.core-api#clojure.core/to-array-2d
  summary: null
  belongs_to: clojure.core
  description: |-
    ## to-array-2d

    ```
    Usage: (to-array-2d coll)
    ```

    ```
    Returns a (potentially-ragged) 2-dimensional array of Objects
    containing the contents of coll, which can be any Collection of any
    Collection.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4004)
- name: to-degrees
  id: clojure.math-api#clojure.math/to-degrees
  summary: null
  belongs_to: clojure.math
  description: |-
    ## to-degrees

    ```
    Usage: (to-degrees r)
    ```

    ```
    Converts an angle in radians to an approximate equivalent angle in degrees.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toDegrees-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L115)
- name: to-radians
  id: clojure.math-api#clojure.math/to-radians
  summary: null
  belongs_to: clojure.math
  description: |-
    ## to-radians

    ```
    Usage: (to-radians deg)
    ```

    ```
    Converts an angle in degrees to an approximate equivalent angle in radians.
    See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toRadians-double-
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L106)
- name: trampoline
  id: clojure.core-api#clojure.core/trampoline
  summary: null
  belongs_to: clojure.core
  description: |-
    ## trampoline

    ```
    Usage: (trampoline f)
           (trampoline f & args)
    ```

    ```
    trampoline can be used to convert algorithms requiring mutual
    recursion without stack consumption. Calls f with supplied args, if
    any. If f returns a fn, calls that fn with no arguments, and
    continues to repeat, until the return value is not a fn, then
    returns that non-fn value. Note that if you want to return a fn as a
    final value, you must wrap it in some data structure and unpack it
    after trampoline returns.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6334)
- name: transduce
  id: clojure.core-api#clojure.core/transduce
  summary: null
  belongs_to: clojure.core
  description: |-
    ## transduce

    ```
    Usage: (transduce xform f coll)
           (transduce xform f init coll)
    ```

    ```
    reduce with a transformation of f (xf). If init is not
    supplied, (f) will be called to produce it. f should be a reducing
    step function that accepts both 1 and 2 arguments, if it accepts
    only 2 you can add the arity-1 with 'completing'. Returns the result
    of applying (the transformed) xf to init and the first item in coll,
    then applying xf to that result and the 2nd item, etc. If coll
    contains no items, returns init and f is not called. Note that
    certain transforms may inject or skip items.
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6933)
- name: transient
  id: clojure.core-api#clojure.core/transient
  summary: null
  belongs_to: clojure.core
  description: |-
    ## transient

    ```
    Usage: (transient coll)
    ```

    ```
    Returns a new, transient version of the collection, in constant time.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3343)
- name: tree-seq
  id: clojure.core-api#clojure.core/tree-seq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## tree-seq

    ```
    Usage: (tree-seq branch? children root)
    ```

    ```
    Returns a lazy sequence of the nodes in a tree, via a depth-first walk.
     branch? must be a fn of one arg that returns true if passed a node
     that can have children (but may not).  children must be a fn of one
     arg that returns a sequence of the children. Will only be called on
     nodes for which branch? returns true. Root is the root node of the
    tree.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4956)
- name: trim
  id: clojure.string-api#clojure.string/trim
  summary: null
  belongs_to: clojure.string
  description: |-
    ## trim

    ```
    Usage: (trim s)
    ```

    ```
    Removes whitespace from both ends of string.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L235)
- name: trim-newline
  id: clojure.string-api#clojure.string/trim-newline
  summary: null
  belongs_to: clojure.string
  description: |-
    ## trim-newline

    ```
    Usage: (trim-newline s)
    ```

    ```
    Removes all trailing newline \n or return \r characters from
    string.  Similar to Perl's chomp.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L275)
- name: triml
  id: clojure.string-api#clojure.string/triml
  summary: null
  belongs_to: clojure.string
  description: |-
    ## triml

    ```
    Usage: (triml s)
    ```

    ```
    Removes whitespace from the left side of string.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L252)
- name: trimr
  id: clojure.string-api#clojure.string/trimr
  summary: null
  belongs_to: clojure.string
  description: |-
    ## trimr

    ```
    Usage: (trimr s)
    ```

    ```
    Removes whitespace from the right side of string.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L264)
- name: true?
  id: clojure.core-api#clojure.core/true?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## true?

    ```
    Usage: (true? x)
    ```

    ```
    Returns true if x is the value true, false otherwise.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L514)
- name: try
  id: clojure.core-api#clojure.core/try
  summary: null
  belongs_to: clojure.core
  description: |-
    ## try

    ```
    Usage: (try expr* catch-clause* finally-clause?)
    ```

    ```
    catch-clause => (catch classname name expr*)
    finally-clause => (finally expr*)

    Catches and handles Java exceptions.

    Please see https://clojure.org/reference/special_forms#try
    ```

    Added in Clojure version 1.0
- name: try-expr
  id: clojure.test-api#clojure.test/try-expr
  summary: null
  belongs_to: clojure.test
  description: |-
    ## try-expr

    ```
    Usage: (try-expr msg form)
    ```

    ```
    Used by the 'is' macro to catch unexpected exceptions.
    You don't call this.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L538)
- name: type
  id: clojure.core-api#clojure.core/type
  summary: null
  belongs_to: clojure.core
  description: |-
    ## type

    ```
    Usage: (type x)
    ```

    ```
    Returns the :type metadata of x, or its Class if none
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3467)
- name: type-reflect
  id: clojure.reflect-api#clojure.reflect/type-reflect
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.reflect
  description: "## type-reflect\n\n```\nUsage: (type-reflect typeref & options)\n```\n\n```\nAlpha - subject to change.\n Reflect on a typeref, returning a map with :bases, :flags, and\n:members. In the discussion below, names are always Clojure symbols.\n\n :bases            a set of names of the type's bases\n :flags            a set of keywords naming the boolean attributes\n                   of the type.\n :members          a set of the type's members. Each member is a map\n                   and can be a constructor, method, or field.\n\n Keys common to all members:\n :name             name of the type \n :declaring-class  name of the declarer\n :flags            keyword naming boolean attributes of the member\n\n Keys specific to constructors:\n :parameter-types  vector of parameter type names\n :exception-types  vector of exception type names\n\n Key specific to methods:\n :parameter-types  vector of parameter type names\n :exception-types  vector of exception type names\n :return-type      return type name\n\n Keys specific to fields:\n :type             type name\n\n Options:\n\n   :ancestors     in addition to the keys described above, also\n                  include an :ancestors key with the entire set of\n                  ancestors, and add all ancestor members to\n                  :members.\n   :reflector     implementation to use. Defaults to JavaReflector,\n                  AsmReflector is also an option.\n```\n\nAdded in Clojure version 1.3\n\n[Source](https://github.com/clojure/clojure/blob/ee00807bac64d55dbc7ec49442d6376352b77200/src/clj/clojure/reflect.clj#L58)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.reflect-api.html](https://clojure.github.io/clojure/clojure.reflect-api.html)"
- name: TypeReference
  id: clojure.reflect-api#clojure.reflect/TypeReference
  summary: null
  belongs_to: clojure.reflect
  description: "## TypeReference\n\n```\nA TypeReference can be unambiguously converted to a type name on\nthe host platform.\n\nAll typerefs are normalized into symbols. If you need to\nnormalize a typeref yourself, call typesym.\n```\n\nKnown implementations: clojure.asm.Type, clojure.lang.Symbol, java.lang.Class  \n\n### typename\n\n```\nUsage: (typename o)\n```\n\n```\nReturns Java name as returned by ASM getClassName, e.g. byte[], java.lang.String[]\n```\n\n[Source](https://github.com/clojure/clojure/blob/ee00807bac64d55dbc7ec49442d6376352b77200/src/clj/clojure/reflect.clj#L48)\n\n## Types"
- name: ulp
  id: clojure.math-api#clojure.math/ulp
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.math
  description: "## ulp\n\n```\nUsage: (ulp d)\n```\n\n```\nReturns the size of an ulp (unit in last place) for d.\nIf d is ##NaN => ##NaN\nIf d is ##Inf or ##-Inf => ##Inf\nIf d is zero => Double/MIN_VALUE\nIf d is +/- Double/MAX_VALUE => 2^971\nSee: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ulp-double-\n```\n\nAdded in Clojure version 1.11\n\n[Source](https://github.com/clojure/clojure/blob/304d7c6a81bd7d8511e9ef3d89dc199b1464afaa/src/clj/clojure/math.clj#L351)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.math-api.html](https://clojure.github.io/clojure/clojure.math-api.html)"
- name: unchecked-add
  id: clojure.core-api#clojure.core/unchecked-add
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-add

    ```
    Usage: (unchecked-add x y)
    ```

    ```
    Returns the sum of x and y, both long.
    Note - uses a primitive operator subject to overflow.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1212)
- name: unchecked-add-int
  id: clojure.core-api#clojure.core/unchecked-add-int
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-add-int

    ```
    Usage: (unchecked-add-int x y)
    ```

    ```
    Returns the sum of x and y, both int.
    Note - uses a primitive operator subject to overflow.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1205)
- name: unchecked-byte
  id: clojure.core-api#clojure.core/unchecked-byte
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-byte

    ```
    Usage: (unchecked-byte x)
    ```

    ```
    Coerce to byte. Subject to rounding or truncation.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3517)
- name: unchecked-char
  id: clojure.core-api#clojure.core/unchecked-char
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-char

    ```
    Usage: (unchecked-char x)
    ```

    ```
    Coerce to char. Subject to rounding or truncation.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3529)
- name: unchecked-dec
  id: clojure.core-api#clojure.core/unchecked-dec
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-dec

    ```
    Usage: (unchecked-dec x)
    ```

    ```
    Returns a number one less than x, a long.
    Note - uses a primitive operator subject to overflow.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1184)
- name: unchecked-dec-int
  id: clojure.core-api#clojure.core/unchecked-dec-int
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-dec-int

    ```
    Usage: (unchecked-dec-int x)
    ```

    ```
    Returns a number one less than x, an int.
    Note - uses a primitive operator subject to overflow.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1177)
- name: unchecked-divide-int
  id: clojure.core-api#clojure.core/unchecked-divide-int
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-divide-int

    ```
    Usage: (unchecked-divide-int x y)
    ```

    ```
    Returns the division of x by y, both int.
    Note - uses a primitive operator subject to truncation.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1247)
- name: unchecked-double
  id: clojure.core-api#clojure.core/unchecked-double
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-double

    ```
    Usage: (unchecked-double x)
    ```

    ```
    Coerce to double. Subject to rounding.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3553)
- name: unchecked-float
  id: clojure.core-api#clojure.core/unchecked-float
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-float

    ```
    Usage: (unchecked-float x)
    ```

    ```
    Coerce to float. Subject to rounding.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3547)
- name: unchecked-inc
  id: clojure.core-api#clojure.core/unchecked-inc
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-inc

    ```
    Usage: (unchecked-inc x)
    ```

    ```
    Returns a number one greater than x, a long.
    Note - uses a primitive operator subject to overflow.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1170)
- name: unchecked-inc-int
  id: clojure.core-api#clojure.core/unchecked-inc-int
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-inc-int

    ```
    Usage: (unchecked-inc-int x)
    ```

    ```
    Returns a number one greater than x, an int.
    Note - uses a primitive operator subject to overflow.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1163)
- name: unchecked-int
  id: clojure.core-api#clojure.core/unchecked-int
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-int

    ```
    Usage: (unchecked-int x)
    ```

    ```
    Coerce to int. Subject to rounding or truncation.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3535)
- name: unchecked-long
  id: clojure.core-api#clojure.core/unchecked-long
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-long

    ```
    Usage: (unchecked-long x)
    ```

    ```
    Coerce to long. Subject to rounding or truncation.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3541)
- name: unchecked-multiply
  id: clojure.core-api#clojure.core/unchecked-multiply
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-multiply

    ```
    Usage: (unchecked-multiply x y)
    ```

    ```
    Returns the product of x and y, both long.
    Note - uses a primitive operator subject to overflow.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1240)
- name: unchecked-multiply-int
  id: clojure.core-api#clojure.core/unchecked-multiply-int
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-multiply-int

    ```
    Usage: (unchecked-multiply-int x y)
    ```

    ```
    Returns the product of x and y, both int.
    Note - uses a primitive operator subject to overflow.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1233)
- name: unchecked-negate
  id: clojure.core-api#clojure.core/unchecked-negate
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-negate

    ```
    Usage: (unchecked-negate x)
    ```

    ```
    Returns the negation of x, a long.
    Note - uses a primitive operator subject to overflow.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1198)
- name: unchecked-negate-int
  id: clojure.core-api#clojure.core/unchecked-negate-int
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-negate-int

    ```
    Usage: (unchecked-negate-int x)
    ```

    ```
    Returns the negation of x, an int.
    Note - uses a primitive operator subject to overflow.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1191)
- name: unchecked-remainder-int
  id: clojure.core-api#clojure.core/unchecked-remainder-int
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-remainder-int

    ```
    Usage: (unchecked-remainder-int x y)
    ```

    ```
    Returns the remainder of division of x by y, both int.
    Note - uses a primitive operator subject to truncation.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1254)
- name: unchecked-short
  id: clojure.core-api#clojure.core/unchecked-short
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-short

    ```
    Usage: (unchecked-short x)
    ```

    ```
    Coerce to short. Subject to rounding or truncation.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3523)
- name: unchecked-subtract
  id: clojure.core-api#clojure.core/unchecked-subtract
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-subtract

    ```
    Usage: (unchecked-subtract x y)
    ```

    ```
    Returns the difference of x and y, both long.
    Note - uses a primitive operator subject to overflow.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1226)
- name: unchecked-subtract-int
  id: clojure.core-api#clojure.core/unchecked-subtract-int
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unchecked-subtract-int

    ```
    Usage: (unchecked-subtract-int x y)
    ```

    ```
    Returns the difference of x and y, both int.
    Note - uses a primitive operator subject to overflow.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1219)
- name: underive
  id: clojure.core-api#clojure.core/underive
  summary: null
  belongs_to: clojure.core
  description: |-
    ## underive

    ```
    Usage: (underive tag parent)
           (underive h tag parent)
    ```

    ```
    Removes a parent/child relationship between parent and
    tag. h must be a hierarchy obtained from make-hierarchy, if not
    supplied defaults to, and modifies, the global hierarchy.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5689)
- name: union
  id: clojure.set-api#clojure.set/union
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.set
  description: "## union\n\n```\nUsage: (union)\n       (union s1)\n       (union s1 s2)\n       (union s1 s2 & sets)\n```\n\n```\nReturn a set that is the union of the input sets\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/631c46ed98ed3bfefdb8a15080e004ab470b0bf4/src/clj/clojure/set.clj#L20)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.set-api.html](https://clojure.github.io/clojure/clojure.set-api.html)"
- name: unreduced
  id: clojure.core-api#clojure.core/unreduced
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unreduced

    ```
    Usage: (unreduced x)
    ```

    ```
    If x is reduced?, returns (deref x), else returns x
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2872)
- name: unsigned-bit-shift-right
  id: clojure.core-api#clojure.core/unsigned-bit-shift-right
  summary: null
  belongs_to: clojure.core
  description: |-
    ## unsigned-bit-shift-right

    ```
    Usage: (unsigned-bit-shift-right x n)
    ```

    ```
    Bitwise shift right, without sign-extension.
    ```

    Added in Clojure version 1.6

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1382)
- name: up
  id: clojure.zip-api#clojure.zip/up
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## up

    ```
    Usage: (up loc)
    ```

    ```
    Returns the loc of the parent of the node at this loc, or nil if at
    the top
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L123)
- name: update
  id: clojure.core-api#clojure.core/update
  summary: null
  belongs_to: clojure.core
  description: |-
    ## update

    ```
    Usage: (update m k f)
           (update m k f x)
           (update m k f x y)
           (update m k f x y z)
           (update m k f x y z & more)
    ```

    ```
    'Updates' a value in an associative structure, where k is a
    key and f is a function that will take the old value
    and any supplied args and return the new value, and returns a new
    structure.  If the key does not exist, nil is passed as the old value.
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6223)
- name: update-in
  id: clojure.core-api#clojure.core/update-in
  summary: null
  belongs_to: clojure.core
  description: |-
    ## update-in

    ```
    Usage: (update-in m ks f & args)
    ```

    ```
    'Updates' a value in a nested associative structure, where ks is a
    sequence of keys and f is a function that will take the old value
    and any supplied args and return the new value, and returns a new
    nested structure.  If any levels do not exist, hash-maps will be
    created.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6207)
- name: update-keys
  id: clojure.core-api#clojure.core/update-keys
  summary: null
  belongs_to: clojure.core
  description: |-
    ## update-keys

    ```
    Usage: (update-keys m f)
    ```

    ```
    m f => {(f k) v ...}

    Given a map m and a function f of 1-argument, returns a new map whose
    keys are the result of applying f to the keys of m, mapped to the
    corresponding values of m.
    f must return a unique key for each key of m, else the behavior is undefined.
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8024)
- name: update-proxy
  id: clojure.core-api#clojure.core/update-proxy
  summary: null
  belongs_to: clojure.core
  description: |-
    ## update-proxy

    ```
    Usage: (update-proxy proxy mappings)
    ```

    ```
    Takes a proxy instance and a map of strings (which must
    correspond to methods of the proxy superclass/superinterfaces) to
    fns (which must take arguments matching the corresponding method,
    plus an additional (explicit) first arg corresponding to this, and
    updates (via assoc) the proxy's fn map. nil can be passed instead of
    a fn, in which case the corresponding method will revert to the
    default behavior. Note that this function can be used to update the
    behavior of an existing instance without changing its identity.
    Returns the proxy.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/658693f6cf97e6ab0ff789e096c9eb6654e4d3ab/src/clj/clojure/core_proxy.clj#L313)
- name: update-vals
  id: clojure.core-api#clojure.core/update-vals
  summary: null
  belongs_to: clojure.core
  description: |-
    ## update-vals

    ```
    Usage: (update-vals m f)
    ```

    ```
    m f => {k (f v) ...}

    Given a map m and a function f of 1-argument, returns a new map where the keys of m
    are mapped to result of applying f to the corresponding values of m.
    ```

    Added in Clojure version 1.11

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L8008)
- name: upper-case
  id: clojure.string-api#clojure.string/upper-case
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.string
  description: "## upper-case\n\n```\nUsage: (upper-case s)\n```\n\n```\nConverts string to all upper-case.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ade22645ba5dbf4c0d8115b19938af96d6fb4cd5/src/clj/clojure/string.clj#L207)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.string-api.html](https://clojure.github.io/clojure/clojure.string-api.html)"
- name: uri?
  id: clojure.core-api#clojure.core/uri?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## uri?

    ```
    Usage: (uri? x)
    ```

    ```
    Return true if x is a java.net.URI
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7959)
- name: use
  id: clojure.core-api#clojure.core/use
  summary: null
  belongs_to: clojure.core
  description: |-
    ## use

    ```
    Usage: (use & args)
    ```

    ```
    Like 'require, but also refers to each lib's namespace using
    clojure.core/refer. Use :use in the ns macro in preference to calling
    this directly.

    'use accepts additional options in libspecs: :exclude, :only, :rename.
    The arguments and semantics for :exclude, :only, and :rename are the same
    as those documented for clojure.core/refer.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6128)
- name: use-fixtures
  id: clojure.test-api#clojure.test/use-fixtures
  summary: null
  belongs_to: clojure.test
  description: |-
    ## use-fixtures

    ```
    No usage documentation available
    ```

    ```
    Wrap test runs in a fixture function to perform setup and
    teardown. Using a fixture-type of :each wraps every test
    individually, while :once wraps the whole run in a single function.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L670)
- name: uuid?
  id: clojure.core-api#clojure.core/uuid?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## uuid?

    ```
    Usage: (uuid? x)
    ```

    ```
    Return true if x is a java.util.UUID
    ```

    Added in Clojure version 1.9

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6856)
- name: val
  id: clojure.core-api#clojure.core/val
  summary: null
  belongs_to: clojure.core
  description: |-
    ## val

    ```
    Usage: (val e)
    ```

    ```
    Returns the value in the map entry.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1589)
- name: validated
  id: clojure.instant-api#clojure.instant/validated
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.instant
  description: "## validated\n\n```\nUsage: (validated new-instance)\n```\n\n```\nReturn a function which constructs an instant by calling constructor\nafter first validating that those arguments are in range and otherwise\nplausible. The resulting function will throw an exception if called\nwith invalid arguments.\n```\n\n[Source](https://github.com/clojure/clojure/blob/385d0593efa658ada19f9a55af39cef146c75341/src/clj/clojure/instant.clj#L139)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.instant-api.html](https://clojure.github.io/clojure/clojure.instant-api.html)"
- name: vals
  id: clojure.core-api#clojure.core/vals
  summary: null
  belongs_to: clojure.core
  description: |-
    ## vals

    ```
    Usage: (vals map)
    ```

    ```
    Returns a sequence of the map's values, in the same order as (seq map).
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1576)
- name: var
  id: clojure.core-api#clojure.core/var
  summary: null
  belongs_to: clojure.core
  description: |-
    ## var

    ```
    Usage: (var symbol)
    ```

    ```
    The symbol must resolve to a var, and the Var object
    itself (not its value) is returned. The reader macro #'x
    expands to (var x).

    Please see https://clojure.org/reference/special_forms#var
    ```

    Added in Clojure version 1.0
- name: var-get
  id: clojure.core-api#clojure.core/var-get
  summary: null
  belongs_to: clojure.core
  description: |-
    ## var-get

    ```
    Usage: (var-get x)
    ```

    ```
    Gets the value in the var object
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4328)
- name: var-set
  id: clojure.core-api#clojure.core/var-set
  summary: null
  belongs_to: clojure.core
  description: |-
    ## var-set

    ```
    Usage: (var-set x val)
    ```

    ```
    Sets the value in the var object to val. The var must be
    thread-locally bound.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4334)
- name: var?
  id: clojure.core-api#clojure.core/var?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## var?

    ```
    Usage: (var? v)
    ```

    ```
    Returns true if v is of type clojure.lang.Var
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5000)
- name: vary-meta
  id: clojure.core-api#clojure.core/vary-meta
  summary: null
  belongs_to: clojure.core
  description: |-
    ## vary-meta

    ```
    Usage: (vary-meta obj f & args)
    ```

    ```
    Returns an object of the same type and value as obj, with
    (apply f (meta obj) args) as its metadata.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L677)
- name: vec
  id: clojure.core-api#clojure.core/vec
  summary: null
  belongs_to: clojure.core
  description: "## Vec\n\nFields: \\[am cnt shift root tail \\_meta\\]  \nProtocols:  \nInterfaces: clojure.core.IVecImpl, clojure.lang.Associative, clojure.lang.Counted, clojure.lang.IFn, clojure.lang.IHashEq, clojure.lang.ILookup, clojure.lang.IMeta, clojure.lang.IObj, clojure.lang.IPersistentCollection, clojure.lang.IPersistentStack, clojure.lang.IPersistentVector, clojure.lang.Indexed, clojure.lang.Reversible, clojure.lang.Seqable, clojure.lang.Sequential, java.lang.Comparable, java.lang.Iterable, java.util.Collection, java.util.List"
- name: Vec
  id: clojure.core-api#clojure.core/Vec
  summary: null
  belongs_to: clojure.core
  description: "## Vec\n\nFields: \\[am cnt shift root tail \\_meta\\]  \nProtocols:  \nInterfaces: clojure.core.IVecImpl, clojure.lang.Associative, clojure.lang.Counted, clojure.lang.IFn, clojure.lang.IHashEq, clojure.lang.ILookup, clojure.lang.IMeta, clojure.lang.IObj, clojure.lang.IPersistentCollection, clojure.lang.IPersistentStack, clojure.lang.IPersistentVector, clojure.lang.Indexed, clojure.lang.Reversible, clojure.lang.Seqable, clojure.lang.Sequential, java.lang.Comparable, java.lang.Iterable, java.util.Collection, java.util.List"
- name: VecNode
  id: clojure.core-api#clojure.core/VecNode
  summary: null
  belongs_to: clojure.core
  description: "## VecNode\n\nFields: \\[edit arr\\]  \nProtocols:  \nInterfaces:"
- name: VecSeq
  id: clojure.core-api#clojure.core/VecSeq
  summary: null
  belongs_to: clojure.core
  description: "## VecSeq\n\nFields: \\[am vec anode i offset \\_meta\\]  \nProtocols: [clojure.core.protocols/InternalReduce](clojure.core-api#clojure.core.protocols/InternalReduce)  \nInterfaces: clojure.lang.IChunkedSeq, clojure.lang.IHashEq, clojure.lang.IMeta, clojure.lang.IObj, clojure.lang.ISeq, clojure.lang.Seqable, java.lang.Iterable  \n\n## Public Variables and Functions\n\n## &\n\n```\nSyntax for use with fn.\n\nPlease see https://clojure.org/reference/special_forms#fn\n```\n\nAdded in Clojure version 1.0"
- name: vector
  id: clojure.core-api#clojure.core/vector
  summary: null
  belongs_to: clojure.core
  description: |-
    ## vector

    ```
    Usage: (vector)
           (vector a)
           (vector a b)
           (vector a b c)
           (vector a b c d)
           (vector a b c d e)
           (vector a b c d e f)
           (vector a b c d e f & args)
    ```

    ```
    Creates a new vector containing the args.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L355)
- name: vector-of
  id: clojure.core-api#clojure.core/vector-of
  summary: null
  belongs_to: clojure.core
  description: |-
    ## vector-of

    ```
    Usage: (vector-of t)
           (vector-of t & elements)
    ```

    ```
    Creates a new vector of a single primitive type t, where t is one
    of :int :long :float :double :byte :short :char or :boolean. The
    resulting vector complies with the interface of vectors in general,
    but stores the values unboxed internally.

    Optionally takes one or more elements to populate the vector.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/79ac8b88f83c818314790449dda6ace7db275b56/src/clj/clojure/gvec.clj#L523)
- name: vector-zip
  id: clojure.zip-api#clojure.zip/vector-zip
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## vector-zip

    ```
    Usage: (vector-zip root)
    ```

    ```
    Returns a zipper for nested vectors, given a root vector
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L44)
- name: vector?
  id: clojure.core-api#clojure.core/vector?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## vector?

    ```
    Usage: (vector? x)
    ```

    ```
    Return true if x implements IPersistentVector
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L176)
- name: volatile!
  id: clojure.core-api#clojure.core/volatile!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## volatile!

    ```
    Usage: (volatile! val)
    ```

    ```
    Creates and returns a Volatile with an initial value of val.
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2542)
- name: volatile?
  id: clojure.core-api#clojure.core/volatile?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## volatile?

    ```
    Usage: (volatile? x)
    ```

    ```
    Returns true if x is a volatile.
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2565)
- name: vreset!
  id: clojure.core-api#clojure.core/vreset!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## vreset!

    ```
    Usage: (vreset! vol newval)
    ```

    ```
    Sets the value of volatile to newval without regard for the
    current value. Returns newval.
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2549)
- name: vswap!
  id: clojure.core-api#clojure.core/vswap!
  summary: null
  belongs_to: clojure.core
  description: |-
    ## vswap!

    ```
    Usage: (vswap! vol f & args)
    ```

    ```
    Non-atomically swaps the value of the volatile as if:
    (apply f current-value-of-vol args). Returns the value that
    was swapped in.
    ```

    Added in Clojure version 1.7

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2556)
- name: walk
  id: clojure.walk-api#clojure.walk/walk
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.walk
  description: "## walk\n\n```\nUsage: (walk inner outer form)\n```\n\n```\nTraverses form, an arbitrary data structure.  inner and outer are\nfunctions.  Applies inner to each element of form, building up a\ndata structure of the same type, then applies outer to the result.\nRecognizes all Clojure data structures. Consumes seqs as with doall.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/b8c78ebf79b6a996f349dd112aaed658c132735d/src/clj/clojure/walk.clj#L35)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.walk-api.html](https://clojure.github.io/clojure/clojure.walk-api.html)"
- name: when
  id: clojure.core-api#clojure.core/when
  summary: null
  belongs_to: clojure.core
  description: |-
    ## when

    ```
    Usage: (when test & body)
    ```

    ```
    Evaluates test. If logical true, evaluates body in an implicit do.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L495)
- name: when-first
  id: clojure.core-api#clojure.core/when-first
  summary: null
  belongs_to: clojure.core
  description: |-
    ## when-first

    ```
    Usage: (when-first bindings & body)
    ```

    ```
    bindings => x xs

    Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4624)
- name: when-let
  id: clojure.core-api#clojure.core/when-let
  summary: null
  belongs_to: clojure.core
  description: |-
    ## when-let

    ```
    Usage: (when-let bindings & body)
    ```

    ```
    bindings => binding-form test

    When test is true, evaluates body with binding-form bound to the value of test
    ```

    ```
    Specs:
      Args: (cat
             :bindings (and vector? :clojure.core.specs.alpha/binding)
             :body (* any?))
      Ret:  any?
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1878)
- name: when-not
  id: clojure.core-api#clojure.core/when-not
  summary: null
  belongs_to: clojure.core
  description: |-
    ## when-not

    ```
    Usage: (when-not test & body)
    ```

    ```
    Evaluates test. If logical false, evaluates body in an implicit do.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L501)
- name: when-some
  id: clojure.core-api#clojure.core/when-some
  summary: null
  belongs_to: clojure.core
  description: |-
    ## when-some

    ```
    Usage: (when-some bindings & body)
    ```

    ```
    bindings => binding-form test

    When test is not nil, evaluates body with binding-form bound to the
    value of test
    ```

    Added in Clojure version 1.6

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1913)
- name: while
  id: clojure.core-api#clojure.core/while
  summary: null
  belongs_to: clojure.core
  description: |-
    ## while

    ```
    Usage: (while test & body)
    ```

    ```
    Repeatedly executes body while test expression is true. Presumes
    some side-effect will cause test to become false/nil. Returns nil
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6368)
- name: with-bindings
  id: clojure.core-api#clojure.core/with-bindings
  summary: null
  belongs_to: clojure.core
  description: |-
    ## with-bindings

    ```
    Usage: (with-bindings binding-map & body)
    ```

    ```
    Takes a map of Var/value pairs. Installs for the given Vars the associated
    values as thread-local bindings. Then executes body. Pops the installed
    bindings after body was evaluated. Returns the value of body.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L2003)
- name: with-bindings
  id: clojure.main-api#clojure.main/with-bindings
  summary: null
  belongs_to: clojure.main
  description: |-
    ## with-bindings

    ```
    Usage: (with-bindings & body)
    ```

    ```
    Executes body in the context of thread-local bindings for several vars
    that often need to be set!: *ns* *warn-on-reflection* *math-context*
    *print-meta* *print-length* *print-level* *compile-path*
    *command-line-args* *1 *2 *3 *e
    ```

    [Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L77)
- name: with-bindings*
  id: clojure.core-api#clojure.core/with-bindings*
  summary: null
  belongs_to: clojure.core
  description: |-
    ## with-bindings\*

    ```
    Usage: (with-bindings* binding-map f & args)
    ```

    ```
    Takes a map of Var/value pairs. Installs for the given Vars the associated
    values as thread-local bindings. Then calls f with the supplied arguments.
    Pops the installed bindings after f returned. Returns whatever f returns.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L1990)
- name: with-in-str
  id: clojure.core-api#clojure.core/with-in-str
  summary: null
  belongs_to: clojure.core
  description: |-
    ## with-in-str

    ```
    Usage: (with-in-str s & body)
    ```

    ```
    Evaluates body in a context in which *in* is bound to a fresh
    StringReader initialized with the string s.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4751)
- name: with-junit-output
  id: clojure.test-api#clojure.test.junit/with-junit-output
  summary: null
  belongs_to: clojure.test
  description: "## with-junit-output\n\n```\nUsage: (with-junit-output & body)\n```\n\n```\nExecute body with modified test-is reporting functions that write\nJUnit-compatible XML output.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/d9f3f83182e146525a78cf638f0613487d7e18c6/src/clj/clojure/test/junit.clj#L182)  \n\n## clojure.test.tap\n\n```\nclojure.test extensions for the Test Anything Protocol (TAP)\n\nTAP is a simple text-based syntax for reporting test results.  TAP\nwas originally developed for Perl, and now has implementations in\nseveral languages.  For more information on TAP, see\nhttp://testanything.org/ and\nhttp://search.cpan.org/~petdance/TAP-1.0.0/TAP.pm\n\nTo use this library, wrap any calls to\nclojure.test/run-tests in the with-tap-output macro,\nlike this:\n\n  (use 'clojure.test)\n  (use 'clojure.test.tap)\n\n  (with-tap-output\n   (run-tests 'my.cool.library))\n```\n\n## Public Variables and Functions"
- name: with-local-vars
  id: clojure.core-api#clojure.core/with-local-vars
  summary: null
  belongs_to: clojure.core
  description: |-
    ## with-local-vars

    ```
    Usage: (with-local-vars name-vals-vec & body)
    ```

    ```
    varbinding=> symbol init-expr

    Executes the exprs in a context in which the symbols are bound to
    vars with per-thread bindings to the init-exprs.  The symbols refer
    to the var objects themselves, and must be accessed with var-get and
    var-set
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4341)
- name: with-meta
  id: clojure.core-api#clojure.core/with-meta
  summary: null
  belongs_to: clojure.core
  description: |-
    ## with-meta

    ```
    Usage: (with-meta obj m)
    ```

    ```
    Returns an object of the same type and value as obj, with
    map m as its metadata.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L213)
- name: with-open
  id: clojure.core-api#clojure.core/with-open
  summary: null
  belongs_to: clojure.core
  description: |-
    ## with-open

    ```
    Usage: (with-open bindings & body)
    ```

    ```
    bindings => [name init ...]

    Evaluates body in a try expression with names bound to the values
    of the inits, and a finally clause that calls (.close name) on each
    name in reverse order.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L3832)
- name: with-out-str
  id: clojure.core-api#clojure.core/with-out-str
  summary: null
  belongs_to: clojure.core
  description: |-
    ## with-out-str

    ```
    Usage: (with-out-str & body)
    ```

    ```
    Evaluates exprs in a context in which *out* is bound to a fresh
    StringWriter.  Returns the string created by any nested printing
    calls.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4740)
- name: with-pprint-dispatch
  id: clojure.pprint-api#clojure.pprint/with-pprint-dispatch
  summary: null
  belongs_to: clojure.pprint
  description: |-
    ## with-pprint-dispatch

    ```
    Usage: (with-pprint-dispatch function & body)
    ```

    ```
    Execute body with the pretty print dispatch function bound to function.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L274)
- name: with-precision
  id: clojure.core-api#clojure.core/with-precision
  summary: null
  belongs_to: clojure.core
  description: |-
    ## with-precision

    ```
    Usage: (with-precision precision & exprs)
    ```

    ```
    Sets the precision and rounding mode to be used for BigDecimal operations.

    Usage: (with-precision 10 (/ 1M 3))
    or:    (with-precision 10 :rounding HALF_DOWN (/ 1M 3))

    The rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN,
    HALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L5111)
- name: with-read-known
  id: clojure.main-api#clojure.main/with-read-known
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.main
  description: "## with-read-known\n\n```\nUsage: (with-read-known & body)\n```\n\n```\nEvaluates body with *read-eval* set to a \"known\" value,\ni.e. substituting true for :unknown if necessary.\n```\n\n[Source](https://github.com/clojure/clojure/blob/38524061dcb14c598c239be87184b3378ffc5bac/src/clj/clojure/main.clj#L361)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.main-api.html](https://clojure.github.io/clojure/clojure.main-api.html)"
- name: with-redefs
  id: clojure.core-api#clojure.core/with-redefs
  summary: null
  belongs_to: clojure.core
  description: |-
    ## with-redefs

    ```
    Usage: (with-redefs bindings & body)
    ```

    ```
    binding => var-symbol temp-value-expr

    Temporarily redefines Vars while executing the body.  The
    temp-value-exprs will be evaluated and each resulting value will
    replace in parallel the root value of its Var.  After the body is
    executed, the root values of all the Vars will be set back to their
    old values.  These temporary changes will be visible in all threads.
    Useful for mocking out functions during testing.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7586)
- name: with-redefs-fn
  id: clojure.core-api#clojure.core/with-redefs-fn
  summary: null
  belongs_to: clojure.core
  description: |-
    ## with-redefs-fn

    ```
    Usage: (with-redefs-fn binding-map func)
    ```

    ```
    Temporarily redefines Vars during a call to func.  Each val of
    binding-map will replace the root value of its key which must be
    a Var.  After func is called with no args, the root values of all
    the Vars will be set back to their old values.  These temporary
    changes will be visible in all threads.  Useful for mocking out
    functions during testing.
    ```

    Added in Clojure version 1.3

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L7566)
- name: with-sh-dir
  id: clojure.java.shell-api#clojure.java.shell/with-sh-dir
  summary: null
  belongs_to: clojure.java.shell
  description: |-
    ## with-sh-dir

    ```
    Usage: (with-sh-dir dir & forms)
    ```

    ```
    Sets the directory for use with sh, see sh for details.
    ```

    Added in Clojure version 1.2

    [Source](https://github.com/clojure/clojure/blob/027d8ff2859442b222bf9cfa4c1be45567b788eb/src/clj/clojure/java/shell.clj#L21)
- name: with-sh-env
  id: clojure.java.shell-api#clojure.java.shell/with-sh-env
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.java.shell
  description: "## with-sh-env\n\n```\nUsage: (with-sh-env env & forms)\n```\n\n```\nSets the environment for use with sh, see sh for details.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/027d8ff2859442b222bf9cfa4c1be45567b788eb/src/clj/clojure/java/shell.clj#L28)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.java.shell-api.html](https://clojure.github.io/clojure/clojure.java.shell-api.html)"
- name: with-tap-output
  id: clojure.test-api#clojure.test.tap/with-tap-output
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.test
  description: "## with-tap-output\n\n```\nUsage: (with-tap-output & body)\n```\n\n```\nExecute body with modified test reporting functions that produce\nTAP output\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L117)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.test-api.html](https://clojure.github.io/clojure/clojure.test-api.html)"
- name: with-test
  id: clojure.test-api#clojure.test/with-test
  summary: null
  belongs_to: clojure.test
  description: |-
    ## with-test

    ```
    Usage: (with-test definition & body)
    ```

    ```
    Takes any definition form (that returns a Var) as the first argument.
    Remaining body goes in the :test metadata function for that Var.

    When *load-tests* is false, only evaluates the definition, ignoring
    the tests.
    ```

    Added in Clojure version 1.1

    [Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L609)
- name: with-test-out
  id: clojure.test-api#clojure.test/with-test-out
  summary: null
  belongs_to: clojure.test
  description: "## with-test-out\n\n```\nUsage: (with-test-out & body)\n```\n\n```\nRuns body with *out* bound to the value of *test-out*.\n```\n\nAdded in Clojure version 1.1\n\n[Source](https://github.com/clojure/clojure/blob/4b9eadccce2aaf97e64bcc8e35c05c529df8fdd2/src/clj/clojure/test.clj#L273)  \n\n## clojure.test.junit\n\n```\nclojure.test extension for JUnit-compatible XML output.\n\nJUnit (http://junit.org/) is the most popular unit-testing library\nfor Java.  As such, tool support for JUnit output formats is\ncommon.  By producing compatible output from tests, this tool\nsupport can be exploited.\n\nTo use, wrap any calls to clojure.test/run-tests in the\nwith-junit-output macro, like this:\n\n  (use 'clojure.test)\n  (use 'clojure.test.junit)\n\n  (with-junit-output\n    (run-tests 'my.cool.library))\n\nTo write the output to a file, rebind clojure.test/*test-out* to\nyour own PrintWriter (perhaps opened using\nclojure.java.io/writer).\n```\n\n## Public Variables and Functions"
- name: write
  id: clojure.pprint-api#clojure.pprint/write
  summary: null
  belongs_to: clojure.pprint
  description: "## write\n\n```\nUsage: (write object & kw-args)\n```\n\n```\nWrite an object subject to the current bindings of the printer control variables.\nUse the kw-args argument to override individual variables for this call (and any \nrecursive calls). Returns the string result if :stream is nil or nil otherwise.\n\nThe following keyword arguments can be passed with values:\n  Keyword              Meaning                              Default value\n  :stream              Writer for output or nil             true (indicates *out*)\n  :base                Base to use for writing rationals    Current value of *print-base*\n  :circle*             If true, mark circular structures    Current value of *print-circle*\n  :length              Maximum elements to show in sublists Current value of *print-length*\n  :level               Maximum depth                        Current value of *print-level*\n  :lines*              Maximum lines of output              Current value of *print-lines*\n  :miser-width         Width to enter miser mode            Current value of *print-miser-width*\n  :dispatch            The pretty print dispatch function   Current value of *print-pprint-dispatch*\n  :pretty              If true, do pretty printing          Current value of *print-pretty*\n  :radix               If true, prepend a radix specifier   Current value of *print-radix*\n  :readably*           If true, print readably              Current value of *print-readably*\n  :right-margin        The column for the right margin      Current value of *print-right-margin*\n  :suppress-namespaces If true, no namespaces in symbols    Current value of *print-suppress-namespaces*\n\n  * = not yet supported\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L197)"
- name: write-out
  id: clojure.pprint-api#clojure.pprint/write-out
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.pprint
  description: "## write-out\n\n```\nUsage: (write-out object)\n```\n\n```\nWrite an object to *out* subject to the current bindings of the printer control \nvariables. Use the kw-args argument to override individual variables for this call (and \nany recursive calls).\n\n*out* must be a PrettyWriter if pretty printing is enabled. This is the responsibility\nof the caller.\n\nThis method is primarily intended for use by pretty print dispatch functions that \nalready know that the pretty printer will have set up their environment appropriately.\nNormal library clients should use the standard \"write\" interface. \n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/0a6810ab3484b5be0afe4f505cd724eb5c974a09/src/clj/clojure/pprint/pprint_base.clj#L171)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.pprint-api.html](https://clojure.github.io/clojure/clojure.pprint-api.html)"
- name: writer
  id: clojure.java.io-api#clojure.java.io/writer
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.java.io
  description: "## writer\n\n```\nUsage: (writer x & opts)\n```\n\n```\nAttempts to coerce its argument into an open java.io.Writer.\nDefault implementations always return a java.io.BufferedWriter.\n\nDefault implementations are provided for Writer, BufferedWriter,\nOutputStream, File, URI, URL, Socket, and String.\n\nIf the argument is a String, it tries to resolve it first as a URI, then\nas a local file name.  URIs with a 'file' protocol are converted to\nlocal file names.\n\nShould be used inside with-open to ensure the Writer is properly\nclosed.\n```\n\nAdded in Clojure version 1.2\n\n[Source](https://github.com/clojure/clojure/blob/ee1b606ad066ac8df2efd4a6b8d0d365c206f5bf/src/clj/clojure/java/io.clj#L104)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.java.io-api.html](https://clojure.github.io/clojure/clojure.java.io-api.html)"
- name: xml-seq
  id: clojure.core-api#clojure.core/xml-seq
  summary: null
  belongs_to: clojure.core
  description: |-
    ## xml-seq

    ```
    Usage: (xml-seq root)
    ```

    ```
    A tree seq on the xml elements as per xml/parse
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L4983)
- name: xml-zip
  id: clojure.zip-api#clojure.zip/xml-zip
  summary: null
  belongs_to: clojure.zip
  description: |-
    ## xml-zip

    ```
    Usage: (xml-zip root)
    ```

    ```
    Returns a zipper for xml elements (as from xml/parse),
    given a root element
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L53)
- name: zero?
  id: clojure.core-api#clojure.core/zero?
  summary: null
  belongs_to: clojure.core
  description: |-
    ## zero?

    ```
    Usage: (zero? num)
    ```

    ```
    Returns true if num is zero, else false
    ```

    Added in Clojure version 1.0

    [Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L869)
- name: zipmap
  id: clojure.core-api#clojure.core/zipmap
  summary: null
  belongs_to: clojure.core
  description: "## zipmap\n\n```\nUsage: (zipmap keys vals)\n```\n\n```\nReturns a map with the keys mapped to the corresponding vals.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/2b3ba822815981e7f76907a3b75e9ecc428f7656/src/clj/clojure/core.clj#L6619)  \n\n## clojure.core.protocols\n\n## Protocols"
- name: zipper
  id: clojure.zip-api#clojure.zip/zipper
  summary: © Rich Hickey Licensed under the Eclipse Public License 1.0
  belongs_to: clojure.zip
  description: "## zipper\n\n```\nUsage: (zipper branch? children make-node root)\n```\n\n```\nCreates a new zipper structure. \n\nbranch? is a fn that, given a node, returns true if can have\nchildren, even if it currently doesn't.\n\nchildren is a fn that, given a branch node, returns a seq of its\nchildren.\n\nmake-node is a fn that, given an existing node and a seq of\nchildren, returns a new branch node with the supplied children.\nroot is the root node.\n```\n\nAdded in Clojure version 1.0\n\n[Source](https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L18)\n\n© Rich Hickey  \nLicensed under the Eclipse Public License 1.0.  \n[https://clojure.github.io/clojure/clojure.zip-api.html](https://clojure.github.io/clojure/clojure.zip-api.html)"
