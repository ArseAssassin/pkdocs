---
name: jQuery Mobile
slug: jquerymobile
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  Â© The jQuery Foundation and other contributors
  Licensed under the MIT License.
  https://api.jquerymobile.com/category/all
homepage: null

---
- name: .buttonMarkup()
  id: buttonmarkup
  summary: Adds the class ui-corner-all when true and removes it when false
  description: "# .buttonMarkup()\n\n## .buttonMarkup( options, overwriteClasses )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)version deprecated: 1.4.0\n\n**Description:** Adds button styling to an element\n\n- #### [.buttonMarkup( options, overwriteClasses )](#buttonMarkup-options-overwriteClasses)\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    - **corners** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Adds the class `ui-corner-all` when `true` and removes it when `false`. This gives the button-styled element rounded corners.\n      This option is also exposed as a data-attribute: `data-corners=\"false\"`\n\n    - **icon** (default: `\"\"`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      Adds an icon class by prefixing the value with the string \"ui-icon-\" and an icon position class based on the value of the `iconpos` option.\n      For example, if the value is \"arrow-r\" and the value of the `iconpos` option is \"left\", then `.buttonMarkup()` will add the classes `ui-icon-arrow-r` and `ui-btn-icon-left` to each of the set of matched elements.\n\n      This option is also exposed as a data-attribute: `data-icon=\"arrow-r\"`\n\n    - **iconpos** (default: `\"left\"`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      Adds an icon position class by prefixing the value with the string \"ui-btn-icon-\" when the button-styled element has an icon.\n      For example, if the value is \"right\" and the button-styled element has an icon, then the class `ui-btn-icon-right` will be added to each of the set of matched elements.\n\n      This option is also exposed as a data-attribute: `data-iconpos=\"right\"`\n\n    - **iconshadow** (default: `false`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      **This option is deprecated in 1.4.0 and will be removed in 1.5.0.**\n      Adds the class `ui-shadow-icon` to each of the set of matched elements when set to `true` and the button-styled element has an icon.\n\n      This option is also exposed as a data-attribute: `data-iconshadow=\"true\"`\n\n      (version deprecated: 1.4.0)\n\n    - **inline** (default: `false`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Adds the class `ui-btn-inline` to each of the set of matched elements when set to true.\n      This option is also exposed as a data-attribute: `data-inline=\"true\"`\n\n    - **mini** (default: `false`)\n\n      Type:\n\n      Adds the class `ui-mini` to each of the set of matched elements when set to true.\n      This option is also exposed as a data-attribute: `data-mini=\"true\"`\n\n    - **shadow** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Adds the class `ui-shadow` to each of the set of matched elements when set to true.\n      This option is also exposed as a data-attribute: `data-shadow=\"false\"`\n\n    - **theme** (default: `null, inherited from parent`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      The value is a letter a-z identifying one of the color swatches in the current theme, or `null`.\n      This option adds a class constructed by appending the string \"ui-btn-\" to the value to each of the set of matched elements. If set to `null`, no class is added, and the swatch is inherited from the element's parent.\n\n      For example, a value of \"b\" will cause the class `ui-btn-b` to be added to each of the set of matched elements.\n\n      This option is also exposed as a data-attribute: `data-theme=\"b\"`\n\n  - **overwriteClasses** (default: `false`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    When set to `true`, `.buttonMarkup()` discards all classes on each of the set of matched elements and adds classes based on the values passed into the `options` argument. You can use this feature to increase performance in situations where the element you wish to enhance does not have any classes other than the button styling classes added by `.buttonMarkup()`.\n    Conversely, when set to `false`, `.buttonMarkup()` first parses the existing classes found on each of the set of matched elements and computes a set of existing options based on the presence or absence of classes related to button styling already present. It separately records any classes unrelated to button styling. It then merges the options specified in the `options` parameter with the computed options such that the `options` passed in take precedence, and calculates a list of classes that must be present for those options to be expressed in the element's styling. It then re-applies the classes unrelated to button styling as well as the classes that reflect the new set of options. This means that calling `.buttonMarkup()` on the same element multiple times will have the expected effect:\n\n    ``` javascript\n    // Initially corners are turned off\n    $( \"#myAnchor\" ).buttonMarkup({ corners: false });\n     \n    // Later on we turn off shadow - the lack of corners is retained\n    $( \"#myAnchor\" ).buttonMarkup({ shadow: false });\n     \n    // Later still we turn corners back on - the lack of shadow is retained\n    $( \"#myAnchor\" ).buttonMarkup({ corners: true });\n    ```\n\n**Note:** .buttonMarkup() is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. You can now assign the full range of button style options to your `button` or `a` elements by simply adding classes.\n\n## Transition to class-based styling\n\nKeeping in mind the followings will make it easy for you to transition from the button styling based on data attributes to the class-based process:\n\n- When using icons, you must always specify an icon position class along with the icon class, because there is no longer a default icon position. In the example below the class `ui-btn-icon-left` is added to make sure the icon (`ui-icon-arrow-r`) will be displayed.\n\n  ``` markup\n  <a href=\"http://example.com/\" class=\"ui-btn ui-icon-arrow-r ui-btn-icon-left ui-corner-all ui-shadow ui-btn-inline\">Example</a>\n  ```\n\n- Although the style-related data attributes are deprecated, the data attributes related to linking behavior remain unchanged. In the example below the button is styled using classes, but the data attributes related to linking are retained.\n\n  ``` markup\n  <a href=\"/\" data-rel=\"external\" class=\"ui-btn ui-corner-all ui-shadow ui-btn-inline ui-icon-home ui-btn-icon-left\">Home</a>\n  ```\n\n- We do not recommend mixing styling based on data attributes and class-based styling during the deprecation period.\n\n## Button markup\n\nYou can use `.buttonMarkup()` to style any element as a button that is attractive and useable on a mobile device. It is a convenience function that allows you to manipulate the classes related to button styling. For each element in the set of matched elements this function converts the `options` parameter to a list of classes to be applied to the element, while respecting the element's existing classes that are not related to button styling. You may also set the parameter `overwriteClasses` to `true` for performance reasons. When `overwriteClasses` is set to `true` the function discards existing classes and applies the classes corresponding to the options provided.\n\n## Autoinitialization\n\nThe framework will automatically apply button styling to anchors that have the attribute `data-role=\"button\"` as well as `button` elements, anchors contained directly in bars and [controlgroup](controlgroup) widgets. You can specify button styling options via data attributes that you add to the anchor or `button` element. The data attribute corresponding to each `.buttonMarkup()` option is documented in the [options](#buttonMarkup-options-overwriteClasses) of `.buttonMarkup()`. The example below shows the markup needed for an anchor-based button.\n\n``` markup\n<a href=\"index.html\" data-role=\"button\">Link button</a>\n```\n\nProduces this **anchor-based** button:\n\n**Button** based button:\n\n`.buttonMarkup()` also automatically enhances `button` elements such as the one below:\n\n``` markup\n<button>Button element</button>\n```\n\n### Disabled appearance\n\nYou can style an anchor as disabled by adding the class `ui-state-disabled`.\n\n**Note:** It is not inherently possible to \"disable\" anchors. The class `ui-state-disabled` merely adds styling to make the anchor look disabled. It does not provide the same level of functionality as the `disabled` attribute of a form button. It may still be possible to follow the anchor using navigation methods that do not involve the pointing device.\n\n``` markup\n<a href=\"index.html\" data-role=\"button\" class=\"ui-state-disabled\">Link button</a>\n```\n\nProduces an **anchor-based** button styled as disabled:\n\nIn the case of `button` elements, you should apply the `ui-state-disabled` class when you set the `button` element's `disabled` attribute:\n\n``` javascript\n// Toggle the class ui-state-disabled in conjunction with modifying the value\n// of the button element's \"disabled\" property\n$( \"button#myButton\" )\n  .prop( \"disabled\", isDisabled )\n  .toggleClass( \"ui-state-disabled\", isDisabled );\n```\n\n### Inline buttons\n\nBy default, all buttons in the body content are styled as block-level elements so they fill the width of the screen:\n\nIf you have multiple buttons that should sit side-by-side on the same line, add the `data-inline=\"true\"` attribute to each button. This will style the buttons to be the width of their content and float the buttons so they sit on the same line.\n\n``` markup\n<a href=\"index.html\" data-role=\"button\" data-inline=\"true\">Cancel</a>\n<a href=\"index.html\" data-role=\"button\" data-inline=\"true\" data-theme=\"b\">Save</a>\n```\n\nIf you want buttons to sit side-by-side but stretch to fill the width of the screen, you can use the content column grids to put normal full-width buttons into 2- or 3-columns.\n\n### Mini version\n\nFor a more compact version that is useful in toolbars and tight spaces, add the `data-mini=\"true\"` attribute to the button to create a mini version.\n\n``` markup\n<a href=\"index.html\" data-role=\"button\" data-mini=\"true\">Link button</a>\n```\n\nThis will produce a button that is not as tall as the standard version and has a smaller text size.\n\n## Adding Icons to Buttons\n\nThe jQuery Mobile framework includes a selected set of icons most often needed for mobile apps. To minimize download size, jQuery Mobile includes a single white icon sprite, and automatically adds a semi-transparent black circle behind the icon to ensure that it has good contrast on any background color.\n\nAn icon can be added to a button by adding a `data-icon` attribute on the anchor specifying the icon to display. For example:\n\n``` markup\n<a href=\"index.html\" data-role=\"button\" data-icon=\"delete\">Delete</a>\n```\n\n### Icon set\n\nThe following `data-icon` attributes can be referenced to create the icons shown below:\n\n### Icon positioning\n\nBy default, all icons in buttons are placed to the left of the button text.\n\nThis default may be overridden using the `data-iconpos` attribute to set the icon to the right, above (top) or below (bottom) the text. For example:\n\n``` markup\n<a href=\"index.html\" data-role=\"button\" data-icon=\"delete\" data-iconpos=\"right\">Delete</a>\n```\n\nYou can also create an icon-only button, by setting the `data-iconpos` attribute to `notext`. The button plugin will hide the text on-screen, but add it as a `title` attribute on the link to provide context for screen readers and devices that support tooltips. For example, replacing `data-iconpos=\"right\"` on the previous example with `data-iconpos=\"notext\"`:\n\n``` markup\n<a href=\"index.html\" data-role=\"button\" data-icon=\"delete\" data-iconpos=\"notext\">Delete</a>\n```\n\nCreates this icon-only button:\n\n### Mini & Inline\n\nThe mini and inline attributes can be added to produce more compact buttons:\n\n### Custom Icons\n\nTo use custom icons, specify a `data-icon` value that has a unique name like `myapp-email` and the button plugin will generate a class by prefixing `ui-icon-` to the `data-icon` value and apply it to the button: `ui-icon-myapp-email`.\n\nYou can then write a CSS rule in your stylesheet that targets the `ui-icon-myapp-email:after` class to specify the icon background source. The framework contains an inline (data URI) SVG test and adds class `ui-nosvg` to the `html` element if this is not supported. If you are using SVG icons you can use this class to provide a fallback to external PNG icons.\n\n``` javascript\n.ui-icon-myapp-email:after {\n  background-image: url('data:image/svg+xml;...');\n}\n.ui-nosvg .ui-icon-myapp-email:after {\n  background-image: url( \"app-icon-email.png\" );\n}\n```\n\n### Icons and themes\n\nThe semi-transparent black circle behind the white icon ensures good contrast on any background color so it works well with the jQuery Mobile theming system. Here are examples of the same icons sitting on top of a range of different color swatches with themed buttons.\n\n### Icon example\n\n## Grouped buttons\n\nOccasionally, you may want to visually group a set of buttons to form a single block that looks contained like a navigation component. To get this effect, wrap a set of buttons in a container with the `data-role=\"controlgroup\"` attribute - the framework will create a vertical button group, remove all margins and drop shadows between the buttons, and only round the first and last buttons of the set to create the effect that they are grouped together.\n\n``` markup\n<div data-role=\"controlgroup\">\n  <a href=\"index.html\" data-role=\"button\">Yes</a>\n  <a href=\"index.html\" data-role=\"button\">No</a>\n  <a href=\"index.html\" data-role=\"button\">Maybe</a>\n</div>\n```\n\nBy default, grouped buttons are presented as a vertical list:\n\nBy adding the `data-type=\"horizontal\"` attribute to the `controlgroup` container, you can swap to a horizontal-style group that floats the buttons side-by-side and sets the width to only be large enough to fit the content. (Be aware that these will wrap to multiple lines if the number of buttons or the overall text length is too wide for the screen.)\n\n### Labels\n\nBecause the `label` element will be associated with each individual `input` or `button` and will be hidden for styling purposes, we recommend wrapping the buttons in a `fieldset` element that has a `legend` which acts as the combined label for the group. Using the `label` as a wrapper around an input prevents the framework from hiding it, so you have to use the `for` attribute to associate the `label` with the input.\n\n## Theming button-styled elements\n\njQuery Mobile has a rich theming system that gives you full control of how buttons are styled. When a link is added to a container, it is automatically assigned a theme swatch letter that matches its parent bar or content box to visually integrate the button into the parent container, like a chameleon. So a button placed inside a content container with a theme of \"a\" will be automatically assigned the button theme of \"a\". Here are examples of the button theme pairings in the default theme. All buttons have the same HTML markup:\n\n### Assigning theme swatches\n\nButtons can be manually assigned any of the button color swatches from the theme to add visual contrast with the container they sit inside by adding the `data-theme` attribute on the button markup and specifying a swatch letter.\n\n``` markup\n<a href=\"index.html\" data-role=\"button\" data-theme=\"b\">Swatch b</a>\n```\n\nHere are 2 buttons with icons that have a different swatch letter assigned via the `data-theme` attribute.\n\n### Theme variations\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/buttonMarkup](https://api.jquerymobile.com/buttonMarkup)"
- name: .enhanceWithin()
  id: enhancewithin
  summary: 'Description: Enhance all the children of all elements in the set of matched elements'
  description: "# .enhanceWithin()\n\n## .enhanceWithin()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Enhance all the children of all elements in the set of matched elements.\n\n- #### [.enhanceWithin()](#enhanceWithin)\n\n  - This method does not accept any arguments.\n\nThis method is responsible for performing all jQuery Mobile enhancement. Given a set of DOM elements it will enhance their children with all the widgets available.\n\nThe enhancement is based on each widget's `initSelector` property. This selector will be used to identify the elements upon which the widget will be instantiated.\n\nYou can shield elements and their children from enhancement by adding the attribute `data-enhance=\"false\"` to an element. This will cause it, and all its children to be ignored by `.enhanceWithin()`. Unfortunately, checking elements to see whether they are children of an element that has been marked with `data-enhance=\"false\"` is performance-intensive. Thus, the presence of `data-enhance=\"false\"` will only be considered if the global flag [`$.mobile.ignoreContentEnabled`](global-config#ignoreContentEnabled) is set to `true`.\n\n**Caveat:** `enhanceWithin` does not attempt to resolve issues related to the order in which widgets are enhanced. For example, enhancing [`filterable`](filterable) widgets before [`checkboxradio`](checkboxradio) widgets are enhanced can cause the `checkboxradio` widgets to be displayed incorrectly. If this affects you, then you must ensure that the widgets which need to be enhanced early are instantiated before the rest of the widgets. One possibility for accomplishing this is to instantiate your widgets during the page widget's `pagebeforecreate` event.\n\n## Example:\n\nInjecting new content at runtime and enhancing it with `enhanceWithin`.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>enhanceWithin demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<script>\n$.mobile.document.on( \"click\", \"#insert-content\", function() {\n  var content =\n    \"<div>\" +\n      \"<div data-role='collapsible' data-collapsed='false'>\" +\n        \"<h2>Cities</h2>\" +\n        \"<ul data-role='listview'>\" +\n          \"<li><a href='http://en.wikipedia.org/wiki/Sydney'>Sydney</a></li>\" +\n          \"<li><a href='http://en.wikipedia.org/wiki/Yekaterinburg'>Yekaterinburg</a></li>\" +\n          \"<li><a href='http://en.wikipedia.org/wiki/Asuncion'>Asunci&oacute;n</a></li>\" +\n          \"<li><a href='http://en.wikipedia.org/wiki/Liege'>Li&egrave;ge</a></li>\" +\n          \"<li><a href='http://en.wikipedia.org/wiki/Kinshasa'>Kinshasa</a></li>\" +\n          \"<li>\" +\n            \"<div data-role='controlgroup' data-type='horizontal'>\" +\n              \"<a href='#' class='ui-btn ui-shadow ui-corner-all'>Add</a>\" +\n              \"<a href='#' class='ui-btn ui-shadow ui-corner-all'>Remove</a>\" +\n              \"<a href='#' class='ui-btn ui-shadow ui-corner-all'>Edit</a>\" +\n            \"</div>\" +\n          \"</li>\" +\n        \"</ul>\" +\n      \"</div>\" +\n    \"</div>\";\n \n  $( content ).appendTo( \"#page-content\" ).enhanceWithin();\n});\n</script>\n<div data-role=\"header\">\n  <h2>jQuery Mobile Example</h2>\n</div>\n<div role=\"main\" class=\"ui-content\" id=\"page-content\">\n  <p>Content will be added at runtime when you click the button below.</p>\n  <p><a href=\"#\" id=\"insert-content\" class=\"ui-btn ui-corner-all ui-shadow\">Insert</a></p>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/enhanceWithin](https://api.jquerymobile.com/enhanceWithin)"
- name: .fieldcontain()
  id: fieldcontain
  summary: 'Note: .fieldcontain() is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0'
  description: "# .fieldcontain()\n\n## Returns: [jQuery](http://api.jquery.com/Types/#jQuery)version deprecated: 1.4.0\n\n**Description:** Adds field container styling to an element\n\n**Note:** .fieldcontain() is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. You can now construct responsive multi-field forms by wrapping each form element and its label in a `div` with class `ui-field-contain`.\n\nAdds class `ui-field-contain` to `div` wrappers of individual form elements which have a label. The `div` and the class ensure that the form is rendered responsively. At a sufficient width the label for each form element will be placed to the left of the form element, whereas on narrow displays, the label will appear above the form element.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/fieldcontain](https://api.jquerymobile.com/fieldcontain)"
- name: .jqmData()
  id: jqmdata
  summary: 'Description: Store arbitrary data associated with the specified element'
  description: "# jqmData()\n\n## .jqmData()Returns: [Object](http://api.jquery.com/Types/#Object)\n\n**Description:** Store arbitrary data associated with the specified element. Returns the value that was set.\n\n- #### [.jqmData()](#jqmData)\n\n  - This method does not accept any arguments.\n\nWhen working with jQuery Mobile, jqmData should be used in place of jQuery core's `data` method (note that this includes `$.fn.data`, `$.fn.removeData`, and the `$.data`, `$.removeData`, and `$.hasData` utilities), as they automatically incorporate getting and setting of namespaced data attributes (even if no namespace is currently in use).\n\nArguments:  \nSee [jQuery's data](https://api.jquery.com/jQuery.data/) method  \n**Note:**  \nCalling `jqmData()` with no argument will return `undefined`. This behavior is subject to change in future versions.\n\nAlso:  \nWhen finding elements by their jQuery Mobile data attribute, please use the custom selector `:jqmData()`. It automatically incorporates namespaced data attributes into the lookup when they are in use. For example, instead of calling `$(\"div[data-role='page']\")`, you should use `$(\"div:jqmData(role='page')\")`, which internally maps to `$(\"div[data-\"+ $.mobile.ns +\"role='page']\")` without forcing you to concatenate a namespace into your selectors manually.\n\nOne exception to this rule is selecting on namespaced data attributes with URL values, e.g the `:jqmData(url)` that jQuery Mobile uses to track where a page came from. This is because the selector requires a closing parentheses but the parentheses is also valid URL character.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jqmData](https://api.jquerymobile.com/jqmData)"
- name: .jqmEnhanceable()
  id: jqmenhanceable
  summary: 'Description: Filter method to respect data-enhance=false parent elements during manual enhancement'
  description: "# jqmEnhanceable()\n\n## .jqmEnhanceable()Returns: [Object](http://api.jquery.com/Types/#Object)\n\n**Description:** Filter method to respect `data-enhance=false` parent elements during manual enhancement.\n\n- #### [.jqmEnhanceable()](#jqmEnhanceable)\n\n  - This method does not accept any arguments.\n\nFor users that wish to respect `data-enhance=false` parent elements during manual enhancement or custom plugin authoring jQuery Mobile provides the `$.fn.jqmEnhanceable` filter method.\n\nSettings:  \nIf, and only if, `$.mobile.ignoreContentEnabled` is set to true, this method will traverse the parent nodes for each DOM element in the jQuery object and where it finds a `data-enhance=false` parent the child will be removed from the set.\n\nWarning:  \nThe operation of traversing all parent elements can be expensive for even small jQuery object sets.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jqmEnhanceable](https://api.jquerymobile.com/jqmEnhanceable)"
- name: .jqmHijackable()
  id: jqmhijackable
  summary: 'Description: For users that wish to respect data-ajax=false parent elements during custom form and link binding jQuery Mobile provides the $.fn.jqmHijackable filter method'
  description: "# jqmHijackable()\n\n## .jqmHijackable()Returns: [Object](http://api.jquery.com/Types/#Object)\n\n**Description:** For users that wish to respect `data-ajax=false` parent elements during custom form and link binding jQuery Mobile provides the `$.fn.jqmHijackable` filter method.\n\n- #### [.jqmHijackable()](#jqmHijackable)\n\n  - This method does not accept any arguments.\n\nFor users that wish to respect `data-ajax=false` parent elements during custom form and link binding jQuery Mobile provides the `$.fn.jqmHijackable` filter method.\n\nSettings:  \nIf, and only if, `$.mobile.ignoreContentEnabled` is set to true, this method will traverse the parent nodes for each DOM element in the jQuery object and where it finds a `data-ajax=false` parent, the child form or link will be removed from the set.\n\nWarning:  \nThe operation of traversing all parent elements can be expensive for even small jQuery object sets.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jqmHijackable](https://api.jquerymobile.com/jqmHijackable)"
- name: .jqmRemoveData()
  id: jqmremovedata
  summary: 'Description: Remove a previously-stored piece of data'
  description: "# .jqmRemoveData()\n\n## .jqmRemoveData( prop )Returns: [Object](http://api.jquery.com/Types/#Object)\n\n**Description:** Remove a previously-stored piece of data.\n\n- #### [.jqmRemoveData( prop )](#jqmRemoveData-prop)\n\n  - **prop**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    A string naming the piece of data to delete.\n\nWhen working with jQuery Mobile, jqmRemoveData should be used in place of jQuery core's `removeData` method (note that this includes `$.fn.data`, `$.fn.removeData`, and the `$.data`, `$.removeData`, and `$.hasData` utilities), as they automatically incorporate getting and setting of namespaced data attributes (even if no namespace is currently in use).\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jqmRemoveData](https://api.jquerymobile.com/jqmRemoveData)"
- name: Button
  id: button
  summary: The jQuery UI button widget is bundled in jQuery Mobile with some changes
  description: "# Button Widget\n\n## Button Widgetversion added: 1.0\n\n**Description:** Creates a button widget\n\n## QuickNav\n\n### Options\n\n[corners](#option-corners)\n\n[enhanced](#option-enhanced)\n\n[icon](#option-icon)\n\n[iconpos](#option-iconpos)\n\n[initSelector](#option-initSelector)\n\n[inline](#option-inline)\n\n[mini](#option-mini)\n\n[shadow](#option-shadow)\n\n[theme](#option-theme)\n\n[wrapperClass](#option-wrapperClass)\n\n### Methods\n\n### Events\n\nThe jQuery UI button widget is bundled in jQuery Mobile with some changes. Thus, its [API documentation](https://api.jqueryui.com/button/) fully describes its functionality.\n\n## Options\n\n### corners\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nApplies the theme button border-radius if set to true.\n\nThis option is also exposed as a data attribute: `data-corners=\"false\"`.\n\n**Note:** `button` option is deprecated in 1.5 and will be removed in 1.6\n\n**Code examples:**\n\nInitialize the button with the `corners` option specified:\n\n``` javascript\n$( \".selector\" ).button({\n  corners: false\n});\n```\n\nGet or set the `corners` option, after initialization:\n\n``` javascript\n// Getter\nvar corners = $( \".selector\" ).button( \"option\", \"corners\" );\n \n// Setter\n$( \".selector\" ).button( \"option\", \"corners\", false );\n```\n\n### enhanced\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIndicates that the markup necessary for a button widget has been provided as part of the original markup.\n\nThis option is also exposed as a data attribute: `data-enhanced=\"true\"`.\n\n**Code examples:**\n\nInitialize the button with the `enhanced` option specified:\n\n``` javascript\n$( \".selector\" ).button({\n  enhanced: true\n});\n```\n\nGet or set the `enhanced` option, after initialization:\n\n``` javascript\n// Getter\nvar enhanced = $( \".selector\" ).button( \"option\", \"enhanced\" );\n \n// Setter\n$( \".selector\" ).button( \"option\", \"enhanced\", true );\n```\n\n### icon\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nApplies an icon from the icon set.\n\nThe [.buttonMarkup()](buttonmarkup) documentation contains a reference of all the icons available in the default theme.\n\nThis option is also exposed as a data attribute: `data-icon=\"star\"`.\n\n**Code examples:**\n\nInitialize the button with the `icon` option specified:\n\n``` javascript\n$( \".selector\" ).button({\n  icon: \"star\"\n});\n```\n\nGet or set the `icon` option, after initialization:\n\n``` javascript\n// Getter\nvar icon = $( \".selector\" ).button( \"option\", \"icon\" );\n \n// Setter\n$( \".selector\" ).button( \"option\", \"icon\", \"star\" );\n```\n\n### iconpos\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"left\"`\n\nPositions the icon in the button. Possible values: left, right, top, bottom, none, notext. The notext value will display an icon-only button with no text feedback.\n\nThis option is also exposed as a data attribute: `data-iconpos=\"right\"`.\n\n**Note:** `button` option is deprecated in 1.5 and will be removed in 1.6\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the button widget is:\n\n``` javascript\n\"input[type='button'], input[type='submit'], input[type='reset']\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.button.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates button widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### inline\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `null (false)`\n\nIf set to `true`, this will make the button act like an inline button so the width is determined by the button's text. By default, this is null (false) so the button is full width, regardless of the feedback content. Possible values: true, false.\n\nThis option is also exposed as a data attribute: `data-inline=\"true\"`.\n\n**Note:** `button` option is deprecated in 1.5 and will be removed in 1.6\n\n### mini\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `null (false)`\n\nIf set to `true`, this will display a more compact version of the button that uses less vertical height by applying the `ui-mini` class to the outermost element of the button widget.\n\n**Note:** `mini` option is deprecated in 1.5 and will be removed in 1.6\n\nThis option is also exposed as a data attribute: `data-mini=\"true\"`.\n\n### shadow\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nApplies the drop shadow style to the button if set to true.\n\nThis option is also exposed as a data attribute: `data-shadow=\"false\"`.\n\n**Note:** `button` option is deprecated in 1.5 and will be removed in 1.6\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the button widget. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the button with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).button({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).button( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).button( \"option\", \"theme\", \"b\" );\n```\n\n### wrapperClass\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nAllows you to specify CSS classes to be set on the button's wrapper element.\n\nThis option is also exposed as a data attribute: `data-wrapper-class=\"custom-class\"`.\n\n**Note:** `button` option is deprecated in 1.5 and will be removed in 1.6\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/button](https://api.jquerymobile.com/button)"
- name: 'Category: CSS Framework'
  id: category/css-framework
  summary: jQuery Mobile offers CSS-based enhancements for common user interface elements
  description: "# Category: CSS Framework\n\njQuery Mobile offers CSS-based enhancements for common user interface elements.\n\n# [Classes](../classes \"Permalink to Classes\")\n\nCSS classes for common styles\n\n# [Grid Layout](../grid-layout \"Permalink to Grid Layout\")\n\nMulti-column layout grids\n\n# [Responsive Grid](../responsive-grid \"Permalink to Responsive Grid\")\n\nReponsive layout grids\n\n# [Theme](https://api.jquerymobile.com/theme/ \"Permalink to Theme\")\n\njQuery Mobile Theme\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/category/css-framework](https://api.jquerymobile.com/category/css-framework)"
- name: 'Category: Events'
  id: category/events
  summary: jQuery Mobile offers several custom events that build upon native events to create useful hooks for development
  description: "# Category: Events\n\njQuery Mobile offers several custom events that build upon native events to create useful hooks for development.\n\n# [hashchange](../hashchange \"Permalink to hashchange\")\n\nEnables bookmarkable \\#hash history.\n\n# [mobileinit](../mobileinit \"Permalink to mobileinit\")\n\nEvent indicating that jQuery Mobile has finished loading.\n\n# [navigate](../navigate \"Permalink to navigate\")\n\nA wrapper event for both hashchange and popstate\n\n# [orientationchange event](../orientationchange \"Permalink to orientationchange event\")\n\nDevice portrait/landscape orientation event\n\n# [pagebeforechange](../pagebeforechange \"Permalink to pagebeforechange\")\n\nTriggered twice during the page change cyle: First prior to any page loading or transition and next after page loading completes successfully, but before the browser history has been modified by the navigation process.\n\n# [pagebeforecreate](../pagebeforecreate \"Permalink to pagebeforecreate\")\n\nTriggered on the page being initialized, before most plugin auto-initialization occurs.\n\n# [pagebeforehide](../pagebeforehide \"Permalink to pagebeforehide\")\n\nTriggered on the âfromPageâ we are transitioning away from, before the actual transition animation is kicked off.\n\n# [pagebeforeload](../pagebeforeload \"Permalink to pagebeforeload\")\n\nTriggered before any load request is made.\n\n# [pagebeforeshow](../pagebeforeshow \"Permalink to pagebeforeshow\")\n\nTriggered on the âtoPageâ we are transitioning to, before the actual transition animation is kicked off.\n\n# [pagechange](../pagechange \"Permalink to pagechange\")\n\nThis event is triggered after the changePage() request has finished loading the page into the DOM and all page transition animations have completed.\n\n# [pagechangefailed](../pagechangefailed \"Permalink to pagechangefailed\")\n\nTriggered when the changePage() request fails to load the page.\n\n# [pagecreate](../pagecreate \"Permalink to pagecreate\")\n\nTriggered when the page has been created in the DOM (via ajax or other) and after all widgets have had an opportunity to enhance the contained markup.\n\n# [pagehide](../pagehide \"Permalink to pagehide\")\n\nTriggered on the âfromPageâ after the transition animation has completed.\n\n# [pageinit](../pageinit \"Permalink to pageinit\")\n\nTriggered on the page being initialized, after initialization occurs.\n\n# [pageload](../pageload \"Permalink to pageload\")\n\nTriggered after the page is successfully loaded and inserted into the DOM.\n\n# [pageloadfailed](../pageloadfailed \"Permalink to pageloadfailed\")\n\nTriggered if the page load request failed.\n\n# [pageremove](../pageremove \"Permalink to pageremove\")\n\nTriggered just before the framework attempts to remove an external page from the DOM.\n\n# [pageshow](../pageshow \"Permalink to pageshow\")\n\nTriggered on the âtoPageâ after the transition animation has completed.\n\n# [scrollstart](../scrollstart \"Permalink to scrollstart\")\n\nTriggers when a scroll begins.\n\n# [scrollstop](../scrollstop \"Permalink to scrollstop\")\n\nTriggers when a scroll finishes.\n\n# [swipe](../swipe \"Permalink to swipe\")\n\nTriggered when a horizontal drag of 30px or more (and less than 30px vertically) occurs within 1 second duration.\n\n# [swipeleft](../swipeleft \"Permalink to swipeleft\")\n\nTriggered when a swipe event occurs moving in the left direction.\n\n# [swiperight](../swiperight \"Permalink to swiperight\")\n\nTriggered when a swipe event occurs moving in the right direction.\n\n# [tap](../tap \"Permalink to tap\")\n\nTriggered after a quick, complete touch event.\n\n# [taphold](../taphold \"Permalink to taphold\")\n\nTriggered after a sustained complete touch event.\n\n# [throttledresize](../throttledresize \"Permalink to throttledresize\")\n\nLimits the rate of the execution of handlers on resize events.\n\n# [updatelayout](../updatelayout \"Permalink to updatelayout\")\n\nTriggered by components within the framework that dynamically show/hide content.\n\n# [vclick](../vclick \"Permalink to vclick\")\n\nVirtualized click event handler.\n\n# [vmousecancel](../vmousecancel \"Permalink to vmousecancel\")\n\nVirtualized mousecancel event handler.\n\n# [vmousedown](../vmousedown \"Permalink to vmousedown\")\n\nVirtualized mousedown event handler.\n\n# [vmousemove](../vmousemove \"Permalink to vmousemove\")\n\nVirtualized mousemove event handler.\n\n# [vmouseout](../vmouseout \"Permalink to vmouseout\")\n\nVirtualized mouseout event handler.\n\n# [vmouseover](../vmouseover \"Permalink to vmouseover\")\n\nVirtualized mouseover event handler.\n\n# [vmouseup](../vmouseup \"Permalink to vmouseup\")\n\nVirtualized mouseup event handler.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/category/events](https://api.jquerymobile.com/category/events)"
- name: 'Category: Methods'
  id: category/methods
  summary: jQuery Mobile exposes several methods on the $.mobile object for use in your applications
  description: "# Category: Methods\n\njQuery Mobile exposes several methods on the $.mobile object for use in your applications.\n\n# [.buttonMarkup()](../buttonmarkup \"Permalink to .buttonMarkup()\")\n\nAdds button styling to an element\n\n# [.enhanceWithin()](../enhancewithin \"Permalink to .enhanceWithin()\")\n\nEnhance all the children of all elements in the set of matched elements.\n\n# [.fieldcontain()](../fieldcontain \"Permalink to .fieldcontain()\")\n\nAdds field container styling to an element\n\n# [jqmData()](../jqmdata \"Permalink to jqmData()\")\n\nStore arbitrary data associated with the specified element. Returns the value that was set.\n\n# [jqmEnhanceable()](../jqmenhanceable \"Permalink to jqmEnhanceable()\")\n\nFilter method to respect data-enhance=false parent elements during manual enhancement.\n\n# [jqmHijackable()](../jqmhijackable \"Permalink to jqmHijackable()\")\n\nFor users that wish to respect data-ajax=false parent elements during custom form and link binding jQuery Mobile provides the $.fn.jqmHijackable filter method.\n\n# [.jqmRemoveData()](../jqmremovedata \"Permalink to .jqmRemoveData()\")\n\nRemove a previously-stored piece of data.\n\n# [jQuery.mobile.changePage()](../jquery.mobile.changepage \"Permalink to jQuery.mobile.changePage()\")\n\nProgrammatically change from one page to another.\n\nNote: jQuery.mobile.changePage is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use the pagecontainer widgetâs change() method instead.\n\n# [jQuery.mobile.degradeInputsWithin()](../jquery.mobile.degradeinputswithin \"Permalink to jQuery.mobile.degradeInputsWithin()\")\n\nAlter the input type of form widgets.\n\n# [jQuery.mobile.getDocumentBase()](../jquery.mobile.getdocumentbase \"Permalink to jQuery.mobile.getDocumentBase()\")\n\nUtility method for retrieving the original document base URL.\n\nNote: jQuery.mobile.getDocumentBase is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use the jQuery.mobile.path.getDocumentBase() method instead.\n\n# [jQuery.mobile.getDocumentUrl()](../jquery.mobile.getdocumenturl \"Permalink to jQuery.mobile.getDocumentUrl()\")\n\nRetrieve the URL of the original document.\n\nNote: jQuery.mobile.getDocumentUrl is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use the jQuery.mobile.path.getDocumentUrl() method instead.\n\n# [jQuery.mobile.getInheritedTheme()](../jquery.mobile.getinheritedtheme \"Permalink to jQuery.mobile.getInheritedTheme()\")\n\nRetrieves the theme of the nearest parent that has a theme assigned.\n\n# [jQuery.mobile.loadPage()](../jquery.mobile.loadpage \"Permalink to jQuery.mobile.loadPage()\")\n\nLoad an external page, enhance its content, and insert it into the DOM.\n\nNote: jQuery.mobile.loadPage is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use the pagecontainer widgetâs load() method instead.\n\n# [jQuery.mobile.navigate()](../jquery.mobile.navigate \"Permalink to jQuery.mobile.navigate()\")\n\nAlter the url and track history. Works for browsers with and without the new history API.\n\n# [jQuery.mobile.path.get()](../jquery.mobile.path.get \"Permalink to jQuery.mobile.path.get()\")\n\nUtility method for determining the directory portion of an URL.\n\n# [jQuery.mobile.path.getDocumentBase()](../jquery.mobile.path.getdocumentbase \"Permalink to jQuery.mobile.path.getDocumentBase()\")\n\nUtility method for retrieving the original document base URL.\n\n# [jQuery.mobile.path.getDocumentUrl()](../jquery.mobile.path.getdocumenturl \"Permalink to jQuery.mobile.path.getDocumentUrl()\")\n\nUtility method for retrieving the URL of the original document.\n\n# [jQuery.mobile.path.getLocation()](../jquery.mobile.path.getlocation \"Permalink to jQuery.mobile.path.getLocation()\")\n\nUtility method for safely retrieving the current location.\n\n# [jQuery.mobile.path.isAbsoluteUrl()](../jquery.mobile.path.isabsoluteurl \"Permalink to jQuery.mobile.path.isAbsoluteUrl()\")\n\nUtility method for determining if a URL is absolute.\n\n# [jQuery.mobile.path.isRelativeUrl()](../jquery.mobile.path.isrelativeurl \"Permalink to jQuery.mobile.path.isRelativeUrl()\")\n\nUtility method for determining if a URL is a relative variant.\n\n# [jQuery.mobile.path.isSameDomain()](../jquery.mobile.path.issamedomain \"Permalink to jQuery.mobile.path.isSameDomain()\")\n\nUtility method for determining if a URL has the same domain.\n\n# [jQuery.mobile.path.makePathAbsolute()](../jquery.mobile.path.makepathabsolute \"Permalink to jQuery.mobile.path.makePathAbsolute()\")\n\nUtility method for converting a relative file or directory path into an absolute path.\n\n# [jQuery.mobile.path.makeUrlAbsolute()](../jquery.mobile.path.makeurlabsolute \"Permalink to jQuery.mobile.path.makeUrlAbsolute()\")\n\nUtility method for converting a relative URL to an absolute URL.\n\n# [jQuery.mobile.path.parseLocation()](../jquery.mobile.path.parselocation \"Permalink to jQuery.mobile.path.parseLocation()\")\n\nUtility method for retrieving the current location as a parsed object.\n\n# [jQuery.mobile.path.parseUrl()](../jquery.mobile.path.parseurl \"Permalink to jQuery.mobile.path.parseUrl()\")\n\nUtility method for parsing a URL and its relative variants into an object that makes accessing the components of the URL easy.\n\n# [jQuery.mobile.silentScroll()](../jquery.mobile.silentscroll \"Permalink to jQuery.mobile.silentScroll()\")\n\nScroll to a particular Y position without triggering scroll event listeners.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/category/methods](https://api.jquerymobile.com/category/methods)"
- name: 'Category: Path'
  id: category/methods/path
  summary: A collection of methods for dealing with paths
  description: "# Category: Path\n\nA collection of methods for dealing with paths.\n\n# [jQuery.mobile.path.get()](../../jquery.mobile.path.get \"Permalink to jQuery.mobile.path.get()\")\n\nUtility method for determining the directory portion of an URL.\n\n# [jQuery.mobile.path.getDocumentBase()](../../jquery.mobile.path.getdocumentbase \"Permalink to jQuery.mobile.path.getDocumentBase()\")\n\nUtility method for retrieving the original document base URL.\n\n# [jQuery.mobile.path.getDocumentUrl()](../../jquery.mobile.path.getdocumenturl \"Permalink to jQuery.mobile.path.getDocumentUrl()\")\n\nUtility method for retrieving the URL of the original document.\n\n# [jQuery.mobile.path.getLocation()](../../jquery.mobile.path.getlocation \"Permalink to jQuery.mobile.path.getLocation()\")\n\nUtility method for safely retrieving the current location.\n\n# [jQuery.mobile.path.isAbsoluteUrl()](../../jquery.mobile.path.isabsoluteurl \"Permalink to jQuery.mobile.path.isAbsoluteUrl()\")\n\nUtility method for determining if a URL is absolute.\n\n# [jQuery.mobile.path.isRelativeUrl()](../../jquery.mobile.path.isrelativeurl \"Permalink to jQuery.mobile.path.isRelativeUrl()\")\n\nUtility method for determining if a URL is a relative variant.\n\n# [jQuery.mobile.path.isSameDomain()](../../jquery.mobile.path.issamedomain \"Permalink to jQuery.mobile.path.isSameDomain()\")\n\nUtility method for determining if a URL has the same domain.\n\n# [jQuery.mobile.path.makePathAbsolute()](../../jquery.mobile.path.makepathabsolute \"Permalink to jQuery.mobile.path.makePathAbsolute()\")\n\nUtility method for converting a relative file or directory path into an absolute path.\n\n# [jQuery.mobile.path.makeUrlAbsolute()](../../jquery.mobile.path.makeurlabsolute \"Permalink to jQuery.mobile.path.makeUrlAbsolute()\")\n\nUtility method for converting a relative URL to an absolute URL.\n\n# [jQuery.mobile.path.parseLocation()](../../jquery.mobile.path.parselocation \"Permalink to jQuery.mobile.path.parseLocation()\")\n\nUtility method for retrieving the current location as a parsed object.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/category/methods/path](https://api.jquerymobile.com/category/methods/path)"
- name: 'Category: Properties'
  id: category/properties
  summary: Reference to the page currently in view
  description: "# [jQuery.mobile.activePage](../jquery.mobile.activepage \"Permalink to jQuery.mobile.activePage\")\n\nReference to the page currently in view.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/category/properties](https://api.jquerymobile.com/category/properties)"
- name: 'Category: Widgets'
  id: category/widgets
  summary: Widgets are feature-rich, stateful plugins that have a full life-cycle, along with methods and events
  description: "# Category: Widgets\n\nWidgets are feature-rich, stateful plugins that have a full life-cycle, along with methods and events. Check out the [widget factory](http://api.jqueryui.com/jQuery.widget/) documentation for more details.\n\n**Note**: The base widget (`$.mobile.widget`) is deprecated as of 1.4 and will be removed in 1.5. It is now sufficient to base your custom jQuery Mobile widgets on the jQuery UI [widget factory](http://api.jqueryui.com/jQuery.widget/) itself. This means that in your call to `$.widget()` you can omit the base altogether.\n\n``` javascript\n$.widget( \"my.widget\", /* NOTE: no base needed */ {\n  options: {\n    /* ... */\n  },\n \n  _create: function() {\n    /* ... */\n  }\n \n  /* ... */\n});\n```\n\n# [Button Widget](../button \"Permalink to Button Widget\")\n\nCreates a button widget\n\n# [Checkboxradio Widget](../checkboxradio \"Permalink to Checkboxradio Widget\")\n\nCreates a checkboxradio widget\n\n# [Collapsible Widget](../collapsible \"Permalink to Collapsible Widget\")\n\nCreates a collapsible block of content\n\n# [Collapsibleset Widget](../collapsibleset \"Permalink to Collapsibleset Widget\")\n\nCreates a set of collapsible blocks of content\n\n# [Controlgroup Widget](../controlgroup \"Permalink to Controlgroup Widget\")\n\nGroups buttons together.\n\n# [Dialog Widget](../dialog \"Permalink to Dialog Widget\")\n\nOpens content in an interactive overlay.\n\n# [Filterable Widget](../filterable \"Permalink to Filterable Widget\")\n\nMakes the children of an element filterable.\n\n# [Fixedtoolbar Widget](../fixedtoolbar \"Permalink to Fixedtoolbar Widget\")\n\nSee Toolbar Widget\n\n# [Flipswitch Widget](../flipswitch \"Permalink to Flipswitch Widget\")\n\nCreates a flipswitch widget\n\n# [Footer Widget](../footer \"Permalink to Footer Widget\")\n\nSee Toolbar Widget\n\n# [Header Widget](../header \"Permalink to Header Widget\")\n\nSee Toolbar Widget\n\n# [Listview Widget](../listview \"Permalink to Listview Widget\")\n\nCreates a listview widget\n\n# [Loader Widget](../loader \"Permalink to Loader Widget\")\n\nHandles the task of displaying the loading dialog when jQuery Mobile pulls in content via Ajax.\n\n# [Navbar Widget](../navbar \"Permalink to Navbar Widget\")\n\nCreates a navbar widget\n\n# [Page Widget](../page \"Permalink to Page Widget\")\n\nPrimary unit of content.\n\n# [Pagecontainer Widget](../pagecontainer \"Permalink to Pagecontainer Widget\")\n\nManages a collection of pages.\n\n# [Panel Widget](../panel \"Permalink to Panel Widget\")\n\nCreates a panel widget\n\n# [Popup Widget](../popup \"Permalink to Popup Widget\")\n\nOpens content in a popup.\n\n# [Rangeslider Widget](../rangeslider \"Permalink to Rangeslider Widget\")\n\nCreates a rangeslider widget\n\n# [Selectmenu Widget](../selectmenu \"Permalink to Selectmenu Widget\")\n\nCreates a select menu widget\n\n# [Slider Widget](../slider \"Permalink to Slider Widget\")\n\nCreates a slider widget\n\n# [Table Widget](../table \"Permalink to Table Widget\")\n\nCreates a responsive table\n\n# [Column-Toggle Table Widget](../table-columntoggle \"Permalink to Column-Toggle Table Widget\")\n\nCreates a responsive table in column toggle mode\n\n# [Reflow Table Widget](../table-reflow \"Permalink to Reflow Table Widget\")\n\nCreates a responsive table in reflow mode\n\n# [Tabs Widget](https://api.jquerymobile.com/tabs/ \"Permalink to Tabs Widget\")\n\nA single content area with multiple panels, each associated with a header in a list.\n\n# [Textinput Widget](../textinput \"Permalink to Textinput Widget\")\n\nCreates a textinput widget for textinput, textarea or search input\n\n# [Toolbar Widget](../toolbar \"Permalink to Toolbar Widget\")\n\nAdds toolbars to the top and/or bottom of the page.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/category/widgets](https://api.jquerymobile.com/category/widgets)"
- name: Checkboxradio
  id: checkboxradio
  summary: The jQuery UI checkboxradio widget is bundled in jQuery Mobile with some changes
  description: "# Checkboxradio Widget\n\n## Checkboxradio Widgetversion added: 1.0\n\n**Description:** Creates a checkboxradio widget\n\n## QuickNav\n\n### Options\n\n[enhanced](#option-enhanced)\n\n[iconpos](#option-iconpos)\n\n[initSelector](#option-initSelector)\n\n[mini](#option-mini)\n\n[wrapperClass](#option-wrapperClass)\n\n### Methods\n\n### Events\n\nThe jQuery UI checkboxradio widget is bundled in jQuery Mobile with some changes. Thus, its [API documentation](https://api.jqueryui.com/checkboxradio/) fully describes its functionality.\n\n## Options\n\n### enhanced\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIndicates that the markup necessary for a checkboxradio widget has been provided as part of the original markup.\n\nThis option is also exposed as a data attribute: `data-enhanced=\"true\"`.\n\n**Code examples:**\n\nInitialize the checkboxradio with the `enhanced` option specified:\n\n``` javascript\n$( \".selector\" ).checkboxradio({\n  enhanced: true\n});\n```\n\nGet or set the `enhanced` option, after initialization:\n\n``` javascript\n// Getter\nvar enhanced = $( \".selector\" ).checkboxradio( \"option\", \"enhanced\" );\n \n// Setter\n$( \".selector\" ).checkboxradio( \"option\", \"enhanced\", true );\n```\n\n### iconpos\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"left\"`\n\nAllows you to specify on which side of the checkbox or radio button the checkmark/radio icon will appear.\n\nThis option is also exposed as a data attribute: `data-iconpos=\"right\"`.\n\n**Code examples:**\n\nInitialize the checkboxradio with the `iconpos` option specified:\n\n``` javascript\n$( \".selector\" ).checkboxradio({\n  iconpos: \"right\"\n});\n```\n\nGet or set the `iconpos` option, after initialization:\n\n``` javascript\n// Getter\nvar iconpos = $( \".selector\" ).checkboxradio( \"option\", \"iconpos\" );\n \n// Setter\n$( \".selector\" ).checkboxradio( \"option\", \"iconpos\", \"right\" );\n```\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the checkboxradio widget is:\n\n``` javascript\n\"input:not( :jqmData(role='flipswitch' ) )[type='checkbox'],input[type='radio']:not( :jqmData(role='flipswitch' ))\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.checkboxradio.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates checkboxradio widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### mini\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `null (false)`\n\nIf set to `true`, this will display a more compact version of the checkboxradio that uses less vertical height by applying the `ui-mini` class to the outermost element of the checkboxradio widget.\n\n**Note:** `mini` option is deprecated in 1.5 and will be removed in 1.6\n\nThis option is also exposed as a data attribute: `data-mini=\"true\"`.\n\n### wrapperClass\n\n**Type:**\n\n**Default:** `null`\n\nIt is difficult to write custom CSS for the wrapper `div` around the native `input` element generated by the framework. This option allows you to specify one or more space-separated class names to be added to the wrapper `div` element by the framework.\n\nThis option is also exposed as a data attribute: `data-wrapper-class=\"custom-class\"`.\n\n**Note:** `checkboxradio` option is deprecated in 1.5 and will be removed in 1.6\n\n**Code examples:**\n\nInitialize the checkboxradio with the `wrapperClass` option specified:\n\n``` javascript\n$( \".selector\" ).checkboxradio({\n  wrapperClass: \"custom-class\"\n});\n```\n\nGet or set the `wrapperClass` option, after initialization:\n\n``` javascript\n// Getter\nvar wrapperClass = $( \".selector\" ).checkboxradio( \"option\", \"wrapperClass\" );\n \n// Setter\n$( \".selector\" ).checkboxradio( \"option\", \"wrapperClass\", \"custom-class\" );\n```\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/checkboxradio](https://api.jquerymobile.com/checkboxradio)"
- name: Classes
  id: classes
  summary: These classes can be applied any of the framework's widgets
  description: "# Classes\n\n## Classes\n\n**Description:** CSS classes for common styles\n\n## Style Classes\n\njQuery Mobile uses the following style classes:\n\n[TABLE]\n\nThese classes can be applied any of the framework's widgets.\n\n### Widget-specific classes\n\n[TABLE]\n\n### Button-specific classes\n\nIn addition to the style classes, you can add the following classes to `a` (anchor) and `button` elements to render them touch-friendly:\n\n[TABLE]\n\n### Icon classes\n\n[Icons](https://api.jquerymobile.com/icons/) are used by a variety of widgets. The table below lists all the available icon classes. The widgets which support an icon usually have an option named \"icon\". The value for that option is the name of the icon, which is appended to the prefix `ui-icon-` to create the icon class name. In the class list below, the icon names are emphasized as part of the icon class name.\n\n[TABLE]\n\n### Theme-related classes\n\nThe class prefixes in the table below are used for applying a swatch to various parts of the user interface. The actual class name is constructed by appending the swatch letter (a-z) to the prefix. For example, the class `ui-body-`**`a`** is the swatch applied to the page.\n\n[TABLE]\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/classes](https://api.jquerymobile.com/classes)"
- name: Collapsible
  id: collapsible
  summary: 'Note: Collapsible is deprecated as of version 1.5 and will be removed in version 1.6'
  description: "# Collapsible Widget\n\n## Collapsible Widgetversion added: 1.0\n\n**Description:** Creates a collapsible block of content\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[collapseCueText](#option-collapseCueText)\n\n[collapsed](#option-collapsed)\n\n[collapsedIcon](#option-collapsedIcon)\n\n[contentTheme](#option-contentTheme)\n\n[corners](#option-corners)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[enhanced](#option-enhanced)\n\n[expandCueText](#option-expandCueText)\n\n[expandedIcon](#option-expandedIcon)\n\n[heading](#option-heading)\n\n[iconpos](#option-iconpos)\n\n[initSelector](#option-initSelector)\n\n[inset](#option-inset)\n\n[mini](#option-mini)\n\n[theme](#option-theme)\n\n### Methods\n\n[collapse](#method-collapse)\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[expand](#method-expand)\n\n[option](#method-option)\n\n### Events\n\n[collapse](#event-collapse)\n\n[create](#event-create)\n\n[expand](#event-expand)\n\n## Collapsible content\n\n**Note:** Collapsible is deprecated as of version 1.5 and will be removed in version 1.6. Use [accordion](accordion) in place of collapsible.\n\nTo create a collapsible block of content, create a container and add the `data-role=\"collapsible\"` attribute. Using the `data-content-theme` attribute allows you to set a theme for the content of the collapsible.\n\nDirectly inside this container, add any header (H1-H6) or legend element. The framework will style the header to look like a clickable button and add a \"+\" icon to the left to indicate it's expandable.\n\nAfter the header, add any HTML markup you want to be collapsible. The framework will wrap this markup in a container that will be hidden/shown when the heading is clicked.\n\nBy default, the content will be collapsed.\n\n``` markup\n<div data-role=\"collapsible\">\n  <h3>I'm a header</h3>\n  <p>I'm the collapsible content. By default I'm closed, but you can click the header to open me.</p>\n</div>\n```\n\nThis code will create a collapsible widget like this:\n\n### Theming\n\nThe collapsible widget uses the [jQuery Mobile CSS framework](theming/css-framework) to style its look and feel. If collapsible specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-collapsible`: The outermost container for collapsible. Contains additional classes of `ui-collapsible-inset`, `ui-collapsible-themed-content` and `ui-collapsible-collapsed` by default unless options to set them false are added.\n  - `ui-collapsible-heading`: Always visible part of collapsible, which is clicked to open it. Additionally contains `ui-collapsible-heading-collapsed` class when the collapsible is closed.\n    - `ui-collapsible-heading-toggle`: Toggler for collapsible\n      - `ui-collapsible-heading-status`: Status text of the toggler\n  - `ui-collapsible-content`: Content of the collapsible. Additionally contains `ui-collapsible-content-collapsed` class in case the content is collapsed.\n\n### Initially expanded collapsibles\n\nWhen you add the `data-collapsed=\"false\"` attribute to the wrapper the collapsible will initially be expanded.\n\n``` markup\n<div data-role=\"collapsible\" data-collapsed=\"false\">\n```\n\nThis code will create a collapsible widget like this:\n\n### Non-inset collapsibles\n\nBy default collapsibles have an inset appearance. To make them full width without corner styling add the `data-inset=\"false\"` attribute to the element.\n\n``` markup\n<div data-role=\"collapsible\" data-inset=\"false\">\n```\n\nThis code will create a non-inset collapsible:\n\n### Mini collapsibles\n\nFor a more compact version that is useful in toolbars and tight spaces, add the `data-mini=\"true\"` attribute to the element to create a mini version.\n\n``` markup\n<div data-role=\"collapsible\" data-mini=\"true\">\n```\n\nThis code will create a mini collapsible widget:\n\n### Custom icons\n\nThe default icon of collapsible headings can be overridden by using the `data-collapsed-icon` and `data-expanded-icon` attributes. The example below uses `data-collapsed-icon=\"arrow-r\"` and `data-expanded-icon=\"arrow-d\"`.\n\n### Icon positioning\n\nThe default icon positioning of collapsible headings can be overridden by using the `data-iconpos` attribute. The example below uses `data-iconpos=\"right\"`.\n\n### Theming collapsible content\n\nCollapsible content is minimally styled - we add only a bit of margin between the bar and content, and the header adopts the default theme styles of the container within which it sits.\n\nTo provide a stronger visual connection between the collapsible header and content, add the `data-content-theme` attribute to the wrapper and specify a theme swatch letter. This applies the border and background color of the swatch to the content block and changes the corner rounding to square off the bottom of the header and round the bottom of the content block instead to visually group these elements.\n\n``` markup\n<div data-role=\"collapsible\" data-content-theme=\"b\">\n  <h3>Header</h3>\n  <p>I'm the collapsible content with a themed content block set to \"b\".</p>\n</div>\n```\n\n### Theming collapsible headers\n\nTo set the theme on a collapsible header button, add the `data-theme` attribute to the wrapper and specify a swatch letter. Note that you can mix and match swatch letters between the header and content with these theme attributes.\n\n``` markup\n<div data-role=\"collapsible\" data-theme=\"b\" data-content-theme=\"b\">\n  <h3>Header swatch B</h3>\n  <p>I'm the collapsible content with a themed content block set to \"b\".</p>\n</div>\n```\n\n### Nested Collapsibles\n\nCollapsibles can be nested inside each other if needed. In this example, we're setting the content theme to provide clearer visual connection between the levels.\n\n### Collapsible sets (accordions)\n\nIt's possible to combine multiple collapsibles into a grouped set that acts like an [accordion widget](collapsibleset).\n\n## Providing pre-rendered markup\n\nYou can improve the load time of your page by providing the markup that the collapsible widget would normally create during its initialization.\n\nBy providing this markup yourself, and by indicating that you have done so by setting the attribute `data-enhanced=\"true\"`, you instruct the collapsible widget to skip these DOM manipulations during instantiation and to assume that the required DOM structure is already present.\n\nWhen you provide such pre-rendered markup you must also set all the classes that the framework would normally set, and you must also set all data attributes whose values differ from the default to indicate that the pre-rendered markup reflects the non-default value of the corresponding widget option.\n\nThe collapsible widget creates an anchor from the heading element and wraps the rest of the children of the outermost widget in a `div` that will serve as the container for the collapsible content.\n\nIn the example below, pre-rendered markup for a collapsible is provided. The attribute `data-collapsed-icon=\"arrow-r\"` is explicitly specified, since the use of the`ui-icon-arrow-r` class on the anchor element indicates that the value of the \"collapsedIcon\" widget option is to be \"arrow-r\".\n\n``` markup\n<div data-role=\"collapsible\" data-enhanced=\"true\" class=\"ui-collapsible ui-collapsible-inset ui-corner-all ui-collapsible-collapsed\" data-collapsed-icon=\"arrow-r\">\n  <h2 class=\"ui-collapsible-heading ui-collapsible-heading-collapsed\">\n    <a href=\"#\" class=\"ui-collapsible-heading-toggle ui-btn ui-btn-icon-left ui-icon-arrow-r\">\n      Pre-rendered collapsible\n      <span class=\"ui-collapsible-heading-status\"> click to expand contents</span>\n    </a>\n  </h2>\n  <div class=\"ui-collapsible-content ui-collapsible-content-collapsed\" aria-hidden=\"true\">\n    <p>This is the collapsible-content</p>\n  </div>\n</div>\n```\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the collapsible with the `classes` option specified, changing the theming for the `ui-collapsible` class:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  classes: {\n    \"ui-collapsible\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-collapsible` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).collapsible( \"option\", \"classes.ui-collapsible\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"classes.ui-collapsible\", \"highlight\" );\n```\n\n### collapseCueText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\" click to collapse contents\"`\n\nThis text is used to provide audible feedback for users with screen reader software.\n\nIf the value is unset for an individual collapsible container, but that container is part of a collapsible set, then the value is inherited from the parent collapsible set.\n\nThis option is also exposed as a data attribute: `data-collapse-cue-text=\" collapse with a click\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `collapseCueText` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  collapseCueText: \" collapse with a click\"\n});\n```\n\nGet or set the `collapseCueText` option, after initialization:\n\n``` javascript\n// Getter\nvar collapseCueText = $( \".selector\" ).collapsible( \"option\", \"collapseCueText\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"collapseCueText\", \" collapse with a click\" );\n```\n\n### collapsed\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nWhen false, the container is initially expanded with a minus icon in the header.\n\nThis option is also exposed as a data attribute: `data-collapsed=\"false\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `collapsed` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  collapsed: false\n});\n```\n\nGet or set the `collapsed` option, after initialization:\n\n``` javascript\n// Getter\nvar collapsed = $( \".selector\" ).collapsible( \"option\", \"collapsed\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"collapsed\", false );\n```\n\n### collapsedIcon\n\n**Type:** [String](http://api.jquery.com/Types/#String) or [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `\"plus\"`\n\nSets the icon for the header of the collapsible container when in a collapsed state.\n\nIf the value is unset for an individual collapsible container, but that container is part of a collapsible set, then the value is inherited from the parent collapsible set.\n\nThis option is also exposed as a data attribute: `data-collapsed-icon=\"arrow-r\"`.\n\n**Multiple types supported:**\n\n- **String**: The name of the icon you wish to use.\n- **Boolean**: In addition to an icon name, you can also set this option to `false`. In that case, the collapsible will not have an icon in either the expanded or collapsed state. Add `data-collapsed-icon=\"false\"` to the collapsible widget to set the option to `false` via the data attribute.\n\n**Code examples:**\n\nInitialize the collapsible with the `collapsedIcon` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  collapsedIcon: \"arrow-r\"\n});\n```\n\nGet or set the `collapsedIcon` option, after initialization:\n\n``` javascript\n// Getter\nvar collapsedIcon = $( \".selector\" ).collapsible( \"option\", \"collapsedIcon\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"collapsedIcon\", \"arrow-r\" );\n```\n\n### contentTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nSets the color scheme (swatch) for the collapsible content. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nIf the value is unset for an individual collapsible container, but that container is part of a collapsible set, then the value is inherited from the parent collapsible set.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-content-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `contentTheme` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  contentTheme: \"b\"\n});\n```\n\nGet or set the `contentTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar contentTheme = $( \".selector\" ).collapsible( \"option\", \"contentTheme\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"contentTheme\", \"b\" );\n```\n\n### corners\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nApplies the theme border-radius if set to true.\n\nIf the value is unset for an individual collapsible container, but that container is part of a collapsible set, then the value is inherited from the parent collapsible set.\n\nThis option is also exposed as a data attribute: `data-corners=\"false\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `corners` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  corners: false\n});\n```\n\nGet or set the `corners` option, after initialization:\n\n``` javascript\n// Getter\nvar corners = $( \".selector\" ).collapsible( \"option\", \"corners\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"corners\", false );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).collapsible( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the collapsible if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).collapsible( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"disabled\", true );\n```\n\n### enhanced\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIndicates that the markup necessary for a collapsible widget has been provided as part of the original markup.\n\nThis option is also exposed as a data attribute: `data-enhanced=\"true\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `enhanced` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  enhanced: true\n});\n```\n\nGet or set the `enhanced` option, after initialization:\n\n``` javascript\n// Getter\nvar enhanced = $( \".selector\" ).collapsible( \"option\", \"enhanced\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"enhanced\", true );\n```\n\n### expandCueText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\" click to expand contents\"`\n\nThis text is used to provide audible feedback for users with screen reader software.\n\nIf the value is unset for an individual collapsible container, but that container is part of a collapsible set, then the value is inherited from the parent collapsible set.\n\nThis option is also exposed as a data attribute: `data-expand-cue-text=\" expand with a click\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `expandCueText` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  expandCueText: \" expand with a click\"\n});\n```\n\nGet or set the `expandCueText` option, after initialization:\n\n``` javascript\n// Getter\nvar expandCueText = $( \".selector\" ).collapsible( \"option\", \"expandCueText\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"expandCueText\", \" expand with a click\" );\n```\n\n### expandedIcon\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"minus\"`\n\nSets the icon for the header of the collapsible container when in an expanded state.\n\nIf the value is unset for an individual collapsible container, but that container is part of a collapsible set, then the value is inherited from the parent collapsible set.\n\nThis option is also exposed as a data attribute: `data-expanded-icon=\"arrow-d\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `expandedIcon` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  expandedIcon: \"arrow-d\"\n});\n```\n\nGet or set the `expandedIcon` option, after initialization:\n\n``` javascript\n// Getter\nvar expandedIcon = $( \".selector\" ).collapsible( \"option\", \"expandedIcon\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"expandedIcon\", \"arrow-d\" );\n```\n\n### heading\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"h1,h2,h3,h4,h5,h6,legend\"`\n\nWithin the collapsible container, the first immediate child element that matches this selector will be used as the header for the collapsible.\n\nThis option is also exposed as a data attribute: `data-heading=\".mycollapsibleheading\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `heading` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  heading: \".mycollapsibleheading\"\n});\n```\n\nGet or set the `heading` option, after initialization:\n\n``` javascript\n// Getter\nvar heading = $( \".selector\" ).collapsible( \"option\", \"heading\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"heading\", \".mycollapsibleheading\" );\n```\n\n### iconpos\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"left\"`\n\nPositions the icon in the collapsible header.\n\nIf the value is unset for an individual collapsible container, but that container is part of a collapsible set, then the value is inherited from the parent collapsible set.\n\nPossible values: left, right, top, bottom, none, notext.\n\nThis option is also exposed as a data attribute: `data-iconpos=\"right\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `iconpos` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  iconpos: \"right\"\n});\n```\n\nGet or set the `iconpos` option, after initialization:\n\n``` javascript\n// Getter\nvar iconpos = $( \".selector\" ).collapsible( \"option\", \"iconpos\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"iconpos\", \"right\" );\n```\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the collapsible widget is:\n\n``` javascript\n\":jqmData(role='collapsible')\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.collapsible.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates collapsible widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### inset\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nBy setting this option to false the element will get a full width appearance without corners.\n\nIf the value is unset for an individual collapsible container, but that container is part of a collapsible set, then the value is inherited from the parent collapsible set.\n\nThis option is also exposed as a data attribute: `data-inset=\"false\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `inset` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  inset: false\n});\n```\n\nGet or set the `inset` option, after initialization:\n\n``` javascript\n// Getter\nvar inset = $( \".selector\" ).collapsible( \"option\", \"inset\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"inset\", false );\n```\n\n### mini\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSets the size of the element to a more compact, mini version.\n\nIf the value is unset for an individual collapsible container, but that container is part of a collapsible set, then the value is inherited from the parent collapsible set.\n\nThis option is also exposed as a data attribute: `data-mini=\"true\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `mini` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  mini: true\n});\n```\n\nGet or set the `mini` option, after initialization:\n\n``` javascript\n// Getter\nvar mini = $( \".selector\" ).collapsible( \"option\", \"mini\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"mini\", true );\n```\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nSets the color scheme (swatch) for the collapsible. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nIf the value is unset for an individual collapsible container, but that container is part of a collapsible set, then the value is inherited from the parent collapsible set.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the collapsible with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).collapsible( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).collapsible( \"option\", \"theme\", \"b\" );\n```\n\n## Methods\n\n### collapse()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCollapses the collapsible.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the collapse method:\n\n``` javascript\n$( \".selector\" ).collapsible( \"collapse\" );\n```\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the collapsible functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).collapsible( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the collapsible.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).collapsible( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the collapsible.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).collapsible( \"enable\" );\n```\n\n### expand()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nExpands the collapsible.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the expand method:\n\n``` javascript\n$( \".selector\" ).collapsible( \"expand\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).collapsible( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current collapsible options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).collapsible( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the collapsible option associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).collapsible( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the collapsible.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).collapsible( \"option\", { disabled: true } );\n```\n\n## Events\n\n### collapse( event, ui )Type: `collapsiblecollapse`\n\nTriggered when a collapsible is collapsed\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the collapsible with the collapse callback specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  collapse: function( event, ui ) {}\n});\n```\n\nBind an event listener to the collapsiblecollapse event:\n\n``` javascript\n$( \".selector\" ).on( \"collapsiblecollapse\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `collapsiblecreate`\n\nTriggered when the collapsible is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the collapsible with the create callback specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the collapsiblecreate event:\n\n``` javascript\n$( \".selector\" ).on( \"collapsiblecreate\", function( event, ui ) {} );\n```\n\n### expand( event, ui )Type: `collapsibleexpand`\n\nTriggered when a collapsible is expanded\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the collapsible with the expand callback specified:\n\n``` javascript\n$( \".selector\" ).collapsible({\n  expand: function( event, ui ) {}\n});\n```\n\nBind an event listener to the collapsibleexpand event:\n\n``` javascript\n$( \".selector\" ).on( \"collapsibleexpand\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of a collapsible content block.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>collapsible demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <div data-role=\"collapsible\">\n      <h3>I'm a header</h3>\n      <p>I'm the collapsible content. By default I'm closed, but you can click the header to open me.</p>\n    </div>\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/collapsible](https://api.jquerymobile.com/collapsible)"
- name: Collapsibleset
  id: collapsibleset
  summary: By default, all the collapsible sections will be collapsed
  description: "# Collapsibleset Widget\n\n## Collapsibleset Widgetversion added: 1.0\n\n**Description:** Creates a set of collapsible blocks of content\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[collapsedIcon](#option-collapsedIcon)\n\n[corners](#option-corners)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[enhanced](#option-enhanced)\n\n[expandedIcon](#option-expandedIcon)\n\n[iconpos](#option-iconpos)\n\n[initSelector](#option-initSelector)\n\n[initSelector](#option-initSelector)\n\n[inset](#option-inset)\n\n[mini](#option-mini)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n### Events\n\n[create](#event-create)\n\n## Sets of collapsibles\n\njQuery Mobile will visually style a set of [collapsibles](collapsible) as a group and will make the set behave like an accordion in that only one collapsible can be open at a time if you wrap the collapsibles in a `div` that has the attribute `data-role=\"collapsibleset\"`.\n\nBy default, all the collapsible sections will be collapsed. To set a section to be open when the page loads, add the `data-collapsed=\"false\"` attribute to the heading of the section you want expanded.\n\n``` markup\n<div data-role=\"collapsible-set\">\n \n  <div data-role=\"collapsible\" data-collapsed=\"false\">\n    <h3>Section 1</h3>\n    <p>I'm the collapsibleset content for section 1. My content is initially visible.</p>\n  </div>\n \n  <div data-role=\"collapsible\">\n    <h3>Section 2</h3>\n    <p>I'm the collapsibleset content for section 2.</p>\n  </div>\n \n</div>\n```\n\nHere is an example of a collapsibleset widget with 5 sections.\n\n### Non-inset collapsibleset widgets\n\nFor full width collapsibles without corner styling add the `data-inset=\"false\"` attribute to the set.\n\n### Mini collapsibleset widgets\n\nFor a more compact version that is useful in tight spaces, add the `data-mini=\"true\"` attribute to the set to create a mini version.\n\n### Custom icons\n\nThe icon displayed when a collapsible is shown or hidden can be overridden by using the `data-collapsed-icon` and `data-expanded-icon` attributes. Both the `collapsibleset` widget and the `collapsible` widget accepts these attributes. When you set one or both of these attributes on the `collapsibleset` widget all `collapsible` widgets that are part of the `collapsibleset` display the icon specified by the chosen value. You can override the icon displayed by individual `collapsible` widgets by setting one or both of these attributes on the `collapsible` widget itself.\n\n### Icon positioning\n\nThe default icon positioning for collapsible headings can be overridden by using the `data-iconpos` attribute. You can set the attribute either on the `collapsibleset` to affect all collapsibles in the set, or on an individual `collapsible` widget to affect only the one widget.\n\n### Theming collapsible content\n\nThe standard `data-theme` attribute can be used to set the color of each collapsible in a set. To provide a clearer visual grouping of the content with the headers, add the `data-content-theme` attribute with a swatch letter. This adds a themed background color and border to the content block. For consistent theming, add these attributes to the parent collapsibleset widget.\n\n``` markup\n<div data-role=\"collapsible-set\" data-theme=\"b\" data-content-theme=\"a\">\n```\n\n### Theming individual sections\n\nTo have individual sections in a group styled differently, add `data-theme` and `data-content-theme` attributes to specific collapsibles.\n\n## Providing pre-rendered markup\n\nYou can improve the load time of your page by providing the markup that the collapsibleset widget would normally create during its initialization.\n\nBy providing this markup yourself, and by indicating that you have done so by setting the attribute `data-enhanced=\"true\"`, you instruct the collapsibleset widget to skip these DOM manipulations during instantiation and to assume that the required DOM structure is already present.\n\nWhen you provide such pre-rendered markup you must also set all the classes that the framework would normally set, and you must also set all data attributes whose values differ from the default to indicate that the pre-rendered markup reflects the non-default value of the corresponding widget option.\n\nThe collapsibleset widget does not require that the collapsibles it contains also be pre-rendered.\n\nIn the example below, pre-rendered markup for a collapsibleset is provided. The attribute `data-corners=\"false\"` is explicitly specified, since the absence of the `ui-corner-all` class on the container element indicates that the \"corners\" widget option is to be false. One of the child collapsibles is provided as-is, while the other is pre-rendered.\n\n``` markup\n<div data-role=\"collapsibleset\" class=\"ui-collapsible-set\" data-corners=\"false\">\n  <div data-role=\"collapsible\">\n    <h2>Child collapsible</h2>\n    <p>This is the collapsible content.</p>\n  </div>\n  <div data-role=\"collapsible\" data-enhanced=\"true\" class=\"ui-collapsible ui-collapsible-inset ui-corner-all\" data-collapsed=\"false\" data-corners=\"true\">\n    <h2 class=\"ui-collapsible-heading\">\n      <a href=\"#\" class=\"ui-collapsible-heading-toggle ui-btn ui-btn-icon-left ui-icon-minus\">\n        Pre-rendered child collapsible\n        <span class=\"ui-collapsible-heading-status\">click to collapse contents</span>\n      </a>\n    </h2>\n    <div class=\"ui-collapsible-content\" aria-hidden=\"false\">\n      <p>This is the collapsible content.</p>\n    </div>\n  </div>\n</div>\n```\n\n## Options\n\n### collapsedIcon\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"plus\"`\n\nSets the icon for the headers of the collapsible containers when in a collapsed state.\n\nThis option is also exposed as a data attribute: `data-collapsed-icon=\"arrow-r\"`.\n\n**Code examples:**\n\nInitialize the collapsibleset with the `collapsedIcon` option specified:\n\n``` javascript\n$( \".selector\" ).collapsibleset({\n  collapsedIcon: \"arrow-r\"\n});\n```\n\nGet or set the `collapsedIcon` option, after initialization:\n\n``` javascript\n// Getter\nvar collapsedIcon = $( \".selector\" ).collapsibleset( \"option\", \"collapsedIcon\" );\n \n// Setter\n$( \".selector\" ).collapsibleset( \"option\", \"collapsedIcon\", \"arrow-r\" );\n```\n\n### corners\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nApplies the theme border-radius to the first and last collapsible if set to true.\n\nThis option is also exposed as a data attribute:`data-corners=\"false\"`.\n\n**Code examples:**\n\nInitialize the collapsibleset with the `corners` option specified:\n\n``` javascript\n$( \".selector\" ).collapsibleset({\n  corners: false\n});\n```\n\nGet or set the `corners` option, after initialization:\n\n``` javascript\n// Getter\nvar corners = $( \".selector\" ).collapsibleset( \"option\", \"corners\" );\n \n// Setter\n$( \".selector\" ).collapsibleset( \"option\", \"corners\", false );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the collapsibleset with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).collapsibleset({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).collapsibleset( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).collapsibleset( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the collapsibleset if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the collapsibleset with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).collapsibleset({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).collapsibleset( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).collapsibleset( \"option\", \"disabled\", true );\n```\n\n### enhanced\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIndicates that the markup necessary for a collapsibleset widget has been provided as part of the original markup.\n\nThis option is also exposed as a data attribute: `data-enhanced=\"true\"`.\n\n**Code examples:**\n\nInitialize the collapsibleset with the `enhanced` option specified:\n\n``` javascript\n$( \".selector\" ).collapsibleset({\n  enhanced: true\n});\n```\n\nGet or set the `enhanced` option, after initialization:\n\n``` javascript\n// Getter\nvar enhanced = $( \".selector\" ).collapsibleset( \"option\", \"enhanced\" );\n \n// Setter\n$( \".selector\" ).collapsibleset( \"option\", \"enhanced\", true );\n```\n\n### expandedIcon\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"minus\"`\n\nSets the icon for the header of the collapsible container when in an expanded state.\n\nThis option is also exposed as a data attribute: `data-expanded-icon=\"arrow-d\"`.\n\n**Code examples:**\n\nInitialize the collapsibleset with the `expandedIcon` option specified:\n\n``` javascript\n$( \".selector\" ).collapsibleset({\n  expandedIcon: \"arrow-d\"\n});\n```\n\nGet or set the `expandedIcon` option, after initialization:\n\n``` javascript\n// Getter\nvar expandedIcon = $( \".selector\" ).collapsibleset( \"option\", \"expandedIcon\" );\n \n// Setter\n$( \".selector\" ).collapsibleset( \"option\", \"expandedIcon\", \"arrow-d\" );\n```\n\n### iconpos\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"left\"`\n\nPositions the icon in the collapsible headers.\n\nPossible values: left, right, top, bottom, none, notext.\n\nThis option is also exposed as a data attribute: `data-iconpos=\"right\"`.\n\n**Code examples:**\n\nInitialize the collapsibleset with the `iconpos` option specified:\n\n``` javascript\n$( \".selector\" ).collapsibleset({\n  iconpos: right\n});\n```\n\nGet or set the `iconpos` option, after initialization:\n\n``` javascript\n// Getter\nvar iconpos = $( \".selector\" ).collapsibleset( \"option\", \"iconpos\" );\n \n// Setter\n$( \".selector\" ).collapsibleset( \"option\", \"iconpos\", right );\n```\n\n### initSelector\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nThe default `initSelector` for the collapsibleset widget is:\n\n``` javascript\n\":jqmData(role='collapsibleset')\"\n```\n\n**This option is deprecated in 1.4.0 and will be removed in 1.5.0.**\n\n**The old value of the collapsibleset widget's `initSelector` option (`\":jqmData(role='collapsible-set')\"`) is deprecated.** As of jQuery Mobile 1.5.0, only widgets that have the attribute `data-role=\"collapsibleset\"` will be enhanced as collapsibleset widgets.\n\nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.collapsibleset.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates collapsibleset widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the collapsibleset widget is:\n\n``` javascript\n\":jqmData(role='collapsibleset')\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.collapsibleset.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates collapsibleset widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### inset\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nBy setting this option to false the collapsibles will get a full width appearance without corners. If the value is false for an individual collapsible container, but that container is part of a collapsibleset widget, then the value is inherited from the parent collapsibleset widget.\n\nThis option is also exposed as a data attribute: `data-inset=\"true\"`.\n\n**Code examples:**\n\nInitialize the collapsibleset with the `inset` option specified:\n\n``` javascript\n$( \".selector\" ).collapsibleset({\n  inset: false\n});\n```\n\nGet or set the `inset` option, after initialization:\n\n``` javascript\n// Getter\nvar inset = $( \".selector\" ).collapsibleset( \"option\", \"inset\" );\n \n// Setter\n$( \".selector\" ).collapsibleset( \"option\", \"inset\", false );\n```\n\n### mini\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSets the size of the element to a more compact, mini version. If the value is false for an individual collapsible container, but that container is part of a collapsibleset widget, then the value is inherited from the parent collapsibleset widget.\n\nThis option is also exposed as a data attribute: `data-mini=\"false\"`.\n\n**Code examples:**\n\nInitialize the collapsibleset with the `mini` option specified:\n\n``` javascript\n$( \".selector\" ).collapsibleset({\n  mini: true\n});\n```\n\nGet or set the `mini` option, after initialization:\n\n``` javascript\n// Getter\nvar mini = $( \".selector\" ).collapsibleset( \"option\", \"mini\" );\n \n// Setter\n$( \".selector\" ).collapsibleset( \"option\", \"mini\", true );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the collapsibleset functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).collapsibleset( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the collapsibleset.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).collapsibleset( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the collapsibleset.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).collapsibleset( \"enable\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).collapsibleset( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current collapsibleset options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).collapsibleset( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the collapsibleset option associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).collapsibleset( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the collapsibleset.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).collapsibleset( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nUpdates the collapsibleset widget.\n\nIf you manipulate a collapsibleset widget via JavaScript (e.g. by adding new collapsibles, removing old ones, or showing/hiding existing ones), you must call the refresh method on it to update the visual styling. This method will instantiate collapsibles on child elements which are marked `data-role=\"collapsible\"`, so there is no need to manually call `.collapsible()`.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).collapsibleset( \"refresh\" );\n```\n\n## Events\n\n### create( event, ui )Type: `collapsiblesetcreate`\n\nTriggered when the collapsibleset is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the collapsibleset with the create callback specified:\n\n``` javascript\n$( \".selector\" ).collapsibleset({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the collapsiblesetcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"collapsiblesetcreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of a collapsibleset widget.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>collapsibleset demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <div data-role=\"collapsibleset\">\n      <div data-role=\"collapsible\" data-collapsed=\"false\">\n        <h3>Section A</h3>\n        <p>I'm the collapsibleset content for section A.</p>\n      </div>\n      <div data-role=\"collapsible\">\n        <h3>Section B</h3>\n        <p>I'm the collapsibleset content for section B.</p>\n      </div>\n    </div>\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/collapsibleset](https://api.jquerymobile.com/collapsibleset)"
- name: Column-Toggle Table
  id: table-columntoggle
  summary: This table mode automatically hides less important columns at narrower widths and surfaces a button to open a menu that allows the user to choose what columns they want to see
  description: "# Column-Toggle Table Widget\n\n## Column-Toggle Table Widgetversion added: 1.3\n\n**Description:** Creates a responsive table in column toggle mode\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes.columnBtn](#option-classes.columnBtn)\n\n[classes.columnToggleTable](#option-classes.columnToggleTable)\n\n[classes.popup](#option-classes.popup)\n\n[classes.priorityPrefix](#option-classes.priorityPrefix)\n\n[columnBtnText](#option-columnBtnText)\n\n[columnBtnTheme](#option-columnBtnTheme)\n\n[columnPopupTheme](#option-columnPopupTheme)\n\n[enhanced](#option-enhanced)\n\n### Methods\n\n[refresh](#method-refresh)\n\n### Events\n\n[create](#event-create)\n\nThis table mode automatically hides less important columns at narrower widths and surfaces a button to open a menu that allows the user to choose what columns they want to see. In this mode, the author attempts to define which columns are most important to show across various widths by assigning a priority to each column.\n\nA user may choose to check as many columns as they want by tapping the \"Columns...\" button to open the column chooser popup. The popup contains a dynamically generated list of columns based on the table markup that can be checked and unchecked to adjust the visible columns.\n\n### Applying column chooser mode to a table\n\nThe column chooser mode requires a `table` element with two attributes: `data-role=\"table\"` and `data-mode=\"columntoggle\"`. An `ID` attribute is also required on the table to associate it with the column chooser popup menu.\n\n``` markup\n<table data-role=\"table\" data-mode=\"columntoggle\" id=\"my-table\">\n```\n\n### How column toggle mode works\n\nThe plugin automates a few key things: it injects the column chooser button, and generates the popup with check list of columns that can be hidden or shown by the user. The list of columns in the chooser menu is populated by parsing the values (or `abbr title`) of the first row of header (`TH`) elements. Only headers that have a `data-priority` attribute are included in the column chooser; headers without this attribute won't made available in the chooser to allow developers to identify critical columns that shouldn't be hidden. If columns are hidden via responsive media queries, these will be unchecked in the chooser to reflect the current column visibility.\n\nThe automatic column hiding behavior is accomplished by CSS media queries that hide or show columns based on priority levels at various screen widths. Since each site will have different content and column configurations, we provide a simple media query block that you can copy, paste and customize for each project. This is explained in detail below.\n\nThe priorities assigned to headers and media queries used to hide columns act as a sensible default for showing the most important columns that will fit on a device. The column chooser menu gives users the ability to override these defaults and choose which columns they want to see. These user preferences take precedence over the priority mappings so if a column is manually checked, it will remain visible across all screen widths until the page is refreshed.\n\nBecause of the flexibility this plugin provides, it's possible for users to introduce horizontal scrolling if the data in each column is long or if many columns are selected to be shown on a smaller screen.\n\n### Setting column priority\n\nThe table works by hiding and showing columns based on two inputs: available screen width or by the user checking and unchecking which columns to display in a column picker popup. Add `data-priority` attributes to each of the table headers of columns you want to responsively display and assign a priority (1 = highest, 6 = lowest). Any table header given a priority will be available in the column picker menu.\n\nTo make a column *persistent* so it's not available for hiding, omit the `data-priority` attribute. This will make the column visible at all widths and won't be available in the column chooser menu.\n\n``` markup\n<th>I'm critical and can't be removed</th>\n<th data-priority=\"1\">I'm very important</th>\n<th data-priority=\"3\">I'm somewhat</th>\n<th data-priority=\"5\">I'm less important</th>\n```\n\nBehind the scenes, the plugin will apply classes to each cell that map to the priority set in the data attribute on the header. For example, if a table heading has a `data-priority=\"3\"` attribute, every cell in that column will assigned a `ui-table-priority-3` class once enhanced. These classes are then used in media queries to hide and show columns based on screen width (see below).\n\n``` markup\n<td class=\"ui-table-priority-3\">97%</td>\n```\n\nYou may use any priority naming convention and assign as many (or few) levels of priority for the columns. The plugin simply generates class names based on the values in the `data-priority` attribute so even though we default to using a numeric system of 1-6, any naming convention is possible.\n\nFor example, if a priority of `data-priority=\"critical\"` is added to the heading, a class of `ui-table-priority-critial` will be applied to each cell in that column. If a priority is assigned, the column will be made available for the toggling in the column menu and adds the classes to each cell, the rest of the styling and media query creation is up to you write in your custom stylesheet.\n\nIt is important to note that you are required to wrap your table headers in a `<thead> ... </thead>` block, and the table body in a `<tbody> ... </tbody>` block, as shown in the [full demo Example](#entry-examples).\n\n### Making the table responsive\n\nThe styles for the all priority columns (1-6) start as `display:none` in the structure stylesheet since we're taking a mobile-first approach to our styles. This means that only columns that should be persistent are visible in the styles to start.\n\nThe framework does not automatically include the the media queries to progressively display columns at wider widths. We do this to make it easier for developers to customize the media query widths for each priority level.\n\nMedia queries add the responsive behavior to show and hide columns by priority. Each media query is written using `min-width` widths so they build on top of each other. The widths are set in ems so they respond to font size changes. To calculate a pixel withs in em's, divide the target width by 16 (pixels) - it's that easy.\n\nInside each media query, we override the `display:none` style properties set on all the priority columns in the basic styles to `display:table-cell` so they become visible again and act as a table.\n\nTo customize the breakpoints, copy the following style block into your custom style overrides and adjust the `min-width` media query values for each priority level to specify where various priority columns should appear.\n\nIn the example styles below for a `my-custom-class` class on the table, the priority 1 columns are shown first, at widths above `20em` (320px), then priority 2 kicks in above `30em` (480px) and so on up to wide desktop widths with priority 6. Feel free to change these breakpoints in your stylesheet and choose how many priority levels you'd like to use.\n\n``` javascript\n/* Show priority 1 at 320px (20em x 16px) */\n@media screen and (min-width: 20em) {\n   .my-custom-class th.ui-table-priority-1,\n   .my-custom-class td.ui-table-priority-1 {\n     display: table-cell;\n   }\n}\n/* Show priority 2 at 480px (30em x 16px) */\n@media screen and (min-width: 30em) {\n   .my-custom-class  th.ui-table-priority-2,\n   .my-custom-class td.ui-table-priority-2 {\n     display: table-cell;\n   }\n}\n...more breakpoints...\n```\n\nDue to CSS specificity, you will also need to include the class definitions for the hidden and visible states *after* the custom breakpoints in your custom stylesheet so be sure to include these as well:\n\n``` javascript\n/* Manually hidden */\n.my-custom-class th.ui-table-cell-hidden,\n.my-custom-class td.ui-table-cell-hidden {\n  display: none;\n}\n \n/* Manually shown */\n.my-custom-class th.ui-table-cell-visible,\n.my-custom-class td.ui-table-cell-visible {\n   display: table-cell;\n}\n```\n\n### Applying a preset breakpoint\n\nEven though we strongly encourage you to write custom breakpoints yourself, the framework includes a set of pre-configured breakpoints for each of the six priority levels that you can use if they happen work well for your content.\n\nThese breakpoints can applied by adding a `class=\"ui-responsive\"` to the table element. Here is an example of a table with this class added:\n\n``` markup\n<table data-role=\"table\" class=\"ui-responsive\" data-mode=\"columntoggle\" id=\"my-table\">\n```\n\nThe six preset breakpoints classes included in the column toggle stylesheet use regular increments of 10em (160 pixels). Here is a summary of the breakpoints assigned to each priority in the preset styles:\n\n`data-priority=\"1\"`  \nDisplays the column at 320px (20em)\n\n`data-priority=\"2\"`  \nDisplays the column at 480px (30em)\n\n`data-priority=\"3\"`  \nDisplays the column at 640px (40em)\n\n`data-priority=\"4\"`  \nDisplays the column at 800px (50em)\n\n`data-priority=\"5\"`  \nDisplays the column at 960px (60em)\n\n`data-priority=\"6\"`  \nDisplays the column at 1,120px (70em)\n\nIf these preset breakpoints don't work for your content and layout needs, we recommend that you create custom breakpoints to fine tune the styles.\n\n### Working with the column menu classes\n\nWhen the column chooser menu opens, the column checkboxes will be checked or unchecked based on the visibility of each column based on the media queries so it accurately reflects what is being seen. These media queries to hide or show columns act as sensible defaults for what columns should be shown based on the developer's understanding of the column importance and data values. The chooser menu allows the user to have control of the table presentation so this takes precedence over the default display.\n\nIf an unchecked column checkbox is checked by the user, they now take control of the column. Until the page is refreshed, the visibility of that column will now always be visible, even if the screen is re-sized. Behind the scenes, a class of `ui-table-cell-visible` is added to all the cells in that column to ensure they override any visibility set via media queries.\n\nThe same idea applies when a column is unchecked: from then on, the column won't be seen at any width because the class of `ui-table-cell-hidden` is added to each of the cells in that column.\n\n### Styling the button and column chooser popup\n\nThe column chooser popup is opened via a button that is generated by the framework. The button's text is \"Columns...\" by default but can be set by adding the `data-column-btn-text` attribute to the table to the text string you want in the button. The button will inherit the theme from the content area, just like all buttons, but the theme can be set manually by adding the `data-column-btn-theme` attribute to any swatch letter in your theme.\n\nThis button is injected directly *before* the table element and has basic styles to align it to the right but you may want to further customize the appearance of this button. To style all these buttons across your site, key off the `ui-table-columntoggle-btn` structural class on this link.\n\nTo target styles against only a specific button, use the unique `href` value that is generated to target a specific column chooser button. For example, a table with an `ID` of `movie-table` will generate a popup with an `ID` of `movie-table-popup` so a CSS selector of `a[href=\"#movie-table-popup\"]` will target only the column popup button for this specific table.\n\nThe theme for the column chooser popup can be set by adding the `data-column-popup-theme` attribute to the table and specifying any swatch letter in your theme. For custom styles or scripting, all the column chooser popups can be targeted by using the `ui-table-columntoggle-popup` structural class added to these popups. To customize a single popup, use the generated `ID` based on the table `ID` that added to each specific popup (such as `#movie-table-popup`) to target a specific popup.\n\n### Working with grouped column headers\n\nIt's fairly common to need to logically group multiple columns together under a heading group for financial or scientific data. The framework can support the most simple version of this by allowing for two rows of table headers (`TH`), with the first row containing simple `colspan` attributes to group the columns below. In this configuration, the framework will parse the first row only for the priority and expose these heading groups as the options in the column chooser popup. In this configuration, the second heading will not be exposed as columns that can be hidden or shown independently of the groupings in the chooser.\n\n## Providing pre-rendered markup\n\nYou can improve the load time of your page by providing the markup that the table-columntoggle widget would normally create during its initialization.\n\nBy providing this markup yourself, and by indicating that you have done so by setting the attribute `data-enhanced=\"true\"`, you instruct the table-columntoggle widget to skip these DOM manipulations during instantiation and to assume that the required DOM structure is already present.\n\nWhen you provide such pre-rendered markup you must also set all the classes that the framework would normally set, and you must also set all data attributes whose values differ from the default to indicate that the pre-rendered markup reflects the non-default value of the corresponding widget option.\n\nThe columntoggle table places an anchor before the table that invokes a popup listing the columns available for showing/hiding. The ID of the popup and thus the href of the anchor should be the ID of the table suffixed by the string `-popup`. You may separately pre-enhance the popup widget, or you may allow autoinitialization to enhance it.\n\nThe popup widget must contain a single controlgroup widget which in turn contains all the checkboxes representing the columns of the table.\n\nIn the example below the parameter `data-column-btn-theme=\"b\"` is added to the table explicitly to indicate that the theme applied to the \"Columns...\" button is not the default (`null`).\n\n``` markup\n<div data-role=\"popup\" id=\"table-column-toggle-popup\" class=\"ui-table-columntoggle-popup\">\n  <fieldset data-role=\"controlgroup\">\n    <label>Rank<input type=\"checkbox\" checked data-cacheval=\"false\" locked=\"true\"></input></label>\n    <label>Year<input type=\"checkbox\" checked data-cacheval=\"false\" locked=\"true\"></input></label>\n    <label>Rotten Tomato Rating<input type=\"checkbox\" checked data-cacheval=\"false\" locked=\"true\"></input></label>\n    <label>Reviews<input type=\"checkbox\" checked data-cacheval=\"false\" locked=\"true\"></input></label>\n  </fieldset>\n</div>\n<a href=\"#table-column-toggle-popup\" class=\"ui-table-columntoggle-btn ui-btn ui-btn-b ui-corner-all ui-shadow ui-mini\" data-rel=\"popup\">Columns...</a>\n<table data-role=\"table\" id=\"table-column-toggle\" data-mode=\"columntoggle\" data-enhanced=\"true\" class=\"ui-table ui-table-columntoggle\" data-column-btn-theme=\"b\">\n  <thead>\n    <tr>\n      <th data-priority=\"2\" data-colstart=\"1\" class=\"ui-table-priority-2 ui-table-cell-visible\">Rank</th>\n      <th data-colstart=\"2\">Movie Title</th>\n      <th data-priority=\"3\" data-colstart=\"3\" class=\"ui-table-priority-3 ui-table-cell-visible\">Year</th>\n      <th data-priority=\"1\" data-colstart=\"4\" class=\"ui-table-priority-1 ui-table-cell-visible\"><abbr title=\"Rotten Tomato Rating\">Rating</abbr></th>\n      <th data-priority=\"5\" data-colstart=\"5\" class=\"ui-table-priority-5 ui-table-cell-visible\">Reviews</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th class=\"ui-table-priority-2 ui-table-cell-visible\">1</th>\n      <td><a href=\"http://en.wikipedia.org/wiki/Citizen_Kane\" data-rel=\"external\">Citizen Kane</a></td>\n      <td class=\"ui-table-priority-3 ui-table-cell-visible\">1941</td>\n      <td class=\"ui-table-priority-1 ui-table-cell-visible\">100%</td>\n      <td class=\"ui-table-priority-5 ui-table-cell-visible\">74</td>\n    </tr>\n    <tr>\n      <th class=\"ui-table-priority-2 ui-table-cell-visible\">2</th>\n      <td><a href=\"http://en.wikipedia.org/wiki/Casablanca_(film)\" data-rel=\"external\">Casablanca</a></td>\n      <td class=\"ui-table-priority-3 ui-table-cell-visible\">1942</td>\n      <td class=\"ui-table-priority-1 ui-table-cell-visible\">97%</td>\n      <td class=\"ui-table-priority-5 ui-table-cell-visible\">64</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n## Options\n\n### classes.columnBtn\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-table-columntoggle-btn\"`\n\nClass assigned to the column toggle button.\n\nNote: The reflow mode has one option, classes, which is only configurable via JavaScript because it expects an object literal value. The classes option has two properties that define the structural classnames that the plugin uses.\n\n### classes.columnToggleTable\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-table-columntoggle\"`\n\nClass assigned to the table.\n\nNote: The reflow mode has one option, classes, which is only configurable via JavaScript because it expects an object literal value. The classes option has two properties that define the structural classnames that the plugin uses.\n\n### classes.popup\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-table-columntoggle-popup\"`\n\nClass assigned to the column chooser popup.\n\nNote: The reflow mode has one option, classes, which is only configurable via JavaScript because it expects an object literal value. The classes option has two properties that define the structural classnames that the plugin uses.\n\n### classes.priorityPrefix\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-table-priority-\"`\n\nClass prefix added to each cell in a column. This string is appended to the priority value set on the headers.\n\nNote: The reflow mode has one option, classes, which is only configurable via JavaScript because it expects an object literal value. The classes option has two properties that define the structural classnames that the plugin uses.\n\n### columnBtnText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `default: \"Columns...\"`\n\nSets the theme for the column chooser button. Set to any valid swatch letter in your theme.\n\nThis option is also exposed as a data attribute:`data-column-btn-text=\"Show columns\"`.\n\n**Code examples:**\n\nInitialize the table-columntoggle with the `columnBtnText` option specified:\n\n``` javascript\n$( \".selector\" ).table-columntoggle({\n  columnBtnText: \"Show columns\"\n});\n```\n\nGet or set the `columnBtnText` option, after initialization:\n\n``` javascript\n// Getter\nvar columnBtnText = $( \".selector\" ).table-columntoggle( \"option\", \"columnBtnText\" );\n \n// Setter\n$( \".selector\" ).table-columntoggle( \"option\", \"columnBtnText\", \"Show columns\" );\n```\n\n### columnBtnTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nSets the theme for the column chooser button. Set to any valid swatch letter in your theme.\n\nThis option is also exposed as a data attribute:`data-column-btn-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the table-columntoggle with the `columnBtnTheme` option specified:\n\n``` javascript\n$( \".selector\" ).table-columntoggle({\n  columnBtnTheme: \"b\"\n});\n```\n\nGet or set the `columnBtnTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar columnBtnTheme = $( \".selector\" ).table-columntoggle( \"option\", \"columnBtnTheme\" );\n \n// Setter\n$( \".selector\" ).table-columntoggle( \"option\", \"columnBtnTheme\", \"b\" );\n```\n\n### columnPopupTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nSets the theme for the column chooser popup checkboxes. Set to any valid swatch letter in your theme.\n\nThis option is also exposed as a data attribute:`data-popup-theme=\"a\"`.\n\n**Code examples:**\n\nInitialize the table-columntoggle with the `columnPopupTheme` option specified:\n\n``` javascript\n$( \".selector\" ).table-columntoggle({\n  columnPopupTheme: \"a\"\n});\n```\n\nGet or set the `columnPopupTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar columnPopupTheme = $( \".selector\" ).table-columntoggle( \"option\", \"columnPopupTheme\" );\n \n// Setter\n$( \".selector\" ).table-columntoggle( \"option\", \"columnPopupTheme\", \"a\" );\n```\n\n### enhanced\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIndicates that the markup necessary for a table-columntoggle widget has been provided as part of the original markup.\n\nThis option is also exposed as a data attribute: `data-enhanced=\"true\"`.\n\n**Code examples:**\n\nInitialize the table-columntoggle with the `enhanced` option specified:\n\n``` javascript\n$( \".selector\" ).table-columntoggle({\n  enhanced: true\n});\n```\n\nGet or set the `enhanced` option, after initialization:\n\n``` javascript\n// Getter\nvar enhanced = $( \".selector\" ).table-columntoggle( \"option\", \"enhanced\" );\n \n// Setter\n$( \".selector\" ).table-columntoggle( \"option\", \"enhanced\", true );\n```\n\n## Methods\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nUpdates the labels in the cells.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).table-columntoggle( \"refresh\" );\n```\n\n## Events\n\n### create( event, ui )Type: `tablecreate`\n\nSince this plugin is written as an extension to the core table plugin, it binds to the tablecreate event but does not issue any additional events.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the table-columntoggle with the create callback specified:\n\n``` javascript\n$( \".selector\" ).table-columntoggle({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the tablecreate event:\n\n``` javascript\n$( \".selector\" ).on( \"tablecreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of a responsive table in column toggle mode.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>table-columntoggle demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <table data-role=\"table\" id=\"table-column-toggle\" data-mode=\"columntoggle\" class=\"ui-responsive table-stroke\">\n      <thead>\n        <tr>\n          <th data-priority=\"2\">Rank</th>\n          <th>Movie Title</th>\n          <th data-priority=\"3\">Year</th>\n          <th data-priority=\"1\"><abbr title=\"Rotten Tomato Rating\">Rating</abbr></th>\n          <th data-priority=\"5\">Reviews</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th>1</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/Citizen_Kane\" data-rel=\"external\">Citizen Kane</a></td>\n          <td>1941</td>\n          <td>100%</td>\n          <td>74</td>\n        </tr>\n        <tr>\n          <th>2</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/Casablanca_(film)\" data-rel=\"external\">Casablanca</a></td>\n          <td>1942</td>\n          <td>97%</td>\n          <td>64</td>\n        </tr>\n        <tr>\n          <th>3</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/The_Godfather\" data-rel=\"external\">The Godfather</a></td>\n          <td>1972</td>\n          <td>97%</td>\n          <td>87</td>\n        </tr>\n        <tr>\n          <th>4</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/Gone_with_the_Wind_(film)\" data-rel=\"external\">Gone with the Wind</a></td>\n          <td>1939</td>\n          <td>96%</td>\n          <td>87</td>\n        </tr>\n        <tr>\n          <th>5</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/Lawrence_of_Arabia_(film)\" data-rel=\"external\">Lawrence of Arabia</a></td>\n          <td>1962</td>\n          <td>94%</td>\n          <td>87</td>\n        </tr>\n        <tr>\n          <th>6</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/Dr._Strangelove\" data-rel=\"external\">Dr. Strangelove Or How I Learned to Stop Worrying and Love the Bomb</a></td>\n          <td>1964</td>\n          <td>92%</td>\n          <td>74</td>\n        </tr>\n        <tr>\n          <th>7</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/The_Graduate\" data-rel=\"external\">The Graduate</a></td>\n          <td>1967</td>\n          <td>91%</td>\n          <td>122</td>\n        </tr>\n        <tr>\n          <th>8</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/The_Wizard_of_Oz_(1939_film)\" data-rel=\"external\">The Wizard of Oz</a></td>\n          <td>1939</td>\n          <td>90%</td>\n          <td>72</td>\n        </tr>\n        <tr>\n          <th>9</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/Singin%27_in_the_Rain\" data-rel=\"external\">Singin' in the Rain</a></td>\n          <td>1952</td>\n          <td>89%</td>\n          <td>85</td>\n        </tr>\n        <tr>\n          <th>10</th>\n          <td class=\"title\"><a href=\"http://en.wikipedia.org/wiki/Inception\" data-rel=\"external\">Inception</a></td>\n          <td>2010</td>\n          <td>84%</td>\n          <td>78</td>\n        </tr>\n      </tbody>\n    </table>\n \n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/table-columntoggle](https://api.jquerymobile.com/table-columntoggle)"
- name: Configuring Defaults
  id: global-config
  summary: Unlike other jQuery projects, such as jQuery and jQuery UI, jQuery Mobile automatically applies many markup enhancements as soon as it loads (long before the document.ready event fires)
  description: "# Configuring Defaults\n\n## Working with jQuery Mobile's Auto-initialization\n\nUnlike other jQuery projects, such as jQuery and jQuery UI, jQuery Mobile automatically applies many markup enhancements as soon as it loads (long before the `document.ready` event fires). These enhancements are applied based on jQuery Mobile's default settings, which are designed to work with common scenarios. If changes to the settings are needed, they are easy to configure.\n\n### The mobileinit event\n\nWhen jQuery Mobile starts, it triggers a `mobileinit` event on the `document` object. To override default settings, bind to `mobileinit`.\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  //apply overrides here\n});\n```\n\nBecause the `mobileinit` event is triggered immediately, you'll need to bind your event handler before jQuery Mobile is loaded. Link to your JavaScript files in the following order:\n\n``` markup\n<script src=\"jquery.js\"></script>\n<script src=\"custom-scripting.js\"></script>\n<script src=\"jquery-mobile.js\"></script>\n```\n\nYou can override default settings by extending the `$.mobile` object using jQuery's `$.extend` method.\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.extend( $.mobile , {\n    foo: bar\n  });\n});\n```\n\nAlternatively, you can set them using object property notation.\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.foo = bar;\n});\n```\n\n## Configurable options\n\nThe following defaults are configurable via the `$.mobile` object:\n\n`activeBtnClass` *string*, default: \"ui-btn-active\"  \nThe CSS class used for \"active\" button state.\n\n**Deprecated** in 1.4 and will be removed in 1.5. The class \"ui-btn-active\" will continue to be applied to elements as before.\n\n  \n\n`activePageClass` *string*, default: \"ui-page-active\"  \nThe CSS class used for the page currently in view or in a transition.\n\n**Deprecated** in 1.4 and will be removed in 1.5. The class \"ui-page-active\" will continue to be applied to elements as before.\n\n  \n\n`ajaxEnabled` *boolean*, default: true  \njQuery Mobile will automatically handle link clicks and form submissions through Ajax, when possible. If false, URL hash listening will be disabled as well, and URLs will load as ordinary HTTP requests.\n\n  \n\n`allowCrossDomainPages` *boolean*, default: false  \nWhen jQuery Mobile attempts to load an external page, the request runs through `$.mobile.loadPage()`. This will only allow cross-domain requests if `$.mobile.allowCrossDomainPages` is set to true. Because the jQuery Mobile framework tracks what page is being viewed within the browser's location hash, it is possible for a cross-site scripting (XSS) attack to occur if the XSS code in question can manipulate the hash and set it to a cross-domain URL of its choice. This is the main reason that the default setting for $.mobile.allowCrossDomainPages is set to false. In PhoneGap apps that must \"phone home\" by loading assets off a remote server, both the `$.support.cors` AND `$.mobile.allowCrossDomainPages` must be set to true.\n\n  \n\n`autoInitializePage` *boolean*, default: true  \nWhen the DOM is ready, the framework should automatically call `$.mobile.initializePage`. If false, the page will not initialize and will be visually hidden until `$.mobile.initializePage` is manually called.\n\n  \n\n`buttonMarkup.hoverDelay` *integer*, default: 200  \nSet the delay for touch devices to add the hover and down classes on touch interactions for buttons throughout the framework. Reducing the delay here results in a more responsive feeling ui, but will often result in the downstate being applied during page scrolling.\n\n**Deprecated** in 1.4 - use `$.mobile.hoverDelay` instead.\n\n  \n\n`defaultDialogTransition` *string*, default: 'pop'  \nSet the default transition for dialog changes that use Ajax. Set to 'none' for no transitions.\n\n**Deprecated** in 1.4.\n\nWhen using pages styled as dialogs (`data-role=\"page\" data-dialog=\"true\"`), if you wish for them to have a different transition than regular pages, you must specify the transition on the link that opens them by adding the attribute `data-transition=\"pop\"` to the link. \"pop\" is just an example. You may specify any transition you wish, such as \"slide\", \"flip\", or \"none\".\n\nSimilarly, when calling the [pagecontainer](pagecontainer)'s `change()` method, you must also specify the transition explicitly, if you wish it to be different from the `$.mobile.defaultPageTransition`:\n\n``` javascript\n$( \":mobile-pagecontainer\" )\n  .pagecontainer( \"change\", \"dialog.html\", { transition: \"pop\" } );\n```\n\n$.mobile.defaultDialogTransition is deprecated.  \n\n`defaultPageTransition` *string*, default: 'fade'  \nSet the default transition for page changes that use Ajax. Note: default changed from 'slide' to 'fade' in 1.1. Set to 'none' for no transitions.\n\n  \n\n`degradeInputs` *object*\n\n`\"color\"`, default: `false`  \nThe input type to which to convert `input` elements of type `\"color\"`.\n\n`\"date\"`, default: `false`  \nThe input type to which to convert `input` elements of type `\"date\"`.\n\n`\"datetime\"`, default: `false`  \nThe input type to which to convert `input` elements of type `\"datetime\"`.\n\n`\"datetime-local\"`, default: `false`  \nThe input type to which to convert `input` elements of type `\"datetime-local\"`.\n\n`\"email\"`, default: `false`  \nThe input type to which to convert `input` elements of type `\"email\"`.\n\n`\"month\"`, default: `false`  \nThe input type to which to convert `input` elements of type `\"month\"`.\n\n`\"number\"`, default: `false`  \nThe input type to which to convert `input` elements of type `\"number\"`.\n\n`\"range\"`, default: `\"number\"`  \nThe input type to which to convert `input` elements of type `\"range\"`.\n\n`\"search\"`, default: `\"text\"`  \nThe input type to which to convert `input` elements of type `\"search\"`.\n\n`\"tel\"`, default: `false`  \nThe input type to which to convert `input` elements of type `\"tel\"`.\n\n`\"time\"`, default: `false`  \nThe input type to which to convert `input` elements of type `\"time\"`.\n\n`\"url\"`, default: `false`  \nThe input type to which to convert `input` elements of type `\"url\"`.\n\n`\"week\"`, default: `false`  \nThe input type to which to convert `input` elements of type `\"week\"`.\n\n  \n\n`dynamicBaseEnabled` *boolean*, default: true  \nWhen this property is set to `false` the base tag value in browsers that support a dynamic base tag and URL prefixes in browsers that don't *won't* be updated to reflect where the page was loaded from. This means that resource references that are relative to the page on which they are defined may break. This option is available for web frameworks that operate under a universal base tag value where all links and assets are relative to a single base.\n\n  \n\n`focusClass` *string*, default: \"ui-focus\"  \nThe CSS class used for \"active\" button state.\n\n**Deprecated** in 1.4 and will be removed in 1.5. The class \"ui-focus\" will continue to be applied to elements as before.\n\n  \n\n`getMaxScrollForTransition` *function*  \nSet a scroll position breakpoint for transitions. If the scroll position is greater than the value returned by this function, transition \"none\" will be used. The default function returns three times the height of the window.\n\n  \n\n`gradeA` *function that returns a boolean*, default: a function returning the value of $.support.mediaquery  \nAny support conditions that must be met in order to proceed.\n\n  \n\n`hashListeningEnabled` *boolean*, default: true  \njQuery Mobile will automatically listen and handle changes to the location.hash. Disabling this will prevent jQuery Mobile from handling hash changes, which allows you to handle them yourself or use simple deep-links within a document that scroll to a particular id.\n\n  \n\n`ignoreContentEnabled` *boolean*, default: false  \n*Warning:* Setting this property to true will cause performance degradation on enhancement. Once set, all automatic enhancements made by the framework to each enhanceable element of the user's markup will first check for a `data-enhance=false` parent node. If one is found the markup will be ignored. This setting and the accompanying data attribute provide a mechanism through which users can prevent enhancement over large sections of markup.\n\n  \n\n`keepNative` *Selector*, default: \":jqmData(role='none'), :jqmData(role='nojs')\"  \nElements matching the selector specified in this option will never be enhanced. This is different from [ignoreContentEnabled](#ignoreContentEnabled) because it does not affect the children of elements that match this selector.\n\n  \n\n`linkBindingEnabled` *boolean*, default: true  \njQuery Mobile will automatically bind the clicks on anchor tags in your document. Setting this option to false will prevent all anchor click handling *including* the addition of active button state and alternate link bluring. This should only be used when attempting to delegate the click management to another library or custom code.\n\n  \n\n`maxTransitionWidth` *integer, boolean*, default: false  \nSet a max width for transitions. The option accepts any number representing a pixel width and its default value `false`. If a number value is set, transition \"none\" will be used if the window is wider than the specified value.\n\n  \n\n`minScrollBack` *integer*, default: 0  \nMinimum scroll distance that will be remembered when returning to a page.\n\n**Deprecated** in 1.4 and will be removed in 1.5. Any and all scrolling will be remembered. This matches native behavior. The old default value of 250 has changed to 0 during the deprecation period.\n\n  \n\n`ns` *string*, default: \"\"  \nThe namespace used in data attributes (e.g., data-role). Can be set to any string, including a blank string which is the default. When using, it's clearest if you include a trailing dash, such as \"mynamespace-\" which maps to `data-mynamespace-foo=\"...\"`.\n\nIf you use data- namespacing, you will need to update/override one selector in the theme CSS. The following data selectors should incorporate the namespace you're using:\n\n``` javascript\n.ui-mobile [data-mynamespace-role=page], .ui-mobile [data-mynamespace-role=dialog], .ui-page { ...\n```\n\n  \n\n`pageLoadErrorMessage` *string*, default: \"Error Loading Page\"  \nSet the text that appears when a page fails to load through Ajax.\n\n  \n\n`pageLoadErrorMessageTheme` *string*, default: \"e\"  \nSet the theme that the error message box uses.\n\n  \n\n`phonegapNavigationEnabled` *boolean*, default: false  \nReplace calls to `window.history.back` with PhoneGap's navigation helper where it is available. This addresses navigation issues on page refresh in Android PhoneGap applications using jQuery Mobile.\n\n  \n\n`pushStateEnabled` *boolean*, default: true  \nEnhancement to use `history.replaceState` in supported browsers, to convert the hash-based Ajax URL into the full document path. Note that we recommend disabling this feature if Ajax is disabled or if external links are used extensively.\n\n  \n\n`subPageUrlKey` *string*, default: \"ui-page\"  \nThe url parameter used for referencing widget-generated sub-pages (such as those generated by nested listviews). Translates to *example.html**&ui-page=**subpageIdentifier*. The hash segment before &ui-page= is used by the framework for making an Ajax request to the URL where the sub-page exists.\n\n**Deprecated** in 1.4 and will be removed in 1.5.\n\n  \n\n`transitionFallbacks.[transition]` *string*, default: \"fade\"  \nSet the fallback transition for browsers that don't support 3D transforms for a specific transition type.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/global-config](https://api.jquerymobile.com/global-config)"
- name: Controlgroup
  id: controlgroup
  summary: 'Description: Groups buttons together'
  description: "# Controlgroup Widget\n\n## Controlgroup Widgetversion added: 1.3\n\n**Description:** Groups buttons together.\n\n## QuickNav\n\n### Options\n\n[direction](#option-direction)\n\n[mini](#option-mini)\n\n[shadow](#option-shadow)\n\n[type](#option-type)\n\n### Methods\n\n[container](#method-container)\n\n### Events\n\nThe jQuery UI controlgroup widget is bundled in jQuery Mobile with some changes. Thus, its [API documentation](https://api.jqueryui.com/controlgroup/) fully describes its functionality.\n\n## Options\n\n### direction\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `vertical`\n\nBy default, controlgroup displays its controls in a vertical layout. Use this option to use a horizontal layout instead.\n\nThis option is also exposed as a data-attribute `data-direction=\"horizontal\"`.\n\n**Code examples:**\n\nInitialize the controlgroup with the `direction` option specified:\n\n``` javascript\n$( \".selector\" ).controlgroup({\n  direction: \"horizontal\"\n});\n```\n\nGet or set the `direction` option, after initialization:\n\n``` javascript\n// Getter\nvar direction = $( \".selector\" ).controlgroup( \"option\", \"direction\" );\n \n// Setter\n$( \".selector\" ).controlgroup( \"option\", \"direction\", \"horizontal\" );\n```\n\n### mini\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `null (false)`\n\nIf set to `true`, this will display a more compact version of the controlgroup that uses less vertical height by applying the `ui-mini` class to the outermost element of the controlgroup widget.\n\n**Note:** `mini` option is deprecated in 1.5 and will be removed in 1.6\n\nThis option is also exposed as a data attribute: `data-mini=\"true\"`.\n\n### shadow\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSets whether a drop shadow is drawn around the controlgroup.\n\n**Note:** `controlgroup` option is deprecated in 1.5 and will be removed in 1.6\n\nThis option is also exposed as a data attribute: `data-shadow=\"false\"`.\n\n**Code examples:**\n\nInitialize the controlgroup with the `shadow` option specified:\n\n``` javascript\n$( \".selector\" ).controlgroup({\n  shadow: true\n});\n```\n\nGet or set the `shadow` option, after initialization:\n\n``` javascript\n// Getter\nvar shadow = $( \".selector\" ).controlgroup( \"option\", \"shadow\" );\n \n// Setter\n$( \".selector\" ).controlgroup( \"option\", \"shadow\", true );\n```\n\n### type\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `vertical`\n\nSets whether children should be stacked on top of each other or next to each other. If set to \"horizontal\", the children of the controlgroup will be stacked next to each other.\n\n**Note:** `controlgroup` option is deprecated in 1.5 and will be removed in 1.6\n\nThis option is also exposed as a data attribute: `data-type=\"horizontal\"`.\n\n**Code examples:**\n\nInitialize the controlgroup with the `type` option specified:\n\n``` javascript\n$( \".selector\" ).controlgroup({\n  type: \"horizontal\"\n});\n```\n\nGet or set the `type` option, after initialization:\n\n``` javascript\n// Getter\nvar type = $( \".selector\" ).controlgroup( \"option\", \"type\" );\n \n// Setter\n$( \".selector\" ).controlgroup( \"option\", \"type\", \"horizontal\" );\n```\n\n## Methods\n\n### container()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nObtain the container element within which the controlgroup's child elements are to be placed.\n\n**Note:** `controlgroup` method is deprecated in 1.5 and will be removed in 1.6\n\n``` javascript\n$( \".selector\" ).controlgroup( \"container\" );\n```\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the container method:\n\n``` javascript\n$( \".selector\" ).controlgroup( \"container\" );\n```\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/controlgroup](https://api.jquerymobile.com/controlgroup)"
- name: Data Attributes
  id: data-attribute
  summary: The jQuery Mobile framework uses HTML5 data- attributes to allow for markup-based initialization and configuration of widgets
  description: "# Data Attributes\n\n## Data attribute reference\n\nThe jQuery Mobile framework uses HTML5 `data-` attributes to allow for markup-based initialization and configuration of widgets. These attributes are completely optional; calling plugins manually and passing options directly is also supported. To avoid naming conflicts with other plugins or frameworks that also use `data-` attributes, set a custom namespace by modifying the [`ns` global option](global-config).\n\n## [Button](button)\n\nLinks with `data-role=\"button\"`. Input-based buttons, links in toolbars and button elements are auto-enhanced, no `data-role` required.\n\n|                 |                                                                                                                                                                                                                             |\n|-----------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| data-corners    | **true** \\| false                                                                                                                                                                                                           |\n| data-icon       | home \\| delete \\| plus \\| arrow-u \\| arrow-d \\| carat-l \\| carat-t \\| carat-r \\| carat-b \\| check \\| gear \\| grid \\| star \\| custom \\| arrow-r \\| arrow-l \\| minus \\| refresh \\| forward \\| back \\| alert \\| info \\| search |\n| data-iconpos    | **left** \\| right \\| top \\| bottom \\| notext                                                                                                                                                                                |\n| data-iconshadow | true \\| **false** Deprecated as of 1.4.0 and will be removed in 1.5.0.                                                                                                                                                      |\n| data-inline     | true \\| **false**                                                                                                                                                                                                           |\n| data-mini       | true \\| **false** - Compact sized version                                                                                                                                                                                   |\n| data-shadow     | **true** \\| false                                                                                                                                                                                                           |\n| data-theme      | swatch letter (a-z)                                                                                                                                                                                                         |\n\n## [Checkbox](checkboxradio)\n\nPairs of labels and inputs with `type=\"checkbox\"` are auto-enhanced, no `data-role` required\n\n|            |                                                        |\n|------------|--------------------------------------------------------|\n| data-mini  | true \\| **false** - Compact sized version              |\n| data-role  | none - Prevents auto-enhancement to use native control |\n| data-theme | swatch letter (a-z) - Added to the form element        |\n\n## [Collapsible](collapsible)\n\nA heading and content wrapped in a container with the `data-role=\"collapsible\"`\n\n|                        |                                                                                                                                                                                                                                          |\n|------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| data-collapsed         | **true** \\| false                                                                                                                                                                                                                        |\n| data-collapse-cue-text | string - Text used to provide audible feedback for users with screen reader software. Default: \" click to collapse contents\"                                                                                                             |\n| data-collapsed-icon    | home \\| delete \\| **plus** \\| arrow-u \\| arrow-d \\| carat-l \\| carat-t \\| carat-r \\| carat-b \\| check \\| gear \\| grid \\| star \\| custom \\| arrow-r \\| arrow-l \\| minus \\| refresh \\| forward \\| back \\| alert \\| info \\| search \\| false |\n| data-content-theme     | swatch letter (a-z)                                                                                                                                                                                                                      |\n| data-expand-cue-text   | string - Text used to provide audible feedback for users with screen reader software. Default: \" click to expand contents\"                                                                                                               |\n| data-expanded-icon     | home \\| delete \\| plus \\| arrow-u \\| arrow-d \\| carat-l \\| carat-t \\| carat-r \\| carat-b\\| check \\| gear \\| grid \\| star \\| custom \\| arrow-r \\| arrow-l \\| **minus** \\| refresh \\| forward \\| back \\| alert \\| info \\| search           |\n| data-iconpos           | **left** \\| right \\| top \\| bottom                                                                                                                                                                                                       |\n| data-inset             | **true** \\| false                                                                                                                                                                                                                        |\n| data-mini              | true \\| **false** - Compact sized version                                                                                                                                                                                                |\n| data-theme             | swatch letter (a-z)                                                                                                                                                                                                                      |\n\n## [Collapsible set](collapsibleset)\n\nA number of collapsibles wrapped in a container with the `data-role=\"collapsibleset\"`\n\n|                     |                                                                                                                                                                                                                                |\n|---------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| data-collapsed-icon | home \\| delete \\| **plus** \\| arrow-u \\| arrow-d \\| carat-l \\| carat-t \\| carat-r \\| carat-b\\| check \\| gear \\| grid \\| star \\| custom \\| arrow-r \\| arrow-l \\| minus \\| refresh \\| forward \\| back \\| alert \\| info \\| search |\n| data-content-theme  | swatch letter (a-z) - Sets all collapsibles in set                                                                                                                                                                             |\n| data-expanded-icon  | home \\| delete \\| plus \\| arrow-u \\| arrow-d \\| carat-l \\| carat-t \\| carat-r \\| carat-b\\| check \\| gear \\| grid \\| star \\| custom \\| arrow-r \\| arrow-l \\| **minus** \\| refresh \\| forward \\| back \\| alert \\| info \\| search |\n| data-iconpos        | **left** \\| right \\| top \\| bottom \\| notext                                                                                                                                                                                   |\n| data-inset          | **true** \\| false                                                                                                                                                                                                              |\n| data-mini           | true \\| **false** - Compact sized version                                                                                                                                                                                      |\n| data-theme          | swatch letter (a-z) - Sets all collapsibles in set                                                                                                                                                                             |\n\n## Content\n\n**Note:** Deprecated as of 1.4.0 and will be removed in 1.5.0.\n\nContainer with `data-role=\"content\"`\n\n|            |                     |\n|------------|---------------------|\n| data-theme | swatch letter (a-z) |\n\n## [Controlgroup](controlgroup)\n\nDIV or FIELDSET container with `data-role=\"controlgroup\"`. Visually integrate multiple button-styled elements.\n\n|                        |                                                                                                     |\n|------------------------|-----------------------------------------------------------------------------------------------------|\n| data-exclude-invisible | **true** \\| false - Sets whether to exclude invisible children in the assignment of rounded corners |\n| data-mini              | true \\| **false** - Compact sized version for all items in the controlgroup                         |\n| data-theme             | swatch letter (a-z)                                                                                 |\n| data-type              | horizontal \\| **vertical** - For horizontal or vertical item alignment                              |\n\n## [Dialog](dialog)\n\nContainer with `data-role=\"dialog\"` or linked to with `data-rel=\"dialog\"` on the anchor.\n\n|                     |                                                                         |\n|---------------------|-------------------------------------------------------------------------|\n| data-close-btn      | **left** \\| right \\| none                                               |\n| data-close-btn-text | string - Text for the close button, dialog only. Default: **\"close\"**   |\n| data-corners        | **true** \\| false                                                       |\n| data-dom-cache      | true \\| **false**                                                       |\n| data-overlay-theme  | swatch letter (a-z) - Overlay theme when the page is opened in a dialog |\n| data-theme          | swatch letter (a-z)                                                     |\n| data-title          | string - Title used when page is shown                                  |\n\n## [Enhancement](global-config)\n\nContainer with `data-enhance=\"false\"` or `data-ajax=\"false\"`\n\n|              |                   |\n|--------------|-------------------|\n| data-enhance | **true** \\| false |\n| data-ajax    | **true** \\| false |\n\nAny DOM elements inside a `data-enhance=\"false\"` container, save for `data-role=\"page|dialog\"` elements, will be ignored during initial enhancement and subsequent `create` events provided that the `$.mobile.ignoreContentEnabled` flag is set prior to the enhancement (eg in a `mobileinit` binding).\n\nAny link or form element inside `data-ajax=\"false\"` containers will be ignored by the framework's navigation functionality when `$.mobile.ignoreContentEnabled` is set to true.\n\n## Field container\n\nContainer with `data-role=\"fieldcontain\"` wrapped around label/form element pair\n\n**Note:** `data-role=\"fieldcontain\"` is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Add class `ui-field-contain` instead.\n\n## [Flip toggle switch](flipswitch)\n\nSelect with `data-role=\"slider\"` and two `option` element\n\n|                  |                                                        |\n|------------------|--------------------------------------------------------|\n| data-mini        | true \\| **false** - Compact sized version              |\n| data-role        | none - Prevents auto-enhancement to use native control |\n| data-theme       | swatch letter (a-z) - Added to the form element        |\n| data-track-theme | swatch letter (a-z) - Added to the form element        |\n\n## Link\n\nLinks, including those with a `data-role=\"button\"`, and form submit buttons share these attributes\n\n|                  |                                                                                                                                                                                                                                                     |\n|------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| data-ajax        | **true** \\| false                                                                                                                                                                                                                                   |\n| data-direction   | reverse - Reverse transition animation (only for page or dialog)                                                                                                                                                                                    |\n| data-dom-cache   | true \\| **false**                                                                                                                                                                                                                                   |\n| data-prefetch    | true \\| **false**                                                                                                                                                                                                                                   |\n| data-rel         | back - To move one step back in history dialog - To open link styled as dialog, not tracked in history external - For linking to another domain popup - For opening a popup                                                                         |\n| data-transition  | **fade** \\| flip \\| flow \\| pop \\| slide \\| slidedown \\| slidefade \\| slideup \\| turn \\| none                                                                                                                                                       |\n| data-position-to | **origin** - Centers the popup over the link that opens it jQuery selector - Centers the popup over the specified element window - Centers the popup in the window *Note:* option only available when used with popups. See also: [options](popup). |\n\n## [Listview](listview)\n\n`OL` or `UL` with `data-role=\"listview\"`\n\n|                         |                                                                                                                                                                                                                                     |\n|-------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| data-autodividers       | true \\| **false**                                                                                                                                                                                                                   |\n| data-count-theme        | swatch letter (a-z) - Default \"null\", inherited from parent Deprecated as of 1.4.0 and will be removed in 1.5.0.                                                                                                                    |\n| data-divider-theme      | swatch letter (a-z) - Default \"null\", inherited from parent                                                                                                                                                                         |\n| data-filter             | true \\| **false**                                                                                                                                                                                                                   |\n| data-filter-placeholder | string                                                                                                                                                                                                                              |\n| data-filter-theme       | swatch letter (a-z)                                                                                                                                                                                                                 |\n| data-header-theme       | swatch letter (a-z)                                                                                                                                                                                                                 |\n| data-icon               | home \\| delete \\| plus \\| arrow-u \\| arrow-d \\| carat-l \\| carat-t \\| carat-r \\| carat-b\\| check \\| gear \\| grid \\| star \\| custom \\| arrow-r \\| arrow-l \\| minus \\| refresh \\| forward \\| back \\| alert \\| info \\| search \\| false |\n| data-inset              | true \\| **false**                                                                                                                                                                                                                   |\n| data-split-icon         | home \\| delete \\| plus \\| arrow-u \\| arrow-d \\| carat-l \\| carat-t \\| carat-r \\| carat-b\\| check \\| gear \\| grid \\| star \\| custom \\| **arrow-r** \\| arrow-l \\| minus \\| refresh \\| forward \\| back \\| alert \\| info \\| search      |\n| data-split-theme        | swatch letter (a-z) - Default \"null\", inherited from parent                                                                                                                                                                         |\n| data-theme              | swatch letter (a-z)                                                                                                                                                                                                                 |\n\n## [Listview item](listview)\n\n`LI` within a listview\n\n|                 |                                                                                                                                                                                                                                     |\n|-----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| data-filtertext | string - Filter by this value instead of inner text                                                                                                                                                                                 |\n| data-icon       | home \\| delete \\| plus \\| arrow-u \\| arrow-d \\| carat-l \\| carat-t \\| carat-r \\| carat-b\\| check \\| gear \\| grid \\| star \\| custom \\| arrow-r \\| arrow-l \\| minus \\| refresh \\| forward \\| back \\| alert \\| info \\| search \\| false |\n| data-role       | list-divider                                                                                                                                                                                                                        |\n| data-theme      | swatch letter (a-z)                                                                                                                                                                                                                 |\n\nThe `data-icon` attribute is only applicable for a listview item if it contains a link.\n\n## [Navbar](navbar)\n\nA number of `LI`s wrapped in a container with `data-role=\"navbar\"`\n\n|              |                                              |\n|--------------|----------------------------------------------|\n| data-iconpos | left \\| right \\| **top** \\| bottom \\| notext |\n\nTo add icons to the navbar items, the `data-icon` attribute is used, specifying a standard mobile icon for each item.\n\nNavbars inherit the theme-swatch from their parent container. Setting the `data-theme` attribute to a navbar is not supported. The `data-theme` attribute can be set individually to the links inside a navbar.\n\n## [Page](page)\n\nContainer with `data-role=\"page\"`\n\n|                    |                                                                                                                                                                                                                                                                                                                                                                       |\n|--------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| data-dom-cache     | true \\| **false**                                                                                                                                                                                                                                                                                                                                                     |\n| data-overlay-theme | swatch letter (a-z) - Overlay theme when the page is opened as a dialog                                                                                                                                                                                                                                                                                               |\n| data-theme         | swatch letter (a-z) - Default \"a\"                                                                                                                                                                                                                                                                                                                                     |\n| data-title         | string - Title used when page is shown                                                                                                                                                                                                                                                                                                                                |\n| data-url           | url - Value for updating the URL, instead of the url used to request the page. The value of this attribute should not be URI-encoded. If your path or filename contains apostrophes or quotation marks, use entity encoding in the value, rather than URL encoding. For example, `data-url=\"/path/to/`**`&quot;`**`Devil`**`&apos;`**`s Advocate`**`&quot;`**`.html\"` |\n\n## [Popup](popup)\n\nContainer with `data-role=\"popup\"`\n\n|                    |                                                                                                                                                                                                                                                                                                                                                                               |\n|--------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| data-corners       | **true** \\| false                                                                                                                                                                                                                                                                                                                                                             |\n| data-dismissible   | **true** \\| false - If set to false prevents popup closing by clicking outside of the popup or pressing the Escape key                                                                                                                                                                                                                                                        |\n| data-history       | **true** \\| false - Sets whether the popup creates a browser history item when it opens. If set to false, it will not create a history item, and will thus not be closeable via the browser's \"Back\" button.                                                                                                                                                                  |\n| data-overlay-theme | swatch letter (a-z) - Default \"null\" (transparent background)                                                                                                                                                                                                                                                                                                                 |\n| data-position-to   | **origin** \\| window \\| selector - \"origin\" indicates that the popup is to be centered over the link that opens it. \"window\" indicates that it is to be centered in the browser window. If you give a jQuery selector, it will be centered over the first element returned by the selector, if that element is visible. Otherwise, it will be centered in the browser window. |\n| data-shadow        | **true** \\| false                                                                                                                                                                                                                                                                                                                                                             |\n| data-theme         | swatch letter (a-z) \\| none - Default inherited, \"none\" sets the popup to transparent                                                                                                                                                                                                                                                                                         |\n| data-tolerance     | **30,15,30,15** - Distance from the edges of the window (top, right, bottom, left)                                                                                                                                                                                                                                                                                            |\n| data-transition    | **none** \\| transition - The transition to use when making the popup appear/disappear.                                                                                                                                                                                                                                                                                        |\n\nAnchor with a `data-rel=\"popup\"` opens the popup\n\n|                  |                                                                                                                                                                    |\n|------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| data-position-to | **origin** - Centers the popup over the link that opens it jQuery selector - Centers the popup over the specified element window - Centers the popup in the window |\n| data-rel         | popup - For opening a popup                                                                                                                                        |\n| data-transition  | fade \\| flip \\| flow \\| pop \\| slide \\| slidedown \\| slidefade \\| slideup \\| turn \\| **none** - The transition to be used when showing/hiding the popup            |\n\n## [Radio button](checkboxradio)\n\nPairs of labels and inputs with `type=\"radio\"` are auto-enhanced, no `data-role` required\n\n|            |                                                        |\n|------------|--------------------------------------------------------|\n| data-mini  | true \\| **false** - Compact sized version              |\n| data-role  | none - Prevents auto-enhancement to use native control |\n| data-theme | swatch letter (a-z) - Added to the form element        |\n\n## [Selectmenu](selectmenu)\n\nAll `select` form elements are auto-enhanced, no `data-role` required\n\n|                    |                                                                                                                                                                                                                                          |\n|--------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| data-divider-theme | swatch letter (a-z) - Default \"b\" - Only applicable if `optgroup` support is used in non-native selects                                                                                                                                  |\n| data-icon          | home \\| delete \\| plus \\| arrow-u \\| **arrow-d** \\| carat-l \\| carat-t \\| carat-r \\| carat-b \\| check \\| gear \\| grid \\| star \\| custom \\| arrow-r \\| arrow-l \\| minus \\| refresh \\| forward \\| back \\| alert \\| info \\| search \\| false |\n| data-iconpos       | left \\| **right** \\| top \\| bottom \\| notext                                                                                                                                                                                             |\n| data-inline        | true \\| **false**                                                                                                                                                                                                                        |\n| data-mini          | true \\| **false** - Compact sized version                                                                                                                                                                                                |\n| data-native-menu   | **true** \\| false                                                                                                                                                                                                                        |\n| data-overlay-theme | swatch letter (a-z) - Overlay theme for non-native selects                                                                                                                                                                               |\n| data-placeholder   | true \\| **false** - Can be set on `option` element of a non-native select                                                                                                                                                                |\n| data-role          | none - Prevents auto-enhancement to use native control                                                                                                                                                                                   |\n| data-theme         | swatch letter (a-z) - Added to the form element                                                                                                                                                                                          |\n\n## [Slider](slider)\n\nInputs with `type=\"range\"` are auto-enhanced, no `data-role` required\n\n|                  |                                                                  |\n|------------------|------------------------------------------------------------------|\n| data-highlight   | true \\| **false** - Adds an active state fill on track to handle |\n| data-mini        | true \\| **false** - Compact sized version                        |\n| data-role        | none - Prevents auto-enhancement to use native control           |\n| data-theme       | swatch letter (a-z) - Added to the form element                  |\n| data-track-theme | swatch letter (a-z) - Added to the form element                  |\n\n## [Textinput](textinput)\n\nInput `type=\"text|number|search|etc.\"` or `textarea` elements are auto-enhanced, no `data-role` required\n\n|                     |                                                               |\n|---------------------|---------------------------------------------------------------|\n| data-clear-btn      | true \\| **false** - Adds a clear button                       |\n| data-clear-btn-text | string - Text for the close button. Default: **\"clear text\"** |\n| data-mini           | true \\| **false** - Compact sized version                     |\n| data-role           | none - Prevents auto-enhancement to use native control        |\n| data-theme          | swatch letter (a-z) - Added to the form element               |\n\n## [Toolbar](toolbar)\n\nContainer with `data-role=\"header\"` or `data-role=\"footer\"`\n\n|                     |                                                       |\n|---------------------|-------------------------------------------------------|\n| data-add-back-btn   | true \\| **false** - Auto add back button, header only |\n| data-back-btn-text  | string - Header only                                  |\n| data-back-btn-theme | swatch letter (a-z) - Header only                     |\n| data-id             | string - Unique ID. Required for persistent footers   |\n| data-position       | fixed                                                 |\n| data-theme          | swatch letter (a-z)                                   |\n\n## [Fixed toolbar](toolbar)\n\nContainer with `data-role=\"header\"` or `data-role=\"footer\"` plus the attribute `data-position=\"fixed\"`\n\n|                           |                                                                                                                                                                                   |\n|---------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| data-disable-page-zoom    | **true** \\| false - User-scaling-ability for pages with fixed toolbars                                                                                                            |\n| data-fullscreen           | true \\| **false** - Setting toolbars *over* the page-content                                                                                                                      |\n| data-tap-toggle           | **true** \\| false - Ability to toggle toolbar-visibility on user tap/click                                                                                                        |\n| data-transition           | **slide** \\| fade \\| none - Transition used when showing/hiding the toolbar                                                                                                       |\n| data-update-page-padding  | **true** \\| false - Have the page top and bottom padding updated on resize, transition, \"updatelayout\" events (the framework always updates the padding on the \"pageshow\" event). |\n| data-visible-on-page-show | **true** \\| false - Toolbar-visibility when parent page is shown                                                                                                                  |\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/data-attribute](https://api.jquerymobile.com/data-attribute)"
- name: Dialog
  id: dialog
  summary: 'Description: Opens content in an interactive overlay'
  description: "# Dialog Widget\n\n## Dialog Widgetversion added: 1.0, deprecated: 1.4.0\n\n**Description:** Opens content in an interactive overlay.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[closeBtn](#option-closeBtn)\n\n[closeBtnText](#option-closeBtnText)\n\n[corners](#option-corners)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[initSelector](#option-initSelector)\n\n[overlayTheme](#option-overlayTheme)\n\n### Methods\n\n[close](#method-close)\n\n### Events\n\n[create](#event-create)\n\n**Note:** Dialogs are deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. The `dialog` option provided by the `page.dialog` extension of the [page](page) widget allows you to style a page as a dialog, however, the special navigational handling will be removed. You may also consider implementing dialogs using [popup](popup) widgets.\n\nAny page can be presented as a modal dialog by adding the `data-rel=\"dialog\"` attribute to the page anchor link. When the \"dialog\" attribute is applied, the framework adds styles to add rounded corners, margins around the page and a dark background to make the \"dialog\" appear to be suspended above the page.\n\n``` markup\n<a href=\"foo.html\" data-rel=\"dialog\">Open dialog</a>\n```\n\nYou can open a dialog programmatically by calling the [**$.mobile.changePage**](jquery.mobile.changepage) method:\n\n``` javascript\n// Dialog loaded via Ajax\n$.mobile.changePage( \"path/to/dialog.html\", { role: \"dialog\" } );\n \n// Dialog present in a multipage document\n$.mobile.changePage( \"#myDialog\", { role: \"dialog\" } );\n```\n\n### Transitions\n\nBy default, the dialog will open with a 'pop' transition. Like all pages, you can specify any page transition you want on the dialog by adding the `data-transition` attribute to the link. To make it feel more dialog-like, we recommend specifying a transition of \"pop\", \"slidedown\" or \"flip\".  \nPossible values include: fade, **pop**, **flip**, turn, flow, slidefade, slide, slideup, slidedown, none.\n\n``` markup\n<a href=\"foo.html\" data-rel=\"dialog\" data-transition=\"pop\">Open dialog</a>\n```\n\n### Closing dialogs\n\nWhen any link is clicked within a dialog, the framework will automatically close the dialog and transition to the requested page, just as if the dialog were a normal page. Nevertheless, dialogs can also be chained, as explained below under **\"Chaining Dialogs\"**. Similarly, a link that opens a popup will also leave the dialog in place.\n\nIf the dialog has a header the framework will add a close button at the left side of the header. You can change the position by adding `data-close-btn=\"right\"` to the dialog container. If you don't want a close button in the header or add a custom close button, you can use `data-close-btn=\"none\"`.\n\nTo create a \"cancel\" button in a dialog, just link to the page that triggered the dialog to open and add the `data-rel=\"back\"` attribute to your link. This pattern of linking to the previous page is also usable in non-JS devices as well.\n\nFor JavaScript-generated links, you can simply set the href attribute to \"#\" and use the `data-rel=\"back\"` attribute. You can also call the dialog's `close()` method to programmatically close dialogs, for example: `$( \".ui-dialog\" ).dialog( \"close\" ). `\n\n### Setting the close button text\n\nJust like the page plugin, you can set a dialog's close button text through an option or data attribute. The option can be configured for all dialogs by binding to the `mobileinit` event and setting the `$.mobile.dialog.prototype.options.closeBtnText` property to a string of your choosing, or you can place the data attribute `data-close-btn-text` to configure the text from your markup.\n\n### History & Back button behavior\n\nSince dialogs are typically used to support actions within a page, the framework does not include dialogs in the hash state history tracking. This means that dialogs will not appear in your browsing history chronology when the Back button is clicked. For example, if you are on a page, click a link to open a dialog, close the dialog, then navigate to another page, if you were to click the browser's Back button at that point you will navigate back to the first page, not the dialog.\n\n### Chaining Dialogs\n\nPlease note: If a dialog opens another dialog (chaining), closing the last one with a link of type `data-rel=\"back\"` will always navigate to the previous dialog until the root-page of type `data-role=\"page\"` is reached. This guarantees a consistent navigation between dialogs.\n\n### Styling & theming\n\nDialogs can be styled with different theme swatches, just like any page by adding `data-theme` attributes to the header, content, or footer containers.\n\nBy default dialogs have rounded corners. The option corners can be set to false by adding `data-corners=\"false\"` to the dialog container:\n\nDialogs appear to be floating above an overlay layer. This overlay adopts the swatch 'a' content color by default, but the `data-overlay-theme` attribute can be added to the page wrapper to set the overlay to any swatch letter.\n\nDialogs can also be used more like a control sheet to offer multiple buttons if you simply remove the top margin from the dialog's inner container element. For example, if your dialog page had a class of `my-dialog`, you could add this CSS to pin that dialog to the top: `.ui-dialog.my-dialog .ui-dialog-contain { margin-top: 0 }`, or you could just apply that style to all dialogs with `.ui-dialog .ui-dialog-contain { margin-top: 0 }`.\n\n### Dialog width and margins\n\nFor the sake of readability, dialogs have a default `width` of 92.5% and a `max-width` of 500 pixels. There is also a 10% top `margin` to give dialogs larger top margin on larger screens, but collapse to a small margin on smartphones. The dialog's inner container is shifted towards the `top` with 15px to hide the corner styling if a dialog is used as a control sheet (see above). To override these styles, add the following CSS override rule to your stylesheet and tweak as needed:\n\n``` javascript\n.ui-dialog-contain {\n  width: 92.5%;\n  max-width: 500px;\n  margin: 10% auto 15px auto;\n  padding: 0;\n  position: relative;\n  top: -15px;\n}\n```\n\n## Options\n\n### closeBtn\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"left\"`\n\nSets the position of the dialog close button in the header (left or right) or prevents the framework from adding a close button (none).\n\nThis option is also exposed as a data attribute: `data-close-btn`.\n\n**Code examples:**\n\nInitialize the dialog with the `closeBtn` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  closeBtn: \"none\"\n});\n```\n\nGet or set the `closeBtn` option, after initialization:\n\n``` javascript\n// Getter\nvar closeBtn = $( \".selector\" ).dialog( \"option\", \"closeBtn\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"closeBtn\", \"none\" );\n```\n\n### closeBtnText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"Close\"`\n\nCustomizes the text of the close button which is helpful for translating this into different languages. The close button is displayed as an icon-only button by default so the text isn't visible on-screen, but is read by screen readers so this is an important accessibility feature.\n\nThis option is also exposed as a data attribute: `data-close-btn-text=\"Fermer\"`.\n\n**Code examples:**\n\nInitialize the dialog with the `closeBtnText` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  closeBtnText: \"Fermer\"\n});\n```\n\nGet or set the `closeBtnText` option, after initialization:\n\n``` javascript\n// Getter\nvar closeBtnText = $( \".selector\" ).dialog( \"option\", \"closeBtnText\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"closeBtnText\", \"Fermer\" );\n```\n\n### corners\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nSets whether to draw the dialo with rounded corners..\n\nThis option is also exposed as a data attribute:`data-corners=\"false\"`.\n\n**Code examples:**\n\nInitialize the dialog with the `corners` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  corners: false\n});\n```\n\nGet or set the `corners` option, after initialization:\n\n``` javascript\n// Getter\nvar corners = $( \".selector\" ).dialog( \"option\", \"corners\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"corners\", false );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the dialog with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).dialog( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the dialog if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the dialog with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).dialog( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"disabled\", true );\n```\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the dialog widget is:\n\n``` javascript\n\":jqmData(role='dialog')\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.dialog.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates dialog widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### overlayTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"a\"`\n\nDialogs appear to be floating above an overlay layer. This overlay adopts the swatch A content color by default, but the data-overlay-theme attribute can be added to the page wrapper to set the overlay to any swatch letter.\n\nPossible values: swatch letter (a-z)\n\nThis option is also exposed as a data attribute: `data-overlay-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the dialog with the `overlayTheme` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  overlayTheme: \"b\"\n});\n```\n\nGet or set the `overlayTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar overlayTheme = $( \".selector\" ).dialog( \"option\", \"overlayTheme\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"overlayTheme\", \"b\" );\n```\n\n## Methods\n\n### close()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCloses the dialog.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the close method:\n\n``` javascript\n$( \".selector\" ).dialog( \"close\" );\n```\n\n## Events\n\n### create( event, ui )Type: `dialogcreate`\n\nTriggered when a dialog is created\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the dialog with the create callback specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dialogcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"dialogcreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of opening a page as a dialog by adding `data-rel=\"dialog\"` to the anchor tag.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>dialog demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <a href=\"#dialogPage\" data-rel=\"dialog\">Open dialog</a>\n  </div>\n  <div data-role=\"footer\">\n    <h2></h2>\n  </div>\n</div>\n \n<div data-role=\"page\" id=\"dialogPage\">\n  <div data-role=\"header\">\n    <h2>Dialog</h2>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <p>I am a dialog</p>\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/dialog](https://api.jquerymobile.com/dialog)"
- name: Filterable
  id: filterable
  summary: 'Description: Makes the children of an element filterable'
  description: "# Filterable Widget\n\n## Filterable Widgetversion added: 1.4\n\n**Description:** Makes the children of an element filterable.\n\n## QuickNav\n\n### Options\n\n[children](#option-children)\n\n[classes](#option-classes)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[enhanced](#option-enhanced)\n\n[filterCallback](#option-filterCallback)\n\n[filterPlaceholder](#option-filterPlaceholder)\n\n[filterReveal](#option-filterReveal)\n\n[filterTheme](#option-filterTheme)\n\n[input](#option-input)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n### Events\n\n[beforefilter](#event-beforefilter)\n\n[create](#event-create)\n\n[filter](#event-filter)\n\n## Filterable Widget\n\nThe filterable widget allows you to filter the children of an element. The filtering is accomplished by applying the class `ui-screen-hidden` to those children for which a filter callback function provided via the widget's `filterCallback` option returns `true`.\n\n### Backwards compatibility\n\n**The filterable widget features provided for backwards compatibility are deprecated as of 1.4.0 and will be removed in 1.5.0.**\n\nThe filterable widget is a generalization of the `listview` widget's filter extension that was available in jQuery Mobile 1.3. It retains API compatibility with the `listview` filter. Its behavior is also made backwards compatible by the following **deprecated** features:\n\n- If no source is provided for the filterable via a `data-input` attribute, it will generate a text input and place it before the element.\n- It provides the `filterPlaceholder` option which sets the `placeholder` attribute on the generated text input.\n- It provides the `filterTheme` option which sets the `theme` option on the generated text input.\n- If a [collapsibleset](collapsibleset), [selectmenu](selectmenu), [controlgroup](controlgroup), or [listview](listview) widget is instantiated on the element whose children are to be filtered, it synchronizes those widget options with the generated text input that the text input widget also provides (options such as \"corners\" or \"mini\").\n- It provides special handling for listviews:\n  - When filtering listview items, the default filter callback will not hide list items marked as dividers, however,\n  - When filtering listview items, the widget enables the listview widget's `hidedividers` option, which causes the new listview hidedividers extension to automatically hide dividers for categories wherein all items are hidden.\n\n  Together, these two behaviors reproduce the jQuery Mobile 1.3 behavior of the listview filter.\n\n### Setup\n\nTo render the children of an element filterable, perform the following steps:\n\n1.  Create an element that will serve as the source for the filterable. It can be any element that emits a `change` signal and has a value that can be accessed via the jQuery [.val()](https://api.jquery.com/val/) plugin. This is usually a text input. The filterable widget reacts to the `change` signal by reading the value of the input after a short delay and iterating over all the children to determine whether they should be shown or hidden according to the filter callback provided.\n\n2.  Add the attribute `data-filter=\"true\"` to the element whose children will be filtered.\n\n3.  Add the attribute `data-input` to the element whose children will be filtered. The value of the attribute is a string containing a jQuery selector that will return the element to be used as the source for the filterable.\n\n4.  Add the child elements that will be filtered. You may add or remove child elements at any time, however, when you add or remove child elements you should call the `refresh` method on the filterable widget, to ensure that the new children are shown or hidden in accordance with the latest input provided by the user.\n\n    Child elements may have the `data-filtertext` attribute set. In that case, the default filter callback will hide a given child element only if the value of the `data-filtertext` attribute does not contain the string provided by the user. If the `data-filtertext` attribute is absent, the child will be hidden if its text content does not contain the string provided by the user.\n\nThe example below illustrates a simple filterable widget setup.\n\n``` markup\n<form>\n  <input type=\"text\" data-type=\"search\" id=\"filterable-input\">\n</form>\n<form data-role=\"controlgroup\" data-filter=\"true\" data-input=\"#filterable-input\">\n  <label for=\"pizza\">\n    Pizza\n    <input type=\"checkbox\" id=\"pizza\">\n  </label>\n  <label for=\"goulash\">\n    Goulash\n    <input type=\"checkbox\" id=\"goulash\">\n  </label>\n  <label for=\"falafel\">\n    Falafel\n    <input type=\"checkbox\" id=\"falafel\">\n  </label>\n  <label for=\"spring-rolls\">\n    Spring Rolls\n    <input type=\"checkbox\" id=\"spring-rolls\">\n  </label>\n</form>\n```\n\n### \"Reveal\" mode\n\nThe normal initial state of a filterable widget is that all the children are shown. In contrast, a filterable in \"reveal\" mode initially hides all its children. Once the user starts filtering, however, the filterable widget will display only those children that contain the text entered by the user, whether the filterable widget is in \"reveal\" mode or not.\n\nYou can turn on \"reveal\" mode by adding the attribute `data-filter-reveal=\"true\"` to the element whose children will be filtered.\n\nThe example below illustrates the behavior of a filterable widget in \"reveal\" mode:\n\n``` markup\n<form>\n  <input type=\"text\" data-type=\"search\" id=\"filterable-input\">\n</form>\n<form data-role=\"controlgroup\" data-filter-reveal=\"true\" data-filter=\"true\" data-input=\"#filterable-input\">\n  <label for=\"pizza\">\n    Pizza\n    <input type=\"checkbox\" id=\"pizza\">\n  </label>\n  <label for=\"goulash\">\n    Goulash\n    <input type=\"checkbox\" id=\"goulash\">\n  </label>\n  <label for=\"falafel\">\n    Falafel\n    <input type=\"checkbox\" id=\"falafel\">\n  </label>\n  <label for=\"spring-rolls\">\n    Spring Rolls\n    <input type=\"checkbox\" id=\"spring-rolls\">\n  </label>\n</form>\n```\n\n### Custom filters\n\nThe filterable widget's `filterCallback` option allows you to set a custom callback. In the example below items are filtered by their ordinal, which can be specified using page printing conventions such as \"1,2\" or \"4-9\", or both (\"1,2,4-9,12\").\n\n``` javascript\n$.mobile.filterable.prototype.options.filterCallback = function( index, searchValue ) {\n  var idx;\n \n  if ( searchValue ) {\n    searchValue = searchValue.split( \",\" );\n    searchValue = $.map( searchValue, function( element ) {\n      var ar = element.split( \"-\" );\n        return ar.length === 1 ? parseInt( element ) :\n          [ [ parseInt( ar[ 0 ] ), parseInt( ar[ 1 ] ) ] ];\n    });\n    for ( idx = 0 ; idx < searchValue.length ; idx++ ) {\n      if ( ( $.type( searchValue[ idx ] ) === \"number\" &&\n          index === searchValue[ idx ] ) ||\n        ( $.type( searchValue[ idx ] ) === \"array\" &&\n          index >= searchValue[ idx ][ 0 ] &&\n          index <= searchValue[ idx ][ 1 ] ) ) {\n        return false;\n      }\n    }\n  }\n \n  return !!searchValue;\n};\n```\n\n## Providing pre-rendered markup\n\nYou can improve the load time of your page by providing the markup that the filterable widget would normally create during its initialization.\n\nBy providing this markup yourself, and by indicating that you have done so by setting the attribute `data-enhanced=\"true\"`, you instruct the filterable widget to skip these DOM manipulations during instantiation and to assume that the required DOM structure is already present.\n\nWhen you provide such pre-rendered markup you must also set all the classes that the framework would normally set, and you must also set all data attributes whose values differ from the default to indicate that the pre-rendered markup reflects the non-default value of the corresponding widget option.\n\nThe filterable widget runs the filter on its children upon instantiation to ensure that the initial list of displayed children satisfies the initial value of the input source. By setting the attribute `data-enhanced=\"true\"`, you instruct the filterable widget that no initial filtering is to be performed. This means that you must apply the class `ui-screen-hidden` to any children which must initially be hidden due to the initial value of the search input.\n\n**Note:** If the element whose children are to be filtered is enhanced by another widget as well, such as for example a [listview](listview) or a [controlgroup](controlgroup) then you are required to provide pre-rendered markup for the other widget as well, because the attribute `data-enhanced=\"true\"` will influence the initialization behavior of the other widget as well.\n\nIn the example below, pre-rendered markup for a filterable is provided. The attribute `data-filter-reveal=\"true\"` is explicitly specified, since the presence of the `ui-screen-hidden` class on all the children indicates that they are initially hidden. The controlgroup widget containing the children is also pre-rendered, because the `data-enhanced=\"true\"` attribute applies to the [controlgroup](controlgroup) widget as much as it does to the filterable widget.\n\n``` markup\n<form>\n  <input id=\"pre-rendered-filterable\" data-type=\"search\">\n</form>\n<div\n  class=\"ui-controlgroup ui-controlgroup-vertical ui-corner-all\"\n  data-role=\"controlgroup\"\n  data-filter=\"true\"\n  data-input=\"#pre-rendered-filterable\"\n  data-filter-reveal=\"true\"\n  data-enhanced=\"true\">\n  <div class=\"ui-controlgroup-controls\">\n    <a href=\"index.html\" class=\"ui-screen-hidden\" data-role=\"button\">General</a>\n    <a href=\"settings.html\" class=\"ui-screen-hidden\" data-role=\"button\">Settings</a>\n    <a href=\"advanced.html\" class=\"ui-screen-hidden\" data-role=\"button\">Advanced</a>\n    <a href=\"notifications.html\" class=\"ui-screen-hidden\" data-role=\"button\">Notifications</a>\n  </div>\n</div>\n```\n\n## Options\n\n### children\n\n**Type:** [String](http://api.jquery.com/Types/#String) or [jQuery](http://api.jquery.com/Types/#jQuery) or [Function](http://api.jquery.com/Types/#Function)() or [Element](http://api.jquery.com/Types/#Element)\n\n**Default:** `\"> li, > option, > optgroup option, > tbody tr, > .ui-controlgroup-controls > .ui-btn, > .ui-controlgroup-controls > .ui-checkbox, > .ui-controlgroup-controls > .ui-radio\"`\n\nProvides the list of children which will be processed during filtering. If no children result from examination of the value of this option, then the children of the element from which this filterable widget is constructed will be used.\n\nThis option is also exposed as a data attribute: `data-children=\".my-children\"`.\n\n**Multiple types supported:**\n\n- **String**: A jQuery selector that will be used to select from the children of the element.\n- **jQuery**: A jQuery object containing the list of elements to filter.\n- **Function**: A function that returns a jQuery object containing the list of elements to filter. It will be called with no arguments whenever filtering needs to be performed.\n- **Element**: A DOM element. This is a trivial application of the filter.\n\n**Code examples:**\n\nInitialize the filterable with the `children` option specified:\n\n``` javascript\n$( \".selector\" ).filterable({\n  children: \".my-children\"\n});\n```\n\nGet or set the `children` option, after initialization:\n\n``` javascript\n// Getter\nvar children = $( \".selector\" ).filterable( \"option\", \"children\" );\n \n// Setter\n$( \".selector\" ).filterable( \"option\", \"children\", \".my-children\" );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the filterable with the `classes` option specified, changing the theming for the `ui-filterable` class:\n\n``` javascript\n$( \".selector\" ).filterable({\n  classes: {\n    \"ui-filterable\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-filterable` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).filterable( \"option\", \"classes.ui-filterable\" );\n \n// Setter\n$( \".selector\" ).filterable( \"option\", \"classes.ui-filterable\", \"highlight\" );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the filterable with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).filterable({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).filterable( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).filterable( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the filterable if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the filterable with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).filterable({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).filterable( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).filterable( \"option\", \"disabled\", true );\n```\n\n### enhanced\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIndicates that the markup necessary for a filterable widget has been provided as part of the original markup.\n\nThis option is also exposed as a data attribute: `data-enhanced=\"true\"`.\n\n**Code examples:**\n\nInitialize the filterable with the `enhanced` option specified:\n\n``` javascript\n$( \".selector\" ).filterable({\n  enhanced: true\n});\n```\n\nGet or set the `enhanced` option, after initialization:\n\n``` javascript\n// Getter\nvar enhanced = $( \".selector\" ).filterable( \"option\", \"enhanced\" );\n \n// Setter\n$( \".selector\" ).filterable( \"option\", \"enhanced\", true );\n```\n\n### filterCallback\n\n**Type:** [Function](http://api.jquery.com/Types/#Function)( [Number](http://api.jquery.com/Types/#Number) index, [String](http://api.jquery.com/Types/#String) searchValue )\n\n**Default:** `default callback`\n\nA function that will be called to determine whether an element in the list of children is considered to be filtered. It must return `true` if the element is to be filtered, and it must return `false` if the element is to be shown. The function is called once for each of the DOM elements and its context is set to the DOM element for which a decision is needed. Thus, the keyword `this` refers to the DOM element for which it must be decided whether it should be shown.\n\nThe default value of this attribute is a function that will examine each child for the presence of the `data-filtertext` attribute. If such an attribute is found, the function returns `true` if the string contained in the function's `searchValue` parameter cannot be found inside the value of the `data-filtertext` attribute. If no such attribute is found, the text content of the child is searched for the presence of the value of the function's `searchValue` parameter, and the function returns `true` if the search fails.\n\nFor backwards compatibility with the jQuery Mobile 1.3 listview filter extension, the function provided as the default value of this attribute will never hide listview dividers, however, **this behavior is deprecated as of jQuery Mobile 1.4.0 and will be removed in jQuery Mobile 1.5.0.**\n\nYou can provide a [custom callback](#custom-filter-example) if you need to process the children in special ways.\n\n### filterPlaceholder\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"Filter items...\"`\n\n**This option is deprecated in 1.4.0 and will be removed in 1.5.0.**\n\nA string that will be used as the value of the `placeholder` attribute for the generated text input.\n\nThis option is also exposed as a data attribute: `data-filter-placeholder=\"Refine options...\"`.\n\n(version deprecated: 1.4.0)\n\n**Code examples:**\n\nInitialize the filterable with the `filterPlaceholder` option specified:\n\n``` javascript\n$( \".selector\" ).filterable({\n  filterPlaceholder: \"Refine options...\"\n});\n```\n\nGet or set the `filterPlaceholder` option, after initialization:\n\n``` javascript\n// Getter\nvar filterPlaceholder = $( \".selector\" ).filterable( \"option\", \"filterPlaceholder\" );\n \n// Setter\n$( \".selector\" ).filterable( \"option\", \"filterPlaceholder\", \"Refine options...\" );\n```\n\n### filterReveal\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhen set to `true` all children are hidden whenever the search string is empty.\n\nThis option is also exposed as a data attribute: `data-filter-reveal=\"true\"`.\n\n**Code examples:**\n\nInitialize the filterable with the `filterReveal` option specified:\n\n``` javascript\n$( \".selector\" ).filterable({\n  filterReveal: true\n});\n```\n\nGet or set the `filterReveal` option, after initialization:\n\n``` javascript\n// Getter\nvar filterReveal = $( \".selector\" ).filterable( \"option\", \"filterReveal\" );\n \n// Setter\n$( \".selector\" ).filterable( \"option\", \"filterReveal\", true );\n```\n\n### filterTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\n**This option is deprecated in 1.4.0 and will be removed in 1.5.0.**\n\nSets the color scheme (swatch) for the generated text input. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nIf a [collapsibleset](collapsibleset), [selectmenu](selectmenu), [controlgroup](controlgroup), or [listview](listview) widget is instantiated on the element and its options are being synchronized with the options of the generated text input, then the value of this option, if set, takes precedence overe the value of the `theme` option retrieved from the the widget.\n\nThis option is also exposed as a data attribute: `data-filter-theme=\"b\"`.\n\n(version deprecated: 1.4.0)\n\n**Code examples:**\n\nInitialize the filterable with the `filterTheme` option specified:\n\n``` javascript\n$( \".selector\" ).filterable({\n  filterTheme: b\n});\n```\n\nGet or set the `filterTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar filterTheme = $( \".selector\" ).filterable( \"option\", \"filterTheme\" );\n \n// Setter\n$( \".selector\" ).filterable( \"option\", \"filterTheme\", b );\n```\n\n### input\n\n**Type:** [String](http://api.jquery.com/Types/#String) or [jQuery](http://api.jquery.com/Types/#jQuery) or [Element](http://api.jquery.com/Types/#Element)\n\n**Default:** `null`\n\nProvides the element that will serve as the input source for search strings.\n\nThis option is also exposed as a data attribute: `data-input=\"#input-for-filterable\"`.\n\n**Multiple types supported:**\n\n- **String**: A jQuery selector that will be used to retrieve the element that will serve as the input source.\n- **jQuery**: A jQuery object containing the element that will serve as the input source.\n- **Element**: The element that will serve as the input source.\n\n**Code examples:**\n\nInitialize the filterable with the `input` option specified:\n\n``` javascript\n$( \".selector\" ).filterable({\n  input: \"#input-for-filterable\"\n});\n```\n\nGet or set the `input` option, after initialization:\n\n``` javascript\n// Getter\nvar input = $( \".selector\" ).filterable( \"option\", \"input\" );\n \n// Setter\n$( \".selector\" ).filterable( \"option\", \"input\", \"#input-for-filterable\" );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the filterable functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).filterable( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the filterable.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).filterable( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the filterable.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).filterable( \"enable\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).filterable( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current filterable options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).filterable( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the filterable option associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).filterable( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the filterable.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).filterable( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nUpdates the filterable widget.\n\nIf you manipulate a filterable widget via JavaScript (e.g. by adding new children or removing old ones), you must call the `refresh()` method on it to update the visual styling.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).filterable( \"refresh\" );\n```\n\n## Events\n\n### beforefilter( event )Type: `filterablebeforefilter`\n\nTriggered before the widget begins filtering the list of children.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the filterable with the beforefilter callback specified:\n\n``` javascript\n$( \".selector\" ).filterable({\n  beforefilter: function( event, ui ) {}\n});\n```\n\nBind an event listener to the filterablebeforefilter event:\n\n``` javascript\n$( \".selector\" ).on( \"filterablebeforefilter\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `filterablecreate`\n\nTriggered when the filterable is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the filterable with the create callback specified:\n\n``` javascript\n$( \".selector\" ).filterable({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the filterablecreate event:\n\n``` javascript\n$( \".selector\" ).on( \"filterablecreate\", function( event, ui ) {} );\n```\n\n### filter( event, ui )Type: `filterablefilter`\n\nTriggered after the widget has performed the filtering on the list of children. The `ui` parameter contains the list of children that was processed.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **items**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object containing the items over which the filter has iterated.\n\n**Code examples:**\n\nInitialize the filterable with the filter callback specified:\n\n``` javascript\n$( \".selector\" ).filterable({\n  filter: function( event, ui ) {}\n});\n```\n\nBind an event listener to the filterablefilter event:\n\n``` javascript\n$( \".selector\" ).on( \"filterablefilter\", function( event, ui ) {} );\n```\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/filterable](https://api.jquerymobile.com/filterable)"
- name: Fixedtoolbar
  id: fixedtoolbar
  summary: As of jQuery Mobile 1.4.0 the functionality of the fixedtoolbar widget has been moved to the toolbar widget
  description: "# Fixedtoolbar Widget\n\n## Fixedtoolbar Widgetversion added: 1.0\n\n**Description:** See Toolbar Widget\n\n## QuickNav\n\n### Options\n\n### Methods\n\n### Events\n\nAs of jQuery Mobile 1.4.0 the functionality of the fixedtoolbar widget has been moved to the [toolbar widget](toolbar).\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/fixedtoolbar](https://api.jquerymobile.com/fixedtoolbar)"
- name: Flipswitch
  id: flipswitch
  summary: The flip switch is an alternative look to the checkbox or the two-option select menu
  description: "# Flipswitch Widget\n\n## Flipswitch Widgetversion added: 1.4\n\n**Description:** Creates a flipswitch widget\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[corners](#option-corners)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[enhanced](#option-enhanced)\n\n[mini](#option-mini)\n\n[offText](#option-offText)\n\n[onText](#option-onText)\n\n[theme](#option-theme)\n\n[wrapperClass](#option-wrapperClass)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n### Events\n\n[create](#event-create)\n\n## Flip switches\n\nThe flip switch is an alternative look to the checkbox or the two-option select menu. It can be toggled by a click or a swipe.\n\nTo create a flip switch add the attribute `data-role=\"flipswitch\"` to a checkbox `input` or to a `select` which has two `option` values.\n\n### Theming\n\nThe flipswitch widget uses the [jQuery Mobile CSS framework](theming/css-framework) to style its look and feel. If flipswitch specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-flipswitch`: The outermost container for flipswitch. Additionally, `ui-flipswitch-active` class will be applied in case flipswitch is in active\n  - `ui-flipswitch-on`: On state label of flipswitch\n  - `ui-flipswitch-off`: Off state label of flipswitch\n  - `ui-flipswitch-input`: Input checkbox element for flipswitch\n\n### Checkbox-based flipswitch\n\nUse the following markup to create a flipswitch based on a checkbox `input`:\n\n``` markup\n<fieldset>\n  <div data-role=\"fieldcontain\">\n    <label for=\"checkbox-based-flipswitch\">Checkbox-based:</label>\n    <input type=\"checkbox\" id=\"checkbox-based-flipswitch\" data-role=\"flipswitch\">\n  </div>\n</fieldset>\n```\n\nThe labels for the flipswitch are controlled by the `onText` and `offText` options.\n\n### Select-based flipswitch\n\nYou can also create a flipswitch based on a `select` element:\n\n``` markup\n<fieldset>\n  <div data-role=\"fieldcontain\">\n    <label for=\"select-based-flipswitch\">Select-based:</label>\n    <select id=\"select-based-flipswitch\" data-role=\"flipswitch\">\n      <option value=\"leave\">Bye</option>\n      <option value=\"arrive\">Hi</option>\n    </select>\n  </div>\n</fieldset>\n```\n\nThe labels for the flipswitch are controlled by the labels of the `select` element's `option` elements. The first option is used for the inactive, \"off\" state, and the second option is used for the active, \"on\" state.\n\n## Custom labels\n\nYou can customize the labels displayed by the flipswitch widget either using the [onText](#options-onText) and [offText](#options-offText) options if the widget is based on a checkbox, or using the text inside the first two `option` elements if the widget is based on a `select`.\n\nThe location of the text inside the two labels is specified manually in the flipswitch widget's structural CSS. Thus, if you use labels that are longer than \"On\" and \"Off\", you may have to override the default text placement using the following custom CSS:\n\n``` javascript\n.ui-flipswitch .ui-btn.ui-flipswitch-on {\n  text-indent: -2.6em;\n}\n.ui-flipswitch .ui-flipswitch-off {\n  text-indent: 1em;\n}\n```\n\nDepending on your choice of labels, you may also have to provide custom CSS to override the default width for the flipswitch:\n\n``` javascript\n.ui-flipswitch {\n  width: 5.875em;\n}\n.ui-flipswitch.ui-flipswitch-active {\n  padding-left: 4em;\n  width: 1.875em;\n}\n@media (min-width: 28em) {\n  // Repeated from rule .ui-flipswitch above\n  .ui-field-contain > label + .ui-flipswitch {\n    width: 1.875em;\n  }\n}\n```\n\n## Providing pre-rendered markup\n\nYou can improve the load time of your page by providing the markup that the flipswitch widget would normally create during its initialization.\n\nBy providing this markup yourself, and by indicating that you have done so by setting the attribute `data-enhanced=\"true\"`, you instruct the flipswitch widget to skip these DOM manipulations during instantiation and to assume that the required DOM structure is already present.\n\nWhen you provide such pre-rendered markup you must also set all the classes that the framework would normally set, and you must also set all data attributes whose values differ from the default to indicate that the pre-rendered markup reflects the non-default value of the corresponding widget option.\n\nThe flipswitch widget adds a wrapper `div` around the `input`. In addition to the original element, the wrapper also contains two `span` elements where the two labels are stored. The first `span` is styled as a button with the text for the active state appearing outside the button's bounding box to the left. To make the flipswitch reachable by tabbing, you can add the `tabindex=\"1\"` attribute to the first `span`.\n\nIn the example below, pre-rendered markup for a flipswitch is provided. The attribute `data-corners=\"false\"` is explicitly specified, since the absence of the `ui-corner-all` class on the wrapper element indicates that the \"corners\" widget option is to be false.\n\n``` markup\n<div class=\"ui-flipswitch ui-shadow-inset ui-bar-inherit\">\n  <span tabindex=\"1\" class=\"ui-flipswitch-on ui-btn ui-shadow ui-btn-inherit\">On</span>\n  <span class=\"ui-flipswitch-off\">Off</span>\n  <input type=\"checkbox\" data-role=\"flipswitch\" data-enhanced=\"true\" data-corners=\"false\" name=\"flip-checkbox\" class=\"ui-flipswitch-input\">\n</div>\n```\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n        \"ui-flipswitch\": \"ui-shadow-inset ui-corner-all\",\n        \"ui-flipswitch-on\": \"ui-shadow\"\n      }\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the flipswitch with the `classes` option specified, changing the theming for the `ui-flipswitch` class:\n\n``` javascript\n$( \".selector\" ).flipswitch({\n  classes: {\n    \"ui-flipswitch\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-flipswitch` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).flipswitch( \"option\", \"classes.ui-flipswitch\" );\n \n// Setter\n$( \".selector\" ).flipswitch( \"option\", \"classes.ui-flipswitch\", \"highlight\" );\n```\n\n### corners\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nApplies the theme button border-radius if set to true.\n\nThis option is also exposed as a data attribute: `data-corners=\"false\"`.\n\n**Code examples:**\n\nInitialize the flipswitch with the `corners` option specified:\n\n``` javascript\n$( \".selector\" ).flipswitch({\n  corners: false\n});\n```\n\nGet or set the `corners` option, after initialization:\n\n``` javascript\n// Getter\nvar corners = $( \".selector\" ).flipswitch( \"option\", \"corners\" );\n \n// Setter\n$( \".selector\" ).flipswitch( \"option\", \"corners\", false );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the flipswitch with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).flipswitch({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).flipswitch( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).flipswitch( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the flipswitch if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the flipswitch with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).flipswitch({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).flipswitch( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).flipswitch( \"option\", \"disabled\", true );\n```\n\n### enhanced\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIndicates that the markup necessary for a flipswitch widget has been provided as part of the original markup.\n\nThis option is also exposed as a data attribute: `data-enhanced=\"true\"`.\n\n**Code examples:**\n\nInitialize the flipswitch with the `enhanced` option specified:\n\n``` javascript\n$( \".selector\" ).flipswitch({\n  enhanced: true\n});\n```\n\nGet or set the `enhanced` option, after initialization:\n\n``` javascript\n// Getter\nvar enhanced = $( \".selector\" ).flipswitch( \"option\", \"enhanced\" );\n \n// Setter\n$( \".selector\" ).flipswitch( \"option\", \"enhanced\", true );\n```\n\n### mini\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `null (false)`\n\nIf set to `true`, this will display a more compact version of the flipswitch that uses less vertical height by applying the `ui-mini` class to the outermost element of the flipswitch widget.\n\n**Note:** `mini` option is deprecated in 1.5 and will be removed in 1.6\n\nThis option is also exposed as a data attribute: `data-mini=\"true\"`.\n\n### offText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"Off\"`\n\nWhen the flipswitch widget is based on a checkbox rather than a `select` the value of this option is used as the label for the \"Off\" state.\n\nThis option is also exposed as a data attribute: `data-off-text=\"Go\"`\n\n**Code examples:**\n\nInitialize the flipswitch with the `offText` option specified:\n\n``` javascript\n$( \".selector\" ).flipswitch({\n  offText: \"Go\"\n});\n```\n\nGet or set the `offText` option, after initialization:\n\n``` javascript\n// Getter\nvar offText = $( \".selector\" ).flipswitch( \"option\", \"offText\" );\n \n// Setter\n$( \".selector\" ).flipswitch( \"option\", \"offText\", \"Go\" );\n```\n\n### onText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"On\"`\n\nWhen the flipswitch widget is based on a checkbox rather than a `select` the value of this option is used as the label for the \"On\" state.\n\nThis option is also exposed as a data attribute: `data-on-text=\"Go\"`\n\n**Code examples:**\n\nInitialize the flipswitch with the `onText` option specified:\n\n``` javascript\n$( \".selector\" ).flipswitch({\n  onText: \"Stay\"\n});\n```\n\nGet or set the `onText` option, after initialization:\n\n``` javascript\n// Getter\nvar onText = $( \".selector\" ).flipswitch( \"option\", \"onText\" );\n \n// Setter\n$( \".selector\" ).flipswitch( \"option\", \"onText\", \"Stay\" );\n```\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the flipswitch widget. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the flipswitch with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).flipswitch({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).flipswitch( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).flipswitch( \"option\", \"theme\", \"b\" );\n```\n\n### wrapperClass\n\n**Type:**\n\n**Default:** `null`\n\nIt is difficult to write custom CSS for the wrapper `div` around the native `input` element generated by the framework. This option allows you to specify one or more space-separated class names to be added to the wrapper `div` element by the framework.\n\nThis option is also exposed as a data attribute: `data-wrapper-class=\"custom-class\"`.\n\n**Code examples:**\n\nInitialize the flipswitch with the `wrapperClass` option specified:\n\n``` javascript\n$( \".selector\" ).flipswitch({\n  wrapperClass: \"custom-class\"\n});\n```\n\nGet or set the `wrapperClass` option, after initialization:\n\n``` javascript\n// Getter\nvar wrapperClass = $( \".selector\" ).flipswitch( \"option\", \"wrapperClass\" );\n \n// Setter\n$( \".selector\" ).flipswitch( \"option\", \"wrapperClass\", \"custom-class\" );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the flipswitch functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).flipswitch( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the flipswitch.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).flipswitch( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the flipswitch.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).flipswitch( \"enable\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).flipswitch( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current flipswitch options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).flipswitch( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the flipswitch option associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).flipswitch( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the flipswitch.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).flipswitch( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nupdate the flipswitch.\n\nIf you manipulate a flipswitch via JavaScript, you must call the refresh method on it to update the visual styling.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).flipswitch( \"refresh\" );\n```\n\n## Events\n\n### create( event, ui )Type: `flipswitchcreate`\n\nTriggered when the flipswitch is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the flipswitch with the create callback specified:\n\n``` javascript\n$( \".selector\" ).flipswitch({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the flipswitchcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"flipswitchcreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of a checkbox in a fieldcontainer\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>flipswitch demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n<div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <div class=\"ui-field-contain\">\n      <form>\n        <div data-role=\"fieldcontain\">\n          <label for=\"checkbox-based-flipswitch-0\">Checkbox-based:</label>\n          <input type=\"checkbox\" id=\"checkbox-based-flipswitch-0\" data-role=\"flipswitch\">\n        </div>\n      </form>\n    </div>\n  </div>  \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/flipswitch](https://api.jquerymobile.com/flipswitch)"
- name: Footer
  id: footer
  summary: As of jQuery Mobile 1.4.0 the functionality of the footer widget has been moved to the toolbar widget
  description: "# Footer Widget\n\n## Footer Widgetversion added: 1.0\n\n**Description:** See Toolbar Widget\n\n## QuickNav\n\n### Options\n\n### Methods\n\n### Events\n\nAs of jQuery Mobile 1.4.0 the functionality of the footer widget has been moved to the [toolbar widget](toolbar).\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/footer](https://api.jquerymobile.com/footer)"
- name: Grid Layout
  id: grid-layout
  summary: Using multiple column layouts isn't generally recommended on a mobile device because of the narrow screen width, but there are times where you may need to place small elements side-by-side (like buttons or navigation tabs, for example)
  description: "# Grid Layout\n\n## Grid Layoutversion added: 1.0\n\n**Description:** Multi-column layout grids\n\nUsing multiple column layouts isn't generally recommended on a mobile device because of the narrow screen width, but there are times where you may need to place small elements side-by-side (like buttons or navigation tabs, for example).\n\nThe jQuery Mobile framework provides a simple way to build CSS-based columns through a block style class convention called `ui-grid`.\n\nThere are four preset layouts that can be used in any situation that requires columns:\n\n- **two**-column (using the `ui-grid-a` class)\n- **three**-column (using the `ui-grid-b` class)\n- **four**-column (using the `ui-grid-c` class)\n- **five**-column (using the `ui-grid-d` class)\n\nGrids are 100% width, completely invisible (no borders or backgrounds) and don't have padding or margins, so they shouldn't interfere with the styles of elements placed inside them.\n\nWithin the grid container, child elements are assigned `ui-block-a/b/c/d/e` in a sequential manner which makes each \"block\" element float side-by-side, forming the grid. The `ui-block-a` class essentially clears the floats which will start a new line (see multiple row grids, below).\n\n### Two column grids\n\nTo build a two-column (50/50%) layout, start with a container with a `class` of `ui-grid-a`, and add two child containers inside it classed with `ui-block-a` for the first column and `ui-block-b` for the second:\n\n``` markup\n<div class=\"ui-grid-a\">\n  <div class=\"ui-block-a\"><strong>I'm Block A</strong> and text inside will wrap</div>\n  <div class=\"ui-block-b\"><strong>I'm Block B</strong> and text inside will wrap</div>\n</div><!-- /grid-a -->\n```\n\nThe above markup produces the following content layout:\n\nAs you see above, by default grid blocks have no visual styling; they simply present content side-by-side.\n\nGrid classes can be applied to any container. In this next example, we add `ui-grid-a` to a `fieldset`, and apply the `ui-block` classes to the container of each of the two buttons inside to stretch them each to 50% of the screen width:\n\n``` markup\n<fieldset class=\"ui-grid-a\">\n  <div class=\"ui-block-a\"><button type=\"submit\" data-theme=\"a\">Cancel</button></div>\n  <div class=\"ui-block-b\"><button type=\"submit\" data-theme=\"b\">Submit</button></div>\n</fieldset>\n```\n\nPlease note that the framework adds left and right margin to buttons in a grid. For a single button you can use a container with class `ui-grid-solo` and wrap the button in a div with class `ui-block-a` like the example below. This way the button will get the same margin.\n\n``` markup\n<div class=\"ui-grid-a\">\n  <div class=\"ui-block-a\"><button type=\"button\" data-theme=\"a\">Previous</button></div>\n  <div class=\"ui-block-b\"><button type=\"button\" data-theme=\"a\">Next</button></div>\n</div>\n<div class=\"ui-grid-solo\">\n  <div class=\"ui-block-a\"><button type=\"button\" data-theme=\"b\">More</button></div>\n</div>\n```\n\nTheme classes (not data-theme attributes) from the [theming system](classes#theme-classes) can be added to an element, including grids. On the blocks below, we're adding two classes: `ui-bar` to add the default bar padding and `ui-bar-a` to apply the background and font styling for the \"a\" toolbar theme swatch. For illustration purposes, an inline `style=\"height:120px\"` attribute is also added to each grid to set each to a standard height.\n\n### Three-column grids\n\nThe other grid layout configuration uses `class=ui-grid-b` on the parent, and 3 child container elements, each with its respective `ui-block-a/b/c` class, to create a three-column layout (33/33/33%). Note: These blocks are also styled with theme classes so the grid layout is clearly visible.\n\n``` markup\n<div class=\"ui-grid-b\">\n  <div class=\"ui-block-a\">Block A</div>\n  <div class=\"ui-block-b\">Block B</div>\n  <div class=\"ui-block-c\">Block C</div>\n</div><!-- /grid-b -->\n```\n\nThis will produce a 33/33/33% grid for our content.\n\nAnd an example of a 3 column grid with buttons inside:\n\n### Four-column grids\n\nA four-column, 25/25/25/25% grid is created by specifying `class=ui-grid-c` on the parent and adding a fourth block. Note: These blocks are also styled with theme classes so the grid layout is clearly visible.\n\n## Five-column grids\n\nA five-column, 20/20/20/20/20% grid is created by specifying `class=ui-grid-d` on the parent and adding a fifth block. Note: These blocks are also styled with theme classes so the grid layout is clearly visible.\n\n### Multiple row grids\n\nGrids are designed to wrap to multiple rows of items. For example, if you specify a 3-column grid (ui-grid-b) on a container that has nine child blocks, it will wrap to 3 rows of 3 items each. There is a CSS rule to clear the floats and start a new line when the `class=ui-block-a` is seen so make sure to assign block classes in a repeating sequence (a, b, c, a, b, c, etc.) that maps to the grid type:\n\n### Grids in toolbars\n\nGrids are helpful for creating layouts within a toolbar. Here's a footer with a 4 column grid.\n\n## Example:\n\nA basic example of grid layout\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>grid-layout demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>Grid Layout Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <div class=\"ui-grid-a\">\n      <div class=\"ui-block-a\"><strong>I'm Block A</strong> and text inside will wrap.</div>\n      <div class=\"ui-block-b\"><strong>I'm Block B</strong> and text inside will wrap.</div>\n    </div><!-- /grid-a -->\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/grid-layout](https://api.jquerymobile.com/grid-layout)"
- name: hashchange event
  id: hashchange
  summary: 'Description: Enables bookmarkable #hash history'
  description: "# hashchange\n\n## hashchange eventversion added: 1.0\n\n**Description:** Enables bookmarkable \\#hash history.\n\n- #### jQuery( \".selector\" ).on( \"hashchange\", function( event ) { ... } )\n\nThe jQuery Mobile `.hashchange()` event handler enables very basic bookmarkable \\#hash history by providing a callback function bound to the window.onhashchange event. The onhashchange event fires when a window's hash changes.\n\nIn browsers that support it, the native HTML5 window.onhashchange event is used. In IE6/7 (and IE8 operating in \"IE7 compatibility\" mode), a hidden iframe is created to allow the back button and hash-based history to work.\n\nThis plugin extends jQuery's built-in method. If jQuery Mobile is not loaded, calling the `.hashchange()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n``` javascript\n$(function() {\n  // Bind an event to window.onhashchange that, when the hash changes, gets the\n  // hash and adds the class \"selected\" to any matching nav link.\n  $( window ).hashchange(function() {\n    var hash = location.hash;\n \n    // Set the page title based on the hash.\n    document.title = \"The hash is \" + ( hash.replace( /^#/, \"\" ) || \"blank\" ) + \".\";\n \n    // Iterate over all nav links, setting the \"selected\" class as-appropriate.\n    $( \"#nav a\" ).each(function() {\n      var that = $( this );\n      that[ that.attr( \"href\" ) === hash ? \"addClass\" : \"removeClass\" ]( \"selected\" );\n    });\n  });\n  // Since the event is only triggered when the hash changes, we need to trigger\n  // the event now, to handle the hash the page may have loaded with.\n  $( window ).hashchange();\n});\n```\n\niFrame source: example1.html\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/hashchange](https://api.jquerymobile.com/hashchange)"
- name: Header
  id: header
  summary: As of jQuery Mobile 1.4.0 the functionality of the header widget has been moved to the toolbar widget
  description: "# Header Widget\n\n## Header Widgetversion added: 1.0\n\n**Description:** See Toolbar Widget\n\n## QuickNav\n\n### Options\n\n### Methods\n\n### Events\n\nAs of jQuery Mobile 1.4.0 the functionality of the header widget has been moved to the [toolbar widget](toolbar).\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/header](https://api.jquerymobile.com/header)"
- name: jQuery.mobile.activePage
  id: jquery.mobile.activepage
  summary: 'Description: Reference to the page currently in view'
  description: "# jQuery.mobile.activePage\n\n## jQuery.mobile.activePageReturns: [jQuery](http://api.jquery.com/Types/#jQuery)version added: 1.0, deprecated: 1.4.0\n\n**Description:** Reference to the page currently in view.\n\n**Note:** jQuery.mobile.activePage is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use the [getActivePage()](pagecontainer#method-getActivePage) method from the `pagecontainer` widget instead.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.activePage](https://api.jquerymobile.com/jQuery.mobile.activePage)"
- name: jQuery.mobile.changePage()
  id: jquery.mobile.changepage
  summary: 'Description: Programmatically change from one page to another'
  description: "# jQuery.mobile.changePage()\n\n## jQuery.mobile.changePage( to \\[, options \\] )Returns: [Undefined](http://api.jquery.com/Types/#Undefined)version deprecated: 1.4.0\n\n**Description:** Programmatically change from one page to another.\n\n**Note:** jQuery.mobile.changePage is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use the [pagecontainer](pagecontainer) widget's [change()](pagecontainer#method-change) method instead.\n\n- #### [jQuery.mobile.changePage( to \\[, options \\] )](#jQuery-mobile-changePage-to-options)\n\n  - **to**\n\n    Type: [String](http://api.jquery.com/Types/#String) or [Object](http://api.jquery.com/Types/#Object)\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Properties:\n\n    - **allowSamePageTransition** (default: `false`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      By default, changePage() ignores requests to change to the current active page. Setting this option to true, allows the request to execute. Developers should note that some of the page transitions assume that the fromPage and toPage of a changePage request are different, so they may not animate as expected. Developers are responsible for either providing a proper transition, or turning it off for this specific case.\n\n    - **changeHash** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Decides if the hash in the location bar should be updated. This has the effect of creating a new browser history entry. It also means that, if set to **false**, the incoming page will replace the current page in the browser history, so the page from which the user is navigating away will not be reachable via the browser's \"Back\" button.\n\n    - **data** (default: `undefined`)\n\n      Type: [Object](http://api.jquery.com/Types/#Object) or [String](http://api.jquery.com/Types/#String)\n\n      The data to send with an Ajax page request.  \n      Used only when the 'to' argument of changePage() is a URL.\n\n    - **dataUrl** (default: `undefined`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      The URL to use when updating the browser location upon changePage completion. If not specified, the value of the data-url attribute of the page element is used.\n\n    - **pageContainer** (default: `$.mobile.pageContainer`)\n\n      Type: [jQuery collection](http://api.jquery.com/Types/#jQuery%20collection)\n\n      Specifies the element that should contain the page.\n\n    - **reloadPage** (default: `false`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Forces a reload of a page, even if it is already in the DOM of the page container.  \n      Used only when the 'to' argument of changePage() is a URL.\n\n    - **reverse** (default: `false`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Decides what direction the transition will run when showing the page.\n\n    - **role** (default: `undefined`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      The data-role value to be used when displaying the page. By default this is undefined which means rely on the value of the @data-role attribute defined on the element.\n\n    - **showLoadMsg** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Decides whether or not to show the loading message when loading external pages.\n\n    - **transition** (default: `$.mobile.defaultPageTransition`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      The transition to use when showing the page.\n\n    - **type** (default: `\"get\"`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      Specifies the method (\"get\" or \"post\") to use when making a page request.  \n      Used only when the 'to' argument of changePage() is a URL.\n\nProgrammatically change from one page to another. This method is used internally for the page loading and transitioning that occurs as a result of clicking a link or submitting a form, when those features are enabled.\n\n## Examples:\n\nTransition to the \"about us\" page with a slideup transition.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.changePage demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>Page 1</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n  </div>\n</div>\n \n<script>\n//Adding the changeHash: false to avoid an issue with the iframe\n$.mobile.changePage( \"../resources/us.html\", { transition: \"slideup\", changeHash: false });\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nTransition to the \"search results\" page, using data from a form with an id of \"search\".\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.changePage demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>Page 1</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <form id=\"search\">\n      <p>Please fill in the form below:<br /><br />\n      <label for=\"choice\">Favorite framework:</label>\n      <input type=\"text\" name=\"choice\" id=\"choice\" value=\"jQuery Mobile\" />\n      </p>\n    </form>\n  </div>\n</div>\n \n<script>\n$.mobile.changePage( \"../resources/results.php\", {\n  type: \"post\",\n  data: $( \"form#search\" ).serialize(),\n  changeHash: false\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nTransition to the \"confirm\" page with a \"pop\" transition without tracking it in history.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.changePage demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>Page 1</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n  </div>\n</div>\n \n<script>\n$.mobile.changePage( \"../resources/confirm.html\", {\n  transition: \"pop\",\n  reverse: false,\n  changeHash: false\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.changePage](https://api.jquerymobile.com/jQuery.mobile.changePage)"
- name: jQuery.mobile.degradeInputsWithin()
  id: jquery.mobile.degradeinputswithin
  summary: 'Description: Alter the input type of form widgets'
  description: "# jQuery.mobile.degradeInputsWithin()\n\n## jQuery.mobile.degradeInputsWithin( target )Returns: [Undefined](http://api.jquery.com/Types/#Undefined)version added: 1.4.0\n\n**Description:** Alter the input type of form widgets.\n\n- #### [jQuery.mobile.degradeInputsWithin( target )](#jQuery-mobile-degradeInputsWithin-target)\n\n  - **target**\n\n    Type: [Element](http://api.jquery.com/Types/#Element)\n\n    The element whose children should be considered for input degradation.\n\nSome native input types have undesirable native behavior. jQuery.mobile.degradeInputsWithin will alter the input type of such elements during page creation to fallback input types whose native behavior is acceptable. You can then achieve the user experience you desire by instantiating jQuery Mobile widgets on the modified native elements.\n\n## Example:\n\nDegrading Inputs\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.degradeInputsWithin demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n  <div data-role=\"header\">\n    <h2>jQuery Mobile Example</h2>\n  </div>\n  <div class=\"ui-content\" role=\"main\">\n    <form>\n      <fieldset>\n        <div class=\"ui-field-contain\">\n          <label for=\"degraded-range\">Type <code>range</code> degraded to <code>number</code></label>\n          <input type=\"range\" id=\"degraded-range\" min=\"0\" max=\"91\" value=\"17\"></input>\n        </div>\n        <div class=\"ui-field-contain\">\n          <label for=\"degraded-search\">Type <code>search</code> degraded to <code>text</code></label>\n          <input type=\"search\" id=\"degraded-search\"></input>\n        </div>\n        <div class=\"ui-field-contain\">\n          <label for=\"unchanged-url\">Unchanged type <code>url</code></label>\n          <input type=\"url\" id=\"unchanged-url\"></input>\n        </div>\n      </fieldset>\n    </form>\n  </div>\n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.degradeInputsWithin](https://api.jquerymobile.com/jQuery.mobile.degradeInputsWithin)"
- name: jQuery.mobile.getDocumentBase()
  id: jquery.mobile.getdocumentbase
  summary: 'Description: Utility method for retrieving the original document base URL'
  description: "# jQuery.mobile.getDocumentBase()\n\n## jQuery.mobile.getDocumentBase( asParsedObject )version deprecated: 1.4.0\n\n**Description:** Utility method for retrieving the original document base URL.\n\n**Note:** jQuery.mobile.getDocumentBase is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use the [jQuery.mobile.path.getDocumentBase()](jquery.mobile.path.getdocumentbase) method instead.\n\n- #### [jQuery.mobile.getDocumentBase( asParsedObject )](#jQuery-mobile-getDocumentBase-asParsedObject)\n\n  - **asParsedObject** (default: `false`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    The function normally returns the original document base URL as a string. However, if you specify a truthy value for this parameter, the original document base URL will be returned in a hash as a parsed URL.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.getDocumentBase](https://api.jquerymobile.com/jQuery.mobile.getDocumentBase)"
- name: jQuery.mobile.getDocumentUrl()
  id: jquery.mobile.getdocumenturl
  summary: 'Description: Retrieve the URL of the original document'
  description: "# jQuery.mobile.getDocumentUrl()\n\n## jQuery.mobile.getDocumentUrl( asParsedObject )Returns: [String](http://api.jquery.com/Types/#String)version deprecated: 1.4.0\n\n**Description:** Retrieve the URL of the original document.\n\n**Note:** jQuery.mobile.getDocumentUrl is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use the [jQuery.mobile.path.getDocumentUrl()](jquery.mobile.path.getdocumenturl) method instead.\n\n- #### [jQuery.mobile.getDocumentUrl( asParsedObject )](#jQuery-mobile-getDocumentUrl-asParsedObject)\n\n  - **asParsedObject** (default: `false`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    The function normally returns the original document's URL as a string. However, if you specify a truthy value for this parameter, the original document's URL will be returned in a hash as a parsed URL.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.getDocumentUrl](https://api.jquerymobile.com/jQuery.mobile.getDocumentUrl)"
- name: jQuery.mobile.getInheritedTheme()
  id: jquery.mobile.getinheritedtheme
  summary: 'Description: Retrieves the theme of the nearest parent that has a theme assigned'
  description: "# jQuery.mobile.getInheritedTheme()\n\n## jQuery.mobile.getInheritedTheme( el, defaultTheme )Returns: [String](http://api.jquery.com/Types/#String)version deprecated: 1.4.0\n\n**Description:** Retrieves the theme of the nearest parent that has a theme assigned.\n\n- #### [jQuery.mobile.getInheritedTheme( el, defaultTheme )](#jQuery-mobile-getInheritedTheme-el-defaultTheme)\n\n  - **el**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object containing an element for which the inherited theme is to be determined.\n\n  - **defaultTheme**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The color scheme (swatch) to apply if no theme is found on any of the parents. It accepts a single letter from a-z that maps to the swatches included in your theme.\n    Possible values: swatch letter (a-z).\n\nThis method is no longer useful, since theme inheritance is implemented entirely in CSS as of jQuery Mobile 1.4.0.\n\n## Example:\n\nRetrieve the inherited theme for an element\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.getInheritedTheme demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n  <script>\n  $.mobile.document.on( \"click\", \"#check-theme\", function() {\n    alert( \"I inherit theme '\" +\n      $.mobile.getInheritedTheme( $( this ), \"x\" ) + \"'\" );\n  });\n  </script>\n  <div data-role=\"header\">\n    <h2>jQuery Mobile Example</h2>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <p>Click the button below to find out what theme it inherits.</p>\n    <a href=\"#\" id=\"check-theme\" class=\"ui-btn ui-corner-all ui-shadow\">Check my theme</a> \n  </div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.getInheritedTheme](https://api.jquerymobile.com/jQuery.mobile.getInheritedTheme)"
- name: jQuery.mobile.loadPage()
  id: jquery.mobile.loadpage
  summary: 'Description: Load an external page, enhance its content, and insert it into the DOM'
  description: "# jQuery.mobile.loadPage()\n\n## jQuery.mobile.loadPage( url \\[, options \\] )Returns: [Promise](http://api.jquery.com/Types/#Promise)version deprecated: 1.4.0\n\n**Description:** Load an external page, enhance its content, and insert it into the DOM.\n\n**Note:** jQuery.mobile.loadPage is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use the [pagecontainer](pagecontainer) widget's [load()](pagecontainer#method-load) method instead.\n\n- #### [jQuery.mobile.loadPage( url \\[, options \\] )](#jQuery-mobile-loadPage-url-options)\n\n  - **url**\n\n    Type: [String](http://api.jquery.com/Types/#String) or [Object](http://api.jquery.com/Types/#Object)\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Properties:\n\n    - **allowSamePageTransition** (default: `false`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      By default, changePage() ignores requests to change to the current active page. Setting this option to true, allows the request to execute. Developers should note that some of the page transitions assume that the fromPage and toPage of a changePage request are different, so they may not animate as expected. Developers are responsible for either providing a proper transition, or turning it off for this specific case.\n\n    - **changeHash** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Decides if the hash in the location bar should be updated.\n\n    - **data** (default: `undefined`)\n\n      Type: [Object](http://api.jquery.com/Types/#Object) or [String](http://api.jquery.com/Types/#String)\n\n      The data to send with an Ajax page request.\n\n    - **loadMsgDelay** (default: `50`)\n\n      Type: [Number](http://api.jquery.com/Types/#Number)\n\n      Forced delay (in ms) before the loading message is shown. This is meant to allow time for a page that has already been visited to be fetched from cache without a loading message.\n\n    - **pageContainer** (default: `$.mobile.pageContainer`)\n\n      Type: [jQuery collection](http://api.jquery.com/Types/#jQuery%20collection)\n\n      Specifies the element that should contain the page.\n\n    - **reloadPage** (default: `false`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Forces a reload of a page, even if it is already in the DOM of the page container.  \n      Used only when the 'to' argument of changePage() is a URL.\n\n    - **role** (default: `undefined`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      The data-role value to be used when displaying the page. By default this is undefined which means rely on the value of the @data-role attribute defined on the element.\n\n    - **showLoadMsg** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Decides whether or not to show the loading message when loading external pages.\n\n    - **transition** (default: `$.mobile.defaultPageTransition`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      The transition to use when showing the page.\n\n    - **type** (default: `\"get\"`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      Specifies the method (\"get\" or \"post\") to use when making a page request.  \n      Used only when the 'to' argument of changePage() is a URL.\n\nLoad an external page, enhance its content, and insert it into the DOM. This method is called internally by the changePage() function when its first argument is a URL. This function does not affect the current active page so it can be used to load pages in the background. The function returns a deferred promise object that gets resolved after the page has been enhanced and inserted into the document.\n\n## Examples:\n\nLoad the \"about us\" page into the DOM.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.loadPage demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n  <div data-role=\"header\">\n      <h1>loadPage() demo</h1>\n    </div><!-- /header -->\n \n  <div role=\"main\" class=\"ui-content\">\n \n    <p>First check if the 'About us' page is in the DOM, Load the page in the DOM and check again</p>\n    <input type=\"button\" id=\"domcheck\" data-inline=\"true\" value=\"Is 'About us' in the DOM?\"/>\n    <input type=\"button\" id=\"loadpage\" data-inline=\"true\" value=\"Load the 'About us' page\"/><br />\n    <div id=\"myResult\">'About Us' is in the DOM: <span id=\"result\">The result will be displayed here</span></div>\n  </div>\n \n<script>\n  $( \"#domcheck\" ).on( \"click\", function() {\n    var check = $( \"#aboutUs\" ).length === 1;\n    $( \"#result\" ).text( check );\n  });\n  $( \"#loadpage\" ).on( \"click\", function() {\n    $.mobile.loadPage( \"../resources/us.html\");\n  });\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nLoad a \"search results\" page, using data from a form with an id of \"search\".\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.loadPage demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n  <div role=\"main\" class=\"ui-content\">\n \n    <form id=\"search\">\n      <p>Please fill in the form below:<br /><br />\n      <label for=\"choice\">Favorite framework:</label>\n      <input type=\"text\" name=\"choice\" id=\"choice\" value=\"jQuery Mobile\" />\n \n      <a href=\"#formResults\" data-role=\"button\" data-inline=\"true\" data-rel=\"dialog\">Show Results</a>\n      </p>\n    </form>\n \n  </div>\n \n<script>\n$.mobile.loadPage( \"../resources/results.php\", true, {\n  type: \"post\",\n  data: $( \"form#search\" ).serialize()\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.loadPage](https://api.jquerymobile.com/jQuery.mobile.loadPage)"
- name: jQuery.mobile.navigate()
  id: jquery.mobile.navigate
  summary: 'Description: Alter the url and track history'
  description: "# jQuery.mobile.navigate()\n\n## jQuery.mobile.navigate( url \\[, data \\] )Returns: [Undefined](http://api.jquery.com/Types/#Undefined)version added: 1.3\n\n**Description:** Alter the url and track history. Works for browsers with and without the new history API.\n\n- #### [jQuery.mobile.navigate( url \\[, data \\] )](#jQuery-mobile-navigate-url-data)\n\n  - **url**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n  - **data**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\nThe `$.mobile.navigate` method provides a uniform history manipulation API for browsers that support the new history API and those that don't (hashchange). It works in concert with the navigate event by storing and retrieving arbitrary data in association with a URL (much like `popState` and `replaceState`). When the user returns to a URL set by the navigate method the navigate event is triggered with the associated data.\n\n**Note:** This method is a low-level utility which can be used on its own. If you use the jQuery Mobile navigation framework, you should not separately use this utility. Instead, you should use [pagecontainer](pagecontainer) methods to navigate to another page.\n\n## Examples:\n\nChange the hash fragment twice then log the data provided with the navigate event when the browser moves backward through history.\n\n``` javascript\n// Starting at http://example.com/\n \n// Alter the URL: http://example.com/ => http://example.com/#foo\n$.mobile.navigate( \"#foo\", { info: \"info about the #foo hash\" });\n \n// Alter the URL: http://example.com/#foo => http://example.com/#bar\n$.mobile.navigate( \"#bar\" );\n \n// Bind to the navigate event\n$( window ).on( \"navigate\", function( event, data ) {\n  console.log( data.state.info );\n  console.log( data.state.direction )\n  console.log( data.state.url )\n  console.log( data.state.hash )\n});\n \n// Alter the URL: http://example.com/#bar => http://example.com/#foo\nwindow.history.back();\n \n// From the `navigate` binding on the window, console output:\n// => \"info about the #foo hash\"\n// => \"back\"\n// => \"http://example.com/#bar\n// => \"#bar\"\n```\n\nHijack a link click to use the navigate method and then load content.\n\n``` javascript\n// Starting at http://example.com/\n \n// Define a click binding for all anchors in the page\n$( \"a\" ).on( \"click\", function( event ) {\n \n  // Prevent the usual navigation behavior\n  event.preventDefault();\n \n  // Alter the url according to the anchor's href attribute, and\n  // store the data-foo attribute information with the url\n  $.mobile.navigate( this.attr( \"href\" ), { foo: this.attr( \"data-foo\" ) });\n \n  // Hypothetical content alteration based on the url. E.g, make\n  // an ajax request for JSON data and render a template into the page.\n  alterContent( this.attr( \"href\" ) );\n});\n```\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.navigate](https://api.jquerymobile.com/jQuery.mobile.navigate)"
- name: jQuery.mobile.path.get()
  id: jquery.mobile.path.get
  summary: 'Description: Utility method for determining the directory portion of an URL'
  description: "# jQuery.mobile.path.get()\n\n## jQuery.mobile.path.get( url )Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Description:** Utility method for determining the directory portion of an URL.\n\n- #### [jQuery.mobile.path.get( url )](#jQuery-mobile-path-get-url)\n\n  - **url**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\nUtility method for determining the directory portion of an URL. If the URL has no trailing slash, the last component of the URL is considered to be a file. This function returns the directory portion of a given URL.\n\n## Example:\n\nVarious uses of jQuery.mobile.path.get\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.path.get demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n  #myResult{\n    border: 1px solid;\n    border-color: #108040;\n    padding: 10px;\n    }\n  </style>\n</head>\n<body>\n \n  <div role=\"main\" class=\"ui-content\">\n    <input type=\"button\" value=\"http://foo.com/a/file.html\" id=\"button1\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"http://foo.com/a/\" id=\"button2\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"http://foo.com/a\" id=\"button3\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"//foo.com/a/file.html\" id=\"button4\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"/a/file.html\" id=\"button5\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"file.html\" id=\"button6\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"/file.html\" id=\"button7\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"?a=1&b=2\" id=\"button8\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"#foo\" id=\"button9\" class=\"myButton\" data-inline=\"true\">\n    <div id=\"myResult\">The result will be displayed here</div>\n  </div>\n \n<script>\n$(document).ready(function() {\n \n   $( \".myButton\" ).on( \"click\", function() {\n \n      var dirName = $.mobile.path.get( $( this ).attr( \"value\" ) );\n \n    $( \"#myResult\" ).html( String( dirName ) );\n })\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.path.get](https://api.jquerymobile.com/jQuery.mobile.path.get)"
- name: jQuery.mobile.path.getDocumentBase()
  id: jquery.mobile.path.getdocumentbase
  summary: 'Description: Utility method for retrieving the original document base URL'
  description: "# jQuery.mobile.path.getDocumentBase()\n\n## jQuery.mobile.path.getDocumentBase( asParsedObject )\n\n**Description:** Utility method for retrieving the original document base URL.\n\n- #### [jQuery.mobile.path.getDocumentBase( asParsedObject )](#jQuery-mobile-path-getDocumentBase-asParsedObject)\n\n  - **asParsedObject** (default: `false`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    The function normally returns the original document base URL as a string. However, if you specify a truthy value for this parameter, the original document base URL will be returned in a hash as a parsed URL.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.path.getDocumentBase](https://api.jquerymobile.com/jQuery.mobile.path.getDocumentBase)"
- name: jQuery.mobile.path.getDocumentUrl()
  id: jquery.mobile.path.getdocumenturl
  summary: 'Description: Utility method for retrieving the URL of the original document'
  description: "# jQuery.mobile.path.getDocumentUrl()\n\n## jQuery.mobile.path.getDocumentUrl( asParsedObject )\n\n**Description:** Utility method for retrieving the URL of the original document.\n\n- #### [jQuery.mobile.path.getDocumentUrl( asParsedObject )](#jQuery-mobile-path-getDocumentUrl-asParsedObject)\n\n  - **asParsedObject** (default: `false`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    The function normally returns the original document's URL as a string. However, if you specify a truthy value for this parameter, the original document's URL will be returned in a hash as a parsed URL.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.path.getDocumentUrl](https://api.jquerymobile.com/jQuery.mobile.path.getDocumentUrl)"
- name: jQuery.mobile.path.getLocation()
  id: jquery.mobile.path.getlocation
  summary: 'Description: Utility method for safely retrieving the current location'
  description: "# jQuery.mobile.path.getLocation()\n\n## jQuery.mobile.path.getLocation()Returns: [String](http://api.jquery.com/Types/#String)\n\n**Description:** Utility method for safely retrieving the current location.\n\n- #### [jQuery.mobile.path.getLocation()](#jQuery-mobile-path-getLocation)\n\n  - This method does not accept any arguments.\n\nThe browser's `location.href` may contain the username/password information. `getLocation()` always returns `location.href` stripped of the username/password information if present, ensuring that your code is not vulnerable to XSS attacks.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.path.getLocation](https://api.jquerymobile.com/jQuery.mobile.path.getLocation)"
- name: jQuery.mobile.path.isAbsoluteUrl()
  id: jquery.mobile.path.isabsoluteurl
  summary: 'Description: Utility method for determining if a URL is absolute'
  description: "# jQuery.mobile.path.isAbsoluteUrl()\n\n## jQuery.mobile.path.isAbsoluteUrl( url )Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Description:** Utility method for determining if a URL is absolute.\n\n- #### [jQuery.mobile.path.isAbsoluteUrl( url )](#jQuery-mobile-path-isAbsoluteUrl-url)\n\n  - **url**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\nUtility method for determining if a URL is absolute. This function returns a boolean true if the URL is absolute, false if not.\n\n## Example:\n\nVarious uses of jQuery.mobile.path.makeUrlAbsolute\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.path.isAbsoluteUrl demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n  #myResult{\n    border: 1px solid;\n    border-color: #108040;\n    padding: 10px;\n    }\n  </style>\n</head>\n<body>\n \n  <div role=\"main\" class=\"ui-content\">\n    <input type=\"button\" value=\"http://foo.com/a/file.html\" id=\"button1\" class=\"myButton\" data-inline=\"true\" />\n    <input type=\"button\" value=\"//foo.com/a/file.html\" id=\"button2\" class=\"myButton\" data-inline=\"true\" />\n    <input type=\"button\" value=\"/a/file.html\" id=\"button3\" class=\"myButton\" data-inline=\"true\" />\n    <input type=\"button\" value=\"file.html\" id=\"button4\" class=\"myButton\" data-inline=\"true\" />\n    <input type=\"button\" value=\"?a=1&b=2\" id=\"button5\" class=\"myButton\" data-inline=\"true\" />\n    <input type=\"button\" value=\"#foo\" id=\"button6\" class=\"myButton\" data-inline=\"true\" />\n    <div id=\"myResult\">The result will be displayed here</div>\n  </div>\n<script>\n$(document).ready(function() {\n \n   $( \".myButton\" ).on( \"click\", function() {\n \n      var isAbs = $.mobile.path.isAbsoluteUrl( $( this ).attr( \"value\" ) );\n \n    $( \"#myResult\" ).html( String( isAbs ) );\n })\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.path.isAbsoluteUrl](https://api.jquerymobile.com/jQuery.mobile.path.isAbsoluteUrl)"
- name: jQuery.mobile.path.isRelativeUrl()
  id: jquery.mobile.path.isrelativeurl
  summary: 'Description: Utility method for determining if a URL is a relative variant'
  description: "# jQuery.mobile.path.isRelativeUrl()\n\n## jQuery.mobile.path.isRelativeUrl( url )Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Description:** Utility method for determining if a URL is a relative variant.\n\n- #### [jQuery.mobile.path.isRelativeUrl( url )](#jQuery-mobile-path-isRelativeUrl-url)\n\n  - **url**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\nUtility method for determining if a URL is relative variant. This function returns a boolean true if the URL is relative, false if it is absolute.\n\n## Example:\n\nVarious uses of jQuery.mobile.path.isRelativeUrl\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.path.isRelativeUrl demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n  #myResult{\n    border: 1px solid;\n    border-color: #108040;\n    padding: 10px;\n    }\n  </style>\n</head>\n<body>\n \n  <div role=\"main\" class=\"ui-content\">\n    <input type=\"button\" value=\"http://foo.com/a/file.html\" id=\"button1\" class=\"myButton\" data-inline=\"true\" />\n    <input type=\"button\" value=\"//foo.com/a/file.html\" id=\"button2\" class=\"myButton\" data-inline=\"true\" />\n    <input type=\"button\" value=\"/a/file.html\" id=\"button3\" class=\"myButton\" data-inline=\"true\" />\n    <input type=\"button\" value=\"file.html\" id=\"button4\" class=\"myButton\" data-inline=\"true\" />\n    <input type=\"button\" value=\"?a=1&b=2\" id=\"button5\" class=\"myButton\" data-inline=\"true\" />\n    <input type=\"button\" value=\"#foo\" id=\"button6\" class=\"myButton\" data-inline=\"true\" />\n    <div id=\"myResult\">The result will be displayed here</div>\n  </div>\n<script>\n$(document).ready(function() {\n \n   $( \".myButton\" ).on( \"click\", function() {\n \n      var isRel = $.mobile.path.isRelativeUrl( $( this ).attr( \"value\" ) );\n \n    $( \"#myResult\" ).html( String( isRel ) );\n })\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.path.isRelativeUrl](https://api.jquerymobile.com/jQuery.mobile.path.isRelativeUrl)"
- name: jQuery.mobile.path.isSameDomain()
  id: jquery.mobile.path.issamedomain
  summary: 'Description: Utility method for determining if a URL has the same domain'
  description: "# jQuery.mobile.path.isSameDomain()\n\n## jQuery.mobile.path.isSameDomain( absUrl1, absUrl2 )Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Description:** Utility method for determining if a URL has the same domain.\n\n- #### [jQuery.mobile.path.isSameDomain( absUrl1, absUrl2 )](#jQuery-mobile-path-isSameDomain-absUrl1-absUrl2)\n\n  - **absUrl1**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n  - **absUrl2**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\nUtility method for determining if two different URLs share the same domain. This function returns a boolean `true` if the domain is the same, `false` if not.\n\n## Example:\n\nVarious uses of jQuery.mobile.path.isSameDomain\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.path.isSameDomain demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n  .versus {\n    display: inline-block;\n  }\n  .compare {\n    margin-bottom: 2.3em;\n  }\n  #myResult{\n    border: 1px solid;\n    border-color: #108040;\n    padding: 10px;\n  }\n  </style>\n</head>\n<body>\n \n  <div role=\"main\" class=\"ui-content ui-mini\">\n    <div>\n      <a href=\"javascript:void(0)\" class=\"ui-btn ui-corner-all ui-btn-inline ui-shadow compare\">Same Domain?</a>\n      <div class=\"versus\">\n        <pre><code>http://example.com/</code></pre>\n        <pre><code>http://slashdot.org/</code></pre>\n      </div>\n    </div>\n    <div>\n      <a href=\"javascript:void(0)\" class=\"ui-btn ui-corner-all ui-btn-inline ui-shadow compare\">Same Domain?</a>\n      <div class=\"versus\">\n        <pre><code>http://edition.cnn.com/</code></pre>\n        <pre><code>http://cnn.com/</code></pre>\n      </div>\n    </div>\n    <div>\n      <a href=\"javascript:void(0)\" class=\"ui-btn ui-corner-all ui-btn-inline ui-shadow compare\">Same Domain?</a>\n      <div class=\"versus\">\n        <pre><code>http://www.amazon.co.uk/</code></pre>\n        <pre><code>http://www.amazon.co.uk/</code></pre>\n      </div>\n    </div>\n    <div id=\"myResult\"></div>\n  </div>\n \n<script>\n  $(document).ready(function() {\n    $( \".compare\" ).on( \"click\", function() {\n      var urlContainers = $( this ).siblings( \".versus\" ).find( \"code\" ),\n        url1 = urlContainers.first().text(),\n        url2 = urlContainers.last().text();\n \n      $( \"#myResult\" ).text( String( $.mobile.path.isSameDomain( url1, url2 ) ) );\n    })\n  });\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.path.isSameDomain](https://api.jquerymobile.com/jQuery.mobile.path.isSameDomain)"
- name: jQuery.mobile.path.makePathAbsolute()
  id: jquery.mobile.path.makepathabsolute
  summary: 'Description: Utility method for converting a relative file or directory path into an absolute path'
  description: "# jQuery.mobile.path.makePathAbsolute()\n\n## jQuery.mobile.path.makePathAbsolute( relPath, absPath )Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Description:** Utility method for converting a relative file or directory path into an absolute path.\n\n- #### [jQuery.mobile.path.makePathAbsolute( relPath, absPath )](#jQuery-mobile-path-makePathAbsolute-relPath-absPath)\n\n  - **relPath**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n  - **absPath**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\nGiven a path that is relative to another absolute path, this utility will convert the relative path to an absolute path based on the given absolute path.\n\n## Example:\n\nVarious uses of jQuery.mobile.path.makePathAbsolute\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.path.makePathAbsolute demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n  #myResult{\n    border: 1px solid;\n    border-color: #108040;\n    padding: 10px;\n    }\n  </style>\n</head>\n<body>\n \n  <div role=\"main\" class=\"ui-content\">\n    <input type=\"button\" value=\"file.html relative to /a/b/c/bar.html\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"../../file.html relative to /a/b/c/bar.html\" class=\"myButton\" data-inline=\"true\">\n    <div id=\"myResult\">The result will be displayed here</div>\n  </div>\n<script>\n$(document).ready(function() {\n \n  $( \".myButton\" ).on( \"click\", function() {\n \n    var arguments = $( this ).attr( \"value\" ).split( \" relative to \" ),\n    absolutePath = $.mobile.path.makePathAbsolute( arguments[ 0 ], arguments[ 1 ] );\n \n  $( \"#myResult\" ).text( absolutePath );\n  })\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.path.makePathAbsolute](https://api.jquerymobile.com/jQuery.mobile.path.makePathAbsolute)"
- name: jQuery.mobile.path.makeUrlAbsolute()
  id: jquery.mobile.path.makeurlabsolute
  summary: 'Description: Utility method for converting a relative URL to an absolute URL'
  description: "# jQuery.mobile.path.makeUrlAbsolute()\n\n## jQuery.mobile.path.makeUrlAbsolute( relUrl, absUrl )Returns: [String](http://api.jquery.com/Types/#String)\n\n**Description:** Utility method for converting a relative URL to an absolute URL.\n\n- #### [jQuery.mobile.path.makeUrlAbsolute( relUrl, absUrl )](#jQuery-mobile-path-makeUrlAbsolute-relUrl-absUrl)\n\n  - **relUrl**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n  - **absUrl**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\nThis function returns a string that is an absolute version of the relative URL passed in.\n\n## Example:\n\nVarious uses of jQuery.mobile.path.makeUrlAbsolute\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.path.makeUrlAbsolute demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n  #myResult{\n    border: 1px solid;\n    border-color: #108040;\n    padding: 10px;\n    }\n  </style>\n</head>\n<body>\n \n  <div role=\"main\" class=\"ui-content\">\n    <p>The absoulte URL used is http://foo.com/a/b/c/test.html</p>\n    <input type=\"button\" value=\"file.html\" id=\"button1\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"../../foo/file.html\" id=\"button2\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"//foo.com/bar/file.html\" id=\"button3\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"?a=1&b=2\" id=\"button4\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"#bar\" id=\"button5\" class=\"myButton\" data-inline=\"true\">\n    <div id=\"myResult\">The result will be displayed here</div>\n  </div>\n<script>\n$(document).ready(function() {\n \n   $( \".myButton\" ).on( \"click\", function() {\n \n      var absUrl = $.mobile.path.makeUrlAbsolute( $( this ).attr( \"value\" ), \"http://foo.com/a/b/c/test.html\" );\n \n    $( \"#myResult\" ).html( absUrl );\n })\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.path.makeUrlAbsolute](https://api.jquerymobile.com/jQuery.mobile.path.makeUrlAbsolute)"
- name: jQuery.mobile.path.parseLocation()
  id: jquery.mobile.path.parselocation
  summary: 'Description: Utility method for retrieving the current location as a parsed object'
  description: "# jQuery.mobile.path.parseLocation()\n\n## jQuery.mobile.path.parseLocation()\n\n**Description:** Utility method for retrieving the current location as a parsed object.\n\n- #### [jQuery.mobile.path.parseLocation()](#jQuery-mobile-path-parseLocation)\n\n  - This method does not accept any arguments.\n\nThis method gets the current location via [`getLocation()`](jquery.mobile.path.getlocation) and returns the result of parsing this value via [`parseUrl()`](jquery.mobile.path.parseurl).\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.path.parseLocation](https://api.jquerymobile.com/jQuery.mobile.path.parseLocation)"
- name: jQuery.mobile.path.parseUrl()
  id: jquery.mobile.path.parseurl
  summary: 'Description: Utility method for parsing a URL and its relative variants into an object that makes accessing the components of the URL easy'
  description: "# jQuery.mobile.path.parseUrl()\n\n## jQuery.mobile.path.parseUrl( Url )Returns: [Object](http://api.jquery.com/Types/#Object)\n\n**Description:** Utility method for parsing a URL and its relative variants into an object that makes accessing the components of the URL easy.\n\n- #### [jQuery.mobile.path.parseUrl( Url )](#jQuery-mobile-path-parseUrl-Url)\n\n  - **Url**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\nUtility method for parsing a URL and its relative variants into an object that makes accessing the components of the URL easy. When parsing relative variants, the resulting object will contain empty string values for missing components (like protocol, host, etc). Also, when parsing URLs that have no authority, such as tel: urls, the pathname property of the object will contain the data after the protocol/scheme colon.\n\nThis function returns an object that contains the various components of the URL as strings. The properties on the object mimic the browser's location object:\n\n`hash`  \nThe fragment component of the URL, including the leading '#' character.\n\n`host`  \nThe host and port number of the URL.\n\n`hostname`  \nThe name of the host within the URL.\n\n`href`  \nThe original URL that was parsed.\n\n`pathname`  \nThe path of the file or directory referenced by the URL.\n\n`port`  \nThe port specified within the URL. Most URLs rely on the default port for the protocol used, so this may be an empty string most of the time.\n\n`protocol`  \nThe protocol for the URL including the trailing ':' character.\n\n`search`  \nThe query component of the URL including the leading '?' character.\n\nBut it also contains additional properties that provide access to additional components as well as some common forms of the URL developers access:\n\n`authority`  \nThe username, password, and host components of the URL\n\n`directory`  \nThe directory component of the pathname, minus any filename.\n\n`domain`  \nThe protocol and authority components of the URL.\n\n`filename`  \nThe filename within the pathname component, minus the directory.\n\n`hrefNoHash`  \nThe original URL minus the fragment (hash) components.\n\n`hrefNoSearch`  \nThe original URL minus the query (search) and fragment (hash) components.\n\n`password`  \nThe password contained within the authority component.\n\n`username`  \nThe username contained within the authority component.\n\n## Example:\n\nVarious uses of jQuery.mobile.path.parseUrl\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.path.parseUrl demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n  #myResult{\n    border: 1px solid;\n    border-color: #108040;\n    padding: 10px;\n    }\n  </style>\n</head>\n<body>\n \n  <div role=\"main\" class=\"ui-content\">\n    <p>The URL used is http://jblas:[emailÂ protected]:8080/mail/inbox?msg=1234&type=unread#msg-content</p>\n    <input type=\"button\" value=\"obj.href\" id=\"button1\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.hrefNoHash\" id=\"button2\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.hrefNoSearch\" id=\"button3\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.domain\" id=\"button4\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.protocol\" id=\"button5\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.authority\" id=\"button6\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.username\" id=\"button7\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.password\" id=\"button8\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.host\" id=\"button9\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.hostname\" id=\"button10\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.port\" id=\"button11\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.pathname\" id=\"button12\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.directory\" id=\"button13\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.filename\" id=\"button14\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.search\" id=\"button15\" class=\"myButton\" data-inline=\"true\">\n    <input type=\"button\" value=\"obj.hash\" id=\"button16\" class=\"myButton\" data-inline=\"true\">\n    <div id=\"myResult\">The result will be displayed here</div>\n  </div>\n<script>\n$(document).ready(function() {\n \n   $( \".myButton\" ).on( \"click\", function() {\n        // Parsing the Url below results an object that is returned with the\n    // following properties:\n    //\n    //  obj.href:         http://jblas:[emailÂ protected]:8080/mail/inbox?msg=1234&amp;type=unread#msg-content\n    //  obj.hrefNoHash:   http://jblas:[emailÂ protected]:8080/mail/inbox?msg=1234&amp;type=unread\n    //  obj.hrefNoSearch: http://jblas:[emailÂ protected]:8080/mail/inbox\n    //  obj.domain:       http://jblas:[emailÂ protected]:8080\n    //  obj.protocol:     http:\n    //  obj.authority:    jblas:[emailÂ protected]:8080\n    //  obj.username:     jblas\n    //  obj.password:     password\n    //  obj.host:         mycompany.com:8080\n    //  obj.hostname:     mycompany.com\n    //  obj.port:         8080\n    //  obj.pathname:     /mail/inbox\n    //  obj.directory:    /mail/\n    //  obj.filename:     inbox\n    //  obj.search:       ?msg=1234&amp;type=unread\n    //  obj.hash:         #msg-content</strong>\n \n    var obj = $.mobile.path.parseUrl(\"http://jblas:[emailÂ protected]:8080/mail/inbox?msg=1234&type=unread#msg-content\");\n    var myChoice = eval( this.value );\n \n    $( \"#myResult\" ).html( myChoice );\n })\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.path.parseUrl](https://api.jquerymobile.com/jQuery.mobile.path.parseUrl)"
- name: jQuery.mobile.silentScroll()
  id: jquery.mobile.silentscroll
  summary: 'Description: Scroll to a particular Y position without triggering scroll event listeners'
  description: "# jQuery.mobile.silentScroll()\n\n## jQuery.mobile.silentScroll( yPos )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Scroll to a particular Y position without triggering scroll event listeners.\n\n- #### [jQuery.mobile.silentScroll( yPos )](#jQuery-mobile-silentScroll-yPos)\n\n  - **yPos**\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\nScroll to a particular Y position without triggering scroll event listeners.\n\n## Example:\n\nscroll to Y 100px\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery.mobile.silentScroll demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\">\n  <div data-role=\"header\">\n    <h1>silentScroll() example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <a href=\"#\" onclick=\"$.mobile.silentScroll(100)\" data-role=\"button\">Go down 100 pixels</a>\n    <p> <br><br>Here, we have some text so that we can have <br>\n    some vertical space in order to demonstrate <br>\n    the silentScroll() method.<br><br></p>\n    <a href=\"#\" onclick=\"$.mobile.silentScroll(0)\" data-role=\"button\">Back to Top</a>\n  </div>\n  <div data-role=\"footer\">\n    <h4> </h4>\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/jQuery.mobile.silentScroll](https://api.jquerymobile.com/jQuery.mobile.silentScroll)"
- name: Listview
  id: listview
  summary: A listview is coded as a simple unordered list containing linked list items with a data-role="listview" attribute
  description: "# Listview Widget\n\n## Listview Widgetversion added: 1.0\n\n**Description:** Creates a listview widget\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[autodividers](#option-autodividers)\n\n[autodividersSelector](#option-autodividersSelector)\n\n[classes](#option-classes)\n\n[countTheme](#option-countTheme)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[dividerTheme](#option-dividerTheme)\n\n[filter](#option-filter)\n\n[filterCallback](#option-filterCallback)\n\n[filterPlaceholder](#option-filterPlaceholder)\n\n[filterReveal](#option-filterReveal)\n\n[filterTheme](#option-filterTheme)\n\n[hideDividers](#option-hideDividers)\n\n[icon](#option-icon)\n\n[initSelector](#option-initSelector)\n\n[inset](#option-inset)\n\n[splitIcon](#option-splitIcon)\n\n[splitTheme](#option-splitTheme)\n\n[theme](#option-theme)\n\n### Methods\n\n[refresh](#method-refresh)\n\n### Events\n\n[create](#event-create)\n\n### Basic linked lists\n\nA listview is coded as a simple unordered list containing linked list items with a `data-role=\"listview\"` attribute. jQuery Mobile will apply all the necessary styles to transform the list into a mobile-friendly listview with right arrow indicator that fills the full width of the browser window. When you tap on the list item, the framework will trigger a click on the first link inside the list item, issue an Ajax request for the URL in the link, create the new page in the DOM, then kick off a page transition. View the [data- attribute reference](data-attribute) to see all the possible attributes you can add to listviews.\n\nHere is the HTML markup for a basic linked list.\n\n``` markup\n<ul data-role=\"listview\">\n  <li><a href=\"acura.html\">Acura</a></li>\n  <li><a href=\"audi.html\">Audi</a></li>\n  <li><a href=\"bmw.html\">BMW</a></li>\n</ul>\n```\n\n### Theming\n\nThe listview widget uses the [jQuery Mobile CSS framework](theming/css-framework) to style its look and feel. If listview specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-listview`: Outermost container for listview widget\n  - `ui-listview-item-static`: Simplest list item of listview when there are no anchor tags nested inside an item\n  - `ui-listview-item-divider`: List item element which is a divider\n  - `ui-listview-item-has-alternate`: List item element which has more than one anchor elements\n    - `ui-listview-item-button`: First anchor element\n    - `ui-listview-item-split-button`: Last anchor element\n      - `ui-listview-item-split-icon`: Icon of last anchor element\n  - `ui-listview-item`: List item element which has only one anchor elements. If the listview item has count bubble, it will additionally have `ui-listview-item-has-count` class.\n    - `ui-listview-item-button`: Anchor element of the list item\n    - `ui-listview-item-icon`: Icon for the list item\n    - `ui-listview-item-count-bubble`: Count bubble for list item if present\n\n**Style note on non-inset lists**: all standard, non-inset lists have a -1em (16px) margin to negate the 1em padding on the content area to make lists extend to the edges of the screen. If you add other widgets above or below a list, the negative margin may make these elements overlap so you'll need to add additional spacing in your custom CSS.\n\n### Numbered lists\n\nLists can also be created from ordered lists (`ol`) which is useful when presenting items that are in a sequence such as search results or a movie queue. When the enhanced markup is applied to the listview, jQuery Mobile will try to first use CSS to add numbers to the list and, if not supported, will fall back to injecting numbers with JavaScript.\n\n### Read-only lists\n\nListviews can also be used to display a non-interactive list of items, usually as an inset list. This list is built from an unordered or ordered list that don't have linked list items. The framework styles static list items identically to list items containing links, but static items receive the body background color (`ui-body-a`) rather than the button background color (`ui-btn-a`).\n\n### Split button lists\n\nIn cases where there is more than one possible action per list item, a split button can be used to offer two independently clickable items - the list item and a small arrow icon in the far right. To make a split list item, simply add a second link inside the `li` and the framework will add a vertical divider line, style the link as an icon-only arrow button, and set the `title` attribute of the link to the text of the link for accessibility.\n\nYou can set the icon for the right split icon by specifying a `data-split-icon` attribute on the listview with an [icon name](classes#icons) you want. The default icon is \"carat-r\" but can be configured with the `splitIcon` [listview option](#option-splitIcon). By adding a `data-icon` attribute to the list item, you can set individual icons for each split. The theme swatch color of the split button defaults to \"b\" (blue in the default theme) but can be set by specifying a swatch letter with the `data-split-theme` attribute at the listview level or for individual splits with the `data-theme` attribute at the link level.\n\n### List dividers\n\nList items can be turned into dividers to organize and group the list items. This is done by adding the `data-role=\"list-divider\"` to any list item. These items are styled with the bar swatch \"b\" by default (blue in the default theme) but you can specify a theme for dividers by adding the `data-divider-theme` attribute to the list element (`ul` or `ol`) and specifying a theme swatch letter.\n\n### Autodividers\n\nA listview can be configured to automatically generate dividers for its items. This is done by adding a `data-autodividers=\"true\"` attribute to any listview.\n\nBy default, the text used to create dividers is the uppercased first letter of the item's text. Alternatively you can specify divider text by setting the `autodividersSelector` option on the listview programmatically. For example, to add a custom selector to the element with `id=\"mylistview\"`:\n\n``` javascript\n$( \"#mylistview\" ).listview({\n  autodividers: true,\n \n  // the selector function is passed a <li> element from the listview;\n  // it should return the appropriate divider text for that <li>\n  // element as a string\n  autodividersSelector: function ( li ) {\n    var out = /* generate a string based on the content of li */;\n    return out;\n  }\n});\n```\n\nNote that if you are using formatted list items that contain a floating element (for example `ui-li-aside`), this element precedes its siblings regardless of the order in your HTML markup. This results in the first character of the floating element being used as divider text. Therefore it is recommended to specify the divider text in this case.\n\nIf new list items are added to the list or removed from it, the dividers are *not* automatically updated: you should call `refresh()` on the listview to redraw the autodividers.\n\n### Hiding dividers\n\nThe listview hidedividers extension provides the option [`hideDividers`](#option-hideDividers). When set to true, and you call `.listview( \"refresh\" )` after hiding a list item by adding the class `ui-screen-hidden` to it, the extension will hide those dividers that are followed immediately by another divider.\n\n### Search filter\n\nAs of jQuery Mobile 1.4.0 this functionality has been transferred to the [filterable](filterable) widget, which provides a more generic solution.\n\n**Note:** Features such as automatic text input generation and special handling of listview dividers are deprecated as of 1.4.0. The documentation for [filterable](filterable) describes the migration path for listviews.\n\n### Filter reveal\n\nThe filter reveal feature makes is easy to build a simple autocomplete with local data. When a filterable list has the `data-filter-reveal=\"true\"` attribute, it will auto-hide all the list items when the search field is blank. The `data-filter-placeholder` attribute can be added to specify the placeholder text for the filter. If you need to search against a long list of values, we provide a way to create a filter with a remote data source.\n\n### Remote autocomplete with listview filter\n\nTo use the filter as an autocomplete that taps into remote data sources, you can use the `filterablebeforefilter` event to dynamically populate a listview as a user types a search query. This is useful when you have a very large data set like cities, zip codes, or products that can't be loaded up-front locally. Use the view source button to see the JavaScript that powers this demo.\n\nIf you have a small list of items, you can use the listview filter reveal option to make an autocomplete with local listview data.\n\n### Cities worldwide\n\nAfter you enter **at least three characters** the autocomplete function will show all possible matches.\n\n### Text formatting & counts\n\nThe framework includes text formatting conventions for common list patterns like header/descriptions, secondary information and counts through semantic HTML markup.\n\n- To add a count indicator to the right of the list item, wrap the number in an element with a class of `ui-li-count`\n- To add text hierarchy, use headings to increase font emphasis and use paragraphs to reduce emphasis.\n- Supplemental information can be added to the right of each list item by wrapping content in an element with a class of `ui-li-aside`\n\n### Thumbnails & icons\n\nTo add thumbnails to the left of a list item, simply add an image inside a list item as the first child element. The framework will scale the image to 80 pixels square. To use standard 16x16 pixel icons in list items, add the class of `ui-li-icon` to the image element.\n\n### Inset lists\n\nIf lists are embedded in a page with other types of content, an inset list packages the list into a block that sits inside the content area with a bit of margin and rounded corners (theme controlled). By adding the `data-inset=\"true\"` attribute to the list (ul or ol), applies the inset appearance.\n\n### Calling the listview plugin\n\nYou can directly call the listview plugin on any selector, just like any jQuery plugin:\n\n``` javascript\n$( \"#mylist\" ).listview();\n```\n\n### Updating lists\n\nIf you add items to a listview, you'll need to call the `refresh()` method on it to update the styles. For example:\n\n``` javascript\n$( \"#mylist\" ).listview( \"refresh\" );\n```\n\nNote that the `refresh()` method only affects **new nodes** appended to a list. This is done for performance reasons. Any list items already enhanced will be ignored by the refresh process. This means that if you change the contents or attributes on an already enhanced list item, these won't be reflected. If you want a list item to be updated, replace it with fresh markup before calling refresh.\n\nIf you initially want to hide a list item you can do this by adding a class of **`ui-screen-hidden`** to the li element. Using this class ensures the corner styling is applied correctly as well as border-bottom on the last visible item.\n\n## Options\n\n### autodividers\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nThis option is provided by the `listview.autodividers` extension.\n\nWhen set to true, dividers are automatically created for the listview items.\n\nThe function stored in the value of the [autodividersSelector](#option-autodividersSelector) option governs the text displayed on the dividers.\n\nThis option is also exposed as a data-attribute: `data-autodividers=\"true\"`.\n\n### autodividersSelector\n\n**Type:** [Function](http://api.jquery.com/Types/#Function)()\n\n**Default:** `n/a`\n\nThis option is provided by the `listview.autodividers` extension.\n\nThe value of this option is a function that returns a string. It receives a jQuery collection object containing an element. It computes the returned string from the element. The function is called for each list item in sequence, and a divider is created whenever the function returns a value for a list item that is different from the value it returned for the previous list item.\n\nThe function may return `null` for a given list item. In that case, no new divider is created even if the value returned for the previous list item was something other than `null`.\n\nThe default value of this option is a function that returns the capitalized first letter of the list item text:\n\n``` javascript\nfunction defaultAutodividersSelector( elt ) {\n  // look for the text in the given element\n  var text = $.trim( elt.text() ) || null;\n \n  if ( !text ) {\n    return null;\n  }\n \n  // create the text for the divider (first uppercased letter)\n  text = text.slice( 0, 1 ).toUpperCase();\n \n  return text;\n}\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n        \"ui-listview-inset\": \"ui-corner-all ui-shadow\"\n      }\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the listview with the `classes` option specified, changing the theming for the `ui-listview` class:\n\n``` javascript\n$( \".selector\" ).listview({\n  classes: {\n    \"ui-listview\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-listview` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).listview( \"option\", \"classes.ui-listview\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"classes.ui-listview\", \"highlight\" );\n```\n\n### countTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\n**This option is deprecated in 1.4.0 and will be removed in 1.5.0.**\n\nSets the color scheme (swatch) for the list item count bubble. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-count-theme=\"b\"`.\n\n(version deprecated: 1.4.0)\n\n**Code examples:**\n\nInitialize the listview with the `countTheme` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  countTheme: \"b\"\n});\n```\n\nGet or set the `countTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar countTheme = $( \".selector\" ).listview( \"option\", \"countTheme\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"countTheme\", \"b\" );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the listview with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).listview( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the listview if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the listview with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).listview( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"disabled\", true );\n```\n\n### dividerTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for list dividers. It accepts a single letter from a-z that maps to one of the swatches included in your theme.\n\nThis option is also exposed as a data attribute: `data-divider-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the listview with the `dividerTheme` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  dividerTheme: \"b\"\n});\n```\n\nGet or set the `dividerTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar dividerTheme = $( \".selector\" ).listview( \"option\", \"dividerTheme\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"dividerTheme\", \"b\" );\n```\n\n### filter\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\n**This option is deprecated in 1.4.0 and will be removed in 1.5.0. It has become the `initSelector` for the [filterable](filterable) widget.**\n\nAdds a search filter bar to listviews.\n\nThis option is also exposed as a data attribute: `data-filter=\"true\"`.\n\n(version deprecated: 1.4.0)\n\n**Code examples:**\n\nInitialize the listview with the `filter` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  filter: true\n});\n```\n\nGet or set the `filter` option, after initialization:\n\n``` javascript\n// Getter\nvar filter = $( \".selector\" ).listview( \"option\", \"filter\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"filter\", true );\n```\n\n### filterCallback\n\n**Type:** [Function](http://api.jquery.com/Types/#Function)()\n\n**Default:** `n/a`\n\n**This option is deprecated in 1.4.0 and will be removed in 1.5.0. It is now implemented in the [filterable](filterable#option-filterCallback) widget.**\n\nThe function to determine which rows to hide when the search filter textbox changes. The function accepts two arguments -- the text of the list item (or data-filtertext value if present), and the search string. Return true to hide the item, false to leave it visible.\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.listview.prototype.options.filterCallback = function( text, searchValue ) {\n    // only show items that *begin* with the search string\n    return text.toLowerCase().substring( 0, searchValue.length ) !== searchValue;\n  };\n});\n```\n\n(version deprecated: 1.4.0)\n\n### filterPlaceholder\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"Filter items...\"`\n\n**This option is deprecated in 1.4.0 and will be removed in 1.5.0.**\n\nThe placeholder text used in search filter bars.\n\nThis option is also exposed as a data attribute: `data-filter-placeholder=\"Search...\"`.\n\n(version deprecated: 1.4.0)\n\n**Code examples:**\n\nInitialize the listview with the `filterPlaceholder` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  filterPlaceholder: \"Search...\"\n});\n```\n\nGet or set the `filterPlaceholder` option, after initialization:\n\n``` javascript\n// Getter\nvar filterPlaceholder = $( \".selector\" ).listview( \"option\", \"filterPlaceholder\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"filterPlaceholder\", \"Search...\" );\n```\n\n### filterReveal\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `false`\n\n**This option is deprecated in 1.4.0 and will be removed in 1.5.0. It is now implemented in the [filterable](filterable#option-filterReveal) widget.**\n\nWhen `true`, and the search input string is empty, all items are hidden instead of shown.\n\nThis option is also exposed as a data attribute: `data-filter-reveal=\"true\"`.\n\n(version deprecated: 1.4.0)\n\n**Code examples:**\n\nInitialize the listview with the `filterReveal` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  filterReveal: true\n});\n```\n\nGet or set the `filterReveal` option, after initialization:\n\n``` javascript\n// Getter\nvar filterReveal = $( \".selector\" ).listview( \"option\", \"filterReveal\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"filterReveal\", true );\n```\n\n### filterTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\n**This option is deprecated in 1.4.0 and will be removed in 1.5.0.**\n\nSets the color scheme (swatch) for the search filter bar. It accepts a single letter from a-z that maps to one of the swatches included in your theme.\n\nThis option is also exposed as a data attribute: `data-filter-theme=\"a\"`.\n\n(version deprecated: 1.4.0)\n\n**Code examples:**\n\nInitialize the listview with the `filterTheme` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  filterTheme: \"b\"\n});\n```\n\nGet or set the `filterTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar filterTheme = $( \".selector\" ).listview( \"option\", \"filterTheme\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"filterTheme\", \"b\" );\n```\n\n### hideDividers\n\n**Type:**\n\n**Default:** `false`\n\nThis option is provided by the `listview.hidedividers` extension.\n\nWhen set to `true` and all list items residing under a given divider become hidden, then the divider itself is hidden.\n\nThis option is also exposed as a data-attribute: `data-hide-dividers=\"true\"`.\n\n**Code examples:**\n\nInitialize the listview with the `hideDividers` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  hideDividers: true\n});\n```\n\nGet or set the `hideDividers` option, after initialization:\n\n``` javascript\n// Getter\nvar hideDividers = $( \".selector\" ).listview( \"option\", \"hideDividers\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"hideDividers\", true );\n```\n\n### icon\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"carat-r\"`\n\nApplies an icon from the icon set to all linked list buttons.\n\nThis option is also exposed as a data attribute: `data-icon=\"star\"`.\n\n**Code examples:**\n\nInitialize the listview with the `icon` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  icon: \"star\"\n});\n```\n\nGet or set the `icon` option, after initialization:\n\n``` javascript\n// Getter\nvar icon = $( \".selector\" ).listview( \"option\", \"icon\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"icon\", \"star\" );\n```\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the listview widget is:\n\n``` javascript\n\":jqmData(role='listview')\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.listview.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates listview widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### inset\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nAdds inset list styles.\n\nThis option is also exposed as a data attribute: `data-inset=\"true\"`.\n\n**Code examples:**\n\nInitialize the listview with the `inset` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  inset: true\n});\n```\n\nGet or set the `inset` option, after initialization:\n\n``` javascript\n// Getter\nvar inset = $( \".selector\" ).listview( \"option\", \"inset\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"inset\", true );\n```\n\n### splitIcon\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"carat-r\"`\n\nApplies an icon from the icon set to all split list buttons.\n\nThis option is also exposed as a data attribute: `data-split-icon=\"star\"`.\n\n**Code examples:**\n\nInitialize the listview with the `splitIcon` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  splitIcon: \"star\"\n});\n```\n\nGet or set the `splitIcon` option, after initialization:\n\n``` javascript\n// Getter\nvar splitIcon = $( \".selector\" ).listview( \"option\", \"splitIcon\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"splitIcon\", \"star\" );\n```\n\n### splitTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for split list buttons. It accepts a single letter from a-z that maps to one of the swatches included in your theme.\n\nThis option is also exposed as a data attribute: `data-split-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the listview with the `splitTheme` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  splitTheme: \"b\"\n});\n```\n\nGet or set the `splitTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar splitTheme = $( \".selector\" ).listview( \"option\", \"splitTheme\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"splitTheme\", \"b\" );\n```\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the listview widget. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the listview with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).listview( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).listview( \"option\", \"theme\", \"b\" );\n```\n\n## Methods\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nupdate the listview.\n\nIf you manipulate a listview via JavaScript (e.g. add new LI elements), you must call the refresh method on it to update the visual styling.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).listview( \"refresh\" );\n```\n\n## Events\n\n### create( event, ui )Type: `listviewcreate`\n\ntriggered when a listview is created\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the listview with the create callback specified:\n\n``` javascript\n$( \".selector\" ).listview({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the listviewcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"listviewcreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of a listview\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>listview demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <ul data-role=\"listview\">\n      <li><a href=\"index.html\">Acura</a></li>\n      <li><a href=\"index.html\">Audi</a></li>\n      <li><a href=\"index.html\">BMW</a></li>\n      <li><a href=\"index.html\">Cadillac</a></li>\n      <li><a href=\"index.html\">Chrysler</a></li>\n    </ul>\n  </div>\n<div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/listview](https://api.jquerymobile.com/listview)"
- name: Loader
  id: loader
  summary: 'Description: Handles the task of displaying the loading dialog when jQuery Mobile pulls in content via Ajax'
  description: "# Loader Widget\n\n## Loader Widgetversion added: 1.2\n\n**Description:** Handles the task of displaying the loading dialog when jQuery Mobile pulls in content via Ajax.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[html](#option-html)\n\n[text](#option-text)\n\n[textVisible](#option-textVisible)\n\n[textonly](#option-textonly)\n\n[theme](#option-theme)\n\n### Methods\n\n[checkLoaderPosition](#method-checkLoaderPosition)\n\n[fakeFixLoader](#method-fakeFixLoader)\n\n[hide](#method-hide)\n\n[loading](#method-loading)\n\n[resetHtml](#method-resetHtml)\n\n[show](#method-show)\n\n### Events\n\n[create](#event-create)\n\n## The Loader Widget\n\nThe loader widget handles the task of displaying the loading dialog when jQuery Mobile pulls in content via Ajax. It can also be displayed manually for custom loading actions using the `$.mobile.loading` helper method (See the global method docs).\n\n### Theming\n\nThe loader widget uses the [jQuery Mobile CSS framework](theming/css-framework) to style its look and feel. If loader specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-loader`: Outermost container for loader widget. If `textvisible` option is used `ui-loader-verbose` class will be added. Additionally if `textonly` option is used then `ui-loader-textonly` class will added. In all other cases where text is not present `ui-loader-default` class will be added.\n  - `ui-loader-item`: Span element of the loader representing the icon\n  - `ui-loader-header`: Header element of the loader representing the text of the loader.\n\nTo configure the loading dialog globally the following settings can be defined on its prototype during the `mobileinit` event.\n\nBelow are the defaults:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.loader.prototype.options.text = \"loading\";\n  $.mobile.loader.prototype.options.textVisible = false;\n  $.mobile.loader.prototype.options.theme = \"a\";\n  $.mobile.loader.prototype.options.html = \"\";\n});\n```\n\nThese defaults will only be superseded by the method params object described in the global method docs under `$.mobile.loading`.\n\n``` javascript\n$.mobile.loading( \"show\", {\n  text: \"foo\",\n  textVisible: true,\n  theme: \"z\",\n  html: \"\"\n});\n```\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n        \"ui-loader\": \"ui-corner-all\",\n        \"ui-loader-icon\": \"ui-icon-loading\"\n      }\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the loader with the `classes` option specified, changing the theming for the `ui-loader` class:\n\n``` javascript\n$( \".selector\" ).loader({\n  classes: {\n    \"ui-loader\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-loader` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).loader( \"option\", \"classes.ui-loader\" );\n \n// Setter\n$( \".selector\" ).loader( \"option\", \"classes.ui-loader\", \"highlight\" );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the loader with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).loader({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).loader( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).loader( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the loader if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the loader with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).loader({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).loader( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).loader( \"option\", \"disabled\", true );\n```\n\n### html\n\n**Type:** [string](http://api.jquery.com/Types/#string)\n\n**Default:** `\"\"`\n\nIf this is set to a non empty string value, it will be used to replace the entirety of the loader's inner html.\n\n**Code examples:**\n\nInitialize the loader with the `html` option specified:\n\n``` javascript\n$( \".selector\" ).loader({\n  html: \"<span class='ui-icon ui-icon-loading'><img src='jquery-logo.png' /><h2>is loading for you ...</h2></span>\"\n});\n```\n\nGet or set the `html` option, after initialization:\n\n``` javascript\n// Getter\nvar html = $( \".selector\" ).loader( \"option\", \"html\" );\n \n// Setter\n$( \".selector\" ).loader( \"option\", \"html\", \"<span class='ui-icon ui-icon-loading'><img src='jquery-logo.png' /><h2>is loading for you ...</h2></span>\" );\n```\n\n### text\n\n**Type:** [string](http://api.jquery.com/Types/#string)\n\n**Default:** `loading`\n\nSets the text of the message.\n\n**Code examples:**\n\nInitialize the loader with the `text` option specified:\n\n``` javascript\n$( \".selector\" ).loader({\n  text: \"Loading Page...\"\n});\n```\n\nGet or set the `text` option, after initialization:\n\n``` javascript\n// Getter\nvar text = $( \".selector\" ).loader( \"option\", \"text\" );\n \n// Setter\n$( \".selector\" ).loader( \"option\", \"text\", \"Loading Page...\" );\n```\n\n### textVisible\n\n**Type:** [boolean](http://api.jquery.com/Types/#boolean)\n\n**Default:** `false`\n\nIf true, the text value will be used under the spinner.\n\n**Code examples:**\n\nInitialize the loader with the `textVisible` option specified:\n\n``` javascript\n$( \".selector\" ).loader({\n  textVisible: true\n});\n```\n\nGet or set the `textVisible` option, after initialization:\n\n``` javascript\n// Getter\nvar textVisible = $( \".selector\" ).loader( \"option\", \"textVisible\" );\n \n// Setter\n$( \".selector\" ).loader( \"option\", \"textVisible\", true );\n```\n\n### textonly\n\n**Type:** [boolean](http://api.jquery.com/Types/#boolean)\n\n**Default:** `false`\n\nIf true, the \"spinner\" image will be hidden when the message is shown.\n\n**Code examples:**\n\nInitialize the loader with the `textonly` option specified:\n\n``` javascript\n$( \".selector\" ).loader({\n  textonly: true\n});\n```\n\nGet or set the `textonly` option, after initialization:\n\n``` javascript\n// Getter\nvar textonly = $( \".selector\" ).loader( \"option\", \"textonly\" );\n \n// Setter\n$( \".selector\" ).loader( \"option\", \"textonly\", true );\n```\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the loader widget. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the loader with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).loader({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).loader( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).loader( \"option\", \"theme\", \"b\" );\n```\n\n## Methods\n\n### checkLoaderPosition()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCheck position of loader to see if it appears to be \"fixed\" to center.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the checkLoaderPosition method:\n\n``` javascript\n$( \".selector\" ).loader( \"checkLoaderPosition\" );\n```\n\n### fakeFixLoader()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nFor non-fixed supporting browsers. Position at y center (if scrollTop supported), above the activeBtn (if defined), or just 100px from top.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the fakeFixLoader method:\n\n``` javascript\n$( \".selector\" ).loader( \"fakeFixLoader\" );\n```\n\n### hide()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nHide the loader widget\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the hide method:\n\n``` javascript\n$( \".selector\" ).loader( \"hide\" );\n```\n\n### loading()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nShow or hide the loader message, which is configurable via `$.mobile.loader` prototype options as described in the widget docs or can be controlled via a params object.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the loading method:\n\n``` javascript\n$( \".selector\" ).loader( \"loading\" );\n```\n\n### resetHtml()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the resetHtml method:\n\n``` javascript\n$( \".selector\" ).loader( \"resetHtml\" );\n```\n\n### show()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the show method:\n\n``` javascript\n$( \".selector\" ).loader( \"show\" );\n```\n\n## Events\n\n### create( event, ui )Type: `loadingcreate`\n\nTriggered when a loader widget is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the loader with the create callback specified:\n\n``` javascript\n$( \".selector\" ).loader({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the loadingcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"loadingcreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nLoader Examples\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>loader demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div role=\"main\" class=\"ui-content\">\n    <div data-role=\"controlgroup\">\n      <button class=\"show-page-loading-msg\" data-theme=\"b\" data-textonly=\"false\" data-textvisible=\"false\" data-msgtext=\"\" data-icon=\"arrow-r\" data-iconpos=\"right\">Default loader</button>\n      <button class=\"show-page-loading-msg\" data-theme=\"b\" data-textonly=\"true\" data-textvisible=\"true\" data-msgtext=\"Text only loader\" data-icon=\"arrow-r\" data-iconpos=\"right\">Text only</button>\n      <button class=\"show-page-loading-msg\" data-theme=\"b\" data-textonly=\"false\" data-textvisible=\"true\" data-msgtext=\"Loading theme a\" data-icon=\"arrow-r\" data-iconpos=\"right\">Theme a</button>\n      <button class=\"show-page-loading-msg\" data-theme=\"a\" data-textonly=\"false\" data-textvisible=\"true\" data-msgtext=\"Loading theme b\" data-icon=\"arrow-r\" data-iconpos=\"right\">Theme b</button>\n      <button class=\"show-page-loading-msg\" data-theme=\"b\" data-textonly=\"true\" data-textvisible=\"true\" data-msgtext=\"Custom Loader\" data-icon=\"arrow-r\" data-html=\"<span class='ui-bar ui-overlay-a ui-corner-all'><img src='../resources/loader/jquery-logo.png' /><h2>is loading for you ...</h2></span>\" data-iconpos=\"right\">Custom HTML</button>\n      <button class=\"hide-page-loading-msg\" data-icon=\"delete\" data-iconpos=\"right\">Hide</button>\n    </div>\n  </div>\n</div>\n \n<script>\n$(document).on( \"click\", \".show-page-loading-msg\", function() {\n  var $this = $( this ),\n  theme = $this.jqmData( \"theme\" ) || $.mobile.loader.prototype.options.theme,\n  msgText = $this.jqmData( \"msgtext\" ) || $.mobile.loader.prototype.options.text,\n  textVisible = $this.jqmData( \"textvisible\" ) || $.mobile.loader.prototype.options.textVisible,\n  textonly = !!$this.jqmData( \"textonly\" );\n  html = $this.jqmData( \"html\" ) || \"\";\n$.mobile.loading( 'show', {\n  text: msgText,\n  textVisible: textVisible,\n  theme: theme,\n  textonly: textonly,\n  html: html\n  });\n})\n.on( \"click\", \".hide-page-loading-msg\", function() {\n  $.mobile.loading( \"hide\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/loader](https://api.jquerymobile.com/loader)"
- name: mobileinit event
  id: mobileinit
  summary: 'Description: Event indicating that jQuery Mobile has finished loading'
  description: "# mobileinit\n\n## mobileinit eventversion added: 1.0\n\n**Description:** Event indicating that jQuery Mobile has finished loading.\n\n- #### jQuery( \".selector\" ).on( \"mobileinit\", function( event ) { ... } )\n\nThis event is triggered after jQuery Mobile has finished loading, but before it has started enhancing the start page. Thus, handlers of this event have the opportunity to modify jQuery Mobile's global configuration [options](global-config) and all the widgets' default option values before they influence the library's behavior.\n\nYou must connect a handler to the mobileinit event before you load jQuery Mobile, because it is triggered as part of the library's loading process. The easiest way of achieving this is to place a `script` tag after the `script` tag that loads jQuery, and before the `script` tag that loads jQuery Mobile:\n\n``` markup\n<!doctype html>\n<html>\n<head>\n  <title>Example illustrating use of the \"mobileinit\" event</title>\n  <meta charset=utf-8 />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"stylesheet\"  href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\" />\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script>\n// Update configuration to our liking\n$( document ).on( \"mobileinit\", function() {\n \n  // We want popups to cover the page behind them with a dark background\n  $.mobile.popup.prototype.options.overlayTheme = \"b\";\n \n  // Set a namespace for jQuery Mobile data attributes\n  $.mobile.ns = \"jqm-\";\n});\n  </script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n  <div data-jqm-role=\"page\">\n    <div data-jqm-role=\"header\">\n      <h2>jQuery Mobile Example</h2>\n    </div>\n    <div data-jqm-role=\"content\">\n      <div id=\"the-popup\" data-jqm-role=\"popup\" data-jqm-position-to=\"window\">\n        <p>Example popup.</p>\n      </div>\n      <a href=\"#the-popup\" data-jqm-rel=\"popup\" class=\"ui-btn ui-corner-all ui-shadow\">Open Popup</a>\n    </div>\n  </div>\n</body>\n</html>\n```\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/mobileinit](https://api.jquerymobile.com/mobileinit)"
- name: Navbar
  id: navbar
  summary: jQuery Mobile has a very basic navbar widget that is useful for providing up to 5 buttons with optional icons in a bar, typically within a header or footer
  description: "# Navbar Widget\n\n## Navbar Widgetversion added: 1.0\n\n**Description:** Creates a navbar widget\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[defaults](#option-defaults)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[disabled](#option-disabled)\n\n[iconpos](#option-iconpos)\n\n[initSelector](#option-initSelector)\n\n### Methods\n\n### Events\n\n[create](#event-create)\n\n## Simple navbar\n\njQuery Mobile has a very basic navbar widget that is useful for providing up to 5 buttons with optional icons in a bar, typically within a header or footer. There is also a persistent navbar variation that works more like a tab bar that stays fixed as you navigate across pages.\n\nA navbar is coded as an unordered list of links wrapped in a container element that has the `data-role=\"navbar\"` attribute. This is an example of a two-button navbar:\n\n``` markup\n<div data-role=\"navbar\">\n  <ul>\n    <li><a href=\"a.html\">One</a></li>\n    <li><a href=\"b.html\">Two</a></li>\n  </ul>\n</div><!-- /navbar -->\n```\n\nWhen a link in the navbar is clicked it gets the active (selected) state. The `ui-btn-active` class is first removed from all anchors in the navbar before it is added to the activated link. If this is a link to another page, the class will be removed again after the transition has completed.\n\nTo set an item to the active state upon initialization of the navbar, add `class=\"ui-btn-active\"` to the corresponding anchor in your markup. Additionaly add a class of `ui-state-persist` to make the framework restore the active state each time the page is shown while it exists in the DOM. The example below shows a navbar with item \"One\" set to active:\n\n``` markup\n<div data-role=\"navbar\">\n  <ul>\n    <li><a href=\"a.html\" class=\"ui-btn-active ui-state-persist\">One</a></li>\n    <li><a href=\"b.html\">Two</a></li>\n  </ul>\n</div><!-- /navbar -->\n```\n\nNote that this on applies to navbars that are inside a page. If you use a true persistent toolbar that lives outside the page and want to set current item to the active state, you have to add a script that adds the `class=\"ui-btn-active\"` class.\n\nThe navbar items are set to divide the space evenly so in this case, each button is 1/2 the width of the browser window:\n\nAdding a third item will automatically make each button 1/3 the width of the browser window:\n\nAdding a fourth more item will automatically make each button 1/4 the width of the browser window:\n\nThe navbar maxes out with 5 items, each 1/5 the width of the browser window:\n\nIf more than 5 items are added, the navbar will simply wrap to multiple lines:\n\nNavbars with 1 item will simply render as 100%.\n\n### Navbars in headers\n\nIf you want to add a navbar to the top of the page, you can still have a page title and buttons. Just add the navbar container inside the header block, right after the title and buttons in the source order.\n\n### Navbars in footers\n\nIf you want to add a navbar to the bottom of the page so it acts more like a tab bar, simply wrap the navbar in a container with a `data-role=\"footer\"`\n\n``` markup\n<div data-role=\"footer\">\n  <div data-role=\"navbar\">\n    <ul>\n      <li><a href=\"#\">One</a></li>\n      <li><a href=\"#\">Two</a></li>\n      <li><a href=\"#\">Three</a></li>\n    </ul>\n  </div><!-- /navbar -->\n</div><!-- /footer -->\n```\n\n### Theming\n\nThe navbar widget uses the [jQuery Mobile CSS framework](theming/css-framework) to style its look and feel. If navbar specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-navbar`: Outermost container for navbar widget\n  - `ui-navbar-row`: Rows of navbar systems. This represents every navbar row except first\n  - `ui-navbar-row-n`: (n+1)th row of navbar system except first row\n\n### Icons in navbars\n\nIcons can be added to navbar items by adding the `data-icon` attribute specifying a standard mobile icon to each anchor. By default, icons are added above the text (`data-iconpos=\"top\"`). The following examples add icons to a navbar in a footer.\n\nThe icon position is set *on the navbar container* instead of for individual links within for visual consistency. For example, to place the icons below the labels, add the `data-iconpos=\"bottom\"` attribute to the navbar container.\n\n``` markup\n<div data-role=\"navbar\" data-iconpos=\"bottom\">\n```\n\nThis will result in a bottom icon alignment:\n\nThe icon position can be set to `data-iconpos=\"left\"`:\n\nOr the icon position can be set to `data-iconpos=\"right\"`:\n\n### Using 3rd party icon sets\n\nYou can add any of the popular icon libraries like Glyphish to achieve the iOS style tab that has large icons stacked on top of text labels. All that is required is a bit of custom styles to link to the icons and position them in the navbar. Here is an example using Glyphish icons and custom styles (view page source for styles) in our navbar:\n\nIcons by Joseph Wain / glyphish.com. Licensed under the Creative Commons Attribution 3.0 United States License.\n\n### Theming navbars\n\nNavbars inherit the theme swatch from their parent container, just like buttons. If a navbar is placed in the header or footer toolbar, it will inherit the default toolbar swatch \"a\" for bars unless you set this in the markup.\n\nHere are a few examples of navbars in various container swatches that automatically inherit their parent's swatch letter. Note that in these examples, instead of using a `data-theme` attribute, we're manually adding the swatch classes to apply the body swatch (`ui-body-a`) and the class to add the standard body padding (ui-body), but the inheritance works the same way:\n\nTo set the theme color for a navbar item, add the `data-theme` attribute to the individual links and specify a theme swatch. Note that applying a theme swatch to the navbar container is *not* supported.\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the navbar with the `classes` option specified, changing the theming for the `ui-navbar` class:\n\n``` javascript\n$( \".selector\" ).navbar({\n  classes: {\n    \"ui-navbar\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-navbar` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).navbar( \"option\", \"classes.ui-navbar\" );\n \n// Setter\n$( \".selector\" ).navbar( \"option\", \"classes.ui-navbar\", \"highlight\" );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the navbar with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).navbar({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).navbar( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).navbar( \"option\", \"defaults\", true );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the navbar with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).navbar({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).navbar( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).navbar( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the navbar if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the navbar with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).navbar({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).navbar( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).navbar( \"option\", \"disabled\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the navbar if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the navbar with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).navbar({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).navbar( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).navbar( \"option\", \"disabled\", true );\n```\n\n### iconpos\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"top\"`\n\nPositions the icon in the button. Possible values: left, right, top, bottom, none, notext. The notext value will display an icon-only button with no text feedback.\n\n``` markup\n<div data-role=\"navbar\" data-iconpos=\"bottom\">\n```\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the navbar widget is:\n\n``` javascript\n\":jqmData(role='navbar')\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.navbar.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates navbar widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n## Events\n\n### create()Type: `navbarcreate`\n\ntriggered when a navbar is created\n\n- This method does not accept any arguments.\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the navbar with the create callback specified:\n\n``` javascript\n$( \".selector\" ).navbar({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the navbarcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"navbarcreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of a navbar\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>navbar demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <p>Some Content here</p>\n  </div>\n  <div data-role=\"footer\">\n    <div data-role=\"navbar\">\n      <ul>\n        <li><a href=\"#\" class=\"ui-btn-active\">One</a></li>\n        <li><a href=\"#\">Two</a></li>\n      </ul>\n    </div><!-- /navbar -->\n  </div><!-- /footer -->\n</div><!-- /page -->\n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/navbar](https://api.jquerymobile.com/navbar)"
- name: navigate event
  id: navigate
  summary: The navigate event is a wrapper around both the hashchange and popstate events
  description: "# navigate\n\n## navigate eventversion added: 1.3\n\n**Description:** A wrapper event for both hashchange and popstate\n\nThe navigate event is a wrapper around both the `hashchange` and `popstate` events. In addition to providing a single event for all browsers it also provides a data object in both cases allowing for the unification of handlers. This feature is used by the `$.mobile.navigate` method to include directionality and URL information.\n\n## Example:\n\nChange the hash fragment twice then log the data provided with the navigate event when the browser moves backward through history. NOTE: The state will not be provided by default in browsers that only support hashchange. For that functionality please see the navigate method docs.\n\n``` javascript\n// Bind to the navigate event\n$( window ).on( \"navigate\", function( event, data ) {\n  console.log( data.state );\n});\n \n// Trigger a navigate event by pushing state\nwindow.history.pushState( { foo: \"bar\" }, \"Title\", \"http://example.com/#foo\" );\n \n// From the `navigate` binding on the window, console output:\n// => {}\n \n// Trigger a navigate event by pushing state\nwindow.history.pushState( {}, \"Title\", \"http://example.com/#bar\" );\n \n// From the `navigate` binding on the window, console output:\n// => {}\n \n// Trigger a navigate event by moving backward through history\nwindow.history.back();\n \n// From the `navigate` binding on the window, console output:\n// => { foo: \"bar\" }\n```\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/navigate](https://api.jquerymobile.com/navigate)"
- name: orientationchange event
  id: orientationchange
  summary: The new orientation of the device
  description: "# orientationchange event\n\n## orientationchange eventversion added: 1.0\n\n**Description:** Device portrait/landscape orientation event\n\n- #### jQuery( window ).on( \"orientationchange\", function( event ) { ... } )\n\n  Additional properties on the [event object](http://api.jquery.com/category/events/event-object/):\n\n  - **orientation**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The new orientation of the device. Possible values are `\"portrait\"` and `\"landscape\"`.\n\nThe jQuery Mobile `orientationchange` event triggers when a device orientation changes, either by turning the device vertically or horizontally. When bound to this event the callback function has the event object. The event object contains an `orientation` property equal to either `\"portrait\"` or `\"landscape\"`.\n\nNote that we bind to the browser's resize event when `orientationchange` is not natively supported or if `$.mobile.orientationChangeEnabled` is set to `false`.\n\n### orientationchange timing\n\nThe timing of the `orientationchange` event with relation to the change of the client height and width is different between browsers, though the current implementation will give you the correct value for `event.orientation` derived from `window.orientation`. This means that if your bindings are dependent on the height and width values you may want to disable `orientationChange` altogether with `$.mobile.orientationChangeEnabled = false` to let the fallback resize code trigger your bindings.\n\n## Example:\n\nVisit this from your orientation-enabled device to see it in action!\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>orientationchange demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<h1 id=\"orientation\">orientationchange Not Supported on this Device.</h1>\n \n<script>\n// Bind an event to window.orientationchange that, when the device is turned,\n// gets the orientation and displays it to on screen.\n$( window ).on( \"orientationchange\", function( event ) {\n  $( \"#orientation\" ).text( \"This device is in \" + event.orientation + \" mode!\" );\n});\n \n// You can also manually force this event to fire.\n$( window ).orientationchange();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/orientationchange](https://api.jquerymobile.com/orientationchange)"
- name: Page
  id: page
  summary: 'Description: Primary unit of content'
  description: "# Page Widget\n\n## Page Widgetversion added: 1.0\n\n**Description:** Primary unit of content.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[closeBtn](#option-closeBtn)\n\n[closeBtnText](#option-closeBtnText)\n\n[contentTheme](#option-contentTheme)\n\n[corners](#option-corners)\n\n[defaults](#option-defaults)\n\n[degradeInputs](#option-degradeInputs)\n\n[dialog](#option-dialog)\n\n[disabled](#option-disabled)\n\n[domCache](#option-domCache)\n\n[initSelector](#option-initSelector)\n\n[keepNative](#option-keepNative)\n\n[keepNativeDefault](#option-keepNativeDefault)\n\n[overlayTheme](#option-overlayTheme)\n\n[theme](#option-theme)\n\n### Methods\n\n[bindRemove](#method-bindRemove)\n\n[keepNativeSelector](#method-keepNativeSelector)\n\n[removeContainerBackground](#method-removeContainerBackground)\n\n[setContainerBackground](#method-setContainerBackground)\n\n### Events\n\n[beforecreate](#event-beforecreate)\n\n[create](#event-create)\n\n## Pages\n\nThe page widget is responsible for managing a single item in jQuery Mobile's page-based architecture. It is designed to support either single page widgets within a HTML document, or multiple local internal linked page widgets within a HTML document.\n\nThe goal of this model is to allow developers to create websites using best practices â where ordinary links will \"just work\" without any special configuration â while creating a rich, native-like experience that can't be achieved with standard HTTP requests.\n\nThe page widget will auto-enhance its content upon creation. This means that it will instantiate widgets on its child elements by invoking [`.enhanceWithin()`](enhancewithin) on itself.\n\n### Dialogs\n\nThe page widget has the option `dialog` which you can set to `true` to obtain a page styled like a dialog, such as in the example below:\n\n``` markup\n<div data-role=\"page\" data-dialog=\"true\">\n  <div data-role=\"header\">\n    <h2>Are you sure?</h2>\n  </div>\n  <div class=\"ui-content\" role=\"main\">\n    <h2>Are you sure you wish to exit the application?</h2>\n    <p>You have unsaved changes. If you exit without saving them, you will lose them.</p>\n    <div class=\"ui-grid-a\">\n      <div class=\"ui-block-a\">\n        <a href=\"#\" id=\"exit-button\" class=\"ui-btn ui-btn-b ui-shadow ui-corner-all\">Exit</a>\n      </div>\n      <div class=\"ui-block-b\">\n        <a href=\"#\" id=\"cancel-button\" class=\"ui-btn ui-shadow ui-corner-all\">Cancel</a>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\nYou can programmatically close a page styled as a dialog by navigating to another page. For example, you can use the `pagecontainer` [`change`](pagecontainer#method-change) method:\n\n``` javascript\n$( \":mobile-pagecontainer\" ).pagecontainer( \"change\", \"somepage.html\" );\n```\n\nYou can also simply go back:\n\n``` javascript\n$.mobile.back();\n```\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the page with the `classes` option specified, changing the theming for the `ui-page` class:\n\n``` javascript\n$( \".selector\" ).page({\n  classes: {\n    \"ui-page\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-page` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).page( \"option\", \"classes.ui-page\" );\n \n// Setter\n$( \".selector\" ).page( \"option\", \"classes.ui-page\", \"highlight\" );\n```\n\n### closeBtn\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"left\"`\n\nThis option is provided by the `dialog` extension.\n\nSets the position of the dialog close button in the header.\n\nPossible values:\n\n\"left\"  \nThe button will be placed on the left edge of the titlebar.\n\n\"right\"  \nThe button will be placed on the right edge of the titlebar.\n\n\"none\"  \nThe dialog will not have a close button.\n\nThis option is also exposed as a data attribute: `data-close-btn`.\n\n**Code examples:**\n\nInitialize the page with the `closeBtn` option specified:\n\n``` javascript\n$( \".selector\" ).page({\n  closeBtn: \"none\"\n});\n```\n\nGet or set the `closeBtn` option, after initialization:\n\n``` javascript\n// Getter\nvar closeBtn = $( \".selector\" ).page( \"option\", \"closeBtn\" );\n \n// Setter\n$( \".selector\" ).page( \"option\", \"closeBtn\", \"none\" );\n```\n\n### closeBtnText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"Close\"`\n\nThis option is provided by the `dialog` extension.\n\nCustomizes the text of the close button which is helpful for translating this into different languages. The close button is displayed as an icon-only button by default so the text isn't visible on-screen, but is read by screen readers so this is an important accessibility feature.\n\nThis option is also exposed as a data attribute: `data-close-btn-text=\"Fermer\"`.\n\n**Code examples:**\n\nInitialize the page with the `closeBtnText` option specified:\n\n``` javascript\n$( \".selector\" ).page({\n  closeBtnText: \"Fermer\"\n});\n```\n\nGet or set the `closeBtnText` option, after initialization:\n\n``` javascript\n// Getter\nvar closeBtnText = $( \".selector\" ).page( \"option\", \"closeBtnText\" );\n \n// Setter\n$( \".selector\" ).page( \"option\", \"closeBtnText\", \"Fermer\" );\n```\n\n### contentTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\n**Note:**This option is deprecated in 1.4.0 and will be removed in 1.5.0.\n\nSets the color scheme (swatch) for the content `div` of the page widget. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-content-theme=\"b\"`.\n\n(version deprecated: 1.4.0)\n\n**Code examples:**\n\nInitialize the page with the `contentTheme` option specified:\n\n``` javascript\n$( \".selector\" ).page({\n  contentTheme: \"b\"\n});\n```\n\nGet or set the `contentTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar contentTheme = $( \".selector\" ).page( \"option\", \"contentTheme\" );\n \n// Setter\n$( \".selector\" ).page( \"option\", \"contentTheme\", \"b\" );\n```\n\n### corners\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nThis option is provided by the `dialog` extension.\n\nSets whether to draw the dialog with rounded corners.\n\nThis option is also exposed as a data attribute: `data-corners=\"false\"`.\n\n**Code examples:**\n\nInitialize the page with the `corners` option specified:\n\n``` javascript\n$( \".selector\" ).page({\n  corners: false\n});\n```\n\nGet or set the `corners` option, after initialization:\n\n``` javascript\n// Getter\nvar corners = $( \".selector\" ).page( \"option\", \"corners\" );\n \n// Setter\n$( \".selector\" ).page( \"option\", \"corners\", false );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the page with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).page({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).page( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).page( \"option\", \"defaults\", true );\n```\n\n### degradeInputs\n\n**Type:**\n\n**Default:**\n\n**Note:**This option is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use [`$.mobile.degradeInputs`](global-config#degradeInputs) instead.\n\n(version deprecated: 1.4.0)\n\n### dialog\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nThis option is provided by the `dialog` extension.\n\nSets whether the page should be styled like a dialog.\n\nThis option is also exposed as a data attribute: `data-dialog=\"true\"`.\n\n**Code examples:**\n\nInitialize the page with the `dialog` option specified:\n\n``` javascript\n$( \".selector\" ).page({\n  dialog: true\n});\n```\n\nGet or set the `dialog` option, after initialization:\n\n``` javascript\n// Getter\nvar dialog = $( \".selector\" ).page( \"option\", \"dialog\" );\n \n// Setter\n$( \".selector\" ).page( \"option\", \"dialog\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the page if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the page with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).page({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).page( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).page( \"option\", \"disabled\", true );\n```\n\n### domCache\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSets whether to keep the page in the DOM after the user has navigated away from it.\n\nThis option is also exposed as a data attribute: `data-dom-cache=\"true\"`.\n\n**Code examples:**\n\nInitialize the page with the `domCache` option specified:\n\n``` javascript\n$( \".selector\" ).page({\n  domCache: true\n});\n```\n\nGet or set the `domCache` option, after initialization:\n\n``` javascript\n// Getter\nvar domCache = $( \".selector\" ).page( \"option\", \"domCache\" );\n \n// Setter\n$( \".selector\" ).page( \"option\", \"domCache\", true );\n```\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the page widget is:\n\n``` javascript\n\":jqmData(role='page')\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.page.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates page widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### keepNative\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `null`\n\n**Note:**This option is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use `$.mobile.keepNative` instead.\n\nThe value of this option is a selector that will be used in addition to the [keepNativeDefault](#option-keepNativeDefault) option to prevent elements matching it from being enhanced.\n\nThis option is also exposed as a data attribute: `data-keep-native=\".do-not-enhance`.\n\n(version deprecated: 1.4.0)\n\n**Code examples:**\n\nInitialize the page with the `keepNative` option specified:\n\n``` javascript\n$( \".selector\" ).page({\n  keepNative: \".do-not-enhance\"\n});\n```\n\nGet or set the `keepNative` option, after initialization:\n\n``` javascript\n// Getter\nvar keepNative = $( \".selector\" ).page( \"option\", \"keepNative\" );\n \n// Setter\n$( \".selector\" ).page( \"option\", \"keepNative\", \".do-not-enhance\" );\n```\n\n### keepNativeDefault\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `\":jqmData(role='none'), :jqmData(role='nojs')\"`\n\n**Note:**This option is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use `$.mobile.keepNative` instead.\n\nThe value of this option is a selector that will be used to prevent elements matching it from being enhanced.\n\nThis option is also exposed as a data attribute: `data-keep-native-default=\".do-not-enhance`.\n\n(version deprecated: 1.4.0)\n\n**Code examples:**\n\nInitialize the page with the `keepNativeDefault` option specified:\n\n``` javascript\n$( \".selector\" ).page({\n  keepNativeDefault: \".do-not-enhance\"\n});\n```\n\nGet or set the `keepNativeDefault` option, after initialization:\n\n``` javascript\n// Getter\nvar keepNativeDefault = $( \".selector\" ).page( \"option\", \"keepNativeDefault\" );\n \n// Setter\n$( \".selector\" ).page( \"option\", \"keepNativeDefault\", \".do-not-enhance\" );\n```\n\n### overlayTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"a\"`\n\nThis option is provided by the `dialog` extension.\n\nDialogs appear to be floating above an overlay layer. This overlay adopts the swatch \"a\" content color by default, but the data-overlay-theme attribute can be added to the element to set the overlay to any swatch letter.\n\nPossible values: swatch letter (a-z)\n\nThis option is also exposed as a data attribute: `data-overlay-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the page with the `overlayTheme` option specified:\n\n``` javascript\n$( \".selector\" ).page({\n  overlayTheme: \"b\"\n});\n```\n\nGet or set the `overlayTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar overlayTheme = $( \".selector\" ).page( \"option\", \"overlayTheme\" );\n \n// Setter\n$( \".selector\" ).page( \"option\", \"overlayTheme\", \"b\" );\n```\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"a\"`\n\nSets the color scheme (swatch) for the page widget. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the page with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).page({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).page( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).page( \"option\", \"theme\", \"b\" );\n```\n\n## Methods\n\n### bindRemove( callback )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\n- **callback**\n\n  Type: [Function](http://api.jquery.com/Types/#Function)()\n\n  An optional callback to replace the internal handling of the page removal. The internal callback only removes the page if it is not being hidden as part of a same-page transition.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).page( \"bindRemove\", function() { alert( 'Page hidden' ); } );\n```\n\n### keepNativeSelector()Returns: [Selector](http://api.jquery.com/Types/#Selector)\n\n**Note:**This method is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. The new [keepNative](global-config#keepNative) option replaces it.\n\nReturns the selector used to filter elements which are not to be enhanced.\n\n(version deprecated: 1.4.0)\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the keepNativeSelector method:\n\n``` javascript\n$( \".selector\" ).page( \"keepNativeSelector\" );\n```\n\n### removeContainerBackground()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\n**Note:**This method is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0.\n\nRemoves the background swatch from the page widget's container (usually the body).\n\n(version deprecated: 1.4.0)\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the removeContainerBackground method:\n\n``` javascript\n$( \".selector\" ).page( \"removeContainerBackground\" );\n```\n\n### setContainerBackground( theme )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\n**Note:**This method is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0.\n\nSets a new background swatch for the page widget's container (usually the body).\n\n(version deprecated: 1.4.0)\n\n- **theme**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n**Code examples:**\n\nInvoke the setContainerBackground method:\n\n``` javascript\n$( \".selector\" ).page( \"setContainerBackground\", \"b\" );\n```\n\n## Events\n\n### beforecreate( event )Type: `pagebeforecreate`\n\nTriggered before a page is created. If one of the handlers returns false, the page is not created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the page with the beforecreate callback specified:\n\n``` javascript\n$( \".selector\" ).page({\n  beforecreate: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagebeforecreate event:\n\n``` javascript\n$( \".selector\" ).on( \"pagebeforecreate\", function( event, ui ) {} );\n```\n\n### create( event )Type: `pagecreate`\n\nTriggered after a page has been created and enhancements to the page have been made.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the page with the create callback specified:\n\n``` javascript\n$( \".selector\" ).page({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecreate event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of a page.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>page demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>Page header (optional): Example page</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <h2>Page content</h2>\n    <p>Page content goes here.</p>\n  </div>\n  <div data-role=\"footer\">\n    <h1>Page footer (optional)</h1>\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/page](https://api.jquerymobile.com/page)"
- name: pagebeforechange event
  id: pagebeforechange
  summary: 'Description: Triggered twice during the page change cyle: First prior to any page loading or transition and next after page loading completes successfully, but before the browser history has been modified by the navigation process'
  description: "# pagebeforechange\n\n## pagebeforechange eventversion added: 1.0, deprecated: 1.4.3\n\n**Description:** Triggered twice during the page change cyle: First prior to any page loading or transition and next after page loading completes successfully, but before the browser history has been modified by the navigation process.\n\n- #### jQuery( \".selector\" ).on( \"pagebeforechange\", function( event ) { ... } )\n\nWhen received with `data.toPage` set to a string, the event indicates that navigation is about to commence. The value stored in `data.toPage` is the URL of the page that will be loaded.\n\nWhen received with `data.toPage` set to a jQuery object, the event indicates that the destination page has been loaded and navigation will continue.\n\nIf the page change cycle was initiated programmatically, and, instead of a URL a jQuery object containing a page was given, then the event will be triggered both times with `data.toPage` set to the jQuery object containing the destination page.\n\nThe pagebeforechange event is triggered either by explicit navigation on the part of the user (e.g. by clicking on a link or by running code that results in a call to the pagecontainer `change()` method), or by implicit navigation caused by the user clicking the browser's \"Back\" or \"Forward\" buttons.\n\nExplicit navigation results in both pagebeforechange events being triggered before a new entry is added to the browser's navigation history.\n\nImplicit navigation results in both pagebeforechange events being triggered after the browser's navigation history has been updated.\n\nIn addition to the `event` parameter, handlers of this event will receive a second parameter, `data`. The second parameter is an object containing the following properties:\n\n- `toPage` (object or string)\n  - This property represents the page the caller wishes to make active. It can be either a jQuery collection object containing the page DOM element, or an absolute/relative url to an internal or external page. The value exactly matches the 1st arg to the changePage() call that triggered the event.\n- `options` (object)\n  - This object contains the configuration options to be used for the current `changePage()` call.\n\nIt should be noted that callbacks can modify both the `toPage` and `options` properties to alter the behavior of the current `changePage()` call. So for example, the `toPage` can be mapped to a different url from within a callback to do a sort of redirect.\n\n**Note:** The triggering of this event is deprecated as of jQuery Mobile 1.4.3. It will no longer be triggered in 1.6.0.\n\nThe replacement for `pagebeforechange` is the [`pagecontainer`](pagecontainer) widget's `pagecontainerbeforechange` event. In jQuery Mobile \\>= 1.4.3, the two events are identical except for their name and the fact that `pagecontainerbeforechange` is triggered on the pagecontainer, whereas `pagebeforechange` is triggered on the page.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pagebeforechange](https://api.jquerymobile.com/pagebeforechange)"
- name: pagebeforecreate event
  id: pagebeforecreate
  summary: 'Description: Triggered on the page being initialized, before most plugin auto-initialization occurs'
  description: "# pagebeforecreate\n\n## pagebeforecreate eventversion added: 1.0\n\n**Description:** Triggered on the page being initialized, before most plugin auto-initialization occurs.\n\n- #### jQuery( \".selector\" ).on( \"pagebeforecreate\", function( event ) { ... } )\n\n**Note:** This event is part of the [`page`](page) widget as of jQuery Mobile 1.4.0. Please consult the documentation for the page widget's [implementation](page#event-create).\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pagebeforecreate](https://api.jquerymobile.com/pagebeforecreate)"
- name: pagebeforehide event
  id: pagebeforehide
  summary: 'Description: Triggered on the "fromPage" we are transitioning away from, before the actual transition animation is kicked off'
  description: "# pagebeforehide\n\n## pagebeforehide eventversion added: 1.0, deprecated: 1.4.0\n\n**Description:** Triggered on the \"fromPage\" we are transitioning away from, before the actual transition animation is kicked off.\n\n- #### jQuery( \".selector\" ).on( \"pagebeforehide\", function( event ) { ... } )\n\n**Note:** The triggering of this event is deprecated as of jQuery Mobile 1.4.0. It will no longer be triggered in 1.6.0.\n\nThe replacement for `pagebeforehide` is the [`pagecontainer`](pagecontainer) widget's `pagecontainerbeforehide` event. In jQuery Mobile 1.4.0, the two events are identical except for their name and the fact that `pagecontainerbeforehide` is triggered on the pagecontainer, whereas `pagebeforehide` is triggered on the page.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pagebeforehide](https://api.jquerymobile.com/pagebeforehide)"
- name: pagebeforeload event
  id: pagebeforeload
  summary: 'Description: Triggered before any load request is made'
  description: "# pagebeforeload\n\n## pagebeforeload eventversion added: 1.0, deprecated: 1.4.0\n\n**Description:** Triggered before any load request is made.\n\n- #### jQuery( \".selector\" ).on( \"pagebeforeload\", function( event ) { ... } )\n\n**Note:** The triggering of this event is deprecated as of jQuery Mobile 1.4.0. It will no longer be triggered in 1.6.0.\n\nThe replacement for `pagebeforeload` is the [`pagecontainer`](pagecontainer) widget's `pagecontainerbeforeload` event. In jQuery Mobile 1.4.0, the two events are identical except for their name and the fact that `pagecontainerbeforeload` is triggered on the pagecontainer, whereas `pagebeforeload` is triggered on the page.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pagebeforeload](https://api.jquerymobile.com/pagebeforeload)"
- name: pagebeforeshow event
  id: pagebeforeshow
  summary: 'Description: Triggered on the "toPage" we are transitioning to, before the actual transition animation is kicked off'
  description: "# pagebeforeshow\n\n## pagebeforeshow eventversion added: 1.0, deprecated: 1.4.0\n\n**Description:** Triggered on the \"toPage\" we are transitioning to, before the actual transition animation is kicked off.\n\n- #### jQuery( \".selector\" ).on( \"pagebeforeshow\", function( event ) { ... } )\n\n**Note:** The triggering of this event is deprecated as of jQuery Mobile 1.4.0. It will no longer be triggered in 1.6.0.\n\nThe replacement for `pagebeforeshow` is the [`pagecontainer`](pagecontainer) widget's `pagecontainerbeforeshow` event. In jQuery Mobile 1.4.0, the two events are identical except for their name and the fact that `pagecontainerbeforeshow` is triggered on the pagecontainer, whereas `pagebeforeshow` is triggered on the page.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pagebeforeshow](https://api.jquerymobile.com/pagebeforeshow)"
- name: pagechange event
  id: pagechange
  summary: 'Description: This event is triggered after the changePage() request has finished loading the page into the DOM and all page transition animations have completed'
  description: "# pagechange\n\n## pagechange eventversion added: 1.0, deprecated: 1.4.3\n\n**Description:** This event is triggered after the `changePage()` request has finished loading the page into the DOM and all page transition animations have completed.\n\n- #### jQuery( \".selector\" ).on( \"pagechange\", function( event ) { ... } )\n\nNote that any pageshow or pagehide events will have fired \\*BEFORE\\* this event is triggered. Callbacks for this particular event will be passed a data object as the 2nd arg. The properties for this object are as follows:\n\n- `toPage` (object or string)\n  - This property represents the page the caller wishes to make active. It can be either a jQuery collection object containing the page DOM element, or an absolute/relative url to an internal or external page. The value exactly matches the 1st arg to the changePage() call that triggered the event.\n- `options` (object)\n  - This object contains the configuration options to be used for the current `changePage()` call.\n\n**Note:** The triggering of this event is deprecated as of jQuery Mobile 1.4.3. It will no longer be triggered in 1.6.0.\n\nThe replacement for `pagechange` is the [`pagecontainer`](pagecontainer) widget's `pagecontainerchange` event. In jQuery Mobile \\>= 1.4.3, the two events are identical except for their name and the fact that `pagecontainerchange` is triggered on the pagecontainer, whereas `pagechange` is triggered on the page.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pagechange](https://api.jquerymobile.com/pagechange)"
- name: pagechangefailed event
  id: pagechangefailed
  summary: 'Description: Triggered when the changePage() request fails to load the page'
  description: "# pagechangefailed\n\n## pagechangefailed eventversion added: 1.0, deprecated: 1.4.0\n\n**Description:** Triggered when the changePage() request fails to load the page.\n\n- #### jQuery( \".selector\" ).on( \"pagechangefailed\", function( event ) { ... } )\n\n**Note:** The triggering of this event is deprecated as of jQuery Mobile 1.4.0. It will no longer be triggered in 1.6.0.\n\nThe replacement for `pagechangefailed` is the [`pagecontainer`](pagecontainer) widget's `pagecontainerchangefailed` event. In jQuery Mobile 1.4.0, the two events are identical except for their name and the fact that `pagecontainerchangefailed` is triggered on the pagecontainer, whereas `pagechangefailed` is triggered on the page.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pagechangefailed](https://api.jquerymobile.com/pagechangefailed)"
- name: Pagecontainer
  id: pagecontainer
  summary: 'Description: Manages a collection of pages'
  description: "# Pagecontainer Widget\n\n## Pagecontainer Widgetversion added: 1.4\n\n**Description:** Manages a collection of pages.\n\n## QuickNav\n\n### Options\n\n[classes](#option-classes)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[theme](#option-theme)\n\n### Methods\n\n[change](#method-change)\n\n[getActivePage](#method-getActivePage)\n\n[load](#method-load)\n\n### Events\n\n[beforechange](#event-beforechange)\n\n[beforehide](#event-beforehide)\n\n[beforeload](#event-beforeload)\n\n[beforeshow](#event-beforeshow)\n\n[beforetransition](#event-beforetransition)\n\n[change](#event-change)\n\n[changefailed](#event-changefailed)\n\n[create](#event-create)\n\n[hide](#event-hide)\n\n[load](#event-load)\n\n[loadfailed](#event-loadfailed)\n\n[remove](#event-remove)\n\n[show](#event-show)\n\n[transition](#event-transition)\n\n## Smooth Navigation Between Pages\n\n**Note:** The pagecontainer widget is designed to be a singleton instantiated by the framework on the `body` element. This limitation will be removed in future versions of jQuery Mobile.\n\njQuery Mobile's central abstraction is the use of multiple pages inside a single HTML document. The children of the `body` are all `div` elements that have been enhanced into [page](page) widgets. These are jQuery Mobile pages.\n\nOnly one page is visible at a time. Upon navigation, the currently visible page is hidden, and another page is shown. Moving from one page to another is accomplished via a transition. This is not possible when navigating between HTML documents via HTTP, because the browser discards all state associated with the source page when navigating to the target page, making it impossible to perform this task via a smooth transition effect such as a fade or a slide.\n\n## Multipage Documents\n\nIn its simplest form, the HTML document retrieved by the browser has a `body` consisting of several `div` elements which are enhanced using the `page` widget. Each such page has an `id` attribute to distinguish it from other pages.\n\nThe pages can be interlinked using anchors. When the user clicks such an anchor, a new history entry is created, and the page to which the anchor refers is displayed by means of a smooth transition from the previous page. The example below illustrates a multipage setup. **Note:** If the example below animates using a fade transition instead of the slide transition requested in the anchor, it is because your browser does not support CSS 3D transforms.\n\n``` markup\n<!doctype html>\n<html>\n<head>\n  <title>Multipage example</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\" />\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n  <div data-role=\"page\" id=\"page1\">\n    <div data-role=\"header\">\n      <h1>Page 1</h1>\n    </div>\n    <div role=\"main\" class=\"ui-content\">\n      <a href=\"#page2\" data-transition=\"slide\" class=\"ui-btn ui-corner-all ui-btn-inline\">Go To Page 2</a>\n    </div>\n  </div>\n  <div data-role=\"page\" id=\"page2\">\n    <div data-role=\"header\">\n      <h1>Page 2</h1>\n    </div>\n    <div role=\"main\" class=\"ui-content\">\n      <a href=\"#page1\" data-rel=\"back\" data-transition=\"slide\" class=\"ui-btn ui-corner-all ui-btn-inline\">Go Back To Page 1</a>\n    </div>\n  </div>\n</body>\n</html>\n```\n\n## Ajax page navigation\n\njQuery Mobile allows you to replace the browser's standard HTTP navigation with Ajax-based navigation. It overrides the browser's default link handling behavior. It intercepts clicks on anchors containing links to other documents and upon each such click it checks whether the document can be retrieved via Ajax. A link has to meet the following criteria in order for the document to which it links to be retrieved via Ajax:\n\n1.  The global configuration option `$.mobile.linkBindingEnabled` must be `true`.\n2.  The click event's default must not be prevented and it must be a left-click.\n3.  The link must not have any of the following attributes:\n    - `data-rel=\"back\"`\n    - `data-rel=\"external`\n    - `data-ajax=\"false\"`\n    - The `target` attribute must not be present\n4.  The global configuration option `$.mobile.ajaxEnabled` must be `true`.\n5.  The link must be to the same domain or it must be to a permitted cross-domain-request destination.\n\nIf these criteria are met jQuery Mobile retrieves the document via Ajax. It is important to realize that, while the document is retrieved in its entirety, only the first jQuery Mobile page is displayed. The header and the rest of the body are discarded. Thus, it is not possible to retrieve a multi-page document via Ajax, nor is it possible to execute scripts located in the header.\n\nAfter Ajax retrieval, jQuery Mobile displays the page via a transition. The transition can be specified on the link that opens the page using the `data-transition` attribute. If no transition is specified, then `$.mobile.defaultPageTransition` is used or, if the incoming page is a dialog, then `$.mobile.defaultDialogTransition` is used.\n\n**Note:** The dialog widget is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0.\n\nIf the browser supports the `replaceState` API the location bar is updated such that it displays the URL of the document that was retrieved via Ajax. This latter step has the following implications for site/application design:\n\n1.  Since the user can copy the URL of a page other than the start page, the application must be designed such that it can start from any of its pages. The best way to achieve this is to include jQuery Mobile and your application code in the header for all the pages of the site/application, and ensure initial state consistency during the `pagecreate` event.\n2.  If your application includes widgets shared by multiple pages, such as a global navigation menu contained in a popup, then you must make sure that each page contains a copy of the popup's markup, so that the first page that is loaded defines the popup and makes it available to subsequent pages loaded into the DOM via Ajax.\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the pagecontainer with the `classes` option specified, changing the theming for the `ui-pagecontainer` class:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  classes: {\n    \"ui-pagecontainer\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-pagecontainer` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).pagecontainer( \"option\", \"classes.ui-pagecontainer\" );\n \n// Setter\n$( \".selector\" ).pagecontainer( \"option\", \"classes.ui-pagecontainer\", \"highlight\" );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the pagecontainer with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).pagecontainer( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).pagecontainer( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the pagecontainer if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the pagecontainer with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).pagecontainer( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).pagecontainer( \"option\", \"disabled\", true );\n```\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `a`\n\nSets the color scheme (swatch) for the pagecontainer widget. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the pagecontainer with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).pagecontainer( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).pagecontainer( \"option\", \"theme\", \"b\" );\n```\n\n## Methods\n\n### change( to, options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\n- **to**\n\n  Type: [String](http://api.jquery.com/Types/#String) or [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  The URL to which to navigate. This can be specified either as a string, or as a jQuery collection object containing the page DOM element.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **allowSamePageTransition** (default: `false`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    By default, `change()` ignores requests to change to the current active page. Setting this option to `true` allows the request to execute. Developers should note that some of the page transitions assume that the fromPage and toPage of a `change()` request are different, so they may not animate as expected. Developers are responsible for either providing a proper transition, or turning it off for this specific case.\n\n  - **changeHash** (default: `true`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    Whether to create a new browser history entry as part of the navigation sequence. Possible values:\n    |       |                                                                                                                                                                                                                                                                           |\n    |-------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n    | true  | The pagecontainer will create a browser history entry as part of moving to the desired page. Thus, the user can use the browser's \"Back\" and \"Forward\" buttons to navigate between the source page and the destination page.                                              |\n    | false | The pagecontainer will navigate to the desired page without creating a new browser history entry. The desired page replaces the current page, and the browser's \"Back\" and \"Forward\" buttons cannot be used to navigate between the source page and the destination page. |\n\n  - **data** (default: `undefined`)\n\n    Type: [Object](http://api.jquery.com/Types/#Object) or [String](http://api.jquery.com/Types/#String)\n\n    The data to send with an Ajax page request.\n\n  - **dataUrl** (default: `undefined`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The URL to use when updating the browser location upon `change()` completion. If not specified, the value of the data-url attribute of the page element is used.\n\n  - **loadMsgDelay** (default: `50`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The number of milliseconds by which to delay the appearance of the loading message. If the load completes within this time, no loading message is displayed.\n\n  - **reloadPage** (default: `false`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    **Note:** This property is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use property `reload` instead.\n\n    Whether to force a reload of the page even when it is already in the DOM. Used only when the 'url' argument is a URL.\n\n    (version deprecated: 1.4.0)\n\n  - **reload** (default: `false`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    Whether to force a reload of the page even when it is already in the DOM. Used only when the 'url' argument is a URL.\n\n  - **reverse** (default: `false`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    Whether the transition shall be applied in reverse. By setting this value to `true` you can simulate returning to a previous page, even when the actual navigation sequence is in a forward direction.\n\n  - **role** (default: `undefined`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The data-role value to be used when displaying the page. By default this is `undefined` which means rely on the value of the @data-role attribute defined on the element.\n\n  - **showLoadMsg** (default: `false`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    Whether to display a message indicating that the page is loading.\n\n  - **transition** (default: `undefined`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The transition that should be used for the page change. If the value is `undefined`, the value of `$.mobile.defaultPageTransition` (currently `\"fade\"`) will be used for pages, and `$.mobile.defaultDialogTransition` (currently `\"pop\"`) will be used for dialogs.\n    Default value: `undefined`\n\n  - **type** (default: `\"get\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The type of HTTP request to use (\"get\", \"post\", etc.). Used only when the 'to' argument is a URL.\n\n**Code examples:**\n\nInvoke the change method:\n\n``` javascript\n$( \".selector\" ).pagecontainer( \"change\" );\n```\n\nProgrammatically change from one page to another.\n\n``` javascript\n$( \":mobile-pagecontainer\" ).pagecontainer( \"change\", \"confirm.html\", { role: \"dialog\" } );\n```\n\n### getActivePage()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturn the currently active page.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the getActivePage method:\n\n``` javascript\n$( \".selector\" ).pagecontainer( \"getActivePage\" );\n```\n\n### load( url, options )Returns: [Promise](http://api.jquery.com/Types/#Promise)\n\n- **url**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The URL from which to load the page. This can be an absolute or a relative URL (e.g. \"about/us.html\").\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A hash containing options that affect the behavior of the method.\n\n  - **type** (default: `\"get\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The type of HTTP request to use (\"get\", \"post\", etc.).\n\n  - **data** (default: `undefined`)\n\n    Type: [Object](http://api.jquery.com/Types/#Object) or [String](http://api.jquery.com/Types/#String)\n\n    The data to send with an Ajax page request.\n\n  - **reloadPage** (default: `false`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    **Note:** This property is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use property `reload` instead.\n\n    Whether to force a reload of the page even when it is already in the DOM. Used only when the 'url' argument is a URL.\n\n    (version deprecated: 1.4.0)\n\n  - **reload** (default: `false`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    Whether to force a reload of the page even when it is already in the DOM. Used only when the 'url' argument is a URL.\n\n  - **role** (default: `undefined`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The data-role value to be used when displaying the page. By default this is `undefined` which means rely on the value of the @data-role attribute defined on the element.\n\n  - **showLoadMsg** (default: `true`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    Whether to display a message indicating that the page is loading.\n\n  - **loadMsgDelay** (default: `50`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The number of milliseconds by which to delay the appearance of the loading message. If the load completes within this time, no loading message is displayed.\n\n**Code examples:**\n\nInvoke the load method:\n\n``` javascript\n$( \".selector\" ).pagecontainer( \"load\" );\n```\n\nLoad an external page, enhance its content, and insert it into the DOM.\n\n``` javascript\n$( \":mobile-pagecontainer\" ).pagecontainer( \"load\", \"confirm.html\", { role: \"dialog\" } );\n```\n\n## Events\n\n### beforechange( event, ui )Type: `pagecontainerbeforechange`\n\nTriggered during the page change cyle prior to any page loading or transition.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **toPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery) or [String](http://api.jquery.com/Types/#String)\n\n    This property represents the page the caller wishes to make active. It can be either a jQuery collection object containing the page DOM element, or an absolute/relative url to an internal or external page. The value exactly matches the 1st arg to the changePage() call that triggered the event.\n\n  - **prevPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the from page DOM element.\n\n  - **options**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The configuration options to be used for the current `change()` call\n\n**Code examples:**\n\nInitialize the pagecontainer with the beforechange callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  beforechange: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainerbeforechange event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainerbeforechange\", function( event, ui ) {} );\n```\n\n### beforehide( event, ui )Type: `pagecontainerbeforehide`\n\nTriggered before the actual transition animation is kicked off.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **nextPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the destination page DOM element.\n\n  - **toPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the destination page DOM element.\n\n  - **prevPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the from page DOM element.\n\n**Code examples:**\n\nInitialize the pagecontainer with the beforehide callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  beforehide: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainerbeforehide event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainerbeforehide\", function( event, ui ) {} );\n```\n\n### beforeload( event, ui )Type: `pagecontainerbeforeload`\n\nTriggered before any load request is made.\n\nCallbacks bound to this event can call `preventDefault()` on the event to indicate that they are handling the load request. Callbacks that do this **MUST** make sure they call `resolve()` or `reject()` on the deferred object reference contained in the object passed to the callback via its `ui` parameter.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **url**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The absolute or relative URL that was passed into [load()](#method-load) by the caller.\n\n  - **absUrl**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The absolute version of the url. If url was relative, it is resolved against the url used to load the current active page.\n\n  - **dataUrl**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The filtered version of absUrl to be used when identifying the page and updating the browser location when the page is made active.\n\n  - **toPage**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    A string containing the url being loaded\n\n  - **prevPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the from page DOM element.\n\n  - **deferred**\n\n    Type: [Deferred](http://api.jquery.com/Types/#Deferred)\n\n    Deferred to be resolved or rejected upon completion of content load. Callbacks that call `preventDefault()` on the event **MUST** call `resolve()` or `reject()` on this object so that `change()` requests resume processing. Deferred object observers expect the deferred object to be resolved like this:\n    ``` javascript\n    $( document ).on( \"pagecontainerbeforeload\", function( event, data ) {\n     \n      // Let the framework know we're going to handle the load.\n     \n      event.preventDefault();\n     \n      // ... load the document then insert it into the DOM ...\n      // at some point, either in this callback, or through\n      // some other async means, call resolve, passing in\n      // the following args, plus a jQuery collection object\n      // containing the DOM element for the page.\n     \n      data.deferred.resolve( data.absUrl, data.options, page );\n     \n    });\n    ```\n\n    or rejected like this:\n\n    ``` javascript\n    $( document ).on( \"pagecontainerbeforeload\", function( event, data ) {\n     \n      // Let the framework know we're going to handle the load.\n     \n      event.preventDefault();\n     \n      // ... load the document then insert it into the DOM ...\n      // at some point, if the load fails, either in this\n      // callback, or through some other async means, call\n      // reject like this:\n     \n      data.deferred.reject( data.absUrl, data.options );\n     \n    });\n    ```\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    This object contains the options that were passed into [load()](#method-load).\n\n**Code examples:**\n\nInitialize the pagecontainer with the beforeload callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  beforeload: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainerbeforeload event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainerbeforeload\", function( event, ui ) {} );\n```\n\n### beforeshow( event, ui )Type: `pagecontainerbeforeshow`\n\nTriggered before the actual transition animation is kicked off.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **prevPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the source page DOM element.\n\n  - **toPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the destination page DOM element.\n\n**Code examples:**\n\nInitialize the pagecontainer with the beforeshow callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  beforeshow: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainerbeforeshow event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainerbeforeshow\", function( event, ui ) {} );\n```\n\n### beforetransition( event, ui )Type: `pagecontainerbeforetransition`\n\nTriggered before the transition between two pages starts.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **absUrl**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The absolute version of the url. If url was relative, it is resolved against the url used to load the current active page.\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The configuration options to be used for the current `change()` call.\n\n  - **originalHref**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The href from the link that started the page change process.\n\n  - **toPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the destination page DOM element.\n\n  - **prevPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the from page DOM element.\n\n**Code examples:**\n\nInitialize the pagecontainer with the beforetransition callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  beforetransition: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainerbeforetransition event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainerbeforetransition\", function( event, ui ) {} );\n```\n\n### change( event, ui )Type: `pagecontainerchange`\n\nThis event is triggered after the change request has finished loading the page into the DOM and all page transition animations have completed.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **prevPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the source page DOM element.\n\n  - **toPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the destination page DOM element.\n\n**Code examples:**\n\nInitialize the pagecontainer with the change callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  change: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainerchange event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainerchange\", function( event, ui ) {} );\n```\n\n### changefailed( event, ui )Type: `pagecontainerchangefailed`\n\nTriggered when the `change()` request fails to load the page.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **toPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery) or [String](http://api.jquery.com/Types/#String)\n\n    This property represents the page the caller wishes to make active. It may be either a jQuery collection object containing the page DOM element, or an absolute/relative url to an internal or external page, in which case the value exactly matches the first argument to the `change()` call that triggered the event.\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The configuration options to be used for the current `change()` call.\n\n  - **prevPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the from page DOM element.\n\n**Code examples:**\n\nInitialize the pagecontainer with the changefailed callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  changefailed: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainerchangefailed event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainerchangefailed\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `pagecontainercreate`\n\nTriggered when the pagecontainer is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the pagecontainer with the create callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainercreate event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainercreate\", function( event, ui ) {} );\n```\n\n### hide( event, ui )Type: `pagecontainerhide`\n\nTriggered after the transition animation has completed. **Note:** Unlike the deprecated `pagehide` event, this event is not triggered on the \"fromPage\" but the pagecontainer widget's element.\n\nNote that this event will not be dispatched during the transition of the first page at application startup since there is no previously active page.\n\nYou can access the `nextPage` properties via the second argument of a bound callback function. For example:\n\n``` javascript\n$( \":mobile-pagecontainer\" ).on( \"pagecontainerhide\", function( event, ui ) {\n  alert( \"This page was just shown: \" + ui.nextPage );\n});\n```\n\nFor these handlers to be invoked during the initial page load, you must bind them before jQuery Mobile executes. This can be done in the `mobileinit` handler, as described on the global config page.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **nextPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the page DOM element to which we just transitioned.\n\n  - **toPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the destination page DOM element.\n\n  - **prevPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the from page DOM element.\n\n**Code examples:**\n\nInitialize the pagecontainer with the hide callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  hide: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainerhide event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainerhide\", function( event, ui ) {} );\n```\n\n### load( event, ui )Type: `pagecontainerload`\n\nTriggered after the page is successfully loaded and inserted into the DOM.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **url**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The absolute or relative URL that was passed into [load()](#method-load) by the caller.\n\n  - **absUrl**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The absolute version of the url. If url was relative, it is resolved against the url used to load the current active page.\n\n  - **dataUrl**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The filtered version of absUrl to be used when identifying the page and updating the browser location when the page is made active.\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    This object contains the options that were passed into [load()](#method-load).\n\n  - **xhr**\n\n    Type: [XMLHttpRequest](http://api.jquery.com/Types/#XMLHttpRequest)\n\n    The jQuery XMLHttpRequest object used when attempting to load the page. This is what gets passed as the 3rd argument to the framework's `$.ajax()` success callback.\n\n  - **textStatus**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    According to the jQuery Core [documentation](https://api.jquery.com/jQuery.ajax/), this will be a string describing the status. This is what gets passed as the 2nd argument to the framework's `$.ajax()` error callback. It may also be `null`.\n\n  - **toPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the destination page DOM element.\n\n  - **prevPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the from page DOM element in a detached state.\n\n**Code examples:**\n\nInitialize the pagecontainer with the load callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  load: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainerload event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainerload\", function( event, ui ) {} );\n```\n\n### loadfailed( event, ui )Type: `pagecontainerloadfailed`\n\nTriggered if the page load request failed.\n\nBy default, after dispatching this event, the framework will display a page failed message and call reject() on the deferred object contained within the event's `ui` parameter. Callbacks can prevent this default behavior from executing by calling `preventDefault()` on the event.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **url**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The absolute or relative URL that was passed into [load()](#method-load) by the caller.\n\n  - **absUrl**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The absolute version of the url. If url was relative, it is resolved against the url used to load the current active page.\n\n  - **dataUrl**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The filtered version of absUrl to be used when identifying the page and updating the browser location when the page is made active.\n\n  - **toPage**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    A string containing the url the was attempted to be loaded.\n\n  - **prevPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the from page DOM element.\n\n  - **deferred**\n\n    Type: [Deferred](http://api.jquery.com/Types/#Deferred)\n\n    Callbacks that call `preventDefault()` on the event, **MUST** call `resolve()` or `reject()` on this object so that `change()` requests resume processing. Deferred object observers expect the deferred object to be resolved like this:\n    ``` javascript\n    $( document ).on( \"pageloadfailed\", function( event, data ) {\n     \n      // Let the framework know we're going to handle things.\n     \n      event.preventDefault();\n     \n      // ... attempt to load some other page ...\n      // at some point, either in this callback, or through\n      // some other async means, call resolve, passing in\n      // the following args, plus a jQuery collection object\n      // containing the DOM element for the page.\n     \n      data.deferred.resolve( data.absUrl, data.options, page );\n     \n    });\n    ```\n\n    or rejected like this:\n\n    ``` javascript\n    $( document ).on( \"pageloadfailed\", function( event, data ) {\n     \n      // Let the framework know we're going to handle things.\n     \n      event.preventDefault();\n     \n      // ... attempt to load some other page ...\n      // at some point, if the load fails, either in this\n      // callback, or through some other async means, call\n      // reject like this:\n     \n      data.deferred.reject( data.absUrl, data.options );\n     \n    });\n    ```\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    This object contains the options that were passed into [load()](#method-load).\n\n  - **xhr**\n\n    Type: [XMLHttpRequest](http://api.jquery.com/Types/#XMLHttpRequest)\n\n    The jQuery XMLHttpRequest object used when attempting to load the page. This is what gets passed as the first argument to the framework's `$.ajax()` error callback.\n\n  - **textStatus**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    According to the jQuery Core [documentation](https://api.jquery.com/jQuery.ajax/), possible values for this property, aside from `null`, are \"timeout\", \"error\", \"abort\", and \"parsererror\". This is what gets passed as the 2nd argument to the framework's `$.ajax()` error callback.\n\n  - **errorThrown**\n\n    Type: [String](http://api.jquery.com/Types/#String) or [Object](http://api.jquery.com/Types/#Object)\n\n    According to the jQuery Core [documentation](https://api.jquery.com/jQuery.ajax/), this property may be an exception object if one occurred, or if an HTTP error occurred this will be set to the textual portion of the HTTP status. Otherwise it will be `null`. This is what gets passed as the 3rd argument to the framework's `$.ajax()` error callback.\n\n**Code examples:**\n\nInitialize the pagecontainer with the loadfailed callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  loadfailed: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainerloadfailed event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainerloadfailed\", function( event, ui ) {} );\n```\n\n### remove( event, ui )Type: `pagecontainerremove`\n\nTriggered just before the framework attempts to remove an external page from the DOM.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **toPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the destination page DOM element.\n\n  - **prevPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The page about to be removed\n\n**Code examples:**\n\nInitialize the pagecontainer with the remove callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  remove: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainerremove event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainerremove\", function( event, ui ) {} );\n```\n\n### show( event, ui )Type: `pagecontainershow`\n\nTriggered after the transition animation has completed. **Note:** Unlike the deprecated `pageshow` event, this event is not triggered on the \"toPage\" but the pagecontainer widget's element.\n\nYou can access the `prevPage` properties via the second argument of a bound callback function. For example:\n\n``` javascript\n$( \":mobile-pagecontainer\" ).on( \"pagecontainershow\", function( event, ui ) {\n  alert( \"This page was just hidden: \" + ui.prevPage );\n});\n```\n\nFor these handlers to be invoked during the initial page load, you must bind them before jQuery Mobile executes. This can be done in the `mobileinit` handler, as described on the global config page.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **toPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the destination page DOM element.\n\n  - **prevPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the page DOM element that we just transitioned away from. Note that this collection is empty when the first page is transitioned in during application startup.\n\n**Code examples:**\n\nInitialize the pagecontainer with the show callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  show: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainershow event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainershow\", function( event, ui ) {} );\n```\n\n### transition( event, ui )Type: `pagecontainertransition`\n\nTriggered after the page change transition completes.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **absUrl**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The absolute version of the url of the destination page. If url was relative, it is resolved against the url used to load the current active page.\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    This object contains the options that were passed into [load()](#method-load).\n\n  - **originalHref**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The href from the link that started the page change process.\n\n  - **toPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    This property represents the page to which the caller has transitioned. It is a jQuery collection object containing the page DOM element.\n\n  - **prevPage**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery collection object that contains the from page DOM element.\n\n**Code examples:**\n\nInitialize the pagecontainer with the transition callback specified:\n\n``` javascript\n$( \".selector\" ).pagecontainer({\n  transition: function( event, ui ) {}\n});\n```\n\nBind an event listener to the pagecontainertransition event:\n\n``` javascript\n$( \".selector\" ).on( \"pagecontainertransition\", function( event, ui ) {} );\n```\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pagecontainer](https://api.jquerymobile.com/pagecontainer)"
- name: pagecreate event
  id: pagecreate
  summary: 'Description: Triggered when the page has been created in the DOM (via ajax or other) and after all widgets have had an opportunity to enhance the contained markup'
  description: "# pagecreate\n\n## pagecreate eventversion added: 1.0\n\n**Description:** Triggered when the page has been created in the DOM (via ajax or other) and after all widgets have had an opportunity to enhance the contained markup.\n\n- #### jQuery( \".selector\" ).on( \"pagecreate\", function( event ) { ... } )\n\n**Note:**This event is part of the [`page`](page) widget as of jQuery Mobile 1.4.0. Please consult the documentation for the page widget's [implementation](page#event-create).\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pagecreate](https://api.jquerymobile.com/pagecreate)"
- name: pagehide event
  id: pagehide
  summary: 'Description: Triggered on the "fromPage" after the transition animation has completed'
  description: "# pagehide\n\n## pagehide eventversion added: 1.0, deprecated: 1.4.0\n\n**Description:** Triggered on the \"fromPage\" after the transition animation has completed.\n\n- #### jQuery( \".selector\" ).on( \"pagehide\", function( event ) { ... } )\n\n**Note:** The triggering of this event is deprecated as of jQuery Mobile 1.4.0. It will no longer be triggered in 1.6.0.\n\nThe replacement for `pagehide` is the [`pagecontainer`](pagecontainer) widget's `pagecontainerhide` event. In jQuery Mobile 1.4.0, the two events are identical except for their name and the fact that `pagecontainerhide` is triggered on the pagecontainer, whereas `pagehide` is triggered on the page.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pagehide](https://api.jquerymobile.com/pagehide)"
- name: pageinit event
  id: pageinit
  summary: 'Description: Triggered on the page being initialized, after initialization occurs'
  description: "# pageinit\n\n## pageinit eventversion added: 1.0, deprecated: 1.4\n\n**Description:** Triggered on the page being initialized, after initialization occurs.\n\n- #### jQuery( \".selector\" ).on( \"pageinit\", function( event ) { ... } )\n\nWe recommend binding to this event instead of DOM ready() because this will work regardless of whether the page is loaded directly or if the content is pulled into another page as part of the Ajax navigation system.\n\n``` javascript\n$( document ).on( \"pageinit\", \"#aboutPage\", function( event ) {\n  alert( \"This page was just enhanced by jQuery Mobile!\" );\n});\n```\n\n**Note:** This event has been deprecated in 1.4.0 in favor of [`pagecreate`](pagecreate). Simply replace `pageinit` in the above example.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pageinit](https://api.jquerymobile.com/pageinit)"
- name: pageload event
  id: pageload
  summary: 'Description: Triggered after the page is successfully loaded and inserted into the DOM'
  description: "# pageload\n\n## pageload eventversion added: 1.0, deprecated: 1.4.0\n\n**Description:** Triggered after the page is successfully loaded and inserted into the DOM.\n\n- #### jQuery( \".selector\" ).on( \"pageload\", function( event ) { ... } )\n\n**Note:** The triggering of this event is deprecated as of jQuery Mobile 1.4.0. It will no longer be triggered in 1.6.0.\n\nThe replacement for `pageload` is the [`pagecontainer`](pagecontainer) widget's `pagecontainerload` event. In jQuery Mobile 1.4.0, the two events are identical except for their name and the fact that `pagecontainerload` is triggered on the pagecontainer, whereas `pageload` is triggered on the page.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pageload](https://api.jquerymobile.com/pageload)"
- name: pageloadfailed event
  id: pageloadfailed
  summary: 'Description: Triggered if the page load request failed'
  description: "# pageloadfailed\n\n## pageloadfailed eventversion added: 1.0, deprecated: 1.4.0\n\n**Description:** Triggered if the page load request failed.\n\n- #### jQuery( \".selector\" ).on( \"pageloadfailed\", function( event ) { ... } )\n\n**Note:** The triggering of this event is deprecated as of jQuery Mobile 1.4.0. It will no longer be triggered in 1.6.0.\n\nThe replacement for `pageloadfailed` is the [`pagecontainer`](pagecontainer) widget's `pagecontainerloadfailed` event. In jQuery Mobile 1.4.0, the two events are identical except for their name and the fact that `pagecontainerloadfailed` is triggered on the pagecontainer, whereas `pageloadfailed` is triggered on the page.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pageloadfailed](https://api.jquerymobile.com/pageloadfailed)"
- name: pageremove event
  id: pageremove
  summary: 'Description: Triggered just before the framework attempts to remove an external page from the DOM'
  description: "# pageremove\n\n## pageremove eventversion added: 1.0, deprecated: 1.4.3\n\n**Description:** Triggered just before the framework attempts to remove an external page from the DOM.\n\n- #### jQuery( \".selector\" ).on( \"pageremove\", function( event ) { ... } )\n\nBy default, the framework removes any non active dynamically loaded external pages from the DOM as soon as the user navigates away to a different page. The `pageremove` event is dispatched just before the framework attempts to remove the page from the DOM.\n\nThis event is triggered just before the framework attempts to remove an external page from the DOM. Event callbacks can call preventDefault on the event object to prevent the page from being removed.\n\n**Note:** The triggering of this event is deprecated as of jQuery Mobile 1.4.3. It will no longer be triggered in 1.6.0.\n\nThe replacement for `pageremove` is the [`pagecontainer`](pagecontainer) widget's `pagecontainerremove` event. In jQuery Mobile \\>= 1.4.3, the two events are identical except for their name and the fact that `pagecontainerremove` is triggered on the pagecontainer, whereas `pageremove` is triggered on the page.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pageremove](https://api.jquerymobile.com/pageremove)"
- name: pageshow event
  id: pageshow
  summary: 'Description: Triggered on the "toPage" after the transition animation has completed'
  description: "# pageshow\n\n## pageshow eventversion added: 1.0, deprecated: 1.4.0\n\n**Description:** Triggered on the \"toPage\" after the transition animation has completed.\n\n- #### jQuery( \".selector\" ).on( \"pageshow\", function( event ) { ... } )\n\n**Note:** The triggering of this event is deprecated as of jQuery Mobile 1.4.0. It will no longer be triggered in 1.6.0.\n\nThe replacement for `pageshow` is the [`pagecontainer`](pagecontainer) widget's `pagecontainershow` event. In jQuery Mobile 1.4.0, the two events are identical except for their name and the fact that `pagecontainershow` is triggered on the pagecontainer, whereas `pageshow` is triggered on the page.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/pageshow](https://api.jquerymobile.com/pageshow)"
- name: Panel
  id: panel
  summary: Panels are designed to be as flexible as possible to make it easy to create menus, collapsible columns, drawers, inspectors panes and more
  description: "# Panel Widget\n\n## Panel Widgetversion added: 1.3\n\n**Description:** Creates a panel widget\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[animate](#option-animate)\n\n[classes.animate](#option-classes.animate)\n\n[classes.contentFixedToolbar](#option-classes.contentFixedToolbar)\n\n[classes.contentFixedToolbarClosed](#option-classes.contentFixedToolbarClosed)\n\n[classes.contentFixedToolbarOpen](#option-classes.contentFixedToolbarOpen)\n\n[classes.contentWrap](#option-classes.contentWrap)\n\n[classes.contentWrapClosed](#option-classes.contentWrapClosed)\n\n[classes.contentWrapOpen](#option-classes.contentWrapOpen)\n\n[classes.modal](#option-classes.modal)\n\n[classes.modalOpen](#option-classes.modalOpen)\n\n[classes.pageContainer](#option-classes.pageContainer)\n\n[classes.pageContentPrefix](#option-classes.pageContentPrefix)\n\n[classes.pageFixedToolbar](#option-classes.pageFixedToolbar)\n\n[classes.pagePanel](#option-classes.pagePanel)\n\n[classes.pagePanelOpen](#option-classes.pagePanelOpen)\n\n[classes.panel](#option-classes.panel)\n\n[classes.panelClosed](#option-classes.panelClosed)\n\n[classes.panelFixed](#option-classes.panelFixed)\n\n[classes.panelInner](#option-classes.panelInner)\n\n[classes.panelOpen](#option-classes.panelOpen)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[dismissible](#option-dismissible)\n\n[display](#option-display)\n\n[initSelector](#option-initSelector)\n\n[position](#option-position)\n\n[positionFixed](#option-positionFixed)\n\n[swipeClose](#option-swipeClose)\n\n[theme](#option-theme)\n\n### Methods\n\n[close](#method-close)\n\n[open](#method-open)\n\n[toggle](#method-toggle)\n\n### Events\n\n[beforeclose](#event-beforeclose)\n\n[beforeopen](#event-beforeopen)\n\n[close](#event-close)\n\n[create](#event-create)\n\n[open](#event-open)\n\nPanels are designed to be as flexible as possible to make it easy to create menus, collapsible columns, drawers, inspectors panes and more.\n\n### Where panel markup goes in a page\n\nA panel must be a sibling to the header, content, and footer elements inside a jQuery Mobile page. You can add the panel markup either *before* or *after* these elements, but not in between.\n\nHere is an example of the panel before the header, content and footer in the source order:\n\n``` markup\n<div data-role=\"page\">\n \n  <div data-role=\"panel\" id=\"mypanel\">\n    <!-- panel content goes here -->\n  </div><!-- /panel -->\n \n  <!-- header -->\n  <!-- content -->\n  <!-- footer -->\n \n</div><!-- page -->\n```\n\nAlternately, it's possible to add the panel markup *after* the header, content and footer in the source order, just before the end of the page container. Where in the source order you place the panel markup will depend on how you want to page content to read for people experiencing the page in a C-grade device (HTML only) or for a screen reader.\n\nIf a page contains a panel the framework wraps the header, content and footer sections in a `div`. When opening a panel with display mode \"reveal\" or \"push\" the transition is applied to this wrapper. An exception is fixed headers and footers. Those are not included in the wrapper, but will transition in sync with it. Be aware of the fact that all your visible page content should live inside those page sections.\n\n#### CSS Multi-column Layout\n\nTo avoid blinks when opening a panel, we force hardware acceleration on WebKit browsers. The CSS that is used to do this can cause issues with buttons and form elements on the page if their container has a CSS multi-column layout (`column-count`). To resolve this you have to set the following rule for the element or its container:\n\n``` javascript\n-webkit-transform: translate3d( 0, 0, 0 );\n```\n\n### External Panels\n\nSince jQuery Mobile 1.4.0, it is also possible to have external panels. This means that you can now have panels located outside the page. Panels outside of a page must be initalized manually and will not be handled by auto init. Panels outside of pages will remain in the DOM (unless manually removed) as long as you use Ajax navigation, and can be opened or closed from any page. This can be handy when you want to use the same panel on more than one page.\n\nHere is an example of an external panel:\n\n``` markup\n<div data-role=\"page\">\n  <!-- header -->\n  <!-- content -->\n  <!-- footer -->\n</div><!-- page -->\n \n<div data-role=\"panel\" id=\"mypanel\">\n  <!-- panel content goes here -->\n</div><!-- /panel -->\n```\n\nThe panel can be enhanced manually as follows:\n\n``` javascript\n$( function() {\n  $( \"#mypanel\" ).panel();\n} );\n```\n\nNote that if the panel contains other jQuery Mobile widgets, such as listviews, these will need to be enhanced manually as well.\n\n### Panel markup conventions\n\nA panel consists of a container with a `data-role=\"panel\"` attribute and a unique `ID`. This `ID` will be referenced by the link or button to open and close the panel. The most basic panel markup looks like this:\n\n``` markup\n<div data-role=\"panel\" id=\"mypanel\">\n  <!-- panel content goes here -->\n</div>\n```\n\nThe **position** of the panel on the screen is set by the `data-position` attribute. The position defaults to `left`, meaning it will appear from the left edge of the screen. Specify `data-position=\"right\"` for it to appear from the right edge instead.\n\nThe **display mode** of the panel is set by the `data-display` attribute. The defaults to `reveal`, meaning the panel will sit under the page and reveal as the page slides away. Specify `data-display=\"overlay\"` for the panel to appear on top of the page contents. A third mode, `data-display=\"push\"` animates both the panel and page at the same time.\n\nHere is an example of a panel with a custom position and display option set:\n\n``` markup\n<div data-role=\"panel\" id=\"mypanel\" data-position=\"right\" data-display=\"push\">\n  <!-- panel content goes here -->\n</div>\n```\n\n#### Dynamic content\n\nWhen you dynamically add content to a panel or make hidden content visible while the panel is open, you have to trigger the `updatelayout` event on the panel.\n\n``` javascript\n$( \"#mypanel\" ).trigger( \"updatelayout\" );\n```\n\nThe framework will check the new height of the panel contents and, in case this exceeds the screen height, set the page `min-height` to this height and unfix panels with `data-position-fixed=\"true\"`. See also **Panel positioning**.\n\n### Opening a panel\n\nA panel's visibility is toggled by a link somewhere on the page or by calling the panel's `open` method directly. The defaults place the panel on the left in \"reveal\" mode. Open a panel programmatically like this:\n\n``` javascript\n$( \"#idofpanel\" ).panel( \"open\" , optionsHash );\n```\n\nTo control a panel from a link, point the `href` to the `ID` of the panel you want to toggle (`mypanel` in the example below). This instructs the framework to bind the link to the panel. This link will toggle the visibility of the panel so tapping it will open the panel, and tapping it again will close it.\n\n``` markup\n<a href=\"#mypanel\">Open panel</a>\n```\n\nWhen using markup to control panels, you can only have a single panel open at once. Clicking a link to open a panel while one is already open will auto-close the first. This is done to keep the markup-only configuration simple.\n\n### Closing a panel\n\nClicking the link that opened the panel, swiping left or right, or tapping the Esc key will close the panel. To turn off the swipe-to-close behavior, add the `data-swipe-close=\"false\"` attribute to the panel.\n\nBy default, panels can also be closed by clicking outside the panel onto the page contents. To prevent this behavior, add the `data-dismissible=\"false\"` attribute to the panel. It's possible to have the panel and page sit side-by-side at wider screen widths and prevent the click-out-to-close behavior only above a certain screen width by applying a media query. See the responsive section below for details.\n\nA panel can also be closed by calling the panel's `close` method directly.\n\n``` javascript\n$( \"#idofpanel\" ).panel( \"close\" );\n```\n\nIt's common to also add a close button inside the panel. To add the link that will close the panel, add the `data-rel=\"close\"` attribute to tell the framework to close that panel when clicked. It's important to ensure that this link also makes sense if JavaScript isn't available, so we recommend that the `href` points to the ID of the page to which the user should jump when closing. For example, if the button to open the panel is in the header bar that has and ID of `my-header`, the close link in the panel should be:\n\n``` markup\n<a href=\"#my-header\" data-rel=\"close\">Close panel</a>\n```\n\n### Panel animations\n\nPanels will animate if the browser supports 3D transforms. The presence of such support is established by the same criteria for CSS animation support we use for page transitions. Panel animations use `translateX` CSS transforms to ensure they are hardware accelerated and smooth.\n\nThe framework has a feature test to detect if the required CSS properties are supported and will fall back to a simple hide/show if not available. After thorough testing, we decided to not animate panels on less capable platforms because the choppier animations weren't a better experience than a simple hide/show.\n\nThe `animate` option allows you to turn off panel animations for all devices. To turn off animations via markup, add the `data-animate=\"false\"` attribute to the panel container.\n\nThe use of hardware acceleration is triggered during initialization of the page to prevent blinks when opening a panel. Because this increases memory use you have to be aware of performance issues if you use long lists or scripts to dynamically inject content on a page with an animated panel.\n\n### Panel positioning\n\nThe panel will be displayed with the `position:absolute` CSS property, meaning it will scroll with the page. When a panel is opened the framework checks to see if the bottom of the panel contents is in view and, if not, scrolls to the top of the page.\n\nYou can set a panel to `position:fixed`, so its contents will appear no matter how far down the page you're scrolled, by adding the `data-position-fixed=\"true\"` attribute to the panel. The framework also checks to see if the panel contents will fit within the viewport before applying the fixed positioning because this property would prevent the panel contents from scrolling and using `overflow` is not well supported enough to use at this time. If the panel contents are too long to fit within the viewport, the framework will simply display the panel without fixed positioning.\n\nIn general, we recommend that you place the buttons that open the panel at the very top of the screen which is the most common UI pattern for panels. This will avoid the need to scroll and also makes the transitions a bit smoother.\n\nNote that there are issues with fixed positioning within Android WebView applications (not the browser) that can cause layout issues, especially when hardware acceleration isn't enabled. We recommend not to use the fixed position panel option if deploying to an Android app. Also, if you have a fixed panel on a page with fixed toolbars, the toolbars might not transition together with the page content.\n\n### Styling panels\n\nBy default, panels have very simple styles to let you customize them as needed. Panels are essentially just simple blocks with no margins that sit on either side of the page content. The framework wraps the panel content in a `div` with class `ui-panel-inner` which has a padding of 15 pixels. If needed you can override this with custom CSS or use option `classes.panelInner` to set a different class name for the `div`.\n\nPanels have a fixed width of 17em (272 pixels) which is narrow enough to still show some of the page contents when open to make clicking out to close easy, and still looks good on wider tablet or desktop screens. The styles to set widths on panels are fairly complex but these can be overridden with CSS as needed.\n\nNote that adding padding, borders, or margins directly to the panel container will alter the overall dimensions and could cause the positioning and animation to be affected. To avoid this, apply styles to the panel content wrapper (`.ui-panel-inner`).\n\nOther than the theme background, width and 100% height styles, panels have very little styling on their own. The default theme for panels is \"a\". You can set a different theme for the panel by adding a `data-theme` to the panel container, or set `data-theme=\"none\"` and add your own classes to style it as needed.\n\nThe framework applies the theme that is used for the page to the content wrapper. Before opening a panel that has display mode reveal or push, the page theme will be set to the same theme that is used for the panel. This is done to mask that most mobile browsers haven't finished painting the panel background when the animation to open it has already started. If you use a background image for a page, you have to set it for the `ui-body-*` class of the theme that you use for the page so it will be used as background of the content wrapper.\n\n### Making the panel responsive\n\nWhen the push or reveal display is used, a panel pushes the page aside when it opens. Since some of the page is pushed offscreen, the panel is modal and must be closed to interact with the page content again. On larger screens, you may want to have the panel work more like a collapsible column that can be opened and used alongside the page to take better use of the screen real estate.\n\nTo make the page work alongside the open panel, it needs to re-flow to a narrower width so it will fit next to the panel. This can be done purely with CSS by adding a left or right margin equal to the panel width (17em) to the page contents to force a re-flow. Second, the invisible layer placed over the page for the click out to dismiss behavior is hidden with CSS so you can click on the page and not close the menu.\n\nHere is an example of these rules wrapped in a media query to only apply this behavior above 35em (560px):\n\n``` javascript\n@media (min-width:35em) {\n \n  /* wrap on wide viewports once open */\n \n  .ui-panel-page-content-open.ui-panel-page-content-position-left {\n    margin-right: 17em;\n  }\n  .ui-panel-page-content-open.ui-panel-page-content-position-right {\n    margin-left: 17em;\n  }\n  .ui-panel-page-content-open {\n    width: auto;\n  }\n \n  /* disable \"dismiss\" on wide viewports */\n  .ui-panel-dismiss {\n    display: none;\n  }\n \n  /* same as the above but for panels with display mode \"push\" only */\n \n  .ui-panel-page-content-open.ui-panel-page-content-position-left.ui-panel-page-content-display-push {\n    margin-right: 17em;\n  }\n  .ui-panel-page-content-open.ui-panel-page-content-position-right.ui-panel-page-content-display-push {\n    margin-left: 17em;\n  }\n  .ui-panel-page-content-open.ui-panel-page-content-display-push {\n    width: auto;\n  }\n \n  .ui-panel-dismiss-display-push {\n    display: none;\n  }\n}\n```\n\n#### Applying a preset breakpoint\n\nIncluded in the widget styles is a breakpoint preset for this behavior that kicks in at 55em (880px). This breakpoint is not applied by default to make it easier for you to write custom breakpoints that work best for your content and design. To apply the breakpoint preset, add the `ui-responsive-panel` class to the *page* (not the panel).\n\n## Options\n\n### animate\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nSets whether the panel will animate when opening and closing. If set to false, the panel will just appear and disappear without animation. This is recommended for fastest performance.\n\nThis option is also exposed as a data attribute:`data-animate=\"false\"` on the panel container.\n\n**Code examples:**\n\nInitialize the panel with the `animate` option specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  animate: false\n});\n```\n\nGet or set the `animate` option, after initialization:\n\n``` javascript\n// Getter\nvar animate = $( \".selector\" ).panel( \"option\", \"animate\" );\n \n// Setter\n$( \".selector\" ).panel( \"option\", \"animate\", false );\n```\n\n### classes.animate\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-animate\"`\n\nClass added to the panel, page contents wrapper and fixed toolbars when option animate is true and the 3D transform feature test returns `true`.\n\n### classes.contentFixedToolbar\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-fixed-toolbar-wrap\"`\n\n**Note:** This class is no longer used as of 1.4.0, so setting this option will have no effect on the panel.\n\nClass added to the page container to suppress scrolling horizontally\n\n(version removed: 1.4)\n\n### classes.contentFixedToolbarClosed\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-content-fixed-toolbar-closed\"`\n\n**Note:** This class is no longer used as of 1.4.0, so setting this option will have no effect on the panel.\n\nClass added to fixed toolbars after the close animation is complete.\n\n(version removed: 1.4)\n\n### classes.contentFixedToolbarOpen\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-content-fixed-toolbar-open\"`\n\n**Note:** This class is no longer used as of 1.4.0, so setting this option will have no effect on the panel.\n\nClass added to fixed toolbars when the panel is opening.\n\n(version removed: 1.4)\n\n### classes.contentWrap\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-content-wrap\"`\n\n**Note:** This class is no longer used as of 1.4.0, so setting this option will have no effect on the panel.\n\nClass added to the wrapper injected around the page contents (header, content, footer), needed for positioning of the panel.\n\n(version removed: 1.4)\n\n### classes.contentWrapClosed\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-content-wrap-closed\"`\n\n**Note:** This class is no longer used as of 1.4.0, so setting this option will have no effect on the panel.\n\nClass added to the page contents wrapper after the close animation is complete.\n\n(version removed: 1.4)\n\n### classes.contentWrapOpen\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-content-wrap-open\"`\n\n**Note:** This class is no longer used as of 1.4.0, so setting this option will have no effect on the panel.\n\nClass added to the wrapper injected around the page contents (header, content, footer) when the panel is opening. Used for targeting hardware acceleration only during transitions.\n\n(version removed: 1.4)\n\n### classes.modal\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-dismiss\"`\n\nClass added to the overlay on the page to dismiss the panel when hidden.\n\n### classes.modalOpen\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-dismiss-open\"`\n\nClass added to the invisible overlay over the page when the panel is open. Used to dismiss the panel.\n\n### classes.pageContainer\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-page-container\"`\n\nClass applied to the page container.\n\n### classes.pageContentPrefix\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-page-content\"`\n\nUsed for wrapper and fixed toolbars position, display and open classes.\n\n### classes.pageFixedToolbar\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-fixed-toolbar\"`\n\nClass applied to any fixed toolbars.\n\n### classes.pagePanel\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-page-panel\"`\n\n**Note:** This class is no longer used as of 1.4.0, so setting this option will have no effect on the panel.\n\nClass added to the page container when a panel widget is present.\n\n(version removed: 1.4)\n\n### classes.pagePanelOpen\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-page-panel-open\"`\n\n**Note:** This class is no longer used as of 1.4.0, so setting this option will have no effect on the panel.\n\nClass added to the page when a panel is open.\n\n(version removed: 1.4)\n\n### classes.panel\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel\"`\n\nClass added to the panel.\n\n### classes.panelClosed\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-closed\"`\n\nClass added to the panel when closed.\n\n### classes.panelFixed\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-fixed\"`\n\nClass added to the panel when fixed positioning is applied.\n\n### classes.panelInner\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-inner\"`\n\nClass added to the panel contents wrapper div.\n\n### classes.panelOpen\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-panel-open\"`\n\nClass added to the panel when opening. Used for targeting hardware acceleration only during transitions.\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the panel with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).panel( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).panel( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the panel if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the panel with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).panel( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).panel( \"option\", \"disabled\", true );\n```\n\n### dismissible\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nSets whether the panel can be closed by clicking outside onto the page.\n\nThis option is also exposed as a data attribute:`data-dismissible=\"false\"` on the link that opens the panel.\n\n**Code examples:**\n\nInitialize the panel with the `dismissible` option specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  dismissible: false\n});\n```\n\nGet or set the `dismissible` option, after initialization:\n\n``` javascript\n// Getter\nvar dismissible = $( \".selector\" ).panel( \"option\", \"dismissible\" );\n \n// Setter\n$( \".selector\" ).panel( \"option\", \"dismissible\", false );\n```\n\n### display\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"reveal\"`\n\nThe relationship of the panel to the page contents. This option accepts one of three values:\n\n|           |                                                          |\n|-----------|----------------------------------------------------------|\n| \"reveal\"  | Push the page over                                       |\n| \"push\"    | Re-flow the content to fit the panel content as a column |\n| \"overlay\" | Sit over the content                                     |\n\nThis option is also exposed as a data attribute:`data-display=\"push\"` on the link that opens the panel.\n\n**Code examples:**\n\nInitialize the panel with the `display` option specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  display: \"overlay\"\n});\n```\n\nGet or set the `display` option, after initialization:\n\n``` javascript\n// Getter\nvar display = $( \".selector\" ).panel( \"option\", \"display\" );\n \n// Setter\n$( \".selector\" ).panel( \"option\", \"display\", \"overlay\" );\n```\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the panel widget is:\n\n``` javascript\n\":jqmData(role='panel')\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.panel.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates panel widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### position\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"left\"`\n\nThe side of the screen the panel appears on. Values can be \"left\" or \"right\".\n\nThis option is also exposed as a data attribute:`data-position=\"right\"` on the link that opens the panel.\n\n**Code examples:**\n\nInitialize the panel with the `position` option specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  position: \"right\"\n});\n```\n\nGet or set the `position` option, after initialization:\n\n``` javascript\n// Getter\nvar position = $( \".selector\" ).panel( \"option\", \"position\" );\n \n// Setter\n$( \".selector\" ).panel( \"option\", \"position\", \"right\" );\n```\n\n### positionFixed\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSets whether the panel has fixed positioning so the contents are in view even if the page is scrolled down. This also allows the page to scroll while the panel stays fixed. We recommend not to enable this feature when panels are used withing Android apps because of poor performance and display issues.\n\nThis option is also exposed as a data attribute:`data-position-fixed=true` on the panel.\n\n**Code examples:**\n\nInitialize the panel with the `positionFixed` option specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  positionFixed: true\n});\n```\n\nGet or set the `positionFixed` option, after initialization:\n\n``` javascript\n// Getter\nvar positionFixed = $( \".selector\" ).panel( \"option\", \"positionFixed\" );\n \n// Setter\n$( \".selector\" ).panel( \"option\", \"positionFixed\", true );\n```\n\n### swipeClose\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nSets whether the panel can be closed by swiping left or right over the panel.\n\nThis option is also exposed as a data attribute:`data-swipe-close=false` on the panel.\n\n**Code examples:**\n\nInitialize the panel with the `swipeClose` option specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  swipeClose: false\n});\n```\n\nGet or set the `swipeClose` option, after initialization:\n\n``` javascript\n// Getter\nvar swipeClose = $( \".selector\" ).panel( \"option\", \"swipeClose\" );\n \n// Setter\n$( \".selector\" ).panel( \"option\", \"swipeClose\", false );\n```\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the panel widget. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the panel with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).panel( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).panel( \"option\", \"theme\", \"b\" );\n```\n\n## Methods\n\n### close()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\ncloses a panel.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the close method:\n\n``` javascript\n$( \".selector\" ).panel( \"close\" );\n```\n\n### open()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nopens a panel.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the open method:\n\n``` javascript\n$( \".selector\" ).panel( \"open\" );\n```\n\n### toggle()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\ntoggles the visibility the panel so it will open a closed panel or close and open panel.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the toggle method:\n\n``` javascript\n$( \".selector\" ).panel( \"toggle\" );\n```\n\n## Events\n\n### beforeclose( event, ui )Type: `panelbeforeclose`\n\nTriggered at the start of the process of closing a panel\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the panel with the beforeclose callback specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  beforeclose: function( event, ui ) {}\n});\n```\n\nBind an event listener to the panelbeforeclose event:\n\n``` javascript\n$( \".selector\" ).on( \"panelbeforeclose\", function( event, ui ) {} );\n```\n\n### beforeopen( event, ui )Type: `panelbeforeopen`\n\nTriggered at the start of the process of opening a panel\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the panel with the beforeopen callback specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  beforeopen: function( event, ui ) {}\n});\n```\n\nBind an event listener to the panelbeforeopen event:\n\n``` javascript\n$( \".selector\" ).on( \"panelbeforeopen\", function( event, ui ) {} );\n```\n\n### close( event, ui )Type: `panelclose`\n\nTriggered when the process (and animation) of closing a panel is finished\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the panel with the close callback specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  close: function( event, ui ) {}\n});\n```\n\nBind an event listener to the panelclose event:\n\n``` javascript\n$( \".selector\" ).on( \"panelclose\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `panelcreate`\n\nTriggered when a panel is created\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the panel with the create callback specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the panelcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"panelcreate\", function( event, ui ) {} );\n```\n\n### open( event, ui )Type: `panelopen`\n\nTriggered when the process (and animation) of opening a panel is finished\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the panel with the open callback specified:\n\n``` javascript\n$( \".selector\" ).panel({\n  open: function( event, ui ) {}\n});\n```\n\nBind an event listener to the panelopen event:\n\n``` javascript\n$( \".selector\" ).on( \"panelopen\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of a panel.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>panel demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n  .panel-content {\n    padding: 1em;\n  }\n  </style>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <a href=\"#defaultpanel\" data-role=\"button\" data-inline=\"true\" data-icon=\"bars\">Default panel</a>\n  </div>\n \n  <!-- defaultpanel  -->\n  <div data-role=\"panel\" id=\"defaultpanel\" data-theme=\"b\">\n \n    <div class=\"panel-content\">\n      <h3>Default panel options</h3>\n      <p>This panel has all the default options: positioned on the left with the reveal display mode. The panel markup is <em>before</em> the header, content and footer in the source order.</p>\n      <p>To close, click off the panel, swipe left or right, hit the Esc key, or use the button below:</p>\n      <a href=\"#demo-links\" data-rel=\"close\" data-role=\"button\" data-theme=\"a\" data-icon=\"delete\" data-inline=\"true\">Close panel</a>\n    </div><!-- /content wrapper for padding -->\n  </div><!-- /defaultpanel -->\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/panel](https://api.jquerymobile.com/panel)"
- name: Popup
  id: popup
  summary: 'Description: Opens content in a popup'
  description: "# Popup Widget\n\n## Popup Widgetversion added: 1.2\n\n**Description:** Opens content in a popup.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[arrow](#option-arrow)\n\n[classes](#option-classes)\n\n[corners](#option-corners)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[dismissible](#option-dismissible)\n\n[history](#option-history)\n\n[initSelector](#option-initSelector)\n\n[overlayTheme](#option-overlayTheme)\n\n[positionTo](#option-positionTo)\n\n[shadow](#option-shadow)\n\n[theme](#option-theme)\n\n[tolerance](#option-tolerance)\n\n[transition](#option-transition)\n\n### Methods\n\n[close](#method-close)\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[open](#method-open)\n\n[option](#method-option)\n\n[reposition](#method-reposition)\n\n### Events\n\n[afterclose](#event-afterclose)\n\n[afteropen](#event-afteropen)\n\n[beforeposition](#event-beforeposition)\n\n[create](#event-create)\n\n## Popups\n\nTo create a popup, add the `data-role=\"popup\"` attribute to a div with the popup contents. Then create a link with the `href` set to the `id` of the popup div, and add the attribute `data-rel=\"popup\"` to tell the framework to open the popup when the link is tapped. This is a similar markup pattern to the [dialog](dialog) widget. A popup div has to be nested inside the same page as the link.\n\n### Theming\n\nThe popup widget uses the [jQuery Mobile CSS framework](theming/css-framework) to style its look and feel. If popup specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-popup-container`: Outermost container for listview widget. Additionally, `ui-popup-active` class will be added when popup is active and `ui-popup-hidden, ui-popup-truncate` classes will be added when popup is inactive.\n  - `ui-popup`: Main container of popup which withhelds all the content\n    - `ui-popup-arrow-guide`: Guide of the arrow.\n    - `ui-popup-arrow-container`: Container for the arrow of the popup. This will additionally have `ui-popup-arrow-l`, `ui-popup-arrow-t`, `ui-popup-arrow-r`, `ui-popup-arrow-b` classes accordingly if arrow is set to left, top, right or bottom respectively.\n      - `ui-popup-arrow`: Main arrow element\n\n``` markup\n<a href=\"#popupBasic\" data-rel=\"popup\">Open Popup</a>\n \n<div data-role=\"popup\" id=\"popupBasic\">\n  <p>This is a completely basic popup, no options set.</p>\n</div>\n```\n\nThis will result in the following popup:\n\nThe popup consists of two elements: the screen, which is a transparent or translucent element that covers the entire document, and the container, which is the popup itself. If your original element had an `id` attribute, the screen and the container will each receive an `id` attribute based on it. The screen's `id` will be suffixed with \"-screen\", and the container's `id` will be suffixed with \"-popup\" (in the above example, `id=\"popupBasic-screen\"` and `id=\"popupBasic-popup\"`, respectively).\n\nThe framework adds a small amount of margin to text elements, but it's really just a container with **rounded corners** and a **shadow** which serves as a blank slate for your designs (even these features can be disabled via options). Please note that if you want to add a header to the popup and also have a closing button, the markup for the header must come first.\n\nThis simple styling makes it easy to add in widgets to create a variety of different interactions. Here are a few real-world examples that combine the various settings and styles you can achieve out of the box with popups:\n\n## Scaling images: Lightbox examples\n\nThe framework CSS contains rules that make images that are immediate children of the popup scale to fit the screen. Because of the absolute positioning of the popup container and screen, the height is not adjusted to screen height on all browsers. You can prevent vertical scrolling with a simple script that sets the `max-height` of the image.\n\nIn the two examples below the divs with `data-role=\"popup\"` have a class of `photopopup`.\n\nThe handler is bound to the `popupbeforeposition` event, which ensures the image is not only scaled before it is shown but also when the window is resized (e.g. orientation change). In this code example the height is reduced by 60 to take a top and bottom tolerance of 30 pixels into account.\n\n``` javascript\n$( document ).on( \"pagecreate\", function() {\n    $( \".photopopup\" ).on({\n        popupbeforeposition: function() {\n            var maxHeight = $( window ).height() - 60 + \"px\";\n            $( \".photopopup img\" ).css( \"max-height\", maxHeight );\n        }\n    });\n});\n```\n\n## Working with iframes in popups\n\nYou may need to embed an iframe into a popup to use a 3rd party widget. Here, we'll walk through a few real-world examples of working with iframes: videos and maps.\n\n### Video example\n\nHere is an example of a 3rd party video player embedded in a popup:\n\nThe markup is an iframe inside a popup container. The popup will have a 15 pixels padding because of class `ui-content` and a one pixel border because the framework will add class `ui-body-a` to the popup.\n\n``` markup\n<div data-role=\"popup\" id=\"popupVideo\" data-overlay-theme=\"b\" data-theme=\"a\" data-tolerance=\"15,15\" class=\"ui-content\">\n \n    <iframe src=\"http://player.vimeo.com/video/41135183\" width=\"497\" height=\"298\" seamless></iframe>\n \n</div>\n```\n\nWhen using an iframe inside a popup it is important to initially **set the width and height attributes to 0**. This prevents the page to breaking on platforms like Android 2.3. Note that you have to set the attributes, because setting the width and height with CSS is not sufficient. You can leave the actual width and height in the markup for browsers that have JavaScript disabled and use `attr()` to set the zero values upon the `pageinit` event.\n\nNext, bind to the `popupbeforeposition` event to set the desired size of the iframe when the popup is shown or when the window is resized (e.g. orientation change). For the iframe examples on this page a custom function `scale()` is used to scale down the iframe to fit smaller screens. Expand the section below to view the code of this function.\n\n### `scale()`\n\nThe window width and height are decreased by 30 to take the tolerance of 15 pixels at each side into account.\n\n``` javascript\nfunction scale( width, height, padding, border ) {\n    var scrWidth = $( window ).width() - 30,\n        scrHeight = $( window ).height() - 30,\n        ifrPadding = 2 * padding,\n        ifrBorder = 2 * border,\n        ifrWidth = width + ifrPadding + ifrBorder,\n        ifrHeight = height + ifrPadding + ifrBorder,\n        h, w;\n \n    if ( ifrWidth < scrWidth && ifrHeight < scrHeight ) {\n        w = ifrWidth;\n        h = ifrHeight;\n    } else if ( ( ifrWidth / scrWidth ) > ( ifrHeight / scrHeight ) ) {\n        w = scrWidth;\n        h = ( scrWidth / ifrWidth ) * ifrHeight;\n    } else {\n        h = scrHeight;\n        w = ( scrHeight / ifrHeight ) * ifrWidth;\n    }\n \n    return {\n        'width': w - ( ifrPadding + ifrBorder ),\n        'height': h - ( ifrPadding + ifrBorder )\n    };\n};\n```\n\n**Note:** This function is not part of the framework. Copy the code into your script to use it.\n\nWhen the popup is closed the width and height should be set back to 0. You can do this by binding to the `popupafterclose` event.\n\nThis is the complete script and the link to open the video popup:\n\n``` javascript\n$( document ).on( \"pageinit\", function() {\n    $( \"#popupVideo iframe\" )\n        .attr( \"width\", 0 )\n        .attr( \"height\", 0 );\n \n    $( \"#popupVideo\" ).on({\n        popupbeforeposition: function() {\n            var size = scale( 497, 298, 15, 1 ),\n                w = size.width,\n                h = size.height;\n \n            $( \"#popupVideo iframe\" )\n                .attr( \"width\", w )\n                .attr( \"height\", h );\n        },\n        popupafterclose: function() {\n            $( \"#popupVideo iframe\" )\n                .attr( \"width\", 0 )\n                .attr( \"height\", 0 );\n        }\n    });\n});\n```\n\nNote that the video will still be playing in the iframe when the popup is closed. If available you can use the 3rd party API to stop the video on the `popupafterclose` event. Another way is to create the iframe when the popup is opened and destroy it when the popup is closed, but this would drop support for browsers that have JavaScript disabled.\n\n### Map example\n\nIn the second example, an iframe is used to display **Google Maps API**. Using an iframe prevents issues with the controls of the map.\n\nThis is the markup of the popup including a right close button:\n\n``` markup\n<div data-role=\"popup\" id=\"popupMap\" data-overlay-theme=\"b\" data-theme=\"b\" data-corners=\"false\" data-tolerance=\"15,15\">\n \n    <a href=\"#\" data-rel=\"back\" data-role=\"button\" data-theme=\"b\" data-icon=\"delete\" data-iconpos=\"notext\" class=\"ui-btn-right\">Close</a>\n \n    <iframe src=\"map.html\" width=\"480\" height=\"320\" seamless></iframe>\n \n</div>\n```\n\nExpand the section below to view the source of the iframe.\n\n### `map.html`\n\n``` markup\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Map</title>\n    <script>\n        function initialize() {\n            var myLatlng = new google.maps.LatLng( 51.520838, -0.140261 );\n            var myOptions = {\n                zoom: 15,\n                center: myLatlng,\n                mapTypeId: google.maps.MapTypeId.ROADMAP\n            }\n            var map = new google.maps.Map( document.getElementById( \"map_canvas\" ), myOptions );\n        }\n    </script>\n    <script src=\"http://maps.google.com/maps/api/js?sensor=false\"></script>\n    <style>\n        html {\n            height: 100%;\n            overflow: hidden;\n        }\n        body {\n            margin: 0;\n            padding: 0;\n            height: 100%;\n        }\n        #map_canvas {\n            height: 100%;\n        }\n    </style>\n</head>\n<body onload=\"initialize()\">\n \n    <div id=\"map_canvas\"></div>\n \n</body>\n</html>\n```\n\nSetting the size of the iframe is done exactly the same as for the video example, with one exception. You should also set the width and height of the div that contains the map to prevent the page from breaking on platforms like Android 2.3. In this example the ID of this div is `#map_canvas`.\n\nThis is the complete script and the link to open the map popup:\n\n``` javascript\n$( document ).on( \"pageinit\", function() {\n    $( \"#popupMap iframe\" )\n        .attr( \"width\", 0 )\n        .attr( \"height\", 0 );\n \n    $( \"#popupMap iframe\" ).contents().find( \"#map_canvas\" )\n        .css( { \"width\" : 0, \"height\" : 0 } );\n \n    $( \"#popupMap\" ).on({\n        popupbeforeposition: function() {\n            var size = scale( 480, 320, 0, 1 ),\n                w = size.width,\n                h = size.height;\n \n            $( \"#popupMap iframe\" )\n                .attr( \"width\", w )\n                .attr( \"height\", h );\n \n            $( \"#popupMap iframe\" ).contents().find( \"#map_canvas\" )\n                .css( { \"width\": w, \"height\" : h } );\n        },\n        popupafterclose: function() {\n            $( \"#popupMap iframe\" )\n                .attr( \"width\", 0 )\n                .attr( \"height\", 0 );\n \n            $( \"#popupMap iframe\" ).contents().find( \"#map_canvas\" )\n                .css( { \"width\": 0, \"height\" : 0 } );\n        }\n    });\n});\n```\n\n### Calling the popup plugin\n\nThis plugin will autoinitialize on any page that contains a div with the attribute `data-role=\"popup\"`. However, if needed you can directly call the `popup` plugin on any selector, just like any jQuery plugin and programmatically work with the popup options, methods, and events API:\n\n``` javascript\n$( \"#myPopupDiv\" ).popup();\n```\n\n### Opening popups\n\nUsing the markup-based configuration, when a link with the `data-rel=\"popup\"` is tapped, the corresponding popup container with the id referenced in the `href` of the link will be shown. To open a popup programmatically, call popup with the `open` method on the popup container:\n\n``` javascript\n$( \"#myPopupDiv\" ).popup( \"open\" )\n```\n\n### Closing popups\n\nBy default popups can be closed either by clicking outside the popup widget or by pressing the `Esc` key. To prevent this, the `data-dismissible=\"false\"` attribute can be added to the popup. Popups can also be closed via the `close` method:\n\n``` javascript\n$( \"#myPopupDiv\" ).popup( \"close\" )\n```\n\nTo add an explicit close button to a popup, add a link with the role of button into the popup container with a `data-rel=\"back\"` attribute which will close the popup when tapped. We have created helper classes to position buttons in the upper left (`ui-btn-left`) or upper right (`ui-btn-right`) of the popup but you may need to tweak these or add custom positioning styles depending on your design. We recommend adding standard content padding to the popup to make room for the buttons (see next section).\n\n``` markup\n<div data-role=\"popup\">\n  <a href=\"#\" data-rel=\"back\" data-role=\"button\" data-theme=\"a\" data-icon=\"delete\" data-iconpos=\"notext\" class=\"ui-btn-right\">Close</a>\n  ...popup contents go here...\n</div>\n```\n\n### Adding padding\n\nFor popups with formatted text, padding is needed. We recommend adding the `ui-content` class to the popup container which adds the standard 1em (16px) of padding, just like the page content container. Write your own styles to create a more customized design if needed.\n\n``` markup\n<a href=\"#popupPadded\" data-rel=\"popup\" data-role=\"button\">Popup with padding</a>\n \n<div data-role=\"popup\" id=\"popupPadded\" class=\"ui-content\">\n  <p>This is a popup with the <code>ui-content</code> class added to the popup container.</p>\n</div>\n```\n\nThis will result in the following popup with content padding:\n\nWhen padding is added, we apply a few style rules to negate the top margin for the first heading or paragraph in the popup and do the same for the last element's bottom margin. This keep the popups from having too much vertical space when the content padding and element margins combine.\n\n### Positioning options\n\nBy default, popups open centered vertically and horizontally over the thing you clicked (the origin) which is good for popups used as tooltips or menus. The framework also applies some basic collision detection rules to ensure that the popup will appear on-screen so the ultimate position may not always be centered over the origin.\n\nFor situations like a dialog or lightbox where the popup should appear centered within the window instead of over the origin, add the `data-position-to` attribute to the **link** and specify a value of `window`.\n\nIt's also possible to specify any valid selector as the value of `position-to` in addition to `origin` and `window`. For example, if you add `data-position-to=\"#myElement\"` the popup will be positioned over the element with the id `myElement`.\n\nA few examples:\n\nThe popup's placement constraints, which may cause the popup not to appear centered as desired, are as follow:\n\n1.  The width of the popup will be limited using CSS `max-width` to the width of the window minus a tolerance of 15px on either side.\n2.  A tolerance from the edges of the window (15px from each of the sides and 30px from the top and the bottom) will be observed when the popup fits inside the window. Tall popups are allowed to overflow the top and bottom edges of the window. Those parts of the popup can be viewed by manually scrolling the document. This tolerance can be configured via the [tolerance](#option-tolerance) option.\n3.  The top coordinate of the popup will never be negative. This ensures that the top of the popup will not be cut off.\n4.  If centering the popup over an element would cause the overall height of the document to increase, the popup is shifted upwards at most until its top coordinate becomes 0.\n\nAlso note that a popup is currently always placed at the center of the window after an orientation change or window resize event.\n\nSee [methods](#methods) for information about setting the popup position programmatically, including the option to specify **x and y coordinates**.\n\n### Setting transitions\n\nBy default, popups have no transition to make them open as quickly as possible. To set the transition used for a popup, add the `data-transition` attribute to the link that references the popup. The reverse version of the transition will be used when closing the popup.\n\n``` markup\n<a href=\"#transitionExample\" data-transition=\"flip\" data-rel=\"popup\">\n   Flip transition\n</a>\n```\n\nFor performance reasons on mobile devices, we recommend using simpler transitions like pop, fade or none for smooth and fast popup animations, especially with larger or complex widgets within a popup. To view all transition types, you must be on a browser that supports 3D transforms. By default, devices that lack 3D support (such as Android 2.x) will fallback to \"fade\" for all transition types. See the transitions page for detailed information on the transition system.\n\nWhen you launch the popup from any of the buttons, the `data-transition` set on the button will be used. However, if you launch the popup programmatically, such as via `$( \"#transitionExample\" ).popup( \"open\" )`, the `data-transition` attribute specified in the definition of the popup will be used if present.\n\n### Theming the popup and overlay\n\nThe `popup` plugin provides two theme-related options: `data-theme` and `data-overlay-theme`. The `data-theme` option refers to the theme of the popup itself, whereas `data-overlay-theme` refers to the theme of the popup's background, which covers the entire window behind the popup.\n\n`data-theme` will be inherited from the page, and will always have a valid value when the popup opens, unless you explicitly specify `data-theme=\"none\"`, in which case the popup will have a transparent background.\n\nThe `data-overlay-theme` will never be set, and the popup's background, although always present when the popup is shown, will be completely transparent, unless explicitly set using for example `data-overlay-theme=\"b\"`. In this case, the background will fade in, partially obscuring the rest of the window, to further direct attention to the popup. Here is an example of an explicitly themed popup:\n\n``` markup\n<div id=\"both\" data-role=\"popup\" data-theme=\"b\" data-overlay-theme=\"a\" class=\"ui-content\">\n  ...Popup contents...\n</div>\n```\n\n### Arrows\n\nThe extension `widgets/popup.arrow` provides the `arrow` option, which is also exposed as a data attribute. For example, `data-arrow=\"t,b\"` will result in the popup being displayed with a top or a bottom arrow.\n\nWhen an arrow is requested using the `arrow` option, the popup is positioned along one of the edges of the popup such that the arrow points at the center of the origin. The value of the `arrow` option is a comma-separated list of letters referring to the edges of the popup along which the framework should attempt to place the arrow:\n\n|     |                                                                                                                                                      |\n|-----|------------------------------------------------------------------------------------------------------------------------------------------------------|\n| t   | The framework should attempt to place the popup such that the arrow somewhere along the top edge of the popup points at the center of the origin.    |\n| r   | The framework should attempt to place the popup such that the arrow somewhere along the right edge of the popup points at the center of the origin.  |\n| b   | The framework should attempt to place the popup such that the arrow somewhere along the bottom edge of the popup points at the center of the origin. |\n| l   | The framework should attempt to place the popup such that the arrow somewhere along the left edge of the popup points at the center of the origin.   |\n\nFor each edge given in the list, the framework calculates\n\n1.  the distance between the tip of the arrow and the center of the origin, and\n2.  whether minimizing the above distance would cause the arrow to appear too close to one of the corners of the popup along the given edge.\n\nIf the second condition applies, the edge is discarded as a possible solution for placing the arrow. Otherwise, the calculated distance is examined. If it is 0, meaning that the popup can be placed exactly such that the tip of the arrow points at the center of the origin, no further edges are examined, and the popup is positioned along the last examined edge. **Thus, the order in which the edges are given matters.**\n\nThe example below shows a popup with an arrow either along its left edge or along its top edge.\n\n``` markup\n<div data-role=\"popup\" data-arrow=\"l,t\" class=\"ui-content\">\n  <h2>Popup with an arrow</h2>\n  <p>A second paragraph.</p>\n</div>\n```\n\n### **Note:** Chaining of popups not allowed\n\nThe framework does not currently support chaining of popups so it's not possible to embed a link from one popup to another popup. All links with a `data-rel=\"popup\"` inside a popup will not do anything at all.\n\nThis also means that custom select menus will not work inside popups, because they are themselves implemented using popups. If you place a select menu inside a popup, it will be rendered as a native select menu, even if you specify `data-native-menu=\"false\"`.\n\nA workaround to get chained popups working is the use of a timeout for example in the `popupafterclose` event bound to the invoking popup. In the following example, when the first popup is closed, the second will be opened by a delayed call to the `open` method:\n\n``` javascript\n$( document ).on( \"pageinit\", function() {\n    $( \".popupParent\" ).on({\n        popupafterclose: function() {\n            setTimeout(function() { $( \".popupChild\" ).popup( \"open\" ) }, 100 );\n        }\n    });\n});\n```\n\n## Providing pre-rendered markup\n\nYou can improve the load time of your page by providing the markup that the popup widget would normally create during its initialization.\n\nBy providing this markup yourself, and by indicating that you have done so by setting the attribute `data-enhanced=\"true\"`, you instruct the popup widget to skip these DOM manipulations during instantiation and to assume that the required DOM structure is already present.\n\nWhen you provide such pre-rendered markup you must also set all the classes that the framework would normally set, and you must also set all data attributes whose values differ from the default to indicate that the pre-rendered markup reflects the non-default value of the corresponding widget option.\n\nThe popup widget moves the element on which it is instantiated such that it becomes the last child element of a page `div` or, if the element is not inside a page, it will become the last child element of the `body`. It then wraps the element in a container `div`, and prepends a newly created element that serves as the modal overlay screen to the parent of the container.\n\nThe example below includes an entire jQuery Mobile page rather than just the popup. This helps illustrate where you must place the markup for the pre-rendered popup widget in relation to the jQuery Mobile page on which it is to appears. In the example, the popup has the attribute `data-overlay-theme=\"b\"` to reflect the fact that the modal overlay screen has an associated theme.\n\n``` markup\n<div data-role=\"page\">\n  <div data-role=\"header\">\n    <h1>Example Page</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <a href=\"#pre-rendered\" data-rel=\"popup\" class=\"ui-btn ui-corner-all ui-shadow ui-btn-inline\">Open pre-rendered popup</a>\n  </div>\n  <!-- the following two divs represent the pre-rendered popup widget -->\n  <div class=\"ui-popup-screen ui-overlay-b ui-screen-hidden\"></div>\n  <div class=\"ui-popup-container ui-popup-hidden ui-popup-truncate\" id=\"pre-rendered-popup\">\n    <div class=\"ui-popup ui-body-inherit ui-overlay-shadow ui-corner-all\" id=\"pre-rendered\" data-role=\"popup\" data-enhanced=\"true\" data-overlay-theme=\"b\">\n      <p>Pre-rendered popup</p>\n    </div>\n  </div>\n</div>\n```\n\n## ID generation\n\nThe popup widget adds an ID to the elements it generates. The ID for any given generated element is constructed by suffixing the popup's own ID:\n\nPlaceholder  \n**`<popup-id>`**-placeholder\n\nScreen  \n**`<popup-id>`**-screen\n\nContainer  \n**`<popup-id>`**-popup\n\nFor example, creating a popup with\n\n``` markup\n<div id=\"extra-info\" data-role=\"popup\">\n  <p>To use this feature, enable it from Settings.</p>\n</div>\n```\n\nwill result in the following markup:\n\n``` markup\n<div id=\"extra-info-placeholder\" style=\"display: none;\">\n  <!-- placeholder for extra-info -->\n</div>\n<div id=\"extra-info-screen\" class=\"ui-screen-hidden ui-popup-screen ui-overlay-inherit\"></div>\n<div id=\"extra-info-popup\" class=\"ui-popup-container ui-popup-hidden ui-popup-truncate\">\n  <div id=\"extra-info\" data-role=\"popup\" class=\"ui-popup ui-body-inherit ui-overlay-shadow ui-corner-all\">\n    <p>To use this feature, enable it from Settings.</p>\n  </div>\n</div>\n```\n\n## Options\n\n### arrow\n\n**Type:** [String](http://api.jquery.com/Types/#String) or [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `\"\"`\n\nSets whether to draw the popup with an arrow.\n\nThis option is provided by the `widgets/popup.arrow` extension.\n\nThis option is also exposed as a data attribute: `data-arrow=\"t,b\"`.\n\nThe following values are valid: `true`, `false`, or a string containing a comma-separated list of the letters \"l\", \"t\", \"r\", and \"b\". The list may be empty, in which case it corresponds to a value of `false`. The value `true` corresponds to the list `\"l,t,r,b\"`. This list indicates along which edges the code should attempt to place the arrow. The code tries to place the arrow along each edge given in the list in the left-to-right order given in the list until one such placement would result in the arrow pointing exactly at the desired coordinates. If no arrows can be displayed the popup is positioned as though the value of this option were `false`.\n\n**Multiple types supported:**\n\n- **String**: A comma-separated list of the letters \"l\", \"t\", \"r\", and \"b\".\n- **Boolean**: A value of `true` is equivalent to a value of \"t,r,b,l\", whereas `false` indicates that no arrow is to be shown.\n\n**Code examples:**\n\nInitialize the popup with the `arrow` option specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  arrow: \"l,t,r,b\"\n});\n```\n\nGet or set the `arrow` option, after initialization:\n\n``` javascript\n// Getter\nvar arrow = $( \".selector\" ).popup( \"option\", \"arrow\" );\n \n// Setter\n$( \".selector\" ).popup( \"option\", \"arrow\", \"l,t,r,b\" );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n        \"ui-popup\": \"ui-corner-all ui-overlay-shadow\",\n                \"ui-popup-arrow\": \"ui-overlay-shadow\"\n      }\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the popup with the `classes` option specified, changing the theming for the `ui-popup` class:\n\n``` javascript\n$( \".selector\" ).popup({\n  classes: {\n    \"ui-popup\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-popup` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).popup( \"option\", \"classes.ui-popup\" );\n \n// Setter\n$( \".selector\" ).popup( \"option\", \"classes.ui-popup\", \"highlight\" );\n```\n\n### corners\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nSets whether to draw the popup with rounded corners.\n\nThis option is also exposed as a data attribute: `data-corners=\"false\"`.\n\n**Code examples:**\n\nInitialize the popup with the `corners` option specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  corners: false\n});\n```\n\nGet or set the `corners` option, after initialization:\n\n``` javascript\n// Getter\nvar corners = $( \".selector\" ).popup( \"option\", \"corners\" );\n \n// Setter\n$( \".selector\" ).popup( \"option\", \"corners\", false );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the popup with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).popup( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).popup( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the popup if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the popup with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).popup( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).popup( \"option\", \"disabled\", true );\n```\n\n### dismissible\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nSets whether clicking outside the popup or pressing Escape while the popup is open will close the popup.\n\n*Note:* When history support is turned on, pressing the browser's \"Back\" button will dismiss the popup even if this option is set to false.\n\nThis option is also exposed as a data attribute: `data-dismissible=\"false\"`.\n\n**Code examples:**\n\nInitialize the popup with the `dismissible` option specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  dismissible: false\n});\n```\n\nGet or set the `dismissible` option, after initialization:\n\n``` javascript\n// Getter\nvar dismissible = $( \".selector\" ).popup( \"option\", \"dismissible\" );\n \n// Setter\n$( \".selector\" ).popup( \"option\", \"dismissible\", false );\n```\n\n### history\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nSets whether to alter the url when a popup is open to support the back button.\n\nThis option is also exposed as a data attribute: `data-history=\"false\"`.\n\n**Code examples:**\n\nInitialize the popup with the `history` option specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  history: false\n});\n```\n\nGet or set the `history` option, after initialization:\n\n``` javascript\n// Getter\nvar history = $( \".selector\" ).popup( \"option\", \"history\" );\n \n// Setter\n$( \".selector\" ).popup( \"option\", \"history\", false );\n```\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the popup widget is:\n\n``` javascript\n\":jqmData(role='popup')\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.popup.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates popup widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### overlayTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nSets the color scheme (swatch) for the popup background, which covers the entire window. If not explicitly set, the background will be transparent.\n\nThis option is also exposed as a data attribute: `data-overlay-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the popup with the `overlayTheme` option specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  overlayTheme: \"b\"\n});\n```\n\nGet or set the `overlayTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar overlayTheme = $( \".selector\" ).popup( \"option\", \"overlayTheme\" );\n \n// Setter\n$( \".selector\" ).popup( \"option\", \"overlayTheme\", \"b\" );\n```\n\n### positionTo\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"origin\"`\n\nSets the element relative to which the popup will be centered. It has the following values:\n\n|                 |                                                                                                                                                                                                                                     |\n|-----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `\"origin\"`      | When the popup opens, center over the coordinates passed to the `open()` call (see details on this [method](#method-open)).                                                                                                         |\n| `\"window\"`      | When the popup opens, center in the window.                                                                                                                                                                                         |\n| jQuery selector | When the popup opens, create a jQuery object based on the selector, and center over it. The selector is filtered for elements that are visible with `\":visible\"`. If the result is empty, the popup will be centered in the window. |\n\nThis option is also exposed as a data attribute: `data-position-to=\"window\"`.\n\n**Code examples:**\n\nInitialize the popup with the `positionTo` option specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  positionTo: \"window\"\n});\n```\n\nGet or set the `positionTo` option, after initialization:\n\n``` javascript\n// Getter\nvar positionTo = $( \".selector\" ).popup( \"option\", \"positionTo\" );\n \n// Setter\n$( \".selector\" ).popup( \"option\", \"positionTo\", \"window\" );\n```\n\n### shadow\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nSets whether to draw a shadow around the popup.\n\nThis option is also exposed as a data attribute: `data-shadow=\"false\"`.\n\n**Code examples:**\n\nInitialize the popup with the `shadow` option specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  shadow: false\n});\n```\n\nGet or set the `shadow` option, after initialization:\n\n``` javascript\n// Getter\nvar shadow = $( \".selector\" ).popup( \"option\", \"shadow\" );\n \n// Setter\n$( \".selector\" ).popup( \"option\", \"shadow\", false );\n```\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the popup contents. Unless explicitly set to 'none', the theme for the popup will be assigned the first time the popup is shown by inheriting the page theme or, failing that, by the hard-coded value 'a'. If you set it to 'none', the popup will not have any theme at all, and will be transparent.\n\nPossible values: swatch letter (a-z), or \"none\".\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the popup with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).popup( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).popup( \"option\", \"theme\", \"b\" );\n```\n\n### tolerance\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"30,15,30,15\"`\n\nSets the minimum distance from the edge of the window for the corresponding edge of the popup. By default, the values above will be used for the distance from the top, right, bottom, and left edge of the window, respectively.\n\nYou can specify a value for this option in one of four ways:\n\n1.  Empty string, null, or some other falsy value. This will cause the popup to revert to the above default values.\n2.  A single number. This number will be used for all four edge tolerances.\n3.  Two numbers separated by a comma. The first number will be used for tolerances from the top and bottom edge of the window, and the second number will be used for tolerances from the left and right edge of the window.\n4.  Four comma-separated numbers. The first will be used for tolerance from the top edge, the second for tolerance from the right edge, the third for tolerance from the bottom edge, and the fourth for tolerance from the left edge.\n\n**Code examples:**\n\nInitialize the popup with the `tolerance` option specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  tolerance: \"0,0\"\n});\n```\n\nGet or set the `tolerance` option, after initialization:\n\n``` javascript\n// Getter\nvar tolerance = $( \".selector\" ).popup( \"option\", \"tolerance\" );\n \n// Setter\n$( \".selector\" ).popup( \"option\", \"tolerance\", \"0,0\" );\n```\n\n### transition\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `none`\n\nSets the default transition for the popup. The default value will result in no transition.\n\nIf the popup is opened from a link, and the link has the data-transition attribute set, the value specified therein will override the value of this option at the time the popup is opened from the link.\n\n**Code examples:**\n\nInitialize the popup with the `transition` option specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  transition: \"pop\"\n});\n```\n\nGet or set the `transition` option, after initialization:\n\n``` javascript\n// Getter\nvar transition = $( \".selector\" ).popup( \"option\", \"transition\" );\n \n// Setter\n$( \".selector\" ).popup( \"option\", \"transition\", \"pop\" );\n```\n\n## Methods\n\n### close()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCloses the popup.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the close method:\n\n``` javascript\n$( \".selector\" ).popup( \"close\" );\n```\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the popup functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).popup( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the popup.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).popup( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the popup.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).popup( \"enable\" );\n```\n\n### open( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\ndisplay the popup using the specified options.\n\nIf the `x` or `y` option is missing, and no jQuery selector is given as the value of the `positionTo` option, the middle of the window will be used.\n\nThe `transition` option can be used to override the popup's own `transition` option. This will result in the popup opening via the transition specified in the call, but the popup's `transition` option will not be updated.\n\nSimilarly, the `positionTo` option can be used to override the popup's default positioning without modifying the value of the popup's `positionTo` option. The values available for `positionTo` are the same as those for the popup's [`positionTo` option](#option-positionTo).\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **x** (default: )\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The x-coordinate where the popup is to be displayed.\n\n  - **y** (default: )\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The y-coordinate where the popup is to be displayed.\n\n  - **transition** (default: )\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The transition to use during the opening sequence.\n\n  - **positionTo** (default: )\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The positioning to use.\n\n**Code examples:**\n\nInvoke the open method:\n\n``` javascript\n$( \".selector\" ).popup( \"open\", options );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).popup( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current popup options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).popup( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the popup option associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).popup( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the popup.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).popup( \"option\", { disabled: true } );\n```\n\n### reposition( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nChange the on-screen position of the popup. See the `open()` method for a description of the keys recognized from the `options` object.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **x** (default: )\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n    The x-coordinate where the popup is to be displayed.\n\n  - **y** (default: )\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n    The y-coordinate where the popup is to be displayed.\n\n  - **positionTo** (default: `\"origin\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The positioning to use.\n\n**Code examples:**\n\nInvoke the reposition method:\n\n``` javascript\n$( \".selector\" ).popup( \"reposition\", options );\n```\n\n## Events\n\n### afterclose( event )Type: `popupafterclose`\n\nTriggered when a popup has completely closed\n\nThis event is triggered when the popup has completely disappeared from the screen, meaning that all associated animations have completed.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the popup with the afterclose callback specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  afterclose: function( event, ui ) {}\n});\n```\n\nBind an event listener to the popupafterclose event:\n\n``` javascript\n$( \".selector\" ).on( \"popupafterclose\", function( event, ui ) {} );\n```\n\n### afteropen( event )Type: `popupafteropen`\n\nTriggered after a popup has completely opened\n\nThis event is triggered when the popup has completely appeared on the screen, meaning that all associated animations have completed.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the popup with the afteropen callback specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  afteropen: function( event, ui ) {}\n});\n```\n\nBind an event listener to the popupafteropen event:\n\n``` javascript\n$( \".selector\" ).on( \"popupafteropen\", function( event, ui ) {} );\n```\n\n### beforeposition( event, ui )Type: `popupbeforeposition`\n\nTriggered before a popup computes the coordinates where it will appear\n\nThis event is triggered when the popup has completed preparations for appearing on the screen, when the document is resized and the popup needs to move to another location, or when the `reposition()` method is called. At this point the popup has not yet started the opening animations and it has not yet calculated the coordinates where it will appear on the screen. Handling this event gives an opportunity to modify the content of the popup before it appears on the screen. For example, the content can be scaled or parts of it can be hidden or removed if it is too wide or too tall. You can also modify the `options` parameter to affect the popup's placement. The properties inside the `options` object available for modification are the same as those used by the `reposition` method.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the popup with the beforeposition callback specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  beforeposition: function( event, ui ) {}\n});\n```\n\nBind an event listener to the popupbeforeposition event:\n\n``` javascript\n$( \".selector\" ).on( \"popupbeforeposition\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `popupcreate`\n\nTriggered when the popup is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the popup with the create callback specified:\n\n``` javascript\n$( \".selector\" ).popup({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the popupcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"popupcreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of a Popup.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>popup demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <a href=\"#popupBasic\" data-rel=\"popup\">Open Popup</a>\n    <div data-role=\"popup\" id=\"popupBasic\">\n      <p>This is a completely basic popup, no options set.</p>\n    </div>\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/popup](https://api.jquerymobile.com/popup)"
- name: Rangeslider
  id: rangeslider
  summary: The rangeslider widget can be considered as a double handle slider
  description: "# Rangeslider Widget\n\n## Rangeslider Widgetversion added: 1.3\n\n**Description:** Creates a rangeslider widget\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[highlight](#option-highlight)\n\n[initSelector](#option-initSelector)\n\n[mini](#option-mini)\n\n[theme](#option-theme)\n\n[trackTheme](#option-trackTheme)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n### Events\n\n[create](#event-create)\n\n[normalize](#event-normalize)\n\n## Range Slider\n\nThe rangeslider widget can be considered as a double handle slider. To add a rangeslider widget to your page, use two standard inputs with the `type=\"range\"` attribute, and put them inside a `<div>` container. The input values are used to configure the starting position of the handles and the values are populated in the corresponding text inputs (the first one at the beginning of the rangeslider, and the second one at the end). Specify `min` and `max` attribute values to set the rangeslider's range. If you want to constrain inputs to specific increments, add the `step` attribute. Set the `value` attribute on each input to define their initial value. The framework will parse these attributes to configure the rangeslider widget.\n\nAs you drag the rangeslider's handles, the framework will update the native input values (and vice-versa) so they are always in sync; this ensures that the values are submitted with the form.\n\nSet the `for` attribute of the `labels` to match the `ids` of the `inputs` so they are semantically associated. It's possible to accessibly hide the labels if they're not desired in the page layout, but we require that they are present in the markup for semantic and accessibility reasons.\n\nThe framework will find all `input` elements with a `type=\"range\"` and automatically enhance them into a slider with an accompanying input without any need to apply a `data-role` attribute. To prevent the automatic enhancement of this input into a slider, add the `data-role=\"none\"` attribute to the inputs.\n\n### Theming\n\nThe rangeslider widget uses the [jQuery Mobile CSS framework](theming/css-framework) to style its look and feel. If rangeslider specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-rangeslider`: The outermost container for rangeslider.\n  - `ui-slider-popup`: Tooltip popup element in case `data-popup-enabled` is `true`\n  - `ui-slider-first`: Opening range input element of rangeslider\n  - `ui-slider-last`: Closing range input element of rangeslider\n  - `ui-rangeslider-sliders`: Sliders for rangeslider\n\nIn this example, the acceptable range is 0-100.\n\n``` markup\n<div data-role=\"rangeslider\">\n  <label for=\"range-1a\">Rangeslider:</label>\n  <input name=\"range-1a\" id=\"range-1a\" min=\"0\" max=\"100\" value=\"0\" type=\"range\" />\n  <label for=\"range-1b\">Rangeslider:</label>\n  <input name=\"range-1b\" id=\"range-1b\" min=\"0\" max=\"100\" value=\"100\" type=\"range\" />\n</div>\n```\n\nThe default rangeslider with these settings is displayed like this:\n\n### Step increment\n\nTo force the range to snap to a specific increment, add the `step` attribute to the input. By default, the step is 1, but in this example, the step is 0.1 and the maximum value is 10.\n\nIn this example, the acceptable range is 0-100.\n\n``` markup\n<div data-role=\"rangeslider\">\n  <label for=\"range-10a\">Rangeslider:</label>\n  <input name=\"range-10a\" id=\"range-10a\" min=\"0\" max=\"10\" step=\".1\" value=\"0\" type=\"range\" />\n  <label for=\"range-10b\">Rangeslider:</label>\n  <input name=\"range-10b\" id=\"range-10b\" min=\"0\" max=\"10\" step=\".1\" value=\"10\" type=\"range\" />\n</div>\n```\n\nThis will produce an input that snaps to increments of 0.1. If a value is added to the input that isn't valid with the step increment, the value will be reset on blur to the closest step.\n\n### Fill highlight\n\nBy default, there is a highlight fill on the track between the two slider handles. To remove it, add the `data-highlight=\"false\"` attribute to the input. The fill uses the active state swatch.\n\n``` markup\n<div data-role=\"rangeslider\" data-highlight=\"false\">\n  <label for=\"range-2a\">Rangeslider (default is \"true\"):</label>\n  <input name=\"range-2a\" id=\"range-2a\" min=\"0\" max=\"100\" value=\"0\" type=\"range\" />\n  <label for=\"range-2b\">Rangeslider:</label>\n  <input name=\"range-2b\" id=\"range-2b\" min=\"0\" max=\"100\" value=\"100\" type=\"range\" />\n</div>\n```\n\n### Theming the slider\n\nTo set the theme swatch for the rangeslider, add a `data-theme` attribute to the `inputs` which will apply the theme to the inputs, handles and track. The track swatch can be set separately by adding the `data-track-theme` attribute to apply the down state version of the selected button swatch.\n\n``` markup\n<div data-role=\"rangeslider\" data-track-theme=\"a\" data-theme=\"b\">\n  <label for=\"range-3a\">Rangeslider:</label>\n  <input name=\"range-3a\" id=\"range-3a\" min=\"0\" max=\"100\" value=\"0\" type=\"range\" />\n  <label for=\"range-3b\">Rangeslider:</label>\n  <input name=\"range-3b\" id=\"range-3b\" min=\"0\" max=\"100\" value=\"100\" type=\"range\" />\n</div>\n```\n\nThis will produce a themed rangeslider:\n\n### Mini version\n\nFor a more compact version that is useful in toolbars and tight spaces, add the `data-mini=\"true\"` attribute to the element to create a mini version.\n\n``` markup\n<div data-role=\"rangeslider\" data-mini=\"true\">\n  <label for=\"range-4a\">Rangeslider:</label>\n  <input name=\"range-4a\" id=\"range-4a\" min=\"0\" max=\"100\" value=\"0\" type=\"range\" />\n  <label for=\"range-4b\">Rangeslider:</label>\n  <input name=\"range-4b\" id=\"range-4b\" min=\"0\" max=\"100\" value=\"100\" type=\"range\" />\n</div>\n```\n\nThis will produce a rangeslider and its corresponding inputs that are not as tall as the standard version. The inputs also have a smaller text size.\n\n### Field containers\n\nOptionally wrap the rangeslider markup in a container with class `ui-field-contain` to help visually group it in a longer form. In this example, the step attribute is omitted to allow any whole number value to be selected.\n\n**Note:** The `data-` attribute `data-role=\"fieldcontain\"` is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use the `ui-field-contain` class instead.\n\n``` markup\n<div class=\"ui-field-contain\">\n  <div data-role=\"rangeslider\">\n    <label for=\"range-7a\">Rangeslider:</label>\n    <input name=\"range-7a\" id=\"range-7a\" min=\"0\" max=\"100\" value=\"0\" type=\"range\" />\n    <label for=\"range-7b\">Rangeslider:</label>\n    <input name=\"range-7b\" id=\"range-7b\" min=\"0\" max=\"100\" value=\"100\" type=\"range\" />\n  </div>\n</div>\n```\n\nThe rangeslider is now displayed like this:\n\nSliders also respond to key commands. Right Arrow, Up Arrow and Page Up keys increase the value; Left Arrow, Down Arrow and Page Down keys decrease it. To move the slider to its minimum or maximum value, use the Home or End key, respectively.\n\n### Calling the rangeslider plugin\n\nThis plugin will auto initialize on any page that contains a `div` with the `data-role=\"rangeslider\"` attribute. However, if needed you can directly call the rangeslider plugin on any selector, just like any jQuery plugin:\n\n``` javascript\n$( \"div#range-slider\" ).rangeslider();\n```\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the rangeslider with the `classes` option specified, changing the theming for the `ui-rangeslider` class:\n\n``` javascript\n$( \".selector\" ).rangeslider({\n  classes: {\n    \"ui-rangeslider\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-rangeslider` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).rangeslider( \"option\", \"classes.ui-rangeslider\" );\n \n// Setter\n$( \".selector\" ).rangeslider( \"option\", \"classes.ui-rangeslider\", \"highlight\" );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the rangeslider with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).rangeslider({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).rangeslider( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).rangeslider( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the rangeslider if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the rangeslider with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).rangeslider({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).rangeslider( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).rangeslider( \"option\", \"disabled\", true );\n```\n\n### highlight\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nSets an active state fill on the track between the two rangeslider handles when set to \"true\".\n\nThis option is also exposed as a data attribute: `data-highlight=\"false\"`.\n\n**Code examples:**\n\nInitialize the rangeslider with the `highlight` option specified:\n\n``` javascript\n$( \".selector\" ).rangeslider({\n  highlight: false\n});\n```\n\nGet or set the `highlight` option, after initialization:\n\n``` javascript\n// Getter\nvar highlight = $( \".selector\" ).rangeslider( \"option\", \"highlight\" );\n \n// Setter\n$( \".selector\" ).rangeslider( \"option\", \"highlight\", false );\n```\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the rangeslider widget is:\n\n``` javascript\n\":jqmData(role='rangeslider')\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.rangeslider.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates rangeslider widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### mini\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `null (false)`\n\nIf set to `true`, this will display a more compact version of the rangeslider that uses less vertical height by applying the `ui-mini` class to the outermost element of the rangeslider widget.\n\n**Note:** `mini` option is deprecated in 1.5 and will be removed in 1.6\n\nThis option is also exposed as a data attribute: `data-mini=\"true\"`.\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the rangeslider widget. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the rangeslider with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).rangeslider({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).rangeslider( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).rangeslider( \"option\", \"theme\", \"b\" );\n```\n\n### trackTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the slider's track, specifically. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option can be overridden in the markup by assigning a data attribute to the input, e.g. `data-track-theme=\"a\"`.\n\n**Code examples:**\n\nInitialize the rangeslider with the `trackTheme` option specified:\n\n``` javascript\n$( \".selector\" ).rangeslider({\n  trackTheme: \"a\"\n});\n```\n\nGet or set the `trackTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar trackTheme = $( \".selector\" ).rangeslider( \"option\", \"trackTheme\" );\n \n// Setter\n$( \".selector\" ).rangeslider( \"option\", \"trackTheme\", \"a\" );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the rangeslider functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).rangeslider( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the rangeslider.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).rangeslider( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the rangeslider.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).rangeslider( \"enable\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).rangeslider( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current rangeslider options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).rangeslider( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the rangeslider option associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).rangeslider( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the rangeslider.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).rangeslider( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nupdate the rangeslider.\n\nIf you manipulate a rangeslider via JavaScript, you must call the refresh method on it to update the visual styling.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).rangeslider( \"refresh\" );\n```\n\n## Events\n\n### create( event, ui )Type: `rangeslidercreate`\n\nTriggered when the rangeslider is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the rangeslider with the create callback specified:\n\n``` javascript\n$( \".selector\" ).rangeslider({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the rangeslidercreate event:\n\n``` javascript\n$( \".selector\" ).on( \"rangeslidercreate\", function( event, ui ) {} );\n```\n\n### normalize( event )Type: `rangeslidernormalize`\n\ntriggered when the input values are normalized (generally happens when you try to drag one handle past the other).\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the rangeslider with the normalize callback specified:\n\n``` javascript\n$( \".selector\" ).rangeslider({\n  normalize: function( event, ui ) {}\n});\n```\n\nBind an event listener to the rangeslidernormalize event:\n\n``` javascript\n$( \".selector\" ).on( \"rangeslidernormalize\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of a rangeslider.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>rangeslider demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div data-role=\"rangeslider\">\n    <label for=\"range-1a\">Rangeslider:</label>\n    <input name=\"range-1a\" id=\"range-1a\" min=\"0\" max=\"100\" value=\"0\" type=\"range\">\n    <label for=\"range-1b\">Rangeslider:</label>\n    <input name=\"range-1b\" id=\"range-1b\" min=\"0\" max=\"100\" value=\"100\" type=\"range\">\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/rangeslider](https://api.jquerymobile.com/rangeslider)"
- name: Reflow Table
  id: table-reflow
  summary: The reflow table mode works by collapsing the table columns into a stacked presentation that looks like blocks of label/data pairs for each row
  description: "# Reflow Table Widget\n\n## Reflow Table Widgetversion added: 1.3\n\n**Description:** Creates a responsive table in reflow mode\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes.cellLabels](#option-classes.cellLabels)\n\n[classes.reflowTable](#option-classes.reflowTable)\n\n[initSelector](#option-initSelector)\n\n### Methods\n\n[refresh](#method-refresh)\n\n### Events\n\n[create](#event-create)\n\nThe reflow table mode works by collapsing the table columns into a stacked presentation that looks like blocks of label/data pairs for each row. Since the HTML source order of a table prohibits styling a table to look like this, the plugin dynamically adds a bit of markup to make the display work (without affecting accessibility). Here is a demo of a basic table using reflow mode:\n\n### Applying reflow mode to a table\n\nThe reflow responsive table mode is the simplest in terms of markup requirements because it only requires a table with a `data-role=\"table\"` on the table element. There is no need to set the `data-mode` attribute since `reflow` is the default.\n\n``` markup\n<table data-role=\"table\" id=\"my-table\">\n```\n\n### How reflow mode works\n\nThe plugin works by parsing the values (or `abbr title`) of the first row of header (`th`) elements found in the table. For example, in the table above, the third table header is parsed to grab the contents (\"Year\"):\n\n``` markup\n<th>Year</th>\n```\n\nThe script then appends an element with the table header text *before* the contents of every cell in that column. For example, for every table cell in the year column:\n\n``` markup\n<td>1941</td>\n```\n\nAn element is added before the text of each cell with a `class` of `ui-table-cell-label`:\n\n``` markup\n<td><b class=\"ui-table-cell-label\">Year</b>1941</td>\n```\n\nWith our mobile-first approach, the base styles for a reflow table stacks each row and presents each cell in the label/data style format. This is done by hiding the table header rows, making each table cell `display:block` so they are stacked. The the label element injected into each cell is styled as `display:inline-block` with a `min-width:30%` rule to place the labels on the same line as the content at a consistent width to form a two column presentation.\n\nIt is important to note that you are required to wrap your table headers in a `<thead> ... </thead>` block, and the table body in a `<tbody> ... </tbody>` block, as shown in the [full demo Example](#entry-examples).\n\n### Making the table responsive\n\nBy default, a table with reflow mode will display the stacked presentation style on all screen widths. The styles to make the table responsive are added by applying a media query with rules to switch to the tabular style presentation above a specific screen width.\n\nThis is done by wrapping a few simple CSS rules in and a media query that only applies the rules above a certain width breakpoint. The styles make the table header rows visible, display the cells in a tabular format, and hide the generated label elements within each. Here is an example media query that swaps the presentation at 40em (640 pixels):\n\n``` javascript\n@media ( min-width: 40em ) {\n  /* Show the table header rows and set all cells to display: table-cell */\n  .my-custom-breakpoint td,\n  .my-custom-breakpoint th,\n  .my-custom-breakpoint tbody th,\n  .my-custom-breakpoint tbody td,\n  .my-custom-breakpoint thead td,\n  .my-custom-breakpoint thead th {\n    display: table-cell;\n    margin: 0;\n  }\n  /* Hide the labels in each cell */\n  .my-custom-breakpoint td .ui-table-cell-label,\n  .my-custom-breakpoint th .ui-table-cell-label {\n    display: none;\n  }\n}\n```\n\nIt's best to use a `class` on the table to apply the breakpoint. Add these rules to your custom stylesheet that is included in the `head` of the page. We recommend creating a set of custom breakpoint classes that can be used to apply standard table breakpoints in your project.\n\nIn the example above, we're assuming there is a class of `my-custom-breakpoint` added to the table to apply the breakpoint. Each of the rules in the custom media query are scoped against that table class to target only tables that have the `my-custom-breakpoint` class.\n\nIn order for this technique to work, a browser must support media queries and the ability to style table cells as block-level elements. In testing, most popular desktop and mobile browsers meet these criteria, but older versions of Internet Explorer (8 and older) fall back to a normal table presentation. IE 9 can support this technique but there are a few additional styles needed so we recommend applying these in a `max-width` media query to only apply them below the table presentation because they are hard to negate.\n\n### Choosing a breakpoint\n\nThe goal is to determine the minimum width at which the *entire table* will fit comfortably within the screen. Find this width by populating a table with realistic sample data, then adjust the browser window until the table completely fits and has a bit of extra space to account for rendering differences across devices. This is the natural place to set the breakpoint that switches between the stacked and tabular presentation modes.\n\nThe breakpoint width is highly dependent on the number of columns in the table and content within each cell. On some sites, this may be as low as 30em (480px) and on others, it could be as wide as 100em (1,600px). There is no way for the framework to decide on a \"standard breakpoint\" that will work for everyone â that's why there isn't a breakpoint built into the table by default.\n\nWe recommend writing media query widths are in `em`'s so they respond to font size changes. To convert a pixel width into `em`'s, divide the target width by 16 (pixels). Use this value for the `min-width` value in the media query above.\n\n### Applying a preset breakpoint\n\nEven though we strongly encourage you to write custom breakpoints yourself, the framework includes a single pre-configured breakpoint that targets the stacked style to smaller phones and swaps to a tabular prsentation on larger phones, tablet and desktop devices. To use this preset breakpoint, add the `ui-responsive` class to the table to convert from the stacked presentation to a tabular presentation at 560px (35em). If this breakpoint doesn't work for your content, we encourage you to write a custom breakpoint as descibed above.\n\n``` markup\n<table data-role=\"table\" class=\"ui-responsive\">\n```\n\n### Working with grouped column headers\n\nIt's fairly common to need to logically group multiple columns together under a heading group for financial or scientific data. The framework can support the most simple version of this by allowing for two rows of table headers (`TH`), with the first row containing simple `colspan` attributes to group the columns below. In this configuration, the framework will add a class to the label of the first cell in each group to allow you to style these differently and provide aditional visual hierarchy.\n\n## Options\n\n### classes.cellLabels\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-table-cell-label\"`\n\nClass added to the first cell within each grouped header's column. This makes it easy to style these differently to visually delineate the column groups.\n\nNote: The reflow mode has one option, classes, which is only configurable via JavaScript because it expects an object literal value. The classes option has two properties that define the structural classnames that the plugin uses.\n\n### classes.reflowTable\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ui-table-reflow\"`\n\nClass added to the generated label content added to each table cell based on the header name.\n\nNote: The reflow mode has one option, classes, which is only configurable via JavaScript because it expects an object literal value. The classes option has two properties that define the structural classnames that the plugin uses.\n\n### initSelector\n\n**Type:** [CSS selector string](http://api.jquery.com/Types/#CSS%20selector%20string)\n\n**Default:** `\":jqmData(role='table')\"`\n\nThis is used to define the selectors (element types, data roles, etc.) that will automatically be initialized as tables. To change which elements are initialized, bind this option to the mobileinit event:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.table.prototype.options.initSelector = \".mytable\";\n});\n```\n\n## Methods\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nUpdates the labels in the cells.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).table( \"refresh\" );\n```\n\n## Events\n\n### create( event, ui )Type: `tablecreate`\n\nSince this plugin is written as an extension to the core table plugin, it binds to the tablecreate event but does not issue any additional events.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the table with the create callback specified:\n\n``` javascript\n$( \".selector\" ).table({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the tablecreate event:\n\n``` javascript\n$( \".selector\" ).on( \"tablecreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of a responsive table in reflow mode.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>table demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <table data-role=\"table\" id=\"movie-table\" data-mode=\"reflow\" class=\"ui-responsive table-stroke\">\n      <thead>\n        <tr>\n          <th data-priority=\"1\">Rank</th>\n          <th data-priority=\"persist\">Movie Title</th>\n          <th data-priority=\"2\">Year</th>\n          <th data-priority=\"3\"><abbr title=\"Rotten Tomato Rating\">Rating</abbr></th>\n          <th data-priority=\"4\">Reviews</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th>1</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/Citizen_Kane\" data-rel=\"external\">Citizen Kane</a></td>\n          <td>1941</td>\n          <td>100%</td>\n          <td>74</td>\n        </tr>\n        <tr>\n          <th>2</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/Casablanca_(film)\" data-rel=\"external\">Casablanca</a></td>\n          <td>1942</td>\n          <td>97%</td>\n          <td>64</td>\n        </tr>\n        <tr>\n          <th>3</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/The_Godfather\" data-rel=\"external\">The Godfather</a></td>\n          <td>1972</td>\n          <td>97%</td>\n          <td>87</td>\n        </tr>\n        <tr>\n          <th>4</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/Gone_with_the_Wind_(film)\" data-rel=\"external\">Gone with the Wind</a></td>\n          <td>1939</td>\n          <td>96%</td>\n          <td>87</td>\n        </tr>\n        <tr>\n          <th>5</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/Lawrence_of_Arabia_(film)\" data-rel=\"external\">Lawrence of Arabia</a></td>\n          <td>1962</td>\n          <td>94%</td>\n          <td>87</td>\n        </tr>\n        <tr>\n          <th>6</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/Dr._Strangelove\" data-rel=\"external\">Dr. Strangelove Or How I Learned to Stop Worrying and Love the Bomb</a></td>\n          <td>1964</td>\n          <td>92%</td>\n          <td>74</td>\n        </tr>\n        <tr>\n          <th>7</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/The_Graduate\" data-rel=\"external\">The Graduate</a></td>\n          <td>1967</td>\n          <td>91%</td>\n          <td>122</td>\n        </tr>\n        <tr>\n          <th>8</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/The_Wizard_of_Oz_(1939_film)\" data-rel=\"external\">The Wizard of Oz</a></td>\n          <td>1939</td>\n          <td>90%</td>\n          <td>72</td>\n        </tr>\n        <tr>\n          <th>9</th>\n          <td><a href=\"http://en.wikipedia.org/wiki/Singin%27_in_the_Rain\" data-rel=\"external\">Singin' in the Rain</a></td>\n          <td>1952</td>\n          <td>89%</td>\n          <td>85</td>\n        </tr>\n        <tr>\n          <th>10</th>\n          <td class=\"title\"><a href=\"http://en.wikipedia.org/wiki/Inception\" data-rel=\"external\">Inception</a></td>\n          <td>2010</td>\n          <td>84%</td>\n          <td>78</td>\n        </tr>\n      </tbody>\n    </table>\n \n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/table-reflow](https://api.jquerymobile.com/table-reflow)"
- name: Responsive Grid
  id: responsive-grid
  summary: When using layout grids for building full-level layouts, it may make sense to apply responsive web design (RWD) principles to ensure that the layout adapts to a wide range screen widths
  description: "# Responsive Grid\n\n## Responsive Gridversion added: 1.3\n\n**Description:** Reponsive layout grids\n\n### Responsive grids\n\nWhen using [layout grids](grid-layout) for building full-level layouts, it may make sense to apply responsive web design (RWD) principles to ensure that the layout adapts to a wide range screen widths.\n\nThe simplest form of responsive behavior swaps from a stacked layout on narrow screens like a smartphone to the multi-column grid layouts at wider screens. This can be done by targeting styles to specific screen widths by using CSS media queries.\n\n### Making the grids responsive\n\nBy default, the grid classes will result in a multi column layout across all screen widths. The styles to make the grids responsive are added by applying a media query with rules to switch to the stacked style presentation below a specific screen width.\n\nWe normally recommend starting with mobile-first approach for media queries: starting with the styles that apply to the smallest screen sizes in the core widget styles, then progressively layering breakpoints up to larger screens by using `min-width` media queries.\n\nHowever, in the case of grids we can use a `max-width` media query to only apply the stacked grid styles *below* a width breakpoint. This allows us to leverage all the default grid styles but just tweak them at narrow widths.\n\nWithout the custom styles, our grid will be a 3 column layout across all screen widths:\n\nIn our custom styles, we want this grid to stack at narrow widths, then switch to a standard 3 column layout. At very wide screen widths, we want first column to take up 50% of the width, like this:\n\nTo make this responsive, start by adding the `my-breakpoint` class to the grid container that references the custom breakpoint in your custom stylesheet:\n\n``` markup\n<div class=\"ui-grid-b my-breakpoint\">\n  <div class=\"ui-block-a\">Block A</div>\n  <div class=\"ui-block-b\">Block B</div>\n  <div class=\"ui-block-c\">Block C</div>\n</div><!-- /grid-b -->\n```\n\n#### Adding the stack breakpoint at narrow widths\n\nThis class is used to scope the styles within the custom media query so they will only apply when this class is added to the grid container. The media query wraps the conditional styles we only want applied below 50em.\n\nIn your media queries, use em units instead of pixels to ensure that the media query will take font size into account in addition to just screen width. To calculate a screen widths in ems, divide the target width in pixels by 16 which is the default font size of the body.\n\n``` javascript\n@media all and (max-width: 50em) {\n  .my-breakpoint .ui-block-a,\n  .my-breakpoint .ui-block-b,\n  .my-breakpoint .ui-block-c,\n  .my-breakpoint .ui-block-d,\n  .my-breakpoint .ui-block-e {\n    width: 100%;\n    float:none;\n  }\n}\n```\n\nWithin this media query, we set the width to 100% and negate the float property to make the grid blocks stack below 50em screen widths. These rules are applied to every [grid type](content-grids) by stacking up selectors for all the grid classes from `ui-block-a` to `ui-block-e` on the styles.\n\nThat is all it takes to make grids responsive and it's easy to add additional styling rules to each breakpoint to change it up even more. We encourage you to create as many custom breakpoints as you need based on your unique content and layout needs.\n\n#### Adding a widescreen breakpoint to adjust ratios\n\nBuilding on the example above, we can add an additional breakpoint to shift the widths to make the first column 50% width and the other two 25% above 75em (1,200 pixels) by layering an additional `min-width` media query to tweak widths in our custom style like this:\n\n``` javascript\n@media all and (min-width: 75em) {\n  .my-breakpoint.ui-grid-b .ui-block-a { width: 49.95%; }\n  .my-breakpoint.ui-grid-b .ui-block-b,\n  .my-breakpoint.ui-grid-b .ui-block-c { width: 24.925%; }\n  .my-breakpoint.ui-grid-b .ui-block-a { clear: left; }\n  }\n}\n```\n\nNote the slightly narrower widths set to work around rounding issues across platforms.\n\n### Applying a preset breakpoint\n\nEven though we strongly encourage you to write custom breakpoints yourself, the framework includes a single pre-configured breakpoint that targets the stacked style to smaller phones and swaps to the multi-column presentation on larger phones, tablet and desktop devices.\n\nTo use this preset breakpoint, add the `ui-responsive` class to the grid container to apply the stacked presentation *below* 560px (35em). If this breakpoint doesn't work for your content, we encourage you to write a custom breakpoint as described above.\n\n``` markup\n<div class=\"ui-grid-b ui-responsive\">\n```\n\nThese are standard grids that are made responsive by `ui-responsive` class to the grid container:\n\n#### Grid A (50/50)\n\n#### Grid B (33/33/33)\n\n#### Grid C (25/25/25/25)\n\n#### Grid D (20/20/20/20/20)\n\n## Example:\n\nA basic example of responsive grids\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>responsive-grid demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n    @media all and (max-width: 35em) {\n    .my-breakpoint .ui-block-a,\n    .my-breakpoint .ui-block-b,\n    .my-breakpoint .ui-block-c,\n    .my-breakpoint .ui-block-d,\n    .my-breakpoint .ui-block-e {\n      width: 100%;\n      float:none;\n    }\n  }\n \n  @media all and (min-width: 45em) {\n    .my-breakpoint.ui-grid-b .ui-block-a { width: 49.95%; }\n    .my-breakpoint.ui-grid-b .ui-block-b,\n    .my-breakpoint.ui-grid-b .ui-block-c { width: 24.925%; }\n  }\n  </style>\n</head>\n<body>\n<div data-role=\"header\">\n    <h1>Responsive Grid Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <div class=\"ui-grid-b my-breakpoint\">\n      <div class=\"ui-block-a\"><div class=\"ui-body ui-body-d\">Block A</div></div>\n      <div class=\"ui-block-b\"><div class=\"ui-body ui-body-d\">Block B</div></div>\n      <div class=\"ui-block-c\"><div class=\"ui-body ui-body-d\">Block C</div></div>\n    </div>\n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/responsive-grid](https://api.jquerymobile.com/responsive-grid)"
- name: scrollstart event
  id: scrollstart
  summary: 'Description: Triggers when a scroll begins'
  description: "# scrollstart\n\n## scrollstart eventversion added: 1.0\n\n**Description:** Triggers when a scroll begins.\n\n- #### jQuery( \".selector\" ).on( \"scrollstart\", function( event ) { ... } )\n\nNote that iOS devices freeze DOM manipulation during scroll, queuing them to apply when the scroll finishes. We're currently investigating ways to allow DOM manipulations to apply before a scroll starts.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/scrollstart](https://api.jquerymobile.com/scrollstart)"
- name: scrollstop event
  id: scrollstop
  summary: 'Description: Triggers when a scroll finishes'
  description: "# scrollstop\n\n## scrollstop eventversion added: 1.0\n\n**Description:** Triggers when a scroll finishes.\n\n- #### jQuery( \".selector\" ).on( \"scrollstop\", function( event ) { ... } )\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/scrollstop](https://api.jquerymobile.com/scrollstop)"
- name: Selectmenu
  id: selectmenu
  summary: The select menu is based on a native select element, which is hidden from view and replaced with a custom-styled select button that matches the look and feel of the jQuery Mobile framework
  description: "# Selectmenu Widget\n\n## Selectmenu Widgetversion added: 1.0\n\n**Description:** Creates a select menu widget\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[closeText](#option-closeText)\n\n[corners](#option-corners)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[dividerTheme](#option-dividerTheme)\n\n[hidePlaceholderMenuItems](#option-hidePlaceholderMenuItems)\n\n[icon](#option-icon)\n\n[iconpos](#option-iconpos)\n\n[iconshadow](#option-iconshadow)\n\n[initSelector](#option-initSelector)\n\n[inline](#option-inline)\n\n[mini](#option-mini)\n\n[nativeMenu](#option-nativeMenu)\n\n[overlayTheme](#option-overlayTheme)\n\n[preventFocusZoom](#option-preventFocusZoom)\n\n[shadow](#option-shadow)\n\n[theme](#option-theme)\n\n### Methods\n\n[close](#method-close)\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[open](#method-open)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n### Events\n\n[create](#event-create)\n\nThe select menu is based on a native select element, which is hidden from view and replaced with a custom-styled select button that matches the look and feel of the jQuery Mobile framework. The select menu is ARIA-enabled and keyboard accessible on the desktop as well.\n\nBy default, the framework leverages the native OS options menu to use with the custom button. When the button is clicked, the native OS menu will open. When a value is selected and the menu closes, the custom button's text is updated to match the selected value. Please note that the framework also offers the possibility of having custom (non-native) select menus.\n\nTo add a select menu to your page, start with a standard `select` element populated with a set of `option` elements. Set the `for` attribute of the `label` to match the `id` of the `select` so they are semantically associated. It's possible to accessibly hide the label if it's not desired in the page layout, but we require that it is present in the markup for semantic and accessibility reasons.\n\nThe framework will find all `select` elements and automatically enhance them into select menus, no need to apply a `data-role` attribute. To prevent the automatic enhancement of a select, add `data-role=\"none\"` attribute to the `select`.\n\n### Theming\n\nThe selectmenu widget uses the [jQuery Mobile CSS framework](theming/css-framework) to style its look and feel. If selectmenu specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-selectmenu`: The outermost container for selectmenu.\n  - `ui-selectmenu-button`: Custom styled button for the selectmenu\n    - `ui-selectmenu-button-icon`: Selectmenu button icon\n    - `ui-selectmenu-button-text`: Selectmenu button text\n\n  `ui-selectmenu-custom`: The outermost container for custom selectmenu.\n  - `ui-selectmenu-custom-list`: List element for custom selectmenu\n    - `ui-selectmenu-custom-header-close-button`: Close button for custom selectmenu\n      - `ui-selectmenu-custom-header-close-button-icom`: Close button icon for custom selectmenu\n\n``` markup\n<label for=\"select-choice-0\" class=\"select\">Shipping method:</label>\n<select name=\"select-choice-0\" id=\"select-choice-0\">\n  <option value=\"standard\">Standard: 7 day</option>\n  <option value=\"rush\">Rush: 3 days</option>\n  <option value=\"express\">Express: next day</option>\n  <option value=\"overnight\">Overnight</option>\n</select>\n```\n\nThis will produce a basic select menu. The default styles set the width of the input to 100% of the parent container and stacks the label on a separate line.\n\n## Mini version\n\nFor a more compact version that is useful in toolbars and tight spaces, add the `data-mini=\"true\"` attribute to the element to create a mini version.\n\n``` markup\n<label for=\"select-choice-min\" class=\"select\">Shipping method:</label>\n<select name=\"select-choice-min\" id=\"select-choice-min\" data-mini=\"true\">\n  <option value=\"standard\">Standard: 7 day</option>\n  <option value=\"rush\">Rush: 3 days</option>\n  <option value=\"express\">Express: next day</option>\n  <option value=\"overnight\">Overnight</option>\n</select>\n```\n\nThis will produce a select that a not as tall as the standard version and has a smaller text size.\n\n## Field containers\n\nOptionally wrap the selects in a container with class `ui-field-contain` to help visually group it in a longer form.\n\n**Note:** The `data-` attribute `data-role=\"fieldcontain\"` is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Add class `ui-field-contain` instead.\n\n``` markup\n<div class=\"ui-field-contain\">\n  <label for=\"select-choice-1\" class=\"select\">Shipping method:</label>\n  <select name=\"select-choice-1\" id=\"select-choice-1\">\n    <option value=\"standard\">Standard: 7 day</option>\n    <option value=\"rush\">Rush: 3 days</option>\n    <option value=\"express\">Express: next day</option>\n    <option value=\"overnight\">Overnight</option>\n  </select>\n</div>\n```\n\nThe select input is now displayed like this:\n\nAn example of a select with a long list of options:\n\n## Optgroups\n\nThe following example organizes the options into `optgroup` elements. Support for this feature in mobile selects is a bit spotty, but is improving.\n\n``` markup\n<div class=\"ui-field-contain\">\n  <label for=\"select-choice-nc\" class=\"select\">Preferred delivery:</label>\n  <select name=\"select-choice-8\" id=\"select-choice-nc\">\n        <optgroup label=\"FedEx\">\n      <option value=\"firstOvernight\">First Overnight</option>\n      <option value=\"expressSaver\">Express Saver</option>\n      <option value=\"ground\">Ground</option>\n    </optgroup>\n    <optgroup label=\"UPS\">\n      <option value=\"firstOvernight\">First Overnight</option>\n      <option value=\"expressSaver\">Express Saver</option>\n      <option value=\"ground\">Ground</option>\n    </optgroup>\n    <optgroup label=\"US Mail\">\n      <option value=\"standard\">Standard: 7 day</option>\n      <option value=\"rush\">Rush: 3 days</option>\n      <option value=\"express\">Express: next day (disabled)</option>\n      <option value=\"overnight\">Overnight</option>\n    </optgroup>\n  </select>\n</div>\n```\n\n## Vertically grouped select inputs\n\nTo create a grouped set of select inputs, first add `select` and a corresponding `label`. Set the `for` attribute of the `label` to match the `id` of the `select` so they are semantically associated.\n\nBecause the `label` element will be associated with each individual select input and will be hidden for styling purposes, we recommend wrapping the selects in a `fieldset` element that has a `legend` which acts as the combined label for the grouped inputs.\n\nLastly, one needs to wrap the `fieldset` in a `div` with `data-role=\"controlgroup\"` attribute, so it can be styled as a group.\n\n``` markup\n<div class=\"ui-field-contain\">\n  <fieldset data-role=\"controlgroup\">\n    <legend>Date of Birth:</legend>\n \n    <label for=\"select-choice-month\">Month</label>\n    <select name=\"select-choice-month\" id=\"select-choice-month\">\n      <option>Month</option>\n      <option value=\"jan\">January</option>\n      <!-- etc. -->\n    </select>\n \n    <label for=\"select-choice-day\">Day</label>\n    <select name=\"select-choice-day\" id=\"select-choice-day\">\n      <option>Day</option>\n      <option value=\"1\">1</option>\n      <!-- etc. -->\n    </select>\n \n    <label for=\"select-choice-year\">Year</label>\n    <select name=\"select-choice-year\" id=\"select-choice-year\">\n      <option>Year</option>\n      <option value=\"2011\">2011</option>\n      <!-- etc. -->\n    </select>\n  </fieldset>\n</div>\n```\n\n## Horizontally grouped select inputs\n\nSelect inputs can also be used for grouped sets with more than one related selections. To make a horizontal button set, add the `data-type=\"horizontal\"` to the fieldset. Note that the buttons which trigger the select will resize depending on the currently selected optionâs value.\n\n``` markup\n<fieldset data-role=\"controlgroup\" data-type=\"horizontal\">\n```\n\n## Theming selects\n\nYou can specify any jQuery Mobile button `data-` attribute on a select element, too. In this example, we're setting the theme, icon and inline properties:\n\n## Custom select menus\n\nThe framework is capable of building a custom menu based on the `select` element's list of options. We recommend using a custom menu when multiple selections are required, or when the menu itself must be styled with CSS.\n\nYou can optionally use custom-styled select menus instead of the native OS menu. The custom menu supports disabled options and multiple selection (whereas native mobile OS support for both is inconsistent), adds an elegant way to handle placeholder values, and restores missing functionality on certain platforms such as `optgroup` support on Android (all explained below). In addition, the framework applies the custom button's theme to the menu to better match the look and feel and provide visual consistency across platforms. Lastly, custom menus often look better on desktop browsers because native desktop menus are smaller than their mobile counterparts and tend to look disproportionate.\n\nKeep in mind that there is overhead involved in parsing the native select to build a custom menu. If there are a lot of selects on a page, or a select has a long list of options, this can impact the performance of the page, so we recommend using custom menus sparingly.\n\nTo use custom menus on a specific `select`, just add the `data-native-menu=\"false\"` attribute. Alternately, this can also programmatically set the select menu's `nativeMenu` configuration option to `false` in a callback bound to the `mobileinit` event to achieve the same effect. This will globally make all selects use the custom menu by default. The following must be included in the page after jQuery is loaded but before jQuery Mobile is loaded.\n\n``` javascript\n$(document).on( \"mobileinit\", function() {\n  $.mobile.selectmenu.prototype.options.nativeMenu = false;\n});\n```\n\nWhen the `select` has a small number of options that will fit on the device's screen, the menu will appear as a small overlay with a pop transition:\n\nWhen it has too many options to show on the device's screen, the framework will automatically create a new dialog-style \"page\" populated with a standard [listview](listview) for the options. This allows us to use the native scrolling included on the device for moving through a long list. The text inside the `label` is used as the title for this page. Be aware of the page and pagecontainer events that will be fired for this generated page.\n\n**Note:** The behavior whereby the custom select menu creates a new page when the list of options is long is deprecated as of jQuery Mobile 1.4.0. Starting with 1.5.0, the custom select menu will fall back to utilizing the select menu's native behavior when the list of options is too long.\n\n## Disabled options\n\njQuery Mobile will automatically disable and style option tags with the `disabled` attribute. In the demo below, the second option \"Rush: 3 days\" has been set to disabled.\n\n## Placeholder options\n\nIt's common for developers to include a \"null\" option in their select element to force a user to choose an option. If a placeholder option is present in your markup, jQuery Mobile will hide them in the overlay menu, showing only valid choices to the user, and display the placeholder text inside the menu as a header. A placeholder option is added when the framework finds:\n\n- An option with no value attribute\n\n- An option with an empty value attribute (`value=\"\"`).\n\n  **Note:** Indicating that an option should be used as a placeholder by providing the `value` attribute and setting it to \"\" is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0.\n\n- An option with no text node\n\n- An option with a `data-placeholder=\"true\"` attribute. (This allows you to use an option that has a value and a textnode as a placeholder option).\n\nYou can disable this feature through the selectmenu plugin's `hidePlaceholderMenuItems` option, like this:\n\n``` javascript\n$.mobile.selectmenu.prototype.options.hidePlaceholderMenuItems = false;\n```\n\nExamples of various placeholder options:\n\n## Multiple selects\n\nIf the `multiple` attribute is present in your markup, jQuery Mobile will enhance the element with a few extra considerations:\n\n- A header element will be created inside the menu and display the placeholder text and a close button.\n- Clicking on an item inside the overlay menu will not close the widget.\n- A ghosted, unchecked icon will appear adjacent to each unselected item. When the item is selected the icon will change to a checkbox. Neither icon will appear inside a single select box.\n- Once 2+ items are selected, a counter element with the total number of selected items will appear inside the button.\n- The text of each selected item will appear inside the button as a list. If the button is not wide enough to display the entire list, it is truncated with an ellipses.\n- If no items are selected, the button's text will default to the placeholder text.\n- If no placeholder element exists, the default button text will be blank and the header will appear with just a close button. Because this isn't a friendly user experience, we recommended that you always specify a placeholder element when using multiple select boxes.\n- Currently jQuery Mobile only supports the `multiple` attribute on a `select` with `nativeMenu` set to `false`.\n\nWhen a select is large enough to where the menu will open in a new page, the placeholder text is displayed in the button when no items are selected, and the `label` text is displayed in the menu's header. This differs from smaller overlay menus where the placeholder text is displayed in both the button and the header, and from full-page single selects where the placeholder text is not used at all.\n\n## Optgroup support\n\nIf a select menu contains `optgroup` elements, jQuery Mobile will create a divider & group items based on the `label` attribute's text:\n\n## Theming selects\n\nYou can specify any jQuery Mobile button `data-` attribute on a select element, too. In this example, we're setting the theme, icon and inline properties:\n\nThe `data-overlay-theme` attribute can be added to a select element to set the color of the overlay layer for the dialog-based custom select menus and the outer border of the smaller custom menus. By default, the content block colors for swatch \"a\" will be used for the overlays.\n\nNote: Custom selects use the popup widget for the menu. Because the popup container is elsewhere on the page it can't inherit the theme swatch from the parent of the select, and inherits from the page instead.\n\n## Calling the select menu plugin\n\nThe select menu plugin will auto initialize on any page that contains a select menu, without any need for a `data-role` attribute in the markup. However, you can directly call the select menu plugin on any selector, just like any normal jQuery plugin:\n\n``` javascript\n$( \"select\" ).selectmenu();\n```\n\n## ID generation\n\nThe selectmenu widget adds an ID to the elements it generates. If it doesn't itself have an ID, it will use a prefix consisting of `select-` and a unique number for the elements. If it does have an ID, it will use its ID as the prefix. The ID for the various elements generated by the selectmenu widget is then constructed as follows:\n\nbutton  \n**`<prefix>`**`-button`\n\npopup  \n**`<prefix>`**`-listbox`\n\nThis id is only assigned to an element when the selectmenu widget is constructed with the option `nativeMenu` set to `false`.\n\nSince the menu is implemented as a popup it will assign IDs to its generated elements. See the popup widget's [id generation](popup#id-generation) for details.\n\nlistview  \n**`<prefix>`**`-menu`\n\nThis id is only assigned to an element when the selectmenu widget is constructed with the option `nativeMenu` set to `false`.\n\nFor example, creating a non-native selectmenu with\n\n``` markup\n<select id=\"choose-city\" data-native-menu=\"false\">\n  <option>Caracas</option>\n  <option>Warszawa</option>\n  <option>Yekaterinburg</option>\n  <option>Pretoria</option>\n</select>\n```\n\nwill result in the following markup:\n\n``` markup\n<div class=\"ui-select\">\n  <a id=\"choose-city-button\" href=\"#\" role=\"button\" aria-haspopup=\"true\" class=\"ui-btn ui-icon-carat-d ui-btn-icon-right ui-corner-all ui-shadow\" data-rel=\"popup\">\n    <span>Caracas</span>\n  </a>\n  <select id=\"choose-city\" data-native-menu=\"false\" tabindex=\"-1\">\n    <option>Caracas</option>\n    <option>Warszawa</option>\n    <option>Yekaterinburg</option>\n    <option>Pretoria</option>\n  </select>\n  <div id=\"choose-city-listbox-placeholder\" style=\"display: hidden;\"></div>\n</div>\n<div id=\"choose-city-listbox-screen\" class=\"ui-popup-screen ui-screen-hidden ui-overlay-inherit\"></div>\n<div id=\"choose-city-listbox-popup\" class=\"ui-popup-container ui-popup-hidden ui-popup-truncate\">\n  <div id=\"choose-city-listbox\" class=\"ui-selectmenu ui-popup ui-body-inherit ui-overlay-shadow ui-corner-all\">\n    <div class=\"ui-header\" ui-bar-inherit ui-screen-hidden\">\n      <h1 class=\"ui-title\"></h1>\n    </div>\n    <ul id=\"choose-city-menu\" class=\"ui-selectmenu-list ui-listview\" role=\"listbox\" aria-labelledby=\"choose-city-button\">\n      <li data-option-index=\"0\" data-icon=\"false\" class=\"ui-first-child\" role=\"option\" aria-selected=\"true\">\n        <a href=\"#\" tabindex=\"-1\" class=\"ui-btn ui-btn-active\">Caracas</a>\n      </li>\n      <li data-option-index=\"0\" data-icon=\"false\" role=\"option\" aria-selected=\"false\">\n        <a href=\"#\" tabindex=\"-1\" class=\"ui-btn ui-btn-active\">Warszawa</a>\n      </li>\n      <li data-option-index=\"0\" data-icon=\"false\" role=\"option\" aria-selected=\"false\">\n        <a href=\"#\" tabindex=\"-1\" class=\"ui-btn ui-btn-active\">Yekaterinburg</a>\n      </li>\n      <li data-option-index=\"0\" data-icon=\"false\" class=\"ui-last-child\" role=\"option\" aria-selected=\"false\">\n        <a href=\"#\" tabindex=\"-1\" class=\"ui-btn ui-btn-active\">Pretoria</a>\n      </li>\n    </ul>\n  </div>\n</div>\n```\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n        \"ui-selectmenu-button\": \"ui-corner-all ui-shadow\",\n        \"ui-selectmenu-custom-header-close-button\": \"ui-corner-all\"\n \n      }\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the selectmenu with the `classes` option specified, changing the theming for the `ui-selectmenu` class:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  classes: {\n    \"ui-selectmenu\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-selectmenu` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).selectmenu( \"option\", \"classes.ui-selectmenu\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"classes.ui-selectmenu\", \"highlight\" );\n```\n\n### closeText\n\n**Type:**\n\n**Default:** `\"Close\"`\n\nCustomizes the text of the close button which is helpful for translating this into different languages. The close button is displayed as an icon-only button by default so the text isn't visible on-screen, but is read by screen readers so this is an important accessibility feature.\n\nThis option is also exposed as a data attribute: `data-close-text=\"Fermer\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `closeText` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  closeText: \"Fermer\"\n});\n```\n\nGet or set the `closeText` option, after initialization:\n\n``` javascript\n// Getter\nvar closeText = $( \".selector\" ).selectmenu( \"option\", \"closeText\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"closeText\", \"Fermer\" );\n```\n\n### corners\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nApplies the theme button border-radius to the select button if set to true.\n\nThis option is also exposed as a data attribute: `data-corners=\"false\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `corners` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  corners: false\n});\n```\n\nGet or set the `corners` option, after initialization:\n\n``` javascript\n// Getter\nvar corners = $( \".selector\" ).selectmenu( \"option\", \"corners\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"corners\", false );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).selectmenu( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the selectmenu if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).selectmenu( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"disabled\", true );\n```\n\n### dividerTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the listview dividers that represent the `optgroup` headers. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-divider-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `dividerTheme` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  dividerTheme: \"b\"\n});\n```\n\nGet or set the `dividerTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar dividerTheme = $( \".selector\" ).selectmenu( \"option\", \"dividerTheme\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"dividerTheme\", \"b\" );\n```\n\n### hidePlaceholderMenuItems\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nSets whether placeholder menu items are hidden. When true, the menu item used as the placeholder for the select menu widget will not appear in the list of choices.\n\nThis option is also exposed as a data attribute: `data-hide-placeholder-menu-items=\"false\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `hidePlaceholderMenuItems` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  hidePlaceholderMenuItems: false\n});\n```\n\nGet or set the `hidePlaceholderMenuItems` option, after initialization:\n\n``` javascript\n// Getter\nvar hidePlaceholderMenuItems = $( \".selector\" ).selectmenu( \"option\", \"hidePlaceholderMenuItems\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"hidePlaceholderMenuItems\", false );\n```\n\n### icon\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"carat-d\"`\n\nReplaces the default icon \"carat-d\" with an icon from the icon set. Setting this attribute to \"false\" suppresses the icon.\n\nTo suppress the icon, a boolean expression must be used:\n\nThis option is also exposed as a data attribute: `data-icon=\"star\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `icon` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  icon: \"star\"\n});\n```\n\nGet or set the `icon` option, after initialization:\n\n``` javascript\n// Getter\nvar icon = $( \".selector\" ).selectmenu( \"option\", \"icon\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"icon\", \"star\" );\n```\n\n### iconpos\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"right\"`\n\nPosition of the icon in the select button. Possible values: left, right, top, bottom, notext. The notext value will display the select as an icon-only button with no text feedback.\n\nThis option is also exposed as a data attribute: `data-iconpos=\"left\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `iconpos` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  iconpos: \"left\"\n});\n```\n\nGet or set the `iconpos` option, after initialization:\n\n``` javascript\n// Getter\nvar iconpos = $( \".selector\" ).selectmenu( \"option\", \"iconpos\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"iconpos\", \"left\" );\n```\n\n### iconshadow\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\n**This option is deprecated in 1.4.0 and will be removed in 1.5.0.**\n\nApplies the theme shadow to the select button's icon if set to true.\n\nThis option is also exposed as a data attribute: `data-iconshadow=\"false\"`.\n\n(version deprecated: 1.4.0)\n\n**Code examples:**\n\nInitialize the selectmenu with the `iconshadow` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  iconshadow: false\n});\n```\n\nGet or set the `iconshadow` option, after initialization:\n\n``` javascript\n// Getter\nvar iconshadow = $( \".selector\" ).selectmenu( \"option\", \"iconshadow\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"iconshadow\", false );\n```\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the selectmenu widget is:\n\n``` javascript\n\"select:not( :jqmData(role='slider')):not( :jqmData(role='flipswitch') )\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.selectmenu.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates selectmenu widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### inline\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `null (false)`\n\nIf set to true, this will make the select button act like an inline button so the width is determined by the button's text. By default, this is null (false) so the select button is full width, regardless of the feedback content. Possible values: true, false.\n\nThis option is also exposed as a data attribute: `data-inline=\"true\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `inline` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  inline: true\n});\n```\n\nGet or set the `inline` option, after initialization:\n\n``` javascript\n// Getter\nvar inline = $( \".selector\" ).selectmenu( \"option\", \"inline\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"inline\", true );\n```\n\n### mini\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `null (false)`\n\nIf set to `true`, this will display a more compact version of the selectmenu that uses less vertical height by applying the `ui-mini` class to the outermost element of the selectmenu widget.\n\n**Note:** `mini` option is deprecated in 1.5 and will be removed in 1.6\n\nThis option is also exposed as a data attribute: `data-mini=\"true\"`.\n\n### nativeMenu\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nWhen set to true, clicking the custom-styled select menu will open the native select menu which is best for performance. If set to false, the custom select menu style will be used instead of the native menu.\n\nThis option is also exposed as a data attribute: `data-native-menu=\"false\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `nativeMenu` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  nativeMenu: false\n});\n```\n\nGet or set the `nativeMenu` option, after initialization:\n\n``` javascript\n// Getter\nvar nativeMenu = $( \".selector\" ).selectmenu( \"option\", \"nativeMenu\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"nativeMenu\", false );\n```\n\n### overlayTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"null, inherited from parent\"`\n\nSets the color of the overlay layer for the dialog-based custom select menus and the outer border of the smaller custom menus. It accepts a single letter from a-z that maps to the swatches included in your theme. By default, the content block colors for the overlay will be inherited from the parent of the select.\n\nThis option is also exposed as a data attribute: `data-overlay-theme=\"a\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `overlayTheme` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  overlayTheme: \"a\"\n});\n```\n\nGet or set the `overlayTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar overlayTheme = $( \".selector\" ).selectmenu( \"option\", \"overlayTheme\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"overlayTheme\", \"a\" );\n```\n\n### preventFocusZoom\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true on iOS platforms`\n\nThis option disables page zoom temporarily when a custom select is focused, which prevents iOS devices from zooming the page into the select. By default, iOS often zooms into form controls, and the behavior is often unnecessary and intrusive in mobile-optimized layouts.\n\nThis option is also exposed as a data attribute: `data-prevent-focus-zoom=\"true\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `preventFocusZoom` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  preventFocusZoom: false\n});\n```\n\nGet or set the `preventFocusZoom` option, after initialization:\n\n``` javascript\n// Getter\nvar preventFocusZoom = $( \".selector\" ).selectmenu( \"option\", \"preventFocusZoom\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"preventFocusZoom\", false );\n```\n\n### shadow\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nApplies the drop shadow style to the select button if set to true.\n\nThis option is also exposed as a data attribute: `data-shadow=\"false\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `shadow` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  shadow: false\n});\n```\n\nGet or set the `shadow` option, after initialization:\n\n``` javascript\n// Getter\nvar shadow = $( \".selector\" ).selectmenu( \"option\", \"shadow\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"shadow\", false );\n```\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the selectmenu widget. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).selectmenu( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"theme\", \"b\" );\n```\n\n## Methods\n\n### close()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nclose an open select menu.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the close method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"close\" );\n```\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the selectmenu functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the selectmenu.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the selectmenu.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"enable\" );\n```\n\n### open()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nopen a closed select menu (custom menus only).\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the open method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"open\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).selectmenu( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current selectmenu options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).selectmenu( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the selectmenu option associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the selectmenu.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nupdate the custom select.\n\nThis is used to update the custom select to reflect the native select element's value. If the number of options in the select are different than the number of items in the custom menu, it'll rebuild the custom menu.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"refresh\" );\n```\n\n### refresh( option )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nupdate the custom select.\n\nThis is used to update the custom select to reflect the native select element's value. If the number of options in the select are different than the number of items in the custom menu, it'll rebuild the custom menu. If you pass a true argument you can force the rebuild to happen.\n\n- **option**\n\n  Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n  to force a rebuild\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"refresh\", true );\n```\n\n## Events\n\n### create( event, ui )Type: `selectcreate`\n\nTriggered when the selectmenu is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the selectmenu with the create callback specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"selectcreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of a simple native select\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>selectmenu demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <label for=\"select-choice-0\" class=\"select\">Shipping method:</label>\n    <select name=\"select-choice-0\" id=\"select-choice-0\">\n      <option value=\"standard\">Standard: 7 day</option>\n      <option value=\"rush\">Rush: 3 days</option>\n      <option value=\"express\">Express: next day</option>\n      <option value=\"overnight\">Overnight</option>\n    </select>\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/selectmenu](https://api.jquerymobile.com/selectmenu)"
- name: Slider
  id: slider
  summary: To add a slider widget to your page, use a standard input with the type="range" attribute
  description: "# Slider Widget\n\n## Slider Widgetversion added: 1.0\n\n**Description:** Creates a slider widget\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[highlight](#option-highlight)\n\n[initSelector](#option-initSelector)\n\n[mini](#option-mini)\n\n[theme](#option-theme)\n\n[trackTheme](#option-trackTheme)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n### Events\n\n[create](#event-create)\n\n[start](#event-start)\n\n[stop](#event-stop)\n\n## Slider\n\nTo add a slider widget to your page, use a standard input with the `type=\"range\"` attribute. The input's value is used to configure the starting position of the handle and the value is populated in the text input. Specify `min` and `max` attribute values to set the slider's range. If you want to constrain input to specific increments, add the `step` attribute. Set the `value` attribute to define the initial value. The framework will parse these attributes to configure the slider widget.\n\nAs you drag the slider's handle, the framework will update the native input's value (and vice-versa) so they are always in sync; this ensures that the value is submitted with the form.\n\nSet the `for` attribute of the `label` to match the `id` of the `input` so they are semantically associated. It's possible to accessibly hide the label if it's not desired in the page layout, but we require that it is present in the markup for semantic and accessibility reasons.\n\nThe framework will find all `input` elements with a `type=\"range\"` and automatically enhance them into a slider with an accompanying input without any need to apply a `data-role` attribute. To prevent the automatic enhancement of this input into a slider, add `data-role=\"none\"` attribute to the input.\n\nIn this example, the acceptable range is 0-100.\n\n``` markup\n<label for=\"slider-1\">Input slider:</label>\n<input type=\"range\" name=\"slider-1\" id=\"slider-1\" value=\"60\" min=\"0\" max=\"100\">\n```\n\nThe default slider with these settings is displayed like this:\n\n### Theming\n\nThe slider widget uses the [jQuery Mobile CSS framework](theming/css-framework) to style its look and feel. If slider specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-slider`: The outermost container for slider.\n  - `ui-slider-popup`: Tooltip popup element in case `data-popup-enabled` is `true`\n  - `ui-slider-input`: Input element of slider\n  - `ui-slider-track`: Slider's track\n    - `ui-slider-handle`: Handle of slider's track\n\n### Step increment\n\nTo force the slider to snap to a specific increment, add the `step` attribute to the input. By default, the step is 1, but in this example, the step is 10 and the maximum value is 500.\n\nIn this example, the acceptable range is 0-100.\n\n``` markup\n<label for=\"slider-1\">Input slider:</label>\n<input type=\"range\" name=\"slider-1\" id=\"slider-1\" value=\"60\" min=\"0\" max=\"100\" step=\"10\">\n```\n\nThis will produce an input that snaps to increments of 50. If a value is added to the input that isn't valid with the step increment, the value will be reset on blur to the closest step.\n\n### Fill highlight\n\nTo have a highlight fill on the track up to the slider handle position, add the `data-highlight=\"true\"` attribute to the input. The fill uses active state swatch.\n\n``` markup\n<label for=\"slider-fill\">Input slider:</label>\n<input type=\"range\" name=\"slider-fill\" id=\"slider-fill\" value=\"60\" min=\"0\" max=\"100\" data-highlight=\"true\">\n```\n\n### Mini version\n\nFor a more compact version that is useful in toolbars and tight spaces, add the `data-mini=\"true\"` attribute to the element to create a mini version.\n\n``` markup\n<label for=\"slider-mini\">Input slider:</label>\n<input type=\"range\" name=\"slider-mini\" id=\"slider-mini\" value=\"25\" min=\"0\" max=\"100\" data-highlight=\"true\" data-mini=\"true\">\n```\n\nThis will produce a slider and its corresponding input that are not as tall as the standard version. The input also has a smaller text size.\n\n### Field containers\n\nOptionally wrap the slider markup in a container with class `ui-field-contain` to help visually group it in a longer form. In this example, the step attribute is omitted to allow any whole number value to be selected.\n\n**Note:** The `data-` attribute `data-role=\"fieldcontain\"` is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Add class `ui-field-contain` instead.\n\n``` markup\n<div class=\"ui-field-contain\">\n  <label for=\"slider-2\">Input slider:</label>\n  <input type=\"range\" name=\"slider-2\" id=\"slider-2\" value=\"25\" min=\"0\" max=\"100\">\n</div>\n```\n\nThe slider is now displayed like this:\n\nSliders also respond to key commands. Right Arrow, Up Arrow and Page Up keys increase the value; Left Arrow, Down Arrow and Page Down keys decrease it. To move the slider to its minimum or maximum value, use the Home or End key, respectively.\n\n### Calling the slider plugin\n\nThis plugin will auto initialize on any page that contains a text input with the `type=\"range\"` attribute. However, if needed you can directly call the slider plugin on any selector, just like any jQuery plugin:\n\n``` javascript\n$( \"input\" ).slider();\n```\n\n### Theming the slider\n\nTo set the theme swatch for the slider, add a `data-theme` attribute to the `input` which will apply the theme to both the input, handle and track. The track swatch can be set separately by adding the `data-track-theme` attribute to apply the down state version of the selected button swatch.\n\n``` markup\n<div class=\"ui-field-contain\">\n  <label for=\"slider-3\">Input slider:</label>\n  <input type=\"range\" name=\"slider-3\" id=\"slider-3\" value=\"25\" min=\"0\" max=\"100\" data-theme=\"b\" data-track-theme=\"a\">\n</div>\n```\n\nThis will produce a themed slider:\n\n## Flip Toggle Switch\n\n**Note:** The flip toggle switch feature is deprecated as of jQuery Mobile 1.4.0. Use the [Flipswitch widget](flipswitch) instead.\n\nA binary \"flip\" switch is a common UI element on mobile devices that is used for binary on/off or true/false data input. You can either drag the flip handle like a slider or tap one side of the switch.\n\nTo create a flip toggle, start with a `select` with two options. The first option will be styled as the \"off\" state switch and the second will be styled as the \"on\" state so write your options accordingly.\n\nSet the `for` attribute of the `label` to match the `id` of the `input` so they are semantically associated. It's possible to accessibly hide the label if it's not desired in the page layout, but we require that it is present in the markup for semantic and accessibility reasons.\n\n``` markup\n<label for=\"flip-1\">Flip switch:</label>\n<select name=\"flip-1\" id=\"flip-1\" data-role=\"slider\">\n  <option value=\"off\">Off</option>\n  <option value=\"on\">On</option>\n</select>\n```\n\nThis will produce a basic flip toggle switch input. The default styles set the width of the switch to 100% of the parent container and stack the label on a separate line.\n\n### Longer Labels\n\nThe control is proportionally scaled, so to use longer labels one can just add a line of CSS setting the switch to the desired width. For example, given the following markup:\n\n``` markup\n<div class=\"containing-element\">\n  <label for=\"flip-min\">Flip switch:</label>\n  <select name=\"flip-min\" id=\"flip-min\" data-role=\"slider\">\n    <option value=\"off\">Switch Off</option>\n    <option value=\"on\">Switch On</option>\n  </select>\n</div>\n```\n\n`.containing-element .ui-slider-switch { width: 9em }` will produce:\n\nAs some default styles hinge on fieldcontains, note that you may have to ensure that custom styles apply to switches within fieldcontains by using `.ui-field-contain div.ui-slider-switch { width: [â¦]; }`.\n\n### Mini version\n\nFor a more compact version that is useful in toolbars and tight spaces, add the `data-mini=\"true\"` attribute to the element to create a mini version.\n\n``` markup\n<label for=\"flip-mini\">Flip switch:</label>\n<select name=\"flip-mini\" id=\"flip-mini\" data-role=\"slider\" data-mini=\"true\">\n  <option value=\"off\">Off</option>\n  <option value=\"on\">On</option>\n</select>\n```\n\nThis will produce a flip switch that is not as tall as the standard version and has a smaller text size.\n\n### Field containers\n\nOptionally wrap the switch markup in a container with class `ui-field-contain` to help visually group it in a longer form. In this example, the step attribute is omitted to allow any whole number value to be selected.\n\n**Note:** The `data-` attribute `data-role=\"fieldcontain\"` is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Add class `ui-field-contain` instead.\n\n``` markup\n<div class=\"ui-field-contain\">\n  <label for=\"flip-2\">Flip switch:</label>\n  <select name=\"flip-2\" id=\"flip-2\" data-role=\"slider\" data-mini=\"true\">\n    <option value=\"off\">Off</option>\n    <option value=\"on\">On</option>\n  </select>\n</div>\n```\n\nThe flip toggle switch is now displayed like this:\n\n### Theming the flip switch\n\nLike all form elements, this widget will automatically inherit the theme from its parent container. To choose a specific theme color swatch, specify the `data-theme` attribute on the `select` and specify a swatch letter.\n\n``` markup\n<div class=\"ui-field-contain\">\n  <label for=\"flip-3\">Flip switch:</label>\n  <select name=\"flip-3\" id=\"flip-3\" data-role=\"slider\" data-theme=\"b\">\n    <option value=\"no\">No</option>\n    <option value=\"yes\">Yes</option>\n  </select>\n</div>\n```\n\nThis results in a switch with the swatch \"b\" colors for the handle. Note that the lefthand \"on\" state gets the active state color.\n\nHere is a swatch \"a\" variation:\n\nIt is also possible to theme the track of the flip switch by adding the `data-track-theme` attribute and specifying the chosen swatch letter on the `select`.\n\nHere's an example of a flip switch with the swatch \"a\" applied to the track and swatch \"c\" applied to the handle:\n\n``` markup\n<div class=\"ui-field-contain\">\n  <label for=\"flip-5\">Flip switch:</label>\n  <select name=\"flip-5\" id=\"flip-5\" data-role=\"slider\" data-theme=\"a\" data-track-theme=\"b\">\n    <option value=\"no\">No</option>\n    <option value=\"yes\">Yes</option>\n  </select>\n</div>\n```\n\n### Calling the switch plugin\n\nThis plugin will auto initialize on any page that contains a text input with the `type=\"slider\"` attribute. However, if needed you can directly call the slider plugin on any selector, just like any jQuery plugin:\n\n``` javascript\n$( \"input\" ).slider();\n```\n\n### Theming the flip switch\n\nLike all form elements, this widget will automatically inherit the theme from its parent container. To choose a specific theme color swatch, specify the `data-theme` attribute on the select and specify a swatch letter.\n\n``` markup\n<div class=\"ui-field-contain\">\n  <label for=\"flip-3\">Flip switch:</label>\n  <select name=\"flip-3\" id=\"flip-3\" data-role=\"slider\" data-theme=\"a\">\n    <option value=\"no\">No</option>\n    <option value=\"yes\">Yes</option>\n  </select>\n</div>\n```\n\nThis results in a switch with the swatch \"a\" colors for the handle. Note that the lefthand \"on\" state gets the active state color.\n\nIt is also possible to theme the track of the flip switch by adding the data-track-theme attribute and specifying the chosen swatch letter on the select.\n\nHere's an example of a flip switch with the swatch \"a\" applied to the track and swatch \"c\" applied to the handle:\n\n``` markup\n<div class=\"ui-field-contain\">\n  <label for=\"flip-5\">Flip switch:</label>\n  <select name=\"flip-5\" id=\"flip-5\" data-role=\"slider\" data-theme=\"a\" data-track-theme=\"b\">\n    <option value=\"no\">No</option>\n    <option value=\"yes\">Yes</option>\n  </select>\n</div>\n```\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n {\n        \"ui-slider-track\": \"ui-shadow-inset ui-corner-all\",\n        \"ui-slider-input\": \"ui-shadow-inset ui-corner-all\"\n      }\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the slider with the `classes` option specified, changing the theming for the `ui-slider` class:\n\n``` javascript\n$( \".selector\" ).slider({\n  classes: {\n    \"ui-slider\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-slider` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).slider( \"option\", \"classes.ui-slider\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"classes.ui-slider\", \"highlight\" );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the slider with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).slider( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the slider if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the slider with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).slider( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"disabled\", true );\n```\n\n### highlight\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSets an active state fill on the track from the left edge to the slider handle when set to \"true\".\n\n**Code examples:**\n\nInitialize the slider with the `highlight` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  highlight: true\n});\n```\n\nGet or set the `highlight` option, after initialization:\n\n``` javascript\n// Getter\nvar highlight = $( \".selector\" ).slider( \"option\", \"highlight\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"highlight\", true );\n```\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the slider widget is:\n\n``` javascript\n\"input[type='range'], :jqmData(type='range'), :jqmData(role='slider')\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.slider.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates slider widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### mini\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `null (false)`\n\nIf set to `true`, this will display a more compact version of the slider that uses less vertical height by applying the `ui-mini` class to the outermost element of the slider widget.\n\n**Note:** `mini` option is deprecated in 1.5 and will be removed in 1.6\n\nThis option is also exposed as a data attribute: `data-mini=\"true\"`.\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the slider widget. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the slider with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).slider( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"theme\", \"b\" );\n```\n\n### trackTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the slider's track, specifically. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option can be overridden in the markup by assigning a data attribute to the input, e.g. `data-track-theme=\"a\"`.\n\n**Code examples:**\n\nInitialize the slider with the `trackTheme` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  trackTheme: \"a\"\n});\n```\n\nGet or set the `trackTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar trackTheme = $( \".selector\" ).slider( \"option\", \"trackTheme\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"trackTheme\", \"a\" );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the slider functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).slider( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the slider.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).slider( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the slider.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).slider( \"enable\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).slider( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current slider options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).slider( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the slider option associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).slider( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the slider.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).slider( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nupdate the slider.\n\nIf you manipulate a slider via JavaScript, you must call the refresh method on it to update the visual styling.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).slider( \"refresh\" );\n```\n\n## Events\n\n### create( event, ui )Type: `slidecreate`\n\nTriggered when the slider is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the slider with the create callback specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the slidecreate event:\n\n``` javascript\n$( \".selector\" ).on( \"slidecreate\", function( event, ui ) {} );\n```\n\n### start( event )Type: `slidestart`\n\ntriggered when there's an initial interaction with the slider. Includes drags and taps.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the slider with the start callback specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  start: function( event, ui ) {}\n});\n```\n\nBind an event listener to the slidestart event:\n\n``` javascript\n$( \".selector\" ).on( \"slidestart\", function( event, ui ) {} );\n```\n\n### stop( event )Type: `slidestop`\n\ntriggered at the end of an interaction with the slider. Includes drags and taps.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the slider with the stop callback specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  stop: function( event, ui ) {}\n});\n```\n\nBind an event listener to the slidestop event:\n\n``` javascript\n$( \".selector\" ).on( \"slidestop\", function( event, ui ) {} );\n```\n\n## Examples:\n\nA basic example of a slider.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>slider demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n<div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <label for=\"slider-0\">Input slider:</label>\n    <input type=\"range\" name=\"slider-0\" id=\"slider-0\" value=\"60\" min=\"0\" max=\"100\">\n  </div>\n</body>\n</html>\n```\n\n#### Demo:\n\nA basic example of a flip toggle switch.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>slider demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <label for=\"flip-0\">Select slider:</label>\n    <select name=\"flip-0\" id=\"flip-0\" data-role=\"slider\">\n      <option value=\"off\">Off</option>\n      <option value=\"on\">On</option>\n    </select>\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/slider](https://api.jquerymobile.com/slider)"
- name: swipe event
  id: swipe
  summary: 'Description: Triggered when a horizontal drag of 30px or more (and less than 30px vertically) occurs within 1 second duration'
  description: "# swipe\n\n## swipe eventversion added: 1.0\n\n**Description:** Triggered when a horizontal drag of 30px or more (and less than 30px vertically) occurs within 1 second duration.\n\n- #### jQuery( window ).on( \"swipe\", function( event ) { ... } )\n\nTriggered when a horizontal drag of 30px or more (and less than 30px vertically) occurs within 1 second duration but these can be configured:\n\n- `$.event.special.swipe.scrollSupressionThreshold` (default: 10px) â More than this horizontal displacement, and we will suppress scrolling.\n- `$.event.special.swipe.durationThreshold` (default: 1000ms) â More time than this, and it isn't a swipe.\n- `$.event.special.swipe.horizontalDistanceThreshold` (default: 30px) â Swipe horizontal displacement must be more than this.\n- `$.event.special.swipe.verticalDistanceThreshold` (default: 30px) â Swipe vertical displacement must be less than this.\n\nThe swipe event can also be extend to add your own logic or functionality. The following methods can be extended:\n\n- `$.event.special.swipe.start` Default:\n\n  ``` javascript\n  function( event ) {\n    var data = event.originalEvent.touches ?\n        event.originalEvent.touches[ 0 ] : event;\n    return {\n        time: ( new Date() ).getTime(),\n        coords: [ data.pageX, data.pageY ],\n        origin: $( event.target )\n      };\n  }\n  ```\n\n  This method recieves a touchstart event and returns an object of data about the starting location.\n\n- `$.event.special.swipe.stop` Default:\n\n  ``` javascript\n  function( event ) {\n    var data = event.originalEvent.touches ?\n        event.originalEvent.touches[ 0 ] : event;\n    return {\n        time: ( new Date() ).getTime(),\n        coords: [ data.pageX, data.pageY ]\n      };\n  }\n  ```\n\n  This method recieves a touchend event and returns an object of data about the ending location.\n\n- `$.event.special.swipe.handleSwipe` Default:\n\n  ``` javascript\n  function( start, stop ) {\n    if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&\n      Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&\n      Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {\n   \n      start.origin.trigger( \"swipe\" )\n        .trigger( start.coords[0] > stop.coords[ 0 ] ? \"swipeleft\" : \"swiperight\" );\n    }\n  }\n  ```\n\n  This method recieves the start and stop objects and handles the logic for and triggering for the swipe events.\n\n## Example:\n\nA simple example of the capturing and acting upon a swipe event\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>swipe demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n  html, body { padding: 0; margin: 0; }\n  html, .ui-mobile, .ui-mobile body {\n    height: 105px;\n  }\n  .ui-mobile, .ui-mobile .ui-page {\n    min-height: 105px;\n  }\n  #nav {\n    font-size: 200%;\n    width:17.1875em;\n    margin:17px auto 0 auto;\n  }\n  #nav a {\n    color: #777;\n    border: 2px solid #777;\n    background-color: #ccc;\n    padding: 0.2em 0.6em;\n    text-decoration: none;\n    float: left;\n    margin-right: 0.3em;\n  }\n  #nav a:hover {\n    color: #999;\n    border-color: #999;\n    background: #eee;\n  }\n  #nav a.selected,\n  #nav a.selected:hover {\n    color: #0a0;\n    border-color: #0a0;\n    background: #afa;\n  }\n  div.box {\n    width: 30em;\n    height: 3em;\n    background-color: #108040;\n  }\n  div.box.swipe {\n    background-color: #7ACEF4;\n  }\n  </style>\n</head>\n<body>\n \n<h3>Swipe the green rectangle to change its color:</h3>\n<div class=\"box\"></div>\n \n<script>\n$(function(){\n  // Bind the swipeHandler callback function to the swipe event on div.box\n  $( \"div.box\" ).on( \"swipe\", swipeHandler );\n \n  // Callback function references the event target and adds the 'swipe' class to it\n  function swipeHandler( event ){\n    $( event.target ).addClass( \"swipe\" );\n  }\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/swipe](https://api.jquerymobile.com/swipe)"
- name: swipeleft event
  id: swipeleft
  summary: 'Description: Triggered when a swipe event occurs moving in the left direction'
  description: "# swipeleft\n\n## swipeleft eventversion added: 1.0\n\n**Description:** Triggered when a swipe event occurs moving in the left direction.\n\n- #### jQuery( window ).on( \"swipeleft\", function( event ) { ... } )\n\nTriggered when a horizontal drag of 30px or more (and less than 30px vertically) occurs within 1 second duration in the left direction. See [the swipe event entry](swipe) for more detailed information on the swipe event.\n\n## Example:\n\nA simple example of the capturing and acting upon a swipeleft event\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>swipeleft demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n  html, body { padding: 0; margin: 0; }\n  html, .ui-mobile, .ui-mobile body {\n    height: 105px;\n  }\n  .ui-mobile, .ui-mobile .ui-page {\n    min-height: 105px;\n  }\n  #nav {\n    font-size: 200%;\n    width:17.1875em;\n    margin:17px auto 0 auto;\n  }\n  #nav a {\n    color: #777;\n    border: 2px solid #777;\n    background-color: #ccc;\n    padding: 0.2em 0.6em;\n    text-decoration: none;\n    float: left;\n    margin-right: 0.3em;\n  }\n  #nav a:hover {\n    color: #999;\n    border-color: #999;\n    background: #eee;\n  }\n  #nav a.selected,\n  #nav a.selected:hover {\n    color: #0a0;\n    border-color: #0a0;\n    background: #afa;\n  }\n  div.box {\n    width: 30em;\n    height: 3em;\n    background-color: #108040;\n  }\n  div.box.swipeleft {\n    background-color: #7ACEF4;\n  }\n  </style>\n</head>\n<body>\n \n<h3>Swipe the green rectangle in the left direction to change its color:</h3>\n<div class=\"box\"></div>\n \n<script>\n$(function(){\n  // Bind the swipeleftHandler callback function to the swipe event on div.box\n  $( \"div.box\" ).on( \"swipeleft\", swipeleftHandler );\n \n  // Callback function references the event target and adds the 'swipeleft' class to it\n  function swipeleftHandler( event ){\n    $( event.target ).addClass( \"swipeleft\" );\n  }\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/swipeleft](https://api.jquerymobile.com/swipeleft)"
- name: swiperight event
  id: swiperight
  summary: 'Description: Triggered when a swipe event occurs moving in the right direction'
  description: "# swiperight\n\n## swiperight eventversion added: 1.0\n\n**Description:** Triggered when a swipe event occurs moving in the right direction.\n\n- #### jQuery( \".selector\" ).on( \"swiperight\", function( event ) { ... } )\n\nTriggered when a horizontal drag of 30px or more (and less than 30px vertically) occurs within 1 second duration in the right direction. See [the swipe event entry](swipe) for more detailed information on the swipe event.\n\n## Example:\n\nA simple example of the capturing and acting upon a swiperight event\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>swiperight demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n  html, body { padding: 0; margin: 0; }\n  html, .ui-mobile, .ui-mobile body {\n    height: 105px;\n  }\n  .ui-mobile, .ui-mobile .ui-page {\n    min-height: 105px;\n  }\n  #nav {\n    font-size: 200%;\n    width:17.1875em;\n    margin:17px auto 0 auto;\n  }\n  #nav a {\n    color: #777;\n    border: 2px solid #777;\n    background-color: #ccc;\n    padding: 0.2em 0.6em;\n    text-decoration: none;\n    float: left;\n    margin-right: 0.3em;\n  }\n  #nav a:hover {\n    color: #999;\n    border-color: #999;\n    background: #eee;\n  }\n  #nav a.selected,\n  #nav a.selected:hover {\n    color: #0a0;\n    border-color: #0a0;\n    background: #afa;\n  }\n  div.box {\n    width: 30em;\n    height: 3em;\n    background-color: #108040;\n  }\n  div.box.swiperight {\n    background-color: #7ACEF4;\n  }\n  </style>\n</head>\n<body>\n \n<h3>Swipe the green rectangle in the right direction to change its color:</h3>\n<div class=\"box\"></div>\n \n<script>\n$(function(){\n    // Bind the swiperightHandler callback function to the swipe event on div.box\n  $( \"div.box\" ).on( \"swiperight\", swiperightHandler );\n \n  // Callback function references the event target and adds the 'swiperight' class to it\n  function swiperightHandler( event ){\n    $( event.target ).addClass( \"swiperight\" );\n  }\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/swiperight](https://api.jquerymobile.com/swiperight)"
- name: Table
  id: table
  summary: One of the biggest challenges in responsive web design (RWD) is presenting tabular data
  description: "# Table Widget\n\n## Table Widgetversion added: 1.3\n\n**Description:** Creates a responsive table\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[initSelector](#option-initSelector)\n\n### Methods\n\n[rebuild](#method-rebuild)\n\n### Events\n\n[create](#event-create)\n\n## Responsive tables\n\nOne of the biggest challenges in responsive web design (RWD) is presenting tabular data. Large tables with lots of columns don't fit on smaller screens and there isn't a simple way to re-format the table content with CSS and media queries for an acceptable presentation. To address this, the framework offers two different options for presenting tables responsively. Each has benefits and tradeoffs, the right choice will depend on the data being presented.\n\n[Reflow mode](table-reflow) - Re-formats the table columns at narrow widths so each row of data is presented as a formatted block of label/data pairs. This is ideal for tables with product or contact information with more complex or lengthy data formatting that doesn't need comparison across rows of data.\n\n[Column toggle mode](table-columntoggle) - Selectively hides columns at narrower widths as a sensible default but also offers a menu to let users manually control which columns they want to see. This mode is better for financial data tables that have compact values and need to maintain comparisons across columns and rows of data. It can also be used for building things like product comparison tables.\n\nThe responsive table feature is built with a core table plugin (`table.js`) that initializes when the `data-role=\"table\"` attribute is added to the markup. This plugin is very lightweight and adds `ui-table` class, parses the table headers and generates information on the columns of data, and fires a `tablecreate` event. Both the table modes, [reflow](table-reflow) and [column toggle](table-columntoggle), are written as extensions to the table widget that hook in via the `create` event to add the additional behaviors that make the tables responsive. Reflow is the default mode so if the extension is present, it will be applied automatically if the `data-role=\"table\"` attribute is on the table.\n\nIf only one mode is used on a project, the download builder tool can be used to package only the table plugin and the single extension to save code weight.\n\n### General table markup guidelines\n\nHere is the basic table markup you should use for both table modes:\n\n``` markup\n<table data-role=\"table\" id=\"my-table\" data-mode=\"reflow\">\n  <thead>\n    <tr>\n      <th>Rank</th>\n      <th>Movie Title</th>\n      <th>Year</th>\n      <th><abbr title=\"Rotten Tomato Rating\">Rating</abbr></th>\n      <th>Reviews</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td><a href=\"foo.com\" data-rel=\"external\">Citizen Kane</a></td>\n      <td>1941</td>\n      <td>100%</td>\n      <td>74</td>\n    </tr>\n    </tbody>\n</table>\n```\n\nBoth table modes start with standard HTML table markup but there are some specific guidelines you must follow for the responsive table to work correctly:\n\n- Follow standard HTML table markup guidelines for proper semantics\n- Do not use `rowspan` or `colspan` in your tables, these aren't supported except for grouped headers (see below)\n- Adding `thead` and `tbody` elements are optional but provide improved semantics\n- Assign a unique `ID` to the table (required for the column toggle mode)\n- Add the `data-role=\"table\"` to apply the responsive table plugin\n- The default table mode is `reflow`, add `data-mode=\"columntoggle\"` change modes\n- The first row of the table must contain the table headers, be sure to use `TH` instead of `TD` tags\n- To display longer table header text in the column chooser or reflow labels, wrap the text in the `TH` with a `abbr` element and set the `title`. This string will be used in place.\n\n### Styling and theming tables\n\nThe responsive table plugin is as minimally styled as possible to give you a clean slate for your designs. The plugin focuses primarily on the difficult scripting elements: generating the labels for the reflow table and creating the button and column chooser popup. Out of the box, the table just has a few basic style rules to add a bit of padding and set the vertical alignment of cells to be top left for visual consistency.\n\nThe table will adapt to whatever content block it sits on, but there isn't an explicit theming attribute for this widget. We did this because it's simple enough to add theme classes like `ui-body-a` to individual cells if a more heavily themed look is wanted.\n\n### Row strokes and stripes\n\nThe theme CSS contains a preset row strokes and alternating row stripes style which can be applied by adding `table-stroke` or `table-stripe` class to the `table` element.\n\n**Note: the `table-stroke` and `table-stripe` classes are deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. The demos contain an example how to apply these styles with custom CSS.**\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n        \"ui-table\": \"\"\n      }\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the table with the `classes` option specified, changing the theming for the `ui-table` class:\n\n``` javascript\n$( \".selector\" ).table({\n  classes: {\n    \"ui-table\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-table` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).table( \"option\", \"classes.ui-table\" );\n \n// Setter\n$( \".selector\" ).table( \"option\", \"classes.ui-table\", \"highlight\" );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the table with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).table({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).table( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).table( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the table if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the table with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).table({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).table( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).table( \"option\", \"disabled\", true );\n```\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the table widget is:\n\n``` javascript\n\":jqmData(role='table')\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.table.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates table widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n## Methods\n\n### rebuild()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRe-process the entire table to ensure it is displayed correctly.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the rebuild method:\n\n``` javascript\n$( \".selector\" ).table( \"rebuild\" );\n```\n\n## Events\n\n### create( event, ui )Type: `tablecreate`\n\nTriggered when a table is created\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the table with the create callback specified:\n\n``` javascript\n$( \".selector\" ).table({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the tablecreate event:\n\n``` javascript\n$( \".selector\" ).on( \"tablecreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA basic example of a reponsive table.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>table demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <table data-role=\"table\" id=\"my-table\" data-mode=\"reflow\">\n      <thead>\n        <tr>\n          <th>Rank</th>\n          <th>Movie Title</th>\n          <th>Year</th>\n          <th><abbr title=\"Rotten Tomato Rating\">Rating</abbr></th>\n          <th>Reviews</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th>1</th>\n          <td><a href=\"foo.com\" data-rel=\"external\">Citizen Kane</a></td>\n          <td>1941</td>\n          <td>100%</td>\n          <td>74</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/table](https://api.jquerymobile.com/table)"
- name: tap event
  id: tap
  summary: 'Description: Triggered after a quick, complete touch event'
  description: "# tap\n\n## tap eventversion added: 1.0\n\n**Description:** Triggered after a quick, complete touch event.\n\n- #### jQuery( \".selector\" ).on( \"tap\", function( event ) { ... } )\n\nThe jQuery Mobile `tap` event triggers after a quick, complete touch event that occurs on a single target object. It is the gesture equivalent of a standard click event that is triggered on the release state of the touch gesture.\n\nThis plugin extends jQuery's built-in method. If jQuery Mobile is not loaded, calling the `.tap()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n#### Warning: Use tap with caution\n\nTap makes use of vclick and therefore should be used with caution on touch devices. See the [vclick API documentation](vclick) for more details.\n\n## Example:\n\nA simple example of the capturing and acting upon a tap event\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>tap demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n  html, body { padding: 0; margin: 0; }\n  html, .ui-mobile, .ui-mobile body {\n    height: 85px;\n  }\n  .ui-mobile, .ui-mobile .ui-page {\n    min-height: 85px;\n  }\n  #nav {\n    font-size: 200%;\n    width:17.1875em;\n    margin:17px auto 0 auto;\n  }\n  #nav a {\n    color: #777;\n    border: 2px solid #777;\n    background-color: #ccc;\n    padding: 0.2em 0.6em;\n    text-decoration: none;\n    float: left;\n    margin-right: 0.3em;\n  }\n  #nav a:hover {\n    color: #999;\n    border-color: #999;\n    background: #eee;\n  }\n  #nav a.selected,\n  #nav a.selected:hover {\n    color: #0a0;\n    border-color: #0a0;\n    background: #afa;\n  }\n  div.box {\n    width: 3em;\n    height: 3em;\n    background-color: #108040;\n  }\n  div.box.tap {\n    background-color: #7ACEF4;\n  }\n  </style>\n</head>\n<body>\n \n<h3>Tap the green square to see the above code applied:</h3>\n<div class=\"box\"></div>\n \n<script>\n$(function(){\n  $( \"div.box\" ).bind( \"tap\", tapHandler );\n \n  function tapHandler( event ){\n    $( event.target ).addClass( \"tap\" );\n  }\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/tap](https://api.jquerymobile.com/tap)"
- name: taphold event
  id: taphold
  summary: 'Description: Triggered after a sustained complete touch event'
  description: "# taphold\n\n## taphold eventversion added: 1.0\n\n**Description:** Triggered after a sustained complete touch event.\n\n- #### jQuery( \".selector\" ).on( \"taphold\", function( event ) { ... } )\n\nThe jQuery Mobile `taphold` event triggers after a sustained, complete touch event (also known as a long press).\n\n`$.event.special.tap.tapholdThreshold` (default: 750) - This value dictates how long the user must hold their tap before the taphold event is fired on the target element.\n\n`$.event.special.tap.emitTapOnTaphold` (default: true) - This value dictates whether a tap event will be emitted along with the taphold event.\n\nThis plugin extends jQuery's built-in method. If jQuery Mobile is not loaded, calling the `.taphold()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n## Example:\n\nA simple example of the capturing and acting upon a taphold event\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>taphold demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n  <style>\n  html, body { padding: 0; margin: 0; }\n  html, .ui-mobile, .ui-mobile body {\n    height: 85px;\n  }\n  .ui-mobile, .ui-mobile .ui-page {\n    min-height: 85px;\n  }\n  #nav {\n    font-size: 200%;\n    width:17.1875em;\n    margin:17px auto 0 auto;\n  }\n  #nav a {\n    color: #777;\n    border: 2px solid #777;\n    background-color: #ccc;\n    padding: 0.2em 0.6em;\n    text-decoration: none;\n    float: left;\n    margin-right: 0.3em;\n  }\n  #nav a:hover {\n    color: #999;\n    border-color: #999;\n    background: #eee;\n  }\n  #nav a.selected,\n  #nav a.selected:hover {\n    color: #0a0;\n    border-color: #0a0;\n    background: #afa;\n  }\n  div.box {\n    width: 3em;\n    height: 3em;\n    background-color: #108040;\n  }\n  div.box.taphold {\n    background-color: #7ACEF4;\n  }\n  </style>\n</head>\n<body>\n \n<h3>Long press the square for 750 milliseconds to see the above code applied:</h3>\n<div class=\"box\"></div>\n \n<script>\n$(function(){\n  $( \"div.box\" ).bind( \"taphold\", tapholdHandler );\n \n  function tapholdHandler( event ){\n    $( event.target ).addClass( \"taphold\" );\n  }\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/taphold](https://api.jquerymobile.com/taphold)"
- name: Textinput
  id: textinput
  summary: Text inputs and textareas are coded with standard HTML elements, then enhanced by jQuery Mobile to make them more attractive and useable on a mobile device
  description: "# Textinput Widget\n\n## Textinput Widgetversion added: 1.0\n\n**Description:** Creates a textinput widget for textinput, textarea or search input\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[autogrow](#option-autogrow)\n\n[classes](#option-classes)\n\n[clearBtn](#option-clearBtn)\n\n[clearBtnText](#option-clearBtnText)\n\n[corners](#option-corners)\n\n[defaults](#option-defaults)\n\n[disabled](#option-disabled)\n\n[enhanced](#option-enhanced)\n\n[initSelector](#option-initSelector)\n\n[keyupTimeoutBuffer](#option-keyupTimeoutBuffer)\n\n[mini](#option-mini)\n\n[preventFocusZoom](#option-preventFocusZoom)\n\n[theme](#option-theme)\n\n[wrapperClass](#option-wrapperClass)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n### Events\n\n[create](#event-create)\n\n## Text Input\n\nText inputs and textareas are coded with standard HTML elements, then enhanced by jQuery Mobile to make them more attractive and useable on a mobile device.\n\nTo collect standard alphanumeric text, use an `input` with a `type=\"text\"` attribute. Set the `for` attribute of the `label` to match the `id` of the `input` so they are semantically associated. It's possible to accessibly hide the label if it's not desired in the page layout, but we require that it is present in the markup for semantic and accessibility reasons.\n\n### Theming\n\nThe textinput widget uses the [jQuery Mobile CSS framework](theming/css-framework) to style its look and feel. If textinput specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-textinput`: The outermost container for textinput. `ui-textinput-search` or `ui-textinput-text` classes will be applied if textinput has `type='search'` or not accordingly. `ui-textinput-clear-button` class will be applied when `clearBtn` option is true. `ui-textinput-autogrow` class will be applied when `autogrow` option is true.\n  - `ui-textinput-search-icon`: Search icon's class when type of textinput is search\n\n``` markup\n<label for=\"basic\">Text Input:</label>\n<input type=\"text\" name=\"name\" id=\"basic\" value=\"\">\n```\n\nThis will produce a basic text input. The default styles set the width of the input to 100% of the parent container and stack the label on a separate line.\n\n### Mini version\n\nFor a more compact version that is useful in toolbars and tight spaces, add the `data-mini=\"true\"` attribute to the element to create a mini version.\n\n``` markup\n<label for=\"basic\">Text Input:</label>\n<input type=\"text\" name=\"name\" id=\"basic\" value=\"\" data-mini=\"true\">\n```\n\nThis will produce an input that is not as tall as the standard version and has a smaller text size.\n\n### Clear button option\n\nThe `clearButton` extension provides the `clearBtn` option.\n\nTo add a clear button to any input (like the search input), add the `data-clear-btn=\"true\"` attribute. The text for this clear button can be customized via the `data-clear-btn-text=\"clear input\"` attribute. Search buttons have the clear button by default and cannot be controlled by this option. Note that this is available for all the input types below except for those coded via `textarea` elements.\n\n``` markup\n<label for=\"clear-demo\">Text Input:</label>\n<input type=\"text\" name=\"clear\" id=\"clear-demo\" value=\"\" data-clear-btn=\"true\">\n```\n\nThis markup creates a text input with a clear button that becomes visible as soon as a character has been entered.\n\n### Field containers\n\nOptionally wrap the text input in a container with class `ui-field-contain` to help visually group it in a longer form.\n\n**Note:** The `data-` attribute `data-role=\"fieldcontain\"` is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Add class `ui-field-contain` instead.\n\n``` markup\n<div class=\"ui-field-contain\">\n  <label for=\"name\">Text Input:</label>\n  <input type=\"text\" name=\"name\" id=\"name\" value=\"\">\n</div>\n```\n\nThe text input is now displayed like this:\n\n### More text input types\n\nIn jQuery Mobile, you can use existing and new HTML5 input types such as `password`, `email`, `tel`, `number`, and more. Some type values are rendered differently across browsers. For example, Chrome renders the `range` input as a slider. jQuery Mobile standardizes the appearance of `range` and `search` by dynamically changing their type to `text`. You can configure which input types are degraded to `text` with the `page` plugin's options.\n\nOne major advantage of using these more specific input types if that on mobile devices, specialized keyboards that speed data entry are offered in place of the standard text keyboard. Try the following inputs on a mobile device to see which display custom keyboards on various platforms.\n\n### Search input outside the page\n\njQuery Mobile-styled `textinput` widgets can be placed outside jQuery Mobile pages. To do so, specify their input type as `type=\"text\"`, add the attribute `data-type=\"search\"`, and manually call the `textinput` plugin on the element.\n\nThe markup:\n\n``` markup\n<input id=\"the-search-input\" type=\"text\" data-type=\"search\">\n```\n\nThe script:\n\n``` javascript\n$( function() {\n  $( \"#the-search-input\" ).textinput();\n});\n```\n\n## Textareas\n\nFor multi-line text inputs, use a `textarea` element. The `autogrow` extension provides functionality for auto-growing the height of the textarea to avoid the need for an internal scrollbar.\n\nSet the `for` attribute of the `label` to match the `id` of the `textarea` so they are semantically associated, and wrap them in a `div` with class `ui-field-contain` to group them.\n\n**Note:** The `data-` attribute `data-role=\"fieldcontain\"` is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Add class `ui-field-contain` instead.\n\n``` markup\n<label for=\"textarea-a\">Textarea:</label>\n<textarea name=\"textarea\" id=\"textarea-a\">\nI'm a basic textarea. If this is pre-populated with content, the height will be automatically adjusted to fit without needing to scroll. That is a pretty handy usability feature.\n</textarea>\n```\n\nThis will produce a basic textarea with the width set to 100% of the parent container and the label stacked on a separate line. The textarea will grow to fit new lines as you type:\n\n``` markup\n<div class=\"ui-field-contain\">\n<label for=\"textarea\">Textarea:</label>\n  <textarea name=\"textarea\" id=\"textarea\"></textarea>\n</div>\n```\n\nThe textarea is displayed like this and will grow to fit new lines as you type:\n\n### Calling the textinput plugin\n\nThis plugin will auto initialize on any page that contains a textarea or any of the text input types listed above without any need for a `data-role` attribute in the markup. However, if needed, you can directly call the `textinput` plugin on any selector, just like any jQuery plugin:\n\n``` javascript\n$( \"input\" ).textinput();\n```\n\n### Degraded input types\n\nThe location of the map of input type degradations in the page plugin is deprecated as of 1.4.0. As of 1.5.0 the input type degradation functionality will be implemented by the `degradeInputs` module.\n\njQuery Mobile degrades several HTML5 input types back to type=text or type=number after adding enhanced controls. For example, inputs with a type of range are enhanced with a custom slider control, and their type is set to number to offer a usable form input alongside that slider. Inputs with a type of search are degraded back to type=text after we add our own themeable search input styling.\n\nThe `degradeInputs` module contains a list of input types that are set to either true which means they'll degrade to type=text, false which means they'll be left alone, or a string such as \"number\", which means they'll be converted to that type (such as the case of type=range).\n\nYou can configure which types are changed via `$.mobile.degradeInputs`, which has properties: color, date, datetime, \"datetime-local\", email, month, number, range, search, tel, time, url, and week. Be sure to configure this inside an event handler bound to the `mobileinit` event, so that it applies to the first page as well as subsequent pages that are loaded.\n\n## Search Input\n\nSearch inputs are a new HTML type styled with pill-shaped corners and an \"x\" icon to clear the field once you start typing. Start with an input with a type=\"search\" attribute in your markup.\n\nSet the `for` attribute of the `label` to match the `id` of the `input` so they are semantically associated. It's possible to accessibly hide the label if it's not desired in the page layout, but we require that it is present in the markup for semantic and accessibility reasons.\n\n``` markup\n<label for=\"search-basic\">Search Input:</label>\n<input type=\"search\" name=\"search\" id=\"search-basic\" value=\"\">\n```\n\nThis will produce a basic search input. The default styles set the width of the input to 100% of the parent container and stack the label on a separate line.\n\n### Mini version\n\nFor a more compact version that is useful in toolbars and tight spaces, add the `data-mini=\"true\"` attribute to the element to create a mini version.\n\n``` markup\n<label for=\"search-mini\">Search Input:</label>\n<input type=\"search\" name=\"search-mini\" id=\"search-mini\" value=\"\" data-mini=\"true\">\n```\n\nThis will produce a search input that is not as tall as the standard version and has a smaller text size.\n\n### Field containers\n\nOptionally wrap the search input in a container with tlass `ui-field-contain` to help visually group it in a longer form.\n\n**Note:** The `data-` attribute `data-role=\"fieldcontain\"` is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Add class `ui-field-contain` instead.\n\n``` markup\n<div class=\"ui-field-contain\">\n  <label for=\"search-2\">Search Input:</label>\n  <input type=\"search\" name=\"search-2\" id=\"search-2\" value=\"\">\n</div>\n```\n\nThe search input is now displayed like this:\n\n### Theming\n\nThe `data-theme` attribute can be added to the search input to set the theme to any swatch letter.\n\n### Setting the clear button text\n\nThe text for the button used to clear the search input of text can be configured for all search inputs by binding to the `mobileinit` event and setting the `$.mobile.textinput.prototype.options.clearBtnText` property to a string of your choosing.\n\nThis option is provided by the `clearButton` extension.\n\n### Calling the textinput plugin\n\nThis plugin will auto-initialize on any page that contains a text input with the `type=\"search\"` attribute without any need for a `data-role` attribute in the markup. However, if needed, you can directly call the `textinput` plugin on a selector, just like any jQuery plugin:\n\n``` javascript\n$( \".mySearchInput\" ).textinput();\n```\n\n## Providing pre-rendered markup\n\nYou can improve the load time of your page by providing the markup that the textinput widget would normally create during its initialization.\n\nBy providing this markup yourself, and by indicating that you have done so by setting the attribute `data-enhanced=\"true\"`, you instruct the textinput widget to skip these DOM manipulations during instantiation and to assume that the required DOM structure is already present.\n\nWhen you provide such pre-rendered markup you must also set all the classes that the framework would normally set, and you must also set all data attributes whose values differ from the default to indicate that the pre-rendered markup reflects the non-default value of the corresponding widget option.\n\nThe textinput widget wraps `input`-based widgets in `div` used for creating the style. `textarea` elements are not wrapped in such a `div`.\n\nIn the example below, we add the attribute `data-corners=\"false\"` to the input, because the class `ui-corner-all` is absent from the wrapper, indicating that the value of the \"corners\" option should be false.\n\n``` markup\n<label for=\"pre-rendered-text-field\">Pre-rendered input:</label>\n<div class=\"ui-input-text ui-body-inherit ui-shadow-inset\">\n  <input type=\"text\" data-enhanced=\"true\" data-corners=\"false\" name=\"pre-rendered-text-field\" id=\"pre-rendered-text-field\">\n</div>\n```\n\n## Options\n\n### autogrow\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nThis option is provided by the `autogrow` extension.\n\nWhether to update the size of the `textarea` element upon first appearance, as well as upon a change in the content of the element.\n\nThis option applies only to textinput widgets based on `textarea` elements.\n\nThis option is also exposed as a data attribute: `data-autogrow=\"false\"`.\n\n**Code examples:**\n\nInitialize the textinput with the `autogrow` option specified:\n\n``` javascript\n$( \".selector\" ).textinput({\n  autogrow: false\n});\n```\n\nGet or set the `autogrow` option, after initialization:\n\n``` javascript\n// Getter\nvar autogrow = $( \".selector\" ).textinput( \"option\", \"autogrow\" );\n \n// Setter\n$( \".selector\" ).textinput( \"option\", \"autogrow\", false );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n        \"ui-textinput\": \"ui-corner-all ui-shadow-inset\",\n        \"ui-textinput-search-icon\": \"ui-icon ui-alt-icon ui-icon-search\",\n        \"ui-textinput-clear-button\": \"ui-corner-all\"\n      }\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the textinput with the `classes` option specified, changing the theming for the `ui-textinput` class:\n\n``` javascript\n$( \".selector\" ).textinput({\n  classes: {\n    \"ui-textinput\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-textinput` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).textinput( \"option\", \"classes.ui-textinput\" );\n \n// Setter\n$( \".selector\" ).textinput( \"option\", \"classes.ui-textinput\", \"highlight\" );\n```\n\n### clearBtn\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nThis option is provided by the `clearButton` extension.\n\nAdds a clear button to the input when set to `true`.\n\nThis option applies only to textinput widgets based on `input` elements.\n\nThis option is also exposed as a data attribute: `data-clear-btn=\"true\"`.\n\n**Code examples:**\n\nInitialize the textinput with the `clearBtn` option specified:\n\n``` javascript\n$( \".selector\" ).textinput({\n  clearBtn: true\n});\n```\n\nGet or set the `clearBtn` option, after initialization:\n\n``` javascript\n// Getter\nvar clearBtn = $( \".selector\" ).textinput( \"option\", \"clearBtn\" );\n \n// Setter\n$( \".selector\" ).textinput( \"option\", \"clearBtn\", true );\n```\n\n### clearBtnText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"Clear text\"`\n\nThis option is provided by the `clearButton` extension.\n\nThe text description for the optional clear button, useful for assistive technologies like screen readers.\n\nThis option applies only to textinput widgets based on `input` elements.\n\nThis option is also exposed as a data attribute: `data-clear-btn-text=\"Clear value\"`.\n\n**Code examples:**\n\nInitialize the textinput with the `clearBtnText` option specified:\n\n``` javascript\n$( \".selector\" ).textinput({\n  clearBtnText: \"Clear value\"\n});\n```\n\nGet or set the `clearBtnText` option, after initialization:\n\n``` javascript\n// Getter\nvar clearBtnText = $( \".selector\" ).textinput( \"option\", \"clearBtnText\" );\n \n// Setter\n$( \".selector\" ).textinput( \"option\", \"clearBtnText\", \"Clear value\" );\n```\n\n### corners\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nApplies the theme border radius if set to `true` by adding the class `ui-corner-all` to the textinput widget's outermost element.\n\nThis option is also exposed as a data attribute: `data-corners=\"false\"`.\n\n**Code examples:**\n\nInitialize the textinput with the `corners` option specified:\n\n``` javascript\n$( \".selector\" ).textinput({\n  corners: false\n});\n```\n\nGet or set the `corners` option, after initialization:\n\n``` javascript\n// Getter\nvar corners = $( \".selector\" ).textinput( \"option\", \"corners\" );\n \n// Setter\n$( \".selector\" ).textinput( \"option\", \"corners\", false );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the textinput with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).textinput({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).textinput( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).textinput( \"option\", \"defaults\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the textinput if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the textinput with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).textinput({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).textinput( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).textinput( \"option\", \"disabled\", true );\n```\n\n### enhanced\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIndicates that the markup necessary for a textinput widget has been provided as part of the original markup.\n\nThis option is also exposed as a data attribute: `data-enhanced=\"true\"`.\n\n**Code examples:**\n\nInitialize the textinput with the `enhanced` option specified:\n\n``` javascript\n$( \".selector\" ).textinput({\n  enhanced: true\n});\n```\n\nGet or set the `enhanced` option, after initialization:\n\n``` javascript\n// Getter\nvar enhanced = $( \".selector\" ).textinput( \"option\", \"enhanced\" );\n \n// Setter\n$( \".selector\" ).textinput( \"option\", \"enhanced\", true );\n```\n\n### initSelector\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `See below`\n\nThe default `initSelector` for the textinput widget is:\n\n``` javascript\n\"\"input[type='text'], input[type='search'], :jqmData(type='search'), input[type='number'], :jqmData(type='number'), input[type='password'], input[type='email'], input[type='url'], input[type='tel'], textarea, input[type='time'], input[type='date'], input[type='month'], input[type='week'], input[type='datetime'], input[type='datetime-local'], input[type='color'], input:not([type]), input[type='file']\"\"\n```\n\n**Note:** This option is deprecated in 1.4.0 and will be removed in 1.5.0.  \nAs of jQuery Mobile 1.4.0, the `initSelector` is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the `mobileinit` event and overwriting the `initSelector` on the prototype:\n\n``` javascript\n$( document ).on( \"mobileinit\", function() {\n  $.mobile.textinput.prototype.initSelector = \"div.custom\";\n});\n```\n\n**Note:** Remember to attach the `mobileinit` handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.\n\nThe value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates textinput widgets on each of the resulting list of elements.\n\n(version deprecated: 1.4.0)\n\n### keyupTimeoutBuffer\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `100`\n\nThis option is provided by the `autogrow` extension.\n\nThe amount of time (in milliseconds) to wait between the occurence of a keystroke and the resizing of the `textarea` element. If another keystroke occurs within this time, the resizing is postponed by another period of time of the same length.\n\nThis option applies only to textinput widgets based on `textarea` elements.\n\nThis option is also exposed as a data attribute: `data-keyup-timeout-buffer=\"150\"`.\n\n**Code examples:**\n\nInitialize the textinput with the `keyupTimeoutBuffer` option specified:\n\n``` javascript\n$( \".selector\" ).textinput({\n  keyupTimeoutBuffer: 150\n});\n```\n\nGet or set the `keyupTimeoutBuffer` option, after initialization:\n\n``` javascript\n// Getter\nvar keyupTimeoutBuffer = $( \".selector\" ).textinput( \"option\", \"keyupTimeoutBuffer\" );\n \n// Setter\n$( \".selector\" ).textinput( \"option\", \"keyupTimeoutBuffer\", 150 );\n```\n\n### mini\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `null (false)`\n\nIf set to `true`, this will display a more compact version of the textinput that uses less vertical height by applying the `ui-mini` class to the outermost element of the textinput widget.\n\n**Note:** `mini` option is deprecated in 1.5 and will be removed in 1.6\n\nThis option is also exposed as a data attribute: `data-mini=\"true\"`.\n\n### preventFocusZoom\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true on iOS platforms`\n\nAttempts to prevent the device from focusing in on the input element when the element receives the focus.\n\nThis option is also exposed as a data attribute: `data-prevent-focus-zoom=\"true\"`.\n\n**Code examples:**\n\nInitialize the textinput with the `preventFocusZoom` option specified:\n\n``` javascript\n$( \".selector\" ).textinput({\n  preventFocusZoom: true\n});\n```\n\nGet or set the `preventFocusZoom` option, after initialization:\n\n``` javascript\n// Getter\nvar preventFocusZoom = $( \".selector\" ).textinput( \"option\", \"preventFocusZoom\" );\n \n// Setter\n$( \".selector\" ).textinput( \"option\", \"preventFocusZoom\", true );\n```\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the textinput widget. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the textinput with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).textinput({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).textinput( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).textinput( \"option\", \"theme\", \"b\" );\n```\n\n### wrapperClass\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"\"`\n\nThe value of this option is a string containing a space-separated list of classes to be applied to the outermost element of the textinput widget.\n\nThis option is also exposed as a data attribute: `data-wrapper-class=\"true\"`.\n\n**Code examples:**\n\nInitialize the textinput with the `wrapperClass` option specified:\n\n``` javascript\n$( \".selector\" ).textinput({\n  wrapperClass: \"custom-class\"\n});\n```\n\nGet or set the `wrapperClass` option, after initialization:\n\n``` javascript\n// Getter\nvar wrapperClass = $( \".selector\" ).textinput( \"option\", \"wrapperClass\" );\n \n// Setter\n$( \".selector\" ).textinput( \"option\", \"wrapperClass\", \"custom-class\" );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the textinput functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).textinput( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the textinput.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).textinput( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the textinput.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).textinput( \"enable\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).textinput( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current textinput options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).textinput( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the textinput option associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).textinput( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the textinput.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).textinput( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRefresh a text input.\n\nThis method is provided by the autogrow extension, and it sets the height of the `textarea` element based on its contents. You should call this method when the `textarea` element becomes visible to make sure that its initial height matches its contents.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).textinput( \"refresh\" );\n```\n\n## Events\n\n### create( event, ui )Type: `textinputcreate`\n\nTriggered when the textinput is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the textinput with the create callback specified:\n\n``` javascript\n$( \".selector\" ).textinput({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the textinputcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"textinputcreate\", function( event, ui ) {} );\n```\n\n## Examples:\n\nA basic example of a search input field\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>textinput demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <label for=\"basic\">Text Input:</label>\n    <input type=\"text\" name=\"name\" id=\"basic\" value=\"\">\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nA basic example of a search input field\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>textinput demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n  <div data-role=\"header\">\n    <h1>jQuery Mobile Example</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <label for=\"search-basic\">Search Input:</label>\n    <input type=\"search\" name=\"search\" id=\"search-basic\" value=\"\">\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/textinput](https://api.jquerymobile.com/textinput)"
- name: throttledresize event
  id: throttledresize
  summary: 'Description: Limits the rate of the execution of handlers on resize events'
  description: "# throttledresize\n\n## throttledresize eventversion added: 1.0\n\n**Description:** Limits the rate of the execution of handlers on resize events.\n\n- #### jQuery( \".selector\" ).on( \"throttledresize\", function( event ) { ... } )\n\nThe jQuery Mobile `throttledresize` event is a special event that prevents browsers from running continuous callbacks on resize. `throttledresize` is used internally for orientationchange in browsers like Internet Explorer. `throttledresize` ensures that a held event will execute after the timeout so logic that depends on the final conditions after a resize is complete will still execute properly.\n\nThe `throttledresize` event is triggered if orientationchange is not natively supported.\n\nThis event triggers when the browser window resizes from:\n\n1.  an orientation change (orientation-enabled device);\n2.  changes in dimension ratio that replicates a landspace/portrait change (resizing a desktop browser).\n\nThis plugin extends jQuery's built-in method. If jQuery Mobile is not loaded, calling the `.throttledresize()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n``` javascript\nvar count = 0;\n$(function() {\n  // Bind an event handler to window throttledresize event that, when triggered,\n  // passes a reference of itself that is accessible by the callback function.\n  $( window ).on( \"throttledresize\", throttledresizeHandler );\n \n  function throttledresizeHandler( event ) {\n    $( \"#output-text\" ).html( \"Event Count: \" + ++count );\n  }\n \n  // You can also manually force this event to fire.\n  $( window ).trigger( \"throttledresize\" );\n});\n```\n\nVisit this from your orientation-enabled device to see it in action!\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/throttledresize](https://api.jquerymobile.com/throttledresize)"
- name: Toolbar
  id: toolbar
  summary: 'Description: Adds toolbars to the top and/or bottom of the page'
  description: "# Toolbar Widget\n\n## Toolbar Widgetversion added: 1.4\n\n**Description:** Adds toolbars to the top and/or bottom of the page.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[addBackBtn](#option-addBackBtn)\n\n[backBtnText](#option-backBtnText)\n\n[backBtnTheme](#option-backBtnTheme)\n\n[classes](#option-classes)\n\n[defaults](#option-defaults)\n\n[disablePageZoom](#option-disablePageZoom)\n\n[disabled](#option-disabled)\n\n[fullscreen](#option-fullscreen)\n\n[hideDuringFocus](#option-hideDuringFocus)\n\n[position](#option-position)\n\n[supportBlacklist](#option-supportBlacklist)\n\n[tapToggle](#option-tapToggle)\n\n[tapToggleBlacklist](#option-tapToggleBlacklist)\n\n[theme](#option-theme)\n\n[trackPersistentToolbars](#option-trackPersistentToolbars)\n\n[transition](#option-transition)\n\n[updatePagePadding](#option-updatePagePadding)\n\n[visibleOnPageShow](#option-visibleOnPageShow)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[hide](#method-hide)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n[show](#method-show)\n\n[toggle](#method-toggle)\n\n[updatePagePadding](#method-updatePagePadding)\n\n### Events\n\n[create](#event-create)\n\n## Toolbars\n\nHeaders and footers are elements that precede resp. succeed the page content. The toolbar widget allows you to create headers and footers.\n\n## Headers\n\nThe header bar serves as the page title, is usually the first element inside each mobile page, and typically contains a page title and up to two buttons.\n\n### Header structure\n\nThe header is a toolbar at the top of the page that usually contains the page title text and optional buttons positioned to the left and/or right of the title for navigation or actions. Headers can optionally be positioned as fixed so they remain at the top of the screen at all times instead of scrolling with the page.\n\nThe title text is normally an H1 heading element but it's possible to use any heading level (H1-H6) to allow for semantic flexibility. For example, a page containing multiple mobile \"pages\" may use a H1 element on the home \"page\" and a H2 element on the secondary pages. All heading levels are styled identically by default to maintain visual consistency.\n\n``` markup\n<div data-role=\"header\">\n  <h1> Page Title </h1>\n</div>\n```\n\n### Theming\n\nThe toolbar widget uses the [jQuery Mobile CSS framework](theming/css-framework) to style its look and feel. If toolbar specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-toolbar-header`: The outermost container for toolbar header that provides border.\n  - `ui-toolbar-header-button-left`: This class can be applied to position buttons to left in toolbar header. You can provide extra classes for left button using classes option and this class as key\n  - `ui-toolbar-title`: Title element of the toolbar\n  - `ui-toolbar-header-button-right`: This class can be applied to position buttons to right in toolbar header. You can provide extra classes for right button using classes option and this class as key\n\n- `ui-toolbar-footer`: The outermost container for toolbar header that provides border.\n\n  **Note:** Toolbar footer doesn't provide classes to position button. Refer toolbar demos for more information\n\n  - `ui-toolbar-title`: Title element of the toolbar\n\n### Default header features\n\nThe header toolbar inherits its theme swatch from the page by default but you can easily set the theme swatch color by adding the `data-theme` attribute to the header. For example, `data-theme=\"b\"`. When you use external headers you must set a theme, because there is no parent page from which it can inherit a theme.\n\n### Adding buttons\n\n**Note:** The behavior whereby anchor elements are automatically enhanced as buttons is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Thereafter you must add button classes if you wish to style them as buttons.\n\nIn the standard header configuration, there are slots for buttons on either side of the text heading. Each button is typically an `a` (anchor) element or a `button` element that has the attribute `data-role=\"button\"` set. To save space, buttons in toolbar widgets are set to inline styling so the button is only as wide as the text and icons it contains.\n\n#### Default button positioning\n\n**Note:** The behavior whereby the first two buttons automatically get the `ui-btn-left` and `ui-btn-right` classes is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Thereafter you must add those classes in your markup if you wish to position the buttons left and/or right.\n\nThe toolbar plugin looks for immediate children of the header container, and automatically sets the first link in the left button slot and the second link in the right. In this example, the 'Cancel' button will appear in the left slot and 'Save' will appear in the right slot based on their sequence in the source order.\n\n``` markup\n<div data-role=\"header\">\n  <a href=\"index.html\" data-icon=\"delete\">Cancel</a>\n  <h1>Edit Contact</h1>\n  <a href=\"index.html\" data-icon=\"check\">Save</a>\n</div>\n```\n\n### Making buttons visually stand out\n\nButtons automatically adopt the swatch color of the bar they sit in, so a link in a header bar with the \"a\" color will also be styled as \"a\" colored buttons. It's simple to make a button visually stand out. Here, we add the `data-theme` attribute and set the color swatch for the button to \"b\" to make the \"Save\" button stand out.\n\n``` markup\n<div data-role=\"header\">\n  <a href=\"index.html\" data-icon=\"delete\">Cancel</a>\n  <h1>Edit Contact</h1>\n  <a href=\"index.html\" data-icon=\"check\" data-theme=\"b\">Save</a>\n</div>\n```\n\n#### Controlling button position with classes\n\nThe button position can also be controlled by adding classes to the button anchors, rather than relying on source order. This is especially useful if you only want a button in the right slot. To specify the button position, add the class of `ui-btn-left` or `ui-btn-right` to the anchor.\n\n``` markup\n<div data-role=\"header\">\n  <h1>Page Title</h1>\n  <a href=\"index.html\" data-icon=\"gear\" class=\"ui-btn-right\">Options</a>\n</div>\n```\n\n### Adding buttons to toolbar widgets without heading\n\nThe heading in the header bar has some margin that will give the bar its height. If you choose not to use a heading, you will need to add an element with `class=\"ui-title\"` so that the bar can get the height and display correctly.\n\n``` markup\n<div data-role=\"header\">\n  <a href=\"index.html\" data-icon=\"gear\" class=\"ui-btn-right\">Options</a>\n  <span class=\"ui-title\" />\n</div>\n```\n\n### Adding Back buttons\n\n**Note:** The options `addBackBtn`, `backBtnTheme`, and `backBtnText` have moved from the [page](page) widget to the toolbar widget as of jQuery Mobile 1.4.0.\n\njQuery Mobile has a feature to automatically create and append \"back\" buttons to any header, though it is disabled by default. This is primarily useful in chromeless installed applications, such as those running in a native app webview. The framework automatically generates a \"back\" button on a header when the toolbar plugin's `addBackBtn` option is true. This can also be set via markup if the header div has a `data-add-back-btn=\"true\"` attribute.\n\nIf you use the attribute `data-rel=\"back\"` on an anchor, any clicks on that anchor will mimic the back button, going back one history entry and ignoring the anchor's default href. This is particularly useful when linking back to a named page, such as a link that says \"home\", or when generating \"back\" buttons with JavaScript, such as a button to close a dialog. When using this feature in your source markup, **be sure to provide a meaningful href that actually points to the URL of the referring page. This will allow the feature to work for users in C-Grade browsers.**\n\nIf you just want a reverse transition without actually going back in history, you should use the `data-direction=\"reverse\"` attribute.\n\n### Customizing the back button text\n\nIf you'd like to configure the back button text, you can either use the `data-back-btn-text=\"previous\"` attribute on your toolbar element, or set it programmatically via the toolbar plugin's options:  \n`$.mobile.toolbar.prototype.options.backBtnText = \"previous\";`\n\n### Default back button style\n\nIf you'd like to configure the back button role-theme, you can use:  \n`$.mobile.toolbar.prototype.options.backBtnTheme = \"a\";`  \nIf you're doing this programmatically, set this option inside the mobileinit event handler.\n\n### Custom header configurations\n\nIf you need to create a header that doesn't follow the default configuration, simply wrap your custom styled markup in any container, such as `div`. The plugin won't apply the automatic button logic to the wrapped content inside the header container so you can write custom styles for laying out the content in your header.\n\nIt's also possible to create custom bars without using the header data-role at all. For example, start with any container and add the `ui-bar` class to apply standard bar padding and add the `ui-bar-b` class to assign the bar swatch styles from your theme. (The \"b\" can be any swatch letter.)\n\n``` markup\n<div class=\"ui-bar ui-bar-b\">\n  <h3>I'm just a div with bar classes and a mini inline <a href=\"#\" data-role=\"button\" data-mini=\"true\">Button</a></h3>\n</div>\n```\n\nNote that `.ui-bar` should not be added to header or footer bars that span the full width of the page, as the additional padding will cause a full-width element to break out of its parent container. To add padding inside of a full-width toolbar, wrap its contents in an element and apply the padding to that element instead.\n\nBy writing some simple styles, it's easy to build message bars like this:\n\n## Footers\n\nThe footer bar is usually the last element inside each mobile page, and tends to be more freeform than the header in terms of content and functionality, but typically contains a combination of text and buttons.\n\n### Footer bar structure\n\nThe `footer` bar has the same basic structure as the header except it uses the `data-role` attribute value of `footer`.\n\n``` markup\n<div data-role=\"footer\">\n  <h4>Footer content</h4>\n</div>\n```\n\nThe footer toolbar inherits its theme swatch from the [page](page) by default but you can easily set the theme swatch color by adding the `data-theme` attribute to the header. For example, `data-theme=\"b\"`. When you use external headers you must set a theme, because there is no parent page from which it can inherit a theme.\n\nThe page footer is very similar to the header in terms of options and configuration. The primary difference is that the footer is designed to be less structured than the header to allow more flexibility, so the framework doesn't automatically reserve slots for buttons to the left or right as it does in headers.\n\nSince footers do not have the same prescriptive markup conventions as headers, we recommend using layout grids or writing custom styles to achieve the design you want.\n\n### Adding buttons\n\n**Note:** The behavior whereby anchor elements are automatically enhanced as buttons is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Thereafter you must set the attribute `data-role=\"button\"` on those anchors you wish the framework to enhance as buttons.\n\nAny link or valid button markup with a `data-role=\"button\"` attribute added to the footer will automatically be turned into a button. To save space, buttons in toolbar widgets are automatically set to inline styling so the button is only as wide as the text and icons it contains.\n\nBy default, toolbar widgets don't have any padding to accommodate nav bars and other widgets. To include padding on the bar, add a `class=\"ui-bar\"` to the footer.\n\n``` markup\n<div data-role=\"footer\" class=\"ui-bar\">\n  <a href=\"index.html\" class=\"ui-btn ui-corner-all ui-shadow ui-btn-inline ui-btn-icon-right ui-icon-plus\">Add</a>\n  <a href=\"index.html\" class=\"ui-btn ui-corner-all ui-shadow ui-btn-inline ui-btn-icon-right ui-icon-arrow-u\">Up</a>\n  <a href=\"index.html\" class=\"ui-btn ui-corner-all ui-shadow ui-btn-inline ui-btn-icon-right ui-icon-arrow-d\">Down</a>\n</div>\n```\n\nThis creates this toolbar with buttons sitting in a row\n\nNote that `.ui-bar` should not be added to header or footer bars that span the full width of the page, as the additional padding will cause a full-width element to break out of its parent container. To add padding inside of a full-width toolbar, wrap the contents of the toolbar widget in an element and apply the padding to that element.\n\nTo group buttons together into a button set, wrap the links in a wrapper with `data-role=\"controlgroup\"` and `data-type=\"horizontal\"` attributes.\n\n``` markup\n<div data-role=\"controlgroup\" data-type=\"horizontal\">\n```\n\nThis creates a grouped set of buttons:\n\n### Adding form elements\n\nForm elements and other content can also be added to toolbars. Here is an example of a select menu inside a footer bar. We recommend using mini-sized form elements in toolbars by adding the `data-mini=\"true\"` attribute:\n\n### Fixed & Persistent footers\n\nIn situations where the footer is a global navigation element, you may want it to appear fixed so it doesn't scroll out of view. It's also possible to make a fixed toolbar persistent so it appears to not move between page transitions. This can be accomplished by using the persistent footer feature included in jQuery Mobile.\n\nTo make a footer persistent between transitions, add the `data-id` attribute to the footer of all relevant pages and use the same `id` value for each. For example, by adding `data-id=\"myfooter\"` to the current page and the target page, the framework will keep the footer anchors in the same spot during the page animation. **This effect will only work correctly if the header and footer toolbars are set to `data-position=\"fixed\"` so they are in view during the transition.**\n\n## Fixed toolbars\n\nIn browsers that support CSS `position: fixed` (most desktop browsers, iOS5+, Android 2.2+, BlackBerry 6, and others), toolbar widgets that use the \"fixedtoolbar\" plugin will be fixed to the top or bottom of the viewport, while the page content scrolls freely in between. In browsers that don't support fixed positioning, the toolbars will remain positioned in flow, at the top or bottom of the page.\n\nTo enable this behavior on a header or footer, add the `data-position=\"fixed\"` attribute to a jQuery Mobile toolbar element.\n\nFixed header markup example:\n\n``` markup\n<div data-role=\"header\" data-position=\"fixed\">\n  <h1>Fixed Header</h1>\n</div>\n```\n\nFixed footer markup example:\n\n``` markup\n<div data-role=\"footer\" data-position=\"fixed\">\n  <h1>Fixed Footer</h1>\n</div>\n```\n\n**Note:** When you dynamically inject a fixed toolbar into the active page, you must afterwards call `$.mobile.resetActivePageHeight();` to ensure that the page height remains correct. An [example](#example-2) illustrates this.\n\n### Fullscreen Toolbars\n\nFullscreen fixed toolbars sit on top of the content at all times when they are visible, and unlike regular fixed toolbars, fullscreen toolbars do not fall back to static positioning when toggled. Instead they disappear from the screen entirely. Fullscreen toolbars are ideal for more immersive interfaces, like a photo viewer that is meant to fill the entire screen with the photo itself and no distractions.\n\nTo enable this option on a fixed header or footer, add the `data-fullscreen` attribute to the element.\n\n``` markup\n<div data-role=\"header\" data-position=\"fixed\" data-fullscreen=\"true\">\n  <h1>Fullscreen fixed header</h1>\n</div>\n```\n\n### Forms in toolbars\n\nWhile all form elements are now tested to work correctly within *static* toolbars as of jQuery Mobile 1.1, we recommend extensive testing when using form elements within *fixed* toolbars or within any `position: fixed` elements. This can potentially trigger a number of unpredictable issues in various mobile browsers, Android 2.2/2.3 in particular (detailed in **Known issues in Android 2.2/2.3**, below).\n\n### Changes in jQuery Mobile 1.1\n\nPrior to version 1.1, jQuery Mobile used dynamically re-positioned toolbars for the fixed header effect because very few mobile browsers supported the `position:fixed` CSS property, and simulating fixed support through the use of \"fake\" JavaScript overflow-scrolling behavior would have reduced our browser support reach, in addition to feeling unnatural on certain platforms. This behavior was not ideal, and jQuery Mobile 1.1 took a new approach to fixed toolbars that allows much broader support. The framework now offers true fixed toolbars on many popular platforms, while gracefully degrading non-supporting platforms to static positioning.\n\n### Polyfilling older platforms\n\nThe fixed toolbar plugin degrades gracefully on platforms that do not support CSS `position:fixed` properly, such as iOS4.3. If you still need to support fixed toolbars on that platform (with the show/hide behavior) included in previous releases, Filament Group has developed a polyfill that you can use.\n\n- [Github code repository with CSS, and JavaScript required for the fixed toolbars polyfill](https://github.com/filamentgroup/jQuery-Mobile-FixedToolbar-Legacy-Polyfill)\n- [Preview URL using the code in the repo above](http://filamentgroup.github.com/jQuery-Mobile-FixedToolbar-Legacy-Polyfill/)\n\nJust include the CSS and JS files after your references to jQuery Mobile and Fixed toolbars will work similarly to jQuery Mobile 1.0 on iOS4.3, with the inclusion of the new API for the 1.1 fixedtoolbar plugin.\n\nIf you have any improvements to suggest, fork the [gist](https://github.com/filamentgroup/jQuery-Mobile-FixedToolbar-Legacy-Polyfill) on github and let us know!\n\n### Known issue with form controls inside fixed toolbars, and programmatic scroll\n\nAn obscure issue exists in iOS5 and some Android platforms where form controls placed inside fixed-positioned containers can lose their hit area when the window is programatically scrolled (using `window.scrollTo` for example). This is not an issue specific to jQuery Mobile, but because of it, we recommend not programatically scrolling a document when using form controls inside jQuery Mobile fixed toolbars. [This ticket](https://github.com/scottjehl/Device-Bugs/issues/1) from the [Device Bugs project](https://github.com/scottjehl/Device-Bugs/) tracker explains this problem in more detail.\n\n### Known issues in Android 2.2/2.3\n\nAndroid 2.2/2.3's implementation of `position: fixed;` can, in conjunction with seemingly unrelated styles and markup patterns, cause a number of strange issues, particularly in the case of `position: absolute` elements inside of `position: fixed` elements. While we've done our best to work around a number of these unique bugs within the scope of the library, custom styles may cause a number of issues.\n\n- Form elements elsewhere on the page - select menus in particular - can fail to respond to user interaction when an *empty* absolute positioned element is placed within a fixed position element. In rare casesâand specific to Android 2.2âthis can cause *entire pages* to fail to respond to user interaction. This can seemingly be solved by adding any character to the absolute positioned element, including a non-breaking space, and in some cases even whitespace.\n- The above-described issue can also be triggered by an absolute positioned image inside of a fixed position element, but *only* when that image is using something *other than its inherent dimensions*. If a height or width is specified on the image using CSS, or the image src is invalid (thus having no inherent height and width), this issue can occur. If an image that is inherently, say, 50x50 pixels is placed in a fixed element and left at its inherent dimensions, this issue does not seem to occur.\n- When a `position: fixed` element appears anywhere on a page, most 2D CSS transforms will fail. Oddly, only `translate` transforms seem unaffected by this. Even more oddly, this issue is solved by setting a CSS `opacity` of .9 or below on the parent of the fixed element.\n- Combinations of `position: fixed` and overflow properties are best avoided, as both have been known to cause unpredictable issues in older versions of Android OS.\n- Any element that triggers the on-screen keyboard, when placed inside a `position: fixed` element, will fail to respond to user input when using anything other than the default keyboard. This includes Swype, XT9 or, it seems, any input method apart from the standard non-predictive keyboard.\n\nWhile we will continue to try to find ways to mitigate these bugs as best we can, we currently advise against implementing fixed toolbars containing complicated user styles and form elements without extensive testing in all versions of Android's native browser.\n\n## No longer supported: touchOverflowEnabled\n\nPrior to jQuery Mobile 1.1, true fixed toolbar support was contingent on native browser support for the CSS property `overflow-scrolling: touch`, which is currently only supported in iOS5. As of version 1.1, jQuery Mobile no longer uses this CSS property at all. We've removed all internal usage of this property in the framework, but we've left it defined globally on the $.mobile object to reduce the risk that its removal will cause trouble with existing applications. This property is flagged for removal, so please update your code to no longer use it. The support test for this property, however, remains defined under `$.support` and we have no plans to remove that test at this time.\n\n## Options\n\n### addBackBtn\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhether to automatically add a button to the header that will take the user to the previous page.\n\nThis option only affects header toolbar widgets.\n\nThis option is also exposed as a data attribute: `data-add-back-btn=\"true\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `addBackBtn` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  addBackBtn: true\n});\n```\n\nGet or set the `addBackBtn` option, after initialization:\n\n``` javascript\n// Getter\nvar addBackBtn = $( \".selector\" ).toolbar( \"option\", \"addBackBtn\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"addBackBtn\", true );\n```\n\n### backBtnText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"Back\"`\n\nThe text to be shown on the back button.\n\nThis option only affects header toolbar widgets.\n\nThis option is also exposed as a data attribute: `data-back-btn-text=\"Previous\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `backBtnText` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  backBtnText: \"Previous\"\n});\n```\n\nGet or set the `backBtnText` option, after initialization:\n\n``` javascript\n// Getter\nvar backBtnText = $( \".selector\" ).toolbar( \"option\", \"backBtnText\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"backBtnText\", \"Previous\" );\n```\n\n### backBtnTheme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color theme swatch for the back button. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-back-btn-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `backBtnTheme` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  backBtnTheme: \"b\"\n});\n```\n\nGet or set the `backBtnTheme` option, after initialization:\n\n``` javascript\n// Getter\nvar backBtnTheme = $( \".selector\" ).toolbar( \"option\", \"backBtnTheme\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"backBtnTheme\", \"b\" );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the toolbar with the `classes` option specified, changing the theming for the `ui-toolbar` class:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  classes: {\n    \"ui-toolbar\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-toolbar` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).toolbar( \"option\", \"classes.ui-toolbar\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"classes.ui-toolbar\", \"highlight\" );\n```\n\n### defaults\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSeting this option to `true` indicates that other widgets options have default values and causes jQuery Mobile's widget autoenhancement code to omit the step where it retrieves option values from data attributes. This can improve startup time.\n\nThis option is also exposed as a data attribute: `data-defaults=\"true\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `defaults` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  defaults: true\n});\n```\n\nGet or set the `defaults` option, after initialization:\n\n``` javascript\n// Getter\nvar defaults = $( \".selector\" ).toolbar( \"option\", \"defaults\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"defaults\", true );\n```\n\n### disablePageZoom\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nThis option is provided by the `fixedToolbar` extension.\n\nSets whether to disable page zoom whenever the page containing the fixed toolbar is shown.\n\nThis option is also exposed as a data attribute: `data-disable-page-zoom=\"false\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `disablePageZoom` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  disablePageZoom: false\n});\n```\n\nGet or set the `disablePageZoom` option, after initialization:\n\n``` javascript\n// Getter\nvar disablePageZoom = $( \".selector\" ).toolbar( \"option\", \"disablePageZoom\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"disablePageZoom\", false );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the toolbar if set to `true`.\n\nThis option is also exposed as a data attribute: `data-disabled=\"true\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).toolbar( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"disabled\", true );\n```\n\n### fullscreen\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nThis option is provided by the `fixedToolbar` extension.\n\nSets whether the toolbar should be hidden entirely when the page is tapped.\n\nThis option is also exposed as a data attribute: `data-fullscreen=\"true\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `fullscreen` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  fullscreen: true\n});\n```\n\nGet or set the `fullscreen` option, after initialization:\n\n``` javascript\n// Getter\nvar fullscreen = $( \".selector\" ).toolbar( \"option\", \"fullscreen\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"fullscreen\", true );\n```\n\n### hideDuringFocus\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"input, textarea, select\"`\n\nThis option is provided by the `fixedToolbar` extension.\n\nThe value of this option is a CSS selector for those elements that, when focused, should cause the fixed toolbar to be hidden and conversely, to be shown upon loss of focus.\n\nThis option is also exposed as a data attribute: `data-hide-during-focus=\"button\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `hideDuringFocus` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  hideDuringFocus: \"button\"\n});\n```\n\nGet or set the `hideDuringFocus` option, after initialization:\n\n``` javascript\n// Getter\nvar hideDuringFocus = $( \".selector\" ).toolbar( \"option\", \"hideDuringFocus\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"hideDuringFocus\", \"button\" );\n```\n\n### position\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nThis option is provided by the `fixedToolbar` extension.\n\nCauses the toolbar to float above the content via CSS `position: fixed` when set to \"fixed\".\n\nThis option is also exposed as a data attribute: `data-position=\"fixed\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `position` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  position: \"fixed\"\n});\n```\n\nGet or set the `position` option, after initialization:\n\n``` javascript\n// Getter\nvar position = $( \".selector\" ).toolbar( \"option\", \"position\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"position\", \"fixed\" );\n```\n\n### supportBlacklist\n\n**Type:** [Function](http://api.jquery.com/Types/#Function)()\n\n**Default:** `default blacklist`\n\nThis option is provided by the `fixedToolbar` extension.\n\nThe value of this option is a function that will return `true` on platforms where toolbar widgets should not be displayed as fixed.\n\nThe default value of this option is a function that returns `true` whenever the value of `$.support.fixedPosition` is `false`.\n\n### tapToggle\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nThis option is provided by the `fixedToolbar` extension.\n\nSets whether the fixed toolbar's visibility can be toggled by tapping on the page.\n\nThis option is also exposed as a data attribute: `data-tap-toggle=\"false\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `tapToggle` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  tapToggle: false\n});\n```\n\nGet or set the `tapToggle` option, after initialization:\n\n``` javascript\n// Getter\nvar tapToggle = $( \".selector\" ).toolbar( \"option\", \"tapToggle\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"tapToggle\", false );\n```\n\n### tapToggleBlacklist\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"a, button, input, select, textarea, .ui-header-fixed, .ui-footer-fixed, .ui-flipswitch, .ui-popup, .ui-panel, .ui-panel-dismiss-open\"`\n\nThis option is provided by the `fixedToolbar` extension.\n\nWhen the user taps on the page and the `tapToggle` option is set on the fixed toolbar widget, the element on which the user has tapped is examined before the visibility of the toolbar is toggled. If the element on which the user has tapped matches the selector provided as the value of this option, then the toolbar is not toggled.\n\nThis option is also exposed as a data attribute: `data-tap-toggle-blacklist=\".do-not-toggle-fixed-toolbar\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `tapToggleBlacklist` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  tapToggleBlacklist: \".do-not-toggle-fixed-toolbar\"\n});\n```\n\nGet or set the `tapToggleBlacklist` option, after initialization:\n\n``` javascript\n// Getter\nvar tapToggleBlacklist = $( \".selector\" ).toolbar( \"option\", \"tapToggleBlacklist\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"tapToggleBlacklist\", \".do-not-toggle-fixed-toolbar\" );\n```\n\n### theme\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null, inherited from parent`\n\nSets the color scheme (swatch) for the toolbar widget. It accepts a single letter from a-z that maps to the swatches included in your theme.\n\nPossible values: swatch letter (a-z).\n\nThis option is also exposed as a data attribute: `data-theme=\"b\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `theme` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  theme: \"b\"\n});\n```\n\nGet or set the `theme` option, after initialization:\n\n``` javascript\n// Getter\nvar theme = $( \".selector\" ).toolbar( \"option\", \"theme\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"theme\", \"b\" );\n```\n\n### trackPersistentToolbars\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nThis option is provided by the `fixedToolbar` extension.\n\nWhether to persist the toolbar across pages.\n\nThis option is also exposed as a data attribute: `data-track-persistent-toolbars=\"false\"`.\n\n(version deprecated: 1.4.0)\n\n**Code examples:**\n\nInitialize the toolbar with the `trackPersistentToolbars` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  trackPersistentToolbars: false\n});\n```\n\nGet or set the `trackPersistentToolbars` option, after initialization:\n\n``` javascript\n// Getter\nvar trackPersistentToolbars = $( \".selector\" ).toolbar( \"option\", \"trackPersistentToolbars\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"trackPersistentToolbars\", false );\n```\n\n### transition\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"slide\"`\n\nThis option is provided by the `fixedToolbar` extension.\n\nThe transition to apply when showing/hiding the fixed toolbar.\n\nThe following values are recognized:\n\n|         |                                                                                                                     |\n|---------|---------------------------------------------------------------------------------------------------------------------|\n| \"none\"  | The fixed toolbar appears and disappears abruptly, without any transition.                                          |\n| \"slide\" | The fixed slides in and out when it is toggled. \"slideup\" is used for headers, and \"slidedown\" is used for footers. |\n| \"fade\"  | The fixed fades in and out when it is toggled.                                                                      |\n\n**Code examples:**\n\nInitialize the toolbar with the `transition` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  transition: \"fade\"\n});\n```\n\nGet or set the `transition` option, after initialization:\n\n``` javascript\n// Getter\nvar transition = $( \".selector\" ).toolbar( \"option\", \"transition\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"transition\", \"fade\" );\n```\n\n### updatePagePadding\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nThis option is provided by the `fixedToolbar` extension.\n\nWhether to set the page content div's top and bottom padding to the height of the toolbar.\n\nThis option is also exposed as a data attribute: `data-update-page-padding=\"false\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `updatePagePadding` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  updatePagePadding: false\n});\n```\n\nGet or set the `updatePagePadding` option, after initialization:\n\n``` javascript\n// Getter\nvar updatePagePadding = $( \".selector\" ).toolbar( \"option\", \"updatePagePadding\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"updatePagePadding\", false );\n```\n\n### visibleOnPageShow\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nThis option is provided by the `fixedToolbar` extension.\n\nWhether the toolbar is shown along with the page.\n\nThis option is also exposed as a data attribute: `data-visible-on-page-show=\"false\"`.\n\n**Code examples:**\n\nInitialize the toolbar with the `visibleOnPageShow` option specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  visibleOnPageShow: false\n});\n```\n\nGet or set the `visibleOnPageShow` option, after initialization:\n\n``` javascript\n// Getter\nvar visibleOnPageShow = $( \".selector\" ).toolbar( \"option\", \"visibleOnPageShow\" );\n \n// Setter\n$( \".selector\" ).toolbar( \"option\", \"visibleOnPageShow\", false );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the toolbar functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).toolbar( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the toolbar.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).toolbar( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the toolbar.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).toolbar( \"enable\" );\n```\n\n### hide()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nThis method is provided by the `fixedToolbar` extension.\n\nHides the toolbar.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the hide method:\n\n``` javascript\n$( \".selector\" ).toolbar( \"hide\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).toolbar( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current toolbar options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).toolbar( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the toolbar option associated with the specified `optionName`.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).toolbar( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the toolbar.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).toolbar( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nUpdate the toolbar.\n\nIf you manipulate a toolbar via JavaScript, you must call the `refresh` method on it to update the visual styling.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).toolbar( \"refresh\" );\n```\n\n### show()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nThis method is provided by the `fixedToolbar` extension.\n\nShows the toolbar.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the show method:\n\n``` javascript\n$( \".selector\" ).toolbar( \"show\" );\n```\n\n### toggle()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nThis method is provided by the `fixedToolbar` extension.\n\nCalls either the show or the hide method, depending on whether the toolbar is visible.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the toggle method:\n\n``` javascript\n$( \".selector\" ).toolbar( \"toggle\" );\n```\n\n### updatePagePadding()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the top and bottom padding for the content element of the page to the height of the toolbar.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the updatePagePadding method:\n\n``` javascript\n$( \".selector\" ).toolbar( \"updatePagePadding\" );\n```\n\n## Events\n\n### create( event, ui )Type: `toolbarcreate`\n\nTriggered when the toolbar is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the toolbar with the create callback specified:\n\n``` javascript\n$( \".selector\" ).toolbar({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the toolbarcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"toolbarcreate\", function( event, ui ) {} );\n```\n\n## Examples:\n\nA basic example of a header\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>toolbar demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page1\">\n    <div data-role=\"header\">\n    <h1>Page Title</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n    <p>Some content here</p>\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nA basic example of a page with fixed toolbars.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>toolbar demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page2\">\n  <div data-role=\"header\" data-position=\"fixed\" data-theme=\"b\">\n    <h1>Fixed Header</h1>\n  </div>\n  <div role=\"main\" class=\"ui-content\">\n \n    <p>This page demonstrates the \"fixed\" toolbar mode. </p>\n    <br /><br />\n    <p>To enable this toolbar feature type, you apply the <code>data-position=\"fixed\"</code> attribute to both the header and footer <code>div</code> elements.</p>\n    <br /><br />\n    <p>And we're adding more text here so that you can really see the fixed toobars in action.</p>\n    <br /><br />\n    <p>If you tap the screen while in the middle of the page (i.e. neither at the top nor the bottom of the page, the visibility of the toolbars will toggle</p>\n    <p></p>\n \n  </div>\n    <div data-role=\"footer\" data-theme=\"b\" data-position=\"fixed\">\n    <h1>Fixed Footer</h1>\n  </div>\n</div>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nInjecting a fixed toolbar\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>toolbar demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n  <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"//code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\n</head>\n<body>\n \n<div data-role=\"page\" id=\"page3\">\n  <div role=\"main\" class=\"ui-content\">\n    <p>This page demonstrates how to correctly inject fixed toolbars.</p>\n    <a href=\"#\" id=\"inject-toolbar\" class=\"ui-btn ui-corner-all ui-shadow ui-btn-inline\">Inject Header</a>\n  </div>\n</div>\n \n<script>\n$.mobile.document.on( \"click\", \"#inject-toolbar\", function() {\n  $( \"<div data-role='header'><h1>Dynamic Fixed Toolbar Header</h1></div>\")\n    .appendTo( $( \"#inject-toolbar\" ).closest( \".ui-page\" ) )\n    .toolbar({ position: \"fixed\" });\n \n  // This second step ensures that the insertion of the new toolbar does not\n  // affect page height\n  $.mobile.resetActivePageHeight();\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/toolbar](https://api.jquerymobile.com/toolbar)"
- name: updatelayout event
  id: updatelayout
  summary: 'Description: Triggered by components within the framework that dynamically show/hide content'
  description: "# updatelayout\n\n## updatelayout eventversion added: 1.0\n\n**Description:** Triggered by components within the framework that dynamically show/hide content.\n\n- #### jQuery( \".selector\" ).on( \"updatelayout\", function( event ) { ... } )\n\nSome components within the framework, such as collapsible and listview search, dynamically hide and show content based on user events. This hiding/showing of content affects the size of the page and may result in the browser adjusting/scrolling the viewport to accommodate the new page size. Since this has the potential to affect other components such as fixed headers and footers, components like collapsible and listview trigger a custom `updatelayout` event to notify other components that they may need to adjust their layouts in response to their content changes. Developers who are building dynamic applications that inject, hide, or remove content from the page, or manipulate it in any way that affects the dimensions of the page, can also manually trigger this `updatelayout` event to ensure components on the page update in response to the changes.\n\nThis event is triggered by components within the framework that dynamically show/hide content, and is meant as a generic mechanism to notify other components that they may need to update their size or position. Within the framework, this event is fired on the component element whose content was shown/hidden, and bubbles all the way up to the document element.\n\n``` javascript\n$( \"#foo\" ).hide().trigger( \"updatelayout\" );\n```\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/updatelayout](https://api.jquerymobile.com/updatelayout)"
- name: vclick event
  id: vclick
  summary: 'Description: Virtualized click event handler'
  description: "# vclick\n\n## vclick eventversion added: 1.0\n\n**Description:** Virtualized click event handler.\n\n- #### jQuery( \".selector\" ).on( \"vclick\", function( event ) { ... } )\n\nWe provide a set of \"virtual\" mouse events that attempt to abstract away mouse and touch events. This allows the developer to register listeners for the basic mouse events, such as mousedown, mousemove, mouseup, and click, and the plugin will take care of registering the correct listeners behind the scenes to invoke the listener at the fastest possible time for that device. In touch environments, the plugin retains the order of event firing that is seen in traditional mouse environments, so for example, vmouseup is always dispatched before vmousedown, and vmousedown before vclick, etc. The virtual mouse events also normalize how coordinate information is extracted from the event, so in touch based environments, coordinates are available from the pageX, pageY, screenX, screenY, clientX, and clientY properties, directly on the event object.\n\nThe jQuery Mobile `\"vclick\"` event handler simulates the \"onclick\" event handler on mobile devices.\n\nThis plugin extends jQuery's built-in method. If jQuery Mobile is not loaded, calling the `.vclick()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n``` javascript\n$( document ).on( \"vclick\", \"p\", function() {\n  $( this ).append( \"<span style='color:#108040;'> vclick fired... </span>\" );\n  });\n```\n\n#### Warning: Use vclick with caution\n\nUse vclick with caution on touch devices. Webkit based browsers synthesize `mousedown`, `mouseup`, and `click` events roughly 300ms after the `touchend` event is dispatched. The target of the synthesized mouse events are calculated at the time they are dispatched and are based on the location of the touch events and, in some cases, the implementation specific heuristics which leads to different target calculations on different devices and even different OS versions for the same device. This means the target element within the original touch events could be different from the target element within the synthesized mouse events.\n\nWe recommend using `click` instead of `vclick` anytime the action being triggered has the possibility of changing the content underneath the point that was touched on screen. This includes page transitions and other behaviors such as collapse/expand that could result in the screen shifting or content being completely replaced.\n\n#### Canceling an element's default click behavior\n\nApplications can call `preventDefault()` on a `vclick` event to cancel an element's default click behavior. On mouse based devices, calling `preventDefault()` on a `vclick` event equates to calling `preventDefault()` on the real `click` event during the bubble event phase. On touch based devices, it's a bit more complicated since the actual `click` event is dispatched about 300ms after the `vclick` event is dispatched. For touch devices, calling `preventDefault()` on a `vclick` event triggers some code in the vmouse plugin that attempts to catch the next `click` event that gets dispatched by the browser, during the capture event phase, and calls `preventDefault()` and `stopPropagation()` on it. As mentioned in the warning above, it is sometimes difficult to match up a touch event with its corresponding mouse event because the targets can differ. For this reason, the vmouse plugin also falls back to attempting to identify a corresponding `click` event by coordinates. There are still cases where both target and coordinate identification fail, which results in the `click` event being dispatched and either triggering the default action of the element, or in the case where content has been shifted or replaced, triggering a click on a different element. If this happens on a regular basis for a given element/control, we suggest you use `click` for triggering your action.\n\nThe virtual mouse events can also be configured:\n\n- `$.vmouse.moveDistanceThreshold` (default: 10px) â More than this, then it is a scroll event. The vmousecancel event is called and the TouchMove event is cancelled.\n- `$.vmouse.clickDistanceThreshold` (default: 10px) â If a vclick event was already captured and is in the block list, then vclicks less than this distance are ignored.\n- `$.vmouse.resetTimerDuration` (default: 1500ms) â More time than this, then it is not a touch event. Scroll, TouchMove and TouchEnd events use this. The block list is cleared.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/vclick](https://api.jquerymobile.com/vclick)"
- name: vmousecancel event
  id: vmousecancel
  summary: 'Description: Virtualized mousecancel event handler'
  description: "# vmousecancel\n\n## vmousecancel eventversion added: 1.0\n\n**Description:** Virtualized mousecancel event handler.\n\n- #### jQuery( \".selector\" ).on( \"vmousecancel\", function( event ) { ... } )\n\nWe provide a set of \"virtual\" mouse events that attempt to abstract away mouse and touch events. This allows the developer to register listeners for the basic mouse events, such as mousedown, mousemove, mouseup, and click, and the plugin will take care of registering the correct listeners behind the scenes to invoke the listener at the fastest possible time for that device. In touch environments, the plugin retains the order of event firing that is seen in traditional mouse environments, so for example, vmouseup is always dispatched before vmousedown, and vmousedown before vclick, etc. The virtual mouse events also normalize how coordinate information is extracted from the event, so in touch based environments, coordinates are available from the pageX, pageY, screenX, screenY, clientX, and clientY properties, directly on the event object.\n\nThe jQuery Mobile `vmousecancel` event handler is called whenever the system cancels a virtualized mouse event. This event occurs when a scroll is triggered. jQuery Mobile will fire a \"vmousecancel\" event in this instance.\n\nThis plugin extends jQuery's built-in method. If jQuery Mobile is not loaded, calling the `.vmousecancel()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\nThe virtual mouse events can also be configured:\n\n- `$.vmouse.moveDistanceThreshold` (default: 10px) â More than this, then it is a scroll event. The vmousecancel event is called and the TouchMove event is cancelled.\n- `$.vmouse.clickDistanceThreshold` (default: 10px) â If a vclick event was already captured and is in the block list, then vclicks less than this distance are ignored.\n- `$.vmouse.resetTimerDuration` (default: 1500ms) â More time than this, then it is not a touch event. Scroll, TouchMove and TouchEnd events use this. The block list is cleared.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/vmousecancel](https://api.jquerymobile.com/vmousecancel)"
- name: vmousedown event
  id: vmousedown
  summary: 'Description: Virtualized mousedown event handler'
  description: "# vmousedown\n\n## vmousedown eventversion added: 1.0\n\n**Description:** Virtualized mousedown event handler.\n\n- #### jQuery( \".selector\" ).on( \"vmousedown\", function( event ) { ... } )\n\nWe provide a set of \"virtual\" mouse events that attempt to abstract away mouse and touch events. This allows the developer to register listeners for the basic mouse events, such as mousedown, mousemove, mouseup, and click, and the plugin will take care of registering the correct listeners behind the scenes to invoke the listener at the fastest possible time for that device. In touch environments, the plugin retains the order of event firing that is seen in traditional mouse environments, so for example, vmousedown is always dispatched before vmouseup, and vmouseup before vclick, etc. The virtual mouse events also normalize how coordinate information is extracted from the event, so in touch based environments, coordinates are available from the pageX, pageY, screenX, screenY, clientX, and clientY properties, directly on the event object.\n\nThe jQuery Mobile `vmousedown` event handler simulates the \"onmousedown\" event handler on mobile devices.\n\nThis plugin extends jQuery's built-in method. If jQuery Mobile is not loaded, calling the `.vmousedown()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n``` javascript\n$( function () {\n  $( document ).on( \"vmousedown\", \"p\", function() {\n  $( this ).append( \"<span style='color:#108040;'> vmousedown fired...</span>\" );\n});\n```\n\nThe virtual mouse events can also be configured:\n\n- `$.vmouse.moveDistanceThreshold` (default: 10px) â More than this, then it is a scroll event. The vmousecancel event is called and the TouchMove event is cancelled.\n- `$.vmouse.clickDistanceThreshold` (default: 10px) â If a vclick event was already captured and is in the block list, then vclicks less than this distance are ignored.\n- `$.vmouse.resetTimerDuration` (default: 1500ms) â More time than this, then it is not a touch event. Scroll, TouchMove and TouchEnd events use this. The block list is cleared.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/vmousedown](https://api.jquerymobile.com/vmousedown)"
- name: vmousemove event
  id: vmousemove
  summary: 'Description: Virtualized mousemove event handler'
  description: "# vmousemove\n\n## vmousemove eventversion added: 1.0\n\n**Description:** Virtualized mousemove event handler.\n\n- #### jQuery( \".selector\" ).on( \"vmousemove\", function( event ) { ... } )\n\nWe provide a set of \"virtual\" mouse events that attempt to abstract away mouse and touch events. This allows the developer to register listeners for the basic mouse events, such as mousedown, mousemove, mouseup, and click, and the plugin will take care of registering the correct listeners behind the scenes to invoke the listener at the fastest possible time for that device. In touch environments, the plugin retains the order of event firing that is seen in traditional mouse environments, so for example, vmouseup is always dispatched before vmousedown, and vmousedown before vclick, etc. The virtual mouse events also normalize how coordinate information is extracted from the event, so in touch based environments, coordinates are available from the pageX, pageY, screenX, screenY, clientX, and clientY properties, directly on the event object.\n\nThe jQuery Mobile `vmousemove` event handler simulates the \"onmousemove\" event handler on mobile devices.\n\nThis plugin extends jQuery's built-in method. If jQuery Mobile is not loaded, calling the `.vmousemove()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n``` javascript\n$( function () {\n  $( document ).on ( \"vmousemove\", \"#target\", function(event) {\n  var msg = \"Handler for .vmousemove() called at \";\n  msg += event.pageX + \", \" + event.pageY;\n  $( \"#log\" ).append( \" <div>\" + msg + \"</div>\" );\n});\n```\n\nThe virtual mouse events can also be configured:\n\n- `$.vmouse.moveDistanceThreshold` (default: 10px) â More than this, then it is a scroll event. The vmousecancel event is called and the TouchMove event is cancelled.\n- `$.vmouse.clickDistanceThreshold` (default: 10px) â If a vclick event was already captured and is in the block list, then vclicks less than this distance are ignored.\n- `$.vmouse.resetTimerDuration` (default: 1500ms) â More time than this, then it is not a touch event. Scroll, TouchMove and TouchEnd events use this. The block list is cleared.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/vmousemove](https://api.jquerymobile.com/vmousemove)"
- name: vmouseout event
  id: vmouseout
  summary: 'Description: Virtualized mouseout event handler'
  description: "# vmouseout\n\n## vmouseout eventversion added: 1.0\n\n**Description:** Virtualized mouseout event handler.\n\n- #### jQuery( \".selector\" ).on( \"vmouseout\", function( event ) { ... } )\n\nWe provide a set of \"virtual\" mouse events that attempt to abstract away mouse and touch events. This allows the developer to register listeners for the basic mouse events, such as mousedown, mousemove, mouseup, and click, and the plugin will take care of registering the correct listeners behind the scenes to invoke the listener at the fastest possible time for that device. In touch environments, the plugin retains the order of event firing that is seen in traditional mouse environments, so for example, vmouseup is always dispatched before vmousedown, and vmousedown before vclick, etc. The virtual mouse events also normalize how coordinate information is extracted from the event, so in touch based environments, coordinates are available from the pageX, pageY, screenX, screenY, clientX, and clientY properties, directly on the event object.\n\nThe jQuery Mobile `vmouseout` event handler simulates the \"onmouseout\" event handler on mobile devices.\n\nThis plugin extends jQuery's built-in method. If jQuery Mobile is not loaded, calling the `.vmouseout()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n``` javascript\n$( document ).on( \"vmouseout\", \"p\", function() {\n  $( this ).append ( \"<span style='color:#108040;'> vmouseout fired...</span>\" );\n});\n```\n\nThe virtual mouse events can also be configured:\n\n- `$.vmouse.moveDistanceThreshold` (default: 10px) â More than this, then it is a scroll event. The vmousecancel event is called and the TouchMove event is cancelled.\n- `$.vmouse.clickDistanceThreshold` (default: 10px) â If a vclick event was already captured and is in the block list, then vclicks less than this distance are ignored.\n- `$.vmouse.resetTimerDuration` (default: 1500ms) â More time than this, then it is not a touch event. Scroll, TouchMove and TouchEnd events use this. The block list is cleared.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/vmouseout](https://api.jquerymobile.com/vmouseout)"
- name: vmouseover event
  id: vmouseover
  summary: 'Description: Virtualized mouseover event handler'
  description: "# vmouseover\n\n## vmouseover eventversion added: 1.0\n\n**Description:** Virtualized mouseover event handler.\n\n- #### jQuery( \".selector\" ).on( \"vmouseover\", function( event ) { ... } )\n\nWe provide a set of \"virtual\" mouse events that attempt to abstract away mouse and touch events. This allows the developer to register listeners for the basic mouse events, such as mousedown, mousemove, mouseup, and click, and the plugin will take care of registering the correct listeners behind the scenes to invoke the listener at the fastest possible time for that device. In touch environments, the plugin retains the order of event firing that is seen in traditional mouse environments, so for example, vmouseup is always dispatched before vmousedown, and vmousedown before vclick, etc. The virtual mouse events also normalize how coordinate information is extracted from the event, so in touch based environments, coordinates are available from the pageX, pageY, screenX, screenY, clientX, and clientY properties, directly on the event object.\n\nThe jQuery Mobile `\"vmouseover\"` event handler simulates the \"onmouseover\" event handler on mobile devices.\n\nThis plugin extends jQuery's built-in method. If jQuery Mobile is not loaded, calling the `.vmouseover()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n``` javascript\n$( document ).on( \"vmouseover\", \"p\", function() {\n  $( this ).append( \"<span style='color:#108040;'> vmouseover fired...</span>\" );\n});\n```\n\nThe virtual mouse events can also be configured:\n\n- `$.vmouse.moveDistanceThreshold` (default: 10px) â More than this, then it is a scroll event. The vmousecancel event is called and the TouchMove event is cancelled.\n- `$.vmouse.clickDistanceThreshold` (default: 10px) â If a vclick event was already captured and is in the block list, then vclicks less than this distance are ignored.\n- `$.vmouse.resetTimerDuration` (default: 1500ms) â More time than this, then it is not a touch event. Scroll, TouchMove and TouchEnd events use this. The block list is cleared.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/vmouseover](https://api.jquerymobile.com/vmouseover)"
- name: vmouseup event
  id: vmouseup
  summary: 'Description: Virtualized mouseup event handler'
  description: "# vmouseup\n\n## vmouseup eventversion added: 1.0\n\n**Description:** Virtualized mouseup event handler.\n\n- #### jQuery( \".selector\" ).on( \"vmouseup\", function( event ) { ... } )\n\nWe provide a set of \"virtual\" mouse events that attempt to abstract away mouse and touch events. This allows the developer to register listeners for the basic mouse events, such as mousedown, mousemove, mouseup, and click, and the plugin will take care of registering the correct listeners behind the scenes to invoke the listener at the fastest possible time for that device. In touch environments, the plugin retains the order of event firing that is seen in traditional mouse environments, so for example, vmouseup is always dispatched before vmousedown, and vmousedown before vclick, etc. The virtual mouse events also normalize how coordinate information is extracted from the event, so in touch based environments, coordinates are available from the pageX, pageY, screenX, screenY, clientX, and clientY properties, directly on the event object.\n\nThe jQuery Mobile `\"vmouseup\"` event handler simulates the \"onmouseup\" event handler on mobile devices.\n\nThis plugin extends jQuery's built-in method. If jQuery Mobile is not loaded, calling the `.vmouseup()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n``` javascript\n$( document ).on( \"vmouseup\", \"p\", function() {\n  $( this ).append( \"<span style='color:#108040;'> vmouseup fired...</span>\" );\n});\n```\n\nThe virtual mouse events can also be configured:\n\n- `$.vmouse.moveDistanceThreshold` (default: 10px) â More than this, then it is a scroll event. The vmousecancel event is called and the TouchMove event is cancelled.\n- `$.vmouse.clickDistanceThreshold` (default: 10px) â If a vclick event was already captured and is in the block list, then vclicks less than this distance are ignored.\n- `$.vmouse.resetTimerDuration` (default: 1500ms) â More time than this, then it is not a touch event. Scroll, TouchMove and TouchEnd events use this. The block list is cleared.\n\nÂ© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jquerymobile.com/vmouseup](https://api.jquerymobile.com/vmouseup)"
