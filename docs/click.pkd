---
name: click
slug: click
text_format: markdown
generator: src:devdocs
version: null
copyright: |-
  © Copyright 2014 Pallets.
  Licensed under the BSD 3-Clause License.
  We are not supported nor endorsed by Pallets.
  https://click.palletsprojects.com/en/8.1.x/index.html
homepage: https://click.palletsprojects.com/
generator_command: doc src:devdocs use click

---
- name: Abort
  id: api/index#click.Abort
  summary: An internal signalling exception that signals Click to abort
  description: |-
    `exception click.Abort`

    An internal signalling exception that signals Click to abort.
- name: Adding Parameters
  id: quickstart/index#adding-parameters
  summary: null
  description: |-
    ## Adding Parameters

    To add parameters, use the [`option()`](../api/index#click.option "click.option") and [`argument()`](../api/index#click.argument "click.argument") decorators:

    ``` python
    @click.command()
    @click.option('--count', default=1, help='number of greetings')
    @click.argument('name')
    def hello(count, name):
        for x in range(count):
            click.echo(f"Hello {name}!")
    ```

    What it looks like:

    ``` shell
    $ python hello.py --help
    Usage: hello.py [OPTIONS] NAME

    Options:
      --count INTEGER  number of greetings
      --help           Show this message and exit.
    ```
- name: Adding Support for a Shell
  id: shell-completion/index#adding-support-for-a-shell
  summary: Support can be added for shells that do not come built in
  description: "## Adding Support for a Shell\n\nSupport can be added for shells that do not come built in. Be sure to check PyPI to see if there’s already a package that adds support for your shell. This topic is very technical, you’ll want to look at Click’s source to study the built-in implementations.\n\nShell support is provided by subclasses of [`ShellComplete`](../api/index#click.shell_completion.ShellComplete \"click.shell_completion.ShellComplete\") registered with [`add_completion_class()`](../api/index#click.shell_completion.add_completion_class \"click.shell_completion.add_completion_class\"). When Click is invoked in completion mode, it calls [`source()`](../api/index#click.shell_completion.ShellComplete.source \"click.shell_completion.ShellComplete.source\") to output the completion script, or [`complete()`](../api/index#click.shell_completion.ShellComplete.complete \"click.shell_completion.ShellComplete.complete\") to output completions. The base class provides default implementations that require implementing some smaller parts.\n\nFirst, you’ll need to figure out how your shell’s completion system works and write a script to integrate it with Click. It must invoke your program with the environment variable `_{FOO_BAR}_COMPLETE` set to `{shell}_complete` and pass the complete args and incomplete value. How it passes those values, and the format of the completion response from Click is up to you.\n\nIn your subclass, set [`source_template`](../api/index#click.shell_completion.ShellComplete.source_template \"click.shell_completion.ShellComplete.source_template\") to the completion script. The default implementation will perform `%` formatting with the following variables:\n\n- `complete_func` - A safe name for the completion function defined in the script.\n- `complete_var` - The environment variable name for passing the `{shell}_complete` instruction.\n- `foo_bar` - The name of the executable being completed.\n\nThe example code is for a made up shell “My Shell” or “mysh” for short.\n\n``` python\nfrom click.shell_completion import add_completion_class\nfrom click.shell_completion import ShellComplete\n\n_mysh_source = \"\"\"\\\n%(complete_func)s {\n    response=$(%(complete_var)s=mysh_complete %(foo_bar)s)\n    # parse response and set completions somehow\n}\ncall-on-complete %(foo_bar)s %(complete_func)s\n\"\"\"\n\n@add_completion_class\nclass MyshComplete(ShellComplete):\n    name = \"mysh\"\n    source_template = _mysh_source\n```\n\nNext, implement [`get_completion_args()`](../api/index#click.shell_completion.ShellComplete.get_completion_args \"click.shell_completion.ShellComplete.get_completion_args\"). This must get, parse, and return the complete args and incomplete value from the completion script. For example, for the Bash implementation the `COMP_WORDS` env var contains the command line args as a string, and the `COMP_CWORD` env var contains the index of the incomplete arg. The method must return a `(args, incomplete)` tuple.\n\n``` python\nimport os\nfrom click.parser import split_arg_string\n\nclass MyshComplete(ShellComplete):\n    ...\n\n    def get_completion_args(self):\n        args = split_arg_string(os.environ[\"COMP_WORDS\"])\n\n        if os.environ[\"COMP_PARTIAL\"] == \"1\":\n            incomplete = args.pop()\n            return args, incomplete\n\n        return args, \"\"\n```\n\nFinally, implement [`format_completion()`](../api/index#click.shell_completion.ShellComplete.format_completion \"click.shell_completion.ShellComplete.format_completion\"). This is called to format each [`CompletionItem`](../api/index#click.shell_completion.CompletionItem \"click.shell_completion.CompletionItem\") into a string. For example, the Bash implementation returns `f\"{item.type},{item.value}` (it doesn’t support help strings), and the Zsh implementation returns each part separated by a newline, replacing empty help with a `_` placeholder. This format is entirely up to what you parse with your completion script.\n\nThe `type` value is usually `plain`, but it can be another value that the completion script can switch on. For example, `file` or `dir` can tell the shell to handle path completion, since the shell is better at that than Click.\n\n``` python\nclass MyshComplete(ShellComplete):\n    ...\n\n    def format_completion(self, item):\n        return f\"{item.type}\\t{item.value}\"\n```\n\nWith those three things implemented, the new shell support is ready. In case those weren’t sufficient, there are more parts that can be overridden, but that probably isn’t necessary.\n\nThe activation instructions will again depend on how your shell works. Use the following to generate the completion script, then load it into the shell somehow.\n\n``` text\n_FOO_BAR_COMPLETE=mysh_source foo-bar\n```\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/shell-completion/](https://click.palletsprojects.com/en/8.1.x/shell-completion/)"
- name: ANSI Colors
  id: utils/index#ansi-colors
  summary: New in version 2.0
  description: |-
    ## ANSI Colors

    Changelog

    New in version 2.0.

    The [`echo()`](../api/index#click.echo "click.echo") function supports ANSI colors and styles. On Windows this uses [colorama](https://pypi.org/project/colorama/).

    Primarily this means that:

    - Click’s [`echo()`](../api/index#click.echo "click.echo") function will automatically strip ANSI color codes if the stream is not connected to a terminal.
    - the [`echo()`](../api/index#click.echo "click.echo") function will transparently connect to the terminal on Windows and translate ANSI codes to terminal API calls. This means that colors will work on Windows the same way they do on other operating systems.

    On Windows, Click uses colorama without calling `colorama.init()`. You can still call that in your code, but it’s not required for Click.

    For styling a string, the [`style()`](../api/index#click.style "click.style") function can be used:

    ``` python
    import click

    click.echo(click.style('Hello World!', fg='green'))
    click.echo(click.style('Some more text', bg='blue', fg='white'))
    click.echo(click.style('ATTENTION', blink=True, bold=True))
    ```

    The combination of [`echo()`](../api/index#click.echo "click.echo") and [`style()`](../api/index#click.style "click.style") is also available in a single function called [`secho()`](../api/index#click.secho "click.secho"):

    ``` python
    click.secho('Hello World!', fg='green')
    click.secho('Some more text', bg='blue', fg='white')
    click.secho('ATTENTION', blink=True, bold=True)
    ```
- name: Argument
  id: api/index#click.Argument
  summary: Attaches an argument to the command
  description: |-
    `click.argument(*param_decls, cls=None, **attrs)`

    Attaches an argument to the command. All positional arguments are passed as parameter declarations to [`Argument`](#click.Argument "click.Argument"); all keyword arguments are forwarded unchanged (except `cls`). This is equivalent to creating an [`Argument`](#click.Argument "click.Argument") instance manually and attaching it to the [`Command.params`](#click.Command.params "click.Command.params") list.

    For the default argument class, refer to [`Argument`](#click.Argument "click.Argument") and [`Parameter`](#click.Parameter "click.Parameter") for descriptions of parameters.

    Parameters:

    - **cls** ([Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")*\[*[Argument](#click.Argument "click.core.Argument")*\]* *\|* *None*) – the argument class to instantiate. This defaults to [`Argument`](#click.Argument "click.Argument").
    - **param_decls** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Passed as positional arguments to the constructor of `cls`.
    - **attrs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – Passed as keyword arguments to the constructor of `cls`.

    Return type:

    [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[*FC*\], *FC*\]
- name: argument()
  id: api/index#click.argument
  summary: Attaches an argument to the command
  description: |-
    `click.argument(*param_decls, cls=None, **attrs)`

    Attaches an argument to the command. All positional arguments are passed as parameter declarations to [`Argument`](#click.Argument "click.Argument"); all keyword arguments are forwarded unchanged (except `cls`). This is equivalent to creating an [`Argument`](#click.Argument "click.Argument") instance manually and attaching it to the [`Command.params`](#click.Command.params "click.Command.params") list.

    For the default argument class, refer to [`Argument`](#click.Argument "click.Argument") and [`Parameter`](#click.Parameter "click.Parameter") for descriptions of parameters.

    Parameters:

    - **cls** ([Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")*\[*[Argument](#click.Argument "click.core.Argument")*\]* *\|* *None*) – the argument class to instantiate. This defaults to [`Argument`](#click.Argument "click.Argument").
    - **param_decls** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Passed as positional arguments to the constructor of `cls`.
    - **attrs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – Passed as keyword arguments to the constructor of `cls`.

    Return type:

    [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[*FC*\], *FC*\]
- name: BadArgumentUsage
  id: api/index#click.BadArgumentUsage
  summary: Raised if an argument is generally supplied but the use of the argument was incorrect
  description: |-
    `exception click.BadArgumentUsage(message, ctx=None)`

    Raised if an argument is generally supplied but the use of the argument was incorrect. This is for instance raised if the number of values for an argument is not correct.

    Changelog

    New in version 6.0.

    Parameters:

    - **message** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –
    - **ctx** ([Context](#click.Context "click.Context") *\|* *None*) –

    Return type:

    None

    ## Formatting
- name: BadOptionUsage
  id: api/index#click.BadOptionUsage
  summary: Raised if an option is generally supplied but the use of the option was incorrect
  description: |-
    `exception click.BadOptionUsage(option_name, message, ctx=None)`

    Raised if an option is generally supplied but the use of the option was incorrect. This is for instance raised if the number of arguments for an option is not correct.

    Changelog

    New in version 4.0.

    Parameters:

    - **option_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the name of the option being used incorrectly.
    - **message** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –
    - **ctx** ([Context](#click.Context "click.Context") *\|* *None*) –

    Return type:

    None
- name: BadParameter
  id: api/index#click.BadParameter
  summary: An exception that formats out a standardized error message for a bad parameter
  description: |-
    `exception click.BadParameter(message, ctx=None, param=None, param_hint=None)`

    An exception that formats out a standardized error message for a bad parameter. This is useful when thrown from a callback or type as Click will attach contextual information to it (for instance, which parameter it is).

    Changelog

    New in version 2.0.

    Parameters:

    - **param** ([Parameter](#click.Parameter "click.Parameter") *\|* *None*) – the parameter object that caused this error. This can be left out, and Click will attach this info itself if possible.
    - **param_hint** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – a string that shows up as parameter name. This can be used as alternative to `param` in cases where custom validation should happen. If it is a string it’s used as such, if it’s a list then each item is quoted and separated.
    - **message** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –
    - **ctx** ([Context](#click.Context "click.Context") *\|* *None*) –

    Return type:

    None
- name: BaseCommand
  id: api/index#click.BaseCommand
  summary: The base command implements the minimal API contract of commands
  description: |-
    `class click.BaseCommand(name, context_settings=None)`

    The base command implements the minimal API contract of commands. Most code will never use this as it does not implement a lot of useful functionality but it can act as the direct subclass of alternative parsing methods that do not depend on the Click parser.

    For instance, this can be used to bridge Click and other systems like argparse or docopt.

    Because base commands do not implement a lot of the API that other parts of Click take for granted, they are not supported for all operations. For instance, they cannot be used with the decorators usually and they have no built-in callback system.

    Changelog

    Changed in version 2.0: Added the `context_settings` parameter.

    Parameters:

    - **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – the name of the command to use unless a group overrides it.
    - **context_settings** ([MutableMapping](https://docs.python.org/3/library/typing.html#typing.MutableMapping "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]* *\|* *None*) – an optional dictionary with defaults that are passed to the context object.
- name: BaseCommand.allow_extra_args
  id: api/index#click.BaseCommand.allow_extra_args
  summary: the default for the Context.allow_extra_args flag
  description: |-
    `allow_extra_args = False`

    the default for the [`Context.allow_extra_args`](#click.Context.allow_extra_args "click.Context.allow_extra_args") flag.
- name: BaseCommand.allow_interspersed_args
  id: api/index#click.BaseCommand.allow_interspersed_args
  summary: the default for the Context.allow_interspersed_args flag
  description: |-
    `allow_interspersed_args = True`

    the default for the [`Context.allow_interspersed_args`](#click.Context.allow_interspersed_args "click.Context.allow_interspersed_args") flag.
- name: BaseCommand.context_class
  id: api/index#click.BaseCommand.context_class
  summary: null
  description: |-
    `context_class`

    alias of [`Context`](#click.Context "click.core.Context")
- name: BaseCommand.context_settings
  id: api/index#click.BaseCommand.context_settings
  summary: an optional dictionary with defaults passed to the context
  description: |-
    `context_settings: MutableMapping[str, Any]`

    an optional dictionary with defaults passed to the context.
- name: BaseCommand.ignore_unknown_options
  id: api/index#click.BaseCommand.ignore_unknown_options
  summary: the default for the Context.ignore_unknown_options flag
  description: |-
    `ignore_unknown_options = False`

    the default for the [`Context.ignore_unknown_options`](#click.Context.ignore_unknown_options "click.Context.ignore_unknown_options") flag.
- name: BaseCommand.invoke()
  id: api/index#click.BaseCommand.invoke
  summary: Given a context, this invokes the command
  description: |-
    `invoke(ctx)`

    Given a context, this invokes the command. The default implementation is raising a not implemented error.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")
- name: BaseCommand.main()
  id: api/index#click.BaseCommand.main
  summary: This is the way to invoke a script with all the bells and whistles as a command line application
  description: |-
    `main(args: Sequence[str] | None = None, prog_name: str | None = None, complete_var: str | None = None, standalone_mode: te.Literal[True] = True, **extra: Any) → te.NoReturn`

    main(*args:[Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\]\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *prog_name:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *complete_var:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *standalone_mode:[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")=True*, *\*\*extra:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")

    This is the way to invoke a script with all the bells and whistles as a command line application. This will always terminate the application after a call. If this is not wanted, `SystemExit` needs to be caught.

    This method is also available by directly calling the instance of a [`Command`](#click.Command "click.Command").

    Parameters:

    - **args** – the arguments that should be used for parsing. If not provided, `sys.argv[1:]` is used.
    - **prog_name** – the program name that should be used. By default the program name is constructed by taking the file name from `sys.argv[0]`.
    - **complete_var** – the environment variable that controls the bash completion support. The default is `"_<prog_name>_COMPLETE"` with prog_name in uppercase.
    - **standalone_mode** – the default behavior is to invoke the script in standalone mode. Click will then handle exceptions and convert them into error messages and the function will never return but shut down the interpreter. If this is set to `False` they will be propagated to the caller and the return value of this function is the return value of [`invoke()`](#click.BaseCommand.invoke "click.BaseCommand.invoke").
    - **windows_expand_args** – Expand glob patterns, user dir, and env vars in command line args on Windows.
    - **extra** – extra keyword arguments are forwarded to the context constructor. See [`Context`](#click.Context "click.Context") for more information.

    Changelog

    Changed in version 8.0.1: Added the `windows_expand_args` parameter to allow disabling command line arg expansion on Windows.

    Changed in version 8.0: When taking arguments from `sys.argv` on Windows, glob patterns, user dir, and env vars are expanded.

    Changed in version 3.0: Added the `standalone_mode` parameter.
- name: BaseCommand.make_context()
  id: api/index#click.BaseCommand.make_context
  summary: This function when given an info name and arguments will kick off the parsing and create a new Context
  description: |-
    `make_context(info_name, args, parent=None, **extra)`

    This function when given an info name and arguments will kick off the parsing and create a new [`Context`](#click.Context "click.Context"). It does not invoke the actual command callback though.

    To quickly customize the context class used without overriding this method, set the [`context_class`](#click.BaseCommand.context_class "click.BaseCommand.context_class") attribute.

    Parameters:

    - **info_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – the info name for this invocation. Generally this is the most descriptive name for the script or command. For the toplevel script it’s usually the name of the script, for commands below it’s the name of the command.
    - **args** ([List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]*) – the arguments to parse as list of strings.
    - **parent** ([Context](#click.Context "click.core.Context") *\|* *None*) – the parent context if available.
    - **extra** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – extra keyword arguments forwarded to the context constructor.

    Return type:

    [Context](#click.Context "click.core.Context")

    Changelog

    Changed in version 8.0: Added the [`context_class`](#click.BaseCommand.context_class "click.BaseCommand.context_class") attribute.
- name: BaseCommand.name
  id: api/index#click.BaseCommand.name
  summary: the name the command thinks it has
  description: |-
    `name`

    the name the command thinks it has. Upon registering a command on a [`Group`](#click.Group "click.Group") the group will default the command name with this information. You should instead use the [`Context`](#click.Context "click.Context")'s [`info_name`](#click.Context.info_name "click.Context.info_name") attribute.
- name: BaseCommand.parse_args()
  id: api/index#click.BaseCommand.parse_args
  summary: Given a context and a list of arguments this creates the parser and parses the arguments, then modifies the context as necessary
  description: |-
    `parse_args(ctx, args)`

    Given a context and a list of arguments this creates the parser and parses the arguments, then modifies the context as necessary. This is automatically invoked by [`make_context()`](#click.BaseCommand.make_context "click.BaseCommand.make_context").

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **args** ([List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]*) –

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\]
- name: BaseCommand.shell_complete()
  id: api/index#click.BaseCommand.shell_complete
  summary: Return a list of completions for the incomplete value
  description: |-
    `shell_complete(ctx, incomplete)`

    Return a list of completions for the incomplete value. Looks at the names of chained multi-commands.

    Any command could be part of a chained multi-command, so sibling commands are valid at any point during command completion. Other command classes will return more completions.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) – Invocation context for this command.
    - **incomplete** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Value being completed. May be empty.

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[CompletionItem](#click.shell_completion.CompletionItem "click.shell_completion.CompletionItem")\]

    Changelog

    New in version 8.0.
- name: BaseCommand.to_info_dict()
  id: api/index#click.BaseCommand.to_info_dict
  summary: Gather information that could be useful for a tool generating user-facing documentation
  description: |-
    `to_info_dict(ctx)`

    Gather information that could be useful for a tool generating user-facing documentation. This traverses the entire structure below this command.

    Use [`click.Context.to_info_dict()`](#click.Context.to_info_dict "click.Context.to_info_dict") to traverse the entire CLI structure.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) – A [`Context`](#click.Context "click.Context") representing this command.

    Return type:

    [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)"), [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]

    Changelog

    New in version 8.0.
- name: Basic Arguments
  id: arguments/index#basic-arguments
  summary: The most basic option is a simple string argument of one value
  description: |-
    ## Basic Arguments

    The most basic option is a simple string argument of one value. If no type is provided, the type of the default value is used, and if no default value is provided, the type is assumed to be [`STRING`](../api/index#click.STRING "click.STRING").

    Example:

    ``` python
    @click.command()
    @click.argument('filename')
    def touch(filename):
        """Print FILENAME."""
        click.echo(filename)
    ```

    And what it looks like:

    ``` shell
    $ touch foo.txt
    foo.txt
    ```
- name: Basic Concepts
  id: complex/index#basic-concepts
  summary: 'To understand how this works, you need to understand two concepts: contexts and the calling convention'
  description: |-
    ## Basic Concepts

    To understand how this works, you need to understand two concepts: contexts and the calling convention.

    ### Contexts

    Whenever a Click command is executed, a [`Context`](../api/index#click.Context "click.Context") object is created which holds state for this particular invocation. It remembers parsed parameters, what command created it, which resources need to be cleaned up at the end of the function, and so forth. It can also optionally hold an application-defined object.

    Context objects build a linked list until they hit the top one. Each context is linked to a parent context. This allows a command to work below another command and store its own information there without having to be afraid of altering up the state of the parent command.

    Because the parent data is available, however, it is possible to navigate to it if needed.

    Most of the time, you do not see the context object, but when writing more complex applications it comes in handy. This brings us to the next point.

    ### Calling Convention

    When a Click command callback is executed, it’s passed all the non-hidden parameters as keyword arguments. Notably absent is the context. However, a callback can opt into being passed to the context object by marking itself with [`pass_context()`](../api/index#click.pass_context "click.pass_context").

    So how do you invoke a command callback if you don’t know if it should receive the context or not? The answer is that the context itself provides a helper function ([`Context.invoke()`](../api/index#click.Context.invoke "click.Context.invoke")) which can do this for you. It accepts the callback as first argument and then invokes the function correctly.
- name: Basic Concepts - Creating a Command
  id: quickstart/index#basic-concepts-creating-a-command
  summary: Click is based on declaring commands through decorators
  description: |-
    ## Basic Concepts - Creating a Command

    Click is based on declaring commands through decorators. Internally, there is a non-decorator interface for advanced use cases, but it’s discouraged for high-level usage.

    A function becomes a Click command line tool by decorating it through [`click.command()`](../api/index#click.command "click.command"). At its simplest, just decorating a function with this decorator will make it into a callable script:

    ``` python
    import click

    @click.command()
    def hello():
        click.echo('Hello World!')
    ```

    What’s happening is that the decorator converts the function into a [`Command`](../api/index#click.Command "click.Command") which then can be invoked:

    ``` python
    if __name__ == '__main__':
        hello()
    ```

    And what it looks like:

    ``` shell
    $ python hello.py
    Hello World!
    ```

    And the corresponding help page:

    ``` shell
    $ python hello.py --help
    Usage: hello.py [OPTIONS]

    Options:
      --help  Show this message and exit.
    ```
- name: Basic Testing
  id: testing/index#basic-testing
  summary: The basic functionality for testing Click applications is the CliRunner which can invoke commands as command line scripts
  description: |-
    ## Basic Testing

    The basic functionality for testing Click applications is the [`CliRunner`](../api/index#click.testing.CliRunner "click.testing.CliRunner") which can invoke commands as command line scripts. The [`CliRunner.invoke()`](../api/index#click.testing.CliRunner.invoke "click.testing.CliRunner.invoke") method runs the command line script in isolation and captures the output as both bytes and binary data.

    The return value is a [`Result`](../api/index#click.testing.Result "click.testing.Result") object, which has the captured output data, exit code, and optional exception attached:

    hello.py

    ``` python
    import click

    @click.command()
    @click.argument('name')
    def hello(name):
       click.echo(f'Hello {name}!')
    ```

    test_hello.py

    ``` python
    from click.testing import CliRunner
    from hello import hello

    def test_hello_world():
      runner = CliRunner()
      result = runner.invoke(hello, ['Peter'])
      assert result.exit_code == 0
      assert result.output == 'Hello Peter!\n'
    ```

    For subcommand testing, a subcommand name must be specified in the `args` parameter of [`CliRunner.invoke()`](../api/index#click.testing.CliRunner.invoke "click.testing.CliRunner.invoke") method:

    sync.py

    ``` python
    import click

    @click.group()
    @click.option('--debug/--no-debug', default=False)
    def cli(debug):
       click.echo(f"Debug mode is {'on' if debug else 'off'}")

    @cli.command()
    def sync():
       click.echo('Syncing')
    ```

    test_sync.py

    ``` python
    from click.testing import CliRunner
    from sync import cli

    def test_sync():
      runner = CliRunner()
      result = runner.invoke(cli, ['--debug', 'sync'])
      assert result.exit_code == 0
      assert 'Debug mode is on' in result.output
      assert 'Syncing' in result.output
    ```

    Additional keyword arguments passed to `.invoke()` will be used to construct the initial Context object. For example, if you want to run your tests against a fixed terminal width you can use the following:

    ``` python
    runner = CliRunner()
    result = runner.invoke(cli, ['--debug', 'sync'], terminal_width=60)
    ```
- name: Basic Value Options
  id: options/index#basic-value-options
  summary: The most basic option is a value option
  description: |-
    ## Basic Value Options

    The most basic option is a value option. These options accept one argument which is a value. If no type is provided, the type of the default value is used. If no default value is provided, the type is assumed to be [`STRING`](../api/index#click.STRING "click.STRING"). Unless a name is explicitly specified, the name of the parameter is the first long option defined; otherwise the first short one is used. By default, options are not required, however to make an option required, simply pass in `required=True` as an argument to the decorator.

    ``` python
    @click.command()
    @click.option('--n', default=1)
    def dots(n):
        click.echo('.' * n)
    ```

    ``` python
    # How to make an option required
    @click.command()
    @click.option('--n', required=True, type=int)
    def dots(n):
        click.echo('.' * n)
    ```

    ``` python
    # How to use a Python reserved word such as `from` as a parameter
    @click.command()
    @click.option('--from', '-f', 'from_')
    @click.option('--to', '-t')
    def reserved_param_name(from_, to):
        click.echo(f"from {from_} to {to}")
    ```

    And on the command line:

    ``` shell
    $ dots --n=2
    ..
    ```

    In this case the option is of type [`INT`](../api/index#click.INT "click.INT") because the default value is an integer.

    To show the default values when showing command help, use `show_default=True`

    ``` python
    @click.command()
    @click.option('--n', default=1, show_default=True)
    def dots(n):
        click.echo('.' * n)
    ```

    ``` shell
    $ dots --help
    Usage: dots [OPTIONS]

    Options:
      --n INTEGER  [default: 1]
      --help       Show this message and exit.
    ```

    For single option boolean flags, the default remains hidden if the default value is False.

    ``` python
    @click.command()
    @click.option('--n', default=1, show_default=True)
    @click.option("--gr", is_flag=True, show_default=True, default=False, help="Greet the world.")
    @click.option("--br", is_flag=True, show_default=True, default=True, help="Add a thematic break")
    def dots(n, gr, br):
        if gr:
            click.echo('Hello world!')
        click.echo('.' * n)
        if br:
            click.echo('-' * n)
    ```

    ``` shell
    $ dots --help
    Usage: dots [OPTIONS]

    Options:
      --n INTEGER  [default: 1]
      --gr         Greet the world.
      --br         Add a thematic break  [default: True]
      --help       Show this message and exit.
    ```
- name: BOOL
  id: api/index#click.BOOL
  summary: null
  description: |-
    `click.BOOL = BOOL`

    Parameters:

    - **value** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) –
    - **param** ([Parameter](#click.Parameter "click.Parameter") *\|* *None*) –
    - **ctx** ([Context](#click.Context "click.Context") *\|* *None*) –

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")
- name: Boolean Flags
  id: options/index#boolean-flags
  summary: Boolean flags are options that can be enabled or disabled
  description: |-
    ## Boolean Flags

    Boolean flags are options that can be enabled or disabled. This can be accomplished by defining two flags in one go separated by a slash (`/`) for enabling or disabling the option. (If a slash is in an option string, Click automatically knows that it’s a boolean flag and will pass `is_flag=True` implicitly.) Click always wants you to provide an enable and disable flag so that you can change the default later.

    Example:

    ``` python
    import sys

    @click.command()
    @click.option('--shout/--no-shout', default=False)
    def info(shout):
        rv = sys.platform
        if shout:
            rv = rv.upper() + '!!!!111'
        click.echo(rv)
    ```

    And on the command line:

    ``` shell
    $ info --shout
    LINUX!!!!111
    $ info --no-shout
    linux
    $ info
    linux
    ```

    If you really don’t want an off-switch, you can just define one and manually inform Click that something is a flag:

    ``` python
    import sys

    @click.command()
    @click.option('--shout', is_flag=True)
    def info(shout):
        rv = sys.platform
        if shout:
            rv = rv.upper() + '!!!!111'
        click.echo(rv)
    ```

    And on the command line:

    ``` shell
    $ info --shout
    LINUX!!!!111
    $ info
    linux
    ```

    Note that if a slash is contained in your option already (for instance, if you use Windows-style parameters where `/` is the prefix character), you can alternatively split the parameters through `;` instead:

    ``` python
    @click.command()
    @click.option('/debug;/no-debug')
    def log(debug):
        click.echo(f"debug={debug}")

    if __name__ == '__main__':
        log()
    ```

    Changelog

    Changed in version 6.0.

    If you want to define an alias for the second option only, then you will need to use leading whitespace to disambiguate the format string:

    Example:

    ``` python
    import sys

    @click.command()
    @click.option('--shout/--no-shout', ' /-S', default=False)
    def info(shout):
        rv = sys.platform
        if shout:
            rv = rv.upper() + '!!!!111'
        click.echo(rv)
    ```

    ``` shell
    $ info --help
    Usage: info [OPTIONS]

    Options:
      --shout / -S, --no-shout
      --help                    Show this message and exit.
    ```
- name: BSD-3-Clause License
  id: license/index
  summary: © Copyright 2014 Pallets
  description: "# BSD-3-Clause License\n\n``` text\nCopyright 2014 Pallets\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1.  Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n2.  Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n3.  Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/license/](https://click.palletsprojects.com/en/8.1.x/license/)"
- name: Building a Git Clone
  id: complex/index#building-a-git-clone
  summary: In this example, we want to build a command line tool that resembles a version control system
  description: |-
    ## Building a Git Clone

    In this example, we want to build a command line tool that resembles a version control system. Systems like Git usually provide one over-arching command that already accepts some parameters and configuration, and then have extra subcommands that do other things.

    ### The Root Command

    At the top level, we need a group that can hold all our commands. In this case, we use the basic [`click.group()`](../api/index#click.group "click.group") which allows us to register other Click commands below it.

    For this command, we also want to accept some parameters that configure the state of our tool:

    ``` python
    import os
    import click


    class Repo(object):
        def __init__(self, home=None, debug=False):
            self.home = os.path.abspath(home or '.')
            self.debug = debug


    @click.group()
    @click.option('--repo-home', envvar='REPO_HOME', default='.repo')
    @click.option('--debug/--no-debug', default=False,
                  envvar='REPO_DEBUG')
    @click.pass_context
    def cli(ctx, repo_home, debug):
        ctx.obj = Repo(repo_home, debug)
    ```

    Let’s understand what this does. We create a group command which can have subcommands. When it is invoked, it will create an instance of a `Repo` class. This holds the state for our command line tool. In this case, it just remembers some parameters, but at this point it could also start loading configuration files and so on.

    This state object is then remembered by the context as [`obj`](../api/index#click.Context.obj "click.Context.obj"). This is a special attribute where commands are supposed to remember what they need to pass on to their children.

    In order for this to work, we need to mark our function with [`pass_context()`](../api/index#click.pass_context "click.pass_context"), because otherwise, the context object would be entirely hidden from us.

    ### The First Child Command

    Let’s add our first child command to it, the clone command:

    ``` python
    @cli.command()
    @click.argument('src')
    @click.argument('dest', required=False)
    def clone(src, dest):
        pass
    ```

    So now we have a clone command, but how do we get access to the repo? As you can imagine, one way is to use the [`pass_context()`](../api/index#click.pass_context "click.pass_context") function which again will make our callback also get the context passed on which we memorized the repo. However, there is a second version of this decorator called [`pass_obj()`](../api/index#click.pass_obj "click.pass_obj") which will just pass the stored object, (in our case the repo):

    ``` python
    @cli.command()
    @click.argument('src')
    @click.argument('dest', required=False)
    @click.pass_obj
    def clone(repo, src, dest):
        pass
    ```

    ### Interleaved Commands

    While not relevant for the particular program we want to build, there is also quite good support for interleaving systems. Imagine for instance that there was a super cool plugin for our version control system that needed a lot of configuration and wanted to store its own configuration as [`obj`](../api/index#click.Context.obj "click.Context.obj"). If we would then attach another command below that, we would all of a sudden get the plugin configuration instead of our repo object.

    One obvious way to remedy this is to store a reference to the repo in the plugin, but then a command needs to be aware that it’s attached below such a plugin.

    There is a much better system that can be built by taking advantage of the linked nature of contexts. We know that the plugin context is linked to the context that created our repo. Because of that, we can start a search for the last level where the object stored by the context was a repo.

    Built-in support for this is provided by the [`make_pass_decorator()`](../api/index#click.make_pass_decorator "click.make_pass_decorator") factory, which will create decorators for us that find objects (it internally calls into [`Context.find_object()`](../api/index#click.Context.find_object "click.Context.find_object")). In our case, we know that we want to find the closest `Repo` object, so let’s make a decorator for this:

    ``` python
    pass_repo = click.make_pass_decorator(Repo)
    ```

    If we now use `pass_repo` instead of `pass_obj`, we will always get a repo instead of something else:

    ``` python
    @cli.command()
    @click.argument('src')
    @click.argument('dest', required=False)
    @pass_repo
    def clone(repo, src, dest):
        pass
    ```

    ### Ensuring Object Creation

    The above example only works if there was an outer command that created a `Repo` object and stored it in the context. For some more advanced use cases, this might become a problem. The default behavior of [`make_pass_decorator()`](../api/index#click.make_pass_decorator "click.make_pass_decorator") is to call [`Context.find_object()`](../api/index#click.Context.find_object "click.Context.find_object") which will find the object. If it can’t find the object, [`make_pass_decorator()`](../api/index#click.make_pass_decorator "click.make_pass_decorator") will raise an error. The alternative behavior is to use [`Context.ensure_object()`](../api/index#click.Context.ensure_object "click.Context.ensure_object") which will find the object, and if it cannot find it, will create one and store it in the innermost context. This behavior can also be enabled for [`make_pass_decorator()`](../api/index#click.make_pass_decorator "click.make_pass_decorator") by passing `ensure=True`:

    ``` python
    pass_repo = click.make_pass_decorator(Repo, ensure=True)
    ```

    In this case, the innermost context gets an object created if it is missing. This might replace objects being placed there earlier. In this case, the command stays executable, even if the outer command does not run. For this to work, the object type needs to have a constructor that accepts no arguments.

    As such it runs standalone:

    ``` python
    @click.command()
    @pass_repo
    def cp(repo):
        click.echo(isinstance(repo, Repo))
    ```

    As you can see:

    ``` shell
    $ cp
    True
    ```
- name: Callback Evaluation Order
  id: advanced/index#callback-evaluation-order
  summary: Click works a bit differently than some other command line parsers in that it attempts to reconcile the order of arguments as defined by the programmer with the order of arguments as defined by the user before invoking any callbacks
  description: |-
    ## Callback Evaluation Order

    Click works a bit differently than some other command line parsers in that it attempts to reconcile the order of arguments as defined by the programmer with the order of arguments as defined by the user before invoking any callbacks.

    This is an important concept to understand when porting complex patterns to Click from optparse or other systems. A parameter callback invocation in optparse happens as part of the parsing step, whereas a callback invocation in Click happens after the parsing.

    The main difference is that in optparse, callbacks are invoked with the raw value as it happens, whereas a callback in Click is invoked after the value has been fully converted.

    Generally, the order of invocation is driven by the order in which the user provides the arguments to the script; if there is an option called `--foo` and an option called `--bar` and the user calls it as `--bar --foo`, then the callback for `bar` will fire before the one for `foo`.

    There are three exceptions to this rule which are important to know:

    Eagerness:

    An option can be set to be “eager”. All eager parameters are evaluated before all non-eager parameters, but again in the order as they were provided on the command line by the user.

    This is important for parameters that execute and exit like `--help` and `--version`. Both are eager parameters, but whatever parameter comes first on the command line will win and exit the program.

    Repeated parameters:

    If an option or argument is split up on the command line into multiple places because it is repeated – for instance, `--exclude foo --include baz --exclude bar` – the callback will fire based on the position of the first option. In this case, the callback will fire for `exclude` and it will be passed both options (`foo` and `bar`), then the callback for `include` will fire with `baz` only.

    Note that even if a parameter does not allow multiple versions, Click will still accept the position of the first, but it will ignore every value except the last. The reason for this is to allow composability through shell aliases that set defaults.

    Missing parameters:

    If a parameter is not defined on the command line, the callback will still fire. This is different from how it works in optparse where undefined values do not fire the callback. Missing parameters fire their callbacks at the very end which makes it possible for them to default to values from a parameter that came before.

    Most of the time you do not need to be concerned about any of this, but it is important to know how it works for some advanced cases.
- name: Callback Invocation
  id: commands/index#callback-invocation
  summary: For a regular command, the callback is executed whenever the command runs
  description: |-
    ## Callback Invocation

    For a regular command, the callback is executed whenever the command runs. If the script is the only command, it will always fire (unless a parameter callback prevents it. This for instance happens if someone passes `--help` to the script).

    For groups and multi commands, the situation looks different. In this case, the callback fires whenever a subcommand fires (unless this behavior is changed). What this means in practice is that an outer command runs when an inner command runs:

    ``` python
    @click.group()
    @click.option('--debug/--no-debug', default=False)
    def cli(debug):
        click.echo(f"Debug mode is {'on' if debug else 'off'}")

    @cli.command()  # @cli, not @click!
    def sync():
        click.echo('Syncing')
    ```

    Here is what this looks like:

    ``` shell
    $ tool.py
    Usage: tool.py [OPTIONS] COMMAND [ARGS]...

    Options:
      --debug / --no-debug
      --help                Show this message and exit.

    Commands:
      sync

    $ tool.py --debug sync
    Debug mode is on
    Syncing
    ```
- name: Callbacks and Eager Options
  id: options/index#callbacks-and-eager-options
  summary: Sometimes, you want a parameter to completely change the execution flow
  description: |-
    ## Callbacks and Eager Options

    Sometimes, you want a parameter to completely change the execution flow. For instance, this is the case when you want to have a `--version` parameter that prints out the version and then exits the application.

    Note: an actual implementation of a `--version` parameter that is reusable is available in Click as [`click.version_option()`](../api/index#click.version_option "click.version_option"). The code here is merely an example of how to implement such a flag.

    In such cases, you need two concepts: eager parameters and a callback. An eager parameter is a parameter that is handled before others, and a callback is what executes after the parameter is handled. The eagerness is necessary so that an earlier required parameter does not produce an error message. For instance, if `--version` was not eager and a parameter `--foo` was required and defined before, you would need to specify it for `--version` to work. For more information, see [Callback Evaluation Order](../advanced/index#callback-evaluation-order).

    A callback is a function that is invoked with three parameters: the current [`Context`](../api/index#click.Context "click.Context"), the current [`Parameter`](../api/index#click.Parameter "click.Parameter"), and the value. The context provides some useful features such as quitting the application and gives access to other already processed parameters.

    Here an example for a `--version` flag:

    ``` python
    def print_version(ctx, param, value):
        if not value or ctx.resilient_parsing:
            return
        click.echo('Version 1.0')
        ctx.exit()

    @click.command()
    @click.option('--version', is_flag=True, callback=print_version,
                  expose_value=False, is_eager=True)
    def hello():
        click.echo('Hello World!')
    ```

    The `expose_value` parameter prevents the pretty pointless `version` parameter from being passed to the callback. If that was not specified, a boolean would be passed to the `hello` script. The `resilient_parsing` flag is applied to the context if Click wants to parse the command line without any destructive behavior that would change the execution flow. In this case, because we would exit the program, we instead do nothing.

    What it looks like:

    ``` shell
    $ hello
    Hello World!
    $ hello --version
    Version 1.0
    ```

    Callback Signature Changes

    In Click 2.0 the signature for callbacks changed. For more information about these changes see [Upgrading to 2.0](../upgrading/index#upgrade-to-2-0).
- name: Callbacks for Validation
  id: options/index#callbacks-for-validation
  summary: Changed in version 2.0
  description: |-
    ## Callbacks for Validation

    Changelog

    Changed in version 2.0.

    If you want to apply custom validation logic, you can do this in the parameter callbacks. These callbacks can both modify values as well as raise errors if the validation does not work. The callback runs after type conversion. It is called for all sources, including prompts.

    In Click 1.0, you can only raise the [`UsageError`](../api/index#click.UsageError "click.UsageError") but starting with Click 2.0, you can also raise the [`BadParameter`](../api/index#click.BadParameter "click.BadParameter") error, which has the added advantage that it will automatically format the error message to also contain the parameter name.

    ``` python
    def validate_rolls(ctx, param, value):
        if isinstance(value, tuple):
            return value

        try:
            rolls, _, dice = value.partition("d")
            return int(dice), int(rolls)
        except ValueError:
            raise click.BadParameter("format must be 'NdM'")

    @click.command()
    @click.option(
        "--rolls", type=click.UNPROCESSED, callback=validate_rolls,
        default="1d6", prompt=True,
    )
    def roll(rolls):
        sides, times = rolls
        click.echo(f"Rolling a {sides}-sided dice {times} time(s)")
    ```

    ``` shell
    $ roll --rolls=42
    Usage: roll [OPTIONS]
    Try 'roll --help' for help.

    Error: Invalid value for '--rolls': format must be 'NdM'

    $ roll --rolls=2d12
    Rolling a 12-sided dice 2 time(s)

    $ roll
    Rolls [1d6]: 42
    Error: format must be 'NdM'
    Rolls [1d6]: 2d12
    Rolling a 12-sided dice 2 time(s)
    ```
- name: Choice
  id: api/index#click.Choice
  summary: The choice type allows a value to be checked against a fixed set of supported values
  description: |-
    `class click.Choice(choices, case_sensitive=True)`

    The choice type allows a value to be checked against a fixed set of supported values. All of these values have to be strings.

    You should only pass a list or tuple of choices. Other iterables (like generators) may lead to surprising results.

    The resulting value will always be one of the originally passed choices regardless of `case_sensitive` or any `ctx.token_normalize_func` being specified.

    See [Choice Options](../options/index#choice-opts) for an example.

    Parameters:

    - **case_sensitive** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Set to false to make choices case insensitive. Defaults to true.
    - **choices** ([Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]*) –
- name: Choice Options
  id: options/index#choice-options
  summary: Sometimes, you want to have a parameter be a choice of a list of values
  description: |-
    ## Choice Options

    Sometimes, you want to have a parameter be a choice of a list of values. In that case you can use [`Choice`](../api/index#click.Choice "click.Choice") type. It can be instantiated with a list of valid values. The originally passed choice will be returned, not the str passed on the command line. Token normalization functions and `case_sensitive=False` can cause the two to be different but still match.

    Example:

    ``` python
    @click.command()
    @click.option('--hash-type',
                  type=click.Choice(['MD5', 'SHA1'], case_sensitive=False))
    def digest(hash_type):
        click.echo(hash_type)
    ```

    What it looks like:

    ``` shell
    $ digest --hash-type=MD5
    MD5

    $ digest --hash-type=md5
    MD5

    $ digest --hash-type=foo
    Usage: digest [OPTIONS]
    Try 'digest --help' for help.

    Error: Invalid value for '--hash-type': 'foo' is not one of 'MD5', 'SHA1'.

    $ digest --help
    Usage: digest [OPTIONS]

    Options:
      --hash-type [MD5|SHA1]
      --help                  Show this message and exit.
    ```

    Only pass the choices as list or tuple. Other iterables (like generators) may lead to unexpected results.

    Choices work with options that have `multiple=True`. If a `default` value is given with `multiple=True`, it should be a list or tuple of valid choices.

    Choices should be unique after considering the effects of `case_sensitive` and any specified token normalization function.

    Changelog

    Changed in version 7.1: The resulting value from an option will always be one of the originally passed choices regardless of `case_sensitive`.
- name: clear()
  id: api/index#click.clear
  summary: Clears the terminal screen
  description: |-
    `click.clear()`

    Clears the terminal screen. This will have the effect of clearing the whole visible space of the terminal and moving the cursor to the top left. This does not do anything if not connected to a terminal.

    Changelog

    New in version 2.0.

    Return type:

    None
- name: click-contrib
  id: contrib/index
  summary: As the number of users of Click grows, more and more major feature requests are made
  description: "# click-contrib\n\nAs the number of users of Click grows, more and more major feature requests are made. To users it may seem reasonable to include those features with Click; however, many of them are experimental or aren’t practical to support generically. Maintainers have to choose what is reasonable to maintain in Click core.\n\nThe [click-contrib](https://github.com/click-contrib/) GitHub organization exists as a place to collect third-party packages that extend Click’s features. It is also meant to ease the effort of searching for such extensions.\n\nPlease note that the quality and stability of those packages may be different than Click itself. While published under a common organization, they are still separate from Click and the Pallets maintainers.\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/contrib/](https://click.palletsprojects.com/en/8.1.x/contrib/)"
- name: ClickException
  id: api/index#click.ClickException
  summary: An exception that Click can handle and show to the user
  description: |-
    `exception click.ClickException(message)`

    An exception that Click can handle and show to the user.

    Parameters:

    **message** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –

    Return type:

    None
- name: Command
  id: api/index#click.Command
  summary: Creates a new Command and uses the decorated function as callback
  description: |-
    `click.command(name: Callable[[...], Any]) → Command`

    click.command(*name:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")*, *cls:[Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")\[CmdType\]*, *\*\*attrs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],CmdType\]

    click.command(*name:[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *\**, *cls:[Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")\[CmdType\]*, *\*\*attrs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],CmdType\]

    click.command(*name:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *cls:[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *\*\*attrs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],[Command](#click.Command "click.core.Command")\]

    Creates a new [`Command`](#click.Command "click.Command") and uses the decorated function as callback. This will also automatically attach all decorated [`option()`](#click.option "click.option")s and [`argument()`](#click.argument "click.argument")s as parameters to the command.

    The name of the command defaults to the name of the function with underscores replaced by dashes. If you want to change that, you can pass the intended name as the first argument.

    All keyword arguments are forwarded to the underlying command class. For the `params` argument, any decorated params are appended to the end of the list.

    Once decorated the function turns into a [`Command`](#click.Command "click.Command") instance that can be invoked as a command line utility or be attached to a command [`Group`](#click.Group "click.Group").

    Parameters:

    - **name** – the name of the command. This defaults to the function name with underscores replaced by dashes.
    - **cls** – the command class to instantiate. This defaults to [`Command`](#click.Command "click.Command").

    Changed in version 8.1: This decorator can be applied without parentheses.

    Changed in version 8.1: The `params` argument can be used. Decorated params are appended to the end of the list.
- name: Command Aliases
  id: advanced/index#command-aliases
  summary: Many tools support aliases for commands (see Command alias example)
  description: |-
    ## Command Aliases

    Many tools support aliases for commands (see [Command alias example](https://github.com/pallets/click/tree/main/examples/aliases)). For instance, you can configure `git` to accept `git ci` as alias for `git commit`. Other tools also support auto-discovery for aliases by automatically shortening them.

    Click does not support this out of the box, but it’s very easy to customize the [`Group`](../api/index#click.Group "click.Group") or any other [`MultiCommand`](../api/index#click.MultiCommand "click.MultiCommand") to provide this functionality.

    As explained in [Custom Multi Commands](../commands/index#custom-multi-commands), a multi command can provide two methods: [`list_commands()`](../api/index#click.MultiCommand.list_commands "click.MultiCommand.list_commands") and [`get_command()`](../api/index#click.MultiCommand.get_command "click.MultiCommand.get_command"). In this particular case, you only need to override the latter as you generally don’t want to enumerate the aliases on the help page in order to avoid confusion.

    This following example implements a subclass of [`Group`](../api/index#click.Group "click.Group") that accepts a prefix for a command. If there were a command called `push`, it would accept `pus` as an alias (so long as it was unique):

    ``` python
    class AliasedGroup(click.Group):
        def get_command(self, ctx, cmd_name):
            rv = click.Group.get_command(self, ctx, cmd_name)
            if rv is not None:
                return rv
            matches = [x for x in self.list_commands(ctx)
                       if x.startswith(cmd_name)]
            if not matches:
                return None
            elif len(matches) == 1:
                return click.Group.get_command(self, ctx, matches[0])
            ctx.fail(f"Too many matches: {', '.join(sorted(matches))}")

        def resolve_command(self, ctx, args):
            # always return the full command name
            _, cmd, args = super().resolve_command(ctx, args)
            return cmd.name, cmd, args
    ```

    And it can then be used like this:

    ``` python
    @click.command(cls=AliasedGroup)
    def cli():
        pass

    @cli.command()
    def push():
        pass

    @cli.command()
    def pop():
        pass
    ```
- name: Command Epilog Help
  id: documentation/index#command-epilog-help
  summary: The help epilog is like the help string but it’s printed at the end of the help page after everything else
  description: |-
    ## Command Epilog Help

    The help epilog is like the help string but it’s printed at the end of the help page after everything else. Useful for showing example command usages or referencing additional help resources.

    ``` python
    @click.command(epilog='Check out our docs at https://click.palletsprojects.com/ for more details')
    def init():
        """Initializes the repository."""
    ```

    And what it looks like:

    ``` shell
    $ repo.py --help
    Usage: repo.py [OPTIONS]

      Initializes the repository.

    Options:
      --help  Show this message and exit.

      Check out our docs at https://click.palletsprojects.com/ for more details
    ```
- name: Command Return Values
  id: commands/index#command-return-values
  summary: New in version 3.0
  description: "## Command Return Values\n\nChangelog\n\nNew in version 3.0.\n\nOne of the new introductions in Click 3.0 is the full support for return values from command callbacks. This enables a whole range of features that were previously hard to implement.\n\nIn essence any command callback can now return a value. This return value is bubbled to certain receivers. One usecase for this has already been show in the example of [Multi Command Chaining](#multi-command-chaining) where it has been demonstrated that chained multi commands can have callbacks that process all return values.\n\nWhen working with command return values in Click, this is what you need to know:\n\n- The return value of a command callback is generally returned from the [`BaseCommand.invoke()`](../api/index#click.BaseCommand.invoke \"click.BaseCommand.invoke\") method. The exception to this rule has to do with [`Group`](../api/index#click.Group \"click.Group\")s:\n\n  - In a group the return value is generally the return value of the subcommand invoked. The only exception to this rule is that the return value is the return value of the group callback if it’s invoked without arguments and `invoke_without_command` is enabled.\n  - If a group is set up for chaining then the return value is a list of all subcommands’ results.\n  - Return values of groups can be processed through a [`MultiCommand.result_callback`](../api/index#click.MultiCommand.result_callback \"click.MultiCommand.result_callback\"). This is invoked with the list of all return values in chain mode, or the single return value in case of non chained commands.\n\n- The return value is bubbled through from the [`Context.invoke()`](../api/index#click.Context.invoke \"click.Context.invoke\") and [`Context.forward()`](../api/index#click.Context.forward \"click.Context.forward\") methods. This is useful in situations where you internally want to call into another command.\n\n- Click does not have any hard requirements for the return values and does not use them itself. This allows return values to be used for custom decorators or workflows (like in the multi command chaining example).\n\n- When a Click script is invoked as command line application (through [`BaseCommand.main()`](../api/index#click.BaseCommand.main \"click.BaseCommand.main\")) the return value is ignored unless the `standalone_mode` is disabled in which case it’s bubbled through.\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/commands/](https://click.palletsprojects.com/en/8.1.x/commands/)"
- name: Command Short Help
  id: documentation/index#command-short-help
  summary: For commands, a short help snippet is generated
  description: |-
    ## Command Short Help

    For commands, a short help snippet is generated. By default, it’s the first sentence of the help message of the command, unless it’s too long. This can also be overridden:

    ``` python
    @click.group()
    def cli():
        """A simple command line tool."""

    @cli.command('init', short_help='init the repo')
    def init():
        """Initializes the repository."""

    @cli.command('delete', short_help='delete the repo')
    def delete():
        """Deletes the repository."""
    ```

    And what it looks like:

    ``` shell
    $ repo.py
    Usage: repo.py [OPTIONS] COMMAND [ARGS]...

      A simple command line tool.

    Options:
      --help  Show this message and exit.

    Commands:
      delete  delete the repo
      init    init the repo
    ```
- name: command()
  id: api/index#click.command
  summary: Creates a new Command and uses the decorated function as callback
  description: |-
    `click.command(name: Callable[[...], Any]) → Command`

    click.command(*name:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")*, *cls:[Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")\[CmdType\]*, *\*\*attrs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],CmdType\]

    click.command(*name:[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *\**, *cls:[Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")\[CmdType\]*, *\*\*attrs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],CmdType\]

    click.command(*name:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *cls:[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *\*\*attrs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],[Command](#click.Command "click.core.Command")\]

    Creates a new [`Command`](#click.Command "click.Command") and uses the decorated function as callback. This will also automatically attach all decorated [`option()`](#click.option "click.option")s and [`argument()`](#click.argument "click.argument")s as parameters to the command.

    The name of the command defaults to the name of the function with underscores replaced by dashes. If you want to change that, you can pass the intended name as the first argument.

    All keyword arguments are forwarded to the underlying command class. For the `params` argument, any decorated params are appended to the end of the list.

    Once decorated the function turns into a [`Command`](#click.Command "click.Command") instance that can be invoked as a command line utility or be attached to a command [`Group`](#click.Group "click.Group").

    Parameters:

    - **name** – the name of the command. This defaults to the function name with underscores replaced by dashes.
    - **cls** – the command class to instantiate. This defaults to [`Command`](#click.Command "click.Command").

    Changed in version 8.1: This decorator can be applied without parentheses.

    Changed in version 8.1: The `params` argument can be used. Decorated params are appended to the end of the list.
- name: Command.callback
  id: api/index#click.Command.callback
  summary: the callback to execute when the command fires
  description: |-
    `callback`

    the callback to execute when the command fires. This might be `None` in which case nothing happens.
- name: Command.collect_usage_pieces()
  id: api/index#click.Command.collect_usage_pieces
  summary: Returns all the pieces that go into the usage line and returns it as a list of strings
  description: |-
    `collect_usage_pieces(ctx)`

    Returns all the pieces that go into the usage line and returns it as a list of strings.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\]
- name: Command.format_epilog()
  id: api/index#click.Command.format_epilog
  summary: Writes the epilog into the formatter if it exists
  description: |-
    `format_epilog(ctx, formatter)`

    Writes the epilog into the formatter if it exists.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **formatter** ([HelpFormatter](#click.HelpFormatter "click.formatting.HelpFormatter")) –

    Return type:

    None
- name: Command.format_help()
  id: api/index#click.Command.format_help
  summary: Writes the help into the formatter if it exists
  description: |-
    `format_help(ctx, formatter)`

    Writes the help into the formatter if it exists.

    This is a low-level method called by [`get_help()`](#click.Command.get_help "click.Command.get_help").

    This calls the following methods:

    - [`format_usage()`](#click.Command.format_usage "click.Command.format_usage")
    - [`format_help_text()`](#click.Command.format_help_text "click.Command.format_help_text")
    - [`format_options()`](#click.Command.format_options "click.Command.format_options")
    - [`format_epilog()`](#click.Command.format_epilog "click.Command.format_epilog")

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **formatter** ([HelpFormatter](#click.HelpFormatter "click.formatting.HelpFormatter")) –

    Return type:

    None
- name: Command.format_help_text()
  id: api/index#click.Command.format_help_text
  summary: Writes the help text to the formatter if it exists
  description: |-
    `format_help_text(ctx, formatter)`

    Writes the help text to the formatter if it exists.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **formatter** ([HelpFormatter](#click.HelpFormatter "click.formatting.HelpFormatter")) –

    Return type:

    None
- name: Command.format_options()
  id: api/index#click.Command.format_options
  summary: Writes all the options into the formatter if they exist
  description: |-
    `format_options(ctx, formatter)`

    Writes all the options into the formatter if they exist.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **formatter** ([HelpFormatter](#click.HelpFormatter "click.formatting.HelpFormatter")) –

    Return type:

    None
- name: Command.format_usage()
  id: api/index#click.Command.format_usage
  summary: Writes the usage line into the formatter
  description: |-
    `format_usage(ctx, formatter)`

    Writes the usage line into the formatter.

    This is a low-level method called by [`get_usage()`](#click.Command.get_usage "click.Command.get_usage").

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **formatter** ([HelpFormatter](#click.HelpFormatter "click.formatting.HelpFormatter")) –

    Return type:

    None
- name: Command.get_help()
  id: api/index#click.Command.get_help
  summary: Formats the help into a string and returns it
  description: |-
    `get_help(ctx)`

    Formats the help into a string and returns it.

    Calls [`format_help()`](#click.Command.format_help "click.Command.format_help") internally.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: Command.get_help_option()
  id: api/index#click.Command.get_help_option
  summary: Returns the help option object
  description: |-
    `get_help_option(ctx)`

    Returns the help option object.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [Option](#click.Option "click.core.Option") \| None
- name: Command.get_help_option_names()
  id: api/index#click.Command.get_help_option_names
  summary: Returns the names for the help option
  description: |-
    `get_help_option_names(ctx)`

    Returns the names for the help option.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\]
- name: Command.get_short_help_str()
  id: api/index#click.Command.get_short_help_str
  summary: Gets short help for the command or makes it by shortening the long help string
  description: |-
    `get_short_help_str(limit=45)`

    Gets short help for the command or makes it by shortening the long help string.

    Parameters:

    **limit** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")) –

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: Command.get_usage()
  id: api/index#click.Command.get_usage
  summary: Formats the usage line into a string and returns it
  description: |-
    `get_usage(ctx)`

    Formats the usage line into a string and returns it.

    Calls [`format_usage()`](#click.Command.format_usage "click.Command.format_usage") internally.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: Command.invoke()
  id: api/index#click.Command.invoke
  summary: Given a context, this invokes the attached callback (if it exists) in the right way
  description: |-
    `invoke(ctx)`

    Given a context, this invokes the attached callback (if it exists) in the right way.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")
- name: Command.make_parser()
  id: api/index#click.Command.make_parser
  summary: Creates the underlying option parser for this command
  description: |-
    `make_parser(ctx)`

    Creates the underlying option parser for this command.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [OptionParser](#click.OptionParser "click.parser.OptionParser")
- name: Command.params
  id: api/index#click.Command.params
  summary: the list of parameters for this command in the order they should show up in the help page and execute
  description: |-
    `params: List[Parameter]`

    the list of parameters for this command in the order they should show up in the help page and execute. Eager parameters will automatically be handled before non eager ones.
- name: Command.parse_args()
  id: api/index#click.Command.parse_args
  summary: Given a context and a list of arguments this creates the parser and parses the arguments, then modifies the context as necessary
  description: |-
    `parse_args(ctx, args)`

    Given a context and a list of arguments this creates the parser and parses the arguments, then modifies the context as necessary. This is automatically invoked by `make_context()`.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **args** ([List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]*) –

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\]
- name: Command.shell_complete()
  id: api/index#click.Command.shell_complete
  summary: Return a list of completions for the incomplete value
  description: |-
    `shell_complete(ctx, incomplete)`

    Return a list of completions for the incomplete value. Looks at the names of options and chained multi-commands.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) – Invocation context for this command.
    - **incomplete** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Value being completed. May be empty.

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[CompletionItem](#click.shell_completion.CompletionItem "click.shell_completion.CompletionItem")\]

    Changelog

    New in version 8.0.
- name: Command.to_info_dict()
  id: api/index#click.Command.to_info_dict
  summary: Gather information that could be useful for a tool generating user-facing documentation
  description: |-
    `to_info_dict(ctx)`

    Gather information that could be useful for a tool generating user-facing documentation. This traverses the entire structure below this command.

    Use [`click.Context.to_info_dict()`](#click.Context.to_info_dict "click.Context.to_info_dict") to traverse the entire CLI structure.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) – A [`Context`](#click.Context "click.Context") representing this command.

    Return type:

    [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)"), [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]

    Changelog

    New in version 8.0.
- name: CommandCollection
  id: api/index#click.CommandCollection
  summary: A command collection is a multi command that merges multiple multi commands together into one
  description: |-
    `class click.CommandCollection(name=None, sources=None, **attrs)`

    A command collection is a multi command that merges multiple multi commands together into one. This is a straightforward implementation that accepts a list of different multi commands as sources and provides all the commands for each of them.

    See [`MultiCommand`](#click.MultiCommand "click.MultiCommand") and [`Command`](#click.Command "click.Command") for the description of `name` and `attrs`.

    Parameters:

    - **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) –
    - **sources** ([List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")*\[*[MultiCommand](#click.MultiCommand "click.core.MultiCommand")*\]* *\|* *None*) –
    - **attrs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) –
- name: CommandCollection.add_source()
  id: api/index#click.CommandCollection.add_source
  summary: Adds a new multi command to the chain dispatcher
  description: |-
    `add_source(multi_cmd)`

    Adds a new multi command to the chain dispatcher.

    Parameters:

    **multi_cmd** ([MultiCommand](#click.MultiCommand "click.core.MultiCommand")) –

    Return type:

    None
- name: CommandCollection.get_command()
  id: api/index#click.CommandCollection.get_command
  summary: Given a context and a command name, this returns a Command object if it exists or returns None
  description: |-
    `get_command(ctx, cmd_name)`

    Given a context and a command name, this returns a [`Command`](#click.Command "click.Command") object if it exists or returns `None`.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **cmd_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –

    Return type:

    [Command](#click.Command "click.core.Command") \| None
- name: CommandCollection.list_commands()
  id: api/index#click.CommandCollection.list_commands
  summary: Returns a list of subcommand names in the order they should appear
  description: |-
    `list_commands(ctx)`

    Returns a list of subcommand names in the order they should appear.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\]

    ## Parameters
- name: CommandCollection.sources
  id: api/index#click.CommandCollection.sources
  summary: The list of registered multi commands
  description: |-
    `sources: List[MultiCommand]`

    The list of registered multi commands.
- name: confirm()
  id: api/index#click.confirm
  summary: Prompts for confirmation (yes/no question)
  description: |-
    `click.confirm(text, default=False, abort=False, prompt_suffix=': ', show_default=True, err=False)`

    Prompts for confirmation (yes/no question).

    If the user aborts the input by sending a interrupt signal this function will catch it and raise a [`Abort`](#click.Abort "click.Abort") exception.

    Parameters:

    - **text** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the question to ask.
    - **default** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – The default value to use when no input is given. If `None`, repeat until input is given.
    - **abort** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if this is set to `True` a negative answer aborts the exception by raising [`Abort`](#click.Abort "click.Abort").
    - **prompt_suffix** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – a suffix that should be added to the prompt.
    - **show_default** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – shows or hides the default value in the prompt.
    - **err** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if set to true the file defaults to `stderr` instead of `stdout`, the same as with echo.

    Return type:

    [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")

    Changelog

    Changed in version 8.0: Repeat until input is given if `default` is `None`.

    New in version 4.0: Added the `err` parameter.
- name: Confirmation Prompts
  id: prompts/index#confirmation-prompts
  summary: To ask if a user wants to continue with an action, the confirm() function comes in handy
  description: "## Confirmation Prompts\n\nTo ask if a user wants to continue with an action, the [`confirm()`](../api/index#click.confirm \"click.confirm\") function comes in handy. By default, it returns the result of the prompt as a boolean value:\n\n``` python\nif click.confirm('Do you want to continue?'):\n    click.echo('Well done!')\n```\n\nThere is also the option to make the function automatically abort the execution of the program if it does not return `True`:\n\n``` python\nclick.confirm('Do you want to continue?', abort=True)\n```\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/prompts/](https://click.palletsprojects.com/en/8.1.x/prompts/)"
- name: confirmation_option()
  id: api/index#click.confirmation_option
  summary: Add a --yes option which shows a prompt before continuing if not passed
  description: |-
    `click.confirmation_option(*param_decls, **kwargs)`

    Add a `--yes` option which shows a prompt before continuing if not passed. If the prompt is declined, the program will exit.

    Parameters:

    - **param_decls** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – One or more option names. Defaults to the single value `"--yes"`.
    - **kwargs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – Extra arguments are passed to [`option()`](#click.option "click.option").

    Return type:

    [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[*FC*\], *FC*\]
- name: Context
  id: api/index#click.Context
  summary: The context is a special internal object that holds state relevant for the script execution at every single level
  description: |-
    `class click.Context(command, parent=None, info_name=None, obj=None, auto_envvar_prefix=None, default_map=None, terminal_width=None, max_content_width=None, resilient_parsing=False, allow_extra_args=None, allow_interspersed_args=None, ignore_unknown_options=None, help_option_names=None, token_normalize_func=None, color=None, show_default=None)`

    The context is a special internal object that holds state relevant for the script execution at every single level. It’s normally invisible to commands unless they opt-in to getting access to it.

    The context is useful as it can pass internal objects around and can control special execution features such as reading data from environment variables.

    A context can be used as context manager in which case it will call [`close()`](#click.Context.close "click.Context.close") on teardown.

    Parameters:

    - **command** ([Command](#click.Command "click.Command")) – the command class for this context.
    - **parent** ([Context](#click.Context "click.Context") *\|* *None*) – the parent context.
    - **info_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – the info name for this invocation. Generally this is the most descriptive name for the script or command. For the toplevel script it is usually the name of the script, for commands below it it’s the name of the script.
    - **obj** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)") *\|* *None*) – an arbitrary object of user data.
    - **auto_envvar_prefix** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – the prefix to use for automatic environment variables. If this is `None` then reading from environment variables is disabled. This does not affect manually set environment variables which are always read.
    - **default_map** ([MutableMapping](https://docs.python.org/3/library/typing.html#typing.MutableMapping "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]* *\|* *None*) – a dictionary (like object) with default values for parameters.
    - **terminal_width** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)") *\|* *None*) – the width of the terminal. The default is inherit from parent context. If no context defines the terminal width then auto detection will be applied.
    - **max_content_width** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)") *\|* *None*) – the maximum width for content rendered by Click (this currently only affects help pages). This defaults to 80 characters if not overridden. In other words: even if the terminal is larger than that, Click will not format things wider than 80 characters by default. In addition to that, formatters might add some safety mapping on the right.
    - **resilient_parsing** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if this flag is enabled then Click will parse without any interactivity or callback invocation. Default values will also be ignored. This is useful for implementing things such as completion support.
    - **allow_extra_args** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – if this is set to `True` then extra arguments at the end will not raise an error and will be kept on the context. The default is to inherit from the command.
    - **allow_interspersed_args** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – if this is set to `False` then options and arguments cannot be mixed. The default is to inherit from the command.
    - **ignore_unknown_options** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – instructs click to ignore options it does not know and keeps them for later processing.
    - **help_option_names** ([List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]* *\|* *None*) – optionally a list of strings that define how the default help parameter is named. The default is `['--help']`.
    - **token_normalize_func** ([Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")*\[\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\],* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]* *\|* *None*) – an optional function that is used to normalize tokens (options, choices, etc.). This for instance can be used to implement case insensitive behavior.
    - **color** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – controls if the terminal supports ANSI colors or not. The default is autodetection. This is only needed if ANSI codes are used in texts that Click prints which is by default not the case. This for instance would affect help output.
    - **show_default** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – Show the default value for commands. If this value is not set, it defaults to the value from the parent context. `Command.show_default` overrides this default for the specific command.

    Changed in version 8.1: The `show_default` parameter is overridden by `Command.show_default`, instead of the other way around.

    Changelog

    Changed in version 8.0: The `show_default` parameter defaults to the value from the parent context.

    Changed in version 7.1: Added the `show_default` parameter.

    Changed in version 4.0: Added the `color`, `ignore_unknown_options`, and `max_content_width` parameters.

    Changed in version 3.0: Added the `allow_extra_args` and `allow_interspersed_args` parameters.

    Changed in version 2.0: Added the `resilient_parsing`, `help_option_names`, and `token_normalize_func` parameters.
- name: Context Defaults
  id: commands/index#context-defaults
  summary: New in version 2.0
  description: |-
    ## Context Defaults

    Changelog

    New in version 2.0.

    Starting with Click 2.0 you can override defaults for contexts not just when calling your script, but also in the decorator that declares a command. For instance given the previous example which defines a custom `default_map` this can also be accomplished in the decorator now.

    This example does the same as the previous example:

    ``` python
    import click

    CONTEXT_SETTINGS = dict(
        default_map={'runserver': {'port': 5000}}
    )

    @click.group(context_settings=CONTEXT_SETTINGS)
    def cli():
        pass

    @cli.command()
    @click.option('--port', default=8000)
    def runserver(port):
        click.echo(f"Serving on http://127.0.0.1:{port}/")

    if __name__ == '__main__':
        cli()
    ```

    And again the example in action:

    ``` shell
    $ cli runserver
    Serving on http://127.0.0.1:5000/
    ```
- name: Context.abort()
  id: api/index#click.Context.abort
  summary: Aborts the script
  description: |-
    `abort()`

    Aborts the script.

    Return type:

    te.NoReturn
- name: Context.allow_extra_args
  id: api/index#click.Context.allow_extra_args
  summary: Indicates if the context allows extra args or if it should fail on parsing
  description: |-
    `allow_extra_args`

    Indicates if the context allows extra args or if it should fail on parsing.

    Changelog

    New in version 3.0.
- name: Context.allow_interspersed_args
  id: api/index#click.Context.allow_interspersed_args
  summary: Indicates if the context allows mixing of arguments and options or not
  description: |-
    `allow_interspersed_args: bool`

    Indicates if the context allows mixing of arguments and options or not.

    Changelog

    New in version 3.0.
- name: Context.args
  id: api/index#click.Context.args
  summary: the leftover arguments
  description: |-
    `args: List[str]`

    the leftover arguments.
- name: Context.call_on_close()
  id: api/index#click.Context.call_on_close
  summary: Register a function to be called when the context tears down
  description: |-
    `call_on_close(f)`

    Register a function to be called when the context tears down.

    This can be used to close resources opened during the script execution. Resources that support Python’s context manager protocol which would be used in a `with` statement should be registered with [`with_resource()`](#click.Context.with_resource "click.Context.with_resource") instead.

    Parameters:

    **f** ([Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")*\[\[...\],* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]*) – The function to execute on teardown.

    Return type:

    [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[…\], [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]
- name: Context.close()
  id: api/index#click.Context.close
  summary: Invoke all close callbacks registered with call_on_close(), and exit all context managers entered with with_resource()
  description: |-
    `close()`

    Invoke all close callbacks registered with [`call_on_close()`](#click.Context.call_on_close "click.Context.call_on_close"), and exit all context managers entered with [`with_resource()`](#click.Context.with_resource "click.Context.with_resource").

    Return type:

    None
- name: Context.color
  id: api/index#click.Context.color
  summary: Controls if styling output is wanted or not
  description: |-
    `color: bool | None`

    Controls if styling output is wanted or not.
- name: Context.command
  id: api/index#click.Context.command
  summary: the Command for this context
  description: |-
    `command`

    the [`Command`](#click.Command "click.Command") for this context.
- name: Context.command_path
  id: api/index#click.Context.command_path
  summary: The computed command path
  description: |-
    `property command_path: str`

    The computed command path. This is used for the `usage` information on the help page. It’s automatically created by combining the info names of the chain of contexts to the root.
- name: Context.ensure_object()
  id: api/index#click.Context.ensure_object
  summary: Like find_object() but sets the innermost object to a new instance of object_type if it does not exist
  description: |-
    `ensure_object(object_type)`

    Like [`find_object()`](#click.Context.find_object "click.Context.find_object") but sets the innermost object to a new instance of `object_type` if it does not exist.

    Parameters:

    **object_type** ([Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")*\[V\]*) –

    Return type:

    *V*
- name: Context.exit()
  id: api/index#click.Context.exit
  summary: Exits the application with a given exit code
  description: |-
    `exit(code=0)`

    Exits the application with a given exit code.

    Parameters:

    **code** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")) –

    Return type:

    te.NoReturn
- name: Context.fail()
  id: api/index#click.Context.fail
  summary: Aborts the execution of the program with a specific error message
  description: |-
    `fail(message)`

    Aborts the execution of the program with a specific error message.

    Parameters:

    **message** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the error message to fail with.

    Return type:

    te.NoReturn
- name: Context.find_object()
  id: api/index#click.Context.find_object
  summary: Finds the closest object of a given type
  description: |-
    `find_object(object_type)`

    Finds the closest object of a given type.

    Parameters:

    **object_type** ([Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")*\[V\]*) –

    Return type:

    *V* \| None
- name: Context.find_root()
  id: api/index#click.Context.find_root
  summary: Finds the outermost context
  description: |-
    `find_root()`

    Finds the outermost context.

    Return type:

    [Context](#click.Context "click.core.Context")
- name: Context.formatter_class
  id: api/index#click.Context.formatter_class
  summary: null
  description: |-
    `formatter_class`

    alias of [`HelpFormatter`](#click.HelpFormatter "click.formatting.HelpFormatter")
- name: Context.forward()
  id: api/index#click.Context.forward
  summary: Similar to invoke() but fills in default keyword arguments from the current context if the other command expects it
  description: |-
    `forward(_Context__cmd, *args, **kwargs)`

    Similar to [`invoke()`](#click.Context.invoke "click.Context.invoke") but fills in default keyword arguments from the current context if the other command expects it. This cannot invoke callbacks directly, only other commands.

    Changelog

    Changed in version 8.0: All `kwargs` are tracked in [`params`](#click.Context.params "click.Context.params") so they will be passed if `forward` is called at multiple levels.

    Parameters:

    - **\_Context\_\_cmd** ([Command](#click.Command "click.core.Command")) –
    - **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) –
    - **kwargs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) –

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")
- name: Context.get_help()
  id: api/index#click.Context.get_help
  summary: Helper method to get formatted help page for the current context and command
  description: |-
    `get_help()`

    Helper method to get formatted help page for the current context and command.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: Context.get_parameter_source()
  id: api/index#click.Context.get_parameter_source
  summary: Get the source of a parameter
  description: |-
    `get_parameter_source(name)`

    Get the source of a parameter. This indicates the location from which the value of the parameter was obtained.

    This can be useful for determining when a user specified a value on the command line that is the same as the default value. It will be [`DEFAULT`](#click.core.ParameterSource.DEFAULT "click.core.ParameterSource.DEFAULT") only if the value was actually taken from the default.

    Parameters:

    **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – The name of the parameter.

    Return type:

    [ParameterSource](#click.core.ParameterSource "click.core.ParameterSource")

    Changelog

    Changed in version 8.0: Returns `None` if the parameter was not provided from any source.
- name: Context.get_usage()
  id: api/index#click.Context.get_usage
  summary: Helper method to get formatted usage string for the current context and command
  description: |-
    `get_usage()`

    Helper method to get formatted usage string for the current context and command.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: Context.help_option_names
  id: api/index#click.Context.help_option_names
  summary: The names for the help options
  description: |-
    `help_option_names: List[str]`

    The names for the help options.
- name: Context.ignore_unknown_options
  id: api/index#click.Context.ignore_unknown_options
  summary: Instructs click to ignore options that a command does not understand and will store it on the context for later processing
  description: |-
    `ignore_unknown_options: bool`

    Instructs click to ignore options that a command does not understand and will store it on the context for later processing. This is primarily useful for situations where you want to call into external programs. Generally this pattern is strongly discouraged because it’s not possibly to losslessly forward all arguments.

    Changelog

    New in version 4.0.
- name: Context.info_name
  id: api/index#click.Context.info_name
  summary: null
  description: |-
    `info_name`

    the descriptive information name
- name: Context.invoke()
  id: api/index#click.Context.invoke
  summary: Invokes a command callback in exactly the way it expects
  description: |-
    `invoke(__callback: Callable[[...], V], *args: Any, **kwargs: Any) → V`

    invoke(*\_\_callback:[Command](#click.Command "click.core.Command")*, *\*args:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*, *\*\*kwargs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")

    Invokes a command callback in exactly the way it expects. There are two ways to invoke this method:

    1.  the first argument can be a callback and all other arguments and keyword arguments are forwarded directly to the function.
    2.  the first argument is a click command object. In that case all arguments are forwarded as well but proper click parameters (options and click arguments) must be keyword arguments and Click will fill in defaults.

    Note that before Click 3.2 keyword arguments were not properly filled in against the intention of this code and no context was created. For more information about this change and why it was done in a bugfix release see [Upgrading to 3.2](../upgrading/index#upgrade-to-3-2).

    Changelog

    Changed in version 8.0: All `kwargs` are tracked in [`params`](#click.Context.params "click.Context.params") so they will be passed if [`forward()`](#click.Context.forward "click.Context.forward") is called at multiple levels.
- name: Context.invoked_subcommand
  id: api/index#click.Context.invoked_subcommand
  summary: This flag indicates if a subcommand is going to be executed
  description: |-
    `invoked_subcommand: str | None`

    This flag indicates if a subcommand is going to be executed. A group callback can use this information to figure out if it’s being executed directly or because the execution flow passes onwards to a subcommand. By default it’s None, but it can be the name of the subcommand to execute.

    If chaining is enabled this will be set to `'*'` in case any commands are executed. It is however not possible to figure out which ones. If you require this knowledge you should use a `result_callback()`.
- name: Context.lookup_default()
  id: api/index#click.Context.lookup_default
  summary: Get the default for a parameter from default_map
  description: |-
    `lookup_default(name: str, call: te.Literal[True] = True) → Any | None`

    lookup_default(*name:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*, *call:te.Literal\[False\]=True*)→[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\|[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")

    Get the default for a parameter from `default_map`.

    Parameters:

    - **name** – Name of the parameter.
    - **call** – If the default is a callable, call it. Disable to return the callable instead.

    Changelog

    Changed in version 8.0: Added the `call` parameter.
- name: Context.make_formatter()
  id: api/index#click.Context.make_formatter
  summary: Creates the HelpFormatter for the help and usage output
  description: |-
    `make_formatter()`

    Creates the [`HelpFormatter`](#click.HelpFormatter "click.HelpFormatter") for the help and usage output.

    To quickly customize the formatter class used without overriding this method, set the [`formatter_class`](#click.Context.formatter_class "click.Context.formatter_class") attribute.

    Changelog

    Changed in version 8.0: Added the [`formatter_class`](#click.Context.formatter_class "click.Context.formatter_class") attribute.

    Return type:

    [HelpFormatter](#click.HelpFormatter "click.formatting.HelpFormatter")
- name: Context.max_content_width
  id: api/index#click.Context.max_content_width
  summary: The maximum width of formatted content (None implies a sensible default which is 80 for most things)
  description: |-
    `max_content_width: int | None`

    The maximum width of formatted content (None implies a sensible default which is 80 for most things).
- name: Context.meta
  id: api/index#click.Context.meta
  summary: This is a dictionary which is shared with all the contexts that are nested
  description: |-
    `property meta: Dict[str, Any]`

    This is a dictionary which is shared with all the contexts that are nested. It exists so that click utilities can store some state here if they need to. It is however the responsibility of that code to manage this dictionary well.

    The keys are supposed to be unique dotted strings. For instance module paths are a good choice for it. What is stored in there is irrelevant for the operation of click. However what is important is that code that places data here adheres to the general semantics of the system.

    Example usage:

    ``` python
    LANG_KEY = f'{__name__}.lang'

    def set_language(value):
        ctx = get_current_context()
        ctx.meta[LANG_KEY] = value

    def get_language():
        return get_current_context().meta.get(LANG_KEY, 'en_US')
    ```

    Changelog

    New in version 5.0.
- name: Context.obj
  id: api/index#click.Context.obj
  summary: the user object stored
  description: |-
    `obj: Any`

    the user object stored.
- name: Context.params
  id: api/index#click.Context.params
  summary: Map of parameter names to their parsed values
  description: |-
    `params: Dict[str, Any]`

    Map of parameter names to their parsed values. Parameters with `expose_value=False` are not stored.
- name: Context.parent
  id: api/index#click.Context.parent
  summary: the parent context or None if none exists
  description: |-
    `parent`

    the parent context or `None` if none exists.
- name: Context.protected_args
  id: api/index#click.Context.protected_args
  summary: protected arguments
  description: |-
    `protected_args: List[str]`

    protected arguments. These are arguments that are prepended to `args` when certain parsing scenarios are encountered but must be never propagated to another arguments. This is used to implement nested parsing.
- name: Context.resilient_parsing
  id: api/index#click.Context.resilient_parsing
  summary: Indicates if resilient parsing is enabled
  description: |-
    `resilient_parsing: bool`

    Indicates if resilient parsing is enabled. In that case Click will do its best to not cause any failures and default values will be ignored. Useful for completion.
- name: Context.scope()
  id: api/index#click.Context.scope
  summary: This helper method can be used with the context object to promote it to the current thread local (see get_current_context())
  description: |-
    `scope(cleanup=True)`

    This helper method can be used with the context object to promote it to the current thread local (see [`get_current_context()`](#click.get_current_context "click.get_current_context")). The default behavior of this is to invoke the cleanup functions which can be disabled by setting `cleanup` to `False`. The cleanup functions are typically used for things such as closing file handles.

    If the cleanup is intended the context object can also be directly used as a context manager.

    Example usage:

    ``` python
    with ctx.scope():
        assert get_current_context() is ctx
    ```

    This is equivalent:

    ``` python
    with ctx:
        assert get_current_context() is ctx
    ```

    Changelog

    New in version 5.0.

    Parameters:

    **cleanup** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – controls if the cleanup functions should be run or not. The default is to run these functions. In some situations the context only wants to be temporarily pushed in which case this can be disabled. Nested pushes automatically defer the cleanup.

    Return type:

    [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator "(in Python v3.12)")\[[Context](#click.Context "click.core.Context")\]
- name: Context.set_parameter_source()
  id: api/index#click.Context.set_parameter_source
  summary: Set the source of a parameter
  description: |-
    `set_parameter_source(name, source)`

    Set the source of a parameter. This indicates the location from which the value of the parameter was obtained.

    Parameters:

    - **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – The name of the parameter.
    - **source** ([ParameterSource](#click.core.ParameterSource "click.core.ParameterSource")) – A member of [`ParameterSource`](#click.core.ParameterSource "click.core.ParameterSource").

    Return type:

    None
- name: Context.show_default
  id: api/index#click.Context.show_default
  summary: Show option default values when formatting help text
  description: |-
    `show_default: bool | None`

    Show option default values when formatting help text.
- name: Context.terminal_width
  id: api/index#click.Context.terminal_width
  summary: The width of the terminal (None is autodetection)
  description: |-
    `terminal_width: int | None`

    The width of the terminal (None is autodetection).
- name: Context.to_info_dict()
  id: api/index#click.Context.to_info_dict
  summary: Gather information that could be useful for a tool generating user-facing documentation
  description: |-
    `to_info_dict()`

    Gather information that could be useful for a tool generating user-facing documentation. This traverses the entire CLI structure.

    ``` python
    with Context(cli) as ctx:
        info = ctx.to_info_dict()
    ```

    Changelog

    New in version 8.0.

    Return type:

    [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)"), [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]
- name: Context.token_normalize_func
  id: api/index#click.Context.token_normalize_func
  summary: An optional normalization function for tokens
  description: |-
    `token_normalize_func: Callable[[str], str] | None`

    An optional normalization function for tokens. This is options, choices, commands etc.
- name: Context.with_resource()
  id: api/index#click.Context.with_resource
  summary: Register a resource as if it were used in a with statement
  description: |-
    `with_resource(context_manager)`

    Register a resource as if it were used in a `with` statement. The resource will be cleaned up when the context is popped.

    Uses [`contextlib.ExitStack.enter_context()`](https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack.enter_context "(in Python v3.12)"). It calls the resource’s `__enter__()` method and returns the result. When the context is popped, it closes the stack, which calls the resource’s `__exit__()` method.

    To register a cleanup function for something that isn’t a context manager, use [`call_on_close()`](#click.Context.call_on_close "click.Context.call_on_close"). Or use something from [`contextlib`](https://docs.python.org/3/library/contextlib.html#module-contextlib "(in Python v3.12)") to turn it into a context manager first.

    ``` python
    @click.group()
    @click.option("--name")
    @click.pass_context
    def cli(ctx):
        ctx.obj = ctx.with_resource(connect_db(name))
    ```

    Parameters:

    **context_manager** ([ContextManager](https://docs.python.org/3/library/typing.html#typing.ContextManager "(in Python v3.12)")*\[V\]*) – The context manager to enter.

    Returns:

    Whatever `context_manager.__enter__()` returns.

    Return type:

    *V*

    Changelog

    New in version 8.0.
- name: core.ParameterSource
  id: api/index#click.core.ParameterSource
  summary: This is an Enum that indicates the source of a parameter’s value
  description: |-
    `class click.core.ParameterSource(value, names=None, *values, module=None, qualname=None, type=None, start=1, boundary=None)`

    This is an [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "(in Python v3.12)") that indicates the source of a parameter’s value.

    Use [`click.Context.get_parameter_source()`](#click.Context.get_parameter_source "click.Context.get_parameter_source") to get the source for a parameter by name.

    Changelog

    Changed in version 8.0: Use [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "(in Python v3.12)") and drop the `validate` method.

    Changed in version 8.0: Added the `PROMPT` value.
- name: core.ParameterSource.COMMANDLINE
  id: api/index#click.core.ParameterSource.COMMANDLINE
  summary: The value was provided by the command line args
  description: |-
    `COMMANDLINE = 1`

    The value was provided by the command line args.
- name: core.ParameterSource.DEFAULT
  id: api/index#click.core.ParameterSource.DEFAULT
  summary: Used the default specified by the parameter
  description: |-
    `DEFAULT = 3`

    Used the default specified by the parameter.
- name: core.ParameterSource.DEFAULT_MAP
  id: api/index#click.core.ParameterSource.DEFAULT_MAP
  summary: Used a default provided by Context.default_map
  description: |-
    `DEFAULT_MAP = 4`

    Used a default provided by `Context.default_map`.
- name: core.ParameterSource.ENVIRONMENT
  id: api/index#click.core.ParameterSource.ENVIRONMENT
  summary: The value was provided with an environment variable
  description: |-
    `ENVIRONMENT = 2`

    The value was provided with an environment variable.
- name: core.ParameterSource.PROMPT
  id: api/index#click.core.ParameterSource.PROMPT
  summary: Used a prompt to confirm a default or provide a value
  description: |-
    `PROMPT = 5`

    Used a prompt to confirm a default or provide a value.

    ## Types
- name: Counting
  id: options/index#counting
  summary: In some very rare circumstances, it is interesting to use the repetition of options to count an integer up
  description: |-
    ## Counting

    In some very rare circumstances, it is interesting to use the repetition of options to count an integer up. This can be used for verbosity flags, for instance:

    ``` python
    @click.command()
    @click.option('-v', '--verbose', count=True)
    def log(verbose):
        click.echo(f"Verbosity: {verbose}")
    ```

    And on the command line:

    ``` shell
    $ log -vvv
    Verbosity: 3
    ```
- name: Custom Multi Commands
  id: commands/index#custom-multi-commands
  summary: In addition to using click.group(), you can also build your own custom multi commands
  description: |-
    ## Custom Multi Commands

    In addition to using [`click.group()`](../api/index#click.group "click.group"), you can also build your own custom multi commands. This is useful when you want to support commands being loaded lazily from plugins.

    A custom multi command just needs to implement a list and load method:

    ``` python
    import click
    import os

    plugin_folder = os.path.join(os.path.dirname(__file__), 'commands')

    class MyCLI(click.MultiCommand):

        def list_commands(self, ctx):
            rv = []
            for filename in os.listdir(plugin_folder):
                if filename.endswith('.py') and filename != '__init__.py':
                    rv.append(filename[:-3])
            rv.sort()
            return rv

        def get_command(self, ctx, name):
            ns = {}
            fn = os.path.join(plugin_folder, name + '.py')
            with open(fn) as f:
                code = compile(f.read(), fn, 'exec')
                eval(code, ns, ns)
            return ns['cli']

    cli = MyCLI(help='This tool\'s subcommands are loaded from a '
                'plugin folder dynamically.')

    if __name__ == '__main__':
        cli()
    ```

    These custom classes can also be used with decorators:

    ``` python
    @click.command(cls=MyCLI)
    def cli():
        pass
    ```
- name: Custom Type Completion
  id: shell-completion/index#custom-type-completion
  summary: When creating a custom ParamType, override its shell_complete() method to provide shell completion for parameters with the type
  description: |-
    ## Custom Type Completion

    When creating a custom [`ParamType`](../api/index#click.ParamType "click.ParamType"), override its [`shell_complete()`](../api/index#click.ParamType.shell_complete "click.ParamType.shell_complete") method to provide shell completion for parameters with the type. The method must return a list of [`CompletionItem`](../api/index#click.shell_completion.CompletionItem "click.shell_completion.CompletionItem") objects. Besides the value, these objects hold metadata that shell support might use. The built-in implementations use `type` to indicate special handling for paths, and `help` for shells that support showing a help string next to a suggestion.

    In this example, the type will suggest environment variables that start with the incomplete value.

    ``` python
    class EnvVarType(ParamType):
        name = "envvar"

        def shell_complete(self, ctx, param, incomplete):
            return [
                CompletionItem(name)
                for name in os.environ if name.startswith(incomplete)
            ]

    @click.command()
    @click.option("--ev", type=EnvVarType())
    def cli(ev):
        click.echo(os.environ[ev])
    ```
- name: DateTime
  id: api/index#click.DateTime
  summary: The DateTime type converts date strings into datetime objects
  description: |-
    `class click.DateTime(formats=None)`

    The DateTime type converts date strings into `datetime` objects.

    The format strings which are checked are configurable, but default to some common (non-timezone aware) ISO 8601 formats.

    When specifying *DateTime* formats, you should only pass a list or a tuple. Other iterables, like generators, may lead to surprising results.

    The format strings are processed using `datetime.strptime`, and this consequently defines the format strings which are allowed.

    Parsing is tried using each format, in order, and the first format which parses successfully is used.

    Parameters:

    **formats** ([Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]* *\|* *None*) – A list or tuple of date format strings, in the order in which they should be tried. Defaults to `'%Y-%m-%d'`, `'%Y-%m-%dT%H:%M:%S'`, `'%Y-%m-%d %H:%M:%S'`.
- name: Decorating Commands
  id: commands/index#decorating-commands
  summary: As you have seen in the earlier example, a decorator can change how a command is invoked
  description: |-
    ## Decorating Commands

    As you have seen in the earlier example, a decorator can change how a command is invoked. What actually happens behind the scenes is that callbacks are always invoked through the [`Context.invoke()`](../api/index#click.Context.invoke "click.Context.invoke") method which automatically invokes a command correctly (by either passing the context or not).

    This is very useful when you want to write custom decorators. For instance, a common pattern would be to configure an object representing state and then storing it on the context and then to use a custom decorator to find the most recent object of this sort and pass it as first argument.

    For instance, the [`pass_obj()`](../api/index#click.pass_obj "click.pass_obj") decorator can be implemented like this:

    ``` python
    from functools import update_wrapper

    def pass_obj(f):
        @click.pass_context
        def new_func(ctx, *args, **kwargs):
            return ctx.invoke(f, ctx.obj, *args, **kwargs)
        return update_wrapper(new_func, f)
    ```

    The [`Context.invoke()`](../api/index#click.Context.invoke "click.Context.invoke") command will automatically invoke the function in the correct way, so the function will either be called with `f(ctx, obj)` or `f(obj)` depending on whether or not it itself is decorated with [`pass_context()`](../api/index#click.pass_context "click.pass_context").

    This is a very powerful concept that can be used to build very complex nested applications; see [Complex Applications](../complex/index#complex-guide) for more information.
- name: decorators.pass_meta_key()
  id: api/index#click.decorators.pass_meta_key
  summary: Create a decorator that passes a key from click.Context.meta as the first argument to the decorated function
  description: |-
    `click.decorators.pass_meta_key(key, *, doc_description=None)`

    Create a decorator that passes a key from [`click.Context.meta`](#click.Context.meta "click.Context.meta") as the first argument to the decorated function.

    Parameters:

    - **key** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Key in `Context.meta` to pass.
    - **doc_description** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – Description of the object being passed, inserted into the decorator’s docstring. Defaults to “the ‘key’ key from Context.meta”.

    Return type:

    t.Callable\[\[t.Callable\[te.Concatenate\[t.Any, P\], R\]\], t.Callable\[P, R\]\]

    Changelog

    New in version 8.0.

    ## Utilities
- name: Detecting the Source of a Parameter
  id: advanced/index#detecting-the-source-of-a-parameter
  summary: In some situations it’s helpful to understand whether or not an option or parameter came from the command line, the environment, the default value, or Context.default_map
  description: |-
    ## Detecting the Source of a Parameter

    In some situations it’s helpful to understand whether or not an option or parameter came from the command line, the environment, the default value, or `Context.default_map`. The [`Context.get_parameter_source()`](../api/index#click.Context.get_parameter_source "click.Context.get_parameter_source") method can be used to find this out. It will return a member of the [`ParameterSource`](../api/index#click.core.ParameterSource "click.core.ParameterSource") enum.

    ``` python
    @click.command()
    @click.argument('port', nargs=1, default=8080, envvar="PORT")
    @click.pass_context
    def cli(ctx, port):
        source = ctx.get_parameter_source("port")
        click.echo(f"Port came from {source.name}")
    ```

    ``` shell
    $ cli 8080
    Port came from COMMANDLINE

    $ export PORT=8080
    $ cli
    Port came from ENVIRONMENT

    $ cli
    Port came from DEFAULT
    ```
- name: Differences
  id: parameters/index#differences
  summary: Arguments can do less than options
  description: |-
    ## Differences

    Arguments can do less than options. The following features are only available for options:

    - automatic prompting for missing input
    - act as flags (boolean or otherwise)
    - option values can be pulled from environment variables, arguments can not
    - options are fully documented in the help page, arguments are not ([this is intentional](../documentation/index#documenting-arguments) as arguments might be too specific to be automatically documented)

    On the other hand arguments, unlike options, can accept an arbitrary number of arguments. Options can strictly ever only accept a fixed number of arguments (defaults to 1), or they may be specified multiple times using [Multiple Options](../options/index#multiple-options).
- name: Dynamic Defaults for Prompts
  id: options/index#dynamic-defaults-for-prompts
  summary: The auto_envvar_prefix and default_map options for the context allow the program to read option values from the environment or a configuration file
  description: |-
    ## Dynamic Defaults for Prompts

    The `auto_envvar_prefix` and `default_map` options for the context allow the program to read option values from the environment or a configuration file. However, this overrides the prompting mechanism, so that the user does not get the option to change the value interactively.

    If you want to let the user configure the default value, but still be prompted if the option isn’t specified on the command line, you can do so by supplying a callable as the default value. For example, to get a default from the environment:

    ``` python
    import os

    @click.command()
    @click.option(
        "--username", prompt=True,
        default=lambda: os.environ.get("USER", "")
    )
    def hello(username):
        click.echo(f"Hello, {username}!")
    ```

    To describe what the default value will be, set it in `show_default`.

    ``` python
    import os

    @click.command()
    @click.option(
        "--username", prompt=True,
        default=lambda: os.environ.get("USER", ""),
        show_default="current user"
    )
    def hello(username):
        click.echo(f"Hello, {username}!")
    ```

    ``` shell
    $ hello --help
    Usage: hello [OPTIONS]

    Options:
      --username TEXT  [default: (current user)]
      --help           Show this message and exit.
    ```
- name: echo()
  id: api/index#click.echo
  summary: Print a message and newline to stdout or a file
  description: |-
    `click.echo(message=None, file=None, nl=True, err=False, color=None)`

    Print a message and newline to stdout or a file. This should be used instead of [`print()`](https://docs.python.org/3/library/functions.html#print "(in Python v3.12)") because it provides better support for different data, files, and environments.

    Compared to [`print()`](https://docs.python.org/3/library/functions.html#print "(in Python v3.12)"), this does the following:

    - Ensures that the output encoding is not misconfigured on Linux.
    - Supports Unicode in the Windows console.
    - Supports writing to binary outputs, and supports writing bytes to text outputs.
    - Supports colors and styles on Windows.
    - Removes ANSI color and style codes if the output does not look like an interactive terminal.
    - Always flushes the output.

    Parameters:

    - **message** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)") *\|* *None*) – The string or bytes to output. Other objects are converted to strings.
    - **file** ([IO](https://docs.python.org/3/library/typing.html#typing.IO "(in Python v3.12)")*\[*[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]* *\|* *None*) – The file to write to. Defaults to `stdout`.
    - **err** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Write to `stderr` instead of `stdout`.
    - **nl** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Print a newline after the message. Enabled by default.
    - **color** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – Force showing or hiding colors and other styles. By default Click will remove color if the output does not look like an interactive terminal.

    Return type:

    None

    Changelog

    Changed in version 6.0: Support Unicode output on the Windows console. Click does not modify `sys.stdout`, so `sys.stdout.write()` and `print()` will still not support Unicode.

    Changed in version 4.0: Added the `color` parameter.

    New in version 3.0: Added the `err` parameter.

    Changed in version 2.0: Support colors on Windows if colorama is installed.
- name: echo_via_pager()
  id: api/index#click.echo_via_pager
  summary: This function takes a text and shows it via an environment specific pager on stdout
  description: |-
    `click.echo_via_pager(text_or_generator, color=None)`

    This function takes a text and shows it via an environment specific pager on stdout.

    Changelog

    Changed in version 3.0: Added the `color` flag.

    Parameters:

    - **text_or_generator** ([Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]* *\|* [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")*\[\[\],* [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]\]* *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the text to page, or alternatively, a generator emitting the text to page.
    - **color** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – controls if the pager supports ANSI colors or not. The default is autodetection.

    Return type:

    None
- name: Echoing
  id: quickstart/index#echoing
  summary: Why does this example use echo() instead of the regular print() function? The answer to this question is that Click attempts to support different environments consistently and to be very robust even when the environment is misconfigured
  description: |-
    ## Echoing

    Why does this example use [`echo()`](../api/index#click.echo "click.echo") instead of the regular [`print()`](https://docs.python.org/3/library/functions.html#print "(in Python v3.12)") function? The answer to this question is that Click attempts to support different environments consistently and to be very robust even when the environment is misconfigured. Click wants to be functional at least on a basic level even if everything is completely broken.

    What this means is that the [`echo()`](../api/index#click.echo "click.echo") function applies some error correction in case the terminal is misconfigured instead of dying with a [`UnicodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeError "(in Python v3.12)").

    The echo function also supports color and other styles in output. It will automatically remove styles if the output stream is a file. On Windows, colorama is automatically installed and used. See [ANSI Colors](../utils/index#ansi-colors).

    If you don’t need this, you can also use the `print()` construct / function.
- name: edit()
  id: api/index#click.edit
  summary: Edits the given text in the defined editor
  description: |-
    `click.edit(text=None, editor=None, env=None, require_save=True, extension='.txt', filename=None)`

    Edits the given text in the defined editor. If an editor is given (should be the full path to the executable but the regular operating system search path is used for finding the executable) it overrides the detected editor. Optionally, some environment variables can be used. If the editor is closed without changes, `None` is returned. In case a file is edited directly the return value is always `None` and `require_save` and `extension` are ignored.

    If the editor cannot be opened a [`UsageError`](#click.UsageError "click.UsageError") is raised.

    Note for Windows: to simplify cross-platform usage, the newlines are automatically converted from POSIX to Windows and vice versa. As such, the message here will have `\n` as newline markers.

    Parameters:

    - **text** (*AnyStr* *\|* *None*) – the text to edit.
    - **editor** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – optionally the editor to use. Defaults to automatic detection.
    - **env** ([Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]* *\|* *None*) – environment variables to forward to the editor.
    - **require_save** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if this is true, then not saving in the editor will make the return value become `None`.
    - **extension** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the extension to tell the editor about. This defaults to `.txt` but changing this might change syntax highlighting.
    - **filename** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – if provided it will edit this file instead of the provided text contents. It will not use a temporary file as an indirection in that case.

    Return type:

    AnyStr \| None
- name: Enabling Completion
  id: shell-completion/index#enabling-completion
  summary: Completion is only available if a script is installed and invoked through an entry point, not through the python command
  description: |-
    ## Enabling Completion

    Completion is only available if a script is installed and invoked through an entry point, not through the `python` command. See [Setuptools Integration](../setuptools/index). Once the executable is installed, calling it with a special environment variable will put Click in completion mode.

    To enable shell completion, the user needs to register a special function with their shell. The exact script varies depending on the shell you are using. Click will output it when called with `_{FOO_BAR}_COMPLETE` set to `{shell}_source`. `{FOO_BAR}` is the executable name in uppercase with dashes replaced by underscores. It is conventional but not strictly required for environment variable names to be in upper case. This convention helps distinguish environment variables from regular shell variables and commands, making scripts and configuration files more readable and easier to maintain. The built-in shells are `bash`, `zsh`, and `fish`.

    Provide your users with the following instructions customized to your program name. This uses `foo-bar` as an example.

    Add this to `~/.bashrc`:

    ``` bash
    eval "$(_FOO_BAR_COMPLETE=bash_source foo-bar)"
    ```

    Add this to `~/.zshrc`:

    ``` zsh
    eval "$(_FOO_BAR_COMPLETE=zsh_source foo-bar)"
    ```

    Add this to `~/.config/fish/completions/foo-bar.fish`:

    ``` fish
    _FOO_BAR_COMPLETE=fish_source foo-bar | source
    ```

    This is the same file used for the activation script method below. For Fish it’s probably always easier to use that method.

    Using `eval` means that the command is invoked and evaluated every time a shell is started, which can delay shell responsiveness. To speed it up, write the generated script to a file, then source that. You can generate the files ahead of time and distribute them with your program to save your users a step.

    Save the script somewhere.

    ``` bash
    _FOO_BAR_COMPLETE=bash_source foo-bar > ~/.foo-bar-complete.bash
    ```

    Source the file in `~/.bashrc`.

    ``` bash
    . ~/.foo-bar-complete.bash
    ```

    Save the script somewhere.

    ``` bash
    _FOO_BAR_COMPLETE=zsh_source foo-bar > ~/.foo-bar-complete.zsh
    ```

    Source the file in `~/.zshrc`.

    ``` bash
    . ~/.foo-bar-complete.zsh
    ```

    Save the script to `~/.config/fish/completions/foo-bar.fish`:

    ``` fish
    _FOO_BAR_COMPLETE=fish_source foo-bar > ~/.config/fish/completions/foo-bar.fish
    ```

    After modifying the shell config, you need to start a new shell in order for the changes to be loaded.
- name: Environment Variables
  id: arguments/index#environment-variables
  summary: Like options, arguments can also grab values from an environment variable
  description: |-
    ## Environment Variables

    Like options, arguments can also grab values from an environment variable. Unlike options, however, this is only supported for explicitly named environment variables.

    Example usage:

    ``` python
    @click.command()
    @click.argument('src', envvar='SRC', type=click.File('r'))
    def echo(src):
        """Print value of SRC environment variable."""
        click.echo(src.read())
    ```

    And from the command line:

    ``` shell
    $ export SRC=hello.txt
    $ echo
    Hello World!
    ```

    In that case, it can also be a list of different environment variables where the first one is picked.

    Generally, this feature is not recommended because it can cause the user a lot of confusion.
- name: Feature Switches
  id: options/index#feature-switches
  summary: In addition to boolean flags, there are also feature switches
  description: |-
    ## Feature Switches

    In addition to boolean flags, there are also feature switches. These are implemented by setting multiple options to the same parameter name and defining a flag value. Note that by providing the `flag_value` parameter, Click will implicitly set `is_flag=True`.

    To set a default flag, assign a value of `True` to the flag that should be the default.

    ``` python
    import sys

    @click.command()
    @click.option('--upper', 'transformation', flag_value='upper',
                  default=True)
    @click.option('--lower', 'transformation', flag_value='lower')
    def info(transformation):
        click.echo(getattr(sys.platform, transformation)())
    ```

    And on the command line:

    ``` shell
    $ info --upper
    LINUX
    $ info --lower
    linux
    $ info
    LINUX
    ```
- name: File
  id: api/index#click.File
  summary: Declares a parameter to be a file for reading or writing
  description: |-
    `class click.File(mode='r', encoding=None, errors='strict', lazy=None, atomic=False)`

    Declares a parameter to be a file for reading or writing. The file is automatically closed once the context tears down (after the command finished working).

    Files can be opened for reading or writing. The special value `-` indicates stdin or stdout depending on the mode.

    By default, the file is opened for reading text data, but it can also be opened in binary mode or for writing. The encoding parameter can be used to force a specific encoding.

    The `lazy` flag controls if the file should be opened immediately or upon first IO. The default is to be non-lazy for standard input and output streams as well as files opened for reading, `lazy` otherwise. When opening a file lazily for reading, it is still opened temporarily for validation, but will not be held open until first IO. lazy is mainly useful when opening for writing to avoid creating the file until it is needed.

    Starting with Click 2.0, files can also be opened atomically in which case all writes go into a separate file in the same folder and upon completion the file will be moved over to the original location. This is useful if a file regularly read by other users is modified.

    See [File Arguments](../arguments/index#file-args) for more information.

    Parameters:

    - **mode** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –
    - **encoding** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) –
    - **errors** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) –
    - **lazy** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) –
    - **atomic** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –
- name: File Arguments
  id: arguments/index#file-arguments
  summary: Since all the examples have already worked with filenames, it makes sense to explain how to deal with files properly
  description: |-
    ## File Arguments

    Since all the examples have already worked with filenames, it makes sense to explain how to deal with files properly. Command line tools are more fun if they work with files the Unix way, which is to accept `-` as a special file that refers to stdin/stdout.

    Click supports this through the [`click.File`](../api/index#click.File "click.File") type which intelligently handles files for you. It also deals with Unicode and bytes correctly for all versions of Python so your script stays very portable.

    Example:

    ``` python
    @click.command()
    @click.argument('input', type=click.File('rb'))
    @click.argument('output', type=click.File('wb'))
    def inout(input, output):
        """Copy contents of INPUT to OUTPUT."""
        while True:
            chunk = input.read(1024)
            if not chunk:
                break
            output.write(chunk)
    ```

    And what it does:

    ``` shell
    $ inout - hello.txt
    hello
    ^D
    $ inout hello.txt -
    hello
    ```
- name: File Opening Safety
  id: arguments/index#file-opening-safety
  summary: The FileType type has one problem it needs to deal with, and that is to decide when to open a file
  description: |-
    ## File Opening Safety

    The `FileType` type has one problem it needs to deal with, and that is to decide when to open a file. The default behavior is to be “intelligent” about it. What this means is that it will open stdin/stdout and files opened for reading immediately. This will give the user direct feedback when a file cannot be opened, but it will only open files for writing the first time an IO operation is performed by automatically wrapping the file in a special wrapper.

    This behavior can be forced by passing `lazy=True` or `lazy=False` to the constructor. If the file is opened lazily, it will fail its first IO operation by raising an [`FileError`](../api/index#click.FileError "click.FileError").

    Since files opened for writing will typically immediately empty the file, the lazy mode should only be disabled if the developer is absolutely sure that this is intended behavior.

    Forcing lazy mode is also very useful to avoid resource handling confusion. If a file is opened in lazy mode, it will receive a `close_intelligently` method that can help figure out if the file needs closing or not. This is not needed for parameters, but is necessary for manually prompting with the [`prompt()`](../api/index#click.prompt "click.prompt") function as you do not know if a stream like stdout was opened (which was already open before) or a real file that needs closing.

    Starting with Click 2.0, it is also possible to open files in atomic mode by passing `atomic=True`. In atomic mode, all writes go into a separate file in the same folder, and upon completion, the file will be moved over to the original location. This is useful if a file regularly read by other users is modified.
- name: File Path Arguments
  id: arguments/index#file-path-arguments
  summary: In the previous example, the files were opened immediately
  description: |-
    ## File Path Arguments

    In the previous example, the files were opened immediately. But what if we just want the filename? The naïve way is to use the default string argument type. The [`Path`](../api/index#click.Path "click.Path") type has several checks available which raise nice errors if they fail, such as existence. Filenames in these error messages are formatted with [`format_filename()`](../api/index#click.format_filename "click.format_filename"), so any undecodable bytes will be printed nicely.

    Example:

    ``` python
    @click.command()
    @click.argument('filename', type=click.Path(exists=True))
    def touch(filename):
        """Print FILENAME if the file exists."""
        click.echo(click.format_filename(filename))
    ```

    And what it does:

    ``` shell
    $ touch hello.txt
    hello.txt

    $ touch missing.txt
    Usage: touch [OPTIONS] FILENAME
    Try 'touch --help' for help.

    Error: Invalid value for 'FILENAME': Path 'missing.txt' does not exist.
    ```
- name: File System Isolation
  id: testing/index#file-system-isolation
  summary: For basic command line tools with file system operations, the CliRunner.isolated_filesystem() method is useful for setting the current working directory to a new, empty folder
  description: |-
    ## File System Isolation

    For basic command line tools with file system operations, the [`CliRunner.isolated_filesystem()`](../api/index#click.testing.CliRunner.isolated_filesystem "click.testing.CliRunner.isolated_filesystem") method is useful for setting the current working directory to a new, empty folder.

    cat.py

    ``` python
    import click

    @click.command()
    @click.argument('f', type=click.File())
    def cat(f):
       click.echo(f.read())
    ```

    test_cat.py

    ``` python
    from click.testing import CliRunner
    from cat import cat

    def test_cat():
       runner = CliRunner()
       with runner.isolated_filesystem():
          with open('hello.txt', 'w') as f:
              f.write('Hello World!')

          result = runner.invoke(cat, ['hello.txt'])
          assert result.exit_code == 0
          assert result.output == 'Hello World!\n'
    ```

    Pass `temp_dir` to control where the temporary directory is created. The directory will not be removed by Click in this case. This is useful to integrate with a framework like Pytest that manages temporary files.

    ``` python
    def test_keep_dir(tmp_path):
        runner = CliRunner()

        with runner.isolated_filesystem(temp_dir=tmp_path) as td:
            ...
    ```
- name: FileError
  id: api/index#click.FileError
  summary: Raised if a file cannot be opened
  description: |-
    `exception click.FileError(filename, hint=None)`

    Raised if a file cannot be opened.

    Parameters:

    - **filename** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –
    - **hint** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) –

    Return type:

    None
- name: Finding Application Folders
  id: utils/index#finding-application-folders
  summary: New in version 2.0
  description: |-
    ## Finding Application Folders

    Changelog

    New in version 2.0.

    Very often, you want to open a configuration file that belongs to your application. However, different operating systems store these configuration files in different locations depending on their standards. Click provides a [`get_app_dir()`](../api/index#click.get_app_dir "click.get_app_dir") function which returns the most appropriate location for per-user config files for your application depending on the OS.

    Example usage:

    ``` python
    import os
    import click
    import ConfigParser

    APP_NAME = 'My Application'

    def read_config():
        cfg = os.path.join(click.get_app_dir(APP_NAME), 'config.ini')
        parser = ConfigParser.RawConfigParser()
        parser.read([cfg])
        rv = {}
        for section in parser.sections():
            for key, value in parser.items(section):
                rv[f"{section}.{key}"] = value
        return rv
    ```
- name: FLOAT
  id: api/index#click.FLOAT
  summary: null
  description: |-
    `click.FLOAT = FLOAT`

    Parameters:

    - **value** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) –
    - **param** ([Parameter](#click.Parameter "click.Parameter") *\|* *None*) –
    - **ctx** ([Context](#click.Context "click.Context") *\|* *None*) –

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")
- name: FloatRange
  id: api/index#click.FloatRange
  summary: Restrict a click.FLOAT value to a range of accepted values
  description: |-
    `class click.FloatRange(min=None, max=None, min_open=False, max_open=False, clamp=False)`

    Restrict a [`click.FLOAT`](#click.FLOAT "click.FLOAT") value to a range of accepted values. See [Range Options](../options/index#ranges).

    If `min` or `max` are not passed, any value is accepted in that direction. If `min_open` or `max_open` are enabled, the corresponding boundary is not included in the range.

    If `clamp` is enabled, a value outside the range is clamped to the boundary instead of failing. This is not supported if either boundary is marked `open`.

    Changelog

    Changed in version 8.0: Added the `min_open` and `max_open` parameters.

    Parameters:

    - **min** ([float](https://docs.python.org/3/library/functions.html#float "(in Python v3.12)") *\|* *None*) –
    - **max** ([float](https://docs.python.org/3/library/functions.html#float "(in Python v3.12)") *\|* *None*) –
    - **min_open** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –
    - **max_open** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –
    - **clamp** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –
- name: format_filename()
  id: api/index#click.format_filename
  summary: Format a filename as a string for display
  description: |-
    `click.format_filename(filename, shorten=False)`

    Format a filename as a string for display. Ensures the filename can be displayed by replacing any invalid bytes or surrogate escapes in the name with the replacement character `�`.

    Invalid bytes or surrogate escapes will raise an error when written to a stream with `errors="strict"`. This will typically happen with `stdout` when the locale is something like `en_GB.UTF-8`.

    Many scenarios *are* safe to write surrogates though, due to PEP 538 and PEP 540, including:

    - Writing to `stderr`, which uses `errors="backslashreplace"`.
    - The system has `LANG=C.UTF-8`, `C`, or `POSIX`. Python opens stdout and stderr with `errors="surrogateescape"`.
    - None of `LANG/LC_*` are set. Python assumes `LANG=C.UTF-8`.
    - Python is started in UTF-8 mode with `PYTHONUTF8=1` or `-X utf8`. Python opens stdout and stderr with `errors="surrogateescape"`.

    Parameters:

    - **filename** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.12)") *\|* [PathLike](https://docs.python.org/3/library/os.html#os.PathLike "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]* *\|* [PathLike](https://docs.python.org/3/library/os.html#os.PathLike "(in Python v3.12)")*\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.12)")*\]*) – formats a filename for UI display. This will also convert the filename into unicode without failing.
    - **shorten** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – this optionally shortens the filename to strip of the path that leads up to it.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")

    ## Commands
- name: Forwarding Unknown Options
  id: advanced/index#forwarding-unknown-options
  summary: In some situations it is interesting to be able to accept all unknown options for further manual processing
  description: |-
    ## Forwarding Unknown Options

    In some situations it is interesting to be able to accept all unknown options for further manual processing. Click can generally do that as of Click 4.0, but it has some limitations that lie in the nature of the problem. The support for this is provided through a parser flag called `ignore_unknown_options` which will instruct the parser to collect all unknown options and to put them to the leftover argument instead of triggering a parsing error.

    This can generally be activated in two different ways:

    1.  It can be enabled on custom [`Command`](../api/index#click.Command "click.Command") subclasses by changing the [`ignore_unknown_options`](../api/index#click.BaseCommand.ignore_unknown_options "click.BaseCommand.ignore_unknown_options") attribute.
    2.  It can be enabled by changing the attribute of the same name on the context class ([`Context.ignore_unknown_options`](../api/index#click.Context.ignore_unknown_options "click.Context.ignore_unknown_options")). This is best changed through the `context_settings` dictionary on the command.

    For most situations the easiest solution is the second. Once the behavior is changed something needs to pick up those leftover options (which at this point are considered arguments). For this again you have two options:

    1.  You can use [`pass_context()`](../api/index#click.pass_context "click.pass_context") to get the context passed. This will only work if in addition to [`ignore_unknown_options`](../api/index#click.Context.ignore_unknown_options "click.Context.ignore_unknown_options") you also set [`allow_extra_args`](../api/index#click.Context.allow_extra_args "click.Context.allow_extra_args") as otherwise the command will abort with an error that there are leftover arguments. If you go with this solution, the extra arguments will be collected in [`Context.args`](../api/index#click.Context.args "click.Context.args").
    2.  You can attach an [`argument()`](../api/index#click.argument "click.argument") with `nargs` set to `-1` which will eat up all leftover arguments. In this case it’s recommended to set the `type` to [`UNPROCESSED`](../api/index#click.UNPROCESSED "click.UNPROCESSED") to avoid any string processing on those arguments as otherwise they are forced into unicode strings automatically which is often not what you want.

    In the end you end up with something like this:

    ``` python
    import sys
    from subprocess import call

    @click.command(context_settings=dict(
        ignore_unknown_options=True,
    ))
    @click.option('-v', '--verbose', is_flag=True, help='Enables verbose mode')
    @click.argument('timeit_args', nargs=-1, type=click.UNPROCESSED)
    def cli(verbose, timeit_args):
        """A fake wrapper around Python's timeit."""
        cmdline = ['echo', 'python', '-mtimeit'] + list(timeit_args)
        if verbose:
            click.echo(f"Invoking: {' '.join(cmdline)}")
        call(cmdline)
    ```

    And what it looks like:

    ``` shell
    $ cli --help
    Usage: cli [OPTIONS] [TIMEIT_ARGS]...

      A fake wrapper around Python's timeit.

    Options:
      -v, --verbose  Enables verbose mode
      --help         Show this message and exit.

    $ cli -n 100 'a = 1; b = 2; a * b'
    python -mtimeit -n 100 a = 1; b = 2; a * b

    $ cli -v 'a = 1; b = 2; a * b'
    Invoking: echo python -mtimeit a = 1; b = 2; a * b
    python -mtimeit a = 1; b = 2; a * b
    ```

    As you can see the verbosity flag is handled by Click, everything else ends up in the `timeit_args` variable for further processing which then for instance, allows invoking a subprocess. There are a few things that are important to know about how this ignoring of unhandled flag happens:

    - Unknown long options are generally ignored and not processed at all. So for instance if `--foo=bar` or `--foo bar` are passed they generally end up like that. Note that because the parser cannot know if an option will accept an argument or not, the `bar` part might be handled as an argument.
    - Unknown short options might be partially handled and reassembled if necessary. For instance in the above example there is an option called `-v` which enables verbose mode. If the command would be ignored with `-va` then the `-v` part would be handled by Click (as it is known) and `-a` would end up in the leftover parameters for further processing.
    - Depending on what you plan on doing you might have some success by disabling interspersed arguments ([`allow_interspersed_args`](../api/index#click.Context.allow_interspersed_args "click.Context.allow_interspersed_args")) which instructs the parser to not allow arguments and options to be mixed. Depending on your situation this might improve your results.

    Generally though the combined handling of options and arguments from your own commands and commands from another application are discouraged and if you can avoid it, you should. It’s a much better idea to have everything below a subcommand be forwarded to another application than to handle some arguments yourself.
- name: get_app_dir()
  id: api/index#click.get_app_dir
  summary: Returns the config folder for the application
  description: |-
    `click.get_app_dir(app_name, roaming=True, force_posix=False)`

    Returns the config folder for the application. The default behavior is to return whatever is most appropriate for the operating system.

    To give you an idea, for an app called `"Foo Bar"`, something like the following folders could be returned:

    Mac OS X:

    `~/Library/Application Support/Foo Bar`

    Mac OS X (POSIX):

    `~/.foo-bar`

    Unix:

    `~/.config/foo-bar`

    Unix (POSIX):

    `~/.foo-bar`

    Windows (roaming):

    `C:\Users\<user>\AppData\Roaming\Foo Bar`

    Windows (not roaming):

    `C:\Users\<user>\AppData\Local\Foo Bar`

    Changelog

    New in version 2.0.

    Parameters:

    - **app_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the application name. This should be properly capitalized and can contain whitespace.
    - **roaming** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – controls if the folder should be roaming or not on Windows. Has no effect otherwise.
    - **force_posix** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if this is set to `True` then on any POSIX system the folder will be stored in the home folder with a leading dot instead of the XDG config home or darwin’s application support folder.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: get_binary_stream()
  id: api/index#click.get_binary_stream
  summary: Returns a system stream for byte processing
  description: |-
    `click.get_binary_stream(name)`

    Returns a system stream for byte processing.

    Parameters:

    **name** (*te.Literal\['stdin',* *'stdout',* *'stderr'\]*) – the name of the stream to open. Valid names are `'stdin'`, `'stdout'` and `'stderr'`

    Return type:

    [BinaryIO](https://docs.python.org/3/library/typing.html#typing.BinaryIO "(in Python v3.12)")
- name: get_current_context()
  id: api/index#click.get_current_context
  summary: click
  description: |-
    `click.get_current_context(silent: te.Literal[False] = False) → Context`

    click. get_current_context ( *silent : [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") = False* ) → t.Optional\['Context'\]

    Returns the current click context. This can be used as a way to access the current context object from anywhere. This is a more implicit alternative to the [`pass_context()`](#click.pass_context "click.pass_context") decorator. This function is primarily useful for helpers such as [`echo()`](#click.echo "click.echo") which might be interested in changing its behavior based on the current context.

    To push the current context, [`Context.scope()`](#click.Context.scope "click.Context.scope") can be used.

    Changelog

    New in version 5.0.

    Parameters:

    **silent** – if set to `True` the return value is `None` if no context is available. The default behavior is to raise a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "(in Python v3.12)").
- name: get_text_stream()
  id: api/index#click.get_text_stream
  summary: Returns a system stream for text processing
  description: |-
    `click.get_text_stream(name, encoding=None, errors='strict')`

    Returns a system stream for text processing. This usually returns a wrapped stream around a binary stream returned from [`get_binary_stream()`](#click.get_binary_stream "click.get_binary_stream") but it also can take shortcuts for already correctly configured streams.

    Parameters:

    - **name** (*te.Literal\['stdin',* *'stdout',* *'stderr'\]*) – the name of the stream to open. Valid names are `'stdin'`, `'stdout'` and `'stderr'`
    - **encoding** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – overrides the detected default encoding.
    - **errors** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – overrides the default error mode.

    Return type:

    [TextIO](https://docs.python.org/3/library/typing.html#typing.TextIO "(in Python v3.12)")
- name: getchar()
  id: api/index#click.getchar
  summary: Fetches a single character from the terminal and returns it
  description: |-
    `click.getchar(echo=False)`

    Fetches a single character from the terminal and returns it. This will always return a unicode character and under certain rare circumstances this might return more than one character. The situations which more than one character is returned is when for whatever reason multiple characters end up in the terminal buffer or standard input was not actually a terminal.

    Note that this will always read from the terminal, even if something is piped into the standard input.

    Note for Windows: in rare cases when typing non-ASCII characters, this function might wait for a second character and then return both at once. This is because certain Unicode characters look like special-key markers.

    Changelog

    New in version 2.0.

    Parameters:

    **echo** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if set to `True`, the character read will also show up on the terminal. The default is to not show it.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: Getting Characters from Terminal
  id: utils/index#getting-characters-from-terminal
  summary: New in version 2.0
  description: |-
    ## Getting Characters from Terminal

    Changelog

    New in version 2.0.

    Normally, when reading input from the terminal, you would read from standard input. However, this is buffered input and will not show up until the line has been terminated. In certain circumstances, you might not want to do that and instead read individual characters as they are being written.

    For this, Click provides the [`getchar()`](../api/index#click.getchar "click.getchar") function which reads a single character from the terminal buffer and returns it as a Unicode character.

    Note that this function will always read from the terminal, even if stdin is instead a pipe.

    Example:

    ``` python
    import click

    click.echo('Continue? [yn] ', nl=False)
    c = click.getchar()
    click.echo()
    if c == 'y':
        click.echo('We will go on')
    elif c == 'n':
        click.echo('Abort!')
    else:
        click.echo('Invalid input :(')
    ```

    Note that this reads raw input, which means that things like arrow keys will show up in the platform’s native escape format. The only characters translated are `^C` and `^D` which are converted into keyboard interrupts and end of file exceptions respectively. This is done because otherwise, it’s too easy to forget about that and to create scripts that cannot be properly exited.
- name: Global Context Access
  id: advanced/index#global-context-access
  summary: New in version 5.0
  description: |-
    ## Global Context Access

    Changelog

    New in version 5.0.

    Starting with Click 5.0 it is possible to access the current context from anywhere within the same thread through the use of the [`get_current_context()`](../api/index#click.get_current_context "click.get_current_context") function which returns it. This is primarily useful for accessing the context bound object as well as some flags that are stored on it to customize the runtime behavior. For instance the [`echo()`](../api/index#click.echo "click.echo") function does this to infer the default value of the `color` flag.

    Example usage:

    ``` python
    def get_current_command_name():
        return click.get_current_context().info_name
    ```

    It should be noted that this only works within the current thread. If you spawn additional threads then those threads will not have the ability to refer to the current context. If you want to give another thread the ability to refer to this context you need to use the context within the thread as a context manager:

    ``` python
    def spawn_thread(ctx, func):
        def wrapper():
            with ctx:
                func()
        t = threading.Thread(target=wrapper)
        t.start()
        return t
    ```

    Now the thread function can access the context like the main thread would do. However if you do use this for threading you need to be very careful as the vast majority of the context is not thread safe! You are only allowed to read from the context, but not to perform any modifications on it.
- name: Group
  id: api/index#click.Group
  summary: Creates a new Group with a function as callback
  description: |-
    `click.group(name: Callable[[...], Any]) → Group`

    click.group(*name:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")*, *cls:[Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")\[GrpType\]*, *\*\*attrs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],GrpType\]

    click.group(*name:[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *\**, *cls:[Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")\[GrpType\]*, *\*\*attrs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],GrpType\]

    click.group(*name:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *cls:[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *\*\*attrs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],[Group](#click.Group "click.core.Group")\]

    Creates a new [`Group`](#click.Group "click.Group") with a function as callback. This works otherwise the same as [`command()`](#click.command "click.command") just that the `cls` parameter is set to [`Group`](#click.Group "click.Group").

    Changed in version 8.1: This decorator can be applied without parentheses.
- name: Group Invocation Without Command
  id: commands/index#group-invocation-without-command
  summary: By default, a group or multi command is not invoked unless a subcommand is passed
  description: |-
    ## Group Invocation Without Command

    By default, a group or multi command is not invoked unless a subcommand is passed. In fact, not providing a command automatically passes `--help` by default. This behavior can be changed by passing `invoke_without_command=True` to a group. In that case, the callback is always invoked instead of showing the help page. The context object also includes information about whether or not the invocation would go to a subcommand.

    Example:

    ``` python
    @click.group(invoke_without_command=True)
    @click.pass_context
    def cli(ctx):
        if ctx.invoked_subcommand is None:
            click.echo('I was invoked without subcommand')
        else:
            click.echo(f"I am about to invoke {ctx.invoked_subcommand}")

    @cli.command()
    def sync():
        click.echo('The subcommand')
    ```

    And how it works in practice:

    ``` shell
    $ tool
    I was invoked without subcommand
    $ tool sync
    I am about to invoke sync
    The subcommand
    ```
- name: group()
  id: api/index#click.group
  summary: Creates a new Group with a function as callback
  description: |-
    `click.group(name: Callable[[...], Any]) → Group`

    click.group(*name:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")*, *cls:[Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")\[GrpType\]*, *\*\*attrs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],GrpType\]

    click.group(*name:[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *\**, *cls:[Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")\[GrpType\]*, *\*\*attrs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],GrpType\]

    click.group(*name:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *cls:[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")=None*, *\*\*attrs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],[Group](#click.Group "click.core.Group")\]

    Creates a new [`Group`](#click.Group "click.Group") with a function as callback. This works otherwise the same as [`command()`](#click.command "click.command") just that the `cls` parameter is set to [`Group`](#click.Group "click.Group").

    Changed in version 8.1: This decorator can be applied without parentheses.
- name: Group.add_command()
  id: api/index#click.Group.add_command
  summary: Registers another Command with this group
  description: |-
    `add_command(cmd, name=None)`

    Registers another [`Command`](#click.Command "click.Command") with this group. If the name is not provided, the name of the command is used.

    Parameters:

    - **cmd** ([Command](#click.Command "click.core.Command")) –
    - **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) –

    Return type:

    None
- name: Group.command()
  id: api/index#click.Group.command
  summary: A shortcut decorator for declaring and attaching a command to the group
  description: |-
    `command(__func: Callable[[...], Any]) → Command`

    command(*\*args:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*, *\*\*kwargs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],[Command](#click.Command "click.core.Command")\]

    A shortcut decorator for declaring and attaching a command to the group. This takes the same arguments as [`command()`](#click.command "click.command") and immediately registers the created command with this group by calling [`add_command()`](#click.Group.add_command "click.Group.add_command").

    To customize the command class used, set the [`command_class`](#click.Group.command_class "click.Group.command_class") attribute.

    Changed in version 8.1: This decorator can be applied without parentheses.

    Changelog

    Changed in version 8.0: Added the [`command_class`](#click.Group.command_class "click.Group.command_class") attribute.
- name: Group.command_class
  id: api/index#click.Group.command_class
  summary: If set, this is used by the group’s command() decorator as the default Command class
  description: |-
    `command_class: Type[Command] | None = None`

    If set, this is used by the group’s [`command()`](#click.command "click.command") decorator as the default [`Command`](#click.Command "click.Command") class. This is useful to make all subcommands use a custom command class.

    Changelog

    New in version 8.0.
- name: Group.commands
  id: api/index#click.Group.commands
  summary: The registered subcommands by their exported names
  description: |-
    `commands: MutableMapping[str, Command]`

    The registered subcommands by their exported names.
- name: Group.get_command()
  id: api/index#click.Group.get_command
  summary: Given a context and a command name, this returns a Command object if it exists or returns None
  description: |-
    `get_command(ctx, cmd_name)`

    Given a context and a command name, this returns a [`Command`](#click.Command "click.Command") object if it exists or returns `None`.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **cmd_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –

    Return type:

    [Command](#click.Command "click.core.Command") \| None
- name: Group.group()
  id: api/index#click.Group.group
  summary: A shortcut decorator for declaring and attaching a group to the group
  description: |-
    `group(__func: Callable[[...], Any]) → Group`

    group(*\*args:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*, *\*\*kwargs:[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*)→[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[...\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\],[Group](#click.Group "click.core.Group")\]

    A shortcut decorator for declaring and attaching a group to the group. This takes the same arguments as [`group()`](#click.group "click.group") and immediately registers the created group with this group by calling [`add_command()`](#click.Group.add_command "click.Group.add_command").

    To customize the group class used, set the [`group_class`](#click.Group.group_class "click.Group.group_class") attribute.

    Changed in version 8.1: This decorator can be applied without parentheses.

    Changelog

    Changed in version 8.0: Added the [`group_class`](#click.Group.group_class "click.Group.group_class") attribute.
- name: Group.group_class
  id: api/index#click.Group.group_class
  summary: If set, this is used by the group’s group() decorator as the default Group class
  description: |-
    `group_class: Type[Group] | Type[type] | None = None`

    If set, this is used by the group’s [`group()`](#click.group "click.group") decorator as the default [`Group`](#click.Group "click.Group") class. This is useful to make all subgroups use a custom group class.

    If set to the special value [`type`](https://docs.python.org/3/library/functions.html#type "(in Python v3.12)") (literally `group_class = type`), this group’s class will be used as the default class. This makes a custom group class continue to make custom groups.

    Changelog

    New in version 8.0.
- name: Group.list_commands()
  id: api/index#click.Group.list_commands
  summary: Returns a list of subcommand names in the order they should appear
  description: |-
    `list_commands(ctx)`

    Returns a list of subcommand names in the order they should appear.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\]
- name: Help Parameter Customization
  id: documentation/index#help-parameter-customization
  summary: New in version 2.0
  description: "## Help Parameter Customization\n\nChangelog\n\nNew in version 2.0.\n\nThe help parameter is implemented in Click in a very special manner. Unlike regular parameters it’s automatically added by Click for any command and it performs automatic conflict resolution. By default it’s called `--help`, but this can be changed. If a command itself implements a parameter with the same name, the default help parameter stops accepting it. There is a context setting that can be used to override the names of the help parameters called [`help_option_names`](../api/index#click.Context.help_option_names \"click.Context.help_option_names\").\n\nThis example changes the default parameters to `-h` and `--help` instead of just `--help`:\n\n``` python\nCONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])\n\n@click.command(context_settings=CONTEXT_SETTINGS)\ndef cli():\n    pass\n```\n\nAnd what it looks like:\n\n``` shell\n$ cli -h\nUsage: cli [OPTIONS]\n\nOptions:\n  -h, --help  Show this message and exit.\n```\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/documentation/](https://click.palletsprojects.com/en/8.1.x/documentation/)"
- name: Help Texts
  id: documentation/index#help-texts
  summary: Commands and options accept help arguments
  description: |-
    ## Help Texts

    Commands and options accept help arguments. In the case of commands, the docstring of the function is automatically used if provided.

    Simple example:

    ``` python
    @click.command()
    @click.option('--count', default=1, help='number of greetings')
    @click.argument('name')
    def hello(count, name):
        """This script prints hello NAME COUNT times."""
        for x in range(count):
            click.echo(f"Hello {name}!")
    ```

    And what it looks like:

    ``` shell
    $ hello --help
    Usage: hello [OPTIONS] NAME

      This script prints hello NAME COUNT times.

    Options:
      --count INTEGER  number of greetings
      --help           Show this message and exit.
    ```

    ### Documenting Arguments

    [`click.argument()`](../api/index#click.argument "click.argument") does not take a `help` parameter. This is to follow the general convention of Unix tools of using arguments for only the most necessary things, and to document them in the command help text by referring to them by name.

    You might prefer to reference the argument in the description:

    ``` python
    @click.command()
    @click.argument('filename')
    def touch(filename):
        """Print FILENAME."""
        click.echo(filename)
    ```

    And what it looks like:

    ``` shell
    $ touch --help
    Usage: touch [OPTIONS] FILENAME

      Print FILENAME.

    Options:
      --help  Show this message and exit.
    ```

    Or you might prefer to explicitly provide a description of the argument:

    ``` python
    @click.command()
    @click.argument('filename')
    def touch(filename):
        """Print FILENAME.

        FILENAME is the name of the file to check.
        """
        click.echo(filename)
    ```

    And what it looks like:

    ``` shell
    $ touch --help
    Usage: touch [OPTIONS] FILENAME

      Print FILENAME.

      FILENAME is the name of the file to check.

    Options:
      --help  Show this message and exit.
    ```

    For more examples, see the examples in [Arguments](../arguments/index).
- name: help_option()
  id: api/index#click.help_option
  summary: Add a --help option which immediately prints the help page and exits the program
  description: |-
    `click.help_option(*param_decls, **kwargs)`

    Add a `--help` option which immediately prints the help page and exits the program.

    This is usually unnecessary, as the `--help` option is added to each command automatically unless `add_help_option=False` is passed.

    Parameters:

    - **param_decls** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – One or more option names. Defaults to the single value `"--help"`.
    - **kwargs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – Extra arguments are passed to [`option()`](#click.option "click.option").

    Return type:

    [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[*FC*\], *FC*\]
- name: HelpFormatter
  id: api/index#click.HelpFormatter
  summary: This class helps with formatting text-based help pages
  description: |-
    `class click.HelpFormatter(indent_increment=2, width=None, max_width=None)`

    This class helps with formatting text-based help pages. It’s usually just needed for very special internal cases, but it’s also exposed so that developers can write their own fancy outputs.

    At present, it always writes into memory.

    Parameters:

    - **indent_increment** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")) – the additional increment for each level.
    - **width** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)") *\|* *None*) – the width for the text. This defaults to the terminal width clamped to a maximum of 78.
    - **max_width** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)") *\|* *None*) –
- name: HelpFormatter.dedent()
  id: api/index#click.HelpFormatter.dedent
  summary: Decreases the indentation
  description: |-
    `dedent()`

    Decreases the indentation.

    Return type:

    None
- name: HelpFormatter.getvalue()
  id: api/index#click.HelpFormatter.getvalue
  summary: Returns the buffer contents
  description: |-
    `getvalue()`

    Returns the buffer contents.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: HelpFormatter.indent()
  id: api/index#click.HelpFormatter.indent
  summary: Increases the indentation
  description: |-
    `indent()`

    Increases the indentation.

    Return type:

    None
- name: HelpFormatter.indentation()
  id: api/index#click.HelpFormatter.indentation
  summary: A context manager that increases the indentation
  description: |-
    `indentation()`

    A context manager that increases the indentation.

    Return type:

    [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator "(in Python v3.12)")\[None\]
- name: HelpFormatter.section()
  id: api/index#click.HelpFormatter.section
  summary: Helpful context manager that writes a paragraph, a heading, and the indents
  description: |-
    `section(name)`

    Helpful context manager that writes a paragraph, a heading, and the indents.

    Parameters:

    **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the section name that is written as heading.

    Return type:

    [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator "(in Python v3.12)")\[None\]
- name: HelpFormatter.write()
  id: api/index#click.HelpFormatter.write
  summary: Writes a unicode string into the internal buffer
  description: |-
    `write(string)`

    Writes a unicode string into the internal buffer.

    Parameters:

    **string** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –

    Return type:

    None
- name: HelpFormatter.write_dl()
  id: api/index#click.HelpFormatter.write_dl
  summary: Writes a definition list into the buffer
  description: |-
    `write_dl(rows, col_max=30, col_spacing=2)`

    Writes a definition list into the buffer. This is how options and commands are usually formatted.

    Parameters:

    - **rows** ([Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence "(in Python v3.12)")*\[*[Tuple](https://docs.python.org/3/library/typing.html#typing.Tuple "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]\]*) – a list of two item tuples for the terms and values.
    - **col_max** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")) – the maximum width of the first column.
    - **col_spacing** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")) – the number of spaces between the first and second column.

    Return type:

    None
- name: HelpFormatter.write_heading()
  id: api/index#click.HelpFormatter.write_heading
  summary: Writes a heading into the buffer
  description: |-
    `write_heading(heading)`

    Writes a heading into the buffer.

    Parameters:

    **heading** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –

    Return type:

    None
- name: HelpFormatter.write_paragraph()
  id: api/index#click.HelpFormatter.write_paragraph
  summary: Writes a paragraph into the buffer
  description: |-
    `write_paragraph()`

    Writes a paragraph into the buffer.

    Return type:

    None
- name: HelpFormatter.write_text()
  id: api/index#click.HelpFormatter.write_text
  summary: Writes re-indented text into the buffer
  description: |-
    `write_text(text)`

    Writes re-indented text into the buffer. This rewraps and preserves paragraphs.

    Parameters:

    **text** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –

    Return type:

    None
- name: HelpFormatter.write_usage()
  id: api/index#click.HelpFormatter.write_usage
  summary: Writes a usage line into the buffer
  description: |-
    `write_usage(prog, args='', prefix=None)`

    Writes a usage line into the buffer.

    Parameters:

    - **prog** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the program name.
    - **args** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – whitespace separated list of arguments.
    - **prefix** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – The prefix for the first line. Defaults to `"Usage: "`.

    Return type:

    None
- name: Implementing Custom Types
  id: parameters/index#implementing-custom-types
  summary: To implement a custom type, you need to subclass the ParamType class
  description: "## Implementing Custom Types\n\nTo implement a custom type, you need to subclass the [`ParamType`](../api/index#click.ParamType \"click.ParamType\") class. Override the [`convert()`](../api/index#click.ParamType.convert \"click.ParamType.convert\") method to convert the value from a string to the correct type.\n\nThe following code implements an integer type that accepts hex and octal numbers in addition to normal integers, and converts them into regular integers.\n\n``` python\nimport click\n\nclass BasedIntParamType(click.ParamType):\n    name = \"integer\"\n\n    def convert(self, value, param, ctx):\n        if isinstance(value, int):\n            return value\n\n        try:\n            if value[:2].lower() == \"0x\":\n                return int(value[2:], 16)\n            elif value[:1] == \"0\":\n                return int(value, 8)\n            return int(value, 10)\n        except ValueError:\n            self.fail(f\"{value!r} is not a valid integer\", param, ctx)\n\nBASED_INT = BasedIntParamType()\n```\n\nThe [`name`](../api/index#click.ParamType.name \"click.ParamType.name\") attribute is optional and is used for documentation. Call [`fail()`](../api/index#click.ParamType.fail \"click.ParamType.fail\") if conversion fails. The `param` and `ctx` arguments may be `None` in some cases such as prompts.\n\nValues from user input or the command line will be strings, but default values and Python arguments may already be the correct type. The custom type should check at the top if the value is already valid and pass it through to support those cases.\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/parameters/](https://click.palletsprojects.com/en/8.1.x/parameters/)"
- name: Input Prompts
  id: prompts/index#input-prompts
  summary: To manually ask for user input, you can use the prompt() function
  description: |-
    ## Input Prompts

    To manually ask for user input, you can use the [`prompt()`](../api/index#click.prompt "click.prompt") function. By default, it accepts any Unicode string, but you can ask for any other type. For instance, you can ask for a valid integer:

    ``` python
    value = click.prompt('Please enter a valid integer', type=int)
    ```

    Additionally, the type will be determined automatically if a default value is provided. For instance, the following will only accept floats:

    ``` python
    value = click.prompt('Please enter a number', default=42.0)
    ```
- name: Input Streams
  id: testing/index#input-streams
  summary: The test wrapper can also be used to provide input data for the input stream (stdin)
  description: "## Input Streams\n\nThe test wrapper can also be used to provide input data for the input stream (stdin). This is very useful for testing prompts, for instance:\n\nprompt.py\n\n``` python\nimport click\n\n@click.command()\n@click.option('--foo', prompt=True)\ndef prompt(foo):\n   click.echo(f\"foo={foo}\")\n```\n\ntest_prompt.py\n\n``` python\nfrom click.testing import CliRunner\nfrom prompt import prompt\n\ndef test_prompts():\n   runner = CliRunner()\n   result = runner.invoke(prompt, input='wau wau\\n')\n   assert not result.exception\n   assert result.output == 'Foo: wau wau\\nfoo=wau wau\\n'\n```\n\nNote that prompts will be emulated so that they write the input data to the output stream as well. If hidden input is expected then this obviously does not happen.\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/testing/](https://click.palletsprojects.com/en/8.1.x/testing/)"
- name: INT
  id: api/index#click.INT
  summary: null
  description: |-
    `click.INT = INT`

    Parameters:

    - **value** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) –
    - **param** ([Parameter](#click.Parameter "click.Parameter") *\|* *None*) –
    - **ctx** ([Context](#click.Context "click.Context") *\|* *None*) –

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")
- name: Intelligent File Opening
  id: utils/index#intelligent-file-opening
  summary: New in version 3.0
  description: |-
    ## Intelligent File Opening

    Changelog

    New in version 3.0.

    Starting with Click 3.0 the logic for opening files from the [`File`](../api/index#click.File "click.File") type is exposed through the [`open_file()`](../api/index#click.open_file "click.open_file") function. It can intelligently open stdin/stdout as well as any other file.

    Example:

    ``` python
    import click

    stdout = click.open_file('-', 'w')
    test_file = click.open_file('test.txt', 'w')
    ```

    If stdin or stdout are returned, the return value is wrapped in a special file where the context manager will prevent the closing of the file. This makes the handling of standard streams transparent and you can always use it like this:

    ``` python
    with click.open_file(filename, 'w') as f:
        f.write('Hello World!\n')
    ```
- name: IntRange
  id: api/index#click.IntRange
  summary: Restrict an click.INT value to a range of accepted values
  description: |-
    `class click.IntRange(min=None, max=None, min_open=False, max_open=False, clamp=False)`

    Restrict an [`click.INT`](#click.INT "click.INT") value to a range of accepted values. See [Range Options](../options/index#ranges).

    If `min` or `max` are not passed, any value is accepted in that direction. If `min_open` or `max_open` are enabled, the corresponding boundary is not included in the range.

    If `clamp` is enabled, a value outside the range is clamped to the boundary instead of failing.

    Changelog

    Changed in version 8.0: Added the `min_open` and `max_open` parameters.

    Parameters:

    - **min** ([float](https://docs.python.org/3/library/functions.html#float "(in Python v3.12)") *\|* *None*) –
    - **max** ([float](https://docs.python.org/3/library/functions.html#float "(in Python v3.12)") *\|* *None*) –
    - **min_open** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –
    - **max_open** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –
    - **clamp** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –
- name: Introduction
  id: setuptools/index#introduction
  summary: To bundle your script with setuptools, all you need is the script in a Python package and a setup.py file
  description: |-
    ## Introduction

    To bundle your script with setuptools, all you need is the script in a Python package and a `setup.py` file.

    Imagine this directory structure:

    ``` text
    yourscript.py
    setup.py
    ```

    Contents of `yourscript.py`:

    ``` python
    import click

    @click.command()
    def cli():
        """Example script."""
        click.echo('Hello World!')
    ```

    Contents of `setup.py`:

    ``` python
    from setuptools import setup

    setup(
        name='yourscript',
        version='0.1.0',
        py_modules=['yourscript'],
        install_requires=[
            'Click',
        ],
        entry_points={
            'console_scripts': [
                'yourscript = yourscript:cli',
            ],
        },
    )
    ```

    The magic is in the `entry_points` parameter. Read the full [entry_points](https://packaging.python.org/en/latest/specifications/entry-points/) specification for more details. Below `console_scripts`, each line identifies one console script. The first part before the equals sign (`=`) is the name of the script that should be generated, the second part is the import path followed by a colon (`:`) with the Click command.

    That’s it.
- name: Invoking Other Commands
  id: advanced/index#invoking-other-commands
  summary: Sometimes, it might be interesting to invoke one command from another command
  description: |-
    ## Invoking Other Commands

    Sometimes, it might be interesting to invoke one command from another command. This is a pattern that is generally discouraged with Click, but possible nonetheless. For this, you can use the [`Context.invoke()`](../api/index#click.Context.invoke "click.Context.invoke") or [`Context.forward()`](../api/index#click.Context.forward "click.Context.forward") methods.

    They work similarly, but the difference is that [`Context.invoke()`](../api/index#click.Context.invoke "click.Context.invoke") merely invokes another command with the arguments you provide as a caller, whereas [`Context.forward()`](../api/index#click.Context.forward "click.Context.forward") fills in the arguments from the current command. Both accept the command as the first argument and everything else is passed onwards as you would expect.

    Example:

    ``` python
    cli = click.Group()

    @cli.command()
    @click.option('--count', default=1)
    def test(count):
        click.echo(f'Count: {count}')

    @cli.command()
    @click.option('--count', default=1)
    @click.pass_context
    def dist(ctx, count):
        ctx.forward(test)
        ctx.invoke(test, count=42)
    ```

    And what it looks like:

    ``` shell
    $ cli dist
    Count: 1
    Count: 42
    ```
- name: launch()
  id: api/index#click.launch
  summary: This function launches the given URL (or filename) in the default viewer application for this file type
  description: |-
    `click.launch(url, wait=False, locate=False)`

    This function launches the given URL (or filename) in the default viewer application for this file type. If this is an executable, it might launch the executable in a new session. The return value is the exit code of the launched application. Usually, `0` indicates success.

    Examples:

    ``` python
    click.launch('https://click.palletsprojects.com/')
    click.launch('/my/downloaded/file', locate=True)
    ```

    Changelog

    New in version 2.0.

    Parameters:

    - **url** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – URL or filename of the thing to launch.
    - **wait** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Wait for the program to exit before returning. This only works if the launched program blocks. In particular, `xdg-open` on Linux does not block.
    - **locate** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if this is set to `True` then instead of launching the application associated with the URL it will attempt to launch a file manager with the file located. This might have weird effects if the URL does not point to the filesystem.

    Return type:

    [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")
- name: Launching Applications
  id: utils/index#launching-applications
  summary: New in version 2.0
  description: |-
    ## Launching Applications

    Changelog

    New in version 2.0.

    Click supports launching applications through [`launch()`](../api/index#click.launch "click.launch"). This can be used to open the default application associated with a URL or filetype. This can be used to launch web browsers or picture viewers, for instance. In addition to this, it can also launch the file manager and automatically select the provided file.

    Example usage:

    ``` python
    click.launch("https://click.palletsprojects.com/")
    click.launch("/my/downloaded/file.txt", locate=True)
    ```
- name: Launching Editors
  id: utils/index#launching-editors
  summary: New in version 2.0
  description: |-
    ## Launching Editors

    Changelog

    New in version 2.0.

    Click supports launching editors automatically through [`edit()`](../api/index#click.edit "click.edit"). This is very useful for asking users for multi-line input. It will automatically open the user’s defined editor or fall back to a sensible default. If the user closes the editor without saving, the return value will be `None`, otherwise the entered text.

    Example usage:

    ``` python
    import click

    def get_commit_message():
        MARKER = '# Everything below is ignored\n'
        message = click.edit('\n\n' + MARKER)
        if message is not None:
            return message.split(MARKER, 1)[0].rstrip('\n')
    ```

    Alternatively, the function can also be used to launch editors for files by a specific filename. In this case, the return value is always `None`.

    Example usage:

    ``` python
    import click
    click.edit(filename='/etc/passwd')
    ```
- name: Lazily Loading Subcommands
  id: complex/index#lazily-loading-subcommands
  summary: Large CLIs and CLIs with slow imports may benefit from deferring the loading of subcommands
  description: "## Lazily Loading Subcommands\n\nLarge CLIs and CLIs with slow imports may benefit from deferring the loading of subcommands. The interfaces which support this mode of use are [`MultiCommand.list_commands()`](../api/index#click.MultiCommand.list_commands \"click.MultiCommand.list_commands\") and [`MultiCommand.get_command()`](../api/index#click.MultiCommand.get_command \"click.MultiCommand.get_command\"). A custom [`MultiCommand`](../api/index#click.MultiCommand \"click.MultiCommand\") subclass can implement a lazy loader by storing extra data such that [`MultiCommand.get_command()`](../api/index#click.MultiCommand.get_command \"click.MultiCommand.get_command\") is responsible for running imports.\n\nSince the primary case for this is a [`Group`](../api/index#click.Group \"click.Group\") which loads its subcommands lazily, the following example shows a lazy-group implementation.\n\nWarning\n\nLazy loading of python code can result in hard to track down bugs, circular imports in order-dependent codebases, and other surprising behaviors. It is recommended that this technique only be used in concert with testing which will at least run the `--help` on each subcommand. That will guarantee that each subcommand can be loaded successfully.\n\n### Defining the Lazy Group\n\nThe following [`Group`](../api/index#click.Group \"click.Group\") subclass adds an attribute, `lazy_subcommands`, which stores a mapping from subcommand names to the information for importing them.\n\n``` python\n# in lazy_group.py\nimport importlib\nimport click\n\nclass LazyGroup(click.Group):\n    def __init__(self, *args, lazy_subcommands=None, **kwargs):\n        super().__init__(*args, **kwargs)\n        # lazy_subcommands is a map of the form:\n        #\n        #   {command-name} -> {module-name}.{command-object-name}\n        #\n        self.lazy_subcommands = lazy_subcommands or {}\n\n    def list_commands(self, ctx):\n        base = super().list_commands(ctx)\n        lazy = sorted(self.lazy_subcommands.keys())\n        return base + lazy\n\n    def get_command(self, ctx, cmd_name):\n        if cmd_name in self.lazy_subcommands:\n            return self._lazy_load(cmd_name)\n        return super().get_command(ctx, cmd_name)\n\n    def _lazy_load(self, cmd_name):\n        # lazily loading a command, first get the module name and attribute name\n        import_path = self.lazy_subcommands[cmd_name]\n        modname, cmd_object_name = import_path.rsplit(\".\", 1)\n        # do the import\n        mod = importlib.import_module(modname)\n        # get the Command object from that module\n        cmd_object = getattr(mod, cmd_object_name)\n        # check the result to make debugging easier\n        if not isinstance(cmd_object, click.BaseCommand):\n            raise ValueError(\n                f\"Lazy loading of {import_path} failed by returning \"\n                \"a non-command object\"\n            )\n        return cmd_object\n```\n\n### Using LazyGroup To Define a CLI\n\nWith `LazyGroup` defined, it’s now possible to write a group which lazily loads its subcommands like so:\n\n``` python\n# in main.py\nimport click\nfrom lazy_group import LazyGroup\n\n@click.group(\n    cls=LazyGroup,\n    lazy_subcommands={\"foo\": \"foo.cli\", \"bar\": \"bar.cli\"},\n    help=\"main CLI command for lazy example\",\n)\ndef cli():\n    pass\n\n# in foo.py\nimport click\n\n@click.group(help=\"foo command for lazy example\")\ndef cli():\n    pass\n\n# in bar.py\nimport click\nfrom lazy_group import LazyGroup\n\n@click.group(\n    cls=LazyGroup,\n    lazy_subcommands={\"baz\": \"baz.cli\"},\n    help=\"bar command for lazy example\",\n)\ndef cli():\n    pass\n\n# in baz.py\nimport click\n\n@click.group(help=\"baz command for lazy example\")\ndef cli():\n    pass\n```\n\n### What triggers Lazy Loading?\n\nThere are several events which may trigger lazy loading by running the [`MultiCommand.get_command()`](../api/index#click.MultiCommand.get_command \"click.MultiCommand.get_command\") function. Some are intuititve, and some are less so.\n\nAll cases are described with respect to the above example, assuming the main program name is `cli`.\n\n1.  Command resolution. If a user runs `cli bar baz`, this must first resolve `bar`, and then resolve `baz`. Each subcommand resolution step does a lazy load.\n2.  Helptext rendering. In order to get the short help description of subcommands, `cli --help` will load `foo` and `bar`. Note that it will still not load `baz`.\n3.  Shell completion. In order to get the subcommands of a lazy command, `cli <TAB>` will need to resolve the subcommands of `cli`. This process will trigger the lazy loads.\n\n### Further Deferring Imports\n\nIt is possible to make the process even lazier, but it is generally more difficult the more you want to defer work.\n\nFor example, subcommands could be represented as a custom [`BaseCommand`](../api/index#click.BaseCommand \"click.BaseCommand\") subclass which defers importing the command until it is invoked, but which provides `BaseCommand.get_short_help_str()` in order to support completions and helptext. More simply, commands can be constructed whose callback functions defer any actual work until after an import.\n\nThis command definition provides `foo`, but any of the work associated with importing the “real” callback function is deferred until invocation time:\n\n``` python\n@click.command()\n@click.option(\"-n\", type=int)\n@click.option(\"-w\", type=str)\ndef foo(n, w):\n    from mylibrary import foo_concrete\n\n    foo_concrete(n, w)\n```\n\nBecause `click` builds helptext and usage info from options, arguments, and command attributes, it has no awareness that the underlying function is in any way handling a deferred import. Therefore, all `click`-provided utilities and functionality will work as normal on such a command.\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/complex/](https://click.palletsprojects.com/en/8.1.x/complex/)"
- name: make_pass_decorator()
  id: api/index#click.make_pass_decorator
  summary: Given an object type this creates a decorator that will work similar to pass_obj() but instead of passing the object of the current context, it will find the innermost context of type object_type()
  description: |-
    `click.make_pass_decorator(object_type, ensure=False)`

    Given an object type this creates a decorator that will work similar to [`pass_obj()`](#click.pass_obj "click.pass_obj") but instead of passing the object of the current context, it will find the innermost context of type `object_type()`.

    This generates a decorator that works roughly like this:

    ``` python
    from functools import update_wrapper

    def decorator(f):
        @pass_context
        def new_func(ctx, *args, **kwargs):
            obj = ctx.find_object(object_type)
            return ctx.invoke(f, obj, *args, **kwargs)
        return update_wrapper(new_func, f)
    return decorator
    ```

    Parameters:

    - **object_type** ([Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")*\[T\]*) – the type of the object to pass.
    - **ensure** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if set to `True`, a new object will be created and remembered on the context if it’s not there yet.

    Return type:

    [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[t.Callable\[te.Concatenate\[T, P\], R\]\], t.Callable\[P, R\]\]
- name: Managing Resources
  id: advanced/index#managing-resources
  summary: It can be useful to open a resource in a group, to be made available to subcommands
  description: "## Managing Resources\n\nIt can be useful to open a resource in a group, to be made available to subcommands. Many types of resources need to be closed or otherwise cleaned up after use. The standard way to do this in Python is by using a context manager with the `with` statement.\n\nFor example, the `Repo` class from [Complex Applications](../complex/index) might actually be defined as a context manager:\n\n``` python\nclass Repo:\n    def __init__(self, home=None):\n        self.home = os.path.abspath(home or \".\")\n        self.db = None\n\n    def __enter__(self):\n        path = os.path.join(self.home, \"repo.db\")\n        self.db = open_database(path)\n        return self\n\n    def __exit__(self, exc_type, exc_value, tb):\n        self.db.close()\n```\n\nOrdinarily, it would be used with the `with` statement:\n\n``` python\nwith Repo() as repo:\n    repo.db.query(...)\n```\n\nHowever, a `with` block in a group would exit and close the database before it could be used by a subcommand.\n\nInstead, use the context’s [`with_resource()`](../api/index#click.Context.with_resource \"click.Context.with_resource\") method to enter the context manager and return the resource. When the group and any subcommands finish, the context’s resources are cleaned up.\n\n``` python\n@click.group()\n@click.option(\"--repo-home\", default=\".repo\")\n@click.pass_context\ndef cli(ctx, repo_home):\n    ctx.obj = ctx.with_resource(Repo(repo_home))\n\n@cli.command()\n@click.pass_obj\ndef log(obj):\n    # obj is the repo opened in the cli group\n    for entry in obj.db.query(...):\n        click.echo(entry)\n```\n\nIf the resource isn’t a context manager, usually it can be wrapped in one using something from [`contextlib`](https://docs.python.org/3/library/contextlib.html#module-contextlib \"(in Python v3.12)\"). If that’s not possible, use the context’s [`call_on_close()`](../api/index#click.Context.call_on_close \"click.Context.call_on_close\") method to register a cleanup function.\n\n``` python\n@click.group()\n@click.option(\"--name\", default=\"repo.db\")\n@click.pass_context\ndef cli(ctx, repo_home):\n    ctx.obj = db = open_db(repo_home)\n\n    @ctx.call_on_close\n    def close_db():\n        db.record_use()\n        db.save()\n        db.close()\n```\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/advanced/](https://click.palletsprojects.com/en/8.1.x/advanced/)"
- name: Merging Multi Commands
  id: commands/index#merging-multi-commands
  summary: In addition to implementing custom multi commands, it can also be interesting to merge multiple together into one script
  description: |-
    ## Merging Multi Commands

    In addition to implementing custom multi commands, it can also be interesting to merge multiple together into one script. While this is generally not as recommended as it nests one below the other, the merging approach can be useful in some circumstances for a nicer shell experience.

    The default implementation for such a merging system is the [`CommandCollection`](../api/index#click.CommandCollection "click.CommandCollection") class. It accepts a list of other multi commands and makes the commands available on the same level.

    Example usage:

    ``` python
    import click

    @click.group()
    def cli1():
        pass

    @cli1.command()
    def cmd1():
        """Command on cli1"""

    @click.group()
    def cli2():
        pass

    @cli2.command()
    def cmd2():
        """Command on cli2"""

    cli = click.CommandCollection(sources=[cli1, cli2])

    if __name__ == '__main__':
        cli()
    ```

    And what it looks like:

    ``` shell
    $ cli --help
    Usage: cli [OPTIONS] COMMAND [ARGS]...

    Options:
      --help  Show this message and exit.

    Commands:
      cmd1  Command on cli1
      cmd2  Command on cli2
    ```

    In case a command exists in more than one source, the first source wins.
- name: Meta Variables
  id: documentation/index#meta-variables
  summary: Options and parameters accept a metavar argument that can change the meta variable in the help page
  description: |-
    ## Meta Variables

    Options and parameters accept a `metavar` argument that can change the meta variable in the help page. The default version is the parameter name in uppercase with underscores, but can be annotated differently if desired. This can be customized at all levels:

    ``` python
    @click.command(options_metavar='<options>')
    @click.option('--count', default=1, help='number of greetings',
                  metavar='<int>')
    @click.argument('name', metavar='<name>')
    def hello(count, name):
        """This script prints hello <name> <int> times."""
        for x in range(count):
            click.echo(f"Hello {name}!")
    ```

    Example:

    ``` shell
    $ hello --help
    Usage: hello <options> <name>

      This script prints hello <name> <int> times.

    Options:
      --count <int>  number of greetings
      --help         Show this message and exit.
    ```
- name: Multi Command Chaining
  id: commands/index#multi-command-chaining
  summary: New in version 3.0
  description: |-
    ## Multi Command Chaining

    Changelog

    New in version 3.0.

    Sometimes it is useful to be allowed to invoke more than one subcommand in one go. For instance if you have installed a setuptools package before you might be familiar with the `setup.py sdist bdist_wheel upload` command chain which invokes `sdist` before `bdist_wheel` before `upload`. Starting with Click 3.0 this is very simple to implement. All you have to do is to pass `chain=True` to your multicommand:

    ``` python
    @click.group(chain=True)
    def cli():
        pass


    @cli.command('sdist')
    def sdist():
        click.echo('sdist called')


    @cli.command('bdist_wheel')
    def bdist_wheel():
        click.echo('bdist_wheel called')
    ```

    Now you can invoke it like this:

    ``` shell
    $ setup.py sdist bdist_wheel
    sdist called
    bdist_wheel called
    ```

    When using multi command chaining you can only have one command (the last) use `nargs=-1` on an argument. It is also not possible to nest multi commands below chained multicommands. Other than that there are no restrictions on how they work. They can accept options and arguments as normal. The order between options and arguments is limited for chained commands. Currently only `--options argument` order is allowed.

    Another note: the [`Context.invoked_subcommand`](../api/index#click.Context.invoked_subcommand "click.Context.invoked_subcommand") attribute is a bit useless for multi commands as it will give `'*'` as value if more than one command is invoked. This is necessary because the handling of subcommands happens one after another so the exact subcommands that will be handled are not yet available when the callback fires.

    Note

    It is currently not possible for chain commands to be nested. This will be fixed in future versions of Click.
- name: Multi Command Pipelines
  id: commands/index#multi-command-pipelines
  summary: New in version 3.0
  description: |-
    ## Multi Command Pipelines

    Changelog

    New in version 3.0.

    A very common usecase of multi command chaining is to have one command process the result of the previous command. There are various ways in which this can be facilitated. The most obvious way is to store a value on the context object and process it from function to function. This works by decorating a function with [`pass_context()`](../api/index#click.pass_context "click.pass_context") after which the context object is provided and a subcommand can store its data there.

    Another way to accomplish this is to setup pipelines by returning processing functions. Think of it like this: when a subcommand gets invoked it processes all of its parameters and comes up with a plan of how to do its processing. At that point it then returns a processing function and returns.

    Where do the returned functions go? The chained multicommand can register a callback with [`MultiCommand.result_callback()`](../api/index#click.MultiCommand.result_callback "click.MultiCommand.result_callback") that goes over all these functions and then invoke them.

    To make this a bit more concrete consider this example:

    ``` python
    @click.group(chain=True, invoke_without_command=True)
    @click.option('-i', '--input', type=click.File('r'))
    def cli(input):
        pass

    @cli.result_callback()
    def process_pipeline(processors, input):
        iterator = (x.rstrip('\r\n') for x in input)
        for processor in processors:
            iterator = processor(iterator)
        for item in iterator:
            click.echo(item)

    @cli.command('uppercase')
    def make_uppercase():
        def processor(iterator):
            for line in iterator:
                yield line.upper()
        return processor

    @cli.command('lowercase')
    def make_lowercase():
        def processor(iterator):
            for line in iterator:
                yield line.lower()
        return processor

    @cli.command('strip')
    def make_strip():
        def processor(iterator):
            for line in iterator:
                yield line.strip()
        return processor
    ```

    That’s a lot in one go, so let’s go through it step by step.

    1.  The first thing is to make a [`group()`](../api/index#click.group "click.group") that is chainable. In addition to that we also instruct Click to invoke even if no subcommand is defined. If this would not be done, then invoking an empty pipeline would produce the help page instead of running the result callbacks.
    2.  The next thing we do is to register a result callback on our group. This callback will be invoked with an argument which is the list of all return values of all subcommands and then the same keyword parameters as our group itself. This means we can access the input file easily there without having to use the context object.
    3.  In this result callback we create an iterator of all the lines in the input file and then pass this iterator through all the returned callbacks from all subcommands and finally we print all lines to stdout.

    After that point we can register as many subcommands as we want and each subcommand can return a processor function to modify the stream of lines.

    One important thing of note is that Click shuts down the context after each callback has been run. This means that for instance file types cannot be accessed in the `processor` functions as the files will already be closed there. This limitation is unlikely to change because it would make resource handling much more complicated. For such it’s recommended to not use the file type and manually open the file through [`open_file()`](../api/index#click.open_file "click.open_file").

    For a more complex example that also improves upon handling of the pipelines have a look at the [imagepipe multi command chaining demo](https://github.com/pallets/click/tree/main/examples/imagepipe) in the Click repository. It implements a pipeline based image editing tool that has a nice internal structure for the pipelines.
- name: Multi Value Options
  id: options/index#multi-value-options
  summary: Sometimes, you have options that take more than one argument
  description: |-
    ## Multi Value Options

    Sometimes, you have options that take more than one argument. For options, only a fixed number of arguments is supported. This can be configured by the `nargs` parameter. The values are then stored as a tuple.

    ``` python
    @click.command()
    @click.option('--pos', nargs=2, type=float)
    def findme(pos):
        a, b = pos
        click.echo(f"{a} / {b}")
    ```

    And on the command line:

    ``` shell
    $ findme --pos 2.0 3.0
    2.0 / 3.0
    ```
- name: MultiCommand
  id: api/index#click.MultiCommand
  summary: A multi command is the basic implementation of a command that dispatches to subcommands
  description: |-
    `class click.MultiCommand(name=None, invoke_without_command=False, no_args_is_help=None, subcommand_metavar=None, chain=False, result_callback=None, **attrs)`

    A multi command is the basic implementation of a command that dispatches to subcommands. The most common version is the [`Group`](#click.Group "click.Group").

    Parameters:

    - **invoke_without_command** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – this controls how the multi command itself is invoked. By default it’s only invoked if a subcommand is provided.
    - **no_args_is_help** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – this controls what happens if no arguments are provided. This option is enabled by default if `invoke_without_command` is disabled or disabled if it’s enabled. If enabled this will add `--help` as argument if no arguments are passed.
    - **subcommand_metavar** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – the string that is used in the documentation to indicate the subcommand place.
    - **chain** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if this is set to `True` chaining of multiple subcommands is enabled. This restricts the form of commands in that they cannot have optional arguments but it allows multiple commands to be chained together.
    - **result_callback** ([Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")*\[\[...\],* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]* *\|* *None*) – The result callback to attach to this multi command. This can be set or changed later with the [`result_callback()`](#click.MultiCommand.result_callback "click.MultiCommand.result_callback") decorator.
    - **attrs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – Other command arguments described in [`Command`](#click.Command "click.Command").
    - **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) –
- name: MultiCommand.allow_extra_args
  id: api/index#click.MultiCommand.allow_extra_args
  summary: the default for the Context.allow_extra_args flag
  description: |-
    `allow_extra_args = True`

    the default for the [`Context.allow_extra_args`](#click.Context.allow_extra_args "click.Context.allow_extra_args") flag.
- name: MultiCommand.allow_interspersed_args
  id: api/index#click.MultiCommand.allow_interspersed_args
  summary: the default for the Context.allow_interspersed_args flag
  description: |-
    `allow_interspersed_args = False`

    the default for the [`Context.allow_interspersed_args`](#click.Context.allow_interspersed_args "click.Context.allow_interspersed_args") flag.
- name: MultiCommand.collect_usage_pieces()
  id: api/index#click.MultiCommand.collect_usage_pieces
  summary: Returns all the pieces that go into the usage line and returns it as a list of strings
  description: |-
    `collect_usage_pieces(ctx)`

    Returns all the pieces that go into the usage line and returns it as a list of strings.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\]
- name: MultiCommand.format_commands()
  id: api/index#click.MultiCommand.format_commands
  summary: Extra format methods for multi methods that adds all the commands after the options
  description: |-
    `format_commands(ctx, formatter)`

    Extra format methods for multi methods that adds all the commands after the options.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **formatter** ([HelpFormatter](#click.HelpFormatter "click.formatting.HelpFormatter")) –

    Return type:

    None
- name: MultiCommand.format_options()
  id: api/index#click.MultiCommand.format_options
  summary: Writes all the options into the formatter if they exist
  description: |-
    `format_options(ctx, formatter)`

    Writes all the options into the formatter if they exist.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **formatter** ([HelpFormatter](#click.HelpFormatter "click.formatting.HelpFormatter")) –

    Return type:

    None
- name: MultiCommand.get_command()
  id: api/index#click.MultiCommand.get_command
  summary: Given a context and a command name, this returns a Command object if it exists or returns None
  description: |-
    `get_command(ctx, cmd_name)`

    Given a context and a command name, this returns a [`Command`](#click.Command "click.Command") object if it exists or returns `None`.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **cmd_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –

    Return type:

    [Command](#click.Command "click.core.Command") \| None
- name: MultiCommand.invoke()
  id: api/index#click.MultiCommand.invoke
  summary: Given a context, this invokes the attached callback (if it exists) in the right way
  description: |-
    `invoke(ctx)`

    Given a context, this invokes the attached callback (if it exists) in the right way.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")
- name: MultiCommand.list_commands()
  id: api/index#click.MultiCommand.list_commands
  summary: Returns a list of subcommand names in the order they should appear
  description: |-
    `list_commands(ctx)`

    Returns a list of subcommand names in the order they should appear.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\]
- name: MultiCommand.parse_args()
  id: api/index#click.MultiCommand.parse_args
  summary: Given a context and a list of arguments this creates the parser and parses the arguments, then modifies the context as necessary
  description: |-
    `parse_args(ctx, args)`

    Given a context and a list of arguments this creates the parser and parses the arguments, then modifies the context as necessary. This is automatically invoked by `make_context()`.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **args** ([List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]*) –

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\]
- name: MultiCommand.result_callback()
  id: api/index#click.MultiCommand.result_callback
  summary: Adds a result callback to the command
  description: |-
    `result_callback(replace=False)`

    Adds a result callback to the command. By default if a result callback is already registered this will chain them but this can be disabled with the `replace` parameter. The result callback is invoked with the return value of the subcommand (or the list of return values from all subcommands if chaining is enabled) as well as the parameters as they would be passed to the main callback.

    Example:

    ``` python
    @click.group()
    @click.option('-i', '--input', default=23)
    def cli(input):
        return 42

    @cli.result_callback()
    def process_result(result, input):
        return result + input
    ```

    Parameters:

    **replace** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if set to `True` an already existing result callback will be removed.

    Return type:

    [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[*F*\], *F*\]

    Changelog

    Changed in version 8.0: Renamed from `resultcallback`.

    New in version 3.0.
- name: MultiCommand.shell_complete()
  id: api/index#click.MultiCommand.shell_complete
  summary: Return a list of completions for the incomplete value
  description: |-
    `shell_complete(ctx, incomplete)`

    Return a list of completions for the incomplete value. Looks at the names of options, subcommands, and chained multi-commands.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) – Invocation context for this command.
    - **incomplete** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Value being completed. May be empty.

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[CompletionItem](#click.shell_completion.CompletionItem "click.shell_completion.CompletionItem")\]

    Changelog

    New in version 8.0.
- name: MultiCommand.to_info_dict()
  id: api/index#click.MultiCommand.to_info_dict
  summary: Gather information that could be useful for a tool generating user-facing documentation
  description: |-
    `to_info_dict(ctx)`

    Gather information that could be useful for a tool generating user-facing documentation. This traverses the entire structure below this command.

    Use [`click.Context.to_info_dict()`](#click.Context.to_info_dict "click.Context.to_info_dict") to traverse the entire CLI structure.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) – A [`Context`](#click.Context "click.Context") representing this command.

    Return type:

    [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)"), [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]

    Changelog

    New in version 8.0.
- name: Multiple Options
  id: options/index#multiple-options
  summary: Similarly to nargs, there is also the case of wanting to support a parameter being provided multiple times and have all the values recorded – not just the last one
  description: |-
    ## Multiple Options

    Similarly to `nargs`, there is also the case of wanting to support a parameter being provided multiple times and have all the values recorded – not just the last one. For instance, `git commit -m foo -m bar` would record two lines for the commit message: `foo` and `bar`. This can be accomplished with the `multiple` flag:

    Example:

    ``` python
    @click.command()
    @click.option('--message', '-m', multiple=True)
    def commit(message):
        click.echo('\n'.join(message))
    ```

    And on the command line:

    ``` shell
    $ commit -m foo -m bar
    foo
    bar
    ```

    When passing a `default` with `multiple=True`, the default value must be a list or tuple, otherwise it will be interpreted as a list of single characters.

    ``` python
    @click.option("--format", multiple=True, default=["json"])
    ```
- name: Multiple Values from Environment Values
  id: options/index#multiple-values-from-environment-values
  summary: As options can accept multiple values, pulling in such values from environment variables (which are strings) is a bit more complex
  description: |-
    ## Multiple Values from Environment Values

    As options can accept multiple values, pulling in such values from environment variables (which are strings) is a bit more complex. The way Click solves this is by leaving it up to the type to customize this behavior. For both `multiple` and `nargs` with values other than `1`, Click will invoke the [`ParamType.split_envvar_value()`](../api/index#click.ParamType.split_envvar_value "click.ParamType.split_envvar_value") method to perform the splitting.

    The default implementation for all types is to split on whitespace. The exceptions to this rule are the [`File`](../api/index#click.File "click.File") and [`Path`](../api/index#click.Path "click.Path") types which both split according to the operating system’s path splitting rules. On Unix systems like Linux and OS X, the splitting happens for those on every colon (`:`), and for Windows, on every semicolon (`;`).

    Example usage:

    ``` python
    @click.command()
    @click.option('paths', '--path', envvar='PATHS', multiple=True,
                  type=click.Path())
    def perform(paths):
        for path in paths:
            click.echo(path)

    if __name__ == '__main__':
        perform()
    ```

    And from the command line:

    ``` shell
    $ export PATHS=./foo/bar:./test
    $ perform
    ./foo/bar
    ./test
    ```
- name: Name Your Options
  id: options/index#name-your-options
  summary: Options have a name that will be used as the Python argument name when calling the decorated function
  description: |-
    ## Name Your Options

    Options have a name that will be used as the Python argument name when calling the decorated function. This can be inferred from the option names or given explicitly. Names are given as position arguments to the decorator.

    A name is chosen in the following order

    1.  If a name is not prefixed, it is used as the Python argument name and not treated as an option name on the command line.
    2.  If there is at least one name prefixed with two dashes, the first one given is used as the name.
    3.  The first name prefixed with one dash is used otherwise.

    To get the Python argument name, the chosen name is converted to lower case, up to two dashes are removed as the prefix, and other dashes are converted to underscores.

    ``` python
    @click.command()
    @click.option('-s', '--string-to-echo')
    def echo(string_to_echo):
        click.echo(string_to_echo)
    ```

    ``` python
    @click.command()
    @click.option('-s', '--string-to-echo', 'string')
    def echo(string):
        click.echo(string)
    ```

    - `"-f", "--foo-bar"`, the name is `foo_bar`
    - `"-x"`, the name is `x`
    - `"-f", "--filename", "dest"`, the name is `dest`
    - `"--CamelCase"`, the name is `camelcase`
    - `"-f", "-fb"`, the name is `f`
    - `"--f", "--foo-bar"`, the name is `f`
    - `"---f"`, the name is `_f`
- name: Nested Handling and Contexts
  id: commands/index#nested-handling-and-contexts
  summary: As you can see from the earlier example, the basic command group accepts a debug argument which is passed to its callback, but not to the sync command itself
  description: |-
    ## Nested Handling and Contexts

    As you can see from the earlier example, the basic command group accepts a debug argument which is passed to its callback, but not to the sync command itself. The sync command only accepts its own arguments.

    This allows tools to act completely independent of each other, but how does one command talk to a nested one? The answer to this is the [`Context`](../api/index#click.Context "click.Context").

    Each time a command is invoked, a new context is created and linked with the parent context. Normally, you can’t see these contexts, but they are there. Contexts are passed to parameter callbacks together with the value automatically. Commands can also ask for the context to be passed by marking themselves with the [`pass_context()`](../api/index#click.pass_context "click.pass_context") decorator. In that case, the context is passed as first argument.

    The context can also carry a program specified object that can be used for the program’s purposes. What this means is that you can build a script like this:

    ``` python
    @click.group()
    @click.option('--debug/--no-debug', default=False)
    @click.pass_context
    def cli(ctx, debug):
        # ensure that ctx.obj exists and is a dict (in case `cli()` is called
        # by means other than the `if` block below)
        ctx.ensure_object(dict)

        ctx.obj['DEBUG'] = debug

    @cli.command()
    @click.pass_context
    def sync(ctx):
        click.echo(f"Debug is {'on' if ctx.obj['DEBUG'] else 'off'}")

    if __name__ == '__main__':
        cli(obj={})
    ```

    If the object is provided, each context will pass the object onwards to its children, but at any level a context’s object can be overridden. To reach to a parent, `context.parent` can be used.

    In addition to that, instead of passing an object down, nothing stops the application from modifying global state. For instance, you could just flip a global `DEBUG` variable and be done with it.
- name: Nesting Commands
  id: quickstart/index#nesting-commands
  summary: Commands can be attached to other commands of type Group
  description: |-
    ## Nesting Commands

    Commands can be attached to other commands of type [`Group`](../api/index#click.Group "click.Group"). This allows arbitrary nesting of scripts. As an example here is a script that implements two commands for managing databases:

    ``` python
    @click.group()
    def cli():
        pass

    @click.command()
    def initdb():
        click.echo('Initialized the database')

    @click.command()
    def dropdb():
        click.echo('Dropped the database')

    cli.add_command(initdb)
    cli.add_command(dropdb)
    ```

    As you can see, the [`group()`](../api/index#click.group "click.group") decorator works like the [`command()`](../api/index#click.command "click.command") decorator, but creates a [`Group`](../api/index#click.Group "click.Group") object instead which can be given multiple subcommands that can be attached with [`Group.add_command()`](../api/index#click.Group.add_command "click.Group.add_command").

    For simple scripts, it’s also possible to automatically attach and create a command by using the [`Group.command()`](../api/index#click.Group.command "click.Group.command") decorator instead. The above script can instead be written like this:

    ``` python
    @click.group()
    def cli():
        pass

    @cli.command()
    def initdb():
        click.echo('Initialized the database')

    @cli.command()
    def dropdb():
        click.echo('Dropped the database')
    ```

    You would then invoke the [`Group`](../api/index#click.Group "click.Group") in your setuptools entry points or other invocations:

    ``` python
    if __name__ == '__main__':
        cli()
    ```
- name: NoSuchOption
  id: api/index#click.NoSuchOption
  summary: Raised if click attempted to handle an option that does not exist
  description: |-
    `exception click.NoSuchOption(option_name, message=None, possibilities=None, ctx=None)`

    Raised if click attempted to handle an option that does not exist.

    Changelog

    New in version 4.0.

    Parameters:

    - **option_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –
    - **message** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) –
    - **possibilities** ([Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]* *\|* *None*) –
    - **ctx** ([Context](#click.Context "click.Context") *\|* *None*) –

    Return type:

    None
- name: open_file()
  id: api/index#click.open_file
  summary: Open a file, with extra behavior to handle '-' to indicate a standard stream, lazy open on write, and atomic write
  description: |-
    `click.open_file(filename, mode='r', encoding=None, errors='strict', lazy=False, atomic=False)`

    Open a file, with extra behavior to handle `'-'` to indicate a standard stream, lazy open on write, and atomic write. Similar to the behavior of the [`File`](#click.File "click.File") param type.

    If `'-'` is given to open `stdout` or `stdin`, the stream is wrapped so that using it in a context manager will not close it. This makes it possible to use the function without accidentally closing a standard stream:

    ``` python
    with open_file(filename) as f:
        ...
    ```

    Parameters:

    - **filename** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* [PathLike](https://docs.python.org/3/library/os.html#os.PathLike "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]*) – The name or Path of the file to open, or `'-'` for `stdin`/`stdout`.
    - **mode** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – The mode in which to open the file.
    - **encoding** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – The encoding to decode or encode a file opened in text mode.
    - **errors** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – The error handling mode.
    - **lazy** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Wait to open the file until it is accessed. For read mode, the file is temporarily opened to raise access errors early, then closed until it is read again.
    - **atomic** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Write to a temporary file and replace the given file on close.

    Return type:

    [IO](https://docs.python.org/3/library/typing.html#typing.IO "(in Python v3.12)")\[[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]

    Changelog

    New in version 3.0.
- name: Option
  id: api/index#click.Option
  summary: Attaches an option to the command
  description: |-
    `click.option(*param_decls, cls=None, **attrs)`

    Attaches an option to the command. All positional arguments are passed as parameter declarations to [`Option`](#click.Option "click.Option"); all keyword arguments are forwarded unchanged (except `cls`). This is equivalent to creating an [`Option`](#click.Option "click.Option") instance manually and attaching it to the [`Command.params`](#click.Command.params "click.Command.params") list.

    For the default option class, refer to [`Option`](#click.Option "click.Option") and [`Parameter`](#click.Parameter "click.Parameter") for descriptions of parameters.

    Parameters:

    - **cls** ([Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")*\[*[Option](#click.Option "click.core.Option")*\]* *\|* *None*) – the option class to instantiate. This defaults to [`Option`](#click.Option "click.Option").
    - **param_decls** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Passed as positional arguments to the constructor of `cls`.
    - **attrs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – Passed as keyword arguments to the constructor of `cls`.

    Return type:

    [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[*FC*\], *FC*\]
- name: Option Prompts
  id: prompts/index#option-prompts
  summary: Option prompts are integrated into the option interface
  description: |-
    ## Option Prompts

    Option prompts are integrated into the option interface. See [Prompting](../options/index#option-prompting) for more information. Internally, it automatically calls either [`prompt()`](../api/index#click.prompt "click.prompt") or [`confirm()`](../api/index#click.confirm "click.confirm") as necessary.
- name: option()
  id: api/index#click.option
  summary: Attaches an option to the command
  description: |-
    `click.option(*param_decls, cls=None, **attrs)`

    Attaches an option to the command. All positional arguments are passed as parameter declarations to [`Option`](#click.Option "click.Option"); all keyword arguments are forwarded unchanged (except `cls`). This is equivalent to creating an [`Option`](#click.Option "click.Option") instance manually and attaching it to the [`Command.params`](#click.Command.params "click.Command.params") list.

    For the default option class, refer to [`Option`](#click.Option "click.Option") and [`Parameter`](#click.Parameter "click.Parameter") for descriptions of parameters.

    Parameters:

    - **cls** ([Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")*\[*[Option](#click.Option "click.core.Option")*\]* *\|* *None*) – the option class to instantiate. This defaults to [`Option`](#click.Option "click.Option").
    - **param_decls** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Passed as positional arguments to the constructor of `cls`.
    - **attrs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – Passed as keyword arguments to the constructor of `cls`.

    Return type:

    [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[*FC*\], *FC*\]
- name: Option-Like Arguments
  id: arguments/index#option-like-arguments
  summary: Sometimes, you want to process arguments that look like options
  description: "## Option-Like Arguments\n\nSometimes, you want to process arguments that look like options. For instance, imagine you have a file named `-foo.txt`. If you pass this as an argument in this manner, Click will treat it as an option.\n\nTo solve this, Click does what any POSIX style command line script does, and that is to accept the string `--` as a separator for options and arguments. After the `--` marker, all further parameters are accepted as arguments.\n\nExample usage:\n\n``` python\n@click.command()\n@click.argument('files', nargs=-1, type=click.Path())\ndef touch(files):\n    \"\"\"Print all FILES file names.\"\"\"\n    for filename in files:\n        click.echo(filename)\n```\n\nAnd from the command line:\n\n``` shell\n$ touch -- -foo.txt bar.txt\n-foo.txt\nbar.txt\n```\n\nIf you don’t like the `--` marker, you can set ignore_unknown_options to True to avoid checking unknown options:\n\n``` python\n@click.command(context_settings={\"ignore_unknown_options\": True})\n@click.argument('files', nargs=-1, type=click.Path())\ndef touch(files):\n    \"\"\"Print all FILES file names.\"\"\"\n    for filename in files:\n        click.echo(filename)\n```\n\nAnd from the command line:\n\n``` shell\n$ touch -foo.txt bar.txt\n-foo.txt\nbar.txt\n```\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/arguments/](https://click.palletsprojects.com/en/8.1.x/arguments/)"
- name: Optional Value
  id: options/index#optional-value
  summary: Providing the value to an option can be made optional, in which case providing only the option’s flag without a value will either show a prompt or use its flag_value
  description: "## Optional Value\n\nProviding the value to an option can be made optional, in which case providing only the option’s flag without a value will either show a prompt or use its `flag_value`.\n\nSetting `is_flag=False, flag_value=value` tells Click that the option can still be passed a value, but if only the flag is given the `flag_value` is used.\n\n``` python\n@click.command()\n@click.option(\"--name\", is_flag=False, flag_value=\"Flag\", default=\"Default\")\ndef hello(name):\n    click.echo(f\"Hello, {name}!\")\n```\n\n``` shell\n$ hello\nHello, Default!\n$ hello --name Value\nHello, Value!\n$ hello --name\nHello, Flag!\n```\n\nIf the option has `prompt` enabled, then setting `prompt_required=False` tells Click to only show the prompt if the option’s flag is given, instead of if the option is not provided at all.\n\n``` python\n@click.command()\n@click.option('--name', prompt=True, prompt_required=False, default=\"Default\")\ndef hello(name):\n    click.echo(f\"Hello {name}!\")\n```\n\n``` shell\n$ hello\nHello Default!\n$ hello --name Value\nHello Value!\n$ hello --name\nName [Default]: \n```\n\nIf `required=True`, then the option will still prompt if it is not given, but it will also prompt if only the flag is given.\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/options/](https://click.palletsprojects.com/en/8.1.x/options/)"
- name: OptionParser
  id: api/index#click.OptionParser
  summary: The option parser is an internal class that is ultimately used to parse options and arguments
  description: |-
    `class click.OptionParser(ctx=None)`

    The option parser is an internal class that is ultimately used to parse options and arguments. It’s modelled after optparse and brings a similar but vastly simplified API. It should generally not be used directly as the high level Click classes wrap it for you.

    It’s not nearly as extensible as optparse or argparse as it does not implement features that are implemented on a higher level (such as types or defaults).

    Parameters:

    **ctx** ([Context](#click.Context "click.Context") *\|* *None*) – optionally the [`Context`](#click.Context "click.Context") where this parser should go with.
- name: OptionParser.add_argument()
  id: api/index#click.OptionParser.add_argument
  summary: Adds a positional argument named dest to the parser
  description: |-
    `add_argument(obj, dest, nargs=1)`

    Adds a positional argument named `dest` to the parser.

    The `obj` can be used to identify the option in the order list that is returned from the parser.

    Parameters:

    - **obj** (*CoreArgument*) –
    - **dest** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) –
    - **nargs** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")) –

    Return type:

    None
- name: OptionParser.add_option()
  id: api/index#click.OptionParser.add_option
  summary: Adds a new option named dest to the parser
  description: |-
    `add_option(obj, opts, dest, action=None, nargs=1, const=None)`

    Adds a new option named `dest` to the parser. The destination is not inferred (unlike with optparse) and needs to be explicitly provided. Action can be any of `store`, `store_const`, `append`, `append_const` or `count`.

    The `obj` can be used to identify the option in the order list that is returned from the parser.

    Parameters:

    - **obj** (*CoreOption*) –
    - **opts** ([Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]*) –
    - **dest** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) –
    - **action** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) –
    - **nargs** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")) –
    - **const** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)") *\|* *None*) –

    Return type:

    None
- name: OptionParser.allow_interspersed_args
  id: api/index#click.OptionParser.allow_interspersed_args
  summary: This controls how the parser deals with interspersed arguments
  description: |-
    `allow_interspersed_args: bool`

    This controls how the parser deals with interspersed arguments. If this is set to `False`, the parser will stop on the first non-option. Click uses this to implement nested subcommands safely.
- name: OptionParser.ctx
  id: api/index#click.OptionParser.ctx
  summary: The Context for this parser
  description: |-
    `ctx`

    The [`Context`](#click.Context "click.Context") for this parser. This might be `None` for some advanced use cases.
- name: OptionParser.ignore_unknown_options
  id: api/index#click.OptionParser.ignore_unknown_options
  summary: This tells the parser how to deal with unknown options
  description: |-
    `ignore_unknown_options: bool`

    This tells the parser how to deal with unknown options. By default it will error out (which is sensible), but there is a second mode where it will ignore it and continue processing after shifting all the unknown options into the resulting args.
- name: OptionParser.parse_args()
  id: api/index#click.OptionParser.parse_args
  summary: Parses positional arguments and returns (values, args, order) for the parsed options and arguments as well as the leftover arguments if there are any
  description: |-
    `parse_args(args)`

    Parses positional arguments and returns `(values, args, order)` for the parsed options and arguments as well as the leftover arguments if there are any. The order is a list of objects as they appear on the command line. If arguments appear multiple times they will be memorized multiple times as well.

    Parameters:

    **args** ([List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]*) –

    Return type:

    [Tuple](https://docs.python.org/3/library/typing.html#typing.Tuple "(in Python v3.12)")\[[Dict](https://docs.python.org/3/library/typing.html#typing.Dict "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)"), [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\], [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\], [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[CoreParameter\]\]

    ## Shell Completion

    See [Shell Completion](../shell-completion/index) for information about enabling and customizing Click’s shell completion system.
- name: Other Prefix Characters
  id: options/index#other-prefix-characters
  summary: Click can deal with alternative prefix characters other than - for options
  description: |-
    ## Other Prefix Characters

    Click can deal with alternative prefix characters other than `-` for options. This is for instance useful if you want to handle slashes as parameters `/` or something similar. Note that this is strongly discouraged in general because Click wants developers to stay close to POSIX semantics. However in certain situations this can be useful:

    ``` python
    @click.command()
    @click.option('+w/-w')
    def chmod(w):
        click.echo(f"writable={w}")

    if __name__ == '__main__':
        chmod()
    ```

    And from the command line:

    ``` shell
    $ chmod +w
    writable=True
    $ chmod -w
    writable=False
    ```

    Note that if you are using `/` as prefix character and you want to use a boolean flag you need to separate it with `;` instead of `/`:

    ``` python
    @click.command()
    @click.option('/debug;/no-debug')
    def log(debug):
        click.echo(f"debug={debug}")

    if __name__ == '__main__':
        log()
    ```
- name: Overriding Defaults
  id: commands/index#overriding-defaults
  summary: By default, the default value for a parameter is pulled from the default flag that is provided when it’s defined, but that’s not the only place defaults can be loaded from
  description: |-
    ## Overriding Defaults

    By default, the default value for a parameter is pulled from the `default` flag that is provided when it’s defined, but that’s not the only place defaults can be loaded from. The other place is the `Context.default_map` (a dictionary) on the context. This allows defaults to be loaded from a configuration file to override the regular defaults.

    This is useful if you plug in some commands from another package but you’re not satisfied with the defaults.

    The default map can be nested arbitrarily for each subcommand:

    ``` python
    default_map = {
        "debug": True,  # default for a top level option
        "runserver": {"port": 5000}  # default for a subcommand
    }
    ```

    The default map can be provided when the script is invoked, or overridden at any point by commands. For instance, a top-level command could load the defaults from a configuration file.

    Example usage:

    ``` python
    import click

    @click.group()
    def cli():
        pass

    @cli.command()
    @click.option('--port', default=8000)
    def runserver(port):
        click.echo(f"Serving on http://127.0.0.1:{port}/")

    if __name__ == '__main__':
        cli(default_map={
            'runserver': {
                'port': 5000
            }
        })
    ```

    And in action:

    ``` shell
    $ cli runserver
    Serving on http://127.0.0.1:5000/
    ```
- name: Overriding Value Completion
  id: shell-completion/index#overriding-value-completion
  summary: Value completions for a parameter can be customized without a custom type by providing a shell_complete function
  description: |-
    ## Overriding Value Completion

    Value completions for a parameter can be customized without a custom type by providing a `shell_complete` function. The function is used instead of any completion provided by the type. It is passed 3 keyword arguments:

    - `ctx` - The current command context.
    - `param` - The current parameter requesting completion.
    - `incomplete` - The partial word that is being completed. May be an empty string if no characters have been entered yet.

    It must return a list of [`CompletionItem`](../api/index#click.shell_completion.CompletionItem "click.shell_completion.CompletionItem") objects, or as a shortcut it can return a list of strings.

    In this example, the command will suggest environment variables that start with the incomplete value.

    ``` python
    def complete_env_vars(ctx, param, incomplete):
        return [k for k in os.environ if k.startswith(incomplete)]

    @click.command()
    @click.argument("name", shell_complete=complete_env_vars)
    def cli(name):
        click.echo(f"Name: {name}")
        click.echo(f"Value: {os.environ[name]}")
    ```
- name: Pager Support
  id: utils/index#pager-support
  summary: In some situations, you might want to show long texts on the terminal and let a user scroll through it
  description: |-
    ## Pager Support

    In some situations, you might want to show long texts on the terminal and let a user scroll through it. This can be achieved by using the [`echo_via_pager()`](../api/index#click.echo_via_pager "click.echo_via_pager") function which works similarly to the [`echo()`](../api/index#click.echo "click.echo") function, but always writes to stdout and, if possible, through a pager.

    Example:

    ``` python
    @click.command()
    def less():
        click.echo_via_pager("\n".join(f"Line {idx}" for idx in range(200)))
    ```

    If you want to use the pager for a lot of text, especially if generating everything in advance would take a lot of time, you can pass a generator (or generator function) instead of a string:

    ``` python
    def _generate_output():
        for idx in range(50000):
            yield f"Line {idx}\n"

    @click.command()
    def less():
        click.echo_via_pager(_generate_output())
    ```
- name: Parameter
  id: api/index#click.Parameter
  summary: 'A parameter to a command comes in two versions: they are either Options or Arguments'
  description: |-
    `class click.Parameter(param_decls=None, type=None, required=False, default=None, callback=None, nargs=None, multiple=False, metavar=None, expose_value=True, is_eager=False, envvar=None, shell_complete=None)`

    A parameter to a command comes in two versions: they are either [`Option`](#click.Option "click.Option")s or [`Argument`](#click.Argument "click.Argument")s. Other subclasses are currently not supported by design as some of the internals for parsing are intentionally not finalized.

    Some settings are supported by both options and arguments.

    Parameters:

    - **param_decls** ([Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]* *\|* *None*) – the parameter declarations for this option or argument. This is a list of flags or argument names.
    - **type** ([ParamType](#click.ParamType "click.types.ParamType") *\|* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)") *\|* *None*) – the type that should be used. Either a [`ParamType`](#click.ParamType "click.ParamType") or a Python type. The latter is converted into the former automatically if supported.
    - **required** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – controls if this is optional or not.
    - **default** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)") *\|* [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")*\[\[\],* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]* *\|* *None*) – the default value if omitted. This can also be a callable, in which case it’s invoked when the default is needed without any arguments.
    - **callback** ([Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")*\[\[*[Context](#click.Context "click.core.Context")*,* [Parameter](#click.Parameter "click.Parameter")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\],* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]* *\|* *None*) – A function to further process or validate the value after type conversion. It is called as `f(ctx, param, value)` and must return the value. It is called for all sources, including prompts.
    - **nargs** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)") *\|* *None*) – the number of arguments to match. If not `1` the return value is a tuple instead of single value. The default for nargs is `1` (except if the type is a tuple, then it’s the arity of the tuple). If `nargs=-1`, all remaining parameters are collected.
    - **metavar** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – how the value is represented in the help page.
    - **expose_value** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if this is `True` then the value is passed onwards to the command callback and stored on the context, otherwise it’s skipped.
    - **is_eager** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – eager values are processed before non eager ones. This should not be set for arguments or it will inverse the order of processing.
    - **envvar** ([Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]* *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – a string or list of strings that are environment variables that should be checked.
    - **shell_complete** ([Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")*\[\[*[Context](#click.Context "click.core.Context")*,* [Parameter](#click.Parameter "click.Parameter")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\],* [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")*\[*[CompletionItem](#click.shell_completion.CompletionItem "click.shell_completion.CompletionItem")*\]* *\|* [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]\]* *\|* *None*) – A function that returns custom shell completions. Used instead of the param’s type completion if given. Takes `ctx, param, incomplete` and must return a list of [`CompletionItem`](#click.shell_completion.CompletionItem "click.shell_completion.CompletionItem") or a list of strings.
    - **multiple** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –

    Changelog

    Changed in version 8.0: `process_value` validates required parameters and bounded `nargs`, and invokes the parameter callback before returning the value. This allows the callback to validate prompts. `full_process_value` is removed.

    Changed in version 8.0: `autocompletion` is renamed to `shell_complete` and has new semantics described above. The old name is deprecated and will be removed in 8.1, until then it will be wrapped to match the new requirements.

    Changed in version 8.0: For `multiple=True, nargs>1`, the default must be a list of tuples.

    Changed in version 8.0: Setting a default is no longer required for `nargs>1`, it will default to `None`. `multiple=True` or `nargs=-1` will default to `()`.

    Changed in version 7.1: Empty environment variables are ignored rather than taking the empty string value. This makes it possible for scripts to clear variables if they can’t unset them.

    Changed in version 2.0: Changed signature for parameter callback to also be passed the parameter. The old callback format will still work, but it will raise a warning to give you a chance to migrate the code easier.
- name: Parameter Modifications
  id: advanced/index#parameter-modifications
  summary: Parameters (options and arguments) are forwarded to the command callbacks as you have seen
  description: |-
    ## Parameter Modifications

    Parameters (options and arguments) are forwarded to the command callbacks as you have seen. One common way to prevent a parameter from being passed to the callback is the `expose_value` argument to a parameter which hides the parameter entirely. The way this works is that the [`Context`](../api/index#click.Context "click.Context") object has a [`params`](../api/index#click.Context.params "click.Context.params") attribute which is a dictionary of all parameters. Whatever is in that dictionary is being passed to the callbacks.

    This can be used to make up additional parameters. Generally this pattern is not recommended but in some cases it can be useful. At the very least it’s good to know that the system works this way.

    ``` python
    import urllib

    def open_url(ctx, param, value):
        if value is not None:
            ctx.params['fp'] = urllib.urlopen(value)
            return value

    @click.command()
    @click.option('--url', callback=open_url)
    def cli(url, fp=None):
        if fp is not None:
            click.echo(f"{url}: {fp.code}")
    ```

    In this case the callback returns the URL unchanged but also passes a second `fp` value to the callback. What’s more recommended is to pass the information in a wrapper however:

    ``` python
    import urllib

    class URL(object):

        def __init__(self, url, fp):
            self.url = url
            self.fp = fp

    def open_url(ctx, param, value):
        if value is not None:
            return URL(value, urllib.urlopen(value))

    @click.command()
    @click.option('--url', callback=open_url)
    def cli(url):
        if url is not None:
            click.echo(f"{url.url}: {url.fp.code}")
    ```
- name: Parameter Names
  id: parameters/index#parameter-names
  summary: Parameters (both options and arguments) have a name that will be used as the Python argument name when calling the decorated function with values
  description: |-
    ## Parameter Names

    Parameters (both options and arguments) have a name that will be used as the Python argument name when calling the decorated function with values.

    Arguments take only one positional name. To provide a different name for use in help text, see [Truncating Help Texts](../documentation/index#doc-meta-variables).

    Options can have many names that may be prefixed with one or two dashes. Names with one dash are parsed as short options, names with two are parsed as long options. If a name is not prefixed, it is used as the Python argument name and not parsed as an option name. Otherwise, the first name with a two dash prefix is used, or the first with a one dash prefix if there are none with two. The prefix is removed and dashes are converted to underscores to get the Python argument name.
- name: Parameter Types
  id: parameters/index#parameter-types
  summary: Parameters can be of different types
  description: |-
    ## Parameter Types

    Parameters can be of different types. Types can be implemented with different behavior and some are supported out of the box:

    `str / click.STRING:`

    The default parameter type which indicates unicode strings.

    `int / click.INT:`

    A parameter that only accepts integers.

    `float / click.FLOAT:`

    A parameter that only accepts floating point values.

    `bool / click.BOOL:`

    A parameter that accepts boolean values. This is automatically used for boolean flags. The string values “1”, “true”, “t”, “yes”, “y”, and “on” convert to `True`. “0”, “false”, “f”, “no”, “n”, and “off” convert to `False`.

    `click.UUID:`

    A parameter that accepts UUID values. This is not automatically guessed but represented as [`uuid.UUID`](https://docs.python.org/3/library/uuid.html#uuid.UUID "(in Python v3.12)").

    *class*click.File(*mode='r'*, *encoding=None*, *errors='strict'*, *lazy=None*, *atomic=False*)

    Declares a parameter to be a file for reading or writing. The file is automatically closed once the context tears down (after the command finished working).

    Files can be opened for reading or writing. The special value `-` indicates stdin or stdout depending on the mode.

    By default, the file is opened for reading text data, but it can also be opened in binary mode or for writing. The encoding parameter can be used to force a specific encoding.

    The `lazy` flag controls if the file should be opened immediately or upon first IO. The default is to be non-lazy for standard input and output streams as well as files opened for reading, `lazy` otherwise. When opening a file lazily for reading, it is still opened temporarily for validation, but will not be held open until first IO. lazy is mainly useful when opening for writing to avoid creating the file until it is needed.

    Starting with Click 2.0, files can also be opened atomically in which case all writes go into a separate file in the same folder and upon completion the file will be moved over to the original location. This is useful if a file regularly read by other users is modified.

    See [File Arguments](../arguments/index#file-args) for more information.

    Parameters:

    - **mode** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –
    - **encoding** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) –
    - **errors** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) –
    - **lazy** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) –
    - **atomic** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –

    *class*click.Path(*exists=False*, *file_okay=True*, *dir_okay=True*, *writable=False*, *readable=True*, *resolve_path=False*, *allow_dash=False*, *path_type=None*, *executable=False*)

    The `Path` type is similar to the [`File`](../api/index#click.File "click.File") type, but returns the filename instead of an open file. Various checks can be enabled to validate the type of file and permissions.

    Parameters:

    - **exists** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – The file or directory needs to exist for the value to be valid. If this is not set to `True`, and the file does not exist, then all further checks are silently skipped.
    - **file_okay** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Allow a file as a value.
    - **dir_okay** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Allow a directory as a value.
    - **readable** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if true, a readable check is performed.
    - **writable** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if true, a writable check is performed.
    - **executable** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if true, an executable check is performed.
    - **resolve_path** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Make the value absolute and resolve any symlinks. A `~` is not expanded, as this is supposed to be done by the shell only.
    - **allow_dash** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Allow a single dash as a value, which indicates a standard stream (but does not open it). Use [`open_file()`](../api/index#click.open_file "click.open_file") to handle opening this value.
    - **path_type** ([Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")*\[*[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]* *\|* *None*) – Convert the incoming path value to this type. If `None`, keep Python’s default, which is `str`. Useful to convert to [`pathlib.Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "(in Python v3.12)").

    Changed in version 8.1: Added the `executable` parameter.

    Changelog

    Changed in version 8.0: Allow passing `path_type=pathlib.Path`.

    Changed in version 6.0: Added the `allow_dash` parameter.

    *class*click.Choice(*choices*, *case_sensitive=True*)

    The choice type allows a value to be checked against a fixed set of supported values. All of these values have to be strings.

    You should only pass a list or tuple of choices. Other iterables (like generators) may lead to surprising results.

    The resulting value will always be one of the originally passed choices regardless of `case_sensitive` or any `ctx.token_normalize_func` being specified.

    See [Choice Options](../options/index#choice-opts) for an example.

    Parameters:

    - **case_sensitive** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Set to false to make choices case insensitive. Defaults to true.
    - **choices** ([Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]*) –

    *class*click.IntRange(*min=None*, *max=None*, *min_open=False*, *max_open=False*, *clamp=False*)

    Restrict an [`click.INT`](../api/index#click.INT "click.INT") value to a range of accepted values. See [Range Options](../options/index#ranges).

    If `min` or `max` are not passed, any value is accepted in that direction. If `min_open` or `max_open` are enabled, the corresponding boundary is not included in the range.

    If `clamp` is enabled, a value outside the range is clamped to the boundary instead of failing.

    Changelog

    Changed in version 8.0: Added the `min_open` and `max_open` parameters.

    Parameters:

    - **min** ([float](https://docs.python.org/3/library/functions.html#float "(in Python v3.12)") *\|* *None*) –
    - **max** ([float](https://docs.python.org/3/library/functions.html#float "(in Python v3.12)") *\|* *None*) –
    - **min_open** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –
    - **max_open** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –
    - **clamp** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –

    *class*click.FloatRange(*min=None*, *max=None*, *min_open=False*, *max_open=False*, *clamp=False*)

    Restrict a [`click.FLOAT`](../api/index#click.FLOAT "click.FLOAT") value to a range of accepted values. See [Range Options](../options/index#ranges).

    If `min` or `max` are not passed, any value is accepted in that direction. If `min_open` or `max_open` are enabled, the corresponding boundary is not included in the range.

    If `clamp` is enabled, a value outside the range is clamped to the boundary instead of failing. This is not supported if either boundary is marked `open`.

    Changelog

    Changed in version 8.0: Added the `min_open` and `max_open` parameters.

    Parameters:

    - **min** ([float](https://docs.python.org/3/library/functions.html#float "(in Python v3.12)") *\|* *None*) –
    - **max** ([float](https://docs.python.org/3/library/functions.html#float "(in Python v3.12)") *\|* *None*) –
    - **min_open** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –
    - **max_open** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –
    - **clamp** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –

    *class* click. DateTime ( *formats = None* )

    The DateTime type converts date strings into `datetime` objects.

    The format strings which are checked are configurable, but default to some common (non-timezone aware) ISO 8601 formats.

    When specifying *DateTime* formats, you should only pass a list or a tuple. Other iterables, like generators, may lead to surprising results.

    The format strings are processed using `datetime.strptime`, and this consequently defines the format strings which are allowed.

    Parsing is tried using each format, in order, and the first format which parses successfully is used.

    Parameters:

    **formats** ([Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]* *\|* *None*) – A list or tuple of date format strings, in the order in which they should be tried. Defaults to `'%Y-%m-%d'`, `'%Y-%m-%dT%H:%M:%S'`, `'%Y-%m-%d %H:%M:%S'`.

    Custom parameter types can be implemented by subclassing [`click.ParamType`](../api/index#click.ParamType "click.ParamType"). For simple cases, passing a Python function that fails with a `ValueError` is also supported, though discouraged.
- name: Parameter.get_default()
  id: api/index#click.Parameter.get_default
  summary: Get the default for the parameter
  description: |-
    `get_default(ctx: Context, call: te.Literal[True] = True) → Any | None`

    get_default(*ctx:[Context](#click.Context "click.core.Context")*, *call:[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")=True*)→[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\|[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[\],[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.12)")

    Get the default for the parameter. Tries [`Context.lookup_default()`](#click.Context.lookup_default "click.Context.lookup_default") first, then the local default.

    Parameters:

    - **ctx** – Current context.
    - **call** – If the default is a callable, call it. Disable to return the callable instead.

    Changelog

    Changed in version 8.0.2: Type casting is no longer performed when getting a default.

    Changed in version 8.0.1: Type casting can fail in resilient parsing mode. Invalid defaults will not prevent showing help text.

    Changed in version 8.0: Looks at `ctx.default_map` first.

    Changed in version 8.0: Added the `call` parameter.
- name: Parameter.get_error_hint()
  id: api/index#click.Parameter.get_error_hint
  summary: Get a stringified version of the param for use in error messages to indicate which param caused the error
  description: |-
    `get_error_hint(ctx)`

    Get a stringified version of the param for use in error messages to indicate which param caused the error.

    Parameters:

    **ctx** ([Context](#click.Context "click.core.Context")) –

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: Parameter.human_readable_name
  id: api/index#click.Parameter.human_readable_name
  summary: Returns the human readable name of this parameter
  description: |-
    `property human_readable_name: str`

    Returns the human readable name of this parameter. This is the same as the name for options, but the metavar for arguments.
- name: Parameter.shell_complete()
  id: api/index#click.Parameter.shell_complete
  summary: Return a list of completions for the incomplete value
  description: |-
    `shell_complete(ctx, incomplete)`

    Return a list of completions for the incomplete value. If a `shell_complete` function was given during init, it is used. Otherwise, the `type` `shell_complete()` function is used.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) – Invocation context for this command.
    - **incomplete** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Value being completed. May be empty.

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[CompletionItem](#click.shell_completion.CompletionItem "click.shell_completion.CompletionItem")\]

    Changelog

    New in version 8.0.
- name: Parameter.to_info_dict()
  id: api/index#click.Parameter.to_info_dict
  summary: Gather information that could be useful for a tool generating user-facing documentation
  description: |-
    `to_info_dict()`

    Gather information that could be useful for a tool generating user-facing documentation.

    Use [`click.Context.to_info_dict()`](#click.Context.to_info_dict "click.Context.to_info_dict") to traverse the entire CLI structure.

    Changelog

    New in version 8.0.

    Return type:

    [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)"), [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]
- name: Parameter.type_cast_value()
  id: api/index#click.Parameter.type_cast_value
  summary: Convert and validate a value against the option’s type, multiple, and nargs
  description: |-
    `type_cast_value(ctx, value)`

    Convert and validate a value against the option’s `type`, `multiple`, and `nargs`.

    Parameters:

    - **ctx** ([Context](#click.Context "click.core.Context")) –
    - **value** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) –

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")
- name: ParamType
  id: api/index#click.ParamType
  summary: Represents the type of a parameter
  description: |-
    `class click.ParamType`

    Represents the type of a parameter. Validates and converts values from the command line or Python into the correct type.

    To implement a custom type, subclass and implement at least the following:

    - The [`name`](#click.ParamType.name "click.ParamType.name") class attribute must be set.
    - Calling an instance of the type with `None` must return `None`. This is already implemented by default.
    - [`convert()`](#click.ParamType.convert "click.ParamType.convert") must convert string values to the correct type.
    - [`convert()`](#click.ParamType.convert "click.ParamType.convert") must accept values that are already the correct type.
    - It must be able to convert a value if the `ctx` and `param` arguments are `None`. This can occur when converting prompt input.
- name: ParamType.convert()
  id: api/index#click.ParamType.convert
  summary: Convert the value to the correct type
  description: |-
    `convert(value, param, ctx)`

    Convert the value to the correct type. This is not called if the value is `None` (the missing value).

    This must accept string values from the command line, as well as values that are already the correct type. It may also convert other compatible types.

    The `param` and `ctx` arguments may be `None` in certain situations, such as when converting prompt input.

    If the value cannot be converted, call [`fail()`](#click.ParamType.fail "click.ParamType.fail") with a descriptive message.

    Parameters:

    - **value** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – The value to convert.
    - **param** ([Parameter](#click.Parameter "click.Parameter") *\|* *None*) – The parameter that is using this type to convert its value. May be `None`.
    - **ctx** ([Context](#click.Context "click.Context") *\|* *None*) – The current context that arrived at this value. May be `None`.

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")
- name: ParamType.envvar_list_splitter
  id: api/index#click.ParamType.envvar_list_splitter
  summary: if a list of this type is expected and the value is pulled from a string environment variable, this is what splits it up
  description: |-
    `envvar_list_splitter: ClassVar[str | None] = None`

    if a list of this type is expected and the value is pulled from a string environment variable, this is what splits it up. `None` means any whitespace. For all parameters the general rule is that whitespace splits them up. The exception are paths and files which are split by `os.path.pathsep` by default (“:” on Unix and “;” on Windows).
- name: ParamType.fail()
  id: api/index#click.ParamType.fail
  summary: Helper method to fail with an invalid value message
  description: |-
    `fail(message, param=None, ctx=None)`

    Helper method to fail with an invalid value message.

    Parameters:

    - **message** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –
    - **param** ([Parameter](#click.Parameter "click.Parameter") *\|* *None*) –
    - **ctx** ([Context](#click.Context "click.Context") *\|* *None*) –

    Return type:

    t.NoReturn
- name: ParamType.get_metavar()
  id: api/index#click.ParamType.get_metavar
  summary: Returns the metavar default for this param if it provides one
  description: |-
    `get_metavar(param)`

    Returns the metavar default for this param if it provides one.

    Parameters:

    **param** ([Parameter](#click.Parameter "click.Parameter")) –

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") \| None
- name: ParamType.get_missing_message()
  id: api/index#click.ParamType.get_missing_message
  summary: Optionally might return extra information about a missing parameter
  description: |-
    `get_missing_message(param)`

    Optionally might return extra information about a missing parameter.

    Changelog

    New in version 2.0.

    Parameters:

    **param** ([Parameter](#click.Parameter "click.Parameter")) –

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") \| None
- name: ParamType.name
  id: api/index#click.ParamType.name
  summary: null
  description: |-
    `name: str`

    the descriptive name of this type
- name: ParamType.shell_complete()
  id: api/index#click.ParamType.shell_complete
  summary: Return a list of CompletionItem objects for the incomplete value
  description: |-
    `shell_complete(ctx, param, incomplete)`

    Return a list of [`CompletionItem`](#click.shell_completion.CompletionItem "click.shell_completion.CompletionItem") objects for the incomplete value. Most types do not provide completions, but some do, and this allows custom types to provide custom completions as well.

    Parameters:

    - **ctx** ([Context](#click.Context "click.Context")) – Invocation context for this command.
    - **param** ([Parameter](#click.Parameter "click.Parameter")) – The parameter that is requesting completion.
    - **incomplete** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Value being completed. May be empty.

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[CompletionItem](#click.shell_completion.CompletionItem "click.shell_completion.CompletionItem")\]

    Changelog

    New in version 8.0.

    ## Exceptions
- name: ParamType.split_envvar_value()
  id: api/index#click.ParamType.split_envvar_value
  summary: Given a value from an environment variable this splits it up into small chunks depending on the defined envvar list splitter
  description: |-
    `split_envvar_value(rv)`

    Given a value from an environment variable this splits it up into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits, then leading and trailing whitespace is ignored. Otherwise, leading and trailing splitters usually lead to empty items being included.

    Parameters:

    **rv** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) –

    Return type:

    [Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\]
- name: ParamType.to_info_dict()
  id: api/index#click.ParamType.to_info_dict
  summary: Gather information that could be useful for a tool generating user-facing documentation
  description: |-
    `to_info_dict()`

    Gather information that could be useful for a tool generating user-facing documentation.

    Use [`click.Context.to_info_dict()`](#click.Context.to_info_dict "click.Context.to_info_dict") to traverse the entire CLI structure.

    Changelog

    New in version 8.0.

    Return type:

    [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)"), [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]
- name: pass_context()
  id: api/index#click.pass_context
  summary: Marks a callback as wanting to receive the current context object as first argument
  description: |-
    `click.pass_context(f)`

    Marks a callback as wanting to receive the current context object as first argument.

    Parameters:

    **f** (*t.Callable\[te.Concatenate\[*[Context](#click.Context "click.Context")*,* *P\],* *R\]*) –

    Return type:

    t.Callable\[P, R\]
- name: pass_obj()
  id: api/index#click.pass_obj
  summary: Similar to pass_context(), but only pass the object on the context onwards (Context.obj)
  description: |-
    `click.pass_obj(f)`

    Similar to [`pass_context()`](#click.pass_context "click.pass_context"), but only pass the object on the context onwards ([`Context.obj`](#click.Context.obj "click.Context.obj")). This is useful if that object represents the state of a nested system.

    Parameters:

    **f** (*t.Callable\[te.Concatenate\[t.Any,* *P\],* *R\]*) –

    Return type:

    t.Callable\[P, R\]
- name: Passing Parameters
  id: commands/index#passing-parameters
  summary: Click strictly separates parameters between commands and subcommands
  description: |-
    ## Passing Parameters

    Click strictly separates parameters between commands and subcommands. What this means is that options and arguments for a specific command have to be specified *after* the command name itself, but *before* any other command names.

    This behavior is already observable with the predefined `--help` option. Suppose we have a program called `tool.py`, containing a subcommand called `sub`.

    - `tool.py --help` will return the help for the whole program (listing subcommands).
    - `tool.py sub --help` will return the help for the `sub` subcommand.
    - But `tool.py --help sub` will treat `--help` as an argument for the main program. Click then invokes the callback for `--help`, which prints the help and aborts the program before click can process the subcommand.
- name: Password Prompts
  id: options/index#password-prompts
  summary: Click also supports hidden prompts and asking for confirmation
  description: "## Password Prompts\n\nClick also supports hidden prompts and asking for confirmation. This is useful for password input:\n\n``` python\nimport codecs\n\n@click.command()\n@click.option(\n    \"--password\", prompt=True, hide_input=True,\n    confirmation_prompt=True\n)\ndef encode(password):\n    click.echo(f\"encoded: {codecs.encode(password, 'rot13')}\")\n```\n\n``` shell\n$ encode\nPassword: \nRepeat for confirmation: \nencoded: frperg\n```\n\nBecause this combination of parameters is quite common, this can also be replaced with the [`password_option()`](../api/index#click.password_option \"click.password_option\") decorator:\n\n``` python\n@click.command()\n@click.password_option()\ndef encrypt(password):\n    click.echo(f\"encoded: to {codecs.encode(password, 'rot13')}\")\n```"
- name: password_option()
  id: api/index#click.password_option
  summary: Add a --password option which prompts for a password, hiding input and asking to enter the value again for confirmation
  description: |-
    `click.password_option(*param_decls, **kwargs)`

    Add a `--password` option which prompts for a password, hiding input and asking to enter the value again for confirmation.

    Parameters:

    - **param_decls** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – One or more option names. Defaults to the single value `"--password"`.
    - **kwargs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – Extra arguments are passed to [`option()`](#click.option "click.option").

    Return type:

    [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[*FC*\], *FC*\]
- name: Path
  id: api/index#click.Path
  summary: The Path type is similar to the File type, but returns the filename instead of an open file
  description: |-
    `class click.Path(exists=False, file_okay=True, dir_okay=True, writable=False, readable=True, resolve_path=False, allow_dash=False, path_type=None, executable=False)`

    The `Path` type is similar to the [`File`](#click.File "click.File") type, but returns the filename instead of an open file. Various checks can be enabled to validate the type of file and permissions.

    Parameters:

    - **exists** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – The file or directory needs to exist for the value to be valid. If this is not set to `True`, and the file does not exist, then all further checks are silently skipped.
    - **file_okay** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Allow a file as a value.
    - **dir_okay** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Allow a directory as a value.
    - **readable** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if true, a readable check is performed.
    - **writable** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if true, a writable check is performed.
    - **executable** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if true, an executable check is performed.
    - **resolve_path** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Make the value absolute and resolve any symlinks. A `~` is not expanded, as this is supposed to be done by the shell only.
    - **allow_dash** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Allow a single dash as a value, which indicates a standard stream (but does not open it). Use [`open_file()`](#click.open_file "click.open_file") to handle opening this value.
    - **path_type** ([Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")*\[*[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]* *\|* *None*) – Convert the incoming path value to this type. If `None`, keep Python’s default, which is `str`. Useful to convert to [`pathlib.Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "(in Python v3.12)").

    Changed in version 8.1: Added the `executable` parameter.

    Changelog

    Changed in version 8.0: Allow passing `path_type=pathlib.Path`.

    Changed in version 6.0: Added the `allow_dash` parameter.
- name: pause()
  id: api/index#click.pause
  summary: This command stops execution and waits for the user to press any key to continue
  description: |-
    `click.pause(info=None, err=False)`

    This command stops execution and waits for the user to press any key to continue. This is similar to the Windows batch “pause” command. If the program is not run through a terminal, this command will instead do nothing.

    Changelog

    New in version 4.0: Added the `err` parameter.

    New in version 2.0.

    Parameters:

    - **info** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – The message to print before pausing. Defaults to `"Press any key to continue..."`.
    - **err** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if set to message goes to `stderr` instead of `stdout`, the same as with echo.

    Return type:

    None
- name: Preventing Rewrapping
  id: documentation/index#preventing-rewrapping
  summary: The default behavior of Click is to rewrap text based on the width of the terminal, to a maximum 80 characters
  description: |-
    ## Preventing Rewrapping

    The default behavior of Click is to rewrap text based on the width of the terminal, to a maximum 80 characters. In some circumstances, this can become a problem. The main issue is when showing code examples, where newlines are significant.

    Rewrapping can be disabled on a per-paragraph basis by adding a line with solely the `\b` escape marker in it. This line will be removed from the help text and rewrapping will be disabled.

    Example:

    ``` python
    @click.command()
    def cli():
        """First paragraph.

        This is a very long second paragraph and as you
        can see wrapped very early in the source text
        but will be rewrapped to the terminal width in
        the final output.

        \b
        This is
        a paragraph
        without rewrapping.

        And this is a paragraph
        that will be rewrapped again.
        """
    ```

    And what it looks like:

    ``` shell
    $ cli --help
    Usage: cli [OPTIONS]

      First paragraph.

      This is a very long second paragraph and as you can see wrapped very early in
      the source text but will be rewrapped to the terminal width in the final
      output.

      This is
      a paragraph
      without rewrapping.

      And this is a paragraph that will be rewrapped again.

    Options:
      --help  Show this message and exit.
    ```

    To change the maximum width, pass `max_content_width` when calling the command.

    ``` python
    cli(max_content_width=120)
    ```
- name: Printing Filenames
  id: utils/index#printing-filenames
  summary: Because filenames might not be Unicode, formatting them can be a bit tricky
  description: |-
    ## Printing Filenames

    Because filenames might not be Unicode, formatting them can be a bit tricky.

    The way this works with click is through the [`format_filename()`](../api/index#click.format_filename "click.format_filename") function. It does a best-effort conversion of the filename to Unicode and will never fail. This makes it possible to use these filenames in the context of a full Unicode string.

    Example:

    ``` python
    click.echo(f"Path: {click.format_filename(b'foo.txt')}")
    ```
- name: Printing to Stdout
  id: utils/index#printing-to-stdout
  summary: The most obvious helper is the echo() function, which in many ways works like the Python print statement or function
  description: |-
    ## Printing to Stdout

    The most obvious helper is the [`echo()`](../api/index#click.echo "click.echo") function, which in many ways works like the Python `print` statement or function. The main difference is that it works the same in many different terminal environments.

    Example:

    ``` python
    import click

    click.echo('Hello World!')
    ```

    It can output both text and binary data. It will emit a trailing newline by default, which needs to be suppressed by passing `nl=False`:

    ``` python
    click.echo(b'\xe2\x98\x83', nl=False)
    ```

    Last but not least [`echo()`](../api/index#click.echo "click.echo") uses click’s intelligent internal output streams to stdout and stderr which support unicode output on the Windows console. This means for as long as you are using `click.echo` you can output unicode characters (there are some limitations on the default font with regards to which characters can be displayed).

    Changelog

    New in version 6.0.

    Click emulates output streams on Windows to support unicode to the Windows console through separate APIs. For more information see [Windows Console Notes](../wincmd/index).

    Changelog

    New in version 3.0.

    You can also easily print to standard error by passing `err=True`:

    ``` python
    click.echo('Hello World!', err=True)
    ```
- name: progressbar()
  id: api/index#click.progressbar
  summary: This function creates an iterable context manager that can be used to iterate over something while showing a progress bar
  description: |-
    `click.progressbar(iterable=None, length=None, label=None, show_eta=True, show_percent=None, show_pos=False, item_show_func=None, fill_char='#', empty_char='-', bar_template='%(label)s [%(bar)s] %(info)s', info_sep=' ', width=36, file=None, color=None, update_min_steps=1)`

    This function creates an iterable context manager that can be used to iterate over something while showing a progress bar. It will either iterate over the `iterable` or `length` items (that are counted up). While iteration happens, this function will print a rendered progress bar to the given `file` (defaults to stdout) and will attempt to calculate remaining time and more. By default, this progress bar will not be rendered if the file is not a terminal.

    The context manager creates the progress bar. When the context manager is entered the progress bar is already created. With every iteration over the progress bar, the iterable passed to the bar is advanced and the bar is updated. When the context manager exits, a newline is printed and the progress bar is finalized on screen.

    Note: The progress bar is currently designed for use cases where the total progress can be expected to take at least several seconds. Because of this, the ProgressBar class object won’t display progress that is considered too fast, and progress where the time between steps is less than a second.

    No printing must happen or the progress bar will be unintentionally destroyed.

    Example usage:

    ``` python
    with progressbar(items) as bar:
        for item in bar:
            do_something_with(item)
    ```

    Alternatively, if no iterable is specified, one can manually update the progress bar through the `update()` method instead of directly iterating over the progress bar. The update method accepts the number of steps to increment the bar with:

    ``` python
    with progressbar(length=chunks.total_bytes) as bar:
        for chunk in chunks:
            process_chunk(chunk)
            bar.update(chunks.bytes)
    ```

    The `update()` method also takes an optional value specifying the `current_item` at the new position. This is useful when used together with `item_show_func` to customize the output for each manual step:

    ``` python
    with click.progressbar(
        length=total_size,
        label='Unzipping archive',
        item_show_func=lambda a: a.filename
    ) as bar:
        for archive in zip_file:
            archive.extract()
            bar.update(archive.size, archive)
    ```

    Parameters:

    - **iterable** ([Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable "(in Python v3.12)")*\[V\]* *\|* *None*) – an iterable to iterate over. If not provided the length is required.
    - **length** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)") *\|* *None*) – the number of items to iterate over. By default the progressbar will attempt to ask the iterator about its length, which might or might not work. If an iterable is also provided this parameter can be used to override the length. If an iterable is not provided the progress bar will iterate over a range of that length.
    - **label** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – the label to show next to the progress bar.
    - **show_eta** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – enables or disables the estimated time display. This is automatically disabled if the length cannot be determined.
    - **show_percent** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – enables or disables the percentage display. The default is `True` if the iterable has a length or `False` if not.
    - **show_pos** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – enables or disables the absolute position display. The default is `False`.
    - **item_show_func** ([Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")*\[\[V* *\|* *None\],* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None\]* *\|* *None*) – A function called with the current item which can return a string to show next to the progress bar. If the function returns `None` nothing is shown. The current item can be `None`, such as when entering and exiting the bar.
    - **fill_char** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the character to use to show the filled part of the progress bar.
    - **empty_char** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the character to use to show the non-filled part of the progress bar.
    - **bar_template** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the format string to use as template for the bar. The parameters in it are `label` for the label, `bar` for the progress bar and `info` for the info section.
    - **info_sep** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the separator between multiple info items (eta etc.)
    - **width** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")) – the width of the progress bar in characters, 0 means full terminal width
    - **file** ([TextIO](https://docs.python.org/3/library/typing.html#typing.TextIO "(in Python v3.12)") *\|* *None*) – The file to write to. If this is not a terminal then only the label is printed.
    - **color** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – controls if the terminal supports ANSI colors or not. The default is autodetection. This is only needed if ANSI codes are included anywhere in the progress bar output which is not the case by default.
    - **update_min_steps** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")) – Render only when this many updates have completed. This allows tuning for very fast iterators.

    Return type:

    ProgressBar\[V\]

    Changelog

    Changed in version 8.0: Output is shown even if execution time is less than 0.5 seconds.

    Changed in version 8.0: `item_show_func` shows the current item, not the previous one.

    Changed in version 8.0: Labels are echoed if the output is not a TTY. Reverts a change in 7.0 that removed all output.

    New in version 8.0: Added the `update_min_steps` parameter.

    Changed in version 4.0: Added the `color` parameter. Added the `update` method to the object.

    New in version 2.0.
- name: prompt()
  id: api/index#click.prompt
  summary: Prompts a user for input
  description: |-
    `click.prompt(text, default=None, hide_input=False, confirmation_prompt=False, type=None, value_proc=None, prompt_suffix=': ', show_default=True, err=False, show_choices=True)`

    Prompts a user for input. This is a convenience function that can be used to prompt a user for input later.

    If the user aborts the input by sending an interrupt signal, this function will catch it and raise a [`Abort`](#click.Abort "click.Abort") exception.

    Parameters:

    - **text** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the text to show for the prompt.
    - **default** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)") *\|* *None*) – the default value to use if no input happens. If this is not given it will prompt until it’s aborted.
    - **hide_input** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if this is set to true then the input value will be hidden.
    - **confirmation_prompt** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Prompt a second time to confirm the value. Can be set to a string instead of `True` to customize the message.
    - **type** ([ParamType](#click.ParamType "click.types.ParamType") *\|* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)") *\|* *None*) – the type to use to check the value against.
    - **value_proc** ([Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")*\[\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\],* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]* *\|* *None*) – if this parameter is provided it’s a function that is invoked instead of the type conversion to convert a value.
    - **prompt_suffix** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – a suffix that should be added to the prompt.
    - **show_default** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – shows or hides the default value in the prompt.
    - **err** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if set to true the file defaults to `stderr` instead of `stdout`, the same as with echo.
    - **show_choices** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Show or hide choices if the passed type is a Choice. For example if type is a Choice of either day or week, show_choices is true and text is “Group by” then the prompt will be “Group by (day, week): “.

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")

    Changelog

    New in version 8.0: `confirmation_prompt` can be a custom string.

    New in version 7.0: Added the `show_choices` parameter.

    New in version 6.0: Added unicode support for cmd.exe on Windows.

    New in version 4.0: Added the `err` parameter.
- name: Prompting
  id: options/index#prompting
  summary: In some cases, you want parameters that can be provided from the command line, but if not provided, ask for user input instead
  description: |-
    ## Prompting

    In some cases, you want parameters that can be provided from the command line, but if not provided, ask for user input instead. This can be implemented with Click by defining a prompt string.

    Example:

    ``` python
    @click.command()
    @click.option('--name', prompt=True)
    def hello(name):
        click.echo(f"Hello {name}!")
    ```

    And what it looks like:

    ``` shell
    $ hello --name=John
    Hello John!
    $ hello
    Name: John
    Hello John!
    ```

    If you are not happy with the default prompt string, you can ask for a different one:

    ``` python
    @click.command()
    @click.option('--name', prompt='Your name please')
    def hello(name):
        click.echo(f"Hello {name}!")
    ```

    What it looks like:

    ``` shell
    $ hello
    Your name please: John
    Hello John!
    ```

    It is advised that prompt not be used in conjunction with the multiple flag set to True. Instead, prompt in the function interactively.

    By default, the user will be prompted for an input if one was not passed through the command line. To turn this behavior off, see [Optional Value](#optional-value).
- name: Range Options
  id: options/index#range-options
  summary: The IntRange type extends the INT type to ensure the value is contained in the given range
  description: |-
    ## Range Options

    The [`IntRange`](../api/index#click.IntRange "click.IntRange") type extends the [`INT`](../api/index#click.INT "click.INT") type to ensure the value is contained in the given range. The [`FloatRange`](../api/index#click.FloatRange "click.FloatRange") type does the same for [`FLOAT`](../api/index#click.FLOAT "click.FLOAT").

    If `min` or `max` is omitted, that side is *unbounded*. Any value in that direction is accepted. By default, both bounds are *closed*, which means the boundary value is included in the accepted range. `min_open` and `max_open` can be used to exclude that boundary from the range.

    If `clamp` mode is enabled, a value that is outside the range is set to the boundary instead of failing. For example, the range `0, 5` would return `5` for the value `10`, or `0` for the value `-1`. When using [`FloatRange`](../api/index#click.FloatRange "click.FloatRange"), `clamp` can only be enabled if both bounds are *closed* (the default).

    ``` python
    @click.command()
    @click.option("--count", type=click.IntRange(0, 20, clamp=True))
    @click.option("--digit", type=click.IntRange(0, 9))
    def repeat(count, digit):
        click.echo(str(digit) * count)
    ```

    ``` shell
    $ repeat --count=100 --digit=5
    55555555555555555555
    $ repeat --count=6 --digit=12
    Usage: repeat [OPTIONS]
    Try 'repeat --help' for help.

    Error: Invalid value for '--digit': 12 is not in the range 0<=x<=9.
    ```
- name: Registering Commands Later
  id: quickstart/index#registering-commands-later
  summary: Instead of using the @group.command() decorator, commands can be decorated with the plain @click.command() decorator and registered with a group later with group.add_command()
  description: |-
    ## Registering Commands Later

    Instead of using the `@group.command()` decorator, commands can be decorated with the plain `@click.command()` decorator and registered with a group later with `group.add_command()`. This could be used to split commands into multiple Python modules.

    ``` python
    @click.command()
    def greet():
        click.echo("Hello, World!")
    ```

    ``` python
    @click.group()
    def group():
        pass

    group.add_command(greet)
    ```
- name: Screen Clearing
  id: utils/index#screen-clearing
  summary: New in version 2.0
  description: |-
    ## Screen Clearing

    Changelog

    New in version 2.0.

    To clear the terminal screen, you can use the [`clear()`](../api/index#click.clear "click.clear") function that is provided starting with Click 2.0. It does what the name suggests: it clears the entire visible screen in a platform-agnostic way:

    ``` python
    import click
    click.clear()
    ```
- name: Screencast and Examples
  id: quickstart/index#screencast-and-examples
  summary: There is a screencast available which shows the basic API of Click and how to build simple applications with it
  description: |-
    ## Screencast and Examples

    There is a screencast available which shows the basic API of Click and how to build simple applications with it. It also explores how to build commands with subcommands.

    - [Building Command Line Applications with Click](https://www.youtube.com/watch?v=kNke39OZ2k0)

    Examples of Click applications can be found in the documentation as well as in the GitHub repository together with readme files:

    - `inout`: [File input and output](https://github.com/pallets/click/tree/main/examples/inout)
    - `naval`: [Port of docopt naval example](https://github.com/pallets/click/tree/main/examples/naval)
    - `aliases`: [Command alias example](https://github.com/pallets/click/tree/main/examples/aliases)
    - `repo`: [Git-/Mercurial-like command line interface](https://github.com/pallets/click/tree/main/examples/repo)
    - `complex`: [Complex example with plugin loading](https://github.com/pallets/click/tree/main/examples/complex)
    - `validation`: [Custom parameter validation example](https://github.com/pallets/click/tree/main/examples/validation)
    - `colors`: [Color support demo](https://github.com/pallets/click/tree/main/examples/colors)
    - `termui`: [Terminal UI functions demo](https://github.com/pallets/click/tree/main/examples/termui)
    - `imagepipe`: [Multi command chaining demo](https://github.com/pallets/click/tree/main/examples/imagepipe)
- name: Scripts in Packages
  id: setuptools/index#scripts-in-packages
  summary: If your script is growing and you want to switch over to your script being contained in a Python package the changes necessary are minimal
  description: "## Scripts in Packages\n\nIf your script is growing and you want to switch over to your script being contained in a Python package the changes necessary are minimal. Let’s assume your directory structure changed to this:\n\n``` text\nproject/\n    yourpackage/\n        __init__.py\n        main.py\n        utils.py\n        scripts/\n            __init__.py\n            yourscript.py\n    setup.py\n```\n\nIn this case instead of using `py_modules` in your `setup.py` file you can use `packages` and the automatic package finding support of setuptools. In addition to that it’s also recommended to include other package data.\n\nThese would be the modified contents of `setup.py`:\n\n``` python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='yourpackage',\n    version='0.1.0',\n    packages=find_packages(),\n    include_package_data=True,\n    install_requires=[\n        'Click',\n    ],\n    entry_points={\n        'console_scripts': [\n            'yourscript = yourpackage.scripts.yourscript:cli',\n        ],\n    },\n)\n```\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/setuptools/](https://click.palletsprojects.com/en/8.1.x/setuptools/)"
- name: secho()
  id: api/index#click.secho
  summary: This function combines echo() and style() into one call
  description: |-
    `click.secho(message=None, file=None, nl=True, err=False, color=None, **styles)`

    This function combines [`echo()`](#click.echo "click.echo") and [`style()`](#click.style "click.style") into one call. As such the following two calls are the same:

    ``` python
    click.secho('Hello World!', fg='green')
    click.echo(click.style('Hello World!', fg='green'))
    ```

    All keyword arguments are forwarded to the underlying functions depending on which one they go with.

    Non-string types will be converted to [`str`](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)"). However, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.12)") are passed directly to [`echo()`](#click.echo "click.echo") without applying style. If you want to style bytes that represent text, call [`bytes.decode()`](https://docs.python.org/3/library/stdtypes.html#bytes.decode "(in Python v3.12)") first.

    Changelog

    Changed in version 8.0: A non-string `message` is converted to a string. Bytes are passed through without style applied.

    New in version 2.0.

    Parameters:

    - **message** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)") *\|* *None*) –
    - **file** ([IO](https://docs.python.org/3/library/typing.html#typing.IO "(in Python v3.12)") *\|* *None*) –
    - **nl** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –
    - **err** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) –
    - **color** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) –
    - **styles** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) –

    Return type:

    None
- name: shell_completion.add_completion_class()
  id: api/index#click.shell_completion.add_completion_class
  summary: Register a ShellComplete subclass under the given name
  description: |-
    `click.shell_completion.add_completion_class(cls, name=None)`

    Register a [`ShellComplete`](#click.shell_completion.ShellComplete "click.shell_completion.ShellComplete") subclass under the given name. The name will be provided by the completion instruction environment variable during completion.

    Parameters:

    - **cls** (*ShellCompleteType*) – The completion class that will handle completion for the shell.
    - **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – Name to register the class under. Defaults to the class’s `name` attribute.

    Return type:

    *ShellCompleteType*

    ## Testing
- name: shell_completion.CompletionItem
  id: api/index#click.shell_completion.CompletionItem
  summary: Represents a completion value and metadata about the value
  description: |-
    `class click.shell_completion.CompletionItem(value, type='plain', help=None, **kwargs)`

    Represents a completion value and metadata about the value. The default metadata is `type` to indicate special shell handling, and `help` if a shell supports showing a help string next to the value.

    Arbitrary parameters can be passed when creating the object, and accessed using `item.attr`. If an attribute wasn’t passed, accessing it returns `None`.

    Parameters:

    - **value** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – The completion suggestion.
    - **type** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Tells the shell script to provide special completion support for the type. Click uses `"dir"` and `"file"`.
    - **help** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – String shown next to the value if supported.
    - **kwargs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – Arbitrary metadata. The built-in implementations don’t use this, but custom type completions paired with custom shell support could use it.
- name: shell_completion.ShellComplete
  id: api/index#click.shell_completion.ShellComplete
  summary: Base class for providing shell completion support
  description: |-
    `class click.shell_completion.ShellComplete(cli, ctx_args, prog_name, complete_var)`

    Base class for providing shell completion support. A subclass for a given shell will override attributes and methods to implement the completion instructions (`source` and `complete`).

    Parameters:

    - **cli** ([BaseCommand](#click.BaseCommand "click.core.BaseCommand")) – Command being called.
    - **prog_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Name of the executable in the shell.
    - **complete_var** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Name of the environment variable that holds the completion instruction.
    - **ctx_args** ([MutableMapping](https://docs.python.org/3/library/typing.html#typing.MutableMapping "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]*) –

    Changelog

    New in version 8.0.
- name: shell_completion.ShellComplete.complete()
  id: api/index#click.shell_completion.ShellComplete.complete
  summary: Produce the completion data to send back to the shell
  description: |-
    `complete()`

    Produce the completion data to send back to the shell.

    By default this calls [`get_completion_args()`](#click.shell_completion.ShellComplete.get_completion_args "click.shell_completion.ShellComplete.get_completion_args"), gets the completions, then calls [`format_completion()`](#click.shell_completion.ShellComplete.format_completion "click.shell_completion.ShellComplete.format_completion") for each completion.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: shell_completion.ShellComplete.format_completion()
  id: api/index#click.shell_completion.ShellComplete.format_completion
  summary: Format a completion item into the form recognized by the shell script
  description: |-
    `format_completion(item)`

    Format a completion item into the form recognized by the shell script. This must be implemented by subclasses.

    Parameters:

    **item** ([CompletionItem](#click.shell_completion.CompletionItem "click.shell_completion.CompletionItem")) – Completion item to format.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: shell_completion.ShellComplete.func_name
  id: api/index#click.shell_completion.ShellComplete.func_name
  summary: The name of the shell function defined by the completion script
  description: |-
    `property func_name: str`

    The name of the shell function defined by the completion script.
- name: shell_completion.ShellComplete.get_completion_args()
  id: api/index#click.shell_completion.ShellComplete.get_completion_args
  summary: Use the env vars defined by the shell script to return a tuple of args, incomplete
  description: |-
    `get_completion_args()`

    Use the env vars defined by the shell script to return a tuple of `args, incomplete`. This must be implemented by subclasses.

    Return type:

    [Tuple](https://docs.python.org/3/library/typing.html#typing.Tuple "(in Python v3.12)")\[[List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\], [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\]
- name: shell_completion.ShellComplete.get_completions()
  id: api/index#click.shell_completion.ShellComplete.get_completions
  summary: Determine the context and last complete command or parameter from the complete args
  description: |-
    `get_completions(args, incomplete)`

    Determine the context and last complete command or parameter from the complete args. Call that object’s `shell_complete` method to get the completions for the incomplete value.

    Parameters:

    - **args** ([List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]*) – List of complete args before the incomplete value.
    - **incomplete** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – Value being completed. May be empty.

    Return type:

    [List](https://docs.python.org/3/library/typing.html#typing.List "(in Python v3.12)")\[[CompletionItem](#click.shell_completion.CompletionItem "click.shell_completion.CompletionItem")\]
- name: shell_completion.ShellComplete.name
  id: api/index#click.shell_completion.ShellComplete.name
  summary: Name to register the shell as with add_completion_class()
  description: |-
    `name: ClassVar[str]`

    Name to register the shell as with [`add_completion_class()`](#click.shell_completion.add_completion_class "click.shell_completion.add_completion_class"). This is used in completion instructions (`{name}_source` and `{name}_complete`).
- name: shell_completion.ShellComplete.source()
  id: api/index#click.shell_completion.ShellComplete.source
  summary: Produce the shell script that defines the completion function
  description: |-
    `source()`

    Produce the shell script that defines the completion function. By default this `%`-style formats [`source_template`](#click.shell_completion.ShellComplete.source_template "click.shell_completion.ShellComplete.source_template") with the dict returned by [`source_vars()`](#click.shell_completion.ShellComplete.source_vars "click.shell_completion.ShellComplete.source_vars").

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: shell_completion.ShellComplete.source_template
  id: api/index#click.shell_completion.ShellComplete.source_template
  summary: Completion script template formatted by source()
  description: |-
    `source_template: ClassVar[str]`

    Completion script template formatted by [`source()`](#click.shell_completion.ShellComplete.source "click.shell_completion.ShellComplete.source"). This must be provided by subclasses.
- name: shell_completion.ShellComplete.source_vars()
  id: api/index#click.shell_completion.ShellComplete.source_vars
  summary: Vars for formatting source_template
  description: |-
    `source_vars()`

    Vars for formatting [`source_template`](#click.shell_completion.ShellComplete.source_template "click.shell_completion.ShellComplete.source_template").

    By default this provides `complete_func`, `complete_var`, and `prog_name`.

    Return type:

    [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)"), [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")\]
- name: Showing Progress Bars
  id: utils/index#showing-progress-bars
  summary: Sometimes, you have command line scripts that need to process a lot of data, but you want to quickly show the user some progress about how long that will take
  description: "## Showing Progress Bars\n\nSometimes, you have command line scripts that need to process a lot of data, but you want to quickly show the user some progress about how long that will take. Click supports simple progress bar rendering for that through the [`progressbar()`](../api/index#click.progressbar \"click.progressbar\") function.\n\nNote\n\nIf you find that you have requirements beyond what Click’s progress bar supports, try using [tqdm](https://tqdm.github.io/).\n\nThe basic usage is very simple: the idea is that you have an iterable that you want to operate on. For each item in the iterable it might take some time to do processing. So say you have a loop like this:\n\n``` python\nfor user in all_the_users_to_process:\n    modify_the_user(user)\n```\n\nTo hook this up with an automatically updating progress bar, all you need to do is to change the code to this:\n\n``` python\nimport click\n\nwith click.progressbar(all_the_users_to_process) as bar:\n    for user in bar:\n        modify_the_user(user)\n```\n\nClick will then automatically print a progress bar to the terminal and calculate the remaining time for you. The calculation of remaining time requires that the iterable has a length. If it does not have a length but you know the length, you can explicitly provide it:\n\n``` python\nwith click.progressbar(all_the_users_to_process,\n                       length=number_of_users) as bar:\n    for user in bar:\n        modify_the_user(user)\n```\n\nNote that [`progressbar()`](../api/index#click.progressbar \"click.progressbar\") updates the bar *after* each iteration of the loop. So code like this will render correctly:\n\n``` python\nimport time\n\nwith click.progressbar([1, 2, 3]) as bar:\n    for x in bar:\n        print(f\"sleep({x})...\")\n        time.sleep(x)\n```\n\nAnother useful feature is to associate a label with the progress bar which will be shown preceding the progress bar:\n\n``` python\nwith click.progressbar(all_the_users_to_process,\n                       label='Modifying user accounts',\n                       length=number_of_users) as bar:\n    for user in bar:\n        modify_the_user(user)\n```\n\nSometimes, one may need to iterate over an external iterator, and advance the progress bar irregularly. To do so, you need to specify the length (and no iterable), and use the update method on the context return value instead of iterating directly over it:\n\n``` python\nwith click.progressbar(length=total_size,\n                       label='Unzipping archive') as bar:\n    for archive in zip_file:\n        archive.extract()\n        bar.update(archive.size)\n```\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/utils/](https://click.palletsprojects.com/en/8.1.x/utils/)"
- name: Standard Streams
  id: utils/index#standard-streams
  summary: For command line utilities, it’s very important to get access to input and output streams reliably
  description: |-
    ## Standard Streams

    For command line utilities, it’s very important to get access to input and output streams reliably. Python generally provides access to these streams through `sys.stdout` and friends, but unfortunately, there are API differences between 2.x and 3.x, especially with regards to how these streams respond to Unicode and binary data.

    Because of this, click provides the [`get_binary_stream()`](../api/index#click.get_binary_stream "click.get_binary_stream") and [`get_text_stream()`](../api/index#click.get_text_stream "click.get_text_stream") functions, which produce consistent results with different Python versions and for a wide variety of terminal configurations.

    The end result is that these functions will always return a functional stream object (except in very odd cases; see [Unicode Support](../unicode-support/index)).

    Example:

    ``` python
    import click

    stdin_text = click.get_text_stream('stdin')
    stdout_binary = click.get_binary_stream('stdout')
    ```

    Changelog

    New in version 6.0.

    Click now emulates output streams on Windows to support unicode to the Windows console through separate APIs. For more information see [Windows Console Notes](../wincmd/index).
- name: STRING
  id: api/index#click.STRING
  summary: null
  description: |-
    `click.STRING = STRING`

    Parameters:

    - **value** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) –
    - **param** ([Parameter](#click.Parameter "click.Parameter") *\|* *None*) –
    - **ctx** ([Context](#click.Context "click.Context") *\|* *None*) –

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")
- name: style()
  id: api/index#click.style
  summary: Styles a text with ANSI styles and returns the new string
  description: |-
    `click.style(text, fg=None, bg=None, bold=None, dim=None, underline=None, overline=None, italic=None, blink=None, reverse=None, strikethrough=None, reset=True)`

    Styles a text with ANSI styles and returns the new string. By default the styling is self contained which means that at the end of the string a reset code is issued. This can be prevented by passing `reset=False`.

    Examples:

    ``` python
    click.echo(click.style('Hello World!', fg='green'))
    click.echo(click.style('ATTENTION!', blink=True))
    click.echo(click.style('Some things', reverse=True, fg='cyan'))
    click.echo(click.style('More colors', fg=(255, 12, 128), bg=117))
    ```

    Supported color names:

    - `black` (might be a gray)
    - `red`
    - `green`
    - `yellow` (might be an orange)
    - `blue`
    - `magenta`
    - `cyan`
    - `white` (might be light gray)
    - `bright_black`
    - `bright_red`
    - `bright_green`
    - `bright_yellow`
    - `bright_blue`
    - `bright_magenta`
    - `bright_cyan`
    - `bright_white`
    - `reset` (reset the color code only)

    If the terminal supports it, color may also be specified as:

    - An integer in the interval \[0, 255\]. The terminal must support 8-bit/256-color mode.
    - An RGB tuple of three integers in \[0, 255\]. The terminal must support 24-bit/true-color mode.

    See [https://en.wikipedia.org/wiki/ANSI_color](https://en.wikipedia.org/wiki/ANSI_color) and [https://gist.github.com/XVilka/8346728](https://gist.github.com/XVilka/8346728) for more information.

    Parameters:

    - **text** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – the string to style with ansi codes.
    - **fg** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)") *\|* [Tuple](https://docs.python.org/3/library/typing.html#typing.Tuple "(in Python v3.12)")*\[*[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")*,* [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")*,* [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")*\]* *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – if provided this will become the foreground color.
    - **bg** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)") *\|* [Tuple](https://docs.python.org/3/library/typing.html#typing.Tuple "(in Python v3.12)")*\[*[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")*,* [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")*,* [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")*\]* *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – if provided this will become the background color.
    - **bold** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – if provided this will enable or disable bold mode.
    - **dim** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – if provided this will enable or disable dim mode. This is badly supported.
    - **underline** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – if provided this will enable or disable underline.
    - **overline** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – if provided this will enable or disable overline.
    - **italic** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – if provided this will enable or disable italic.
    - **blink** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – if provided this will enable or disable blinking.
    - **reverse** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – if provided this will enable or disable inverse rendering (foreground becomes background and the other way round).
    - **strikethrough** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)") *\|* *None*) – if provided this will enable or disable striking through text.
    - **reset** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – by default a reset-all code is added at the end of the string which means that styles do not carry over. This can be disabled to compose styles.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")

    Changelog

    Changed in version 8.0: A non-string `message` is converted to a string.

    Changed in version 8.0: Added support for 256 and RGB color codes.

    Changed in version 8.0: Added the `strikethrough`, `italic`, and `overline` parameters.

    Changed in version 7.0: Added support for bright colors.

    New in version 2.0.
- name: Surrogate Handling
  id: unicode-support/index#surrogate-handling
  summary: Click does all the Unicode handling in the standard library and is subject to its behavior
  description: "## Surrogate Handling\n\nClick does all the Unicode handling in the standard library and is subject to its behavior. Unicode requires extra care. The reason for this is that the encoding detection is done in the interpreter, and on Linux and certain other operating systems, its encoding handling is problematic.\n\nThe biggest source of frustration is that Click scripts invoked by init systems, deployment tools, or cron jobs will refuse to work unless a Unicode locale is exported.\n\nIf Click encounters such an environment it will prevent further execution to force you to set a locale. This is done because Click cannot know about the state of the system once it’s invoked and restore the values before Python’s Unicode handling kicked in.\n\nIf you see something like this error:\n\n``` python\nTraceback (most recent call last):\n  ...\nRuntimeError: Click will abort further execution because Python was\n  configured to use ASCII as encoding for the environment. Consult\n  https://click.palletsprojects.com/unicode-support/ for mitigation\n  steps.\n```\n\nYou are dealing with an environment where Python thinks you are restricted to ASCII data. The solution to these problems is different depending on which locale your computer is running in.\n\nFor instance, if you have a German Linux machine, you can fix the problem by exporting the locale to `de_DE.utf-8`:\n\n``` python\nexport LC_ALL=de_DE.utf-8\nexport LANG=de_DE.utf-8\n```\n\nIf you are on a US machine, `en_US.utf-8` is the encoding of choice. On some newer Linux systems, you could also try `C.UTF-8` as the locale:\n\n``` python\nexport LC_ALL=C.UTF-8\nexport LANG=C.UTF-8\n```\n\nOn some systems it was reported that `UTF-8` has to be written as `UTF8` and vice versa. To see which locales are supported you can invoke `locale -a`.\n\nYou need to export the values before you invoke your Python script.\n\nIn Python 3.7 and later you will no longer get a `RuntimeError` in many cases thanks to [**PEP 538**](https://peps.python.org/pep-0538/) and [**PEP 540**](https://peps.python.org/pep-0540/), which changed the default assumption in unconfigured environments. This doesn’t change the general issue that your locale may be misconfigured.\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/unicode-support/](https://click.palletsprojects.com/en/8.1.x/unicode-support/)"
- name: Switching to Setuptools
  id: quickstart/index#switching-to-setuptools
  summary: 'In the code you wrote so far there is a block at the end of the file which looks like this: if __name__ == ''__main__'':. This is traditionally how a standalone Python file looks like'
  description: "## Switching to Setuptools\n\nIn the code you wrote so far there is a block at the end of the file which looks like this: `if __name__ == '__main__':`. This is traditionally how a standalone Python file looks like. With Click you can continue doing that, but there are better ways through setuptools.\n\nThere are two main (and many more) reasons for this:\n\nThe first one is that setuptools automatically generates executable wrappers for Windows so your command line utilities work on Windows too.\n\nThe second reason is that setuptools scripts work with virtualenv on Unix without the virtualenv having to be activated. This is a very useful concept which allows you to bundle your scripts with all requirements into a virtualenv.\n\nClick is perfectly equipped to work with that and in fact the rest of the documentation will assume that you are writing applications through setuptools.\n\nI strongly recommend to have a look at the [Setuptools Integration](../setuptools/index#setuptools-integration) chapter before reading the rest as the examples assume that you will be using setuptools.\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/quickstart/](https://click.palletsprojects.com/en/8.1.x/quickstart/)"
- name: Testing The Script
  id: setuptools/index#testing-the-script
  summary: null
  description: |-
    ## Testing The Script

    To test the script, you can make a new virtualenv and then install your package:

    ``` console
    $ python3 -m venv .venv
    $ . .venv/bin/activate
    $ pip install --editable .
    ```

    Afterwards, your command should be available:

    ``` shell
    $ yourscript
    Hello World!
    ```
- name: testing.CliRunner
  id: api/index#click.testing.CliRunner
  summary: The CLI runner provides functionality to invoke a Click command line script for unittesting purposes in a isolated environment
  description: |-
    `class click.testing.CliRunner(charset='utf-8', env=None, echo_stdin=False, mix_stderr=True)`

    The CLI runner provides functionality to invoke a Click command line script for unittesting purposes in a isolated environment. This only works in single-threaded systems without any concurrency as it changes the global interpreter state.

    Parameters:

    - **charset** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the character set for the input and output data.
    - **env** ([Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None\]* *\|* *None*) – a dictionary with environment variables for overriding.
    - **echo_stdin** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if this is set to `True`, then reading from stdin writes to stdout. This is useful for showing examples in some circumstances. Note that regular prompts will automatically echo the input.
    - **mix_stderr** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if this is set to `False`, then stdout and stderr are preserved as independent streams. This is useful for Unix-philosophy apps that have predictable stdout and noisy stderr, such that each may be measured independently
- name: testing.CliRunner.get_default_prog_name()
  id: api/index#click.testing.CliRunner.get_default_prog_name
  summary: Given a command object it will return the default program name for it
  description: |-
    `get_default_prog_name(cli)`

    Given a command object it will return the default program name for it. The default is the `name` attribute or `"root"` if not set.

    Parameters:

    **cli** ([BaseCommand](#click.BaseCommand "click.BaseCommand")) –

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: testing.CliRunner.invoke()
  id: api/index#click.testing.CliRunner.invoke
  summary: Invokes a command in an isolated environment
  description: |-
    `invoke(cli, args=None, input=None, env=None, catch_exceptions=True, color=False, **extra)`

    Invokes a command in an isolated environment. The arguments are forwarded directly to the command line script, the `extra` keyword arguments are passed to the `main()` function of the command.

    This returns a [`Result`](#click.testing.Result "click.testing.Result") object.

    Parameters:

    - **cli** ([BaseCommand](#click.BaseCommand "click.BaseCommand")) – the command to invoke
    - **args** ([Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]* *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – the arguments to invoke. It may be given as an iterable or a string. When given as string it will be interpreted as a Unix shell command. More details at [`shlex.split()`](https://docs.python.org/3/library/shlex.html#shlex.split "(in Python v3.12)").
    - **input** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.12)") *\|* [IO](https://docs.python.org/3/library/typing.html#typing.IO "(in Python v3.12)")*\[*[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]* *\|* *None*) – the input data for `sys.stdin`.
    - **env** ([Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None\]* *\|* *None*) – the environment overrides.
    - **catch_exceptions** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – Whether to catch any other exceptions than `SystemExit`.
    - **extra** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – the keyword arguments to pass to `main()`.
    - **color** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – whether the output should contain color codes. The application can still override this explicitly.

    Return type:

    [Result](#click.testing.Result "click.testing.Result")

    Changelog

    Changed in version 8.0: The result object has the `return_value` attribute with the value returned from the invoked command.

    Changed in version 4.0: Added the `color` parameter.

    Changed in version 3.0: Added the `catch_exceptions` parameter.

    Changed in version 3.0: The result object has the `exc_info` attribute with the traceback if available.
- name: testing.CliRunner.isolated_filesystem()
  id: api/index#click.testing.CliRunner.isolated_filesystem
  summary: A context manager that creates a temporary directory and changes the current working directory to it
  description: |-
    `isolated_filesystem(temp_dir=None)`

    A context manager that creates a temporary directory and changes the current working directory to it. This isolates tests that affect the contents of the CWD to prevent them from interfering with each other.

    Parameters:

    **temp_dir** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* [PathLike](https://docs.python.org/3/library/os.html#os.PathLike "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*\]* *\|* *None*) – Create the temporary directory under this directory. If given, the created directory is not removed when exiting.

    Return type:

    [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")\]

    Changelog

    Changed in version 8.0: Added the `temp_dir` parameter.
- name: testing.CliRunner.isolation()
  id: api/index#click.testing.CliRunner.isolation
  summary: A context manager that sets up the isolation for invoking of a command line tool
  description: |-
    `isolation(input=None, env=None, color=False)`

    A context manager that sets up the isolation for invoking of a command line tool. This sets up stdin with the given input data and `os.environ` with the overrides from the given dictionary. This also rebinds some internals in Click to be mocked (like the prompt functionality).

    This is automatically done in the [`invoke()`](#click.testing.CliRunner.invoke "click.testing.CliRunner.invoke") method.

    Parameters:

    - **input** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.12)") *\|* [IO](https://docs.python.org/3/library/typing.html#typing.IO "(in Python v3.12)")*\[*[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]* *\|* *None*) – the input stream to put into sys.stdin.
    - **env** ([Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None\]* *\|* *None*) – the environment overrides as dictionary.
    - **color** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – whether the output should contain color codes. The application can still override this explicitly.

    Return type:

    [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator "(in Python v3.12)")\[[Tuple](https://docs.python.org/3/library/typing.html#typing.Tuple "(in Python v3.12)")\[*BytesIO*, *BytesIO* \| None\]\]

    Changelog

    Changed in version 8.0: `stderr` is opened with `errors="backslashreplace"` instead of the default `"strict"`.

    Changed in version 4.0: Added the `color` parameter.
- name: testing.CliRunner.make_env()
  id: api/index#click.testing.CliRunner.make_env
  summary: Returns the environment overrides for invoking a script
  description: |-
    `make_env(overrides=None)`

    Returns the environment overrides for invoking a script.

    Parameters:

    **overrides** ([Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping "(in Python v3.12)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None\]* *\|* *None*) –

    Return type:

    [Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping "(in Python v3.12)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)"), [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") \| None\]
- name: testing.Result
  id: api/index#click.testing.Result
  summary: Holds the captured result of an invoked CLI script
  description: |-
    `class click.testing.Result(runner, stdout_bytes, stderr_bytes, return_value, exit_code, exception, exc_info=None)`

    Holds the captured result of an invoked CLI script.

    Parameters:

    - **runner** ([CliRunner](#click.testing.CliRunner "click.testing.CliRunner")) –
    - **stdout_bytes** ([bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.12)")) –
    - **stderr_bytes** ([bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.12)") *\|* *None*) –
    - **return_value** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) –
    - **exit_code** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")) –
    - **exception** ([BaseException](https://docs.python.org/3/library/exceptions.html#BaseException "(in Python v3.12)") *\|* *None*) –
    - **exc_info** ([Tuple](https://docs.python.org/3/library/typing.html#typing.Tuple "(in Python v3.12)")*\[*[Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")*\[*[BaseException](https://docs.python.org/3/library/exceptions.html#BaseException "(in Python v3.12)")*\],* [BaseException](https://docs.python.org/3/library/exceptions.html#BaseException "(in Python v3.12)")*,* [TracebackType](https://docs.python.org/3/library/types.html#types.TracebackType "(in Python v3.12)")*\]* *\|* *None*) –
- name: testing.Result.exc_info
  id: api/index#click.testing.Result.exc_info
  summary: null
  description: |-
    `exc_info`

    The traceback
- name: testing.Result.exception
  id: api/index#click.testing.Result.exception
  summary: The exception that happened if one did
  description: |-
    `exception`

    The exception that happened if one did.
- name: testing.Result.exit_code
  id: api/index#click.testing.Result.exit_code
  summary: The exit code as integer
  description: |-
    `exit_code`

    The exit code as integer.
- name: testing.Result.output
  id: api/index#click.testing.Result.output
  summary: The (standard) output as unicode string
  description: |-
    `property output: str`

    The (standard) output as unicode string.
- name: testing.Result.return_value
  id: api/index#click.testing.Result.return_value
  summary: The value returned from the invoked command
  description: |-
    `return_value`

    The value returned from the invoked command.

    Changelog

    New in version 8.0.
- name: testing.Result.runner
  id: api/index#click.testing.Result.runner
  summary: null
  description: |-
    `runner`

    The runner that created the result
- name: testing.Result.stderr
  id: api/index#click.testing.Result.stderr
  summary: The standard error as unicode string
  description: "`property stderr: str`\n\nThe standard error as unicode string.\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/api/](https://click.palletsprojects.com/en/8.1.x/api/)"
- name: testing.Result.stderr_bytes
  id: api/index#click.testing.Result.stderr_bytes
  summary: null
  description: |-
    `stderr_bytes`

    The standard error as bytes, or None if not available
- name: testing.Result.stdout
  id: api/index#click.testing.Result.stdout
  summary: The standard output as unicode string
  description: |-
    `property stdout: str`

    The standard output as unicode string.
- name: testing.Result.stdout_bytes
  id: api/index#click.testing.Result.stdout_bytes
  summary: The standard output as bytes
  description: |-
    `stdout_bytes`

    The standard output as bytes.
- name: Token Normalization
  id: advanced/index#token-normalization
  summary: New in version 2.0
  description: |-
    ## Token Normalization

    Changelog

    New in version 2.0.

    Starting with Click 2.0, it’s possible to provide a function that is used for normalizing tokens. Tokens are option names, choice values, or command values. This can be used to implement case insensitive options, for instance.

    In order to use this feature, the context needs to be passed a function that performs the normalization of the token. For instance, you could have a function that converts the token to lowercase:

    ``` python
    CONTEXT_SETTINGS = dict(token_normalize_func=lambda x: x.lower())

    @click.command(context_settings=CONTEXT_SETTINGS)
    @click.option('--name', default='Pete')
    def cli(name):
        click.echo(f"Name: {name}")
    ```

    And how it works on the command line:

    ``` shell
    $ cli --NAME=Pete
    Name: Pete
    ```
- name: Truncating Help Texts
  id: documentation/index#truncating-help-texts
  summary: Click gets command help text from function docstrings
  description: |-
    ## Truncating Help Texts

    Click gets command help text from function docstrings. However if you already use docstrings to document function arguments you may not want to see :param: and :return: lines in your help text.

    You can use the `\f` escape marker to have Click truncate the help text after the marker.

    Example:

    ``` python
    @click.command()
    @click.pass_context
    def cli(ctx):
        """First paragraph.

        This is a very long second
        paragraph and not correctly
        wrapped but it will be rewrapped.
        \f

        :param click.core.Context ctx: Click context.
        """
    ```

    And what it looks like:

    ``` shell
    $ cli --help
    Usage: cli [OPTIONS]

      First paragraph.

      This is a very long second paragraph and not correctly wrapped but it will be
      rewrapped.

    Options:
      --help  Show this message and exit.
    ```
- name: Tuple
  id: api/index#click.Tuple
  summary: The default behavior of Click is to apply a type on a value directly
  description: |-
    `class click.Tuple(types)`

    The default behavior of Click is to apply a type on a value directly. This works well in most cases, except for when `nargs` is set to a fixed count and different types should be used for different items. In this case the [`Tuple`](#click.Tuple "click.Tuple") type can be used. This type can only be used if `nargs` is set to a fixed number.

    For more information see [Tuples as Multi Value Options](../options/index#tuple-type).

    This can be selected by using a Python tuple literal as a type.

    Parameters:

    **types** ([Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence "(in Python v3.12)")*\[*[Type](https://docs.python.org/3/library/typing.html#typing.Type "(in Python v3.12)")*\[*[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")*\]* *\|* [ParamType](#click.ParamType "click.types.ParamType")*\]*) – a list of types that should be used for the tuple items.
- name: Tuples as Multi Value Options
  id: options/index#tuples-as-multi-value-options
  summary: New in version 4.0
  description: |-
    ## Tuples as Multi Value Options

    Changelog

    New in version 4.0.

    As you can see that by using `nargs` set to a specific number each item in the resulting tuple is of the same type. This might not be what you want. Commonly you might want to use different types for different indexes in the tuple. For this you can directly specify a tuple as type:

    ``` python
    @click.command()
    @click.option('--item', type=(str, int))
    def putitem(item):
        name, id = item
        click.echo(f"name={name} id={id}")
    ```

    And on the command line:

    ``` shell
    $ putitem --item peter 1338
    name=peter id=1338
    ```

    By using a tuple literal as type, `nargs` gets automatically set to the length of the tuple and the [`click.Tuple`](../api/index#click.Tuple "click.Tuple") type is automatically used. The above example is thus equivalent to this:

    ``` python
    @click.command()
    @click.option('--item', nargs=2, type=click.Tuple([str, int]))
    def putitem(item):
        name, id = item
        click.echo(f"name={name} id={id}")
    ```
- name: Unicode Arguments
  id: wincmd/index#unicode-arguments
  summary: Click internally is generally based on the concept that any argument can come in as either byte string or unicode string and conversion is performed to the type expected value as late as possible
  description: |-
    ## Unicode Arguments

    Click internally is generally based on the concept that any argument can come in as either byte string or unicode string and conversion is performed to the type expected value as late as possible. This has some advantages as it allows us to accept the data in the most appropriate form for the operating system and Python version.

    This caused some problems on Windows where initially the wrong encoding was used and garbage ended up in your input data. We not only fixed the encoding part, but we also now extract unicode parameters from `sys.argv`.

    There is also another limitation with this: if `sys.argv` was modified prior to invoking a click handler, we have to fall back to the regular byte input in which case not all unicode values are available but only a subset of the codepage used for parameters.
- name: Unicode Output and Input
  id: wincmd/index#unicode-output-and-input
  summary: Unicode output and input on Windows is implemented through the concept of a dispatching text stream
  description: "## Unicode Output and Input\n\nUnicode output and input on Windows is implemented through the concept of a dispatching text stream. What this means is that when click first needs a text output (or input) stream on windows it goes through a few checks to figure out of a windows console is connected or not. If no Windows console is present then the text output stream is returned as such and the encoding for that stream is set to `utf-8` like on all platforms.\n\nHowever if a console is connected the stream will instead be emulated and use the cmd.exe unicode APIs to output text information. In this case the stream will also use `utf-16-le` as internal encoding. However there is some hackery going on that the underlying raw IO buffer is still bypassing the unicode APIs and byte output through an indirection is still possible.\n\n- This unicode support is limited to `click.echo`, `click.prompt` as well as `click.get_text_stream`.\n- Depending on if unicode values or byte strings are passed the control flow goes completely different places internally which can have some odd artifacts if data partially ends up being buffered. Click attempts to protect against that by manually always flushing but if you are mixing and matching different string types to `stdout` or `stderr` you will need to manually flush.\n- The raw output stream is set to binary mode, which is a global operation on Windows, so `print` calls will be affected. Prefer `click.echo` over `print`.\n- On Windows 7 and below, there is a limitation where at most 64k characters can be written in one call in binary mode. In this situation, `sys.stdout` and `sys.stderr` are replaced with wrappers that work around the limitation.\n\nAnother important thing to note is that the Windows console’s default fonts do not support a lot of characters which means that you are mostly limited to international letters but no emojis or special characters.\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/wincmd/](https://click.palletsprojects.com/en/8.1.x/wincmd/)"
- name: UNPROCESSED
  id: api/index#click.UNPROCESSED
  summary: null
  description: |-
    `click.UNPROCESSED = UNPROCESSED`

    Parameters:

    - **value** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) –
    - **param** ([Parameter](#click.Parameter "click.Parameter") *\|* *None*) –
    - **ctx** ([Context](#click.Context "click.Context") *\|* *None*) –

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")
- name: unstyle()
  id: api/index#click.unstyle
  summary: Removes ANSI styling information from a string
  description: |-
    `click.unstyle(text)`

    Removes ANSI styling information from a string. Usually it’s not necessary to use this function as Click’s echo function will automatically remove styling if necessary.

    Changelog

    New in version 2.0.

    Parameters:

    **text** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the text to remove style information from.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
- name: Upgrading To Newer Releases
  id: upgrading/index
  summary: Click attempts the highest level of backwards compatibility but sometimes this is not entirely possible
  description: "# Upgrading To Newer Releases\n\nClick attempts the highest level of backwards compatibility but sometimes this is not entirely possible. In case we need to break backwards compatibility this document gives you information about how to upgrade or handle backwards compatibility properly.\n\n## Upgrading to 7.0\n\nCommands that take their name from the decorated function now replace underscores with dashes. For example, the Python function `run_server` will get the command name `run-server` now. There are a few options to address this:\n\n- To continue with the new behavior, pin your dependency to `Click>=7` and update any documentation to use dashes.\n\n- To keep existing behavior, add an explicit command name with underscores, like `@click.command(\"run_server\")`.\n\n- To try a name with dashes if the name with underscores was not found, pass a `token_normalize_func` to the context:\n\n  ``` python\n  def normalize(name):\n      return name.replace(\"_\", \"-\")\n\n  @click.group(context_settings={\"token_normalize_func\": normalize})\n  def group():\n      ...\n\n  @group.command()\n  def run_server():\n      ...\n  ```\n\n## Upgrading to 3.2\n\nClick 3.2 had to perform two changes to multi commands which were triggered by a change between Click 2 and Click 3 that had bigger consequences than anticipated.\n\n### Context Invokes\n\nClick 3.2 contains a fix for the `Context.invoke()` function when used with other commands. The original intention of this function was to invoke the other command as as if it came from the command line when it was passed a context object instead of a function. This use was only documented in a single place in the documentation before and there was no proper explanation for the method in the API documentation.\n\nThe core issue is that before 3.2 this call worked against intentions:\n\n``` python\nctx.invoke(other_command, 'arg1', 'arg2')\n```\n\nThis was never intended to work as it does not allow Click to operate on the parameters. Given that this pattern was never documented and ill intended the decision was made to change this behavior in a bugfix release before it spreads by accident and developers depend on it.\n\nThe correct invocation for the above command is the following:\n\n``` python\nctx.invoke(other_command, name_of_arg1='arg1', name_of_arg2='arg2')\n```\n\nThis also allowed us to fix the issue that defaults were not handled properly by this function.\n\n### Multicommand Chaining API\n\nClick 3 introduced multicommand chaining. This required a change in how Click internally dispatches. Unfortunately this change was not correctly implemented and it appeared that it was possible to provide an API that can inform the super command about all the subcommands that will be invoked.\n\nThis assumption however does not work with one of the API guarantees that have been given in the past. As such this functionality has been removed in 3.2 as it was already broken. Instead the accidentally broken functionality of the `Context.invoked_subcommand` attribute was restored.\n\nIf you do require the know which exact commands will be invoked there are different ways to cope with this. The first one is to let the subcommands all return functions and then to invoke the functions in a `Context.result_callback()`.\n\n## Upgrading to 2.0\n\nClick 2.0 has one breaking change which is the signature for parameter callbacks. Before 2.0, the callback was invoked with `(ctx, value)` whereas now it’s `(ctx, param, value)`. This change was necessary as it otherwise made reusing callbacks too complicated.\n\nTo ease the transition Click will still accept old callbacks. Starting with Click 3.0 it will start to issue a warning to stderr to encourage you to upgrade.\n\nIn case you want to support both Click 1.0 and Click 2.0, you can make a simple decorator that adjusts the signatures:\n\n``` python\nimport click\nfrom functools import update_wrapper\n\ndef compatcallback(f):\n    # Click 1.0 does not have a version string stored, so we need to\n    # use getattr here to be safe.\n    if getattr(click, '__version__', '0.0') >= '2.0':\n        return f\n    return update_wrapper(lambda ctx, value: f(ctx, None, value), f)\n```\n\nWith that helper you can then write something like this:\n\n``` python\n@compatcallback\ndef callback(ctx, param, value):\n    return value.upper()\n```\n\nNote that because Click 1.0 did not pass a parameter, the `param` argument here would be `None`, so a compatibility callback could not use that argument.\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/upgrading/](https://click.palletsprojects.com/en/8.1.x/upgrading/)"
- name: UsageError
  id: api/index#click.UsageError
  summary: An internal exception that signals a usage error
  description: |-
    `exception click.UsageError(message, ctx=None)`

    An internal exception that signals a usage error. This typically aborts any further handling.

    Parameters:

    - **message** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the error message to display.
    - **ctx** ([Context](#click.Context "click.Context") *\|* *None*) – optionally the context that caused this error. Click will fill in the context automatically in some situations.

    Return type:

    None
- name: UUID
  id: api/index#click.UUID
  summary: null
  description: |-
    `click.UUID = UUID`

    Parameters:

    - **value** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) –
    - **param** ([Parameter](#click.Parameter "click.Parameter") *\|* *None*) –
    - **ctx** ([Context](#click.Context "click.Context") *\|* *None*) –

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")
- name: Values from Environment Variables
  id: options/index#values-from-environment-variables
  summary: A very useful feature of Click is the ability to accept parameters from environment variables in addition to regular parameters
  description: |-
    ## Values from Environment Variables

    A very useful feature of Click is the ability to accept parameters from environment variables in addition to regular parameters. This allows tools to be automated much easier. For instance, you might want to pass a configuration file with a `--config` parameter but also support exporting a `TOOL_CONFIG=hello.cfg` key-value pair for a nicer development experience.

    This is supported by Click in two ways. One is to automatically build environment variables which is supported for options only. To enable this feature, the `auto_envvar_prefix` parameter needs to be passed to the script that is invoked. Each command and parameter is then added as an uppercase underscore-separated variable. If you have a subcommand called `run` taking an option called `reload` and the prefix is `WEB`, then the variable is `WEB_RUN_RELOAD`.

    Example usage:

    ``` python
    @click.command()
    @click.option('--username')
    def greet(username):
        click.echo(f'Hello {username}!')

    if __name__ == '__main__':
        greet(auto_envvar_prefix='GREETER')
    ```

    And from the command line:

    ``` shell
    $ export GREETER_USERNAME=john
    $ greet
    Hello john!
    ```

    When using `auto_envvar_prefix` with command groups, the command name needs to be included in the environment variable, between the prefix and the parameter name, *i.e.* `PREFIX_COMMAND_VARIABLE`. If you have a subcommand called `run-server` taking an option called `host` and the prefix is `WEB`, then the variable is `WEB_RUN_SERVER_HOST`.

    Example:

    ``` python
    @click.group()
    @click.option('--debug/--no-debug')
    def cli(debug):
        click.echo(f"Debug mode is {'on' if debug else 'off'}")

    @cli.command()
    @click.option('--username')
    def greet(username):
        click.echo(f"Hello {username}!")

    if __name__ == '__main__':
        cli(auto_envvar_prefix='GREETER')
    ```

    ``` shell
    $ export GREETER_DEBUG=false
    $ export GREETER_GREET_USERNAME=John
    $ cli greet
    Debug mode is off
    Hello John!
    ```

    The second option is to manually pull values in from specific environment variables by defining the name of the environment variable on the option.

    Example usage:

    ``` python
    @click.command()
    @click.option('--username', envvar='USERNAME')
    def greet(username):
       click.echo(f"Hello {username}!")

    if __name__ == '__main__':
        greet()
    ```

    And from the command line:

    ``` shell
    $ export USERNAME=john
    $ greet
    Hello john!
    ```

    In that case it can also be a list of different environment variables where the first one is picked.
- name: Variadic Arguments
  id: arguments/index#variadic-arguments
  summary: The second most common version is variadic arguments where a specific (or unlimited) number of arguments is accepted
  description: |-
    ## Variadic Arguments

    The second most common version is variadic arguments where a specific (or unlimited) number of arguments is accepted. This can be controlled with the `nargs` parameter. If it is set to `-1`, then an unlimited number of arguments is accepted.

    The value is then passed as a tuple. Note that only one argument can be set to `nargs=-1`, as it will eat up all arguments.

    Example:

    ``` python
    @click.command()
    @click.argument('src', nargs=-1)
    @click.argument('dst', nargs=1)
    def copy(src, dst):
        """Move file SRC to DST."""
        for fn in src:
            click.echo(f"move {fn} to folder {dst}")
    ```

    And what it looks like:

    ``` shell
    $ copy foo.txt bar.txt my_folder
    move foo.txt to folder my_folder
    move bar.txt to folder my_folder
    ```

    Note that this is not how you would write this application. The reason for this is that in this particular example the arguments are defined as strings. Filenames, however, are not strings! They might be on certain operating systems, but not necessarily on all. For better ways to write this, see the next sections.

    Note on Non-Empty Variadic Arguments

    If you come from `argparse`, you might be missing support for setting `nargs` to `+` to indicate that at least one argument is required.

    This is supported by setting `required=True`. However, this should not be used if you can avoid it as we believe scripts should gracefully degrade into becoming noops if a variadic argument is empty. The reason for this is that very often, scripts are invoked with wildcard inputs from the command line and they should not error out if the wildcard is empty.
- name: version_option()
  id: api/index#click.version_option
  summary: Add a --version option which immediately prints the version number and exits the program
  description: |-
    `click.version_option(version=None, *param_decls, package_name=None, prog_name=None, message=None, **kwargs)`

    Add a `--version` option which immediately prints the version number and exits the program.

    If `version` is not provided, Click will try to detect it using `importlib.metadata.version()` to get the version for the `package_name`. On Python \< 3.8, the `importlib_metadata` backport must be installed.

    If `package_name` is not provided, Click will try to detect it by inspecting the stack frames. This will be used to detect the version, so it must match the name of the installed package.

    Parameters:

    - **version** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – The version number to show. If not provided, Click will try to detect it.
    - **param_decls** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – One or more option names. Defaults to the single value `"--version"`.
    - **package_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – The package name to detect the version from. If not provided, Click will try to detect it.
    - **prog_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – The name of the CLI to show in the message. If not provided, it will be detected from the command.
    - **message** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)") *\|* *None*) – The message to show. The values `%(prog)s`, `%(package)s`, and `%(version)s` are available. Defaults to `"%(prog)s, version %(version)s"`.
    - **kwargs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.12)")) – Extra arguments are passed to [`option()`](#click.option "click.option").

    Raises:

    [**RuntimeError**](https://docs.python.org/3/library/exceptions.html#RuntimeError "(in Python v3.12)") – `version` could not be detected.

    Return type:

    [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.12)")\[\[*FC*\], *FC*\]

    Changelog

    Changed in version 8.0: Add the `package_name` parameter, and the `%(package)s` value for messages.

    Changed in version 8.0: Use [`importlib.metadata`](https://docs.python.org/3/library/importlib.metadata.html#module-importlib.metadata "(in Python v3.12)") instead of `pkg_resources`. The version is detected based on the package name, not the entry point name. The Python package name must match the installed package name, or be passed with `package_name=`.
- name: virtualenv
  id: quickstart/index#virtualenv
  summary: Virtualenv is probably what you want to use for developing Click applications
  description: |-
    ## virtualenv

    Virtualenv is probably what you want to use for developing Click applications.

    What problem does virtualenv solve? Chances are that you want to use it for other projects besides your Click script. But the more projects you have, the more likely it is that you will be working with different versions of Python itself, or at least different versions of Python libraries. Let’s face it: quite often libraries break backwards compatibility, and it’s unlikely that any serious application will have zero dependencies. So what do you do if two or more of your projects have conflicting dependencies?

    Virtualenv to the rescue! Virtualenv enables multiple side-by-side installations of Python, one for each project. It doesn’t actually install separate copies of Python, but it does provide a clever way to keep different project environments isolated.

    Create your project folder, then a virtualenv within it:

    ``` python
    $ mkdir myproject
    $ cd myproject
    $ python3 -m venv .venv
    ```

    Now, whenever you want to work on a project, you only have to activate the corresponding environment. On OS X and Linux, do the following:

    ``` python
    $ . .venv/bin/activate
    (venv) $
    ```

    If you are a Windows user, the following command is for you:

    ``` python
    > .venv\scripts\activate
    (venv) >
    ```

    Either way, you should now be using your virtualenv (notice how the prompt of your shell has changed to show the active environment).

    And if you want to stop using the virtualenv, use the following command:

    ``` python
    $ deactivate
    ```

    After doing this, the prompt of your shell should be as familiar as before.

    Now, let’s move on. Enter the following command to get Click activated in your virtualenv:

    ``` python
    $ pip install click
    ```

    A few seconds later and you are good to go.
- name: Waiting for Key Press
  id: utils/index#waiting-for-key-press
  summary: New in version 2.0
  description: |-
    ## Waiting for Key Press

    Changelog

    New in version 2.0.

    Sometimes, it’s useful to pause until the user presses any key on the keyboard. This is especially useful on Windows where `cmd.exe` will close the window at the end of the command execution by default, instead of waiting.

    In click, this can be accomplished with the [`pause()`](../api/index#click.pause "click.pause") function. This function will print a quick message to the terminal (which can be customized) and wait for the user to press a key. In addition to that, it will also become a NOP (no operation instruction) if the script is not run interactively.

    Example:

    ``` python
    import click
    click.pause()
    ```
- name: What if I don’t want that?
  id: exceptions/index#what-if-i-don-t-want-that
  summary: Generally you always have the option to invoke the invoke() method yourself
  description: |-
    ## What if I don’t want that?

    Generally you always have the option to invoke the `invoke()` method yourself. For instance if you have a [`Command`](../api/index#click.Command "click.Command") you can invoke it manually like this:

    ``` python
    ctx = command.make_context('command-name', ['args', 'go', 'here'])
    with ctx:
        result = command.invoke(ctx)
    ```

    In this case exceptions will not be handled at all and bubbled up as you would expect.

    Starting with Click 3.0 you can also use the `Command.main()` method but disable the standalone mode which will do two things: disable exception handling and disable the implicit `sys.exit()` at the end.

    So you can do something like this:

    ``` python
    command.main(['command-name', 'args', 'go', 'here'],
                 standalone_mode=False)
    ```
- name: Where are Errors Handled?
  id: exceptions/index#where-are-errors-handled
  summary: Click’s main error handling is happening in BaseCommand.main()
  description: |-
    ## Where are Errors Handled?

    Click’s main error handling is happening in [`BaseCommand.main()`](../api/index#click.BaseCommand.main "click.BaseCommand.main"). In there it handles all subclasses of [`ClickException`](../api/index#click.ClickException "click.ClickException") as well as the standard [`EOFError`](https://docs.python.org/3/library/exceptions.html#EOFError "(in Python v3.12)") and [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "(in Python v3.12)") exceptions. The latter are internally translated into an [`Abort`](../api/index#click.Abort "click.Abort").

    The logic applied is the following:

    1.  If an [`EOFError`](https://docs.python.org/3/library/exceptions.html#EOFError "(in Python v3.12)") or [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "(in Python v3.12)") happens, reraise it as [`Abort`](../api/index#click.Abort "click.Abort").
    2.  If a [`ClickException`](../api/index#click.ClickException "click.ClickException") is raised, invoke the `ClickException.show()` method on it to display it and then exit the program with `ClickException.exit_code`.
    3.  If an [`Abort`](../api/index#click.Abort "click.Abort") exception is raised print the string `Aborted!` to standard error and exit the program with exit code `1`.
    4.  If it goes through well, exit the program with exit code `0`.
- name: Which Exceptions Exist?
  id: exceptions/index#which-exceptions-exist
  summary: 'Click has two exception bases: ClickException which is raised for all exceptions that Click wants to signal to the user and Abort which is used to instruct Click to abort the execution'
  description: "## Which Exceptions Exist?\n\nClick has two exception bases: [`ClickException`](../api/index#click.ClickException \"click.ClickException\") which is raised for all exceptions that Click wants to signal to the user and [`Abort`](../api/index#click.Abort \"click.Abort\") which is used to instruct Click to abort the execution.\n\nA [`ClickException`](../api/index#click.ClickException \"click.ClickException\") has a `show()` method which can render an error message to stderr or the given file object. If you want to use the exception yourself for doing something check the API docs about what else they provide.\n\nThe following common subclasses exist:\n\n- [`UsageError`](../api/index#click.UsageError \"click.UsageError\") to inform the user that something went wrong.\n- [`BadParameter`](../api/index#click.BadParameter \"click.BadParameter\") to inform the user that something went wrong with a specific parameter. These are often handled internally in Click and augmented with extra information if possible. For instance if those are raised from a callback Click will automatically augment it with the parameter name if possible.\n- [`FileError`](../api/index#click.FileError \"click.FileError\") this is an error that is raised by the `FileType` if Click encounters issues opening the file.\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/exceptions/](https://click.palletsprojects.com/en/8.1.x/exceptions/)"
- name: Why Hardcoded Behaviors?
  id: why/index#why-hardcoded-behaviors
  summary: The other question is why Click goes away from optparse and hardcodes certain behaviors instead of staying configurable
  description: |-
    ## Why Hardcoded Behaviors?

    The other question is why Click goes away from optparse and hardcodes certain behaviors instead of staying configurable. There are multiple reasons for this. The biggest one is that too much configurability makes it hard to achieve a consistent command line experience.

    The best example for this is optparse’s `callback` functionality for accepting an arbitrary number of arguments. Due to syntactical ambiguities on the command line, there is no way to implement fully variadic arguments. There are always tradeoffs that need to be made and in case of `argparse` these tradeoffs have been critical enough, that a system like Click cannot even be implemented on top of it.

    In this particular case, Click attempts to stay with a handful of accepted paradigms for building command line interfaces that can be well documented and tested.
- name: Why No Auto Correction?
  id: why/index#why-no-auto-correction
  summary: The question came up why Click does not auto correct parameters given that even optparse and argparse support automatic expansion of long arguments
  description: "## Why No Auto Correction?\n\nThe question came up why Click does not auto correct parameters given that even optparse and `argparse` support automatic expansion of long arguments. The reason for this is that it’s a liability for backwards compatibility. If people start relying on automatically modified parameters and someone adds a new parameter in the future, the script might stop working. These kinds of problems are hard to find, so Click does not attempt to be magical about this.\n\nThis sort of behavior however can be implemented on a higher level to support things such as explicit aliases. For more information see [Command Aliases](../advanced/index#aliases).\n\n© Copyright 2014 Pallets.  \nLicensed under the BSD 3-Clause License.  \nWe are not supported nor endorsed by Pallets.  \n[https://click.palletsprojects.com/en/8.1.x/why/](https://click.palletsprojects.com/en/8.1.x/why/)"
- name: Why not Argparse?
  id: why/index#why-not-argparse
  summary: Click is internally based on optparse instead of argparse
  description: |-
    ## Why not Argparse?

    Click is internally based on `optparse` instead of `argparse`. This is an implementation detail that a user does not have to be concerned with. Click is not based on `argparse` because it has some behaviors that make handling arbitrary command line interfaces hard:

    - `argparse` has built-in behavior to guess if something is an argument or an option. This becomes a problem when dealing with incomplete command lines; the behaviour becomes unpredictable without full knowledge of a command line. This goes against Click’s ambitions of dispatching to subparsers.
    - `argparse` does not support disabling interspersed arguments. Without this feature, it’s not possible to safely implement Click’s nested parsing.
- name: Why not Docopt etc.?
  id: why/index#why-not-docopt-etc
  summary: Docopt, and many tools like it, are cool in how they work, but very few of these tools deal with nesting of commands and composability in a way like Click
  description: |-
    ## Why not Docopt etc.?

    Docopt, and many tools like it, are cool in how they work, but very few of these tools deal with nesting of commands and composability in a way like Click. To the best of the developer’s knowledge, Click is the first Python library that aims to create a level of composability of applications that goes beyond what the system itself supports.

    Docopt, for instance, acts by parsing your help pages and then parsing according to those rules. The side effect of this is that docopt is quite rigid in how it handles the command line interface. The upside of docopt is that it gives you strong control over your help page; the downside is that due to this it cannot rewrap your output for the current terminal width, and it makes translations hard. On top of that, docopt is restricted to basic parsing. It does not handle argument dispatching and callback invocation or types. This means there is a lot of code that needs to be written in addition to the basic help page to handle the parsing results.

    Most of all, however, it makes composability hard. While docopt does support dispatching to subcommands, it, for instance, does not directly support any kind of automatic subcommand enumeration based on what’s available or it does not enforce subcommands to work in a consistent way.

    This is fine, but it’s different from how Click wants to work. Click aims to support fully composable command line user interfaces by doing the following:

    - Click does not just parse, it also dispatches to the appropriate code.
    - Click has a strong concept of an invocation context that allows subcommands to respond to data from the parent command.
    - Click has strong information available for all parameters and commands, so it can generate unified help pages for the full CLI and assist the user in converting the input data as necessary.
    - Click has a strong understanding of what types are, and it can give the user consistent error messages if something goes wrong. A subcommand written by a different developer will not suddenly die with a different error message because it’s manually handled.
    - Click has enough meta information available for its whole program to evolve over time and improve the user experience without forcing developers to adjust their programs. For instance, if Click decides to change how help pages are formatted, all Click programs will automatically benefit from this.

    The aim of Click is to make composable systems. Whereas, the aim of docopt is to build the most beautiful and hand-crafted command line interfaces. These two goals conflict with one another in subtle ways. Click actively prevents people from implementing certain patterns in order to achieve unified command line interfaces. For instance, as a developer, you are given very little choice in formatting your help pages.
- name: wrap_text()
  id: api/index#click.wrap_text
  summary: A helper function that intelligently wraps text
  description: |-
    `click.wrap_text(text, width=78, initial_indent='', subsequent_indent='', preserve_paragraphs=False)`

    A helper function that intelligently wraps text. By default, it assumes that it operates on a single paragraph of text but if the `preserve_paragraphs` parameter is provided it will intelligently handle paragraphs (defined by two empty lines).

    If paragraphs are handled, a paragraph can be prefixed with an empty line containing the `\b` character (`\x08`) to indicate that no rewrapping should happen in that block.

    Parameters:

    - **text** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the text that should be rewrapped.
    - **width** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")) – the maximum width for the text.
    - **initial_indent** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the initial indent that should be placed on the first line as a string.
    - **subsequent_indent** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")) – the indent string that should be placed on each consecutive line.
    - **preserve_paragraphs** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")) – if this flag is set then the wrapping will intelligently handle paragraphs.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")

    ## Parsing
- name: Yes Parameters
  id: options/index#yes-parameters
  summary: For dangerous operations, it’s very useful to be able to ask a user for confirmation
  description: |-
    ## Yes Parameters

    For dangerous operations, it’s very useful to be able to ask a user for confirmation. This can be done by adding a boolean `--yes` flag and asking for confirmation if the user did not provide it and to fail in a callback:

    ``` python
    def abort_if_false(ctx, param, value):
        if not value:
            ctx.abort()

    @click.command()
    @click.option('--yes', is_flag=True, callback=abort_if_false,
                  expose_value=False,
                  prompt='Are you sure you want to drop the db?')
    def dropdb():
        click.echo('Dropped all tables!')
    ```

    And what it looks like on the command line:

    ``` shell
    $ dropdb
    Are you sure you want to drop the db? [y/N]: n
    Aborted!
    $ dropdb --yes
    Dropped all tables!
    ```

    Because this combination of parameters is quite common, this can also be replaced with the [`confirmation_option()`](../api/index#click.confirmation_option "click.confirmation_option") decorator:

    ``` python
    @click.command()
    @click.confirmation_option(prompt='Are you sure you want to drop the db?')
    def dropdb():
        click.echo('Dropped all tables!')
    ```

    Callback Signature Changes

    In Click 2.0 the signature for callbacks changed. For more information about these changes see [Upgrading to 2.0](../upgrading/index#upgrade-to-2-0).
