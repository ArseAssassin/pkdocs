---
name: Padrino
slug: padrino
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2010–2020 Padrino
  Licensed under the MIT License.
  https://www.rubydoc.info/github/padrino/padrino-framework/file/README.rdoc
homepage: http://padrinorb.com/

---
- name: FileSet
  id: fileset
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: FileSet\n\nExtended by:  \n[FileSet](fileset \"FileSet (module)\")\n\nIncluded in:  \n[FileSet](fileset \"FileSet (module)\")\n\n## Overview\n\nFileSet helper method for iterating and interacting with files inside a directory\n\n## Instance Method Summary\n\n- [`#`**`glob`**`(glob_pattern, file_path = nil) ⇒ Object`](fileset#glob-instance_method \"#glob (instance method)\") Iterates over every file in the glob pattern and yields to a block Returns the list of files matching the glob pattern FileSet.glob('padrino-core/application/\\*.rb', \\_\\_FILE\\_\\_) { \\|file\\| load file }.\n- [`#`**`glob_require`**`(glob_pattern, file_path = nil) ⇒ Object`](fileset#glob_require-instance_method \"#glob_require (instance method)\") Requires each file matched in the glob pattern into the application FileSet.glob_require('padrino-core/application/\\*.rb', \\_\\_FILE\\_\\_).\n\n## Instance Method Details\n\n### \\#glob(glob_pattern, file_path = nil) ⇒ Object\n\nIterates over every file in the glob pattern and yields to a block Returns the list of files matching the glob pattern FileSet.glob('padrino-core/application/\\*.rb', \\_\\_FILE\\_\\_) { \\|file\\| load file }\n\n### \\#glob_require(glob_pattern, file_path = nil) ⇒ Object\n\nRequires each file matched in the glob pattern into the application FileSet.glob_require('padrino-core/application/\\*.rb', \\_\\_FILE\\_\\_)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/FileSet](https://www.rubydoc.info/github/padrino/padrino-framework/FileSet)"
- name: FileSet#glob
  id: fileset#glob-instance_method
  summary: null
  belongs_to: FileSet
  description: |-
    ### \#glob(glob_pattern, file_path = nil) ⇒ Object

    Iterates over every file in the glob pattern and yields to a block Returns the list of files matching the glob pattern FileSet.glob('padrino-core/application/\*.rb', \_\_FILE\_\_) { \|file\| load file }
- name: FileSet#glob_require
  id: fileset#glob_require-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: FileSet
  description: "### \\#glob_require(glob_pattern, file_path = nil) ⇒ Object\n\nRequires each file matched in the glob pattern into the application FileSet.glob_require('padrino-core/application/\\*.rb', \\_\\_FILE\\_\\_)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/FileSet](https://www.rubydoc.info/github/padrino/padrino-framework/FileSet)"
- name: Haml
  id: haml
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Haml\n\n## Defined Under Namespace\n\n**Modules:** [Helpers](haml/helpers \"Haml::Helpers (module)\"), [Util](haml/util \"Haml::Util (module)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Haml](https://www.rubydoc.info/github/padrino/padrino-framework/Haml)"
- name: Haml::Helpers
  id: haml/helpers
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Haml::Helpers\n\nIncludes:  \nActionViewExtensions, XssMods\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Haml/Helpers](https://www.rubydoc.info/github/padrino/padrino-framework/Haml/Helpers)"
- name: Haml::Util
  id: haml/util
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Haml::Util\n\n## Class Method Summary\n\n- [`.`**`rails_xss_safe?`**` ⇒ Boolean`](util#rails_xss_safe%3F-class_method \"rails_xss_safe? (class method)\")\n\n## Class Method Details\n\n### .rails_xss_safe? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Haml/Util](https://www.rubydoc.info/github/padrino/padrino-framework/Haml/Util)"
- name: Haml::Util.rails_xss_safe?
  id: haml/util#rails_xss_safe?-class_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Haml::Util
  description: "### .rails_xss_safe? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Haml/Util](https://www.rubydoc.info/github/padrino/padrino-framework/Haml/Util)"
- name: Kernel
  id: kernel
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Kernel\n\n## Instance Method Summary\n\n- [`#`**`logger`**` ⇒ Object`](kernel#logger-instance_method \"#logger (instance method)\") Define a logger available every where in our app.\n\n## Instance Method Details\n\n### \\#logger ⇒ Object\n\nDefine a logger available every where in our app\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Kernel](https://www.rubydoc.info/github/padrino/padrino-framework/Kernel)"
- name: Kernel#logger
  id: kernel#logger-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Kernel
  description: "### \\#logger ⇒ Object\n\nDefine a logger available every where in our app\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Kernel](https://www.rubydoc.info/github/padrino/padrino-framework/Kernel)"
- name: Module
  id: module
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Module\n\nInherits:  \n[Object](object \"Object (class)\")\n\n- [Object](object \"Object (class)\")\n- Module\n\n## Overview\n\nMake sure we can always use the class name In reloader for accessing class_name Foo.\\_orig_klass_name\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Module](https://www.rubydoc.info/github/padrino/padrino-framework/Module)"
- name: Namespace
  id: toplevel
  summary: Defines the log level for a Padrino project
  description: "# Top Level Namespace\n\n## Defined Under Namespace\n\n**Modules:** [FileSet](fileset \"FileSet (module)\"), [Haml](haml \"Haml (module)\"), [Kernel](kernel \"Kernel (module)\"), [Padrino](padrino \"Padrino (module)\") **Classes:** [Module](module \"Module (class)\"), [Numeric](numeric \"Numeric (class)\"), [Object](object \"Object (class)\"), [String](string \"String (class)\"), [TemporaryString](temporarystring \"TemporaryString (class)\")\n\n## Constant Summary [collapse](#)\n\nRACK_ENV =\n\nDefines our constants\n\n``` ruby\nENV['RACK_ENV'] ||= 'development'\n```\n\nPADRINO_ROOT =\n\n``` ruby\nFile.expand_path('../..', __FILE__)\n```\n\nPADRINO_I18N_LOCALE =\n\n``` ruby\ntrue\n```\n\nPADRINO_LOG_LEVEL =\n\nDefines the log level for a Padrino project.\n\n``` ruby\nENV['PADRINO_LOG_LEVEL']\n```\n\nPADRINO_LOGGER =\n\nDefines the logger used for a Padrino project.\n\n``` ruby\nENV['PADRINO_LOGGER']\n```\n\nSafeBuffer =\n\n``` ruby\nPadrino::SafeBuffer\n```\n\n## Instance Method Summary\n\n- [`#`**`root`**` ⇒ Object`](toplevel#root-instance_method \"#root (instance method)\") Require initializers before all other dependencies.\n\n## Instance Method Details\n\n### \\#root ⇒ Object\n\nRequire initializers before all other dependencies. Dependencies from 'config' folder are NOT re-required on reload.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/toplevel](https://www.rubydoc.info/github/padrino/padrino-framework/toplevel)"
- name: Namespace#root
  id: toplevel#root-instance_method
  summary: Require initializers before all other dependencies
  belongs_to: Namespace
  description: "### \\#root ⇒ Object\n\nRequire initializers before all other dependencies. Dependencies from 'config' folder are NOT re-required on reload.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/toplevel](https://www.rubydoc.info/github/padrino/padrino-framework/toplevel)"
- name: Numeric
  id: numeric
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Numeric\n\nInherits:  \n[Object](object \"Object (class)\")\n\n- [Object](object \"Object (class)\")\n- Numeric\n\n## Instance Method Summary\n\n- [`#`**`html_safe?`**` ⇒ Boolean`](numeric#html_safe%3F-instance_method \"#html_safe? (instance method)\")\n\n## Instance Method Details\n\n### \\#html_safe? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Numeric](https://www.rubydoc.info/github/padrino/padrino-framework/Numeric)"
- name: Numeric#html_safe?
  id: numeric#html_safe?-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Numeric
  description: "### \\#html_safe? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Numeric](https://www.rubydoc.info/github/padrino/padrino-framework/Numeric)"
- name: Object
  id: object
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Object\n\nInherits:  \nBasicObject\n\n## Instance Method Summary\n\n- [`#`**`html_safe?`**` ⇒ Boolean`](object#html_safe%3F-instance_method \"#html_safe? (instance method)\")\n\n## Instance Method Details\n\n### \\#html_safe? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Object](https://www.rubydoc.info/github/padrino/padrino-framework/Object)"
- name: Object#html_safe?
  id: object#html_safe?-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Object
  description: "### \\#html_safe? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Object](https://www.rubydoc.info/github/padrino/padrino-framework/Object)"
- name: Padrino
  id: padrino
  summary: List of callers in a Padrino application that should be ignored as part of a stack trace
  description: "# Module: Padrino\n\nExtended by:  \n[Configuration](padrino/configuration \"Padrino::Configuration (module)\"), [Loader](padrino/loader \"Padrino::Loader (module)\")\n\n## Overview\n\nThis module is based on Sequel 5.4.0 sequel-5.4.0/lib/sequel/model/default_inflections.rb\n\n## Defined Under Namespace\n\n**Modules:** [Admin](padrino/admin \"Padrino::Admin (module)\"), [ApplicationSetup](padrino/applicationsetup \"Padrino::ApplicationSetup (module)\"), [Cache](padrino/cache \"Padrino::Cache (module)\"), [Configuration](padrino/configuration \"Padrino::Configuration (module)\"), [Flash](padrino/flash \"Padrino::Flash (module)\"), [Generators](padrino/generators \"Padrino::Generators (module)\"), [Helpers](padrino/helpers \"Padrino::Helpers (module)\"), [Inflections](padrino/inflections \"Padrino::Inflections (module)\"), [Loader](padrino/loader \"Padrino::Loader (module)\"), [Mailer](padrino/mailer \"Padrino::Mailer (module)\"), [Module](padrino/module \"Padrino::Module (module)\"), [ParamsProtection](padrino/paramsprotection \"Padrino::ParamsProtection (module)\"), [PathRouter](padrino/pathrouter \"Padrino::PathRouter (module)\"), [Performance](padrino/performance \"Padrino::Performance (module)\"), [Reloader](padrino/reloader \"Padrino::Reloader (module)\"), [Rendering](padrino/rendering \"Padrino::Rendering (module)\"), [Routing](padrino/routing \"Padrino::Routing (module)\"), [Tasks](padrino/tasks \"Padrino::Tasks (module)\"), [Utils](padrino/utils \"Padrino::Utils (module)\") **Classes:** [Application](padrino/application \"Padrino::Application (class)\"), [AuthenticityToken](padrino/authenticitytoken \"Padrino::AuthenticityToken (class)\"), [Filter](padrino/filter \"Padrino::Filter (class)\"), [Logger](padrino/logger \"Padrino::Logger (class)\"), [Mounter](padrino/mounter \"Padrino::Mounter (class)\"), [Router](padrino/router \"Padrino::Router (class)\"), [SafeBuffer](padrino/safebuffer \"Padrino::SafeBuffer (class)\"), [Server](padrino/server \"Padrino::Server (class)\")\n\n## Constant Summary [collapse](#)\n\nPADRINO_IGNORE_CALLERS =\n\nList of callers in a Padrino application that should be ignored as part of a stack trace.\n\n``` ruby\n[\n  %r{lib/padrino-.*$},\n  %r{/padrino-.*/(lib|bin)},\n  %r{/bin/padrino$},\n  %r{/sinatra(/(base|main|show_?exceptions))?\\.rb$},\n  %r{lib/tilt.*\\.rb$},\n  %r{lib/rack.*\\.rb$},\n  %r{lib/mongrel.*\\.rb$},\n  %r{lib/shotgun.*\\.rb$},\n  %r{bin/shotgun$},\n  %r{\\(.*\\)},\n  %r{shoulda/context\\.rb$},\n  %r{mocha/integration},\n  %r{test/unit},\n  %r{rake_test_loader\\.rb},\n  %r{custom_require\\.rb$},\n  %r{active_support},\n  %r{/thor},\n  %r{/lib/bundler},\n]\n```\n\nVERSION =\n\nThe version constant for the current version of Padrino.\n\n``` ruby\n'0.15.0'\n```\n\nDEFAULT_INFLECTIONS_PROC =\n\nProc that is instance evaled to create the default inflections for both the model inflector and the inflector extension.\n\n``` ruby\nproc do\n  plural(/$/, 's')\n  plural(/s$/i, 's')\n  plural(/(alias|(?:stat|octop|vir|b)us)$/i, '\\1es')\n  plural(/(buffal|tomat)o$/i, '\\1oes')\n  plural(/([ti])um$/i, '\\1a')\n  plural(/sis$/i, 'ses')\n  plural(/(?:([^f])fe|([lr])f)$/i, '\\1\\2ves')\n  plural(/(hive)$/i, '\\1s')\n  plural(/([^aeiouy]|qu)y$/i, '\\1ies')\n  plural(/(x|ch|ss|sh)$/i, '\\1es')\n  plural(/(matr|vert|ind)ix|ex$/i, '\\1ices')\n  plural(/([m|l])ouse$/i, '\\1ice')\n\n  singular(/s$/i, '')\n  singular(/([ti])a$/i, '\\1um')\n  singular(/(analy|ba|cri|diagno|parenthe|progno|synop|the)ses$/i, '\\1sis')\n  singular(/([^f])ves$/i, '\\1fe')\n  singular(/([h|t]ive)s$/i, '\\1')\n  singular(/([lr])ves$/i, '\\1f')\n  singular(/([^aeiouy]|qu)ies$/i, '\\1y')\n  singular(/(m)ovies$/i, '\\1ovie')\n  singular(/(x|ch|ss|sh)es$/i, '\\1')\n  singular(/([m|l])ice$/i, '\\1ouse')\n  singular(/buses$/i, 'bus')\n  singular(/oes$/i, 'o')\n  singular(/shoes$/i, 'shoe')\n  singular(/(alias|(?:stat|octop|vir|b)us)es$/i, '\\1')\n  singular(/(vert|ind)ices$/i, '\\1ex')\n  singular(/matrices$/i, 'matrix')\n\n  irregular('person', 'people')\n  irregular('man', 'men')\n  irregular('child', 'children')\n  irregular('sex', 'sexes')\n  irregular('move', 'moves')\n  irregular('quiz', 'quizzes')\n  irregular('testis', 'testes')\n\n  uncountable(%w(equipment information rice money species series fish sheep news))\nend\n```\n\n## Class Attribute Summary\n\n- [`.`**`mounted_root`**`(*args) ⇒ String`](padrino#mounted_root-class_method \"mounted_root (class method)\") The root to the mounted apps base directory.\n\n## Class Method Summary\n\n- [`.`**`add_middleware`**`(router) ⇒ Object`](padrino#add_middleware-class_method \"add_middleware (class method)\") Creates Rack stack with the router added to the middleware chain.\n- [`.`**`after_load`**`(&block) ⇒ Object`](padrino#after_load-class_method \"after_load (class method)\")\n- [`.`**`application`**` ⇒ Padrino::Router`](padrino#application-class_method \"application (class method)\") The resulting rack builder mapping each 'mounted' application.\n- [`.`**`before_load`**`(&block) ⇒ Object`](padrino#before_load-class_method \"before_load (class method)\")\n- [`.`**`bin`**`(*args) ⇒ Boolean`](padrino#bin-class_method \"bin (class method)\") This method return the correct location of padrino bin or exec it using Kernel#system with the given args.\n- [`.`**`bin_gen`**`(*args) ⇒ Object`](padrino#bin_gen-class_method \"bin_gen (class method)\") This method return the correct location of padrino-gen bin or exec it using Kernel#system with the given args.\n- [`.`**`cache`**` ⇒ Object`](padrino#cache-class_method \"cache (class method)\") Returns the caching engine.\n- [`.`**`cache=`**`(value) ⇒ Object`](padrino#cache=-class_method \"cache= (class method)\") Set the caching engine.\n- [`.`**`clear_middleware!`**` ⇒ Array`](padrino#clear_middleware!-class_method \"clear_middleware! (class method)\") Clears all previously configured middlewares.\n- [`.`**`configure_apps`**` { ... } ⇒ Object`](padrino#configure_apps-class_method \"configure_apps (class method)\") Configure Global Project Settings for mounted apps.\n- [`.`**`env`**` ⇒ Symbol`](padrino#env-class_method \"env (class method)\") Helper method that return [RACK_ENV](toplevel#RACK_ENV-constant \"RACK_ENV (constant)\").\n- [`.`**`gem`**`(name, main_module) ⇒ Object`](padrino#gem-class_method \"gem (class method)\") Registers a gem with padrino.\n- [`.`**`gems`**` ⇒ Object`](padrino#gems-class_method \"gems (class method)\")\n- [`.`**`global_configurations`**` ⇒ Object`](padrino#global_configurations-class_method \"global_configurations (class method)\") Stores global configuration blocks.\n- [`.`**`insert_mounted_app`**`(mounter) ⇒ Object`](padrino#insert_mounted_app-class_method \"insert_mounted_app (class method)\") Inserts a Mounter object into the mounted applications (avoids duplicates).\n- [`.`**`logger`**` ⇒ Padrino::Logger`](padrino#logger-class_method \"logger (class method)\")\n- [`.`**`logger=`**`(value) ⇒ Object`](padrino#logger=-class_method \"logger= (class method)\") Set the padrino logger.\n- [`.`**`middleware`**` ⇒ Array<Array<Class, Array, Proc>>`](padrino#middleware-class_method \"middleware (class method)\") A Rack::Builder object that allows to add middlewares in front of all Padrino applications.\n- [`.`**`modules`**` ⇒ Object`](padrino#modules-class_method \"modules (class method)\")\n- [`.`**`mount`**`(name, options = {}) ⇒ Object`](padrino#mount-class_method \"mount (class method)\") Mounts a new sub-application onto Padrino project.\n- [`.`**`mounted_apps`**` ⇒ Array`](padrino#mounted_apps-class_method \"mounted_apps (class method)\") The mounted padrino applications (MountedApp objects).\n- [`.`**`perf_memusage_command`**` ⇒ Object`](padrino#perf_memusage_command-class_method \"perf_memusage_command (class method)\")\n- [`.`**`root`**`(*args) ⇒ String`](padrino#root-class_method \"root (class method)\") Helper method for file references.\n- [`.`**`ruby_command`**` ⇒ String`](padrino#ruby_command-class_method \"ruby_command (class method)\") Return the path to the ruby interpreter taking into account multiple installations and windows extensions.\n- [`.`**`run!`**`(options = {}) ⇒ Object`](padrino#run!-class_method \"run! (class method)\") Runs the Padrino apps as a self-hosted server using: thin, mongrel, or WEBrick in that order.\n- [`.`**`set_encoding`**` ⇒ NilClass`](padrino#set_encoding-class_method \"set_encoding (class method)\") Set `Encoding.default_internal` and `Encoding.default_external` to `Encoding::UFT_8`.\n- [`.`**`use`**`(mw, *args) { ... } ⇒ Object`](padrino#use-class_method \"use (class method)\") Convenience method for adding a Middleware to the whole padrino app.\n- [`.`**`version`**` ⇒ String`](padrino#version-class_method \"version (class method)\") The current Padrino version.\n\n## Instance Method Summary\n\n- [`#`**`RUBY_IGNORE_CALLERS`**` ⇒ Object`](padrino#RUBY_IGNORE_CALLERS-instance_method \"#RUBY_IGNORE_CALLERS (instance method)\") Add rubinius (and hopefully other VM implementations) ignore patterns …\n\n### Methods included from Loader\n\n[after_load](padrino/loader#after_load-instance_method \"Padrino::Loader#after_load (method)\"), [before_load](padrino/loader#before_load-instance_method \"Padrino::Loader#before_load (method)\"), [called_from](padrino/loader#called_from-instance_method \"Padrino::Loader#called_from (method)\"), [clear!](padrino/loader#clear!-instance_method \"Padrino::Loader#clear! (method)\"), [dependency_paths](padrino/loader#dependency_paths-instance_method \"Padrino::Loader#dependency_paths (method)\"), [load!](padrino/loader#load!-instance_method \"Padrino::Loader#load! (method)\"), [loaded?](padrino/loader#loaded%3F-instance_method \"Padrino::Loader#loaded? (method)\"), [precompile_all_routes!](padrino/loader#precompile_all_routes!-instance_method \"Padrino::Loader#precompile_all_routes! (method)\"), [reload!](padrino/loader#reload!-instance_method \"Padrino::Loader#reload! (method)\"), [require_dependencies](padrino/loader#require_dependencies-instance_method \"Padrino::Loader#require_dependencies (method)\")\n\n### Methods included from Configuration\n\n[config](padrino/configuration#config-instance_method \"Padrino::Configuration#config (method)\"), [configure](padrino/configuration#configure-instance_method \"Padrino::Configuration#configure (method)\")\n\n## Class Attribute Details\n\n### .mounted_root(\\*args) ⇒ String\n\nReturns the root to the mounted apps base directory.\n\n#### Parameters:\n\n- `args` (`Array`)\n\n#### Returns:\n\n- ([`String`](string \"String (class)\")) — the root to the mounted apps base directory.\n\n## Class Method Details\n\n### .add_middleware(router) ⇒ Object\n\nCreates Rack stack with the router added to the middleware chain.\n\n### .after_load(&block) ⇒ Object\n\n### .application ⇒ Padrino::Router\n\nThe resulting rack builder mapping each 'mounted' application.\n\n#### Returns:\n\n- ([`Padrino::Router`](padrino/router \"Padrino::Router (class)\")) — The router for the application.\n\n#### Raises:\n\n- (`ApplicationLoadError`) — No applications were mounted.\n\n### .before_load(&block) ⇒ Object\n\n### .bin(\\*args) ⇒ Boolean\n\nThis method return the correct location of padrino bin or exec it using Kernel#system with the given args.\n\n#### Examples:\n\n``` ruby\nPadrino.bin('start', '-e production')\n```\n\n#### Parameters:\n\n- `args` (`Array`) — command or commands to execute\n\n#### Returns:\n\n- (`Boolean`)\n\n### .bin_gen(\\*args) ⇒ Object\n\nThis method return the correct location of padrino-gen bin or exec it using Kernel#system with the given args.\n\n#### Examples:\n\n``` ruby\nPadrino.bin_gen(:app, name.to_s, \"-r=#{destination_root}\")\n```\n\n#### Parameters:\n\n- `args.` (`Array<`[`String`](string \"String (class)\")`>`) — Splat of arguments to pass to padrino-gen.\n\n### .cache ⇒ Object\n\nReturns the caching engine.\n\n#### Examples:\n\n``` ruby\n# with: Padrino.cache = Padrino::Cache.new(:File, :dir => /my/cache/path)\nPadrino.cache['val'] = 'test'\nPadrino.cache['val'] # => 'test'\nPadrino.cache.delete('val')\nPadrino.cache.clear\n```\n\n### .cache=(value) ⇒ Object\n\nSet the caching engine.\n\n#### Examples:\n\n``` ruby\nPadrino.cache = Padrino::Cache.new(:LRUHash) # default choice\nPadrino.cache = Padrino::Cache.new(:File, :dir => Padrino.root('tmp', app_name.to_s, 'cache')) # Keeps cached values in file\nPadrino.cache = Padrino::Cache.new(:Memcached) # Uses default server at localhost\nPadrino.cache = Padrino::Cache.new(:Memcached, :server => '127.0.0.1:11211', :exception_retry_limit => 1)\nPadrino.cache = Padrino::Cache.new(:Memcached, :backend => memcached_or_dalli_instance)\nPadrino.cache = Padrino::Cache.new(:Redis) # Uses default server at localhost\nPadrino.cache = Padrino::Cache.new(:Redis, :host => '127.0.0.1', :port => 6379, :db => 0)\nPadrino.cache = Padrino::Cache.new(:Redis, :backend => redis_instance)\nPadrino.cache = Padrino::Cache.new(:Mongo) # Uses default server at localhost\nPadrino.cache = Padrino::Cache.new(:Mongo, :backend => mongo_client_instance)\n\n# You can manage your cache from anywhere in your app:\n\nPadrino.cache['val'] = 'test'\nPadrino.cache['val'] # => 'test'\nPadrino.cache.delete('val')\nPadrino.cache.clear\n```\n\n#### Parameters:\n\n- `value` — Instance of Moneta store\n\n### .clear_middleware! ⇒ Array\n\nClears all previously configured middlewares.\n\n#### Returns:\n\n- (`Array`) — An empty array\n\n### .configure_apps { ... } ⇒ Object\n\nConfigure Global Project Settings for mounted apps. These can be overloaded in each individual app's own personal configuration. This can be used like:\n\n#### Examples:\n\n``` ruby\nPadrino.configure_apps do\n  enable  :sessions\n  disable :raise_errors\nend\n```\n\n#### Yields:\n\n- The given block will be called to configure each application.\n\n### .env ⇒ Symbol\n\nHelper method that return [RACK_ENV](toplevel#RACK_ENV-constant \"RACK_ENV (constant)\").\n\n#### Returns:\n\n- (`Symbol`) — The Padrino Environment.\n\n### .gem(name, main_module) ⇒ Object\n\nRegisters a gem with padrino. This relieves the caller from setting up loadpaths by itself and enables Padrino to look up apps in gem folder.\n\nThe name given has to be the proper gem name as given in the gemspec.\n\n#### Parameters:\n\n- `name` ([`String`](string \"String (class)\")) — The name of the gem being registered.\n- `main_module` ([`Module`](padrino/module \"Padrino::Module (module)\")) — The main module of the gem.\n\n### .gems ⇒ Object\n\n### .global_configurations ⇒ Object\n\nStores global configuration blocks.\n\n### .insert_mounted_app(mounter) ⇒ Object\n\nInserts a Mounter object into the mounted applications (avoids duplicates).\n\n#### Parameters:\n\n- `mounter` ([`Padrino::Mounter`](padrino/mounter \"Padrino::Mounter (class)\"))\n\n### .logger ⇒ Padrino::Logger\n\n#### Examples:\n\n``` ruby\nlogger.debug \"foo\"\nlogger.warn \"bar\"\n```\n\n#### Returns:\n\n- ([`Padrino::Logger`](padrino/logger \"Padrino::Logger (class)\"))\n\n### .logger=(value) ⇒ Object\n\nSet the padrino logger.\n\n#### Examples:\n\nusing ruby default logger\n\n``` ruby\nrequire 'logger'\nnew_logger = ::Logger.new(STDOUT)\nnew_logger.extend(Padrino::Logger::Extensions)\nPadrino.logger = new_logger\n```\n\nusing ActiveSupport\n\n``` ruby\nrequire 'active_support/buffered_logger'\nPadrino.logger = Buffered.new(STDOUT)\n```\n\nusing custom logger class\n\n``` ruby\nrequire 'logger'\nclass CustomLogger < ::Logger\n  include Padrino::Logger::Extensions\nend\nPadrino.logger = CustomLogger.new(STDOUT)\n```\n\n#### Parameters:\n\n- `value` ([`Object`](object \"Object (class)\")) — an object that respond to \\<\\<, write, puts, debug, warn, devel, etc..\n\n#### Returns:\n\n- ([`Object`](object \"Object (class)\")) — The given value.\n\n### .middleware ⇒ Array\\<Array\\<Class, Array, Proc\\>\\>\n\nA Rack::Builder object that allows to add middlewares in front of all Padrino applications.\n\n#### Returns:\n\n- (`Array<Array<Class, Array, Proc>>`) — The middleware classes.\n\n### .modules ⇒ Object\n\n### .mount(name, options = {}) ⇒ Object\n\nMounts a new sub-application onto Padrino project.\n\n#### Examples:\n\n``` ruby\nPadrino.mount(\"blog_app\").to(\"/blog\")\n```\n\n#### See Also:\n\n- Padrino::Mounter#new\n\n### .mounted_apps ⇒ Array\n\nReturns the mounted padrino applications (MountedApp objects).\n\n#### Returns:\n\n- (`Array`) — the mounted padrino applications (MountedApp objects)\n\n### .perf_memusage_command ⇒ Object\n\n### .root(\\*args) ⇒ String\n\nHelper method for file references.\n\n#### Examples:\n\n``` ruby\n# Referencing a file in config called settings.yml\nPadrino.root(\"config\", \"settings.yml\")\n# returns PADRINO_ROOT + \"/config/setting.yml\"\n```\n\n#### Parameters:\n\n- `args` (`Array<`[`String`](string \"String (class)\")`>`) — The directories to join to [PADRINO_ROOT](toplevel#PADRINO_ROOT-constant \"PADRINO_ROOT (constant)\").\n\n#### Returns:\n\n- ([`String`](string \"String (class)\")) — The absolute path.\n\n### .ruby_command ⇒ String\n\nReturn the path to the ruby interpreter taking into account multiple installations and windows extensions.\n\n#### Returns:\n\n- ([`String`](string \"String (class)\")) — path to ruby bin executable\n\n### .run!(options = {}) ⇒ Object\n\nRuns the Padrino apps as a self-hosted server using: thin, mongrel, or WEBrick in that order.\n\n#### Examples:\n\n``` ruby\nPadrino.run! # with these defaults => host: \"127.0.0.1\", port: \"3000\", adapter: the first found\nPadrino.run!(\"0.0.0.0\", \"4000\", \"mongrel\") # use => host: \"0.0.0.0\", port: \"4000\", adapter: \"mongrel\"\n```\n\n### .set_encoding ⇒ NilClass\n\nSet `Encoding.default_internal` and `Encoding.default_external` to `Encoding::UFT_8`.\n\nPlease note that in `1.9.2` with some template engines like `haml` you should turn off Encoding.default_internal to prevent problems.\n\n#### Returns:\n\n- (`NilClass`)\n\n#### See Also:\n\n- [https://github.com/rtomayko/tilt/issues/75](https://github.com/rtomayko/tilt/issues/75 \"https://github.com/rtomayko/tilt/issues/75\")\n\n### .use(mw, \\*args) { ... } ⇒ Object\n\nConvenience method for adding a Middleware to the whole padrino app.\n\n#### Parameters:\n\n- `m` (`Class`) — The middleware class.\n- `args` (`Array`) — The arguments for the middleware.\n\n#### Yields:\n\n- The given block will be passed to the initialized middleware.\n\n### .version ⇒ String\n\nThe current Padrino version.\n\n#### Returns:\n\n- ([`String`](string \"String (class)\")) — The version number.\n\n## Instance Method Details\n\n### \\#RUBY_IGNORE_CALLERS ⇒ Object\n\nAdd rubinius (and hopefully other VM implementations) ignore patterns …\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino)"
- name: Padrino#RUBY_IGNORE_CALLERS
  id: padrino#RUBY_IGNORE_CALLERS-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino
  description: "### \\#RUBY_IGNORE_CALLERS ⇒ Object\n\nAdd rubinius (and hopefully other VM implementations) ignore patterns …\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino)"
- name: Padrino.add_middleware
  id: padrino#add_middleware-class_method
  summary: Creates Rack stack with the router added to the middleware chain
  belongs_to: Padrino
  description: |-
    ### .add_middleware(router) ⇒ Object

    Creates Rack stack with the router added to the middleware chain.
- name: Padrino.after_load
  id: padrino#after_load-class_method
  summary: null
  belongs_to: Padrino
  description: '### .after_load(&block) ⇒ Object'
- name: Padrino.application
  id: padrino#application-class_method
  summary: The resulting rack builder mapping each 'mounted' application
  belongs_to: Padrino
  description: |-
    ### .application ⇒ Padrino::Router

    The resulting rack builder mapping each 'mounted' application.

    #### Returns:

    - ([`Padrino::Router`](padrino/router "Padrino::Router (class)")) — The router for the application.

    #### Raises:

    - (`ApplicationLoadError`) — No applications were mounted.
- name: Padrino.before_load
  id: padrino#before_load-class_method
  summary: null
  belongs_to: Padrino
  description: '### .before_load(&block) ⇒ Object'
- name: Padrino.bin
  id: padrino#bin-class_method
  summary: This method return the correct location of padrino bin or exec it using Kernel#system with the given args
  belongs_to: Padrino
  description: |-
    ### .bin(\*args) ⇒ Boolean

    This method return the correct location of padrino bin or exec it using Kernel#system with the given args.

    #### Examples:

    ``` ruby
    Padrino.bin('start', '-e production')
    ```

    #### Parameters:

    - `args`(`Array`) — command or commands to execute

    #### Returns:

    - (`Boolean`)
- name: Padrino.bin_gen
  id: padrino#bin_gen-class_method
  summary: This method return the correct location of padrino-gen bin or exec it using Kernel#system with the given args
  belongs_to: Padrino
  description: |-
    ### .bin_gen(\*args) ⇒ Object

    This method return the correct location of padrino-gen bin or exec it using Kernel#system with the given args.

    #### Examples:

    ``` ruby
    Padrino.bin_gen(:app, name.to_s, "-r=#{destination_root}")
    ```

    #### Parameters:

    - `args.`(`Array<`[`String`](string "String (class)")`>`) — Splat of arguments to pass to padrino-gen.
- name: Padrino.cache
  id: padrino#cache-class_method
  summary: Returns the caching engine
  belongs_to: Padrino
  description: |-
    ### .cache ⇒ Object

    Returns the caching engine.

    #### Examples:

    ``` ruby
    # with: Padrino.cache = Padrino::Cache.new(:File, :dir => /my/cache/path)
    Padrino.cache['val'] = 'test'
    Padrino.cache['val'] # => 'test'
    Padrino.cache.delete('val')
    Padrino.cache.clear
    ```
- name: Padrino.cache=
  id: padrino#cache=-class_method
  summary: Set the caching engine
  belongs_to: Padrino
  description: |-
    ### .cache=(value) ⇒ Object

    Set the caching engine.

    #### Examples:

    ``` ruby
    Padrino.cache = Padrino::Cache.new(:LRUHash) # default choice
    Padrino.cache = Padrino::Cache.new(:File, :dir => Padrino.root('tmp', app_name.to_s, 'cache')) # Keeps cached values in file
    Padrino.cache = Padrino::Cache.new(:Memcached) # Uses default server at localhost
    Padrino.cache = Padrino::Cache.new(:Memcached, :server => '127.0.0.1:11211', :exception_retry_limit => 1)
    Padrino.cache = Padrino::Cache.new(:Memcached, :backend => memcached_or_dalli_instance)
    Padrino.cache = Padrino::Cache.new(:Redis) # Uses default server at localhost
    Padrino.cache = Padrino::Cache.new(:Redis, :host => '127.0.0.1', :port => 6379, :db => 0)
    Padrino.cache = Padrino::Cache.new(:Redis, :backend => redis_instance)
    Padrino.cache = Padrino::Cache.new(:Mongo) # Uses default server at localhost
    Padrino.cache = Padrino::Cache.new(:Mongo, :backend => mongo_client_instance)

    # You can manage your cache from anywhere in your app:

    Padrino.cache['val'] = 'test'
    Padrino.cache['val'] # => 'test'
    Padrino.cache.delete('val')
    Padrino.cache.clear
    ```

    #### Parameters:

    - `value` — Instance of Moneta store
- name: Padrino.clear_middleware!
  id: padrino#clear_middleware!-class_method
  summary: Clears all previously configured middlewares
  belongs_to: Padrino
  description: |-
    ### .clear_middleware! ⇒ Array

    Clears all previously configured middlewares.

    #### Returns:

    - (`Array`) — An empty array
- name: Padrino.configure_apps
  id: padrino#configure_apps-class_method
  summary: Configure Global Project Settings for mounted apps
  belongs_to: Padrino
  description: |-
    ### .configure_apps { ... } ⇒ Object

    Configure Global Project Settings for mounted apps. These can be overloaded in each individual app's own personal configuration. This can be used like:

    #### Examples:

    ``` ruby
    Padrino.configure_apps do
      enable  :sessions
      disable :raise_errors
    end
    ```

    #### Yields:

    - The given block will be called to configure each application.
- name: Padrino.env
  id: padrino#env-class_method
  summary: Helper method that return RACK_ENV
  belongs_to: Padrino
  description: |-
    ### .env ⇒ Symbol

    Helper method that return [RACK_ENV](toplevel#RACK_ENV-constant "RACK_ENV (constant)").

    #### Returns:

    - (`Symbol`) — The Padrino Environment.
- name: Padrino.gem
  id: padrino#gem-class_method
  summary: Registers a gem with padrino
  belongs_to: Padrino
  description: |-
    ### .gem(name, main_module) ⇒ Object

    Registers a gem with padrino. This relieves the caller from setting up loadpaths by itself and enables Padrino to look up apps in gem folder.

    The name given has to be the proper gem name as given in the gemspec.

    #### Parameters:

    - `name`([`String`](string "String (class)")) — The name of the gem being registered.
    - `main_module`([`Module`](padrino/module "Padrino::Module (module)")) — The main module of the gem.
- name: Padrino.gems
  id: padrino#gems-class_method
  summary: null
  belongs_to: Padrino
  description: '### .gems ⇒ Object'
- name: Padrino.global_configurations
  id: padrino#global_configurations-class_method
  summary: Stores global configuration blocks
  belongs_to: Padrino
  description: |-
    ### .global_configurations ⇒ Object

    Stores global configuration blocks.
- name: Padrino.insert_mounted_app
  id: padrino#insert_mounted_app-class_method
  summary: Inserts a Mounter object into the mounted applications (avoids duplicates)
  belongs_to: Padrino
  description: |-
    ### .insert_mounted_app(mounter) ⇒ Object

    Inserts a Mounter object into the mounted applications (avoids duplicates).

    #### Parameters:

    - `mounter` ([`Padrino::Mounter`](padrino/mounter "Padrino::Mounter (class)"))
- name: Padrino.logger
  id: padrino#logger-class_method
  summary: null
  belongs_to: Padrino
  description: |-
    ### .logger ⇒ Padrino::Logger

    #### Examples:

    ``` ruby
    logger.debug "foo"
    logger.warn "bar"
    ```

    #### Returns:

    - ([`Padrino::Logger`](padrino/logger "Padrino::Logger (class)"))
- name: Padrino.logger=
  id: padrino#logger=-class_method
  summary: Set the padrino logger
  belongs_to: Padrino
  description: |-
    ### .logger=(value) ⇒ Object

    Set the padrino logger.

    #### Examples:

    using ruby default logger

    ``` ruby
    require 'logger'
    new_logger = ::Logger.new(STDOUT)
    new_logger.extend(Padrino::Logger::Extensions)
    Padrino.logger = new_logger
    ```

    using ActiveSupport

    ``` ruby
    require 'active_support/buffered_logger'
    Padrino.logger = Buffered.new(STDOUT)
    ```

    using custom logger class

    ``` ruby
    require 'logger'
    class CustomLogger < ::Logger
      include Padrino::Logger::Extensions
    end
    Padrino.logger = CustomLogger.new(STDOUT)
    ```

    #### Parameters:

    - `value`([`Object`](object "Object (class)")) — an object that respond to \<\<, write, puts, debug, warn, devel, etc..

    #### Returns:

    - ([`Object`](object "Object (class)")) — The given value.
- name: Padrino.middleware
  id: padrino#middleware-class_method
  summary: A Rack::Builder object that allows to add middlewares in front of all Padrino applications
  belongs_to: Padrino
  description: |-
    ### .middleware ⇒ Array\<Array\<Class, Array, Proc\>\>

    A Rack::Builder object that allows to add middlewares in front of all Padrino applications.

    #### Returns:

    - (`Array<Array<Class, Array, Proc>>`) — The middleware classes.
- name: Padrino.modules
  id: padrino#modules-class_method
  summary: null
  belongs_to: Padrino
  description: '### .modules ⇒ Object'
- name: Padrino.mount
  id: padrino#mount-class_method
  summary: Mounts a new sub-application onto Padrino project
  belongs_to: Padrino
  description: |-
    ### .mount(name, options = {}) ⇒ Object

    Mounts a new sub-application onto Padrino project.

    #### Examples:

    ``` ruby
    Padrino.mount("blog_app").to("/blog")
    ```

    #### See Also:

    - Padrino::Mounter#new
- name: Padrino.mounted_apps
  id: padrino#mounted_apps-class_method
  summary: Returns the mounted padrino applications (MountedApp objects)
  belongs_to: Padrino
  description: |-
    ### .mounted_apps ⇒ Array

    Returns the mounted padrino applications (MountedApp objects).

    #### Returns:

    - (`Array`) — the mounted padrino applications (MountedApp objects)
- name: Padrino.mounted_root
  id: padrino#mounted_root-class_method
  summary: Returns the root to the mounted apps base directory
  belongs_to: Padrino
  description: |-
    ### .mounted_root(\*args) ⇒ String

    Returns the root to the mounted apps base directory.

    #### Parameters:

    - `args` (`Array`)

    #### Returns:

    - ([`String`](string "String (class)")) — the root to the mounted apps base directory.

    ## Class Method Details
- name: Padrino.perf_memusage_command
  id: padrino#perf_memusage_command-class_method
  summary: null
  belongs_to: Padrino
  description: '### .perf_memusage_command ⇒ Object'
- name: Padrino.root
  id: padrino#root-class_method
  summary: Helper method for file references
  belongs_to: Padrino
  description: |-
    ### .root(\*args) ⇒ String

    Helper method for file references.

    #### Examples:

    ``` ruby
    # Referencing a file in config called settings.yml
    Padrino.root("config", "settings.yml")
    # returns PADRINO_ROOT + "/config/setting.yml"
    ```

    #### Parameters:

    - `args`(`Array<`[`String`](string "String (class)")`>`) — The directories to join to [PADRINO_ROOT](toplevel#PADRINO_ROOT-constant "PADRINO_ROOT (constant)").

    #### Returns:

    - ([`String`](string "String (class)")) — The absolute path.
- name: Padrino.ruby_command
  id: padrino#ruby_command-class_method
  summary: Return the path to the ruby interpreter taking into account multiple installations and windows extensions
  belongs_to: Padrino
  description: |-
    ### .ruby_command ⇒ String

    Return the path to the ruby interpreter taking into account multiple installations and windows extensions.

    #### Returns:

    - ([`String`](string "String (class)")) — path to ruby bin executable
- name: Padrino.run!
  id: padrino#run!-class_method
  summary: 'Runs the Padrino apps as a self-hosted server using: thin, mongrel, or WEBrick in that order'
  belongs_to: Padrino
  description: |-
    ### .run!(options = {}) ⇒ Object

    Runs the Padrino apps as a self-hosted server using: thin, mongrel, or WEBrick in that order.

    #### Examples:

    ``` ruby
    Padrino.run! # with these defaults => host: "127.0.0.1", port: "3000", adapter: the first found
    Padrino.run!("0.0.0.0", "4000", "mongrel") # use => host: "0.0.0.0", port: "4000", adapter: "mongrel"
    ```
- name: Padrino.set_encoding
  id: padrino#set_encoding-class_method
  summary: Set Encoding.default_internal and Encoding.default_external to Encoding::UFT_8
  belongs_to: Padrino
  description: |-
    ### .set_encoding ⇒ NilClass

    Set `Encoding.default_internal` and `Encoding.default_external` to `Encoding::UFT_8`.

    Please note that in `1.9.2` with some template engines like `haml` you should turn off Encoding.default_internal to prevent problems.

    #### Returns:

    - (`NilClass`)

    #### See Also:

    - [https://github.com/rtomayko/tilt/issues/75](https://github.com/rtomayko/tilt/issues/75 "https://github.com/rtomayko/tilt/issues/75")
- name: Padrino.use
  id: padrino#use-class_method
  summary: Convenience method for adding a Middleware to the whole padrino app
  belongs_to: Padrino
  description: |-
    ### .use(mw, \*args) { ... } ⇒ Object

    Convenience method for adding a Middleware to the whole padrino app.

    #### Parameters:

    - `m`(`Class`) — The middleware class.
    - `args`(`Array`) — The arguments for the middleware.

    #### Yields:

    - The given block will be passed to the initialized middleware.
- name: Padrino.version
  id: padrino#version-class_method
  summary: The current Padrino version
  belongs_to: Padrino
  description: |-
    ### .version ⇒ String

    The current Padrino version.

    #### Returns:

    - ([`String`](string "String (class)")) — The version number.

    ## Instance Method Details
- name: Padrino::Admin
  id: padrino/admin
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Padrino::Admin\n\n## Overview\n\nPadrino::Admin is beautiful Ajax Admin, with these features:\n\nOrm Agnostic  \nAdapters for datamapper, activerecord, mongomapper, couchdb (now only: datamapper and activerecord), ohm\n\nAuthentication  \nSupport for Account authentication, Account Permission management\n\nScaffold  \nYou can simply create a new “admin interface” simply providing a Model\n\nAjax Uploads  \nYou can upload file, manage them and attach them to any model in a quick and simple way (coming soon)\n\n## Defined Under Namespace\n\n**Modules:** [AccessControl](admin/accesscontrol \"Padrino::Admin::AccessControl (module)\"), [Generators](admin/generators \"Padrino::Admin::Generators (module)\"), [Helpers](admin/helpers \"Padrino::Admin::Helpers (module)\") **Classes:** [AccessControlError](admin/accesscontrolerror \"Padrino::Admin::AccessControlError (class)\")\n\n## Class Method Summary\n\n- [`.`**`registered`**`(app) ⇒ Object`](admin#registered-class_method \"registered (class method)\")` (also: included)`\n\n## Class Method Details\n\n### .registered(app) ⇒ Object Also known as: included\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin)"
- name: Padrino::Admin.registered
  id: padrino/admin#registered-class_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Admin
  description: "### .registered(app) ⇒ Object Also known as: included\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin)"
- name: Padrino::Admin::AccessControl
  id: padrino/admin/accesscontrol
  summary: This module enables access control functionality within a Padrino application
  description: "# Module: Padrino::Admin::AccessControl\n\n## Overview\n\nThis module enables access control functionality within a Padrino application.\n\n## Defined Under Namespace\n\n**Classes:** [Authorization](accesscontrol/authorization \"Padrino::Admin::AccessControl::Authorization (class)\"), [Base](accesscontrol/base \"Padrino::Admin::AccessControl::Base (class)\"), [ProjectModule](accesscontrol/projectmodule \"Padrino::Admin::AccessControl::ProjectModule (class)\")\n\n## Class Method Summary\n\n- [`.`**`registered`**`(app) ⇒ Object`](accesscontrol#registered-class_method \"registered (class method)\")` (also: included)` Method used by Padrino::Application when we register the extension.\n\n## Class Method Details\n\n### .registered(app) ⇒ Object Also known as: included\n\nMethod used by Padrino::Application when we register the extension.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl)"
- name: Padrino::Admin::AccessControl.registered
  id: padrino/admin/accesscontrol#registered-class_method
  summary: Method used by Padrino::Application when we register the extension
  belongs_to: Padrino::Admin::AccessControl
  description: "### .registered(app) ⇒ Object Also known as: included\n\nMethod used by Padrino::Application when we register the extension.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl)"
- name: Padrino::Admin::AccessControl::Authorization
  id: padrino/admin/accesscontrol/authorization
  summary: Project Authorization Class
  description: "# Class: Padrino::Admin::AccessControl::Authorization\n\nInherits:  \n[Object](../../../object \"Object (class)\")\n\n- [Object](../../../object \"Object (class)\")\n- Padrino::Admin::AccessControl::Authorization\n\n## Overview\n\nProject Authorization Class.\n\n## Instance Attribute Summary\n\n- [`#`**`allowed`**` ⇒ Object`](authorization#allowed-instance_method \"#allowed (instance method)\") readonly Returns the value of attribute allowed.\n- [`#`**`denied`**` ⇒ Object`](authorization#denied-instance_method \"#denied (instance method)\") readonly Returns the value of attribute denied.\n- [`#`**`project_modules`**` ⇒ Object`](authorization#project_modules-instance_method \"#project_modules (instance method)\") readonly Returns the value of attribute project_modules.\n- [`#`**`roles`**` ⇒ Object`](authorization#roles-instance_method \"#roles (instance method)\") readonly Returns the value of attribute roles.\n\n## Instance Method Summary\n\n- [`#`**`allow`**`(path) ⇒ Object`](authorization#allow-instance_method \"#allow (instance method)\") Allow a specified path.\n- [`#`**`initialize`**`(*roles) {|_self| ... } ⇒ Authorization`](authorization#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of Authorization.\n- [`#`**`project_module`**`(name, path, options = {}) ⇒ Object`](authorization#project_module-instance_method \"#project_module (instance method)\") Create a project module.\n- [`#`**`protect`**`(path) ⇒ Object`](authorization#protect-instance_method \"#protect (instance method)\") Protect access from.\n\n## Constructor Details\n\n### \\#initialize(\\*roles) {\\|\\_self\\| ... } ⇒ Authorization\n\nReturns a new instance of Authorization.\n\n#### Yields:\n\n- (`_self`)\n\n#### Yield Parameters:\n\n- `_self` ([`Padrino::Admin::AccessControl::Authorization`](authorization \"Padrino::Admin::AccessControl::Authorization (class)\")) — the object that the method was called on\n\n## Instance Attribute Details\n\n### \\#allowed ⇒ Object (readonly)\n\nReturns the value of attribute allowed\n\n### \\#denied ⇒ Object (readonly)\n\nReturns the value of attribute denied\n\n### \\#project_modules ⇒ Object (readonly)\n\nReturns the value of attribute project_modules\n\n### \\#roles ⇒ Object (readonly)\n\nReturns the value of attribute roles\n\n## Instance Method Details\n\n### \\#allow(path) ⇒ Object\n\nAllow a specified path.\n\n### \\#project_module(name, path, options = {}) ⇒ Object\n\nCreate a project module.\n\n### \\#protect(path) ⇒ Object\n\nProtect access from.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/Authorization](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/Authorization)"
- name: Padrino::Admin::AccessControl::Authorization#allow
  id: padrino/admin/accesscontrol/authorization#allow-instance_method
  summary: Allow a specified path
  belongs_to: Padrino::Admin::AccessControl::Authorization
  description: |-
    ### \#allow(path) ⇒ Object

    Allow a specified path.
- name: Padrino::Admin::AccessControl::Authorization#allowed
  id: padrino/admin/accesscontrol/authorization#allowed-instance_method
  summary: null
  belongs_to: Padrino::Admin::AccessControl::Authorization
  description: |-
    ### \#allowed ⇒ Object (readonly)

    Returns the value of attribute allowed
- name: Padrino::Admin::AccessControl::Authorization#denied
  id: padrino/admin/accesscontrol/authorization#denied-instance_method
  summary: null
  belongs_to: Padrino::Admin::AccessControl::Authorization
  description: |-
    ### \#denied ⇒ Object (readonly)

    Returns the value of attribute denied
- name: Padrino::Admin::AccessControl::Authorization#initialize
  id: padrino/admin/accesscontrol/authorization#initialize-instance_method
  summary: Returns a new instance of Authorization
  belongs_to: Padrino::Admin::AccessControl::Authorization
  description: |-
    ### \#initialize(\*roles) {\|\_self\| ... } ⇒ Authorization

    Returns a new instance of Authorization.

    #### Yields:

    - (`_self`)

    #### Yield Parameters:

    - `_self`([`Padrino::Admin::AccessControl::Authorization`](authorization "Padrino::Admin::AccessControl::Authorization (class)")) — the object that the method was called on

    ## Instance Attribute Details
- name: Padrino::Admin::AccessControl::Authorization#project_module
  id: padrino/admin/accesscontrol/authorization#project_module-instance_method
  summary: Create a project module
  belongs_to: Padrino::Admin::AccessControl::Authorization
  description: |-
    ### \#project_module(name, path, options = {}) ⇒ Object

    Create a project module.
- name: Padrino::Admin::AccessControl::Authorization#project_modules
  id: padrino/admin/accesscontrol/authorization#project_modules-instance_method
  summary: null
  belongs_to: Padrino::Admin::AccessControl::Authorization
  description: |-
    ### \#project_modules ⇒ Object (readonly)

    Returns the value of attribute project_modules
- name: Padrino::Admin::AccessControl::Authorization#protect
  id: padrino/admin/accesscontrol/authorization#protect-instance_method
  summary: Protect access from
  belongs_to: Padrino::Admin::AccessControl::Authorization
  description: "### \\#protect(path) ⇒ Object\n\nProtect access from.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/Authorization](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/Authorization)"
- name: Padrino::Admin::AccessControl::Authorization#roles
  id: padrino/admin/accesscontrol/authorization#roles-instance_method
  summary: null
  belongs_to: Padrino::Admin::AccessControl::Authorization
  description: |-
    ### \#roles ⇒ Object (readonly)

    Returns the value of attribute roles

    ## Instance Method Details
- name: Padrino::Admin::AccessControl::Base
  id: padrino/admin/accesscontrol/base
  summary: This base access control class where roles are defined as are authorizations
  description: "# Class: Padrino::Admin::AccessControl::Base\n\nInherits:  \n[Object](../../../object \"Object (class)\")\n\n- [Object](../../../object \"Object (class)\")\n- Padrino::Admin::AccessControl::Base\n\n## Overview\n\nThis base access control class where roles are defined as are authorizations.\n\n## Instance Method Summary\n\n- [`#`**`allowed?`**`(account = nil, path = nil) ⇒ Boolean`](base#allowed%3F-instance_method \"#allowed? (instance method)\") Return true if the given account is allowed to see the given path.\n- [`#`**`initialize`**` ⇒ Base`](base#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of Base.\n- [`#`**`project_modules`**`(account) ⇒ Object`](base#project_modules-instance_method \"#project_modules (instance method)\") Return an array of project_modules.\n- [`#`**`roles`**` ⇒ Object`](base#roles-instance_method \"#roles (instance method)\") Return an array of roles.\n- [`#`**`roles_for`**`(*roles, &block) ⇒ Object`](base#roles_for-instance_method \"#roles_for (instance method)\") We map project modules for a given role or roles.\n\n## Constructor Details\n\n### \\#initialize ⇒ Base\n\nReturns a new instance of Base.\n\n## Instance Method Details\n\n### \\#allowed?(account = nil, path = nil) ⇒ Boolean\n\nReturn true if the given account is allowed to see the given path.\n\n#### Examples:\n\nHiding a disallowed link from a user.\n\n``` ruby\n# File: config/apps.rb\n# [...]\nPadrino.mount('Admin').to('/admin')\n\n# File: admin/app.rb\nclass Admin < Padrino::Application\n  # [...]\n  register Padrino::Admin::AccessControl\n  # [...]\n\n  # Goals:\n  # * Admins can manage widgets and accounts.\n  # * Workers can only manage widgets.\n\n  access_control.roles_for :admin do |role|\n    role.project_module :accounts, '/accounts'\n    role.project_module :widgets, '/widgets'\n  end\n\n  access_control.roles_for :worker do |role|\n    role.project_module :widgets, '/widgets'\n  end\nend\n\n# File: admin/views/layouts/application.haml\n# NOTE The un-mounted path is used ('/accounts' instead of '/admin/accounts')\n- if access_control.allowed?(current_account, '/accounts')\n  # Admins see the \"Profile\" link, but Workers do not\n  = link_to 'Profile', url(:accounts, :edit, :id => current_account.id)\n```\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#project_modules(account) ⇒ Object\n\nReturn an array of project_modules.\n\n### \\#roles ⇒ Object\n\nReturn an array of roles.\n\n### \\#roles_for(\\*roles, &block) ⇒ Object\n\nWe map project modules for a given role or roles.\n\n#### Raises:\n\n- ([`Padrino::Admin::AccessControlError`](../accesscontrolerror \"Padrino::Admin::AccessControlError (class)\"))\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/Base](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/Base)"
- name: Padrino::Admin::AccessControl::Base#allowed?
  id: padrino/admin/accesscontrol/base#allowed?-instance_method
  summary: Return true if the given account is allowed to see the given path
  belongs_to: Padrino::Admin::AccessControl::Base
  description: |-
    ### \#allowed?(account = nil, path = nil) ⇒ Boolean

    Return true if the given account is allowed to see the given path.

    #### Examples:

    Hiding a disallowed link from a user.

    ``` ruby
    # File: config/apps.rb
    # [...]
    Padrino.mount('Admin').to('/admin')

    # File: admin/app.rb
    class Admin < Padrino::Application
      # [...]
      register Padrino::Admin::AccessControl
      # [...]

      # Goals:
      # * Admins can manage widgets and accounts.
      # * Workers can only manage widgets.

      access_control.roles_for :admin do |role|
        role.project_module :accounts, '/accounts'
        role.project_module :widgets, '/widgets'
      end

      access_control.roles_for :worker do |role|
        role.project_module :widgets, '/widgets'
      end
    end

    # File: admin/views/layouts/application.haml
    # NOTE The un-mounted path is used ('/accounts' instead of '/admin/accounts')
    - if access_control.allowed?(current_account, '/accounts')
      # Admins see the "Profile" link, but Workers do not
      = link_to 'Profile', url(:accounts, :edit, :id => current_account.id)
    ```

    #### Returns:

    - (`Boolean`)
- name: Padrino::Admin::AccessControl::Base#initialize
  id: padrino/admin/accesscontrol/base#initialize-instance_method
  summary: Returns a new instance of Base
  belongs_to: Padrino::Admin::AccessControl::Base
  description: |-
    ### \#initialize ⇒ Base

    Returns a new instance of Base.

    ## Instance Method Details
- name: Padrino::Admin::AccessControl::Base#project_modules
  id: padrino/admin/accesscontrol/base#project_modules-instance_method
  summary: Return an array of project_modules
  belongs_to: Padrino::Admin::AccessControl::Base
  description: |-
    ### \#project_modules(account) ⇒ Object

    Return an array of project_modules.
- name: Padrino::Admin::AccessControl::Base#roles
  id: padrino/admin/accesscontrol/base#roles-instance_method
  summary: Return an array of roles
  belongs_to: Padrino::Admin::AccessControl::Base
  description: |-
    ### \#roles ⇒ Object

    Return an array of roles.
- name: Padrino::Admin::AccessControl::Base#roles_for
  id: padrino/admin/accesscontrol/base#roles_for-instance_method
  summary: We map project modules for a given role or roles
  belongs_to: Padrino::Admin::AccessControl::Base
  description: "### \\#roles_for(\\*roles, &block) ⇒ Object\n\nWe map project modules for a given role or roles.\n\n#### Raises:\n\n- ([`Padrino::Admin::AccessControlError`](../accesscontrolerror \"Padrino::Admin::AccessControlError (class)\"))\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/Base](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/Base)"
- name: Padrino::Admin::AccessControl::ProjectModule
  id: padrino/admin/accesscontrol/projectmodule
  summary: Project Module class
  description: "# Class: Padrino::Admin::AccessControl::ProjectModule\n\nInherits:  \n[Object](../../../object \"Object (class)\")\n\n- [Object](../../../object \"Object (class)\")\n- Padrino::Admin::AccessControl::ProjectModule\n\n## Overview\n\nProject Module class.\n\n## Instance Attribute Summary\n\n- [`#`**`name`**` ⇒ Object`](projectmodule#name-instance_method \"#name (instance method)\") readonly Returns the value of attribute name.\n- [`#`**`options`**` ⇒ Object`](projectmodule#options-instance_method \"#options (instance method)\") readonly Returns the value of attribute options.\n\n## Instance Method Summary\n\n- [`#`**`human_name`**` ⇒ Object`](projectmodule#human_name-instance_method \"#human_name (instance method)\") Returns the name of the project module humanize them for you.\n- [`#`**`initialize`**`(name, path, options = {}) ⇒ ProjectModule`](projectmodule#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of ProjectModule.\n- [`#`**`path`**`(prefix = nil) ⇒ Object`](projectmodule#path-instance_method \"#path (instance method)\") Return the path of the project module.\n\n## Constructor Details\n\n### \\#initialize(name, path, options = {}) ⇒ ProjectModule\n\nReturns a new instance of ProjectModule.\n\n## Instance Attribute Details\n\n### \\#name ⇒ Object (readonly)\n\nReturns the value of attribute name\n\n### \\#options ⇒ Object (readonly)\n\nReturns the value of attribute options\n\n## Instance Method Details\n\n### \\#human_name ⇒ Object\n\nReturns the name of the project module humanize them for you.\n\n### \\#path(prefix = nil) ⇒ Object\n\nReturn the path of the project module. If a prefix given will be pre pended.\n\n#### Examples:\n\n``` ruby\n# => /accounts/new\nproject_module.path\n# => /admin/accounts\nproject_module.path(\"/admin\")\n```\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/ProjectModule](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/ProjectModule)"
- name: Padrino::Admin::AccessControl::ProjectModule#human_name
  id: padrino/admin/accesscontrol/projectmodule#human_name-instance_method
  summary: Returns the name of the project module humanize them for you
  belongs_to: Padrino::Admin::AccessControl::ProjectModule
  description: |-
    ### \#human_name ⇒ Object

    Returns the name of the project module humanize them for you.
- name: Padrino::Admin::AccessControl::ProjectModule#initialize
  id: padrino/admin/accesscontrol/projectmodule#initialize-instance_method
  summary: Returns a new instance of ProjectModule
  belongs_to: Padrino::Admin::AccessControl::ProjectModule
  description: |-
    ### \#initialize(name, path, options = {}) ⇒ ProjectModule

    Returns a new instance of ProjectModule.

    ## Instance Attribute Details
- name: Padrino::Admin::AccessControl::ProjectModule#name
  id: padrino/admin/accesscontrol/projectmodule#name-instance_method
  summary: null
  belongs_to: Padrino::Admin::AccessControl::ProjectModule
  description: |-
    ### \#name ⇒ Object (readonly)

    Returns the value of attribute name
- name: Padrino::Admin::AccessControl::ProjectModule#options
  id: padrino/admin/accesscontrol/projectmodule#options-instance_method
  summary: null
  belongs_to: Padrino::Admin::AccessControl::ProjectModule
  description: |-
    ### \#options ⇒ Object (readonly)

    Returns the value of attribute options

    ## Instance Method Details
- name: Padrino::Admin::AccessControl::ProjectModule#path
  id: padrino/admin/accesscontrol/projectmodule#path-instance_method
  summary: Return the path of the project module
  belongs_to: Padrino::Admin::AccessControl::ProjectModule
  description: "### \\#path(prefix = nil) ⇒ Object\n\nReturn the path of the project module. If a prefix given will be pre pended.\n\n#### Examples:\n\n``` ruby\n# => /accounts/new\nproject_module.path\n# => /admin/accounts\nproject_module.path(\"/admin\")\n```\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/ProjectModule](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/ProjectModule)"
- name: Padrino::Admin::AccessControlError
  id: padrino/admin/accesscontrolerror
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Exception: Padrino::Admin::AccessControlError\n\nInherits:  \nStandardError\n\n- [Object](../../object \"Object (class)\")\n- StandardError\n- Padrino::Admin::AccessControlError\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControlError](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControlError)"
- name: Padrino::Admin::Generators
  id: padrino/admin/generators
  summary: Contains all admin related generator functionality
  description: "# Module: Padrino::Admin::Generators\n\n## Overview\n\nContains all admin related generator functionality.\n\n## Defined Under Namespace\n\n**Classes:** [Orm](generators/orm \"Padrino::Admin::Generators::Orm (class)\"), [OrmError](generators/ormerror \"Padrino::Admin::Generators::OrmError (class)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators)"
- name: Padrino::Admin::Generators::Orm
  id: padrino/admin/generators/orm
  summary: Defines the generic ORM management functions used to manipulate data for admin
  description: "# Class: Padrino::Admin::Generators::Orm\n\nInherits:  \n[Object](../../../object \"Object (class)\")\n\n- [Object](../../../object \"Object (class)\")\n- Padrino::Admin::Generators::Orm\n\n## Overview\n\nDefines the generic ORM management functions used to manipulate data for admin.\n\n## Defined Under Namespace\n\n**Classes:** [Column](orm/column \"Padrino::Admin::Generators::Orm::Column (class)\")\n\n## Instance Attribute Summary\n\n- [`#`**`klass`**` ⇒ Object`](orm#klass-instance_method \"#klass (instance method)\") readonly Returns the value of attribute klass.\n- [`#`**`klass_name`**` ⇒ Object`](orm#klass_name-instance_method \"#klass_name (instance method)\") readonly Returns the value of attribute klass_name.\n- [`#`**`name_param`**` ⇒ Object`](orm#name_param-instance_method \"#name_param (instance method)\") readonly Returns the value of attribute name_param.\n- [`#`**`name_plural`**` ⇒ Object`](orm#name_plural-instance_method \"#name_plural (instance method)\") readonly Returns the value of attribute name_plural.\n- [`#`**`name_singular`**` ⇒ Object`](orm#name_singular-instance_method \"#name_singular (instance method)\") readonly Returns the value of attribute name_singular.\n- [`#`**`orm`**` ⇒ Object`](orm#orm-instance_method \"#orm (instance method)\") readonly Returns the value of attribute orm.\n\n## Instance Method Summary\n\n- [`#`**`activerecord?`**` ⇒ Boolean`](orm#activerecord%3F-instance_method \"#activerecord? (instance method)\")\n- [`#`**`all`**` ⇒ Object`](orm#all-instance_method \"#all (instance method)\")\n- [`#`**`build`**`(params = nil) ⇒ Object`](orm#build-instance_method \"#build (instance method)\")\n- [`#`**`column_fields`**` ⇒ Object`](orm#column_fields-instance_method \"#column_fields (instance method)\")\n- [`#`**`columns`**` ⇒ Object`](orm#columns-instance_method \"#columns (instance method)\")\n- [`#`**`destroy`**` ⇒ Object`](orm#destroy-instance_method \"#destroy (instance method)\")\n- [`#`**`dm_column`**`(p) ⇒ Object`](orm#dm_column-instance_method \"#dm_column (instance method)\")\n- [`#`**`field_type`**`(type) ⇒ Object`](orm#field_type-instance_method \"#field_type (instance method)\")\n- [`#`**`find`**`(params = nil) ⇒ Object`](orm#find-instance_method \"#find (instance method)\")\n- [`#`**`find_by_ids`**`(params = nil) ⇒ Object`](orm#find_by_ids-instance_method \"#find_by_ids (instance method)\")\n- [`#`**`has_error`**`(field) ⇒ Object`](orm#has_error-instance_method \"#has_error (instance method)\")\n- [`#`**`initialize`**`(name, orm, columns = nil, column_fields = nil) ⇒ Orm`](orm#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of Orm.\n- [`#`**`multiple_destroy`**`(params = nil) ⇒ Object`](orm#multiple_destroy-instance_method \"#multiple_destroy (instance method)\")\n- [`#`**`save`**` ⇒ Object`](orm#save-instance_method \"#save (instance method)\")\n- [`#`**`update_attributes`**`(params = nil) ⇒ Object`](orm#update_attributes-instance_method \"#update_attributes (instance method)\")\n\n## Constructor Details\n\n### \\#initialize(name, orm, columns = nil, column_fields = nil) ⇒ Orm\n\nReturns a new instance of Orm.\n\n#### Raises:\n\n- ([`OrmError`](ormerror \"Padrino::Admin::Generators::OrmError (class)\"))\n\n## Instance Attribute Details\n\n### \\#klass ⇒ Object (readonly)\n\nReturns the value of attribute klass\n\n### \\#klass_name ⇒ Object (readonly)\n\nReturns the value of attribute klass_name\n\n### \\#name_param ⇒ Object (readonly)\n\nReturns the value of attribute name_param\n\n### \\#name_plural ⇒ Object (readonly)\n\nReturns the value of attribute name_plural\n\n### \\#name_singular ⇒ Object (readonly)\n\nReturns the value of attribute name_singular\n\n### \\#orm ⇒ Object (readonly)\n\nReturns the value of attribute orm\n\n## Instance Method Details\n\n### \\#activerecord? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#all ⇒ Object\n\n### \\#build(params = nil) ⇒ Object\n\n### \\#column_fields ⇒ Object\n\n### \\#columns ⇒ Object\n\n### \\#destroy ⇒ Object\n\n### \\#dm_column(p) ⇒ Object\n\n### \\#field_type(type) ⇒ Object\n\n### \\#find(params = nil) ⇒ Object\n\n### \\#find_by_ids(params = nil) ⇒ Object\n\n### \\#has_error(field) ⇒ Object\n\n### \\#multiple_destroy(params = nil) ⇒ Object\n\n### \\#save ⇒ Object\n\n### \\#update_attributes(params = nil) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/Orm](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/Orm)"
- name: Padrino::Admin::Generators::Orm#activerecord?
  id: padrino/admin/generators/orm#activerecord?-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: |-
    ### \#activerecord? ⇒ Boolean

    #### Returns:

    - (`Boolean`)
- name: Padrino::Admin::Generators::Orm#all
  id: padrino/admin/generators/orm#all-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: '### \#all ⇒ Object'
- name: Padrino::Admin::Generators::Orm#build
  id: padrino/admin/generators/orm#build-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: '### \#build(params = nil) ⇒ Object'
- name: Padrino::Admin::Generators::Orm#column_fields
  id: padrino/admin/generators/orm#column_fields-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: '### \#column_fields ⇒ Object'
- name: Padrino::Admin::Generators::Orm#columns
  id: padrino/admin/generators/orm#columns-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: '### \#columns ⇒ Object'
- name: Padrino::Admin::Generators::Orm#destroy
  id: padrino/admin/generators/orm#destroy-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: '### \#destroy ⇒ Object'
- name: Padrino::Admin::Generators::Orm#dm_column
  id: padrino/admin/generators/orm#dm_column-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: '### \#dm_column(p) ⇒ Object'
- name: Padrino::Admin::Generators::Orm#field_type
  id: padrino/admin/generators/orm#field_type-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: '### \#field_type(type) ⇒ Object'
- name: Padrino::Admin::Generators::Orm#find
  id: padrino/admin/generators/orm#find-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: '### \#find(params = nil) ⇒ Object'
- name: Padrino::Admin::Generators::Orm#find_by_ids
  id: padrino/admin/generators/orm#find_by_ids-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: '### \#find_by_ids(params = nil) ⇒ Object'
- name: Padrino::Admin::Generators::Orm#has_error
  id: padrino/admin/generators/orm#has_error-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: '### \#has_error(field) ⇒ Object'
- name: Padrino::Admin::Generators::Orm#initialize
  id: padrino/admin/generators/orm#initialize-instance_method
  summary: Returns a new instance of Orm
  belongs_to: Padrino::Admin::Generators::Orm
  description: |-
    ### \#initialize(name, orm, columns = nil, column_fields = nil) ⇒ Orm

    Returns a new instance of Orm.

    #### Raises:

    - ([`OrmError`](ormerror "Padrino::Admin::Generators::OrmError (class)"))

    ## Instance Attribute Details
- name: Padrino::Admin::Generators::Orm#klass
  id: padrino/admin/generators/orm#klass-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: |-
    ### \#klass ⇒ Object (readonly)

    Returns the value of attribute klass
- name: Padrino::Admin::Generators::Orm#klass_name
  id: padrino/admin/generators/orm#klass_name-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: |-
    ### \#klass_name ⇒ Object (readonly)

    Returns the value of attribute klass_name
- name: Padrino::Admin::Generators::Orm#multiple_destroy
  id: padrino/admin/generators/orm#multiple_destroy-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: '### \#multiple_destroy(params = nil) ⇒ Object'
- name: Padrino::Admin::Generators::Orm#name_param
  id: padrino/admin/generators/orm#name_param-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: |-
    ### \#name_param ⇒ Object (readonly)

    Returns the value of attribute name_param
- name: Padrino::Admin::Generators::Orm#name_plural
  id: padrino/admin/generators/orm#name_plural-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: |-
    ### \#name_plural ⇒ Object (readonly)

    Returns the value of attribute name_plural
- name: Padrino::Admin::Generators::Orm#name_singular
  id: padrino/admin/generators/orm#name_singular-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: |-
    ### \#name_singular ⇒ Object (readonly)

    Returns the value of attribute name_singular
- name: Padrino::Admin::Generators::Orm#orm
  id: padrino/admin/generators/orm#orm-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: |-
    ### \#orm ⇒ Object (readonly)

    Returns the value of attribute orm

    ## Instance Method Details
- name: Padrino::Admin::Generators::Orm#save
  id: padrino/admin/generators/orm#save-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm
  description: '### \#save ⇒ Object'
- name: Padrino::Admin::Generators::Orm#update_attributes
  id: padrino/admin/generators/orm#update_attributes-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Admin::Generators::Orm
  description: "### \\#update_attributes(params = nil) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/Orm](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/Orm)"
- name: Padrino::Admin::Generators::Orm::Column
  id: padrino/admin/generators/orm/column
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Padrino::Admin::Generators::Orm::Column\n\nInherits:  \nStruct\n\n- [Object](../../../../object \"Object (class)\")\n- Struct\n- Padrino::Admin::Generators::Orm::Column\n\n## Overview\n\nfor compatibility\n\n## Instance Attribute Summary\n\n- [`#`**`name`**` ⇒ Object`](column#name-instance_method \"#name (instance method)\") Returns the value of attribute name.\n- [`#`**`type`**` ⇒ Object`](column#type-instance_method \"#type (instance method)\") Returns the value of attribute type.\n\n## Instance Attribute Details\n\n### \\#name ⇒ Object\n\nReturns the value of attribute name\n\n#### Returns:\n\n- ([`Object`](../../../../object \"Object (class)\")) — the current value of name\n\n### \\#type ⇒ Object\n\nReturns the value of attribute type\n\n#### Returns:\n\n- ([`Object`](../../../../object \"Object (class)\")) — the current value of type\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/Orm/Column](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/Orm/Column)"
- name: Padrino::Admin::Generators::Orm::Column#name
  id: padrino/admin/generators/orm/column#name-instance_method
  summary: null
  belongs_to: Padrino::Admin::Generators::Orm::Column
  description: |-
    ### \#name ⇒ Object

    Returns the value of attribute name

    #### Returns:

    - ([`Object`](../../../../object "Object (class)")) — the current value of name
- name: Padrino::Admin::Generators::Orm::Column#type
  id: padrino/admin/generators/orm/column#type-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Admin::Generators::Orm::Column
  description: "### \\#type ⇒ Object\n\nReturns the value of attribute type\n\n#### Returns:\n\n- ([`Object`](../../../../object \"Object (class)\")) — the current value of type\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/Orm/Column](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/Orm/Column)"
- name: Padrino::Admin::Generators::OrmError
  id: padrino/admin/generators/ormerror
  summary: Defines a generic exception for the admin ORM handler
  description: "# Exception: Padrino::Admin::Generators::OrmError\n\nInherits:  \nStandardError\n\n- [Object](../../../object \"Object (class)\")\n- StandardError\n- Padrino::Admin::Generators::OrmError\n\n## Overview\n\nDefines a generic exception for the admin ORM handler.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/OrmError](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/OrmError)"
- name: Padrino::Admin::Helpers
  id: padrino/admin/helpers
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Padrino::Admin::Helpers\n\n## Defined Under Namespace\n\n**Modules:** [AuthenticationHelpers](helpers/authenticationhelpers \"Padrino::Admin::Helpers::AuthenticationHelpers (module)\"), [ViewHelpers](helpers/viewhelpers \"Padrino::Admin::Helpers::ViewHelpers (module)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers)"
- name: Padrino::Admin::Helpers::AuthenticationHelpers
  id: padrino/admin/helpers/authenticationhelpers
  summary: Common helpers used for authorization within an application
  description: "# Module: Padrino::Admin::Helpers::AuthenticationHelpers\n\n## Overview\n\nCommon helpers used for authorization within an application.\n\n## Instance Method Summary\n\n- [`#`**`allowed?`**` ⇒ Boolean`](authenticationhelpers#allowed%3F-instance_method \"#allowed? (instance method)\") Returns true if the `current_account` is allowed to see the requested path.\n- [`#`**`current_account`**` ⇒ Object`](authenticationhelpers#current_account-instance_method \"#current_account (instance method)\") Returns the current_account, it's an instance of Account model.\n- [`#`**`logged_in?`**` ⇒ Boolean`](authenticationhelpers#logged_in%3F-instance_method \"#logged_in? (instance method)\") Returns true if `current_account` is logged and active.\n- [`#`**`login_required`**` ⇒ Object`](authenticationhelpers#login_required-instance_method \"#login_required (instance method)\") Returns a helper useful in a `before_filter` for check if an account are: `logged_in?` and `allowed?`.\n- [`#`**`project_modules`**` ⇒ Object`](authenticationhelpers#project_modules-instance_method \"#project_modules (instance method)\") Returns project modules for the current account.\n- [`#`**`redirect_back_or_default`**`(default) ⇒ Object`](authenticationhelpers#redirect_back_or_default-instance_method \"#redirect_back_or_default (instance method)\") Redirect the account to the page that requested an authentication or if the account is not allowed/logged return it to a default page.\n- [`#`**`set_current_account`**`(account = nil) ⇒ Object`](authenticationhelpers#set_current_account-instance_method \"#set_current_account (instance method)\") Override the current_account, you must provide an instance of Account model.\n- [`#`**`store_location!`**` ⇒ Object`](authenticationhelpers#store_location!-instance_method \"#store_location! (instance method)\") Store in [session](#) the [env]('request_uri').\n\n## Instance Method Details\n\n### \\#allowed? ⇒ Boolean\n\nReturns true if the `current_account` is allowed to see the requested path.\n\nFor configure this role please refer to: `Padrino::Admin::AccessControl::Base`\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#current_account ⇒ Object\n\nReturns the current_account, it's an instance of Account model.\n\n### \\#logged_in? ⇒ Boolean\n\nReturns true if `current_account` is logged and active.\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#login_required ⇒ Object\n\nReturns a helper useful in a `before_filter` for check if an account are: `logged_in?` and `allowed?`\n\nBy default this method is used in Admin Apps.\n\n### \\#project_modules ⇒ Object\n\nReturns project modules for the current account.\n\n### \\#redirect_back_or_default(default) ⇒ Object\n\nRedirect the account to the page that requested an authentication or if the account is not allowed/logged return it to a default page.\n\n### \\#set_current_account(account = nil) ⇒ Object\n\nOverride the current_account, you must provide an instance of Account model.\n\n#### Examples:\n\n``` ruby\nset_current_account(Account.authenticate(params[:email], params[:password])\n```\n\n### \\#store_location! ⇒ Object\n\nStore in [session](#) the [env]('request_uri').\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers/AuthenticationHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers/AuthenticationHelpers)"
- name: Padrino::Admin::Helpers::AuthenticationHelpers#allowed?
  id: padrino/admin/helpers/authenticationhelpers#allowed?-instance_method
  summary: Returns true if the current_account is allowed to see the requested path
  belongs_to: Padrino::Admin::Helpers::AuthenticationHelpers
  description: |-
    ### \#allowed? ⇒ Boolean

    Returns true if the `current_account` is allowed to see the requested path.

    For configure this role please refer to: `Padrino::Admin::AccessControl::Base`

    #### Returns:

    - (`Boolean`)
- name: Padrino::Admin::Helpers::AuthenticationHelpers#current_account
  id: padrino/admin/helpers/authenticationhelpers#current_account-instance_method
  summary: Returns the current_account, it's an instance of Account model
  belongs_to: Padrino::Admin::Helpers::AuthenticationHelpers
  description: |-
    ### \#current_account ⇒ Object

    Returns the current_account, it's an instance of Account model.
- name: Padrino::Admin::Helpers::AuthenticationHelpers#logged_in?
  id: padrino/admin/helpers/authenticationhelpers#logged_in?-instance_method
  summary: Returns true if current_account is logged and active
  belongs_to: Padrino::Admin::Helpers::AuthenticationHelpers
  description: |-
    ### \#logged_in? ⇒ Boolean

    Returns true if `current_account` is logged and active.

    #### Returns:

    - (`Boolean`)
- name: Padrino::Admin::Helpers::AuthenticationHelpers#login_required
  id: padrino/admin/helpers/authenticationhelpers#login_required-instance_method
  summary: By default this method is used in Admin Apps
  belongs_to: Padrino::Admin::Helpers::AuthenticationHelpers
  description: |-
    ### \#login_required ⇒ Object

    Returns a helper useful in a `before_filter` for check if an account are: `logged_in?` and `allowed?`

    By default this method is used in Admin Apps.
- name: Padrino::Admin::Helpers::AuthenticationHelpers#project_modules
  id: padrino/admin/helpers/authenticationhelpers#project_modules-instance_method
  summary: Returns project modules for the current account
  belongs_to: Padrino::Admin::Helpers::AuthenticationHelpers
  description: |-
    ### \#project_modules ⇒ Object

    Returns project modules for the current account.
- name: Padrino::Admin::Helpers::AuthenticationHelpers#redirect_back_or_default
  id: padrino/admin/helpers/authenticationhelpers#redirect_back_or_default-instance_method
  summary: Redirect the account to the page that requested an authentication or if the account is not allowed/logged return it to a default page
  belongs_to: Padrino::Admin::Helpers::AuthenticationHelpers
  description: |-
    ### \#redirect_back_or_default(default) ⇒ Object

    Redirect the account to the page that requested an authentication or if the account is not allowed/logged return it to a default page.
- name: Padrino::Admin::Helpers::AuthenticationHelpers#set_current_account
  id: padrino/admin/helpers/authenticationhelpers#set_current_account-instance_method
  summary: Override the current_account, you must provide an instance of Account model
  belongs_to: Padrino::Admin::Helpers::AuthenticationHelpers
  description: |-
    ### \#set_current_account(account = nil) ⇒ Object

    Override the current_account, you must provide an instance of Account model.

    #### Examples:

    ``` ruby
    set_current_account(Account.authenticate(params[:email], params[:password])
    ```
- name: Padrino::Admin::Helpers::AuthenticationHelpers#store_location!
  id: padrino/admin/helpers/authenticationhelpers#store_location!-instance_method
  summary: Store in session the env
  belongs_to: Padrino::Admin::Helpers::AuthenticationHelpers
  description: "### \\#store_location! ⇒ Object\n\nStore in [session](#) the [env]('request_uri').\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers/AuthenticationHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers/AuthenticationHelpers)"
- name: Padrino::Admin::Helpers::ViewHelpers
  id: padrino/admin/helpers/viewhelpers
  summary: Translates attribute name for the given model
  description: "# Module: Padrino::Admin::Helpers::ViewHelpers\n\n## Instance Method Summary\n\n- [`#`**`model_attribute_translate`**`(model, attribute) ⇒ String`](viewhelpers#model_attribute_translate-instance_method \"#model_attribute_translate (instance method)\")` (also: #t_attr)` Translates attribute name for the given model.\n- [`#`**`model_translate`**`(model) ⇒ String`](viewhelpers#model_translate-instance_method \"#model_translate (instance method)\")` (also: #mt)` Translates model name.\n- [`#`**`padrino_admin_translate`**`(word, *args) ⇒ String`](viewhelpers#padrino_admin_translate-instance_method \"#padrino_admin_translate (instance method)\")` (also: #pat)` Translates a given word for padrino admin.\n- [`#`**`tag_icon`**`(icon, tag = nil) ⇒ String`](viewhelpers#tag_icon-instance_method \"#tag_icon (instance method)\") Icon's Bootstrap helper.\n\n## Instance Method Details\n\n### \\#model_attribute_translate(model, attribute) ⇒ String Also known as: t_attr\n\nTranslates attribute name for the given model.\n\n#### Examples:\n\n``` ruby\n# => t(\"models.account.attributes.email\", :default => \"Email\")\nmat(:account, :email)\n```\n\n#### Parameters:\n\n- `model` (`Symbol`) — The model name for the translation.\n- `attribute` (`Symbol`) — The attribute name in the model to translate.\n\n#### Returns:\n\n- ([`String`](../../../string \"String (class)\")) — The translated attribute name for the current locale.\n\n### \\#model_translate(model) ⇒ String Also known as: mt\n\nTranslates model name.\n\n#### Examples:\n\n``` ruby\n# => t(\"models.account.name\", :default => \"Account\")\nmt(:account)\n```\n\n#### Parameters:\n\n- `attribute` (`Symbol`) — The attribute name in the model to translate.\n\n#### Returns:\n\n- ([`String`](../../../string \"String (class)\")) — The translated model name for the current locale.\n\n### \\#padrino_admin_translate(word, \\*args) ⇒ String Also known as: pat\n\nTranslates a given word for padrino admin.\n\n#### Examples:\n\n``` ruby\n# => t(\"padrino.admin.profile\",  :default => \"Profile\")\npat(:profile)\n\n# => t(\"padrino.admin.profile\",  :default => \"My Profile\")\npat(:profile, \"My Profile\")\n```\n\n#### Parameters:\n\n- `word` ([`String`](../../../string \"String (class)\")) — The specified word to admin translate.\n- `default` ([`String`](../../../string \"String (class)\")) — The default fallback if no word is available for the locale.\n\n#### Returns:\n\n- ([`String`](../../../string \"String (class)\")) — The translated word for the current locale.\n\n### \\#tag_icon(icon, tag = nil) ⇒ String\n\nIcon's Bootstrap helper.\n\n#### Examples:\n\n``` ruby\ntag_icon(:edit, :list)\n```\n\n#### Parameters:\n\n- `icon` (`Symbol`) — The specified icon type.\n- `tag` (`Symbol`) *(defaults to: `nil`)* — The HTML tag.\n\n#### Returns:\n\n- ([`String`](../../../string \"String (class)\")) — HTML tag with prepend icon\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers/ViewHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers/ViewHelpers)"
- name: Padrino::Admin::Helpers::ViewHelpers#model_attribute_translate
  id: padrino/admin/helpers/viewhelpers#model_attribute_translate-instance_method
  summary: Translates attribute name for the given model
  belongs_to: Padrino::Admin::Helpers::ViewHelpers
  description: |-
    ### \#model_attribute_translate(model, attribute) ⇒ String Also known as: t_attr

    Translates attribute name for the given model.

    #### Examples:

    ``` ruby
    # => t("models.account.attributes.email", :default => "Email")
    mat(:account, :email)
    ```

    #### Parameters:

    - `model`(`Symbol`) — The model name for the translation.
    - `attribute`(`Symbol`) — The attribute name in the model to translate.

    #### Returns:

    - ([`String`](../../../string "String (class)")) — The translated attribute name for the current locale.
- name: Padrino::Admin::Helpers::ViewHelpers#model_translate
  id: padrino/admin/helpers/viewhelpers#model_translate-instance_method
  summary: Translates model name
  belongs_to: Padrino::Admin::Helpers::ViewHelpers
  description: |-
    ### \#model_translate(model) ⇒ String Also known as: mt

    Translates model name.

    #### Examples:

    ``` ruby
    # => t("models.account.name", :default => "Account")
    mt(:account)
    ```

    #### Parameters:

    - `attribute`(`Symbol`) — The attribute name in the model to translate.

    #### Returns:

    - ([`String`](../../../string "String (class)")) — The translated model name for the current locale.
- name: Padrino::Admin::Helpers::ViewHelpers#padrino_admin_translate
  id: padrino/admin/helpers/viewhelpers#padrino_admin_translate-instance_method
  summary: Translates a given word for padrino admin
  belongs_to: Padrino::Admin::Helpers::ViewHelpers
  description: |-
    ### \#padrino_admin_translate(word, \*args) ⇒ String Also known as: pat

    Translates a given word for padrino admin.

    #### Examples:

    ``` ruby
    # => t("padrino.admin.profile",  :default => "Profile")
    pat(:profile)

    # => t("padrino.admin.profile",  :default => "My Profile")
    pat(:profile, "My Profile")
    ```

    #### Parameters:

    - `word`([`String`](../../../string "String (class)")) — The specified word to admin translate.
    - `default`([`String`](../../../string "String (class)")) — The default fallback if no word is available for the locale.

    #### Returns:

    - ([`String`](../../../string "String (class)")) — The translated word for the current locale.
- name: Padrino::Admin::Helpers::ViewHelpers#tag_icon
  id: padrino/admin/helpers/viewhelpers#tag_icon-instance_method
  summary: Icon's Bootstrap helper
  belongs_to: Padrino::Admin::Helpers::ViewHelpers
  description: "### \\#tag_icon(icon, tag = nil) ⇒ String\n\nIcon's Bootstrap helper.\n\n#### Examples:\n\n``` ruby\ntag_icon(:edit, :list)\n```\n\n#### Parameters:\n\n- `icon`(`Symbol`) — The specified icon type.\n- `tag`(`Symbol`)*(defaults to: `nil`)* — The HTML tag.\n\n#### Returns:\n\n- ([`String`](../../../string \"String (class)\")) — HTML tag with prepend icon\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers/ViewHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers/ViewHelpers)"
- name: Padrino::Application
  id: padrino/application
  summary: Subclasses of this become independent Padrino applications (stemming from Sinatra::Application)
  description: "# Class: Padrino::Application\n\nInherits:  \nSinatra::Base\n\n- [Object](../object \"Object (class)\")\n- Sinatra::Base\n- Padrino::Application\n\n## Overview\n\nSubclasses of this become independent Padrino applications (stemming from Sinatra::Application). These subclassed applications can be easily mounted into other Padrino applications as well.\n\n## Class Method Summary\n\n- [`.`**`default`**`(option, *args, &block) ⇒ Object`](application#default-class_method \"default (class method)\")\n- [`.`**`dependencies`**` ⇒ Array`](application#dependencies-class_method \"dependencies (class method)\") Returns default list of path globs to load as dependencies.\n- [`.`**`layout_path`**`(layout) ⇒ Object`](application#layout_path-class_method \"layout_path (class method)\") Returns an absolute path of application layout.\n- [`.`**`prerequisites`**` ⇒ Object`](application#prerequisites-class_method \"prerequisites (class method)\") An array of file to load before your app.rb, basically are files which our app depends on.\n- [`.`**`reload!`**` ⇒ TrueClass`](application#reload!-class_method \"reload! (class method)\") Reloads the application files from all defined load paths.\n- [`.`**`reset_routes!`**` ⇒ TrueClass`](application#reset_routes!-class_method \"reset_routes! (class method)\") Resets application routes to only routes not defined by the user.\n- [`.`**`routes`**` ⇒ Object`](application#routes-class_method \"routes (class method)\") Returns the routes of our app.\n- [`.`**`run!`**`(options = {}) ⇒ Object`](application#run!-class_method \"run! (class method)\") Run the Padrino app as a self-hosted server using Thin, Mongrel or WEBrick (in that order).\n- [`.`**`view_path`**`(view) ⇒ Object`](application#view_path-class_method \"view_path (class method)\") Returns an absolute path of view in application views folder.\n\n## Instance Method Summary\n\n- [`#`**`logger`**` ⇒ Padrino::Logger`](application#logger-instance_method \"#logger (instance method)\") Returns the logger for this application.\n\n## Class Method Details\n\n### .default(option, \\*args, &block) ⇒ Object\n\n### .dependencies ⇒ Array\n\nReturns default list of path globs to load as dependencies. Appends custom dependency patterns to the be loaded for your Application.\n\n#### Examples:\n\n``` ruby\nMyApp.dependencies << \"#{Padrino.root}/uploaders/**/*.rb\"\nMyApp.dependencies << Padrino.root('other_app', 'controllers.rb')\n```\n\n#### Returns:\n\n- (`Array`) — list of path globs to load as dependencies\n\n### .layout_path(layout) ⇒ Object\n\nReturns an absolute path of application layout.\n\n#### Examples:\n\n``` ruby\nAdmin.layout_path :application #=> \"/home/user/test/admin/views/layouts/application\"\n```\n\n### .prerequisites ⇒ Object\n\nAn array of file to load before your app.rb, basically are files which our app depends on.\n\nBy default we look for files:\n\n``` ruby\n# List of default files that we are looking for:\nyourapp/models.rb\nyourapp/models/**/*.rb\nyourapp/lib.rb\nyourapp/lib/**/*.rb\n```\n\n#### Examples:\n\nAdding a custom prerequisite\n\n``` ruby\nMyApp.prerequisites << Padrino.root('my_app', 'custom_model.rb')\n```\n\n### .reload! ⇒ TrueClass\n\nReloads the application files from all defined load paths.\n\nThis method is used from our Padrino Reloader during development mode in order to reload the source files.\n\n#### Examples:\n\n``` ruby\nMyApp.reload!\n```\n\n#### Returns:\n\n- (`TrueClass`)\n\n### .reset_routes! ⇒ TrueClass\n\nResets application routes to only routes not defined by the user.\n\n#### Examples:\n\n``` ruby\nMyApp.reset_routes!\n```\n\n#### Returns:\n\n- (`TrueClass`)\n\n### .routes ⇒ Object\n\nReturns the routes of our app.\n\n#### Examples:\n\n``` ruby\nMyApp.routes\n```\n\n### .run!(options = {}) ⇒ Object\n\nRun the Padrino app as a self-hosted server using Thin, Mongrel or WEBrick (in that order).\n\n#### See Also:\n\n- [Server#start](server#start-instance_method \"Padrino::Server#start (method)\")\n\n### .view_path(view) ⇒ Object\n\nReturns an absolute path of view in application views folder.\n\n#### Examples:\n\n``` ruby\nAdmin.view_path 'users/index' #=> \"/home/user/test/admin/views/users/index\"\n```\n\n## Instance Method Details\n\n### \\#logger ⇒ Padrino::Logger\n\nReturns the logger for this application.\n\n#### Returns:\n\n- ([`Padrino::Logger`](logger \"Padrino::Logger (class)\")) — Logger associated with this app.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Application](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Application)"
- name: Padrino::Application#logger
  id: padrino/application#logger-instance_method
  summary: Returns the logger for this application
  belongs_to: Padrino::Application
  description: "### \\#logger ⇒ Padrino::Logger\n\nReturns the logger for this application.\n\n#### Returns:\n\n- ([`Padrino::Logger`](logger \"Padrino::Logger (class)\")) — Logger associated with this app.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Application](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Application)"
- name: Padrino::Application.default
  id: padrino/application#default-class_method
  summary: null
  belongs_to: Padrino::Application
  description: '### .default(option, \*args, &block) ⇒ Object'
- name: Padrino::Application.dependencies
  id: padrino/application#dependencies-class_method
  summary: Returns default list of path globs to load as dependencies
  belongs_to: Padrino::Application
  description: |-
    ### .dependencies ⇒ Array

    Returns default list of path globs to load as dependencies. Appends custom dependency patterns to the be loaded for your Application.

    #### Examples:

    ``` ruby
    MyApp.dependencies << "#{Padrino.root}/uploaders/**/*.rb"
    MyApp.dependencies << Padrino.root('other_app', 'controllers.rb')
    ```

    #### Returns:

    - (`Array`) — list of path globs to load as dependencies
- name: Padrino::Application.layout_path
  id: padrino/application#layout_path-class_method
  summary: Returns an absolute path of application layout
  belongs_to: Padrino::Application
  description: |-
    ### .layout_path(layout) ⇒ Object

    Returns an absolute path of application layout.

    #### Examples:

    ``` ruby
    Admin.layout_path :application #=> "/home/user/test/admin/views/layouts/application"
    ```
- name: Padrino::Application.prerequisites
  id: padrino/application#prerequisites-class_method
  summary: An array of file to load before your app.rb, basically are files which our app depends on
  belongs_to: Padrino::Application
  description: |-
    ### .prerequisites ⇒ Object

    An array of file to load before your app.rb, basically are files which our app depends on.

    By default we look for files:

    ``` ruby
    # List of default files that we are looking for:
    yourapp/models.rb
    yourapp/models/**/*.rb
    yourapp/lib.rb
    yourapp/lib/**/*.rb
    ```

    #### Examples:

    Adding a custom prerequisite

    ``` ruby
    MyApp.prerequisites << Padrino.root('my_app', 'custom_model.rb')
    ```
- name: Padrino::Application.reload!
  id: padrino/application#reload!-class_method
  summary: Reloads the application files from all defined load paths
  belongs_to: Padrino::Application
  description: |-
    ### .reload! ⇒ TrueClass

    Reloads the application files from all defined load paths.

    This method is used from our Padrino Reloader during development mode in order to reload the source files.

    #### Examples:

    ``` ruby
    MyApp.reload!
    ```

    #### Returns:

    - (`TrueClass`)
- name: Padrino::Application.reset_routes!
  id: padrino/application#reset_routes!-class_method
  summary: Resets application routes to only routes not defined by the user
  belongs_to: Padrino::Application
  description: |-
    ### .reset_routes! ⇒ TrueClass

    Resets application routes to only routes not defined by the user.

    #### Examples:

    ``` ruby
    MyApp.reset_routes!
    ```

    #### Returns:

    - (`TrueClass`)
- name: Padrino::Application.routes
  id: padrino/application#routes-class_method
  summary: Returns the routes of our app
  belongs_to: Padrino::Application
  description: |-
    ### .routes ⇒ Object

    Returns the routes of our app.

    #### Examples:

    ``` ruby
    MyApp.routes
    ```
- name: Padrino::Application.run!
  id: padrino/application#run!-class_method
  summary: Run the Padrino app as a self-hosted server using Thin, Mongrel or WEBrick (in that order)
  belongs_to: Padrino::Application
  description: |-
    ### .run!(options = {}) ⇒ Object

    Run the Padrino app as a self-hosted server using Thin, Mongrel or WEBrick (in that order).

    #### See Also:

    -  [Server#start](server#start-instance_method "Padrino::Server#start (method)")
- name: Padrino::Application.view_path
  id: padrino/application#view_path-class_method
  summary: Returns an absolute path of view in application views folder
  belongs_to: Padrino::Application
  description: |-
    ### .view_path(view) ⇒ Object

    Returns an absolute path of view in application views folder.

    #### Examples:

    ``` ruby
    Admin.view_path 'users/index' #=> "/home/user/test/admin/views/users/index"
    ```

    ## Instance Method Details
- name: Padrino::ApplicationSetup
  id: padrino/applicationsetup
  summary: Holds setup-oriented methods for Padrino::Application
  description: "# Module: Padrino::ApplicationSetup\n\n## Overview\n\nHolds setup-oriented methods for Padrino::Application.\n\n## Defined Under Namespace\n\n**Modules:** [ClassMethods](applicationsetup/classmethods \"Padrino::ApplicationSetup::ClassMethods (module)\")\n\n## Class Method Summary\n\n- [`.`**`registered`**`(app) ⇒ Object`](applicationsetup#registered-class_method \"registered (class method)\")\n\n## Class Method Details\n\n### .registered(app) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ApplicationSetup](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ApplicationSetup)"
- name: Padrino::ApplicationSetup.registered
  id: padrino/applicationsetup#registered-class_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::ApplicationSetup
  description: "### .registered(app) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ApplicationSetup](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ApplicationSetup)"
- name: Padrino::ApplicationSetup::ClassMethods
  id: padrino/applicationsetup/classmethods
  summary: Defines default settings for Padrino application
  description: "# Module: Padrino::ApplicationSetup::ClassMethods\n\n## Instance Method Summary\n\n- [`#`**`default_configuration!`**` ⇒ Object`](classmethods#default_configuration!-instance_method \"#default_configuration! (instance method)\") Defines default settings for Padrino application.\n- [`#`**`precompile_routes!`**` ⇒ Object`](classmethods#precompile_routes!-instance_method \"#precompile_routes! (instance method)\")\n- [`#`**`precompile_routes?`**` ⇒ Boolean`](classmethods#precompile_routes%3F-instance_method \"#precompile_routes? (instance method)\")\n- [`#`**`setup_application!`**` ⇒ TrueClass`](classmethods#setup_application!-instance_method \"#setup_application! (instance method)\") Setup the application by registering initializers, load paths and logger.\n\n## Instance Method Details\n\n### \\#default_configuration! ⇒ Object\n\nDefines default settings for Padrino application.\n\n### \\#precompile_routes! ⇒ Object\n\n### \\#precompile_routes? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#setup_application! ⇒ TrueClass\n\nSetup the application by registering initializers, load paths and logger. Invoked automatically when an application is first instantiated.\n\n#### Returns:\n\n- (`TrueClass`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ApplicationSetup/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ApplicationSetup/ClassMethods)"
- name: Padrino::ApplicationSetup::ClassMethods#default_configuration!
  id: padrino/applicationsetup/classmethods#default_configuration!-instance_method
  summary: Defines default settings for Padrino application
  belongs_to: Padrino::ApplicationSetup::ClassMethods
  description: |-
    ### \#default_configuration! ⇒ Object

    Defines default settings for Padrino application.
- name: Padrino::ApplicationSetup::ClassMethods#precompile_routes!
  id: padrino/applicationsetup/classmethods#precompile_routes!-instance_method
  summary: null
  belongs_to: Padrino::ApplicationSetup::ClassMethods
  description: '### \#precompile_routes! ⇒ Object'
- name: Padrino::ApplicationSetup::ClassMethods#precompile_routes?
  id: padrino/applicationsetup/classmethods#precompile_routes?-instance_method
  summary: null
  belongs_to: Padrino::ApplicationSetup::ClassMethods
  description: |-
    ### \#precompile_routes? ⇒ Boolean

    #### Returns:

    - (`Boolean`)
- name: Padrino::ApplicationSetup::ClassMethods#setup_application!
  id: padrino/applicationsetup/classmethods#setup_application!-instance_method
  summary: Setup the application by registering initializers, load paths and logger
  belongs_to: Padrino::ApplicationSetup::ClassMethods
  description: "### \\#setup_application! ⇒ TrueClass\n\nSetup the application by registering initializers, load paths and logger. Invoked automatically when an application is first instantiated.\n\n#### Returns:\n\n- (`TrueClass`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ApplicationSetup/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ApplicationSetup/ClassMethods)"
- name: Padrino::AuthenticityToken
  id: padrino/authenticitytoken
  summary: Returns a new instance of AuthenticityToken
  description: "# Class: Padrino::AuthenticityToken\n\nInherits:  \nRack::Protection::AuthenticityToken\n\n- [Object](../object \"Object (class)\")\n- Rack::Protection::AuthenticityToken\n- Padrino::AuthenticityToken\n\n## Instance Method Summary\n\n- [`#`**`call`**`(env) ⇒ Object`](authenticitytoken#call-instance_method \"#call (instance method)\")\n- [`#`**`except?`**`(env) ⇒ Boolean`](authenticitytoken#except%3F-instance_method \"#except? (instance method)\")\n- [`#`**`initialize`**`(app, options = {}) ⇒ AuthenticityToken`](authenticitytoken#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of AuthenticityToken.\n\n## Constructor Details\n\n### \\#initialize(app, options = {}) ⇒ AuthenticityToken\n\nReturns a new instance of AuthenticityToken.\n\n## Instance Method Details\n\n### \\#call(env) ⇒ Object\n\n### \\#except?(env) ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/AuthenticityToken](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/AuthenticityToken)"
- name: Padrino::AuthenticityToken#call
  id: padrino/authenticitytoken#call-instance_method
  summary: null
  belongs_to: Padrino::AuthenticityToken
  description: '### \#call(env) ⇒ Object'
- name: Padrino::AuthenticityToken#except?
  id: padrino/authenticitytoken#except?-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::AuthenticityToken
  description: "### \\#except?(env) ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/AuthenticityToken](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/AuthenticityToken)"
- name: Padrino::AuthenticityToken#initialize
  id: padrino/authenticitytoken#initialize-instance_method
  summary: Returns a new instance of AuthenticityToken
  belongs_to: Padrino::AuthenticityToken
  description: |-
    ### \#initialize(app, options = {}) ⇒ AuthenticityToken

    Returns a new instance of AuthenticityToken.

    ## Instance Method Details
- name: Padrino::Cache
  id: padrino/cache
  summary: This component enables caching of an application's response contents on both page- and fragment-levels
  description: "# Module: Padrino::Cache\n\n## Overview\n\nThis component enables caching of an application's response contents on both page- and fragment-levels. Output cached in this manner is persisted, until it expires or is actively expired, in a configurable store of your choosing. Several common caching stores are supported out of the box.\n\n## Defined Under Namespace\n\n**Modules:** [Helpers](cache/helpers \"Padrino::Cache::Helpers (module)\")\n\n## Class Method Summary\n\n- [`.`**`new`**`(name, options = {}) ⇒ Object`](cache#new-class_method \"new (class method)\")\n- [`.`**`padrino_route_added`**`(route, verb, path, args, options, block) ⇒ Object`](cache#padrino_route_added-class_method \"padrino_route_added (class method)\")\n- [`.`**`registered`**`(app) ⇒ Object`](cache#registered-class_method \"registered (class method)\") Register these helpers:.\n\n## Class Method Details\n\n### .new(name, options = {}) ⇒ Object\n\n### .padrino_route_added(route, verb, path, args, options, block) ⇒ Object\n\n### .registered(app) ⇒ Object\n\nRegister these helpers:\n\n``` ruby\nPadrino::Cache::Helpers::ObjectCache\nPadrino::Cache::Helpers::CacheStore\nPadrino::Cache::Helpers::Fragment\nPadrino::Cache::Helpers::Page\n```\n\nfor Padrino::Application.\n\nBy default we use FileStore as showed below:\n\n``` ruby\nset :cache, Padrino::Cache.new(:File, :dir => Padrino.root('tmp', app_name.to_s, 'cache'))\n```\n\nHowever, you can also change the file store easily in your app.rb:\n\n``` ruby\nset :cache, Padrino::Cache.new(:LRUHash) # Keeps cached values in memory\nset :cache, Padrino::Cache.new(:Memcached) # Uses default server at localhost\nset :cache, Padrino::Cache.new(:Memcached, '127.0.0.1:11211', :exception_retry_limit => 1)\nset :cache, Padrino::Cache.new(:Memcached, :backend => memcached_or_dalli_instance)\nset :cache, Padrino::Cache.new(:Redis) # Uses default server at localhost\nset :cache, Padrino::Cache.new(:Redis, :host => '127.0.0.1', :port => 6379, :db => 0)\nset :cache, Padrino::Cache.new(:Redis, :backend => redis_instance)\nset :cache, Padrino::Cache.new(:Mongo) # Uses default server at localhost\nset :cache, Padrino::Cache.new(:Mongo, :backend => mongo_client_instance)\nset :cache, Padrino::Cache.new(:File, :dir => Padrino.root('tmp', app_name.to_s, 'cache')) # default choice\n```\n\nYou can manage your cache from anywhere in your app:\n\n``` ruby\nMyApp.cache['val'] = 'test'\nMyApp.cache['val'] # => 'test'\nMyApp.cache.delete('val')\nMyApp.cache.clear\n```\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache)"
- name: Padrino::Cache.new
  id: padrino/cache#new-class_method
  summary: null
  belongs_to: Padrino::Cache
  description: '### .new(name, options = {}) ⇒ Object'
- name: Padrino::Cache.padrino_route_added
  id: padrino/cache#padrino_route_added-class_method
  summary: null
  belongs_to: Padrino::Cache
  description: '### .padrino_route_added(route, verb, path, args, options, block) ⇒ Object'
- name: Padrino::Cache.registered
  id: padrino/cache#registered-class_method
  summary: for Padrino::Application
  belongs_to: Padrino::Cache
  description: "### .registered(app) ⇒ Object\n\nRegister these helpers:\n\n``` ruby\nPadrino::Cache::Helpers::ObjectCache\nPadrino::Cache::Helpers::CacheStore\nPadrino::Cache::Helpers::Fragment\nPadrino::Cache::Helpers::Page\n```\n\nfor Padrino::Application.\n\nBy default we use FileStore as showed below:\n\n``` ruby\nset :cache, Padrino::Cache.new(:File, :dir => Padrino.root('tmp', app_name.to_s, 'cache'))\n```\n\nHowever, you can also change the file store easily in your app.rb:\n\n``` ruby\nset :cache, Padrino::Cache.new(:LRUHash) # Keeps cached values in memory\nset :cache, Padrino::Cache.new(:Memcached) # Uses default server at localhost\nset :cache, Padrino::Cache.new(:Memcached, '127.0.0.1:11211', :exception_retry_limit => 1)\nset :cache, Padrino::Cache.new(:Memcached, :backend => memcached_or_dalli_instance)\nset :cache, Padrino::Cache.new(:Redis) # Uses default server at localhost\nset :cache, Padrino::Cache.new(:Redis, :host => '127.0.0.1', :port => 6379, :db => 0)\nset :cache, Padrino::Cache.new(:Redis, :backend => redis_instance)\nset :cache, Padrino::Cache.new(:Mongo) # Uses default server at localhost\nset :cache, Padrino::Cache.new(:Mongo, :backend => mongo_client_instance)\nset :cache, Padrino::Cache.new(:File, :dir => Padrino.root('tmp', app_name.to_s, 'cache')) # default choice\n```\n\nYou can manage your cache from anywhere in your app:\n\n``` ruby\nMyApp.cache['val'] = 'test'\nMyApp.cache['val'] # => 'test'\nMyApp.cache.delete('val')\nMyApp.cache.clear\n```\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache)"
- name: Padrino::Cache::Helpers
  id: padrino/cache/helpers
  summary: Helpers supporting page or fragment caching within a request route
  description: "# Module: Padrino::Cache::Helpers\n\n## Overview\n\nHelpers supporting page or fragment caching within a request route.\n\n## Defined Under Namespace\n\n**Modules:** [CacheStore](helpers/cachestore \"Padrino::Cache::Helpers::CacheStore (module)\"), [Fragment](helpers/fragment \"Padrino::Cache::Helpers::Fragment (module)\"), [ObjectCache](helpers/objectcache \"Padrino::Cache::Helpers::ObjectCache (module)\"), [Page](helpers/page \"Padrino::Cache::Helpers::Page (module)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers)"
- name: Padrino::Cache::Helpers::CacheStore
  id: padrino/cache/helpers/cachestore
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Padrino::Cache::Helpers::CacheStore\n\n## Instance Method Summary\n\n- [`#`**`expire`**`(*key) ⇒ Object`](cachestore#expire-instance_method \"#expire (instance method)\")\n\n## Instance Method Details\n\n### \\#expire(\\*key) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/CacheStore](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/CacheStore)"
- name: Padrino::Cache::Helpers::CacheStore#expire
  id: padrino/cache/helpers/cachestore#expire-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Cache::Helpers::CacheStore
  description: "### \\#expire(\\*key) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/CacheStore](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/CacheStore)"
- name: Padrino::Cache::Helpers::Fragment
  id: padrino/cache/helpers/fragment
  summary: Whereas page-level caching, described in the first section of this document, works by grabbing the entire output of a route, fragment caching gives the developer fine-grained control of what gets cached
  description: "# Module: Padrino::Cache::Helpers::Fragment\n\nIncludes:  \n[Helpers::OutputHelpers](../../helpers/outputhelpers \"Padrino::Helpers::OutputHelpers (module)\")\n\n## Overview\n\nWhereas page-level caching, described in the first section of this document, works by grabbing the entire output of a route, fragment caching gives the developer fine-grained control of what gets cached. This type of caching occurs at whatever level you choose.\n\nPossible uses for fragment caching might include:\n\n- a 'feed' of some items on a page\n\n- output fetched (by proxy) from an API on a third-party site\n\n- parts of your page which are largely static/do not need re-rendering every request\n\n- any output which is expensive to render\n\n## Instance Method Summary\n\n- [`#`**`cache`**`(key, opts = {}, &block) ⇒ Object`](fragment#cache-instance_method \"#cache (instance method)\") This helper is used anywhere in your application you would like to associate a fragment to be cached.\n\n### Methods included from Helpers::OutputHelpers\n\n[\\#block_is_template?](../../helpers/outputhelpers#block_is_template%3F-instance_method \"Padrino::Helpers::OutputHelpers#block_is_template? (method)\"), [\\#capture_html](../../helpers/outputhelpers#capture_html-instance_method \"Padrino::Helpers::OutputHelpers#capture_html (method)\"), [\\#concat_content](../../helpers/outputhelpers#concat_content-instance_method \"Padrino::Helpers::OutputHelpers#concat_content (method)\"), [\\#concat_safe_content](../../helpers/outputhelpers#concat_safe_content-instance_method \"Padrino::Helpers::OutputHelpers#concat_safe_content (method)\"), [\\#content_for](../../helpers/outputhelpers#content_for-instance_method \"Padrino::Helpers::OutputHelpers#content_for (method)\"), [\\#content_for?](../../helpers/outputhelpers#content_for%3F-instance_method \"Padrino::Helpers::OutputHelpers#content_for? (method)\"), [handlers](../../helpers/outputhelpers#handlers-class_method \"Padrino::Helpers::OutputHelpers.handlers (method)\"), [register](../../helpers/outputhelpers#register-class_method \"Padrino::Helpers::OutputHelpers.register (method)\"), [\\#yield_content](../../helpers/outputhelpers#yield_content-instance_method \"Padrino::Helpers::OutputHelpers#yield_content (method)\")\n\n## Instance Method Details\n\n### \\#cache(key, opts = {}, &block) ⇒ Object\n\nThis helper is used anywhere in your application you would like to associate a fragment to be cached. It can be used in within a route:\n\n#### Examples:\n\n``` ruby\n# Caching a fragment\nclass MyTweets < Padrino::Application\n  enable :caching          # turns on caching mechanism\n\n  controller '/tweets' do\n    get :feed, :map => '/:username' do\n      username = params[:username]\n\n      @feed = cache( \"feed_for_#{username}\", :expires => 3 ) do\n        @tweets = Tweet.all( :username => username )\n        render 'partials/feedcontent'\n      end\n\n      # Below outputs @feed somewhere in its markup.\n      render 'feeds/show'\n    end\n  end\nend\n```\n\n#### Parameters:\n\n- `key` ([`String`](../../../string \"String (class)\")) — cache key\n- `opts` (`Hash`) *(defaults to: `{}`)* — cache options, e.g :expires\n- `Execution` (`Proc`) — result to store in the cache\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Fragment](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Fragment)"
- name: Padrino::Cache::Helpers::Fragment#cache
  id: padrino/cache/helpers/fragment#cache-instance_method
  summary: This helper is used anywhere in your application you would like to associate a fragment to be cached
  belongs_to: Padrino::Cache::Helpers::Fragment
  description: "### \\#cache(key, opts = {}, &block) ⇒ Object\n\nThis helper is used anywhere in your application you would like to associate a fragment to be cached. It can be used in within a route:\n\n#### Examples:\n\n``` ruby\n# Caching a fragment\nclass MyTweets < Padrino::Application\n  enable :caching          # turns on caching mechanism\n\n  controller '/tweets' do\n    get :feed, :map => '/:username' do\n      username = params[:username]\n\n      @feed = cache( \"feed_for_#{username}\", :expires => 3 ) do\n        @tweets = Tweet.all( :username => username )\n        render 'partials/feedcontent'\n      end\n\n      # Below outputs @feed somewhere in its markup.\n      render 'feeds/show'\n    end\n  end\nend\n```\n\n#### Parameters:\n\n- `key`([`String`](../../../string \"String (class)\")) — cache key\n- `opts`(`Hash`)*(defaults to: `{}`)* — cache options, e.g :expires\n- `Execution`(`Proc`) — result to store in the cache\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Fragment](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Fragment)"
- name: Padrino::Cache::Helpers::ObjectCache
  id: padrino/cache/helpers/objectcache
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Padrino::Cache::Helpers::ObjectCache\n\n## Instance Method Summary\n\n- [`#`**`cache_object`**`(key, opts = {}) ⇒ Object`](objectcache#cache_object-instance_method \"#cache_object (instance method)\")\n\n## Instance Method Details\n\n### \\#cache_object(key, opts = {}) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/ObjectCache](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/ObjectCache)"
- name: Padrino::Cache::Helpers::ObjectCache#cache_object
  id: padrino/cache/helpers/objectcache#cache_object-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Cache::Helpers::ObjectCache
  description: "### \\#cache_object(key, opts = {}) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/ObjectCache](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/ObjectCache)"
- name: Padrino::Cache::Helpers::Page
  id: padrino/cache/helpers/page
  summary: Page caching is easy to integrate into your application
  description: "# Module: Padrino::Cache::Helpers::Page\n\n## Overview\n\nPage caching is easy to integrate into your application. To turn it on, simply provide the `:cache => true` option on either a controller or one of its routes. By default, cached content is persisted with a “file store” –that is, in a subdirectory of your application root.\n\nYou can manually expire cache with CachedApp.cache.delete(:my_name)\n\nNote that the “latest” method call to `expires` determines its value: if called within a route, as opposed to a controller definition, the route's value will be assumed.\n\n#### Examples:\n\n``` ruby\n# Setting content expiry time.\nclass CachedApp < Padrino::Application\n  enable :caching          # turns on caching mechanism\n\n  controller '/blog', :cache => true do\n    expires 15\n\n    get '/entries' do\n      # expires 15 => can also be defined inside a single route\n      'Just broke up eating twinkies, lol'\n    end\n\n    get '/post/:id' do\n      cache_key :my_name\n      @post = Post.find(params[:id])\n    end\n  end\nend\n```\n\n## Defined Under Namespace\n\n**Modules:** [ClassMethods](page/classmethods \"Padrino::Cache::Helpers::Page::ClassMethods (module)\")\n\n## Constant Summary [collapse](#)\n\nCACHED_VERBS =  \n``` ruby\n{ 'GET' => true, 'HEAD' => true }.freeze\n```\n\n## Class Method Summary\n\n- [`.`**`padrino_route_added`**`(route, verb) ⇒ Object`](page#padrino_route_added-class_method \"padrino_route_added (class method)\")\n\n## Instance Method Summary\n\n- [`#`**`cache_key`**`(name = nil, &block) ⇒ Object`](page#cache_key-instance_method \"#cache_key (instance method)\") This helper is used within a route or route to indicate the name in the cache.\n- [`#`**`expires`**`(time) ⇒ Object`](page#expires-instance_method \"#expires (instance method)\") This helper is used within a controller or route to indicate how often content should persist in the cache.\n\n## Class Method Details\n\n### .padrino_route_added(route, verb) ⇒ Object\n\n## Instance Method Details\n\n### \\#cache_key(name = nil, &block) ⇒ Object\n\nThis helper is used within a route or route to indicate the name in the cache.\n\n``` ruby\nend\n```\n\n#### Examples:\n\n``` ruby\ncontroller '/blog', :cache => true do\n\n  get '/post/:id' do\n    cache_key :my_name\n    @post = Post.find(params[:id])\n  end\nend\n```\n\n``` ruby\nget '/foo', :cache => true do\n  cache_key { param[:id] }\n  \"My id is #{param[:id}\"\nend\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) *(defaults to: `nil`)* — cache key\n- `block` (`Proc`) — block to be evaluated to cache key\n\n### \\#expires(time) ⇒ Object\n\nThis helper is used within a controller or route to indicate how often content should persist in the cache.\n\nAfter `seconds` seconds have passed, content previously cached will be discarded and re-rendered. Code associated with that route will *not* be executed; rather, its previous output will be sent to the client with a 200 OK status code.\n\n#### Examples:\n\n``` ruby\ncontroller '/blog', :cache => true do\n  expires 15\n\n  get '/entries' do\n    'Just broke up eating twinkies, lol'\n  end\nend\n```\n\n#### Parameters:\n\n- `time` (`Integer`) — Time til expiration (seconds)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Page](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Page)"
- name: Padrino::Cache::Helpers::Page#cache_key
  id: padrino/cache/helpers/page#cache_key-instance_method
  summary: This helper is used within a route or route to indicate the name in the cache
  belongs_to: Padrino::Cache::Helpers::Page
  description: |-
    ### \#cache_key(name = nil, &block) ⇒ Object

    This helper is used within a route or route to indicate the name in the cache.

    ``` ruby
    end
    ```

    #### Examples:

    ``` ruby
    controller '/blog', :cache => true do

      get '/post/:id' do
        cache_key :my_name
        @post = Post.find(params[:id])
      end
    end
    ```

    ``` ruby
    get '/foo', :cache => true do
      cache_key { param[:id] }
      "My id is #{param[:id}"
    end
    ```

    #### Parameters:

    - `name`(`Symbol`)*(defaults to: `nil`)* — cache key
    - `block`(`Proc`) — block to be evaluated to cache key
- name: Padrino::Cache::Helpers::Page#expires
  id: padrino/cache/helpers/page#expires-instance_method
  summary: This helper is used within a controller or route to indicate how often content should persist in the cache
  belongs_to: Padrino::Cache::Helpers::Page
  description: "### \\#expires(time) ⇒ Object\n\nThis helper is used within a controller or route to indicate how often content should persist in the cache.\n\nAfter `seconds` seconds have passed, content previously cached will be discarded and re-rendered. Code associated with that route will *not* be executed; rather, its previous output will be sent to the client with a 200 OK status code.\n\n#### Examples:\n\n``` ruby\ncontroller '/blog', :cache => true do\n  expires 15\n\n  get '/entries' do\n    'Just broke up eating twinkies, lol'\n  end\nend\n```\n\n#### Parameters:\n\n- `time`(`Integer`) — Time til expiration (seconds)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Page](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Page)"
- name: Padrino::Cache::Helpers::Page.padrino_route_added
  id: padrino/cache/helpers/page#padrino_route_added-class_method
  summary: null
  belongs_to: Padrino::Cache::Helpers::Page
  description: |-
    ### .padrino_route_added(route, verb) ⇒ Object

    ## Instance Method Details
- name: Padrino::Cache::Helpers::Page::ClassMethods
  id: padrino/cache/helpers/page/classmethods
  summary: A method to set `expires` time inside `controller` blocks
  description: "# Module: Padrino::Cache::Helpers::Page::ClassMethods\n\n## Instance Method Summary\n\n- [`#`**`expires`**`(time) ⇒ Object`](classmethods#expires-instance_method \"#expires (instance method)\") A method to set \\`expires\\` time inside \\`controller\\` blocks.\n\n## Instance Method Details\n\n### \\#expires(time) ⇒ Object\n\nA method to set \\`expires\\` time inside \\`controller\\` blocks.\n\n#### Examples:\n\n``` ruby\ncontroller :users do\n  expires 15\n\n  get :show do\n    'shown'\n  end\nend\n```\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Page/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Page/ClassMethods)"
- name: Padrino::Cache::Helpers::Page::ClassMethods#expires
  id: padrino/cache/helpers/page/classmethods#expires-instance_method
  summary: A method to set `expires` time inside `controller` blocks
  belongs_to: Padrino::Cache::Helpers::Page::ClassMethods
  description: "### \\#expires(time) ⇒ Object\n\nA method to set \\`expires\\` time inside \\`controller\\` blocks.\n\n#### Examples:\n\n``` ruby\ncontroller :users do\n  expires 15\n\n  get :show do\n    'shown'\n  end\nend\n```\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Page/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Page/ClassMethods)"
- name: Padrino::Configuration
  id: padrino/configuration
  summary: Returns the configuration structure allowing to get and set it's values
  description: "# Module: Padrino::Configuration\n\nIncluded in:  \n[Padrino](../padrino \"Padrino (module)\")\n\n## Overview\n\nPadrino simple configuration module\n\n## Instance Method Summary\n\n- [`#`**`config`**` ⇒ Object`](configuration#config-instance_method \"#config (instance method)\") Returns the configuration structure allowing to get and set it's values.\n- [`#`**`configure`**`(*environments) {|config| ... } ⇒ Object`](configuration#configure-instance_method \"#configure (instance method)\") Allows to configure different environments differently.\n\n## Instance Method Details\n\n### \\#config ⇒ Object\n\nReturns the configuration structure allowing to get and set it's values. Padrino.config is a simple Ruby OpenStruct object with no additional magic.\n\nExample:\n\n``` ruby\nPadrino.config.value1 = 42\nexit if Padrino.config.exiting\n```\n\n### \\#configure(\\*environments) {\\|config\\| ... } ⇒ Object\n\nAllows to configure different environments differently. Requires a block.\n\nExample:\n\n``` ruby\nPadrino.configure :development do |config|\n  config.value2 = 'only development'\nend\nPadrino.configure :development, :production do |config|\n  config.value2 = 'both development and production'\nend\nPadrino.configure do |config|\n  config.value2 = 'any environment'\nend\n```\n\n#### Yields:\n\n- ([`config`](configuration#config-instance_method \"Padrino::Configuration#config (method)\"))\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Configuration](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Configuration)"
- name: Padrino::Configuration#config
  id: padrino/configuration#config-instance_method
  summary: Returns the configuration structure allowing to get and set it's values
  belongs_to: Padrino::Configuration
  description: |-
    ### \#config ⇒ Object

    Returns the configuration structure allowing to get and set it's values. Padrino.config is a simple Ruby OpenStruct object with no additional magic.

    Example:

    ``` ruby
    Padrino.config.value1 = 42
    exit if Padrino.config.exiting
    ```
- name: Padrino::Configuration#configure
  id: padrino/configuration#configure-instance_method
  summary: Allows to configure different environments differently
  belongs_to: Padrino::Configuration
  description: "### \\#configure(\\*environments) {\\|config\\| ... } ⇒ Object\n\nAllows to configure different environments differently. Requires a block.\n\nExample:\n\n``` ruby\nPadrino.configure :development do |config|\n  config.value2 = 'only development'\nend\nPadrino.configure :development, :production do |config|\n  config.value2 = 'both development and production'\nend\nPadrino.configure do |config|\n  config.value2 = 'any environment'\nend\n```\n\n#### Yields:\n\n- ([`config`](configuration#config-instance_method \"Padrino::Configuration#config (method)\"))\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Configuration](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Configuration)"
- name: Padrino::Filter
  id: padrino/filter
  summary: Returns a new instance of Filter
  description: "# Class: Padrino::Filter\n\nInherits:  \n[Object](../object \"Object (class)\")\n\n- [Object](../object \"Object (class)\")\n- Padrino::Filter\n\n## Instance Attribute Summary\n\n- [`#`**`block`**` ⇒ Object`](filter#block-instance_method \"#block (instance method)\") readonly Returns the value of attribute block.\n\n## Instance Method Summary\n\n- [`#`**`apply?`**`(request) ⇒ Boolean`](filter#apply%3F-instance_method \"#apply? (instance method)\")\n- [`#`**`initialize`**`(mode, scoped_controller, options, args, &block) ⇒ Filter`](filter#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of Filter.\n- [`#`**`to_proc`**` ⇒ Object`](filter#to_proc-instance_method \"#to_proc (instance method)\")\n\n## Constructor Details\n\n### \\#initialize(mode, scoped_controller, options, args, &block) ⇒ Filter\n\nReturns a new instance of Filter.\n\n## Instance Attribute Details\n\n### \\#block ⇒ Object (readonly)\n\nReturns the value of attribute block\n\n## Instance Method Details\n\n### \\#apply?(request) ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#to_proc ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Filter](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Filter)"
- name: Padrino::Filter#apply?
  id: padrino/filter#apply?-instance_method
  summary: null
  belongs_to: Padrino::Filter
  description: |-
    ### \#apply?(request) ⇒ Boolean

    #### Returns:

    - (`Boolean`)
- name: Padrino::Filter#block
  id: padrino/filter#block-instance_method
  summary: null
  belongs_to: Padrino::Filter
  description: |-
    ### \#block ⇒ Object (readonly)

    Returns the value of attribute block

    ## Instance Method Details
- name: Padrino::Filter#initialize
  id: padrino/filter#initialize-instance_method
  summary: Returns a new instance of Filter
  belongs_to: Padrino::Filter
  description: |-
    ### \#initialize(mode, scoped_controller, options, args, &block) ⇒ Filter

    Returns a new instance of Filter.

    ## Instance Attribute Details
- name: Padrino::Filter#to_proc
  id: padrino/filter#to_proc-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Filter
  description: "### \\#to_proc ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Filter](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Filter)"
- name: Padrino::Flash
  id: padrino/flash
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Padrino::Flash\n\n## Defined Under Namespace\n\n**Modules:** [Helpers](flash/helpers \"Padrino::Flash::Helpers (module)\") **Classes:** [Storage](flash/storage \"Padrino::Flash::Storage (class)\")\n\n## Class Method Summary\n\n- [`.`**`registered`**`(app) ⇒ Object`](flash#registered-class_method \"registered (class method)\")\n\n## Class Method Details\n\n### .registered(app) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash)"
- name: Padrino::Flash.registered
  id: padrino/flash#registered-class_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Flash
  description: "### .registered(app) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash)"
- name: Padrino::Flash::Helpers
  id: padrino/flash/helpers
  summary: Returns the flash storage object
  description: "# Module: Padrino::Flash::Helpers\n\n## Overview\n\nStorage\n\n## Instance Method Summary\n\n- [`#`**`flash`**` ⇒ Storage`](helpers#flash-instance_method \"#flash (instance method)\") Returns the flash storage object.\n- [`#`**`redirect`**`(url, *args) ⇒ Object`](helpers#redirect-instance_method \"#redirect (instance method)\")` (also: #redirect_to)` Overloads the existing redirect helper in-order to provide support for flash messages.\n\n## Instance Method Details\n\n### \\#flash ⇒ Storage\n\nReturns the flash storage object.\n\n#### Returns:\n\n- ([`Storage`](storage \"Padrino::Flash::Storage (class)\"))\n\n#### Since:\n\n- 0.10.8\n\n### \\#redirect(url) ⇒ Object \\#redirect(url, status_code) ⇒ Object \\#redirect(url, status_code, flash_messages) ⇒ Object \\#redirect(url, flash_messages) ⇒ Object Also known as: redirect_to\n\nOverloads the existing redirect helper in-order to provide support for flash messages.\n\n#### Examples:\n\n``` ruby\nredirect(dashboard, success: :user_created)\nredirect(new_location, 301, notice: 'This page has moved. Please update your bookmarks!!')\n```\n\n#### Overloads:\n\n- ### \\#redirect(url) ⇒ Object\n\n  #### Parameters:\n\n  - `url` ([`String`](../../string \"String (class)\"))\n\n- ### \\#redirect(url, status_code) ⇒ Object\n\n  #### Parameters:\n\n  - `url` ([`String`](../../string \"String (class)\"))\n  - `status_code` (`Integer`)\n\n- ### \\#redirect(url, status_code, flash_messages) ⇒ Object\n\n  #### Parameters:\n\n  - `url` ([`String`](../../string \"String (class)\"))\n  - `status_code` (`Integer`)\n  - `flash_messages` (`Hash`)\n\n- ### \\#redirect(url, flash_messages) ⇒ Object\n\n  #### Parameters:\n\n  - `url` ([`String`](../../string \"String (class)\"))\n  - `flash_messages` (`Hash`)\n\n#### Since:\n\n- 0.10.8\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash/Helpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash/Helpers)"
- name: Padrino::Flash::Helpers#flash
  id: padrino/flash/helpers#flash-instance_method
  summary: Returns the flash storage object
  belongs_to: Padrino::Flash::Helpers
  description: |-
    ### \#flash ⇒ Storage

    Returns the flash storage object.

    #### Returns:

    - ([`Storage`](storage "Padrino::Flash::Storage (class)"))

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Helpers#redirect
  id: padrino/flash/helpers#redirect-instance_method
  summary: Overloads the existing redirect helper in-order to provide support for flash messages
  belongs_to: Padrino::Flash::Helpers
  description: "### \\#redirect(url) ⇒ Object \\#redirect(url, status_code) ⇒ Object \\#redirect(url, status_code, flash_messages) ⇒ Object \\#redirect(url, flash_messages) ⇒ Object Also known as: redirect_to\n\nOverloads the existing redirect helper in-order to provide support for flash messages.\n\n#### Examples:\n\n``` ruby\nredirect(dashboard, success: :user_created)\nredirect(new_location, 301, notice: 'This page has moved. Please update your bookmarks!!')\n```\n\n#### Overloads:\n\n- ### \\#redirect(url) ⇒ Object\n\n  #### Parameters:\n\n  - `url` ([`String`](../../string \"String (class)\"))\n\n- ### \\#redirect(url, status_code) ⇒ Object\n\n  #### Parameters:\n\n  - `url` ([`String`](../../string \"String (class)\"))\n  - `status_code` (`Integer`)\n\n- ### \\#redirect(url, status_code, flash_messages) ⇒ Object\n\n  #### Parameters:\n\n  - `url` ([`String`](../../string \"String (class)\"))\n  - `status_code` (`Integer`)\n  - `flash_messages` (`Hash`)\n\n- ### \\#redirect(url, flash_messages) ⇒ Object\n\n  #### Parameters:\n\n  - `url` ([`String`](../../string \"String (class)\"))\n  - `flash_messages` (`Hash`)\n\n#### Since:\n\n- 0.10.8\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash/Helpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash/Helpers)"
- name: Padrino::Flash::Storage
  id: padrino/flash/storage
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Padrino::Flash::Storage\n\nInherits:  \n[Object](../../object \"Object (class)\")\n\n- [Object](../../object \"Object (class)\")\n- Padrino::Flash::Storage\n\nIncludes:  \nEnumerable\n\n## Instance Method Summary\n\n- [`#`**`[]`**`(type) ⇒ Object`](storage#%5B%5D-instance_method \"#[] (instance method)\")\n- [`#`**`[]=`**`(type, message) ⇒ Object`](storage#%5B%5D=-instance_method \"#[]= (instance method)\")\n- [`#`**`clear`**` ⇒ Object`](storage#clear-instance_method \"#clear (instance method)\")\n- [`#`**`delete`**`(type) ⇒ Object`](storage#delete-instance_method \"#delete (instance method)\")\n- [`#`**`discard`**`(key = nil) ⇒ Object`](storage#discard-instance_method \"#discard (instance method)\")\n- [`#`**`each`**`(&block) ⇒ Object`](storage#each-instance_method \"#each (instance method)\")\n- [`#`**`empty?`**` ⇒ Boolean`](storage#empty%3F-instance_method \"#empty? (instance method)\")\n- [`#`**`error`**` ⇒ Object`](storage#error-instance_method \"#error (instance method)\")\n- [`#`**`error=`**`(message) ⇒ Object`](storage#error=-instance_method \"#error= (instance method)\")\n- [`#`**`keep`**`(key = nil) ⇒ Object`](storage#keep-instance_method \"#keep (instance method)\")\n- [`#`**`key?`**`(type) ⇒ Boolean`](storage#key%3F-instance_method \"#key? (instance method)\")\n- [`#`**`keys`**` ⇒ Object`](storage#keys-instance_method \"#keys (instance method)\")\n- [`#`**`length`**` ⇒ Object`](storage#length-instance_method \"#length (instance method)\")` (also: #size)`\n- [`#`**`next`**` ⇒ Object`](storage#next-instance_method \"#next (instance method)\")\n- [`#`**`notice`**` ⇒ Object`](storage#notice-instance_method \"#notice (instance method)\")\n- [`#`**`notice=`**`(message) ⇒ Object`](storage#notice=-instance_method \"#notice= (instance method)\")\n- [`#`**`now`**` ⇒ Object`](storage#now-instance_method \"#now (instance method)\")\n- [`#`**`replace`**`(hash) ⇒ Object`](storage#replace-instance_method \"#replace (instance method)\")\n- [`#`**`success`**` ⇒ Object`](storage#success-instance_method \"#success (instance method)\")\n- [`#`**`success=`**`(message) ⇒ Object`](storage#success=-instance_method \"#success= (instance method)\")\n- [`#`**`sweep`**` ⇒ Object`](storage#sweep-instance_method \"#sweep (instance method)\")\n- [`#`**`to_hash`**` ⇒ Object`](storage#to_hash-instance_method \"#to_hash (instance method)\")\n- [`#`**`to_s`**` ⇒ Object`](storage#to_s-instance_method \"#to_s (instance method)\")\n- [`#`**`update`**`(hash) ⇒ Object`](storage#update-instance_method \"#update (instance method)\")` (also: #merge!)`\n\n## Instance Method Details\n\n### \\#\\[\\](type) ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#\\[\\]=(type, message) ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#clear ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#delete(type) ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#discard(key = nil) ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#each(&block) ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#empty? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n#### Since:\n\n- 0.10.8\n\n### \\#error ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#error=(message) ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#keep(key = nil) ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#key?(type) ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n#### Since:\n\n- 0.10.8\n\n### \\#keys ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#length ⇒ Object Also known as: size\n\n### \\#next ⇒ Object\n\n### \\#notice ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#notice=(message) ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#now ⇒ Object\n\n### \\#replace(hash) ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#success ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#success=(message) ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#sweep ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#to_hash ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#to_s ⇒ Object\n\n#### Since:\n\n- 0.10.8\n\n### \\#update(hash) ⇒ Object Also known as: merge!\n\n#### Since:\n\n- 0.10.8\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash/Storage](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash/Storage)"
- name: Padrino::Flash::Storage#[]
  id: padrino/flash/storage#[]-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#\[\](type) ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#[]=
  id: padrino/flash/storage#[]=-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#\[\]=(type, message) ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#clear
  id: padrino/flash/storage#clear-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#clear ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#delete
  id: padrino/flash/storage#delete-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#delete(type) ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#discard
  id: padrino/flash/storage#discard-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#discard(key = nil) ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#each
  id: padrino/flash/storage#each-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#each(&block) ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#empty?
  id: padrino/flash/storage#empty?-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#empty? ⇒ Boolean

    #### Returns:

    - (`Boolean`)

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#error
  id: padrino/flash/storage#error-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#error ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#error=
  id: padrino/flash/storage#error=-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#error=(message) ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#keep
  id: padrino/flash/storage#keep-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#keep(key = nil) ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#key?
  id: padrino/flash/storage#key?-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#key?(type) ⇒ Boolean

    #### Returns:

    - (`Boolean`)

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#keys
  id: padrino/flash/storage#keys-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#keys ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#length
  id: padrino/flash/storage#length-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: '### \#length ⇒ Object Also known as: size'
- name: Padrino::Flash::Storage#next
  id: padrino/flash/storage#next-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: '### \#next ⇒ Object'
- name: Padrino::Flash::Storage#notice
  id: padrino/flash/storage#notice-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#notice ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#notice=
  id: padrino/flash/storage#notice=-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#notice=(message) ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#now
  id: padrino/flash/storage#now-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: '### \#now ⇒ Object'
- name: Padrino::Flash::Storage#replace
  id: padrino/flash/storage#replace-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#replace(hash) ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#success
  id: padrino/flash/storage#success-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#success ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#success=
  id: padrino/flash/storage#success=-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#success=(message) ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#sweep
  id: padrino/flash/storage#sweep-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#sweep ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#to_hash
  id: padrino/flash/storage#to_hash-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#to_hash ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#to_s
  id: padrino/flash/storage#to_s-instance_method
  summary: null
  belongs_to: Padrino::Flash::Storage
  description: |-
    ### \#to_s ⇒ Object

    #### Since:

    - 0.10.8
- name: Padrino::Flash::Storage#update
  id: padrino/flash/storage#update-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Flash::Storage
  description: "### \\#update(hash) ⇒ Object Also known as: merge!\n\n#### Since:\n\n- 0.10.8\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash/Storage](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash/Storage)"
- name: Padrino::Generators
  id: padrino/generators
  summary: This module it's used for register generators
  description: "# Module: Padrino::Generators\n\n## Overview\n\nThis module it's used for register generators.\n\nCan be useful for 3rd party generators:\n\n``` ruby\n# custom_generator.rb\nclass CustomGenerator < Thor::Group\n  Padrino::Generators.add_generator(:custom_generator, self)\nend\n```\n\nNow for handle generators in padrino you need to add it to into `load_paths`.\n\nPadrino::Generators.load_paths \\<\\< “custom_generator.rb”\n\n## Defined Under Namespace\n\n**Modules:** [Actions](generators/actions \"Padrino::Generators::Actions (module)\"), [Admin](generators/admin \"Padrino::Generators::Admin (module)\"), [Runner](generators/runner \"Padrino::Generators::Runner (module)\") **Classes:** [AdminApp](generators/adminapp \"Padrino::Generators::AdminApp (class)\"), [AdminPage](generators/adminpage \"Padrino::Generators::AdminPage (class)\"), [App](generators/app \"Padrino::Generators::App (class)\"), [AppRootNotFound](generators/approotnotfound \"Padrino::Generators::AppRootNotFound (class)\"), [Cli](generators/cli \"Padrino::Generators::Cli (class)\"), [Component](generators/component \"Padrino::Generators::Component (class)\"), [Controller](generators/controller \"Padrino::Generators::Controller (class)\"), [Helper](generators/helper \"Padrino::Generators::Helper (class)\"), [Mailer](generators/mailer \"Padrino::Generators::Mailer (class)\"), [Migration](generators/migration \"Padrino::Generators::Migration (class)\"), [Model](generators/model \"Padrino::Generators::Model (class)\"), [Plugin](generators/plugin \"Padrino::Generators::Plugin (class)\"), [Project](generators/project \"Padrino::Generators::Project (class)\"), [Task](generators/task \"Padrino::Generators::Task (class)\")\n\n## Constant Summary [collapse](#)\n\nDEV_PATH =\n\nDefines the absolute path to the padrino source folder.\n\n``` ruby\nFile.expand_path(\"../../\", File.dirname(__FILE__))\n```\n\nDEFAULT_HELPER_NAME =\n\nDefault helper name for use in tiny app skeleton generator.\n\n``` ruby\n\"Helper\".freeze\n```\n\n## Class Method Summary\n\n- [`.`**`add_generator`**`(name, klass) ⇒ Hash`](generators#add_generator-class_method \"add_generator (class method)\") Global add a new generator class to `padrino-gen`.\n- [`.`**`load_components!`**` ⇒ Object`](generators#load_components!-class_method \"load_components! (class method)\") Load Global Actions and Component Actions then all files in `load_path`.\n- [`.`**`load_paths`**` ⇒ Object`](generators#load_paths-class_method \"load_paths (class method)\") Store our generators paths.\n- [`.`**`mappings`**` ⇒ Object`](generators#mappings-class_method \"mappings (class method)\") Return an ordered list of task with their class.\n\n## Class Method Details\n\n### .add_generator(name, klass) ⇒ Hash\n\nGlobal add a new generator class to `padrino-gen`.\n\n#### Examples:\n\n``` ruby\nPadrino::Generators.add_generator(:controller, Controller)\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) — Key name for generator mapping.\n- `klass` (`Class`) — Class of generator.\n\n#### Returns:\n\n- (`Hash`) — generator mappings\n\n### .load_components! ⇒ Object\n\nLoad Global Actions and Component Actions then all files in `load_path`.\n\n### .load_paths ⇒ Object\n\nStore our generators paths.\n\n### .mappings ⇒ Object\n\nReturn an ordered list of task with their class.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators)"
- name: Padrino::Generators.add_generator
  id: padrino/generators#add_generator-class_method
  summary: Global add a new generator class to padrino-gen
  belongs_to: Padrino::Generators
  description: |-
    ### .add_generator(name, klass) ⇒ Hash

    Global add a new generator class to `padrino-gen`.

    #### Examples:

    ``` ruby
    Padrino::Generators.add_generator(:controller, Controller)
    ```

    #### Parameters:

    - `name`(`Symbol`) — Key name for generator mapping.
    - `klass`(`Class`) — Class of generator.

    #### Returns:

    - (`Hash`) — generator mappings
- name: Padrino::Generators.load_components!
  id: padrino/generators#load_components!-class_method
  summary: Load Global Actions and Component Actions then all files in load_path
  belongs_to: Padrino::Generators
  description: |-
    ### .load_components! ⇒ Object

    Load Global Actions and Component Actions then all files in `load_path`.
- name: Padrino::Generators.load_paths
  id: padrino/generators#load_paths-class_method
  summary: Store our generators paths
  belongs_to: Padrino::Generators
  description: |-
    ### .load_paths ⇒ Object

    Store our generators paths.
- name: Padrino::Generators.mappings
  id: padrino/generators#mappings-class_method
  summary: Return an ordered list of task with their class
  belongs_to: Padrino::Generators
  description: "### .mappings ⇒ Object\n\nReturn an ordered list of task with their class.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators)"
- name: Padrino::Generators::Actions
  id: padrino/generators/actions
  summary: Common actions needed to support project and component generation
  description: "# Module: Padrino::Generators::Actions\n\nIncluded in:  \n[AdminApp](adminapp \"Padrino::Generators::AdminApp (class)\"), [AdminPage](adminpage \"Padrino::Generators::AdminPage (class)\"), [App](app \"Padrino::Generators::App (class)\"), [Component](component \"Padrino::Generators::Component (class)\"), [Controller](controller \"Padrino::Generators::Controller (class)\"), [Helper](helper \"Padrino::Generators::Helper (class)\"), [Mailer](mailer \"Padrino::Generators::Mailer (class)\"), [Migration](migration \"Padrino::Generators::Migration (class)\"), [Model](model \"Padrino::Generators::Model (class)\"), [Plugin](plugin \"Padrino::Generators::Plugin (class)\"), [Project](project \"Padrino::Generators::Project (class)\"), [Task](task \"Padrino::Generators::Task (class)\")\n\n## Overview\n\nCommon actions needed to support project and component generation.\n\n## Defined Under Namespace\n\n**Modules:** [ClassMethods](actions/classmethods \"Padrino::Generators::Actions::ClassMethods (module)\")\n\n## Instance Method Summary\n\n- [`#`**`already_exists?`**`(name, project_name = nil) ⇒ Boolean`](actions#already_exists%3F-instance_method \"#already_exists? (instance method)\") Returns true if constant name already exists.\n- [`#`**`app_skeleton`**`(app, tiny = false) ⇒ Object`](actions#app_skeleton-instance_method \"#app_skeleton (instance method)\") Generates standard and tiny applications within a project.\n- [`#`**`apply_component_for`**`(choice, component) ⇒ Object`](actions#apply_component_for-instance_method \"#apply_component_for (instance method)\") Returns the related module for a given component and option.\n- [`#`**`apply_default_fields`**`(fields) ⇒ Array<String>`](actions#apply_default_fields-instance_method \"#apply_default_fields (instance method)\") Apply default field types.\n- [`#`**`check_app_existence`**`(app) ⇒ Object`](actions#check_app_existence-instance_method \"#check_app_existence (instance method)\") Raise SystemExit if the app does not exist.\n- [`#`**`destination_root`**`(*paths) ⇒ String`](actions#destination_root-instance_method \"#destination_root (instance method)\") Returns the root for this Thor class (also aliased as destination root).\n- [`#`**`empty_directory_with_keep_file`**`(destination, config = {}) ⇒ Object`](actions#empty_directory_with_keep_file-instance_method \"#empty_directory_with_keep_file (instance method)\") Creates an empty directory with .keep file.\n- [`#`**`execute_component_setup`**`(component, choice) ⇒ Object`](actions#execute_component_setup-instance_method \"#execute_component_setup (instance method)\") Performs the necessary generator for a given component choice.\n- [`#`**`fetch_app_name`**`(app = 'app') ⇒ String`](actions#fetch_app_name-instance_method \"#fetch_app_name (instance method)\") Returns the app_name for the application at root.\n- [`#`**`fetch_component_choice`**`(component) ⇒ String`](actions#fetch_component_choice-instance_method \"#fetch_component_choice (instance method)\") Returns the component choice stored within the .component file of an application.\n- [`#`**`fetch_project_name`**`(app = 'app') ⇒ String`](actions#fetch_project_name-instance_method \"#fetch_project_name (instance method)\") Returns the namespace for the project.\n- [`#`**`in_app_root?`**` ⇒ Boolean`](actions#in_app_root%3F-instance_method \"#in_app_root? (instance method)\") Returns true if inside a Padrino application.\n- [`#`**`include_component_module_for`**`(component, choice = nil) ⇒ Object`](actions#include_component_module_for-instance_method \"#include_component_module_for (instance method)\") Includes the component module for the given component and choice.\n- [`#`**`initializer`**`(name, data = nil) ⇒ Object`](actions#initializer-instance_method \"#initializer (instance method)\") Registers and creates initializer.\n- [`#`**`inject_into_file`**`(destination, *args, &block) ⇒ Object`](actions#inject_into_file-instance_method \"#inject_into_file (instance method)\") Avoids editing destination file if it does not exist.\n- [`#`**`insert_hook`**`(include_text, where) ⇒ Object`](actions#insert_hook-instance_method \"#insert_hook (instance method)\") Inserts an hook before or after load in our boot.rb.\n- [`#`**`insert_into_gemfile`**`(name, options = {}) ⇒ Object`](actions#insert_into_gemfile-instance_method \"#insert_into_gemfile (instance method)\") Inserts a required gem into the Gemfile to add the bundler dependency.\n- [`#`**`insert_middleware`**`(include_text, app = nil) ⇒ Object`](actions#insert_middleware-instance_method \"#insert_middleware (instance method)\") Inserts a middleware inside app.rb.\n- [`#`**`invalid_fields`**`(fields) ⇒ Array<String>`](actions#invalid_fields-instance_method \"#invalid_fields (instance method)\") Returns the field with an unacceptable name(for symbol) else returns nil.\n- [`#`**`keep_file`**`(destination) ⇒ Object`](actions#keep_file-instance_method \"#keep_file (instance method)\") Creates an empty .keep file.\n- [`#`**`middleware`**`(name, source) ⇒ Object`](actions#middleware-instance_method \"#middleware (instance method)\") Creates and inserts middleware.\n- [`#`**`recognize_path`**` ⇒ Object`](actions#recognize_path-instance_method \"#recognize_path (instance method)\") Recognizes the path of application.\n- [`#`**`require_contrib`**`(contrib) ⇒ Object`](actions#require_contrib-instance_method \"#require_contrib (instance method)\") Insert the regired gem and add in boot.rb custom contribs.\n- [`#`**`require_dependencies`**`(*gem_names) ⇒ Object`](actions#require_dependencies-instance_method \"#require_dependencies (instance method)\") Adds all the specified gems into the Gemfile for bundler.\n- [`#`**`resolve_valid_choice`**`(component) ⇒ String`](actions#resolve_valid_choice-instance_method \"#resolve_valid_choice (instance method)\") Prompts the user if necessary until a valid choice is returned for the component.\n- [`#`**`retrieve_component_config`**`(target) ⇒ Hash`](actions#retrieve_component_config-instance_method \"#retrieve_component_config (instance method)\") Loads the component config back into a hash.\n- [`#`**`run_bundler`**` ⇒ Object`](actions#run_bundler-instance_method \"#run_bundler (instance method)\") Run the bundler.\n- [`#`**`store_component_choice`**`(key, value) ⇒ Symbol`](actions#store_component_choice-instance_method \"#store_component_choice (instance method)\") Set the component choice in the .component file of the application.\n- [`#`**`store_component_config`**`(destination, opts = {}) ⇒ Object`](actions#store_component_config-instance_method \"#store_component_config (instance method)\") Creates a component_config file at the destination containing all component options.\n- [`#`**`test?`**` ⇒ Boolean`](actions#test%3F-instance_method \"#test? (instance method)\") Return true if our project has test component.\n- [`#`**`tiny?`**` ⇒ Boolean`](actions#tiny%3F-instance_method \"#tiny? (instance method)\") Return true if we have a tiny skeleton.\n- [`#`**`valid_choice?`**`(component, choice) ⇒ Boolean`](actions#valid_choice%3F-instance_method \"#valid_choice? (instance method)\") Returns true if the option passed is a valid choice for component.\n- [`#`**`valid_constant?`**`(name) ⇒ Exception`](actions#valid_constant%3F-instance_method \"#valid_constant? (instance method)\") Ensures that project name is valid, else raise an NameError.\n- [`#`**`validate_namespace`**`(name) ⇒ Object`](actions#validate_namespace-instance_method \"#validate_namespace (instance method)\") Validates namespace name (controller name, etc.) or fails with an error.\n\n## Instance Method Details\n\n### \\#already_exists?(name, project_name = nil) ⇒ Boolean\n\nReturns true if constant name already exists.\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#app_skeleton(app, tiny = false) ⇒ Object\n\nGenerates standard and tiny applications within a project.\n\n#### Examples:\n\n``` ruby\napp_skeleton 'some_app'\napp_skeleton 'sub_app', true\n```\n\n#### Parameters:\n\n- `app` ([`String`](../../string \"String (class)\")) — Name of application.\n- `tiny` (`Boolean`) *(defaults to: `false`)* — Boolean to generate a tiny structure.\n\n### \\#apply_component_for(choice, component) ⇒ Object\n\nReturns the related module for a given component and option.\n\n#### Examples:\n\n``` ruby\napply_component_for('rr', :mock)\n```\n\n#### Parameters:\n\n- `choice` ([`String`](../../string \"String (class)\")) — The name of the component module.\n- `component` (`Symbol`) — The type of the component module.\n\n### \\#apply_default_fields(fields) ⇒ Array\\<String\\>\n\nApply default field types.\n\n#### Parameters:\n\n- `fields` (`Array<`[`String`](../../string \"String (class)\")`>`) — Field names for generators.\n\n#### Returns:\n\n- (`Array<`[`String`](../../string \"String (class)\")`>`) — fields with default types\n\n### \\#check_app_existence(app) ⇒ Object\n\nRaise SystemExit if the app does not exist.\n\n#### Examples:\n\n``` ruby\ncheck_app_existence 'app'\n```\n\n#### Parameters:\n\n- `app` ([`String`](../../string \"String (class)\")) — Directory name of application.\n\n### \\#destination_root(\\*paths) ⇒ String\n\nReturns the root for this Thor class (also aliased as destination root).\n\n#### Examples:\n\n``` ruby\ndestination_root('config/boot.rb')\n```\n\n#### Parameters:\n\n- `paths` (`Array<`[`String`](../../string \"String (class)\")`>`) — The relative path from destination root.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The full path\n\n### \\#empty_directory_with_keep_file(destination, config = {}) ⇒ Object\n\nCreates an empty directory with .keep file\n\n### \\#execute_component_setup(component, choice) ⇒ Object\n\nPerforms the necessary generator for a given component choice.\n\n#### Examples:\n\n``` ruby\nexecute_component_setup(:mock, 'rr')\n```\n\n#### Parameters:\n\n- `component` (`Symbol`) — The type of component module.\n- `choice` ([`String`](../../string \"String (class)\")) — The name of the component module choice.\n\n### \\#fetch_app_name(app = 'app') ⇒ String\n\nReturns the app_name for the application at root.\n\n#### Examples:\n\n``` ruby\nfetch_app_name('subapp')\n```\n\n#### Parameters:\n\n- `app` ([`String`](../../string \"String (class)\")) *(defaults to: `'app'`)* — folder name of application.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — class name for application.\n\n### \\#fetch_component_choice(component) ⇒ String\n\nReturns the component choice stored within the .component file of an application.\n\n#### Examples:\n\n``` ruby\nfetch_component_choice(:mock)\n```\n\n#### Parameters:\n\n- `component` (`Symbol`) — The type of component module.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Name of the component module.\n\n### \\#fetch_project_name(app = 'app') ⇒ String\n\nReturns the namespace for the project.\n\n#### Examples:\n\n``` ruby\nfetch_project_name\n```\n\n#### Parameters:\n\n- `app` ([`String`](../../string \"String (class)\")) *(defaults to: `'app'`)* — folder name of application.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — namespace for application.\n\n### \\#in_app_root? ⇒ Boolean\n\nReturns true if inside a Padrino application.\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#include_component_module_for(component, choice = nil) ⇒ Object\n\nIncludes the component module for the given component and choice. It determines the choice using .components file.\n\n#### Examples:\n\n``` ruby\ninclude_component_module_for(:mock)\ninclude_component_module_for(:mock, 'rr')\n```\n\n#### Parameters:\n\n- `component` (`Symbol`) — The type of component module.\n- `choice` ([`String`](../../string \"String (class)\")) *(defaults to: `nil`)* — The name of the component module.\n\n### \\#initializer(name, data = nil) ⇒ Object\n\nRegisters and creates initializer.\n\n#### Examples:\n\n``` ruby\ninitializer(:test, \"some stuff here\")\n#=> generates 'lib/test_init.rb'\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) — Name of the initializer.\n- `data` ([`String`](../../string \"String (class)\")) *(defaults to: `nil`)* — Text to generate into the initializer file.\n\n### \\#inject_into_file(destination, \\*args, &block) ⇒ Object\n\nAvoids editing destination file if it does not exist.\n\n### \\#insert_hook(include_text, where) ⇒ Object\n\nInserts an hook before or after load in our boot.rb.\n\n#### Examples:\n\n``` ruby\ninsert_hook(\"DataMapper.finalize\", :after_load)\n```\n\n#### Parameters:\n\n- `include_text` ([`String`](../../string \"String (class)\")) — Text to include into hooks in boot.rb.\n- `where` (`Symbol`) — method hook to call from Padrino, i.e :after_load, :before_load.\n\n### \\#insert_into_gemfile(name, options = {}) ⇒ Object\n\nInserts a required gem into the Gemfile to add the bundler dependency.\n\n#### Examples:\n\n``` ruby\ninsert_into_gemfile(name)\ninsert_into_gemfile(name, :group => 'test', :require => 'foo')\ninsert_into_gemfile(name, :group => 'test', :version => \">1.2.3\")\n```\n\n#### Parameters:\n\n- `name` ([`String`](../../string \"String (class)\")) — Name of gem to insert into Gemfile.\n- `options` (`Hash`) *(defaults to: `{}`)* — Options to generate into Gemfile for gem.\n\n### \\#insert_middleware(include_text, app = nil) ⇒ Object\n\nInserts a middleware inside app.rb.\n\n#### Examples:\n\n``` ruby\ninsert_middleware(ActiveRecord::ConnectionAdapters::ConnectionManagement)\n```\n\n#### Parameters:\n\n- `include_text` ([`String`](../../string \"String (class)\")) — Text to include into hooks in boot.rb.\n\n### \\#invalid_fields(fields) ⇒ Array\\<String\\>\n\nReturns the field with an unacceptable name(for symbol) else returns nil.\n\n#### Examples:\n\n``` ruby\ninvalid_fields ['foo:bar', 'hello:world']\n```\n\n#### Parameters:\n\n- `fields` (`Array<`[`String`](../../string \"String (class)\")`>`) — Field names for generators.\n\n#### Returns:\n\n- (`Array<`[`String`](../../string \"String (class)\")`>`) — array of invalid fields\n\n### \\#keep_file(destination) ⇒ Object\n\nCreates an empty .keep file\n\n### \\#middleware(name, source) ⇒ Object\n\nCreates and inserts middleware.\n\n#### Examples:\n\n``` ruby\nmiddleware(:hello, \"class Hello\\nend\")\n#=> generates 'lib/hello_middleware.rb'\n```\n\n#### Parameters:\n\n- `name` (`Symbol`, [`String`](../../string \"String (class)\")) — Name of the middleware.\n- `source` ([`String`](../../string \"String (class)\")) — Text to generate into the middleware file.\n\n### \\#recognize_path ⇒ Object\n\nRecognizes the path of application.\n\n### \\#require_contrib(contrib) ⇒ Object\n\nInsert the regired gem and add in boot.rb custom contribs.\n\n#### Examples:\n\n``` ruby\nrequire_contrib('auto_locale')\n```\n\n#### Parameters:\n\n- `contrib` ([`String`](../../string \"String (class)\")) — name of library from padrino-contrib\n\n### \\#require_dependencies(\\*gem_names) ⇒ Object\n\nAdds all the specified gems into the Gemfile for bundler.\n\n#### Examples:\n\n``` ruby\nrequire_dependencies('active_record')\nrequire_dependencies('mocha', 'bacon', :group => 'test')\nrequire_dependencies('json', :version => \">=1.2.3\")\n```\n\n#### Parameters:\n\n- `gem_names` (`Array<`[`String`](../../string \"String (class)\")`>`) — Splat of gems to require in Gemfile.\n- `options` (`Hash`) — The options to pass to gem in Gemfile.\n\n### \\#resolve_valid_choice(component) ⇒ String\n\nPrompts the user if necessary until a valid choice is returned for the component.\n\n#### Examples:\n\n``` ruby\nresolve_valid_choice(:mock)\n```\n\n#### Parameters:\n\n- `component` (`Symbol`) — The type of component module.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Name of component if valid, otherwise ask for valid choice.\n\n### \\#retrieve_component_config(target) ⇒ Hash\n\nLoads the component config back into a hash.\n\n#### Examples:\n\n``` ruby\nretrieve_component_config(...)\n# => { :mock => 'rr', :test => 'rspec', ... }\n```\n\n#### Parameters:\n\n- `target` ([`String`](../../string \"String (class)\")) — Path to component config file.\n\n#### Returns:\n\n- (`Hash`) — Loaded YAML file.\n\n### \\#run_bundler ⇒ Object\n\nRun the bundler.\n\n### \\#store_component_choice(key, value) ⇒ Symbol\n\nSet the component choice in the .component file of the application.\n\n#### Examples:\n\n``` ruby\nstore_component_choice(:renderer, :haml)\n```\n\n#### Parameters:\n\n- `key` (`Symbol`) — The type of component module.\n- `value` (`Symbol`) — The name of the component module.\n\n#### Returns:\n\n- (`Symbol`) — The name of the component module.\n\n### \\#store_component_config(destination, opts = {}) ⇒ Object\n\nCreates a component_config file at the destination containing all component options. Content is a YAMLized version of a hash containing component name mapping to chosen value.\n\n#### Examples:\n\n``` ruby\nstore_component_config('/foo/bar')\n```\n\n#### Parameters:\n\n- `destination` ([`String`](../../string \"String (class)\")) — The file path to store the component config.\n\n### \\#test? ⇒ Boolean\n\nReturn true if our project has test component.\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#tiny? ⇒ Boolean\n\nReturn true if we have a tiny skeleton.\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#valid_choice?(component, choice) ⇒ Boolean\n\nReturns true if the option passed is a valid choice for component.\n\n#### Examples:\n\n``` ruby\nvalid_choice?(:mock, 'rr')\n```\n\n#### Parameters:\n\n- `component` (`Symbol`) — The type of component module.\n- `choice` ([`String`](../../string \"String (class)\")) — The name of the component module.\n\n#### Returns:\n\n- (`Boolean`) — Boolean of whether the choice is valid.\n\n### \\#valid_constant?(name) ⇒ Exception\n\nEnsures that project name is valid, else raise an NameError.\n\n#### Examples:\n\n``` ruby\nvalid_constant '1235Stuff'\nvalid_constant '#Abc'\n```\n\n#### Parameters:\n\n- `name` ([`String`](../../string \"String (class)\")) — Name of project.\n\n#### Returns:\n\n- (`Exception`) — Exception with error message if not valid.\n\n### \\#validate_namespace(name) ⇒ Object\n\nValidates namespace name (controller name, etc.) or fails with an error.\n\n#### Examples:\n\n``` ruby\nvalidate_namespace 'Project_One1' #=> pass\nvalidate_namespace 'Erroneous/name' #=> fail\n```\n\n#### Parameters:\n\n- `name` ([`String`](../../string \"String (class)\")) — Name of namespace\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Actions](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Actions)"
- name: Padrino::Generators::Actions#already_exists?
  id: padrino/generators/actions#already_exists?-instance_method
  summary: Returns true if constant name already exists
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#already_exists?(name, project_name = nil) ⇒ Boolean

    Returns true if constant name already exists.

    #### Returns:

    - (`Boolean`)
- name: Padrino::Generators::Actions#app_skeleton
  id: padrino/generators/actions#app_skeleton-instance_method
  summary: Generates standard and tiny applications within a project
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#app_skeleton(app, tiny = false) ⇒ Object

    Generates standard and tiny applications within a project.

    #### Examples:

    ``` ruby
    app_skeleton 'some_app'
    app_skeleton 'sub_app', true
    ```

    #### Parameters:

    - `app`([`String`](../../string "String (class)")) — Name of application.
    - `tiny`(`Boolean`)*(defaults to: `false`)* — Boolean to generate a tiny structure.
- name: Padrino::Generators::Actions#apply_component_for
  id: padrino/generators/actions#apply_component_for-instance_method
  summary: Returns the related module for a given component and option
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#apply_component_for(choice, component) ⇒ Object

    Returns the related module for a given component and option.

    #### Examples:

    ``` ruby
    apply_component_for('rr', :mock)
    ```

    #### Parameters:

    - `choice`([`String`](../../string "String (class)")) — The name of the component module.
    - `component`(`Symbol`) — The type of the component module.
- name: Padrino::Generators::Actions#apply_default_fields
  id: padrino/generators/actions#apply_default_fields-instance_method
  summary: Apply default field types
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#apply_default_fields(fields) ⇒ Array\<String\>

    Apply default field types.

    #### Parameters:

    - `fields`(`Array<`[`String`](../../string "String (class)")`>`) — Field names for generators.

    #### Returns:

    - (`Array<`[`String`](../../string "String (class)")`>`) — fields with default types
- name: Padrino::Generators::Actions#check_app_existence
  id: padrino/generators/actions#check_app_existence-instance_method
  summary: Raise SystemExit if the app does not exist
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#check_app_existence(app) ⇒ Object

    Raise SystemExit if the app does not exist.

    #### Examples:

    ``` ruby
    check_app_existence 'app'
    ```

    #### Parameters:

    - `app`([`String`](../../string "String (class)")) — Directory name of application.
- name: Padrino::Generators::Actions#destination_root
  id: padrino/generators/actions#destination_root-instance_method
  summary: Returns the root for this Thor class (also aliased as destination root)
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#destination_root(\*paths) ⇒ String

    Returns the root for this Thor class (also aliased as destination root).

    #### Examples:

    ``` ruby
    destination_root('config/boot.rb')
    ```

    #### Parameters:

    - `paths`(`Array<`[`String`](../../string "String (class)")`>`) — The relative path from destination root.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The full path
- name: Padrino::Generators::Actions#empty_directory_with_keep_file
  id: padrino/generators/actions#empty_directory_with_keep_file-instance_method
  summary: null
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#empty_directory_with_keep_file(destination, config = {}) ⇒ Object

    Creates an empty directory with .keep file
- name: Padrino::Generators::Actions#execute_component_setup
  id: padrino/generators/actions#execute_component_setup-instance_method
  summary: Performs the necessary generator for a given component choice
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#execute_component_setup(component, choice) ⇒ Object

    Performs the necessary generator for a given component choice.

    #### Examples:

    ``` ruby
    execute_component_setup(:mock, 'rr')
    ```

    #### Parameters:

    - `component`(`Symbol`) — The type of component module.
    - `choice`([`String`](../../string "String (class)")) — The name of the component module choice.
- name: Padrino::Generators::Actions#fetch_app_name
  id: padrino/generators/actions#fetch_app_name-instance_method
  summary: Returns the app_name for the application at root
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#fetch_app_name(app = 'app') ⇒ String

    Returns the app_name for the application at root.

    #### Examples:

    ``` ruby
    fetch_app_name('subapp')
    ```

    #### Parameters:

    - `app`([`String`](../../string "String (class)"))*(defaults to: `'app'`)* — folder name of application.

    #### Returns:

    - ([`String`](../../string "String (class)")) — class name for application.
- name: Padrino::Generators::Actions#fetch_component_choice
  id: padrino/generators/actions#fetch_component_choice-instance_method
  summary: Returns the component choice stored within the .component file of an application
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#fetch_component_choice(component) ⇒ String

    Returns the component choice stored within the .component file of an application.

    #### Examples:

    ``` ruby
    fetch_component_choice(:mock)
    ```

    #### Parameters:

    - `component`(`Symbol`) — The type of component module.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Name of the component module.
- name: Padrino::Generators::Actions#fetch_project_name
  id: padrino/generators/actions#fetch_project_name-instance_method
  summary: Returns the namespace for the project
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#fetch_project_name(app = 'app') ⇒ String

    Returns the namespace for the project.

    #### Examples:

    ``` ruby
    fetch_project_name
    ```

    #### Parameters:

    - `app`([`String`](../../string "String (class)"))*(defaults to: `'app'`)* — folder name of application.

    #### Returns:

    - ([`String`](../../string "String (class)")) — namespace for application.
- name: Padrino::Generators::Actions#in_app_root?
  id: padrino/generators/actions#in_app_root?-instance_method
  summary: Returns true if inside a Padrino application
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#in_app_root? ⇒ Boolean

    Returns true if inside a Padrino application.

    #### Returns:

    - (`Boolean`)
- name: Padrino::Generators::Actions#include_component_module_for
  id: padrino/generators/actions#include_component_module_for-instance_method
  summary: Includes the component module for the given component and choice
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#include_component_module_for(component, choice = nil) ⇒ Object

    Includes the component module for the given component and choice. It determines the choice using .components file.

    #### Examples:

    ``` ruby
    include_component_module_for(:mock)
    include_component_module_for(:mock, 'rr')
    ```

    #### Parameters:

    - `component`(`Symbol`) — The type of component module.
    - `choice`([`String`](../../string "String (class)"))*(defaults to: `nil`)* — The name of the component module.
- name: Padrino::Generators::Actions#initializer
  id: padrino/generators/actions#initializer-instance_method
  summary: Registers and creates initializer
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#initializer(name, data = nil) ⇒ Object

    Registers and creates initializer.

    #### Examples:

    ``` ruby
    initializer(:test, "some stuff here")
    #=> generates 'lib/test_init.rb'
    ```

    #### Parameters:

    - `name`(`Symbol`) — Name of the initializer.
    - `data`([`String`](../../string "String (class)"))*(defaults to: `nil`)* — Text to generate into the initializer file.
- name: Padrino::Generators::Actions#inject_into_file
  id: padrino/generators/actions#inject_into_file-instance_method
  summary: Avoids editing destination file if it does not exist
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#inject_into_file(destination, \*args, &block) ⇒ Object

    Avoids editing destination file if it does not exist.
- name: Padrino::Generators::Actions#insert_hook
  id: padrino/generators/actions#insert_hook-instance_method
  summary: Inserts an hook before or after load in our boot.rb
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#insert_hook(include_text, where) ⇒ Object

    Inserts an hook before or after load in our boot.rb.

    #### Examples:

    ``` ruby
    insert_hook("DataMapper.finalize", :after_load)
    ```

    #### Parameters:

    - `include_text`([`String`](../../string "String (class)")) — Text to include into hooks in boot.rb.
    - `where`(`Symbol`) — method hook to call from Padrino, i.e :after_load, :before_load.
- name: Padrino::Generators::Actions#insert_into_gemfile
  id: padrino/generators/actions#insert_into_gemfile-instance_method
  summary: Inserts a required gem into the Gemfile to add the bundler dependency
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#insert_into_gemfile(name, options = {}) ⇒ Object

    Inserts a required gem into the Gemfile to add the bundler dependency.

    #### Examples:

    ``` ruby
    insert_into_gemfile(name)
    insert_into_gemfile(name, :group => 'test', :require => 'foo')
    insert_into_gemfile(name, :group => 'test', :version => ">1.2.3")
    ```

    #### Parameters:

    - `name`([`String`](../../string "String (class)")) — Name of gem to insert into Gemfile.
    - `options`(`Hash`)*(defaults to: `{}`)* — Options to generate into Gemfile for gem.
- name: Padrino::Generators::Actions#insert_middleware
  id: padrino/generators/actions#insert_middleware-instance_method
  summary: Inserts a middleware inside app.rb
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#insert_middleware(include_text, app = nil) ⇒ Object

    Inserts a middleware inside app.rb.

    #### Examples:

    ``` ruby
    insert_middleware(ActiveRecord::ConnectionAdapters::ConnectionManagement)
    ```

    #### Parameters:

    - `include_text`([`String`](../../string "String (class)")) — Text to include into hooks in boot.rb.
- name: Padrino::Generators::Actions#invalid_fields
  id: padrino/generators/actions#invalid_fields-instance_method
  summary: Returns the field with an unacceptable name(for symbol) else returns nil
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#invalid_fields(fields) ⇒ Array\<String\>

    Returns the field with an unacceptable name(for symbol) else returns nil.

    #### Examples:

    ``` ruby
    invalid_fields ['foo:bar', 'hello:world']
    ```

    #### Parameters:

    - `fields`(`Array<`[`String`](../../string "String (class)")`>`) — Field names for generators.

    #### Returns:

    - (`Array<`[`String`](../../string "String (class)")`>`) — array of invalid fields
- name: Padrino::Generators::Actions#keep_file
  id: padrino/generators/actions#keep_file-instance_method
  summary: null
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#keep_file(destination) ⇒ Object

    Creates an empty .keep file
- name: Padrino::Generators::Actions#middleware
  id: padrino/generators/actions#middleware-instance_method
  summary: Creates and inserts middleware
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#middleware(name, source) ⇒ Object

    Creates and inserts middleware.

    #### Examples:

    ``` ruby
    middleware(:hello, "class Hello\nend")
    #=> generates 'lib/hello_middleware.rb'
    ```

    #### Parameters:

    - `name`(`Symbol`, [`String`](../../string "String (class)")) — Name of the middleware.
    - `source`([`String`](../../string "String (class)")) — Text to generate into the middleware file.
- name: Padrino::Generators::Actions#recognize_path
  id: padrino/generators/actions#recognize_path-instance_method
  summary: Recognizes the path of application
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#recognize_path ⇒ Object

    Recognizes the path of application.
- name: Padrino::Generators::Actions#require_contrib
  id: padrino/generators/actions#require_contrib-instance_method
  summary: Insert the regired gem and add in boot.rb custom contribs
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#require_contrib(contrib) ⇒ Object

    Insert the regired gem and add in boot.rb custom contribs.

    #### Examples:

    ``` ruby
    require_contrib('auto_locale')
    ```

    #### Parameters:

    - `contrib`([`String`](../../string "String (class)")) — name of library from padrino-contrib
- name: Padrino::Generators::Actions#require_dependencies
  id: padrino/generators/actions#require_dependencies-instance_method
  summary: Adds all the specified gems into the Gemfile for bundler
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#require_dependencies(\*gem_names) ⇒ Object

    Adds all the specified gems into the Gemfile for bundler.

    #### Examples:

    ``` ruby
    require_dependencies('active_record')
    require_dependencies('mocha', 'bacon', :group => 'test')
    require_dependencies('json', :version => ">=1.2.3")
    ```

    #### Parameters:

    - `gem_names`(`Array<`[`String`](../../string "String (class)")`>`) — Splat of gems to require in Gemfile.
    - `options`(`Hash`) — The options to pass to gem in Gemfile.
- name: Padrino::Generators::Actions#resolve_valid_choice
  id: padrino/generators/actions#resolve_valid_choice-instance_method
  summary: Prompts the user if necessary until a valid choice is returned for the component
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#resolve_valid_choice(component) ⇒ String

    Prompts the user if necessary until a valid choice is returned for the component.

    #### Examples:

    ``` ruby
    resolve_valid_choice(:mock)
    ```

    #### Parameters:

    - `component`(`Symbol`) — The type of component module.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Name of component if valid, otherwise ask for valid choice.
- name: Padrino::Generators::Actions#retrieve_component_config
  id: padrino/generators/actions#retrieve_component_config-instance_method
  summary: Loads the component config back into a hash
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#retrieve_component_config(target) ⇒ Hash

    Loads the component config back into a hash.

    #### Examples:

    ``` ruby
    retrieve_component_config(...)
    # => { :mock => 'rr', :test => 'rspec', ... }
    ```

    #### Parameters:

    - `target`([`String`](../../string "String (class)")) — Path to component config file.

    #### Returns:

    - (`Hash`) — Loaded YAML file.
- name: Padrino::Generators::Actions#run_bundler
  id: padrino/generators/actions#run_bundler-instance_method
  summary: Run the bundler
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#run_bundler ⇒ Object

    Run the bundler.
- name: Padrino::Generators::Actions#store_component_choice
  id: padrino/generators/actions#store_component_choice-instance_method
  summary: Set the component choice in the .component file of the application
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#store_component_choice(key, value) ⇒ Symbol

    Set the component choice in the .component file of the application.

    #### Examples:

    ``` ruby
    store_component_choice(:renderer, :haml)
    ```

    #### Parameters:

    - `key`(`Symbol`) — The type of component module.
    - `value`(`Symbol`) — The name of the component module.

    #### Returns:

    - (`Symbol`) — The name of the component module.
- name: Padrino::Generators::Actions#store_component_config
  id: padrino/generators/actions#store_component_config-instance_method
  summary: Creates a component_config file at the destination containing all component options
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#store_component_config(destination, opts = {}) ⇒ Object

    Creates a component_config file at the destination containing all component options. Content is a YAMLized version of a hash containing component name mapping to chosen value.

    #### Examples:

    ``` ruby
    store_component_config('/foo/bar')
    ```

    #### Parameters:

    - `destination`([`String`](../../string "String (class)")) — The file path to store the component config.
- name: Padrino::Generators::Actions#test?
  id: padrino/generators/actions#test?-instance_method
  summary: Return true if our project has test component
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#test? ⇒ Boolean

    Return true if our project has test component.

    #### Returns:

    - (`Boolean`)
- name: Padrino::Generators::Actions#tiny?
  id: padrino/generators/actions#tiny?-instance_method
  summary: Return true if we have a tiny skeleton
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#tiny? ⇒ Boolean

    Return true if we have a tiny skeleton.

    #### Returns:

    - (`Boolean`)
- name: Padrino::Generators::Actions#valid_choice?
  id: padrino/generators/actions#valid_choice?-instance_method
  summary: Returns true if the option passed is a valid choice for component
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#valid_choice?(component, choice) ⇒ Boolean

    Returns true if the option passed is a valid choice for component.

    #### Examples:

    ``` ruby
    valid_choice?(:mock, 'rr')
    ```

    #### Parameters:

    - `component`(`Symbol`) — The type of component module.
    - `choice`([`String`](../../string "String (class)")) — The name of the component module.

    #### Returns:

    - (`Boolean`) — Boolean of whether the choice is valid.
- name: Padrino::Generators::Actions#valid_constant?
  id: padrino/generators/actions#valid_constant?-instance_method
  summary: Ensures that project name is valid, else raise an NameError
  belongs_to: Padrino::Generators::Actions
  description: |-
    ### \#valid_constant?(name) ⇒ Exception

    Ensures that project name is valid, else raise an NameError.

    #### Examples:

    ``` ruby
    valid_constant '1235Stuff'
    valid_constant '#Abc'
    ```

    #### Parameters:

    - `name`([`String`](../../string "String (class)")) — Name of project.

    #### Returns:

    - (`Exception`) — Exception with error message if not valid.
- name: Padrino::Generators::Actions#validate_namespace
  id: padrino/generators/actions#validate_namespace-instance_method
  summary: Validates namespace name (controller name, etc.) or fails with an error
  belongs_to: Padrino::Generators::Actions
  description: "### \\#validate_namespace(name) ⇒ Object\n\nValidates namespace name (controller name, etc.) or fails with an error.\n\n#### Examples:\n\n``` ruby\nvalidate_namespace 'Project_One1' #=> pass\nvalidate_namespace 'Erroneous/name' #=> fail\n```\n\n#### Parameters:\n\n- `name`([`String`](../../string \"String (class)\")) — Name of namespace\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Actions](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Actions)"
- name: Padrino::Generators::Actions::ClassMethods
  id: padrino/generators/actions/classmethods
  summary: Class methods for Thor generators to support the generators and component choices
  description: "# Module: Padrino::Generators::Actions::ClassMethods\n\n## Overview\n\nClass methods for Thor generators to support the generators and component choices.\n\n## Instance Method Summary\n\n- [`#`**`available_choices_for`**`(component) ⇒ Array<Symbol>`](classmethods#available_choices_for-instance_method \"#available_choices_for (instance method)\") Returns the list of available choices for the given component (including none).\n- [`#`**`component_option`**`(name, caption, options = {}) ⇒ Object`](classmethods#component_option-instance_method \"#component_option (instance method)\") Defines a class option to allow a component to be chosen and add to component type list.\n- [`#`**`component_types`**` ⇒ Object`](classmethods#component_types-instance_method \"#component_types (instance method)\") Returns the compiled list of component types which can be specified.\n- [`#`**`defines_component_options`**`(options = {}) ⇒ Object`](classmethods#defines_component_options-instance_method \"#defines_component_options (instance method)\") Definitions for the available customizable components.\n- [`#`**`require_arguments!`**` ⇒ Object`](classmethods#require_arguments!-instance_method \"#require_arguments! (instance method)\") Tells Padrino that for this Thor::Group it is a necessary task to run.\n- [`#`**`require_arguments?`**` ⇒ Boolean`](classmethods#require_arguments%3F-instance_method \"#require_arguments? (instance method)\") Returns true if we need an arguments for our Thor::Group.\n\n## Instance Method Details\n\n### \\#available_choices_for(component) ⇒ Array\\<Symbol\\>\n\nReturns the list of available choices for the given component (including none).\n\n#### Examples:\n\n``` ruby\navailable_choices_for :test\n=> [:shoulda, :bacon, :minitest]\n```\n\n#### Parameters:\n\n- `component` (`Symbol`) — The type of the component module.\n\n#### Returns:\n\n- (`Array<Symbol>`) — Array of component choices.\n\n### \\#component_option(name, caption, options = {}) ⇒ Object\n\nDefines a class option to allow a component to be chosen and add to component type list. Also builds the available_choices hash of which component choices are supported.\n\n#### Examples:\n\n``` ruby\ncomponent_option :test, \"Testing framework\", :aliases => '-t', :choices => [:bacon, :shoulda]\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) — Name of component.\n- `caption` ([`String`](../../../string \"String (class)\")) — Description of the component.\n- `options` (`Hash`) *(defaults to: `{}`)* — Additional parameters for component choice.\n\n### \\#component_types ⇒ Object\n\nReturns the compiled list of component types which can be specified.\n\n### \\#defines_component_options(options = {}) ⇒ Object\n\nDefinitions for the available customizable components.\n\n### \\#require_arguments! ⇒ Object\n\nTells Padrino that for this Thor::Group it is a necessary task to run.\n\n### \\#require_arguments? ⇒ Boolean\n\nReturns true if we need an arguments for our Thor::Group.\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Actions/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Actions/ClassMethods)"
- name: Padrino::Generators::Actions::ClassMethods#available_choices_for
  id: padrino/generators/actions/classmethods#available_choices_for-instance_method
  summary: Returns the list of available choices for the given component (including none)
  belongs_to: Padrino::Generators::Actions::ClassMethods
  description: |-
    ### \#available_choices_for(component) ⇒ Array\<Symbol\>

    Returns the list of available choices for the given component (including none).

    #### Examples:

    ``` ruby
    available_choices_for :test
    => [:shoulda, :bacon, :minitest]
    ```

    #### Parameters:

    - `component`(`Symbol`) — The type of the component module.

    #### Returns:

    - (`Array<Symbol>`) — Array of component choices.
- name: Padrino::Generators::Actions::ClassMethods#component_option
  id: padrino/generators/actions/classmethods#component_option-instance_method
  summary: Defines a class option to allow a component to be chosen and add to component type list
  belongs_to: Padrino::Generators::Actions::ClassMethods
  description: |-
    ### \#component_option(name, caption, options = {}) ⇒ Object

    Defines a class option to allow a component to be chosen and add to component type list. Also builds the available_choices hash of which component choices are supported.

    #### Examples:

    ``` ruby
    component_option :test, "Testing framework", :aliases => '-t', :choices => [:bacon, :shoulda]
    ```

    #### Parameters:

    - `name`(`Symbol`) — Name of component.
    - `caption`([`String`](../../../string "String (class)")) — Description of the component.
    - `options`(`Hash`)*(defaults to: `{}`)* — Additional parameters for component choice.
- name: Padrino::Generators::Actions::ClassMethods#component_types
  id: padrino/generators/actions/classmethods#component_types-instance_method
  summary: Returns the compiled list of component types which can be specified
  belongs_to: Padrino::Generators::Actions::ClassMethods
  description: |-
    ### \#component_types ⇒ Object

    Returns the compiled list of component types which can be specified.
- name: Padrino::Generators::Actions::ClassMethods#defines_component_options
  id: padrino/generators/actions/classmethods#defines_component_options-instance_method
  summary: Definitions for the available customizable components
  belongs_to: Padrino::Generators::Actions::ClassMethods
  description: |-
    ### \#defines_component_options(options = {}) ⇒ Object

    Definitions for the available customizable components.
- name: Padrino::Generators::Actions::ClassMethods#require_arguments!
  id: padrino/generators/actions/classmethods#require_arguments!-instance_method
  summary: Tells Padrino that for this Thor::Group it is a necessary task to run
  belongs_to: Padrino::Generators::Actions::ClassMethods
  description: |-
    ### \#require_arguments! ⇒ Object

    Tells Padrino that for this Thor::Group it is a necessary task to run.
- name: Padrino::Generators::Actions::ClassMethods#require_arguments?
  id: padrino/generators/actions/classmethods#require_arguments?-instance_method
  summary: Returns true if we need an arguments for our Thor::Group
  belongs_to: Padrino::Generators::Actions::ClassMethods
  description: "### \\#require_arguments? ⇒ Boolean\n\nReturns true if we need an arguments for our Thor::Group.\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Actions/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Actions/ClassMethods)"
- name: Padrino::Generators::Admin
  id: padrino/generators/admin
  summary: Generator action definitions for the admin panel
  description: "# Module: Padrino::Generators::Admin\n\n## Overview\n\nGenerator action definitions for the admin panel.\n\n## Defined Under Namespace\n\n**Modules:** [Actions](admin/actions \"Padrino::Generators::Admin::Actions (module)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Admin](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Admin)"
- name: Padrino::Generators::Admin::Actions
  id: padrino/generators/admin/actions
  summary: Important tasks for setting up or configuring the admin application
  description: "# Module: Padrino::Generators::Admin::Actions\n\nIncluded in:  \n[Padrino::Generators::AdminApp](../adminapp \"Padrino::Generators::AdminApp (class)\"), [Padrino::Generators::AdminPage](../adminpage \"Padrino::Generators::AdminPage (class)\")\n\n## Overview\n\nImportant tasks for setting up or configuring the admin application.\n\n## Instance Method Summary\n\n- [`#`**`add_project_module`**`(controller) ⇒ Object`](actions#add_project_module-instance_method \"#add_project_module (instance method)\") Add access_control permission in our app.rb.\n- [`#`**`ext`**` ⇒ Object`](actions#ext-instance_method \"#ext (instance method)\") Tell us which rendering engine you are using.\n- [`#`**`fetch_app_name`**`(app = 'app') ⇒ String`](actions#fetch_app_name-instance_method \"#fetch_app_name (instance method)\") Returns the app_name for the application at root.\n- [`#`**`orm`**` ⇒ Object`](actions#orm-instance_method \"#orm (instance method)\")` (also: #adapter)` Tell us which orm we are using.\n- [`#`**`remove_project_module`**`(controller) ⇒ Object`](actions#remove_project_module-instance_method \"#remove_project_module (instance method)\") Remove from access_control permissions.\n- [`#`**`supported_ext`**` ⇒ Object`](actions#supported_ext-instance_method \"#supported_ext (instance method)\") Tell us for now which rendering engine we support.\n- [`#`**`supported_orm`**` ⇒ Object`](actions#supported_orm-instance_method \"#supported_orm (instance method)\") Tell us for now which orm we support.\n\n## Instance Method Details\n\n### \\#add_project_module(controller) ⇒ Object\n\nAdd access_control permission in our app.rb.\n\n### \\#ext ⇒ Object\n\nTell us which rendering engine you are using.\n\n### \\#fetch_app_name(app = 'app') ⇒ String\n\nReturns the app_name for the application at root.\n\n#### Examples:\n\n``` ruby\nfetch_app_name('subapp')\n```\n\n#### Parameters:\n\n- `app` ([`String`](../../../string \"String (class)\")) *(defaults to: `'app'`)* — folder name of application.\n\n#### Returns:\n\n- ([`String`](../../../string \"String (class)\")) — module name for application.\n\n### \\#orm ⇒ Object Also known as: adapter\n\nTell us which orm we are using.\n\n### \\#remove_project_module(controller) ⇒ Object\n\nRemove from access_control permissions.\n\n### \\#supported_ext ⇒ Object\n\nTell us for now which rendering engine we support.\n\n### \\#supported_orm ⇒ Object\n\nTell us for now which orm we support\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Admin/Actions](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Admin/Actions)"
- name: Padrino::Generators::Admin::Actions#add_project_module
  id: padrino/generators/admin/actions#add_project_module-instance_method
  summary: Add access_control permission in our app.rb
  belongs_to: Padrino::Generators::Admin::Actions
  description: |-
    ### \#add_project_module(controller) ⇒ Object

    Add access_control permission in our app.rb.
- name: Padrino::Generators::Admin::Actions#ext
  id: padrino/generators/admin/actions#ext-instance_method
  summary: Tell us which rendering engine you are using
  belongs_to: Padrino::Generators::Admin::Actions
  description: |-
    ### \#ext ⇒ Object

    Tell us which rendering engine you are using.
- name: Padrino::Generators::Admin::Actions#fetch_app_name
  id: padrino/generators/admin/actions#fetch_app_name-instance_method
  summary: Returns the app_name for the application at root
  belongs_to: Padrino::Generators::Admin::Actions
  description: |-
    ### \#fetch_app_name(app = 'app') ⇒ String

    Returns the app_name for the application at root.

    #### Examples:

    ``` ruby
    fetch_app_name('subapp')
    ```

    #### Parameters:

    - `app`([`String`](../../../string "String (class)"))*(defaults to: `'app'`)* — folder name of application.

    #### Returns:

    - ([`String`](../../../string "String (class)")) — module name for application.
- name: Padrino::Generators::Admin::Actions#orm
  id: padrino/generators/admin/actions#orm-instance_method
  summary: Tell us which orm we are using
  belongs_to: Padrino::Generators::Admin::Actions
  description: |-
    ### \#orm ⇒ Object Also known as: adapter

    Tell us which orm we are using.
- name: Padrino::Generators::Admin::Actions#remove_project_module
  id: padrino/generators/admin/actions#remove_project_module-instance_method
  summary: Remove from access_control permissions
  belongs_to: Padrino::Generators::Admin::Actions
  description: |-
    ### \#remove_project_module(controller) ⇒ Object

    Remove from access_control permissions.
- name: Padrino::Generators::Admin::Actions#supported_ext
  id: padrino/generators/admin/actions#supported_ext-instance_method
  summary: Tell us for now which rendering engine we support
  belongs_to: Padrino::Generators::Admin::Actions
  description: |-
    ### \#supported_ext ⇒ Object

    Tell us for now which rendering engine we support.
- name: Padrino::Generators::Admin::Actions#supported_orm
  id: padrino/generators/admin/actions#supported_orm-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Generators::Admin::Actions
  description: "### \\#supported_orm ⇒ Object\n\nTell us for now which orm we support\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Admin/Actions](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Admin/Actions)"
- name: Padrino::Generators::AdminApp
  id: padrino/generators/adminapp
  summary: Defines the generator for creating a new admin app
  description: "# Class: Padrino::Generators::AdminApp\n\nInherits:  \nThor::Group\n\n- [Object](../../object \"Object (class)\")\n- Thor::Group\n- Padrino::Generators::AdminApp\n\nIncludes:  \n[Actions](actions \"Padrino::Generators::Actions (module)\"), [Padrino::Generators::Admin::Actions](admin/actions \"Padrino::Generators::Admin::Actions (module)\"), Thor::Actions\n\n## Overview\n\nDefines the generator for creating a new admin app.\n\n## Class Method Summary\n\n- [`.`**`banner`**` ⇒ Object`](adminapp#banner-class_method \"banner (class method)\") Defines the “banner” text for the CLI.\n- [`.`**`source_root`**` ⇒ Object`](adminapp#source_root-class_method \"source_root (class method)\") Define the source template root.\n\n## Instance Method Summary\n\n- [`#`**`create_admin`**` ⇒ Object`](adminapp#create_admin-instance_method \"#create_admin (instance method)\") Copies over the Padrino base admin application.\n- [`#`**`source_paths`**` ⇒ Object`](adminapp#source_paths-instance_method \"#source_paths (instance method)\") Look for custom template files in a generators folder under the project root.\n\n### Methods included from Padrino::Generators::Admin::Actions\n\n[\\#add_project_module](admin/actions#add_project_module-instance_method \"Padrino::Generators::Admin::Actions#add_project_module (method)\"), [\\#ext](admin/actions#ext-instance_method \"Padrino::Generators::Admin::Actions#ext (method)\"), [\\#fetch_app_name](admin/actions#fetch_app_name-instance_method \"Padrino::Generators::Admin::Actions#fetch_app_name (method)\"), [\\#orm](admin/actions#orm-instance_method \"Padrino::Generators::Admin::Actions#orm (method)\"), [\\#remove_project_module](admin/actions#remove_project_module-instance_method \"Padrino::Generators::Admin::Actions#remove_project_module (method)\"), [\\#supported_ext](admin/actions#supported_ext-instance_method \"Padrino::Generators::Admin::Actions#supported_ext (method)\"), [\\#supported_orm](admin/actions#supported_orm-instance_method \"Padrino::Generators::Admin::Actions#supported_orm (method)\")\n\n### Methods included from Actions\n\n[\\#already_exists?](actions#already_exists%3F-instance_method \"Padrino::Generators::Actions#already_exists? (method)\"), [\\#app_skeleton](actions#app_skeleton-instance_method \"Padrino::Generators::Actions#app_skeleton (method)\"), [\\#apply_component_for](actions#apply_component_for-instance_method \"Padrino::Generators::Actions#apply_component_for (method)\"), [\\#apply_default_fields](actions#apply_default_fields-instance_method \"Padrino::Generators::Actions#apply_default_fields (method)\"), [\\#check_app_existence](actions#check_app_existence-instance_method \"Padrino::Generators::Actions#check_app_existence (method)\"), [\\#destination_root](actions#destination_root-instance_method \"Padrino::Generators::Actions#destination_root (method)\"), [\\#empty_directory_with_keep_file](actions#empty_directory_with_keep_file-instance_method \"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\"), [\\#execute_component_setup](actions#execute_component_setup-instance_method \"Padrino::Generators::Actions#execute_component_setup (method)\"), [\\#fetch_app_name](actions#fetch_app_name-instance_method \"Padrino::Generators::Actions#fetch_app_name (method)\"), [\\#fetch_component_choice](actions#fetch_component_choice-instance_method \"Padrino::Generators::Actions#fetch_component_choice (method)\"), [\\#fetch_project_name](actions#fetch_project_name-instance_method \"Padrino::Generators::Actions#fetch_project_name (method)\"), [\\#in_app_root?](actions#in_app_root%3F-instance_method \"Padrino::Generators::Actions#in_app_root? (method)\"), [\\#include_component_module_for](actions#include_component_module_for-instance_method \"Padrino::Generators::Actions#include_component_module_for (method)\"), [\\#initializer](actions#initializer-instance_method \"Padrino::Generators::Actions#initializer (method)\"), [\\#inject_into_file](actions#inject_into_file-instance_method \"Padrino::Generators::Actions#inject_into_file (method)\"), [\\#insert_hook](actions#insert_hook-instance_method \"Padrino::Generators::Actions#insert_hook (method)\"), [\\#insert_into_gemfile](actions#insert_into_gemfile-instance_method \"Padrino::Generators::Actions#insert_into_gemfile (method)\"), [\\#insert_middleware](actions#insert_middleware-instance_method \"Padrino::Generators::Actions#insert_middleware (method)\"), [\\#invalid_fields](actions#invalid_fields-instance_method \"Padrino::Generators::Actions#invalid_fields (method)\"), [\\#keep_file](actions#keep_file-instance_method \"Padrino::Generators::Actions#keep_file (method)\"), [\\#middleware](actions#middleware-instance_method \"Padrino::Generators::Actions#middleware (method)\"), [\\#recognize_path](actions#recognize_path-instance_method \"Padrino::Generators::Actions#recognize_path (method)\"), [\\#require_contrib](actions#require_contrib-instance_method \"Padrino::Generators::Actions#require_contrib (method)\"), [\\#require_dependencies](actions#require_dependencies-instance_method \"Padrino::Generators::Actions#require_dependencies (method)\"), [\\#resolve_valid_choice](actions#resolve_valid_choice-instance_method \"Padrino::Generators::Actions#resolve_valid_choice (method)\"), [\\#retrieve_component_config](actions#retrieve_component_config-instance_method \"Padrino::Generators::Actions#retrieve_component_config (method)\"), [\\#run_bundler](actions#run_bundler-instance_method \"Padrino::Generators::Actions#run_bundler (method)\"), [\\#store_component_choice](actions#store_component_choice-instance_method \"Padrino::Generators::Actions#store_component_choice (method)\"), [\\#store_component_config](actions#store_component_config-instance_method \"Padrino::Generators::Actions#store_component_config (method)\"), [\\#test?](actions#test%3F-instance_method \"Padrino::Generators::Actions#test? (method)\"), [\\#tiny?](actions#tiny%3F-instance_method \"Padrino::Generators::Actions#tiny? (method)\"), [\\#valid_choice?](actions#valid_choice%3F-instance_method \"Padrino::Generators::Actions#valid_choice? (method)\"), [\\#valid_constant?](actions#valid_constant%3F-instance_method \"Padrino::Generators::Actions#valid_constant? (method)\"), [\\#validate_namespace](actions#validate_namespace-instance_method \"Padrino::Generators::Actions#validate_namespace (method)\")\n\n## Class Method Details\n\n### .banner ⇒ Object\n\nDefines the “banner” text for the CLI.\n\n### .source_root ⇒ Object\n\nDefine the source template root\n\n## Instance Method Details\n\n### \\#create_admin ⇒ Object\n\nCopies over the Padrino base admin application.\n\n### \\#source_paths ⇒ Object\n\nLook for custom template files in a generators folder under the project root.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AdminApp](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AdminApp)"
- name: Padrino::Generators::AdminApp#create_admin
  id: padrino/generators/adminapp#create_admin-instance_method
  summary: Copies over the Padrino base admin application
  belongs_to: Padrino::Generators::AdminApp
  description: |-
    ### \#create_admin ⇒ Object

    Copies over the Padrino base admin application.
- name: Padrino::Generators::AdminApp#source_paths
  id: padrino/generators/adminapp#source_paths-instance_method
  summary: Look for custom template files in a generators folder under the project root
  belongs_to: Padrino::Generators::AdminApp
  description: "### \\#source_paths ⇒ Object\n\nLook for custom template files in a generators folder under the project root.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AdminApp](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AdminApp)"
- name: Padrino::Generators::AdminApp.banner
  id: padrino/generators/adminapp#banner-class_method
  summary: Defines the “banner” text for the CLI
  belongs_to: Padrino::Generators::AdminApp
  description: |-
    ### .banner ⇒ Object

    Defines the “banner” text for the CLI.
- name: Padrino::Generators::AdminApp.source_root
  id: padrino/generators/adminapp#source_root-class_method
  summary: null
  belongs_to: Padrino::Generators::AdminApp
  description: |-
    ### .source_root ⇒ Object

    Define the source template root

    ## Instance Method Details
- name: Padrino::Generators::AdminPage
  id: padrino/generators/adminpage
  summary: Defines the generator for creating a new admin page
  description: "# Class: Padrino::Generators::AdminPage\n\nInherits:  \nThor::Group\n\n- [Object](../../object \"Object (class)\")\n- Thor::Group\n- Padrino::Generators::AdminPage\n\nIncludes:  \n[Actions](actions \"Padrino::Generators::Actions (module)\"), [Padrino::Generators::Admin::Actions](admin/actions \"Padrino::Generators::Admin::Actions (module)\"), Thor::Actions\n\n## Overview\n\nDefines the generator for creating a new admin page.\n\n## Instance Attribute Summary\n\n- [`#`**`default_orm`**` ⇒ Object`](adminpage#default_orm-instance_method \"#default_orm (instance method)\") Returns the value of attribute default_orm.\n\n## Class Method Summary\n\n- [`.`**`banner`**` ⇒ Object`](adminpage#banner-class_method \"banner (class method)\") Defines the “banner” text for the CLI.\n- [`.`**`source_root`**` ⇒ Object`](adminpage#source_root-class_method \"source_root (class method)\") Define the source template root.\n\n## Instance Method Summary\n\n- [`#`**`create_controller`**` ⇒ Object`](adminpage#create_controller-instance_method \"#create_controller (instance method)\") Create controller for admin.\n- [`#`**`source_paths`**` ⇒ Object`](adminpage#source_paths-instance_method \"#source_paths (instance method)\") Look for custom template files in a generators folder under the project root.\n\n### Methods included from Padrino::Generators::Admin::Actions\n\n[\\#add_project_module](admin/actions#add_project_module-instance_method \"Padrino::Generators::Admin::Actions#add_project_module (method)\"), [\\#ext](admin/actions#ext-instance_method \"Padrino::Generators::Admin::Actions#ext (method)\"), [\\#fetch_app_name](admin/actions#fetch_app_name-instance_method \"Padrino::Generators::Admin::Actions#fetch_app_name (method)\"), [\\#orm](admin/actions#orm-instance_method \"Padrino::Generators::Admin::Actions#orm (method)\"), [\\#remove_project_module](admin/actions#remove_project_module-instance_method \"Padrino::Generators::Admin::Actions#remove_project_module (method)\"), [\\#supported_ext](admin/actions#supported_ext-instance_method \"Padrino::Generators::Admin::Actions#supported_ext (method)\"), [\\#supported_orm](admin/actions#supported_orm-instance_method \"Padrino::Generators::Admin::Actions#supported_orm (method)\")\n\n### Methods included from Actions\n\n[\\#already_exists?](actions#already_exists%3F-instance_method \"Padrino::Generators::Actions#already_exists? (method)\"), [\\#app_skeleton](actions#app_skeleton-instance_method \"Padrino::Generators::Actions#app_skeleton (method)\"), [\\#apply_component_for](actions#apply_component_for-instance_method \"Padrino::Generators::Actions#apply_component_for (method)\"), [\\#apply_default_fields](actions#apply_default_fields-instance_method \"Padrino::Generators::Actions#apply_default_fields (method)\"), [\\#check_app_existence](actions#check_app_existence-instance_method \"Padrino::Generators::Actions#check_app_existence (method)\"), [\\#destination_root](actions#destination_root-instance_method \"Padrino::Generators::Actions#destination_root (method)\"), [\\#empty_directory_with_keep_file](actions#empty_directory_with_keep_file-instance_method \"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\"), [\\#execute_component_setup](actions#execute_component_setup-instance_method \"Padrino::Generators::Actions#execute_component_setup (method)\"), [\\#fetch_app_name](actions#fetch_app_name-instance_method \"Padrino::Generators::Actions#fetch_app_name (method)\"), [\\#fetch_component_choice](actions#fetch_component_choice-instance_method \"Padrino::Generators::Actions#fetch_component_choice (method)\"), [\\#fetch_project_name](actions#fetch_project_name-instance_method \"Padrino::Generators::Actions#fetch_project_name (method)\"), [\\#in_app_root?](actions#in_app_root%3F-instance_method \"Padrino::Generators::Actions#in_app_root? (method)\"), [\\#include_component_module_for](actions#include_component_module_for-instance_method \"Padrino::Generators::Actions#include_component_module_for (method)\"), [\\#initializer](actions#initializer-instance_method \"Padrino::Generators::Actions#initializer (method)\"), [\\#inject_into_file](actions#inject_into_file-instance_method \"Padrino::Generators::Actions#inject_into_file (method)\"), [\\#insert_hook](actions#insert_hook-instance_method \"Padrino::Generators::Actions#insert_hook (method)\"), [\\#insert_into_gemfile](actions#insert_into_gemfile-instance_method \"Padrino::Generators::Actions#insert_into_gemfile (method)\"), [\\#insert_middleware](actions#insert_middleware-instance_method \"Padrino::Generators::Actions#insert_middleware (method)\"), [\\#invalid_fields](actions#invalid_fields-instance_method \"Padrino::Generators::Actions#invalid_fields (method)\"), [\\#keep_file](actions#keep_file-instance_method \"Padrino::Generators::Actions#keep_file (method)\"), [\\#middleware](actions#middleware-instance_method \"Padrino::Generators::Actions#middleware (method)\"), [\\#recognize_path](actions#recognize_path-instance_method \"Padrino::Generators::Actions#recognize_path (method)\"), [\\#require_contrib](actions#require_contrib-instance_method \"Padrino::Generators::Actions#require_contrib (method)\"), [\\#require_dependencies](actions#require_dependencies-instance_method \"Padrino::Generators::Actions#require_dependencies (method)\"), [\\#resolve_valid_choice](actions#resolve_valid_choice-instance_method \"Padrino::Generators::Actions#resolve_valid_choice (method)\"), [\\#retrieve_component_config](actions#retrieve_component_config-instance_method \"Padrino::Generators::Actions#retrieve_component_config (method)\"), [\\#run_bundler](actions#run_bundler-instance_method \"Padrino::Generators::Actions#run_bundler (method)\"), [\\#store_component_choice](actions#store_component_choice-instance_method \"Padrino::Generators::Actions#store_component_choice (method)\"), [\\#store_component_config](actions#store_component_config-instance_method \"Padrino::Generators::Actions#store_component_config (method)\"), [\\#test?](actions#test%3F-instance_method \"Padrino::Generators::Actions#test? (method)\"), [\\#tiny?](actions#tiny%3F-instance_method \"Padrino::Generators::Actions#tiny? (method)\"), [\\#valid_choice?](actions#valid_choice%3F-instance_method \"Padrino::Generators::Actions#valid_choice? (method)\"), [\\#valid_constant?](actions#valid_constant%3F-instance_method \"Padrino::Generators::Actions#valid_constant? (method)\"), [\\#validate_namespace](actions#validate_namespace-instance_method \"Padrino::Generators::Actions#validate_namespace (method)\")\n\n## Instance Attribute Details\n\n### \\#default_orm ⇒ Object\n\nReturns the value of attribute default_orm\n\n## Class Method Details\n\n### .banner ⇒ Object\n\nDefines the “banner” text for the CLI.\n\n### .source_root ⇒ Object\n\nDefine the source template root.\n\n## Instance Method Details\n\n### \\#create_controller ⇒ Object\n\nCreate controller for admin.\n\n### \\#source_paths ⇒ Object\n\nLook for custom template files in a generators folder under the project root.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AdminPage](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AdminPage)"
- name: Padrino::Generators::AdminPage#create_controller
  id: padrino/generators/adminpage#create_controller-instance_method
  summary: Create controller for admin
  belongs_to: Padrino::Generators::AdminPage
  description: |-
    ### \#create_controller ⇒ Object

    Create controller for admin.
- name: Padrino::Generators::AdminPage#default_orm
  id: padrino/generators/adminpage#default_orm-instance_method
  summary: null
  belongs_to: Padrino::Generators::AdminPage
  description: |-
    ### \#default_orm ⇒ Object

    Returns the value of attribute default_orm

    ## Class Method Details
- name: Padrino::Generators::AdminPage#source_paths
  id: padrino/generators/adminpage#source_paths-instance_method
  summary: Look for custom template files in a generators folder under the project root
  belongs_to: Padrino::Generators::AdminPage
  description: "### \\#source_paths ⇒ Object\n\nLook for custom template files in a generators folder under the project root.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AdminPage](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AdminPage)"
- name: Padrino::Generators::AdminPage.banner
  id: padrino/generators/adminpage#banner-class_method
  summary: Defines the “banner” text for the CLI
  belongs_to: Padrino::Generators::AdminPage
  description: |-
    ### .banner ⇒ Object

    Defines the “banner” text for the CLI.
- name: Padrino::Generators::AdminPage.source_root
  id: padrino/generators/adminpage#source_root-class_method
  summary: Define the source template root
  belongs_to: Padrino::Generators::AdminPage
  description: |-
    ### .source_root ⇒ Object

    Define the source template root.

    ## Instance Method Details
- name: Padrino::Generators::App
  id: padrino/generators/app
  summary: Responsible for applications within a Padrino project
  description: "# Class: Padrino::Generators::App\n\nInherits:  \nThor::Group\n\n- [Object](../../object \"Object (class)\")\n- Thor::Group\n- Padrino::Generators::App\n\nIncludes:  \n[Actions](actions \"Padrino::Generators::Actions (module)\"), Thor::Actions\n\n## Overview\n\nResponsible for applications within a Padrino project. Creates and mounts the application and gives the user related information.\n\n## Class Method Summary\n\n- [`.`**`banner`**` ⇒ Object`](app#banner-class_method \"banner (class method)\")\n- [`.`**`source_root`**` ⇒ Object`](app#source_root-class_method \"source_root (class method)\")\n\n## Instance Method Summary\n\n- [`#`**`create_app`**` ⇒ Object`](app#create_app-instance_method \"#create_app (instance method)\") Copies over the Padrino base admin application.\n\n### Methods included from Actions\n\n[\\#already_exists?](actions#already_exists%3F-instance_method \"Padrino::Generators::Actions#already_exists? (method)\"), [\\#app_skeleton](actions#app_skeleton-instance_method \"Padrino::Generators::Actions#app_skeleton (method)\"), [\\#apply_component_for](actions#apply_component_for-instance_method \"Padrino::Generators::Actions#apply_component_for (method)\"), [\\#apply_default_fields](actions#apply_default_fields-instance_method \"Padrino::Generators::Actions#apply_default_fields (method)\"), [\\#check_app_existence](actions#check_app_existence-instance_method \"Padrino::Generators::Actions#check_app_existence (method)\"), [\\#destination_root](actions#destination_root-instance_method \"Padrino::Generators::Actions#destination_root (method)\"), [\\#empty_directory_with_keep_file](actions#empty_directory_with_keep_file-instance_method \"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\"), [\\#execute_component_setup](actions#execute_component_setup-instance_method \"Padrino::Generators::Actions#execute_component_setup (method)\"), [\\#fetch_app_name](actions#fetch_app_name-instance_method \"Padrino::Generators::Actions#fetch_app_name (method)\"), [\\#fetch_component_choice](actions#fetch_component_choice-instance_method \"Padrino::Generators::Actions#fetch_component_choice (method)\"), [\\#fetch_project_name](actions#fetch_project_name-instance_method \"Padrino::Generators::Actions#fetch_project_name (method)\"), [\\#in_app_root?](actions#in_app_root%3F-instance_method \"Padrino::Generators::Actions#in_app_root? (method)\"), [\\#include_component_module_for](actions#include_component_module_for-instance_method \"Padrino::Generators::Actions#include_component_module_for (method)\"), [\\#initializer](actions#initializer-instance_method \"Padrino::Generators::Actions#initializer (method)\"), [\\#inject_into_file](actions#inject_into_file-instance_method \"Padrino::Generators::Actions#inject_into_file (method)\"), [\\#insert_hook](actions#insert_hook-instance_method \"Padrino::Generators::Actions#insert_hook (method)\"), [\\#insert_into_gemfile](actions#insert_into_gemfile-instance_method \"Padrino::Generators::Actions#insert_into_gemfile (method)\"), [\\#insert_middleware](actions#insert_middleware-instance_method \"Padrino::Generators::Actions#insert_middleware (method)\"), [\\#invalid_fields](actions#invalid_fields-instance_method \"Padrino::Generators::Actions#invalid_fields (method)\"), [\\#keep_file](actions#keep_file-instance_method \"Padrino::Generators::Actions#keep_file (method)\"), [\\#middleware](actions#middleware-instance_method \"Padrino::Generators::Actions#middleware (method)\"), [\\#recognize_path](actions#recognize_path-instance_method \"Padrino::Generators::Actions#recognize_path (method)\"), [\\#require_contrib](actions#require_contrib-instance_method \"Padrino::Generators::Actions#require_contrib (method)\"), [\\#require_dependencies](actions#require_dependencies-instance_method \"Padrino::Generators::Actions#require_dependencies (method)\"), [\\#resolve_valid_choice](actions#resolve_valid_choice-instance_method \"Padrino::Generators::Actions#resolve_valid_choice (method)\"), [\\#retrieve_component_config](actions#retrieve_component_config-instance_method \"Padrino::Generators::Actions#retrieve_component_config (method)\"), [\\#run_bundler](actions#run_bundler-instance_method \"Padrino::Generators::Actions#run_bundler (method)\"), [\\#store_component_choice](actions#store_component_choice-instance_method \"Padrino::Generators::Actions#store_component_choice (method)\"), [\\#store_component_config](actions#store_component_config-instance_method \"Padrino::Generators::Actions#store_component_config (method)\"), [\\#test?](actions#test%3F-instance_method \"Padrino::Generators::Actions#test? (method)\"), [\\#tiny?](actions#tiny%3F-instance_method \"Padrino::Generators::Actions#tiny? (method)\"), [\\#valid_choice?](actions#valid_choice%3F-instance_method \"Padrino::Generators::Actions#valid_choice? (method)\"), [\\#valid_constant?](actions#valid_constant%3F-instance_method \"Padrino::Generators::Actions#valid_constant? (method)\"), [\\#validate_namespace](actions#validate_namespace-instance_method \"Padrino::Generators::Actions#validate_namespace (method)\")\n\n## Class Method Details\n\n### .banner ⇒ Object\n\n### .source_root ⇒ Object\n\n## Instance Method Details\n\n### \\#create_app ⇒ Object\n\nCopies over the Padrino base admin application.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/App](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/App)"
- name: Padrino::Generators::App#create_app
  id: padrino/generators/app#create_app-instance_method
  summary: Copies over the Padrino base admin application
  belongs_to: Padrino::Generators::App
  description: "### \\#create_app ⇒ Object\n\nCopies over the Padrino base admin application.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/App](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/App)"
- name: Padrino::Generators::App.banner
  id: padrino/generators/app#banner-class_method
  summary: null
  belongs_to: Padrino::Generators::App
  description: '### .banner ⇒ Object'
- name: Padrino::Generators::App.source_root
  id: padrino/generators/app#source_root-class_method
  summary: null
  belongs_to: Padrino::Generators::App
  description: |-
    ### .source_root ⇒ Object

    ## Instance Method Details
- name: Padrino::Generators::AppRootNotFound
  id: padrino/generators/approotnotfound
  summary: Raised when an application does not have a resolved root path
  description: "# Exception: Padrino::Generators::AppRootNotFound\n\nInherits:  \nRuntimeError\n\n- [Object](../../object \"Object (class)\")\n- RuntimeError\n- Padrino::Generators::AppRootNotFound\n\n## Overview\n\nRaised when an application does not have a resolved root path.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AppRootNotFound](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AppRootNotFound)"
- name: Padrino::Generators::Cli
  id: padrino/generators/cli
  summary: This class bootstrap config/boot and perform Padrino::Generators.load_components! for handle 3rd party generators
  description: "# Class: Padrino::Generators::Cli\n\nInherits:  \nThor::Group\n\n- [Object](../../object \"Object (class)\")\n- Thor::Group\n- Padrino::Generators::Cli\n\nIncludes:  \nThor::Actions\n\n## Overview\n\nThis class bootstrap `config/boot` and perform `Padrino::Generators.load_components!` for handle 3rd party generators.\n\n## Instance Method Summary\n\n- [`#`**`load_boot`**` ⇒ Object`](cli#load_boot-instance_method \"#load_boot (instance method)\") We need to try to load boot because some of our app dependencies maybe have custom generators, so is necessary know who are.\n- [`#`**`setup`**` ⇒ Object`](cli#setup-instance_method \"#setup (instance method)\") Loads the components available for all generators.\n\n## Instance Method Details\n\n### \\#load_boot ⇒ Object\n\nWe need to try to load boot because some of our app dependencies maybe have custom generators, so is necessary know who are.\n\n### \\#setup ⇒ Object\n\nLoads the components available for all generators.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Cli](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Cli)"
- name: Padrino::Generators::Cli#load_boot
  id: padrino/generators/cli#load_boot-instance_method
  summary: We need to try to load boot because some of our app dependencies maybe have custom generators, so is necessary know who are
  belongs_to: Padrino::Generators::Cli
  description: |-
    ### \#load_boot ⇒ Object

    We need to try to load boot because some of our app dependencies maybe have custom generators, so is necessary know who are.
- name: Padrino::Generators::Cli#setup
  id: padrino/generators/cli#setup-instance_method
  summary: Loads the components available for all generators
  belongs_to: Padrino::Generators::Cli
  description: "### \\#setup ⇒ Object\n\nLoads the components available for all generators.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Cli](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Cli)"
- name: Padrino::Generators::Component
  id: padrino/generators/component
  summary: Responsible for add components within a Padrino project
  description: "# Class: Padrino::Generators::Component\n\nInherits:  \nThor::Group\n\n- [Object](../../object \"Object (class)\")\n- Thor::Group\n- Padrino::Generators::Component\n\nIncludes:  \n[Actions](actions \"Padrino::Generators::Actions (module)\"), Padrino::Generators::Components::Actions, Thor::Actions\n\n## Overview\n\nResponsible for add components within a Padrino project.\n\n## Class Method Summary\n\n- [`.`**`banner`**` ⇒ Object`](component#banner-class_method \"banner (class method)\")\n- [`.`**`source_root`**` ⇒ Object`](component#source_root-class_method \"source_root (class method)\")\n\n## Instance Method Summary\n\n- [`#`**`setup_components`**` ⇒ Object`](component#setup_components-instance_method \"#setup_components (instance method)\") For each component, retrieve a valid choice and then execute the associated generator.\n\n### Methods included from Actions\n\n[\\#already_exists?](actions#already_exists%3F-instance_method \"Padrino::Generators::Actions#already_exists? (method)\"), [\\#app_skeleton](actions#app_skeleton-instance_method \"Padrino::Generators::Actions#app_skeleton (method)\"), [\\#apply_component_for](actions#apply_component_for-instance_method \"Padrino::Generators::Actions#apply_component_for (method)\"), [\\#apply_default_fields](actions#apply_default_fields-instance_method \"Padrino::Generators::Actions#apply_default_fields (method)\"), [\\#check_app_existence](actions#check_app_existence-instance_method \"Padrino::Generators::Actions#check_app_existence (method)\"), [\\#destination_root](actions#destination_root-instance_method \"Padrino::Generators::Actions#destination_root (method)\"), [\\#empty_directory_with_keep_file](actions#empty_directory_with_keep_file-instance_method \"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\"), [\\#execute_component_setup](actions#execute_component_setup-instance_method \"Padrino::Generators::Actions#execute_component_setup (method)\"), [\\#fetch_app_name](actions#fetch_app_name-instance_method \"Padrino::Generators::Actions#fetch_app_name (method)\"), [\\#fetch_component_choice](actions#fetch_component_choice-instance_method \"Padrino::Generators::Actions#fetch_component_choice (method)\"), [\\#fetch_project_name](actions#fetch_project_name-instance_method \"Padrino::Generators::Actions#fetch_project_name (method)\"), [\\#in_app_root?](actions#in_app_root%3F-instance_method \"Padrino::Generators::Actions#in_app_root? (method)\"), [\\#include_component_module_for](actions#include_component_module_for-instance_method \"Padrino::Generators::Actions#include_component_module_for (method)\"), [\\#initializer](actions#initializer-instance_method \"Padrino::Generators::Actions#initializer (method)\"), [\\#inject_into_file](actions#inject_into_file-instance_method \"Padrino::Generators::Actions#inject_into_file (method)\"), [\\#insert_hook](actions#insert_hook-instance_method \"Padrino::Generators::Actions#insert_hook (method)\"), [\\#insert_into_gemfile](actions#insert_into_gemfile-instance_method \"Padrino::Generators::Actions#insert_into_gemfile (method)\"), [\\#insert_middleware](actions#insert_middleware-instance_method \"Padrino::Generators::Actions#insert_middleware (method)\"), [\\#invalid_fields](actions#invalid_fields-instance_method \"Padrino::Generators::Actions#invalid_fields (method)\"), [\\#keep_file](actions#keep_file-instance_method \"Padrino::Generators::Actions#keep_file (method)\"), [\\#middleware](actions#middleware-instance_method \"Padrino::Generators::Actions#middleware (method)\"), [\\#recognize_path](actions#recognize_path-instance_method \"Padrino::Generators::Actions#recognize_path (method)\"), [\\#require_contrib](actions#require_contrib-instance_method \"Padrino::Generators::Actions#require_contrib (method)\"), [\\#require_dependencies](actions#require_dependencies-instance_method \"Padrino::Generators::Actions#require_dependencies (method)\"), [\\#resolve_valid_choice](actions#resolve_valid_choice-instance_method \"Padrino::Generators::Actions#resolve_valid_choice (method)\"), [\\#retrieve_component_config](actions#retrieve_component_config-instance_method \"Padrino::Generators::Actions#retrieve_component_config (method)\"), [\\#run_bundler](actions#run_bundler-instance_method \"Padrino::Generators::Actions#run_bundler (method)\"), [\\#store_component_choice](actions#store_component_choice-instance_method \"Padrino::Generators::Actions#store_component_choice (method)\"), [\\#store_component_config](actions#store_component_config-instance_method \"Padrino::Generators::Actions#store_component_config (method)\"), [\\#test?](actions#test%3F-instance_method \"Padrino::Generators::Actions#test? (method)\"), [\\#tiny?](actions#tiny%3F-instance_method \"Padrino::Generators::Actions#tiny? (method)\"), [\\#valid_choice?](actions#valid_choice%3F-instance_method \"Padrino::Generators::Actions#valid_choice? (method)\"), [\\#valid_constant?](actions#valid_constant%3F-instance_method \"Padrino::Generators::Actions#valid_constant? (method)\"), [\\#validate_namespace](actions#validate_namespace-instance_method \"Padrino::Generators::Actions#validate_namespace (method)\")\n\n## Class Method Details\n\n### .banner ⇒ Object\n\n### .source_root ⇒ Object\n\n## Instance Method Details\n\n### \\#setup_components ⇒ Object\n\nFor each component, retrieve a valid choice and then execute the associated generator.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Component](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Component)"
- name: Padrino::Generators::Component#setup_components
  id: padrino/generators/component#setup_components-instance_method
  summary: For each component, retrieve a valid choice and then execute the associated generator
  belongs_to: Padrino::Generators::Component
  description: "### \\#setup_components ⇒ Object\n\nFor each component, retrieve a valid choice and then execute the associated generator.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Component](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Component)"
- name: Padrino::Generators::Component.banner
  id: padrino/generators/component#banner-class_method
  summary: null
  belongs_to: Padrino::Generators::Component
  description: '### .banner ⇒ Object'
- name: Padrino::Generators::Component.source_root
  id: padrino/generators/component#source_root-class_method
  summary: null
  belongs_to: Padrino::Generators::Component
  description: |-
    ### .source_root ⇒ Object

    ## Instance Method Details
- name: Padrino::Generators::Controller
  id: padrino/generators/controller
  summary: Responsible for generating route controllers and associated tests within a Padrino application
  description: "# Class: Padrino::Generators::Controller\n\nInherits:  \nThor::Group\n\n- [Object](../../object \"Object (class)\")\n- Thor::Group\n- Padrino::Generators::Controller\n\nIncludes:  \n[Actions](actions \"Padrino::Generators::Actions (module)\"), Padrino::Generators::Components::Actions, Thor::Actions\n\n## Overview\n\nResponsible for generating route controllers and associated tests within a Padrino application.\n\n## Class Method Summary\n\n- [`.`**`banner`**` ⇒ Object`](controller#banner-class_method \"banner (class method)\")\n- [`.`**`source_root`**` ⇒ Object`](controller#source_root-class_method \"source_root (class method)\")\n\n## Instance Method Summary\n\n- [`#`**`create_controller`**` ⇒ Object`](controller#create_controller-instance_method \"#create_controller (instance method)\") Execute controller generation.\n\n### Methods included from Actions\n\n[\\#already_exists?](actions#already_exists%3F-instance_method \"Padrino::Generators::Actions#already_exists? (method)\"), [\\#app_skeleton](actions#app_skeleton-instance_method \"Padrino::Generators::Actions#app_skeleton (method)\"), [\\#apply_component_for](actions#apply_component_for-instance_method \"Padrino::Generators::Actions#apply_component_for (method)\"), [\\#apply_default_fields](actions#apply_default_fields-instance_method \"Padrino::Generators::Actions#apply_default_fields (method)\"), [\\#check_app_existence](actions#check_app_existence-instance_method \"Padrino::Generators::Actions#check_app_existence (method)\"), [\\#destination_root](actions#destination_root-instance_method \"Padrino::Generators::Actions#destination_root (method)\"), [\\#empty_directory_with_keep_file](actions#empty_directory_with_keep_file-instance_method \"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\"), [\\#execute_component_setup](actions#execute_component_setup-instance_method \"Padrino::Generators::Actions#execute_component_setup (method)\"), [\\#fetch_app_name](actions#fetch_app_name-instance_method \"Padrino::Generators::Actions#fetch_app_name (method)\"), [\\#fetch_component_choice](actions#fetch_component_choice-instance_method \"Padrino::Generators::Actions#fetch_component_choice (method)\"), [\\#fetch_project_name](actions#fetch_project_name-instance_method \"Padrino::Generators::Actions#fetch_project_name (method)\"), [\\#in_app_root?](actions#in_app_root%3F-instance_method \"Padrino::Generators::Actions#in_app_root? (method)\"), [\\#include_component_module_for](actions#include_component_module_for-instance_method \"Padrino::Generators::Actions#include_component_module_for (method)\"), [\\#initializer](actions#initializer-instance_method \"Padrino::Generators::Actions#initializer (method)\"), [\\#inject_into_file](actions#inject_into_file-instance_method \"Padrino::Generators::Actions#inject_into_file (method)\"), [\\#insert_hook](actions#insert_hook-instance_method \"Padrino::Generators::Actions#insert_hook (method)\"), [\\#insert_into_gemfile](actions#insert_into_gemfile-instance_method \"Padrino::Generators::Actions#insert_into_gemfile (method)\"), [\\#insert_middleware](actions#insert_middleware-instance_method \"Padrino::Generators::Actions#insert_middleware (method)\"), [\\#invalid_fields](actions#invalid_fields-instance_method \"Padrino::Generators::Actions#invalid_fields (method)\"), [\\#keep_file](actions#keep_file-instance_method \"Padrino::Generators::Actions#keep_file (method)\"), [\\#middleware](actions#middleware-instance_method \"Padrino::Generators::Actions#middleware (method)\"), [\\#recognize_path](actions#recognize_path-instance_method \"Padrino::Generators::Actions#recognize_path (method)\"), [\\#require_contrib](actions#require_contrib-instance_method \"Padrino::Generators::Actions#require_contrib (method)\"), [\\#require_dependencies](actions#require_dependencies-instance_method \"Padrino::Generators::Actions#require_dependencies (method)\"), [\\#resolve_valid_choice](actions#resolve_valid_choice-instance_method \"Padrino::Generators::Actions#resolve_valid_choice (method)\"), [\\#retrieve_component_config](actions#retrieve_component_config-instance_method \"Padrino::Generators::Actions#retrieve_component_config (method)\"), [\\#run_bundler](actions#run_bundler-instance_method \"Padrino::Generators::Actions#run_bundler (method)\"), [\\#store_component_choice](actions#store_component_choice-instance_method \"Padrino::Generators::Actions#store_component_choice (method)\"), [\\#store_component_config](actions#store_component_config-instance_method \"Padrino::Generators::Actions#store_component_config (method)\"), [\\#test?](actions#test%3F-instance_method \"Padrino::Generators::Actions#test? (method)\"), [\\#tiny?](actions#tiny%3F-instance_method \"Padrino::Generators::Actions#tiny? (method)\"), [\\#valid_choice?](actions#valid_choice%3F-instance_method \"Padrino::Generators::Actions#valid_choice? (method)\"), [\\#valid_constant?](actions#valid_constant%3F-instance_method \"Padrino::Generators::Actions#valid_constant? (method)\"), [\\#validate_namespace](actions#validate_namespace-instance_method \"Padrino::Generators::Actions#validate_namespace (method)\")\n\n## Class Method Details\n\n### .banner ⇒ Object\n\n### .source_root ⇒ Object\n\n## Instance Method Details\n\n### \\#create_controller ⇒ Object\n\nExecute controller generation\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Controller](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Controller)"
- name: Padrino::Generators::Controller#create_controller
  id: padrino/generators/controller#create_controller-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Generators::Controller
  description: "### \\#create_controller ⇒ Object\n\nExecute controller generation\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Controller](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Controller)"
- name: Padrino::Generators::Controller.banner
  id: padrino/generators/controller#banner-class_method
  summary: null
  belongs_to: Padrino::Generators::Controller
  description: '### .banner ⇒ Object'
- name: Padrino::Generators::Controller.source_root
  id: padrino/generators/controller#source_root-class_method
  summary: null
  belongs_to: Padrino::Generators::Controller
  description: |-
    ### .source_root ⇒ Object

    ## Instance Method Details
- name: Padrino::Generators::Helper
  id: padrino/generators/helper
  summary: Responsible for generating route helpers and associated tests within a Padrino application
  description: "# Class: Padrino::Generators::Helper\n\nInherits:  \nThor::Group\n\n- [Object](../../object \"Object (class)\")\n- Thor::Group\n- Padrino::Generators::Helper\n\nIncludes:  \n[Actions](actions \"Padrino::Generators::Actions (module)\"), Components::Actions, Thor::Actions\n\n## Overview\n\nResponsible for generating route helpers and associated tests within a Padrino application.\n\n## Class Method Summary\n\n- [`.`**`banner`**` ⇒ Object`](helper#banner-class_method \"banner (class method)\")\n- [`.`**`source_root`**` ⇒ Object`](helper#source_root-class_method \"source_root (class method)\")\n\n## Instance Method Summary\n\n- [`#`**`create_helper`**` ⇒ Object`](helper#create_helper-instance_method \"#create_helper (instance method)\") Execute helper generation.\n\n### Methods included from Actions\n\n[\\#already_exists?](actions#already_exists%3F-instance_method \"Padrino::Generators::Actions#already_exists? (method)\"), [\\#app_skeleton](actions#app_skeleton-instance_method \"Padrino::Generators::Actions#app_skeleton (method)\"), [\\#apply_component_for](actions#apply_component_for-instance_method \"Padrino::Generators::Actions#apply_component_for (method)\"), [\\#apply_default_fields](actions#apply_default_fields-instance_method \"Padrino::Generators::Actions#apply_default_fields (method)\"), [\\#check_app_existence](actions#check_app_existence-instance_method \"Padrino::Generators::Actions#check_app_existence (method)\"), [\\#destination_root](actions#destination_root-instance_method \"Padrino::Generators::Actions#destination_root (method)\"), [\\#empty_directory_with_keep_file](actions#empty_directory_with_keep_file-instance_method \"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\"), [\\#execute_component_setup](actions#execute_component_setup-instance_method \"Padrino::Generators::Actions#execute_component_setup (method)\"), [\\#fetch_app_name](actions#fetch_app_name-instance_method \"Padrino::Generators::Actions#fetch_app_name (method)\"), [\\#fetch_component_choice](actions#fetch_component_choice-instance_method \"Padrino::Generators::Actions#fetch_component_choice (method)\"), [\\#fetch_project_name](actions#fetch_project_name-instance_method \"Padrino::Generators::Actions#fetch_project_name (method)\"), [\\#in_app_root?](actions#in_app_root%3F-instance_method \"Padrino::Generators::Actions#in_app_root? (method)\"), [\\#include_component_module_for](actions#include_component_module_for-instance_method \"Padrino::Generators::Actions#include_component_module_for (method)\"), [\\#initializer](actions#initializer-instance_method \"Padrino::Generators::Actions#initializer (method)\"), [\\#inject_into_file](actions#inject_into_file-instance_method \"Padrino::Generators::Actions#inject_into_file (method)\"), [\\#insert_hook](actions#insert_hook-instance_method \"Padrino::Generators::Actions#insert_hook (method)\"), [\\#insert_into_gemfile](actions#insert_into_gemfile-instance_method \"Padrino::Generators::Actions#insert_into_gemfile (method)\"), [\\#insert_middleware](actions#insert_middleware-instance_method \"Padrino::Generators::Actions#insert_middleware (method)\"), [\\#invalid_fields](actions#invalid_fields-instance_method \"Padrino::Generators::Actions#invalid_fields (method)\"), [\\#keep_file](actions#keep_file-instance_method \"Padrino::Generators::Actions#keep_file (method)\"), [\\#middleware](actions#middleware-instance_method \"Padrino::Generators::Actions#middleware (method)\"), [\\#recognize_path](actions#recognize_path-instance_method \"Padrino::Generators::Actions#recognize_path (method)\"), [\\#require_contrib](actions#require_contrib-instance_method \"Padrino::Generators::Actions#require_contrib (method)\"), [\\#require_dependencies](actions#require_dependencies-instance_method \"Padrino::Generators::Actions#require_dependencies (method)\"), [\\#resolve_valid_choice](actions#resolve_valid_choice-instance_method \"Padrino::Generators::Actions#resolve_valid_choice (method)\"), [\\#retrieve_component_config](actions#retrieve_component_config-instance_method \"Padrino::Generators::Actions#retrieve_component_config (method)\"), [\\#run_bundler](actions#run_bundler-instance_method \"Padrino::Generators::Actions#run_bundler (method)\"), [\\#store_component_choice](actions#store_component_choice-instance_method \"Padrino::Generators::Actions#store_component_choice (method)\"), [\\#store_component_config](actions#store_component_config-instance_method \"Padrino::Generators::Actions#store_component_config (method)\"), [\\#test?](actions#test%3F-instance_method \"Padrino::Generators::Actions#test? (method)\"), [\\#tiny?](actions#tiny%3F-instance_method \"Padrino::Generators::Actions#tiny? (method)\"), [\\#valid_choice?](actions#valid_choice%3F-instance_method \"Padrino::Generators::Actions#valid_choice? (method)\"), [\\#valid_constant?](actions#valid_constant%3F-instance_method \"Padrino::Generators::Actions#valid_constant? (method)\"), [\\#validate_namespace](actions#validate_namespace-instance_method \"Padrino::Generators::Actions#validate_namespace (method)\")\n\n## Class Method Details\n\n### .banner ⇒ Object\n\n### .source_root ⇒ Object\n\n## Instance Method Details\n\n### \\#create_helper ⇒ Object\n\nExecute helper generation\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Helper](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Helper)"
- name: Padrino::Generators::Helper#create_helper
  id: padrino/generators/helper#create_helper-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Generators::Helper
  description: "### \\#create_helper ⇒ Object\n\nExecute helper generation\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Helper](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Helper)"
- name: Padrino::Generators::Helper.banner
  id: padrino/generators/helper#banner-class_method
  summary: null
  belongs_to: Padrino::Generators::Helper
  description: '### .banner ⇒ Object'
- name: Padrino::Generators::Helper.source_root
  id: padrino/generators/helper#source_root-class_method
  summary: null
  belongs_to: Padrino::Generators::Helper
  description: |-
    ### .source_root ⇒ Object

    ## Instance Method Details
- name: Padrino::Generators::Mailer
  id: padrino/generators/mailer
  summary: Responsible for the generating mailers and message definitions
  description: "# Class: Padrino::Generators::Mailer\n\nInherits:  \nThor::Group\n\n- [Object](../../object \"Object (class)\")\n- Thor::Group\n- Padrino::Generators::Mailer\n\nIncludes:  \n[Actions](actions \"Padrino::Generators::Actions (module)\"), Components::Actions, Thor::Actions\n\n## Overview\n\nResponsible for the generating mailers and message definitions.\n\n## Class Method Summary\n\n- [`.`**`banner`**` ⇒ Object`](mailer#banner-class_method \"banner (class method)\")\n- [`.`**`source_root`**` ⇒ Object`](mailer#source_root-class_method \"source_root (class method)\")\n\n## Instance Method Summary\n\n- [`#`**`create_mailer`**` ⇒ Object`](mailer#create_mailer-instance_method \"#create_mailer (instance method)\") Execute mailer generation.\n\n### Methods included from Actions\n\n[\\#already_exists?](actions#already_exists%3F-instance_method \"Padrino::Generators::Actions#already_exists? (method)\"), [\\#app_skeleton](actions#app_skeleton-instance_method \"Padrino::Generators::Actions#app_skeleton (method)\"), [\\#apply_component_for](actions#apply_component_for-instance_method \"Padrino::Generators::Actions#apply_component_for (method)\"), [\\#apply_default_fields](actions#apply_default_fields-instance_method \"Padrino::Generators::Actions#apply_default_fields (method)\"), [\\#check_app_existence](actions#check_app_existence-instance_method \"Padrino::Generators::Actions#check_app_existence (method)\"), [\\#destination_root](actions#destination_root-instance_method \"Padrino::Generators::Actions#destination_root (method)\"), [\\#empty_directory_with_keep_file](actions#empty_directory_with_keep_file-instance_method \"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\"), [\\#execute_component_setup](actions#execute_component_setup-instance_method \"Padrino::Generators::Actions#execute_component_setup (method)\"), [\\#fetch_app_name](actions#fetch_app_name-instance_method \"Padrino::Generators::Actions#fetch_app_name (method)\"), [\\#fetch_component_choice](actions#fetch_component_choice-instance_method \"Padrino::Generators::Actions#fetch_component_choice (method)\"), [\\#fetch_project_name](actions#fetch_project_name-instance_method \"Padrino::Generators::Actions#fetch_project_name (method)\"), [\\#in_app_root?](actions#in_app_root%3F-instance_method \"Padrino::Generators::Actions#in_app_root? (method)\"), [\\#include_component_module_for](actions#include_component_module_for-instance_method \"Padrino::Generators::Actions#include_component_module_for (method)\"), [\\#initializer](actions#initializer-instance_method \"Padrino::Generators::Actions#initializer (method)\"), [\\#inject_into_file](actions#inject_into_file-instance_method \"Padrino::Generators::Actions#inject_into_file (method)\"), [\\#insert_hook](actions#insert_hook-instance_method \"Padrino::Generators::Actions#insert_hook (method)\"), [\\#insert_into_gemfile](actions#insert_into_gemfile-instance_method \"Padrino::Generators::Actions#insert_into_gemfile (method)\"), [\\#insert_middleware](actions#insert_middleware-instance_method \"Padrino::Generators::Actions#insert_middleware (method)\"), [\\#invalid_fields](actions#invalid_fields-instance_method \"Padrino::Generators::Actions#invalid_fields (method)\"), [\\#keep_file](actions#keep_file-instance_method \"Padrino::Generators::Actions#keep_file (method)\"), [\\#middleware](actions#middleware-instance_method \"Padrino::Generators::Actions#middleware (method)\"), [\\#recognize_path](actions#recognize_path-instance_method \"Padrino::Generators::Actions#recognize_path (method)\"), [\\#require_contrib](actions#require_contrib-instance_method \"Padrino::Generators::Actions#require_contrib (method)\"), [\\#require_dependencies](actions#require_dependencies-instance_method \"Padrino::Generators::Actions#require_dependencies (method)\"), [\\#resolve_valid_choice](actions#resolve_valid_choice-instance_method \"Padrino::Generators::Actions#resolve_valid_choice (method)\"), [\\#retrieve_component_config](actions#retrieve_component_config-instance_method \"Padrino::Generators::Actions#retrieve_component_config (method)\"), [\\#run_bundler](actions#run_bundler-instance_method \"Padrino::Generators::Actions#run_bundler (method)\"), [\\#store_component_choice](actions#store_component_choice-instance_method \"Padrino::Generators::Actions#store_component_choice (method)\"), [\\#store_component_config](actions#store_component_config-instance_method \"Padrino::Generators::Actions#store_component_config (method)\"), [\\#test?](actions#test%3F-instance_method \"Padrino::Generators::Actions#test? (method)\"), [\\#tiny?](actions#tiny%3F-instance_method \"Padrino::Generators::Actions#tiny? (method)\"), [\\#valid_choice?](actions#valid_choice%3F-instance_method \"Padrino::Generators::Actions#valid_choice? (method)\"), [\\#valid_constant?](actions#valid_constant%3F-instance_method \"Padrino::Generators::Actions#valid_constant? (method)\"), [\\#validate_namespace](actions#validate_namespace-instance_method \"Padrino::Generators::Actions#validate_namespace (method)\")\n\n## Class Method Details\n\n### .banner ⇒ Object\n\n### .source_root ⇒ Object\n\n## Instance Method Details\n\n### \\#create_mailer ⇒ Object\n\nExecute mailer generation.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Mailer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Mailer)"
- name: Padrino::Generators::Mailer#create_mailer
  id: padrino/generators/mailer#create_mailer-instance_method
  summary: Execute mailer generation
  belongs_to: Padrino::Generators::Mailer
  description: "### \\#create_mailer ⇒ Object\n\nExecute mailer generation.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Mailer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Mailer)"
- name: Padrino::Generators::Mailer.banner
  id: padrino/generators/mailer#banner-class_method
  summary: null
  belongs_to: Padrino::Generators::Mailer
  description: '### .banner ⇒ Object'
- name: Padrino::Generators::Mailer.source_root
  id: padrino/generators/mailer#source_root-class_method
  summary: null
  belongs_to: Padrino::Generators::Mailer
  description: |-
    ### .source_root ⇒ Object

    ## Instance Method Details
- name: Padrino::Generators::Migration
  id: padrino/generators/migration
  summary: Responsible for generating migration files for the appropriate ORM component
  description: "# Class: Padrino::Generators::Migration\n\nInherits:  \nThor::Group\n\n- [Object](../../object \"Object (class)\")\n- Thor::Group\n- Padrino::Generators::Migration\n\nIncludes:  \n[Actions](actions \"Padrino::Generators::Actions (module)\"), Components::Actions, Thor::Actions\n\n## Overview\n\nResponsible for generating migration files for the appropriate ORM component.\n\n## Class Method Summary\n\n- [`.`**`banner`**` ⇒ Object`](migration#banner-class_method \"banner (class method)\")\n- [`.`**`source_root`**` ⇒ Object`](migration#source_root-class_method \"source_root (class method)\")\n\n## Instance Method Summary\n\n- [`#`**`create_migration`**` ⇒ Object`](migration#create_migration-instance_method \"#create_migration (instance method)\") Creates the migration file within a Padrino project.\n\n### Methods included from Actions\n\n[\\#already_exists?](actions#already_exists%3F-instance_method \"Padrino::Generators::Actions#already_exists? (method)\"), [\\#app_skeleton](actions#app_skeleton-instance_method \"Padrino::Generators::Actions#app_skeleton (method)\"), [\\#apply_component_for](actions#apply_component_for-instance_method \"Padrino::Generators::Actions#apply_component_for (method)\"), [\\#apply_default_fields](actions#apply_default_fields-instance_method \"Padrino::Generators::Actions#apply_default_fields (method)\"), [\\#check_app_existence](actions#check_app_existence-instance_method \"Padrino::Generators::Actions#check_app_existence (method)\"), [\\#destination_root](actions#destination_root-instance_method \"Padrino::Generators::Actions#destination_root (method)\"), [\\#empty_directory_with_keep_file](actions#empty_directory_with_keep_file-instance_method \"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\"), [\\#execute_component_setup](actions#execute_component_setup-instance_method \"Padrino::Generators::Actions#execute_component_setup (method)\"), [\\#fetch_app_name](actions#fetch_app_name-instance_method \"Padrino::Generators::Actions#fetch_app_name (method)\"), [\\#fetch_component_choice](actions#fetch_component_choice-instance_method \"Padrino::Generators::Actions#fetch_component_choice (method)\"), [\\#fetch_project_name](actions#fetch_project_name-instance_method \"Padrino::Generators::Actions#fetch_project_name (method)\"), [\\#in_app_root?](actions#in_app_root%3F-instance_method \"Padrino::Generators::Actions#in_app_root? (method)\"), [\\#include_component_module_for](actions#include_component_module_for-instance_method \"Padrino::Generators::Actions#include_component_module_for (method)\"), [\\#initializer](actions#initializer-instance_method \"Padrino::Generators::Actions#initializer (method)\"), [\\#inject_into_file](actions#inject_into_file-instance_method \"Padrino::Generators::Actions#inject_into_file (method)\"), [\\#insert_hook](actions#insert_hook-instance_method \"Padrino::Generators::Actions#insert_hook (method)\"), [\\#insert_into_gemfile](actions#insert_into_gemfile-instance_method \"Padrino::Generators::Actions#insert_into_gemfile (method)\"), [\\#insert_middleware](actions#insert_middleware-instance_method \"Padrino::Generators::Actions#insert_middleware (method)\"), [\\#invalid_fields](actions#invalid_fields-instance_method \"Padrino::Generators::Actions#invalid_fields (method)\"), [\\#keep_file](actions#keep_file-instance_method \"Padrino::Generators::Actions#keep_file (method)\"), [\\#middleware](actions#middleware-instance_method \"Padrino::Generators::Actions#middleware (method)\"), [\\#recognize_path](actions#recognize_path-instance_method \"Padrino::Generators::Actions#recognize_path (method)\"), [\\#require_contrib](actions#require_contrib-instance_method \"Padrino::Generators::Actions#require_contrib (method)\"), [\\#require_dependencies](actions#require_dependencies-instance_method \"Padrino::Generators::Actions#require_dependencies (method)\"), [\\#resolve_valid_choice](actions#resolve_valid_choice-instance_method \"Padrino::Generators::Actions#resolve_valid_choice (method)\"), [\\#retrieve_component_config](actions#retrieve_component_config-instance_method \"Padrino::Generators::Actions#retrieve_component_config (method)\"), [\\#run_bundler](actions#run_bundler-instance_method \"Padrino::Generators::Actions#run_bundler (method)\"), [\\#store_component_choice](actions#store_component_choice-instance_method \"Padrino::Generators::Actions#store_component_choice (method)\"), [\\#store_component_config](actions#store_component_config-instance_method \"Padrino::Generators::Actions#store_component_config (method)\"), [\\#test?](actions#test%3F-instance_method \"Padrino::Generators::Actions#test? (method)\"), [\\#tiny?](actions#tiny%3F-instance_method \"Padrino::Generators::Actions#tiny? (method)\"), [\\#valid_choice?](actions#valid_choice%3F-instance_method \"Padrino::Generators::Actions#valid_choice? (method)\"), [\\#valid_constant?](actions#valid_constant%3F-instance_method \"Padrino::Generators::Actions#valid_constant? (method)\"), [\\#validate_namespace](actions#validate_namespace-instance_method \"Padrino::Generators::Actions#validate_namespace (method)\")\n\n## Class Method Details\n\n### .banner ⇒ Object\n\n### .source_root ⇒ Object\n\n## Instance Method Details\n\n### \\#create_migration ⇒ Object\n\nCreates the migration file within a Padrino project.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Migration](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Migration)"
- name: Padrino::Generators::Migration#create_migration
  id: padrino/generators/migration#create_migration-instance_method
  summary: Creates the migration file within a Padrino project
  belongs_to: Padrino::Generators::Migration
  description: "### \\#create_migration ⇒ Object\n\nCreates the migration file within a Padrino project.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Migration](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Migration)"
- name: Padrino::Generators::Migration.banner
  id: padrino/generators/migration#banner-class_method
  summary: null
  belongs_to: Padrino::Generators::Migration
  description: '### .banner ⇒ Object'
- name: Padrino::Generators::Migration.source_root
  id: padrino/generators/migration#source_root-class_method
  summary: null
  belongs_to: Padrino::Generators::Migration
  description: |-
    ### .source_root ⇒ Object

    ## Instance Method Details
- name: Padrino::Generators::Model
  id: padrino/generators/model
  summary: Responsible for generating new models for the specified ORM component
  description: "# Class: Padrino::Generators::Model\n\nInherits:  \nThor::Group\n\n- [Object](../../object \"Object (class)\")\n- Thor::Group\n- Padrino::Generators::Model\n\nIncludes:  \n[Actions](actions \"Padrino::Generators::Actions (module)\"), Components::Actions, Thor::Actions\n\n## Overview\n\nResponsible for generating new models for the specified ORM component.\n\n## Class Method Summary\n\n- [`.`**`banner`**` ⇒ Object`](model#banner-class_method \"banner (class method)\")\n- [`.`**`source_root`**` ⇒ Object`](model#source_root-class_method \"source_root (class method)\")\n\n## Instance Method Summary\n\n- [`#`**`create_model`**` ⇒ Object`](model#create_model-instance_method \"#create_model (instance method)\") Execute the model generation.\n\n### Methods included from Actions\n\n[\\#already_exists?](actions#already_exists%3F-instance_method \"Padrino::Generators::Actions#already_exists? (method)\"), [\\#app_skeleton](actions#app_skeleton-instance_method \"Padrino::Generators::Actions#app_skeleton (method)\"), [\\#apply_component_for](actions#apply_component_for-instance_method \"Padrino::Generators::Actions#apply_component_for (method)\"), [\\#apply_default_fields](actions#apply_default_fields-instance_method \"Padrino::Generators::Actions#apply_default_fields (method)\"), [\\#check_app_existence](actions#check_app_existence-instance_method \"Padrino::Generators::Actions#check_app_existence (method)\"), [\\#destination_root](actions#destination_root-instance_method \"Padrino::Generators::Actions#destination_root (method)\"), [\\#empty_directory_with_keep_file](actions#empty_directory_with_keep_file-instance_method \"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\"), [\\#execute_component_setup](actions#execute_component_setup-instance_method \"Padrino::Generators::Actions#execute_component_setup (method)\"), [\\#fetch_app_name](actions#fetch_app_name-instance_method \"Padrino::Generators::Actions#fetch_app_name (method)\"), [\\#fetch_component_choice](actions#fetch_component_choice-instance_method \"Padrino::Generators::Actions#fetch_component_choice (method)\"), [\\#fetch_project_name](actions#fetch_project_name-instance_method \"Padrino::Generators::Actions#fetch_project_name (method)\"), [\\#in_app_root?](actions#in_app_root%3F-instance_method \"Padrino::Generators::Actions#in_app_root? (method)\"), [\\#include_component_module_for](actions#include_component_module_for-instance_method \"Padrino::Generators::Actions#include_component_module_for (method)\"), [\\#initializer](actions#initializer-instance_method \"Padrino::Generators::Actions#initializer (method)\"), [\\#inject_into_file](actions#inject_into_file-instance_method \"Padrino::Generators::Actions#inject_into_file (method)\"), [\\#insert_hook](actions#insert_hook-instance_method \"Padrino::Generators::Actions#insert_hook (method)\"), [\\#insert_into_gemfile](actions#insert_into_gemfile-instance_method \"Padrino::Generators::Actions#insert_into_gemfile (method)\"), [\\#insert_middleware](actions#insert_middleware-instance_method \"Padrino::Generators::Actions#insert_middleware (method)\"), [\\#invalid_fields](actions#invalid_fields-instance_method \"Padrino::Generators::Actions#invalid_fields (method)\"), [\\#keep_file](actions#keep_file-instance_method \"Padrino::Generators::Actions#keep_file (method)\"), [\\#middleware](actions#middleware-instance_method \"Padrino::Generators::Actions#middleware (method)\"), [\\#recognize_path](actions#recognize_path-instance_method \"Padrino::Generators::Actions#recognize_path (method)\"), [\\#require_contrib](actions#require_contrib-instance_method \"Padrino::Generators::Actions#require_contrib (method)\"), [\\#require_dependencies](actions#require_dependencies-instance_method \"Padrino::Generators::Actions#require_dependencies (method)\"), [\\#resolve_valid_choice](actions#resolve_valid_choice-instance_method \"Padrino::Generators::Actions#resolve_valid_choice (method)\"), [\\#retrieve_component_config](actions#retrieve_component_config-instance_method \"Padrino::Generators::Actions#retrieve_component_config (method)\"), [\\#run_bundler](actions#run_bundler-instance_method \"Padrino::Generators::Actions#run_bundler (method)\"), [\\#store_component_choice](actions#store_component_choice-instance_method \"Padrino::Generators::Actions#store_component_choice (method)\"), [\\#store_component_config](actions#store_component_config-instance_method \"Padrino::Generators::Actions#store_component_config (method)\"), [\\#test?](actions#test%3F-instance_method \"Padrino::Generators::Actions#test? (method)\"), [\\#tiny?](actions#tiny%3F-instance_method \"Padrino::Generators::Actions#tiny? (method)\"), [\\#valid_choice?](actions#valid_choice%3F-instance_method \"Padrino::Generators::Actions#valid_choice? (method)\"), [\\#valid_constant?](actions#valid_constant%3F-instance_method \"Padrino::Generators::Actions#valid_constant? (method)\"), [\\#validate_namespace](actions#validate_namespace-instance_method \"Padrino::Generators::Actions#validate_namespace (method)\")\n\n## Class Method Details\n\n### .banner ⇒ Object\n\n### .source_root ⇒ Object\n\n## Instance Method Details\n\n### \\#create_model ⇒ Object\n\nExecute the model generation.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Model](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Model)"
- name: Padrino::Generators::Model#create_model
  id: padrino/generators/model#create_model-instance_method
  summary: Execute the model generation
  belongs_to: Padrino::Generators::Model
  description: "### \\#create_model ⇒ Object\n\nExecute the model generation.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Model](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Model)"
- name: Padrino::Generators::Model.banner
  id: padrino/generators/model#banner-class_method
  summary: null
  belongs_to: Padrino::Generators::Model
  description: '### .banner ⇒ Object'
- name: Padrino::Generators::Model.source_root
  id: padrino/generators/model#source_root-class_method
  summary: null
  belongs_to: Padrino::Generators::Model
  description: |-
    ### .source_root ⇒ Object

    ## Instance Method Details
- name: Padrino::Generators::Plugin
  id: padrino/generators/plugin
  summary: Responsible for executing plugins instructions within a Padrino project
  description: "# Class: Padrino::Generators::Plugin\n\nInherits:  \nThor::Group\n\n- [Object](../../object \"Object (class)\")\n- Thor::Group\n- Padrino::Generators::Plugin\n\nIncludes:  \n[Actions](actions \"Padrino::Generators::Actions (module)\"), [Runner](runner \"Padrino::Generators::Runner (module)\"), Thor::Actions\n\n## Overview\n\nResponsible for executing plugins instructions within a Padrino project.\n\n## Constant Summary [collapse](#)\n\nPLUGIN_URL =\n\nDefines the default URL for official padrino recipe plugins.\n\n``` ruby\n'https://github.com/padrino/padrino-recipes/tree/master/plugins'\n```\n\n## Class Method Summary\n\n- [`.`**`banner`**` ⇒ Object`](plugin#banner-class_method \"banner (class method)\")\n- [`.`**`source_root`**` ⇒ Object`](plugin#source_root-class_method \"source_root (class method)\")\n\n## Instance Method Summary\n\n- [`#`**`setup_plugin`**` ⇒ Object`](plugin#setup_plugin-instance_method \"#setup_plugin (instance method)\") Create the Padrino Plugin.\n\n### Methods included from Runner\n\n[\\#app](runner#app-instance_method \"Padrino::Generators::Runner#app (method)\"), [\\#generate](runner#generate-instance_method \"Padrino::Generators::Runner#generate (method)\"), [\\#git](runner#git-instance_method \"Padrino::Generators::Runner#git (method)\"), [\\#project](runner#project-instance_method \"Padrino::Generators::Runner#project (method)\"), [\\#rake](runner#rake-instance_method \"Padrino::Generators::Runner#rake (method)\")\n\n### Methods included from Actions\n\n[\\#already_exists?](actions#already_exists%3F-instance_method \"Padrino::Generators::Actions#already_exists? (method)\"), [\\#app_skeleton](actions#app_skeleton-instance_method \"Padrino::Generators::Actions#app_skeleton (method)\"), [\\#apply_component_for](actions#apply_component_for-instance_method \"Padrino::Generators::Actions#apply_component_for (method)\"), [\\#apply_default_fields](actions#apply_default_fields-instance_method \"Padrino::Generators::Actions#apply_default_fields (method)\"), [\\#check_app_existence](actions#check_app_existence-instance_method \"Padrino::Generators::Actions#check_app_existence (method)\"), [\\#destination_root](actions#destination_root-instance_method \"Padrino::Generators::Actions#destination_root (method)\"), [\\#empty_directory_with_keep_file](actions#empty_directory_with_keep_file-instance_method \"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\"), [\\#execute_component_setup](actions#execute_component_setup-instance_method \"Padrino::Generators::Actions#execute_component_setup (method)\"), [\\#fetch_app_name](actions#fetch_app_name-instance_method \"Padrino::Generators::Actions#fetch_app_name (method)\"), [\\#fetch_component_choice](actions#fetch_component_choice-instance_method \"Padrino::Generators::Actions#fetch_component_choice (method)\"), [\\#fetch_project_name](actions#fetch_project_name-instance_method \"Padrino::Generators::Actions#fetch_project_name (method)\"), [\\#in_app_root?](actions#in_app_root%3F-instance_method \"Padrino::Generators::Actions#in_app_root? (method)\"), [\\#include_component_module_for](actions#include_component_module_for-instance_method \"Padrino::Generators::Actions#include_component_module_for (method)\"), [\\#initializer](actions#initializer-instance_method \"Padrino::Generators::Actions#initializer (method)\"), [\\#inject_into_file](actions#inject_into_file-instance_method \"Padrino::Generators::Actions#inject_into_file (method)\"), [\\#insert_hook](actions#insert_hook-instance_method \"Padrino::Generators::Actions#insert_hook (method)\"), [\\#insert_into_gemfile](actions#insert_into_gemfile-instance_method \"Padrino::Generators::Actions#insert_into_gemfile (method)\"), [\\#insert_middleware](actions#insert_middleware-instance_method \"Padrino::Generators::Actions#insert_middleware (method)\"), [\\#invalid_fields](actions#invalid_fields-instance_method \"Padrino::Generators::Actions#invalid_fields (method)\"), [\\#keep_file](actions#keep_file-instance_method \"Padrino::Generators::Actions#keep_file (method)\"), [\\#middleware](actions#middleware-instance_method \"Padrino::Generators::Actions#middleware (method)\"), [\\#recognize_path](actions#recognize_path-instance_method \"Padrino::Generators::Actions#recognize_path (method)\"), [\\#require_contrib](actions#require_contrib-instance_method \"Padrino::Generators::Actions#require_contrib (method)\"), [\\#require_dependencies](actions#require_dependencies-instance_method \"Padrino::Generators::Actions#require_dependencies (method)\"), [\\#resolve_valid_choice](actions#resolve_valid_choice-instance_method \"Padrino::Generators::Actions#resolve_valid_choice (method)\"), [\\#retrieve_component_config](actions#retrieve_component_config-instance_method \"Padrino::Generators::Actions#retrieve_component_config (method)\"), [\\#run_bundler](actions#run_bundler-instance_method \"Padrino::Generators::Actions#run_bundler (method)\"), [\\#store_component_choice](actions#store_component_choice-instance_method \"Padrino::Generators::Actions#store_component_choice (method)\"), [\\#store_component_config](actions#store_component_config-instance_method \"Padrino::Generators::Actions#store_component_config (method)\"), [\\#test?](actions#test%3F-instance_method \"Padrino::Generators::Actions#test? (method)\"), [\\#tiny?](actions#tiny%3F-instance_method \"Padrino::Generators::Actions#tiny? (method)\"), [\\#valid_choice?](actions#valid_choice%3F-instance_method \"Padrino::Generators::Actions#valid_choice? (method)\"), [\\#valid_constant?](actions#valid_constant%3F-instance_method \"Padrino::Generators::Actions#valid_constant? (method)\"), [\\#validate_namespace](actions#validate_namespace-instance_method \"Padrino::Generators::Actions#validate_namespace (method)\")\n\n## Class Method Details\n\n### .banner ⇒ Object\n\n### .source_root ⇒ Object\n\n## Instance Method Details\n\n### \\#setup_plugin ⇒ Object\n\nCreate the Padrino Plugin.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Plugin](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Plugin)"
- name: Padrino::Generators::Plugin#setup_plugin
  id: padrino/generators/plugin#setup_plugin-instance_method
  summary: Create the Padrino Plugin
  belongs_to: Padrino::Generators::Plugin
  description: "### \\#setup_plugin ⇒ Object\n\nCreate the Padrino Plugin.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Plugin](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Plugin)"
- name: Padrino::Generators::Plugin.banner
  id: padrino/generators/plugin#banner-class_method
  summary: null
  belongs_to: Padrino::Generators::Plugin
  description: '### .banner ⇒ Object'
- name: Padrino::Generators::Plugin.source_root
  id: padrino/generators/plugin#source_root-class_method
  summary: null
  belongs_to: Padrino::Generators::Plugin
  description: |-
    ### .source_root ⇒ Object

    ## Instance Method Details
- name: Padrino::Generators::Project
  id: padrino/generators/project
  summary: Responsible for generating new Padrino projects based on the specified project components
  description: "# Class: Padrino::Generators::Project\n\nInherits:  \nThor::Group\n\n- [Object](../../object \"Object (class)\")\n- Thor::Group\n- Padrino::Generators::Project\n\nIncludes:  \n[Actions](actions \"Padrino::Generators::Actions (module)\"), Components::Actions, [Runner](runner \"Padrino::Generators::Runner (module)\"), Thor::Actions\n\n## Overview\n\nResponsible for generating new Padrino projects based on the specified project components.\n\n## Class Method Summary\n\n- [`.`**`banner`**` ⇒ Object`](project#banner-class_method \"banner (class method)\")\n- [`.`**`source_root`**` ⇒ Object`](project#source_root-class_method \"source_root (class method)\")\n\n## Instance Method Summary\n\n- [`#`**`bundle_dependencies`**` ⇒ Object`](project#bundle_dependencies-instance_method \"#bundle_dependencies (instance method)\") Bundle all required components using bundler and Gemfile.\n- [`#`**`finish_message`**` ⇒ Object`](project#finish_message-instance_method \"#finish_message (instance method)\") Finish message.\n- [`#`**`git_author_email`**` ⇒ Object`](project#git_author_email-instance_method \"#git_author_email (instance method)\") Returns the git author email config or a fill-in value.\n- [`#`**`git_author_name`**` ⇒ Object`](project#git_author_name-instance_method \"#git_author_name (instance method)\") Returns the git author name config or a fill-in value.\n- [`#`**`setup_components`**` ⇒ Object`](project#setup_components-instance_method \"#setup_components (instance method)\") For each component, retrieve a valid choice and then execute the associated generator.\n- [`#`**`setup_project`**` ⇒ Object`](project#setup_project-instance_method \"#setup_project (instance method)\") Copies over the Padrino base application app.\n- [`#`**`setup_test_files`**` ⇒ Object`](project#setup_test_files-instance_method \"#setup_test_files (instance method)\") Generates test files for tiny app skeleton.\n\n### Methods included from Runner\n\n[\\#app](runner#app-instance_method \"Padrino::Generators::Runner#app (method)\"), [\\#generate](runner#generate-instance_method \"Padrino::Generators::Runner#generate (method)\"), [\\#git](runner#git-instance_method \"Padrino::Generators::Runner#git (method)\"), [\\#project](runner#project-instance_method \"Padrino::Generators::Runner#project (method)\"), [\\#rake](runner#rake-instance_method \"Padrino::Generators::Runner#rake (method)\")\n\n### Methods included from Actions\n\n[\\#already_exists?](actions#already_exists%3F-instance_method \"Padrino::Generators::Actions#already_exists? (method)\"), [\\#app_skeleton](actions#app_skeleton-instance_method \"Padrino::Generators::Actions#app_skeleton (method)\"), [\\#apply_component_for](actions#apply_component_for-instance_method \"Padrino::Generators::Actions#apply_component_for (method)\"), [\\#apply_default_fields](actions#apply_default_fields-instance_method \"Padrino::Generators::Actions#apply_default_fields (method)\"), [\\#check_app_existence](actions#check_app_existence-instance_method \"Padrino::Generators::Actions#check_app_existence (method)\"), [\\#destination_root](actions#destination_root-instance_method \"Padrino::Generators::Actions#destination_root (method)\"), [\\#empty_directory_with_keep_file](actions#empty_directory_with_keep_file-instance_method \"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\"), [\\#execute_component_setup](actions#execute_component_setup-instance_method \"Padrino::Generators::Actions#execute_component_setup (method)\"), [\\#fetch_app_name](actions#fetch_app_name-instance_method \"Padrino::Generators::Actions#fetch_app_name (method)\"), [\\#fetch_component_choice](actions#fetch_component_choice-instance_method \"Padrino::Generators::Actions#fetch_component_choice (method)\"), [\\#fetch_project_name](actions#fetch_project_name-instance_method \"Padrino::Generators::Actions#fetch_project_name (method)\"), [\\#in_app_root?](actions#in_app_root%3F-instance_method \"Padrino::Generators::Actions#in_app_root? (method)\"), [\\#include_component_module_for](actions#include_component_module_for-instance_method \"Padrino::Generators::Actions#include_component_module_for (method)\"), [\\#initializer](actions#initializer-instance_method \"Padrino::Generators::Actions#initializer (method)\"), [\\#inject_into_file](actions#inject_into_file-instance_method \"Padrino::Generators::Actions#inject_into_file (method)\"), [\\#insert_hook](actions#insert_hook-instance_method \"Padrino::Generators::Actions#insert_hook (method)\"), [\\#insert_into_gemfile](actions#insert_into_gemfile-instance_method \"Padrino::Generators::Actions#insert_into_gemfile (method)\"), [\\#insert_middleware](actions#insert_middleware-instance_method \"Padrino::Generators::Actions#insert_middleware (method)\"), [\\#invalid_fields](actions#invalid_fields-instance_method \"Padrino::Generators::Actions#invalid_fields (method)\"), [\\#keep_file](actions#keep_file-instance_method \"Padrino::Generators::Actions#keep_file (method)\"), [\\#middleware](actions#middleware-instance_method \"Padrino::Generators::Actions#middleware (method)\"), [\\#recognize_path](actions#recognize_path-instance_method \"Padrino::Generators::Actions#recognize_path (method)\"), [\\#require_contrib](actions#require_contrib-instance_method \"Padrino::Generators::Actions#require_contrib (method)\"), [\\#require_dependencies](actions#require_dependencies-instance_method \"Padrino::Generators::Actions#require_dependencies (method)\"), [\\#resolve_valid_choice](actions#resolve_valid_choice-instance_method \"Padrino::Generators::Actions#resolve_valid_choice (method)\"), [\\#retrieve_component_config](actions#retrieve_component_config-instance_method \"Padrino::Generators::Actions#retrieve_component_config (method)\"), [\\#run_bundler](actions#run_bundler-instance_method \"Padrino::Generators::Actions#run_bundler (method)\"), [\\#store_component_choice](actions#store_component_choice-instance_method \"Padrino::Generators::Actions#store_component_choice (method)\"), [\\#store_component_config](actions#store_component_config-instance_method \"Padrino::Generators::Actions#store_component_config (method)\"), [\\#test?](actions#test%3F-instance_method \"Padrino::Generators::Actions#test? (method)\"), [\\#tiny?](actions#tiny%3F-instance_method \"Padrino::Generators::Actions#tiny? (method)\"), [\\#valid_choice?](actions#valid_choice%3F-instance_method \"Padrino::Generators::Actions#valid_choice? (method)\"), [\\#valid_constant?](actions#valid_constant%3F-instance_method \"Padrino::Generators::Actions#valid_constant? (method)\"), [\\#validate_namespace](actions#validate_namespace-instance_method \"Padrino::Generators::Actions#validate_namespace (method)\")\n\n## Class Method Details\n\n### .banner ⇒ Object\n\n### .source_root ⇒ Object\n\n## Instance Method Details\n\n### \\#bundle_dependencies ⇒ Object\n\nBundle all required components using bundler and Gemfile.\n\n### \\#finish_message ⇒ Object\n\nFinish message.\n\n### \\#git_author_email ⇒ Object\n\nReturns the git author email config or a fill-in value.\n\n### \\#git_author_name ⇒ Object\n\nReturns the git author name config or a fill-in value.\n\n### \\#setup_components ⇒ Object\n\nFor each component, retrieve a valid choice and then execute the associated generator.\n\n### \\#setup_project ⇒ Object\n\nCopies over the Padrino base application app.\n\n### \\#setup_test_files ⇒ Object\n\nGenerates test files for tiny app skeleton.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Project](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Project)"
- name: Padrino::Generators::Project#bundle_dependencies
  id: padrino/generators/project#bundle_dependencies-instance_method
  summary: Bundle all required components using bundler and Gemfile
  belongs_to: Padrino::Generators::Project
  description: |-
    ### \#bundle_dependencies ⇒ Object

    Bundle all required components using bundler and Gemfile.
- name: Padrino::Generators::Project#finish_message
  id: padrino/generators/project#finish_message-instance_method
  summary: Finish message
  belongs_to: Padrino::Generators::Project
  description: |-
    ### \#finish_message ⇒ Object

    Finish message.
- name: Padrino::Generators::Project#git_author_email
  id: padrino/generators/project#git_author_email-instance_method
  summary: Returns the git author email config or a fill-in value
  belongs_to: Padrino::Generators::Project
  description: |-
    ### \#git_author_email ⇒ Object

    Returns the git author email config or a fill-in value.
- name: Padrino::Generators::Project#git_author_name
  id: padrino/generators/project#git_author_name-instance_method
  summary: Returns the git author name config or a fill-in value
  belongs_to: Padrino::Generators::Project
  description: |-
    ### \#git_author_name ⇒ Object

    Returns the git author name config or a fill-in value.
- name: Padrino::Generators::Project#setup_components
  id: padrino/generators/project#setup_components-instance_method
  summary: For each component, retrieve a valid choice and then execute the associated generator
  belongs_to: Padrino::Generators::Project
  description: |-
    ### \#setup_components ⇒ Object

    For each component, retrieve a valid choice and then execute the associated generator.
- name: Padrino::Generators::Project#setup_project
  id: padrino/generators/project#setup_project-instance_method
  summary: Copies over the Padrino base application app
  belongs_to: Padrino::Generators::Project
  description: |-
    ### \#setup_project ⇒ Object

    Copies over the Padrino base application app.
- name: Padrino::Generators::Project#setup_test_files
  id: padrino/generators/project#setup_test_files-instance_method
  summary: Generates test files for tiny app skeleton
  belongs_to: Padrino::Generators::Project
  description: "### \\#setup_test_files ⇒ Object\n\nGenerates test files for tiny app skeleton.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Project](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Project)"
- name: Padrino::Generators::Project.banner
  id: padrino/generators/project#banner-class_method
  summary: null
  belongs_to: Padrino::Generators::Project
  description: '### .banner ⇒ Object'
- name: Padrino::Generators::Project.source_root
  id: padrino/generators/project#source_root-class_method
  summary: null
  belongs_to: Padrino::Generators::Project
  description: |-
    ### .source_root ⇒ Object

    ## Instance Method Details
- name: Padrino::Generators::Runner
  id: padrino/generators/runner
  summary: Responsible for executing plugin and template instructions including common actions for modifying a project or application
  description: "# Module: Padrino::Generators::Runner\n\nIncluded in:  \n[Plugin](plugin \"Padrino::Generators::Plugin (class)\"), [Project](project \"Padrino::Generators::Project (class)\")\n\n## Overview\n\nResponsible for executing plugin and template instructions including common actions for modifying a project or application.\n\n## Instance Method Summary\n\n- [`#`**`app`**`(name) ⇒ Object`](runner#app-instance_method \"#app (instance method)\") Executes App generator.\n- [`#`**`generate`**`(type, arguments = \"\") ⇒ Object`](runner#generate-instance_method \"#generate (instance method)\") Executes generator command for specified type with given arguments.\n- [`#`**`git`**`(*args) ⇒ Object`](runner#git-instance_method \"#git (instance method)\") Executes git commmands in project.\n- [`#`**`project`**`(options = {}) ⇒ Object`](runner#project-instance_method \"#project (instance method)\") Generates project scaffold based on a given template file.\n- [`#`**`rake`**`(command) ⇒ Object`](runner#rake-instance_method \"#rake (instance method)\") Executes rake command with given arguments.\n\n## Instance Method Details\n\n### \\#app(name) ⇒ Object\n\nExecutes App generator. Accepts an optional block allowing generation inside subapp.\n\n#### Examples:\n\n``` ruby\napp :name\napp :name do\n generate :model, \"posts title:string\" # generate a model inside of subapp\nend\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) — Name of (sub)application to generate.\n- `block` (`Proc`) — Commands to execute in context of (sub)appliation directory.\n\n### \\#generate(type, arguments = \"\") ⇒ Object\n\nExecutes generator command for specified type with given arguments.\n\n#### Examples:\n\n``` ruby\ngenerate :model, \"post title:string body:text\"\ngenerate :controller, \"posts get:index get:new post:new\"\ngenerate :migration, \"AddEmailToUser email:string\"\n```\n\n#### Parameters:\n\n- `type` (`Symbol`) — Type of component module.\n- `arguments` ([`String`](../../string \"String (class)\")) *(defaults to: `\"\"`)* — Arguments to send to component generator.\n\n### \\#git(\\*args) ⇒ Object\n\nExecutes git commmands in project.\n\n#### Examples:\n\n``` ruby\ngit :init\ngit :add, \".\"\ngit :commit, \"hello world\"\n```\n\n#### Parameters:\n\n- `action` (`Symbol`) — Git command to execute.\n- `arguments` ([`String`](../../string \"String (class)\")) — Arguments to invoke on git command.\n\n### \\#project(options = {}) ⇒ Object\n\nGenerates project scaffold based on a given template file.\n\n#### Examples:\n\n``` ruby\nproject :test => :shoulda, :orm => :activerecord, :renderer => \"haml\"\n```\n\n#### Parameters:\n\n- `options` (`Hash`) *(defaults to: `{}`)* — Options to use to generate the project.\n\n### \\#rake(command) ⇒ Object\n\nExecutes rake command with given arguments.\n\n#### Examples:\n\n``` ruby\nrake \"custom task1 task2\"\n```\n\n#### Parameters:\n\n- `command` ([`String`](../../string \"String (class)\")) — Rake tasks to execute.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Runner](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Runner)"
- name: Padrino::Generators::Runner#app
  id: padrino/generators/runner#app-instance_method
  summary: Executes App generator
  belongs_to: Padrino::Generators::Runner
  description: |-
    ### \#app(name) ⇒ Object

    Executes App generator. Accepts an optional block allowing generation inside subapp.

    #### Examples:

    ``` ruby
    app :name
    app :name do
     generate :model, "posts title:string" # generate a model inside of subapp
    end
    ```

    #### Parameters:

    - `name`(`Symbol`) — Name of (sub)application to generate.
    - `block`(`Proc`) — Commands to execute in context of (sub)appliation directory.
- name: Padrino::Generators::Runner#generate
  id: padrino/generators/runner#generate-instance_method
  summary: Executes generator command for specified type with given arguments
  belongs_to: Padrino::Generators::Runner
  description: |-
    ### \#generate(type, arguments = "") ⇒ Object

    Executes generator command for specified type with given arguments.

    #### Examples:

    ``` ruby
    generate :model, "post title:string body:text"
    generate :controller, "posts get:index get:new post:new"
    generate :migration, "AddEmailToUser email:string"
    ```

    #### Parameters:

    - `type`(`Symbol`) — Type of component module.
    - `arguments`([`String`](../../string "String (class)"))*(defaults to: `""`)* — Arguments to send to component generator.
- name: Padrino::Generators::Runner#git
  id: padrino/generators/runner#git-instance_method
  summary: Executes git commmands in project
  belongs_to: Padrino::Generators::Runner
  description: |-
    ### \#git(\*args) ⇒ Object

    Executes git commmands in project.

    #### Examples:

    ``` ruby
    git :init
    git :add, "."
    git :commit, "hello world"
    ```

    #### Parameters:

    - `action`(`Symbol`) — Git command to execute.
    - `arguments`([`String`](../../string "String (class)")) — Arguments to invoke on git command.
- name: Padrino::Generators::Runner#project
  id: padrino/generators/runner#project-instance_method
  summary: Generates project scaffold based on a given template file
  belongs_to: Padrino::Generators::Runner
  description: |-
    ### \#project(options = {}) ⇒ Object

    Generates project scaffold based on a given template file.

    #### Examples:

    ``` ruby
    project :test => :shoulda, :orm => :activerecord, :renderer => "haml"
    ```

    #### Parameters:

    - `options`(`Hash`)*(defaults to: `{}`)* — Options to use to generate the project.
- name: Padrino::Generators::Runner#rake
  id: padrino/generators/runner#rake-instance_method
  summary: Executes rake command with given arguments
  belongs_to: Padrino::Generators::Runner
  description: "### \\#rake(command) ⇒ Object\n\nExecutes rake command with given arguments.\n\n#### Examples:\n\n``` ruby\nrake \"custom task1 task2\"\n```\n\n#### Parameters:\n\n- `command`([`String`](../../string \"String (class)\")) — Rake tasks to execute.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Runner](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Runner)"
- name: Padrino::Generators::Task
  id: padrino/generators/task
  summary: Responsible for generating new task file for Padrino application
  description: "# Class: Padrino::Generators::Task\n\nInherits:  \nThor::Group\n\n- [Object](../../object \"Object (class)\")\n- Thor::Group\n- Padrino::Generators::Task\n\nIncludes:  \n[Actions](actions \"Padrino::Generators::Actions (module)\"), Components::Actions, Thor::Actions\n\n## Overview\n\nResponsible for generating new task file for Padrino application.\n\n## Class Method Summary\n\n- [`.`**`banner`**` ⇒ Object`](task#banner-class_method \"banner (class method)\")\n- [`.`**`source_root`**` ⇒ Object`](task#source_root-class_method \"source_root (class method)\")\n\n## Instance Method Summary\n\n- [`#`**`create_task`**` ⇒ Object`](task#create_task-instance_method \"#create_task (instance method)\")\n\n### Methods included from Actions\n\n[\\#already_exists?](actions#already_exists%3F-instance_method \"Padrino::Generators::Actions#already_exists? (method)\"), [\\#app_skeleton](actions#app_skeleton-instance_method \"Padrino::Generators::Actions#app_skeleton (method)\"), [\\#apply_component_for](actions#apply_component_for-instance_method \"Padrino::Generators::Actions#apply_component_for (method)\"), [\\#apply_default_fields](actions#apply_default_fields-instance_method \"Padrino::Generators::Actions#apply_default_fields (method)\"), [\\#check_app_existence](actions#check_app_existence-instance_method \"Padrino::Generators::Actions#check_app_existence (method)\"), [\\#destination_root](actions#destination_root-instance_method \"Padrino::Generators::Actions#destination_root (method)\"), [\\#empty_directory_with_keep_file](actions#empty_directory_with_keep_file-instance_method \"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\"), [\\#execute_component_setup](actions#execute_component_setup-instance_method \"Padrino::Generators::Actions#execute_component_setup (method)\"), [\\#fetch_app_name](actions#fetch_app_name-instance_method \"Padrino::Generators::Actions#fetch_app_name (method)\"), [\\#fetch_component_choice](actions#fetch_component_choice-instance_method \"Padrino::Generators::Actions#fetch_component_choice (method)\"), [\\#fetch_project_name](actions#fetch_project_name-instance_method \"Padrino::Generators::Actions#fetch_project_name (method)\"), [\\#in_app_root?](actions#in_app_root%3F-instance_method \"Padrino::Generators::Actions#in_app_root? (method)\"), [\\#include_component_module_for](actions#include_component_module_for-instance_method \"Padrino::Generators::Actions#include_component_module_for (method)\"), [\\#initializer](actions#initializer-instance_method \"Padrino::Generators::Actions#initializer (method)\"), [\\#inject_into_file](actions#inject_into_file-instance_method \"Padrino::Generators::Actions#inject_into_file (method)\"), [\\#insert_hook](actions#insert_hook-instance_method \"Padrino::Generators::Actions#insert_hook (method)\"), [\\#insert_into_gemfile](actions#insert_into_gemfile-instance_method \"Padrino::Generators::Actions#insert_into_gemfile (method)\"), [\\#insert_middleware](actions#insert_middleware-instance_method \"Padrino::Generators::Actions#insert_middleware (method)\"), [\\#invalid_fields](actions#invalid_fields-instance_method \"Padrino::Generators::Actions#invalid_fields (method)\"), [\\#keep_file](actions#keep_file-instance_method \"Padrino::Generators::Actions#keep_file (method)\"), [\\#middleware](actions#middleware-instance_method \"Padrino::Generators::Actions#middleware (method)\"), [\\#recognize_path](actions#recognize_path-instance_method \"Padrino::Generators::Actions#recognize_path (method)\"), [\\#require_contrib](actions#require_contrib-instance_method \"Padrino::Generators::Actions#require_contrib (method)\"), [\\#require_dependencies](actions#require_dependencies-instance_method \"Padrino::Generators::Actions#require_dependencies (method)\"), [\\#resolve_valid_choice](actions#resolve_valid_choice-instance_method \"Padrino::Generators::Actions#resolve_valid_choice (method)\"), [\\#retrieve_component_config](actions#retrieve_component_config-instance_method \"Padrino::Generators::Actions#retrieve_component_config (method)\"), [\\#run_bundler](actions#run_bundler-instance_method \"Padrino::Generators::Actions#run_bundler (method)\"), [\\#store_component_choice](actions#store_component_choice-instance_method \"Padrino::Generators::Actions#store_component_choice (method)\"), [\\#store_component_config](actions#store_component_config-instance_method \"Padrino::Generators::Actions#store_component_config (method)\"), [\\#test?](actions#test%3F-instance_method \"Padrino::Generators::Actions#test? (method)\"), [\\#tiny?](actions#tiny%3F-instance_method \"Padrino::Generators::Actions#tiny? (method)\"), [\\#valid_choice?](actions#valid_choice%3F-instance_method \"Padrino::Generators::Actions#valid_choice? (method)\"), [\\#valid_constant?](actions#valid_constant%3F-instance_method \"Padrino::Generators::Actions#valid_constant? (method)\"), [\\#validate_namespace](actions#validate_namespace-instance_method \"Padrino::Generators::Actions#validate_namespace (method)\")\n\n## Class Method Details\n\n### .banner ⇒ Object\n\n### .source_root ⇒ Object\n\n## Instance Method Details\n\n### \\#create_task ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Task](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Task)"
- name: Padrino::Generators::Task#create_task
  id: padrino/generators/task#create_task-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Generators::Task
  description: "### \\#create_task ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Task](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Task)"
- name: Padrino::Generators::Task.banner
  id: padrino/generators/task#banner-class_method
  summary: null
  belongs_to: Padrino::Generators::Task
  description: '### .banner ⇒ Object'
- name: Padrino::Generators::Task.source_root
  id: padrino/generators/task#source_root-class_method
  summary: null
  belongs_to: Padrino::Generators::Task
  description: |-
    ### .source_root ⇒ Object

    ## Instance Method Details
- name: Padrino::Helpers
  id: padrino/helpers
  summary: This component provides a variety of view helpers related to html markup generation
  description: "# Module: Padrino::Helpers\n\n## Overview\n\nThis component provides a variety of view helpers related to html markup generation. There are helpers for generating tags, forms, links, images, and more. Most of the basic methods should be very familiar to anyone who has used rails view helpers.\n\n## Defined Under Namespace\n\n**Modules:** [AssetTagHelpers](helpers/assettaghelpers \"Padrino::Helpers::AssetTagHelpers (module)\"), [FormBuilder](helpers/formbuilder \"Padrino::Helpers::FormBuilder (module)\"), [FormHelpers](helpers/formhelpers \"Padrino::Helpers::FormHelpers (module)\"), [FormatHelpers](helpers/formathelpers \"Padrino::Helpers::FormatHelpers (module)\"), [NumberHelpers](helpers/numberhelpers \"Padrino::Helpers::NumberHelpers (module)\"), [OutputHelpers](helpers/outputhelpers \"Padrino::Helpers::OutputHelpers (module)\"), [RenderHelpers](helpers/renderhelpers \"Padrino::Helpers::RenderHelpers (module)\"), [TagHelpers](helpers/taghelpers \"Padrino::Helpers::TagHelpers (module)\"), [TranslationHelpers](helpers/translationhelpers \"Padrino::Helpers::TranslationHelpers (module)\")\n\n## Class Method Summary\n\n- [`.`**`registered`**`(app) ⇒ Object`](helpers#registered-class_method \"registered (class method)\") Registers these helpers into your application:.\n\n## Class Method Details\n\n### .registered(app) ⇒ Object\n\nRegisters these helpers into your application:\n\n``` ruby\nPadrino::Helpers::OutputHelpers\nPadrino::Helpers::TagHelpers\nPadrino::Helpers::AssetTagHelpers\nPadrino::Helpers::FormHelpers\nPadrino::Helpers::FormatHelpers\nPadrino::Helpers::RenderHelpers\nPadrino::Helpers::NumberHelpers\n```\n\n#### Examples:\n\nRegister the helper module\n\n``` ruby\nrequire 'padrino-helpers'\nclass Padrino::Application\n  register Padrino::Helpers\nend\n```\n\n#### Parameters:\n\n- `app` (`Sinatra::Application`) — The specified Padrino application.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers)"
- name: Padrino::Helpers.registered
  id: padrino/helpers#registered-class_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Helpers
  description: "### .registered(app) ⇒ Object\n\nRegisters these helpers into your application:\n\n``` ruby\nPadrino::Helpers::OutputHelpers\nPadrino::Helpers::TagHelpers\nPadrino::Helpers::AssetTagHelpers\nPadrino::Helpers::FormHelpers\nPadrino::Helpers::FormatHelpers\nPadrino::Helpers::RenderHelpers\nPadrino::Helpers::NumberHelpers\n```\n\n#### Examples:\n\nRegister the helper module\n\n``` ruby\nrequire 'padrino-helpers'\nclass Padrino::Application\n  register Padrino::Helpers\nend\n```\n\n#### Parameters:\n\n- `app`(`Sinatra::Application`) — The specified Padrino application.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers)"
- name: Padrino::Helpers::AssetTagHelpers
  id: padrino/helpers/assettaghelpers
  summary: Helpers related to producing assets (images, stylesheets, js, etc) within templates
  description: "# Module: Padrino::Helpers::AssetTagHelpers\n\n## Overview\n\nHelpers related to producing assets (images, stylesheets, js, etc) within templates.\n\n## Constant Summary [collapse](#)\n\nAPPEND_ASSET_EXTENSIONS =  \n``` ruby\n[\"js\", \"css\"]\n```\n\nABSOLUTE_URL_PATTERN =  \n``` ruby\n%r{^(https?://)}\n```\n\nASSET_FOLDERS =  \n``` ruby\n{\n  :js => 'javascripts',\n  :css => 'stylesheets',\n}\n```\n\n## Instance Method Summary\n\n- [`#`**`asset_path`**`(kind, source = nil) ⇒ String`](assettaghelpers#asset_path-instance_method \"#asset_path (instance method)\") Returns the path to the specified asset (css or javascript).\n- [`#`**`favicon_tag`**`(source, options = {}) ⇒ String`](assettaghelpers#favicon_tag-instance_method \"#favicon_tag (instance method)\") Generates a favicon link.\n- [`#`**`feed_tag`**`(mime, url, options = {}) ⇒ String`](assettaghelpers#feed_tag-instance_method \"#feed_tag (instance method)\") Creates a link tag that browsers and news readers can use to auto-detect an RSS or ATOM feed.\n- [`#`**`flash_tag`**`(*args) ⇒ String`](assettaghelpers#flash_tag-instance_method \"#flash_tag (instance method)\") Creates a div to display the flash of given type if it exists.\n- [`#`**`image_alt`**`(src) ⇒ String`](assettaghelpers#image_alt-instance_method \"#image_alt (instance method)\") Returns a string suitable for an alt attribute of img element.\n- [`#`**`image_path`**`(src) ⇒ String`](assettaghelpers#image_path-instance_method \"#image_path (instance method)\") Returns the path to the image, either relative or absolute.\n- [`#`**`image_tag`**`(url, options = {}) ⇒ String`](assettaghelpers#image_tag-instance_method \"#image_tag (instance method)\") Creates an image element with given url and options.\n- [`#`**`javascript_include_tag`**`(*sources, options = {}) ⇒ String`](assettaghelpers#javascript_include_tag-instance_method \"#javascript_include_tag (instance method)\") Returns a html script tag for each of the sources provided.\n- [`#`**`link_to`**`(*args, &block) ⇒ String`](assettaghelpers#link_to-instance_method \"#link_to (instance method)\") Creates a link element with given name, url and options.\n- [`#`**`mail_to`**`(email, caption = nil, mail_options = {}) ⇒ String`](assettaghelpers#mail_to-instance_method \"#mail_to (instance method)\") Creates a mail link element with given name and caption.\n- [`#`**`meta_tag`**`(content, options = {}) ⇒ String`](assettaghelpers#meta_tag-instance_method \"#meta_tag (instance method)\") Creates a meta element with the content and given options.\n- [`#`**`stylesheet_link_tag`**`(*sources, options = {}) ⇒ String`](assettaghelpers#stylesheet_link_tag-instance_method \"#stylesheet_link_tag (instance method)\") Returns a html link tag for each of the sources provided.\n\n## Instance Method Details\n\n### \\#asset_path(kind, source = nil) ⇒ String\n\nReturns the path to the specified asset (css or javascript).\n\n#### Examples:\n\n``` ruby\n# Generates: /javascripts/application.js?1269008689\nasset_path :js, :application\n\n# Generates: /stylesheets/application.css?1269008689\nasset_path :css, :application\n\n# Generates: /images/example.jpg?1269008689\nasset_path :images, 'example.jpg'\n\n# Generates: /uploads/file.ext?1269008689\nasset_path 'uploads/file.ext'\n```\n\n#### Parameters:\n\n- `kind` ([`String`](../../string \"String (class)\")) — The kind of asset (i.e :images, :js, :css).\n- `source` ([`String`](../../string \"String (class)\")) *(defaults to: `nil`)* — The path to the asset (relative or absolute).\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Path for the asset given the `kind` and `source`.\n\n### \\#favicon_tag(source, options = {}) ⇒ String\n\nGenerates a favicon link. Looks inside images folder\n\n#### Examples:\n\n``` ruby\nfavicon_tag 'favicon.png'\nfavicon_tag 'icons/favicon.png'\n# or override some options\nfavicon_tag 'favicon.png', :type => 'image/ico'\n```\n\n#### Parameters:\n\n- `source` ([`String`](../../string \"String (class)\")) — The source image path for the favicon link tag.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the favicon link tag.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The favicon link html tag with specified `options`.\n\n### \\#feed_tag(mime, url, options = {}) ⇒ String\n\nCreates a link tag that browsers and news readers can use to auto-detect an RSS or ATOM feed.\n\n@[param](hash) options\n\n``` ruby\nThe options for the feed tag.\n```\n\n#### Examples:\n\n``` ruby\nfeed_tag :atom, url(:blog, :posts, :format => :atom), :title => \"ATOM\"\n# Generates: <link type=\"application/atom+xml\" rel=\"alternate\" href=\"/blog/posts.atom\" title=\"ATOM\" />\nfeed_tag :rss, url(:blog, :posts, :format => :rss)\n# Generates: <link type=\"application/rss+xml\" rel=\"alternate\" href=\"/blog/posts.rss\" title=\"rss\" />\n```\n\n#### Parameters:\n\n- `mime` (`Symbol`) — The mime type of the feed (i.e :atom or :rss).\n- `url` ([`String`](../../string \"String (class)\")) — The url for the feed tag to reference.\n- `options` (`Hash`) *(defaults to: `{}`)* — a customizable set of options\n\n#### Options Hash (`options`):\n\n- `:rel` ([`String`](../../string \"String (class)\")) — default: `\"alternate\"` — Specify the relation of this link.\n- `:type` ([`String`](../../string \"String (class)\")) — Override the auto-generated mime type.\n- `:title` ([`String`](../../string \"String (class)\")) — Specify the title of the link, defaults to the type.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Feed link html tag with specified `options`.\n\n### \\#flash_tag(\\*args) ⇒ String\n\nCreates a div to display the flash of given type if it exists.\n\n#### Examples:\n\n``` ruby\nflash_tag(:notice, :id => 'flash-notice')\n# Generates: <div class=\"notice\" id=\"flash-notice\">flash-notice</div>\nflash_tag(:error, :success)\n# Generates: <div class=\"error\">flash-error</div>\n# <div class=\"success\">flash-success</div>\n```\n\n#### Parameters:\n\n- `kind` (`Symbol`) — The type of flash to display in the tag.\n- `options` (`Hash`) — The html options for this section. use :bootstrap =\\> true to support Twitter's bootstrap dismiss alert button.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Flash tag html with specified `options`.\n\n### \\#image_alt(src) ⇒ String\n\nReturns a string suitable for an alt attribute of img element.\n\n#### Parameters:\n\n- `src` ([`String`](../../string \"String (class)\")) — The source path for the image tag.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The alt attribute value.\n\n### \\#image_path(src) ⇒ String\n\nReturns the path to the image, either relative or absolute. We search it in your `appname.public_folder` like app/public/images for inclusion. You can provide also a full path.\n\n#### Examples:\n\n``` ruby\n# Generates: /images/foo.jpg?1269008689\nimage_path(\"foo.jpg\")\n```\n\n#### Parameters:\n\n- `src` ([`String`](../../string \"String (class)\")) — The path to the image file (relative or absolute).\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Path to an image given the `kind` and `source`.\n\n### \\#image_tag(url, options = {}) ⇒ String\n\nCreates an image element with given url and options.\n\n#### Examples:\n\n``` ruby\nimage_tag('icons/avatar.png')\n```\n\n#### Parameters:\n\n- `url` ([`String`](../../string \"String (class)\")) — The source path for the image tag.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the image tag.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Image html tag with `url` and specified `options`.\n\n### \\#javascript_include_tag(\\*sources, options = {}) ⇒ String\n\nReturns a html script tag for each of the sources provided. You can pass in the filename without extension or a symbol and we search it in your `appname.public_folder` like app/public/javascript for inclusion. You can provide also a full path.\n\n#### Examples:\n\n``` ruby\njavascript_include_tag 'application', :extjs\n```\n\n#### Parameters:\n\n- `sources` (`Array<`[`String`](../../string \"String (class)\")`>`) — Splat of js source paths\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the script tag\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Script tag for `sources` with specified `options`.\n\n### \\#link_to(caption, url, options = {}) ⇒ String \\#link_to(url, options = {}, &block) ⇒ String\n\nCreates a link element with given name, url and options.\n\nNote that you can pass :`if` or :`unless` conditions, but if you provide :current as condition padrino return true/false if the request.path_info match the given url.\n\n#### Examples:\n\n``` ruby\nlink_to('click me', '/dashboard', :class => 'linky')\n# Generates <a class=\"linky\" href=\"/dashboard\">click me</a>\n\nlink_to('click me', '/dashboard', :remote => true)\n# Generates <a href=\"/dashboard\" data-remote=\"true\">click me</a>\n\nlink_to('click me', '/dashboard', :method => :delete)\n# Generates <a href=\"/dashboard\" data-method=\"delete\" rel=\"nofollow\">click me</a>\n\nlink_to('/dashboard', :class => 'blocky') { 'click me' }\n# Generates <a class=\"blocky\" href=\"/dashboard\">click me</a>\n```\n\n#### Overloads:\n\n- ### \\#link_to(caption, url, options = {}) ⇒ String\n\n  #### Parameters:\n\n  - `caption` ([`String`](../../string \"String (class)\")) — The text caption.\n  - `url` ([`String`](../../string \"String (class)\")) — The url href.\n  - `options` (`Hash`) *(defaults to: `{}`)* — The html options.\n\n- ### \\#link_to(url, options = {}, &block) ⇒ String\n\n  #### Parameters:\n\n  - `url` ([`String`](../../string \"String (class)\")) — The url href.\n  - `options` (`Hash`) *(defaults to: `{}`)* — The html options.\n  - `block` (`Proc`) — The link content.\n\n#### Parameters:\n\n- `options` (`Hash`) — a customizable set of options\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Link tag html with specified `options`.\n\n### \\#mail_to(email, caption = nil, mail_options = {}) ⇒ String\n\nCreates a mail link element with given name and caption.\n\n#### Examples:\n\n``` ruby\nmail_to \"me@demo.com\"\n# Generates: <a href=\"mailto:me@demo.com\">me@demo.com</a>\n\nmail_to \"me@demo.com\", \"My Email\"\n# Generates: <a href=\"mailto:me@demo.com\">My Email</a>\n```\n\n#### Parameters:\n\n- `email` ([`String`](../../string \"String (class)\")) — The email address for the link.\n- `caption` ([`String`](../../string \"String (class)\")) *(defaults to: `nil`)* — The caption for the link.\n- `mail_options` (`Hash`) *(defaults to: `{}`)* — The options for the mail link. Accepts html options.\n\n#### Options Hash (`mail_options`):\n\n- `cc` ([`String`](../../string \"String (class)\")) — The cc recipients.\n- `bcc` ([`String`](../../string \"String (class)\")) — The bcc recipients.\n- `subject` ([`String`](../../string \"String (class)\")) — The subject line.\n- `body` ([`String`](../../string \"String (class)\")) — The email body.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Mail link html tag with specified `options`.\n\n### \\#meta_tag(content, options = {}) ⇒ String\n\nCreates a meta element with the content and given options.\n\n#### Examples:\n\n``` ruby\nmeta_tag \"weblog,news\", :name => \"keywords\"\n# Generates: <meta name=\"keywords\" content=\"weblog,news\" />\n\nmeta_tag \"text/html; charset=UTF-8\", 'http-equiv' => \"Content-Type\"\n# Generates: <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n```\n\n#### Parameters:\n\n- `content` ([`String`](../../string \"String (class)\")) — The content for the meta tag.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the meta tag.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Meta html tag with specified `options`.\n\n### \\#stylesheet_link_tag(\\*sources, options = {}) ⇒ String\n\nReturns a html link tag for each of the sources provided. You can pass in the filename without extension or a symbol and we search it in your `appname.public_folder` like app/public/stylesheets for inclusion. You can provide also a full path.\n\n#### Examples:\n\n``` ruby\nstylesheet_link_tag 'style', 'application', 'layout'\n```\n\n#### Parameters:\n\n- `sources` (`Array<`[`String`](../../string \"String (class)\")`>`) — Splat of css source paths\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the link tag\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Stylesheet link html tag for `sources` with specified `options`.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/AssetTagHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/AssetTagHelpers)"
- name: Padrino::Helpers::AssetTagHelpers#asset_path
  id: padrino/helpers/assettaghelpers#asset_path-instance_method
  summary: Returns the path to the specified asset (css or javascript)
  belongs_to: Padrino::Helpers::AssetTagHelpers
  description: |-
    ### \#asset_path(kind, source = nil) ⇒ String

    Returns the path to the specified asset (css or javascript).

    #### Examples:

    ``` ruby
    # Generates: /javascripts/application.js?1269008689
    asset_path :js, :application

    # Generates: /stylesheets/application.css?1269008689
    asset_path :css, :application

    # Generates: /images/example.jpg?1269008689
    asset_path :images, 'example.jpg'

    # Generates: /uploads/file.ext?1269008689
    asset_path 'uploads/file.ext'
    ```

    #### Parameters:

    - `kind`([`String`](../../string "String (class)")) — The kind of asset (i.e :images, :js, :css).
    - `source`([`String`](../../string "String (class)"))*(defaults to: `nil`)* — The path to the asset (relative or absolute).

    #### Returns:

    - ([`String`](../../string "String (class)")) — Path for the asset given the `kind` and `source`.
- name: Padrino::Helpers::AssetTagHelpers#favicon_tag
  id: padrino/helpers/assettaghelpers#favicon_tag-instance_method
  summary: Generates a favicon link
  belongs_to: Padrino::Helpers::AssetTagHelpers
  description: |-
    ### \#favicon_tag(source, options = {}) ⇒ String

    Generates a favicon link. Looks inside images folder

    #### Examples:

    ``` ruby
    favicon_tag 'favicon.png'
    favicon_tag 'icons/favicon.png'
    # or override some options
    favicon_tag 'favicon.png', :type => 'image/ico'
    ```

    #### Parameters:

    - `source`([`String`](../../string "String (class)")) — The source image path for the favicon link tag.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the favicon link tag.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The favicon link html tag with specified `options`.
- name: Padrino::Helpers::AssetTagHelpers#feed_tag
  id: padrino/helpers/assettaghelpers#feed_tag-instance_method
  summary: Creates a link tag that browsers and news readers can use to auto-detect an RSS or ATOM feed
  belongs_to: Padrino::Helpers::AssetTagHelpers
  description: |-
    ### \#feed_tag(mime, url, options = {}) ⇒ String

    Creates a link tag that browsers and news readers can use to auto-detect an RSS or ATOM feed.

    @[param](hash) options

    ``` ruby
    The options for the feed tag.
    ```

    #### Examples:

    ``` ruby
    feed_tag :atom, url(:blog, :posts, :format => :atom), :title => "ATOM"
    # Generates: <link type="application/atom+xml" rel="alternate" href="/blog/posts.atom" title="ATOM" />
    feed_tag :rss, url(:blog, :posts, :format => :rss)
    # Generates: <link type="application/rss+xml" rel="alternate" href="/blog/posts.rss" title="rss" />
    ```

    #### Parameters:

    - `mime`(`Symbol`) — The mime type of the feed (i.e :atom or :rss).
    - `url`([`String`](../../string "String (class)")) — The url for the feed tag to reference.
    - `options`(`Hash`)*(defaults to: `{}`)* — a customizable set of options

    #### Options Hash (`options`):

    - `:rel`([`String`](../../string "String (class)")) — default: `"alternate"` — Specify the relation of this link.
    - `:type`([`String`](../../string "String (class)")) — Override the auto-generated mime type.
    - `:title`([`String`](../../string "String (class)")) — Specify the title of the link, defaults to the type.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Feed link html tag with specified `options`.
- name: Padrino::Helpers::AssetTagHelpers#flash_tag
  id: padrino/helpers/assettaghelpers#flash_tag-instance_method
  summary: Creates a div to display the flash of given type if it exists
  belongs_to: Padrino::Helpers::AssetTagHelpers
  description: |-
    ### \#flash_tag(\*args) ⇒ String

    Creates a div to display the flash of given type if it exists.

    #### Examples:

    ``` ruby
    flash_tag(:notice, :id => 'flash-notice')
    # Generates: <div class="notice" id="flash-notice">flash-notice</div>
    flash_tag(:error, :success)
    # Generates: <div class="error">flash-error</div>
    # <div class="success">flash-success</div>
    ```

    #### Parameters:

    - `kind`(`Symbol`) — The type of flash to display in the tag.
    - `options`(`Hash`) — The html options for this section. use :bootstrap =\> true to support Twitter's bootstrap dismiss alert button.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Flash tag html with specified `options`.
- name: Padrino::Helpers::AssetTagHelpers#image_alt
  id: padrino/helpers/assettaghelpers#image_alt-instance_method
  summary: Returns a string suitable for an alt attribute of img element
  belongs_to: Padrino::Helpers::AssetTagHelpers
  description: |-
    ### \#image_alt(src) ⇒ String

    Returns a string suitable for an alt attribute of img element.

    #### Parameters:

    - `src`([`String`](../../string "String (class)")) — The source path for the image tag.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The alt attribute value.
- name: Padrino::Helpers::AssetTagHelpers#image_path
  id: padrino/helpers/assettaghelpers#image_path-instance_method
  summary: Returns the path to the image, either relative or absolute
  belongs_to: Padrino::Helpers::AssetTagHelpers
  description: |-
    ### \#image_path(src) ⇒ String

    Returns the path to the image, either relative or absolute. We search it in your `appname.public_folder` like app/public/images for inclusion. You can provide also a full path.

    #### Examples:

    ``` ruby
    # Generates: /images/foo.jpg?1269008689
    image_path("foo.jpg")
    ```

    #### Parameters:

    - `src`([`String`](../../string "String (class)")) — The path to the image file (relative or absolute).

    #### Returns:

    - ([`String`](../../string "String (class)")) — Path to an image given the `kind` and `source`.
- name: Padrino::Helpers::AssetTagHelpers#image_tag
  id: padrino/helpers/assettaghelpers#image_tag-instance_method
  summary: Creates an image element with given url and options
  belongs_to: Padrino::Helpers::AssetTagHelpers
  description: |-
    ### \#image_tag(url, options = {}) ⇒ String

    Creates an image element with given url and options.

    #### Examples:

    ``` ruby
    image_tag('icons/avatar.png')
    ```

    #### Parameters:

    - `url`([`String`](../../string "String (class)")) — The source path for the image tag.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the image tag.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Image html tag with `url` and specified `options`.
- name: Padrino::Helpers::AssetTagHelpers#javascript_include_tag
  id: padrino/helpers/assettaghelpers#javascript_include_tag-instance_method
  summary: Returns a html script tag for each of the sources provided
  belongs_to: Padrino::Helpers::AssetTagHelpers
  description: |-
    ### \#javascript_include_tag(\*sources, options = {}) ⇒ String

    Returns a html script tag for each of the sources provided. You can pass in the filename without extension or a symbol and we search it in your `appname.public_folder` like app/public/javascript for inclusion. You can provide also a full path.

    #### Examples:

    ``` ruby
    javascript_include_tag 'application', :extjs
    ```

    #### Parameters:

    - `sources`(`Array<`[`String`](../../string "String (class)")`>`) — Splat of js source paths
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the script tag

    #### Returns:

    - ([`String`](../../string "String (class)")) — Script tag for `sources` with specified `options`.
- name: Padrino::Helpers::AssetTagHelpers#link_to
  id: padrino/helpers/assettaghelpers#link_to-instance_method
  summary: Creates a link element with given name, url and options
  belongs_to: Padrino::Helpers::AssetTagHelpers
  description: |-
    ### \#link_to(caption, url, options = {}) ⇒ String \#link_to(url, options = {}, &block) ⇒ String

    Creates a link element with given name, url and options.

    Note that you can pass :`if` or :`unless` conditions, but if you provide :current as condition padrino return true/false if the request.path_info match the given url.

    #### Examples:

    ``` ruby
    link_to('click me', '/dashboard', :class => 'linky')
    # Generates <a class="linky" href="/dashboard">click me</a>

    link_to('click me', '/dashboard', :remote => true)
    # Generates <a href="/dashboard" data-remote="true">click me</a>

    link_to('click me', '/dashboard', :method => :delete)
    # Generates <a href="/dashboard" data-method="delete" rel="nofollow">click me</a>

    link_to('/dashboard', :class => 'blocky') { 'click me' }
    # Generates <a class="blocky" href="/dashboard">click me</a>
    ```

    #### Overloads:

    - ### \#link_to(caption, url, options = {}) ⇒ String

      #### Parameters:

      - `caption`([`String`](../../string "String (class)")) — The text caption.
      - `url`([`String`](../../string "String (class)")) — The url href.
      - `options`(`Hash`)*(defaults to: `{}`)* — The html options.

    - ### \#link_to(url, options = {}, &block) ⇒ String

      #### Parameters:

      - `url`([`String`](../../string "String (class)")) — The url href.
      - `options`(`Hash`)*(defaults to: `{}`)* — The html options.
      - `block`(`Proc`) — The link content.

    #### Parameters:

    - `options`(`Hash`) — a customizable set of options

    #### Returns:

    - ([`String`](../../string "String (class)")) — Link tag html with specified `options`.
- name: Padrino::Helpers::AssetTagHelpers#mail_to
  id: padrino/helpers/assettaghelpers#mail_to-instance_method
  summary: Creates a mail link element with given name and caption
  belongs_to: Padrino::Helpers::AssetTagHelpers
  description: |-
    ### \#mail_to(email, caption = nil, mail_options = {}) ⇒ String

    Creates a mail link element with given name and caption.

    #### Examples:

    ``` ruby
    mail_to "me@demo.com"
    # Generates: <a href="mailto:me@demo.com">me@demo.com</a>

    mail_to "me@demo.com", "My Email"
    # Generates: <a href="mailto:me@demo.com">My Email</a>
    ```

    #### Parameters:

    - `email`([`String`](../../string "String (class)")) — The email address for the link.
    - `caption`([`String`](../../string "String (class)"))*(defaults to: `nil`)* — The caption for the link.
    - `mail_options`(`Hash`)*(defaults to: `{}`)* — The options for the mail link. Accepts html options.

    #### Options Hash (`mail_options`):

    - `cc`([`String`](../../string "String (class)")) — The cc recipients.
    - `bcc`([`String`](../../string "String (class)")) — The bcc recipients.
    - `subject`([`String`](../../string "String (class)")) — The subject line.
    - `body`([`String`](../../string "String (class)")) — The email body.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Mail link html tag with specified `options`.
- name: Padrino::Helpers::AssetTagHelpers#meta_tag
  id: padrino/helpers/assettaghelpers#meta_tag-instance_method
  summary: Creates a meta element with the content and given options
  belongs_to: Padrino::Helpers::AssetTagHelpers
  description: |-
    ### \#meta_tag(content, options = {}) ⇒ String

    Creates a meta element with the content and given options.

    #### Examples:

    ``` ruby
    meta_tag "weblog,news", :name => "keywords"
    # Generates: <meta name="keywords" content="weblog,news" />

    meta_tag "text/html; charset=UTF-8", 'http-equiv' => "Content-Type"
    # Generates: <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    ```

    #### Parameters:

    - `content`([`String`](../../string "String (class)")) — The content for the meta tag.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the meta tag.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Meta html tag with specified `options`.
- name: Padrino::Helpers::AssetTagHelpers#stylesheet_link_tag
  id: padrino/helpers/assettaghelpers#stylesheet_link_tag-instance_method
  summary: Returns a html link tag for each of the sources provided
  belongs_to: Padrino::Helpers::AssetTagHelpers
  description: "### \\#stylesheet_link_tag(\\*sources, options = {}) ⇒ String\n\nReturns a html link tag for each of the sources provided. You can pass in the filename without extension or a symbol and we search it in your `appname.public_folder` like app/public/stylesheets for inclusion. You can provide also a full path.\n\n#### Examples:\n\n``` ruby\nstylesheet_link_tag 'style', 'application', 'layout'\n```\n\n#### Parameters:\n\n- `sources`(`Array<`[`String`](../../string \"String (class)\")`>`) — Splat of css source paths\n- `options`(`Hash`)*(defaults to: `{}`)* — The html options for the link tag\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Stylesheet link html tag for `sources` with specified `options`.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/AssetTagHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/AssetTagHelpers)"
- name: Padrino::Helpers::FormatHelpers
  id: padrino/helpers/formathelpers
  summary: Helpers related to formatting or manipulating text within templates
  description: "# Module: Padrino::Helpers::FormatHelpers\n\n## Overview\n\nHelpers related to formatting or manipulating text within templates.\n\n## Instance Method Summary\n\n- [`#`**`distance_of_time_in_words`**`(from_time, to_time = 0, include_seconds = false, options = {}) ⇒ String`](formathelpers#distance_of_time_in_words-instance_method \"#distance_of_time_in_words (instance method)\") Reports the approximate distance in time between two Time or Date objects or integers as seconds.\n- [`#`**`escape_html`**`(text) ⇒ String`](formathelpers#escape_html-instance_method \"#escape_html (instance method)\")` (also: #h, #sanitize_html)` Returns escaped text to protect against malicious content.\n- [`#`**`h!`**`(text, blank_text = '&nbsp;') ⇒ String`](formathelpers#h!-instance_method \"#h! (instance method)\") Returns escaped text to protect against malicious content.\n- [`#`**`highlight`**`(text, words, options = {}) ⇒ String`](formathelpers#highlight-instance_method \"#highlight (instance method)\") Highlights one or more words everywhere in text by inserting it into a :highlighter string.\n- [`#`**`js_escape_html`**`(html_content) ⇒ String`](formathelpers#js_escape_html-instance_method \"#js_escape_html (instance method)\")` (also: #escape_javascript)` Used in xxxx.js.erb files to escape html so that it can be passed to javascript from Padrino.\n- [`#`**`pluralize`**`(count, singular, plural = nil) ⇒ String`](formathelpers#pluralize-instance_method \"#pluralize (instance method)\") Attempts to pluralize the singular word unless count is 1.\n- [`#`**`simple_format`**`(text, options = {}) ⇒ String`](formathelpers#simple_format-instance_method \"#simple_format (instance method)\") Returns text transformed into HTML using simple formatting rules.\n- [`#`**`strip_tags`**`(html) ⇒ String`](formathelpers#strip_tags-instance_method \"#strip_tags (instance method)\") Strips all HTML tags from the html.\n- [`#`**`time_ago_in_words`**`(from_time, include_seconds = false) ⇒ String`](formathelpers#time_ago_in_words-instance_method \"#time_ago_in_words (instance method)\") Like distance_of_time_in_words, but where `to_time` is fixed to `Time.now`.\n- [`#`**`truncate`**`(text, options = {}) ⇒ String`](formathelpers#truncate-instance_method \"#truncate (instance method)\") Truncates a given text after a given :length if text is longer than :length (defaults to 30).\n- [`#`**`truncate_words`**`(text, options = {}) ⇒ String`](formathelpers#truncate_words-instance_method \"#truncate_words (instance method)\") Truncates words of a given text after a given :length if number of words in text is more than :length (defaults to 30).\n- [`#`**`word_wrap`**`(text, options = {}) ⇒ String`](formathelpers#word_wrap-instance_method \"#word_wrap (instance method)\") Wraps the text into lines no longer than line_width width.\n\n## Instance Method Details\n\n### \\#distance_of_time_in_words(from_time, to_time = 0, include_seconds = false, options = {}) ⇒ String\n\nReports the approximate distance in time between two Time or Date objects or integers as seconds. Set `include_seconds` to true if you want more detailed approximations when distance \\< 1 min, 29 secs Distances are reported based on the following table:\n\n``` ruby\n0 <-> 29 secs                                                           # => less than a minute\n30 secs <-> 1 min, 29 secs                                              # => 1 minute\n1 min, 30 secs <-> 44 mins, 29 secs                                     # => [2..44] minutes\n44 mins, 30 secs <-> 89 mins, 29 secs                                   # => about 1 hour\n89 mins, 29 secs <-> 23 hrs, 59 mins, 29 secs                           # => about [2..24] hours\n23 hrs, 59 mins, 29 secs <-> 47 hrs, 59 mins, 29 secs                   # => 1 day\n47 hrs, 59 mins, 29 secs <-> 29 days, 23 hrs, 59 mins, 29 secs          # => [2..29] days\n29 days, 23 hrs, 59 mins, 30 secs <-> 59 days, 23 hrs, 59 mins, 29 secs # => about 1 month\n59 days, 23 hrs, 59 mins, 30 secs <-> 1 yr minus 1 sec                  # => [2..12] months\n1 yr <-> 1 yr, 3 months                                                 # => about 1 year\n1 yr, 3 months <-> 1 yr, 9 months                                       # => over 1 year\n1 yr, 9 months <-> 2 yr minus 1 sec                                     # => almost 2 years\n2 yrs <-> max time or date                                              # => (same rules as 1 yr)\n```\n\nWith `include_seconds` = true and the difference \\< 1 minute 29 seconds:\n\n``` ruby\n0-4   secs      # => less than 5 seconds\n5-9   secs      # => less than 10 seconds\n10-19 secs      # => less than 20 seconds\n20-39 secs      # => half a minute\n40-59 secs      # => less than a minute\n60-89 secs      # => 1 minute\n```\n\n#### Examples:\n\n``` ruby\nfrom_time = Time.now\ndistance_of_time_in_words(from_time, from_time + 50.minutes)        # => about 1 hour\ndistance_of_time_in_words(from_time, 50.minutes.from_now)           # => about 1 hour\ndistance_of_time_in_words(from_time, from_time + 15.seconds)        # => less than a minute\ndistance_of_time_in_words(from_time, from_time + 15.seconds, true)  # => less than 20 seconds\ndistance_of_time_in_words(from_time, 3.years.from_now)              # => about 3 years\ndistance_of_time_in_words(from_time, from_time + 60.hours)          # => about 3 days\ndistance_of_time_in_words(from_time, from_time + 45.seconds, true)  # => less than a minute\ndistance_of_time_in_words(from_time, from_time - 45.seconds, true)  # => less than a minute\ndistance_of_time_in_words(from_time, 76.seconds.from_now)           # => 1 minute\ndistance_of_time_in_words(from_time, from_time + 1.year + 3.days)   # => about 1 year\ndistance_of_time_in_words(from_time, from_time + 3.years + 6.months) # => over 3 years\ndistance_of_time_in_words(from_time, from_time + 4.years + 9.days + 30.minutes + 5.seconds) # => about 4 years\nto_time = Time.now + 6.years + 19.days\ndistance_of_time_in_words(from_time, to_time, true)     # => about 6 years\ndistance_of_time_in_words(to_time, from_time, true)     # => about 6 years\ndistance_of_time_in_words(Time.now, Time.now)           # => less than a minute\n```\n\n#### Parameters:\n\n- `from_time` (`Time`) — The time to be compared against `to_time` in order to approximate the distance.\n- `to_time` (`Time`) *(defaults to: `0`)* — The time to be compared against `from_time` in order to approximate the distance.\n- `include_seconds` (`Boolean`) *(defaults to: `false`)* — Set true for more detailed approximations.\n- `options` (`Hash`) *(defaults to: `{}`)* — Flags for the approximation.\n\n#### Options Hash (`options`):\n\n- `:locale` ([`String`](../../string \"String (class)\")) — The translation locale to be used for approximating the time.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The time formatted as a relative string.\n\n### \\#escape_html(text) ⇒ String Also known as: h, sanitize_html\n\nReturns escaped text to protect against malicious content.\n\n#### Examples:\n\n``` ruby\nescape_html(\"<b>Hey<b>\") => \"&lt;b&gt;Hey&lt;b;gt;\"\nh(\"Me & Bob\") => \"Me &amp; Bob\"\n```\n\n#### Parameters:\n\n- `text` ([`String`](../../string \"String (class)\")) — Unsanitized HTML string that needs to be escaped.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — HTML with escaped characters.\n\n### \\#h!(text, blank_text = '&nbsp;') ⇒ String\n\nReturns escaped text to protect against malicious content.\n\n#### Examples:\n\n``` ruby\nh!(\"Me & Bob\") => \"Me &amp; Bob\"\nh!(\"\", \"Whoops\") => \"Whoops\"\n```\n\n#### Parameters:\n\n- `text` ([`String`](../../string \"String (class)\")) — Unsanitized HTML string that needs to be escaped.\n- `blank_text` ([`String`](../../string \"String (class)\")) *(defaults to: `'&nbsp;'`)* — Text to return if escaped text is blank.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — HTML with escaped characters or the value specified if blank.\n\n### \\#highlight(text, words, options = {}) ⇒ String\n\nHighlights one or more words everywhere in text by inserting it into a :highlighter string.\n\nThe highlighter can be customized by passing :`highlighter` as a single-quoted string with 1 where the phrase is to be inserted.\n\n#### Examples:\n\n``` ruby\nhighlight('Lorem ipsum dolor sit amet', 'dolor')\n# => Lorem ipsum <strong class=\"highlight\">dolor</strong> sit amet\n\nhighlight('Lorem ipsum dolor sit amet', 'dolor', :highlighter => '<span class=\"custom\">\\1</span>')\n# => Lorem ipsum <strong class=\"custom\">dolor</strong> sit amet\n```\n\n#### Parameters:\n\n- `text` ([`String`](../../string \"String (class)\")) — The text that will be searched.\n- `words` ([`String`](../../string \"String (class)\")) — The words to be highlighted in the `text`.\n- `options` (`Hash`) *(defaults to: `{}`)* — Formatting options for the highlight.\n\n#### Options Hash (`options`):\n\n- `:highlighter` ([`String`](../../string \"String (class)\")) — default: `'<strong class=\"highlight\">\\1</strong>'` — The html pattern for wrapping the highlighted words.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The text with the words specified wrapped with highlighted spans.\n\n### \\#js_escape_html(html_content) ⇒ String Also known as: escape_javascript\n\nUsed in xxxx.js.erb files to escape html so that it can be passed to javascript from Padrino.\n\n#### Examples:\n\n``` ruby\njs_escape_html(\"<h1>Hey</h1>\")\n```\n\n#### Parameters:\n\n- `html` ([`String`](../../string \"String (class)\")) — The HTML content to be escaped into javascript compatible format.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html escaped for javascript passing.\n\n### \\#pluralize(count, singular, plural = nil) ⇒ String\n\nAttempts to pluralize the singular word unless count is 1. If plural is supplied, it will use that when count is \\> 1, otherwise it will use inflector to determine the plural form.\n\n#### Examples:\n\n``` ruby\npluralize(2, 'person') => '2 people'\n```\n\n#### Parameters:\n\n- `count` (`Integer`) — The count which determines pluralization.\n- `singular` ([`String`](../../string \"String (class)\")) — The word to be pluralized if appropriate based on `count`.\n- `plural` ([`String`](../../string \"String (class)\")) *(defaults to: `nil`)* — Explicit pluralized word to be used; if not specified uses inflector.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The properly pluralized word.\n\n### \\#simple_format(text, options = {}) ⇒ String\n\nReturns text transformed into HTML using simple formatting rules. Two or more consecutive newlines(nn) are considered as a paragraph and wrapped in \\<p\\> or your own tags. One newline (n) is considered as a linebreak and a \\<br /\\> tag is appended. This method does not remove the newlines from the text.\n\n#### Examples:\n\n``` ruby\nsimple_format(\"hello\\nworld\") # => \"<p>hello<br/>world</p>\"\nsimple_format(\"hello\\nworld\", :tag => :div, :class => :foo) # => \"<div class=\"foo\">hello<br/>world</div>\"\n```\n\n#### Parameters:\n\n- `text` ([`String`](../../string \"String (class)\")) — The simple text to be formatted.\n- `options` (`Hash`) *(defaults to: `{}`)* — Formatting options for the text. Can accept html options for the wrapper tag.\n\n#### Options Hash (`options`):\n\n- `:tag` (`Symbol`) — default: `p` — The html tag to use for formatting newlines.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The text formatted as simple HTML.\n\n### \\#strip_tags(html) ⇒ String\n\nStrips all HTML tags from the html.\n\n#### Examples:\n\n``` ruby\nstrip_tags(\"<b>Hey</b>\") => \"Hey\"\n```\n\n#### Parameters:\n\n- `html` ([`String`](../../string \"String (class)\")) — The HTML for which to strip tags.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — HTML with tags stripped.\n\n### \\#time_ago_in_words(from_time, include_seconds = false) ⇒ String\n\nLike distance_of_time_in_words, but where `to_time` is fixed to `Time.now`.\n\n#### Examples:\n\n``` ruby\ntime_ago_in_words(3.minutes.from_now)  # => 3 minutes\ntime_ago_in_words(Time.now - 15.hours) # => 15 hours\ntime_ago_in_words(Time.now)            # => less than a minute\n```\n\n#### Parameters:\n\n- `from_time` (`Time`) — The time to be compared against now in order to approximate the distance.\n- `include_seconds` (`Boolean`) *(defaults to: `false`)* — Set true for more detailed approximations.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The time formatted as a relative string.\n\n### \\#truncate(text, options = {}) ⇒ String\n\nTruncates a given text after a given :length if text is longer than :length (defaults to 30). The last characters will be replaced with the :omission (defaults to “…”) for a total length not exceeding :length.\n\n#### Examples:\n\n``` ruby\ntruncate(\"Once upon a time in a world far far away\", :length => 8) => \"Once upon...\"\n```\n\n#### Parameters:\n\n- `text` ([`String`](../../string \"String (class)\")) — The text to be truncated.\n- `options` (`Hash`) *(defaults to: `{}`)* — Formatting options for the truncation.\n\n#### Options Hash (`options`):\n\n- `:length` (`Integer`) — default: `30` — The number of characters before truncation occurs.\n- `:omission` ([`String`](../../string \"String (class)\")) — default: `\"...\"` — The characters that are placed after the truncated text.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The text truncated after the given number of characters.\n\n### \\#truncate_words(text, options = {}) ⇒ String\n\nTruncates words of a given text after a given :length if number of words in text is more than :length (defaults to 30). The last words will be replaced with the :omission (defaults to “…”) for a total number of words not exceeding :length.\n\n#### Examples:\n\n``` ruby\ntruncate_words(\"Once upon a time in a world far far away\", :length => 8) => \"Once upon a time in a world far...\"\n```\n\n#### Parameters:\n\n- `text` ([`String`](../../string \"String (class)\")) — The text to be truncated.\n- `options` (`Hash`) *(defaults to: `{}`)* — Formatting options for the truncation.\n\n#### Options Hash (`options`):\n\n- `:length` (`Integer`) — default: `30` — The number of words before truncation occurs.\n- `:omission` ([`String`](../../string \"String (class)\")) — default: `\"...\"` — The characters that are placed after the truncated text.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The text truncated after the given number of words.\n\n### \\#word_wrap(text, options = {}) ⇒ String\n\nWraps the text into lines no longer than line_width width. This method breaks on the first whitespace character that does not exceed line_width (which is 80 by default).\n\n#### Examples:\n\n``` ruby\nword_wrap('Once upon a time', :line_width => 8) => \"Once upon\\na time\"\n```\n\n#### Parameters:\n\n- `text` ([`String`](../../string \"String (class)\")) — The text to be wrapped.\n- `options` (`Hash`) *(defaults to: `{}`)* — Formatting options for the wrapping.\n\n#### Options Hash (`options`):\n\n- `:line_width` (`Integer`) — default: `80` — The line width before a wrap should occur.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The text with line wraps for lines longer then `line_width`.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormatHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormatHelpers)"
- name: Padrino::Helpers::FormatHelpers#distance_of_time_in_words
  id: padrino/helpers/formathelpers#distance_of_time_in_words-instance_method
  summary: Reports the approximate distance in time between two Time or Date objects or integers as seconds
  belongs_to: Padrino::Helpers::FormatHelpers
  description: |-
    ### \#distance_of_time_in_words(from_time, to_time = 0, include_seconds = false, options = {}) ⇒ String

    Reports the approximate distance in time between two Time or Date objects or integers as seconds. Set `include_seconds` to true if you want more detailed approximations when distance \< 1 min, 29 secs Distances are reported based on the following table:

    ``` ruby
    0 <-> 29 secs                                                           # => less than a minute
    30 secs <-> 1 min, 29 secs                                              # => 1 minute
    1 min, 30 secs <-> 44 mins, 29 secs                                     # => [2..44] minutes
    44 mins, 30 secs <-> 89 mins, 29 secs                                   # => about 1 hour
    89 mins, 29 secs <-> 23 hrs, 59 mins, 29 secs                           # => about [2..24] hours
    23 hrs, 59 mins, 29 secs <-> 47 hrs, 59 mins, 29 secs                   # => 1 day
    47 hrs, 59 mins, 29 secs <-> 29 days, 23 hrs, 59 mins, 29 secs          # => [2..29] days
    29 days, 23 hrs, 59 mins, 30 secs <-> 59 days, 23 hrs, 59 mins, 29 secs # => about 1 month
    59 days, 23 hrs, 59 mins, 30 secs <-> 1 yr minus 1 sec                  # => [2..12] months
    1 yr <-> 1 yr, 3 months                                                 # => about 1 year
    1 yr, 3 months <-> 1 yr, 9 months                                       # => over 1 year
    1 yr, 9 months <-> 2 yr minus 1 sec                                     # => almost 2 years
    2 yrs <-> max time or date                                              # => (same rules as 1 yr)
    ```

    With `include_seconds` = true and the difference \< 1 minute 29 seconds:

    ``` ruby
    0-4   secs      # => less than 5 seconds
    5-9   secs      # => less than 10 seconds
    10-19 secs      # => less than 20 seconds
    20-39 secs      # => half a minute
    40-59 secs      # => less than a minute
    60-89 secs      # => 1 minute
    ```

    #### Examples:

    ``` ruby
    from_time = Time.now
    distance_of_time_in_words(from_time, from_time + 50.minutes)        # => about 1 hour
    distance_of_time_in_words(from_time, 50.minutes.from_now)           # => about 1 hour
    distance_of_time_in_words(from_time, from_time + 15.seconds)        # => less than a minute
    distance_of_time_in_words(from_time, from_time + 15.seconds, true)  # => less than 20 seconds
    distance_of_time_in_words(from_time, 3.years.from_now)              # => about 3 years
    distance_of_time_in_words(from_time, from_time + 60.hours)          # => about 3 days
    distance_of_time_in_words(from_time, from_time + 45.seconds, true)  # => less than a minute
    distance_of_time_in_words(from_time, from_time - 45.seconds, true)  # => less than a minute
    distance_of_time_in_words(from_time, 76.seconds.from_now)           # => 1 minute
    distance_of_time_in_words(from_time, from_time + 1.year + 3.days)   # => about 1 year
    distance_of_time_in_words(from_time, from_time + 3.years + 6.months) # => over 3 years
    distance_of_time_in_words(from_time, from_time + 4.years + 9.days + 30.minutes + 5.seconds) # => about 4 years
    to_time = Time.now + 6.years + 19.days
    distance_of_time_in_words(from_time, to_time, true)     # => about 6 years
    distance_of_time_in_words(to_time, from_time, true)     # => about 6 years
    distance_of_time_in_words(Time.now, Time.now)           # => less than a minute
    ```

    #### Parameters:

    - `from_time`(`Time`) — The time to be compared against `to_time` in order to approximate the distance.
    - `to_time`(`Time`)*(defaults to: `0`)* — The time to be compared against `from_time` in order to approximate the distance.
    - `include_seconds`(`Boolean`)*(defaults to: `false`)* — Set true for more detailed approximations.
    - `options`(`Hash`)*(defaults to: `{}`)* — Flags for the approximation.

    #### Options Hash (`options`):

    - `:locale`([`String`](../../string "String (class)")) — The translation locale to be used for approximating the time.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The time formatted as a relative string.
- name: Padrino::Helpers::FormatHelpers#escape_html
  id: padrino/helpers/formathelpers#escape_html-instance_method
  summary: Returns escaped text to protect against malicious content
  belongs_to: Padrino::Helpers::FormatHelpers
  description: |-
    ### \#escape_html(text) ⇒ String Also known as: h, sanitize_html

    Returns escaped text to protect against malicious content.

    #### Examples:

    ``` ruby
    escape_html("<b>Hey<b>") => "&lt;b&gt;Hey&lt;b;gt;"
    h("Me & Bob") => "Me &amp; Bob"
    ```

    #### Parameters:

    - `text`([`String`](../../string "String (class)")) — Unsanitized HTML string that needs to be escaped.

    #### Returns:

    - ([`String`](../../string "String (class)")) — HTML with escaped characters.
- name: Padrino::Helpers::FormatHelpers#h!
  id: padrino/helpers/formathelpers#h!-instance_method
  summary: Returns escaped text to protect against malicious content
  belongs_to: Padrino::Helpers::FormatHelpers
  description: |-
    ### \#h!(text, blank_text = '&nbsp;') ⇒ String

    Returns escaped text to protect against malicious content.

    #### Examples:

    ``` ruby
    h!("Me & Bob") => "Me &amp; Bob"
    h!("", "Whoops") => "Whoops"
    ```

    #### Parameters:

    - `text`([`String`](../../string "String (class)")) — Unsanitized HTML string that needs to be escaped.
    - `blank_text`([`String`](../../string "String (class)"))*(defaults to: `'&nbsp;'`)* — Text to return if escaped text is blank.

    #### Returns:

    - ([`String`](../../string "String (class)")) — HTML with escaped characters or the value specified if blank.
- name: Padrino::Helpers::FormatHelpers#highlight
  id: padrino/helpers/formathelpers#highlight-instance_method
  summary: Highlights one or more words everywhere in text by inserting it into a :highlighter string
  belongs_to: Padrino::Helpers::FormatHelpers
  description: |-
    ### \#highlight(text, words, options = {}) ⇒ String

    Highlights one or more words everywhere in text by inserting it into a :highlighter string.

    The highlighter can be customized by passing :`highlighter` as a single-quoted string with 1 where the phrase is to be inserted.

    #### Examples:

    ``` ruby
    highlight('Lorem ipsum dolor sit amet', 'dolor')
    # => Lorem ipsum <strong class="highlight">dolor</strong> sit amet

    highlight('Lorem ipsum dolor sit amet', 'dolor', :highlighter => '<span class="custom">\1</span>')
    # => Lorem ipsum <strong class="custom">dolor</strong> sit amet
    ```

    #### Parameters:

    - `text`([`String`](../../string "String (class)")) — The text that will be searched.
    - `words`([`String`](../../string "String (class)")) — The words to be highlighted in the `text`.
    - `options`(`Hash`)*(defaults to: `{}`)* — Formatting options for the highlight.

    #### Options Hash (`options`):

    - `:highlighter`([`String`](../../string "String (class)")) — default: `'<strong class="highlight">\1</strong>'` — The html pattern for wrapping the highlighted words.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The text with the words specified wrapped with highlighted spans.
- name: Padrino::Helpers::FormatHelpers#js_escape_html
  id: padrino/helpers/formathelpers#js_escape_html-instance_method
  summary: Used in xxxx.js.erb files to escape html so that it can be passed to javascript from Padrino
  belongs_to: Padrino::Helpers::FormatHelpers
  description: |-
    ### \#js_escape_html(html_content) ⇒ String Also known as: escape_javascript

    Used in xxxx.js.erb files to escape html so that it can be passed to javascript from Padrino.

    #### Examples:

    ``` ruby
    js_escape_html("<h1>Hey</h1>")
    ```

    #### Parameters:

    - `html`([`String`](../../string "String (class)")) — The HTML content to be escaped into javascript compatible format.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html escaped for javascript passing.
- name: Padrino::Helpers::FormatHelpers#pluralize
  id: padrino/helpers/formathelpers#pluralize-instance_method
  summary: Attempts to pluralize the singular word unless count is 1
  belongs_to: Padrino::Helpers::FormatHelpers
  description: |-
    ### \#pluralize(count, singular, plural = nil) ⇒ String

    Attempts to pluralize the singular word unless count is 1. If plural is supplied, it will use that when count is \> 1, otherwise it will use inflector to determine the plural form.

    #### Examples:

    ``` ruby
    pluralize(2, 'person') => '2 people'
    ```

    #### Parameters:

    - `count`(`Integer`) — The count which determines pluralization.
    - `singular`([`String`](../../string "String (class)")) — The word to be pluralized if appropriate based on `count`.
    - `plural`([`String`](../../string "String (class)"))*(defaults to: `nil`)* — Explicit pluralized word to be used; if not specified uses inflector.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The properly pluralized word.
- name: Padrino::Helpers::FormatHelpers#simple_format
  id: padrino/helpers/formathelpers#simple_format-instance_method
  summary: Returns text transformed into HTML using simple formatting rules
  belongs_to: Padrino::Helpers::FormatHelpers
  description: |-
    ### \#simple_format(text, options = {}) ⇒ String

    Returns text transformed into HTML using simple formatting rules. Two or more consecutive newlines(nn) are considered as a paragraph and wrapped in \<p\> or your own tags. One newline (n) is considered as a linebreak and a \<br /\> tag is appended. This method does not remove the newlines from the text.

    #### Examples:

    ``` ruby
    simple_format("hello\nworld") # => "<p>hello<br/>world</p>"
    simple_format("hello\nworld", :tag => :div, :class => :foo) # => "<div class="foo">hello<br/>world</div>"
    ```

    #### Parameters:

    - `text`([`String`](../../string "String (class)")) — The simple text to be formatted.
    - `options`(`Hash`)*(defaults to: `{}`)* — Formatting options for the text. Can accept html options for the wrapper tag.

    #### Options Hash (`options`):

    - `:tag`(`Symbol`) — default: `p` — The html tag to use for formatting newlines.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The text formatted as simple HTML.
- name: Padrino::Helpers::FormatHelpers#strip_tags
  id: padrino/helpers/formathelpers#strip_tags-instance_method
  summary: Strips all HTML tags from the html
  belongs_to: Padrino::Helpers::FormatHelpers
  description: |-
    ### \#strip_tags(html) ⇒ String

    Strips all HTML tags from the html.

    #### Examples:

    ``` ruby
    strip_tags("<b>Hey</b>") => "Hey"
    ```

    #### Parameters:

    - `html`([`String`](../../string "String (class)")) — The HTML for which to strip tags.

    #### Returns:

    - ([`String`](../../string "String (class)")) — HTML with tags stripped.
- name: Padrino::Helpers::FormatHelpers#time_ago_in_words
  id: padrino/helpers/formathelpers#time_ago_in_words-instance_method
  summary: Like distance_of_time_in_words, but where to_time is fixed to Time.now
  belongs_to: Padrino::Helpers::FormatHelpers
  description: |-
    ### \#time_ago_in_words(from_time, include_seconds = false) ⇒ String

    Like distance_of_time_in_words, but where `to_time` is fixed to `Time.now`.

    #### Examples:

    ``` ruby
    time_ago_in_words(3.minutes.from_now)  # => 3 minutes
    time_ago_in_words(Time.now - 15.hours) # => 15 hours
    time_ago_in_words(Time.now)            # => less than a minute
    ```

    #### Parameters:

    - `from_time`(`Time`) — The time to be compared against now in order to approximate the distance.
    - `include_seconds`(`Boolean`)*(defaults to: `false`)* — Set true for more detailed approximations.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The time formatted as a relative string.
- name: Padrino::Helpers::FormatHelpers#truncate
  id: padrino/helpers/formathelpers#truncate-instance_method
  summary: Truncates a given text after a given :length if text is longer than :length (defaults to 30)
  belongs_to: Padrino::Helpers::FormatHelpers
  description: |-
    ### \#truncate(text, options = {}) ⇒ String

    Truncates a given text after a given :length if text is longer than :length (defaults to 30). The last characters will be replaced with the :omission (defaults to “…”) for a total length not exceeding :length.

    #### Examples:

    ``` ruby
    truncate("Once upon a time in a world far far away", :length => 8) => "Once upon..."
    ```

    #### Parameters:

    - `text`([`String`](../../string "String (class)")) — The text to be truncated.
    - `options`(`Hash`)*(defaults to: `{}`)* — Formatting options for the truncation.

    #### Options Hash (`options`):

    - `:length`(`Integer`) — default: `30` — The number of characters before truncation occurs.
    - `:omission`([`String`](../../string "String (class)")) — default: `"..."` — The characters that are placed after the truncated text.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The text truncated after the given number of characters.
- name: Padrino::Helpers::FormatHelpers#truncate_words
  id: padrino/helpers/formathelpers#truncate_words-instance_method
  summary: Truncates words of a given text after a given :length if number of words in text is more than :length (defaults to 30)
  belongs_to: Padrino::Helpers::FormatHelpers
  description: |-
    ### \#truncate_words(text, options = {}) ⇒ String

    Truncates words of a given text after a given :length if number of words in text is more than :length (defaults to 30). The last words will be replaced with the :omission (defaults to “…”) for a total number of words not exceeding :length.

    #### Examples:

    ``` ruby
    truncate_words("Once upon a time in a world far far away", :length => 8) => "Once upon a time in a world far..."
    ```

    #### Parameters:

    - `text`([`String`](../../string "String (class)")) — The text to be truncated.
    - `options`(`Hash`)*(defaults to: `{}`)* — Formatting options for the truncation.

    #### Options Hash (`options`):

    - `:length`(`Integer`) — default: `30` — The number of words before truncation occurs.
    - `:omission`([`String`](../../string "String (class)")) — default: `"..."` — The characters that are placed after the truncated text.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The text truncated after the given number of words.
- name: Padrino::Helpers::FormatHelpers#word_wrap
  id: padrino/helpers/formathelpers#word_wrap-instance_method
  summary: Wraps the text into lines no longer than line_width width
  belongs_to: Padrino::Helpers::FormatHelpers
  description: "### \\#word_wrap(text, options = {}) ⇒ String\n\nWraps the text into lines no longer than line_width width. This method breaks on the first whitespace character that does not exceed line_width (which is 80 by default).\n\n#### Examples:\n\n``` ruby\nword_wrap('Once upon a time', :line_width => 8) => \"Once upon\\na time\"\n```\n\n#### Parameters:\n\n- `text`([`String`](../../string \"String (class)\")) — The text to be wrapped.\n- `options`(`Hash`)*(defaults to: `{}`)* — Formatting options for the wrapping.\n\n#### Options Hash (`options`):\n\n- `:line_width`(`Integer`) — default: `80` — The line width before a wrap should occur.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The text with line wraps for lines longer then `line_width`.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormatHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormatHelpers)"
- name: Padrino::Helpers::FormBuilder
  id: padrino/helpers/formbuilder
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Padrino::Helpers::FormBuilder\n\n## Defined Under Namespace\n\n**Classes:** [AbstractFormBuilder](formbuilder/abstractformbuilder \"Padrino::Helpers::FormBuilder::AbstractFormBuilder (class)\"), [StandardFormBuilder](formbuilder/standardformbuilder \"Padrino::Helpers::FormBuilder::StandardFormBuilder (class)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder)"
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  id: padrino/helpers/formbuilder/abstractformbuilder
  summary: Returns a new instance of AbstractFormBuilder
  description: "# Class: Padrino::Helpers::FormBuilder::AbstractFormBuilder\n\nInherits:  \n[Object](../../../object \"Object (class)\")\n\n- [Object](../../../object \"Object (class)\")\n- Padrino::Helpers::FormBuilder::AbstractFormBuilder\n\n## Overview\n\nBase class for Padrino Form Builder\n\n## Direct Known Subclasses\n\n[StandardFormBuilder](standardformbuilder \"Padrino::Helpers::FormBuilder::StandardFormBuilder (class)\")\n\n## Instance Attribute Summary\n\n- [`#`**`attributes_name`**` ⇒ Object`](abstractformbuilder#attributes_name-instance_method \"#attributes_name (instance method)\") readonly Returns the value of attribute attributes_name.\n- [`#`**`is_nested`**` ⇒ Object`](abstractformbuilder#is_nested-instance_method \"#is_nested (instance method)\") readonly Returns the value of attribute is_nested.\n- [`#`**`model_name`**` ⇒ Object`](abstractformbuilder#model_name-instance_method \"#model_name (instance method)\") readonly Returns the value of attribute model_name.\n- [`#`**`multipart`**` ⇒ Object`](abstractformbuilder#multipart-instance_method \"#multipart (instance method)\") Returns the value of attribute multipart.\n- [`#`**`namespace`**` ⇒ Object`](abstractformbuilder#namespace-instance_method \"#namespace (instance method)\") readonly Returns the value of attribute namespace.\n- [`#`**`nested_index`**` ⇒ Object`](abstractformbuilder#nested_index-instance_method \"#nested_index (instance method)\") readonly Returns the value of attribute nested_index.\n- [`#`**`object`**` ⇒ Object`](abstractformbuilder#object-instance_method \"#object (instance method)\") Returns the value of attribute object.\n- [`#`**`parent_form`**` ⇒ Object`](abstractformbuilder#parent_form-instance_method \"#parent_form (instance method)\") readonly Returns the value of attribute parent_form.\n- [`#`**`template`**` ⇒ Object`](abstractformbuilder#template-instance_method \"#template (instance method)\") Returns the value of attribute template.\n\n## Instance Method Summary\n\n- [`#`**`check_box`**`(field, options = {}) ⇒ Object`](abstractformbuilder#check_box-instance_method \"#check_box (instance method)\")\n- [`#`**`check_box_group`**`(field, options = {}) ⇒ Object`](abstractformbuilder#check_box_group-instance_method \"#check_box_group (instance method)\")\n- [`#`**`color_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#color_field-instance_method \"#color_field (instance method)\")\n- [`#`**`csrf_token_field`**` ⇒ Object`](abstractformbuilder#csrf_token_field-instance_method \"#csrf_token_field (instance method)\")\n- [`#`**`date_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#date_field-instance_method \"#date_field (instance method)\")\n- [`#`**`datetime_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#datetime_field-instance_method \"#datetime_field (instance method)\")\n- [`#`**`datetime_local_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#datetime_local_field-instance_method \"#datetime_local_field (instance method)\")\n- [`#`**`email_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#email_field-instance_method \"#email_field (instance method)\")\n- [`#`**`error_message_on`**`(field, options = {}) ⇒ Object`](abstractformbuilder#error_message_on-instance_method \"#error_message_on (instance method)\")\n- [`#`**`error_messages`**`(*params) ⇒ Object`](abstractformbuilder#error_messages-instance_method \"#error_messages (instance method)\")\n- [`#`**`fields_for`**`(child_association, collection = nil, options = {}, &block) ⇒ Object`](abstractformbuilder#fields_for-instance_method \"#fields_for (instance method)\") Supports nested fields for a child model within a form.\n- [`#`**`file_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#file_field-instance_method \"#file_field (instance method)\")\n- [`#`**`hidden_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#hidden_field-instance_method \"#hidden_field (instance method)\")\n- [`#`**`image_submit`**`(source, options = {}) ⇒ Object`](abstractformbuilder#image_submit-instance_method \"#image_submit (instance method)\")\n- [`#`**`initialize`**`(template, object, options = {}) ⇒ AbstractFormBuilder`](abstractformbuilder#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of AbstractFormBuilder.\n- [`#`**`label`**`(field, options = {}, &block) ⇒ Object`](abstractformbuilder#label-instance_method \"#label (instance method)\")\n- [`#`**`month_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#month_field-instance_method \"#month_field (instance method)\")\n- [`#`**`number_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#number_field-instance_method \"#number_field (instance method)\")\n- [`#`**`password_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#password_field-instance_method \"#password_field (instance method)\")\n- [`#`**`radio_button`**`(field, options = {}) ⇒ Object`](abstractformbuilder#radio_button-instance_method \"#radio_button (instance method)\")\n- [`#`**`radio_button_group`**`(field, options = {}) ⇒ Object`](abstractformbuilder#radio_button_group-instance_method \"#radio_button_group (instance method)\")\n- [`#`**`search_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#search_field-instance_method \"#search_field (instance method)\")\n- [`#`**`select`**`(field, options = {}) ⇒ Object`](abstractformbuilder#select-instance_method \"#select (instance method)\")\n- [`#`**`submit`**`(*args) ⇒ Object`](abstractformbuilder#submit-instance_method \"#submit (instance method)\")\n- [`#`**`telephone_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#telephone_field-instance_method \"#telephone_field (instance method)\")` (also: #phone_field)`\n- [`#`**`text_area`**`(field, options = {}) ⇒ Object`](abstractformbuilder#text_area-instance_method \"#text_area (instance method)\")\n- [`#`**`text_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#text_field-instance_method \"#text_field (instance method)\")\n- [`#`**`time_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#time_field-instance_method \"#time_field (instance method)\")\n- [`#`**`url_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#url_field-instance_method \"#url_field (instance method)\")\n- [`#`**`week_field`**`(field, options = {}) ⇒ Object`](abstractformbuilder#week_field-instance_method \"#week_field (instance method)\")\n\n## Constructor Details\n\n### \\#initialize(template, object, options = {}) ⇒ AbstractFormBuilder\n\nReturns a new instance of AbstractFormBuilder.\n\n## Instance Attribute Details\n\n### \\#attributes_name ⇒ Object (readonly)\n\nReturns the value of attribute attributes_name\n\n### \\#is_nested ⇒ Object (readonly)\n\nReturns the value of attribute is_nested\n\n### \\#model_name ⇒ Object (readonly)\n\nReturns the value of attribute model_name\n\n### \\#multipart ⇒ Object\n\nReturns the value of attribute multipart\n\n### \\#namespace ⇒ Object (readonly)\n\nReturns the value of attribute namespace\n\n### \\#nested_index ⇒ Object (readonly)\n\nReturns the value of attribute nested_index\n\n### \\#object ⇒ Object\n\nReturns the value of attribute object\n\n### \\#parent_form ⇒ Object (readonly)\n\nReturns the value of attribute parent_form\n\n### \\#template ⇒ Object\n\nReturns the value of attribute template\n\n## Instance Method Details\n\n### \\#check_box(field, options = {}) ⇒ Object\n\n### \\#check_box_group(field, options = {}) ⇒ Object\n\n### \\#color_field(field, options = {}) ⇒ Object\n\n### \\#csrf_token_field ⇒ Object\n\n### \\#date_field(field, options = {}) ⇒ Object\n\n### \\#datetime_field(field, options = {}) ⇒ Object\n\n### \\#datetime_local_field(field, options = {}) ⇒ Object\n\n### \\#email_field(field, options = {}) ⇒ Object\n\n### \\#error_message_on(field, options = {}) ⇒ Object\n\n### \\#error_messages(\\*params) ⇒ Object\n\n### \\#fields_for(child_association, collection = nil, options = {}, &block) ⇒ Object\n\nSupports nested fields for a child model within a form. f.fields_for :addresses f.fields_for :addresses, address f.fields_for :addresses, @addresses f.fields_for :addresses, address, index: i\n\n### \\#file_field(field, options = {}) ⇒ Object\n\n### \\#hidden_field(field, options = {}) ⇒ Object\n\n### \\#image_submit(source, options = {}) ⇒ Object\n\n### \\#label(field, options = {}, &block) ⇒ Object\n\n### \\#month_field(field, options = {}) ⇒ Object\n\n### \\#number_field(field, options = {}) ⇒ Object\n\n### \\#password_field(field, options = {}) ⇒ Object\n\n### \\#radio_button(field, options = {}) ⇒ Object\n\n### \\#radio_button_group(field, options = {}) ⇒ Object\n\n### \\#search_field(field, options = {}) ⇒ Object\n\n### \\#select(field, options = {}) ⇒ Object\n\n### \\#submit(\\*args) ⇒ Object\n\n### \\#telephone_field(field, options = {}) ⇒ Object Also known as: phone_field\n\n### \\#text_area(field, options = {}) ⇒ Object\n\n### \\#text_field(field, options = {}) ⇒ Object\n\n### \\#time_field(field, options = {}) ⇒ Object\n\n### \\#url_field(field, options = {}) ⇒ Object\n\n### \\#week_field(field, options = {}) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder/AbstractFormBuilder](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder/AbstractFormBuilder)"
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#attributes_name
  id: padrino/helpers/formbuilder/abstractformbuilder#attributes_name-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: |-
    ### \#attributes_name ⇒ Object (readonly)

    Returns the value of attribute attributes_name
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#check_box
  id: padrino/helpers/formbuilder/abstractformbuilder#check_box-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#check_box(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#check_box_group
  id: padrino/helpers/formbuilder/abstractformbuilder#check_box_group-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#check_box_group(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#color_field
  id: padrino/helpers/formbuilder/abstractformbuilder#color_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#color_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#csrf_token_field
  id: padrino/helpers/formbuilder/abstractformbuilder#csrf_token_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#csrf_token_field ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#date_field
  id: padrino/helpers/formbuilder/abstractformbuilder#date_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#date_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#datetime_field
  id: padrino/helpers/formbuilder/abstractformbuilder#datetime_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#datetime_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#datetime_local_field
  id: padrino/helpers/formbuilder/abstractformbuilder#datetime_local_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#datetime_local_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#email_field
  id: padrino/helpers/formbuilder/abstractformbuilder#email_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#email_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#error_message_on
  id: padrino/helpers/formbuilder/abstractformbuilder#error_message_on-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#error_message_on(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#error_messages
  id: padrino/helpers/formbuilder/abstractformbuilder#error_messages-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#error_messages(\*params) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#fields_for
  id: padrino/helpers/formbuilder/abstractformbuilder#fields_for-instance_method
  summary: Supports nested fields for a child model within a form
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: |-
    ### \#fields_for(child_association, collection = nil, options = {}, &block) ⇒ Object

    Supports nested fields for a child model within a form. f.fields_for :addresses f.fields_for :addresses, address f.fields_for :addresses, @addresses f.fields_for :addresses, address, index: i
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#file_field
  id: padrino/helpers/formbuilder/abstractformbuilder#file_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#file_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#hidden_field
  id: padrino/helpers/formbuilder/abstractformbuilder#hidden_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#hidden_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#image_submit
  id: padrino/helpers/formbuilder/abstractformbuilder#image_submit-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#image_submit(source, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#initialize
  id: padrino/helpers/formbuilder/abstractformbuilder#initialize-instance_method
  summary: Returns a new instance of AbstractFormBuilder
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: |-
    ### \#initialize(template, object, options = {}) ⇒ AbstractFormBuilder

    Returns a new instance of AbstractFormBuilder.

    ## Instance Attribute Details
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#is_nested
  id: padrino/helpers/formbuilder/abstractformbuilder#is_nested-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: |-
    ### \#is_nested ⇒ Object (readonly)

    Returns the value of attribute is_nested
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#label
  id: padrino/helpers/formbuilder/abstractformbuilder#label-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#label(field, options = {}, &block) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#model_name
  id: padrino/helpers/formbuilder/abstractformbuilder#model_name-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: |-
    ### \#model_name ⇒ Object (readonly)

    Returns the value of attribute model_name
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#month_field
  id: padrino/helpers/formbuilder/abstractformbuilder#month_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#month_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#multipart
  id: padrino/helpers/formbuilder/abstractformbuilder#multipart-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: |-
    ### \#multipart ⇒ Object

    Returns the value of attribute multipart
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#namespace
  id: padrino/helpers/formbuilder/abstractformbuilder#namespace-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: |-
    ### \#namespace ⇒ Object (readonly)

    Returns the value of attribute namespace
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#nested_index
  id: padrino/helpers/formbuilder/abstractformbuilder#nested_index-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: |-
    ### \#nested_index ⇒ Object (readonly)

    Returns the value of attribute nested_index
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#number_field
  id: padrino/helpers/formbuilder/abstractformbuilder#number_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#number_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#object
  id: padrino/helpers/formbuilder/abstractformbuilder#object-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: |-
    ### \#object ⇒ Object

    Returns the value of attribute object
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#parent_form
  id: padrino/helpers/formbuilder/abstractformbuilder#parent_form-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: |-
    ### \#parent_form ⇒ Object (readonly)

    Returns the value of attribute parent_form
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#password_field
  id: padrino/helpers/formbuilder/abstractformbuilder#password_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#password_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#radio_button
  id: padrino/helpers/formbuilder/abstractformbuilder#radio_button-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#radio_button(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#radio_button_group
  id: padrino/helpers/formbuilder/abstractformbuilder#radio_button_group-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#radio_button_group(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#search_field
  id: padrino/helpers/formbuilder/abstractformbuilder#search_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#search_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#select
  id: padrino/helpers/formbuilder/abstractformbuilder#select-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#select(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#submit
  id: padrino/helpers/formbuilder/abstractformbuilder#submit-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#submit(\*args) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#telephone_field
  id: padrino/helpers/formbuilder/abstractformbuilder#telephone_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#telephone_field(field, options = {}) ⇒ Object Also known as: phone_field'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#template
  id: padrino/helpers/formbuilder/abstractformbuilder#template-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: |-
    ### \#template ⇒ Object

    Returns the value of attribute template

    ## Instance Method Details
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#text_area
  id: padrino/helpers/formbuilder/abstractformbuilder#text_area-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#text_area(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#text_field
  id: padrino/helpers/formbuilder/abstractformbuilder#text_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#text_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#time_field
  id: padrino/helpers/formbuilder/abstractformbuilder#time_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#time_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#url_field
  id: padrino/helpers/formbuilder/abstractformbuilder#url_field-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: '### \#url_field(field, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::AbstractFormBuilder#week_field
  id: padrino/helpers/formbuilder/abstractformbuilder#week_field-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Helpers::FormBuilder::AbstractFormBuilder
  description: "### \\#week_field(field, options = {}) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder/AbstractFormBuilder](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder/AbstractFormBuilder)"
- name: Padrino::Helpers::FormBuilder::StandardFormBuilder
  id: padrino/helpers/formbuilder/standardformbuilder
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Padrino::Helpers::FormBuilder::StandardFormBuilder\n\nInherits:  \n[AbstractFormBuilder](abstractformbuilder \"Padrino::Helpers::FormBuilder::AbstractFormBuilder (class)\")\n\n- [Object](../../../object \"Object (class)\")\n- [AbstractFormBuilder](abstractformbuilder \"Padrino::Helpers::FormBuilder::AbstractFormBuilder (class)\")\n- Padrino::Helpers::FormBuilder::StandardFormBuilder\n\n## Instance Attribute Summary\n\n### Attributes inherited from AbstractFormBuilder\n\n[\\#attributes_name](abstractformbuilder#attributes_name-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#attributes_name (method)\"), [\\#is_nested](abstractformbuilder#is_nested-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#is_nested (method)\"), [\\#model_name](abstractformbuilder#model_name-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#model_name (method)\"), [\\#multipart](abstractformbuilder#multipart-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#multipart (method)\"), [\\#namespace](abstractformbuilder#namespace-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#namespace (method)\"), [\\#nested_index](abstractformbuilder#nested_index-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#nested_index (method)\"), [\\#object](abstractformbuilder#object-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#object (method)\"), [\\#parent_form](abstractformbuilder#parent_form-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#parent_form (method)\"), [\\#template](abstractformbuilder#template-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#template (method)\")\n\n## Instance Method Summary\n\n- [`#`**`field_type`**` ⇒ Object`](standardformbuilder#field_type-instance_method \"#field_type (instance method)\") StandardFormBuilder.\n- [`#`**`image_submit_block`**`(source, options = {}) ⇒ Object`](standardformbuilder#image_submit_block-instance_method \"#image_submit_block (instance method)\")\n- [`#`**`submit_block`**`(caption, options = {}) ⇒ Object`](standardformbuilder#submit_block-instance_method \"#submit_block (instance method)\")\n\n### Methods inherited from AbstractFormBuilder\n\n[\\#check_box](abstractformbuilder#check_box-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#check_box (method)\"), [\\#check_box_group](abstractformbuilder#check_box_group-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#check_box_group (method)\"), [\\#color_field](abstractformbuilder#color_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#color_field (method)\"), [\\#csrf_token_field](abstractformbuilder#csrf_token_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#csrf_token_field (method)\"), [\\#date_field](abstractformbuilder#date_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#date_field (method)\"), [\\#datetime_field](abstractformbuilder#datetime_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#datetime_field (method)\"), [\\#datetime_local_field](abstractformbuilder#datetime_local_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#datetime_local_field (method)\"), [\\#email_field](abstractformbuilder#email_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#email_field (method)\"), [\\#error_message_on](abstractformbuilder#error_message_on-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#error_message_on (method)\"), [\\#error_messages](abstractformbuilder#error_messages-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#error_messages (method)\"), [\\#fields_for](abstractformbuilder#fields_for-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#fields_for (method)\"), [\\#file_field](abstractformbuilder#file_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#file_field (method)\"), [\\#hidden_field](abstractformbuilder#hidden_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#hidden_field (method)\"), [\\#image_submit](abstractformbuilder#image_submit-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#image_submit (method)\"), [\\#initialize](abstractformbuilder#initialize-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#initialize (method)\"), [\\#label](abstractformbuilder#label-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#label (method)\"), [\\#month_field](abstractformbuilder#month_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#month_field (method)\"), [\\#number_field](abstractformbuilder#number_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#number_field (method)\"), [\\#password_field](abstractformbuilder#password_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#password_field (method)\"), [\\#radio_button](abstractformbuilder#radio_button-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#radio_button (method)\"), [\\#radio_button_group](abstractformbuilder#radio_button_group-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#radio_button_group (method)\"), [\\#search_field](abstractformbuilder#search_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#search_field (method)\"), [\\#select](abstractformbuilder#select-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#select (method)\"), [\\#submit](abstractformbuilder#submit-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#submit (method)\"), [\\#telephone_field](abstractformbuilder#telephone_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#telephone_field (method)\"), [\\#text_area](abstractformbuilder#text_area-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#text_area (method)\"), [\\#text_field](abstractformbuilder#text_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#text_field (method)\"), [\\#time_field](abstractformbuilder#time_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#time_field (method)\"), [\\#url_field](abstractformbuilder#url_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#url_field (method)\"), [\\#week_field](abstractformbuilder#week_field-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#week_field (method)\")\n\n## Constructor Details\n\nThis class inherits a constructor from [Padrino::Helpers::FormBuilder::AbstractFormBuilder](abstractformbuilder#initialize-instance_method \"Padrino::Helpers::FormBuilder::AbstractFormBuilder#initialize (method)\")\n\n## Instance Method Details\n\n### \\#field_type ⇒ Object\n\nStandardFormBuilder\n\n``` ruby\ntext_field_block(:username, { :class => 'long' }, { :class => 'wide-label' })\ntext_area_block(:summary, { :class => 'long' }, { :class => 'wide-label' })\npassword_field_block(:password, { :class => 'long' }, { :class => 'wide-label' })\nfile_field_block(:photo, { :class => 'long' }, { :class => 'wide-label' })\ncheck_box_block(:remember_me, { :class => 'long' }, { :class => 'wide-label' })\nselect_block(:color, :options => ['green', 'black'])\n```\n\n### \\#image_submit_block(source, options = {}) ⇒ Object\n\n### \\#submit_block(caption, options = {}) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder/StandardFormBuilder](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder/StandardFormBuilder)"
- name: Padrino::Helpers::FormBuilder::StandardFormBuilder#field_type
  id: padrino/helpers/formbuilder/standardformbuilder#field_type-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::StandardFormBuilder
  description: |-
    ### \#field_type ⇒ Object

    StandardFormBuilder

    ``` ruby
    text_field_block(:username, { :class => 'long' }, { :class => 'wide-label' })
    text_area_block(:summary, { :class => 'long' }, { :class => 'wide-label' })
    password_field_block(:password, { :class => 'long' }, { :class => 'wide-label' })
    file_field_block(:photo, { :class => 'long' }, { :class => 'wide-label' })
    check_box_block(:remember_me, { :class => 'long' }, { :class => 'wide-label' })
    select_block(:color, :options => ['green', 'black'])
    ```
- name: Padrino::Helpers::FormBuilder::StandardFormBuilder#image_submit_block
  id: padrino/helpers/formbuilder/standardformbuilder#image_submit_block-instance_method
  summary: null
  belongs_to: Padrino::Helpers::FormBuilder::StandardFormBuilder
  description: '### \#image_submit_block(source, options = {}) ⇒ Object'
- name: Padrino::Helpers::FormBuilder::StandardFormBuilder#submit_block
  id: padrino/helpers/formbuilder/standardformbuilder#submit_block-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Helpers::FormBuilder::StandardFormBuilder
  description: "### \\#submit_block(caption, options = {}) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder/StandardFormBuilder](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder/StandardFormBuilder)"
- name: Padrino::Helpers::FormHelpers
  id: padrino/helpers/formhelpers
  summary: Helpers related to producing form related tags and inputs into templates
  description: "# Module: Padrino::Helpers::FormHelpers\n\n## Overview\n\nHelpers related to producing form related tags and inputs into templates.\n\n## Defined Under Namespace\n\n**Modules:** [Errors](formhelpers/errors \"Padrino::Helpers::FormHelpers::Errors (module)\"), [Options](formhelpers/options \"Padrino::Helpers::FormHelpers::Options (module)\"), [Security](formhelpers/security \"Padrino::Helpers::FormHelpers::Security (module)\")\n\n## Constant Summary [collapse](#)\n\nDATETIME_ATTRIBUTES =  \n``` ruby\n[:value, :max, :min].freeze\n```\n\nCOLOR_CODE_REGEXP =  \n``` ruby\n/\\A#([0-9a-fA-F]{3}){1,2}\\z/.freeze\n```\n\n## Instance Method Summary\n\n- [`#`**`button_tag`**`(caption, options = {}) ⇒ String`](formhelpers#button_tag-instance_method \"#button_tag (instance method)\") Constructs a button input from the given options.\n- [`#`**`button_to`**`(*args, &block) ⇒ String`](formhelpers#button_to-instance_method \"#button_to (instance method)\") Creates a form containing a single button that submits to the URL.\n- [`#`**`check_box_tag`**`(name, options = {}) ⇒ Object`](formhelpers#check_box_tag-instance_method \"#check_box_tag (instance method)\") Constructs a check_box from the given options.\n- [`#`**`color_field_tag`**`(name, options = {}) ⇒ Object`](formhelpers#color_field_tag-instance_method \"#color_field_tag (instance method)\") Constructs a color tag from the given options.\n- [`#`**`date_field_tag`**`(name, options = {}) ⇒ String`](formhelpers#date_field_tag-instance_method \"#date_field_tag (instance method)\") Constructs a date tag from the given options.\n- [`#`**`datetime_field_tag`**`(name, options = {}) ⇒ String`](formhelpers#datetime_field_tag-instance_method \"#datetime_field_tag (instance method)\") Constructs a datetime tag from the given options.\n- [`#`**`datetime_local_field_tag`**`(name, options = {}) ⇒ String`](formhelpers#datetime_local_field_tag-instance_method \"#datetime_local_field_tag (instance method)\") Constructs a datetime-local tag from the given options.\n- [`#`**`email_field_tag`**`(name, options = {}) ⇒ String`](formhelpers#email_field_tag-instance_method \"#email_field_tag (instance method)\") Creates an email field input with the given name and options.\n- [`#`**`field_set_tag`**`(*args, &block) ⇒ String`](formhelpers#field_set_tag-instance_method \"#field_set_tag (instance method)\") Constructs a field_set to group fields with given options.\n- [`#`**`fields_for`**`(object, options = {}, &block) ⇒ String`](formhelpers#fields_for-instance_method \"#fields_for (instance method)\") Constructs form fields for an object using given or default form_builder.\n- [`#`**`file_field_tag`**`(name, options = {}) ⇒ Object`](formhelpers#file_field_tag-instance_method \"#file_field_tag (instance method)\") Constructs a file field input from the given options.\n- [`#`**`form_for`**`(object, url, options = {}, &block) {|AbstractFormBuilder| ... } ⇒ String`](formhelpers#form_for-instance_method \"#form_for (instance method)\") Constructs a form for object using given or default form_builder.\n- [`#`**`form_tag`**`(url, options = {}, &block) ⇒ String`](formhelpers#form_tag-instance_method \"#form_tag (instance method)\") Constructs a form without object based on options.\n- [`#`**`hidden_field_tag`**`(name, options = {}) ⇒ Object`](formhelpers#hidden_field_tag-instance_method \"#hidden_field_tag (instance method)\") Constructs a hidden field input from the given options.\n- [`#`**`hidden_form_method_field`**`(desired_method) ⇒ String`](formhelpers#hidden_form_method_field-instance_method \"#hidden_form_method_field (instance method)\") Returns the hidden method field for 'put' and 'delete' forms.\n- [`#`**`image_submit_tag`**`(source, options = {}) ⇒ String`](formhelpers#image_submit_tag-instance_method \"#image_submit_tag (instance method)\") Constructs a submit button from the given options.\n- [`#`**`label_tag`**`(name, options = {}, &block) ⇒ String`](formhelpers#label_tag-instance_method \"#label_tag (instance method)\") Constructs a label tag from the given options.\n- [`#`**`month_field_tag`**`(name, options = {}) ⇒ String`](formhelpers#month_field_tag-instance_method \"#month_field_tag (instance method)\") Constructs a month tag from the given options.\n- [`#`**`number_field_tag`**`(name, options = {}) ⇒ String`](formhelpers#number_field_tag-instance_method \"#number_field_tag (instance method)\") Creates a number field input with the given name and options.\n- [`#`**`password_field_tag`**`(name, options = {}) ⇒ Object`](formhelpers#password_field_tag-instance_method \"#password_field_tag (instance method)\") Constructs a password field input from the given options.\n- [`#`**`radio_button_tag`**`(name, options = {}) ⇒ Object`](formhelpers#radio_button_tag-instance_method \"#radio_button_tag (instance method)\") Constructs a radio_button from the given options.\n- [`#`**`range_field_tag`**`(name, options = {}) ⇒ String`](formhelpers#range_field_tag-instance_method \"#range_field_tag (instance method)\") Constructs a range tag from the given options.\n- [`#`**`search_field_tag`**`(name, options = {}) ⇒ String`](formhelpers#search_field_tag-instance_method \"#search_field_tag (instance method)\") Creates a search field input with the given name and options.\n- [`#`**`select_tag`**`(name, options = {}) ⇒ String`](formhelpers#select_tag-instance_method \"#select_tag (instance method)\") Constructs a select from the given options.\n- [`#`**`submit_tag`**`(*args) ⇒ String`](formhelpers#submit_tag-instance_method \"#submit_tag (instance method)\") Constructs a submit button from the given options.\n- [`#`**`telephone_field_tag`**`(name, options = {}) ⇒ String`](formhelpers#telephone_field_tag-instance_method \"#telephone_field_tag (instance method)\")` (also: #phone_field_tag)` Creates a telephone field input with the given name and options.\n- [`#`**`text_area_tag`**`(name, options = {}) ⇒ Object`](formhelpers#text_area_tag-instance_method \"#text_area_tag (instance method)\") Constructs a text area input from the given options.\n- [`#`**`text_field_tag`**`(name, options = {}) ⇒ String`](formhelpers#text_field_tag-instance_method \"#text_field_tag (instance method)\") Creates a text field input with the given name and options.\n- [`#`**`time_field_tag`**`(name, options = {}) ⇒ String`](formhelpers#time_field_tag-instance_method \"#time_field_tag (instance method)\") Constructs a time tag from the given options.\n- [`#`**`url_field_tag`**`(name, options = {}) ⇒ String`](formhelpers#url_field_tag-instance_method \"#url_field_tag (instance method)\") Creates a URL field input with the given name and options.\n- [`#`**`week_field_tag`**`(name, options = {}) ⇒ String`](formhelpers#week_field_tag-instance_method \"#week_field_tag (instance method)\") Constructs a week tag from the given options.\n\n## Instance Method Details\n\n### \\#button_tag(caption, options = {}) ⇒ String\n\nConstructs a button input from the given options.\n\n#### Examples:\n\n``` ruby\nbutton_tag \"Cancel\", :class => 'clear'\n```\n\n#### Parameters:\n\n- `caption` ([`String`](../../string \"String (class)\")) — The caption for the button.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the input field.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html button based on the `options` specified.\n\n### \\#button_to(caption, url, options = {}) ⇒ String \\#button_to(url, options = {}, &block) ⇒ String\n\nCreates a form containing a single button that submits to the URL.\n\n#### Examples:\n\n``` ruby\nbutton_to 'Delete', url(:accounts_destroy, :id => account), :method => :delete, :class => :form\n# Generates:\n# <form class=\"form\" action=\"/admin/accounts/destroy/2\" method=\"post\">\n#   <input type=\"hidden\" value=\"delete\" name=\"_method\" />\n#   <input type=\"submit\" value=\"Delete\" />\n# </form>\n```\n\n#### Overloads:\n\n- ### \\#button_to(caption, url, options = {}) ⇒ String\n\n  #### Parameters:\n\n  - `caption` ([`String`](../../string \"String (class)\")) — The text caption.\n  - `url` ([`String`](../../string \"String (class)\")) — The url href.\n  - `options` (`Hash`) *(defaults to: `{}`)* — The html options.\n\n- ### \\#button_to(url, options = {}, &block) ⇒ String\n\n  #### Parameters:\n\n  - `url` ([`String`](../../string \"String (class)\")) — The url href.\n  - `options` (`Hash`) *(defaults to: `{}`)* — The html options.\n  - `block` (`Proc`) — The button content.\n\n#### Parameters:\n\n- `options` (`Hash`) — a customizable set of options\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Form and button html with specified `options`.\n\n### \\#check_box_tag(name, options = {}) ⇒ Object\n\nConstructs a check_box from the given options.\n\n#### Examples:\n\n``` ruby\ncheck_box_tag :remember_me, :value => 'Yes'\n```\n\n### \\#color_field_tag(name, options = {}) ⇒ Object\n\nConstructs a color tag from the given options.\n\n#### Examples:\n\n``` ruby\ncolor_field_tag('color', :value => \"#ff0000\")\ncolor_field_tag('color', :value => \"#f00\")\n```\n\n#### Parameters:\n\n- `name` ([`String`](../../string \"String (class)\")) — The name of the color field.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the color field.\n\n#### Options Hash (`options`):\n\n- `:value` ([`String`](../../string \"String (class)\")) — The value of the color field. See examples for details.\n\n### \\#date_field_tag(name, options = {}) ⇒ String\n\nConstructs a date tag from the given options.\n\n#### Examples:\n\n``` ruby\ndate_field_tag('date_with_min_max', :min => DateTime.new(1993, 2, 24),\n                                    :max => DateTime.new(2000, 4, 1))\ndate_field_tag('date_with_value', :value => DateTime.new(2000, 4, 1))\n```\n\n#### Parameters:\n\n- `name` ([`String`](../../string \"String (class)\")) — The name of the date field.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the date field.\n\n#### Options Hash (`options`):\n\n- `:min` (`DateTime`, [`String`](../../string \"String (class)\")) — The min date time of the date field.\n- `:max` (`DateTime`, [`String`](../../string \"String (class)\")) — The max date time of the date field.\n- `:value` (`DateTime`, [`String`](../../string \"String (class)\")) — The value of the date field. See examples for details.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html date field\n\n### \\#datetime_field_tag(name, options = {}) ⇒ String\n\nConstructs a datetime tag from the given options.\n\n#### Examples:\n\n``` ruby\ndatetime_field_tag('datetime_with_min_max', :min => DateTime.new(1993, 2, 24, 12, 30, 45),\n                                            :max => DateTime.new(2000, 4, 1, 12, 0, 0))\ndatetime_field_tag('datetime_with_value', :value => DateTime.new(2000, 4, 1, 12, 0, 0))\n```\n\n#### Parameters:\n\n- `name` ([`String`](../../string \"String (class)\")) — The name of the datetime field.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the datetime field.\n\n#### Options Hash (`options`):\n\n- `:min` (`DateTime`, [`String`](../../string \"String (class)\")) — The min date time of the datetime field.\n- `:max` (`DateTime`, [`String`](../../string \"String (class)\")) — The max date time of the datetime field.\n- `:value` (`DateTime`, [`String`](../../string \"String (class)\")) — The value of the datetime field. See examples for details.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html datetime field\n\n### \\#datetime_local_field_tag(name, options = {}) ⇒ String\n\nConstructs a datetime-local tag from the given options.\n\n#### Examples:\n\n``` ruby\ndatetime_local_field_tag('datetime_local_with_min_max', :min => DateTime.new(1993, 2, 24, 12, 30, 45),\n                                                        :max => DateTime.new(2000, 4, 1, 12, 0, 0))\ndatetime_local_field_tag('datetime_local_with_value', :value => DateTime.new(2000, 4, 1, 12, 0, 0))\n```\n\n#### Parameters:\n\n- `name` ([`String`](../../string \"String (class)\")) — The name of the datetime local field.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the datetime-local field.\n\n#### Options Hash (`options`):\n\n- `:min` (`DateTime`, [`String`](../../string \"String (class)\")) — The min date time of the datetime-local field.\n- `:max` (`DateTime`, [`String`](../../string \"String (class)\")) — The max date time of the datetime-local field.\n- `:value` (`DateTime`, [`String`](../../string \"String (class)\")) — The value of the datetime field. See examples for details.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html datetime-local field\n\n### \\#email_field_tag(name, options = {}) ⇒ String\n\nCreates an email field input with the given name and options.\n\n#### Examples:\n\n``` ruby\nemail_field_tag :email, :placeholder => 'you@example.com'\n# => <input name=\"email\" placeholder=\"you@example.com\" type=\"email\" />\n\nemail_field_tag :email, :value => 'padrinorb@gmail.com', :readonly => true\n# => <input name=\"email\" value=\"padrinorb@gmail.com\" readonly type=\"email\" />\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) — The name of the input to create.\n- `options` (`Hash`) *(defaults to: `{}`)* — The HTML options to include in this field.\n\n#### Options Hash (`options`):\n\n- `:id` ([`String`](../../string \"String (class)\")) — Specifies a unique identifier for the field.\n- `:class` ([`String`](../../string \"String (class)\")) — Specifies the stylesheet class of the field.\n- `:name` ([`String`](../../string \"String (class)\")) — Specifies the name of the field.\n- `:accesskey` ([`String`](../../string \"String (class)\")) — Specifies a shortcut key to access the field.\n- `:tabindex` (`Integer`) — Specifies the tab order of the field.\n- `:maxlength` (`Integer`) — Specifies the maximum length, in characters, of the field.\n- `:size` (`Integer`) — Specifies the width, in characters, of the field.\n- `:placeholder` ([`String`](../../string \"String (class)\")) — Specifies a short hint that describes the expected value of the field.\n- `:hidden` (`Boolean`) — Specifies whether or not the field is hidden from view.\n- `:spellcheck` (`Boolean`) — Specifies whether or not the field should have it's spelling and grammar checked for errors.\n- `:draggable` (`Boolean`) — Specifies whether or not the field is draggable. (true, false, :auto).\n- `:pattern` ([`String`](../../string \"String (class)\")) — Specifies the regular expression pattern that the field's value is checked against.\n- `:autocomplete` (`Symbol`) — Specifies whether or not the field should have autocomplete enabled. (:on, :off).\n- `:autofocus` (`Boolean`) — Specifies whether or not the field should automatically get focus when the page loads.\n- `:required` (`Boolean`) — Specifies whether or not the field is required to be completed before the form is submitted.\n- `:readonly` (`Boolean`) — Specifies whether or not the field is read only.\n- `:disabled` (`Boolean`) — Specifies whether or not the field is disabled.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Generated HTML with specified `options`.\n\n### \\#field_set_tag(legend = nil, options = {}, &block) ⇒ String \\#field_set_tag(options = {}, &block) ⇒ String\n\nConstructs a field_set to group fields with given options.\n\n#### Examples:\n\n``` ruby\nfield_set_tag(:class => \"office-set\") { }\nfield_set_tag(\"Office\", :class => 'office-set') { }\n```\n\n#### Overloads:\n\n- ### \\#field_set_tag(legend = nil, options = {}, &block) ⇒ String\n\n  #### Parameters:\n\n  - `legend` ([`String`](../../string \"String (class)\")) *(defaults to: `nil`)* — The legend caption for the fieldset\n  - `options` (`Hash`) *(defaults to: `{}`)* — The html options for the fieldset.\n  - `block` (`Proc`) — The content inside the fieldset.\n\n- ### \\#field_set_tag(options = {}, &block) ⇒ String\n\n  #### Parameters:\n\n  - `options` (`Hash`) *(defaults to: `{}`)* — The html options for the fieldset.\n  - `block` (`Proc`) — The content inside the fieldset.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html for the fieldset tag based on given `options`.\n\n### \\#fields_for(object, options = {}, &block) ⇒ String\n\nConstructs form fields for an object using given or default form_builder. Used within an existing form to allow alternate objects within one form.\n\n#### Examples:\n\n``` ruby\nfields_for @user.assignment do |assignment| ... end\nfields_for :assignment do |assigment| ... end\n```\n\n#### Parameters:\n\n- `object` ([`Object`](../../object \"Object (class)\")) — The object for which the fields are being built.\n- `options` (`Hash`) *(defaults to: `{}`)* — The settings associated with these fields. Accepts HTML options.\n- `block` (`Proc`) — The content inside this set of fields.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html fields with the specified options.\n\n### \\#file_field_tag(name, options = {}) ⇒ Object\n\nConstructs a file field input from the given options.\n\n#### Examples:\n\n``` ruby\nfile_field_tag :photo, :class => 'long'\n```\n\n### \\#form_for(object, url, options = {}, &block) {\\|AbstractFormBuilder\\| ... } ⇒ String\n\nConstructs a form for object using given or default form_builder.\n\n#### Examples:\n\n``` ruby\nform_for :user, '/register' do |f| ... end\nform_for @user, '/register', :id => 'register' do |f| ... end\nform_for @user, '/register', :as => :customer do |f| ... end\n```\n\n#### Parameters:\n\n- `object` ([`Object`](../../object \"Object (class)\")) — The object for which the form is being built.\n- `URL` ([`String`](../../string \"String (class)\")) — The url this form will submit to.\n- `options` (`Hash`) *(defaults to: `{}`)* — The settings associated with this form. Accepts a :namespace option that will be prepended to the id attributes of the form's elements. Also accepts HTML options.\n- `block` (`Proc`) — The fields and content inside this form.\n- `settings` (`Hash`) — a customizable set of options\n\n#### Yields:\n\n- (`AbstractFormBuilder`) — The form builder used to compose fields.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html object-backed form with the specified options and input fields.\n\n### \\#form_tag(url, options = {}, &block) ⇒ String\n\nConstructs a form without object based on options.\n\n#### Examples:\n\n``` ruby\nform_tag '/register', :class => \"registration_form\" do ... end\n```\n\n#### Parameters:\n\n- `url` ([`String`](../../string \"String (class)\")) — The URL this form will submit to.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options associated with this form.\n- `block` (`Proc`) — The fields and content inside this form.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The HTML form with the specified options and input fields.\n\n### \\#hidden_field_tag(name, options = {}) ⇒ Object\n\nConstructs a hidden field input from the given options.\n\n#### Examples:\n\n``` ruby\nhidden_field_tag :session_key, :value => \"__secret__\"\n```\n\n### \\#hidden_form_method_field(desired_method) ⇒ String\n\nReturns the hidden method field for 'put' and 'delete' forms. Only 'get' and 'post' are allowed within browsers; 'put' and 'delete' are just specified using hidden fields with form action still 'put'.\n\n#### Examples:\n\n``` ruby\n# Generate: <input name=\"_method\" value=\"delete\" />\nhidden_form_method_field('delete')\n```\n\n#### Parameters:\n\n- `desired_method` ([`String`](../../string \"String (class)\")) — The method this hidden field represents (i.e put or delete).\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The hidden field representing the `desired_method` for the form.\n\n### \\#image_submit_tag(source, options = {}) ⇒ String\n\nConstructs a submit button from the given options.\n\n#### Examples:\n\n``` ruby\nimage_submit_tag 'form/submit.png'\n```\n\n#### Parameters:\n\n- `source` ([`String`](../../string \"String (class)\")) — The source image path for the button.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the input field.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html image button based on the `options` specified.\n\n### \\#label_tag(name, options = {}, &block) ⇒ String\n\nConstructs a label tag from the given options.\n\n#### Examples:\n\n``` ruby\nlabel_tag :username, :class => 'long-label'\nlabel_tag :username, :class => 'long-label' do ... end\n```\n\n#### Parameters:\n\n- `name` ([`String`](../../string \"String (class)\")) — The name of the field to label.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for this label.\n- `block` (`Proc`) — The content to be inserted into the label.\n\n#### Options Hash (`options`):\n\n- `:caption` ([`Object`](../../object \"Object (class)\")) — The caption for this label.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html for this label with the given `options`.\n\n### \\#month_field_tag(name, options = {}) ⇒ String\n\nConstructs a month tag from the given options.\n\n#### Examples:\n\n``` ruby\nmonth_field_tag('month_with_min_max', :min => DateTime.new(1993, 2, 24),\n                                      :max => DateTime.new(2000, 4, 1))\nmonth_field_tag('month_with_value', :value => DateTime.new(2000, 4, 1))\n```\n\n#### Parameters:\n\n- `name` ([`String`](../../string \"String (class)\")) — The name of the month field.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the month field.\n\n#### Options Hash (`options`):\n\n- `:min` (`DateTime`, [`String`](../../string \"String (class)\")) — The min month time of the month field.\n- `:max` (`DateTime`, [`String`](../../string \"String (class)\")) — The max month time of the month field.\n- `:value` (`DateTime`, [`String`](../../string \"String (class)\")) — The value of the month field. See examples for details.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html month field\n\n### \\#number_field_tag(name, options = {}) ⇒ String\n\nCreates a number field input with the given name and options.\n\n#### Examples:\n\n``` ruby\nnumber_field_tag :quantity, :class => 'numeric'\n# => <input name=\"quantity\" class=\"numeric\" type=\"number\" />\n\nnumber_field_tag :zip_code, :pattern => /[0-9]{5}/\n# => <input name=\"zip_code\" pattern=\"[0-9]{5}\" type=\"number\" />\n\nnumber_field_tag :credit_card, :autocomplete => :off\n# => <input name=\"credit_card\" autocomplete=\"off\" type=\"number\" />\n\nnumber_field_tag :age, :min => 18, :max => 120, :step => 1\n# => <input name=\"age\" min=\"18\" max=\"120\" step=\"1\" type=\"number\" />\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) — The name of the input to create.\n- `options` (`Hash`) *(defaults to: `{}`)* — The HTML options to include in this field.\n\n#### Options Hash (`options`):\n\n- `:id` ([`String`](../../string \"String (class)\")) — Specifies a unique identifier for the field.\n- `:class` ([`String`](../../string \"String (class)\")) — Specifies the stylesheet class of the field.\n- `:name` ([`String`](../../string \"String (class)\")) — Specifies the name of the field.\n- `:accesskey` ([`String`](../../string \"String (class)\")) — Specifies a shortcut key to access the field.\n- `:tabindex` (`Integer`) — Specifies the tab order of the field.\n- `:min` (`Integer`) — Specifies the minimum value of the field.\n- `:max` (`Integer`) — Specifies the maximum value of the field.\n- `:step` (`Integer`) — Specifies the legal number intervals of the field.\n- `:hidden` (`Boolean`) — Specifies whether or not the field is hidden from view.\n- `:spellcheck` (`Boolean`) — Specifies whether or not the field should have it's spelling and grammar checked for errors.\n- `:draggable` (`Boolean`) — Specifies whether or not the field is draggable. (true, false, :auto).\n- `:pattern` ([`String`](../../string \"String (class)\")) — Specifies the regular expression pattern that the field's value is checked against.\n- `:autocomplete` (`Symbol`) — Specifies whether or not the field should have autocomplete enabled. (:on, :off).\n- `:autofocus` (`Boolean`) — Specifies whether or not the field should automatically get focus when the page loads.\n- `:required` (`Boolean`) — Specifies whether or not the field is required to be completeled before the form is submitted.\n- `:readonly` (`Boolean`) — Specifies whether or not the field is read only.\n- `:disabled` (`Boolean`) — Specifies whether or not the field is disabled.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Generated HTML with specified `options`.\n\n### \\#password_field_tag(name, options = {}) ⇒ Object\n\nConstructs a password field input from the given options.\n\n#### Examples:\n\n``` ruby\npassword_field_tag :password, :class => 'long'\n```\n\n### \\#radio_button_tag(name, options = {}) ⇒ Object\n\nConstructs a radio_button from the given options.\n\n#### Examples:\n\n``` ruby\nradio_button_tag :remember_me, :value => 'true'\n```\n\n### \\#range_field_tag(name, options = {}) ⇒ String\n\nConstructs a range tag from the given options.\n\n#### Examples:\n\n``` ruby\nrange_field_tag('ranger_with_min_max', :min => 1, :max => 50)\nrange_field_tag('ranger_with_range', :range => 1..5)\n```\n\n#### Parameters:\n\n- `name` ([`String`](../../string \"String (class)\")) — The name of the range field.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the range field.\n\n#### Options Hash (`options`):\n\n- `:min` (`Integer`) — The min range of the range field.\n- `:max` (`Integer`) — The max range of the range field.\n- `:range` (`range`) — The range, in lieu of :min and :max. See examples for details.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html range field\n\n### \\#search_field_tag(name, options = {}) ⇒ String\n\nCreates a search field input with the given name and options.\n\n#### Examples:\n\n``` ruby\nsearch_field_tag :search, :placeholder => 'Search this website...'\n# => <input name=\"search\" placeholder=\"Search this website...\" type=\"search\" />\n\nsearch_field_tag :search, :maxlength => 15, :class => ['search', 'string']\n# => <input name=\"search\" maxlength=\"15\" class=\"search string\" />\n\nsearch_field_tag :search, :id => 'search'\n# => <input name=\"search\" id=\"search\" type=\"search\" />\n\nsearch_field_tag :search, :autofocus => true\n# => <input name=\"search\" autofocus type=\"search\" />\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) — The name of the input to create.\n- `options` (`Hash`) *(defaults to: `{}`)* — The HTML options to include in this field.\n\n#### Options Hash (`options`):\n\n- `:id` ([`String`](../../string \"String (class)\")) — Specifies a unique identifier for the field.\n- `:class` ([`String`](../../string \"String (class)\")) — Specifies the stylesheet class of the field.\n- `:name` ([`String`](../../string \"String (class)\")) — Specifies the name of the field.\n- `:accesskey` ([`String`](../../string \"String (class)\")) — Specifies a shortcut key to access the field.\n- `:tabindex` (`Integer`) — Specifies the tab order of the field.\n- `:maxlength` (`Integer`) — Specifies the maximum length, in characters, of the field.\n- `:size` (`Integer`) — Specifies the width, in characters, of the field.\n- `:placeholder` ([`String`](../../string \"String (class)\")) — Specifies a short hint that describes the expected value of the field.\n- `:hidden` (`Boolean`) — Specifies whether or not the field is hidden from view.\n- `:spellcheck` (`Boolean`) — Specifies whether or not the field should have it's spelling and grammar checked for errors.\n- `:draggable` (`Boolean`) — Specifies whether or not the field is draggable. (true, false, :auto).\n- `:pattern` ([`String`](../../string \"String (class)\")) — Specifies the regular expression pattern that the field's value is checked against.\n- `:autocomplete` (`Symbol`) — Specifies whether or not the field should have autocomplete enabled. (:on, :off).\n- `:autofocus` (`Boolean`) — Specifies whether or not the field should automatically get focus when the page loads.\n- `:required` (`Boolean`) — Specifies whether or not the field is required to be completed before the form is submitted.\n- `:readonly` (`Boolean`) — Specifies whether or not the field is read only.\n- `:disabled` (`Boolean`) — Specifies whether or not the field is disabled.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Generated HTML with specified `options`.\n\n### \\#select_tag(name, options = {}) ⇒ String\n\nConstructs a select from the given options.\n\n#### Examples:\n\n``` ruby\noptions = [['caption', 'value'], ['Green', 'green1'], ['Blue', 'blue1'], ['Black', \"black1\"]]\noptions = ['option', 'red', 'yellow' ]\nselect_tag(:favorite_color, :options => ['red', 'yellow'], :selected => 'green1')\nselect_tag(:country, :collection => @countries, :fields => [:name, :code], :include_blank => 'None')\n\n# Optgroups can be generated using :grouped_options => (Hash or nested Array)\ngrouped_options = [['Friends',['Yoda',['Obiwan',1]]],['Enemies',['Palpatine',['Darth Vader',3]]]]\ngrouped_options = {'Friends' => ['Yoda',['Obiwan',1]],'Enemies' => ['Palpatine',['Darth Vader',3]]}\nselect_tag(:color, :grouped_options => [['warm',['red','yellow']],['cool',['blue', 'purple']]])\n\n# Optgroups can be generated using the rails-style attribute hash.\ngrouped_options = {\n  \"Friends\" => [\"Yoda\", [\"Obiwan\", 2, {:magister => 'no'}], {:lame => 'yes'}],\n  \"Enemies\" => [[\"Palpatine\", \"Palpatine\", {:scary => 'yes', :old => 'yes'}], [\"Darth Vader\", 3, {:disabled => true}]]\n}\nselect_tag(:name, :grouped_options => grouped_options)\n```\n\n#### Parameters:\n\n- `name` ([`String`](../../string \"String (class)\")) — The name of the input field.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the input field.\n\n#### Options Hash (`options`):\n\n- `:options` (`Array<`[`String`](../../string \"String (class)\")`, Array>`) — Explicit options to display in the select. Can be strings or string tuples.\n- `:grouped_options` (`Array<Array>`) — List of options for each group in the select. See examples for details.\n- `:collection` (`Array<`[`Object`](../../object \"Object (class)\")`>`) — Collection of objects used as options in the select.\n- `:fields` (`Array<Symbol>`) — The attributes used as “label” and “value” for each `collection` object.\n- `:selected` ([`String`](../../string \"String (class)\")) — default: `nil` — The option value initially selected.\n- `:include_blank` (`Boolean`) — default: `false` — Include a blank option in the select.\n- `:multiple` (`Boolean`) — default: `false` — Allow multiple options to be selected at once.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The HTML input field based on the `options` specified.\n\n### \\#submit_tag(options = {}) ⇒ String \\#submit_tag(caption, options = {}) ⇒ String\n\nConstructs a submit button from the given options.\n\n#### Examples:\n\n``` ruby\nsubmit_tag \"Create\", :class => 'success'\nsubmit_tag :class => 'btn'\n```\n\n#### Overloads:\n\n- ### \\#submit_tag(options = {}) ⇒ String\n\n  #### Parameters:\n\n  - `options` (`Hash`) *(defaults to: `{}`)* — The html options for the input field.\n\n- ### \\#submit_tag(caption, options = {}) ⇒ String\n\n  #### Parameters:\n\n  - `caption` ([`String`](../../string \"String (class)\")) — The caption for the submit button.\n  - `options` (`Hash`) *(defaults to: `{}`)* — The html options for the input field.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html submit button based on the `options` specified.\n\n### \\#telephone_field_tag(name, options = {}) ⇒ String Also known as: phone_field_tag\n\nCreates a telephone field input with the given name and options.\n\n``` ruby\ntelephone_field_tag :cell_phone, :tabindex => 1\ntelephone_field_tag :work_phone, :tabindex => 2\ntelephone_field_tag :home_phone, :tabindex => 3\n\n# => <input name=\"cell_phone\" tabindex=\"1\" type=\"tel\" />\n# => <input name=\"work_phone\" tabindex=\"2\" type=\"tel\" />\n# => <input name=\"home_phone\" tabindex=\"3\" type=\"tel\" />\n```\n\n#### Examples:\n\n``` ruby\ntelephone_field_tag :phone_number, :class => 'string'\n# => <input name=\"phone_number\" class=\"string\" type=\"tel\" />\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) — The name of the input to create.\n- `options` (`Hash`) *(defaults to: `{}`)* — The HTML options to include in this field.\n\n#### Options Hash (`options`):\n\n- `:id` ([`String`](../../string \"String (class)\")) — Specifies a unique identifier for the field.\n- `:class` ([`String`](../../string \"String (class)\")) — Specifies the stylesheet class of the field.\n- `:name` ([`String`](../../string \"String (class)\")) — Specifies the name of the field.\n- `:accesskey` ([`String`](../../string \"String (class)\")) — Specifies a shortcut key to access the field.\n- `:tabindex` (`Integer`) — Specifies the tab order of the field.\n- `:maxlength` (`Integer`) — Specifies the maximum length, in characters, of the field.\n- `:size` (`Integer`) — Specifies the width, in characters, of the field.\n- `:placeholder` ([`String`](../../string \"String (class)\")) — Specifies a short hint that describes the expected value of the field.\n- `:hidden` (`Boolean`) — Specifies whether or not the field is hidden from view.\n- `:spellcheck` (`Boolean`) — Specifies whether or not the field should have it's spelling and grammar checked for errors.\n- `:draggable` (`Boolean`) — Specifies whether or not the field is draggable. (true, false, :auto).\n- `:pattern` ([`String`](../../string \"String (class)\")) — Specifies the regular expression pattern that the field's value is checked against.\n- `:autocomplete` (`Symbol`) — Specifies whether or not the field should have autocomplete enabled. (:on, :off).\n- `:autofocus` (`Boolean`) — Specifies whether or not the field should automatically get focus when the page loads.\n- `:required` (`Boolean`) — Specifies whether or not the field is required to be completed before the form is submitted.\n- `:readonly` (`Boolean`) — Specifies whether or not the field is read only.\n- `:disabled` (`Boolean`) — Specifies whether or not the field is disabled.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Generated HTML with specified `options`.\n\n### \\#text_area_tag(name, options = {}) ⇒ Object\n\nConstructs a text area input from the given options.\n\n#### Examples:\n\n``` ruby\ntext_area_tag :username, :class => 'long', :value => \"Demo?\"\n```\n\n### \\#text_field_tag(name, options = {}) ⇒ String\n\nCreates a text field input with the given name and options.\n\n#### Examples:\n\n``` ruby\ntext_field_tag :first_name, :maxlength => 40, :required => true\n# => <input name=\"first_name\" maxlength=\"40\" required type=\"text\" />\n\ntext_field_tag :last_name, :class => 'string', :size => 40\n# => <input name=\"last_name\" class=\"string\" size=\"40\" type=\"text\" />\n\ntext_field_tag :username, :placeholder => 'Your Username'\n# => <input name=\"username\" placeholder=\"Your Username\" type=\"text\" />\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) — The name of the input to create.\n- `options` (`Hash`) *(defaults to: `{}`)* — The HTML options to include in this field.\n\n#### Options Hash (`options`):\n\n- `:id` ([`String`](../../string \"String (class)\")) — Specifies a unique identifier for the field.\n- `:class` ([`String`](../../string \"String (class)\")) — Specifies the stylesheet class of the field.\n- `:name` ([`String`](../../string \"String (class)\")) — Specifies the name of the field.\n- `:accesskey` ([`String`](../../string \"String (class)\")) — Specifies a shortcut key to access the field.\n- `:tabindex` (`Integer`) — Specifies the tab order of the field.\n- `:maxlength` (`Integer`) — Specifies the maximum length, in characters, of the field.\n- `:size` (`Integer`) — Specifies the width, in characters, of the field.\n- `:placeholder` ([`String`](../../string \"String (class)\")) — Specifies a short hint that describes the expected value of the field.\n- `:hidden` (`Boolean`) — Specifies whether or not the field is hidden from view.\n- `:spellcheck` (`Boolean`) — Specifies whether or not the field should have it's spelling and grammar checked for errors.\n- `:draggable` (`Boolean`) — Specifies whether or not the field is draggable. (true, false, :auto).\n- `:pattern` ([`String`](../../string \"String (class)\")) — Specifies the regular expression pattern that the field's value is checked against.\n- `:autocomplete` (`Symbol`) — Specifies whether or not the field should have autocomplete enabled. (:on, :off).\n- `:autofocus` (`Boolean`) — Specifies whether or not the field should automatically get focus when the page loads.\n- `:required` (`Boolean`) — Specifies whether or not the field is required to be completed before the form is submitted.\n- `:readonly` (`Boolean`) — Specifies whether or not the field is read only.\n- `:disabled` (`Boolean`) — Specifies whether or not the field is disabled.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Generated HTML with specified `options`.\n\n### \\#time_field_tag(name, options = {}) ⇒ String\n\nConstructs a time tag from the given options.\n\n#### Examples:\n\n``` ruby\ntime_field_tag('time_with_min_max', :max => Time.new(1993, 2, 24, 1, 19, 12),\n                                    :min => Time.new(2008, 6, 21, 13, 30, 0))\ntime_field_tag('time_with_value', :value => Time.new(2008, 6, 21, 13, 30, 0))\n```\n\n#### Parameters:\n\n- `name` ([`String`](../../string \"String (class)\")) — The name of the time field.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the time field.\n\n#### Options Hash (`options`):\n\n- `:min` (`Time`, `DateTime`, [`String`](../../string \"String (class)\")) — The min time of the time field.\n- `:max` (`Time`, `DateTime`, [`String`](../../string \"String (class)\")) — The max time of the time field.\n- `:value` (`Time`, `DateTime`, [`String`](../../string \"String (class)\")) — The value of the time field. See examples for details.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html time field\n\n### \\#url_field_tag(name, options = {}) ⇒ String\n\nCreates a URL field input with the given name and options.\n\n#### Examples:\n\n``` ruby\nurl_field_tag :favorite_website, :placeholder => 'http://padrinorb.com'\n<input name=\"favorite_website\" placeholder=\"http://padrinorb.com.\" type=\"url\" />\n\nurl_field_tag :home_page, :class => 'string url'\n<input name=\"home_page\" class=\"string url\", type=\"url\" />\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) — The name of the input to create.\n- `options` (`Hash`) *(defaults to: `{}`)* — The HTML options to include in this field.\n\n#### Options Hash (`options`):\n\n- `:id` ([`String`](../../string \"String (class)\")) — Specifies a unique identifier for the field.\n- `:class` ([`String`](../../string \"String (class)\")) — Specifies the stylesheet class of the field.\n- `:name` ([`String`](../../string \"String (class)\")) — Specifies the name of the field.\n- `:accesskey` ([`String`](../../string \"String (class)\")) — Specifies a shortcut key to access the field.\n- `:tabindex` (`Integer`) — Specifies the tab order of the field.\n- `:maxlength` (`Integer`) — Specifies the maximum length, in characters, of the field.\n- `:size` (`Integer`) — Specifies the width, in characters, of the field.\n- `:placeholder` ([`String`](../../string \"String (class)\")) — Specifies a short hint that describes the expected value of the field.\n- `:hidden` (`Boolean`) — Specifies whether or not the field is hidden from view.\n- `:spellcheck` (`Boolean`) — Specifies whether or not the field should have it's spelling and grammar checked for errors.\n- `:draggable` (`Boolean`) — Specifies whether or not the field is draggable. (true, false, :auto).\n- `:pattern` ([`String`](../../string \"String (class)\")) — Specifies the regular expression pattern that the field's value is checked against.\n- `:autocomplete` (`Symbol`) — Specifies whether or not the field should have autocomplete enabled. (:on, :off).\n- `:autofocus` (`Boolean`) — Specifies whether or not the field should automatically get focus when the page loads.\n- `:required` (`Boolean`) — Specifies whether or not the field is required to be completed before the form is submitted.\n- `:readonly` (`Boolean`) — Specifies whether or not the field is read only.\n- `:disabled` (`Boolean`) — Specifies whether or not the field is disabled.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Generated HTML with specified `options`.\n\n### \\#week_field_tag(name, options = {}) ⇒ String\n\nConstructs a week tag from the given options.\n\n#### Examples:\n\n``` ruby\nweek_field_tag('week_with_min_max', :min => DateTime.new(1993, 2, 24),\n                                    :max => DateTime.new(2000, 4, 1))\nweek_field_tag('week_with_value', :value => DateTime.new(2000, 4, 1))\n```\n\n#### Parameters:\n\n- `name` ([`String`](../../string \"String (class)\")) — The name of the week field.\n- `options` (`Hash`) *(defaults to: `{}`)* — The html options for the week field.\n\n#### Options Hash (`options`):\n\n- `:min` (`DateTime`, [`String`](../../string \"String (class)\")) — The min week time of the week field.\n- `:max` (`DateTime`, [`String`](../../string \"String (class)\")) — The max week time of the week field.\n- `:value` (`DateTime`, [`String`](../../string \"String (class)\")) — The value of the week field. See examples for details.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html week field\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers)"
- name: Padrino::Helpers::FormHelpers#button_tag
  id: padrino/helpers/formhelpers#button_tag-instance_method
  summary: Constructs a button input from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#button_tag(caption, options = {}) ⇒ String

    Constructs a button input from the given options.

    #### Examples:

    ``` ruby
    button_tag "Cancel", :class => 'clear'
    ```

    #### Parameters:

    - `caption`([`String`](../../string "String (class)")) — The caption for the button.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the input field.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html button based on the `options` specified.
- name: Padrino::Helpers::FormHelpers#button_to
  id: padrino/helpers/formhelpers#button_to-instance_method
  summary: Creates a form containing a single button that submits to the URL
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#button_to(caption, url, options = {}) ⇒ String \#button_to(url, options = {}, &block) ⇒ String

    Creates a form containing a single button that submits to the URL.

    #### Examples:

    ``` ruby
    button_to 'Delete', url(:accounts_destroy, :id => account), :method => :delete, :class => :form
    # Generates:
    # <form class="form" action="/admin/accounts/destroy/2" method="post">
    #   <input type="hidden" value="delete" name="_method" />
    #   <input type="submit" value="Delete" />
    # </form>
    ```

    #### Overloads:

    - ### \#button_to(caption, url, options = {}) ⇒ String

      #### Parameters:

      - `caption`([`String`](../../string "String (class)")) — The text caption.
      - `url`([`String`](../../string "String (class)")) — The url href.
      - `options`(`Hash`)*(defaults to: `{}`)* — The html options.

    - ### \#button_to(url, options = {}, &block) ⇒ String

      #### Parameters:

      - `url`([`String`](../../string "String (class)")) — The url href.
      - `options`(`Hash`)*(defaults to: `{}`)* — The html options.
      - `block`(`Proc`) — The button content.

    #### Parameters:

    - `options`(`Hash`) — a customizable set of options

    #### Returns:

    - ([`String`](../../string "String (class)")) — Form and button html with specified `options`.
- name: Padrino::Helpers::FormHelpers#check_box_tag
  id: padrino/helpers/formhelpers#check_box_tag-instance_method
  summary: Constructs a check_box from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#check_box_tag(name, options = {}) ⇒ Object

    Constructs a check_box from the given options.

    #### Examples:

    ``` ruby
    check_box_tag :remember_me, :value => 'Yes'
    ```
- name: Padrino::Helpers::FormHelpers#color_field_tag
  id: padrino/helpers/formhelpers#color_field_tag-instance_method
  summary: Constructs a color tag from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#color_field_tag(name, options = {}) ⇒ Object

    Constructs a color tag from the given options.

    #### Examples:

    ``` ruby
    color_field_tag('color', :value => "#ff0000")
    color_field_tag('color', :value => "#f00")
    ```

    #### Parameters:

    - `name`([`String`](../../string "String (class)")) — The name of the color field.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the color field.

    #### Options Hash (`options`):

    - `:value`([`String`](../../string "String (class)")) — The value of the color field. See examples for details.
- name: Padrino::Helpers::FormHelpers#date_field_tag
  id: padrino/helpers/formhelpers#date_field_tag-instance_method
  summary: Constructs a date tag from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#date_field_tag(name, options = {}) ⇒ String

    Constructs a date tag from the given options.

    #### Examples:

    ``` ruby
    date_field_tag('date_with_min_max', :min => DateTime.new(1993, 2, 24),
                                        :max => DateTime.new(2000, 4, 1))
    date_field_tag('date_with_value', :value => DateTime.new(2000, 4, 1))
    ```

    #### Parameters:

    - `name`([`String`](../../string "String (class)")) — The name of the date field.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the date field.

    #### Options Hash (`options`):

    - `:min`(`DateTime`, [`String`](../../string "String (class)")) — The min date time of the date field.
    - `:max`(`DateTime`, [`String`](../../string "String (class)")) — The max date time of the date field.
    - `:value`(`DateTime`, [`String`](../../string "String (class)")) — The value of the date field. See examples for details.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html date field
- name: Padrino::Helpers::FormHelpers#datetime_field_tag
  id: padrino/helpers/formhelpers#datetime_field_tag-instance_method
  summary: Constructs a datetime tag from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#datetime_field_tag(name, options = {}) ⇒ String

    Constructs a datetime tag from the given options.

    #### Examples:

    ``` ruby
    datetime_field_tag('datetime_with_min_max', :min => DateTime.new(1993, 2, 24, 12, 30, 45),
                                                :max => DateTime.new(2000, 4, 1, 12, 0, 0))
    datetime_field_tag('datetime_with_value', :value => DateTime.new(2000, 4, 1, 12, 0, 0))
    ```

    #### Parameters:

    - `name`([`String`](../../string "String (class)")) — The name of the datetime field.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the datetime field.

    #### Options Hash (`options`):

    - `:min`(`DateTime`, [`String`](../../string "String (class)")) — The min date time of the datetime field.
    - `:max`(`DateTime`, [`String`](../../string "String (class)")) — The max date time of the datetime field.
    - `:value`(`DateTime`, [`String`](../../string "String (class)")) — The value of the datetime field. See examples for details.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html datetime field
- name: Padrino::Helpers::FormHelpers#datetime_local_field_tag
  id: padrino/helpers/formhelpers#datetime_local_field_tag-instance_method
  summary: Constructs a datetime-local tag from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#datetime_local_field_tag(name, options = {}) ⇒ String

    Constructs a datetime-local tag from the given options.

    #### Examples:

    ``` ruby
    datetime_local_field_tag('datetime_local_with_min_max', :min => DateTime.new(1993, 2, 24, 12, 30, 45),
                                                            :max => DateTime.new(2000, 4, 1, 12, 0, 0))
    datetime_local_field_tag('datetime_local_with_value', :value => DateTime.new(2000, 4, 1, 12, 0, 0))
    ```

    #### Parameters:

    - `name`([`String`](../../string "String (class)")) — The name of the datetime local field.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the datetime-local field.

    #### Options Hash (`options`):

    - `:min`(`DateTime`, [`String`](../../string "String (class)")) — The min date time of the datetime-local field.
    - `:max`(`DateTime`, [`String`](../../string "String (class)")) — The max date time of the datetime-local field.
    - `:value`(`DateTime`, [`String`](../../string "String (class)")) — The value of the datetime field. See examples for details.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html datetime-local field
- name: Padrino::Helpers::FormHelpers#email_field_tag
  id: padrino/helpers/formhelpers#email_field_tag-instance_method
  summary: Creates an email field input with the given name and options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#email_field_tag(name, options = {}) ⇒ String

    Creates an email field input with the given name and options.

    #### Examples:

    ``` ruby
    email_field_tag :email, :placeholder => 'you@example.com'
    # => <input name="email" placeholder="you@example.com" type="email" />

    email_field_tag :email, :value => 'padrinorb@gmail.com', :readonly => true
    # => <input name="email" value="padrinorb@gmail.com" readonly type="email" />
    ```

    #### Parameters:

    - `name`(`Symbol`) — The name of the input to create.
    - `options`(`Hash`)*(defaults to: `{}`)* — The HTML options to include in this field.

    #### Options Hash (`options`):

    - `:id`([`String`](../../string "String (class)")) — Specifies a unique identifier for the field.
    - `:class`([`String`](../../string "String (class)")) — Specifies the stylesheet class of the field.
    - `:name`([`String`](../../string "String (class)")) — Specifies the name of the field.
    - `:accesskey`([`String`](../../string "String (class)")) — Specifies a shortcut key to access the field.
    - `:tabindex`(`Integer`) — Specifies the tab order of the field.
    - `:maxlength`(`Integer`) — Specifies the maximum length, in characters, of the field.
    - `:size`(`Integer`) — Specifies the width, in characters, of the field.
    - `:placeholder`([`String`](../../string "String (class)")) — Specifies a short hint that describes the expected value of the field.
    - `:hidden`(`Boolean`) — Specifies whether or not the field is hidden from view.
    - `:spellcheck`(`Boolean`) — Specifies whether or not the field should have it's spelling and grammar checked for errors.
    - `:draggable`(`Boolean`) — Specifies whether or not the field is draggable. (true, false, :auto).
    - `:pattern`([`String`](../../string "String (class)")) — Specifies the regular expression pattern that the field's value is checked against.
    - `:autocomplete`(`Symbol`) — Specifies whether or not the field should have autocomplete enabled. (:on, :off).
    - `:autofocus`(`Boolean`) — Specifies whether or not the field should automatically get focus when the page loads.
    - `:required`(`Boolean`) — Specifies whether or not the field is required to be completed before the form is submitted.
    - `:readonly`(`Boolean`) — Specifies whether or not the field is read only.
    - `:disabled`(`Boolean`) — Specifies whether or not the field is disabled.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Generated HTML with specified `options`.
- name: Padrino::Helpers::FormHelpers#field_set_tag
  id: padrino/helpers/formhelpers#field_set_tag-instance_method
  summary: Constructs a field_set to group fields with given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#field_set_tag(legend = nil, options = {}, &block) ⇒ String \#field_set_tag(options = {}, &block) ⇒ String

    Constructs a field_set to group fields with given options.

    #### Examples:

    ``` ruby
    field_set_tag(:class => "office-set") { }
    field_set_tag("Office", :class => 'office-set') { }
    ```

    #### Overloads:

    - ### \#field_set_tag(legend = nil, options = {}, &block) ⇒ String

      #### Parameters:

      - `legend`([`String`](../../string "String (class)"))*(defaults to: `nil`)* — The legend caption for the fieldset
      - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the fieldset.
      - `block`(`Proc`) — The content inside the fieldset.

    - ### \#field_set_tag(options = {}, &block) ⇒ String

      #### Parameters:

      - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the fieldset.
      - `block`(`Proc`) — The content inside the fieldset.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html for the fieldset tag based on given `options`.
- name: Padrino::Helpers::FormHelpers#fields_for
  id: padrino/helpers/formhelpers#fields_for-instance_method
  summary: Constructs form fields for an object using given or default form_builder
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#fields_for(object, options = {}, &block) ⇒ String

    Constructs form fields for an object using given or default form_builder. Used within an existing form to allow alternate objects within one form.

    #### Examples:

    ``` ruby
    fields_for @user.assignment do |assignment| ... end
    fields_for :assignment do |assigment| ... end
    ```

    #### Parameters:

    - `object`([`Object`](../../object "Object (class)")) — The object for which the fields are being built.
    - `options`(`Hash`)*(defaults to: `{}`)* — The settings associated with these fields. Accepts HTML options.
    - `block`(`Proc`) — The content inside this set of fields.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html fields with the specified options.
- name: Padrino::Helpers::FormHelpers#file_field_tag
  id: padrino/helpers/formhelpers#file_field_tag-instance_method
  summary: Constructs a file field input from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#file_field_tag(name, options = {}) ⇒ Object

    Constructs a file field input from the given options.

    #### Examples:

    ``` ruby
    file_field_tag :photo, :class => 'long'
    ```
- name: Padrino::Helpers::FormHelpers#form_for
  id: padrino/helpers/formhelpers#form_for-instance_method
  summary: Constructs a form for object using given or default form_builder
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#form_for(object, url, options = {}, &block) {\|AbstractFormBuilder\| ... } ⇒ String

    Constructs a form for object using given or default form_builder.

    #### Examples:

    ``` ruby
    form_for :user, '/register' do |f| ... end
    form_for @user, '/register', :id => 'register' do |f| ... end
    form_for @user, '/register', :as => :customer do |f| ... end
    ```

    #### Parameters:

    - `object`([`Object`](../../object "Object (class)")) — The object for which the form is being built.
    - `URL`([`String`](../../string "String (class)")) — The url this form will submit to.
    - `options`(`Hash`)*(defaults to: `{}`)* — The settings associated with this form. Accepts a :namespace option that will be prepended to the id attributes of the form's elements. Also accepts HTML options.
    - `block`(`Proc`) — The fields and content inside this form.
    - `settings`(`Hash`) — a customizable set of options

    #### Yields:

    - (`AbstractFormBuilder`) — The form builder used to compose fields.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html object-backed form with the specified options and input fields.
- name: Padrino::Helpers::FormHelpers#form_tag
  id: padrino/helpers/formhelpers#form_tag-instance_method
  summary: Constructs a form without object based on options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#form_tag(url, options = {}, &block) ⇒ String

    Constructs a form without object based on options.

    #### Examples:

    ``` ruby
    form_tag '/register', :class => "registration_form" do ... end
    ```

    #### Parameters:

    - `url`([`String`](../../string "String (class)")) — The URL this form will submit to.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options associated with this form.
    - `block`(`Proc`) — The fields and content inside this form.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The HTML form with the specified options and input fields.
- name: Padrino::Helpers::FormHelpers#hidden_field_tag
  id: padrino/helpers/formhelpers#hidden_field_tag-instance_method
  summary: Constructs a hidden field input from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#hidden_field_tag(name, options = {}) ⇒ Object

    Constructs a hidden field input from the given options.

    #### Examples:

    ``` ruby
    hidden_field_tag :session_key, :value => "__secret__"
    ```
- name: Padrino::Helpers::FormHelpers#hidden_form_method_field
  id: padrino/helpers/formhelpers#hidden_form_method_field-instance_method
  summary: Returns the hidden method field for 'put' and 'delete' forms
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#hidden_form_method_field(desired_method) ⇒ String

    Returns the hidden method field for 'put' and 'delete' forms. Only 'get' and 'post' are allowed within browsers; 'put' and 'delete' are just specified using hidden fields with form action still 'put'.

    #### Examples:

    ``` ruby
    # Generate: <input name="_method" value="delete" />
    hidden_form_method_field('delete')
    ```

    #### Parameters:

    - `desired_method`([`String`](../../string "String (class)")) — The method this hidden field represents (i.e put or delete).

    #### Returns:

    - ([`String`](../../string "String (class)")) — The hidden field representing the `desired_method` for the form.
- name: Padrino::Helpers::FormHelpers#image_submit_tag
  id: padrino/helpers/formhelpers#image_submit_tag-instance_method
  summary: Constructs a submit button from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#image_submit_tag(source, options = {}) ⇒ String

    Constructs a submit button from the given options.

    #### Examples:

    ``` ruby
    image_submit_tag 'form/submit.png'
    ```

    #### Parameters:

    - `source`([`String`](../../string "String (class)")) — The source image path for the button.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the input field.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html image button based on the `options` specified.
- name: Padrino::Helpers::FormHelpers#label_tag
  id: padrino/helpers/formhelpers#label_tag-instance_method
  summary: Constructs a label tag from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#label_tag(name, options = {}, &block) ⇒ String

    Constructs a label tag from the given options.

    #### Examples:

    ``` ruby
    label_tag :username, :class => 'long-label'
    label_tag :username, :class => 'long-label' do ... end
    ```

    #### Parameters:

    - `name`([`String`](../../string "String (class)")) — The name of the field to label.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for this label.
    - `block`(`Proc`) — The content to be inserted into the label.

    #### Options Hash (`options`):

    - `:caption`([`Object`](../../object "Object (class)")) — The caption for this label.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html for this label with the given `options`.
- name: Padrino::Helpers::FormHelpers#month_field_tag
  id: padrino/helpers/formhelpers#month_field_tag-instance_method
  summary: Constructs a month tag from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#month_field_tag(name, options = {}) ⇒ String

    Constructs a month tag from the given options.

    #### Examples:

    ``` ruby
    month_field_tag('month_with_min_max', :min => DateTime.new(1993, 2, 24),
                                          :max => DateTime.new(2000, 4, 1))
    month_field_tag('month_with_value', :value => DateTime.new(2000, 4, 1))
    ```

    #### Parameters:

    - `name`([`String`](../../string "String (class)")) — The name of the month field.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the month field.

    #### Options Hash (`options`):

    - `:min`(`DateTime`, [`String`](../../string "String (class)")) — The min month time of the month field.
    - `:max`(`DateTime`, [`String`](../../string "String (class)")) — The max month time of the month field.
    - `:value`(`DateTime`, [`String`](../../string "String (class)")) — The value of the month field. See examples for details.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html month field
- name: Padrino::Helpers::FormHelpers#number_field_tag
  id: padrino/helpers/formhelpers#number_field_tag-instance_method
  summary: Creates a number field input with the given name and options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#number_field_tag(name, options = {}) ⇒ String

    Creates a number field input with the given name and options.

    #### Examples:

    ``` ruby
    number_field_tag :quantity, :class => 'numeric'
    # => <input name="quantity" class="numeric" type="number" />

    number_field_tag :zip_code, :pattern => /[0-9]{5}/
    # => <input name="zip_code" pattern="[0-9]{5}" type="number" />

    number_field_tag :credit_card, :autocomplete => :off
    # => <input name="credit_card" autocomplete="off" type="number" />

    number_field_tag :age, :min => 18, :max => 120, :step => 1
    # => <input name="age" min="18" max="120" step="1" type="number" />
    ```

    #### Parameters:

    - `name`(`Symbol`) — The name of the input to create.
    - `options`(`Hash`)*(defaults to: `{}`)* — The HTML options to include in this field.

    #### Options Hash (`options`):

    - `:id`([`String`](../../string "String (class)")) — Specifies a unique identifier for the field.
    - `:class`([`String`](../../string "String (class)")) — Specifies the stylesheet class of the field.
    - `:name`([`String`](../../string "String (class)")) — Specifies the name of the field.
    - `:accesskey`([`String`](../../string "String (class)")) — Specifies a shortcut key to access the field.
    - `:tabindex`(`Integer`) — Specifies the tab order of the field.
    - `:min`(`Integer`) — Specifies the minimum value of the field.
    - `:max`(`Integer`) — Specifies the maximum value of the field.
    - `:step`(`Integer`) — Specifies the legal number intervals of the field.
    - `:hidden`(`Boolean`) — Specifies whether or not the field is hidden from view.
    - `:spellcheck`(`Boolean`) — Specifies whether or not the field should have it's spelling and grammar checked for errors.
    - `:draggable`(`Boolean`) — Specifies whether or not the field is draggable. (true, false, :auto).
    - `:pattern`([`String`](../../string "String (class)")) — Specifies the regular expression pattern that the field's value is checked against.
    - `:autocomplete`(`Symbol`) — Specifies whether or not the field should have autocomplete enabled. (:on, :off).
    - `:autofocus`(`Boolean`) — Specifies whether or not the field should automatically get focus when the page loads.
    - `:required`(`Boolean`) — Specifies whether or not the field is required to be completeled before the form is submitted.
    - `:readonly`(`Boolean`) — Specifies whether or not the field is read only.
    - `:disabled`(`Boolean`) — Specifies whether or not the field is disabled.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Generated HTML with specified `options`.
- name: Padrino::Helpers::FormHelpers#password_field_tag
  id: padrino/helpers/formhelpers#password_field_tag-instance_method
  summary: Constructs a password field input from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#password_field_tag(name, options = {}) ⇒ Object

    Constructs a password field input from the given options.

    #### Examples:

    ``` ruby
    password_field_tag :password, :class => 'long'
    ```
- name: Padrino::Helpers::FormHelpers#radio_button_tag
  id: padrino/helpers/formhelpers#radio_button_tag-instance_method
  summary: Constructs a radio_button from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#radio_button_tag(name, options = {}) ⇒ Object

    Constructs a radio_button from the given options.

    #### Examples:

    ``` ruby
    radio_button_tag :remember_me, :value => 'true'
    ```
- name: Padrino::Helpers::FormHelpers#range_field_tag
  id: padrino/helpers/formhelpers#range_field_tag-instance_method
  summary: Constructs a range tag from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#range_field_tag(name, options = {}) ⇒ String

    Constructs a range tag from the given options.

    #### Examples:

    ``` ruby
    range_field_tag('ranger_with_min_max', :min => 1, :max => 50)
    range_field_tag('ranger_with_range', :range => 1..5)
    ```

    #### Parameters:

    - `name`([`String`](../../string "String (class)")) — The name of the range field.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the range field.

    #### Options Hash (`options`):

    - `:min`(`Integer`) — The min range of the range field.
    - `:max`(`Integer`) — The max range of the range field.
    - `:range`(`range`) — The range, in lieu of :min and :max. See examples for details.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html range field
- name: Padrino::Helpers::FormHelpers#search_field_tag
  id: padrino/helpers/formhelpers#search_field_tag-instance_method
  summary: Creates a search field input with the given name and options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#search_field_tag(name, options = {}) ⇒ String

    Creates a search field input with the given name and options.

    #### Examples:

    ``` ruby
    search_field_tag :search, :placeholder => 'Search this website...'
    # => <input name="search" placeholder="Search this website..." type="search" />

    search_field_tag :search, :maxlength => 15, :class => ['search', 'string']
    # => <input name="search" maxlength="15" class="search string" />

    search_field_tag :search, :id => 'search'
    # => <input name="search" id="search" type="search" />

    search_field_tag :search, :autofocus => true
    # => <input name="search" autofocus type="search" />
    ```

    #### Parameters:

    - `name`(`Symbol`) — The name of the input to create.
    - `options`(`Hash`)*(defaults to: `{}`)* — The HTML options to include in this field.

    #### Options Hash (`options`):

    - `:id`([`String`](../../string "String (class)")) — Specifies a unique identifier for the field.
    - `:class`([`String`](../../string "String (class)")) — Specifies the stylesheet class of the field.
    - `:name`([`String`](../../string "String (class)")) — Specifies the name of the field.
    - `:accesskey`([`String`](../../string "String (class)")) — Specifies a shortcut key to access the field.
    - `:tabindex`(`Integer`) — Specifies the tab order of the field.
    - `:maxlength`(`Integer`) — Specifies the maximum length, in characters, of the field.
    - `:size`(`Integer`) — Specifies the width, in characters, of the field.
    - `:placeholder`([`String`](../../string "String (class)")) — Specifies a short hint that describes the expected value of the field.
    - `:hidden`(`Boolean`) — Specifies whether or not the field is hidden from view.
    - `:spellcheck`(`Boolean`) — Specifies whether or not the field should have it's spelling and grammar checked for errors.
    - `:draggable`(`Boolean`) — Specifies whether or not the field is draggable. (true, false, :auto).
    - `:pattern`([`String`](../../string "String (class)")) — Specifies the regular expression pattern that the field's value is checked against.
    - `:autocomplete`(`Symbol`) — Specifies whether or not the field should have autocomplete enabled. (:on, :off).
    - `:autofocus`(`Boolean`) — Specifies whether or not the field should automatically get focus when the page loads.
    - `:required`(`Boolean`) — Specifies whether or not the field is required to be completed before the form is submitted.
    - `:readonly`(`Boolean`) — Specifies whether or not the field is read only.
    - `:disabled`(`Boolean`) — Specifies whether or not the field is disabled.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Generated HTML with specified `options`.
- name: Padrino::Helpers::FormHelpers#select_tag
  id: padrino/helpers/formhelpers#select_tag-instance_method
  summary: Constructs a select from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#select_tag(name, options = {}) ⇒ String

    Constructs a select from the given options.

    #### Examples:

    ``` ruby
    options = [['caption', 'value'], ['Green', 'green1'], ['Blue', 'blue1'], ['Black', "black1"]]
    options = ['option', 'red', 'yellow' ]
    select_tag(:favorite_color, :options => ['red', 'yellow'], :selected => 'green1')
    select_tag(:country, :collection => @countries, :fields => [:name, :code], :include_blank => 'None')

    # Optgroups can be generated using :grouped_options => (Hash or nested Array)
    grouped_options = [['Friends',['Yoda',['Obiwan',1]]],['Enemies',['Palpatine',['Darth Vader',3]]]]
    grouped_options = {'Friends' => ['Yoda',['Obiwan',1]],'Enemies' => ['Palpatine',['Darth Vader',3]]}
    select_tag(:color, :grouped_options => [['warm',['red','yellow']],['cool',['blue', 'purple']]])

    # Optgroups can be generated using the rails-style attribute hash.
    grouped_options = {
      "Friends" => ["Yoda", ["Obiwan", 2, {:magister => 'no'}], {:lame => 'yes'}],
      "Enemies" => [["Palpatine", "Palpatine", {:scary => 'yes', :old => 'yes'}], ["Darth Vader", 3, {:disabled => true}]]
    }
    select_tag(:name, :grouped_options => grouped_options)
    ```

    #### Parameters:

    - `name`([`String`](../../string "String (class)")) — The name of the input field.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the input field.

    #### Options Hash (`options`):

    - `:options`(`Array<`[`String`](../../string "String (class)")`, Array>`) — Explicit options to display in the select. Can be strings or string tuples.
    - `:grouped_options`(`Array<Array>`) — List of options for each group in the select. See examples for details.
    - `:collection`(`Array<`[`Object`](../../object "Object (class)")`>`) — Collection of objects used as options in the select.
    - `:fields`(`Array<Symbol>`) — The attributes used as “label” and “value” for each `collection` object.
    - `:selected`([`String`](../../string "String (class)")) — default: `nil` — The option value initially selected.
    - `:include_blank`(`Boolean`) — default: `false` — Include a blank option in the select.
    - `:multiple`(`Boolean`) — default: `false` — Allow multiple options to be selected at once.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The HTML input field based on the `options` specified.
- name: Padrino::Helpers::FormHelpers#submit_tag
  id: padrino/helpers/formhelpers#submit_tag-instance_method
  summary: Constructs a submit button from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#submit_tag(options = {}) ⇒ String \#submit_tag(caption, options = {}) ⇒ String

    Constructs a submit button from the given options.

    #### Examples:

    ``` ruby
    submit_tag "Create", :class => 'success'
    submit_tag :class => 'btn'
    ```

    #### Overloads:

    - ### \#submit_tag(options = {}) ⇒ String

      #### Parameters:

      - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the input field.

    - ### \#submit_tag(caption, options = {}) ⇒ String

      #### Parameters:

      - `caption`([`String`](../../string "String (class)")) — The caption for the submit button.
      - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the input field.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html submit button based on the `options` specified.
- name: Padrino::Helpers::FormHelpers#telephone_field_tag
  id: padrino/helpers/formhelpers#telephone_field_tag-instance_method
  summary: Creates a telephone field input with the given name and options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#telephone_field_tag(name, options = {}) ⇒ String Also known as: phone_field_tag

    Creates a telephone field input with the given name and options.

    ``` ruby
    telephone_field_tag :cell_phone, :tabindex => 1
    telephone_field_tag :work_phone, :tabindex => 2
    telephone_field_tag :home_phone, :tabindex => 3

    # => <input name="cell_phone" tabindex="1" type="tel" />
    # => <input name="work_phone" tabindex="2" type="tel" />
    # => <input name="home_phone" tabindex="3" type="tel" />
    ```

    #### Examples:

    ``` ruby
    telephone_field_tag :phone_number, :class => 'string'
    # => <input name="phone_number" class="string" type="tel" />
    ```

    #### Parameters:

    - `name`(`Symbol`) — The name of the input to create.
    - `options`(`Hash`)*(defaults to: `{}`)* — The HTML options to include in this field.

    #### Options Hash (`options`):

    - `:id`([`String`](../../string "String (class)")) — Specifies a unique identifier for the field.
    - `:class`([`String`](../../string "String (class)")) — Specifies the stylesheet class of the field.
    - `:name`([`String`](../../string "String (class)")) — Specifies the name of the field.
    - `:accesskey`([`String`](../../string "String (class)")) — Specifies a shortcut key to access the field.
    - `:tabindex`(`Integer`) — Specifies the tab order of the field.
    - `:maxlength`(`Integer`) — Specifies the maximum length, in characters, of the field.
    - `:size`(`Integer`) — Specifies the width, in characters, of the field.
    - `:placeholder`([`String`](../../string "String (class)")) — Specifies a short hint that describes the expected value of the field.
    - `:hidden`(`Boolean`) — Specifies whether or not the field is hidden from view.
    - `:spellcheck`(`Boolean`) — Specifies whether or not the field should have it's spelling and grammar checked for errors.
    - `:draggable`(`Boolean`) — Specifies whether or not the field is draggable. (true, false, :auto).
    - `:pattern`([`String`](../../string "String (class)")) — Specifies the regular expression pattern that the field's value is checked against.
    - `:autocomplete`(`Symbol`) — Specifies whether or not the field should have autocomplete enabled. (:on, :off).
    - `:autofocus`(`Boolean`) — Specifies whether or not the field should automatically get focus when the page loads.
    - `:required`(`Boolean`) — Specifies whether or not the field is required to be completed before the form is submitted.
    - `:readonly`(`Boolean`) — Specifies whether or not the field is read only.
    - `:disabled`(`Boolean`) — Specifies whether or not the field is disabled.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Generated HTML with specified `options`.
- name: Padrino::Helpers::FormHelpers#text_area_tag
  id: padrino/helpers/formhelpers#text_area_tag-instance_method
  summary: Constructs a text area input from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#text_area_tag(name, options = {}) ⇒ Object

    Constructs a text area input from the given options.

    #### Examples:

    ``` ruby
    text_area_tag :username, :class => 'long', :value => "Demo?"
    ```
- name: Padrino::Helpers::FormHelpers#text_field_tag
  id: padrino/helpers/formhelpers#text_field_tag-instance_method
  summary: Creates a text field input with the given name and options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#text_field_tag(name, options = {}) ⇒ String

    Creates a text field input with the given name and options.

    #### Examples:

    ``` ruby
    text_field_tag :first_name, :maxlength => 40, :required => true
    # => <input name="first_name" maxlength="40" required type="text" />

    text_field_tag :last_name, :class => 'string', :size => 40
    # => <input name="last_name" class="string" size="40" type="text" />

    text_field_tag :username, :placeholder => 'Your Username'
    # => <input name="username" placeholder="Your Username" type="text" />
    ```

    #### Parameters:

    - `name`(`Symbol`) — The name of the input to create.
    - `options`(`Hash`)*(defaults to: `{}`)* — The HTML options to include in this field.

    #### Options Hash (`options`):

    - `:id`([`String`](../../string "String (class)")) — Specifies a unique identifier for the field.
    - `:class`([`String`](../../string "String (class)")) — Specifies the stylesheet class of the field.
    - `:name`([`String`](../../string "String (class)")) — Specifies the name of the field.
    - `:accesskey`([`String`](../../string "String (class)")) — Specifies a shortcut key to access the field.
    - `:tabindex`(`Integer`) — Specifies the tab order of the field.
    - `:maxlength`(`Integer`) — Specifies the maximum length, in characters, of the field.
    - `:size`(`Integer`) — Specifies the width, in characters, of the field.
    - `:placeholder`([`String`](../../string "String (class)")) — Specifies a short hint that describes the expected value of the field.
    - `:hidden`(`Boolean`) — Specifies whether or not the field is hidden from view.
    - `:spellcheck`(`Boolean`) — Specifies whether or not the field should have it's spelling and grammar checked for errors.
    - `:draggable`(`Boolean`) — Specifies whether or not the field is draggable. (true, false, :auto).
    - `:pattern`([`String`](../../string "String (class)")) — Specifies the regular expression pattern that the field's value is checked against.
    - `:autocomplete`(`Symbol`) — Specifies whether or not the field should have autocomplete enabled. (:on, :off).
    - `:autofocus`(`Boolean`) — Specifies whether or not the field should automatically get focus when the page loads.
    - `:required`(`Boolean`) — Specifies whether or not the field is required to be completed before the form is submitted.
    - `:readonly`(`Boolean`) — Specifies whether or not the field is read only.
    - `:disabled`(`Boolean`) — Specifies whether or not the field is disabled.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Generated HTML with specified `options`.
- name: Padrino::Helpers::FormHelpers#time_field_tag
  id: padrino/helpers/formhelpers#time_field_tag-instance_method
  summary: Constructs a time tag from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#time_field_tag(name, options = {}) ⇒ String

    Constructs a time tag from the given options.

    #### Examples:

    ``` ruby
    time_field_tag('time_with_min_max', :max => Time.new(1993, 2, 24, 1, 19, 12),
                                        :min => Time.new(2008, 6, 21, 13, 30, 0))
    time_field_tag('time_with_value', :value => Time.new(2008, 6, 21, 13, 30, 0))
    ```

    #### Parameters:

    - `name`([`String`](../../string "String (class)")) — The name of the time field.
    - `options`(`Hash`)*(defaults to: `{}`)* — The html options for the time field.

    #### Options Hash (`options`):

    - `:min`(`Time`, `DateTime`, [`String`](../../string "String (class)")) — The min time of the time field.
    - `:max`(`Time`, `DateTime`, [`String`](../../string "String (class)")) — The max time of the time field.
    - `:value`(`Time`, `DateTime`, [`String`](../../string "String (class)")) — The value of the time field. See examples for details.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The html time field
- name: Padrino::Helpers::FormHelpers#url_field_tag
  id: padrino/helpers/formhelpers#url_field_tag-instance_method
  summary: Creates a URL field input with the given name and options
  belongs_to: Padrino::Helpers::FormHelpers
  description: |-
    ### \#url_field_tag(name, options = {}) ⇒ String

    Creates a URL field input with the given name and options.

    #### Examples:

    ``` ruby
    url_field_tag :favorite_website, :placeholder => 'http://padrinorb.com'
    <input name="favorite_website" placeholder="http://padrinorb.com." type="url" />

    url_field_tag :home_page, :class => 'string url'
    <input name="home_page" class="string url", type="url" />
    ```

    #### Parameters:

    - `name`(`Symbol`) — The name of the input to create.
    - `options`(`Hash`)*(defaults to: `{}`)* — The HTML options to include in this field.

    #### Options Hash (`options`):

    - `:id`([`String`](../../string "String (class)")) — Specifies a unique identifier for the field.
    - `:class`([`String`](../../string "String (class)")) — Specifies the stylesheet class of the field.
    - `:name`([`String`](../../string "String (class)")) — Specifies the name of the field.
    - `:accesskey`([`String`](../../string "String (class)")) — Specifies a shortcut key to access the field.
    - `:tabindex`(`Integer`) — Specifies the tab order of the field.
    - `:maxlength`(`Integer`) — Specifies the maximum length, in characters, of the field.
    - `:size`(`Integer`) — Specifies the width, in characters, of the field.
    - `:placeholder`([`String`](../../string "String (class)")) — Specifies a short hint that describes the expected value of the field.
    - `:hidden`(`Boolean`) — Specifies whether or not the field is hidden from view.
    - `:spellcheck`(`Boolean`) — Specifies whether or not the field should have it's spelling and grammar checked for errors.
    - `:draggable`(`Boolean`) — Specifies whether or not the field is draggable. (true, false, :auto).
    - `:pattern`([`String`](../../string "String (class)")) — Specifies the regular expression pattern that the field's value is checked against.
    - `:autocomplete`(`Symbol`) — Specifies whether or not the field should have autocomplete enabled. (:on, :off).
    - `:autofocus`(`Boolean`) — Specifies whether or not the field should automatically get focus when the page loads.
    - `:required`(`Boolean`) — Specifies whether or not the field is required to be completed before the form is submitted.
    - `:readonly`(`Boolean`) — Specifies whether or not the field is read only.
    - `:disabled`(`Boolean`) — Specifies whether or not the field is disabled.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Generated HTML with specified `options`.
- name: Padrino::Helpers::FormHelpers#week_field_tag
  id: padrino/helpers/formhelpers#week_field_tag-instance_method
  summary: Constructs a week tag from the given options
  belongs_to: Padrino::Helpers::FormHelpers
  description: "### \\#week_field_tag(name, options = {}) ⇒ String\n\nConstructs a week tag from the given options.\n\n#### Examples:\n\n``` ruby\nweek_field_tag('week_with_min_max', :min => DateTime.new(1993, 2, 24),\n                                    :max => DateTime.new(2000, 4, 1))\nweek_field_tag('week_with_value', :value => DateTime.new(2000, 4, 1))\n```\n\n#### Parameters:\n\n- `name`([`String`](../../string \"String (class)\")) — The name of the week field.\n- `options`(`Hash`)*(defaults to: `{}`)* — The html options for the week field.\n\n#### Options Hash (`options`):\n\n- `:min`(`DateTime`, [`String`](../../string \"String (class)\")) — The min week time of the week field.\n- `:max`(`DateTime`, [`String`](../../string \"String (class)\")) — The max week time of the week field.\n- `:value`(`DateTime`, [`String`](../../string \"String (class)\")) — The value of the week field. See examples for details.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html week field\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers)"
- name: Padrino::Helpers::FormHelpers::Errors
  id: padrino/helpers/formhelpers/errors
  summary: Helpers to generate form errors
  description: "# Module: Padrino::Helpers::FormHelpers::Errors\n\n## Overview\n\nHelpers to generate form errors.\n\n## Instance Method Summary\n\n- [`#`**`error_message_on`**`(object, field, options = {}) ⇒ String`](errors#error_message_on-instance_method \"#error_message_on (instance method)\") Returns a string containing the error message attached to the `method` on the `object` if one exists.\n- [`#`**`error_messages_for`**`(*objects, options = {}) ⇒ String`](errors#error_messages_for-instance_method \"#error_messages_for (instance method)\") Constructs list HTML for the errors for a given symbol.\n\n## Instance Method Details\n\n### \\#error_message_on(object, field, options = {}) ⇒ String\n\nReturns a string containing the error message attached to the `method` on the `object` if one exists.\n\n#### Examples:\n\n``` ruby\n# => <span class=\"error\">can't be blank</div>\nerror_message_on :post, :title\nerror_message_on @post, :title\n\n# => <div class=\"custom\" style=\"border:1px solid red\">can't be blank</div>\nerror_message_on :post, :title, :tag => :id, :class => :custom, :style => \"border:1px solid red\"\n\n# => <div class=\"error\">This title can't be blank (or it won't work)</div>\nerror_message_on :post, :title, :prepend => \"This title\", :append => \"(or it won't work)\"\n```\n\n#### Parameters:\n\n- `object` ([`Object`](../../../object \"Object (class)\")) — The object to display the error for.\n- `field` (`Symbol`) — The field on the `object` to display the error for.\n- `options` (`Hash`) *(defaults to: `{}`)* — The options to control the error display.\n\n#### Options Hash (`options`):\n\n- `:tag` ([`String`](../../../string \"String (class)\")) — default: `\"span\"` — The tag that encloses the error.\n- `:prepend` ([`String`](../../../string \"String (class)\")) — default: `\"\"` — The text to prepend before the field error.\n- `:append` ([`String`](../../../string \"String (class)\")) — default: `\"\"` — The text to append after the field error.\n\n#### Returns:\n\n- ([`String`](../../../string \"String (class)\")) — The html display of an error for a particular `object` and `field`.\n\n### \\#error_messages_for(\\*objects, options = {}) ⇒ String\n\nConstructs list HTML for the errors for a given symbol.\n\n#### Examples:\n\n``` ruby\nerror_messages_for :user\n```\n\n#### Parameters:\n\n- `object` (`Array<`[`Object`](../../../object \"Object (class)\")`>`) — Splat of objects to display errors for.\n- `options` (`Hash`) *(defaults to: `{}`)* — Error message display options.\n\n#### Options Hash (`options`):\n\n- `:header_tag` ([`String`](../../../string \"String (class)\")) — default: `\"h2\"` — Used for the header of the error div.\n- `:id` ([`String`](../../../string \"String (class)\")) — default: `\"field-errors\"` — The id of the error div.\n- `:class` ([`String`](../../../string \"String (class)\")) — default: `\"field-errors\"` — The class of the error div.\n- `:object` (`Array<`[`Object`](../../../object \"Object (class)\")`>`) — The object (or array of objects) for which to display errors, if you need to escape the instance variable convention.\n- `:object_name` ([`String`](../../../string \"String (class)\")) — The object name to use in the header, or any text that you prefer. If `:object_name` is not set, the name of the first object will be used.\n- `:header_message` ([`String`](../../../string \"String (class)\")) — default: `\"X errors prohibited this object from being saved\"` — The message in the header of the error div. Pass `nil` or an empty string to avoid the header message altogether.\n- `:message` ([`String`](../../../string \"String (class)\")) — default: `\"There were problems with the following fields:\"` — The explanation message after the header message and before the error list. Pass `nil` or an empty string to avoid the explanation message altogether.\n\n#### Returns:\n\n- ([`String`](../../../string \"String (class)\")) — The html section with all errors for the specified `objects`\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Errors](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Errors)"
- name: Padrino::Helpers::FormHelpers::Errors#error_message_on
  id: padrino/helpers/formhelpers/errors#error_message_on-instance_method
  summary: Returns a string containing the error message attached to the method on the object if one exists
  belongs_to: Padrino::Helpers::FormHelpers::Errors
  description: |-
    ### \#error_message_on(object, field, options = {}) ⇒ String

    Returns a string containing the error message attached to the `method` on the `object` if one exists.

    #### Examples:

    ``` ruby
    # => <span class="error">can't be blank</div>
    error_message_on :post, :title
    error_message_on @post, :title

    # => <div class="custom" style="border:1px solid red">can't be blank</div>
    error_message_on :post, :title, :tag => :id, :class => :custom, :style => "border:1px solid red"

    # => <div class="error">This title can't be blank (or it won't work)</div>
    error_message_on :post, :title, :prepend => "This title", :append => "(or it won't work)"
    ```

    #### Parameters:

    - `object`([`Object`](../../../object "Object (class)")) — The object to display the error for.
    - `field`(`Symbol`) — The field on the `object` to display the error for.
    - `options`(`Hash`)*(defaults to: `{}`)* — The options to control the error display.

    #### Options Hash (`options`):

    - `:tag`([`String`](../../../string "String (class)")) — default: `"span"` — The tag that encloses the error.
    - `:prepend`([`String`](../../../string "String (class)")) — default: `""` — The text to prepend before the field error.
    - `:append`([`String`](../../../string "String (class)")) — default: `""` — The text to append after the field error.

    #### Returns:

    - ([`String`](../../../string "String (class)")) — The html display of an error for a particular `object` and `field`.
- name: Padrino::Helpers::FormHelpers::Errors#error_messages_for
  id: padrino/helpers/formhelpers/errors#error_messages_for-instance_method
  summary: Constructs list HTML for the errors for a given symbol
  belongs_to: Padrino::Helpers::FormHelpers::Errors
  description: "### \\#error_messages_for(\\*objects, options = {}) ⇒ String\n\nConstructs list HTML for the errors for a given symbol.\n\n#### Examples:\n\n``` ruby\nerror_messages_for :user\n```\n\n#### Parameters:\n\n- `object`(`Array<`[`Object`](../../../object \"Object (class)\")`>`) — Splat of objects to display errors for.\n- `options`(`Hash`)*(defaults to: `{}`)* — Error message display options.\n\n#### Options Hash (`options`):\n\n- `:header_tag`([`String`](../../../string \"String (class)\")) — default: `\"h2\"` — Used for the header of the error div.\n- `:id`([`String`](../../../string \"String (class)\")) — default: `\"field-errors\"` — The id of the error div.\n- `:class`([`String`](../../../string \"String (class)\")) — default: `\"field-errors\"` — The class of the error div.\n- `:object`(`Array<`[`Object`](../../../object \"Object (class)\")`>`) — The object (or array of objects) for which to display errors, if you need to escape the instance variable convention.\n- `:object_name`([`String`](../../../string \"String (class)\")) — The object name to use in the header, or any text that you prefer. If `:object_name` is not set, the name of the first object will be used.\n- `:header_message`([`String`](../../../string \"String (class)\")) — default: `\"X errors prohibited this object from being saved\"` — The message in the header of the error div. Pass `nil` or an empty string to avoid the header message altogether.\n- `:message`([`String`](../../../string \"String (class)\")) — default: `\"There were problems with the following fields:\"` — The explanation message after the header message and before the error list. Pass `nil` or an empty string to avoid the explanation message altogether.\n\n#### Returns:\n\n- ([`String`](../../../string \"String (class)\")) — The html section with all errors for the specified `objects`\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Errors](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Errors)"
- name: Padrino::Helpers::FormHelpers::Options
  id: padrino/helpers/formhelpers/options
  summary: Helpers to generate options list for select tag
  description: "# Module: Padrino::Helpers::FormHelpers::Options\n\n## Overview\n\nHelpers to generate options list for select tag.\n\n## Instance Method Summary\n\n- [`#`**`extract_option_tags!`**`(options) ⇒ Object`](options#extract_option_tags!-instance_method \"#extract_option_tags! (instance method)\")\n\n## Instance Method Details\n\n### \\#extract_option_tags!(options) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Options](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Options)"
- name: Padrino::Helpers::FormHelpers::Options#extract_option_tags!
  id: padrino/helpers/formhelpers/options#extract_option_tags!-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Helpers::FormHelpers::Options
  description: "### \\#extract_option_tags!(options) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Options](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Options)"
- name: Padrino::Helpers::FormHelpers::Security
  id: padrino/helpers/formhelpers/security
  summary: Helpers to generate form security tags for csrf protection
  description: "# Module: Padrino::Helpers::FormHelpers::Security\n\n## Overview\n\nHelpers to generate form security tags for csrf protection.\n\n## Instance Method Summary\n\n- [`#`**`csrf_meta_tags`**` ⇒ String`](security#csrf_meta_tags-instance_method \"#csrf_meta_tags (instance method)\") Constructs meta tags \\`csrf-param\\` and \\`csrf-token\\` with the name of the cross-site request forgery protection parameter and token, respectively.\n- [`#`**`csrf_token_field`**` ⇒ String`](security#csrf_token_field-instance_method \"#csrf_token_field (instance method)\") Constructs a hidden field containing a CSRF token.\n\n## Instance Method Details\n\n### \\#csrf_meta_tags ⇒ String\n\nConstructs meta tags \\`csrf-param\\` and \\`csrf-token\\` with the name of the cross-site request forgery protection parameter and token, respectively.\n\n#### Examples:\n\n``` ruby\ncsrf_meta_tags\n```\n\n#### Returns:\n\n- ([`String`](../../../string \"String (class)\")) — The meta tags with the CSRF token and the param your app expects it in.\n\n### \\#csrf_token_field ⇒ String\n\nConstructs a hidden field containing a CSRF token.\n\n#### Examples:\n\n``` ruby\ncsrf_token_field\n```\n\n#### Parameters:\n\n- `token` ([`String`](../../../string \"String (class)\")) — The token to use. Will be read from the session by default.\n\n#### Returns:\n\n- ([`String`](../../../string \"String (class)\")) — The hidden field with CSRF token as value.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Security](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Security)"
- name: Padrino::Helpers::FormHelpers::Security#csrf_meta_tags
  id: padrino/helpers/formhelpers/security#csrf_meta_tags-instance_method
  summary: Constructs meta tags `csrf-param` and `csrf-token` with the name of the cross-site request forgery protection parameter and token, respectively
  belongs_to: Padrino::Helpers::FormHelpers::Security
  description: |-
    ### \#csrf_meta_tags ⇒ String

    Constructs meta tags \`csrf-param\` and \`csrf-token\` with the name of the cross-site request forgery protection parameter and token, respectively.

    #### Examples:

    ``` ruby
    csrf_meta_tags
    ```

    #### Returns:

    - ([`String`](../../../string "String (class)")) — The meta tags with the CSRF token and the param your app expects it in.
- name: Padrino::Helpers::FormHelpers::Security#csrf_token_field
  id: padrino/helpers/formhelpers/security#csrf_token_field-instance_method
  summary: Constructs a hidden field containing a CSRF token
  belongs_to: Padrino::Helpers::FormHelpers::Security
  description: "### \\#csrf_token_field ⇒ String\n\nConstructs a hidden field containing a CSRF token.\n\n#### Examples:\n\n``` ruby\ncsrf_token_field\n```\n\n#### Parameters:\n\n- `token`([`String`](../../../string \"String (class)\")) — The token to use. Will be read from the session by default.\n\n#### Returns:\n\n- ([`String`](../../../string \"String (class)\")) — The hidden field with CSRF token as value.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Security](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Security)"
- name: Padrino::Helpers::NumberHelpers
  id: padrino/helpers/numberhelpers
  summary: Provides methods for converting numbers into formatted strings
  description: "# Module: Padrino::Helpers::NumberHelpers\n\n## Overview\n\nProvides methods for converting numbers into formatted strings. Methods are provided for phone numbers, currency, percentage, precision, positional notation, and file size.\n\nAdapted from Rails Number Helpers.\n\n## Constant Summary [collapse](#)\n\nSTORAGE_UNITS =\n\nThe units available for storage formatting.\n\n``` ruby\n[:byte, :kb, :mb, :gb, :tb].freeze\n```\n\n## Instance Method Summary\n\n- [`#`**`number_to_currency`**`(number, options = {}) ⇒ String`](numberhelpers#number_to_currency-instance_method \"#number_to_currency (instance method)\") Formats a `number` into a currency string (e.g., $13.65).\n- [`#`**`number_to_human_size`**`(number, options = {}) ⇒ String`](numberhelpers#number_to_human_size-instance_method \"#number_to_human_size (instance method)\") Formats the bytes in `size` into a more understandable representation (e.g., giving it 1500 yields 1.5 KB).\n- [`#`**`number_to_percentage`**`(number, options = {}) ⇒ String`](numberhelpers#number_to_percentage-instance_method \"#number_to_percentage (instance method)\") Formats a `number` as a percentage string (e.g., 65%).\n- [`#`**`number_with_delimiter`**`(number, options = {}) ⇒ String`](numberhelpers#number_with_delimiter-instance_method \"#number_with_delimiter (instance method)\") Formats a `number` with grouped thousands using `delimiter` (e.g., 12,324).\n- [`#`**`number_with_precision`**`(number, options = {}) ⇒ String`](numberhelpers#number_with_precision-instance_method \"#number_with_precision (instance method)\") Formats a `number` with the specified level of `:precision` (e.g., 112.32 has a precision of 2).\n\n## Instance Method Details\n\n### \\#number_to_currency(number, options = {}) ⇒ String\n\nFormats a `number` into a currency string (e.g., $13.65). You can customize the format in the `options` hash.\n\n#### Examples:\n\n``` ruby\nnumber_to_currency(1234567890.50)                    # => $1,234,567,890.50\nnumber_to_currency(1234567890.506)                   # => $1,234,567,890.51\nnumber_to_currency(1234567890.506, :precision => 3)  # => $1,234,567,890.506\nnumber_to_currency(1234567890.50, :unit => \"&pound;\", :separator => \",\", :delimiter => \"\")\n# => &pound;1234567890,50\nnumber_to_currency(1234567890.50, :unit => \"&pound;\", :separator => \",\", :delimiter => \"\", :format => \"%n %u\")\n# => 1234567890,50 &pound;\n```\n\n#### Parameters:\n\n- `number` (`Float`) — Currency value to format.\n- `options` (`Hash`) *(defaults to: `{}`)* — Options for currency conversion.\n\n#### Options Hash (`options`):\n\n- `:precision` (`Integer`) — default: `2` — Sets the level of precision.\n\n- `:unit` ([`String`](../../string \"String (class)\")) — default: `\"$\"` — Sets the denomination of the currency.\n\n- `:separator` ([`String`](../../string \"String (class)\")) — default: `\".\"` — Sets the separator between the units.\n\n- `:delimiter` ([`String`](../../string \"String (class)\")) — default: `\",\"` — Sets the thousands delimiter.\n\n- `:format` ([`String`](../../string \"String (class)\")) — default: `\"%u%n\"` — Sets the format of the output string. The field types are:\n\n  ``` ruby\n  %u  The currency unit\n  %n  The number\n  ```\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The formatted representation of the currency.\n\n### \\#number_to_human_size(number, options = {}) ⇒ String\n\nFormats the bytes in `size` into a more understandable representation (e.g., giving it 1500 yields 1.5 KB). This method is useful for reporting file sizes to users. This method returns nil if `size` cannot be converted into a number. You can customize the format in the `options` hash.\n\n#### Examples:\n\n``` ruby\nnumber_to_human_size(123)                                          # => 123 Bytes\nnumber_to_human_size(1234)                                         # => 1.2 KB\nnumber_to_human_size(12345)                                        # => 12.1 KB\nnumber_to_human_size(1234567)                                      # => 1.2 MB\nnumber_to_human_size(1234567890)                                   # => 1.1 GB\nnumber_to_human_size(1234567890123)                                # => 1.1 TB\nnumber_to_human_size(1234567, :precision => 2)                     # => 1.18 MB\nnumber_to_human_size(483989, :precision => 0)                      # => 473 KB\nnumber_to_human_size(1234567, :precision => 2, :separator => ',')  # => 1,18 MB\n```\n\n#### Parameters:\n\n- `number` (`Integer`) — Number value to format.\n- `options` (`Hash`) *(defaults to: `{}`)* — Options for formatter.\n\n#### Options Hash (`options`):\n\n- `:precision` (`Integer`) — default: `1` — Sets the level of precision.\n- `:separator` ([`String`](../../string \"String (class)\")) — default: `\".\"` — Sets the separator between the units.\n- `:delimiter` ([`String`](../../string \"String (class)\")) — default: `\"\"` — Sets the thousands delimiter.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The formatted representation of bytes\n\n### \\#number_to_percentage(number, options = {}) ⇒ String\n\nFormats a `number` as a percentage string (e.g., 65%). You can customize the format in the `options` hash.\n\n#### Examples:\n\n``` ruby\nnumber_to_percentage(100)                                        # => 100.000%\nnumber_to_percentage(100, :precision => 0)                       # => 100%\nnumber_to_percentage(1000, :delimiter => '.', :separator => ',') # => 1.000,000%\nnumber_to_percentage(302.24398923423, :precision => 5)           # => 302.24399%\n```\n\n#### Parameters:\n\n- `number` (`Integer`, `Float`) — Percentage value to format.\n- `options` (`Hash`) *(defaults to: `{}`)* — Options for percentage conversion.\n\n#### Options Hash (`options`):\n\n- `:precision` (`Integer`) — default: `3` — Sets the level of precision.\n- `:separator` ([`String`](../../string \"String (class)\")) — default: `\".\"` — Sets the separator between the units.\n- `:delimiter` ([`String`](../../string \"String (class)\")) — default: `\"\"` — Sets the thousands delimiter.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The formatted representation of the percentage\n\n### \\#number_with_delimiter(number, options = {}) ⇒ String\n\nFormats a `number` with grouped thousands using `delimiter` (e.g., 12,324). You can customize the format in the `options` hash.\n\n#### Examples:\n\n``` ruby\nnumber_with_delimiter(12345678)                        # => 12,345,678\nnumber_with_delimiter(12345678.05)                     # => 12,345,678.05\nnumber_with_delimiter(12345678, :delimiter => \".\")     # => 12.345.678\nnumber_with_delimiter(12345678, :separator => \",\")     # => 12,345,678\nnumber_with_delimiter(98765432.98, :delimiter => \" \", :separator => \",\")\n# => 98 765 432,98\n```\n\n#### Parameters:\n\n- `number` (`Integer`, `Float`) — Number value to format.\n- `options` (`Hash`) *(defaults to: `{}`)* — Options for formatter.\n\n#### Options Hash (`options`):\n\n- `:delimiter` ([`String`](../../string \"String (class)\")) — default: `\", \"` — Sets the thousands delimiter.\n- `:separator` ([`String`](../../string \"String (class)\")) — default: `\".\"` — Sets the separator between the units.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The formatted representation of the number.\n\n### \\#number_with_precision(number, options = {}) ⇒ String\n\nFormats a `number` with the specified level of `:precision` (e.g., 112.32 has a precision of 2). You can customize the format in the `options` hash.\n\n#### Examples:\n\n``` ruby\nnumber_with_precision(111.2345)                    # => 111.235\nnumber_with_precision(111.2345, :precision => 2)   # => 111.23\nnumber_with_precision(13, :precision => 5)         # => 13.00000\nnumber_with_precision(389.32314, :precision => 0)  # => 389\nnumber_with_precision(1111.2345, :precision => 2, :separator => ',', :delimiter => '.')\n# => 1.111,23\n```\n\n#### Parameters:\n\n- `number` (`Integer`, `Float`) — Number value to format.\n- `options` (`Hash`) *(defaults to: `{}`)* — Options for formatter.\n\n#### Options Hash (`options`):\n\n- `:precision` (`Integer`) — default: `3` — Sets the level of precision.\n- `:separator` ([`String`](../../string \"String (class)\")) — default: `\".\"` — Sets the separator between the units.\n- `:delimiter` ([`String`](../../string \"String (class)\")) — default: `\"\"` — Sets the thousands delimiter.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The formatted representation of the number.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/NumberHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/NumberHelpers)"
- name: Padrino::Helpers::NumberHelpers#number_to_currency
  id: padrino/helpers/numberhelpers#number_to_currency-instance_method
  summary: Formats a number into a currency string (e.g., $13.65)
  belongs_to: Padrino::Helpers::NumberHelpers
  description: |-
    ### \#number_to_currency(number, options = {}) ⇒ String

    Formats a `number` into a currency string (e.g., $13.65). You can customize the format in the `options` hash.

    #### Examples:

    ``` ruby
    number_to_currency(1234567890.50)                    # => $1,234,567,890.50
    number_to_currency(1234567890.506)                   # => $1,234,567,890.51
    number_to_currency(1234567890.506, :precision => 3)  # => $1,234,567,890.506
    number_to_currency(1234567890.50, :unit => "&pound;", :separator => ",", :delimiter => "")
    # => &pound;1234567890,50
    number_to_currency(1234567890.50, :unit => "&pound;", :separator => ",", :delimiter => "", :format => "%n %u")
    # => 1234567890,50 &pound;
    ```

    #### Parameters:

    - `number`(`Float`) — Currency value to format.
    - `options`(`Hash`)*(defaults to: `{}`)* — Options for currency conversion.

    #### Options Hash (`options`):

    - `:precision`(`Integer`) — default: `2` — Sets the level of precision.

    - `:unit`([`String`](../../string "String (class)")) — default: `"$"` — Sets the denomination of the currency.

    - `:separator`([`String`](../../string "String (class)")) — default: `"."` — Sets the separator between the units.

    - `:delimiter`([`String`](../../string "String (class)")) — default: `","` — Sets the thousands delimiter.

    - `:format`([`String`](../../string "String (class)")) — default: `"%u%n"` — Sets the format of the output string. The field types are:

      ``` ruby
      %u  The currency unit
      %n  The number
      ```

    #### Returns:

    - ([`String`](../../string "String (class)")) — The formatted representation of the currency.
- name: Padrino::Helpers::NumberHelpers#number_to_human_size
  id: padrino/helpers/numberhelpers#number_to_human_size-instance_method
  summary: Formats the bytes in size into a more understandable representation (e.g., giving it 1500 yields 1.5 KB)
  belongs_to: Padrino::Helpers::NumberHelpers
  description: |-
    ### \#number_to_human_size(number, options = {}) ⇒ String

    Formats the bytes in `size` into a more understandable representation (e.g., giving it 1500 yields 1.5 KB). This method is useful for reporting file sizes to users. This method returns nil if `size` cannot be converted into a number. You can customize the format in the `options` hash.

    #### Examples:

    ``` ruby
    number_to_human_size(123)                                          # => 123 Bytes
    number_to_human_size(1234)                                         # => 1.2 KB
    number_to_human_size(12345)                                        # => 12.1 KB
    number_to_human_size(1234567)                                      # => 1.2 MB
    number_to_human_size(1234567890)                                   # => 1.1 GB
    number_to_human_size(1234567890123)                                # => 1.1 TB
    number_to_human_size(1234567, :precision => 2)                     # => 1.18 MB
    number_to_human_size(483989, :precision => 0)                      # => 473 KB
    number_to_human_size(1234567, :precision => 2, :separator => ',')  # => 1,18 MB
    ```

    #### Parameters:

    - `number`(`Integer`) — Number value to format.
    - `options`(`Hash`)*(defaults to: `{}`)* — Options for formatter.

    #### Options Hash (`options`):

    - `:precision`(`Integer`) — default: `1` — Sets the level of precision.
    - `:separator`([`String`](../../string "String (class)")) — default: `"."` — Sets the separator between the units.
    - `:delimiter`([`String`](../../string "String (class)")) — default: `""` — Sets the thousands delimiter.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The formatted representation of bytes
- name: Padrino::Helpers::NumberHelpers#number_to_percentage
  id: padrino/helpers/numberhelpers#number_to_percentage-instance_method
  summary: Formats a number as a percentage string (e.g., 65%)
  belongs_to: Padrino::Helpers::NumberHelpers
  description: |-
    ### \#number_to_percentage(number, options = {}) ⇒ String

    Formats a `number` as a percentage string (e.g., 65%). You can customize the format in the `options` hash.

    #### Examples:

    ``` ruby
    number_to_percentage(100)                                        # => 100.000%
    number_to_percentage(100, :precision => 0)                       # => 100%
    number_to_percentage(1000, :delimiter => '.', :separator => ',') # => 1.000,000%
    number_to_percentage(302.24398923423, :precision => 5)           # => 302.24399%
    ```

    #### Parameters:

    - `number`(`Integer`, `Float`) — Percentage value to format.
    - `options`(`Hash`)*(defaults to: `{}`)* — Options for percentage conversion.

    #### Options Hash (`options`):

    - `:precision`(`Integer`) — default: `3` — Sets the level of precision.
    - `:separator`([`String`](../../string "String (class)")) — default: `"."` — Sets the separator between the units.
    - `:delimiter`([`String`](../../string "String (class)")) — default: `""` — Sets the thousands delimiter.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The formatted representation of the percentage
- name: Padrino::Helpers::NumberHelpers#number_with_delimiter
  id: padrino/helpers/numberhelpers#number_with_delimiter-instance_method
  summary: Formats a number with grouped thousands using delimiter (e.g., 12,324)
  belongs_to: Padrino::Helpers::NumberHelpers
  description: |-
    ### \#number_with_delimiter(number, options = {}) ⇒ String

    Formats a `number` with grouped thousands using `delimiter` (e.g., 12,324). You can customize the format in the `options` hash.

    #### Examples:

    ``` ruby
    number_with_delimiter(12345678)                        # => 12,345,678
    number_with_delimiter(12345678.05)                     # => 12,345,678.05
    number_with_delimiter(12345678, :delimiter => ".")     # => 12.345.678
    number_with_delimiter(12345678, :separator => ",")     # => 12,345,678
    number_with_delimiter(98765432.98, :delimiter => " ", :separator => ",")
    # => 98 765 432,98
    ```

    #### Parameters:

    - `number`(`Integer`, `Float`) — Number value to format.
    - `options`(`Hash`)*(defaults to: `{}`)* — Options for formatter.

    #### Options Hash (`options`):

    - `:delimiter`([`String`](../../string "String (class)")) — default: `", "` — Sets the thousands delimiter.
    - `:separator`([`String`](../../string "String (class)")) — default: `"."` — Sets the separator between the units.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The formatted representation of the number.
- name: Padrino::Helpers::NumberHelpers#number_with_precision
  id: padrino/helpers/numberhelpers#number_with_precision-instance_method
  summary: Formats a number with the specified level of :precision (e.g., 112.32 has a precision of 2)
  belongs_to: Padrino::Helpers::NumberHelpers
  description: "### \\#number_with_precision(number, options = {}) ⇒ String\n\nFormats a `number` with the specified level of `:precision` (e.g., 112.32 has a precision of 2). You can customize the format in the `options` hash.\n\n#### Examples:\n\n``` ruby\nnumber_with_precision(111.2345)                    # => 111.235\nnumber_with_precision(111.2345, :precision => 2)   # => 111.23\nnumber_with_precision(13, :precision => 5)         # => 13.00000\nnumber_with_precision(389.32314, :precision => 0)  # => 389\nnumber_with_precision(1111.2345, :precision => 2, :separator => ',', :delimiter => '.')\n# => 1.111,23\n```\n\n#### Parameters:\n\n- `number`(`Integer`, `Float`) — Number value to format.\n- `options`(`Hash`)*(defaults to: `{}`)* — Options for formatter.\n\n#### Options Hash (`options`):\n\n- `:precision`(`Integer`) — default: `3` — Sets the level of precision.\n- `:separator`([`String`](../../string \"String (class)\")) — default: `\".\"` — Sets the separator between the units.\n- `:delimiter`([`String`](../../string \"String (class)\")) — default: `\"\"` — Sets the thousands delimiter.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The formatted representation of the number.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/NumberHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/NumberHelpers)"
- name: Padrino::Helpers::OutputHelpers
  id: padrino/helpers/outputhelpers
  summary: Helpers related to buffer output for various template engines
  description: "# Module: Padrino::Helpers::OutputHelpers\n\nIncluded in:  \n[Cache::Helpers::Fragment](../cache/helpers/fragment \"Padrino::Cache::Helpers::Fragment (module)\")\n\n## Overview\n\nHelpers related to buffer output for various template engines.\n\n## Defined Under Namespace\n\n**Modules:** [SinatraCurrentEngine](outputhelpers/sinatracurrentengine \"Padrino::Helpers::OutputHelpers::SinatraCurrentEngine (module)\") **Classes:** [AbstractHandler](outputhelpers/abstracthandler \"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\"), [ErbHandler](outputhelpers/erbhandler \"Padrino::Helpers::OutputHelpers::ErbHandler (class)\"), [HamlHandler](outputhelpers/hamlhandler \"Padrino::Helpers::OutputHelpers::HamlHandler (class)\"), [HamlitHandler](outputhelpers/hamlithandler \"Padrino::Helpers::OutputHelpers::HamlitHandler (class)\"), [SlimHandler](outputhelpers/slimhandler \"Padrino::Helpers::OutputHelpers::SlimHandler (class)\")\n\n## Class Method Summary\n\n- [`.`**`handlers`**` ⇒ Object`](outputhelpers#handlers-class_method \"handlers (class method)\") Returns the list of all available template handlers.\n- [`.`**`register`**`(engine, handler) ⇒ Object`](outputhelpers#register-class_method \"register (class method)\") Registers a new handler as available to the output helpers.\n\n## Instance Method Summary\n\n- [`#`**`block_is_template?`**`(block) ⇒ Boolean`](outputhelpers#block_is_template%3F-instance_method \"#block_is_template? (instance method)\") Returns true if the block is from a supported template type; false otherwise.\n- [`#`**`capture_html`**`(*args, &block) ⇒ String`](outputhelpers#capture_html-instance_method \"#capture_html (instance method)\")` (also: #capture)` Captures the html from a block of template code for any available handler.\n- [`#`**`concat_content`**`(text = \"\") ⇒ Object`](outputhelpers#concat_content-instance_method \"#concat_content (instance method)\")` (also: #concat)` Outputs the given text to the templates buffer directly.\n- [`#`**`concat_safe_content`**`(text = \"\") ⇒ Object`](outputhelpers#concat_safe_content-instance_method \"#concat_safe_content (instance method)\") Outputs the given text to the templates buffer directly, assuming that it is safe.\n- [`#`**`content_for`**`(key, content = nil, options = {}, &block) ⇒ Object`](outputhelpers#content_for-instance_method \"#content_for (instance method)\") Capture a block or text of content to be rendered at a later time.\n- [`#`**`content_for?`**`(key) ⇒ TrueClass, FalseClass`](outputhelpers#content_for%3F-instance_method \"#content_for? (instance method)\") Is there a content block for a given key?.\n- [`#`**`yield_content`**`(key, *args) ⇒ String`](outputhelpers#yield_content-instance_method \"#yield_content (instance method)\") Render the captured content blocks for a given key.\n\n## Class Method Details\n\n### .handlers ⇒ Object\n\nReturns the list of all available template handlers.\n\n### .register(engine, handler) ⇒ Object\n\nRegisters a new handler as available to the output helpers.\n\n## Instance Method Details\n\n### \\#block_is_template?(block) ⇒ Boolean\n\nReturns true if the block is from a supported template type; false otherwise. Used to determine if html should be returned or concatenated to the view.\n\n#### Examples:\n\n``` ruby\nblock_is_template?(block) => true\n```\n\n#### Parameters:\n\n- `block` (`Block`) — Determine if this block is a view template.\n\n#### Returns:\n\n- (`Boolean`) — True if the block is a template; false otherwise.\n\n### \\#capture_html(\\*args, &block) ⇒ String Also known as: capture\n\nCaptures the html from a block of template code for any available handler.\n\nBe aware that trusting the html is up to the caller.\n\n#### Examples:\n\n``` ruby\ncapture_html(&block) => \"...html...\"\ncapture_html(object_for_block, &block) => \"...html...\"\n```\n\n``` ruby\nSafeBuffer.new + capture_html { \"<foo>\" }\n# => \"&lt;foo&gt;\"\nSafeBuffer.new.safe_concat(capture_html { \"<foo>\" })\n# => \"<foo>\"\n```\n\n#### Parameters:\n\n- `*args` ([`Object`](../../object \"Object (class)\")) — Objects yield to the captured block.\n- `&block` (`Proc`) — Template code to capture as HTML.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Captured HTML resulting from the block.\n\n### \\#concat_content(text = \"\") ⇒ Object Also known as: concat\n\nOutputs the given text to the templates buffer directly.\n\nThe output might be subject to escaping, if it is not marked as safe.\n\n#### Examples:\n\n``` ruby\nconcat_content(\"This will be output to the template buffer\")\n```\n\n#### Parameters:\n\n- `text` ([`String`](../../string \"String (class)\"), [`SafeBuffer`](../safebuffer \"Padrino::SafeBuffer (class)\")) *(defaults to: `\"\"`)* — Text to concatenate to the buffer.\n\n### \\#concat_safe_content(text = \"\") ⇒ Object\n\nOutputs the given text to the templates buffer directly, assuming that it is safe.\n\n#### Examples:\n\n``` ruby\nconcat_safe_content(\"This will be output to the template buffer\")\n```\n\n#### Parameters:\n\n- `text` ([`String`](../../string \"String (class)\")) *(defaults to: `\"\"`)* — Text to concatenate to the buffer.\n\n### \\#content_for(key, content) ⇒ Object \\#content_for(key, &block) ⇒ Object\n\nCapture a block or text of content to be rendered at a later time. Your blocks can also receive values, which are passed to them by `yield_content`.\n\n#### Examples:\n\n``` ruby\ncontent_for(:name) { ...content... }\ncontent_for(:name) { |name| ...content... }\ncontent_for(:name, \"I'm Jeff\")\ncontent_for(:name, :flush => true) { ...new content... }\n```\n\n#### Overloads:\n\n- ### \\#content_for(key, content) ⇒ Object\n\n  #### Parameters:\n\n  - `key` (`Symbol`) — Name of your key for the content yield.\n  - `content` ([`String`](../../string \"String (class)\")) — Text to be stored for this key.\n  - `options` (`Hash`) — Options associated with this method.\n\n- ### \\#content_for(key, &block) ⇒ Object\n\n  #### Parameters:\n\n  - `key` (`Symbol`) — Name of your key for the content yield.\n  - `block` (`Proc`) — Block to be stored as content for this key.\n  - `options` (`Hash`) — Options associated with this method.\n\n#### Parameters:\n\n- `options` (`Hash`) *(defaults to: `{}`)* — a customizable set of options\n\n#### Options Hash (`options`):\n\n- `:flush` (`Boolean`) — Specifies whether to replace the content.\n\n### \\#content_for?(key) ⇒ TrueClass, FalseClass\n\nIs there a content block for a given key?\n\n#### Examples:\n\n``` ruby\ncontent_for? :header => true\n```\n\n#### Parameters:\n\n- `key` (`Symbol`) — Name of content to yield.\n\n#### Returns:\n\n- (`TrueClass`, `FalseClass`) — Result html for the given `key`\n\n### \\#yield_content(key, \\*args) ⇒ String\n\nRender the captured content blocks for a given key. You can also pass values to the content blocks by passing them as arguments after the key.\n\n#### Examples:\n\n``` ruby\nyield_content :include\nyield_content :head, \"param1\", \"param2\"\nyield_content(:title) || \"My page title\"\n```\n\n#### Parameters:\n\n- `key` (`Symbol`) — Name of content to yield.\n- `*args` — Values to pass to the content block.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Result HTML for the given `key`.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers)"
- name: Padrino::Helpers::OutputHelpers#block_is_template?
  id: padrino/helpers/outputhelpers#block_is_template?-instance_method
  summary: Returns true if the block is from a supported template type; false otherwise
  belongs_to: Padrino::Helpers::OutputHelpers
  description: |-
    ### \#block_is_template?(block) ⇒ Boolean

    Returns true if the block is from a supported template type; false otherwise. Used to determine if html should be returned or concatenated to the view.

    #### Examples:

    ``` ruby
    block_is_template?(block) => true
    ```

    #### Parameters:

    - `block`(`Block`) — Determine if this block is a view template.

    #### Returns:

    - (`Boolean`) — True if the block is a template; false otherwise.
- name: Padrino::Helpers::OutputHelpers#capture_html
  id: padrino/helpers/outputhelpers#capture_html-instance_method
  summary: Captures the html from a block of template code for any available handler
  belongs_to: Padrino::Helpers::OutputHelpers
  description: |-
    ### \#capture_html(\*args, &block) ⇒ String Also known as: capture

    Captures the html from a block of template code for any available handler.

    Be aware that trusting the html is up to the caller.

    #### Examples:

    ``` ruby
    capture_html(&block) => "...html..."
    capture_html(object_for_block, &block) => "...html..."
    ```

    ``` ruby
    SafeBuffer.new + capture_html { "<foo>" }
    # => "&lt;foo&gt;"
    SafeBuffer.new.safe_concat(capture_html { "<foo>" })
    # => "<foo>"
    ```

    #### Parameters:

    - `*args`([`Object`](../../object "Object (class)")) — Objects yield to the captured block.
    - `&block`(`Proc`) — Template code to capture as HTML.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Captured HTML resulting from the block.
- name: Padrino::Helpers::OutputHelpers#concat_content
  id: padrino/helpers/outputhelpers#concat_content-instance_method
  summary: Outputs the given text to the templates buffer directly
  belongs_to: Padrino::Helpers::OutputHelpers
  description: |-
    ### \#concat_content(text = "") ⇒ Object Also known as: concat

    Outputs the given text to the templates buffer directly.

    The output might be subject to escaping, if it is not marked as safe.

    #### Examples:

    ``` ruby
    concat_content("This will be output to the template buffer")
    ```

    #### Parameters:

    - `text`([`String`](../../string "String (class)"), [`SafeBuffer`](../safebuffer "Padrino::SafeBuffer (class)"))*(defaults to: `""`)* — Text to concatenate to the buffer.
- name: Padrino::Helpers::OutputHelpers#concat_safe_content
  id: padrino/helpers/outputhelpers#concat_safe_content-instance_method
  summary: Outputs the given text to the templates buffer directly, assuming that it is safe
  belongs_to: Padrino::Helpers::OutputHelpers
  description: |-
    ### \#concat_safe_content(text = "") ⇒ Object

    Outputs the given text to the templates buffer directly, assuming that it is safe.

    #### Examples:

    ``` ruby
    concat_safe_content("This will be output to the template buffer")
    ```

    #### Parameters:

    - `text`([`String`](../../string "String (class)"))*(defaults to: `""`)* — Text to concatenate to the buffer.
- name: Padrino::Helpers::OutputHelpers#content_for
  id: padrino/helpers/outputhelpers#content_for-instance_method
  summary: Capture a block or text of content to be rendered at a later time
  belongs_to: Padrino::Helpers::OutputHelpers
  description: |-
    ### \#content_for(key, content) ⇒ Object \#content_for(key, &block) ⇒ Object

    Capture a block or text of content to be rendered at a later time. Your blocks can also receive values, which are passed to them by `yield_content`.

    #### Examples:

    ``` ruby
    content_for(:name) { ...content... }
    content_for(:name) { |name| ...content... }
    content_for(:name, "I'm Jeff")
    content_for(:name, :flush => true) { ...new content... }
    ```

    #### Overloads:

    - ### \#content_for(key, content) ⇒ Object

      #### Parameters:

      - `key`(`Symbol`) — Name of your key for the content yield.
      - `content`([`String`](../../string "String (class)")) — Text to be stored for this key.
      - `options`(`Hash`) — Options associated with this method.

    - ### \#content_for(key, &block) ⇒ Object

      #### Parameters:

      - `key`(`Symbol`) — Name of your key for the content yield.
      - `block`(`Proc`) — Block to be stored as content for this key.
      - `options`(`Hash`) — Options associated with this method.

    #### Parameters:

    - `options`(`Hash`)*(defaults to: `{}`)* — a customizable set of options

    #### Options Hash (`options`):

    - `:flush`(`Boolean`) — Specifies whether to replace the content.
- name: Padrino::Helpers::OutputHelpers#content_for?
  id: padrino/helpers/outputhelpers#content_for?-instance_method
  summary: null
  belongs_to: Padrino::Helpers::OutputHelpers
  description: |-
    ### \#content_for?(key) ⇒ TrueClass, FalseClass

    Is there a content block for a given key?

    #### Examples:

    ``` ruby
    content_for? :header => true
    ```

    #### Parameters:

    - `key`(`Symbol`) — Name of content to yield.

    #### Returns:

    - (`TrueClass`, `FalseClass`) — Result html for the given `key`
- name: Padrino::Helpers::OutputHelpers#yield_content
  id: padrino/helpers/outputhelpers#yield_content-instance_method
  summary: Render the captured content blocks for a given key
  belongs_to: Padrino::Helpers::OutputHelpers
  description: "### \\#yield_content(key, \\*args) ⇒ String\n\nRender the captured content blocks for a given key. You can also pass values to the content blocks by passing them as arguments after the key.\n\n#### Examples:\n\n``` ruby\nyield_content :include\nyield_content :head, \"param1\", \"param2\"\nyield_content(:title) || \"My page title\"\n```\n\n#### Parameters:\n\n- `key`(`Symbol`) — Name of content to yield.\n- `*args` — Values to pass to the content block.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Result HTML for the given `key`.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers)"
- name: Padrino::Helpers::OutputHelpers.handlers
  id: padrino/helpers/outputhelpers#handlers-class_method
  summary: Returns the list of all available template handlers
  belongs_to: Padrino::Helpers::OutputHelpers
  description: |-
    ### .handlers ⇒ Object

    Returns the list of all available template handlers.
- name: Padrino::Helpers::OutputHelpers.register
  id: padrino/helpers/outputhelpers#register-class_method
  summary: Registers a new handler as available to the output helpers
  belongs_to: Padrino::Helpers::OutputHelpers
  description: |-
    ### .register(engine, handler) ⇒ Object

    Registers a new handler as available to the output helpers.

    ## Instance Method Details
- name: Padrino::Helpers::OutputHelpers::AbstractHandler
  id: padrino/helpers/outputhelpers/abstracthandler
  summary: Returns a new instance of AbstractHandler
  description: "# Class: Padrino::Helpers::OutputHelpers::AbstractHandler\n\nInherits:  \n[Object](../../../object \"Object (class)\")\n\n- [Object](../../../object \"Object (class)\")\n- Padrino::Helpers::OutputHelpers::AbstractHandler\n\n## Direct Known Subclasses\n\n[ErbHandler](erbhandler \"Padrino::Helpers::OutputHelpers::ErbHandler (class)\"), [HamlHandler](hamlhandler \"Padrino::Helpers::OutputHelpers::HamlHandler (class)\"), [HamlitHandler](hamlithandler \"Padrino::Helpers::OutputHelpers::HamlitHandler (class)\"), [SlimHandler](slimhandler \"Padrino::Helpers::OutputHelpers::SlimHandler (class)\")\n\n## Instance Attribute Summary\n\n- [`#`**`output_buffer`**` ⇒ Object`](abstracthandler#output_buffer-instance_method \"#output_buffer (instance method)\") readonly Returns the value of attribute output_buffer.\n- [`#`**`template`**` ⇒ Object`](abstracthandler#template-instance_method \"#template (instance method)\") readonly Returns the value of attribute template.\n\n## Instance Method Summary\n\n- [`#`**`capture_from_template`**`(*args, &block) ⇒ Object`](abstracthandler#capture_from_template-instance_method \"#capture_from_template (instance method)\") Captures the html from a block of template code for this handler.\n- [`#`**`concat_to_template`**`(text = \"\", context = nil) ⇒ Object`](abstracthandler#concat_to_template-instance_method \"#concat_to_template (instance method)\") Outputs the given text to the template.\n- [`#`**`engine_matches?`**`(block) ⇒ Boolean`](abstracthandler#engine_matches%3F-instance_method \"#engine_matches? (instance method)\") Returns true if the block given is of the handler's template type; false otherwise.\n- [`#`**`initialize`**`(template) ⇒ AbstractHandler`](abstracthandler#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of AbstractHandler.\n\n## Constructor Details\n\n### \\#initialize(template) ⇒ AbstractHandler\n\nReturns a new instance of AbstractHandler.\n\n## Instance Attribute Details\n\n### \\#output_buffer ⇒ Object\n\nReturns the value of attribute output_buffer\n\n### \\#template ⇒ Object (readonly)\n\nReturns the value of attribute template\n\n## Instance Method Details\n\n### \\#capture_from_template(\\*args, &block) ⇒ Object\n\nCaptures the html from a block of template code for this handler.\n\nThis method is called to capture content of a block-loving helpers in templates. Haml has a special method to do this, for Erb and Slim we save original buffer, call the block and then restore the buffer.\n\n#### Examples:\n\n``` ruby\n@handler.capture_from_template(&block) => \"...html...\"\n```\n\n### \\#concat_to_template(text = \"\", context = nil) ⇒ Object\n\nOutputs the given text to the template.\n\nThis method is called when template uses block-aware helpers. For Slim and Haml such helpers just return output to use with \\`=\\`. For Erb this method is implemented in ErbHandler by concatenating given text to output buffer.\n\n#### Examples:\n\n``` ruby\n@handler.concat_to_template(\"This will be output to the template buffer\")\n```\n\n### \\#engine_matches?(block) ⇒ Boolean\n\nReturns true if the block given is of the handler's template type; false otherwise.\n\n#### Examples:\n\n``` ruby\n@handler.engine_matches?(block) => true\n```\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/AbstractHandler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/AbstractHandler)"
- name: Padrino::Helpers::OutputHelpers::AbstractHandler#capture_from_template
  id: padrino/helpers/outputhelpers/abstracthandler#capture_from_template-instance_method
  summary: Captures the html from a block of template code for this handler
  belongs_to: Padrino::Helpers::OutputHelpers::AbstractHandler
  description: |-
    ### \#capture_from_template(\*args, &block) ⇒ Object

    Captures the html from a block of template code for this handler.

    This method is called to capture content of a block-loving helpers in templates. Haml has a special method to do this, for Erb and Slim we save original buffer, call the block and then restore the buffer.

    #### Examples:

    ``` ruby
    @handler.capture_from_template(&block) => "...html..."
    ```
- name: Padrino::Helpers::OutputHelpers::AbstractHandler#concat_to_template
  id: padrino/helpers/outputhelpers/abstracthandler#concat_to_template-instance_method
  summary: Outputs the given text to the template
  belongs_to: Padrino::Helpers::OutputHelpers::AbstractHandler
  description: |-
    ### \#concat_to_template(text = "", context = nil) ⇒ Object

    Outputs the given text to the template.

    This method is called when template uses block-aware helpers. For Slim and Haml such helpers just return output to use with \`=\`. For Erb this method is implemented in ErbHandler by concatenating given text to output buffer.

    #### Examples:

    ``` ruby
    @handler.concat_to_template("This will be output to the template buffer")
    ```
- name: Padrino::Helpers::OutputHelpers::AbstractHandler#engine_matches?
  id: padrino/helpers/outputhelpers/abstracthandler#engine_matches?-instance_method
  summary: Returns true if the block given is of the handler's template type; false otherwise
  belongs_to: Padrino::Helpers::OutputHelpers::AbstractHandler
  description: "### \\#engine_matches?(block) ⇒ Boolean\n\nReturns true if the block given is of the handler's template type; false otherwise.\n\n#### Examples:\n\n``` ruby\n@handler.engine_matches?(block) => true\n```\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/AbstractHandler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/AbstractHandler)"
- name: Padrino::Helpers::OutputHelpers::AbstractHandler#initialize
  id: padrino/helpers/outputhelpers/abstracthandler#initialize-instance_method
  summary: Returns a new instance of AbstractHandler
  belongs_to: Padrino::Helpers::OutputHelpers::AbstractHandler
  description: |-
    ### \#initialize(template) ⇒ AbstractHandler

    Returns a new instance of AbstractHandler.

    ## Instance Attribute Details
- name: Padrino::Helpers::OutputHelpers::AbstractHandler#output_buffer
  id: padrino/helpers/outputhelpers/abstracthandler#output_buffer-instance_method
  summary: null
  belongs_to: Padrino::Helpers::OutputHelpers::AbstractHandler
  description: |-
    ### \#output_buffer ⇒ Object

    Returns the value of attribute output_buffer
- name: Padrino::Helpers::OutputHelpers::AbstractHandler#template
  id: padrino/helpers/outputhelpers/abstracthandler#template-instance_method
  summary: null
  belongs_to: Padrino::Helpers::OutputHelpers::AbstractHandler
  description: |-
    ### \#template ⇒ Object (readonly)

    Returns the value of attribute template

    ## Instance Method Details
- name: Padrino::Helpers::OutputHelpers::ErbHandler
  id: padrino/helpers/outputhelpers/erbhandler
  summary: Handler for Erb template
  description: "# Class: Padrino::Helpers::OutputHelpers::ErbHandler\n\nInherits:  \n[AbstractHandler](abstracthandler \"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\")\n\n- [Object](../../../object \"Object (class)\")\n- [AbstractHandler](abstracthandler \"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\")\n- Padrino::Helpers::OutputHelpers::ErbHandler\n\n## Overview\n\nHandler for Erb template.\n\n## Instance Attribute Summary\n\n### Attributes inherited from AbstractHandler\n\n[\\#output_buffer](abstracthandler#output_buffer-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#output_buffer (method)\"), [\\#template](abstracthandler#template-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#template (method)\")\n\n## Instance Method Summary\n\n- [`#`**`concat_to_template`**`(text = \"\", context = nil) ⇒ Object`](erbhandler#concat_to_template-instance_method \"#concat_to_template (instance method)\") Outputs the given text to the templates buffer directly.\n- [`#`**`engine_matches?`**`(block) ⇒ Boolean`](erbhandler#engine_matches%3F-instance_method \"#engine_matches? (instance method)\") Returns true if the block is Erb.\n\n### Methods inherited from AbstractHandler\n\n[\\#capture_from_template](abstracthandler#capture_from_template-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#capture_from_template (method)\"), [\\#initialize](abstracthandler#initialize-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\")\n\n## Constructor Details\n\nThis class inherits a constructor from [Padrino::Helpers::OutputHelpers::AbstractHandler](abstracthandler#initialize-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\")\n\n## Instance Method Details\n\n### \\#concat_to_template(text = \"\", context = nil) ⇒ Object\n\nOutputs the given text to the templates buffer directly.\n\n### \\#engine_matches?(block) ⇒ Boolean\n\nReturns true if the block is Erb.\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/ErbHandler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/ErbHandler)"
- name: Padrino::Helpers::OutputHelpers::ErbHandler#concat_to_template
  id: padrino/helpers/outputhelpers/erbhandler#concat_to_template-instance_method
  summary: Outputs the given text to the templates buffer directly
  belongs_to: Padrino::Helpers::OutputHelpers::ErbHandler
  description: |-
    ### \#concat_to_template(text = "", context = nil) ⇒ Object

    Outputs the given text to the templates buffer directly.
- name: Padrino::Helpers::OutputHelpers::ErbHandler#engine_matches?
  id: padrino/helpers/outputhelpers/erbhandler#engine_matches?-instance_method
  summary: Returns true if the block is Erb
  belongs_to: Padrino::Helpers::OutputHelpers::ErbHandler
  description: "### \\#engine_matches?(block) ⇒ Boolean\n\nReturns true if the block is Erb.\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/ErbHandler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/ErbHandler)"
- name: Padrino::Helpers::OutputHelpers::HamlHandler
  id: padrino/helpers/outputhelpers/hamlhandler
  summary: Handler for Haml templates
  description: "# Class: Padrino::Helpers::OutputHelpers::HamlHandler\n\nInherits:  \n[AbstractHandler](abstracthandler \"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\")\n\n- [Object](../../../object \"Object (class)\")\n- [AbstractHandler](abstracthandler \"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\")\n- Padrino::Helpers::OutputHelpers::HamlHandler\n\n## Overview\n\nHandler for Haml templates.\n\n## Instance Attribute Summary\n\n### Attributes inherited from AbstractHandler\n\n[\\#output_buffer](abstracthandler#output_buffer-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#output_buffer (method)\"), [\\#template](abstracthandler#template-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#template (method)\")\n\n## Instance Method Summary\n\n- [`#`**`capture_from_template`**`(*args, &block) ⇒ Object`](hamlhandler#capture_from_template-instance_method \"#capture_from_template (instance method)\") Captures the html from a block of template code for this handler.\n- [`#`**`engine_matches?`**`(block) ⇒ Boolean`](hamlhandler#engine_matches%3F-instance_method \"#engine_matches? (instance method)\") Returns true if the block is for Haml.\n\n### Methods inherited from AbstractHandler\n\n[\\#concat_to_template](abstracthandler#concat_to_template-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#concat_to_template (method)\"), [\\#initialize](abstracthandler#initialize-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\")\n\n## Constructor Details\n\nThis class inherits a constructor from [Padrino::Helpers::OutputHelpers::AbstractHandler](abstracthandler#initialize-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\")\n\n## Instance Method Details\n\n### \\#capture_from_template(\\*args, &block) ⇒ Object\n\nCaptures the html from a block of template code for this handler.\n\n### \\#engine_matches?(block) ⇒ Boolean\n\nReturns true if the block is for Haml\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/HamlHandler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/HamlHandler)"
- name: Padrino::Helpers::OutputHelpers::HamlHandler#capture_from_template
  id: padrino/helpers/outputhelpers/hamlhandler#capture_from_template-instance_method
  summary: Captures the html from a block of template code for this handler
  belongs_to: Padrino::Helpers::OutputHelpers::HamlHandler
  description: |-
    ### \#capture_from_template(\*args, &block) ⇒ Object

    Captures the html from a block of template code for this handler.
- name: Padrino::Helpers::OutputHelpers::HamlHandler#engine_matches?
  id: padrino/helpers/outputhelpers/hamlhandler#engine_matches?-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Helpers::OutputHelpers::HamlHandler
  description: "### \\#engine_matches?(block) ⇒ Boolean\n\nReturns true if the block is for Haml\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/HamlHandler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/HamlHandler)"
- name: Padrino::Helpers::OutputHelpers::HamlitHandler
  id: padrino/helpers/outputhelpers/hamlithandler
  summary: Handler for Haml templates
  description: "# Class: Padrino::Helpers::OutputHelpers::HamlitHandler\n\nInherits:  \n[AbstractHandler](abstracthandler \"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\")\n\n- [Object](../../../object \"Object (class)\")\n- [AbstractHandler](abstracthandler \"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\")\n- Padrino::Helpers::OutputHelpers::HamlitHandler\n\n## Overview\n\nHandler for Haml templates.\n\n## Instance Attribute Summary\n\n### Attributes inherited from AbstractHandler\n\n[\\#output_buffer](abstracthandler#output_buffer-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#output_buffer (method)\"), [\\#template](abstracthandler#template-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#template (method)\")\n\n## Instance Method Summary\n\n- [`#`**`engine_matches?`**`(block) ⇒ Boolean`](hamlithandler#engine_matches%3F-instance_method \"#engine_matches? (instance method)\") Returns true if the block is for Hamlit.\n\n### Methods inherited from AbstractHandler\n\n[\\#capture_from_template](abstracthandler#capture_from_template-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#capture_from_template (method)\"), [\\#concat_to_template](abstracthandler#concat_to_template-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#concat_to_template (method)\"), [\\#initialize](abstracthandler#initialize-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\")\n\n## Constructor Details\n\nThis class inherits a constructor from [Padrino::Helpers::OutputHelpers::AbstractHandler](abstracthandler#initialize-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\")\n\n## Instance Method Details\n\n### \\#engine_matches?(block) ⇒ Boolean\n\nReturns true if the block is for Hamlit.\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/HamlitHandler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/HamlitHandler)"
- name: Padrino::Helpers::OutputHelpers::HamlitHandler#engine_matches?
  id: padrino/helpers/outputhelpers/hamlithandler#engine_matches?-instance_method
  summary: Returns true if the block is for Hamlit
  belongs_to: Padrino::Helpers::OutputHelpers::HamlitHandler
  description: "### \\#engine_matches?(block) ⇒ Boolean\n\nReturns true if the block is for Hamlit.\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/HamlitHandler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/HamlitHandler)"
- name: Padrino::Helpers::OutputHelpers::SinatraCurrentEngine
  id: padrino/helpers/outputhelpers/sinatracurrentengine
  summary: Module used to detect the current engine in vanilla Sinatra apps
  description: "# Module: Padrino::Helpers::OutputHelpers::SinatraCurrentEngine\n\n## Overview\n\nModule used to detect the current engine in vanilla Sinatra apps.\n\n## Instance Attribute Summary\n\n- [`#`**`current_engine`**` ⇒ Object`](sinatracurrentengine#current_engine-instance_method \"#current_engine (instance method)\") readonly Returns the value of attribute current_engine.\n\n## Instance Method Summary\n\n- [`#`**`render`**`(engine) ⇒ Object`](sinatracurrentengine#render-instance_method \"#render (instance method)\")\n\n## Instance Attribute Details\n\n### \\#current_engine ⇒ Object (readonly)\n\nReturns the value of attribute current_engine\n\n## Instance Method Details\n\n### \\#render(engine) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/SinatraCurrentEngine](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/SinatraCurrentEngine)"
- name: Padrino::Helpers::OutputHelpers::SinatraCurrentEngine#current_engine
  id: padrino/helpers/outputhelpers/sinatracurrentengine#current_engine-instance_method
  summary: null
  belongs_to: Padrino::Helpers::OutputHelpers::SinatraCurrentEngine
  description: |-
    ### \#current_engine ⇒ Object (readonly)

    Returns the value of attribute current_engine

    ## Instance Method Details
- name: Padrino::Helpers::OutputHelpers::SinatraCurrentEngine#render
  id: padrino/helpers/outputhelpers/sinatracurrentengine#render-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Helpers::OutputHelpers::SinatraCurrentEngine
  description: "### \\#render(engine) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/SinatraCurrentEngine](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/SinatraCurrentEngine)"
- name: Padrino::Helpers::OutputHelpers::SlimHandler
  id: padrino/helpers/outputhelpers/slimhandler
  summary: Handler for Slim templates
  description: "# Class: Padrino::Helpers::OutputHelpers::SlimHandler\n\nInherits:  \n[AbstractHandler](abstracthandler \"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\")\n\n- [Object](../../../object \"Object (class)\")\n- [AbstractHandler](abstracthandler \"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\")\n- Padrino::Helpers::OutputHelpers::SlimHandler\n\n## Overview\n\nHandler for Slim templates.\n\n## Instance Attribute Summary\n\n### Attributes inherited from AbstractHandler\n\n[\\#output_buffer](abstracthandler#output_buffer-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#output_buffer (method)\"), [\\#template](abstracthandler#template-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#template (method)\")\n\n## Instance Method Summary\n\n- [`#`**`engine_matches?`**`(block) ⇒ Boolean`](slimhandler#engine_matches%3F-instance_method \"#engine_matches? (instance method)\") Returns true if the block is for Slim.\n\n### Methods inherited from AbstractHandler\n\n[\\#capture_from_template](abstracthandler#capture_from_template-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#capture_from_template (method)\"), [\\#concat_to_template](abstracthandler#concat_to_template-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#concat_to_template (method)\"), [\\#initialize](abstracthandler#initialize-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\")\n\n## Constructor Details\n\nThis class inherits a constructor from [Padrino::Helpers::OutputHelpers::AbstractHandler](abstracthandler#initialize-instance_method \"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\")\n\n## Instance Method Details\n\n### \\#engine_matches?(block) ⇒ Boolean\n\nReturns true if the block is for Slim.\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/SlimHandler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/SlimHandler)"
- name: Padrino::Helpers::OutputHelpers::SlimHandler#engine_matches?
  id: padrino/helpers/outputhelpers/slimhandler#engine_matches?-instance_method
  summary: Returns true if the block is for Slim
  belongs_to: Padrino::Helpers::OutputHelpers::SlimHandler
  description: "### \\#engine_matches?(block) ⇒ Boolean\n\nReturns true if the block is for Slim.\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/SlimHandler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/SlimHandler)"
- name: Padrino::Helpers::RenderHelpers
  id: padrino/helpers/renderhelpers
  summary: Helpers related to rendering within templates (i.e partials)
  description: "# Module: Padrino::Helpers::RenderHelpers\n\n## Overview\n\nHelpers related to rendering within templates (i.e partials).\n\n## Instance Method Summary\n\n- [`#`**`partial`**`(template, options = {}, &block) ⇒ String`](renderhelpers#partial-instance_method \"#partial (instance method)\")` (also: #render_partial)` Render a partials with collections support.\n\n## Instance Method Details\n\n### \\#partial(template, options = {}, &block) ⇒ String Also known as: render_partial\n\n**Note:** If using this from Sinatra, pass explicit `:engine` option\n\nRender a partials with collections support.\n\n#### Examples:\n\n``` ruby\npartial 'photo/item', :object => @photo\npartial 'photo/item', :collection => @photos\npartial 'photo/item', :locals => { :foo => :bar }\npartial 'photo/item', :engine => :erb\n```\n\n#### Parameters:\n\n- `template` ([`String`](../../string \"String (class)\")) — Relative path to partial template.\n- `options` (`Hash`) *(defaults to: `{}`)* — Options hash for rendering options.\n\n#### Options Hash (`options`):\n\n- `:object` ([`Object`](../../object \"Object (class)\")) — Object rendered in partial.\n- `:collection` (`Array<`[`Object`](../../object \"Object (class)\")`>`) — Partial is rendered for each object in this collection.\n- `:locals` (`Hash`) — default: `{}` — Local variables accessible in the partial.\n- `:engine` (`Symbol`) — Explicit rendering engine to use for this partial.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html generated from this partial.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/RenderHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/RenderHelpers)"
- name: Padrino::Helpers::RenderHelpers#partial
  id: padrino/helpers/renderhelpers#partial-instance_method
  summary: Render a partials with collections support
  belongs_to: Padrino::Helpers::RenderHelpers
  description: "### \\#partial(template, options = {}, &block) ⇒ String Also known as: render_partial\n\n**Note:** If using this from Sinatra, pass explicit `:engine` option\n\nRender a partials with collections support.\n\n#### Examples:\n\n``` ruby\npartial 'photo/item', :object => @photo\npartial 'photo/item', :collection => @photos\npartial 'photo/item', :locals => { :foo => :bar }\npartial 'photo/item', :engine => :erb\n```\n\n#### Parameters:\n\n- `template`([`String`](../../string \"String (class)\")) — Relative path to partial template.\n- `options`(`Hash`)*(defaults to: `{}`)* — Options hash for rendering options.\n\n#### Options Hash (`options`):\n\n- `:object`([`Object`](../../object \"Object (class)\")) — Object rendered in partial.\n- `:collection`(`Array<`[`Object`](../../object \"Object (class)\")`>`) — Partial is rendered for each object in this collection.\n- `:locals`(`Hash`) — default: `{}` — Local variables accessible in the partial.\n- `:engine`(`Symbol`) — Explicit rendering engine to use for this partial.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The html generated from this partial.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/RenderHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/RenderHelpers)"
- name: Padrino::Helpers::TagHelpers
  id: padrino/helpers/taghelpers
  summary: Helpers related to producing html tags within templates
  description: "# Module: Padrino::Helpers::TagHelpers\n\n## Overview\n\nHelpers related to producing html tags within templates.\n\n## Constant Summary [collapse](#)\n\nESCAPE_VALUES =\n\nTag values escaped to html entities.\n\n``` ruby\n{\n  \"&\" => \"&amp;\",\n  \"<\" => \"&lt;\",\n  \">\" => \"&gt;\",\n  '\"' => \"&quot;\"\n}.freeze\n```\n\nESCAPE_REGEXP =\n\nCached Regexp for escaping values to avoid rebuilding one on every escape operation.\n\n``` ruby\nRegexp.union(*ESCAPE_VALUES.keys).freeze\n```\n\nBOOLEAN_ATTRIBUTES =\n\n``` ruby\n[\n  :autoplay,\n  :autofocus,\n  :formnovalidate,\n  :checked,\n  :disabled,\n  :hidden,\n  :loop,\n  :multiple,\n  :muted,\n  :readonly,\n  :required,\n  :selected,\n  :declare,\n  :defer,\n  :ismap,\n  :itemscope,\n  :noresize,\n  :novalidate\n].freeze\n```\n\nDATA_ATTRIBUTES =\n\nCustom data attributes, feel free to update with yours:\n\n``` ruby\nPadrino::Helpers::TagHelpers::DATA_ATTRIBUTES.push(:dialog)\ntext_field :foo, :dialog => true\n# Generates: <input type=\"text\" data-dialog=\"true\" name=\"foo\" />\n```\n\n``` ruby\n[\n  :method,\n  :remote,\n  :confirm\n]\n```\n\nNEWLINE =\n\nA html_safe newline string to avoid allocating a new on each concatenation.\n\n``` ruby\n\"\\n\".html_safe.freeze\n```\n\n## Instance Method Summary\n\n- [`#`**`content_tag`**`(name, content = nil, options = nil, &block) ⇒ String`](taghelpers#content_tag-instance_method \"#content_tag (instance method)\") Creates an HTML tag with given name, content, and options.\n- [`#`**`escape_link`**`(link) ⇒ Object`](taghelpers#escape_link-instance_method \"#escape_link (instance method)\") Returns an escaped document link.\n- [`#`**`input_tag`**`(type, options = {}) ⇒ String`](taghelpers#input_tag-instance_method \"#input_tag (instance method)\") Creates an HTML input field with the given type and options.\n- [`#`**`safe_content_tag`**`(name, content = nil, options = nil, &block) ⇒ Object`](taghelpers#safe_content_tag-instance_method \"#safe_content_tag (instance method)\") Like \\#content_tag, but assumes its input to be safe and doesn't escape.\n- [`#`**`tag`**`(name, options = nil, open = false) ⇒ String`](taghelpers#tag-instance_method \"#tag (instance method)\") Creates an HTML tag with the given name and options.\n\n## Instance Method Details\n\n### \\#content_tag(name, content, options = nil) ⇒ String \\#content_tag(name, options = nil, &block) ⇒ String\n\nCreates an HTML tag with given name, content, and options.\n\n#### Examples:\n\n``` ruby\ncontent_tag(:p, 'Hello World', :class => 'light')\n\n# => <p class=\"light\">\n# =>   Hello World\n# => </p>\n\ncontent_tag(:p, :class => 'dark') do\n  link_to 'Padrino', 'http://www.padrinorb.com'\nend\n\n# => <p class=\"dark\">\n# =>   <a href=\"http://www.padrinorb.com\">Padrino</a>\n# => </p>\n```\n\n#### Overloads:\n\n- ### \\#content_tag(name, content, options = nil) ⇒ String\n\n  #### Parameters:\n\n  - `name` (`Symbol`) — The name of the HTML tag to create.\n  - `content` ([`String`](../../string \"String (class)\")) — The content inside of the tag.\n  - `options` (`Hash`) *(defaults to: `nil`)* — The HTML options to include in this tag.\n\n- ### \\#content_tag(name, options = nil, &block) ⇒ String\n\n  #### Parameters:\n\n  - `name` (`Symbol`) — The name of the HTML tag to create.\n  - `options` (`Hash`) *(defaults to: `nil`)* — The HTML options to include in this tag.\n  - `block` (`Proc`) — The block returning HTML content.\n\n#### Parameters:\n\n- `options` (`Hash`) *(defaults to: `nil`)* — a customizable set of options\n\n#### Options Hash (`options`):\n\n- `:id` ([`String`](../../string \"String (class)\")) — Specifies a unique identifier for the element.\n- `:class` ([`String`](../../string \"String (class)\")) — Specifies the stylesheet class of the element.\n- `:title` ([`String`](../../string \"String (class)\")) — Specifies the title for the element.\n- `:accesskey` ([`String`](../../string \"String (class)\")) — Specifies a shortcut key to access the element.\n- `:dropzone` (`Symbol`) — Specifies what happens when dragged items are dropped on the element. (:copy, :link, :move)\n- `:hidden` (`Boolean`) — Specifies whether or not the element is hidden from view.\n- `:draggable` (`Boolean`) — Specifies whether or not the element is draggable. (true, false, :auto)\n- `:contenteditable` (`Boolean`) — Specifies whether or not the element is editable.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Generated HTML with specified `options`.\n\n### \\#escape_link(link) ⇒ Object\n\nReturns an escaped document link.\n\n#### Examples:\n\n``` ruby\nescape_link('http://example.com/spaced link')\n# => 'http://example.com/spaced%20link'\nescape_link('already%20partially escaped')\n# => 'already%20partially%20escaped'\n```\n\n### \\#input_tag(type, options = {}) ⇒ String\n\nCreates an HTML input field with the given type and options.\n\n#### Examples:\n\n``` ruby\ninput_tag :text, :name => 'handle'\n# => <input type=\"test\" name=\"handle\" />\n\ninput_tag :password, :name => 'password', :size => 20\n# => <input type=\"password\" name=\"password\" size=\"20\" />\n\ninput_tag :text, :name => 'username', :required => true, :autofocus => true\n# => <input type=\"text\" name=\"username\" required autofocus />\n\ninput_tag :number, :name => 'credit_card', :autocomplete => :off\n# => <input type=\"number\" name=\"credit_card\" autocomplete=\"off\" />  \n```\n\n#### Parameters:\n\n- `type` (`Symbol`) — The type of input to create.\n- `options` (`Hash`) *(defaults to: `{}`)* — The HTML options to include in this input.\n\n#### Options Hash (`options`):\n\n- `:id` ([`String`](../../string \"String (class)\")) — Specifies a unique identifier for the input.\n- `:class` ([`String`](../../string \"String (class)\")) — Specifies the stylesheet class of the input.\n- `:name` ([`String`](../../string \"String (class)\")) — Specifies the name of the input.\n- `:accesskey` ([`String`](../../string \"String (class)\")) — Specifies a shortcut key to access the input.\n- `:tabindex` (`Integer`) — Specifies the tab order of the input.\n- `:hidden` (`Boolean`) — Specifies whether or not the input is hidden from view.\n- `:spellcheck` (`Boolean`) — Specifies whether or not the input should have it's spelling and grammar checked for errors.\n- `:draggable` (`Boolean`) — Specifies whether or not the input is draggable. (true, false, :auto)\n- `:pattern` ([`String`](../../string \"String (class)\")) — Specifies the regular expression pattern that the input's value is checked against.\n- `:autocomplete` (`Symbol`) — Specifies whether or not the input should have autocomplete enabled. (:on, :off)\n- `:autofocus` (`Boolean`) — Specifies whether or not the input should automatically get focus when the page loads.\n- `:required` (`Boolean`) — Specifies whether or not the input is required to be completed before the form is submitted.\n- `:readonly` (`Boolean`) — Specifies whether or not the input is read only.\n- `:disabled` (`Boolean`) — Specifies whether or not the input is disabled.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Generated HTML with specified `options`.\n\n### \\#safe_content_tag(name, content = nil, options = nil, &block) ⇒ Object\n\nLike \\#content_tag, but assumes its input to be safe and doesn't escape. It also returns safe HTML.\n\n#### See Also:\n\n- [\\#content_tag](taghelpers#content_tag-instance_method \"Padrino::Helpers::TagHelpers#content_tag (method)\")\n\n### \\#tag(name, options = nil, open = false) ⇒ String\n\nCreates an HTML tag with the given name and options.\n\n#### Examples:\n\n``` ruby\ntag :hr, :class => 'dotted'\n# => <hr class=\"dotted\" />\n\ntag :input, :name => 'username', :type => :text\n# => <input name=\"username\" type=\"text\" />\n\ntag :img, :src => 'images/pony.jpg', :alt => 'My Little Pony'\n# => <img src=\"images/pony.jpg\" alt=\"My Little Pony\" />\n\ntag :img, :src => 'sinatra.jpg', :data => { :nsfw => false, :geo => [34.087, -118.407] }\n# => <img src=\"sinatra.jpg\" data-nsfw=\"false\" data-geo=\"34.087 -118.407\" />\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) — The name of the HTML tag to create.\n- `options` (`Hash`) *(defaults to: `nil`)* — The HTML options to include in this tag.\n\n#### Options Hash (`options`):\n\n- `:id` ([`String`](../../string \"String (class)\")) — Specifies a unique identifier for the element.\n- `:class` ([`String`](../../string \"String (class)\")) — Specifies the stylesheet class of the element.\n- `:title` ([`String`](../../string \"String (class)\")) — Specifies the title for the element.\n- `:accesskey` ([`String`](../../string \"String (class)\")) — Specifies a shortcut key to access the element.\n- `:dropzone` (`Symbol`) — Specifies what happens when dragged items are dropped on the element. (:copy, :link, :move)\n- `:hidden` (`Boolean`) — Specifies whether or not the element is hidden from view.\n- `:draggable` (`Boolean`) — Specifies whether or not the element is draggable. (true, false, :auto)\n- `:contenteditable` (`Boolean`) — Specifies whether or not the element is editable.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Generated HTML with specified `options`.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/TagHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/TagHelpers)"
- name: Padrino::Helpers::TagHelpers#content_tag
  id: padrino/helpers/taghelpers#content_tag-instance_method
  summary: Creates an HTML tag with given name, content, and options
  belongs_to: Padrino::Helpers::TagHelpers
  description: |-
    ### \#content_tag(name, content, options = nil) ⇒ String \#content_tag(name, options = nil, &block) ⇒ String

    Creates an HTML tag with given name, content, and options.

    #### Examples:

    ``` ruby
    content_tag(:p, 'Hello World', :class => 'light')

    # => <p class="light">
    # =>   Hello World
    # => </p>

    content_tag(:p, :class => 'dark') do
      link_to 'Padrino', 'http://www.padrinorb.com'
    end

    # => <p class="dark">
    # =>   <a href="http://www.padrinorb.com">Padrino</a>
    # => </p>
    ```

    #### Overloads:

    - ### \#content_tag(name, content, options = nil) ⇒ String

      #### Parameters:

      - `name`(`Symbol`) — The name of the HTML tag to create.
      - `content`([`String`](../../string "String (class)")) — The content inside of the tag.
      - `options`(`Hash`)*(defaults to: `nil`)* — The HTML options to include in this tag.

    - ### \#content_tag(name, options = nil, &block) ⇒ String

      #### Parameters:

      - `name`(`Symbol`) — The name of the HTML tag to create.
      - `options`(`Hash`)*(defaults to: `nil`)* — The HTML options to include in this tag.
      - `block`(`Proc`) — The block returning HTML content.

    #### Parameters:

    - `options`(`Hash`)*(defaults to: `nil`)* — a customizable set of options

    #### Options Hash (`options`):

    - `:id`([`String`](../../string "String (class)")) — Specifies a unique identifier for the element.
    - `:class`([`String`](../../string "String (class)")) — Specifies the stylesheet class of the element.
    - `:title`([`String`](../../string "String (class)")) — Specifies the title for the element.
    - `:accesskey`([`String`](../../string "String (class)")) — Specifies a shortcut key to access the element.
    - `:dropzone`(`Symbol`) — Specifies what happens when dragged items are dropped on the element. (:copy, :link, :move)
    - `:hidden`(`Boolean`) — Specifies whether or not the element is hidden from view.
    - `:draggable`(`Boolean`) — Specifies whether or not the element is draggable. (true, false, :auto)
    - `:contenteditable`(`Boolean`) — Specifies whether or not the element is editable.

    #### Returns:

    - ([`String`](../../string "String (class)")) — Generated HTML with specified `options`.
- name: Padrino::Helpers::TagHelpers#escape_link
  id: padrino/helpers/taghelpers#escape_link-instance_method
  summary: Returns an escaped document link
  belongs_to: Padrino::Helpers::TagHelpers
  description: |-
    ### \#escape_link(link) ⇒ Object

    Returns an escaped document link.

    #### Examples:

    ``` ruby
    escape_link('http://example.com/spaced link')
    # => 'http://example.com/spaced%20link'
    escape_link('already%20partially escaped')
    # => 'already%20partially%20escaped'
    ```
- name: Padrino::Helpers::TagHelpers#input_tag
  id: padrino/helpers/taghelpers#input_tag-instance_method
  summary: Creates an HTML input field with the given type and options
  belongs_to: Padrino::Helpers::TagHelpers
  description: "### \\#input_tag(type, options = {}) ⇒ String\n\nCreates an HTML input field with the given type and options.\n\n#### Examples:\n\n``` ruby\ninput_tag :text, :name => 'handle'\n# => <input type=\"test\" name=\"handle\" />\n\ninput_tag :password, :name => 'password', :size => 20\n# => <input type=\"password\" name=\"password\" size=\"20\" />\n\ninput_tag :text, :name => 'username', :required => true, :autofocus => true\n# => <input type=\"text\" name=\"username\" required autofocus />\n\ninput_tag :number, :name => 'credit_card', :autocomplete => :off\n# => <input type=\"number\" name=\"credit_card\" autocomplete=\"off\" />  \n```\n\n#### Parameters:\n\n- `type`(`Symbol`) — The type of input to create.\n- `options`(`Hash`)*(defaults to: `{}`)* — The HTML options to include in this input.\n\n#### Options Hash (`options`):\n\n- `:id`([`String`](../../string \"String (class)\")) — Specifies a unique identifier for the input.\n- `:class`([`String`](../../string \"String (class)\")) — Specifies the stylesheet class of the input.\n- `:name`([`String`](../../string \"String (class)\")) — Specifies the name of the input.\n- `:accesskey`([`String`](../../string \"String (class)\")) — Specifies a shortcut key to access the input.\n- `:tabindex`(`Integer`) — Specifies the tab order of the input.\n- `:hidden`(`Boolean`) — Specifies whether or not the input is hidden from view.\n- `:spellcheck`(`Boolean`) — Specifies whether or not the input should have it's spelling and grammar checked for errors.\n- `:draggable`(`Boolean`) — Specifies whether or not the input is draggable. (true, false, :auto)\n- `:pattern`([`String`](../../string \"String (class)\")) — Specifies the regular expression pattern that the input's value is checked against.\n- `:autocomplete`(`Symbol`) — Specifies whether or not the input should have autocomplete enabled. (:on, :off)\n- `:autofocus`(`Boolean`) — Specifies whether or not the input should automatically get focus when the page loads.\n- `:required`(`Boolean`) — Specifies whether or not the input is required to be completed before the form is submitted.\n- `:readonly`(`Boolean`) — Specifies whether or not the input is read only.\n- `:disabled`(`Boolean`) — Specifies whether or not the input is disabled.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Generated HTML with specified `options`."
- name: Padrino::Helpers::TagHelpers#safe_content_tag
  id: padrino/helpers/taghelpers#safe_content_tag-instance_method
  summary: 'Like #content_tag, but assumes its input to be safe and doesn''t escape'
  belongs_to: Padrino::Helpers::TagHelpers
  description: |-
    ### \#safe_content_tag(name, content = nil, options = nil, &block) ⇒ Object

    Like \#content_tag, but assumes its input to be safe and doesn't escape. It also returns safe HTML.

    #### See Also:

    -  [\#content_tag](taghelpers#content_tag-instance_method "Padrino::Helpers::TagHelpers#content_tag (method)")
- name: Padrino::Helpers::TagHelpers#tag
  id: padrino/helpers/taghelpers#tag-instance_method
  summary: Creates an HTML tag with the given name and options
  belongs_to: Padrino::Helpers::TagHelpers
  description: "### \\#tag(name, options = nil, open = false) ⇒ String\n\nCreates an HTML tag with the given name and options.\n\n#### Examples:\n\n``` ruby\ntag :hr, :class => 'dotted'\n# => <hr class=\"dotted\" />\n\ntag :input, :name => 'username', :type => :text\n# => <input name=\"username\" type=\"text\" />\n\ntag :img, :src => 'images/pony.jpg', :alt => 'My Little Pony'\n# => <img src=\"images/pony.jpg\" alt=\"My Little Pony\" />\n\ntag :img, :src => 'sinatra.jpg', :data => { :nsfw => false, :geo => [34.087, -118.407] }\n# => <img src=\"sinatra.jpg\" data-nsfw=\"false\" data-geo=\"34.087 -118.407\" />\n```\n\n#### Parameters:\n\n- `name`(`Symbol`) — The name of the HTML tag to create.\n- `options`(`Hash`)*(defaults to: `nil`)* — The HTML options to include in this tag.\n\n#### Options Hash (`options`):\n\n- `:id`([`String`](../../string \"String (class)\")) — Specifies a unique identifier for the element.\n- `:class`([`String`](../../string \"String (class)\")) — Specifies the stylesheet class of the element.\n- `:title`([`String`](../../string \"String (class)\")) — Specifies the title for the element.\n- `:accesskey`([`String`](../../string \"String (class)\")) — Specifies a shortcut key to access the element.\n- `:dropzone`(`Symbol`) — Specifies what happens when dragged items are dropped on the element. (:copy, :link, :move)\n- `:hidden`(`Boolean`) — Specifies whether or not the element is hidden from view.\n- `:draggable`(`Boolean`) — Specifies whether or not the element is draggable. (true, false, :auto)\n- `:contenteditable`(`Boolean`) — Specifies whether or not the element is editable.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — Generated HTML with specified `options`.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/TagHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/TagHelpers)"
- name: Padrino::Helpers::TranslationHelpers
  id: padrino/helpers/translationhelpers
  summary: Helpers related to locale i18n translation within templates
  description: "# Module: Padrino::Helpers::TranslationHelpers\n\n## Overview\n\nHelpers related to locale i18n translation within templates.\n\n## Instance Method Summary\n\n- [`#`**`localize`**`(*args) ⇒ String`](translationhelpers#localize-instance_method \"#localize (instance method)\")` (also: #l)` Delegates to I18n.localize with no additional functionality.\n- [`#`**`translate`**`(*args) ⇒ String`](translationhelpers#translate-instance_method \"#translate (instance method)\")` (also: #t)` Delegates to I18n.translate with no additional functionality.\n\n## Instance Method Details\n\n### \\#localize(\\*args) ⇒ String Also known as: l\n\nDelegates to I18n.localize with no additional functionality.\n\n#### Parameters:\n\n- `*args` (`Symbol`) — The keys to retrieve.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The translation for the specified keys.\n\n### \\#translate(\\*args) ⇒ String Also known as: t\n\nDelegates to I18n.translate with no additional functionality.\n\n#### Parameters:\n\n- `*args` (`Symbol`) — The keys to retrieve.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The translation for the specified keys.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/TranslationHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/TranslationHelpers)"
- name: Padrino::Helpers::TranslationHelpers#localize
  id: padrino/helpers/translationhelpers#localize-instance_method
  summary: Delegates to I18n.localize with no additional functionality
  belongs_to: Padrino::Helpers::TranslationHelpers
  description: |-
    ### \#localize(\*args) ⇒ String Also known as: l

    Delegates to I18n.localize with no additional functionality.

    #### Parameters:

    - `*args`(`Symbol`) — The keys to retrieve.

    #### Returns:

    - ([`String`](../../string "String (class)")) — The translation for the specified keys.
- name: Padrino::Helpers::TranslationHelpers#translate
  id: padrino/helpers/translationhelpers#translate-instance_method
  summary: Delegates to I18n.translate with no additional functionality
  belongs_to: Padrino::Helpers::TranslationHelpers
  description: "### \\#translate(\\*args) ⇒ String Also known as: t\n\nDelegates to I18n.translate with no additional functionality.\n\n#### Parameters:\n\n- `*args`(`Symbol`) — The keys to retrieve.\n\n#### Returns:\n\n- ([`String`](../../string \"String (class)\")) — The translation for the specified keys.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/TranslationHelpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/TranslationHelpers)"
- name: Padrino::Inflections
  id: padrino/inflections
  summary: This module acts as a singleton returned/yielded by Sequel.inflections, which is used to override or specify additional inflection rules for Sequel
  description: "# Module: Padrino::Inflections\n\nExtended by:  \n[Inflections](inflections \"Padrino::Inflections (module)\")\n\nIncluded in:  \n[Inflections](inflections \"Padrino::Inflections (module)\")\n\n## Overview\n\nThis module acts as a singleton returned/yielded by Sequel.inflections, which is used to override or specify additional inflection rules for Sequel. Examples:\n\n``` ruby\nSequel.inflections do |inflect|\n  inflect.plural /^(ox)$/i, '\\1\\2en'\n  inflect.singular /^(ox)en/i, '\\1'\n\n  inflect.irregular 'octopus', 'octopi'\n\n  inflect.uncountable \"equipment\"\nend\n```\n\nNew rules are added at the top. So in the example above, the irregular rule for octopus will now be the first of the pluralization and singularization rules that is runs. This guarantees that your rules run before any of the rules that may already have been loaded.\n\n## Constant Summary [collapse](#)\n\nCAMELIZE_CONVERT_REGEXP =  \n``` ruby\n/(^|_)(.)/.freeze\n```\n\nCAMELIZE_MODULE_REGEXP =  \n``` ruby\n/\\/(.?)/.freeze\n```\n\nDASH =  \n``` ruby\n'-'.freeze\n```\n\nDEMODULIZE_CONVERT_REGEXP =  \n``` ruby\n/^.*::/.freeze\n```\n\nEMPTY_STRING =  \n``` ruby\n''.freeze\n```\n\nSLASH =  \n``` ruby\n'/'.freeze\n```\n\nVALID_CONSTANT_NAME_REGEXP =  \n``` ruby\n/\\A(?:::)?([A-Z]\\w*(?:::[A-Z]\\w*)*)\\z/.freeze\n```\n\nUNDERSCORE =  \n``` ruby\n'_'.freeze\n```\n\nUNDERSCORE_CONVERT_REGEXP1 =  \n``` ruby\n/([A-Z]+)([A-Z][a-z])/.freeze\n```\n\nUNDERSCORE_CONVERT_REGEXP2 =  \n``` ruby\n/([a-z\\d])([A-Z])/.freeze\n```\n\nUNDERSCORE_CONVERT_REPLACE =  \n``` ruby\n'\\1_\\2'.freeze\n```\n\nUNDERSCORE_MODULE_REGEXP =  \n``` ruby\n/::/.freeze\n```\n\n## Class Attribute Summary\n\n- [`.`**`plurals`**` ⇒ Object`](inflections#plurals-class_method \"plurals (class method)\") readonly Array of two element arrays, first containing a regex, and the second containing a substitution pattern, used for plurization.\n- [`.`**`singulars`**` ⇒ Object`](inflections#singulars-class_method \"singulars (class method)\") readonly Array of two element arrays, first containing a regex, and the second containing a substitution pattern, used for singularization.\n- [`.`**`uncountables`**` ⇒ Object`](inflections#uncountables-class_method \"uncountables (class method)\") readonly Array of strings for words were the singular form is the same as the plural form.\n\n## Class Method Summary\n\n- [`.`**`clear`**`(scope = :all) ⇒ Object`](inflections#clear-class_method \"clear (class method)\") Clears the loaded inflections within a given scope (default is :all).\n- [`.`**`irregular`**`(singular, plural) ⇒ Object`](inflections#irregular-class_method \"irregular (class method)\") Specifies a new irregular that applies to both pluralization and singularization at the same time.\n- [`.`**`plural`**`(rule, replacement) ⇒ Object`](inflections#plural-class_method \"plural (class method)\") Specifies a new pluralization rule and its replacement.\n- [`.`**`singular`**`(rule, replacement) ⇒ Object`](inflections#singular-class_method \"singular (class method)\") Specifies a new singularization rule and its replacement.\n- [`.`**`uncountable`**`(*words) ⇒ Object`](inflections#uncountable-class_method \"uncountable (class method)\") Add uncountable words that shouldn't be attempted inflected.\n\n## Instance Method Summary\n\n- [`#`**`camelize`**`(s) ⇒ Object`](inflections#camelize-instance_method \"#camelize (instance method)\") Convert the given string to CamelCase.\n- [`#`**`classify`**`(s) ⇒ Object`](inflections#classify-instance_method \"#classify (instance method)\") Create a class name from a plural table name like Rails does for table names to models.\n- [`#`**`constantize`**`(s) ⇒ Object`](inflections#constantize-instance_method \"#constantize (instance method)\") Tries to find a declared constant with the name specified in the string.\n- [`#`**`demodulize`**`(s) ⇒ Object`](inflections#demodulize-instance_method \"#demodulize (instance method)\") Removes the module part from the expression in the string.\n- [`#`**`humanize`**`(s) ⇒ Object`](inflections#humanize-instance_method \"#humanize (instance method)\") Capitalizes the first word, turns underscores into spaces, and strips a trailing '\\_id' if present.\n- [`#`**`pluralize`**`(s) ⇒ Object`](inflections#pluralize-instance_method \"#pluralize (instance method)\") Returns the plural form of the word in the string.\n- [`#`**`singularize`**`(s) ⇒ Object`](inflections#singularize-instance_method \"#singularize (instance method)\") The reverse of pluralize, returns the singular form of a word in a string.\n- [`#`**`underscore`**`(s) ⇒ Object`](inflections#underscore-instance_method \"#underscore (instance method)\") The reverse of camelize.\n\n## Class Attribute Details\n\n### .plurals ⇒ Object (readonly)\n\nArray of two element arrays, first containing a regex, and the second containing a substitution pattern, used for plurization.\n\n### .singulars ⇒ Object (readonly)\n\nArray of two element arrays, first containing a regex, and the second containing a substitution pattern, used for singularization.\n\n### .uncountables ⇒ Object (readonly)\n\nArray of strings for words were the singular form is the same as the plural form\n\n## Class Method Details\n\n### .clear(scope = :all) ⇒ Object\n\nClears the loaded inflections within a given scope (default is :all). Give the scope as a symbol of the inflection type, the options are: :plurals, :singulars, :uncountables\n\nExamples:\n\n``` ruby\nclear :all\nclear :plurals\n```\n\n### .irregular(singular, plural) ⇒ Object\n\nSpecifies a new irregular that applies to both pluralization and singularization at the same time. This can only be used for strings, not regular expressions. You simply pass the irregular in singular and plural form.\n\nExamples:\n\n``` ruby\nirregular 'octopus', 'octopi'\nirregular 'person', 'people'\n```\n\n### .plural(rule, replacement) ⇒ Object\n\nSpecifies a new pluralization rule and its replacement. The rule can either be a string or a regular expression. The replacement should always be a string that may include references to the matched data from the rule.\n\nExample:\n\n``` ruby\nplural(/(x|ch|ss|sh)$/i, '\\1es')\n```\n\n### .singular(rule, replacement) ⇒ Object\n\nSpecifies a new singularization rule and its replacement. The rule can either be a string or a regular expression. The replacement should always be a string that may include references to the matched data from the rule.\n\nExample:\n\n``` ruby\nsingular(/([^aeiouy]|qu)ies$/i, '\\1y')\n```\n\n### .uncountable(\\*words) ⇒ Object\n\nAdd uncountable words that shouldn't be attempted inflected.\n\nExamples:\n\n``` ruby\nuncountable \"money\"\nuncountable \"money\", \"information\"\nuncountable %w( money information rice )\n```\n\n## Instance Method Details\n\n### \\#camelize(s) ⇒ Object\n\nConvert the given string to CamelCase. Will also convert '/' to '::' which is useful for converting paths to namespaces.\n\n### \\#classify(s) ⇒ Object\n\nCreate a class name from a plural table name like Rails does for table names to models.\n\n### \\#constantize(s) ⇒ Object\n\nTries to find a declared constant with the name specified in the string. It raises a NameError when the name is not in CamelCase or is not initialized.\n\n#### Raises:\n\n- (`NameError`)\n\n### \\#demodulize(s) ⇒ Object\n\nRemoves the module part from the expression in the string\n\n### \\#humanize(s) ⇒ Object\n\nCapitalizes the first word, turns underscores into spaces, and strips a trailing '\\_id' if present.\n\n### \\#pluralize(s) ⇒ Object\n\nReturns the plural form of the word in the string.\n\n### \\#singularize(s) ⇒ Object\n\nThe reverse of pluralize, returns the singular form of a word in a string.\n\n### \\#underscore(s) ⇒ Object\n\nThe reverse of camelize. Makes an underscored form from the expression in the string. Also changes '::' to '/' to convert namespaces to paths.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Inflections](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Inflections)"
- name: Padrino::Inflections#camelize
  id: padrino/inflections#camelize-instance_method
  summary: Convert the given string to CamelCase
  belongs_to: Padrino::Inflections
  description: |-
    ### \#camelize(s) ⇒ Object

    Convert the given string to CamelCase. Will also convert '/' to '::' which is useful for converting paths to namespaces.
- name: Padrino::Inflections#classify
  id: padrino/inflections#classify-instance_method
  summary: Create a class name from a plural table name like Rails does for table names to models
  belongs_to: Padrino::Inflections
  description: |-
    ### \#classify(s) ⇒ Object

    Create a class name from a plural table name like Rails does for table names to models.
- name: Padrino::Inflections#constantize
  id: padrino/inflections#constantize-instance_method
  summary: Tries to find a declared constant with the name specified in the string
  belongs_to: Padrino::Inflections
  description: |-
    ### \#constantize(s) ⇒ Object

    Tries to find a declared constant with the name specified in the string. It raises a NameError when the name is not in CamelCase or is not initialized.

    #### Raises:

    - (`NameError`)
- name: Padrino::Inflections#demodulize
  id: padrino/inflections#demodulize-instance_method
  summary: null
  belongs_to: Padrino::Inflections
  description: |-
    ### \#demodulize(s) ⇒ Object

    Removes the module part from the expression in the string
- name: Padrino::Inflections#humanize
  id: padrino/inflections#humanize-instance_method
  summary: Capitalizes the first word, turns underscores into spaces, and strips a trailing '_id' if present
  belongs_to: Padrino::Inflections
  description: |-
    ### \#humanize(s) ⇒ Object

    Capitalizes the first word, turns underscores into spaces, and strips a trailing '\_id' if present.
- name: Padrino::Inflections#pluralize
  id: padrino/inflections#pluralize-instance_method
  summary: Returns the plural form of the word in the string
  belongs_to: Padrino::Inflections
  description: |-
    ### \#pluralize(s) ⇒ Object

    Returns the plural form of the word in the string.
- name: Padrino::Inflections#singularize
  id: padrino/inflections#singularize-instance_method
  summary: The reverse of pluralize, returns the singular form of a word in a string
  belongs_to: Padrino::Inflections
  description: |-
    ### \#singularize(s) ⇒ Object

    The reverse of pluralize, returns the singular form of a word in a string.
- name: Padrino::Inflections#underscore
  id: padrino/inflections#underscore-instance_method
  summary: The reverse of camelize
  belongs_to: Padrino::Inflections
  description: "### \\#underscore(s) ⇒ Object\n\nThe reverse of camelize. Makes an underscored form from the expression in the string. Also changes '::' to '/' to convert namespaces to paths.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Inflections](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Inflections)"
- name: Padrino::Inflections.clear
  id: padrino/inflections#clear-class_method
  summary: Clears the loaded inflections within a given scope (default is :all)
  belongs_to: Padrino::Inflections
  description: |-
    ### .clear(scope = :all) ⇒ Object

    Clears the loaded inflections within a given scope (default is :all). Give the scope as a symbol of the inflection type, the options are: :plurals, :singulars, :uncountables

    Examples:

    ``` ruby
    clear :all
    clear :plurals
    ```
- name: Padrino::Inflections.irregular
  id: padrino/inflections#irregular-class_method
  summary: Specifies a new irregular that applies to both pluralization and singularization at the same time
  belongs_to: Padrino::Inflections
  description: |-
    ### .irregular(singular, plural) ⇒ Object

    Specifies a new irregular that applies to both pluralization and singularization at the same time. This can only be used for strings, not regular expressions. You simply pass the irregular in singular and plural form.

    Examples:

    ``` ruby
    irregular 'octopus', 'octopi'
    irregular 'person', 'people'
    ```
- name: Padrino::Inflections.plural
  id: padrino/inflections#plural-class_method
  summary: Specifies a new pluralization rule and its replacement
  belongs_to: Padrino::Inflections
  description: |-
    ### .plural(rule, replacement) ⇒ Object

    Specifies a new pluralization rule and its replacement. The rule can either be a string or a regular expression. The replacement should always be a string that may include references to the matched data from the rule.

    Example:

    ``` ruby
    plural(/(x|ch|ss|sh)$/i, '\1es')
    ```
- name: Padrino::Inflections.plurals
  id: padrino/inflections#plurals-class_method
  summary: Array of two element arrays, first containing a regex, and the second containing a substitution pattern, used for plurization
  belongs_to: Padrino::Inflections
  description: |-
    ### .plurals ⇒ Object (readonly)

    Array of two element arrays, first containing a regex, and the second containing a substitution pattern, used for plurization.
- name: Padrino::Inflections.singular
  id: padrino/inflections#singular-class_method
  summary: Specifies a new singularization rule and its replacement
  belongs_to: Padrino::Inflections
  description: |-
    ### .singular(rule, replacement) ⇒ Object

    Specifies a new singularization rule and its replacement. The rule can either be a string or a regular expression. The replacement should always be a string that may include references to the matched data from the rule.

    Example:

    ``` ruby
    singular(/([^aeiouy]|qu)ies$/i, '\1y')
    ```
- name: Padrino::Inflections.singulars
  id: padrino/inflections#singulars-class_method
  summary: Array of two element arrays, first containing a regex, and the second containing a substitution pattern, used for singularization
  belongs_to: Padrino::Inflections
  description: |-
    ### .singulars ⇒ Object (readonly)

    Array of two element arrays, first containing a regex, and the second containing a substitution pattern, used for singularization.
- name: Padrino::Inflections.uncountable
  id: padrino/inflections#uncountable-class_method
  summary: Add uncountable words that shouldn't be attempted inflected
  belongs_to: Padrino::Inflections
  description: |-
    ### .uncountable(\*words) ⇒ Object

    Add uncountable words that shouldn't be attempted inflected.

    Examples:

    ``` ruby
    uncountable "money"
    uncountable "money", "information"
    uncountable %w( money information rice )
    ```

    ## Instance Method Details
- name: Padrino::Inflections.uncountables
  id: padrino/inflections#uncountables-class_method
  summary: null
  belongs_to: Padrino::Inflections
  description: |-
    ### .uncountables ⇒ Object (readonly)

    Array of strings for words were the singular form is the same as the plural form

    ## Class Method Details
- name: Padrino::Loader
  id: padrino/loader
  summary: Hooks to be called after a load/reload
  description: "# Module: Padrino::Loader\n\nIncluded in:  \n[Padrino](../padrino \"Padrino (module)\")\n\n## Instance Method Summary\n\n- [`#`**`after_load`**` { ... } ⇒ Array<Proc>`](loader#after_load-instance_method \"#after_load (instance method)\") Hooks to be called after a load/reload.\n- [`#`**`before_load`**` { ... } ⇒ Array<Proc>`](loader#before_load-instance_method \"#before_load (instance method)\") Hooks to be called before a load/reload.\n- [`#`**`called_from`**` ⇒ Object`](loader#called_from-instance_method \"#called_from (instance method)\") This adds the ability to instantiate load! after [Application](application \"Padrino::Application (class)\") definition.\n- [`#`**`clear!`**` ⇒ NilClass`](loader#clear!-instance_method \"#clear! (instance method)\") Clear the padrino env.\n- [`#`**`dependency_paths`**` ⇒ Array<String>`](loader#dependency_paths-instance_method \"#dependency_paths (instance method)\") Returns default list of path globs to load as dependencies.\n- [`#`**`load!`**` ⇒ Boolean`](loader#load!-instance_method \"#load! (instance method)\") Requires necessary dependencies as well as application files from root lib and models.\n- [`#`**`loaded?`**` ⇒ Boolean`](loader#loaded%3F-instance_method \"#loaded? (instance method)\") Determines whether Padrino was loaded with load!.\n- [`#`**`precompile_all_routes!`**` ⇒ Object`](loader#precompile_all_routes!-instance_method \"#precompile_all_routes! (instance method)\") Precompiles all routes if :precompile_routes is set to true.\n- [`#`**`reload!`**` ⇒ Object`](loader#reload!-instance_method \"#reload! (instance method)\") Method for reloading required applications and their files.\n- [`#`**`require_dependencies`**`(*paths) ⇒ Object`](loader#require_dependencies-instance_method \"#require_dependencies (instance method)\") Attempts to require all dependency libs that we need.\n\n## Instance Method Details\n\n### \\#after_load { ... } ⇒ Array\\<Proc\\>\n\nHooks to be called after a load/reload.\n\n#### Examples:\n\n``` ruby\nafter_load do\n  DataMapper.finalize\nend\n```\n\n#### Yields:\n\n- The given block will be called after Padrino was loaded/reloaded.\n\n#### Returns:\n\n- (`Array<Proc>`) — The load/reload hooks.\n\n### \\#before_load { ... } ⇒ Array\\<Proc\\>\n\nHooks to be called before a load/reload.\n\n#### Examples:\n\n``` ruby\nbefore_load do\n  pre_initialize_something\nend\n```\n\n#### Yields:\n\n- The given block will be called before Padrino was loaded/reloaded.\n\n#### Returns:\n\n- (`Array<Proc>`) — The load/reload before hooks.\n\n### \\#called_from ⇒ Object\n\nThis adds the ability to instantiate Padrino.load! after [Application](application \"Padrino::Application (class)\") definition.\n\n### \\#clear! ⇒ NilClass\n\nClear the padrino env.\n\n#### Returns:\n\n- (`NilClass`)\n\n### \\#dependency_paths ⇒ Array\\<String\\>\n\nReturns default list of path globs to load as dependencies. Appends custom dependency patterns to the be loaded for Padrino.\n\n#### Examples:\n\n``` ruby\nPadrino.dependency_paths << \"#{Padrino.root}/uploaders/*.rb\"\n```\n\n#### Returns:\n\n- (`Array<`[`String`](../string \"String (class)\")`>`) — The dependencey paths.\n\n### \\#load! ⇒ Boolean\n\nRequires necessary dependencies as well as application files from root lib and models.\n\n#### Returns:\n\n- (`Boolean`) — returns true if Padrino is not already bootstraped otherwise else.\n\n### \\#loaded? ⇒ Boolean\n\nDetermines whether Padrino was loaded with Padrino.load!.\n\n#### Returns:\n\n- (`Boolean`) — Specifies whether Padrino was loaded.\n\n### \\#precompile_all_routes! ⇒ Object\n\nPrecompiles all routes if :precompile_routes is set to true\n\n### \\#reload! ⇒ Object\n\nMethod for reloading required applications and their files.\n\n### \\#require_dependencies(\\*paths) ⇒ Object\n\nAttempts to require all dependency libs that we need. If you use this method we can perform correctly a Padrino.reload! Another good thing that this method are dependency check, for example:\n\n``` ruby\n# models\n#  \\-- a.rb => require something of b.rb\n#  \\-- b.rb\n```\n\nIn the example above if we do:\n\n``` ruby\nDir[\"/models/*.rb\"].each { |r| require r }\n```\n\nWe get an error, because we try to require first `a.rb` that need *something* of `b.rb`.\n\nWith this method we don't have this problem.\n\n#### Examples:\n\nFor require all our app libs we need to do:\n\n``` ruby\nrequire_dependencies(\"#{Padrino.root}/lib/**/*.rb\")\n```\n\n#### Parameters:\n\n- `paths` (`Array<`[`String`](../string \"String (class)\")`>`) — The paths to require.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Loader](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Loader)"
- name: Padrino::Loader#after_load
  id: padrino/loader#after_load-instance_method
  summary: Hooks to be called after a load/reload
  belongs_to: Padrino::Loader
  description: |-
    ### \#after_load { ... } ⇒ Array\<Proc\>

    Hooks to be called after a load/reload.

    #### Examples:

    ``` ruby
    after_load do
      DataMapper.finalize
    end
    ```

    #### Yields:

    - The given block will be called after Padrino was loaded/reloaded.

    #### Returns:

    - (`Array<Proc>`) — The load/reload hooks.
- name: Padrino::Loader#before_load
  id: padrino/loader#before_load-instance_method
  summary: Hooks to be called before a load/reload
  belongs_to: Padrino::Loader
  description: |-
    ### \#before_load { ... } ⇒ Array\<Proc\>

    Hooks to be called before a load/reload.

    #### Examples:

    ``` ruby
    before_load do
      pre_initialize_something
    end
    ```

    #### Yields:

    - The given block will be called before Padrino was loaded/reloaded.

    #### Returns:

    - (`Array<Proc>`) — The load/reload before hooks.
- name: Padrino::Loader#called_from
  id: padrino/loader#called_from-instance_method
  summary: This adds the ability to instantiate Padrino.load! after Application definition
  belongs_to: Padrino::Loader
  description: |-
    ### \#called_from ⇒ Object

    This adds the ability to instantiate Padrino.load! after [Application](application "Padrino::Application (class)") definition.
- name: Padrino::Loader#clear!
  id: padrino/loader#clear!-instance_method
  summary: Clear the padrino env
  belongs_to: Padrino::Loader
  description: |-
    ### \#clear! ⇒ NilClass

    Clear the padrino env.

    #### Returns:

    - (`NilClass`)
- name: Padrino::Loader#dependency_paths
  id: padrino/loader#dependency_paths-instance_method
  summary: Returns default list of path globs to load as dependencies
  belongs_to: Padrino::Loader
  description: |-
    ### \#dependency_paths ⇒ Array\<String\>

    Returns default list of path globs to load as dependencies. Appends custom dependency patterns to the be loaded for Padrino.

    #### Examples:

    ``` ruby
    Padrino.dependency_paths << "#{Padrino.root}/uploaders/*.rb"
    ```

    #### Returns:

    - (`Array<`[`String`](../string "String (class)")`>`) — The dependencey paths.
- name: Padrino::Loader#load!
  id: padrino/loader#load!-instance_method
  summary: Requires necessary dependencies as well as application files from root lib and models
  belongs_to: Padrino::Loader
  description: |-
    ### \#load! ⇒ Boolean

    Requires necessary dependencies as well as application files from root lib and models.

    #### Returns:

    - (`Boolean`) — returns true if Padrino is not already bootstraped otherwise else.
- name: Padrino::Loader#loaded?
  id: padrino/loader#loaded?-instance_method
  summary: null
  belongs_to: Padrino::Loader
  description: |-
    ### \#loaded? ⇒ Boolean

    Determines whether Padrino was loaded with Padrino.load!.

    #### Returns:

    - (`Boolean`) — Specifies whether Padrino was loaded.
- name: Padrino::Loader#precompile_all_routes!
  id: padrino/loader#precompile_all_routes!-instance_method
  summary: null
  belongs_to: Padrino::Loader
  description: |-
    ### \#precompile_all_routes! ⇒ Object

    Precompiles all routes if :precompile_routes is set to true
- name: Padrino::Loader#reload!
  id: padrino/loader#reload!-instance_method
  summary: Method for reloading required applications and their files
  belongs_to: Padrino::Loader
  description: |-
    ### \#reload! ⇒ Object

    Method for reloading required applications and their files.
- name: Padrino::Loader#require_dependencies
  id: padrino/loader#require_dependencies-instance_method
  summary: Attempts to require all dependency libs that we need
  belongs_to: Padrino::Loader
  description: "### \\#require_dependencies(\\*paths) ⇒ Object\n\nAttempts to require all dependency libs that we need. If you use this method we can perform correctly a Padrino.reload! Another good thing that this method are dependency check, for example:\n\n``` ruby\n# models\n#  \\-- a.rb => require something of b.rb\n#  \\-- b.rb\n```\n\nIn the example above if we do:\n\n``` ruby\nDir[\"/models/*.rb\"].each { |r| require r }\n```\n\nWe get an error, because we try to require first `a.rb` that need *something* of `b.rb`.\n\nWith this method we don't have this problem.\n\n#### Examples:\n\nFor require all our app libs we need to do:\n\n``` ruby\nrequire_dependencies(\"#{Padrino.root}/lib/**/*.rb\")\n```\n\n#### Parameters:\n\n- `paths`(`Array<`[`String`](../string \"String (class)\")`>`) — The paths to require.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Loader](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Loader)"
- name: Padrino::Logger
  id: padrino/logger
  summary: Padrinos internal logger, using all of Padrino log extensions
  description: "# Class: Padrino::Logger\n\nInherits:  \n[Object](../object \"Object (class)\")\n\n- [Object](../object \"Object (class)\")\n- Padrino::Logger\n\nIncludes:  \n[Extensions](logger/extensions \"Padrino::Logger::Extensions (module)\")\n\n## Overview\n\nPadrinos internal logger, using all of Padrino log extensions.\n\n## Defined Under Namespace\n\n**Modules:** [Colorize](logger/colorize \"Padrino::Logger::Colorize (module)\"), [Extensions](logger/extensions \"Padrino::Logger::Extensions (module)\") **Classes:** [Rack](logger/rack \"Padrino::Logger::Rack (class)\")\n\n## Constant Summary [collapse](#)\n\nLevels =\n\nRuby (standard) logger levels:\n\n:fatal  \nAn not handleable error that results in a program crash\n\n:error  \nA handleable error condition\n\n:warn  \nA warning\n\n:info  \ngeneric (useful) information about system operation\n\n:debug  \nlow-level information for developers\n\n:devel  \nDevelopment-related information that is unnecessary in debug mode\n\n``` ruby\n{\n  :fatal =>  4,\n  :error =>  3,\n  :warn  =>  2,\n  :info  =>  1,\n  :debug =>  0,\n  :devel => -1,\n}\n```\n\nConfig =\n\nConfiguration for a given environment, possible options are:\n\n:log_level  \nOnce of \\[:fatal, :error, :warn, :info, :debug\\]\n\n:stream  \nOnce of \\[:to_file, :null, :stdout, :stderr\\] our your custom stream\n\n:log_path  \nDefines log file path or directory if :stream is :to_file\n\n``` ruby\nIf it's a file, its location is created by mkdir_p.\nIf it's a directory, it must exist. In this case log name is '<env>.log'\n```\n\n:log_level  \nThe log level from, e.g. :fatal or :info. Defaults to :warn in the production environment and :debug otherwise.\n\n:auto_flush  \nWhether the log should automatically flush after new messages are added. Defaults to true.\n\n:format_datetime  \nFormat of datetime. Defaults to: “%d/%b/%Y %H:%M:%S”\n\n:format_message  \nFormat of message. Defaults to: “”%s - - \\[%s\\] \"%s\"“”\n\n:log_static  \nWhether or not to show log messages for static files. Defaults to: false\n\n:colorize_logging  \nWhether or not to colorize log messages. Defaults to: true\n\nDefaults are:\n\n``` ruby\n:production  => { :log_level => :warn, :stream => :to_file }\n:development => { :log_level => :debug, :stream => :stdout }\n:test        => { :log_level => :fatal, :stream => :null }\n```\n\nIn some cases, configuring the loggers before loading the framework is necessary. You can do so by setting PADRINO_LOGGER:\n\n``` ruby\nPADRINO_LOGGER = { :staging => { :log_level => :debug, :stream => :to_file }}\n```\n\n#### Examples:\n\n``` ruby\nPadrino::Logger::Config[:development] = { :log_level => :debug, :stream => :to_file }\n# or you can edit our defaults\nPadrino::Logger::Config[:development][:log_level] = :error\n# or change log file path\nPadrino::Logger::Config[:development][:log_path] = 'logs/app-development.txt'\n# or change log file directory\nPadrino::Logger::Config[:development][:log_path] = '/var/logs/padrino'\n# or you can use your stream\nPadrino::Logger::Config[:development][:stream] = StringIO.new\n```\n\n``` ruby\n{\n  :production  => { :log_level => :warn,  :stream => :to_file },\n  :development => { :log_level => :debug, :stream => :stdout, :format_datetime => '' },\n  :test        => { :log_level => :debug, :stream => :null }\n}\n```\n\n@@mutex =\n\n``` ruby\nMutex.new\n```\n\n### Constants included from Extensions\n\n[Extensions::SOURCE_LOCATION_REGEXP](logger/extensions#SOURCE_LOCATION_REGEXP-constant \"Padrino::Logger::Extensions::SOURCE_LOCATION_REGEXP (constant)\")\n\n## Instance Attribute Summary\n\n- [`#`**`auto_flush`**` ⇒ Object`](logger#auto_flush-instance_method \"#auto_flush (instance method)\") Returns the value of attribute auto_flush.\n- [`#`**`buffer`**` ⇒ Object`](logger#buffer-instance_method \"#buffer (instance method)\") readonly Returns the value of attribute buffer.\n- [`#`**`colorize_logging`**` ⇒ Object`](logger#colorize_logging-instance_method \"#colorize_logging (instance method)\") readonly Returns the value of attribute colorize_logging.\n- [`#`**`init_args`**` ⇒ Object`](logger#init_args-instance_method \"#init_args (instance method)\") readonly Returns the value of attribute init_args.\n- [`#`**`level`**` ⇒ Object`](logger#level-instance_method \"#level (instance method)\") Returns the value of attribute level.\n- [`#`**`log`**` ⇒ Object`](logger#log-instance_method \"#log (instance method)\") readonly Returns the value of attribute log.\n- [`#`**`log_static`**` ⇒ Object`](logger#log_static-instance_method \"#log_static (instance method)\") Returns the value of attribute log_static.\n\n## Class Method Summary\n\n- [`.`**`logger`**` ⇒ Object`](logger#logger-class_method \"logger (class method)\")\n- [`.`**`logger=`**`(logger) ⇒ Object`](logger#logger=-class_method \"logger= (class method)\")\n- [`.`**`setup!`**` ⇒ Padrino::Logger`](logger#setup!-class_method \"setup! (class method)\") Setup a new logger.\n\n## Instance Method Summary\n\n- [`#`**`<<`**`(message = nil) ⇒ Object`](# \"#<< (instance method)\")` (also: #write)` Directly append message to the log.\n- [`#`**`add`**`(level, message = nil) ⇒ Object`](logger#add-instance_method \"#add (instance method)\") Adds a message to the log - for compatibility with other loggers.\n- [`#`**`close`**` ⇒ NilClass`](logger#close-instance_method \"#close (instance method)\") Close and remove the current log object.\n- [`#`**`flush`**` ⇒ Object`](logger#flush-instance_method \"#flush (instance method)\") Flush the entire buffer to the log object.\n- [`#`**`format`**`(message, level) ⇒ Object`](logger#format-instance_method \"#format (instance method)\")\n- [`#`**`initialize`**`(options = {}) ⇒ Logger`](logger#initialize-instance_method \"#initialize (instance method)\") constructor To initialize the logger you create a new object, proxies to set_log.\n- [`#`**`source_location?`**` ⇒ Boolean`](logger#source_location%3F-instance_method \"#source_location? (instance method)\")\n\n### Methods included from Extensions\n\n[\\#bench](logger/extensions#bench-instance_method \"Padrino::Logger::Extensions#bench (method)\"), [\\#colorize](logger/extensions#colorize-instance_method \"Padrino::Logger::Extensions#colorize (method)\"), [\\#colorize!](logger/extensions#colorize!-instance_method \"Padrino::Logger::Extensions#colorize! (method)\"), [\\#enable_source_location?](logger/extensions#enable_source_location%3F-instance_method \"Padrino::Logger::Extensions#enable_source_location? (method)\"), [\\#exception](logger/extensions#exception-instance_method \"Padrino::Logger::Extensions#exception (method)\"), [\\#name](logger/extensions#name-instance_method \"Padrino::Logger::Extensions#name (method)\"), [\\#push](logger/extensions#push-instance_method \"Padrino::Logger::Extensions#push (method)\"), [\\#resolve_source_location](logger/extensions#resolve_source_location-instance_method \"Padrino::Logger::Extensions#resolve_source_location (method)\"), [\\#stylized_level](logger/extensions#stylized_level-instance_method \"Padrino::Logger::Extensions#stylized_level (method)\")\n\n## Constructor Details\n\n### \\#initialize(options = {}) ⇒ Logger\n\nTo initialize the logger you create a new object, proxies to set_log.\n\n#### Parameters:\n\n- `options` (`Hash`) *(defaults to: `{}`)*\n\n#### Options Hash (`options`):\n\n- `:stream` (`Symbol`) — default: `$stdout` — Either an IO object or a name of a logfile. Defaults to $stdout\n- `:log_level` (`Symbol`) — default: `:production in the production environment and :debug otherwise` — The log level from, e.g. :fatal or :info.\n- `:auto_flush` (`Symbol`) — default: `true` — Whether the log should automatically flush after new messages are added. Defaults to true.\n- `:format_datetime` (`Symbol`) — default: `\" [%d/%b/%Y %H:%M:%S] \"` — Format of datetime.\n- `:format_message` (`Symbol`) — default: `\"%s -%s%s\"` — Format of message.\n- `:log_static` (`Symbol`) — default: `false` — Whether or not to show log messages for static files.\n- `:colorize_logging` (`Symbol`) — default: `true` — Whether or not to colorize log messages. Defaults to: true.\n- `:sanitize_encoding` (`Symbol`) — default: `false` — Logger will replace undefined or broken characters with “uFFFD” for Unicode and “?” otherwise. Can be an encoding, false or true. If it's true, logger sanitizes to Encoding.default_external.\n\n## Instance Attribute Details\n\n### \\#auto_flush ⇒ Object\n\nReturns the value of attribute auto_flush\n\n### \\#buffer ⇒ Object (readonly)\n\nReturns the value of attribute buffer\n\n### \\#colorize_logging ⇒ Object (readonly)\n\nReturns the value of attribute colorize_logging\n\n### \\#init_args ⇒ Object (readonly)\n\nReturns the value of attribute init_args\n\n### \\#level ⇒ Object\n\nReturns the value of attribute level\n\n### \\#log ⇒ Object (readonly)\n\nReturns the value of attribute log\n\n### \\#log_static ⇒ Object\n\nReturns the value of attribute log_static\n\n## Class Method Details\n\n### .logger ⇒ Object\n\n### .logger=(logger) ⇒ Object\n\n### .setup! ⇒ Padrino::Logger\n\nSetup a new logger.\n\n#### Returns:\n\n- ([`Padrino::Logger`](logger \"Padrino::Logger (class)\")) — A [Padrino::Logger](logger \"Padrino::Logger (class)\") instance\n\n## Instance Method Details\n\n### \\#\\<\\<(message = nil) ⇒ Object Also known as: write\n\nDirectly append message to the log.\n\n#### Parameters:\n\n- `message` ([`String`](../string \"String (class)\")) *(defaults to: `nil`)* — The message\n\n### \\#add(level, message = nil) ⇒ Object\n\nAdds a message to the log - for compatibility with other loggers.\n\n### \\#close ⇒ NilClass\n\nClose and remove the current log object.\n\n#### Returns:\n\n- (`NilClass`)\n\n### \\#flush ⇒ Object\n\nFlush the entire buffer to the log object.\n\n### \\#format(message, level) ⇒ Object\n\n### \\#source_location? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger)"
- name: Padrino::Logger#<<
  id: padrino/logger#<<-instance_method
  summary: Directly append message to the log
  belongs_to: Padrino::Logger
  description: |-
    ### \#\<\<(message = nil) ⇒ Object Also known as: write

    Directly append message to the log.

    #### Parameters:

    - `message`([`String`](../string "String (class)"))*(defaults to: `nil`)* — The message
- name: Padrino::Logger#add
  id: padrino/logger#add-instance_method
  summary: Adds a message to the log - for compatibility with other loggers
  belongs_to: Padrino::Logger
  description: |-
    ### \#add(level, message = nil) ⇒ Object

    Adds a message to the log - for compatibility with other loggers.
- name: Padrino::Logger#auto_flush
  id: padrino/logger#auto_flush-instance_method
  summary: null
  belongs_to: Padrino::Logger
  description: |-
    ### \#auto_flush ⇒ Object

    Returns the value of attribute auto_flush
- name: Padrino::Logger#buffer
  id: padrino/logger#buffer-instance_method
  summary: null
  belongs_to: Padrino::Logger
  description: |-
    ### \#buffer ⇒ Object (readonly)

    Returns the value of attribute buffer
- name: Padrino::Logger#close
  id: padrino/logger#close-instance_method
  summary: Close and remove the current log object
  belongs_to: Padrino::Logger
  description: |-
    ### \#close ⇒ NilClass

    Close and remove the current log object.

    #### Returns:

    - (`NilClass`)
- name: Padrino::Logger#colorize_logging
  id: padrino/logger#colorize_logging-instance_method
  summary: null
  belongs_to: Padrino::Logger
  description: |-
    ### \#colorize_logging ⇒ Object (readonly)

    Returns the value of attribute colorize_logging
- name: Padrino::Logger#flush
  id: padrino/logger#flush-instance_method
  summary: Flush the entire buffer to the log object
  belongs_to: Padrino::Logger
  description: |-
    ### \#flush ⇒ Object

    Flush the entire buffer to the log object.
- name: Padrino::Logger#format
  id: padrino/logger#format-instance_method
  summary: null
  belongs_to: Padrino::Logger
  description: '### \#format(message, level) ⇒ Object'
- name: Padrino::Logger#init_args
  id: padrino/logger#init_args-instance_method
  summary: null
  belongs_to: Padrino::Logger
  description: |-
    ### \#init_args ⇒ Object (readonly)

    Returns the value of attribute init_args
- name: Padrino::Logger#initialize
  id: padrino/logger#initialize-instance_method
  summary: To initialize the logger you create a new object, proxies to set_log
  belongs_to: Padrino::Logger
  description: |-
    ### \#initialize(options = {}) ⇒ Logger

    To initialize the logger you create a new object, proxies to set_log.

    #### Parameters:

    - `options` (`Hash`) *(defaults to: `{}`)*

    #### Options Hash (`options`):

    - `:stream`(`Symbol`) — default: `$stdout` — Either an IO object or a name of a logfile. Defaults to $stdout
    - `:log_level`(`Symbol`) — default: `:production in the production environment and :debug otherwise` — The log level from, e.g. :fatal or :info.
    - `:auto_flush`(`Symbol`) — default: `true` — Whether the log should automatically flush after new messages are added. Defaults to true.
    - `:format_datetime`(`Symbol`) — default: `" [%d/%b/%Y %H:%M:%S] "` — Format of datetime.
    - `:format_message`(`Symbol`) — default: `"%s -%s%s"` — Format of message.
    - `:log_static`(`Symbol`) — default: `false` — Whether or not to show log messages for static files.
    - `:colorize_logging`(`Symbol`) — default: `true` — Whether or not to colorize log messages. Defaults to: true.
    - `:sanitize_encoding`(`Symbol`) — default: `false` — Logger will replace undefined or broken characters with “uFFFD” for Unicode and “?” otherwise. Can be an encoding, false or true. If it's true, logger sanitizes to Encoding.default_external.

    ## Instance Attribute Details
- name: Padrino::Logger#level
  id: padrino/logger#level-instance_method
  summary: null
  belongs_to: Padrino::Logger
  description: |-
    ### \#level ⇒ Object

    Returns the value of attribute level
- name: Padrino::Logger#log
  id: padrino/logger#log-instance_method
  summary: null
  belongs_to: Padrino::Logger
  description: |-
    ### \#log ⇒ Object (readonly)

    Returns the value of attribute log
- name: Padrino::Logger#log_static
  id: padrino/logger#log_static-instance_method
  summary: null
  belongs_to: Padrino::Logger
  description: |-
    ### \#log_static ⇒ Object

    Returns the value of attribute log_static

    ## Class Method Details
- name: Padrino::Logger#source_location?
  id: padrino/logger#source_location?-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Logger
  description: "### \\#source_location? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger)"
- name: Padrino::Logger.logger
  id: padrino/logger#logger-class_method
  summary: null
  belongs_to: Padrino::Logger
  description: '### .logger ⇒ Object'
- name: Padrino::Logger.logger=
  id: padrino/logger#logger=-class_method
  summary: null
  belongs_to: Padrino::Logger
  description: '### .logger=(logger) ⇒ Object'
- name: Padrino::Logger.setup!
  id: padrino/logger#setup!-class_method
  summary: Setup a new logger
  belongs_to: Padrino::Logger
  description: |-
    ### .setup! ⇒ Padrino::Logger

    Setup a new logger.

    #### Returns:

    - ([`Padrino::Logger`](logger "Padrino::Logger (class)")) — A [Padrino::Logger](logger "Padrino::Logger (class)") instance

    ## Instance Method Details
- name: Padrino::Logger::Colorize
  id: padrino/logger/colorize
  summary: Colorize our level
  description: "# Module: Padrino::Logger::Colorize\n\n## Constant Summary [collapse](#)\n\nColoredLevels =\n\nColors for levels\n\n``` ruby\n{\n  :fatal => [:bold, :red],\n  :error => [:default, :red],\n  :warn  => [:default, :yellow],\n  :info  => [:default, :green],\n  :debug => [:default, :cyan],\n  :devel => [:default, :magenta]\n}\n```\n\n## Instance Method Summary\n\n- [`#`**`colorize`**`(string, *colors) ⇒ Object`](colorize#colorize-instance_method \"#colorize (instance method)\") Colorize our level.\n- [`#`**`stylized_level`**`(level) ⇒ Object`](colorize#stylized_level-instance_method \"#stylized_level (instance method)\")\n\n## Instance Method Details\n\n### \\#colorize(string, \\*colors) ⇒ Object\n\nColorize our level.\n\n#### Parameters:\n\n- `level` ([`String`](../../string \"String (class)\"), `Symbol`)\n\n#### See Also:\n\n- Padrino::Logging::ColorizedLogger::ColoredLevels\n\n### \\#stylized_level(level) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Colorize](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Colorize)"
- name: Padrino::Logger::Colorize#colorize
  id: padrino/logger/colorize#colorize-instance_method
  summary: Colorize our level
  belongs_to: Padrino::Logger::Colorize
  description: |-
    ### \#colorize(string, \*colors) ⇒ Object

    Colorize our level.

    #### Parameters:

    - `level` ([`String`](../../string "String (class)"), `Symbol`)

    #### See Also:

    - Padrino::Logging::ColorizedLogger::ColoredLevels
- name: Padrino::Logger::Colorize#stylized_level
  id: padrino/logger/colorize#stylized_level-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Logger::Colorize
  description: "### \\#stylized_level(level) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Colorize](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Colorize)"
- name: Padrino::Logger::Extensions
  id: padrino/logger/extensions
  summary: Append a to development logger a given action with time
  description: "# Module: Padrino::Logger::Extensions\n\nIncluded in:  \n[Padrino::Logger](../logger \"Padrino::Logger (class)\")\n\n## Constant Summary [collapse](#)\n\nSOURCE_LOCATION_REGEXP =  \n``` ruby\n/^(.*?):(\\d+?)(?::in `.+?')?$/.freeze\n```\n\n## Instance Method Summary\n\n- [`#`**`bench`**`(action, began_at, message, level = :debug, color = :yellow) ⇒ Object`](extensions#bench-instance_method \"#bench (instance method)\") Append a to development logger a given action with time.\n- [`#`**`colorize`**`(string, *colors) ⇒ Object`](extensions#colorize-instance_method \"#colorize (instance method)\") Colorizes a string for colored console output.\n- [`#`**`colorize!`**` ⇒ Object`](extensions#colorize!-instance_method \"#colorize! (instance method)\") Turns a logger with LoggingExtensions into a logger with colorized output.\n- [`#`**`enable_source_location?`**` ⇒ Boolean`](extensions#enable_source_location%3F-instance_method \"#enable_source_location? (instance method)\") Returns true if :source_location is set to true.\n- [`#`**`exception`**`(boom, verbosity = :long, level = :error) ⇒ Object`](extensions#exception-instance_method \"#exception (instance method)\") Logs an exception.\n- [`#`**`format`**`(message, level) ⇒ Object`](extensions#format-instance_method \"#format (instance method)\") Formats the log message.\n- [`#`**`name`**` ⇒ Object`](extensions#name-instance_method \"#name (instance method)\") Generate the logging methods for [Padrino.logger](../../padrino#logger-class_method \"Padrino.logger (method)\") for each log level.\n- [`#`**`push`**`(message = nil, level = nil) ⇒ Object`](extensions#push-instance_method \"#push (instance method)\") Appends a message to the log.\n- [`#`**`resolve_source_location`**`(message) ⇒ Object`](extensions#resolve_source_location-instance_method \"#resolve_source_location (instance method)\") Resolves a filename and line-number from caller.\n- [`#`**`stylized_level`**`(level) ⇒ Object`](extensions#stylized_level-instance_method \"#stylized_level (instance method)\") The debug level, with some style added.\n\n## Instance Method Details\n\n### \\#bench(action, began_at, message, level = :debug, color = :yellow) ⇒ Object\n\nAppend a to development logger a given action with time.\n\n#### Examples:\n\n``` ruby\nlogger.bench 'GET', started_at, '/blog/categories'\n# => DEBUG - GET (0.0056s) - /blog/categories\n```\n\n#### Parameters:\n\n- `action` (`string`) — The action.\n- `time` (`float`) — Time duration for the given action.\n- `string` (`message`) — The message that you want to log.\n\n### \\#colorize(string, \\*colors) ⇒ Object\n\nColorizes a string for colored console output. This is a noop and can be reimplemented to colorize the string as needed.\n\n#### Parameters:\n\n- `The` (`string`) — string to be colorized.\n- `The` (`Array<Symbol>`) — colors to use. Should be applied in the order given.\n\n#### See Also:\n\n- ColorizedLogger\n\n### \\#colorize! ⇒ Object\n\nTurns a logger with LoggingExtensions into a logger with colorized output.\n\n#### Examples:\n\n``` ruby\nPadrino.logger = Logger.new($stdout)\nPadrino.logger.colorize!\nPadrino.logger.debug(\"Fancy Padrino debug string\")\n```\n\n### \\#enable_source_location? ⇒ Boolean\n\nReturns true if :source_location is set to true.\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#exception(boom, verbosity = :long, level = :error) ⇒ Object\n\nLogs an exception.\n\n#### Examples:\n\n``` ruby\nPadrino.logger.exception e\nPadrino.logger.exception(e, :short)\n```\n\n#### Parameters:\n\n- `exception` (`Exception`) — The exception to log\n- `verbosity` (`Symbol`) *(defaults to: `:long`)* — :short or :long, default is :long\n\n### \\#format(message, level) ⇒ Object\n\nFormats the log message. This method is a noop and should be implemented by other logger components such as [Padrino::Logger](../logger \"Padrino::Logger (class)\").\n\n#### Parameters:\n\n- `message` ([`String`](../../string \"String (class)\")) — The message to format.\n- `level` ([`String`](../../string \"String (class)\"), `Symbol`) — The log level, one of :debug, :warn …\n\n### \\#name ⇒ Object\n\nGenerate the logging methods for [Padrino.logger](../../padrino#logger-class_method \"Padrino.logger (method)\") for each log level.\n\n### \\#push(message = nil, level = nil) ⇒ Object\n\nAppends a message to the log. The methods yield to an optional block and the output of this block will be appended to the message.\n\n#### Parameters:\n\n- `message` ([`String`](../../string \"String (class)\")) *(defaults to: `nil`)* — The message that you want write to your stream.\n- `level` ([`String`](../../string \"String (class)\")) *(defaults to: `nil`)* — The level one of :debug, :warn etc. …\n\n### \\#resolve_source_location(message) ⇒ Object\n\nResolves a filename and line-number from caller.\n\n### \\#stylized_level(level) ⇒ Object\n\nThe debug level, with some style added. May be reimplemented.\n\n#### Examples:\n\n``` ruby\nstylized_level(:debug) => DEBUG\n```\n\n#### Parameters:\n\n- `level` ([`String`](../../string \"String (class)\"), `Symbol`) — The log level.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Extensions](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Extensions)"
- name: Padrino::Logger::Extensions#bench
  id: padrino/logger/extensions#bench-instance_method
  summary: Append a to development logger a given action with time
  belongs_to: Padrino::Logger::Extensions
  description: |-
    ### \#bench(action, began_at, message, level = :debug, color = :yellow) ⇒ Object

    Append a to development logger a given action with time.

    #### Examples:

    ``` ruby
    logger.bench 'GET', started_at, '/blog/categories'
    # => DEBUG - GET (0.0056s) - /blog/categories
    ```

    #### Parameters:

    - `action`(`string`) — The action.
    - `time`(`float`) — Time duration for the given action.
    - `string`(`message`) — The message that you want to log.
- name: Padrino::Logger::Extensions#colorize
  id: padrino/logger/extensions#colorize-instance_method
  summary: Colorizes a string for colored console output
  belongs_to: Padrino::Logger::Extensions
  description: |-
    ### \#colorize(string, \*colors) ⇒ Object

    Colorizes a string for colored console output. This is a noop and can be reimplemented to colorize the string as needed.

    #### Parameters:

    - `The`(`string`) — string to be colorized.
    - `The`(`Array<Symbol>`) — colors to use. Should be applied in the order given.

    #### See Also:

    - ColorizedLogger
- name: Padrino::Logger::Extensions#colorize!
  id: padrino/logger/extensions#colorize!-instance_method
  summary: Turns a logger with LoggingExtensions into a logger with colorized output
  belongs_to: Padrino::Logger::Extensions
  description: |-
    ### \#colorize! ⇒ Object

    Turns a logger with LoggingExtensions into a logger with colorized output.

    #### Examples:

    ``` ruby
    Padrino.logger = Logger.new($stdout)
    Padrino.logger.colorize!
    Padrino.logger.debug("Fancy Padrino debug string")
    ```
- name: Padrino::Logger::Extensions#enable_source_location?
  id: padrino/logger/extensions#enable_source_location?-instance_method
  summary: Returns true if :source_location is set to true
  belongs_to: Padrino::Logger::Extensions
  description: |-
    ### \#enable_source_location? ⇒ Boolean

    Returns true if :source_location is set to true.

    #### Returns:

    - (`Boolean`)
- name: Padrino::Logger::Extensions#exception
  id: padrino/logger/extensions#exception-instance_method
  summary: Logs an exception
  belongs_to: Padrino::Logger::Extensions
  description: |-
    ### \#exception(boom, verbosity = :long, level = :error) ⇒ Object

    Logs an exception.

    #### Examples:

    ``` ruby
    Padrino.logger.exception e
    Padrino.logger.exception(e, :short)
    ```

    #### Parameters:

    - `exception`(`Exception`) — The exception to log
    - `verbosity`(`Symbol`)*(defaults to: `:long`)* — :short or :long, default is :long
- name: Padrino::Logger::Extensions#format
  id: padrino/logger/extensions#format-instance_method
  summary: Formats the log message
  belongs_to: Padrino::Logger::Extensions
  description: |-
    ### \#format(message, level) ⇒ Object

    Formats the log message. This method is a noop and should be implemented by other logger components such as [Padrino::Logger](../logger "Padrino::Logger (class)").

    #### Parameters:

    - `message`([`String`](../../string "String (class)")) — The message to format.
    - `level`([`String`](../../string "String (class)"), `Symbol`) — The log level, one of :debug, :warn …
- name: Padrino::Logger::Extensions#name
  id: padrino/logger/extensions#name-instance_method
  summary: Generate the logging methods for Padrino.logger for each log level
  belongs_to: Padrino::Logger::Extensions
  description: |-
    ### \#name ⇒ Object

    Generate the logging methods for [Padrino.logger](../../padrino#logger-class_method "Padrino.logger (method)") for each log level.
- name: Padrino::Logger::Extensions#push
  id: padrino/logger/extensions#push-instance_method
  summary: Appends a message to the log
  belongs_to: Padrino::Logger::Extensions
  description: |-
    ### \#push(message = nil, level = nil) ⇒ Object

    Appends a message to the log. The methods yield to an optional block and the output of this block will be appended to the message.

    #### Parameters:

    - `message`([`String`](../../string "String (class)"))*(defaults to: `nil`)* — The message that you want write to your stream.
    - `level`([`String`](../../string "String (class)"))*(defaults to: `nil`)* — The level one of :debug, :warn etc. …
- name: Padrino::Logger::Extensions#resolve_source_location
  id: padrino/logger/extensions#resolve_source_location-instance_method
  summary: Resolves a filename and line-number from caller
  belongs_to: Padrino::Logger::Extensions
  description: |-
    ### \#resolve_source_location(message) ⇒ Object

    Resolves a filename and line-number from caller.
- name: Padrino::Logger::Extensions#stylized_level
  id: padrino/logger/extensions#stylized_level-instance_method
  summary: The debug level, with some style added
  belongs_to: Padrino::Logger::Extensions
  description: "### \\#stylized_level(level) ⇒ Object\n\nThe debug level, with some style added. May be reimplemented.\n\n#### Examples:\n\n``` ruby\nstylized_level(:debug) => DEBUG\n```\n\n#### Parameters:\n\n- `level`([`String`](../../string \"String (class)\"), `Symbol`) — The log level.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Extensions](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Extensions)"
- name: Padrino::Logger::Rack
  id: padrino/logger/rack
  summary: Padrino::Logger::Rack forwards every request to an app given, and logs a line in the Apache common log format to the logger, or rack.errors by default
  description: "# Class: Padrino::Logger::Rack\n\nInherits:  \n[Object](../../object \"Object (class)\")\n\n- [Object](../../object \"Object (class)\")\n- Padrino::Logger::Rack\n\n## Overview\n\nPadrino::Logger::Rack forwards every request to an `app` given, and logs a line in the Apache common log format to the `logger`, or rack.errors by default.\n\n## Instance Method Summary\n\n- [`#`**`call`**`(env) ⇒ Object`](rack#call-instance_method \"#call (instance method)\")\n- [`#`**`initialize`**`(app, uri_root) ⇒ Rack`](rack#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of Rack.\n\n## Constructor Details\n\n### \\#initialize(app, uri_root) ⇒ Rack\n\nReturns a new instance of Rack.\n\n## Instance Method Details\n\n### \\#call(env) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Rack](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Rack)"
- name: Padrino::Logger::Rack#call
  id: padrino/logger/rack#call-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Logger::Rack
  description: "### \\#call(env) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Rack](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Rack)"
- name: Padrino::Logger::Rack#initialize
  id: padrino/logger/rack#initialize-instance_method
  summary: Returns a new instance of Rack
  belongs_to: Padrino::Logger::Rack
  description: |-
    ### \#initialize(app, uri_root) ⇒ Rack

    Returns a new instance of Rack.

    ## Instance Method Details
- name: Padrino::Mailer
  id: padrino/mailer
  summary: This component uses the mail library to create a powerful but simple mailer within Padrino (and Sinatra)
  description: "# Module: Padrino::Mailer\n\n## Overview\n\nThis component uses the `mail` library to create a powerful but simple mailer within Padrino (and Sinatra). There is full support for using plain or html content-types as well as for file attachments.\n\nUsing the mailer in Padrino has two forms. The 'quick' method requires only use of the `email` method directly in the controller:\n\n``` ruby\n# app/controllers/session.rb\npost :create do\n  email do\n    from \"tony@reyes.com\"\n    to \"john@smith.com\"\n    subject \"Welcome!\"\n    body render('email/registered')\n  end\nend\n```\n\n## Defined Under Namespace\n\n**Modules:** [Helpers](mailer/helpers \"Padrino::Mailer::Helpers (module)\"), [Mime](mailer/mime \"Padrino::Mailer::Mime (module)\") **Classes:** [Base](mailer/base \"Padrino::Mailer::Base (class)\")\n\n## Class Method Summary\n\n- [`.`**`registered`**`(app) ⇒ Object`](mailer#registered-class_method \"registered (class method)\")` (also: included)` Registers the Padrino::Mailer helpers with the application.\n\n## Class Method Details\n\n### .registered(app) ⇒ Object Also known as: included\n\nRegisters the Padrino::Mailer helpers with the application.\n\n#### Examples:\n\n``` ruby\nrequire 'padrino-mailer'\nclass Demo < Padrino::Application\n  register Padrino::Mailer::Helpers\nend\n```\n\n#### Parameters:\n\n- `app` (`Sinatra::Application`) — The application that needs mailers.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer)"
- name: Padrino::Mailer.registered
  id: padrino/mailer#registered-class_method
  summary: Registers the Padrino::Mailer helpers with the application
  belongs_to: Padrino::Mailer
  description: "### .registered(app) ⇒ Object Also known as: included\n\nRegisters the Padrino::Mailer helpers with the application.\n\n#### Examples:\n\n``` ruby\nrequire 'padrino-mailer'\nclass Demo < Padrino::Application\n  register Padrino::Mailer::Helpers\nend\n```\n\n#### Parameters:\n\n- `app`(`Sinatra::Application`) — The application that needs mailers.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer)"
- name: Padrino::Mailer::Base
  id: padrino/mailer/base
  summary: This is the abstract class that other mailers will inherit from in order to send mail
  description: "# Class: Padrino::Mailer::Base\n\nInherits:  \n[Object](../../object \"Object (class)\")\n\n- [Object](../../object \"Object (class)\")\n- Padrino::Mailer::Base\n\n## Overview\n\nThis is the abstract class that other mailers will inherit from in order to send mail.\n\nYou can set the default delivery settings from your app through:\n\n``` ruby\nset :delivery_method, :smtp => {\n  :address         => 'smtp.yourserver.com',\n  :port            => '25',\n  :user_name       => 'user',\n  :password        => 'pass',\n  :authentication  => :plain\n}\n```\n\nor sendmail:\n\n``` ruby\nset :delivery_method, :sendmail\n```\n\nor for tests:\n\n``` ruby\nset :delivery_method, :test\n```\n\nand all delivered mail will use these settings unless otherwise specified.\n\nDefine a mailer in your application:\n\n``` ruby\n# app/mailers/sample_mailer.rb\nMyAppName.mailers :sample do\n  defaults :content_type => 'html'\n  email :registration do |name, age|\n    to      'user@domain.com'\n    from    'admin@site.com'\n    subject 'Welcome to the site!'\n    locals  :name => name\n    render  'registration'\n  end\nend\n```\n\nUse the mailer to deliver messages:\n\n``` ruby\ndeliver(:sample, :registration, \"Bob\", \"21\")\n```\n\n## Instance Attribute Summary\n\n- [`#`**`app`**` ⇒ Object`](base#app-instance_method \"#app (instance method)\") Returns the value of attribute app.\n- [`#`**`delivery_settings`**` ⇒ Object`](base#delivery_settings-instance_method \"#delivery_settings (instance method)\") Returns the value of attribute delivery_settings.\n- [`#`**`mailer_name`**` ⇒ Object`](base#mailer_name-instance_method \"#mailer_name (instance method)\") Returns the value of attribute mailer_name.\n- [`#`**`messages`**` ⇒ Object`](base#messages-instance_method \"#messages (instance method)\") Returns the value of attribute messages.\n\n## Instance Method Summary\n\n- [`#`**`defaults`**`(attributes = nil) ⇒ Object`](base#defaults-instance_method \"#defaults (instance method)\") Defines the default attributes for a message in this mailer (including app-wide defaults).\n- [`#`**`email`**`(name, &block) ⇒ Object`](base#email-instance_method \"#email (instance method)\")` (also: #message)` Defines a mailer object allowing the definition of various email messages that can be delivered.\n- [`#`**`initialize`**`(app, name, &block) ⇒ Base`](base#initialize-instance_method \"#initialize (instance method)\") constructor Constructs a `Mailer` base object with specified options.\n\n## Constructor Details\n\n### \\#initialize(app, name, &block) ⇒ Base\n\nConstructs a `Mailer` base object with specified options.\n\n#### Parameters:\n\n- `app` (`Sinatra::Application`) — The application tied to this mailer.\n- `name` (`Symbol`) — The name of this mailer.\n- `block` (`Proc`) — The `email` definitions block.\n\n#### See Also:\n\n- [Helpers::ClassMethods#mailer](helpers/classmethods#mailer-instance_method \"Padrino::Mailer::Helpers::ClassMethods#mailer (method)\")\n\n## Instance Attribute Details\n\n### \\#app ⇒ Object\n\nReturns the value of attribute app\n\n### \\#delivery_settings ⇒ Object\n\nReturns the value of attribute delivery_settings\n\n### \\#mailer_name ⇒ Object\n\nReturns the value of attribute mailer_name\n\n### \\#messages ⇒ Object\n\nReturns the value of attribute messages\n\n## Instance Method Details\n\n### \\#defaults(attributes = nil) ⇒ Object\n\nDefines the default attributes for a message in this mailer (including app-wide defaults).\n\n#### Examples:\n\n``` ruby\nmailer :alternate do\n  defaults :from => 'padrino@from.com', :to => 'padrino@to.com'\n  email(:foo) do; end\nend\n```\n\n#### Parameters:\n\n- `attributes` (`Hash`) *(defaults to: `nil`)* — The hash of message options to use as default.\n\n### \\#email(name, &block) ⇒ Object Also known as: message\n\nDefines a mailer object allowing the definition of various email messages that can be delivered.\n\n#### Examples:\n\n``` ruby\nemail :birthday do |name, age|\n  subject \"Happy Birthday!\"\n  to   'john@fake.com'\n  from 'noreply@birthday.com'\n  locals 'name' => name, 'age' => age\n  render 'birthday'\nend\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) — The name of this email message.\n- `block` (`Proc`) — The message definition (i.e subject, to, from, locals).\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Base](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Base)"
- name: Padrino::Mailer::Base#app
  id: padrino/mailer/base#app-instance_method
  summary: null
  belongs_to: Padrino::Mailer::Base
  description: |-
    ### \#app ⇒ Object

    Returns the value of attribute app
- name: Padrino::Mailer::Base#defaults
  id: padrino/mailer/base#defaults-instance_method
  summary: Defines the default attributes for a message in this mailer (including app-wide defaults)
  belongs_to: Padrino::Mailer::Base
  description: |-
    ### \#defaults(attributes = nil) ⇒ Object

    Defines the default attributes for a message in this mailer (including app-wide defaults).

    #### Examples:

    ``` ruby
    mailer :alternate do
      defaults :from => 'padrino@from.com', :to => 'padrino@to.com'
      email(:foo) do; end
    end
    ```

    #### Parameters:

    - `attributes`(`Hash`)*(defaults to: `nil`)* — The hash of message options to use as default.
- name: Padrino::Mailer::Base#delivery_settings
  id: padrino/mailer/base#delivery_settings-instance_method
  summary: null
  belongs_to: Padrino::Mailer::Base
  description: |-
    ### \#delivery_settings ⇒ Object

    Returns the value of attribute delivery_settings
- name: Padrino::Mailer::Base#email
  id: padrino/mailer/base#email-instance_method
  summary: Defines a mailer object allowing the definition of various email messages that can be delivered
  belongs_to: Padrino::Mailer::Base
  description: "### \\#email(name, &block) ⇒ Object Also known as: message\n\nDefines a mailer object allowing the definition of various email messages that can be delivered.\n\n#### Examples:\n\n``` ruby\nemail :birthday do |name, age|\n  subject \"Happy Birthday!\"\n  to   'john@fake.com'\n  from 'noreply@birthday.com'\n  locals 'name' => name, 'age' => age\n  render 'birthday'\nend\n```\n\n#### Parameters:\n\n- `name`(`Symbol`) — The name of this email message.\n- `block`(`Proc`) — The message definition (i.e subject, to, from, locals).\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Base](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Base)"
- name: Padrino::Mailer::Base#initialize
  id: padrino/mailer/base#initialize-instance_method
  summary: Constructs a Mailer base object with specified options
  belongs_to: Padrino::Mailer::Base
  description: |-
    ### \#initialize(app, name, &block) ⇒ Base

    Constructs a `Mailer` base object with specified options.

    #### Parameters:

    - `app`(`Sinatra::Application`) — The application tied to this mailer.
    - `name`(`Symbol`) — The name of this mailer.
    - `block`(`Proc`) — The `email` definitions block.

    #### See Also:

    -  [Helpers::ClassMethods#mailer](helpers/classmethods#mailer-instance_method "Padrino::Mailer::Helpers::ClassMethods#mailer (method)")

    ## Instance Attribute Details
- name: Padrino::Mailer::Base#mailer_name
  id: padrino/mailer/base#mailer_name-instance_method
  summary: null
  belongs_to: Padrino::Mailer::Base
  description: |-
    ### \#mailer_name ⇒ Object

    Returns the value of attribute mailer_name
- name: Padrino::Mailer::Base#messages
  id: padrino/mailer/base#messages-instance_method
  summary: null
  belongs_to: Padrino::Mailer::Base
  description: |-
    ### \#messages ⇒ Object

    Returns the value of attribute messages

    ## Instance Method Details
- name: Padrino::Mailer::Helpers
  id: padrino/mailer/helpers
  summary: Helpers for defining and delivering email messages
  description: "# Module: Padrino::Mailer::Helpers\n\n## Overview\n\nHelpers for defining and delivering email messages.\n\n## Defined Under Namespace\n\n**Modules:** [ClassMethods](helpers/classmethods \"Padrino::Mailer::Helpers::ClassMethods (module)\")\n\n## Instance Method Summary\n\n- [`#`**`deliver`**`(mailer_name, message_name, *attributes) ⇒ Object`](helpers#deliver-instance_method \"#deliver (instance method)\") Delivers a mailer message email with the given attributes.\n- [`#`**`email`**`(mail_attributes = {}, &block) ⇒ Object`](helpers#email-instance_method \"#email (instance method)\") Delivers an email with the given mail attributes.\n\n## Instance Method Details\n\n### \\#deliver(mailer_name, message_name, \\*attributes) ⇒ Object\n\nDelivers a mailer message email with the given attributes.\n\n#### Examples:\n\n``` ruby\ndeliver(:sample, :birthday, \"Joey\", 21)\ndeliver(:example, :message, \"John\")\n```\n\n#### Parameters:\n\n- `mailer_name` (`Symbol`) — The name of the mailer.\n- `message_name` (`Symbol`) — The name of the message to deliver.\n- `attributes` — The parameters to pass to the mailer.\n\n#### See Also:\n\n- [Padrino::Mailer::Helpers::ClassMethods#deliver](helpers/classmethods#deliver-instance_method \"Padrino::Mailer::Helpers::ClassMethods#deliver (method)\")\n\n### \\#email(mail_attributes = {}, &block) ⇒ Object\n\nDelivers an email with the given mail attributes.\n\n#### Examples:\n\n``` ruby\nemail do\n  to      @user.email\n  from    \"awesomeness@example.com\"\n  subject \"Welcome to Awesomeness!\"\n  locals  :a => a, :b => b\n  render  'path/to/my/template'\nend\n```\n\n#### Parameters:\n\n- `mail_attributes` (`Hash`) *(defaults to: `{}`)* — The attributes for this message (to, from, subject, cc, bcc, body, etc).\n- `block` (`Proc`) — The block mail attributes for this message.\n\n#### See Also:\n\n- [Padrino::Mailer::Helpers::ClassMethods#email](helpers/classmethods#email-instance_method \"Padrino::Mailer::Helpers::ClassMethods#email (method)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Helpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Helpers)"
- name: Padrino::Mailer::Helpers#deliver
  id: padrino/mailer/helpers#deliver-instance_method
  summary: Delivers a mailer message email with the given attributes
  belongs_to: Padrino::Mailer::Helpers
  description: |-
    ### \#deliver(mailer_name, message_name, \*attributes) ⇒ Object

    Delivers a mailer message email with the given attributes.

    #### Examples:

    ``` ruby
    deliver(:sample, :birthday, "Joey", 21)
    deliver(:example, :message, "John")
    ```

    #### Parameters:

    - `mailer_name`(`Symbol`) — The name of the mailer.
    - `message_name`(`Symbol`) — The name of the message to deliver.
    - `attributes` — The parameters to pass to the mailer.

    #### See Also:

    -  [Padrino::Mailer::Helpers::ClassMethods#deliver](helpers/classmethods#deliver-instance_method "Padrino::Mailer::Helpers::ClassMethods#deliver (method)")
- name: Padrino::Mailer::Helpers#email
  id: padrino/mailer/helpers#email-instance_method
  summary: Delivers an email with the given mail attributes
  belongs_to: Padrino::Mailer::Helpers
  description: "### \\#email(mail_attributes = {}, &block) ⇒ Object\n\nDelivers an email with the given mail attributes.\n\n#### Examples:\n\n``` ruby\nemail do\n  to      @user.email\n  from    \"awesomeness@example.com\"\n  subject \"Welcome to Awesomeness!\"\n  locals  :a => a, :b => b\n  render  'path/to/my/template'\nend\n```\n\n#### Parameters:\n\n- `mail_attributes`(`Hash`)*(defaults to: `{}`)* — The attributes for this message (to, from, subject, cc, bcc, body, etc).\n- `block`(`Proc`) — The block mail attributes for this message.\n\n#### See Also:\n\n-  [Padrino::Mailer::Helpers::ClassMethods#email](helpers/classmethods#email-instance_method \"Padrino::Mailer::Helpers::ClassMethods#email (method)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Helpers](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Helpers)"
- name: Padrino::Mailer::Helpers::ClassMethods
  id: padrino/mailer/helpers/classmethods
  summary: Class methods responsible for registering mailers, configuring settings and delivering messages
  description: "# Module: Padrino::Mailer::Helpers::ClassMethods\n\n## Overview\n\nClass methods responsible for registering mailers, configuring settings and delivering messages.\n\n## Instance Method Summary\n\n- [`#`**`deliver`**`(mailer_name, message_name, *attributes) ⇒ Object`](classmethods#deliver-instance_method \"#deliver (instance method)\") Delivers a mailer message email with the given attributes.\n- [`#`**`email`**`(mail_attributes = {}, &block) ⇒ Object`](classmethods#email-instance_method \"#email (instance method)\") Delivers an email with the given mail attributes with specified and default settings.\n- [`#`**`inherited`**`(subclass) ⇒ Object`](classmethods#inherited-instance_method \"#inherited (instance method)\")\n- [`#`**`mailer`**`(name, &block) ⇒ Object`](classmethods#mailer-instance_method \"#mailer (instance method)\")` (also: #mailers)` Defines a mailer object allowing the definition of various email messages that can be delivered.\n- [`#`**`registered_mailers`**` ⇒ Object`](classmethods#registered_mailers-instance_method \"#registered_mailers (instance method)\") Returns all registered mailers for this application.\n\n## Instance Method Details\n\n### \\#deliver(mailer_name, message_name, \\*attributes) ⇒ Object\n\nDelivers a mailer message email with the given attributes.\n\n#### Examples:\n\n``` ruby\ndeliver(:sample, :birthday, \"Joey\", 21)\ndeliver(:example, :message, \"John\")\n```\n\n#### Parameters:\n\n- `mailer_name` (`Symbol`) — The name of the mailer.\n- `message_name` (`Symbol`) — The name of the message to deliver.\n- `attributes` — The parameters to pass to the mailer.\n\n### \\#email(mail_attributes = {}, &block) ⇒ Object\n\nDelivers an email with the given mail attributes with specified and default settings.\n\n#### Examples:\n\n``` ruby\nMyApp.email(:to => 'to@ma.il', :from => 'from@ma.il', :subject => 'Welcome!', :body => 'Welcome Here!')\n\n# or if you prefer blocks\n\nMyApp.email do\n  to @user.email\n  from \"awesomeness@example.com\"\n  subject \"Welcome to Awesomeness!\"\n  body 'path/to/my/template', :locals => { :a => a, :b => b }\nend\n```\n\n#### Parameters:\n\n- `mail_attributes` (`Hash`) *(defaults to: `{}`)* — The attributes for this message (to, from, subject, cc, bcc, body, etc.).\n- `block` (`Proc`) — The block mail attributes for this message.\n\n### \\#inherited(subclass) ⇒ Object\n\n### \\#mailer(name, &block) ⇒ Object Also known as: mailers\n\nDefines a mailer object allowing the definition of various email messages that can be delivered.\n\n#### Examples:\n\n``` ruby\nmailer :sample do\n  email :birthday do |name, age|\n    subject 'Happy Birthday!'\n    to      'john@fake.com'\n    from    'noreply@birthday.com'\n    locals  :name => name, :age => age\n    render  'sample/birthday'\n  end\nend\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) — The name of the mailer to initialize.\n\n### \\#registered_mailers ⇒ Object\n\nReturns all registered mailers for this application.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Helpers/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Helpers/ClassMethods)"
- name: Padrino::Mailer::Helpers::ClassMethods#deliver
  id: padrino/mailer/helpers/classmethods#deliver-instance_method
  summary: Delivers a mailer message email with the given attributes
  belongs_to: Padrino::Mailer::Helpers::ClassMethods
  description: |-
    ### \#deliver(mailer_name, message_name, \*attributes) ⇒ Object

    Delivers a mailer message email with the given attributes.

    #### Examples:

    ``` ruby
    deliver(:sample, :birthday, "Joey", 21)
    deliver(:example, :message, "John")
    ```

    #### Parameters:

    - `mailer_name`(`Symbol`) — The name of the mailer.
    - `message_name`(`Symbol`) — The name of the message to deliver.
    - `attributes` — The parameters to pass to the mailer.
- name: Padrino::Mailer::Helpers::ClassMethods#email
  id: padrino/mailer/helpers/classmethods#email-instance_method
  summary: Delivers an email with the given mail attributes with specified and default settings
  belongs_to: Padrino::Mailer::Helpers::ClassMethods
  description: |-
    ### \#email(mail_attributes = {}, &block) ⇒ Object

    Delivers an email with the given mail attributes with specified and default settings.

    #### Examples:

    ``` ruby
    MyApp.email(:to => 'to@ma.il', :from => 'from@ma.il', :subject => 'Welcome!', :body => 'Welcome Here!')

    # or if you prefer blocks

    MyApp.email do
      to @user.email
      from "awesomeness@example.com"
      subject "Welcome to Awesomeness!"
      body 'path/to/my/template', :locals => { :a => a, :b => b }
    end
    ```

    #### Parameters:

    - `mail_attributes`(`Hash`)*(defaults to: `{}`)* — The attributes for this message (to, from, subject, cc, bcc, body, etc.).
    - `block`(`Proc`) — The block mail attributes for this message.
- name: Padrino::Mailer::Helpers::ClassMethods#inherited
  id: padrino/mailer/helpers/classmethods#inherited-instance_method
  summary: null
  belongs_to: Padrino::Mailer::Helpers::ClassMethods
  description: '### \#inherited(subclass) ⇒ Object'
- name: Padrino::Mailer::Helpers::ClassMethods#mailer
  id: padrino/mailer/helpers/classmethods#mailer-instance_method
  summary: Defines a mailer object allowing the definition of various email messages that can be delivered
  belongs_to: Padrino::Mailer::Helpers::ClassMethods
  description: |-
    ### \#mailer(name, &block) ⇒ Object Also known as: mailers

    Defines a mailer object allowing the definition of various email messages that can be delivered.

    #### Examples:

    ``` ruby
    mailer :sample do
      email :birthday do |name, age|
        subject 'Happy Birthday!'
        to      'john@fake.com'
        from    'noreply@birthday.com'
        locals  :name => name, :age => age
        render  'sample/birthday'
      end
    end
    ```

    #### Parameters:

    - `name`(`Symbol`) — The name of the mailer to initialize.
- name: Padrino::Mailer::Helpers::ClassMethods#registered_mailers
  id: padrino/mailer/helpers/classmethods#registered_mailers-instance_method
  summary: Returns all registered mailers for this application
  belongs_to: Padrino::Mailer::Helpers::ClassMethods
  description: "### \\#registered_mailers ⇒ Object\n\nReturns all registered mailers for this application.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Helpers/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Helpers/ClassMethods)"
- name: Padrino::Mailer::Mime
  id: padrino/mailer/mime
  summary: Handles MIME type declarations for mail delivery
  description: "# Module: Padrino::Mailer::Mime\n\n## Overview\n\nHandles MIME type declarations for mail delivery.\n\n## Constant Summary [collapse](#)\n\nMIME_TYPES =\n\nList of common mime-types, selected from various sources according to their usefulness for an email scope.\n\nYou can add your own mime types like:\n\n``` ruby\nPadrino::Mailer::Mime::MIME_TYPES.merge!(\"text/xml\" => :xml)\n```\n\n``` ruby\n{\n  \"text/html\"  => :html,\n  \"text/plain\" => :plain,\n  \"text/xml\"   => :xml\n}\n```\n\n## Class Method Summary\n\n- [`.`**`mime_type`**`(mime, fallback = :plain) ⇒ Object`](mime#mime_type-class_method \"mime_type (class method)\") Returns Symbol with mime type if found, otherwise use `fallback`.\n\n## Class Method Details\n\n### .mime_type(mime, fallback = :plain) ⇒ Object\n\nReturns Symbol with mime type if found, otherwise use `fallback`. `mime` should be the content type like “text/plain” `fallback` may be any symbol.\n\nAlso see the documentation for [MIME_TYPES](mime#MIME_TYPES-constant \"Padrino::Mailer::Mime::MIME_TYPES (constant)\").\n\nThis is a shortcut for:\n\n``` ruby\nPadrino::Mailer::Mime::MIME_TYPES.fetch('text/plain', :plain)\n```\n\n#### Examples:\n\n``` ruby\nPadrino::Mailer::Mime.mime_type('text/plain')\n# => :plain\nPadrino::Mailer::Mime.mime_type('text/html')\n# => :html\n```\n\n#### Parameters:\n\n- `mime` ([`String`](../../string \"String (class)\")) — The mime alias to fetch (i.e 'text/plain').\n- `fallback` (`Symbol`) *(defaults to: `:plain`)* — The fallback mime to use if `mime` doesn't exist.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Mime](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Mime)"
- name: Padrino::Mailer::Mime.mime_type
  id: padrino/mailer/mime#mime_type-class_method
  summary: Returns Symbol with mime type if found, otherwise use fallback
  belongs_to: Padrino::Mailer::Mime
  description: "### .mime_type(mime, fallback = :plain) ⇒ Object\n\nReturns Symbol with mime type if found, otherwise use `fallback`. `mime` should be the content type like “text/plain” `fallback` may be any symbol.\n\nAlso see the documentation for [MIME_TYPES](mime#MIME_TYPES-constant \"Padrino::Mailer::Mime::MIME_TYPES (constant)\").\n\nThis is a shortcut for:\n\n``` ruby\nPadrino::Mailer::Mime::MIME_TYPES.fetch('text/plain', :plain)\n```\n\n#### Examples:\n\n``` ruby\nPadrino::Mailer::Mime.mime_type('text/plain')\n# => :plain\nPadrino::Mailer::Mime.mime_type('text/html')\n# => :html\n```\n\n#### Parameters:\n\n- `mime`([`String`](../../string \"String (class)\")) — The mime alias to fetch (i.e 'text/plain').\n- `fallback`(`Symbol`)*(defaults to: `:plain`)* — The fallback mime to use if `mime` doesn't exist.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Mime](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Mime)"
- name: Padrino::Module
  id: padrino/module
  summary: Helper method for file references within a Padrino module
  description: "# Module: Padrino::Module\n\n## Instance Attribute Summary\n\n- [`#`**`root`**`(*args) ⇒ String`](module#root-instance_method \"#root (instance method)\") Helper method for file references within a Padrino module.\n\n## Instance Method Summary\n\n- [`#`**`dependency_paths`**` ⇒ Array<String>`](module#dependency_paths-instance_method \"#dependency_paths (instance method)\") Returns the list of path globs to load as dependencies.\n- [`#`**`gem!`**`(name) ⇒ Object`](module#gem!-instance_method \"#gem! (instance method)\") Register this module as being loaded from a gem.\n\n## Instance Attribute Details\n\n### \\#root(\\*args) ⇒ String\n\nHelper method for file references within a Padrino module.\n\n#### Examples:\n\n``` ruby\nmodule MyModule\n  extend Padrino::Module\n  gem! 'my_gem'\nend\nModule.root!\n```\n\n#### Parameters:\n\n- `args` (`Array<`[`String`](../string \"String (class)\")`>`) — The directories to join to [\\#root](module#root-instance_method \"Padrino::Module#root (method)\").\n\n#### Returns:\n\n- ([`String`](../string \"String (class)\")) — The absolute path.\n\n## Instance Method Details\n\n### \\#dependency_paths ⇒ Array\\<String\\>\n\nReturns the list of path globs to load as dependencies. Appends custom dependency patterns to the be loaded for Padrino.\n\n#### Examples:\n\n``` ruby\nmodule MyModule\n  extend Padrino::Module\n  gem! 'my_gem'\nend\n\nModule.dependency_paths << \"#{MyModule.root}/uploaders/*.rb\"\n```\n\n#### Returns:\n\n- (`Array<`[`String`](../string \"String (class)\")`>`) — The dependency paths.\n\n### \\#gem!(name) ⇒ Object\n\nRegister this module as being loaded from a gem. This automatically sets the root and therefore the dependency paths correctly.\n\n#### Parameters:\n\n- `name` ([`String`](../string \"String (class)\")) — The name of the gem. Has to be the name as stated in the gemspec.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Module](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Module)"
- name: Padrino::Module#dependency_paths
  id: padrino/module#dependency_paths-instance_method
  summary: Returns the list of path globs to load as dependencies
  belongs_to: Padrino::Module
  description: |-
    ### \#dependency_paths ⇒ Array\<String\>

    Returns the list of path globs to load as dependencies. Appends custom dependency patterns to the be loaded for Padrino.

    #### Examples:

    ``` ruby
    module MyModule
      extend Padrino::Module
      gem! 'my_gem'
    end

    Module.dependency_paths << "#{MyModule.root}/uploaders/*.rb"
    ```

    #### Returns:

    - (`Array<`[`String`](../string "String (class)")`>`) — The dependency paths.
- name: Padrino::Module#gem!
  id: padrino/module#gem!-instance_method
  summary: Register this module as being loaded from a gem
  belongs_to: Padrino::Module
  description: "### \\#gem!(name) ⇒ Object\n\nRegister this module as being loaded from a gem. This automatically sets the root and therefore the dependency paths correctly.\n\n#### Parameters:\n\n- `name`([`String`](../string \"String (class)\")) — The name of the gem. Has to be the name as stated in the gemspec.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Module](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Module)"
- name: Padrino::Module#root
  id: padrino/module#root-instance_method
  summary: Helper method for file references within a Padrino module
  belongs_to: Padrino::Module
  description: |-
    ### \#root(\*args) ⇒ String

    Helper method for file references within a Padrino module.

    #### Examples:

    ``` ruby
    module MyModule
      extend Padrino::Module
      gem! 'my_gem'
    end
    Module.root!
    ```

    #### Parameters:

    - `args`(`Array<`[`String`](../string "String (class)")`>`) — The directories to join to [\#root](module#root-instance_method "Padrino::Module#root (method)").

    #### Returns:

    - ([`String`](../string "String (class)")) — The absolute path.

    ## Instance Method Details
- name: Padrino::Mounter
  id: padrino/mounter
  summary: Represents a particular mounted Padrino application
  description: "# Class: Padrino::Mounter\n\nInherits:  \n[Object](../object \"Object (class)\")\n\n- [Object](../object \"Object (class)\")\n- Padrino::Mounter\n\n## Overview\n\nRepresents a particular mounted Padrino application. Stores the name of the application (app folder name) and url mount path.\n\n#### Examples:\n\n``` ruby\nMounter.new(\"blog_app\", :app_class => \"Blog\").to(\"/blog\")\nMounter.new(\"blog_app\", :app_file => \"/path/to/blog/app.rb\").to(\"/blog\")\n```\n\n## Defined Under Namespace\n\n**Modules:** [ApplicationExtension](mounter/applicationextension \"Padrino::Mounter::ApplicationExtension (module)\") **Classes:** [MounterException](mounter/mounterexception \"Padrino::Mounter::MounterException (class)\")\n\n## Constant Summary [collapse](#)\n\nDEFAULT_CASCADE =  \n``` ruby\n[404, 405]\n```\n\n## Instance Attribute Summary\n\n- [`#`**`app_class`**` ⇒ Object`](mounter#app_class-instance_method \"#app_class (instance method)\") Returns the value of attribute app_class.\n- [`#`**`app_file`**` ⇒ Object`](mounter#app_file-instance_method \"#app_file (instance method)\") Returns the value of attribute app_file.\n- [`#`**`app_host`**` ⇒ Object`](mounter#app_host-instance_method \"#app_host (instance method)\") Returns the value of attribute app_host.\n- [`#`**`app_obj`**` ⇒ Object`](mounter#app_obj-instance_method \"#app_obj (instance method)\") Returns the value of attribute app_obj.\n- [`#`**`app_root`**` ⇒ Object`](mounter#app_root-instance_method \"#app_root (instance method)\") Returns the value of attribute app_root.\n- [`#`**`cascade`**` ⇒ Object`](mounter#cascade-instance_method \"#cascade (instance method)\") Returns the value of attribute cascade.\n- [`#`**`name`**` ⇒ Object`](mounter#name-instance_method \"#name (instance method)\") Returns the value of attribute name.\n- [`#`**`uri_root`**` ⇒ Object`](mounter#uri_root-instance_method \"#uri_root (instance method)\") Returns the value of attribute uri_root.\n\n## Instance Method Summary\n\n- [`#`**`==`**`(other) ⇒ Object`](mounter#==-instance_method \"#== (instance method)\") Makes two Mounters equal if they have the same name and uri_root.\n- [`#`**`app_constant`**` ⇒ Padrino::Application`](mounter#app_constant-instance_method \"#app_constant (instance method)\") The class object for the app if defined, nil otherwise.\n- [`#`**`host`**`(mount_host) ⇒ Object`](mounter#host-instance_method \"#host (instance method)\") Registers the mounted application onto Padrino for the given host.\n- [`#`**`initialize`**`(name, options = {}) ⇒ Mounter`](mounter#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of Mounter.\n- [`#`**`map_onto`**`(router) ⇒ Padrino::Router`](mounter#map_onto-instance_method \"#map_onto (instance method)\") Maps Padrino application onto a Padrino::Router.\n- [`#`**`named_routes`**` ⇒ Array`](mounter#named_routes-instance_method \"#named_routes (instance method)\") Returns the basic route information for each named route.\n- [`#`**`padrino_application?`**` ⇒ Boolean`](mounter#padrino_application%3F-instance_method \"#padrino_application? (instance method)\")\n- [`#`**`routes`**` ⇒ Object`](mounter#routes-instance_method \"#routes (instance method)\") Returns the route objects for the mounted application.\n- [`#`**`to`**`(mount_url) ⇒ Object`](mounter#to-instance_method \"#to (instance method)\") Registers the mounted application onto Padrino.\n\n## Constructor Details\n\n### \\#initialize(name, options = {}) ⇒ Mounter\n\nReturns a new instance of Mounter.\n\n#### Parameters:\n\n- `name` ([`String`](../string \"String (class)\"), [`Padrino::Application`](application \"Padrino::Application (class)\")) — The app name or the [Application](application \"Padrino::Application (class)\") class.\n- `options` (`Hash`) *(defaults to: `{}`)*\n\n#### Options Hash (`options`):\n\n- `:app_class` (`Symbol`) — default: `Detected from name`\n- `:app_file` (`Symbol`) — default: `Automatically detected`\n- `:app_obj` (`Symbol`) — default: `Detected`\n- `:app_root` (`Symbol`) — default: `Directory of :app_file`\n- `:gem` (`Symbol`) — The gem to load the app from (Detected from name)\n\n## Instance Attribute Details\n\n### \\#app_class ⇒ Object\n\nReturns the value of attribute app_class\n\n### \\#app_file ⇒ Object\n\nReturns the value of attribute app_file\n\n### \\#app_host ⇒ Object\n\nReturns the value of attribute app_host\n\n### \\#app_obj ⇒ Object\n\nReturns the value of attribute app_obj\n\n### \\#app_root ⇒ Object\n\nReturns the value of attribute app_root\n\n### \\#cascade ⇒ Object\n\nReturns the value of attribute cascade\n\n### \\#name ⇒ Object\n\nReturns the value of attribute name\n\n### \\#uri_root ⇒ Object\n\nReturns the value of attribute uri_root\n\n## Instance Method Details\n\n### \\#==(other) ⇒ Object\n\nMakes two Mounters equal if they have the same name and uri_root.\n\n#### Parameters:\n\n- `other` ([`Padrino::Mounter`](mounter \"Padrino::Mounter (class)\"))\n\n### \\#app_constant ⇒ Padrino::Application\n\nReturns the class object for the app if defined, nil otherwise.\n\n#### Returns:\n\n- ([`Padrino::Application`](application \"Padrino::Application (class)\")) — the class object for the app if defined, nil otherwise.\n\n### \\#host(mount_host) ⇒ Object\n\nRegisters the mounted application onto Padrino for the given host.\n\n#### Examples:\n\n``` ruby\nMounter.new(\"blog_app\").to(\"/blog\").host(\"blog.padrino.org\")\nMounter.new(\"blog_app\").host(\"blog.padrino.org\")\nMounter.new(\"catch_all\").host(/.*\\.padrino.org/)\n```\n\n#### Parameters:\n\n- `mount_host` ([`String`](../string \"String (class)\")) — Host name.\n\n### \\#map_onto(router) ⇒ Padrino::Router\n\nMaps Padrino application onto a Padrino::Router. For use in constructing a Rack application.\n\n#### Examples:\n\n``` ruby\n@app.map_onto(router)\n```\n\n#### Parameters:\n\n- ([`Padrino::Router`](router \"Padrino::Router (class)\"))\n\n#### Returns:\n\n- ([`Padrino::Router`](router \"Padrino::Router (class)\"))\n\n### \\#named_routes ⇒ Array\n\nReturns the basic route information for each named route.\n\n#### Returns:\n\n- (`Array`) — Array of routes.\n\n### \\#padrino_application? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#routes ⇒ Object\n\nReturns the route objects for the mounted application.\n\n### \\#to(mount_url) ⇒ Object\n\nRegisters the mounted application onto Padrino.\n\n#### Examples:\n\n``` ruby\nMounter.new(\"blog_app\").to(\"/blog\")\n```\n\n#### Parameters:\n\n- `mount_url` ([`String`](../string \"String (class)\")) — Path where we mount the app.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter)"
- name: Padrino::Mounter#==
  id: padrino/mounter#==-instance_method
  summary: Makes two Mounters equal if they have the same name and uri_root
  belongs_to: Padrino::Mounter
  description: |-
    ### \#==(other) ⇒ Object

    Makes two Mounters equal if they have the same name and uri_root.

    #### Parameters:

    - `other` ([`Padrino::Mounter`](mounter "Padrino::Mounter (class)"))
- name: Padrino::Mounter#app_class
  id: padrino/mounter#app_class-instance_method
  summary: null
  belongs_to: Padrino::Mounter
  description: |-
    ### \#app_class ⇒ Object

    Returns the value of attribute app_class
- name: Padrino::Mounter#app_constant
  id: padrino/mounter#app_constant-instance_method
  summary: Returns the class object for the app if defined, nil otherwise
  belongs_to: Padrino::Mounter
  description: |-
    ### \#app_constant ⇒ Padrino::Application

    Returns the class object for the app if defined, nil otherwise.

    #### Returns:

    - ([`Padrino::Application`](application "Padrino::Application (class)")) — the class object for the app if defined, nil otherwise.
- name: Padrino::Mounter#app_file
  id: padrino/mounter#app_file-instance_method
  summary: null
  belongs_to: Padrino::Mounter
  description: |-
    ### \#app_file ⇒ Object

    Returns the value of attribute app_file
- name: Padrino::Mounter#app_host
  id: padrino/mounter#app_host-instance_method
  summary: null
  belongs_to: Padrino::Mounter
  description: |-
    ### \#app_host ⇒ Object

    Returns the value of attribute app_host
- name: Padrino::Mounter#app_obj
  id: padrino/mounter#app_obj-instance_method
  summary: null
  belongs_to: Padrino::Mounter
  description: |-
    ### \#app_obj ⇒ Object

    Returns the value of attribute app_obj
- name: Padrino::Mounter#app_root
  id: padrino/mounter#app_root-instance_method
  summary: null
  belongs_to: Padrino::Mounter
  description: |-
    ### \#app_root ⇒ Object

    Returns the value of attribute app_root
- name: Padrino::Mounter#cascade
  id: padrino/mounter#cascade-instance_method
  summary: null
  belongs_to: Padrino::Mounter
  description: |-
    ### \#cascade ⇒ Object

    Returns the value of attribute cascade
- name: Padrino::Mounter#host
  id: padrino/mounter#host-instance_method
  summary: Registers the mounted application onto Padrino for the given host
  belongs_to: Padrino::Mounter
  description: |-
    ### \#host(mount_host) ⇒ Object

    Registers the mounted application onto Padrino for the given host.

    #### Examples:

    ``` ruby
    Mounter.new("blog_app").to("/blog").host("blog.padrino.org")
    Mounter.new("blog_app").host("blog.padrino.org")
    Mounter.new("catch_all").host(/.*\.padrino.org/)
    ```

    #### Parameters:

    - `mount_host`([`String`](../string "String (class)")) — Host name.
- name: Padrino::Mounter#initialize
  id: padrino/mounter#initialize-instance_method
  summary: Returns a new instance of Mounter
  belongs_to: Padrino::Mounter
  description: |-
    ### \#initialize(name, options = {}) ⇒ Mounter

    Returns a new instance of Mounter.

    #### Parameters:

    - `name`([`String`](../string "String (class)"), [`Padrino::Application`](application "Padrino::Application (class)")) — The app name or the [Application](application "Padrino::Application (class)") class.
    - `options` (`Hash`) *(defaults to: `{}`)*

    #### Options Hash (`options`):

    - `:app_class` (`Symbol`) — default: `Detected from name`
    - `:app_file` (`Symbol`) — default: `Automatically detected`
    - `:app_obj` (`Symbol`) — default: `Detected`
    - `:app_root` (`Symbol`) — default: `Directory of :app_file`
    - `:gem`(`Symbol`) — The gem to load the app from (Detected from name)

    ## Instance Attribute Details
- name: Padrino::Mounter#map_onto
  id: padrino/mounter#map_onto-instance_method
  summary: Maps Padrino application onto a Padrino::Router
  belongs_to: Padrino::Mounter
  description: |-
    ### \#map_onto(router) ⇒ Padrino::Router

    Maps Padrino application onto a Padrino::Router. For use in constructing a Rack application.

    #### Examples:

    ``` ruby
    @app.map_onto(router)
    ```

    #### Parameters:

    - ([`Padrino::Router`](router "Padrino::Router (class)"))

    #### Returns:

    - ([`Padrino::Router`](router "Padrino::Router (class)"))
- name: Padrino::Mounter#name
  id: padrino/mounter#name-instance_method
  summary: null
  belongs_to: Padrino::Mounter
  description: |-
    ### \#name ⇒ Object

    Returns the value of attribute name
- name: Padrino::Mounter#named_routes
  id: padrino/mounter#named_routes-instance_method
  summary: Returns the basic route information for each named route
  belongs_to: Padrino::Mounter
  description: |-
    ### \#named_routes ⇒ Array

    Returns the basic route information for each named route.

    #### Returns:

    - (`Array`) — Array of routes.
- name: Padrino::Mounter#padrino_application?
  id: padrino/mounter#padrino_application?-instance_method
  summary: null
  belongs_to: Padrino::Mounter
  description: |-
    ### \#padrino_application? ⇒ Boolean

    #### Returns:

    - (`Boolean`)
- name: Padrino::Mounter#routes
  id: padrino/mounter#routes-instance_method
  summary: Returns the route objects for the mounted application
  belongs_to: Padrino::Mounter
  description: |-
    ### \#routes ⇒ Object

    Returns the route objects for the mounted application.
- name: Padrino::Mounter#to
  id: padrino/mounter#to-instance_method
  summary: Registers the mounted application onto Padrino
  belongs_to: Padrino::Mounter
  description: "### \\#to(mount_url) ⇒ Object\n\nRegisters the mounted application onto Padrino.\n\n#### Examples:\n\n``` ruby\nMounter.new(\"blog_app\").to(\"/blog\")\n```\n\n#### Parameters:\n\n- `mount_url`([`String`](../string \"String (class)\")) — Path where we mount the app.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter)"
- name: Padrino::Mounter#uri_root
  id: padrino/mounter#uri_root-instance_method
  summary: null
  belongs_to: Padrino::Mounter
  description: |-
    ### \#uri_root ⇒ Object

    Returns the value of attribute uri_root

    ## Instance Method Details
- name: Padrino::Mounter::ApplicationExtension
  id: padrino/mounter/applicationextension
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Padrino::Mounter::ApplicationExtension\n\n## Instance Attribute Summary\n\n- [`#`**`cascade`**` ⇒ Object`](applicationextension#cascade-instance_method \"#cascade (instance method)\") Returns the value of attribute cascade.\n- [`#`**`mounter_options`**` ⇒ Object`](applicationextension#mounter_options-instance_method \"#mounter_options (instance method)\") Returns the value of attribute mounter_options.\n- [`#`**`public_folder`**` ⇒ Object`](applicationextension#public_folder-instance_method \"#public_folder (instance method)\")\n- [`#`**`uri_root`**` ⇒ Object`](applicationextension#uri_root-instance_method \"#uri_root (instance method)\") Returns the value of attribute uri_root.\n\n## Instance Method Summary\n\n- [`#`**`app_file`**` ⇒ Object`](applicationextension#app_file-instance_method \"#app_file (instance method)\")\n- [`#`**`app_name`**` ⇒ Object`](applicationextension#app_name-instance_method \"#app_name (instance method)\")\n- [`#`**`dependencies`**` ⇒ Object`](applicationextension#dependencies-instance_method \"#dependencies (instance method)\")\n- [`#`**`prerequisites`**` ⇒ Object`](applicationextension#prerequisites-instance_method \"#prerequisites (instance method)\")\n- [`#`**`root`**` ⇒ Object`](applicationextension#root-instance_method \"#root (instance method)\")\n- [`#`**`setup_application!`**` ⇒ Object`](applicationextension#setup_application!-instance_method \"#setup_application! (instance method)\")\n\n## Instance Attribute Details\n\n### \\#cascade ⇒ Object\n\nReturns the value of attribute cascade\n\n### \\#mounter_options ⇒ Object\n\nReturns the value of attribute mounter_options\n\n### \\#public_folder ⇒ Object\n\n### \\#uri_root ⇒ Object\n\nReturns the value of attribute uri_root\n\n## Instance Method Details\n\n### \\#app_file ⇒ Object\n\n### \\#app_name ⇒ Object\n\n### \\#dependencies ⇒ Object\n\n### \\#prerequisites ⇒ Object\n\n### \\#root ⇒ Object\n\n### \\#setup_application! ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter/ApplicationExtension](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter/ApplicationExtension)"
- name: Padrino::Mounter::ApplicationExtension#app_file
  id: padrino/mounter/applicationextension#app_file-instance_method
  summary: null
  belongs_to: Padrino::Mounter::ApplicationExtension
  description: '### \#app_file ⇒ Object'
- name: Padrino::Mounter::ApplicationExtension#app_name
  id: padrino/mounter/applicationextension#app_name-instance_method
  summary: null
  belongs_to: Padrino::Mounter::ApplicationExtension
  description: '### \#app_name ⇒ Object'
- name: Padrino::Mounter::ApplicationExtension#cascade
  id: padrino/mounter/applicationextension#cascade-instance_method
  summary: null
  belongs_to: Padrino::Mounter::ApplicationExtension
  description: |-
    ### \#cascade ⇒ Object

    Returns the value of attribute cascade
- name: Padrino::Mounter::ApplicationExtension#dependencies
  id: padrino/mounter/applicationextension#dependencies-instance_method
  summary: null
  belongs_to: Padrino::Mounter::ApplicationExtension
  description: '### \#dependencies ⇒ Object'
- name: Padrino::Mounter::ApplicationExtension#mounter_options
  id: padrino/mounter/applicationextension#mounter_options-instance_method
  summary: null
  belongs_to: Padrino::Mounter::ApplicationExtension
  description: |-
    ### \#mounter_options ⇒ Object

    Returns the value of attribute mounter_options
- name: Padrino::Mounter::ApplicationExtension#prerequisites
  id: padrino/mounter/applicationextension#prerequisites-instance_method
  summary: null
  belongs_to: Padrino::Mounter::ApplicationExtension
  description: '### \#prerequisites ⇒ Object'
- name: Padrino::Mounter::ApplicationExtension#public_folder
  id: padrino/mounter/applicationextension#public_folder-instance_method
  summary: null
  belongs_to: Padrino::Mounter::ApplicationExtension
  description: '### \#public_folder ⇒ Object'
- name: Padrino::Mounter::ApplicationExtension#root
  id: padrino/mounter/applicationextension#root-instance_method
  summary: null
  belongs_to: Padrino::Mounter::ApplicationExtension
  description: '### \#root ⇒ Object'
- name: Padrino::Mounter::ApplicationExtension#setup_application!
  id: padrino/mounter/applicationextension#setup_application!-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Mounter::ApplicationExtension
  description: "### \\#setup_application! ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter/ApplicationExtension](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter/ApplicationExtension)"
- name: Padrino::Mounter::ApplicationExtension#uri_root
  id: padrino/mounter/applicationextension#uri_root-instance_method
  summary: null
  belongs_to: Padrino::Mounter::ApplicationExtension
  description: |-
    ### \#uri_root ⇒ Object

    Returns the value of attribute uri_root

    ## Instance Method Details
- name: Padrino::Mounter::MounterException
  id: padrino/mounter/mounterexception
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Exception: Padrino::Mounter::MounterException\n\nInherits:  \nRuntimeError\n\n- [Object](../../object \"Object (class)\")\n- RuntimeError\n- Padrino::Mounter::MounterException\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter/MounterException](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter/MounterException)"
- name: Padrino::ParamsProtection
  id: padrino/paramsprotection
  summary: Padrino application module providing means for mass-assignment protection
  description: "# Module: Padrino::ParamsProtection\n\n## Overview\n\nPadrino application module providing means for mass-assignment protection.\n\n## Defined Under Namespace\n\n**Modules:** [ClassMethods](paramsprotection/classmethods \"Padrino::ParamsProtection::ClassMethods (module)\"), [InstanceMethods](paramsprotection/instancemethods \"Padrino::ParamsProtection::InstanceMethods (module)\")\n\n## Class Method Summary\n\n- [`.`**`registered`**`(app) ⇒ Object`](paramsprotection#registered-class_method \"registered (class method)\")\n\n## Class Method Details\n\n### .registered(app) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection)"
- name: Padrino::ParamsProtection.registered
  id: padrino/paramsprotection#registered-class_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::ParamsProtection
  description: "### .registered(app) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection)"
- name: Padrino::ParamsProtection::ClassMethods
  id: padrino/paramsprotection/classmethods
  summary: Implements filtering of url query params
  description: "# Module: Padrino::ParamsProtection::ClassMethods\n\n## Instance Method Summary\n\n- [`#`**`params`**`(*allowed_params) ⇒ Object`](classmethods#params-instance_method \"#params (instance method)\") Implements filtering of url query params.\n\n## Instance Method Details\n\n### \\#params(\\*allowed_params) ⇒ Object\n\nImplements filtering of url query params. Can prevent mass-assignment.\n\n#### Examples:\n\n``` ruby\npost :update, :params => [:name, :email]\npost :update, :params => [:name, :id => Integer]\npost :update, :params => [:name => proc{ |v| v.reverse }]\npost :update, :params => [:name, :parent => [:name, :position]]\npost :update, :params => false\npost :update, :params => true\n```\n\n``` ruby\nparams :name, :email, :password => prox{ |v| v.reverse }\npost :update\n```\n\n``` ruby\nApp.controller :accounts, :params => [:name, :position] do\n  post :create\n  post :update, :with => [ :id ], :params => [:name, :position, :addition]\n  get :show, :with => :id, :params => false\n  get :search, :params => true\nend\n```\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection/ClassMethods)"
- name: Padrino::ParamsProtection::ClassMethods#params
  id: padrino/paramsprotection/classmethods#params-instance_method
  summary: Implements filtering of url query params
  belongs_to: Padrino::ParamsProtection::ClassMethods
  description: "### \\#params(\\*allowed_params) ⇒ Object\n\nImplements filtering of url query params. Can prevent mass-assignment.\n\n#### Examples:\n\n``` ruby\npost :update, :params => [:name, :email]\npost :update, :params => [:name, :id => Integer]\npost :update, :params => [:name => proc{ |v| v.reverse }]\npost :update, :params => [:name, :parent => [:name, :position]]\npost :update, :params => false\npost :update, :params => true\n```\n\n``` ruby\nparams :name, :email, :password => prox{ |v| v.reverse }\npost :update\n```\n\n``` ruby\nApp.controller :accounts, :params => [:name, :position] do\n  post :create\n  post :update, :with => [ :id ], :params => [:name, :position, :addition]\n  get :show, :with => :id, :params => false\n  get :search, :params => true\nend\n```\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection/ClassMethods)"
- name: Padrino::ParamsProtection::InstanceMethods
  id: padrino/paramsprotection/instancemethods
  summary: Filters a hash of parameters leaving only allowed ones and possibly typecasting and processing the others
  description: "# Module: Padrino::ParamsProtection::InstanceMethods\n\n## Instance Method Summary\n\n- [`#`**`filter_params!`**`(params, allowed_params) ⇒ Object`](instancemethods#filter_params!-instance_method \"#filter_params! (instance method)\") Filters a hash of parameters leaving only allowed ones and possibly typecasting and processing the others.\n- [`#`**`original_params`**` ⇒ Object`](instancemethods#original_params-instance_method \"#original_params (instance method)\") Returns the original unfiltered query parameters hash.\n\n## Instance Method Details\n\n### \\#filter_params!(params, allowed_params) ⇒ Object\n\nFilters a hash of parameters leaving only allowed ones and possibly typecasting and processing the others.\n\n#### Examples:\n\n``` ruby\nfilter_params!( { \"a\" => \"1\", \"b\" => \"abc\", \"d\" => \"drop\" },\n                { \"a\" => Integer, \"b\" => true } )\n# => { \"a\" => 1, \"b\" => \"abc\" }\nfilter_params!( { \"id\" => \"\", \"child\" => { \"name\" => \"manny\" } },\n                { \"id\" => Integer, \"child\" => { \"name\" => proc{ |v| v.camelize } } } )\n# => { \"id\" => nil, \"child\" => { \"name\" => \"Manny\" } }\nfilter_params!( { \"a\" => [\"1\", \"2\", \"3\"] },\n                { \"a\" => true } )\n# => { \"a\" => [\"1\", \"2\", \"3\"] }\nfilter_params!( { \"persons\" => {\"p-1\" => { \"name\" => \"manny\", \"age\" => \"50\" }, \"p-2\" => { \"name\" => \"richard\", \"age\" => \"50\" } } },\n                { \"persons\" => { \"name\" => true } } )\n# => { \"persons\" => {\"p-1\" => { \"name\" => \"manny\" }, \"p-2\" => { \"name\" => \"richard\" } } }\n```\n\n#### Parameters:\n\n- `params` (`Hash`) — Parameters to filter. Warning: this hash will be changed by deleting or replacing its values.\n- `allowed_params` (`Hash`) — A hash of allowed keys and value classes or processing procs. Supported scalar classes are: Integer (empty string is cast to nil).\n\n### \\#original_params ⇒ Object\n\nReturns the original unfiltered query parameters hash.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection/InstanceMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection/InstanceMethods)"
- name: Padrino::ParamsProtection::InstanceMethods#filter_params!
  id: padrino/paramsprotection/instancemethods#filter_params!-instance_method
  summary: Filters a hash of parameters leaving only allowed ones and possibly typecasting and processing the others
  belongs_to: Padrino::ParamsProtection::InstanceMethods
  description: |-
    ### \#filter_params!(params, allowed_params) ⇒ Object

    Filters a hash of parameters leaving only allowed ones and possibly typecasting and processing the others.

    #### Examples:

    ``` ruby
    filter_params!( { "a" => "1", "b" => "abc", "d" => "drop" },
                    { "a" => Integer, "b" => true } )
    # => { "a" => 1, "b" => "abc" }
    filter_params!( { "id" => "", "child" => { "name" => "manny" } },
                    { "id" => Integer, "child" => { "name" => proc{ |v| v.camelize } } } )
    # => { "id" => nil, "child" => { "name" => "Manny" } }
    filter_params!( { "a" => ["1", "2", "3"] },
                    { "a" => true } )
    # => { "a" => ["1", "2", "3"] }
    filter_params!( { "persons" => {"p-1" => { "name" => "manny", "age" => "50" }, "p-2" => { "name" => "richard", "age" => "50" } } },
                    { "persons" => { "name" => true } } )
    # => { "persons" => {"p-1" => { "name" => "manny" }, "p-2" => { "name" => "richard" } } }
    ```

    #### Parameters:

    - `params`(`Hash`) — Parameters to filter. Warning: this hash will be changed by deleting or replacing its values.
    - `allowed_params`(`Hash`) — A hash of allowed keys and value classes or processing procs. Supported scalar classes are: Integer (empty string is cast to nil).
- name: Padrino::ParamsProtection::InstanceMethods#original_params
  id: padrino/paramsprotection/instancemethods#original_params-instance_method
  summary: Returns the original unfiltered query parameters hash
  belongs_to: Padrino::ParamsProtection::InstanceMethods
  description: "### \\#original_params ⇒ Object\n\nReturns the original unfiltered query parameters hash.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection/InstanceMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection/InstanceMethods)"
- name: Padrino::PathRouter
  id: padrino/pathrouter
  summary: Provides an HTTP router for use in path routing
  description: "# Module: Padrino::PathRouter\n\n## Overview\n\nProvides an HTTP router for use in path routing.\n\n## Defined Under Namespace\n\n**Classes:** [Compiler](pathrouter/compiler \"Padrino::PathRouter::Compiler (class)\"), [Matcher](pathrouter/matcher \"Padrino::PathRouter::Matcher (class)\"), [Route](pathrouter/route \"Padrino::PathRouter::Route (class)\"), [Router](pathrouter/router \"Padrino::PathRouter::Router (class)\")\n\n## Constant Summary [collapse](#)\n\nInvalidRouteException =\n\n#### See Also:\n\n- [Router#path](pathrouter/router#path-instance_method \"Padrino::PathRouter::Router#path (method)\")\n\n``` ruby\nClass.new(ArgumentError)\n```\n\n## Class Method Summary\n\n- [`.`**`new`**` ⇒ Object`](pathrouter#new-class_method \"new (class method)\") Constructs an instance of PathRouter::Router.\n\n## Class Method Details\n\n### .new ⇒ Object\n\nConstructs an instance of PathRouter::Router.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter)"
- name: Padrino::PathRouter.new
  id: padrino/pathrouter#new-class_method
  summary: Constructs an instance of PathRouter::Router
  belongs_to: Padrino::PathRouter
  description: "### .new ⇒ Object\n\nConstructs an instance of PathRouter::Router.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter)"
- name: Padrino::PathRouter::Compiler
  id: padrino/pathrouter/compiler
  summary: Calls routes by using request
  description: "# Class: Padrino::PathRouter::Compiler\n\nInherits:  \n[Object](../../object \"Object (class)\")\n\n- [Object](../../object \"Object (class)\")\n- Padrino::PathRouter::Compiler\n\n## Overview\n\nHigh performance engine for finding all routes which are matched with pattern\n\n## Instance Attribute Summary\n\n- [`#`**`routes`**` ⇒ Object`](compiler#routes-instance_method \"#routes (instance method)\") Returns the value of attribute routes.\n\n## Instance Method Summary\n\n- [`#`**`call_by_request`**`(request) ⇒ Object`](compiler#call_by_request-instance_method \"#call_by_request (instance method)\") Calls routes by using request.\n- [`#`**`compile!`**` ⇒ Object`](compiler#compile!-instance_method \"#compile! (instance method)\") Compiles all routes into regexps.\n- [`#`**`compiled?`**` ⇒ Boolean`](compiler#compiled%3F-instance_method \"#compiled? (instance method)\") Returns true if all routes has been compiled.\n- [`#`**`find_by`**`(request_or_env) ⇒ Object`](compiler#find_by-instance_method \"#find_by (instance method)\") Finds routes by using request or env.\n- [`#`**`find_by_pattern`**`(pattern) ⇒ Object`](compiler#find_by_pattern-instance_method \"#find_by_pattern (instance method)\") Finds routes by using PATH_INFO.\n- [`#`**`initialize`**`(routes) ⇒ Compiler`](compiler#initialize-instance_method \"#initialize (instance method)\") constructor Constructs an instance of Padrino::PathRouter::Compiler.\n\n## Constructor Details\n\n### \\#initialize(routes) ⇒ Compiler\n\nConstructs an instance of Padrino::PathRouter::Compiler\n\n## Instance Attribute Details\n\n### \\#routes ⇒ Object\n\nReturns the value of attribute routes\n\n## Instance Method Details\n\n### \\#call_by_request(request) ⇒ Object\n\nCalls routes by using request.\n\n### \\#compile! ⇒ Object\n\nCompiles all routes into regexps.\n\n### \\#compiled? ⇒ Boolean\n\nReturns true if all routes has been compiled.\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#find_by(request_or_env) ⇒ Object\n\nFinds routes by using request or env.\n\n### \\#find_by_pattern(pattern) ⇒ Object\n\nFinds routes by using PATH_INFO.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Compiler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Compiler)"
- name: Padrino::PathRouter::Compiler#call_by_request
  id: padrino/pathrouter/compiler#call_by_request-instance_method
  summary: Calls routes by using request
  belongs_to: Padrino::PathRouter::Compiler
  description: |-
    ### \#call_by_request(request) ⇒ Object

    Calls routes by using request.
- name: Padrino::PathRouter::Compiler#compile!
  id: padrino/pathrouter/compiler#compile!-instance_method
  summary: Compiles all routes into regexps
  belongs_to: Padrino::PathRouter::Compiler
  description: |-
    ### \#compile! ⇒ Object

    Compiles all routes into regexps.
- name: Padrino::PathRouter::Compiler#compiled?
  id: padrino/pathrouter/compiler#compiled?-instance_method
  summary: Returns true if all routes has been compiled
  belongs_to: Padrino::PathRouter::Compiler
  description: |-
    ### \#compiled? ⇒ Boolean

    Returns true if all routes has been compiled.

    #### Returns:

    - (`Boolean`)
- name: Padrino::PathRouter::Compiler#find_by
  id: padrino/pathrouter/compiler#find_by-instance_method
  summary: Finds routes by using request or env
  belongs_to: Padrino::PathRouter::Compiler
  description: |-
    ### \#find_by(request_or_env) ⇒ Object

    Finds routes by using request or env.
- name: Padrino::PathRouter::Compiler#find_by_pattern
  id: padrino/pathrouter/compiler#find_by_pattern-instance_method
  summary: Finds routes by using PATH_INFO
  belongs_to: Padrino::PathRouter::Compiler
  description: "### \\#find_by_pattern(pattern) ⇒ Object\n\nFinds routes by using PATH_INFO.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Compiler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Compiler)"
- name: Padrino::PathRouter::Compiler#initialize
  id: padrino/pathrouter/compiler#initialize-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Compiler
  description: |-
    ### \#initialize(routes) ⇒ Compiler

    Constructs an instance of Padrino::PathRouter::Compiler

    ## Instance Attribute Details
- name: Padrino::PathRouter::Compiler#routes
  id: padrino/pathrouter/compiler#routes-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Compiler
  description: |-
    ### \#routes ⇒ Object

    Returns the value of attribute routes

    ## Instance Method Details
- name: Padrino::PathRouter::Matcher
  id: padrino/pathrouter/matcher
  summary: Constructs an instance of PathRouter::Matcher
  description: "# Class: Padrino::PathRouter::Matcher\n\nInherits:  \n[Object](../../object \"Object (class)\")\n\n- [Object](../../object \"Object (class)\")\n- Padrino::PathRouter::Matcher\n\n## Constant Summary [collapse](#)\n\nGROUP_REGEXP =\n\nTo count group of regexp\n\n``` ruby\n%r{\\((?!\\?:|\\?!|\\?<=|\\?<!|\\?=).+?\\)}.freeze\n```\n\n## Instance Method Summary\n\n- [`#`**`capture_length`**` ⇒ Object`](matcher#capture_length-instance_method \"#capture_length (instance method)\") Returns captures parameter length.\n- [`#`**`expand`**`(params) ⇒ Object`](matcher#expand-instance_method \"#expand (instance method)\") Expands the path by using parameters.\n- [`#`**`handler`**` ⇒ Object`](matcher#handler-instance_method \"#handler (instance method)\") Returns the handler which is an instance of Mustermann or Regexp.\n- [`#`**`initialize`**`(path, options = {}) ⇒ Matcher`](matcher#initialize-instance_method \"#initialize (instance method)\") constructor Constructs an instance of PathRouter::Matcher.\n- [`#`**`match`**`(pattern) ⇒ Object`](matcher#match-instance_method \"#match (instance method)\") Matches a pattern with the route matcher.\n- [`#`**`mustermann?`**` ⇒ Boolean`](matcher#mustermann%3F-instance_method \"#mustermann? (instance method)\") Returns true if handler is an instance of Mustermann.\n- [`#`**`names`**` ⇒ Object`](matcher#names-instance_method \"#names (instance method)\") Returns names of the handler.\n- [`#`**`params_for`**`(pattern, others) ⇒ Object`](matcher#params_for-instance_method \"#params_for (instance method)\") Builds a parameters, and returns them.\n- [`#`**`to_regexp`**` ⇒ Object`](matcher#to_regexp-instance_method \"#to_regexp (instance method)\") Returns a regexp from handler.\n- [`#`**`to_s`**` ⇒ Object`](matcher#to_s-instance_method \"#to_s (instance method)\") Converts the handler into string.\n\n## Constructor Details\n\n### \\#initialize(path, options = {}) ⇒ Matcher\n\nConstructs an instance of PathRouter::Matcher.\n\n## Instance Method Details\n\n### \\#capture_length ⇒ Object\n\nReturns captures parameter length.\n\n### \\#expand(params) ⇒ Object\n\nExpands the path by using parameters.\n\n### \\#handler ⇒ Object\n\nReturns the handler which is an instance of Mustermann or Regexp.\n\n### \\#match(pattern) ⇒ Object\n\nMatches a pattern with the route matcher.\n\n### \\#mustermann? ⇒ Boolean\n\nReturns true if handler is an instance of Mustermann.\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#names ⇒ Object\n\nReturns names of the handler.\n\n#### See Also:\n\n- Regexp#names\n\n### \\#params_for(pattern, others) ⇒ Object\n\nBuilds a parameters, and returns them.\n\n### \\#to_regexp ⇒ Object\n\nReturns a regexp from handler.\n\n### \\#to_s ⇒ Object\n\nConverts the handler into string.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Matcher](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Matcher)"
- name: Padrino::PathRouter::Matcher#capture_length
  id: padrino/pathrouter/matcher#capture_length-instance_method
  summary: Returns captures parameter length
  belongs_to: Padrino::PathRouter::Matcher
  description: |-
    ### \#capture_length ⇒ Object

    Returns captures parameter length.
- name: Padrino::PathRouter::Matcher#expand
  id: padrino/pathrouter/matcher#expand-instance_method
  summary: Expands the path by using parameters
  belongs_to: Padrino::PathRouter::Matcher
  description: |-
    ### \#expand(params) ⇒ Object

    Expands the path by using parameters.
- name: Padrino::PathRouter::Matcher#handler
  id: padrino/pathrouter/matcher#handler-instance_method
  summary: Returns the handler which is an instance of Mustermann or Regexp
  belongs_to: Padrino::PathRouter::Matcher
  description: |-
    ### \#handler ⇒ Object

    Returns the handler which is an instance of Mustermann or Regexp.
- name: Padrino::PathRouter::Matcher#initialize
  id: padrino/pathrouter/matcher#initialize-instance_method
  summary: Constructs an instance of PathRouter::Matcher
  belongs_to: Padrino::PathRouter::Matcher
  description: |-
    ### \#initialize(path, options = {}) ⇒ Matcher

    Constructs an instance of PathRouter::Matcher.

    ## Instance Method Details
- name: Padrino::PathRouter::Matcher#match
  id: padrino/pathrouter/matcher#match-instance_method
  summary: Matches a pattern with the route matcher
  belongs_to: Padrino::PathRouter::Matcher
  description: |-
    ### \#match(pattern) ⇒ Object

    Matches a pattern with the route matcher.
- name: Padrino::PathRouter::Matcher#mustermann?
  id: padrino/pathrouter/matcher#mustermann?-instance_method
  summary: Returns true if handler is an instance of Mustermann
  belongs_to: Padrino::PathRouter::Matcher
  description: |-
    ### \#mustermann? ⇒ Boolean

    Returns true if handler is an instance of Mustermann.

    #### Returns:

    - (`Boolean`)
- name: Padrino::PathRouter::Matcher#names
  id: padrino/pathrouter/matcher#names-instance_method
  summary: Returns names of the handler
  belongs_to: Padrino::PathRouter::Matcher
  description: |-
    ### \#names ⇒ Object

    Returns names of the handler.

    #### See Also:

    - Regexp#names
- name: Padrino::PathRouter::Matcher#params_for
  id: padrino/pathrouter/matcher#params_for-instance_method
  summary: Builds a parameters, and returns them
  belongs_to: Padrino::PathRouter::Matcher
  description: |-
    ### \#params_for(pattern, others) ⇒ Object

    Builds a parameters, and returns them.
- name: Padrino::PathRouter::Matcher#to_regexp
  id: padrino/pathrouter/matcher#to_regexp-instance_method
  summary: Returns a regexp from handler
  belongs_to: Padrino::PathRouter::Matcher
  description: |-
    ### \#to_regexp ⇒ Object

    Returns a regexp from handler.
- name: Padrino::PathRouter::Matcher#to_s
  id: padrino/pathrouter/matcher#to_s-instance_method
  summary: Converts the handler into string
  belongs_to: Padrino::PathRouter::Matcher
  description: "### \\#to_s ⇒ Object\n\nConverts the handler into string.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Matcher](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Matcher)"
- name: Padrino::PathRouter::Route
  id: padrino/pathrouter/route
  summary: Constructs an instance of PathRouter::Route
  description: "# Class: Padrino::PathRouter::Route\n\nInherits:  \n[Object](../../object \"Object (class)\")\n\n- [Object](../../object \"Object (class)\")\n- Padrino::PathRouter::Route\n\n## Constant Summary [collapse](#)\n\nSIGNIFICANT_VARIABLES_REGEX =  \n``` ruby\n/(^|[^\\\\])[:\\*]([a-zA-Z0-9_]+)/.freeze\n```\n\n## Instance Attribute Summary\n\n- [`#`**`action`**` ⇒ Object`](route#action-instance_method \"#action (instance method)\") The accessors will be used in other classes.\n- [`#`**`block`**` ⇒ Object`](route#block-instance_method \"#block (instance method)\") readonly A reader for compile option.\n- [`#`**`cache`**` ⇒ Object`](route#cache-instance_method \"#cache (instance method)\") The accessors will be used in other classes.\n- [`#`**`cache_expires`**` ⇒ Object`](route#cache_expires-instance_method \"#cache_expires (instance method)\") The accessors will be used in other classes.\n- [`#`**`cache_key`**` ⇒ Object`](route#cache_key-instance_method \"#cache_key (instance method)\") The accessors will be used in other classes.\n- [`#`**`capture`**` ⇒ Object`](route#capture-instance_method \"#capture (instance method)\") The accessors are useful to access from PathRouter::Router.\n- [`#`**`controller`**` ⇒ Object`](route#controller-instance_method \"#controller (instance method)\") The accessors will be used in other classes.\n- [`#`**`default_values`**` ⇒ Object`](route#default_values-instance_method \"#default_values (instance method)\") The accessors will be used in other classes.\n- [`#`**`index`**` ⇒ Object`](route#index-instance_method \"#index (instance method)\") The accessors are useful to access from PathRouter::Router.\n- [`#`**`name`**` ⇒ Object`](route#name-instance_method \"#name (instance method)\") The accessors are useful to access from PathRouter::Router.\n- [`#`**`options`**` ⇒ Object`](route#options-instance_method \"#options (instance method)\") The accessors are useful to access from PathRouter::Router.\n- [`#`**`order`**` ⇒ Object`](route#order-instance_method \"#order (instance method)\") The accessors are useful to access from PathRouter::Router.\n- [`#`**`parent`**` ⇒ Object`](route#parent-instance_method \"#parent (instance method)\") The accessors will be used in other classes.\n- [`#`**`path_for_generation`**` ⇒ Object`](route#path_for_generation-instance_method \"#path_for_generation (instance method)\") The accessors will be used in other classes.\n- [`#`**`regexp`**` ⇒ Object`](route#regexp-instance_method \"#regexp (instance method)\") The accessors are useful to access from PathRouter::Router.\n- [`#`**`router`**` ⇒ Object`](route#router=-instance_method \"#router= (instance method)\") writeonly The router will be treated in this class.\n- [`#`**`use_layout`**` ⇒ Object`](route#use_layout-instance_method \"#use_layout (instance method)\") The accessors will be used in other classes.\n- [`#`**`user_agent`**` ⇒ Object`](route#user_agent-instance_method \"#user_agent (instance method)\") The accessors will be used in other classes.\n- [`#`**`verb`**` ⇒ Object`](route#verb-instance_method \"#verb (instance method)\") readonly A reader for compile option.\n\n## Instance Method Summary\n\n- [`#`**`after_filters`**`(&block) ⇒ Object`](route#after_filters-instance_method \"#after_filters (instance method)\") Returns after_filters as an array.\n- [`#`**`before_filters`**`(&block) ⇒ Object`](route#before_filters-instance_method \"#before_filters (instance method)\") Returns before_filters as an array.\n- [`#`**`block_parameter_length`**` ⇒ Object`](route#block_parameter_length-instance_method \"#block_parameter_length (instance method)\") Returns block parameter length.\n- [`#`**`call`**`(app, *args) ⇒ Object`](route#call-instance_method \"#call (instance method)\") Calls the route block with arguments.\n- [`#`**`custom_conditions`**`(&block) ⇒ Object`](route#custom_conditions-instance_method \"#custom_conditions (instance method)\") Returns custom_conditions as an array.\n- [`#`**`initialize`**`(path, verb, options = {}, &block) ⇒ Route`](route#initialize-instance_method \"#initialize (instance method)\") constructor Constructs an instance of PathRouter::Route.\n- [`#`**`match`**`(pattern) ⇒ Object`](route#match-instance_method \"#match (instance method)\")\n- [`#`**`matcher`**` ⇒ Object`](route#matcher-instance_method \"#matcher (instance method)\") Returns an instance of PathRouter::Matcher that is associated with the route.\n- [`#`**`original_path`**` ⇒ Object`](route#original_path-instance_method \"#original_path (instance method)\") Returns the original path.\n- [`#`**`params_for`**`(pattern, others = {}) ⇒ Object`](route#params_for-instance_method \"#params_for (instance method)\") Returns parameters which is created by the matcher.\n- [`#`**`path`**`(*args) ⇒ Object`](route#path-instance_method \"#path (instance method)\") Expands the path by using parameters.\n- [`#`**`path=`**`(pattern) ⇒ Object`](route#path=-instance_method \"#path= (instance method)\") Overwrites path value by passing new path string.\n- [`#`**`request_methods`**` ⇒ Object`](route#request_methods-instance_method \"#request_methods (instance method)\") Returns the route's verb as an array.\n- [`#`**`significant_variable_names`**` ⇒ Object`](route#significant_variable_names-instance_method \"#significant_variable_names (instance method)\") Returns signficant variable names.\n- [`#`**`to`**`(&block) ⇒ Object`](route#to-instance_method \"#to (instance method)\") Associates a block with the route, and increments current order of the router.\n\n## Constructor Details\n\n### \\#initialize(path, verb, options = {}, &block) ⇒ Route\n\nConstructs an instance of PathRouter::Route.\n\n## Instance Attribute Details\n\n### \\#action ⇒ Object\n\nThe accessors will be used in other classes\n\n### \\#block ⇒ Object (readonly)\n\nA reader for compile option\n\n### \\#cache ⇒ Object\n\nThe accessors will be used in other classes\n\n### \\#cache_expires ⇒ Object\n\nThe accessors will be used in other classes\n\n### \\#cache_key ⇒ Object\n\nThe accessors will be used in other classes\n\n### \\#capture ⇒ Object\n\nThe accessors are useful to access from PathRouter::Router\n\n### \\#controller ⇒ Object\n\nThe accessors will be used in other classes\n\n### \\#default_values ⇒ Object\n\nThe accessors will be used in other classes\n\n### \\#index ⇒ Object\n\nThe accessors are useful to access from PathRouter::Router\n\n### \\#name ⇒ Object\n\nThe accessors are useful to access from PathRouter::Router\n\n### \\#options ⇒ Object\n\nThe accessors are useful to access from PathRouter::Router\n\n### \\#order ⇒ Object\n\nThe accessors are useful to access from PathRouter::Router\n\n### \\#parent ⇒ Object\n\nThe accessors will be used in other classes\n\n### \\#path_for_generation ⇒ Object\n\nThe accessors will be used in other classes\n\n### \\#regexp ⇒ Object\n\nThe accessors are useful to access from PathRouter::Router\n\n### \\#router=(value) ⇒ Object (writeonly)\n\nThe router will be treated in this class\n\n### \\#use_layout ⇒ Object\n\nThe accessors will be used in other classes\n\n### \\#user_agent ⇒ Object\n\nThe accessors will be used in other classes\n\n### \\#verb ⇒ Object (readonly)\n\nA reader for compile option\n\n## Instance Method Details\n\n### \\#after_filters(&block) ⇒ Object\n\nReturns after_filters as an array.\n\n### \\#before_filters(&block) ⇒ Object\n\nReturns before_filters as an array.\n\n### \\#block_parameter_length ⇒ Object\n\nReturns block parameter length.\n\n### \\#call(app, \\*args) ⇒ Object\n\nCalls the route block with arguments.\n\n### \\#custom_conditions(&block) ⇒ Object\n\nReturns custom_conditions as an array.\n\n### \\#match(pattern) ⇒ Object\n\n#### See Also:\n\n- [Matcher#match](matcher#match-instance_method \"Padrino::PathRouter::Matcher#match (method)\")\n\n### \\#matcher ⇒ Object\n\nReturns an instance of PathRouter::Matcher that is associated with the route.\n\n### \\#original_path ⇒ Object\n\nReturns the original path.\n\n### \\#params_for(pattern, others = {}) ⇒ Object\n\nReturns parameters which is created by the matcher.\n\n### \\#path(\\*args) ⇒ Object\n\nExpands the path by using parameters.\n\n#### See Also:\n\n- [Matcher#expand](matcher#expand-instance_method \"Padrino::PathRouter::Matcher#expand (method)\")\n\n### \\#path=(pattern) ⇒ Object\n\nOverwrites path value by passing new path string.\n\n### \\#request_methods ⇒ Object\n\nReturns the route's verb as an array.\n\n### \\#significant_variable_names ⇒ Object\n\nReturns signficant variable names.\n\n### \\#to(&block) ⇒ Object\n\nAssociates a block with the route, and increments current order of the router.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Route](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Route)"
- name: Padrino::PathRouter::Route#action
  id: padrino/pathrouter/route#action-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#action ⇒ Object

    The accessors will be used in other classes
- name: Padrino::PathRouter::Route#after_filters
  id: padrino/pathrouter/route#after_filters-instance_method
  summary: Returns after_filters as an array
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#after_filters(&block) ⇒ Object

    Returns after_filters as an array.
- name: Padrino::PathRouter::Route#before_filters
  id: padrino/pathrouter/route#before_filters-instance_method
  summary: Returns before_filters as an array
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#before_filters(&block) ⇒ Object

    Returns before_filters as an array.
- name: Padrino::PathRouter::Route#block
  id: padrino/pathrouter/route#block-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#block ⇒ Object (readonly)

    A reader for compile option
- name: Padrino::PathRouter::Route#block_parameter_length
  id: padrino/pathrouter/route#block_parameter_length-instance_method
  summary: Returns block parameter length
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#block_parameter_length ⇒ Object

    Returns block parameter length.
- name: Padrino::PathRouter::Route#cache
  id: padrino/pathrouter/route#cache-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#cache ⇒ Object

    The accessors will be used in other classes
- name: Padrino::PathRouter::Route#cache_expires
  id: padrino/pathrouter/route#cache_expires-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#cache_expires ⇒ Object

    The accessors will be used in other classes
- name: Padrino::PathRouter::Route#cache_key
  id: padrino/pathrouter/route#cache_key-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#cache_key ⇒ Object

    The accessors will be used in other classes
- name: Padrino::PathRouter::Route#call
  id: padrino/pathrouter/route#call-instance_method
  summary: Calls the route block with arguments
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#call(app, \*args) ⇒ Object

    Calls the route block with arguments.
- name: Padrino::PathRouter::Route#capture
  id: padrino/pathrouter/route#capture-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#capture ⇒ Object

    The accessors are useful to access from PathRouter::Router
- name: Padrino::PathRouter::Route#controller
  id: padrino/pathrouter/route#controller-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#controller ⇒ Object

    The accessors will be used in other classes
- name: Padrino::PathRouter::Route#custom_conditions
  id: padrino/pathrouter/route#custom_conditions-instance_method
  summary: Returns custom_conditions as an array
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#custom_conditions(&block) ⇒ Object

    Returns custom_conditions as an array.
- name: Padrino::PathRouter::Route#default_values
  id: padrino/pathrouter/route#default_values-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#default_values ⇒ Object

    The accessors will be used in other classes
- name: Padrino::PathRouter::Route#index
  id: padrino/pathrouter/route#index-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#index ⇒ Object

    The accessors are useful to access from PathRouter::Router
- name: Padrino::PathRouter::Route#initialize
  id: padrino/pathrouter/route#initialize-instance_method
  summary: Constructs an instance of PathRouter::Route
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#initialize(path, verb, options = {}, &block) ⇒ Route

    Constructs an instance of PathRouter::Route.

    ## Instance Attribute Details
- name: Padrino::PathRouter::Route#match
  id: padrino/pathrouter/route#match-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#match(pattern) ⇒ Object

    #### See Also:

    -  [Matcher#match](matcher#match-instance_method "Padrino::PathRouter::Matcher#match (method)")
- name: Padrino::PathRouter::Route#matcher
  id: padrino/pathrouter/route#matcher-instance_method
  summary: Returns an instance of PathRouter::Matcher that is associated with the route
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#matcher ⇒ Object

    Returns an instance of PathRouter::Matcher that is associated with the route.
- name: Padrino::PathRouter::Route#name
  id: padrino/pathrouter/route#name-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#name ⇒ Object

    The accessors are useful to access from PathRouter::Router
- name: Padrino::PathRouter::Route#options
  id: padrino/pathrouter/route#options-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#options ⇒ Object

    The accessors are useful to access from PathRouter::Router
- name: Padrino::PathRouter::Route#order
  id: padrino/pathrouter/route#order-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#order ⇒ Object

    The accessors are useful to access from PathRouter::Router
- name: Padrino::PathRouter::Route#original_path
  id: padrino/pathrouter/route#original_path-instance_method
  summary: Returns the original path
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#original_path ⇒ Object

    Returns the original path.
- name: Padrino::PathRouter::Route#params_for
  id: padrino/pathrouter/route#params_for-instance_method
  summary: Returns parameters which is created by the matcher
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#params_for(pattern, others = {}) ⇒ Object

    Returns parameters which is created by the matcher.
- name: Padrino::PathRouter::Route#parent
  id: padrino/pathrouter/route#parent-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#parent ⇒ Object

    The accessors will be used in other classes
- name: Padrino::PathRouter::Route#path
  id: padrino/pathrouter/route#path-instance_method
  summary: Expands the path by using parameters
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#path(\*args) ⇒ Object

    Expands the path by using parameters.

    #### See Also:

    -  [Matcher#expand](matcher#expand-instance_method "Padrino::PathRouter::Matcher#expand (method)")
- name: Padrino::PathRouter::Route#path=
  id: padrino/pathrouter/route#path=-instance_method
  summary: Overwrites path value by passing new path string
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#path=(pattern) ⇒ Object

    Overwrites path value by passing new path string.
- name: Padrino::PathRouter::Route#path_for_generation
  id: padrino/pathrouter/route#path_for_generation-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#path_for_generation ⇒ Object

    The accessors will be used in other classes
- name: Padrino::PathRouter::Route#regexp
  id: padrino/pathrouter/route#regexp-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#regexp ⇒ Object

    The accessors are useful to access from PathRouter::Router
- name: Padrino::PathRouter::Route#request_methods
  id: padrino/pathrouter/route#request_methods-instance_method
  summary: Returns the route's verb as an array
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#request_methods ⇒ Object

    Returns the route's verb as an array.
- name: Padrino::PathRouter::Route#router=
  id: padrino/pathrouter/route#router=-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#router=(value) ⇒ Object (writeonly)

    The router will be treated in this class
- name: Padrino::PathRouter::Route#significant_variable_names
  id: padrino/pathrouter/route#significant_variable_names-instance_method
  summary: Returns signficant variable names
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#significant_variable_names ⇒ Object

    Returns signficant variable names.
- name: Padrino::PathRouter::Route#to
  id: padrino/pathrouter/route#to-instance_method
  summary: Associates a block with the route, and increments current order of the router
  belongs_to: Padrino::PathRouter::Route
  description: "### \\#to(&block) ⇒ Object\n\nAssociates a block with the route, and increments current order of the router.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Route](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Route)"
- name: Padrino::PathRouter::Route#use_layout
  id: padrino/pathrouter/route#use_layout-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#use_layout ⇒ Object

    The accessors will be used in other classes
- name: Padrino::PathRouter::Route#user_agent
  id: padrino/pathrouter/route#user_agent-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#user_agent ⇒ Object

    The accessors will be used in other classes
- name: Padrino::PathRouter::Route#verb
  id: padrino/pathrouter/route#verb-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Route
  description: |-
    ### \#verb ⇒ Object (readonly)

    A reader for compile option

    ## Instance Method Details
- name: Padrino::PathRouter::Router
  id: padrino/pathrouter/router
  summary: Constructs an instance of PathRouter::Router
  description: "# Class: Padrino::PathRouter::Router\n\nInherits:  \n[Object](../../object \"Object (class)\")\n\n- [Object](../../object \"Object (class)\")\n- Padrino::PathRouter::Router\n\n## Instance Attribute Summary\n\n- [`#`**`current_order`**` ⇒ Object`](router#current_order-instance_method \"#current_order (instance method)\") readonly Returns the value of attribute current_order.\n- [`#`**`engine`**` ⇒ Object`](router#engine-instance_method \"#engine (instance method)\") readonly Returns the value of attribute engine.\n- [`#`**`routes`**` ⇒ Object`](router#routes-instance_method \"#routes (instance method)\") readonly Returns the value of attribute routes.\n\n## Instance Method Summary\n\n- [`#`**`add`**`(verb, path, options = {}, &block) ⇒ Object`](router#add-instance_method \"#add (instance method)\") Adds a new route to routes.\n- [`#`**`call`**`(request, &block) ⇒ Object`](router#call-instance_method \"#call (instance method)\") Returns all routes which are matched with the condition.\n- [`#`**`increment_order`**` ⇒ Object`](router#increment_order-instance_method \"#increment_order (instance method)\") Increments the order.\n- [`#`**`initialize`**` ⇒ Router`](router#initialize-instance_method \"#initialize (instance method)\") constructor Constructs an instance of PathRouter::Router.\n- [`#`**`path`**`(name, *args) ⇒ Object`](router#path-instance_method \"#path (instance method)\") Finds a path which is matched with conditions from arguments.\n- [`#`**`prepare!`**` ⇒ Object`](router#prepare!-instance_method \"#prepare! (instance method)\") Constructs an instance of PathRouter::Compiler, and sorts all routes by using the order.\n- [`#`**`recognize`**`(request_or_env) ⇒ Object`](router#recognize-instance_method \"#recognize (instance method)\") Returns all routes which are matched with the condition without block.\n- [`#`**`recognize_path`**`(path_info) ⇒ Object`](router#recognize_path-instance_method \"#recognize_path (instance method)\") Recognizes route and expanded params from a path.\n- [`#`**`reset!`**` ⇒ Object`](router#reset!-instance_method \"#reset! (instance method)\") Resets all routes, current order and preparation.\n\n## Constructor Details\n\n### \\#initialize ⇒ Router\n\nConstructs an instance of PathRouter::Router.\n\n## Instance Attribute Details\n\n### \\#current_order ⇒ Object (readonly)\n\nReturns the value of attribute current_order\n\n### \\#engine ⇒ Object (readonly)\n\nReturns the value of attribute engine\n\n### \\#routes ⇒ Object (readonly)\n\nReturns the value of attribute routes\n\n## Instance Method Details\n\n### \\#add(verb, path, options = {}, &block) ⇒ Object\n\nAdds a new route to routes.\n\n### \\#call(request, &block) ⇒ Object\n\nReturns all routes which are matched with the condition\n\n### \\#increment_order ⇒ Object\n\nIncrements the order.\n\n### \\#path(name, \\*args) ⇒ Object\n\nFinds a path which is matched with conditions from arguments\n\n### \\#prepare! ⇒ Object\n\nConstructs an instance of PathRouter::Compiler, and sorts all routes by using the order.\n\n### \\#recognize(request_or_env) ⇒ Object\n\nReturns all routes which are matched with the condition without block\n\n### \\#recognize_path(path_info) ⇒ Object\n\nRecognizes route and expanded params from a path.\n\n### \\#reset! ⇒ Object\n\nResets all routes, current order and preparation.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Router](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Router)"
- name: Padrino::PathRouter::Router#add
  id: padrino/pathrouter/router#add-instance_method
  summary: Adds a new route to routes
  belongs_to: Padrino::PathRouter::Router
  description: |-
    ### \#add(verb, path, options = {}, &block) ⇒ Object

    Adds a new route to routes.
- name: Padrino::PathRouter::Router#call
  id: padrino/pathrouter/router#call-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Router
  description: |-
    ### \#call(request, &block) ⇒ Object

    Returns all routes which are matched with the condition
- name: Padrino::PathRouter::Router#current_order
  id: padrino/pathrouter/router#current_order-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Router
  description: |-
    ### \#current_order ⇒ Object (readonly)

    Returns the value of attribute current_order
- name: Padrino::PathRouter::Router#engine
  id: padrino/pathrouter/router#engine-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Router
  description: |-
    ### \#engine ⇒ Object (readonly)

    Returns the value of attribute engine
- name: Padrino::PathRouter::Router#increment_order
  id: padrino/pathrouter/router#increment_order-instance_method
  summary: Increments the order
  belongs_to: Padrino::PathRouter::Router
  description: |-
    ### \#increment_order ⇒ Object

    Increments the order.
- name: Padrino::PathRouter::Router#initialize
  id: padrino/pathrouter/router#initialize-instance_method
  summary: Constructs an instance of PathRouter::Router
  belongs_to: Padrino::PathRouter::Router
  description: |-
    ### \#initialize ⇒ Router

    Constructs an instance of PathRouter::Router.

    ## Instance Attribute Details
- name: Padrino::PathRouter::Router#path
  id: padrino/pathrouter/router#path-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Router
  description: |-
    ### \#path(name, \*args) ⇒ Object

    Finds a path which is matched with conditions from arguments
- name: Padrino::PathRouter::Router#prepare!
  id: padrino/pathrouter/router#prepare!-instance_method
  summary: Constructs an instance of PathRouter::Compiler, and sorts all routes by using the order
  belongs_to: Padrino::PathRouter::Router
  description: |-
    ### \#prepare! ⇒ Object

    Constructs an instance of PathRouter::Compiler, and sorts all routes by using the order.
- name: Padrino::PathRouter::Router#recognize
  id: padrino/pathrouter/router#recognize-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Router
  description: |-
    ### \#recognize(request_or_env) ⇒ Object

    Returns all routes which are matched with the condition without block
- name: Padrino::PathRouter::Router#recognize_path
  id: padrino/pathrouter/router#recognize_path-instance_method
  summary: Recognizes route and expanded params from a path
  belongs_to: Padrino::PathRouter::Router
  description: |-
    ### \#recognize_path(path_info) ⇒ Object

    Recognizes route and expanded params from a path.
- name: Padrino::PathRouter::Router#reset!
  id: padrino/pathrouter/router#reset!-instance_method
  summary: Resets all routes, current order and preparation
  belongs_to: Padrino::PathRouter::Router
  description: "### \\#reset! ⇒ Object\n\nResets all routes, current order and preparation.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Router](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Router)"
- name: Padrino::PathRouter::Router#routes
  id: padrino/pathrouter/router#routes-instance_method
  summary: null
  belongs_to: Padrino::PathRouter::Router
  description: |-
    ### \#routes ⇒ Object (readonly)

    Returns the value of attribute routes

    ## Instance Method Details
- name: Padrino::Performance
  id: padrino/performance
  summary: The version constant for the current version of Padrino
  description: "# Module: Padrino::Performance\n\n## Defined Under Namespace\n\n**Modules:** [JSON](performance/json \"Padrino::Performance::JSON (module)\"), [OS](performance/os \"Padrino::Performance::OS (module)\")\n\n## Constant Summary [collapse](#)\n\nVERSION =\n\nThe version constant for the current version of Padrino.\n\n``` ruby\n'0.15.0'\n```\n\n## Class Method Summary\n\n- [`.`**`version`**` ⇒ String`](performance#version-class_method \"version (class method)\") The current Padrino version.\n\n## Class Method Details\n\n### .version ⇒ String\n\nThe current Padrino version.\n\n#### Returns:\n\n- ([`String`](../string \"String (class)\")) — The version number.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance)"
- name: Padrino::Performance.version
  id: padrino/performance#version-class_method
  summary: The current Padrino version
  belongs_to: Padrino::Performance
  description: "### .version ⇒ String\n\nThe current Padrino version.\n\n#### Returns:\n\n- ([`String`](../string \"String (class)\")) — The version number.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance)"
- name: Padrino::Performance::JSON
  id: padrino/performance/json
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Padrino::Performance::JSON\n\n## Defined Under Namespace\n\n**Modules:** [InfectedRequire](json/infectedrequire \"Padrino::Performance::JSON::InfectedRequire (module)\")\n\n## Class Method Summary\n\n- [`.`**`infect_require!`**` ⇒ Object`](json#infect_require!-class_method \"infect_require! (class method)\")\n- [`.`**`loaded_lib!`**`(lib) ⇒ Object`](json#loaded_lib!-class_method \"loaded_lib! (class method)\")\n- [`.`**`loaded_libs`**` ⇒ Object`](json#loaded_libs-class_method \"loaded_libs (class method)\")\n- [`.`**`registered_libs`**` ⇒ Object`](json#registered_libs-class_method \"registered_libs (class method)\") InfectedRequire.\n- [`.`**`setup_captures!`**`(*libs) ⇒ Object`](json#setup_captures!-class_method \"setup_captures! (class method)\")\n\n## Class Method Details\n\n### .infect_require! ⇒ Object\n\n### .loaded_lib!(lib) ⇒ Object\n\n### .loaded_libs ⇒ Object\n\n### .registered_libs ⇒ Object\n\nInfectedRequire\n\n### .setup_captures!(\\*libs) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/JSON](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/JSON)"
- name: Padrino::Performance::JSON.infect_require!
  id: padrino/performance/json#infect_require!-class_method
  summary: null
  belongs_to: Padrino::Performance::JSON
  description: '### .infect_require! ⇒ Object'
- name: Padrino::Performance::JSON.loaded_lib!
  id: padrino/performance/json#loaded_lib!-class_method
  summary: null
  belongs_to: Padrino::Performance::JSON
  description: '### .loaded_lib!(lib) ⇒ Object'
- name: Padrino::Performance::JSON.loaded_libs
  id: padrino/performance/json#loaded_libs-class_method
  summary: null
  belongs_to: Padrino::Performance::JSON
  description: '### .loaded_libs ⇒ Object'
- name: Padrino::Performance::JSON.registered_libs
  id: padrino/performance/json#registered_libs-class_method
  summary: null
  belongs_to: Padrino::Performance::JSON
  description: |-
    ### .registered_libs ⇒ Object

    InfectedRequire
- name: Padrino::Performance::JSON.setup_captures!
  id: padrino/performance/json#setup_captures!-class_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Performance::JSON
  description: "### .setup_captures!(\\*libs) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/JSON](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/JSON)"
- name: Padrino::Performance::JSON::InfectedRequire
  id: padrino/performance/json/infectedrequire
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Padrino::Performance::JSON::InfectedRequire\n\n## Instance Method Summary\n\n- [`#`**`require`**`(*args) ⇒ Object`](infectedrequire#require-instance_method \"#require (instance method)\")\n\n## Instance Method Details\n\n### \\#require(\\*args) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/JSON/InfectedRequire](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/JSON/InfectedRequire)"
- name: Padrino::Performance::JSON::InfectedRequire#require
  id: padrino/performance/json/infectedrequire#require-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Performance::JSON::InfectedRequire
  description: "### \\#require(\\*args) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/JSON/InfectedRequire](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/JSON/InfectedRequire)"
- name: Padrino::Performance::OS
  id: padrino/performance/os
  summary: OS detection useful for targeting CLI commands
  description: "# Module: Padrino::Performance::OS\n\n## Overview\n\nOS detection useful for targeting CLI commands. Source: [stackoverflow.com/questions/170956/how-can-i-find-which-operating-system-my-ruby-program-is-running-on](https://stackoverflow.com/questions/170956/how-can-i-find-which-operating-system-my-ruby-program-is-running-on)\n\n## Class Method Summary\n\n- [`.`**`linux?`**` ⇒ Boolean`](os#linux%3F-class_method \"linux? (class method)\")\n- [`.`**`mac?`**` ⇒ Boolean`](os#mac%3F-class_method \"mac? (class method)\")\n- [`.`**`unix?`**` ⇒ Boolean`](os#unix%3F-class_method \"unix? (class method)\")\n- [`.`**`windows?`**` ⇒ Boolean`](os#windows%3F-class_method \"windows? (class method)\")\n\n## Class Method Details\n\n### .linux? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n### .mac? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n### .unix? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n### .windows? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/OS](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/OS)"
- name: Padrino::Performance::OS.linux?
  id: padrino/performance/os#linux?-class_method
  summary: null
  belongs_to: Padrino::Performance::OS
  description: |-
    ### .linux? ⇒ Boolean

    #### Returns:

    - (`Boolean`)
- name: Padrino::Performance::OS.mac?
  id: padrino/performance/os#mac?-class_method
  summary: null
  belongs_to: Padrino::Performance::OS
  description: |-
    ### .mac? ⇒ Boolean

    #### Returns:

    - (`Boolean`)
- name: Padrino::Performance::OS.unix?
  id: padrino/performance/os#unix?-class_method
  summary: null
  belongs_to: Padrino::Performance::OS
  description: |-
    ### .unix? ⇒ Boolean

    #### Returns:

    - (`Boolean`)
- name: Padrino::Performance::OS.windows?
  id: padrino/performance/os#windows?-class_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Performance::OS
  description: "### .windows? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/OS](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/OS)"
- name: Padrino::Reloader
  id: padrino/reloader
  summary: The modification times for every file in a project
  description: "# Module: Padrino::Reloader\n\nExtended by:  \n[Reloader](reloader \"Padrino::Reloader (module)\")\n\nIncluded in:  \n[Reloader](reloader \"Padrino::Reloader (module)\")\n\n## Overview\n\nHigh performance source code reloader middleware\n\n## Defined Under Namespace\n\n**Modules:** [Storage](reloader/storage \"Padrino::Reloader::Storage (module)\") **Classes:** [Rack](reloader/rack \"Padrino::Reloader::Rack (class)\")\n\n## Constant Summary [collapse](#)\n\nMTIMES =\n\nThe modification times for every file in a project.\n\n``` ruby\n{}\n```\n\n## Instance Method Summary\n\n- [`#`**`changed?`**` ⇒ Boolean`](reloader#changed%3F-instance_method \"#changed? (instance method)\") Returns true if any file changes are detected.\n- [`#`**`clear!`**` ⇒ Object`](reloader#clear!-instance_method \"#clear! (instance method)\") Remove files and classes loaded with stat.\n- [`#`**`exclude`**` ⇒ Object`](reloader#exclude-instance_method \"#exclude (instance method)\") Specified folders can be excluded from the code reload detection process.\n- [`#`**`exclude_constants`**` ⇒ Object`](reloader#exclude_constants-instance_method \"#exclude_constants (instance method)\") Specified constants can be excluded from the code unloading process.\n- [`#`**`include_constants`**` ⇒ Object`](reloader#include_constants-instance_method \"#include_constants (instance method)\") Specified constants can be configured to be reloaded on every request.\n- [`#`**`lock!`**` ⇒ Object`](reloader#lock!-instance_method \"#lock! (instance method)\") We lock dependencies sets to prevent reloading of protected constants.\n- [`#`**`reload!`**` ⇒ Object`](reloader#reload!-instance_method \"#reload! (instance method)\") Reload apps and files with changes detected.\n- [`#`**`remove_constant`**`(const) ⇒ Object`](reloader#remove_constant-instance_method \"#remove_constant (instance method)\") Removes the specified class and constant.\n- [`#`**`remove_feature`**`(file) ⇒ Object`](reloader#remove_feature-instance_method \"#remove_feature (instance method)\") Remove a feature from $LOADED_FEATURES so it can be required again.\n- [`#`**`safe_load`**`(file, options = {}) ⇒ Object`](reloader#safe_load-instance_method \"#safe_load (instance method)\") A safe Kernel::require which issues the necessary hooks depending on results.\n- [`#`**`special_files`**` ⇒ Object`](reloader#special_files-instance_method \"#special_files (instance method)\") Returns the list of special tracked files for Reloader.\n- [`#`**`special_files=`**`(files) ⇒ Object`](reloader#special_files=-instance_method \"#special_files= (instance method)\") Sets the list of special tracked files for Reloader.\n\n## Instance Method Details\n\n### \\#changed? ⇒ Boolean\n\nReturns true if any file changes are detected.\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#clear! ⇒ Object\n\nRemove files and classes loaded with stat\n\n### \\#exclude ⇒ Object\n\nSpecified folders can be excluded from the code reload detection process. Default excluded directories at Padrino.root are: test, spec, features, tmp, config, db and public\n\n### \\#exclude_constants ⇒ Object\n\nSpecified constants can be excluded from the code unloading process.\n\n### \\#include_constants ⇒ Object\n\nSpecified constants can be configured to be reloaded on every request. Default included constants are: \\[none\\]\n\n### \\#lock! ⇒ Object\n\nWe lock dependencies sets to prevent reloading of protected constants\n\n### \\#reload! ⇒ Object\n\nReload apps and files with changes detected.\n\n### \\#remove_constant(const) ⇒ Object\n\nRemoves the specified class and constant.\n\n### \\#remove_feature(file) ⇒ Object\n\nRemove a feature from $LOADED_FEATURES so it can be required again.\n\n### \\#safe_load(file, options = {}) ⇒ Object\n\nA safe Kernel::require which issues the necessary hooks depending on results\n\n### \\#special_files ⇒ Object\n\nReturns the list of special tracked files for Reloader.\n\n### \\#special_files=(files) ⇒ Object\n\nSets the list of special tracked files for Reloader.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader)"
- name: Padrino::Reloader#changed?
  id: padrino/reloader#changed?-instance_method
  summary: Returns true if any file changes are detected
  belongs_to: Padrino::Reloader
  description: |-
    ### \#changed? ⇒ Boolean

    Returns true if any file changes are detected.

    #### Returns:

    - (`Boolean`)
- name: Padrino::Reloader#clear!
  id: padrino/reloader#clear!-instance_method
  summary: null
  belongs_to: Padrino::Reloader
  description: |-
    ### \#clear! ⇒ Object

    Remove files and classes loaded with stat
- name: Padrino::Reloader#exclude
  id: padrino/reloader#exclude-instance_method
  summary: Specified folders can be excluded from the code reload detection process
  belongs_to: Padrino::Reloader
  description: |-
    ### \#exclude ⇒ Object

    Specified folders can be excluded from the code reload detection process. Default excluded directories at Padrino.root are: test, spec, features, tmp, config, db and public
- name: Padrino::Reloader#exclude_constants
  id: padrino/reloader#exclude_constants-instance_method
  summary: Specified constants can be excluded from the code unloading process
  belongs_to: Padrino::Reloader
  description: |-
    ### \#exclude_constants ⇒ Object

    Specified constants can be excluded from the code unloading process.
- name: Padrino::Reloader#include_constants
  id: padrino/reloader#include_constants-instance_method
  summary: Specified constants can be configured to be reloaded on every request
  belongs_to: Padrino::Reloader
  description: |-
    ### \#include_constants ⇒ Object

    Specified constants can be configured to be reloaded on every request. Default included constants are: \[none\]
- name: Padrino::Reloader#lock!
  id: padrino/reloader#lock!-instance_method
  summary: null
  belongs_to: Padrino::Reloader
  description: |-
    ### \#lock! ⇒ Object

    We lock dependencies sets to prevent reloading of protected constants
- name: Padrino::Reloader#reload!
  id: padrino/reloader#reload!-instance_method
  summary: Reload apps and files with changes detected
  belongs_to: Padrino::Reloader
  description: |-
    ### \#reload! ⇒ Object

    Reload apps and files with changes detected.
- name: Padrino::Reloader#remove_constant
  id: padrino/reloader#remove_constant-instance_method
  summary: Removes the specified class and constant
  belongs_to: Padrino::Reloader
  description: |-
    ### \#remove_constant(const) ⇒ Object

    Removes the specified class and constant.
- name: Padrino::Reloader#remove_feature
  id: padrino/reloader#remove_feature-instance_method
  summary: Remove a feature from $LOADED_FEATURES so it can be required again
  belongs_to: Padrino::Reloader
  description: |-
    ### \#remove_feature(file) ⇒ Object

    Remove a feature from $LOADED_FEATURES so it can be required again.
- name: Padrino::Reloader#safe_load
  id: padrino/reloader#safe_load-instance_method
  summary: null
  belongs_to: Padrino::Reloader
  description: |-
    ### \#safe_load(file, options = {}) ⇒ Object

    A safe Kernel::require which issues the necessary hooks depending on results
- name: Padrino::Reloader#special_files
  id: padrino/reloader#special_files-instance_method
  summary: Returns the list of special tracked files for Reloader
  belongs_to: Padrino::Reloader
  description: |-
    ### \#special_files ⇒ Object

    Returns the list of special tracked files for Reloader.
- name: Padrino::Reloader#special_files=
  id: padrino/reloader#special_files=-instance_method
  summary: Sets the list of special tracked files for Reloader
  belongs_to: Padrino::Reloader
  description: "### \\#special_files=(files) ⇒ Object\n\nSets the list of special tracked files for Reloader.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader)"
- name: Padrino::Reloader::Rack
  id: padrino/reloader/rack
  summary: This class acts as a Rack middleware to be added to the application stack
  description: "# Class: Padrino::Reloader::Rack\n\nInherits:  \n[Object](../../object \"Object (class)\")\n\n- [Object](../../object \"Object (class)\")\n- Padrino::Reloader::Rack\n\n## Overview\n\nThis class acts as a Rack middleware to be added to the application stack. This middleware performs a check and reload for source files at the start of each request, but also respects a specified cool down time during which no further action will be taken.\n\n## Instance Method Summary\n\n- [`#`**`call`**`(env) ⇒ Object`](rack#call-instance_method \"#call (instance method)\") Invoked in order to perform the reload as part of the request stack.\n- [`#`**`initialize`**`(app, cooldown = 1) ⇒ Rack`](rack#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of Rack.\n\n## Constructor Details\n\n### \\#initialize(app, cooldown = 1) ⇒ Rack\n\nReturns a new instance of Rack.\n\n## Instance Method Details\n\n### \\#call(env) ⇒ Object\n\nInvoked in order to perform the reload as part of the request stack.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader/Rack](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader/Rack)"
- name: Padrino::Reloader::Rack#call
  id: padrino/reloader/rack#call-instance_method
  summary: Invoked in order to perform the reload as part of the request stack
  belongs_to: Padrino::Reloader::Rack
  description: "### \\#call(env) ⇒ Object\n\nInvoked in order to perform the reload as part of the request stack.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader/Rack](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader/Rack)"
- name: Padrino::Reloader::Rack#initialize
  id: padrino/reloader/rack#initialize-instance_method
  summary: Returns a new instance of Rack
  belongs_to: Padrino::Reloader::Rack
  description: |-
    ### \#initialize(app, cooldown = 1) ⇒ Rack

    Returns a new instance of Rack.

    ## Instance Method Details
- name: Padrino::Reloader::Storage
  id: padrino/reloader/storage
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Padrino::Reloader::Storage\n\nExtended by:  \n[Storage](storage \"Padrino::Reloader::Storage (module)\")\n\nIncluded in:  \n[Storage](storage \"Padrino::Reloader::Storage (module)\")\n\n## Instance Method Summary\n\n- [`#`**`clear!`**` ⇒ Object`](storage#clear!-instance_method \"#clear! (instance method)\")\n- [`#`**`commit`**`(name) ⇒ Object`](storage#commit-instance_method \"#commit (instance method)\")\n- [`#`**`prepare`**`(name) ⇒ Object`](storage#prepare-instance_method \"#prepare (instance method)\")\n- [`#`**`remove`**`(name) ⇒ Object`](storage#remove-instance_method \"#remove (instance method)\")\n- [`#`**`rollback`**`(name) ⇒ Object`](storage#rollback-instance_method \"#rollback (instance method)\")\n\n## Instance Method Details\n\n### \\#clear! ⇒ Object\n\n### \\#commit(name) ⇒ Object\n\n### \\#prepare(name) ⇒ Object\n\n### \\#remove(name) ⇒ Object\n\n### \\#rollback(name) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader/Storage](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader/Storage)"
- name: Padrino::Reloader::Storage#clear!
  id: padrino/reloader/storage#clear!-instance_method
  summary: null
  belongs_to: Padrino::Reloader::Storage
  description: '### \#clear! ⇒ Object'
- name: Padrino::Reloader::Storage#commit
  id: padrino/reloader/storage#commit-instance_method
  summary: null
  belongs_to: Padrino::Reloader::Storage
  description: '### \#commit(name) ⇒ Object'
- name: Padrino::Reloader::Storage#prepare
  id: padrino/reloader/storage#prepare-instance_method
  summary: null
  belongs_to: Padrino::Reloader::Storage
  description: '### \#prepare(name) ⇒ Object'
- name: Padrino::Reloader::Storage#remove
  id: padrino/reloader/storage#remove-instance_method
  summary: null
  belongs_to: Padrino::Reloader::Storage
  description: '### \#remove(name) ⇒ Object'
- name: Padrino::Reloader::Storage#rollback
  id: padrino/reloader/storage#rollback-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Reloader::Storage
  description: "### \\#rollback(name) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader/Storage](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader/Storage)"
- name: Padrino::Rendering
  id: padrino/rendering
  summary: Padrino enhances the Sinatra 'render' method to have support for automatic template engine detection, enhanced layout functionality, locale enabled rendering, among other features
  description: "# Module: Padrino::Rendering\n\n## Overview\n\nPadrino enhances the Sinatra 'render' method to have support for automatic template engine detection, enhanced layout functionality, locale enabled rendering, among other features.\n\n## Defined Under Namespace\n\n**Modules:** [ClassMethods](rendering/classmethods \"Padrino::Rendering::ClassMethods (module)\"), [Erubi](rendering/erubi \"Padrino::Rendering::Erubi (module)\"), [InstanceMethods](rendering/instancemethods \"Padrino::Rendering::InstanceMethods (module)\"), [SafeBufferEnhancer](rendering/safebufferenhancer \"Padrino::Rendering::SafeBufferEnhancer (module)\"), [SafeTemplate](rendering/safetemplate \"Padrino::Rendering::SafeTemplate (module)\") **Classes:** [ERBTemplate](rendering/erbtemplate \"Padrino::Rendering::ERBTemplate (class)\"), [ErubiTemplate](rendering/erubitemplate \"Padrino::Rendering::ErubiTemplate (class)\"), [ErubisTemplate](rendering/erubistemplate \"Padrino::Rendering::ErubisTemplate (class)\"), [HamlTemplate](rendering/hamltemplate \"Padrino::Rendering::HamlTemplate (class)\"), [HamlitOutputBuffer](rendering/hamlitoutputbuffer \"Padrino::Rendering::HamlitOutputBuffer (class)\"), [HamlitTemplate](rendering/hamlittemplate \"Padrino::Rendering::HamlitTemplate (class)\"), [SafeERB](rendering/safeerb \"Padrino::Rendering::SafeERB (class)\"), [SafeErubi](rendering/safeerubi \"Padrino::Rendering::SafeErubi (class)\"), [SafeEruby](rendering/safeeruby \"Padrino::Rendering::SafeEruby (class)\"), [SlimOutputBuffer](rendering/slimoutputbuffer \"Padrino::Rendering::SlimOutputBuffer (class)\"), [SlimTemplate](rendering/slimtemplate \"Padrino::Rendering::SlimTemplate (class)\"), [TemplateNotFound](rendering/templatenotfound \"Padrino::Rendering::TemplateNotFound (class)\")\n\n## Constant Summary [collapse](#)\n\nIGNORE_FILE_PATTERN =\n\nThis is an array of file patterns to ignore. If your editor add a suffix during editing to your files please add it like:\n\n#### Examples:\n\n``` ruby\nPadrino::Rendering::IGNORE_FILE_PATTERN << /~$/\n```\n\n``` ruby\n[\n  /~$/ # This is for Gedit\n]\n```\n\nCONTENT_TYPE_ALIASES =\n\nDefines common content-type alias mappings.\n\n``` ruby\n{ :htm => :html }\n```\n\nDEFAULT_RENDERING_OPTIONS =\n\nDefault options used in the resolve_template-method.\n\n``` ruby\n{ :strict_format => false, :raise_exceptions => true }\n```\n\n## Class Method Summary\n\n- [`.`**`engine_configurations`**` ⇒ Hash<Symbol,Hash>`](rendering#engine_configurations-class_method \"engine_configurations (class method)\") Default engine configurations for Padrino::Rendering.\n- [`.`**`registered`**`(app) ⇒ Object`](rendering#registered-class_method \"registered (class method)\")\n\n## Class Method Details\n\n### .engine_configurations ⇒ Hash\\<Symbol,Hash\\>\n\nDefault engine configurations for Padrino::Rendering.\n\n#### Returns:\n\n- (`Hash<Symbol,Hash>`) — The configurations, keyed by engine.\n\n### .registered(app) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering)"
- name: Padrino::Rendering.engine_configurations
  id: padrino/rendering#engine_configurations-class_method
  summary: Default engine configurations for Padrino::Rendering
  belongs_to: Padrino::Rendering
  description: |-
    ### .engine_configurations ⇒ Hash\<Symbol,Hash\>

    Default engine configurations for Padrino::Rendering.

    #### Returns:

    - (`Hash<Symbol,Hash>`) — The configurations, keyed by engine.
- name: Padrino::Rendering.registered
  id: padrino/rendering#registered-class_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Rendering
  description: "### .registered(app) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering)"
- name: Padrino::Rendering::ClassMethods
  id: padrino/rendering/classmethods
  summary: Class methods responsible for rendering templates as part of a request
  description: "# Module: Padrino::Rendering::ClassMethods\n\n## Overview\n\nClass methods responsible for rendering templates as part of a request.\n\n## Instance Method Summary\n\n- [`#`**`cache_layout_path`**`(name) ⇒ Object`](classmethods#cache_layout_path-instance_method \"#cache_layout_path (instance method)\")\n- [`#`**`cache_template_path`**`(options) ⇒ Object`](classmethods#cache_template_path-instance_method \"#cache_template_path (instance method)\")\n- [`#`**`fetch_layout_path`**`(given_layout, layouts_path = views) ⇒ Object`](classmethods#fetch_layout_path-instance_method \"#fetch_layout_path (instance method)\") Returns the cached layout path.\n- [`#`**`layout`**`(name = :layout) { ... } ⇒ Object`](classmethods#layout-instance_method \"#layout (instance method)\") Use layout like rails does or if a block given then like sinatra.\n\n## Instance Method Details\n\n### \\#cache_layout_path(name) ⇒ Object\n\n### \\#cache_template_path(options) ⇒ Object\n\n### \\#fetch_layout_path(given_layout, layouts_path = views) ⇒ Object\n\nReturns the cached layout path.\n\n#### Parameters:\n\n- `given_layout` ([`String`](../../string \"String (class)\"), `nil`) — The requested layout.\n- `layouts_path` ([`String`](../../string \"String (class)\"), `nil`) *(defaults to: `views`)* — The directory where the layouts are located. Defaults to \\#views.\n\n### \\#layout(name = :layout) { ... } ⇒ Object\n\nUse layout like rails does or if a block given then like sinatra. If used without a block, sets the current layout for the route.\n\nBy default, searches in your:\n\n`app`/`views`/`layouts`/`application`.(`haml`\\|`erb`\\|`xxx`) `app`/`views`/`layout_name`.(`haml`\\|`erb`\\|`xxx`)\n\nIf you define `layout` :`custom` then searches for your layouts in `app`/`views`/`layouts`/`custom`.(`haml`\\|`erb`\\|`xxx`) `app`/`views`/`custom`.(`haml`\\|`erb`\\|`xxx`)\n\n#### Parameters:\n\n- `name` (`Symbol`) *(defaults to: `:layout`)* — (:layout) The layout to use.\n\n#### Yields:\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ClassMethods)"
- name: Padrino::Rendering::ClassMethods#cache_layout_path
  id: padrino/rendering/classmethods#cache_layout_path-instance_method
  summary: null
  belongs_to: Padrino::Rendering::ClassMethods
  description: '### \#cache_layout_path(name) ⇒ Object'
- name: Padrino::Rendering::ClassMethods#cache_template_path
  id: padrino/rendering/classmethods#cache_template_path-instance_method
  summary: null
  belongs_to: Padrino::Rendering::ClassMethods
  description: '### \#cache_template_path(options) ⇒ Object'
- name: Padrino::Rendering::ClassMethods#fetch_layout_path
  id: padrino/rendering/classmethods#fetch_layout_path-instance_method
  summary: Returns the cached layout path
  belongs_to: Padrino::Rendering::ClassMethods
  description: |-
    ### \#fetch_layout_path(given_layout, layouts_path = views) ⇒ Object

    Returns the cached layout path.

    #### Parameters:

    - `given_layout`([`String`](../../string "String (class)"), `nil`) — The requested layout.
    - `layouts_path`([`String`](../../string "String (class)"), `nil`)*(defaults to: `views`)* — The directory where the layouts are located. Defaults to \#views.
- name: Padrino::Rendering::ClassMethods#layout
  id: padrino/rendering/classmethods#layout-instance_method
  summary: Use layout like rails does or if a block given then like sinatra
  belongs_to: Padrino::Rendering::ClassMethods
  description: "### \\#layout(name = :layout) { ... } ⇒ Object\n\nUse layout like rails does or if a block given then like sinatra. If used without a block, sets the current layout for the route.\n\nBy default, searches in your:\n\n`app`/`views`/`layouts`/`application`.(`haml`\\|`erb`\\|`xxx`) `app`/`views`/`layout_name`.(`haml`\\|`erb`\\|`xxx`)\n\nIf you define `layout` :`custom` then searches for your layouts in `app`/`views`/`layouts`/`custom`.(`haml`\\|`erb`\\|`xxx`) `app`/`views`/`custom`.(`haml`\\|`erb`\\|`xxx`)\n\n#### Parameters:\n\n- `name`(`Symbol`)*(defaults to: `:layout`)* — (:layout) The layout to use.\n\n#### Yields:\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ClassMethods)"
- name: Padrino::Rendering::ERBTemplate
  id: padrino/rendering/erbtemplate
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Padrino::Rendering::ERBTemplate\n\nInherits:  \nTilt::ERBTemplate\n\n- [Object](../../object \"Object (class)\")\n- Tilt::ERBTemplate\n- Padrino::Rendering::ERBTemplate\n\n## Instance Method Summary\n\n- [`#`**`precompiled_preamble`**`(locals) ⇒ Object`](erbtemplate#precompiled_preamble-instance_method \"#precompiled_preamble (instance method)\")\n- [`#`**`prepare`**` ⇒ Object`](erbtemplate#prepare-instance_method \"#prepare (instance method)\")\n- [`#`**`render`**`(*args) ⇒ Object`](erbtemplate#render-instance_method \"#render (instance method)\")\n\n## Instance Method Details\n\n### \\#precompiled_preamble(locals) ⇒ Object\n\n### \\#prepare ⇒ Object\n\n### \\#render(\\*args) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ERBTemplate](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ERBTemplate)"
- name: Padrino::Rendering::ERBTemplate#precompiled_preamble
  id: padrino/rendering/erbtemplate#precompiled_preamble-instance_method
  summary: null
  belongs_to: Padrino::Rendering::ERBTemplate
  description: '### \#precompiled_preamble(locals) ⇒ Object'
- name: Padrino::Rendering::ERBTemplate#prepare
  id: padrino/rendering/erbtemplate#prepare-instance_method
  summary: null
  belongs_to: Padrino::Rendering::ERBTemplate
  description: '### \#prepare ⇒ Object'
- name: Padrino::Rendering::ERBTemplate#render
  id: padrino/rendering/erbtemplate#render-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Rendering::ERBTemplate
  description: "### \\#render(\\*args) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ERBTemplate](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ERBTemplate)"
- name: Padrino::Rendering::Erubi
  id: padrino/rendering/erubi
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Padrino::Rendering::Erubi\n\n## Defined Under Namespace\n\n**Modules:** [SafeBufferEnhancer](erubi/safebufferenhancer \"Padrino::Rendering::Erubi::SafeBufferEnhancer (module)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/Erubi](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/Erubi)"
- name: Padrino::Rendering::Erubi::SafeBufferEnhancer
  id: padrino/rendering/erubi/safebufferenhancer
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Padrino::Rendering::Erubi::SafeBufferEnhancer\n\nIncluded in:  \n[SafeErubi](../safeerubi \"Padrino::Rendering::SafeErubi (class)\")\n\n## Instance Method Summary\n\n- [`#`**`add_expression_result`**`(code) ⇒ Object`](safebufferenhancer#add_expression_result-instance_method \"#add_expression_result (instance method)\")\n- [`#`**`add_expression_result_escaped`**`(code) ⇒ Object`](safebufferenhancer#add_expression_result_escaped-instance_method \"#add_expression_result_escaped (instance method)\")\n- [`#`**`add_text`**`(text) ⇒ Object`](safebufferenhancer#add_text-instance_method \"#add_text (instance method)\")\n\n## Instance Method Details\n\n### \\#add_expression_result(code) ⇒ Object\n\n### \\#add_expression_result_escaped(code) ⇒ Object\n\n### \\#add_text(text) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/Erubi/SafeBufferEnhancer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/Erubi/SafeBufferEnhancer)"
- name: Padrino::Rendering::Erubi::SafeBufferEnhancer#add_expression_result
  id: padrino/rendering/erubi/safebufferenhancer#add_expression_result-instance_method
  summary: null
  belongs_to: Padrino::Rendering::Erubi::SafeBufferEnhancer
  description: '### \#add_expression_result(code) ⇒ Object'
- name: Padrino::Rendering::Erubi::SafeBufferEnhancer#add_expression_result_escaped
  id: padrino/rendering/erubi/safebufferenhancer#add_expression_result_escaped-instance_method
  summary: null
  belongs_to: Padrino::Rendering::Erubi::SafeBufferEnhancer
  description: '### \#add_expression_result_escaped(code) ⇒ Object'
- name: Padrino::Rendering::Erubi::SafeBufferEnhancer#add_text
  id: padrino/rendering/erubi/safebufferenhancer#add_text-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Rendering::Erubi::SafeBufferEnhancer
  description: "### \\#add_text(text) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/Erubi/SafeBufferEnhancer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/Erubi/SafeBufferEnhancer)"
- name: Padrino::Rendering::ErubisTemplate
  id: padrino/rendering/erubistemplate
  summary: This class is part of a private API
  description: "# Class: Padrino::Rendering::ErubisTemplate\n\nInherits:  \nTilt::ErubisTemplate\n\n- [Object](../../object \"Object (class)\")\n- Tilt::ErubisTemplate\n- Padrino::Rendering::ErubisTemplate\n\n## Overview\n\n**This class is part of a private API.** You should avoid using this class if possible, as it may be removed or be changed in the future.\n\nModded ErubisTemplate that doesn't insist in an String as output buffer.\n\n## Instance Method Summary\n\n- [`#`**`precompiled_preamble`**`(locals) ⇒ Object`](erubistemplate#precompiled_preamble-instance_method \"#precompiled_preamble (instance method)\") private In preamble we need a flag \\`\\_\\_in_erb_template\\` and SafeBuffer for padrino apps.\n- [`#`**`render`**`(*args) ⇒ Object`](erubistemplate#render-instance_method \"#render (instance method)\") private\n\n## Instance Method Details\n\n### \\#precompiled_preamble(locals) ⇒ Object\n\n**This method is part of a private API.** You should avoid using this method if possible, as it may be removed or be changed in the future.\n\nIn preamble we need a flag \\`\\_\\_in_erb_template\\` and SafeBuffer for padrino apps.\n\n### \\#render(\\*args) ⇒ Object\n\n**This method is part of a private API.** You should avoid using this method if possible, as it may be removed or be changed in the future.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ErubisTemplate](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ErubisTemplate)"
- name: Padrino::Rendering::ErubisTemplate#precompiled_preamble
  id: padrino/rendering/erubistemplate#precompiled_preamble-instance_method
  summary: This method is part of a private API
  belongs_to: Padrino::Rendering::ErubisTemplate
  description: |-
    ### \#precompiled_preamble(locals) ⇒ Object

    **This method is part of a private API.** You should avoid using this method if possible, as it may be removed or be changed in the future.

    In preamble we need a flag \`\_\_in_erb_template\` and SafeBuffer for padrino apps.
- name: Padrino::Rendering::ErubisTemplate#render
  id: padrino/rendering/erubistemplate#render-instance_method
  summary: This method is part of a private API
  belongs_to: Padrino::Rendering::ErubisTemplate
  description: "### \\#render(\\*args) ⇒ Object\n\n**This method is part of a private API.** You should avoid using this method if possible, as it may be removed or be changed in the future.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ErubisTemplate](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ErubisTemplate)"
- name: Padrino::Rendering::ErubiTemplate
  id: padrino/rendering/erubitemplate
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Padrino::Rendering::ErubiTemplate\n\nInherits:  \nTilt::ErubiTemplate\n\n- [Object](../../object \"Object (class)\")\n- Tilt::ErubiTemplate\n- Padrino::Rendering::ErubiTemplate\n\n## Instance Method Summary\n\n- [`#`**`precompiled_preamble`**` ⇒ Object`](erubitemplate#precompiled_preamble-instance_method \"#precompiled_preamble (instance method)\")\n\n## Instance Method Details\n\n### \\#precompiled_preamble ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ErubiTemplate](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ErubiTemplate)"
- name: Padrino::Rendering::ErubiTemplate#precompiled_preamble
  id: padrino/rendering/erubitemplate#precompiled_preamble-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Rendering::ErubiTemplate
  description: "### \\#precompiled_preamble ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ErubiTemplate](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ErubiTemplate)"
- name: Padrino::Rendering::HamlitOutputBuffer
  id: padrino/rendering/hamlitoutputbuffer
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Padrino::Rendering::HamlitOutputBuffer\n\nInherits:  \nTemple::Generators::StringBuffer\n\n- [Object](../../object \"Object (class)\")\n- Temple::Generators::StringBuffer\n- Padrino::Rendering::HamlitOutputBuffer\n\n## Instance Method Summary\n\n- [`#`**`call`**`(exp) ⇒ Object`](hamlitoutputbuffer#call-instance_method \"#call (instance method)\")\n- [`#`**`concat`**`(str) ⇒ Object`](hamlitoutputbuffer#concat-instance_method \"#concat (instance method)\")\n- [`#`**`create_buffer`**` ⇒ Object`](hamlitoutputbuffer#create_buffer-instance_method \"#create_buffer (instance method)\")\n\n## Instance Method Details\n\n### \\#call(exp) ⇒ Object\n\n### \\#concat(str) ⇒ Object\n\n### \\#create_buffer ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/HamlitOutputBuffer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/HamlitOutputBuffer)"
- name: Padrino::Rendering::HamlitOutputBuffer#call
  id: padrino/rendering/hamlitoutputbuffer#call-instance_method
  summary: null
  belongs_to: Padrino::Rendering::HamlitOutputBuffer
  description: '### \#call(exp) ⇒ Object'
- name: Padrino::Rendering::HamlitOutputBuffer#concat
  id: padrino/rendering/hamlitoutputbuffer#concat-instance_method
  summary: null
  belongs_to: Padrino::Rendering::HamlitOutputBuffer
  description: '### \#concat(str) ⇒ Object'
- name: Padrino::Rendering::HamlitOutputBuffer#create_buffer
  id: padrino/rendering/hamlitoutputbuffer#create_buffer-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Rendering::HamlitOutputBuffer
  description: "### \\#create_buffer ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/HamlitOutputBuffer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/HamlitOutputBuffer)"
- name: Padrino::Rendering::HamlitTemplate
  id: padrino/rendering/hamlittemplate
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Padrino::Rendering::HamlitTemplate\n\nInherits:  \nHamlit::Template\n\n- [Object](../../object \"Object (class)\")\n- Hamlit::Template\n- Padrino::Rendering::HamlitTemplate\n\nIncludes:  \n[SafeTemplate](safetemplate \"Padrino::Rendering::SafeTemplate (module)\")\n\n## Instance Method Summary\n\n- [`#`**`precompiled_preamble`**`(locals) ⇒ Object`](hamlittemplate#precompiled_preamble-instance_method \"#precompiled_preamble (instance method)\")\n\n### Methods included from SafeTemplate\n\n[\\#render](safetemplate#render-instance_method \"Padrino::Rendering::SafeTemplate#render (method)\")\n\n## Instance Method Details\n\n### \\#precompiled_preamble(locals) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/HamlitTemplate](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/HamlitTemplate)"
- name: Padrino::Rendering::HamlitTemplate#precompiled_preamble
  id: padrino/rendering/hamlittemplate#precompiled_preamble-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Rendering::HamlitTemplate
  description: "### \\#precompiled_preamble(locals) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/HamlitTemplate](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/HamlitTemplate)"
- name: Padrino::Rendering::HamlTemplate
  id: padrino/rendering/hamltemplate
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Padrino::Rendering::HamlTemplate\n\nInherits:  \nTilt::HamlTemplate\n\n- [Object](../../object \"Object (class)\")\n- Tilt::HamlTemplate\n- Padrino::Rendering::HamlTemplate\n\nIncludes:  \n[SafeTemplate](safetemplate \"Padrino::Rendering::SafeTemplate (module)\")\n\n## Method Summary\n\n### Methods included from SafeTemplate\n\n[\\#render](safetemplate#render-instance_method \"Padrino::Rendering::SafeTemplate#render (method)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/HamlTemplate](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/HamlTemplate)"
- name: Padrino::Rendering::InstanceMethods
  id: padrino/rendering/instancemethods
  summary: Instance methods that allow enhanced rendering to function properly in Padrino
  description: "# Module: Padrino::Rendering::InstanceMethods\n\n## Overview\n\nInstance methods that allow enhanced rendering to function properly in Padrino.\n\n## Instance Attribute Summary\n\n- [`#`**`current_engine`**` ⇒ Object`](instancemethods#current_engine-instance_method \"#current_engine (instance method)\") readonly Returns the value of attribute current_engine.\n\n## Instance Method Summary\n\n- [`#`**`content_type`**`(type = nil, params = {}) ⇒ Object`](instancemethods#content_type-instance_method \"#content_type (instance method)\") Get/Set the content_type.\n\n## Instance Attribute Details\n\n### \\#current_engine ⇒ Object (readonly)\n\nReturns the value of attribute current_engine\n\n## Instance Method Details\n\n### \\#content_type(type = nil, params = {}) ⇒ Object\n\nGet/Set the content_type\n\n#### Examples:\n\n``` ruby\ncase content_type\n  when :js then do_some\n  when :css then do_another\nend\n\ncontent_type :js\n# => set the response with 'application/javascript' Content-Type\ncontent_type 'text/html'\n\n# => set directly the Content-Type to 'text/html'\n```\n\n#### Parameters:\n\n- `type` ([`String`](../../string \"String (class)\"), `nil`) *(defaults to: `nil`)* — The Content-Type to use.\n- `type.` (`Symbol`, `nil`) — Look and parse the given symbol to the matched Content-Type.\n- `params` (`Hash`) *(defaults to: `{}`)* — Additional params to append to the Content-Type.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/InstanceMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/InstanceMethods)"
- name: Padrino::Rendering::InstanceMethods#content_type
  id: padrino/rendering/instancemethods#content_type-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Rendering::InstanceMethods
  description: "### \\#content_type(type = nil, params = {}) ⇒ Object\n\nGet/Set the content_type\n\n#### Examples:\n\n``` ruby\ncase content_type\n  when :js then do_some\n  when :css then do_another\nend\n\ncontent_type :js\n# => set the response with 'application/javascript' Content-Type\ncontent_type 'text/html'\n\n# => set directly the Content-Type to 'text/html'\n```\n\n#### Parameters:\n\n- `type`([`String`](../../string \"String (class)\"), `nil`)*(defaults to: `nil`)* — The Content-Type to use.\n- `type.`(`Symbol`, `nil`) — Look and parse the given symbol to the matched Content-Type.\n- `params`(`Hash`)*(defaults to: `{}`)* — Additional params to append to the Content-Type.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/InstanceMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/InstanceMethods)"
- name: Padrino::Rendering::InstanceMethods#current_engine
  id: padrino/rendering/instancemethods#current_engine-instance_method
  summary: null
  belongs_to: Padrino::Rendering::InstanceMethods
  description: |-
    ### \#current_engine ⇒ Object (readonly)

    Returns the value of attribute current_engine

    ## Instance Method Details
- name: Padrino::Rendering::SafeBufferEnhancer
  id: padrino/rendering/safebufferenhancer
  summary: This module is part of a private API
  description: "# Module: Padrino::Rendering::SafeBufferEnhancer\n\nIncluded in:  \n[SafeEruby](safeeruby \"Padrino::Rendering::SafeEruby (class)\")\n\n## Overview\n\n**This module is part of a private API.** You should avoid using this module if possible, as it may be removed or be changed in the future.\n\nSafeBufferEnhancer is an Erubis Enhancer that compiles templates that are fit for using SafeBuffer as a Buffer.\n\n## Instance Method Summary\n\n- [`#`**`add_expr_escaped`**`(src, code) ⇒ Object`](safebufferenhancer#add_expr_escaped-instance_method \"#add_expr_escaped (instance method)\") private\n- [`#`**`add_expr_literal`**`(src, code) ⇒ Object`](safebufferenhancer#add_expr_literal-instance_method \"#add_expr_literal (instance method)\") private\n- [`#`**`add_stmt`**`(src, code) ⇒ Object`](safebufferenhancer#add_stmt-instance_method \"#add_stmt (instance method)\") private\n- [`#`**`add_text`**`(src, text) ⇒ Object`](safebufferenhancer#add_text-instance_method \"#add_text (instance method)\") private\n\n## Instance Method Details\n\n### \\#add_expr_escaped(src, code) ⇒ Object\n\n**This method is part of a private API.** You should avoid using this method if possible, as it may be removed or be changed in the future.\n\n### \\#add_expr_literal(src, code) ⇒ Object\n\n**This method is part of a private API.** You should avoid using this method if possible, as it may be removed or be changed in the future.\n\n### \\#add_stmt(src, code) ⇒ Object\n\n**This method is part of a private API.** You should avoid using this method if possible, as it may be removed or be changed in the future.\n\n### \\#add_text(src, text) ⇒ Object\n\n**This method is part of a private API.** You should avoid using this method if possible, as it may be removed or be changed in the future.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeBufferEnhancer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeBufferEnhancer)"
- name: Padrino::Rendering::SafeBufferEnhancer#add_expr_escaped
  id: padrino/rendering/safebufferenhancer#add_expr_escaped-instance_method
  summary: This method is part of a private API
  belongs_to: Padrino::Rendering::SafeBufferEnhancer
  description: |-
    ### \#add_expr_escaped(src, code) ⇒ Object

    **This method is part of a private API.** You should avoid using this method if possible, as it may be removed or be changed in the future.
- name: Padrino::Rendering::SafeBufferEnhancer#add_expr_literal
  id: padrino/rendering/safebufferenhancer#add_expr_literal-instance_method
  summary: This method is part of a private API
  belongs_to: Padrino::Rendering::SafeBufferEnhancer
  description: |-
    ### \#add_expr_literal(src, code) ⇒ Object

    **This method is part of a private API.** You should avoid using this method if possible, as it may be removed or be changed in the future.
- name: Padrino::Rendering::SafeBufferEnhancer#add_stmt
  id: padrino/rendering/safebufferenhancer#add_stmt-instance_method
  summary: This method is part of a private API
  belongs_to: Padrino::Rendering::SafeBufferEnhancer
  description: |-
    ### \#add_stmt(src, code) ⇒ Object

    **This method is part of a private API.** You should avoid using this method if possible, as it may be removed or be changed in the future.
- name: Padrino::Rendering::SafeBufferEnhancer#add_text
  id: padrino/rendering/safebufferenhancer#add_text-instance_method
  summary: This method is part of a private API
  belongs_to: Padrino::Rendering::SafeBufferEnhancer
  description: "### \\#add_text(src, text) ⇒ Object\n\n**This method is part of a private API.** You should avoid using this method if possible, as it may be removed or be changed in the future.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeBufferEnhancer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeBufferEnhancer)"
- name: Padrino::Rendering::SafeERB
  id: padrino/rendering/safeerb
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Padrino::Rendering::SafeERB\n\nInherits:  \nERB\n\n- [Object](../../object \"Object (class)\")\n- ERB\n- Padrino::Rendering::SafeERB\n\n## Defined Under Namespace\n\n**Classes:** [Compiler](safeerb/compiler \"Padrino::Rendering::SafeERB::Compiler (class)\")\n\n## Instance Method Summary\n\n- [`#`**`make_compiler`**`(trim_mode) ⇒ Object`](safeerb#make_compiler-instance_method \"#make_compiler (instance method)\")\n- [`#`**`set_eoutvar`**`(compiler, eoutvar = '_erbout') ⇒ Object`](safeerb#set_eoutvar-instance_method \"#set_eoutvar (instance method)\")\n\n## Instance Method Details\n\n### \\#make_compiler(trim_mode) ⇒ Object\n\n### \\#set_eoutvar(compiler, eoutvar = '\\_erbout') ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeERB](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeERB)"
- name: Padrino::Rendering::SafeERB#make_compiler
  id: padrino/rendering/safeerb#make_compiler-instance_method
  summary: null
  belongs_to: Padrino::Rendering::SafeERB
  description: '### \#make_compiler(trim_mode) ⇒ Object'
- name: Padrino::Rendering::SafeERB#set_eoutvar
  id: padrino/rendering/safeerb#set_eoutvar-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Rendering::SafeERB
  description: "### \\#set_eoutvar(compiler, eoutvar = '\\_erbout') ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeERB](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeERB)"
- name: Padrino::Rendering::SafeERB::Compiler
  id: padrino/rendering/safeerb/compiler
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Padrino::Rendering::SafeERB::Compiler\n\nInherits:  \nERB::Compiler\n\n- [Object](../../../object \"Object (class)\")\n- ERB::Compiler\n- Padrino::Rendering::SafeERB::Compiler\n\n## Instance Method Summary\n\n- [`#`**`add_insert_cmd`**`(out, content) ⇒ Object`](compiler#add_insert_cmd-instance_method \"#add_insert_cmd (instance method)\")\n\n## Instance Method Details\n\n### \\#add_insert_cmd(out, content) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeERB/Compiler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeERB/Compiler)"
- name: Padrino::Rendering::SafeERB::Compiler#add_insert_cmd
  id: padrino/rendering/safeerb/compiler#add_insert_cmd-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Rendering::SafeERB::Compiler
  description: "### \\#add_insert_cmd(out, content) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeERB/Compiler](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeERB/Compiler)"
- name: Padrino::Rendering::SafeErubi
  id: padrino/rendering/safeerubi
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Padrino::Rendering::SafeErubi\n\nInherits:  \nErubi::Engine\n\n- [Object](../../object \"Object (class)\")\n- Erubi::Engine\n- Padrino::Rendering::SafeErubi\n\nIncludes:  \n[Erubi::SafeBufferEnhancer](erubi/safebufferenhancer \"Padrino::Rendering::Erubi::SafeBufferEnhancer (module)\")\n\n## Method Summary\n\n### Methods included from Erubi::SafeBufferEnhancer\n\n[\\#add_expression_result](erubi/safebufferenhancer#add_expression_result-instance_method \"Padrino::Rendering::Erubi::SafeBufferEnhancer#add_expression_result (method)\"), [\\#add_expression_result_escaped](erubi/safebufferenhancer#add_expression_result_escaped-instance_method \"Padrino::Rendering::Erubi::SafeBufferEnhancer#add_expression_result_escaped (method)\"), [\\#add_text](erubi/safebufferenhancer#add_text-instance_method \"Padrino::Rendering::Erubi::SafeBufferEnhancer#add_text (method)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeErubi](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeErubi)"
- name: Padrino::Rendering::SafeEruby
  id: padrino/rendering/safeeruby
  summary: This class is part of a private API
  description: "# Class: Padrino::Rendering::SafeEruby\n\nInherits:  \nErubis::Eruby\n\n- [Object](../../object \"Object (class)\")\n- Erubis::Eruby\n- Padrino::Rendering::SafeEruby\n\nIncludes:  \n[SafeBufferEnhancer](safebufferenhancer \"Padrino::Rendering::SafeBufferEnhancer (module)\")\n\n## Overview\n\n**This class is part of a private API.** You should avoid using this class if possible, as it may be removed or be changed in the future.\n\nSafeBufferTemplate is the Eruby engine, augmented with SafeBufferEnhancer.\n\n## Method Summary\n\n### Methods included from SafeBufferEnhancer\n\n[\\#add_expr_escaped](safebufferenhancer#add_expr_escaped-instance_method \"Padrino::Rendering::SafeBufferEnhancer#add_expr_escaped (method)\"), [\\#add_expr_literal](safebufferenhancer#add_expr_literal-instance_method \"Padrino::Rendering::SafeBufferEnhancer#add_expr_literal (method)\"), [\\#add_stmt](safebufferenhancer#add_stmt-instance_method \"Padrino::Rendering::SafeBufferEnhancer#add_stmt (method)\"), [\\#add_text](safebufferenhancer#add_text-instance_method \"Padrino::Rendering::SafeBufferEnhancer#add_text (method)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeEruby](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeEruby)"
- name: Padrino::Rendering::SafeTemplate
  id: padrino/rendering/safetemplate
  summary: A SafeTemplate assumes that its output is safe
  description: "# Module: Padrino::Rendering::SafeTemplate\n\nIncluded in:  \n[HamlTemplate](hamltemplate \"Padrino::Rendering::HamlTemplate (class)\"), [HamlitTemplate](hamlittemplate \"Padrino::Rendering::HamlitTemplate (class)\"), [SlimTemplate](slimtemplate \"Padrino::Rendering::SlimTemplate (class)\")\n\n## Overview\n\nA SafeTemplate assumes that its output is safe.\n\n## Instance Method Summary\n\n- [`#`**`render`**` ⇒ Object`](safetemplate#render-instance_method \"#render (instance method)\")\n\n## Instance Method Details\n\n### \\#render ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeTemplate](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeTemplate)"
- name: Padrino::Rendering::SafeTemplate#render
  id: padrino/rendering/safetemplate#render-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Rendering::SafeTemplate
  description: "### \\#render ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeTemplate](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeTemplate)"
- name: Padrino::Rendering::SlimOutputBuffer
  id: padrino/rendering/slimoutputbuffer
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Padrino::Rendering::SlimOutputBuffer\n\nInherits:  \nTemple::Generators::StringBuffer\n\n- [Object](../../object \"Object (class)\")\n- Temple::Generators::StringBuffer\n- Padrino::Rendering::SlimOutputBuffer\n\n## Instance Method Summary\n\n- [`#`**`call`**`(exp) ⇒ Object`](slimoutputbuffer#call-instance_method \"#call (instance method)\")\n- [`#`**`concat`**`(str) ⇒ Object`](slimoutputbuffer#concat-instance_method \"#concat (instance method)\")\n- [`#`**`create_buffer`**` ⇒ Object`](slimoutputbuffer#create_buffer-instance_method \"#create_buffer (instance method)\")\n\n## Instance Method Details\n\n### \\#call(exp) ⇒ Object\n\n### \\#concat(str) ⇒ Object\n\n### \\#create_buffer ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SlimOutputBuffer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SlimOutputBuffer)"
- name: Padrino::Rendering::SlimOutputBuffer#call
  id: padrino/rendering/slimoutputbuffer#call-instance_method
  summary: null
  belongs_to: Padrino::Rendering::SlimOutputBuffer
  description: '### \#call(exp) ⇒ Object'
- name: Padrino::Rendering::SlimOutputBuffer#concat
  id: padrino/rendering/slimoutputbuffer#concat-instance_method
  summary: null
  belongs_to: Padrino::Rendering::SlimOutputBuffer
  description: '### \#concat(str) ⇒ Object'
- name: Padrino::Rendering::SlimOutputBuffer#create_buffer
  id: padrino/rendering/slimoutputbuffer#create_buffer-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Rendering::SlimOutputBuffer
  description: "### \\#create_buffer ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SlimOutputBuffer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SlimOutputBuffer)"
- name: Padrino::Rendering::SlimTemplate
  id: padrino/rendering/slimtemplate
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Padrino::Rendering::SlimTemplate\n\nInherits:  \nSlim::Template\n\n- [Object](../../object \"Object (class)\")\n- Slim::Template\n- Padrino::Rendering::SlimTemplate\n\nIncludes:  \n[SafeTemplate](safetemplate \"Padrino::Rendering::SafeTemplate (module)\")\n\n## Instance Method Summary\n\n- [`#`**`precompiled_preamble`**`(locals) ⇒ Object`](slimtemplate#precompiled_preamble-instance_method \"#precompiled_preamble (instance method)\")\n\n### Methods included from SafeTemplate\n\n[\\#render](safetemplate#render-instance_method \"Padrino::Rendering::SafeTemplate#render (method)\")\n\n## Instance Method Details\n\n### \\#precompiled_preamble(locals) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SlimTemplate](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SlimTemplate)"
- name: Padrino::Rendering::SlimTemplate#precompiled_preamble
  id: padrino/rendering/slimtemplate#precompiled_preamble-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Rendering::SlimTemplate
  description: "### \\#precompiled_preamble(locals) ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SlimTemplate](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SlimTemplate)"
- name: Padrino::Rendering::TemplateNotFound
  id: padrino/rendering/templatenotfound
  summary: Exception responsible for when an expected template did not exist
  description: "# Exception: Padrino::Rendering::TemplateNotFound\n\nInherits:  \nRuntimeError\n\n- [Object](../../object \"Object (class)\")\n- RuntimeError\n- Padrino::Rendering::TemplateNotFound\n\n## Overview\n\nException responsible for when an expected template did not exist.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/TemplateNotFound](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/TemplateNotFound)"
- name: Padrino::Router
  id: padrino/router
  summary: This class is an extended version of Rack::URLMap
  description: "# Class: Padrino::Router\n\nInherits:  \n[Object](../object \"Object (class)\")\n\n- [Object](../object \"Object (class)\")\n- Padrino::Router\n\n## Overview\n\nThis class is an extended version of Rack::URLMap.\n\nPadrino::Router like Rack::URLMap dispatches in such a way that the longest paths are tried first, since they are most specific.\n\nFeatures:\n\n- Map a path to the specified App\n\n- Ignore server names (this solve issues with vhost and domain aliases)\n\n- Use hosts instead of server name for mappings (this help us with our vhost and domain aliases)\n\n#### Examples:\n\n``` ruby\nroutes = Padrino::Router.new do\n  map(:path => \"/\", :to => PadrinoWeb, :host => \"padrino.local\")\n  map(:path => \"/\", :to => Admin, :host => \"admin.padrino.local\")\nend\nrun routes\n\nroutes = Padrino::Router.new do\n  map(:path => \"/\", :to => PadrinoWeb, :host => /*.padrino.local/)\nend\nrun routes\n```\n\n## Instance Method Summary\n\n- [`#`**`call`**`(env) ⇒ Object`](router#call-instance_method \"#call (instance method)\") The call handler setup to route a request given the mappings specified.\n- [`#`**`initialize`**`(*mapping, &block) ⇒ Router`](router#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of Router.\n- [`#`**`map`**`(options = {}) ⇒ Array`](router#map-instance_method \"#map (instance method)\") Map a route path and host to a specified application.\n\n## Constructor Details\n\n### \\#initialize(\\*mapping, &block) ⇒ Router\n\nReturns a new instance of Router.\n\n## Instance Method Details\n\n### \\#call(env) ⇒ Object\n\nThe call handler setup to route a request given the mappings specified.\n\n### \\#map(options = {}) ⇒ Array\n\nMap a route path and host to a specified application.\n\n#### Examples:\n\n``` ruby\nmap(:path => \"/\", :to => PadrinoWeb, :host => \"padrino.local\")\n```\n\n#### Parameters:\n\n- `options` (`Hash`) *(defaults to: `{}`)* — The options to map.\n\n#### Options Hash (`options`):\n\n- `:to` (`Sinatra::Application`) — The class of the application to mount.\n- `:path` ([`String`](../string \"String (class)\")) — default: `\"/\"` — The path to map the specified application.\n- `:host` ([`String`](../string \"String (class)\")) — The host to map the specified application.\n\n#### Returns:\n\n- (`Array`) — The sorted route mappings.\n\n#### Raises:\n\n- (`ArgumentError`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Router](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Router)"
- name: Padrino::Router#call
  id: padrino/router#call-instance_method
  summary: The call handler setup to route a request given the mappings specified
  belongs_to: Padrino::Router
  description: |-
    ### \#call(env) ⇒ Object

    The call handler setup to route a request given the mappings specified.
- name: Padrino::Router#initialize
  id: padrino/router#initialize-instance_method
  summary: Returns a new instance of Router
  belongs_to: Padrino::Router
  description: |-
    ### \#initialize(\*mapping, &block) ⇒ Router

    Returns a new instance of Router.

    ## Instance Method Details
- name: Padrino::Router#map
  id: padrino/router#map-instance_method
  summary: Map a route path and host to a specified application
  belongs_to: Padrino::Router
  description: "### \\#map(options = {}) ⇒ Array\n\nMap a route path and host to a specified application.\n\n#### Examples:\n\n``` ruby\nmap(:path => \"/\", :to => PadrinoWeb, :host => \"padrino.local\")\n```\n\n#### Parameters:\n\n- `options`(`Hash`)*(defaults to: `{}`)* — The options to map.\n\n#### Options Hash (`options`):\n\n- `:to`(`Sinatra::Application`) — The class of the application to mount.\n- `:path`([`String`](../string \"String (class)\")) — default: `\"/\"` — The path to map the specified application.\n- `:host`([`String`](../string \"String (class)\")) — The host to map the specified application.\n\n#### Returns:\n\n- (`Array`) — The sorted route mappings.\n\n#### Raises:\n\n- (`ArgumentError`)\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Router](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Router)"
- name: Padrino::Routing
  id: padrino/routing
  summary: Padrino provides advanced routing definition support to make routes and url generation much easier
  description: "# Module: Padrino::Routing\n\n## Overview\n\nPadrino provides advanced routing definition support to make routes and url generation much easier. This routing system supports named route aliases and easy access to url paths. The benefits of this is that instead of having to hard-code route urls into every area of your application, now we can just define the urls in a single spot and then attach an alias which can be used to refer to the url throughout the application.\n\n## Defined Under Namespace\n\n**Modules:** [ClassMethods](routing/classmethods \"Padrino::Routing::ClassMethods (module)\"), [InstanceMethods](routing/instancemethods \"Padrino::Routing::InstanceMethods (module)\") **Classes:** [BlockArityError](routing/blockarityerror \"Padrino::Routing::BlockArityError (class)\"), [Parent](routing/parent \"Padrino::Routing::Parent (class)\"), [UnrecognizedException](routing/unrecognizedexception \"Padrino::Routing::UnrecognizedException (class)\")\n\n## Constant Summary [collapse](#)\n\nCONTENT_TYPE_ALIASES =\n\nDefines common content-type alias mappings.\n\n``` ruby\n{ :htm => :html }\n```\n\nROUTE_PRIORITY =\n\nDefines the available route priorities supporting route deferrals.\n\n``` ruby\n{:high => 0, :normal => 1, :low => 2}\n```\n\n## Class Method Summary\n\n- [`.`**`registered`**`(app) ⇒ Object`](routing#registered-class_method \"registered (class method)\")` (also: included)` Main class that register this extension.\n\n## Class Method Details\n\n### .registered(app) ⇒ Object Also known as: included\n\nMain class that register this extension.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing)"
- name: Padrino::Routing.registered
  id: padrino/routing#registered-class_method
  summary: Main class that register this extension
  belongs_to: Padrino::Routing
  description: "### .registered(app) ⇒ Object Also known as: included\n\nMain class that register this extension.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing)"
- name: Padrino::Routing::BlockArityError
  id: padrino/routing/blockarityerror
  summary: Raised when block arity was nonzero and was not same with captured parameter length
  description: "# Exception: Padrino::Routing::BlockArityError\n\nInherits:  \nArgumentError\n\n- [Object](../../object \"Object (class)\")\n- ArgumentError\n- Padrino::Routing::BlockArityError\n\n## Overview\n\nRaised when block arity was nonzero and was not same with captured parameter length.\n\n## Instance Method Summary\n\n- [`#`**`initialize`**`(path, block_arity, required_arity) ⇒ BlockArityError`](blockarityerror#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of BlockArityError.\n\n## Constructor Details\n\n### \\#initialize(path, block_arity, required_arity) ⇒ BlockArityError\n\nReturns a new instance of BlockArityError.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/BlockArityError](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/BlockArityError)"
- name: Padrino::Routing::BlockArityError#initialize
  id: padrino/routing/blockarityerror#initialize-instance_method
  summary: Returns a new instance of BlockArityError
  belongs_to: Padrino::Routing::BlockArityError
  description: "### \\#initialize(path, block_arity, required_arity) ⇒ BlockArityError\n\nReturns a new instance of BlockArityError.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/BlockArityError](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/BlockArityError)"
- name: Padrino::Routing::ClassMethods
  id: padrino/routing/classmethods
  summary: Class methods responsible for enhanced routing for controllers
  description: "# Module: Padrino::Routing::ClassMethods\n\n## Overview\n\nClass methods responsible for enhanced routing for controllers.\n\n## Instance Method Summary\n\n- [`#`**`absolute_url`**`(*args) ⇒ Object`](classmethods#absolute_url-instance_method \"#absolute_url (instance method)\") Returns absolute url.\n- [`#`**`add_filter`**`(type, &block) ⇒ Object`](classmethods#add_filter-instance_method \"#add_filter (instance method)\") Adds a filter hook to a request.\n- [`#`**`after`**`(*args, &block) ⇒ Object`](classmethods#after-instance_method \"#after (instance method)\") Add an after filter hook.\n- [`#`**`before`**`(*args, &block) ⇒ Object`](classmethods#before-instance_method \"#before (instance method)\") Add a before filter hook.\n- [`#`**`compiled_router`**` ⇒ Object`](classmethods#compiled_router-instance_method \"#compiled_router (instance method)\")\n- [`#`**`construct_filter`**`(*args, &block) ⇒ Object`](classmethods#construct_filter-instance_method \"#construct_filter (instance method)\") Creates a filter to process before/after the matching route.\n- [`#`**`controller`**`(*args) { ... } ⇒ Object`](classmethods#controller-instance_method \"#controller (instance method)\")` (also: #controllers)` Method to organize our routes in a better way.\n- [`#`**`deferred_routes`**` ⇒ Object`](classmethods#deferred_routes-instance_method \"#deferred_routes (instance method)\")\n- [`#`**`delete`**`(path, *args, &block) ⇒ Object`](classmethods#delete-instance_method \"#delete (instance method)\")\n- [`#`**`get`**`(path, *args, &block) ⇒ Object`](classmethods#get-instance_method \"#get (instance method)\")\n- [`#`**`head`**`(path, *args, &block) ⇒ Object`](classmethods#head-instance_method \"#head (instance method)\")\n- [`#`**`link`**`(path, *args, &block) ⇒ Object`](classmethods#link-instance_method \"#link (instance method)\")\n- [`#`**`options`**`(path, *args, &block) ⇒ Object`](classmethods#options-instance_method \"#options (instance method)\")\n- [`#`**`parent`**`(name = nil, options = {}) ⇒ Object`](classmethods#parent-instance_method \"#parent (instance method)\") Provides many parents with shallowing.\n- [`#`**`patch`**`(path, *args, &block) ⇒ Object`](classmethods#patch-instance_method \"#patch (instance method)\")\n- [`#`**`post`**`(path, *args, &block) ⇒ Object`](classmethods#post-instance_method \"#post (instance method)\")\n- [`#`**`process_path_for_parent_params`**`(path, parent_params) ⇒ Object`](classmethods#process_path_for_parent_params-instance_method \"#process_path_for_parent_params (instance method)\") Processes the existing path and prepends the 'parent' parameters onto the route Used for calculating path in route method.\n- [`#`**`put`**`(path, *args, &block) ⇒ Object`](classmethods#put-instance_method \"#put (instance method)\")\n- [`#`**`rebase_url`**`(url) ⇒ Object`](classmethods#rebase_url-instance_method \"#rebase_url (instance method)\")\n- [`#`**`recognize_path`**`(path) ⇒ Symbol, Hash`](classmethods#recognize_path-instance_method \"#recognize_path (instance method)\") Recognize a given path.\n- [`#`**`reset_router!`**` ⇒ Object`](classmethods#reset_router!-instance_method \"#reset_router! (instance method)\")\n- [`#`**`router`**` ⇒ Object`](classmethods#router-instance_method \"#router (instance method)\")` (also: #urls)` Using PathRouter, for features and configurations.\n- [`#`**`unlink`**`(path, *args, &block) ⇒ Object`](classmethods#unlink-instance_method \"#unlink (instance method)\")\n- [`#`**`url`**`(*args) ⇒ Object`](classmethods#url-instance_method \"#url (instance method)\")` (also: #url_for)` Instance method for url generation.\n\n## Instance Method Details\n\n### \\#absolute_url(\\*args) ⇒ Object\n\nReturns absolute url. By default adds '[localhost](http://localhost)' before generated url. To change that \\`set :base_url, '[example.com](http://example.com)'\\` in your app.\n\n### \\#add_filter(type, &block) ⇒ Object\n\nAdds a filter hook to a request.\n\n### \\#after(\\*args, &block) ⇒ Object\n\nAdd an after filter hook.\n\n#### See Also:\n\n- [\\#construct_filter](classmethods#construct_filter-instance_method \"Padrino::Routing::ClassMethods#construct_filter (method)\")\n\n### \\#before(\\*args, &block) ⇒ Object\n\nAdd a before filter hook.\n\n#### See Also:\n\n- [\\#construct_filter](classmethods#construct_filter-instance_method \"Padrino::Routing::ClassMethods#construct_filter (method)\")\n\n### \\#compiled_router ⇒ Object\n\n### \\#construct_filter(\\*args, &block) ⇒ Object\n\nCreates a filter to process before/after the matching route.\n\n#### Examples:\n\nWe are be able to filter with String path\n\n``` ruby\nbefore('/') { 'only to :index' }\nget(:index} { 'foo' } # => filter match only before this.\nget(:main) { 'bar' }\n```\n\nis the same of\n\n``` ruby\nbefore(:index) { 'only to :index' }\nget(:index} { 'foo' } # => filter match only before this.\nget(:main) { 'bar' }\n```\n\nit works only for the given controller\n\n``` ruby\ncontroller :foo do\n  before(:index) { 'only to for :foo_index' }\n  get(:index} { 'foo' } # => filter match only before this.\n  get(:main) { 'bar' }\nend\n\ncontroller :bar do\n  before(:index) { 'only to for :bar_index' }\n  get(:index} { 'foo' } # => filter match only before this.\n  get(:main) { 'bar' }\nend\n```\n\nif filters based on a symbol or regexp\n\n``` ruby\nbefore :index, /main/ do; ... end\n# => match only path that are  +/+ or contains +main+\n```\n\nfiltering everything except an occurrence\n\n``` ruby\nbefore :except => :index do; ...; end\n```\n\nyou can also filter using a request param\n\n``` ruby\nbefore :agent => /IE/ do; ...; end\n# => match +HTTP_USER_AGENT+ containing +IE+\n```\n\n#### Parameters:\n\n- `args` (`Array`)\n\n#### See Also:\n\n- [http://padrinorb.com/guides/controllers/route-filters/](http://padrinorb.com/guides/controllers/route-filters/ \"http://padrinorb.com/guides/controllers/route-filters/\")\n\n### \\#controller(\\*args) { ... } ⇒ Object Also known as: controllers\n\nMethod to organize our routes in a better way.\n\nIn a controller, before and after filters are scoped and don't\n\n``` ruby\naffect other controllers or the main app.\n```\n\nIn a controller, layouts are scoped and don't affect other\n\n``` ruby\ncontrollers or the main app.\n```\n\n#### Examples:\n\n``` ruby\ncontroller :admin do\n  get :index do; ...; end\n  get :show, :with => :id  do; ...; end\nend\n\nurl(:admin_index) # => \"/admin\"\nurl(:admin_show, :id => 1) # \"/admin/show/1\"\n```\n\nUsing named routes follow the sinatra way:\n\n``` ruby\ncontroller \"/admin\" do\n  get \"/index\" do; ...; end\n  get \"/show/:id\" do; ...; end\nend\n```\n\nSupply `:provides` to all controller routes:\n\n``` ruby\ncontroller :provides => [:html, :xml, :json] do\n  get :index do; \"respond to html, xml and json\"; end\n  post :index do; \"respond to html, xml and json\"; end\n  get :foo do; \"respond to html, xml and json\"; end\nend\n```\n\nSpecify parent resources in padrino with the `:parent` option on the controller:\n\n``` ruby\ncontrollers :product, :parent => :user do\n  get :index do\n    # url is generated as \"/user/#{params[:user_id]}/product\"\n    # url_for(:product, :index, :user_id => 5) => \"/user/5/product\"\n  end\n  get :show, :with => :id do\n    # url is generated as \"/user/#{params[:user_id]}/product/show/#{params[:id]}\"\n    # url_for(:product, :show, :user_id => 5, :id => 10) => \"/user/5/product/show/10\"\n  end\nend\n```\n\nSpecify conditions to run for all routes:\n\n``` ruby\ncontroller :conditions => {:protect => true} do\n  def self.protect(protected)\n    condition do\n      halt 403, \"No secrets for you!\" unless params[:key] == \"s3cr3t\"\n    end if protected\n  end\n\n  # This route will only return \"secret stuff\" if the user goes to\n  # `/private?key=s3cr3t`.\n  get(\"/private\") { \"secret stuff\" }\n\n  # And this one, too!\n  get(\"/also-private\") { \"secret stuff\" }\n\n  # But you can override the conditions for each route as needed.\n  # This route will be publicly accessible without providing the\n  # secret key.\n  get :index, :protect => false do\n    \"Welcome!\"\n  end\nend\n```\n\nSupply default values:\n\n``` ruby\ncontroller :lang => :de do\n  get :index, :map => \"/:lang\" do; \"params[:lang] == :de\"; end\nend\n```\n\n``` ruby\ncontroller :posts do\n  layout :post\n  before { foo }\n  after  { bar }\nend\n```\n\n#### Parameters:\n\n- `args` (`Array`) — Controller arguments.\n\n#### Yields:\n\n- The given block will be used to define the routes within the Controller.\n\n### \\#deferred_routes ⇒ Object\n\n### \\#delete(path, \\*args, &block) ⇒ Object\n\n### \\#get(path, \\*args, &block) ⇒ Object\n\n### \\#head(path, \\*args, &block) ⇒ Object\n\n### \\#link(path, \\*args, &block) ⇒ Object\n\n### \\#options(path, \\*args, &block) ⇒ Object\n\n### \\#parent(name = nil, options = {}) ⇒ Object\n\nProvides many parents with shallowing.\n\n#### Examples:\n\n``` ruby\ncontrollers :product do\n  parent :shop, :optional => true, :map => \"/my/stand\"\n  parent :category, :optional => true\n  get :show, :with => :id do\n    # generated urls:\n    #   \"/product/show/#{params[:id]}\"\n    #   \"/my/stand/#{params[:shop_id]}/product/show/#{params[:id]}\"\n    #   \"/my/stand/#{params[:shop_id]}/category/#{params[:category_id]}/product/show/#{params[:id]}\"\n    # url_for(:product, :show, :id => 10) => \"/product/show/10\"\n    # url_for(:product, :show, :shop_id => 5, :id => 10) => \"/my/stand/5/product/show/10\"\n    # url_for(:product, :show, :shop_id => 5, :category_id => 1, :id => 10) => \"/my/stand/5/category/1/product/show/10\"\n  end\nend\n```\n\n#### Parameters:\n\n- `name` (`Symbol`) *(defaults to: `nil`)* — The parent name.\n- `options` (`Hash`) *(defaults to: `{}`)* — Additional options.\n\n### \\#patch(path, \\*args, &block) ⇒ Object\n\n### \\#post(path, \\*args, &block) ⇒ Object\n\n### \\#process_path_for_parent_params(path, parent_params) ⇒ Object\n\nProcesses the existing path and prepends the 'parent' parameters onto the route Used for calculating path in route method.\n\n### \\#put(path, \\*args, &block) ⇒ Object\n\n### \\#rebase_url(url) ⇒ Object\n\n### \\#recognize_path(path) ⇒ Symbol, Hash\n\nRecognize a given path.\n\n#### Examples:\n\nGiving a controller like:\n\n``` ruby\ncontroller :foo do\n  get :bar, :map => 'foo-bar-:id'; ...; end\nend\n```\n\nYou should be able to reverse:\n\n``` ruby\nMyApp.url(:foo_bar, :id => :mine)\n# => /foo-bar-mine\n```\n\nInto this:\n\n``` ruby\nMyApp.recognize_path('foo-bar-mine')\n# => [:foo_bar, :id => :mine]\n```\n\n#### Parameters:\n\n- `path` ([`String`](../../string \"String (class)\")) — Path+Query to parse\n\n#### Returns:\n\n- (`Symbol`, `Hash`) — Returns controller and query params.\n\n### \\#reset_router! ⇒ Object\n\n### \\#router ⇒ Object Also known as: urls\n\nUsing PathRouter, for features and configurations.\n\n#### Examples:\n\n``` ruby\nrouter.add('/greedy/:greed')\nrouter.recognize('/simple')\n```\n\n### \\#unlink(path, \\*args, &block) ⇒ Object\n\n### \\#url(\\*args) ⇒ Object Also known as: url_for\n\nInstance method for url generation.\n\n#### Examples:\n\n``` ruby\nurl(:show, :id => 1)\nurl(:show, :name => 'test', :id => 24)\nurl(:show, 1)\nurl(:controller_name, :show, :id => 21)\nurl(:controller_show, :id => 29)\nurl(:index, :fragment => 'comments')\n```\n\n#### Parameters:\n\n- `options` (`Hash`) — a customizable set of options\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/ClassMethods)"
- name: Padrino::Routing::ClassMethods#absolute_url
  id: padrino/routing/classmethods#absolute_url-instance_method
  summary: Returns absolute url
  belongs_to: Padrino::Routing::ClassMethods
  description: |-
    ### \#absolute_url(\*args) ⇒ Object

    Returns absolute url. By default adds '[localhost](http://localhost)' before generated url. To change that \`set :base_url, '[example.com](http://example.com)'\` in your app.
- name: Padrino::Routing::ClassMethods#add_filter
  id: padrino/routing/classmethods#add_filter-instance_method
  summary: Adds a filter hook to a request
  belongs_to: Padrino::Routing::ClassMethods
  description: |-
    ### \#add_filter(type, &block) ⇒ Object

    Adds a filter hook to a request.
- name: Padrino::Routing::ClassMethods#after
  id: padrino/routing/classmethods#after-instance_method
  summary: Add an after filter hook
  belongs_to: Padrino::Routing::ClassMethods
  description: |-
    ### \#after(\*args, &block) ⇒ Object

    Add an after filter hook.

    #### See Also:

    -  [\#construct_filter](classmethods#construct_filter-instance_method "Padrino::Routing::ClassMethods#construct_filter (method)")
- name: Padrino::Routing::ClassMethods#before
  id: padrino/routing/classmethods#before-instance_method
  summary: Add a before filter hook
  belongs_to: Padrino::Routing::ClassMethods
  description: |-
    ### \#before(\*args, &block) ⇒ Object

    Add a before filter hook.

    #### See Also:

    -  [\#construct_filter](classmethods#construct_filter-instance_method "Padrino::Routing::ClassMethods#construct_filter (method)")
- name: Padrino::Routing::ClassMethods#compiled_router
  id: padrino/routing/classmethods#compiled_router-instance_method
  summary: null
  belongs_to: Padrino::Routing::ClassMethods
  description: '### \#compiled_router ⇒ Object'
- name: Padrino::Routing::ClassMethods#construct_filter
  id: padrino/routing/classmethods#construct_filter-instance_method
  summary: Creates a filter to process before/after the matching route
  belongs_to: Padrino::Routing::ClassMethods
  description: |-
    ### \#construct_filter(\*args, &block) ⇒ Object

    Creates a filter to process before/after the matching route.

    #### Examples:

    We are be able to filter with String path

    ``` ruby
    before('/') { 'only to :index' }
    get(:index} { 'foo' } # => filter match only before this.
    get(:main) { 'bar' }
    ```

    is the same of

    ``` ruby
    before(:index) { 'only to :index' }
    get(:index} { 'foo' } # => filter match only before this.
    get(:main) { 'bar' }
    ```

    it works only for the given controller

    ``` ruby
    controller :foo do
      before(:index) { 'only to for :foo_index' }
      get(:index} { 'foo' } # => filter match only before this.
      get(:main) { 'bar' }
    end

    controller :bar do
      before(:index) { 'only to for :bar_index' }
      get(:index} { 'foo' } # => filter match only before this.
      get(:main) { 'bar' }
    end
    ```

    if filters based on a symbol or regexp

    ``` ruby
    before :index, /main/ do; ... end
    # => match only path that are  +/+ or contains +main+
    ```

    filtering everything except an occurrence

    ``` ruby
    before :except => :index do; ...; end
    ```

    you can also filter using a request param

    ``` ruby
    before :agent => /IE/ do; ...; end
    # => match +HTTP_USER_AGENT+ containing +IE+
    ```

    #### Parameters:

    - `args` (`Array`)

    #### See Also:

    - [http://padrinorb.com/guides/controllers/route-filters/](http://padrinorb.com/guides/controllers/route-filters/ "http://padrinorb.com/guides/controllers/route-filters/")
- name: Padrino::Routing::ClassMethods#controller
  id: padrino/routing/classmethods#controller-instance_method
  summary: Method to organize our routes in a better way
  belongs_to: Padrino::Routing::ClassMethods
  description: |-
    ### \#controller(\*args) { ... } ⇒ Object Also known as: controllers

    Method to organize our routes in a better way.

    In a controller, before and after filters are scoped and don't

    ``` ruby
    affect other controllers or the main app.
    ```

    In a controller, layouts are scoped and don't affect other

    ``` ruby
    controllers or the main app.
    ```

    #### Examples:

    ``` ruby
    controller :admin do
      get :index do; ...; end
      get :show, :with => :id  do; ...; end
    end

    url(:admin_index) # => "/admin"
    url(:admin_show, :id => 1) # "/admin/show/1"
    ```

    Using named routes follow the sinatra way:

    ``` ruby
    controller "/admin" do
      get "/index" do; ...; end
      get "/show/:id" do; ...; end
    end
    ```

    Supply `:provides` to all controller routes:

    ``` ruby
    controller :provides => [:html, :xml, :json] do
      get :index do; "respond to html, xml and json"; end
      post :index do; "respond to html, xml and json"; end
      get :foo do; "respond to html, xml and json"; end
    end
    ```

    Specify parent resources in padrino with the `:parent` option on the controller:

    ``` ruby
    controllers :product, :parent => :user do
      get :index do
        # url is generated as "/user/#{params[:user_id]}/product"
        # url_for(:product, :index, :user_id => 5) => "/user/5/product"
      end
      get :show, :with => :id do
        # url is generated as "/user/#{params[:user_id]}/product/show/#{params[:id]}"
        # url_for(:product, :show, :user_id => 5, :id => 10) => "/user/5/product/show/10"
      end
    end
    ```

    Specify conditions to run for all routes:

    ``` ruby
    controller :conditions => {:protect => true} do
      def self.protect(protected)
        condition do
          halt 403, "No secrets for you!" unless params[:key] == "s3cr3t"
        end if protected
      end

      # This route will only return "secret stuff" if the user goes to
      # `/private?key=s3cr3t`.
      get("/private") { "secret stuff" }

      # And this one, too!
      get("/also-private") { "secret stuff" }

      # But you can override the conditions for each route as needed.
      # This route will be publicly accessible without providing the
      # secret key.
      get :index, :protect => false do
        "Welcome!"
      end
    end
    ```

    Supply default values:

    ``` ruby
    controller :lang => :de do
      get :index, :map => "/:lang" do; "params[:lang] == :de"; end
    end
    ```

    ``` ruby
    controller :posts do
      layout :post
      before { foo }
      after  { bar }
    end
    ```

    #### Parameters:

    - `args`(`Array`) — Controller arguments.

    #### Yields:

    - The given block will be used to define the routes within the Controller.
- name: Padrino::Routing::ClassMethods#deferred_routes
  id: padrino/routing/classmethods#deferred_routes-instance_method
  summary: null
  belongs_to: Padrino::Routing::ClassMethods
  description: '### \#deferred_routes ⇒ Object'
- name: Padrino::Routing::ClassMethods#delete
  id: padrino/routing/classmethods#delete-instance_method
  summary: null
  belongs_to: Padrino::Routing::ClassMethods
  description: '### \#delete(path, \*args, &block) ⇒ Object'
- name: Padrino::Routing::ClassMethods#get
  id: padrino/routing/classmethods#get-instance_method
  summary: null
  belongs_to: Padrino::Routing::ClassMethods
  description: '### \#get(path, \*args, &block) ⇒ Object'
- name: Padrino::Routing::ClassMethods#head
  id: padrino/routing/classmethods#head-instance_method
  summary: null
  belongs_to: Padrino::Routing::ClassMethods
  description: '### \#head(path, \*args, &block) ⇒ Object'
- name: Padrino::Routing::ClassMethods#link
  id: padrino/routing/classmethods#link-instance_method
  summary: null
  belongs_to: Padrino::Routing::ClassMethods
  description: '### \#link(path, \*args, &block) ⇒ Object'
- name: Padrino::Routing::ClassMethods#options
  id: padrino/routing/classmethods#options-instance_method
  summary: null
  belongs_to: Padrino::Routing::ClassMethods
  description: '### \#options(path, \*args, &block) ⇒ Object'
- name: Padrino::Routing::ClassMethods#parent
  id: padrino/routing/classmethods#parent-instance_method
  summary: Provides many parents with shallowing
  belongs_to: Padrino::Routing::ClassMethods
  description: |-
    ### \#parent(name = nil, options = {}) ⇒ Object

    Provides many parents with shallowing.

    #### Examples:

    ``` ruby
    controllers :product do
      parent :shop, :optional => true, :map => "/my/stand"
      parent :category, :optional => true
      get :show, :with => :id do
        # generated urls:
        #   "/product/show/#{params[:id]}"
        #   "/my/stand/#{params[:shop_id]}/product/show/#{params[:id]}"
        #   "/my/stand/#{params[:shop_id]}/category/#{params[:category_id]}/product/show/#{params[:id]}"
        # url_for(:product, :show, :id => 10) => "/product/show/10"
        # url_for(:product, :show, :shop_id => 5, :id => 10) => "/my/stand/5/product/show/10"
        # url_for(:product, :show, :shop_id => 5, :category_id => 1, :id => 10) => "/my/stand/5/category/1/product/show/10"
      end
    end
    ```

    #### Parameters:

    - `name`(`Symbol`)*(defaults to: `nil`)* — The parent name.
    - `options`(`Hash`)*(defaults to: `{}`)* — Additional options.
- name: Padrino::Routing::ClassMethods#patch
  id: padrino/routing/classmethods#patch-instance_method
  summary: null
  belongs_to: Padrino::Routing::ClassMethods
  description: '### \#patch(path, \*args, &block) ⇒ Object'
- name: Padrino::Routing::ClassMethods#post
  id: padrino/routing/classmethods#post-instance_method
  summary: null
  belongs_to: Padrino::Routing::ClassMethods
  description: '### \#post(path, \*args, &block) ⇒ Object'
- name: Padrino::Routing::ClassMethods#process_path_for_parent_params
  id: padrino/routing/classmethods#process_path_for_parent_params-instance_method
  summary: Processes the existing path and prepends the 'parent' parameters onto the route Used for calculating path in route method
  belongs_to: Padrino::Routing::ClassMethods
  description: |-
    ### \#process_path_for_parent_params(path, parent_params) ⇒ Object

    Processes the existing path and prepends the 'parent' parameters onto the route Used for calculating path in route method.
- name: Padrino::Routing::ClassMethods#put
  id: padrino/routing/classmethods#put-instance_method
  summary: null
  belongs_to: Padrino::Routing::ClassMethods
  description: '### \#put(path, \*args, &block) ⇒ Object'
- name: Padrino::Routing::ClassMethods#rebase_url
  id: padrino/routing/classmethods#rebase_url-instance_method
  summary: null
  belongs_to: Padrino::Routing::ClassMethods
  description: '### \#rebase_url(url) ⇒ Object'
- name: Padrino::Routing::ClassMethods#recognize_path
  id: padrino/routing/classmethods#recognize_path-instance_method
  summary: Recognize a given path
  belongs_to: Padrino::Routing::ClassMethods
  description: |-
    ### \#recognize_path(path) ⇒ Symbol, Hash

    Recognize a given path.

    #### Examples:

    Giving a controller like:

    ``` ruby
    controller :foo do
      get :bar, :map => 'foo-bar-:id'; ...; end
    end
    ```

    You should be able to reverse:

    ``` ruby
    MyApp.url(:foo_bar, :id => :mine)
    # => /foo-bar-mine
    ```

    Into this:

    ``` ruby
    MyApp.recognize_path('foo-bar-mine')
    # => [:foo_bar, :id => :mine]
    ```

    #### Parameters:

    - `path`([`String`](../../string "String (class)")) — Path+Query to parse

    #### Returns:

    - (`Symbol`, `Hash`) — Returns controller and query params.
- name: Padrino::Routing::ClassMethods#reset_router!
  id: padrino/routing/classmethods#reset_router!-instance_method
  summary: null
  belongs_to: Padrino::Routing::ClassMethods
  description: '### \#reset_router! ⇒ Object'
- name: Padrino::Routing::ClassMethods#router
  id: padrino/routing/classmethods#router-instance_method
  summary: Using PathRouter, for features and configurations
  belongs_to: Padrino::Routing::ClassMethods
  description: |-
    ### \#router ⇒ Object Also known as: urls

    Using PathRouter, for features and configurations.

    #### Examples:

    ``` ruby
    router.add('/greedy/:greed')
    router.recognize('/simple')
    ```
- name: Padrino::Routing::ClassMethods#unlink
  id: padrino/routing/classmethods#unlink-instance_method
  summary: null
  belongs_to: Padrino::Routing::ClassMethods
  description: '### \#unlink(path, \*args, &block) ⇒ Object'
- name: Padrino::Routing::ClassMethods#url
  id: padrino/routing/classmethods#url-instance_method
  summary: Instance method for url generation
  belongs_to: Padrino::Routing::ClassMethods
  description: "### \\#url(\\*args) ⇒ Object Also known as: url_for\n\nInstance method for url generation.\n\n#### Examples:\n\n``` ruby\nurl(:show, :id => 1)\nurl(:show, :name => 'test', :id => 24)\nurl(:show, 1)\nurl(:controller_name, :show, :id => 21)\nurl(:controller_show, :id => 29)\nurl(:index, :fragment => 'comments')\n```\n\n#### Parameters:\n\n- `options`(`Hash`) — a customizable set of options\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/ClassMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/ClassMethods)"
- name: Padrino::Routing::InstanceMethods
  id: padrino/routing/instancemethods
  summary: Instance methods related to recognizing and processing routes and serving static files
  description: "# Module: Padrino::Routing::InstanceMethods\n\n## Overview\n\nInstance methods related to recognizing and processing routes and serving static files.\n\n## Instance Method Summary\n\n- [`#`**`absolute_url`**`(*args) ⇒ Object`](instancemethods#absolute_url-instance_method \"#absolute_url (instance method)\") Returns absolute url.\n- [`#`**`content_type`**`(type = nil, params = {}) ⇒ Object`](instancemethods#content_type-instance_method \"#content_type (instance method)\") Return the request format, this is useful when we need to respond to a given Content-Type.\n- [`#`**`current_path`**`(*path_params) ⇒ Object`](instancemethods#current_path-instance_method \"#current_path (instance method)\") Returns the current path within a route from specified `path_params`.\n- [`#`**`recognize_path`**`(path) ⇒ Object`](instancemethods#recognize_path-instance_method \"#recognize_path (instance method)\")\n- [`#`**`route`**` ⇒ Object`](instancemethods#route-instance_method \"#route (instance method)\") Returns the current route.\n- [`#`**`static!`**`(options = {}) ⇒ Object`](instancemethods#static!-instance_method \"#static! (instance method)\") Method for deliver static files.\n- [`#`**`static_file?`**`(path_info) ⇒ Boolean`](instancemethods#static_file%3F-instance_method \"#static_file? (instance method)\") This is mostly just a helper so request.path_info isn't changed when serving files from the public directory.\n- [`#`**`url`**`(*args) ⇒ Object`](instancemethods#url-instance_method \"#url (instance method)\")` (also: #url_for)` Instance method for URL generation.\n\n## Instance Method Details\n\n### \\#absolute_url(\\*args) ⇒ Object\n\nReturns absolute url. Calls Sinatra::Helpers#uri to generate protocol version, hostname and port.\n\n#### Examples:\n\n``` ruby\nabsolute_url(:show, :id => 1)  # => http://example.com/show?id=1\nabsolute_url(:show, 24)        # => https://example.com/admin/show/24\nabsolute_url('/foo/bar')       # => https://example.com/admin/foo/bar\nabsolute_url('baz')            # => https://example.com/admin/foo/baz\n```\n\n### \\#content_type(type = nil, params = {}) ⇒ Object\n\nReturn the request format, this is useful when we need to respond to a given Content-Type.\n\n#### Examples:\n\n``` ruby\nget :index, :provides => :any do\n  case content_type\n    when :js    then ...\n    when :json  then ...\n    when :html  then ...\n  end\nend\n```\n\n#### Parameters:\n\n- `type` (`Symbol`, `nil`) *(defaults to: `nil`)*\n- `params` (`Hash`) *(defaults to: `{}`)*\n\n### \\#current_path(\\*path_params) ⇒ Object\n\nReturns the current path within a route from specified `path_params`.\n\n### \\#recognize_path(path) ⇒ Object\n\n### \\#route ⇒ Object\n\nReturns the current route\n\n#### Examples:\n\n``` ruby\n-if route.controller == :press\n  %li=show_article\n```\n\n### \\#static!(options = {}) ⇒ Object\n\nMethod for deliver static files.\n\n### \\#static_file?(path_info) ⇒ Boolean\n\nThis is mostly just a helper so request.path_info isn't changed when serving files from the public directory.\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#url(\\*args) ⇒ Object Also known as: url_for\n\nInstance method for URL generation.\n\n#### Examples:\n\n``` ruby\nurl(:show, :id => 1)\nurl(:show, :name => :test)\nurl(:show, 1)\nurl(\"/foo\", false, false)\n```\n\n#### See Also:\n\n- [ClassMethods#url](classmethods#url-instance_method \"Padrino::Routing::ClassMethods#url (method)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/InstanceMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/InstanceMethods)"
- name: Padrino::Routing::InstanceMethods#absolute_url
  id: padrino/routing/instancemethods#absolute_url-instance_method
  summary: Returns absolute url
  belongs_to: Padrino::Routing::InstanceMethods
  description: |-
    ### \#absolute_url(\*args) ⇒ Object

    Returns absolute url. Calls Sinatra::Helpers#uri to generate protocol version, hostname and port.

    #### Examples:

    ``` ruby
    absolute_url(:show, :id => 1)  # => http://example.com/show?id=1
    absolute_url(:show, 24)        # => https://example.com/admin/show/24
    absolute_url('/foo/bar')       # => https://example.com/admin/foo/bar
    absolute_url('baz')            # => https://example.com/admin/foo/baz
    ```
- name: Padrino::Routing::InstanceMethods#content_type
  id: padrino/routing/instancemethods#content_type-instance_method
  summary: Return the request format, this is useful when we need to respond to a given Content-Type
  belongs_to: Padrino::Routing::InstanceMethods
  description: |-
    ### \#content_type(type = nil, params = {}) ⇒ Object

    Return the request format, this is useful when we need to respond to a given Content-Type.

    #### Examples:

    ``` ruby
    get :index, :provides => :any do
      case content_type
        when :js    then ...
        when :json  then ...
        when :html  then ...
      end
    end
    ```

    #### Parameters:

    - `type` (`Symbol`, `nil`) *(defaults to: `nil`)*
    - `params` (`Hash`) *(defaults to: `{}`)*
- name: Padrino::Routing::InstanceMethods#current_path
  id: padrino/routing/instancemethods#current_path-instance_method
  summary: Returns the current path within a route from specified path_params
  belongs_to: Padrino::Routing::InstanceMethods
  description: |-
    ### \#current_path(\*path_params) ⇒ Object

    Returns the current path within a route from specified `path_params`.
- name: Padrino::Routing::InstanceMethods#recognize_path
  id: padrino/routing/instancemethods#recognize_path-instance_method
  summary: null
  belongs_to: Padrino::Routing::InstanceMethods
  description: '### \#recognize_path(path) ⇒ Object'
- name: Padrino::Routing::InstanceMethods#route
  id: padrino/routing/instancemethods#route-instance_method
  summary: null
  belongs_to: Padrino::Routing::InstanceMethods
  description: |-
    ### \#route ⇒ Object

    Returns the current route

    #### Examples:

    ``` ruby
    -if route.controller == :press
      %li=show_article
    ```
- name: Padrino::Routing::InstanceMethods#static!
  id: padrino/routing/instancemethods#static!-instance_method
  summary: Method for deliver static files
  belongs_to: Padrino::Routing::InstanceMethods
  description: |-
    ### \#static!(options = {}) ⇒ Object

    Method for deliver static files.
- name: Padrino::Routing::InstanceMethods#static_file?
  id: padrino/routing/instancemethods#static_file?-instance_method
  summary: This is mostly just a helper so request.path_info isn't changed when serving files from the public directory
  belongs_to: Padrino::Routing::InstanceMethods
  description: |-
    ### \#static_file?(path_info) ⇒ Boolean

    This is mostly just a helper so request.path_info isn't changed when serving files from the public directory.

    #### Returns:

    - (`Boolean`)
- name: Padrino::Routing::InstanceMethods#url
  id: padrino/routing/instancemethods#url-instance_method
  summary: Instance method for URL generation
  belongs_to: Padrino::Routing::InstanceMethods
  description: "### \\#url(\\*args) ⇒ Object Also known as: url_for\n\nInstance method for URL generation.\n\n#### Examples:\n\n``` ruby\nurl(:show, :id => 1)\nurl(:show, :name => :test)\nurl(:show, 1)\nurl(\"/foo\", false, false)\n```\n\n#### See Also:\n\n-  [ClassMethods#url](classmethods#url-instance_method \"Padrino::Routing::ClassMethods#url (method)\")\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/InstanceMethods](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/InstanceMethods)"
- name: Padrino::Routing::Parent
  id: padrino/routing/parent
  summary: Returns a new instance of Parent
  description: "# Class: Padrino::Routing::Parent\n\nInherits:  \n[String](../../string \"String (class)\")\n\n- [Object](../../object \"Object (class)\")\n- [String](../../string \"String (class)\")\n- Padrino::Routing::Parent\n\n## Instance Attribute Summary\n\n- [`#`**`map`**` ⇒ Object`](parent#map-instance_method \"#map (instance method)\") readonly Returns the value of attribute map.\n- [`#`**`optional`**` ⇒ Object`](parent#optional-instance_method \"#optional (instance method)\")` (also: #optional?)` readonly Returns the value of attribute optional.\n- [`#`**`options`**` ⇒ Object`](parent#options-instance_method \"#options (instance method)\") readonly Returns the value of attribute options.\n\n## Instance Method Summary\n\n- [`#`**`initialize`**`(value, options = {}) ⇒ Parent`](parent#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of Parent.\n\n### Methods inherited from String\n\n[\\#camelize](../../string#camelize-instance_method \"String#camelize (method)\"), [\\#classify](../../string#classify-instance_method \"String#classify (method)\"), [\\#colorize](../../string#colorize-instance_method \"String#colorize (method)\"), [\\#constantize](../../string#constantize-instance_method \"String#constantize (method)\"), [\\#html_safe](../../string#html_safe-instance_method \"String#html_safe (method)\"), [\\#pluralize](../../string#pluralize-instance_method \"String#pluralize (method)\"), [\\#underscore](../../string#underscore-instance_method \"String#underscore (method)\")\n\n## Constructor Details\n\n### \\#initialize(value, options = {}) ⇒ Parent\n\nReturns a new instance of Parent.\n\n## Instance Attribute Details\n\n### \\#map ⇒ Object (readonly)\n\nReturns the value of attribute map\n\n### \\#optional ⇒ Object (readonly) Also known as: optional?\n\nReturns the value of attribute optional\n\n### \\#options ⇒ Object (readonly)\n\nReturns the value of attribute options\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/Parent](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/Parent)"
- name: Padrino::Routing::Parent#initialize
  id: padrino/routing/parent#initialize-instance_method
  summary: Returns a new instance of Parent
  belongs_to: Padrino::Routing::Parent
  description: |-
    ### \#initialize(value, options = {}) ⇒ Parent

    Returns a new instance of Parent.

    ## Instance Attribute Details
- name: Padrino::Routing::Parent#map
  id: padrino/routing/parent#map-instance_method
  summary: null
  belongs_to: Padrino::Routing::Parent
  description: |-
    ### \#map ⇒ Object (readonly)

    Returns the value of attribute map
- name: Padrino::Routing::Parent#optional
  id: padrino/routing/parent#optional-instance_method
  summary: null
  belongs_to: Padrino::Routing::Parent
  description: |-
    ### \#optional ⇒ Object (readonly) Also known as: optional?

    Returns the value of attribute optional
- name: Padrino::Routing::Parent#options
  id: padrino/routing/parent#options-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Routing::Parent
  description: "### \\#options ⇒ Object (readonly)\n\nReturns the value of attribute options\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/Parent](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/Parent)"
- name: Padrino::Routing::UnrecognizedException
  id: padrino/routing/unrecognizedexception
  summary: Raised when a route was invalid or cannot be processed
  description: "# Exception: Padrino::Routing::UnrecognizedException\n\nInherits:  \nRuntimeError\n\n- [Object](../../object \"Object (class)\")\n- RuntimeError\n- Padrino::Routing::UnrecognizedException\n\n## Overview\n\nRaised when a route was invalid or cannot be processed.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/UnrecognizedException](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/UnrecognizedException)"
- name: Padrino::SafeBuffer
  id: padrino/safebuffer
  summary: Returns a new instance of SafeBuffer
  description: "# Class: Padrino::SafeBuffer\n\nInherits:  \n[String](../string \"String (class)\")\n\n- [Object](../object \"Object (class)\")\n- [String](../string \"String (class)\")\n- Padrino::SafeBuffer\n\n## Overview\n\nPadrino::SafeBuffer is based on ActiveSupport::SafeBuffer\n\n## Defined Under Namespace\n\n**Classes:** [SafeConcatError](safebuffer/safeconcaterror \"Padrino::SafeBuffer::SafeConcatError (class)\")\n\n## Constant Summary [collapse](#)\n\nUNSAFE_STRING_METHODS =  \n``` ruby\n%w(\n  capitalize chomp chop delete downcase gsub lstrip next reverse rstrip\n  slice squeeze strip sub succ swapcase tr tr_s upcase\n)\n```\n\n## Instance Method Summary\n\n- [`#`**`%`**`(args) ⇒ Object`](safebuffer#%25-instance_method \"#% (instance method)\")\n- [`#`**`+`**`(other) ⇒ Object`](safebuffer#%2B-instance_method \"#+ (instance method)\")\n- [`#`**`[]`**`(*args) ⇒ Object`](safebuffer#%5B%5D-instance_method \"#[] (instance method)\")\n- [`#`**`clone_empty`**` ⇒ Object`](safebuffer#clone_empty-instance_method \"#clone_empty (instance method)\")\n- [`#`**`concat`**`(value) ⇒ Object`](safebuffer#concat-instance_method \"#concat (instance method)\")` (also: #<<)`\n- [`#`**`encode_with`**`(coder) ⇒ Object`](safebuffer#encode_with-instance_method \"#encode_with (instance method)\")\n- [`#`**`html_safe?`**` ⇒ Boolean`](safebuffer#html_safe%3F-instance_method \"#html_safe? (instance method)\")\n- [`#`**`initialize`**`(str = \"\") ⇒ SafeBuffer`](safebuffer#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of SafeBuffer.\n- [`#`**`initialize_copy`**`(other) ⇒ Object`](safebuffer#initialize_copy-instance_method \"#initialize_copy (instance method)\")\n- [`#`**`prepend`**`(value) ⇒ Object`](safebuffer#prepend-instance_method \"#prepend (instance method)\")\n- [`#`**`safe_concat`**`(value) ⇒ Object`](safebuffer#safe_concat-instance_method \"#safe_concat (instance method)\")\n- [`#`**`to_param`**` ⇒ Object`](safebuffer#to_param-instance_method \"#to_param (instance method)\")\n- [`#`**`to_s`**` ⇒ Object`](safebuffer#to_s-instance_method \"#to_s (instance method)\")\n\n### Methods inherited from String\n\n[\\#camelize](../string#camelize-instance_method \"String#camelize (method)\"), [\\#classify](../string#classify-instance_method \"String#classify (method)\"), [\\#colorize](../string#colorize-instance_method \"String#colorize (method)\"), [\\#constantize](../string#constantize-instance_method \"String#constantize (method)\"), [\\#html_safe](../string#html_safe-instance_method \"String#html_safe (method)\"), [\\#pluralize](../string#pluralize-instance_method \"String#pluralize (method)\"), [\\#underscore](../string#underscore-instance_method \"String#underscore (method)\")\n\n## Constructor Details\n\n### \\#initialize(str = \"\") ⇒ SafeBuffer\n\nReturns a new instance of SafeBuffer.\n\n## Instance Method Details\n\n### \\#%(args) ⇒ Object\n\n### \\#+(other) ⇒ Object\n\n### \\#\\[\\](\\*args) ⇒ Object\n\n### \\#clone_empty ⇒ Object\n\n### \\#concat(value) ⇒ Object Also known as: \\<\\<\n\n### \\#encode_with(coder) ⇒ Object\n\n### \\#html_safe? ⇒ Boolean\n\n#### Returns:\n\n- (`Boolean`)\n\n### \\#initialize_copy(other) ⇒ Object\n\n### \\#prepend(value) ⇒ Object\n\n### \\#safe_concat(value) ⇒ Object\n\n#### Raises:\n\n- ([`SafeConcatError`](safebuffer/safeconcaterror \"Padrino::SafeBuffer::SafeConcatError (class)\"))\n\n### \\#to_param ⇒ Object\n\n### \\#to_s ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/SafeBuffer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/SafeBuffer)"
- name: Padrino::SafeBuffer#%
  id: padrino/safebuffer#%-instance_method
  summary: null
  belongs_to: Padrino::SafeBuffer
  description: '### \#%(args) ⇒ Object'
- name: Padrino::SafeBuffer#+
  id: padrino/safebuffer#+-instance_method
  summary: null
  belongs_to: Padrino::SafeBuffer
  description: '### \#+(other) ⇒ Object'
- name: Padrino::SafeBuffer#[]
  id: padrino/safebuffer#[]-instance_method
  summary: null
  belongs_to: Padrino::SafeBuffer
  description: '### \#\[\](\*args) ⇒ Object'
- name: Padrino::SafeBuffer#clone_empty
  id: padrino/safebuffer#clone_empty-instance_method
  summary: null
  belongs_to: Padrino::SafeBuffer
  description: '### \#clone_empty ⇒ Object'
- name: Padrino::SafeBuffer#concat
  id: padrino/safebuffer#concat-instance_method
  summary: null
  belongs_to: Padrino::SafeBuffer
  description: '### \#concat(value) ⇒ Object Also known as: \<\<'
- name: Padrino::SafeBuffer#encode_with
  id: padrino/safebuffer#encode_with-instance_method
  summary: null
  belongs_to: Padrino::SafeBuffer
  description: '### \#encode_with(coder) ⇒ Object'
- name: Padrino::SafeBuffer#html_safe?
  id: padrino/safebuffer#html_safe?-instance_method
  summary: null
  belongs_to: Padrino::SafeBuffer
  description: |-
    ### \#html_safe? ⇒ Boolean

    #### Returns:

    - (`Boolean`)
- name: Padrino::SafeBuffer#initialize
  id: padrino/safebuffer#initialize-instance_method
  summary: Returns a new instance of SafeBuffer
  belongs_to: Padrino::SafeBuffer
  description: |-
    ### \#initialize(str = "") ⇒ SafeBuffer

    Returns a new instance of SafeBuffer.

    ## Instance Method Details
- name: Padrino::SafeBuffer#initialize_copy
  id: padrino/safebuffer#initialize_copy-instance_method
  summary: null
  belongs_to: Padrino::SafeBuffer
  description: '### \#initialize_copy(other) ⇒ Object'
- name: Padrino::SafeBuffer#prepend
  id: padrino/safebuffer#prepend-instance_method
  summary: null
  belongs_to: Padrino::SafeBuffer
  description: '### \#prepend(value) ⇒ Object'
- name: Padrino::SafeBuffer#safe_concat
  id: padrino/safebuffer#safe_concat-instance_method
  summary: null
  belongs_to: Padrino::SafeBuffer
  description: |-
    ### \#safe_concat(value) ⇒ Object

    #### Raises:

    - ([`SafeConcatError`](safebuffer/safeconcaterror "Padrino::SafeBuffer::SafeConcatError (class)"))
- name: Padrino::SafeBuffer#to_param
  id: padrino/safebuffer#to_param-instance_method
  summary: null
  belongs_to: Padrino::SafeBuffer
  description: '### \#to_param ⇒ Object'
- name: Padrino::SafeBuffer#to_s
  id: padrino/safebuffer#to_s-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::SafeBuffer
  description: "### \\#to_s ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/SafeBuffer](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/SafeBuffer)"
- name: Padrino::SafeBuffer::SafeConcatError
  id: padrino/safebuffer/safeconcaterror
  summary: Returns a new instance of SafeConcatError
  description: "# Exception: Padrino::SafeBuffer::SafeConcatError\n\nInherits:  \nStandardError\n\n- [Object](../../object \"Object (class)\")\n- StandardError\n- Padrino::SafeBuffer::SafeConcatError\n\n## Instance Method Summary\n\n- [`#`**`initialize`**` ⇒ SafeConcatError`](safeconcaterror#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of SafeConcatError.\n\n## Constructor Details\n\n### \\#initialize ⇒ SafeConcatError\n\nReturns a new instance of SafeConcatError.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/SafeBuffer/SafeConcatError](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/SafeBuffer/SafeConcatError)"
- name: Padrino::SafeBuffer::SafeConcatError#initialize
  id: padrino/safebuffer/safeconcaterror#initialize-instance_method
  summary: Returns a new instance of SafeConcatError
  belongs_to: Padrino::SafeBuffer::SafeConcatError
  description: "### \\#initialize ⇒ SafeConcatError\n\nReturns a new instance of SafeConcatError.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/SafeBuffer/SafeConcatError](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/SafeBuffer/SafeConcatError)"
- name: Padrino::Server
  id: padrino/server
  summary: This module builds a Padrino server to run the project based on available handlers
  description: "# Class: Padrino::Server\n\nInherits:  \nRack::Server\n\n- [Object](../object \"Object (class)\")\n- Rack::Server\n- Padrino::Server\n\n## Overview\n\nThis module builds a Padrino server to run the project based on available handlers.\n\n## Constant Summary [collapse](#)\n\nDEFAULT_ADDRESS =\n\n``` ruby\n{ :Host => '127.0.0.1', :Port => 3000 }\n```\n\nHandlers =\n\nServer Handlers\n\n``` ruby\n[:thin, :puma, :'spider-gazelle', :mongrel, :trinidad, :webrick]\n```\n\n## Class Method Summary\n\n- [`.`**`start`**`(app, options = {}) ⇒ Object`](server#start-class_method \"start (class method)\") Starts the application on the available server with specified options.\n\n## Instance Method Summary\n\n- [`#`**`app`**` ⇒ Object`](server#app-instance_method \"#app (instance method)\")` (also: #wrapped_app)` The application the server will run.\n- [`#`**`initialize`**`(options, app) ⇒ Server`](server#initialize-instance_method \"#initialize (instance method)\") constructor A new instance of Server.\n- [`#`**`options`**` ⇒ Object`](server#options-instance_method \"#options (instance method)\")\n- [`#`**`start`**` ⇒ Object`](server#start-instance_method \"#start (instance method)\") Starts the application on the available server with specified options.\n\n## Constructor Details\n\n### \\#initialize(options, app) ⇒ Server\n\nReturns a new instance of Server.\n\n## Class Method Details\n\n### .start(app, options = {}) ⇒ Object\n\nStarts the application on the available server with specified options.\n\n## Instance Method Details\n\n### \\#app ⇒ Object Also known as: wrapped_app\n\nThe application the server will run.\n\n### \\#options ⇒ Object\n\n### \\#start ⇒ Object\n\nStarts the application on the available server with specified options.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Server](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Server)"
- name: Padrino::Server#app
  id: padrino/server#app-instance_method
  summary: The application the server will run
  belongs_to: Padrino::Server
  description: |-
    ### \#app ⇒ Object Also known as: wrapped_app

    The application the server will run.
- name: Padrino::Server#initialize
  id: padrino/server#initialize-instance_method
  summary: Returns a new instance of Server
  belongs_to: Padrino::Server
  description: |-
    ### \#initialize(options, app) ⇒ Server

    Returns a new instance of Server.

    ## Class Method Details
- name: Padrino::Server#options
  id: padrino/server#options-instance_method
  summary: null
  belongs_to: Padrino::Server
  description: '### \#options ⇒ Object'
- name: Padrino::Server#start
  id: padrino/server#start-instance_method
  summary: Starts the application on the available server with specified options
  belongs_to: Padrino::Server
  description: "### \\#start ⇒ Object\n\nStarts the application on the available server with specified options.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Server](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Server)"
- name: Padrino::Server.start
  id: padrino/server#start-class_method
  summary: Starts the application on the available server with specified options
  belongs_to: Padrino::Server
  description: |-
    ### .start(app, options = {}) ⇒ Object

    Starts the application on the available server with specified options.

    ## Instance Method Details
- name: Padrino::Tasks
  id: padrino/tasks
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Module: Padrino::Tasks\n\n## Overview\n\nThis module it's used for bootstrap with padrino rake third party tasks, in your gem/plugin/extension you need only do this:\n\n#### Examples:\n\n``` ruby\nPadrino::Tasks.files << yourtask.rb\nPadrino::Tasks.files.concat(Dir[\"/path/to/all/my/tasks/*.rb\"])\nPadrino::Tasks.files.unshift(\"yourtask.rb\")\n```\n\n## Class Method Summary\n\n- [`.`**`files`**` ⇒ Object`](tasks#files-class_method \"files (class method)\") Returns a list of files to handle with padrino rake.\n\n## Class Method Details\n\n### .files ⇒ Object\n\nReturns a list of files to handle with padrino rake\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Tasks](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Tasks)"
- name: Padrino::Tasks.files
  id: padrino/tasks#files-class_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Padrino::Tasks
  description: "### .files ⇒ Object\n\nReturns a list of files to handle with padrino rake\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Tasks](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Tasks)"
- name: Padrino::Utils
  id: padrino/utils
  summary: Builds an URI query from a Hash or any Object
  description: "# Module: Padrino::Utils\n\nExtended by:  \n[Utils](utils \"Padrino::Utils (module)\")\n\nIncluded in:  \n[Utils](utils \"Padrino::Utils (module)\")\n\n## Instance Method Summary\n\n- [`#`**`build_uri_query`**`(object, namespace = nil) ⇒ Object`](utils#build_uri_query-instance_method \"#build_uri_query (instance method)\") Builds an URI query from a Hash or any Object.\n- [`#`**`deep_dup`**`(object) ⇒ Object`](utils#deep_dup-instance_method \"#deep_dup (instance method)\") Recursively duplicates the passed object.\n- [`#`**`symbolize_keys`**`(hash) ⇒ Object`](utils#symbolize_keys-instance_method \"#symbolize_keys (instance method)\") Returns a Hash with keys turned into symbols.\n\n## Instance Method Details\n\n### \\#build_uri_query(object, namespace = nil) ⇒ Object\n\nBuilds an URI query from a Hash or any Object.\n\nExamples (~ marks here that output is actually escaped by CGI):\n\n``` ruby\nUtils.build_uri_query(:a => 1, :b => 2)           #=> \"a=1&b=2\"\nUtils.build_uri_query(:a => [1, 2])               #=> ~\"a[]=1&a[]=2\"\nUtils.build_uri_query([1, 2], 'namespace')        #=> ~\"namespace[]=1&namespace[]=2\"\nUtils.build_uri_query(:a => { :d => 2 }, :b => 3) #=> ~\"a[d]=2&b=3\"\n```\n\n### \\#deep_dup(object) ⇒ Object\n\nRecursively duplicates the passed object.\n\n### \\#symbolize_keys(hash) ⇒ Object\n\nReturns a Hash with keys turned into symbols.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Utils](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Utils)"
- name: Padrino::Utils#build_uri_query
  id: padrino/utils#build_uri_query-instance_method
  summary: Builds an URI query from a Hash or any Object
  belongs_to: Padrino::Utils
  description: |-
    ### \#build_uri_query(object, namespace = nil) ⇒ Object

    Builds an URI query from a Hash or any Object.

    Examples (~ marks here that output is actually escaped by CGI):

    ``` ruby
    Utils.build_uri_query(:a => 1, :b => 2)           #=> "a=1&b=2"
    Utils.build_uri_query(:a => [1, 2])               #=> ~"a[]=1&a[]=2"
    Utils.build_uri_query([1, 2], 'namespace')        #=> ~"namespace[]=1&namespace[]=2"
    Utils.build_uri_query(:a => { :d => 2 }, :b => 3) #=> ~"a[d]=2&b=3"
    ```
- name: Padrino::Utils#deep_dup
  id: padrino/utils#deep_dup-instance_method
  summary: Recursively duplicates the passed object
  belongs_to: Padrino::Utils
  description: |-
    ### \#deep_dup(object) ⇒ Object

    Recursively duplicates the passed object.
- name: Padrino::Utils#symbolize_keys
  id: padrino/utils#symbolize_keys-instance_method
  summary: Returns a Hash with keys turned into symbols
  belongs_to: Padrino::Utils
  description: "### \\#symbolize_keys(hash) ⇒ Object\n\nReturns a Hash with keys turned into symbols.\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Utils](https://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Utils)"
- name: Sinatra::Request
  id: sinatra/request
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: Sinatra::Request\n\nInherits:  \n[Object](../object \"Object (class)\")\n\n- [Object](../object \"Object (class)\")\n- Sinatra::Request\n\n## Overview\n\nAdds to Sinatra `controller` informations\n\n## Instance Attribute Summary\n\n- [`#`**`route_obj`**` ⇒ Object`](request#route_obj-instance_method \"#route_obj (instance method)\") Returns the value of attribute route_obj.\n\n## Instance Method Summary\n\n- [`#`**`action`**` ⇒ Object`](request#action-instance_method \"#action (instance method)\")\n- [`#`**`controller`**` ⇒ Object`](request#controller-instance_method \"#controller (instance method)\")\n\n## Instance Attribute Details\n\n### \\#route_obj ⇒ Object\n\nReturns the value of attribute route_obj\n\n## Instance Method Details\n\n### \\#action ⇒ Object\n\n### \\#controller ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Sinatra/Request](https://www.rubydoc.info/github/padrino/padrino-framework/Sinatra/Request)"
- name: Sinatra::Request#action
  id: sinatra/request#action-instance_method
  summary: null
  belongs_to: Sinatra::Request
  description: '### \#action ⇒ Object'
- name: Sinatra::Request#controller
  id: sinatra/request#controller-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: Sinatra::Request
  description: "### \\#controller ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/Sinatra/Request](https://www.rubydoc.info/github/padrino/padrino-framework/Sinatra/Request)"
- name: Sinatra::Request#route_obj
  id: sinatra/request#route_obj-instance_method
  summary: null
  belongs_to: Sinatra::Request
  description: |-
    ### \#route_obj ⇒ Object

    Returns the value of attribute route_obj

    ## Instance Method Details
- name: String
  id: string
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: String\n\nInherits:  \n[Object](object \"Object (class)\")\n\n- [Object](object \"Object (class)\")\n- String\n\n## Overview\n\nAdd colors\n\n## Direct Known Subclasses\n\n[Padrino::Routing::Parent](padrino/routing/parent \"Padrino::Routing::Parent (class)\"), [Padrino::SafeBuffer](padrino/safebuffer \"Padrino::SafeBuffer (class)\"), [TemporaryString](temporarystring \"TemporaryString (class)\")\n\n## Defined Under Namespace\n\n**Classes:** [Colorizer](string/colorizer \"String::Colorizer (class)\")\n\n## Instance Method Summary\n\n- [`#`**`camelize`**` ⇒ Object`](string#camelize-instance_method \"#camelize (instance method)\")\n- [`#`**`classify`**` ⇒ Object`](string#classify-instance_method \"#classify (instance method)\")\n- [`#`**`colorize`**`(args) ⇒ Object`](string#colorize-instance_method \"#colorize (instance method)\") colorize(:red).\n- [`#`**`constantize`**` ⇒ Object`](string#constantize-instance_method \"#constantize (instance method)\")\n- [`#`**`html_safe`**` ⇒ Object`](string#html_safe-instance_method \"#html_safe (instance method)\")\n- [`#`**`pluralize`**` ⇒ Object`](string#pluralize-instance_method \"#pluralize (instance method)\")\n- [`#`**`underscore`**` ⇒ Object`](string#underscore-instance_method \"#underscore (instance method)\")\n\n## Instance Method Details\n\n### \\#camelize ⇒ Object\n\n### \\#classify ⇒ Object\n\n### \\#colorize(args) ⇒ Object\n\ncolorize(:red)\n\n### \\#constantize ⇒ Object\n\n### \\#html_safe ⇒ Object\n\n### \\#pluralize ⇒ Object\n\n### \\#underscore ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/String](https://www.rubydoc.info/github/padrino/padrino-framework/String)"
- name: String#camelize
  id: string#camelize-instance_method
  summary: null
  belongs_to: String
  description: '### \#camelize ⇒ Object'
- name: String#classify
  id: string#classify-instance_method
  summary: null
  belongs_to: String
  description: '### \#classify ⇒ Object'
- name: String#colorize
  id: string#colorize-instance_method
  summary: null
  belongs_to: String
  description: |-
    ### \#colorize(args) ⇒ Object

    colorize(:red)
- name: String#constantize
  id: string#constantize-instance_method
  summary: null
  belongs_to: String
  description: '### \#constantize ⇒ Object'
- name: String#html_safe
  id: string#html_safe-instance_method
  summary: null
  belongs_to: String
  description: '### \#html_safe ⇒ Object'
- name: String#pluralize
  id: string#pluralize-instance_method
  summary: null
  belongs_to: String
  description: '### \#pluralize ⇒ Object'
- name: String#underscore
  id: string#underscore-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: String
  description: "### \\#underscore ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/String](https://www.rubydoc.info/github/padrino/padrino-framework/String)"
- name: String::Colorizer
  id: string/colorizer
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: String::Colorizer\n\nInherits:  \n[Object](../object \"Object (class)\")\n\n- [Object](../object \"Object (class)\")\n- String::Colorizer\n\n## Overview\n\nUsed to colorize strings for the shell\n\n## Class Method Summary\n\n- [`.`**`colors`**` ⇒ Object`](colorizer#colors-class_method \"colors (class method)\") Returns colors integer mapping.\n- [`.`**`modes`**` ⇒ Object`](colorizer#modes-class_method \"modes (class method)\") Returns modes integer mapping.\n\n## Class Method Details\n\n### .colors ⇒ Object\n\nReturns colors integer mapping\n\n### .modes ⇒ Object\n\nReturns modes integer mapping\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/String/Colorizer](https://www.rubydoc.info/github/padrino/padrino-framework/String/Colorizer)"
- name: String::Colorizer.colors
  id: string/colorizer#colors-class_method
  summary: null
  belongs_to: String::Colorizer
  description: |-
    ### .colors ⇒ Object

    Returns colors integer mapping
- name: String::Colorizer.modes
  id: string/colorizer#modes-class_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: String::Colorizer
  description: "### .modes ⇒ Object\n\nReturns modes integer mapping\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/String/Colorizer](https://www.rubydoc.info/github/padrino/padrino-framework/String/Colorizer)"
- name: TemporaryString
  id: temporarystring
  summary: © 2010–2020 Padrino Licensed under the MIT License
  description: "# Class: TemporaryString\n\nInherits:  \n[String](string \"String (class)\")\n\n- [Object](object \"Object (class)\")\n- [String](string \"String (class)\")\n- TemporaryString\n\n## Instance Method Summary\n\n- [`#`**`to_s`**` ⇒ Object`](temporarystring#to_s-instance_method \"#to_s (instance method)\")\n\n### Methods inherited from String\n\n[\\#camelize](string#camelize-instance_method \"String#camelize (method)\"), [\\#classify](string#classify-instance_method \"String#classify (method)\"), [\\#colorize](string#colorize-instance_method \"String#colorize (method)\"), [\\#constantize](string#constantize-instance_method \"String#constantize (method)\"), [\\#html_safe](string#html_safe-instance_method \"String#html_safe (method)\"), [\\#pluralize](string#pluralize-instance_method \"String#pluralize (method)\"), [\\#underscore](string#underscore-instance_method \"String#underscore (method)\")\n\n## Instance Method Details\n\n### \\#to_s ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/TemporaryString](https://www.rubydoc.info/github/padrino/padrino-framework/TemporaryString)"
- name: TemporaryString#to_s
  id: temporarystring#to_s-instance_method
  summary: © 2010–2020 Padrino Licensed under the MIT License
  belongs_to: TemporaryString
  description: "### \\#to_s ⇒ Object\n\n© 2010–2020 Padrino  \nLicensed under the MIT License.  \n[https://www.rubydoc.info/github/padrino/padrino-framework/TemporaryString](https://www.rubydoc.info/github/padrino/padrino-framework/TemporaryString)"
