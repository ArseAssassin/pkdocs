---
name: Haxe
slug: haxe
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: ''
copyright: |-
  © 2005–2020 Haxe Foundation
  Licensed under a MIT license.
  https://api.haxe.org/
homepage: https://haxe.org

---
- name: Any
  id: any
  summary: Any is a type that is compatible with any other in both ways
  description: "# Any([Dynamic](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\"))\n\n[no package](index)\n\n*Available on all platforms*\n\n[`Any`](any) is a type that is compatible with any other in both ways.\n\nThis means that a value of any type can be assigned to [`Any`](any), and vice-versa, a value of [`Any`](any) type can be assigned to any other type.\n\nIt's a more type-safe alternative to [`Dynamic`](dynamic), because it doesn't support field access or operators and it's bound to monomorphs. So, to work with the actual value, it needs to be explicitly promoted to another type.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Any.html](https://api.haxe.org/Any.html)"
- name: Array
  id: array
  summary: Creates a new Array
  description: "# Array\\<T\\>\n\n[no package](index)\n\nextended by [RegExpMatch](https://api.haxe.org/js/lib/RegExpMatch.html \"js.lib.RegExpMatch - A return value of the RegExp.\")\n\n*Available on all platforms*\n\n## Constructor\n\n### [`new`](#new)`()`\n\nCreates a new Array.\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](int \"Int - The standard Int type.\")\n\nThe length of `this` Array.\n\n## Methods\n\n### [`concat`](#concat)`(``a:`[`Array`](array \"Array\")`<``T``>``):`[`Array`](array \"Array\")`<``T``>`\n\nReturns a new Array by appending the elements of `a` to the elements of `this` Array.\n\nThis operation does not modify `this` Array.\n\nIf `a` is the empty Array `[]`, a copy of `this` Array is returned.\n\nThe length of the returned Array is equal to the sum of `this.`[`length`](#length) and `a.length`.\n\nIf `a` is `null`, the result is unspecified.\n\n### [`contains`](#contains)`(``x:``T``):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns whether `this` Array contains `x`.\n\nIf `x` is found by checking standard equality, the function returns [`true`](bool), otherwise the function returns [`false`](bool).\n\n### [`copy`](#copy)`():`[`Array`](array \"Array\")`<``T``>`\n\nReturns a shallow copy of `this` Array.\n\nThe elements are not copied and retain their identity, so `a[i] == a.copy()[i]` is true for any valid `i`. However, `a == a.copy()` is always false.\n\n### `inline`[`filter`](#filter)`(``f:``T`` ‑> `[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Array`](array \"Array\")`<``T``>`\n\nReturns an Array containing those elements of `this` for which `f` returned true.\n\nThe individual elements are not duplicated and retain their identity.\n\nIf `f` is null, the result is unspecified.\n\n### [`indexOf`](#indexOf)`(``x:``T``,`` ``?fromIndex:`[`Int`](int \"Int - The standard Int type.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nReturns position of the first occurrence of `x` in `this` Array, searching front to back.\n\nIf `x` is found by checking standard equality, the function returns its index.\n\nIf `x` is not found, the function returns -1.\n\nIf `fromIndex` is specified, it will be used as the starting index to search from, otherwise search starts with zero index. If it is negative, it will be taken as the offset from the end of `this` Array to compute the starting index. If given or computed starting index is less than 0, the whole array will be searched, if it is greater than or equal to the length of `this` Array, the function returns -1.\n\n### [`insert`](#insert)`(``pos:`[`Int`](int \"Int - The standard Int type.\")`,`` ``x:``T``):`[`Void`](void \"Void - The standard Void type.\")\n\nInserts the element `x` at the position `pos`.\n\nThis operation modifies `this` Array in place.\n\nThe offset is calculated like so:\n\n- If `pos` exceeds `this.`[`length`](#length), the offset is `this.`[`length`](#length).\n- If `pos` is negative, the offset is calculated from the end of `this` Array, i.e. `this.`[`length`](#length)` + pos`. If this yields a negative value, the offset is 0.\n- Otherwise, the offset is `pos`.\n\nIf the resulting offset does not exceed `this.`[`length`](#length), all elements from and including that offset to the end of `this` Array are moved one index ahead.\n\n### `inline`[`iterator`](#iterator)`():`[`ArrayIterator`](haxe/iterators/arrayiterator \"haxe.iterators.ArrayIterator\")`<``T``>`\n\nReturns an iterator of the Array values.\n\n### [`join`](#join)`(``sep:`[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nReturns a string representation of `this` Array, with `sep` separating each element.\n\n### The result of this operation is equal to [`Std.string`](std#string)`(this[0]) + sep + `[`Std.string`](std#string)`(this[1]) + sep + ... + sep + `[`Std.string`](std#string)`(this[this.`[`length`](#length)`-1])`\n\nIf `this` is the empty Array `[]`, the result is the empty String `\"\"`. If `this` has exactly one element, the result is equal to a call to [`Std.string`](std#string)`(this[0])`.\n\nIf `sep` is null, the result is unspecified.\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`ArrayKeyValueIterator`](haxe/iterators/arraykeyvalueiterator \"haxe.iterators.ArrayKeyValueIterator\")`<``T``>`\n\nReturns an iterator of the Array indices and values.\n\n### [`lastIndexOf`](#lastIndexOf)`(``x:``T``,`` ``?fromIndex:`[`Int`](int \"Int - The standard Int type.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nReturns position of the last occurrence of `x` in `this` Array, searching back to front.\n\nIf `x` is found by checking standard equality, the function returns its index.\n\nIf `x` is not found, the function returns -1.\n\nIf `fromIndex` is specified, it will be used as the starting index to search from, otherwise search starts with the last element index. If it is negative, it will be taken as the offset from the end of `this` Array to compute the starting index. If given or computed starting index is greater than or equal to the length of `this` Array, the whole array will be searched, if it is less than 0, the function returns -1.\n\n### `inline`[`map`](#map)`<``S``>(``f:``T`` ‑> ``S``):`[`Array`](array \"Array\")`<``S``>`\n\nCreates a new Array by applying function `f` to all elements of `this`.\n\nThe order of elements is preserved.\n\nIf `f` is null, the result is unspecified.\n\n### [`pop`](#pop)`():`[`Null`](null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\nRemoves the last element of `this` Array and returns it.\n\nThis operation modifies `this` Array in place.\n\nIf `this` has at least one element, `this.`[`length`](#length) will decrease by 1.\n\nIf `this` is the empty Array `[]`, null is returned and the length remains 0.\n\n### [`push`](#push)`(``x:``T``):`[`Int`](int \"Int - The standard Int type.\")\n\nAdds the element `x` at the end of `this` Array and returns the new length of `this` Array.\n\nThis operation modifies `this` Array in place.\n\n`this.`[`length`](#length) increases by 1.\n\n### [`remove`](#remove)`(``x:``T``):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nRemoves the first occurrence of `x` in `this` Array.\n\nThis operation modifies `this` Array in place.\n\nIf `x` is found by checking standard equality, it is removed from `this` Array and all following elements are reindexed accordingly. The function then returns true.\n\nIf `x` is not found, `this` Array is not changed and the function returns false.\n\n### [`resize`](#resize)`(``len:`[`Int`](int \"Int - The standard Int type.\")`):`[`Void`](void \"Void - The standard Void type.\")\n\nSet the length of the Array.\n\nIf `len` is shorter than the array's current size, the last `length - len` elements will be removed. If `len` is longer, the Array will be extended, with new elements set to a target-specific default value:\n\n- always null on dynamic targets\n- 0, 0.0 or false for Int, Float and Bool respectively on static targets\n- null for other types on static targets\n\n### [`reverse`](#reverse)`():`[`Void`](void \"Void - The standard Void type.\")\n\nReverse the order of elements of `this` Array.\n\nThis operation modifies `this` Array in place.\n\nIf `this.`[`length`](#length)` < 2`, `this` remains unchanged.\n\n### [`shift`](#shift)`():`[`Null`](null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\nRemoves the first element of `this` Array and returns it.\n\nThis operation modifies `this` Array in place.\n\nIf `this` has at least one element, `this`.length and the index of each remaining element is decreased by 1.\n\nIf `this` is the empty Array `[]`, `null` is returned and the length remains 0.\n\n### [`slice`](#slice)`(``pos:`[`Int`](int \"Int - The standard Int type.\")`,`` ``?end:`[`Int`](int \"Int - The standard Int type.\")`):`[`Array`](array \"Array\")`<``T``>`\n\nCreates a shallow copy of the range of `this` Array, starting at and including `pos`, up to but not including `end`.\n\nThis operation does not modify `this` Array.\n\nThe elements are not copied and retain their identity.\n\nIf `end` is omitted or exceeds `this.`[`length`](#length), it defaults to the end of `this` Array.\n\nIf `pos` or `end` are negative, their offsets are calculated from the end of `this` Array by `this.`[`length`](#length)` + pos` and `this.`[`length`](#length)` + end` respectively. If this yields a negative value, 0 is used instead.\n\nIf `pos` exceeds `this.`[`length`](#length) or if `end` is less than or equals `pos`, the result is `[]`.\n\n### [`sort`](#sort)`(``f:(``T``, ``T``) ‑> `[`Int`](int \"Int - The standard Int type.\")`):`[`Void`](void \"Void - The standard Void type.\")\n\nSorts `this` Array according to the comparison function `f`, where `f(x,y)` returns 0 if x == y, a positive Int if x \\> y and a negative Int if x \\< y.\n\nThis operation modifies `this` Array in place.\n\nThe sort operation is not guaranteed to be stable, which means that the order of equal elements may not be retained. For a stable Array sorting algorithm, [`haxe.ds.ArraySort.sort`](haxe/ds/arraysort#sort)`()` can be used instead.\n\nIf `f` is null, the result is unspecified.\n\n### [`splice`](#splice)`(``pos:`[`Int`](int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](int \"Int - The standard Int type.\")`):`[`Array`](array \"Array\")`<``T``>`\n\nRemoves `len` elements from `this` Array, starting at and including `pos`, an returns them.\n\nThis operation modifies `this` Array in place.\n\nIf `len` is \\< 0 or `pos` exceeds `this`.length, an empty Array \\[\\] is returned and `this` Array is unchanged.\n\nIf `pos` is negative, its value is calculated from the end of `this` Array by `this.`[`length`](#length)` + pos`. If this yields a negative value, 0 is used instead.\n\nIf the sum of the resulting values for `len` and `pos` exceed `this.`[`length`](#length), this operation will affect the elements from `pos` to the end of `this` Array.\n\nThe length of the returned Array is equal to the new length of `this` Array subtracted from the original length of `this` Array. In other words, each element of the original `this` Array either remains in `this` Array or becomes an element of the returned Array.\n\n### [`toString`](#toString)`():`[`String`](string \"String - The basic String class.\")\n\nReturns a string representation of `this` Array.\n\nThe result will include the individual elements' String representations separated by comma. The enclosing \\[ \\] may be missing on some platforms, use [`Std.string`](std#string)`()` to get a String representation that is consistent across platforms.\n\n### [`unshift`](#unshift)`(``x:``T``):`[`Void`](void \"Void - The standard Void type.\")\n\nAdds the element `x` at the start of `this` Array.\n\nThis operation modifies `this` Array in place.\n\n`this.`[`length`](#length) and the index of each Array element increases by 1.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Array.html](https://api.haxe.org/Array.html)"
- name: Array.concat()
  id: array#concat
  summary: Returns a new Array by appending the elements of a to the elements of this Array
  belongs_to: Array
  description: |-
    ### [`concat`](#concat)`(``a:`[`Array`](array "Array")`<``T``>``):`[`Array`](array "Array")`<``T``>`

    Returns a new Array by appending the elements of `a` to the elements of `this` Array.

    This operation does not modify `this` Array.

    If `a` is the empty Array `[]`, a copy of `this` Array is returned.

    The length of the returned Array is equal to the sum of `this.`[`length`](#length) and `a.length`.

    If `a` is `null`, the result is unspecified.
- name: Array.contains()
  id: array#contains
  summary: Returns whether this Array contains x
  belongs_to: Array
  description: |-
    ### [`contains`](#contains)`(``x:``T``):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Returns whether `this` Array contains `x`.

    If `x` is found by checking standard equality, the function returns [`true`](bool), otherwise the function returns [`false`](bool).
- name: Array.copy()
  id: array#copy
  summary: Returns a shallow copy of this Array
  belongs_to: Array
  description: |-
    ### [`copy`](#copy)`():`[`Array`](array "Array")`<``T``>`

    Returns a shallow copy of `this` Array.

    The elements are not copied and retain their identity, so `a[i] == a.copy()[i]` is true for any valid `i`. However, `a == a.copy()` is always false.
- name: Array.filter()
  id: array#filter
  summary: Returns an Array containing those elements of this for which f returned true
  belongs_to: Array
  description: |-
    ### `inline`[`filter`](#filter)`(``f:``T`` ‑> `[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Array`](array "Array")`<``T``>`

    Returns an Array containing those elements of `this` for which `f` returned true.

    The individual elements are not duplicated and retain their identity.

    If `f` is null, the result is unspecified.
- name: Array.indexOf()
  id: array#indexOf
  summary: Returns position of the first occurrence of x in this Array, searching front to back
  belongs_to: Array
  description: |-
    ### [`indexOf`](#indexOf)`(``x:``T``,``?fromIndex:`[`Int`](int "Int - The standard Int type.")`):`[`Int`](int "Int - The standard Int type.")

    Returns position of the first occurrence of `x` in `this` Array, searching front to back.

    If `x` is found by checking standard equality, the function returns its index.

    If `x` is not found, the function returns -1.

    If `fromIndex` is specified, it will be used as the starting index to search from, otherwise search starts with zero index. If it is negative, it will be taken as the offset from the end of `this` Array to compute the starting index. If given or computed starting index is less than 0, the whole array will be searched, if it is greater than or equal to the length of `this` Array, the function returns -1.
- name: Array.insert()
  id: array#insert
  summary: Inserts the element x at the position pos
  belongs_to: Array
  description: |-
    ### [`insert`](#insert)`(``pos:`[`Int`](int "Int - The standard Int type.")`,``x:``T``):`[`Void`](void "Void - The standard Void type.")

    Inserts the element `x` at the position `pos`.

    This operation modifies `this` Array in place.

    The offset is calculated like so:

    - If `pos` exceeds `this.`[`length`](#length), the offset is `this.`[`length`](#length).
    - If `pos` is negative, the offset is calculated from the end of `this` Array, i.e. `this.`[`length`](#length)` + pos`. If this yields a negative value, the offset is 0.
    - Otherwise, the offset is `pos`.

    If the resulting offset does not exceed `this.`[`length`](#length), all elements from and including that offset to the end of `this` Array are moved one index ahead.
- name: Array.iterator()
  id: array#iterator
  summary: Returns an iterator of the Array values
  belongs_to: Array
  description: |-
    ### `inline`[`iterator`](#iterator)`():`[`ArrayIterator`](haxe/iterators/arrayiterator "haxe.iterators.ArrayIterator")`<``T``>`

    Returns an iterator of the Array values.
- name: Array.join()
  id: array#join
  summary: Returns a string representation of this Array, with sep separating each element
  belongs_to: Array
  description: |-
    ### [`join`](#join)`(``sep:`[`String`](string "String - The basic String class.")`):`[`String`](string "String - The basic String class.")

    Returns a string representation of `this` Array, with `sep` separating each element.

    ### The result of this operation is equal to [`Std.string`](std#string)`(this[0]) + sep + `[`Std.string`](std#string)`(this[1]) + sep + ... + sep + `[`Std.string`](std#string)`(this[this.`[`length`](#length)`-1])`

    If `this` is the empty Array `[]`, the result is the empty String `""`. If `this` has exactly one element, the result is equal to a call to [`Std.string`](std#string)`(this[0])`.

    If `sep` is null, the result is unspecified.
- name: Array.keyValueIterator()
  id: array#keyValueIterator
  summary: Returns an iterator of the Array indices and values
  belongs_to: Array
  description: |-
    ### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`ArrayKeyValueIterator`](haxe/iterators/arraykeyvalueiterator "haxe.iterators.ArrayKeyValueIterator")`<``T``>`

    Returns an iterator of the Array indices and values.
- name: Array.lastIndexOf()
  id: array#lastIndexOf
  summary: Returns position of the last occurrence of x in this Array, searching back to front
  belongs_to: Array
  description: |-
    ### [`lastIndexOf`](#lastIndexOf)`(``x:``T``,``?fromIndex:`[`Int`](int "Int - The standard Int type.")`):`[`Int`](int "Int - The standard Int type.")

    Returns position of the last occurrence of `x` in `this` Array, searching back to front.

    If `x` is found by checking standard equality, the function returns its index.

    If `x` is not found, the function returns -1.

    If `fromIndex` is specified, it will be used as the starting index to search from, otherwise search starts with the last element index. If it is negative, it will be taken as the offset from the end of `this` Array to compute the starting index. If given or computed starting index is greater than or equal to the length of `this` Array, the whole array will be searched, if it is less than 0, the function returns -1.
- name: Array.length
  id: array#length
  summary: The length of this Array
  belongs_to: Array
  description: |-
    ### `read only`[`length`](#length)`:`[`Int`](int "Int - The standard Int type.")

    The length of `this` Array.

    ## Methods
- name: Array.map()
  id: array#map
  summary: Creates a new Array by applying function f to all elements of this
  belongs_to: Array
  description: |-
    ### `inline`[`map`](#map)`<``S``>(``f:``T`` ‑> ``S``):`[`Array`](array "Array")`<``S``>`

    Creates a new Array by applying function `f` to all elements of `this`.

    The order of elements is preserved.

    If `f` is null, the result is unspecified.
- name: Array.pop()
  id: array#pop
  summary: Removes the last element of this Array and returns it
  belongs_to: Array
  description: |-
    ### [`pop`](#pop)`():`[`Null`](null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`

    Removes the last element of `this` Array and returns it.

    This operation modifies `this` Array in place.

    If `this` has at least one element, `this.`[`length`](#length) will decrease by 1.

    If `this` is the empty Array `[]`, null is returned and the length remains 0.
- name: Array.push()
  id: array#push
  summary: Adds the element x at the end of this Array and returns the new length of this Array
  belongs_to: Array
  description: |-
    ### [`push`](#push)`(``x:``T``):`[`Int`](int "Int - The standard Int type.")

    Adds the element `x` at the end of `this` Array and returns the new length of `this` Array.

    This operation modifies `this` Array in place.

    `this.`[`length`](#length) increases by 1.
- name: Array.remove()
  id: array#remove
  summary: Removes the first occurrence of x in this Array
  belongs_to: Array
  description: |-
    ### [`remove`](#remove)`(``x:``T``):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Removes the first occurrence of `x` in `this` Array.

    This operation modifies `this` Array in place.

    If `x` is found by checking standard equality, it is removed from `this` Array and all following elements are reindexed accordingly. The function then returns true.

    If `x` is not found, `this` Array is not changed and the function returns false.
- name: Array.resize()
  id: array#resize
  summary: Set the length of the Array
  belongs_to: Array
  description: |-
    ### [`resize`](#resize)`(``len:`[`Int`](int "Int - The standard Int type.")`):`[`Void`](void "Void - The standard Void type.")

    Set the length of the Array.

    If `len` is shorter than the array's current size, the last `length - len` elements will be removed. If `len` is longer, the Array will be extended, with new elements set to a target-specific default value:

    - always null on dynamic targets
    - 0, 0.0 or false for Int, Float and Bool respectively on static targets
    - null for other types on static targets
- name: Array.reverse()
  id: array#reverse
  summary: Reverse the order of elements of this Array
  belongs_to: Array
  description: |-
    ### [`reverse`](#reverse)`():`[`Void`](void "Void - The standard Void type.")

    Reverse the order of elements of `this` Array.

    This operation modifies `this` Array in place.

    If `this.`[`length`](#length)` < 2`, `this` remains unchanged.
- name: Array.shift()
  id: array#shift
  summary: Removes the first element of this Array and returns it
  belongs_to: Array
  description: |-
    ### [`shift`](#shift)`():`[`Null`](null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`

    Removes the first element of `this` Array and returns it.

    This operation modifies `this` Array in place.

    If `this` has at least one element, `this`.length and the index of each remaining element is decreased by 1.

    If `this` is the empty Array `[]`, `null` is returned and the length remains 0.
- name: Array.slice()
  id: array#slice
  summary: Creates a shallow copy of the range of this Array, starting at and including pos, up to but not including end
  belongs_to: Array
  description: |-
    ### [`slice`](#slice)`(``pos:`[`Int`](int "Int - The standard Int type.")`,``?end:`[`Int`](int "Int - The standard Int type.")`):`[`Array`](array "Array")`<``T``>`

    Creates a shallow copy of the range of `this` Array, starting at and including `pos`, up to but not including `end`.

    This operation does not modify `this` Array.

    The elements are not copied and retain their identity.

    If `end` is omitted or exceeds `this.`[`length`](#length), it defaults to the end of `this` Array.

    If `pos` or `end` are negative, their offsets are calculated from the end of `this` Array by `this.`[`length`](#length)` + pos` and `this.`[`length`](#length)` + end` respectively. If this yields a negative value, 0 is used instead.

    If `pos` exceeds `this.`[`length`](#length) or if `end` is less than or equals `pos`, the result is `[]`.
- name: Array.sort()
  id: array#sort
  summary: Sorts this Array according to the comparison function f, where f(x,y) returns 0 if x == y, a positive Int if x > y and a negative Int if x < y
  belongs_to: Array
  description: |-
    ### [`sort`](#sort)`(``f:(``T``, ``T``) ‑> `[`Int`](int "Int - The standard Int type.")`):`[`Void`](void "Void - The standard Void type.")

    Sorts `this` Array according to the comparison function `f`, where `f(x,y)` returns 0 if x == y, a positive Int if x \> y and a negative Int if x \< y.

    This operation modifies `this` Array in place.

    The sort operation is not guaranteed to be stable, which means that the order of equal elements may not be retained. For a stable Array sorting algorithm, [`haxe.ds.ArraySort.sort`](haxe/ds/arraysort#sort)`()` can be used instead.

    If `f` is null, the result is unspecified.
- name: Array.splice()
  id: array#splice
  summary: Removes len elements from this Array, starting at and including pos, an returns them
  belongs_to: Array
  description: |-
    ### [`splice`](#splice)`(``pos:`[`Int`](int "Int - The standard Int type.")`,``len:`[`Int`](int "Int - The standard Int type.")`):`[`Array`](array "Array")`<``T``>`

    Removes `len` elements from `this` Array, starting at and including `pos`, an returns them.

    This operation modifies `this` Array in place.

    If `len` is \< 0 or `pos` exceeds `this`.length, an empty Array \[\] is returned and `this` Array is unchanged.

    If `pos` is negative, its value is calculated from the end of `this` Array by `this.`[`length`](#length)` + pos`. If this yields a negative value, 0 is used instead.

    If the sum of the resulting values for `len` and `pos` exceed `this.`[`length`](#length), this operation will affect the elements from `pos` to the end of `this` Array.

    The length of the returned Array is equal to the new length of `this` Array subtracted from the original length of `this` Array. In other words, each element of the original `this` Array either remains in `this` Array or becomes an element of the returned Array.
- name: Array.toString()
  id: array#toString
  summary: Returns a string representation of this Array
  belongs_to: Array
  description: |-
    ### [`toString`](#toString)`():`[`String`](string "String - The basic String class.")

    Returns a string representation of `this` Array.

    The result will include the individual elements' String representations separated by comma. The enclosing \[ \] may be missing on some platforms, use [`Std.string`](std#string)`()` to get a String representation that is consistent across platforms.
- name: Array.unshift()
  id: array#unshift
  summary: Adds the element x at the start of this Array
  belongs_to: Array
  description: "### [`unshift`](#unshift)`(``x:``T``):`[`Void`](void \"Void - The standard Void type.\")\n\nAdds the element `x` at the start of `this` Array.\n\nThis operation modifies `this` Array in place.\n\n`this.`[`length`](#length) and the index of each Array element increases by 1.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Array.html](https://api.haxe.org/Array.html)"
- name: ArrayAccess
  id: arrayaccess
  summary: ArrayAccess is used to indicate a class that can be accessed using brackets
  description: "# ArrayAccess\\<T\\>\n\n[no package](index)\n\nextended by [IList_1](https://api.haxe.org/cs/system/collections/generic/IList_1.html \"cs.system.collections.generic.IList_1\"), [IDictionary](https://api.haxe.org/cs/system/collections/IDictionary.html \"cs.system.collections.IDictionary\"), [IList](https://api.haxe.org/cs/system/collections/IList.html \"cs.system.collections.IList\")\n\n*Available on all platforms*\n\n[`ArrayAccess`](arrayaccess) is used to indicate a class that can be accessed using brackets. The type parameter represents the type of the elements stored.\n\nThis interface should be used for externs only. Haxe does not support custom array access on classes. However, array access can be implemented for abstract types.\n\nSee also:\n\n- <https://haxe.org/manual/types-abstract-array-access.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/ArrayAccess.html](https://api.haxe.org/ArrayAccess.html)"
- name: Bool
  id: bool
  summary: The standard Boolean type, which can either be true or false
  description: "# Bool\n\n[no package](index)\n\n*Available on all platforms*\n\nThe standard Boolean type, which can either be [`true`](bool) or [`false`](bool).\n\nOn static targets, `null` cannot be assigned to [`Bool`](bool). If this is necessary, [`Null`](null)`<`[`Bool`](bool)`>` can be used instead.\n\nSee also:\n\n- <https://haxe.org/manual/types-bool.html>\n\n- <https://haxe.org/manual/types-nullability.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Bool.html](https://api.haxe.org/Bool.html)"
- name: CallStack
  id: haxe/callstack
  summary: Get information about the call stack
  description: "# CallStack([Array](../array \"Array\")\\<[StackItem](stackitem \"haxe.StackItem - Elements return by CallStack methods.\")\\>)\n\npackage [haxe](index)\n\nfrom [Array](../array \"Array\")\\<[StackItem](stackitem \"haxe.StackItem - Elements return by CallStack methods.\")\\>\n\n*Available on all platforms*\n\nGet information about the call stack.\n\n## Static methods\n\n### `static`[`callStack`](#callStack)`():`[`Array`](../array \"Array\")`<`[`StackItem`](stackitem \"haxe.StackItem - Elements return by CallStack methods.\")`>`\n\nReturn the call stack elements, or an empty array if not available.\n\n### `static`[`exceptionStack`](#exceptionStack)`():`[`Array`](../array \"Array\")`<`[`StackItem`](stackitem \"haxe.StackItem - Elements return by CallStack methods.\")`>`\n\nReturn the exception stack : this is the stack elements between the place the last exception was thrown and the place it was caught, or an empty array if not available.\n\nMay not work if catch type was a derivative from [`haxe.Exception`](exception#Exception).\n\n### `static`[`toString`](#toString)`(``stack:`[`CallStack`](callstack \"haxe.CallStack - Get information about the call stack.\")`):`[`String`](../string \"String - The basic String class.\")\n\nReturns a representation of the stack as a printable string.\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../int \"Int - The standard Int type.\")\n\nThe length of this stack.\n\n## Methods\n\n### `inline`[`copy`](#copy)`():`[`CallStack`](callstack \"haxe.CallStack - Get information about the call stack.\")\n\nMake a copy of the stack.\n\n### `inline`[`get`](#get)`(``index:`[`Int`](../int \"Int - The standard Int type.\")`):`[`StackItem`](stackitem \"haxe.StackItem - Elements return by CallStack methods.\")\n\n### [`subtract`](#subtract)`(``stack:`[`CallStack`](callstack \"haxe.CallStack - Get information about the call stack.\")`):`[`CallStack`](callstack \"haxe.CallStack - Get information about the call stack.\")\n\nReturns a range of entries of current stack from the beginning to the the common part of this and `stack`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/CallStack.html](https://api.haxe.org/haxe/CallStack.html)"
- name: CallStack.callStack()
  id: haxe/callstack#callStack
  summary: Return the call stack elements, or an empty array if not available
  belongs_to: CallStack
  description: |-
    ### `static`[`callStack`](#callStack)`():`[`Array`](../array "Array")`<`[`StackItem`](stackitem "haxe.StackItem - Elements return by CallStack methods.")`>`

    Return the call stack elements, or an empty array if not available.
- name: CallStack.copy()
  id: haxe/callstack#copy
  summary: Make a copy of the stack
  belongs_to: CallStack
  description: |-
    ### `inline`[`copy`](#copy)`():`[`CallStack`](callstack "haxe.CallStack - Get information about the call stack.")

    Make a copy of the stack.
- name: CallStack.exceptionStack()
  id: haxe/callstack#exceptionStack
  summary: 'Return the exception stack : this is the stack elements between the place the last exception was thrown and the place it was caught, or an empty array if not available'
  belongs_to: CallStack
  description: |-
    ### `static`[`exceptionStack`](#exceptionStack)`():`[`Array`](../array "Array")`<`[`StackItem`](stackitem "haxe.StackItem - Elements return by CallStack methods.")`>`

    Return the exception stack : this is the stack elements between the place the last exception was thrown and the place it was caught, or an empty array if not available.

    May not work if catch type was a derivative from [`haxe.Exception`](exception#Exception).
- name: CallStack.get()
  id: haxe/callstack#get
  summary: null
  belongs_to: CallStack
  description: '### `inline`[`get`](#get)`(``index:`[`Int`](../int "Int - The standard Int type.")`):`[`StackItem`](stackitem "haxe.StackItem - Elements return by CallStack methods.")'
- name: CallStack.length
  id: haxe/callstack#length
  summary: The length of this stack
  belongs_to: CallStack
  description: |-
    ### `read only`[`length`](#length)`:`[`Int`](../int "Int - The standard Int type.")

    The length of this stack.

    ## Methods
- name: CallStack.subtract()
  id: haxe/callstack#subtract
  summary: Returns a range of entries of current stack from the beginning to the the common part of this and stack
  belongs_to: CallStack
  description: "### [`subtract`](#subtract)`(``stack:`[`CallStack`](callstack \"haxe.CallStack - Get information about the call stack.\")`):`[`CallStack`](callstack \"haxe.CallStack - Get information about the call stack.\")\n\nReturns a range of entries of current stack from the beginning to the the common part of this and `stack`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/CallStack.html](https://api.haxe.org/haxe/CallStack.html)"
- name: CallStack.toString()
  id: haxe/callstack#toString
  summary: Returns a representation of the stack as a printable string
  belongs_to: CallStack
  description: |-
    ### `static`[`toString`](#toString)`(``stack:`[`CallStack`](callstack "haxe.CallStack - Get information about the call stack.")`):`[`String`](../string "String - The basic String class.")

    Returns a representation of the stack as a printable string.

    ## Variables
- name: Class
  id: class
  summary: An abstract type that represents a Class
  description: "# Class\\<T\\>\n\n[no package](index)\n\n*Available on all platforms*\n\nAn abstract type that represents a Class.\n\nSee [`Type`](type) for the Haxe Reflection API.\n\nSee also:\n\n- <https://haxe.org/manual/types-class-instance.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Class.html](https://api.haxe.org/Class.html)"
- name: Config
  id: mbedtls/config
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Config\n\npackage [mbedtls](index)\n\n*Available on macro*\n\n## Constructor\n\n### [`new`](#new)`()`\n\n## Methods\n\n### [`authmode`](#authmode)`(``authmode:`[`SslAuthmode`](sslauthmode \"mbedtls.SslAuthmode\")`):`[`Void`](../void \"Void - The standard Void type.\")\n\n### [`ca_chain`](#ca_chain)`(``ca_chain:`[`X509Crt`](x509crt \"mbedtls.X509Crt\")`):`[`Void`](../void \"Void - The standard Void type.\")\n\n### [`defaults`](#defaults)`(``endpoint:`[`SslEndpoint`](sslendpoint \"mbedtls.SslEndpoint\")`,`` ``transport:`[`SslTransport`](ssltransport \"mbedtls.SslTransport\")`,`` ``preset:`[`SslPreset`](sslpreset \"mbedtls.SslPreset\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n### [`rng`](#rng)`<``T``>(``p_rng:``T``):`[`Void`](../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/Config.html](https://api.haxe.org/mbedtls/Config.html)"
- name: Config.authmode()
  id: mbedtls/config#authmode
  summary: null
  belongs_to: Config
  description: '### [`authmode`](#authmode)`(``authmode:`[`SslAuthmode`](sslauthmode "mbedtls.SslAuthmode")`):`[`Void`](../void "Void - The standard Void type.")'
- name: Config.ca_chain()
  id: mbedtls/config#ca_chain
  summary: null
  belongs_to: Config
  description: '### [`ca_chain`](#ca_chain)`(``ca_chain:`[`X509Crt`](x509crt "mbedtls.X509Crt")`):`[`Void`](../void "Void - The standard Void type.")'
- name: Config.defaults()
  id: mbedtls/config#defaults
  summary: null
  belongs_to: Config
  description: '### [`defaults`](#defaults)`(``endpoint:`[`SslEndpoint`](sslendpoint "mbedtls.SslEndpoint")`,``transport:`[`SslTransport`](ssltransport "mbedtls.SslTransport")`,``preset:`[`SslPreset`](sslpreset "mbedtls.SslPreset")`):`[`Int`](../int "Int - The standard Int type.")'
- name: Config.rng()
  id: mbedtls/config#rng
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: Config
  description: "### [`rng`](#rng)`<``T``>(``p_rng:``T``):`[`Void`](../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/Config.html](https://api.haxe.org/mbedtls/Config.html)"
- name: Constructible
  id: haxe/constructible
  summary: If a type parameter A is assigned to a type parameter B which is constrained to Constructible<T>, A must be explicitly constrained to Constructible<T> as well
  description: "# Constructible\\<T\\>([Dynamic](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\"))\n\npackage [haxe](index)\n\nimport [haxe.Constraints](constraints)\n\n*Available on all platforms*\n\nThis type unifies with any instance of classes that have a constructor which\n\n- is `public` and\n- unifies with the type used for type parameter `T`.\n\nIf a type parameter `A` is assigned to a type parameter `B` which is constrained to [`Constructible`](constructible#Constructible)`<T>`, A must be explicitly constrained to [`Constructible`](constructible#Constructible)`<T>` as well.\n\nIt is intended to be used as a type parameter constraint. If used as a real type, the underlying type will be [`Dynamic`](../dynamic).\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Constructible.html](https://api.haxe.org/haxe/Constructible.html)"
- name: crypto.Adler32
  id: haxe/crypto/adler32
  summary: Calculates the Adler32 of the given Bytes
  description: "# Adler32\n\npackage [haxe.crypto](index)\n\n*Available on all platforms*\n\nCalculates the Adler32 of the given Bytes.\n\n## Static methods\n\n### `static`[`make`](#make)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `static`[`read`](#read)`(``i:`[`Input`](../io/input \"haxe.io.Input - An Input is an abstract reader.\")`):`[`Adler32`](adler32 \"haxe.crypto.Adler32 - Calculates the Adler32 of the given Bytes.\")\n\n## Constructor\n\n### [`new`](#new)`()`\n\n## Methods\n\n### [`equals`](#equals)`(``a:`[`Adler32`](adler32 \"haxe.crypto.Adler32 - Calculates the Adler32 of the given Bytes.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`get`](#get)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n### [`update`](#update)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Adler32.html](https://api.haxe.org/haxe/crypto/Adler32.html)"
- name: crypto.Adler32.equals()
  id: haxe/crypto/adler32#equals
  summary: null
  belongs_to: crypto.Adler32
  description: '### [`equals`](#equals)`(``a:`[`Adler32`](adler32 "haxe.crypto.Adler32 - Calculates the Adler32 of the given Bytes.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: crypto.Adler32.get()
  id: haxe/crypto/adler32#get
  summary: null
  belongs_to: crypto.Adler32
  description: '### [`get`](#get)`():`[`Int`](../../int "Int - The standard Int type.")'
- name: crypto.Adler32.make()
  id: haxe/crypto/adler32#make
  summary: null
  belongs_to: crypto.Adler32
  description: '### `static`[`make`](#make)`(``b:`[`Bytes`](../io/bytes "haxe.io.Bytes")`):`[`Int`](../../int "Int - The standard Int type.")'
- name: crypto.Adler32.read()
  id: haxe/crypto/adler32#read
  summary: null
  belongs_to: crypto.Adler32
  description: |-
    ### `static`[`read`](#read)`(``i:`[`Input`](../io/input "haxe.io.Input - An Input is an abstract reader.")`):`[`Adler32`](adler32 "haxe.crypto.Adler32 - Calculates the Adler32 of the given Bytes.")

    ## Constructor

    ### [`new`](#new)`()`

    ## Methods
- name: crypto.Adler32.toString()
  id: haxe/crypto/adler32#toString
  summary: null
  belongs_to: crypto.Adler32
  description: '### [`toString`](#toString)`():`[`String`](../../string "String - The basic String class.")'
- name: crypto.Adler32.update()
  id: haxe/crypto/adler32#update
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: crypto.Adler32
  description: "### [`update`](#update)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Adler32.html](https://api.haxe.org/haxe/crypto/Adler32.html)"
- name: crypto.Base64
  id: haxe/crypto/base64
  summary: Allows one to encode/decode String and bytes using Base64 encoding
  description: "# Base64\n\npackage [haxe.crypto](index)\n\n*Available on all platforms*\n\nAllows one to encode/decode String and bytes using Base64 encoding.\n\n## Static variables\n\n### `static``read only`[`BYTES`](#BYTES)`:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")` = haxe.io.Bytes.ofString(CHARS)`\n\n### `static``read only`[`CHARS`](#CHARS)`:`[`String`](../../string \"String - The basic String class.\")` = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"`\n\n### `static``read only`[`URL_BYTES`](#URL_BYTES)`:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")` = haxe.io.Bytes.ofString(URL_CHARS)`\n\n### `static``read only`[`URL_CHARS`](#URL_CHARS)`:`[`String`](../../string \"String - The basic String class.\")` = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"`\n\n## Static methods\n\n### `static`[`decode`](#decode)`(``str:`[`String`](../../string \"String - The basic String class.\")`,`` ``complement:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true``):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n### `static`[`encode`](#encode)`(``bytes:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``complement:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true``):`[`String`](../../string \"String - The basic String class.\")\n\n### `static`[`urlDecode`](#urlDecode)`(``str:`[`String`](../../string \"String - The basic String class.\")`,`` ``complement:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n### `static`[`urlEncode`](#urlEncode)`(``bytes:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``complement:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Base64.html](https://api.haxe.org/haxe/crypto/Base64.html)"
- name: crypto.Base64.BYTES()
  id: haxe/crypto/base64#BYTES
  summary: null
  belongs_to: crypto.Base64
  description: '### `static``read only`[`BYTES`](#BYTES)`:`[`Bytes`](../io/bytes "haxe.io.Bytes")` = haxe.io.Bytes.ofString(CHARS)`'
- name: crypto.Base64.CHARS
  id: haxe/crypto/base64#CHARS
  summary: null
  belongs_to: crypto.Base64
  description: '### `static``read only`[`CHARS`](#CHARS)`:`[`String`](../../string "String - The basic String class.")` = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"`'
- name: crypto.Base64.decode()
  id: haxe/crypto/base64#decode
  summary: null
  belongs_to: crypto.Base64
  description: '### `static`[`decode`](#decode)`(``str:`[`String`](../../string "String - The basic String class.")`,``complement:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = true``):`[`Bytes`](../io/bytes "haxe.io.Bytes")'
- name: crypto.Base64.encode()
  id: haxe/crypto/base64#encode
  summary: null
  belongs_to: crypto.Base64
  description: '### `static`[`encode`](#encode)`(``bytes:`[`Bytes`](../io/bytes "haxe.io.Bytes")`,``complement:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = true``):`[`String`](../../string "String - The basic String class.")'
- name: crypto.Base64.URL_BYTES()
  id: haxe/crypto/base64#URL_BYTES
  summary: null
  belongs_to: crypto.Base64
  description: '### `static``read only`[`URL_BYTES`](#URL_BYTES)`:`[`Bytes`](../io/bytes "haxe.io.Bytes")` = haxe.io.Bytes.ofString(URL_CHARS)`'
- name: crypto.Base64.URL_CHARS
  id: haxe/crypto/base64#URL_CHARS
  summary: null
  belongs_to: crypto.Base64
  description: |-
    ### `static``read only`[`URL_CHARS`](#URL_CHARS)`:`[`String`](../../string "String - The basic String class.")` = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"`

    ## Static methods
- name: crypto.Base64.urlDecode()
  id: haxe/crypto/base64#urlDecode
  summary: null
  belongs_to: crypto.Base64
  description: '### `static`[`urlDecode`](#urlDecode)`(``str:`[`String`](../../string "String - The basic String class.")`,``complement:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = false``):`[`Bytes`](../io/bytes "haxe.io.Bytes")'
- name: crypto.Base64.urlEncode()
  id: haxe/crypto/base64#urlEncode
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: crypto.Base64
  description: "### `static`[`urlEncode`](#urlEncode)`(``bytes:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,``complement:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Base64.html](https://api.haxe.org/haxe/crypto/Base64.html)"
- name: crypto.BaseCode
  id: haxe/crypto/basecode
  summary: Allows one to encode/decode String and bytes using a power of two base dictionary
  description: "# BaseCode\n\npackage [haxe.crypto](index)\n\n*Available on all platforms*\n\nAllows one to encode/decode String and bytes using a power of two base dictionary.\n\n## Static methods\n\n### `static`[`decode`](#decode)`(``s:`[`String`](../../string \"String - The basic String class.\")`,`` ``base:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### `static`[`encode`](#encode)`(``s:`[`String`](../../string \"String - The basic String class.\")`,`` ``base:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n## Constructor\n\n### [`new`](#new)`(``base:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`)`\n\n## Methods\n\n### [`decodeBytes`](#decodeBytes)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n### [`decodeString`](#decodeString)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`encodeBytes`](#encodeBytes)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n### [`encodeString`](#encodeString)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/BaseCode.html](https://api.haxe.org/haxe/crypto/BaseCode.html)"
- name: crypto.BaseCode.decode()
  id: haxe/crypto/basecode#decode
  summary: null
  belongs_to: crypto.BaseCode
  description: '### `static`[`decode`](#decode)`(``s:`[`String`](../../string "String - The basic String class.")`,``base:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")'
- name: crypto.BaseCode.decodeBytes()
  id: haxe/crypto/basecode#decodeBytes
  summary: null
  belongs_to: crypto.BaseCode
  description: '### [`decodeBytes`](#decodeBytes)`(``b:`[`Bytes`](../io/bytes "haxe.io.Bytes")`):`[`Bytes`](../io/bytes "haxe.io.Bytes")'
- name: crypto.BaseCode.decodeString()
  id: haxe/crypto/basecode#decodeString
  summary: null
  belongs_to: crypto.BaseCode
  description: '### [`decodeString`](#decodeString)`(``s:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")'
- name: crypto.BaseCode.encode()
  id: haxe/crypto/basecode#encode
  summary: null
  belongs_to: crypto.BaseCode
  description: |-
    ### `static`[`encode`](#encode)`(``s:`[`String`](../../string "String - The basic String class.")`,``base:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    ## Constructor

    ### [`new`](#new)`(``base:`[`Bytes`](../io/bytes "haxe.io.Bytes")`)`

    ## Methods
- name: crypto.BaseCode.encodeBytes()
  id: haxe/crypto/basecode#encodeBytes
  summary: null
  belongs_to: crypto.BaseCode
  description: '### [`encodeBytes`](#encodeBytes)`(``b:`[`Bytes`](../io/bytes "haxe.io.Bytes")`):`[`Bytes`](../io/bytes "haxe.io.Bytes")'
- name: crypto.BaseCode.encodeString()
  id: haxe/crypto/basecode#encodeString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: crypto.BaseCode
  description: "### [`encodeString`](#encodeString)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/BaseCode.html](https://api.haxe.org/haxe/crypto/BaseCode.html)"
- name: crypto.Crc32
  id: haxe/crypto/crc32
  summary: Calculates the Crc32 of the given Bytes
  description: "# Crc32\n\npackage [haxe.crypto](index)\n\n*Available on all platforms*\n\nCalculates the Crc32 of the given Bytes.\n\n## Static methods\n\n### `static`[`make`](#make)`(``data:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\nCalculates the CRC32 of the given data bytes\n\n## Constructor\n\n### `inline`[`new`](#new)`()`\n\n## Methods\n\n### `inline`[`byte`](#byte)`(``b:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### `inline`[`get`](#get)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `inline`[`update`](#update)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Crc32.html](https://api.haxe.org/haxe/crypto/Crc32.html)"
- name: crypto.Crc32.byte()
  id: haxe/crypto/crc32#byte
  summary: null
  belongs_to: crypto.Crc32
  description: '### `inline`[`byte`](#byte)`(``b:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: crypto.Crc32.get()
  id: haxe/crypto/crc32#get
  summary: null
  belongs_to: crypto.Crc32
  description: '### `inline`[`get`](#get)`():`[`Int`](../../int "Int - The standard Int type.")'
- name: crypto.Crc32.make()
  id: haxe/crypto/crc32#make
  summary: null
  belongs_to: crypto.Crc32
  description: |-
    ### `static`[`make`](#make)`(``data:`[`Bytes`](../io/bytes "haxe.io.Bytes")`):`[`Int`](../../int "Int - The standard Int type.")

    Calculates the CRC32 of the given data bytes

    ## Constructor

    ### `inline`[`new`](#new)`()`

    ## Methods
- name: crypto.Crc32.update()
  id: haxe/crypto/crc32#update
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: crypto.Crc32
  description: "### `inline`[`update`](#update)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Crc32.html](https://api.haxe.org/haxe/crypto/Crc32.html)"
- name: crypto.HashMethod
  id: haxe/crypto/hashmethod
  summary: Hash methods for Hmac calculation
  description: "# HashMethod\n\npackage [haxe.crypto](index)\n\nimport [haxe.crypto.Hmac](hmac)\n\n*Available on all platforms*\n\nHash methods for Hmac calculation.\n\n## Values\n\n### `MD5`\n\n### `SHA1`\n\n### `SHA256`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/HashMethod.html](https://api.haxe.org/haxe/crypto/HashMethod.html)"
- name: crypto.HashMethod.MD5
  id: haxe/crypto/hashmethod#MD5
  summary: null
  belongs_to: crypto.HashMethod
  description: '### `MD5`'
- name: crypto.HashMethod.SHA1
  id: haxe/crypto/hashmethod#SHA1
  summary: null
  belongs_to: crypto.HashMethod
  description: '### `SHA1`'
- name: crypto.HashMethod.SHA256
  id: haxe/crypto/hashmethod#SHA256
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: crypto.HashMethod
  description: "### `SHA256`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/HashMethod.html](https://api.haxe.org/haxe/crypto/HashMethod.html)"
- name: crypto.Hmac
  id: haxe/crypto/hmac
  summary: Calculates a Hmac of the given Bytes using a HashMethod
  description: "# Hmac\n\npackage [haxe.crypto](index)\n\n*Available on all platforms*\n\nCalculates a Hmac of the given Bytes using a HashMethod.\n\n## Constructor\n\n### [`new`](#new)`(``hashMethod:`[`HashMethod`](hashmethod \"haxe.crypto.HashMethod - Hash methods for Hmac calculation.\")`)`\n\n## Methods\n\n### [`make`](#make)`(``key:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``msg:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Hmac.html](https://api.haxe.org/haxe/crypto/Hmac.html)"
- name: crypto.Hmac.make()
  id: haxe/crypto/hmac#make
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: crypto.Hmac
  description: "### [`make`](#make)`(``key:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,``msg:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Hmac.html](https://api.haxe.org/haxe/crypto/Hmac.html)"
- name: crypto.Md5
  id: haxe/crypto/md5
  summary: Creates a MD5 of a String
  description: "# Md5\n\npackage [haxe.crypto](index)\n\n*Available on all platforms*\n\nCreates a MD5 of a String.\n\n## Static methods\n\n### `static`[`encode`](#encode)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### `static`[`make`](#make)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Md5.html](https://api.haxe.org/haxe/crypto/Md5.html)"
- name: crypto.Md5.encode()
  id: haxe/crypto/md5#encode
  summary: null
  belongs_to: crypto.Md5
  description: '### `static`[`encode`](#encode)`(``s:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")'
- name: crypto.Md5.make()
  id: haxe/crypto/md5#make
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: crypto.Md5
  description: "### `static`[`make`](#make)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Md5.html](https://api.haxe.org/haxe/crypto/Md5.html)"
- name: crypto.Sha1
  id: haxe/crypto/sha1
  summary: Creates a Sha1 of a String
  description: "# Sha1\n\npackage [haxe.crypto](index)\n\n*Available on all platforms*\n\nCreates a Sha1 of a String.\n\n## Static methods\n\n### `static`[`encode`](#encode)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### `static`[`make`](#make)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Sha1.html](https://api.haxe.org/haxe/crypto/Sha1.html)"
- name: crypto.Sha1.encode()
  id: haxe/crypto/sha1#encode
  summary: null
  belongs_to: crypto.Sha1
  description: '### `static`[`encode`](#encode)`(``s:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")'
- name: crypto.Sha1.make()
  id: haxe/crypto/sha1#make
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: crypto.Sha1
  description: "### `static`[`make`](#make)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Sha1.html](https://api.haxe.org/haxe/crypto/Sha1.html)"
- name: crypto.Sha224
  id: haxe/crypto/sha224
  summary: Creates a Sha224 of a String
  description: "# Sha224\n\npackage [haxe.crypto](index)\n\n*Available on all platforms*\n\nCreates a Sha224 of a String.\n\n## Static methods\n\n### `static`[`encode`](#encode)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### `static`[`make`](#make)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n## Constructor\n\n### [`new`](#new)`()`\n\n*Available on cs, js, neko, cpp, macro, java, lua, python, hl, flash*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Sha224.html](https://api.haxe.org/haxe/crypto/Sha224.html)"
- name: crypto.Sha224.encode()
  id: haxe/crypto/sha224#encode
  summary: null
  belongs_to: crypto.Sha224
  description: '### `static`[`encode`](#encode)`(``s:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")'
- name: crypto.Sha224.make()
  id: haxe/crypto/sha224#make
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: crypto.Sha224
  description: "### `static`[`make`](#make)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n## Constructor\n\n### [`new`](#new)`()`\n\n*Available on cs, js, neko, cpp, macro, java, lua, python, hl, flash*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Sha224.html](https://api.haxe.org/haxe/crypto/Sha224.html)"
- name: crypto.Sha256
  id: haxe/crypto/sha256
  summary: Creates a Sha256 of a String
  description: "# Sha256\n\npackage [haxe.crypto](index)\n\n*Available on all platforms*\n\nCreates a Sha256 of a String.\n\n## Static methods\n\n### `static`[`encode`](#encode)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### `static`[`make`](#make)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Sha256.html](https://api.haxe.org/haxe/crypto/Sha256.html)"
- name: crypto.Sha256.encode()
  id: haxe/crypto/sha256#encode
  summary: null
  belongs_to: crypto.Sha256
  description: '### `static`[`encode`](#encode)`(``s:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")'
- name: crypto.Sha256.make()
  id: haxe/crypto/sha256#make
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: crypto.Sha256
  description: "### `static`[`make`](#make)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/crypto/Sha256.html](https://api.haxe.org/haxe/crypto/Sha256.html)"
- name: CtrDrbg
  id: mbedtls/ctrdrbg
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# CtrDrbg\n\npackage [mbedtls](index)\n\n*Available on macro*\n\n## Constructor\n\n### [`new`](#new)`()`\n\n## Methods\n\n### [`random`](#random)`(``output:`[`Bytes`](../haxe/io/bytes \"haxe.io.Bytes\")`,`` ``output_len:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n### [`seed`](#seed)`(``entropy:`[`Entropy`](entropy \"mbedtls.Entropy\")`,`` ``?custom:`[`String`](../string \"String - The basic String class.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/CtrDrbg.html](https://api.haxe.org/mbedtls/CtrDrbg.html)"
- name: CtrDrbg.random()
  id: mbedtls/ctrdrbg#random
  summary: null
  belongs_to: CtrDrbg
  description: '### [`random`](#random)`(``output:`[`Bytes`](../haxe/io/bytes "haxe.io.Bytes")`,``output_len:`[`Int`](../int "Int - The standard Int type.")`):`[`Int`](../int "Int - The standard Int type.")'
- name: CtrDrbg.seed()
  id: mbedtls/ctrdrbg#seed
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: CtrDrbg
  description: "### [`seed`](#seed)`(``entropy:`[`Entropy`](entropy \"mbedtls.Entropy\")`,``?custom:`[`String`](../string \"String - The basic String class.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/CtrDrbg.html](https://api.haxe.org/mbedtls/CtrDrbg.html)"
- name: Date
  id: date
  summary: The Date class provides a basic structure for date and time related information
  description: "# Date\n\n[no package](index)\n\n*Available on all platforms*\n\nThe Date class provides a basic structure for date and time related information. Date instances can be created by\n\n- `new `[`Date`](date)`()` for a specific date,\n- [`Date.now`](date#now)`()` to obtain information about the current time,\n- [`Date.fromTime`](date#fromTime)`()` with a given timestamp or\n- [`Date.fromString`](date#fromString)`()` by parsing from a String.\n\nThere are some extra functions available in the [`DateTools`](datetools) class.\n\nIn the context of Haxe dates, a timestamp is defined as the number of milliseconds elapsed since 1st January 1970 UTC.\n\n## Supported range\n\nDue to platform limitations, only dates in the range 1970 through 2038 are supported consistently. Some targets may support dates outside this range, depending on the OS at runtime. The [`Date.fromTime`](date#fromTime) method will not work with timestamps outside the range on any target.\n\n## Static methods\n\n### `static`[`fromString`](#fromString)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`Date`](date \"Date - The Date class provides a basic structure for date and time related information.\")\n\nCreates a Date from the formatted string `s`. The following formats are accepted by the function:\n\n- `\"YYYY-MM-DD hh:mm:ss\"`\n- `\"YYYY-MM-DD\"`\n- `\"hh:mm:ss\"`\n\nThe first two formats expressed a date in local time. The third is a time relative to the UTC epoch.\n\n### `static`[`fromTime`](#fromTime)`(``t:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Date`](date \"Date - The Date class provides a basic structure for date and time related information.\")\n\nCreates a Date from the timestamp (in milliseconds) `t`.\n\n### `static`[`now`](#now)`():`[`Date`](date \"Date - The Date class provides a basic structure for date and time related information.\")\n\nReturns a Date representing the current local time.\n\n## Constructor\n\n### [`new`](#new)`(``year:`[`Int`](int \"Int - The standard Int type.\")`,`` ``month:`[`Int`](int \"Int - The standard Int type.\")`,`` ``day:`[`Int`](int \"Int - The standard Int type.\")`,`` ``hour:`[`Int`](int \"Int - The standard Int type.\")`,`` ``min:`[`Int`](int \"Int - The standard Int type.\")`,`` ``sec:`[`Int`](int \"Int - The standard Int type.\")`)`\n\nCreates a new date object from the given arguments.\n\nThe behaviour of a Date instance is only consistent across platforms if the the arguments describe a valid date.\n\n- month: 0 to 11 (note that this is zero-based)\n- day: 1 to 31\n- hour: 0 to 23\n- min: 0 to 59\n- sec: 0 to 59\n\n## Methods\n\n### [`getDate`](#getDate)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the day of `this` Date (1-31 range) in the local timezone.\n\n### [`getDay`](#getDay)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the day of the week of `this` Date (0-6 range, where `0` is Sunday) in the local timezone.\n\n### [`getFullYear`](#getFullYear)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the full year of `this` Date (4 digits) in the local timezone.\n\n### [`getHours`](#getHours)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the hours of `this` Date (0-23 range) in the local timezone.\n\n### [`getMinutes`](#getMinutes)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the minutes of `this` Date (0-59 range) in the local timezone.\n\n### [`getMonth`](#getMonth)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the month of `this` Date (0-11 range) in the local timezone. Note that the month number is zero-based.\n\n### [`getSeconds`](#getSeconds)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the seconds of `this` Date (0-59 range) in the local timezone.\n\n### [`getTime`](#getTime)`():`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the timestamp (in milliseconds) of `this` date. On cpp and neko, this function only has a second resolution, so the result will always be a multiple of `1000.0`, e.g. `1454698271000.0`. To obtain the current timestamp with better precision on cpp and neko, see the [`Sys.time`](https://api.haxe.org/Sys.html#time) API.\n\nFor measuring time differences with millisecond accuracy on all platforms, see [`haxe.Timer.stamp`](haxe/timer#stamp).\n\n### [`getTimezoneOffset`](#getTimezoneOffset)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the time zone difference of `this` Date in the current locale to UTC, in minutes.\n\nAssuming the function is executed on a machine in a UTC+2 timezone, [`Date.now`](date#now)`().getTimezoneOffset()` will return `-120`.\n\n### [`getUTCDate`](#getUTCDate)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the day of `this` Date (1-31 range) in UTC.\n\n### [`getUTCDay`](#getUTCDay)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the day of the week of `this` Date (0-6 range, where `0` is Sunday) in UTC.\n\n### [`getUTCFullYear`](#getUTCFullYear)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the full year of `this` Date (4 digits) in UTC.\n\n### [`getUTCHours`](#getUTCHours)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the hours of `this` Date (0-23 range) in UTC.\n\n### [`getUTCMinutes`](#getUTCMinutes)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the minutes of `this` Date (0-59 range) in UTC.\n\n### [`getUTCMonth`](#getUTCMonth)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the month of `this` Date (0-11 range) in UTC. Note that the month number is zero-based.\n\n### [`getUTCSeconds`](#getUTCSeconds)`():`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the seconds of `this` Date (0-59 range) in UTC.\n\n### [`toString`](#toString)`():`[`String`](string \"String - The basic String class.\")\n\nReturns a string representation of `this` Date in the local timezone using the standard format `YYYY-MM-DD HH:MM:SS`. See [`DateTools.format`](datetools#format) for other formatting rules.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Date.html](https://api.haxe.org/Date.html)"
- name: Date.fromString()
  id: date#fromString
  summary: Creates a Date from the formatted string s
  belongs_to: Date
  description: |-
    ### `static`[`fromString`](#fromString)`(``s:`[`String`](string "String - The basic String class.")`):`[`Date`](date "Date - The Date class provides a basic structure for date and time related information.")

    Creates a Date from the formatted string `s`. The following formats are accepted by the function:

    - `"YYYY-MM-DD hh:mm:ss"`
    - `"YYYY-MM-DD"`
    - `"hh:mm:ss"`

    The first two formats expressed a date in local time. The third is a time relative to the UTC epoch.
- name: Date.fromTime()
  id: date#fromTime
  summary: Creates a Date from the timestamp (in milliseconds) t
  belongs_to: Date
  description: |-
    ### `static`[`fromTime`](#fromTime)`(``t:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Date`](date "Date - The Date class provides a basic structure for date and time related information.")

    Creates a Date from the timestamp (in milliseconds) `t`.
- name: Date.getDate()
  id: date#getDate
  summary: Returns the day of this Date (1-31 range) in the local timezone
  belongs_to: Date
  description: |-
    ### [`getDate`](#getDate)`():`[`Int`](int "Int - The standard Int type.")

    Returns the day of `this` Date (1-31 range) in the local timezone.
- name: Date.getDay()
  id: date#getDay
  summary: Returns the day of the week of this Date (0-6 range, where 0 is Sunday) in the local timezone
  belongs_to: Date
  description: |-
    ### [`getDay`](#getDay)`():`[`Int`](int "Int - The standard Int type.")

    Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday) in the local timezone.
- name: Date.getFullYear()
  id: date#getFullYear
  summary: Returns the full year of this Date (4 digits) in the local timezone
  belongs_to: Date
  description: |-
    ### [`getFullYear`](#getFullYear)`():`[`Int`](int "Int - The standard Int type.")

    Returns the full year of `this` Date (4 digits) in the local timezone.
- name: Date.getHours()
  id: date#getHours
  summary: Returns the hours of this Date (0-23 range) in the local timezone
  belongs_to: Date
  description: |-
    ### [`getHours`](#getHours)`():`[`Int`](int "Int - The standard Int type.")

    Returns the hours of `this` Date (0-23 range) in the local timezone.
- name: Date.getMinutes()
  id: date#getMinutes
  summary: Returns the minutes of this Date (0-59 range) in the local timezone
  belongs_to: Date
  description: |-
    ### [`getMinutes`](#getMinutes)`():`[`Int`](int "Int - The standard Int type.")

    Returns the minutes of `this` Date (0-59 range) in the local timezone.
- name: Date.getMonth()
  id: date#getMonth
  summary: Returns the month of this Date (0-11 range) in the local timezone
  belongs_to: Date
  description: |-
    ### [`getMonth`](#getMonth)`():`[`Int`](int "Int - The standard Int type.")

    Returns the month of `this` Date (0-11 range) in the local timezone. Note that the month number is zero-based.
- name: Date.getSeconds()
  id: date#getSeconds
  summary: Returns the seconds of this Date (0-59 range) in the local timezone
  belongs_to: Date
  description: |-
    ### [`getSeconds`](#getSeconds)`():`[`Int`](int "Int - The standard Int type.")

    Returns the seconds of `this` Date (0-59 range) in the local timezone.
- name: Date.getTime()
  id: date#getTime
  summary: Returns the timestamp (in milliseconds) of this date
  belongs_to: Date
  description: |-
    ### [`getTime`](#getTime)`():`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the timestamp (in milliseconds) of `this` date. On cpp and neko, this function only has a second resolution, so the result will always be a multiple of `1000.0`, e.g. `1454698271000.0`. To obtain the current timestamp with better precision on cpp and neko, see the [`Sys.time`](https://api.haxe.org/Sys.html#time) API.

    For measuring time differences with millisecond accuracy on all platforms, see [`haxe.Timer.stamp`](haxe/timer#stamp).
- name: Date.getTimezoneOffset()
  id: date#getTimezoneOffset
  summary: Returns the time zone difference of this Date in the current locale to UTC, in minutes
  belongs_to: Date
  description: |-
    ### [`getTimezoneOffset`](#getTimezoneOffset)`():`[`Int`](int "Int - The standard Int type.")

    Returns the time zone difference of `this` Date in the current locale to UTC, in minutes.

    Assuming the function is executed on a machine in a UTC+2 timezone, [`Date.now`](date#now)`().getTimezoneOffset()` will return `-120`.
- name: Date.getUTCDate()
  id: date#getUTCDate
  summary: Returns the day of this Date (1-31 range) in UTC
  belongs_to: Date
  description: |-
    ### [`getUTCDate`](#getUTCDate)`():`[`Int`](int "Int - The standard Int type.")

    Returns the day of `this` Date (1-31 range) in UTC.
- name: Date.getUTCDay()
  id: date#getUTCDay
  summary: Returns the day of the week of this Date (0-6 range, where 0 is Sunday) in UTC
  belongs_to: Date
  description: |-
    ### [`getUTCDay`](#getUTCDay)`():`[`Int`](int "Int - The standard Int type.")

    Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday) in UTC.
- name: Date.getUTCFullYear()
  id: date#getUTCFullYear
  summary: Returns the full year of this Date (4 digits) in UTC
  belongs_to: Date
  description: |-
    ### [`getUTCFullYear`](#getUTCFullYear)`():`[`Int`](int "Int - The standard Int type.")

    Returns the full year of `this` Date (4 digits) in UTC.
- name: Date.getUTCHours()
  id: date#getUTCHours
  summary: Returns the hours of this Date (0-23 range) in UTC
  belongs_to: Date
  description: |-
    ### [`getUTCHours`](#getUTCHours)`():`[`Int`](int "Int - The standard Int type.")

    Returns the hours of `this` Date (0-23 range) in UTC.
- name: Date.getUTCMinutes()
  id: date#getUTCMinutes
  summary: Returns the minutes of this Date (0-59 range) in UTC
  belongs_to: Date
  description: |-
    ### [`getUTCMinutes`](#getUTCMinutes)`():`[`Int`](int "Int - The standard Int type.")

    Returns the minutes of `this` Date (0-59 range) in UTC.
- name: Date.getUTCMonth()
  id: date#getUTCMonth
  summary: Returns the month of this Date (0-11 range) in UTC
  belongs_to: Date
  description: |-
    ### [`getUTCMonth`](#getUTCMonth)`():`[`Int`](int "Int - The standard Int type.")

    Returns the month of `this` Date (0-11 range) in UTC. Note that the month number is zero-based.
- name: Date.getUTCSeconds()
  id: date#getUTCSeconds
  summary: Returns the seconds of this Date (0-59 range) in UTC
  belongs_to: Date
  description: |-
    ### [`getUTCSeconds`](#getUTCSeconds)`():`[`Int`](int "Int - The standard Int type.")

    Returns the seconds of `this` Date (0-59 range) in UTC.
- name: Date.now()
  id: date#now
  summary: Returns a Date representing the current local time
  belongs_to: Date
  description: |-
    ### `static`[`now`](#now)`():`[`Date`](date "Date - The Date class provides a basic structure for date and time related information.")

    Returns a Date representing the current local time.

    ## Constructor

    ### [`new`](#new)`(``year:`[`Int`](int "Int - The standard Int type.")`,``month:`[`Int`](int "Int - The standard Int type.")`,``day:`[`Int`](int "Int - The standard Int type.")`,``hour:`[`Int`](int "Int - The standard Int type.")`,``min:`[`Int`](int "Int - The standard Int type.")`,``sec:`[`Int`](int "Int - The standard Int type.")`)`

    Creates a new date object from the given arguments.

    The behaviour of a Date instance is only consistent across platforms if the the arguments describe a valid date.

    - month: 0 to 11 (note that this is zero-based)
    - day: 1 to 31
    - hour: 0 to 23
    - min: 0 to 59
    - sec: 0 to 59

    ## Methods
- name: Date.toString()
  id: date#toString
  summary: Returns a string representation of this Date in the local timezone using the standard format YYYY-MM-DD HH:MM:SS
  belongs_to: Date
  description: "### [`toString`](#toString)`():`[`String`](string \"String - The basic String class.\")\n\nReturns a string representation of `this` Date in the local timezone using the standard format `YYYY-MM-DD HH:MM:SS`. See [`DateTools.format`](datetools#format) for other formatting rules.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Date.html](https://api.haxe.org/Date.html)"
- name: DateTools
  id: datetools
  summary: The DateTools class contains some extra functionalities for handling Date instances and timestamps
  description: "# DateTools\n\n[no package](index)\n\n*Available on all platforms*\n\nThe DateTools class contains some extra functionalities for handling [`Date`](date) instances and timestamps.\n\nIn the context of Haxe dates, a timestamp is defined as the number of milliseconds elapsed since 1st January 1970.\n\n## Static methods\n\n### `static``inline`[`days`](#days)`(``n:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nConverts a number of days to a timestamp.\n\n### `static``inline`[`delta`](#delta)`(``d:`[`Date`](date \"Date - The Date class provides a basic structure for date and time related information.\")`,`` ``t:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Date`](date \"Date - The Date class provides a basic structure for date and time related information.\")\n\nReturns the result of adding timestamp `t` to Date `d`.\n\nThis is a convenience function for calling [`Date.fromTime`](date#fromTime)`(d.getTime() + t)`.\n\n### `static`[`format`](#format)`(``d:`[`Date`](date \"Date - The Date class provides a basic structure for date and time related information.\")`,`` ``f:`[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nFormat the date `d` according to the format `f`. The format is compatible with the `strftime` standard format, except that there is no support in Flash and JS for day and months names (due to lack of proper internationalization API). On Haxe/Neko/Windows, some formats are not supported.\n\n``` prettyprint\nvar t = DateTools.format(Date.now(), \"%Y-%m-%d_%H:%M:%S\");\n// 2016-07-08_14:44:05\n\nvar t = DateTools.format(Date.now(), \"%r\");\n// 02:44:05 PM\n\nvar t = DateTools.format(Date.now(), \"%T\");\n// 14:44:05\n\nvar t = DateTools.format(Date.now(), \"%F\");\n// 2016-07-08\n```\n\n### `static`[`getMonthDays`](#getMonthDays)`(``d:`[`Date`](date \"Date - The Date class provides a basic structure for date and time related information.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the number of days in the month of Date `d`.\n\nThis method handles leap years.\n\n### `static``inline`[`hours`](#hours)`(``n:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nConverts a number of hours to a timestamp.\n\n### `static`[`make`](#make)`(``o:{seconds:`[`Int`](int \"Int - The standard Int type.\")`, ms:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`, minutes:`[`Int`](int \"Int - The standard Int type.\")`, hours:`[`Int`](int \"Int - The standard Int type.\")`, days:`[`Int`](int \"Int - The standard Int type.\")`}``):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nBuild a date-time from several components\n\n### `static`[`makeUtc`](#makeUtc)`(``year:`[`Int`](int \"Int - The standard Int type.\")`,`` ``month:`[`Int`](int \"Int - The standard Int type.\")`,`` ``day:`[`Int`](int \"Int - The standard Int type.\")`,`` ``hour:`[`Int`](int \"Int - The standard Int type.\")`,`` ``min:`[`Int`](int \"Int - The standard Int type.\")`,`` ``sec:`[`Int`](int \"Int - The standard Int type.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n*Available on php, js, cpp, python, flash*\n\nRetrieve Unix timestamp value from Date components. Takes same argument sequence as the Date constructor.\n\n### `static``inline`[`minutes`](#minutes)`(``n:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nConverts a number of minutes to a timestamp.\n\n### `static`[`parse`](#parse)`(``t:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):{seconds:`[`Int`](int \"Int - The standard Int type.\")`, ms:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`, minutes:`[`Int`](int \"Int - The standard Int type.\")`, hours:`[`Int`](int \"Int - The standard Int type.\")`, days:`[`Int`](int \"Int - The standard Int type.\")`}`\n\nSeparate a date-time into several components\n\n### `static``inline`[`seconds`](#seconds)`(``n:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nConverts a number of seconds to a timestamp.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/DateTools.html](https://api.haxe.org/DateTools.html)"
- name: DateTools.days()
  id: datetools#days
  summary: Converts a number of days to a timestamp
  belongs_to: DateTools
  description: |-
    ### `static``inline`[`days`](#days)`(``n:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Converts a number of days to a timestamp.
- name: DateTools.delta()
  id: datetools#delta
  summary: Returns the result of adding timestamp t to Date d
  belongs_to: DateTools
  description: |-
    ### `static``inline`[`delta`](#delta)`(``d:`[`Date`](date "Date - The Date class provides a basic structure for date and time related information.")`,``t:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Date`](date "Date - The Date class provides a basic structure for date and time related information.")

    Returns the result of adding timestamp `t` to Date `d`.

    This is a convenience function for calling [`Date.fromTime`](date#fromTime)`(d.getTime() + t)`.
- name: DateTools.format()
  id: datetools#format
  summary: Format the date d according to the format f
  belongs_to: DateTools
  description: |-
    ### `static`[`format`](#format)`(``d:`[`Date`](date "Date - The Date class provides a basic structure for date and time related information.")`,``f:`[`String`](string "String - The basic String class.")`):`[`String`](string "String - The basic String class.")

    Format the date `d` according to the format `f`. The format is compatible with the `strftime` standard format, except that there is no support in Flash and JS for day and months names (due to lack of proper internationalization API). On Haxe/Neko/Windows, some formats are not supported.

              var t = DateTools.format(Date.now(), "%Y-%m-%d_%H:%M:%S");
        // 2016-07-08_14:44:05

        var t = DateTools.format(Date.now(), "%r");
        // 02:44:05 PM

        var t = DateTools.format(Date.now(), "%T");
        // 14:44:05

        var t = DateTools.format(Date.now(), "%F");
        // 2016-07-08
- name: DateTools.getMonthDays()
  id: datetools#getMonthDays
  summary: Returns the number of days in the month of Date d
  belongs_to: DateTools
  description: |-
    ### `static`[`getMonthDays`](#getMonthDays)`(``d:`[`Date`](date "Date - The Date class provides a basic structure for date and time related information.")`):`[`Int`](int "Int - The standard Int type.")

    Returns the number of days in the month of Date `d`.

    This method handles leap years.
- name: DateTools.hours()
  id: datetools#hours
  summary: Converts a number of hours to a timestamp
  belongs_to: DateTools
  description: |-
    ### `static``inline`[`hours`](#hours)`(``n:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Converts a number of hours to a timestamp.
- name: DateTools.make()
  id: datetools#make
  summary: null
  belongs_to: DateTools
  description: |-
    ### `static`[`make`](#make)`(``o:{seconds:`[`Int`](int "Int - The standard Int type.")`, ms:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`, minutes:`[`Int`](int "Int - The standard Int type.")`, hours:`[`Int`](int "Int - The standard Int type.")`, days:`[`Int`](int "Int - The standard Int type.")`}``):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Build a date-time from several components
- name: DateTools.makeUtc()
  id: datetools#makeUtc
  summary: Retrieve Unix timestamp value from Date components
  belongs_to: DateTools
  description: |-
    ### `static`[`makeUtc`](#makeUtc)`(``year:`[`Int`](int "Int - The standard Int type.")`,``month:`[`Int`](int "Int - The standard Int type.")`,``day:`[`Int`](int "Int - The standard Int type.")`,``hour:`[`Int`](int "Int - The standard Int type.")`,``min:`[`Int`](int "Int - The standard Int type.")`,``sec:`[`Int`](int "Int - The standard Int type.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    *Available on php, js, cpp, python, flash*

    Retrieve Unix timestamp value from Date components. Takes same argument sequence as the Date constructor.
- name: DateTools.minutes()
  id: datetools#minutes
  summary: Converts a number of minutes to a timestamp
  belongs_to: DateTools
  description: |-
    ### `static``inline`[`minutes`](#minutes)`(``n:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Converts a number of minutes to a timestamp.
- name: DateTools.parse()
  id: datetools#parse
  summary: null
  belongs_to: DateTools
  description: |-
    ### `static`[`parse`](#parse)`(``t:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):{seconds:`[`Int`](int "Int - The standard Int type.")`, ms:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`, minutes:`[`Int`](int "Int - The standard Int type.")`, hours:`[`Int`](int "Int - The standard Int type.")`, days:`[`Int`](int "Int - The standard Int type.")`}`

    Separate a date-time into several components
- name: DateTools.seconds()
  id: datetools#seconds
  summary: Converts a number of seconds to a timestamp
  belongs_to: DateTools
  description: "### `static``inline`[`seconds`](#seconds)`(``n:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nConverts a number of seconds to a timestamp.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/DateTools.html](https://api.haxe.org/DateTools.html)"
- name: display.ClassFieldOccurrence
  id: haxe/display/classfieldoccurrence
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ClassFieldOccurrence\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`resolution`](#resolution)`:`[`FieldResolution`](fieldresolution \"haxe.display.FieldResolution\")\n\n### `optional`[`origin`](#origin)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ClassFieldOrigin`](classfieldorigin \"haxe.display.ClassFieldOrigin\")`<``T``>>`\n\n### [`field`](#field)`:`[`JsonClassField`](jsonclassfield \"haxe.display.JsonClassField\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ClassFieldOccurrence.html](https://api.haxe.org/haxe/display/ClassFieldOccurrence.html)"
- name: display.ClassFieldOccurrence.field
  id: haxe/display/classfieldoccurrence#field
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.ClassFieldOccurrence
  description: "### [`field`](#field)`:`[`JsonClassField`](jsonclassfield \"haxe.display.JsonClassField\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ClassFieldOccurrence.html](https://api.haxe.org/haxe/display/ClassFieldOccurrence.html)"
- name: display.ClassFieldOccurrence.origin
  id: haxe/display/classfieldoccurrence#origin
  summary: null
  belongs_to: display.ClassFieldOccurrence
  description: '### `optional`[`origin`](#origin)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ClassFieldOrigin`](classfieldorigin "haxe.display.ClassFieldOrigin")`<``T``>>`'
- name: display.ClassFieldOccurrence.resolution
  id: haxe/display/classfieldoccurrence#resolution
  summary: null
  belongs_to: display.ClassFieldOccurrence
  description: '### [`resolution`](#resolution)`:`[`FieldResolution`](fieldresolution "haxe.display.FieldResolution")'
- name: display.ClassFieldOrigin
  id: haxe/display/classfieldorigin
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ClassFieldOrigin\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`kind`](#kind)`:`[`ClassFieldOriginKind`](classfieldoriginkind \"haxe.display.ClassFieldOriginKind\")`<``T``>`\n\n### `optional`[`args`](#args)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ClassFieldOrigin.html](https://api.haxe.org/haxe/display/ClassFieldOrigin.html)"
- name: display.ClassFieldOrigin.args
  id: haxe/display/classfieldorigin#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.ClassFieldOrigin
  description: "### `optional`[`args`](#args)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ClassFieldOrigin.html](https://api.haxe.org/haxe/display/ClassFieldOrigin.html)"
- name: display.ClassFieldOrigin.kind
  id: haxe/display/classfieldorigin#kind
  summary: null
  belongs_to: display.ClassFieldOrigin
  description: '### [`kind`](#kind)`:`[`ClassFieldOriginKind`](classfieldoriginkind "haxe.display.ClassFieldOriginKind")`<``T``>`'
- name: display.ClassFieldOriginKind
  id: haxe/display/classfieldoriginkind
  summary: This field doesn't belong to any named type, just an anonymous structure
  description: "# ClassFieldOriginKind\\<T\\>([Int](../../int \"Int - The standard Int type.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`AnonymousStructure`](#AnonymousStructure)`:`[`ClassFieldOriginKind`](classfieldoriginkind \"haxe.display.ClassFieldOriginKind\")`<`[`JsonAnon`](jsonanon \"haxe.display.JsonAnon\")`>`` = 4`\n\nThis field doesn't belong to any named type, just an anonymous structure.\n\n### `inline``read only`[`BuiltIn`](#BuiltIn)`:`[`ClassFieldOriginKind`](classfieldoriginkind \"haxe.display.ClassFieldOriginKind\")`<`[`NoData`](nodata \"haxe.display.NoData\")`>`` = 5`\n\nSpecial fields built into the compiler, such as: - `code` on single-character Strings - `bind()` on functions.\n\n### `inline``read only`[`Parent`](#Parent)`:`[`ClassFieldOriginKind`](classfieldoriginkind \"haxe.display.ClassFieldOriginKind\")`<`[`JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<``T``>>`` = 2`\n\nThe field is declared on a parent type, such as: - a super class field that is not overriden - a forwarded abstract field\n\n### `inline``read only`[`Self`](#Self)`:`[`ClassFieldOriginKind`](classfieldoriginkind \"haxe.display.ClassFieldOriginKind\")`<`[`JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<``T``>>`` = 0`\n\nThe field is declared on the current type itself.\n\n### `inline``read only`[`StaticExtension`](#StaticExtension)`:`[`ClassFieldOriginKind`](classfieldoriginkind \"haxe.display.ClassFieldOriginKind\")`<`[`JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<``T``>>`` = 3`\n\nThe field is a static extension method brought into context with the `using` keyword.\n\n### `inline``read only`[`StaticImport`](#StaticImport)`:`[`ClassFieldOriginKind`](classfieldoriginkind \"haxe.display.ClassFieldOriginKind\")`<`[`JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<``T``>>`` = 1`\n\nThe field is a static field brought into context via a static import (`import `[`pack.Module.Type.field`](../../type#field)).\n\n### `inline``read only`[`Unknown`](#Unknown)`:`[`ClassFieldOriginKind`](classfieldoriginkind \"haxe.display.ClassFieldOriginKind\")`<`[`NoData`](nodata \"haxe.display.NoData\")`>`` = 6`\n\nThe origin of this class field is unknown.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ClassFieldOriginKind.html](https://api.haxe.org/haxe/display/ClassFieldOriginKind.html)"
- name: display.ClassFieldOriginKind.AnonymousStructure
  id: haxe/display/classfieldoriginkind#AnonymousStructure
  summary: This field doesn't belong to any named type, just an anonymous structure
  belongs_to: display.ClassFieldOriginKind
  description: |-
    ### `inline``read only`[`AnonymousStructure`](#AnonymousStructure)`:`[`ClassFieldOriginKind`](classfieldoriginkind "haxe.display.ClassFieldOriginKind")`<`[`JsonAnon`](jsonanon "haxe.display.JsonAnon")`>`` = 4`

    This field doesn't belong to any named type, just an anonymous structure.
- name: display.ClassFieldOriginKind.BuiltIn
  id: haxe/display/classfieldoriginkind#BuiltIn
  summary: 'Special fields built into the compiler, such as: - code on single-character Strings - bind() on functions'
  belongs_to: display.ClassFieldOriginKind
  description: |-
    ### `inline``read only`[`BuiltIn`](#BuiltIn)`:`[`ClassFieldOriginKind`](classfieldoriginkind "haxe.display.ClassFieldOriginKind")`<`[`NoData`](nodata "haxe.display.NoData")`>`` = 5`

    Special fields built into the compiler, such as: - `code` on single-character Strings - `bind()` on functions.
- name: display.ClassFieldOriginKind.Parent
  id: haxe/display/classfieldoriginkind#Parent
  summary: null
  belongs_to: display.ClassFieldOriginKind
  description: |-
    ### `inline``read only`[`Parent`](#Parent)`:`[`ClassFieldOriginKind`](classfieldoriginkind "haxe.display.ClassFieldOriginKind")`<`[`JsonModuleType`](jsonmoduletype "haxe.display.JsonModuleType")`<``T``>>`` = 2`

    The field is declared on a parent type, such as: - a super class field that is not overriden - a forwarded abstract field
- name: display.ClassFieldOriginKind.Self
  id: haxe/display/classfieldoriginkind#Self
  summary: The field is declared on the current type itself
  belongs_to: display.ClassFieldOriginKind
  description: |-
    ### `inline``read only`[`Self`](#Self)`:`[`ClassFieldOriginKind`](classfieldoriginkind "haxe.display.ClassFieldOriginKind")`<`[`JsonModuleType`](jsonmoduletype "haxe.display.JsonModuleType")`<``T``>>`` = 0`

    The field is declared on the current type itself.
- name: display.ClassFieldOriginKind.StaticExtension
  id: haxe/display/classfieldoriginkind#StaticExtension
  summary: The field is a static extension method brought into context with the using keyword
  belongs_to: display.ClassFieldOriginKind
  description: |-
    ### `inline``read only`[`StaticExtension`](#StaticExtension)`:`[`ClassFieldOriginKind`](classfieldoriginkind "haxe.display.ClassFieldOriginKind")`<`[`JsonModuleType`](jsonmoduletype "haxe.display.JsonModuleType")`<``T``>>`` = 3`

    The field is a static extension method brought into context with the `using` keyword.
- name: display.ClassFieldOriginKind.StaticImport
  id: haxe/display/classfieldoriginkind#StaticImport
  summary: The field is a static field brought into context via a static import (import pack.Module.Type.field)
  belongs_to: display.ClassFieldOriginKind
  description: |-
    ### `inline``read only`[`StaticImport`](#StaticImport)`:`[`ClassFieldOriginKind`](classfieldoriginkind "haxe.display.ClassFieldOriginKind")`<`[`JsonModuleType`](jsonmoduletype "haxe.display.JsonModuleType")`<``T``>>`` = 1`

    The field is a static field brought into context via a static import (`import `[`pack.Module.Type.field`](../../type#field)).
- name: display.ClassFieldOriginKind.Unknown
  id: haxe/display/classfieldoriginkind#Unknown
  summary: The origin of this class field is unknown
  belongs_to: display.ClassFieldOriginKind
  description: "### `inline``read only`[`Unknown`](#Unknown)`:`[`ClassFieldOriginKind`](classfieldoriginkind \"haxe.display.ClassFieldOriginKind\")`<`[`NoData`](nodata \"haxe.display.NoData\")`>`` = 6`\n\nThe origin of this class field is unknown.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ClassFieldOriginKind.html](https://api.haxe.org/haxe/display/ClassFieldOriginKind.html)"
- name: display.CompletionItemResolveParams
  id: haxe/display/completionitemresolveparams
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# CompletionItemResolveParams\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\nCompletionItem Resolve\n\n## Fields\n\n### [`index`](#index)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/CompletionItemResolveParams.html](https://api.haxe.org/haxe/display/CompletionItemResolveParams.html)"
- name: display.CompletionItemResolveParams.index
  id: haxe/display/completionitemresolveparams#index
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.CompletionItemResolveParams
  description: "### [`index`](#index)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/CompletionItemResolveParams.html](https://api.haxe.org/haxe/display/CompletionItemResolveParams.html)"
- name: display.CompletionItemResolveResult
  id: haxe/display/completionitemresolveresult
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# CompletionItemResolveResult\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`haxe.display.Response`](response \"haxe.display.Response\")`<{item:`[`haxe.display.DisplayItem`](displayitem \"haxe.display.DisplayItem\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>}>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/CompletionItemResolveResult.html](https://api.haxe.org/haxe/display/CompletionItemResolveResult.html)"
- name: display.CompletionMode
  id: haxe/display/completionmode
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# CompletionMode\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`kind`](#kind)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<``T``>`\n\n### `optional`[`args`](#args)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/CompletionMode.html](https://api.haxe.org/haxe/display/CompletionMode.html)"
- name: display.CompletionMode.args
  id: haxe/display/completionmode#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.CompletionMode
  description: "### `optional`[`args`](#args)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/CompletionMode.html](https://api.haxe.org/haxe/display/CompletionMode.html)"
- name: display.CompletionMode.kind
  id: haxe/display/completionmode#kind
  summary: null
  belongs_to: display.CompletionMode
  description: '### [`kind`](#kind)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<``T``>`'
- name: display.CompletionModeKind
  id: haxe/display/completionmodekind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# CompletionModeKind\\<T\\>([Int](../../int \"Int - The standard Int type.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Extends`](#Extends)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<``T``>`` = 5`\n\n### `inline``read only`[`Field`](#Field)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<`[`FieldCompletionSubject`](fieldcompletionsubject \"haxe.display.FieldCompletionSubject\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`` = 0`\n\n### `inline``read only`[`Implements`](#Implements)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<``T``>`` = 6`\n\n### `inline``read only`[`Import`](#Import)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<``T``>`` = 8`\n\n### `inline``read only`[`Metadata`](#Metadata)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<``T``>`` = 3`\n\n### `inline``read only`[`New`](#New)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<``T``>`` = 10`\n\n### `inline``read only`[`Override`](#Override)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<``T``>`` = 12`\n\n### `inline``read only`[`Pattern`](#Pattern)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<`[`PatternCompletion`](patterncompletion \"haxe.display.PatternCompletion\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`` = 11`\n\n### `inline``read only`[`StructExtension`](#StructExtension)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<`[`StructExtensionCompletion`](structextensioncompletion \"haxe.display.StructExtensionCompletion\")`>`` = 7`\n\n### `inline``read only`[`StructureField`](#StructureField)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<``T``>`` = 1`\n\n### `inline``read only`[`Toplevel`](#Toplevel)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<`[`ToplevelCompletion`](toplevelcompletion \"haxe.display.ToplevelCompletion\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`` = 2`\n\n### `inline``read only`[`TypeDeclaration`](#TypeDeclaration)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<``T``>`` = 14`\n\n### `inline``read only`[`TypeHint`](#TypeHint)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<``T``>`` = 4`\n\n### `inline``read only`[`TypeRelation`](#TypeRelation)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<``T``>`` = 13`\n\n### `inline``read only`[`Using`](#Using)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<``T``>`` = 9`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/CompletionModeKind.html](https://api.haxe.org/haxe/display/CompletionModeKind.html)"
- name: display.CompletionModeKind.Extends
  id: haxe/display/completionmodekind#Extends
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`Extends`](#Extends)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<``T``>`` = 5`'
- name: display.CompletionModeKind.Field
  id: haxe/display/completionmodekind#Field
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`Field`](#Field)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<`[`FieldCompletionSubject`](fieldcompletionsubject "haxe.display.FieldCompletionSubject")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`` = 0`'
- name: display.CompletionModeKind.Implements
  id: haxe/display/completionmodekind#Implements
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`Implements`](#Implements)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<``T``>`` = 6`'
- name: display.CompletionModeKind.Import
  id: haxe/display/completionmodekind#Import
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`Import`](#Import)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<``T``>`` = 8`'
- name: display.CompletionModeKind.Metadata
  id: haxe/display/completionmodekind#Metadata
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`Metadata`](#Metadata)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<``T``>`` = 3`'
- name: display.CompletionModeKind.New
  id: haxe/display/completionmodekind#New
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`New`](#New)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<``T``>`` = 10`'
- name: display.CompletionModeKind.Override
  id: haxe/display/completionmodekind#Override
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`Override`](#Override)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<``T``>`` = 12`'
- name: display.CompletionModeKind.Pattern
  id: haxe/display/completionmodekind#Pattern
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`Pattern`](#Pattern)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<`[`PatternCompletion`](patterncompletion "haxe.display.PatternCompletion")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`` = 11`'
- name: display.CompletionModeKind.StructExtension
  id: haxe/display/completionmodekind#StructExtension
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`StructExtension`](#StructExtension)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<`[`StructExtensionCompletion`](structextensioncompletion "haxe.display.StructExtensionCompletion")`>`` = 7`'
- name: display.CompletionModeKind.StructureField
  id: haxe/display/completionmodekind#StructureField
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`StructureField`](#StructureField)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<``T``>`` = 1`'
- name: display.CompletionModeKind.Toplevel
  id: haxe/display/completionmodekind#Toplevel
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`Toplevel`](#Toplevel)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<`[`ToplevelCompletion`](toplevelcompletion "haxe.display.ToplevelCompletion")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`` = 2`'
- name: display.CompletionModeKind.TypeDeclaration
  id: haxe/display/completionmodekind#TypeDeclaration
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`TypeDeclaration`](#TypeDeclaration)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<``T``>`` = 14`'
- name: display.CompletionModeKind.TypeHint
  id: haxe/display/completionmodekind#TypeHint
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`TypeHint`](#TypeHint)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<``T``>`` = 4`'
- name: display.CompletionModeKind.TypeRelation
  id: haxe/display/completionmodekind#TypeRelation
  summary: null
  belongs_to: display.CompletionModeKind
  description: '### `inline``read only`[`TypeRelation`](#TypeRelation)`:`[`CompletionModeKind`](completionmodekind "haxe.display.CompletionModeKind")`<``T``>`` = 13`'
- name: display.CompletionModeKind.Using
  id: haxe/display/completionmodekind#Using
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.CompletionModeKind
  description: "### `inline``read only`[`Using`](#Using)`:`[`CompletionModeKind`](completionmodekind \"haxe.display.CompletionModeKind\")`<``T``>`` = 9`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/CompletionModeKind.html](https://api.haxe.org/haxe/display/CompletionModeKind.html)"
- name: display.CompletionParams
  id: haxe/display/completionparams
  summary: Unicode character offset in the file
  description: "# CompletionParams\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\nCompletion\n\n## Fields\n\n### [`wasAutoTriggered`](#wasAutoTriggered)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`offset`](#offset)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nUnicode character offset in the file.\n\n### `optional`[`meta`](#meta)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>>`\n\nlist of metas to include in responses\n\n### [`file`](#file)`:`[`FsPath`](fspath \"haxe.display.FsPath\")\n\n### `optional`[`contents`](#contents)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/CompletionParams.html](https://api.haxe.org/haxe/display/CompletionParams.html)"
- name: display.CompletionParams.contents
  id: haxe/display/completionparams#contents
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.CompletionParams
  description: "### `optional`[`contents`](#contents)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/CompletionParams.html](https://api.haxe.org/haxe/display/CompletionParams.html)"
- name: display.CompletionParams.file
  id: haxe/display/completionparams#file
  summary: null
  belongs_to: display.CompletionParams
  description: '### [`file`](#file)`:`[`FsPath`](fspath "haxe.display.FsPath")'
- name: display.CompletionParams.meta
  id: haxe/display/completionparams#meta
  summary: null
  belongs_to: display.CompletionParams
  description: |-
    ### `optional`[`meta`](#meta)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>>`

    list of metas to include in responses
- name: display.CompletionParams.offset
  id: haxe/display/completionparams#offset
  summary: Unicode character offset in the file
  belongs_to: display.CompletionParams
  description: |-
    ### [`offset`](#offset)`:`[`Int`](../../int "Int - The standard Int type.")

    Unicode character offset in the file.
- name: display.CompletionParams.wasAutoTriggered
  id: haxe/display/completionparams#wasAutoTriggered
  summary: null
  belongs_to: display.CompletionParams
  description: '### [`wasAutoTriggered`](#wasAutoTriggered)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.CompletionResponse
  id: haxe/display/completionresponse
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# CompletionResponse\\<T1, T2\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### `optional`[`replaceRange`](#replaceRange)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Range`](range \"haxe.display.Range - A range in a text document expressed as (1-based) start and end positions.\")`>`\n\n### [`mode`](#mode)`:`[`CompletionMode`](completionmode \"haxe.display.CompletionMode\")`<``T2``>`\n\n### [`items`](#items)`:`[`Array`](../../array \"Array\")`<`[`DisplayItem`](displayitem \"haxe.display.DisplayItem\")`<``T1``>>`\n\n### `optional`[`isIncomplete`](#isIncomplete)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`filterString`](#filterString)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/CompletionResponse.html](https://api.haxe.org/haxe/display/CompletionResponse.html)"
- name: display.CompletionResponse.filterString
  id: haxe/display/completionresponse#filterString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.CompletionResponse
  description: "### `optional`[`filterString`](#filterString)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/CompletionResponse.html](https://api.haxe.org/haxe/display/CompletionResponse.html)"
- name: display.CompletionResponse.isIncomplete
  id: haxe/display/completionresponse#isIncomplete
  summary: null
  belongs_to: display.CompletionResponse
  description: '### `optional`[`isIncomplete`](#isIncomplete)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.CompletionResponse.items
  id: haxe/display/completionresponse#items
  summary: null
  belongs_to: display.CompletionResponse
  description: '### [`items`](#items)`:`[`Array`](../../array "Array")`<`[`DisplayItem`](displayitem "haxe.display.DisplayItem")`<``T1``>>`'
- name: display.CompletionResponse.mode
  id: haxe/display/completionresponse#mode
  summary: null
  belongs_to: display.CompletionResponse
  description: '### [`mode`](#mode)`:`[`CompletionMode`](completionmode "haxe.display.CompletionMode")`<``T2``>`'
- name: display.CompletionResponse.replaceRange
  id: haxe/display/completionresponse#replaceRange
  summary: null
  belongs_to: display.CompletionResponse
  description: '### `optional`[`replaceRange`](#replaceRange)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Range`](range "haxe.display.Range - A range in a text document expressed as (1-based) start and end positions.")`>`'
- name: display.CompletionResult
  id: haxe/display/completionresult
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# CompletionResult\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`haxe.display.Response`](response \"haxe.display.Response\")`<`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`haxe.display.CompletionResponse`](completionresponse \"haxe.display.CompletionResponse\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`, `[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/CompletionResult.html](https://api.haxe.org/haxe/display/CompletionResult.html)"
- name: display.ConfigureParams
  id: haxe/display/configureparams
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ConfigureParams\n\npackage [haxe.display](index)\n\nimport [haxe.display.Server](server)\n\n*Available on all platforms*\n\n## Fields\n\n### `optional``final``read only`[`print`](#print)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ConfigurePrintParams`](configureprintparams \"haxe.display.ConfigurePrintParams\")`>`\n\n### `optional``final``read only`[`noModuleChecks`](#noModuleChecks)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional``final``read only`[`legacyCompletion`](#legacyCompletion)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ConfigureParams.html](https://api.haxe.org/haxe/display/ConfigureParams.html)"
- name: display.ConfigureParams.legacyCompletion
  id: haxe/display/configureparams#legacyCompletion
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.ConfigureParams
  description: "### `optional``final``read only`[`legacyCompletion`](#legacyCompletion)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ConfigureParams.html](https://api.haxe.org/haxe/display/ConfigureParams.html)"
- name: display.ConfigureParams.noModuleChecks
  id: haxe/display/configureparams#noModuleChecks
  summary: null
  belongs_to: display.ConfigureParams
  description: '### `optional``final``read only`[`noModuleChecks`](#noModuleChecks)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigureParams.print
  id: haxe/display/configureparams#print
  summary: null
  belongs_to: display.ConfigureParams
  description: '### `optional``final``read only`[`print`](#print)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ConfigurePrintParams`](configureprintparams "haxe.display.ConfigurePrintParams")`>`'
- name: display.ConfigurePrintParams
  id: haxe/display/configureprintparams
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ConfigurePrintParams\n\npackage [haxe.display](index)\n\nimport [haxe.display.Server](server)\n\n*Available on all platforms*\n\n## Fields\n\n### `optional`[`unchangedContent`](#unchangedContent)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`uncaughtError`](#uncaughtError)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`stats`](#stats)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`socketMessage`](#socketMessage)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`skippingDep`](#skippingDep)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`signature`](#signature)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`reusing`](#reusing)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`removedDirectory`](#removedDirectory)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`parsed`](#parsed)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`notCached`](#notCached)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`newContext`](#newContext)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`modulePathChanged`](#modulePathChanged)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`message`](#message)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`foundDirectories`](#foundDirectories)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`displayPosition`](#displayPosition)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`defines`](#defines)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`completion`](#completion)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`changedDirectories`](#changedDirectories)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`cachedModules`](#cachedModules)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`arguments`](#arguments)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional`[`addedDirectory`](#addedDirectory)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ConfigurePrintParams.html](https://api.haxe.org/haxe/display/ConfigurePrintParams.html)"
- name: display.ConfigurePrintParams.addedDirectory
  id: haxe/display/configureprintparams#addedDirectory
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.ConfigurePrintParams
  description: "### `optional`[`addedDirectory`](#addedDirectory)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ConfigurePrintParams.html](https://api.haxe.org/haxe/display/ConfigurePrintParams.html)"
- name: display.ConfigurePrintParams.arguments
  id: haxe/display/configureprintparams#arguments
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`arguments`](#arguments)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.cachedModules
  id: haxe/display/configureprintparams#cachedModules
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`cachedModules`](#cachedModules)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.changedDirectories
  id: haxe/display/configureprintparams#changedDirectories
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`changedDirectories`](#changedDirectories)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.completion
  id: haxe/display/configureprintparams#completion
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`completion`](#completion)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.defines
  id: haxe/display/configureprintparams#defines
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`defines`](#defines)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.displayPosition
  id: haxe/display/configureprintparams#displayPosition
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`displayPosition`](#displayPosition)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.foundDirectories
  id: haxe/display/configureprintparams#foundDirectories
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`foundDirectories`](#foundDirectories)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.message
  id: haxe/display/configureprintparams#message
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`message`](#message)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.modulePathChanged
  id: haxe/display/configureprintparams#modulePathChanged
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`modulePathChanged`](#modulePathChanged)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.newContext
  id: haxe/display/configureprintparams#newContext
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`newContext`](#newContext)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.notCached
  id: haxe/display/configureprintparams#notCached
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`notCached`](#notCached)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.parsed
  id: haxe/display/configureprintparams#parsed
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`parsed`](#parsed)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.removedDirectory
  id: haxe/display/configureprintparams#removedDirectory
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`removedDirectory`](#removedDirectory)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.reusing
  id: haxe/display/configureprintparams#reusing
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`reusing`](#reusing)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.signature
  id: haxe/display/configureprintparams#signature
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`signature`](#signature)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.skippingDep
  id: haxe/display/configureprintparams#skippingDep
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`skippingDep`](#skippingDep)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.socketMessage
  id: haxe/display/configureprintparams#socketMessage
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`socketMessage`](#socketMessage)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.stats
  id: haxe/display/configureprintparams#stats
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`stats`](#stats)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.uncaughtError
  id: haxe/display/configureprintparams#uncaughtError
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`uncaughtError`](#uncaughtError)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ConfigurePrintParams.unchangedContent
  id: haxe/display/configureprintparams#unchangedContent
  summary: null
  belongs_to: display.ConfigurePrintParams
  description: '### `optional`[`unchangedContent`](#unchangedContent)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.ContextParams
  id: haxe/display/contextparams
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ContextParams\n\npackage [haxe.display](index)\n\nimport [haxe.display.Server](server)\n\n*Available on all platforms*\n\n## Fields\n\n### `final``read only`[`signature`](#signature)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ContextParams.html](https://api.haxe.org/haxe/display/ContextParams.html)"
- name: display.ContextParams.signature
  id: haxe/display/contextparams#signature
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.ContextParams
  description: "### `final``read only`[`signature`](#signature)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ContextParams.html](https://api.haxe.org/haxe/display/ContextParams.html)"
- name: display.Define
  id: haxe/display/define
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Define\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`value`](#value)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### [`platforms`](#platforms)`:`[`Array`](../../array \"Array\")`<`[`Platform`](platform \"haxe.display.Platform\")`>`\n\n### [`parameters`](#parameters)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n### [`links`](#links)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### [`doc`](#doc)`:`[`JsonDoc`](jsondoc \"haxe.display.JsonDoc\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Define.html](https://api.haxe.org/haxe/display/Define.html)"
- name: display.Define.doc
  id: haxe/display/define#doc
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.Define
  description: "### [`doc`](#doc)`:`[`JsonDoc`](jsondoc \"haxe.display.JsonDoc\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Define.html](https://api.haxe.org/haxe/display/Define.html)"
- name: display.Define.links
  id: haxe/display/define#links
  summary: null
  belongs_to: display.Define
  description: '### [`links`](#links)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: display.Define.name
  id: haxe/display/define#name
  summary: null
  belongs_to: display.Define
  description: '### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")'
- name: display.Define.parameters
  id: haxe/display/define#parameters
  summary: null
  belongs_to: display.Define
  description: '### [`parameters`](#parameters)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: display.Define.platforms
  id: haxe/display/define#platforms
  summary: null
  belongs_to: display.Define
  description: '### [`platforms`](#platforms)`:`[`Array`](../../array "Array")`<`[`Platform`](platform "haxe.display.Platform")`>`'
- name: display.Define.value
  id: haxe/display/define#value
  summary: null
  belongs_to: display.Define
  description: '### [`value`](#value)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: display.DeterminePackageResult
  id: haxe/display/determinepackageresult
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# DeterminePackageResult\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\nDeterminePackage\n\n## Alias\n\n*alias for* [`haxe.display.Response`](response \"haxe.display.Response\")`<`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DeterminePackageResult.html](https://api.haxe.org/haxe/display/DeterminePackageResult.html)"
- name: display.DisplayItem
  id: haxe/display/displayitem
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# DisplayItem\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### `optional`[`type`](#type)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\n### [`kind`](#kind)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<``T``>`\n\n### `optional`[`index`](#index)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>`\n\n### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayItem.html](https://api.haxe.org/haxe/display/DisplayItem.html)"
- name: display.DisplayItem.args
  id: haxe/display/displayitem#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.DisplayItem
  description: "### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayItem.html](https://api.haxe.org/haxe/display/DisplayItem.html)"
- name: display.DisplayItem.index
  id: haxe/display/displayitem#index
  summary: null
  belongs_to: display.DisplayItem
  description: '### `optional`[`index`](#index)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Int`](../../int "Int - The standard Int type.")`>`'
- name: display.DisplayItem.kind
  id: haxe/display/displayitem#kind
  summary: null
  belongs_to: display.DisplayItem
  description: '### [`kind`](#kind)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<``T``>`'
- name: display.DisplayItem.type
  id: haxe/display/displayitem#type
  summary: null
  belongs_to: display.DisplayItem
  description: '### `optional`[`type`](#type)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonType`](jsontype "haxe.display.JsonType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`'
- name: display.DisplayItemKind
  id: haxe/display/displayitemkind
  summary: Only for the enum values in enum abstracts, other fields use ClassField
  description: "# DisplayItemKind\\<T\\>([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`AnonymousStructure`](#AnonymousStructure)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`JsonAnon`](jsonanon \"haxe.display.JsonAnon\")`>`` = \"AnonymousStructure\"`\n\n### `inline``read only`[`ClassField`](#ClassField)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`ClassFieldOccurrence`](classfieldoccurrence \"haxe.display.ClassFieldOccurrence\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`` = \"ClassField\"`\n\n### `inline``read only`[`Define`](#Define)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`Define`](define \"haxe.display.Define\")`>`` = \"Define\"`\n\n### `inline``read only`[`EnumAbstractField`](#EnumAbstractField)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`ClassFieldOccurrence`](classfieldoccurrence \"haxe.display.ClassFieldOccurrence\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`` = \"EnumAbstractField\"`\n\nOnly for the enum values in enum abstracts, other fields use [`ClassField`](../macro/classfield#ClassField).\n\n### `inline``read only`[`EnumField`](#EnumField)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`EnumFieldOccurrence`](enumfieldoccurrence \"haxe.display.EnumFieldOccurrence\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`` = \"EnumField\"`\n\n### `inline``read only`[`Expression`](#Expression)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`JsonTExpr`](jsontexpr \"haxe.display.JsonTExpr\")`>`` = \"Expression\"`\n\n### `inline``read only`[`Keyword`](#Keyword)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`Keyword`](keyword \"haxe.display.Keyword\")`>`` = \"Keyword\"`\n\n### `inline``read only`[`Literal`](#Literal)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`DisplayLiteral`](displayliteral \"haxe.display.DisplayLiteral\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`` = \"Literal\"`\n\n### `inline``read only`[`Local`](#Local)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`DisplayLocal`](displaylocal \"haxe.display.DisplayLocal\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`` = \"Local\"`\n\n### `inline``read only`[`Metadata`](#Metadata)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`Metadata`](metadata \"haxe.display.Metadata\")`>`` = \"Metadata\"`\n\n### `inline``read only`[`Module`](#Module)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`Module`](module \"haxe.display.Module\")`>`` = \"Module\"`\n\n### `inline``read only`[`Package`](#Package)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`Package`](package \"haxe.display.Package\")`>`` = \"Package\"`\n\n### `inline``read only`[`Type`](#Type)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`DisplayModuleType`](displaymoduletype \"haxe.display.DisplayModuleType\")`>`` = \"Type\"`\n\n### `inline``read only`[`TypeParameter`](#TypeParameter)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`DisplayModuleTypeParameter`](displaymoduletypeparameter \"haxe.display.DisplayModuleTypeParameter\")`>`` = \"TypeParameter\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayItemKind.html](https://api.haxe.org/haxe/display/DisplayItemKind.html)"
- name: display.DisplayItemKind.AnonymousStructure
  id: haxe/display/displayitemkind#AnonymousStructure
  summary: null
  belongs_to: display.DisplayItemKind
  description: '### `inline``read only`[`AnonymousStructure`](#AnonymousStructure)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<`[`JsonAnon`](jsonanon "haxe.display.JsonAnon")`>`` = "AnonymousStructure"`'
- name: display.DisplayItemKind.ClassField
  id: haxe/display/displayitemkind#ClassField
  summary: null
  belongs_to: display.DisplayItemKind
  description: '### `inline``read only`[`ClassField`](#ClassField)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<`[`ClassFieldOccurrence`](classfieldoccurrence "haxe.display.ClassFieldOccurrence")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`` = "ClassField"`'
- name: display.DisplayItemKind.Define
  id: haxe/display/displayitemkind#Define
  summary: null
  belongs_to: display.DisplayItemKind
  description: '### `inline``read only`[`Define`](#Define)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<`[`Define`](define "haxe.display.Define")`>`` = "Define"`'
- name: display.DisplayItemKind.EnumAbstractField
  id: haxe/display/displayitemkind#EnumAbstractField
  summary: Only for the enum values in enum abstracts, other fields use ClassField
  belongs_to: display.DisplayItemKind
  description: |-
    ### `inline``read only`[`EnumAbstractField`](#EnumAbstractField)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<`[`ClassFieldOccurrence`](classfieldoccurrence "haxe.display.ClassFieldOccurrence")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`` = "EnumAbstractField"`

    Only for the enum values in enum abstracts, other fields use [`ClassField`](../macro/classfield#ClassField).
- name: display.DisplayItemKind.EnumField
  id: haxe/display/displayitemkind#EnumField
  summary: null
  belongs_to: display.DisplayItemKind
  description: '### `inline``read only`[`EnumField`](#EnumField)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<`[`EnumFieldOccurrence`](enumfieldoccurrence "haxe.display.EnumFieldOccurrence")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`` = "EnumField"`'
- name: display.DisplayItemKind.Expression
  id: haxe/display/displayitemkind#Expression
  summary: null
  belongs_to: display.DisplayItemKind
  description: '### `inline``read only`[`Expression`](#Expression)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<`[`JsonTExpr`](jsontexpr "haxe.display.JsonTExpr")`>`` = "Expression"`'
- name: display.DisplayItemKind.Keyword
  id: haxe/display/displayitemkind#Keyword
  summary: null
  belongs_to: display.DisplayItemKind
  description: '### `inline``read only`[`Keyword`](#Keyword)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<`[`Keyword`](keyword "haxe.display.Keyword")`>`` = "Keyword"`'
- name: display.DisplayItemKind.Literal
  id: haxe/display/displayitemkind#Literal
  summary: null
  belongs_to: display.DisplayItemKind
  description: '### `inline``read only`[`Literal`](#Literal)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<`[`DisplayLiteral`](displayliteral "haxe.display.DisplayLiteral")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`` = "Literal"`'
- name: display.DisplayItemKind.Local
  id: haxe/display/displayitemkind#Local
  summary: null
  belongs_to: display.DisplayItemKind
  description: '### `inline``read only`[`Local`](#Local)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<`[`DisplayLocal`](displaylocal "haxe.display.DisplayLocal")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`` = "Local"`'
- name: display.DisplayItemKind.Metadata
  id: haxe/display/displayitemkind#Metadata
  summary: null
  belongs_to: display.DisplayItemKind
  description: '### `inline``read only`[`Metadata`](#Metadata)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<`[`Metadata`](metadata "haxe.display.Metadata")`>`` = "Metadata"`'
- name: display.DisplayItemKind.Module
  id: haxe/display/displayitemkind#Module
  summary: null
  belongs_to: display.DisplayItemKind
  description: '### `inline``read only`[`Module`](#Module)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<`[`Module`](module "haxe.display.Module")`>`` = "Module"`'
- name: display.DisplayItemKind.Package
  id: haxe/display/displayitemkind#Package
  summary: null
  belongs_to: display.DisplayItemKind
  description: '### `inline``read only`[`Package`](#Package)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<`[`Package`](package "haxe.display.Package")`>`` = "Package"`'
- name: display.DisplayItemKind.Type
  id: haxe/display/displayitemkind#Type
  summary: null
  belongs_to: display.DisplayItemKind
  description: '### `inline``read only`[`Type`](#Type)`:`[`DisplayItemKind`](displayitemkind "haxe.display.DisplayItemKind")`<`[`DisplayModuleType`](displaymoduletype "haxe.display.DisplayModuleType")`>`` = "Type"`'
- name: display.DisplayItemKind.TypeParameter
  id: haxe/display/displayitemkind#TypeParameter
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.DisplayItemKind
  description: "### `inline``read only`[`TypeParameter`](#TypeParameter)`:`[`DisplayItemKind`](displayitemkind \"haxe.display.DisplayItemKind\")`<`[`DisplayModuleTypeParameter`](displaymoduletypeparameter \"haxe.display.DisplayModuleTypeParameter\")`>`` = \"TypeParameter\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayItemKind.html](https://api.haxe.org/haxe/display/DisplayItemKind.html)"
- name: display.DisplayItemOccurrence
  id: haxe/display/displayitemoccurrence
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# DisplayItemOccurrence\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`range`](#range)`:`[`Range`](range \"haxe.display.Range - A range in a text document expressed as (1-based) start and end positions.\")\n\n### `optional`[`moduleTypeFollowed`](#moduleTypeFollowed)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\n### `optional`[`moduleType`](#moduleType)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\n### [`item`](#item)`:`[`DisplayItem`](displayitem \"haxe.display.DisplayItem\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayItemOccurrence.html](https://api.haxe.org/haxe/display/DisplayItemOccurrence.html)"
- name: display.DisplayItemOccurrence.item
  id: haxe/display/displayitemoccurrence#item
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.DisplayItemOccurrence
  description: "### [`item`](#item)`:`[`DisplayItem`](displayitem \"haxe.display.DisplayItem\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayItemOccurrence.html](https://api.haxe.org/haxe/display/DisplayItemOccurrence.html)"
- name: display.DisplayItemOccurrence.moduleType
  id: haxe/display/displayitemoccurrence#moduleType
  summary: null
  belongs_to: display.DisplayItemOccurrence
  description: '### `optional`[`moduleType`](#moduleType)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonModuleType`](jsonmoduletype "haxe.display.JsonModuleType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`'
- name: display.DisplayItemOccurrence.moduleTypeFollowed
  id: haxe/display/displayitemoccurrence#moduleTypeFollowed
  summary: null
  belongs_to: display.DisplayItemOccurrence
  description: '### `optional`[`moduleTypeFollowed`](#moduleTypeFollowed)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonModuleType`](jsonmoduletype "haxe.display.JsonModuleType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`'
- name: display.DisplayItemOccurrence.range
  id: haxe/display/displayitemoccurrence#range
  summary: null
  belongs_to: display.DisplayItemOccurrence
  description: '### [`range`](#range)`:`[`Range`](range "haxe.display.Range - A range in a text document expressed as (1-based) start and end positions.")'
- name: display.DisplayLiteral
  id: haxe/display/displayliteral
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# DisplayLiteral\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayLiteral.html](https://api.haxe.org/haxe/display/DisplayLiteral.html)"
- name: display.DisplayLiteral.name
  id: haxe/display/displayliteral#name
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.DisplayLiteral
  description: "### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayLiteral.html](https://api.haxe.org/haxe/display/DisplayLiteral.html)"
- name: display.DisplayLocal
  id: haxe/display/displaylocal
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# DisplayLocal\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`type`](#type)`:`[`JsonType`](jsontype \"haxe.display.JsonType\")`<``T``>`\n\n### [`pos`](#pos)`:`[`JsonPos`](jsonpos \"haxe.display.JsonPos\")\n\n### [`origin`](#origin)`:`[`LocalOrigin`](localorigin \"haxe.display.LocalOrigin\")\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n### [`meta`](#meta)`:`[`JsonMetadata`](jsonmetadata \"haxe.display.JsonMetadata\")\n\n### [`isInline`](#isInline)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`isFinal`](#isFinal)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`id`](#id)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `optional`[`extra`](#extra)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<{params:`[`Array`](../../array \"Array\")`<`[`JsonTypeParameter`](jsontypeparameter \"haxe.display.JsonTypeParameter\")`>, expr:`[`JsonExpr`](jsonexpr \"haxe.display.JsonExpr\")`}>`\n\n### [`capture`](#capture)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayLocal.html](https://api.haxe.org/haxe/display/DisplayLocal.html)"
- name: display.DisplayLocal.capture
  id: haxe/display/displaylocal#capture
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.DisplayLocal
  description: "### [`capture`](#capture)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayLocal.html](https://api.haxe.org/haxe/display/DisplayLocal.html)"
- name: display.DisplayLocal.extra
  id: haxe/display/displaylocal#extra
  summary: null
  belongs_to: display.DisplayLocal
  description: '### `optional`[`extra`](#extra)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<{params:`[`Array`](../../array "Array")`<`[`JsonTypeParameter`](jsontypeparameter "haxe.display.JsonTypeParameter")`>, expr:`[`JsonExpr`](jsonexpr "haxe.display.JsonExpr")`}>`'
- name: display.DisplayLocal.id
  id: haxe/display/displaylocal#id
  summary: null
  belongs_to: display.DisplayLocal
  description: '### [`id`](#id)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: display.DisplayLocal.isFinal
  id: haxe/display/displaylocal#isFinal
  summary: null
  belongs_to: display.DisplayLocal
  description: '### [`isFinal`](#isFinal)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.DisplayLocal.isInline
  id: haxe/display/displaylocal#isInline
  summary: null
  belongs_to: display.DisplayLocal
  description: '### [`isInline`](#isInline)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.DisplayLocal.meta
  id: haxe/display/displaylocal#meta
  summary: null
  belongs_to: display.DisplayLocal
  description: '### [`meta`](#meta)`:`[`JsonMetadata`](jsonmetadata "haxe.display.JsonMetadata")'
- name: display.DisplayLocal.name
  id: haxe/display/displaylocal#name
  summary: null
  belongs_to: display.DisplayLocal
  description: '### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")'
- name: display.DisplayLocal.origin
  id: haxe/display/displaylocal#origin
  summary: null
  belongs_to: display.DisplayLocal
  description: '### [`origin`](#origin)`:`[`LocalOrigin`](localorigin "haxe.display.LocalOrigin")'
- name: display.DisplayLocal.pos
  id: haxe/display/displaylocal#pos
  summary: null
  belongs_to: display.DisplayLocal
  description: '### [`pos`](#pos)`:`[`JsonPos`](jsonpos "haxe.display.JsonPos")'
- name: display.DisplayLocal.type
  id: haxe/display/displaylocal#type
  summary: null
  belongs_to: display.DisplayLocal
  description: '### [`type`](#type)`:`[`JsonType`](jsontype "haxe.display.JsonType")`<``T``>`'
- name: display.DisplayMethods
  id: haxe/display/displaymethods
  summary: Methods of the JSON-RPC-based --display protocol in Haxe 4
  description: "# DisplayMethods\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\nMethods of the JSON-RPC-based `--display` protocol in Haxe 4. A lot of the methods are *inspired* by the Language Server Protocol, but there is **no** intention to be directly compatible with it.\n\n## Static variables\n\n### `static``inline``read only`[`Completion`](#Completion)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`CompletionParams`](completionparams \"haxe.display.CompletionParams\")`, `[`CompletionResult`](completionresult \"haxe.display.CompletionResult\")`>`` = new HaxeRequestMethod<CompletionParams,CompletionResult>(\"display/completion\")`\n\nThe completion request is sent from the client to Haxe to request code completion. Haxe automatically determines the type of completion to use based on the passed position, see `CompletionResultKind`.\n\n### `static``inline``read only`[`CompletionItemResolve`](#CompletionItemResolve)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`CompletionItemResolveParams`](completionitemresolveparams \"haxe.display.CompletionItemResolveParams\")`, `[`CompletionItemResolveResult`](completionitemresolveresult \"haxe.display.CompletionItemResolveResult\")`>`` = new HaxeRequestMethod<CompletionItemResolveParams,CompletionItemResolveResult>(\"display/completionItem/resolve\")`\n\nThe request is sent from the client to Haxe to resolve additional information for a given completion item.\n\n### `static``inline``read only`[`DeterminePackage`](#DeterminePackage)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`FileParams`](fileparams \"haxe.display.FileParams\")`, `[`DeterminePackageResult`](determinepackageresult \"haxe.display.DeterminePackageResult\")`>`` = new HaxeRequestMethod<FileParams,DeterminePackageResult>(\"display/package\")`\n\nThis request is sent from the client to Haxe to determine the package for a given file, based on class paths configuration.\n\n### `static``inline``read only`[`FindReferences`](#FindReferences)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`FindReferencesParams`](findreferencesparams \"haxe.display.FindReferencesParams\")`, `[`GotoDefinitionResult`](gotodefinitionresult \"haxe.display.GotoDefinitionResult\")`>`` = new HaxeRequestMethod<FindReferencesParams,GotoDefinitionResult>(\"display/references\")`\n\nThe find references request is sent from the client to Haxe to find locations that reference the symbol at a given text document position.\n\n### `static``inline``read only`[`GotoDefinition`](#GotoDefinition)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`PositionParams`](positionparams \"haxe.display.PositionParams\")`, `[`GotoDefinitionResult`](gotodefinitionresult \"haxe.display.GotoDefinitionResult\")`>`` = new HaxeRequestMethod<PositionParams,GotoDefinitionResult>(\"display/definition\")`\n\nThe goto definition request is sent from the client to Haxe to resolve the definition location(s) of a symbol at a given text document position.\n\n### `static``inline``read only`[`GotoImplementation`](#GotoImplementation)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`PositionParams`](positionparams \"haxe.display.PositionParams\")`, `[`GotoDefinitionResult`](gotodefinitionresult \"haxe.display.GotoDefinitionResult\")`>`` = new HaxeRequestMethod<PositionParams,GotoDefinitionResult>(\"display/implementation\")`\n\nThe goto implementation request is sent from the client to Haxe to resolve the implementation location(s) of a symbol at a given text document position.\n\n### `static``inline``read only`[`GotoTypeDefinition`](#GotoTypeDefinition)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`PositionParams`](positionparams \"haxe.display.PositionParams\")`, `[`GotoTypeDefinitionResult`](gototypedefinitionresult \"haxe.display.GotoTypeDefinitionResult\")`>`` = new HaxeRequestMethod<PositionParams,GotoTypeDefinitionResult>(\"display/typeDefinition\")`\n\nThe goto type definition request is sent from the client to Haxe to resolve the type definition location(s) of a symbol at a given text document position.\n\n### `static``inline``read only`[`Hover`](#Hover)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`PositionParams`](positionparams \"haxe.display.PositionParams\")`, `[`HoverResult`](hoverresult \"haxe.display.HoverResult\")`>`` = new HaxeRequestMethod<PositionParams,HoverResult>(\"display/hover\")`\n\nThe hover request is sent from the client to Haxe to request hover information at a given text document position.\n\n### `static``inline``read only`[`SignatureHelp`](#SignatureHelp)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`SignatureHelpParams`](signaturehelpparams \"haxe.display.SignatureHelpParams\")`, `[`SignatureHelpResult`](signaturehelpresult \"haxe.display.SignatureHelpResult\")`>`` = new HaxeRequestMethod<SignatureHelpParams,SignatureHelpResult>(\"display/signatureHelp\")`\n\nThe signature help request is sent from the client to Haxe to request signature information at a given cursor position.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayMethods.html](https://api.haxe.org/haxe/display/DisplayMethods.html)"
- name: display.DisplayMethods.Completion()
  id: haxe/display/displaymethods#Completion
  summary: The completion request is sent from the client to Haxe to request code completion
  belongs_to: display.DisplayMethods
  description: |-
    ### `static``inline``read only`[`Completion`](#Completion)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`CompletionParams`](completionparams "haxe.display.CompletionParams")`, `[`CompletionResult`](completionresult "haxe.display.CompletionResult")`>`` = new HaxeRequestMethod<CompletionParams,CompletionResult>("display/completion")`

    The completion request is sent from the client to Haxe to request code completion. Haxe automatically determines the type of completion to use based on the passed position, see `CompletionResultKind`.
- name: display.DisplayMethods.CompletionItemResolve()
  id: haxe/display/displaymethods#CompletionItemResolve
  summary: The request is sent from the client to Haxe to resolve additional information for a given completion item
  belongs_to: display.DisplayMethods
  description: |-
    ### `static``inline``read only`[`CompletionItemResolve`](#CompletionItemResolve)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`CompletionItemResolveParams`](completionitemresolveparams "haxe.display.CompletionItemResolveParams")`, `[`CompletionItemResolveResult`](completionitemresolveresult "haxe.display.CompletionItemResolveResult")`>`` = new HaxeRequestMethod<CompletionItemResolveParams,CompletionItemResolveResult>("display/completionItem/resolve")`

    The request is sent from the client to Haxe to resolve additional information for a given completion item.
- name: display.DisplayMethods.DeterminePackage()
  id: haxe/display/displaymethods#DeterminePackage
  summary: This request is sent from the client to Haxe to determine the package for a given file, based on class paths configuration
  belongs_to: display.DisplayMethods
  description: |-
    ### `static``inline``read only`[`DeterminePackage`](#DeterminePackage)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`FileParams`](fileparams "haxe.display.FileParams")`, `[`DeterminePackageResult`](determinepackageresult "haxe.display.DeterminePackageResult")`>`` = new HaxeRequestMethod<FileParams,DeterminePackageResult>("display/package")`

    This request is sent from the client to Haxe to determine the package for a given file, based on class paths configuration.
- name: display.DisplayMethods.FindReferences()
  id: haxe/display/displaymethods#FindReferences
  summary: The find references request is sent from the client to Haxe to find locations that reference the symbol at a given text document position
  belongs_to: display.DisplayMethods
  description: |-
    ### `static``inline``read only`[`FindReferences`](#FindReferences)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`FindReferencesParams`](findreferencesparams "haxe.display.FindReferencesParams")`, `[`GotoDefinitionResult`](gotodefinitionresult "haxe.display.GotoDefinitionResult")`>`` = new HaxeRequestMethod<FindReferencesParams,GotoDefinitionResult>("display/references")`

    The find references request is sent from the client to Haxe to find locations that reference the symbol at a given text document position.
- name: display.DisplayMethods.GotoDefinition()
  id: haxe/display/displaymethods#GotoDefinition
  summary: The goto definition request is sent from the client to Haxe to resolve the definition location(s) of a symbol at a given text document position
  belongs_to: display.DisplayMethods
  description: |-
    ### `static``inline``read only`[`GotoDefinition`](#GotoDefinition)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`PositionParams`](positionparams "haxe.display.PositionParams")`, `[`GotoDefinitionResult`](gotodefinitionresult "haxe.display.GotoDefinitionResult")`>`` = new HaxeRequestMethod<PositionParams,GotoDefinitionResult>("display/definition")`

    The goto definition request is sent from the client to Haxe to resolve the definition location(s) of a symbol at a given text document position.
- name: display.DisplayMethods.GotoImplementation()
  id: haxe/display/displaymethods#GotoImplementation
  summary: The goto implementation request is sent from the client to Haxe to resolve the implementation location(s) of a symbol at a given text document position
  belongs_to: display.DisplayMethods
  description: |-
    ### `static``inline``read only`[`GotoImplementation`](#GotoImplementation)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`PositionParams`](positionparams "haxe.display.PositionParams")`, `[`GotoDefinitionResult`](gotodefinitionresult "haxe.display.GotoDefinitionResult")`>`` = new HaxeRequestMethod<PositionParams,GotoDefinitionResult>("display/implementation")`

    The goto implementation request is sent from the client to Haxe to resolve the implementation location(s) of a symbol at a given text document position.
- name: display.DisplayMethods.GotoTypeDefinition()
  id: haxe/display/displaymethods#GotoTypeDefinition
  summary: The goto type definition request is sent from the client to Haxe to resolve the type definition location(s) of a symbol at a given text document position
  belongs_to: display.DisplayMethods
  description: |-
    ### `static``inline``read only`[`GotoTypeDefinition`](#GotoTypeDefinition)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`PositionParams`](positionparams "haxe.display.PositionParams")`, `[`GotoTypeDefinitionResult`](gototypedefinitionresult "haxe.display.GotoTypeDefinitionResult")`>`` = new HaxeRequestMethod<PositionParams,GotoTypeDefinitionResult>("display/typeDefinition")`

    The goto type definition request is sent from the client to Haxe to resolve the type definition location(s) of a symbol at a given text document position.
- name: display.DisplayMethods.Hover()
  id: haxe/display/displaymethods#Hover
  summary: The hover request is sent from the client to Haxe to request hover information at a given text document position
  belongs_to: display.DisplayMethods
  description: |-
    ### `static``inline``read only`[`Hover`](#Hover)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`PositionParams`](positionparams "haxe.display.PositionParams")`, `[`HoverResult`](hoverresult "haxe.display.HoverResult")`>`` = new HaxeRequestMethod<PositionParams,HoverResult>("display/hover")`

    The hover request is sent from the client to Haxe to request hover information at a given text document position.
- name: display.DisplayMethods.SignatureHelp()
  id: haxe/display/displaymethods#SignatureHelp
  summary: The signature help request is sent from the client to Haxe to request signature information at a given cursor position
  belongs_to: display.DisplayMethods
  description: "### `static``inline``read only`[`SignatureHelp`](#SignatureHelp)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`SignatureHelpParams`](signaturehelpparams \"haxe.display.SignatureHelpParams\")`, `[`SignatureHelpResult`](signaturehelpresult \"haxe.display.SignatureHelpResult\")`>`` = new HaxeRequestMethod<SignatureHelpParams,SignatureHelpResult>(\"display/signatureHelp\")`\n\nThe signature help request is sent from the client to Haxe to request signature information at a given cursor position.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayMethods.html](https://api.haxe.org/haxe/display/DisplayMethods.html)"
- name: display.DisplayModuleType
  id: haxe/display/displaymoduletype
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# DisplayModuleType\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`pos`](#pos)`:`[`JsonPos`](jsonpos \"haxe.display.JsonPos\")\n\n### [`path`](#path)`:`[`JsonTypePath`](jsontypepath \"haxe.display.JsonTypePath\")\n\n### [`params`](#params)`:`[`Array`](../../array \"Array\")`<`[`DisplayModuleTypeParameter`](displaymoduletypeparameter \"haxe.display.DisplayModuleTypeParameter\")`>`\n\n### [`meta`](#meta)`:`[`JsonMetadata`](jsonmetadata \"haxe.display.JsonMetadata\")\n\n### [`kind`](#kind)`:`[`DisplayModuleTypeKind`](displaymoduletypekind \"haxe.display.DisplayModuleTypeKind\")\n\n### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`isFinal`](#isFinal)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`isExtern`](#isExtern)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`doc`](#doc)`:`[`JsonDoc`](jsondoc \"haxe.display.JsonDoc\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayModuleType.html](https://api.haxe.org/haxe/display/DisplayModuleType.html)"
- name: display.DisplayModuleType.doc
  id: haxe/display/displaymoduletype#doc
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.DisplayModuleType
  description: "### [`doc`](#doc)`:`[`JsonDoc`](jsondoc \"haxe.display.JsonDoc\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayModuleType.html](https://api.haxe.org/haxe/display/DisplayModuleType.html)"
- name: display.DisplayModuleType.isExtern
  id: haxe/display/displaymoduletype#isExtern
  summary: null
  belongs_to: display.DisplayModuleType
  description: '### [`isExtern`](#isExtern)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.DisplayModuleType.isFinal
  id: haxe/display/displaymoduletype#isFinal
  summary: null
  belongs_to: display.DisplayModuleType
  description: '### [`isFinal`](#isFinal)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.DisplayModuleType.isPrivate
  id: haxe/display/displaymoduletype#isPrivate
  summary: null
  belongs_to: display.DisplayModuleType
  description: '### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.DisplayModuleType.kind
  id: haxe/display/displaymoduletype#kind
  summary: null
  belongs_to: display.DisplayModuleType
  description: '### [`kind`](#kind)`:`[`DisplayModuleTypeKind`](displaymoduletypekind "haxe.display.DisplayModuleTypeKind")'
- name: display.DisplayModuleType.meta
  id: haxe/display/displaymoduletype#meta
  summary: null
  belongs_to: display.DisplayModuleType
  description: '### [`meta`](#meta)`:`[`JsonMetadata`](jsonmetadata "haxe.display.JsonMetadata")'
- name: display.DisplayModuleType.params
  id: haxe/display/displaymoduletype#params
  summary: null
  belongs_to: display.DisplayModuleType
  description: '### [`params`](#params)`:`[`Array`](../../array "Array")`<`[`DisplayModuleTypeParameter`](displaymoduletypeparameter "haxe.display.DisplayModuleTypeParameter")`>`'
- name: display.DisplayModuleType.path
  id: haxe/display/displaymoduletype#path
  summary: null
  belongs_to: display.DisplayModuleType
  description: '### [`path`](#path)`:`[`JsonTypePath`](jsontypepath "haxe.display.JsonTypePath")'
- name: display.DisplayModuleType.pos
  id: haxe/display/displaymoduletype#pos
  summary: null
  belongs_to: display.DisplayModuleType
  description: '### [`pos`](#pos)`:`[`JsonPos`](jsonpos "haxe.display.JsonPos")'
- name: display.DisplayModuleTypeKind
  id: haxe/display/displaymoduletypekind
  summary: A typedef that is an alias for an anonymous structure
  description: "# DisplayModuleTypeKind([Int](../../int \"Int - The standard Int type.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Abstract`](#Abstract)`:`[`DisplayModuleTypeKind`](displaymoduletypekind \"haxe.display.DisplayModuleTypeKind\")` = 3`\n\n### `inline``read only`[`Class`](#Class)`:`[`DisplayModuleTypeKind`](displaymoduletypekind \"haxe.display.DisplayModuleTypeKind\")` = 0`\n\n### `inline``read only`[`Enum`](#Enum)`:`[`DisplayModuleTypeKind`](displaymoduletypekind \"haxe.display.DisplayModuleTypeKind\")` = 2`\n\n### `inline``read only`[`EnumAbstract`](#EnumAbstract)`:`[`DisplayModuleTypeKind`](displaymoduletypekind \"haxe.display.DisplayModuleTypeKind\")` = 4`\n\n### `inline``read only`[`Interface`](#Interface)`:`[`DisplayModuleTypeKind`](displaymoduletypekind \"haxe.display.DisplayModuleTypeKind\")` = 1`\n\n### `inline``read only`[`Struct`](#Struct)`:`[`DisplayModuleTypeKind`](displaymoduletypekind \"haxe.display.DisplayModuleTypeKind\")` = 6`\n\nA `typedef` that is an alias for an anonymous structure.\n\n### `inline``read only`[`TypeAlias`](#TypeAlias)`:`[`DisplayModuleTypeKind`](displaymoduletypekind \"haxe.display.DisplayModuleTypeKind\")` = 5`\n\nA `typedef` that is just an alias for another type.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayModuleTypeKind.html](https://api.haxe.org/haxe/display/DisplayModuleTypeKind.html)"
- name: display.DisplayModuleTypeKind.Abstract
  id: haxe/display/displaymoduletypekind#Abstract
  summary: null
  belongs_to: display.DisplayModuleTypeKind
  description: '### `inline``read only`[`Abstract`](#Abstract)`:`[`DisplayModuleTypeKind`](displaymoduletypekind "haxe.display.DisplayModuleTypeKind")` = 3`'
- name: display.DisplayModuleTypeKind.Class
  id: haxe/display/displaymoduletypekind#Class
  summary: null
  belongs_to: display.DisplayModuleTypeKind
  description: '### `inline``read only`[`Class`](#Class)`:`[`DisplayModuleTypeKind`](displaymoduletypekind "haxe.display.DisplayModuleTypeKind")` = 0`'
- name: display.DisplayModuleTypeKind.Enum
  id: haxe/display/displaymoduletypekind#Enum
  summary: null
  belongs_to: display.DisplayModuleTypeKind
  description: '### `inline``read only`[`Enum`](#Enum)`:`[`DisplayModuleTypeKind`](displaymoduletypekind "haxe.display.DisplayModuleTypeKind")` = 2`'
- name: display.DisplayModuleTypeKind.EnumAbstract
  id: haxe/display/displaymoduletypekind#EnumAbstract
  summary: null
  belongs_to: display.DisplayModuleTypeKind
  description: '### `inline``read only`[`EnumAbstract`](#EnumAbstract)`:`[`DisplayModuleTypeKind`](displaymoduletypekind "haxe.display.DisplayModuleTypeKind")` = 4`'
- name: display.DisplayModuleTypeKind.Interface
  id: haxe/display/displaymoduletypekind#Interface
  summary: null
  belongs_to: display.DisplayModuleTypeKind
  description: '### `inline``read only`[`Interface`](#Interface)`:`[`DisplayModuleTypeKind`](displaymoduletypekind "haxe.display.DisplayModuleTypeKind")` = 1`'
- name: display.DisplayModuleTypeKind.Struct
  id: haxe/display/displaymoduletypekind#Struct
  summary: A typedef that is an alias for an anonymous structure
  belongs_to: display.DisplayModuleTypeKind
  description: |-
    ### `inline``read only`[`Struct`](#Struct)`:`[`DisplayModuleTypeKind`](displaymoduletypekind "haxe.display.DisplayModuleTypeKind")` = 6`

    A `typedef` that is an alias for an anonymous structure.
- name: display.DisplayModuleTypeKind.TypeAlias
  id: haxe/display/displaymoduletypekind#TypeAlias
  summary: A typedef that is just an alias for another type
  belongs_to: display.DisplayModuleTypeKind
  description: "### `inline``read only`[`TypeAlias`](#TypeAlias)`:`[`DisplayModuleTypeKind`](displaymoduletypekind \"haxe.display.DisplayModuleTypeKind\")` = 5`\n\nA `typedef` that is just an alias for another type.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayModuleTypeKind.html](https://api.haxe.org/haxe/display/DisplayModuleTypeKind.html)"
- name: display.DisplayModuleTypeParameter
  id: haxe/display/displaymoduletypeparameter
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# DisplayModuleTypeParameter\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n### [`meta`](#meta)`:`[`JsonMetadata`](jsonmetadata \"haxe.display.JsonMetadata\")\n\n### [`constraints`](#constraints)`:`[`Array`](../../array \"Array\")`<`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayModuleTypeParameter.html](https://api.haxe.org/haxe/display/DisplayModuleTypeParameter.html)"
- name: display.DisplayModuleTypeParameter.constraints
  id: haxe/display/displaymoduletypeparameter#constraints
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.DisplayModuleTypeParameter
  description: "### [`constraints`](#constraints)`:`[`Array`](../../array \"Array\")`<`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/DisplayModuleTypeParameter.html](https://api.haxe.org/haxe/display/DisplayModuleTypeParameter.html)"
- name: display.DisplayModuleTypeParameter.meta
  id: haxe/display/displaymoduletypeparameter#meta
  summary: null
  belongs_to: display.DisplayModuleTypeParameter
  description: '### [`meta`](#meta)`:`[`JsonMetadata`](jsonmetadata "haxe.display.JsonMetadata")'
- name: display.DisplayModuleTypeParameter.name
  id: haxe/display/displaymoduletypeparameter#name
  summary: null
  belongs_to: display.DisplayModuleTypeParameter
  description: '### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")'
- name: display.EnumFieldOccurrence
  id: haxe/display/enumfieldoccurrence
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# EnumFieldOccurrence\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`resolution`](#resolution)`:`[`FieldResolution`](fieldresolution \"haxe.display.FieldResolution\")\n\n### `optional`[`origin`](#origin)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`EnumFieldOrigin`](enumfieldorigin \"haxe.display.EnumFieldOrigin\")`<``T``>>`\n\n### [`field`](#field)`:`[`JsonEnumField`](jsonenumfield \"haxe.display.JsonEnumField\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/EnumFieldOccurrence.html](https://api.haxe.org/haxe/display/EnumFieldOccurrence.html)"
- name: display.EnumFieldOccurrence.field
  id: haxe/display/enumfieldoccurrence#field
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.EnumFieldOccurrence
  description: "### [`field`](#field)`:`[`JsonEnumField`](jsonenumfield \"haxe.display.JsonEnumField\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/EnumFieldOccurrence.html](https://api.haxe.org/haxe/display/EnumFieldOccurrence.html)"
- name: display.EnumFieldOccurrence.origin
  id: haxe/display/enumfieldoccurrence#origin
  summary: null
  belongs_to: display.EnumFieldOccurrence
  description: '### `optional`[`origin`](#origin)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`EnumFieldOrigin`](enumfieldorigin "haxe.display.EnumFieldOrigin")`<``T``>>`'
- name: display.EnumFieldOccurrence.resolution
  id: haxe/display/enumfieldoccurrence#resolution
  summary: null
  belongs_to: display.EnumFieldOccurrence
  description: '### [`resolution`](#resolution)`:`[`FieldResolution`](fieldresolution "haxe.display.FieldResolution")'
- name: display.EnumFieldOrigin
  id: haxe/display/enumfieldorigin
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# EnumFieldOrigin\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`kind`](#kind)`:`[`EnumFieldOriginKind`](enumfieldoriginkind \"haxe.display.EnumFieldOriginKind\")`<``T``>`\n\n### `optional`[`args`](#args)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/EnumFieldOrigin.html](https://api.haxe.org/haxe/display/EnumFieldOrigin.html)"
- name: display.EnumFieldOrigin.args
  id: haxe/display/enumfieldorigin#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.EnumFieldOrigin
  description: "### `optional`[`args`](#args)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/EnumFieldOrigin.html](https://api.haxe.org/haxe/display/EnumFieldOrigin.html)"
- name: display.EnumFieldOrigin.kind
  id: haxe/display/enumfieldorigin#kind
  summary: null
  belongs_to: display.EnumFieldOrigin
  description: '### [`kind`](#kind)`:`[`EnumFieldOriginKind`](enumfieldoriginkind "haxe.display.EnumFieldOriginKind")`<``T``>`'
- name: display.EnumFieldOriginKind
  id: haxe/display/enumfieldoriginkind
  summary: The enum value is declared on the current type itself
  description: "# EnumFieldOriginKind\\<T\\>([Int](../../int \"Int - The standard Int type.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Self`](#Self)`:`[`EnumFieldOriginKind`](enumfieldoriginkind \"haxe.display.EnumFieldOriginKind\")`<`[`JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<``T``>>`` = 0`\n\nThe enum value is declared on the current type itself.\n\n### `inline``read only`[`StaticImport`](#StaticImport)`:`[`EnumFieldOriginKind`](enumfieldoriginkind \"haxe.display.EnumFieldOriginKind\")`<`[`JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<``T``>>`` = 1`\n\nThe enum value is brought into context via a static import (`import `[`pack.Module.Enum.Value`](../../enum#Value)).\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/EnumFieldOriginKind.html](https://api.haxe.org/haxe/display/EnumFieldOriginKind.html)"
- name: display.EnumFieldOriginKind.Self
  id: haxe/display/enumfieldoriginkind#Self
  summary: The enum value is declared on the current type itself
  belongs_to: display.EnumFieldOriginKind
  description: |-
    ### `inline``read only`[`Self`](#Self)`:`[`EnumFieldOriginKind`](enumfieldoriginkind "haxe.display.EnumFieldOriginKind")`<`[`JsonModuleType`](jsonmoduletype "haxe.display.JsonModuleType")`<``T``>>`` = 0`

    The enum value is declared on the current type itself.
- name: display.EnumFieldOriginKind.StaticImport
  id: haxe/display/enumfieldoriginkind#StaticImport
  summary: The enum value is brought into context via a static import (import pack.Module.Enum.Value)
  belongs_to: display.EnumFieldOriginKind
  description: "### `inline``read only`[`StaticImport`](#StaticImport)`:`[`EnumFieldOriginKind`](enumfieldoriginkind \"haxe.display.EnumFieldOriginKind\")`<`[`JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<``T``>>`` = 1`\n\nThe enum value is brought into context via a static import (`import `[`pack.Module.Enum.Value`](../../enum#Value)).\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/EnumFieldOriginKind.html](https://api.haxe.org/haxe/display/EnumFieldOriginKind.html)"
- name: display.FieldCompletionSubject
  id: haxe/display/fieldcompletionsubject
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# FieldCompletionSubject\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`range`](#range)`:`[`Range`](range \"haxe.display.Range - A range in a text document expressed as (1-based) start and end positions.\")\n\n### `optional`[`moduleTypeFollowed`](#moduleTypeFollowed)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\n### `optional`[`moduleType`](#moduleType)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\n### `optional`[`keyValueIterator`](#keyValueIterator)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<{value:`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>, key:`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>}>`\n\n### `optional`[`iterator`](#iterator)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<{type:`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>}>`\n\n### [`item`](#item)`:`[`DisplayItem`](displayitem \"haxe.display.DisplayItem\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/FieldCompletionSubject.html](https://api.haxe.org/haxe/display/FieldCompletionSubject.html)"
- name: display.FieldCompletionSubject.item
  id: haxe/display/fieldcompletionsubject#item
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.FieldCompletionSubject
  description: "### [`item`](#item)`:`[`DisplayItem`](displayitem \"haxe.display.DisplayItem\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/FieldCompletionSubject.html](https://api.haxe.org/haxe/display/FieldCompletionSubject.html)"
- name: display.FieldCompletionSubject.iterator
  id: haxe/display/fieldcompletionsubject#iterator
  summary: null
  belongs_to: display.FieldCompletionSubject
  description: '### `optional`[`iterator`](#iterator)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<{type:`[`JsonType`](jsontype "haxe.display.JsonType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>}>`'
- name: display.FieldCompletionSubject.keyValueIterator
  id: haxe/display/fieldcompletionsubject#keyValueIterator
  summary: null
  belongs_to: display.FieldCompletionSubject
  description: '### `optional`[`keyValueIterator`](#keyValueIterator)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<{value:`[`JsonType`](jsontype "haxe.display.JsonType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>, key:`[`JsonType`](jsontype "haxe.display.JsonType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>}>`'
- name: display.FieldCompletionSubject.moduleType
  id: haxe/display/fieldcompletionsubject#moduleType
  summary: null
  belongs_to: display.FieldCompletionSubject
  description: '### `optional`[`moduleType`](#moduleType)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonModuleType`](jsonmoduletype "haxe.display.JsonModuleType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`'
- name: display.FieldCompletionSubject.moduleTypeFollowed
  id: haxe/display/fieldcompletionsubject#moduleTypeFollowed
  summary: null
  belongs_to: display.FieldCompletionSubject
  description: '### `optional`[`moduleTypeFollowed`](#moduleTypeFollowed)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonModuleType`](jsonmoduletype "haxe.display.JsonModuleType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`'
- name: display.FieldCompletionSubject.range
  id: haxe/display/fieldcompletionsubject#range
  summary: null
  belongs_to: display.FieldCompletionSubject
  description: '### [`range`](#range)`:`[`Range`](range "haxe.display.Range - A range in a text document expressed as (1-based) start and end positions.")'
- name: display.FieldResolution
  id: haxe/display/fieldresolution
  summary: The qualifier that has to be inserted to use the field if `!isQualified`. Can either be `this` or `super` for instance fields for the type name for `static` fields
  description: "# FieldResolution\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`qualifier`](#qualifier)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe qualifier that has to be inserted to use the field if \\`!isQualified\\`. Can either be \\`this\\` or \\`super\\` for instance fields for the type name for \\`static\\` fields.\n\n### [`isQualified`](#isQualified)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether it's valid to use the unqualified name of the field or not. This is \\`false\\` if the identifier is shadowed.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/FieldResolution.html](https://api.haxe.org/haxe/display/FieldResolution.html)"
- name: display.FieldResolution.isQualified
  id: haxe/display/fieldresolution#isQualified
  summary: Whether it's valid to use the unqualified name of the field or not
  belongs_to: display.FieldResolution
  description: "### [`isQualified`](#isQualified)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether it's valid to use the unqualified name of the field or not. This is \\`false\\` if the identifier is shadowed.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/FieldResolution.html](https://api.haxe.org/haxe/display/FieldResolution.html)"
- name: display.FieldResolution.qualifier
  id: haxe/display/fieldresolution#qualifier
  summary: The qualifier that has to be inserted to use the field if `!isQualified`. Can either be `this` or `super` for instance fields for the type name for `static` fields
  belongs_to: display.FieldResolution
  description: |-
    ### [`qualifier`](#qualifier)`:`[`String`](../../string "String - The basic String class.")

    The qualifier that has to be inserted to use the field if \`!isQualified\`. Can either be \`this\` or \`super\` for instance fields for the type name for \`static\` fields.
- name: display.FileParams
  id: haxe/display/fileparams
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# FileParams\n\npackage [haxe.display](index)\n\nimport [haxe.display.Protocol](protocol)\n\n*Available on all platforms*\n\n## Fields\n\n### [`file`](#file)`:`[`FsPath`](fspath \"haxe.display.FsPath\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/FileParams.html](https://api.haxe.org/haxe/display/FileParams.html)"
- name: display.FileParams.file
  id: haxe/display/fileparams#file
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.FileParams
  description: "### [`file`](#file)`:`[`FsPath`](fspath \"haxe.display.FsPath\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/FileParams.html](https://api.haxe.org/haxe/display/FileParams.html)"
- name: display.FindReferencesKind
  id: haxe/display/findreferenceskind
  summary: Find only direct references to the requested symbol
  description: "# FindReferencesKind([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nto [String](../../string \"String - The basic String class.\")\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Direct`](#Direct)`:`[`FindReferencesKind`](findreferenceskind \"haxe.display.FindReferencesKind\")` = \"direct\"`\n\nFind only direct references to the requested symbol. Does not look for references to parent or overriding methods.\n\n### `inline``read only`[`WithBaseAndDescendants`](#WithBaseAndDescendants)`:`[`FindReferencesKind`](findreferenceskind \"haxe.display.FindReferencesKind\")` = \"withBaseAndDescendants\"`\n\nFind references to the base field and all the overidding fields in the inheritance chain.\n\n### `inline``read only`[`WithDescendants`](#WithDescendants)`:`[`FindReferencesKind`](findreferenceskind \"haxe.display.FindReferencesKind\")` = \"withDescendants\"`\n\nFind references to the requested field and references to all descendants of the requested field.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/FindReferencesKind.html](https://api.haxe.org/haxe/display/FindReferencesKind.html)"
- name: display.FindReferencesKind.Direct
  id: haxe/display/findreferenceskind#Direct
  summary: Find only direct references to the requested symbol
  belongs_to: display.FindReferencesKind
  description: |-
    ### `inline``read only`[`Direct`](#Direct)`:`[`FindReferencesKind`](findreferenceskind "haxe.display.FindReferencesKind")` = "direct"`

    Find only direct references to the requested symbol. Does not look for references to parent or overriding methods.
- name: display.FindReferencesKind.WithBaseAndDescendants
  id: haxe/display/findreferenceskind#WithBaseAndDescendants
  summary: Find references to the base field and all the overidding fields in the inheritance chain
  belongs_to: display.FindReferencesKind
  description: |-
    ### `inline``read only`[`WithBaseAndDescendants`](#WithBaseAndDescendants)`:`[`FindReferencesKind`](findreferenceskind "haxe.display.FindReferencesKind")` = "withBaseAndDescendants"`

    Find references to the base field and all the overidding fields in the inheritance chain.
- name: display.FindReferencesKind.WithDescendants
  id: haxe/display/findreferenceskind#WithDescendants
  summary: Find references to the requested field and references to all descendants of the requested field
  belongs_to: display.FindReferencesKind
  description: "### `inline``read only`[`WithDescendants`](#WithDescendants)`:`[`FindReferencesKind`](findreferenceskind \"haxe.display.FindReferencesKind\")` = \"withDescendants\"`\n\nFind references to the requested field and references to all descendants of the requested field.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/FindReferencesKind.html](https://api.haxe.org/haxe/display/FindReferencesKind.html)"
- name: display.FindReferencesParams
  id: haxe/display/findreferencesparams
  summary: Unicode character offset in the file
  description: "# FindReferencesParams\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\nFindReferences\n\n## Fields\n\n### [`offset`](#offset)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nUnicode character offset in the file.\n\n### `optional`[`kind`](#kind)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`FindReferencesKind`](findreferenceskind \"haxe.display.FindReferencesKind\")`>`\n\n### [`file`](#file)`:`[`FsPath`](fspath \"haxe.display.FsPath\")\n\n### `optional`[`contents`](#contents)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/FindReferencesParams.html](https://api.haxe.org/haxe/display/FindReferencesParams.html)"
- name: display.FindReferencesParams.contents
  id: haxe/display/findreferencesparams#contents
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.FindReferencesParams
  description: "### `optional`[`contents`](#contents)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/FindReferencesParams.html](https://api.haxe.org/haxe/display/FindReferencesParams.html)"
- name: display.FindReferencesParams.file
  id: haxe/display/findreferencesparams#file
  summary: null
  belongs_to: display.FindReferencesParams
  description: '### [`file`](#file)`:`[`FsPath`](fspath "haxe.display.FsPath")'
- name: display.FindReferencesParams.kind
  id: haxe/display/findreferencesparams#kind
  summary: null
  belongs_to: display.FindReferencesParams
  description: '### `optional`[`kind`](#kind)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`FindReferencesKind`](findreferenceskind "haxe.display.FindReferencesKind")`>`'
- name: display.FindReferencesParams.offset
  id: haxe/display/findreferencesparams#offset
  summary: Unicode character offset in the file
  belongs_to: display.FindReferencesParams
  description: |-
    ### [`offset`](#offset)`:`[`Int`](../../int "Int - The standard Int type.")

    Unicode character offset in the file.
- name: display.FsPath
  id: haxe/display/fspath
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# FsPath([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\n*Available on all platforms*\n\n## Methods\n\n### `inline`[`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/FsPath.html](https://api.haxe.org/haxe/display/FsPath.html)"
- name: display.FsPath.toString()
  id: haxe/display/fspath#toString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.FsPath
  description: "### `inline`[`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/FsPath.html](https://api.haxe.org/haxe/display/FsPath.html)"
- name: display.GotoDefinitionResult
  id: haxe/display/gotodefinitionresult
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# GotoDefinitionResult\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\nGotoDefinition\n\n## Alias\n\n*alias for* [`haxe.display.Response`](response \"haxe.display.Response\")`<`[`Array`](../../array \"Array\")`<`[`haxe.display.Location`](location \"haxe.display.Location - Represents a location inside a resource, such as a line inside a text file.\")`>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/GotoDefinitionResult.html](https://api.haxe.org/haxe/display/GotoDefinitionResult.html)"
- name: display.GotoTypeDefinitionResult
  id: haxe/display/gototypedefinitionresult
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# GotoTypeDefinitionResult\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\nGotoTypeDefinition\n\n## Alias\n\n*alias for* [`haxe.display.Response`](response \"haxe.display.Response\")`<`[`Array`](../../array \"Array\")`<`[`haxe.display.Location`](location \"haxe.display.Location - Represents a location inside a resource, such as a line inside a text file.\")`>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/GotoTypeDefinitionResult.html](https://api.haxe.org/haxe/display/GotoTypeDefinitionResult.html)"
- name: display.HaxeContextMemoryResult
  id: haxe/display/haxecontextmemoryresult
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HaxeContextMemoryResult\n\npackage [haxe.display](index)\n\nimport [haxe.display.Server](server)\n\n*Available on all platforms*\n\n## Fields\n\n### `final``read only`[`syntaxCache`](#syntaxCache)`:{size:`[`Int`](../../int \"Int - The standard Int type.\")`}`\n\n### `final``read only`[`moduleCache`](#moduleCache)`:{size:`[`Int`](../../int \"Int - The standard Int type.\")`, list:`[`Array`](../../array \"Array\")`<{size:`[`Int`](../../int \"Int - The standard Int type.\")`, path:`[`String`](../../string \"String - The basic String class.\")`, hasTypes:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`}>}`\n\n### `optional``final``read only`[`leaks`](#leaks)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<{path:`[`String`](../../string \"String - The basic String class.\")`, leaks:`[`Array`](../../array \"Array\")`<{path:`[`String`](../../string \"String - The basic String class.\")`}>}>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HaxeContextMemoryResult.html](https://api.haxe.org/haxe/display/HaxeContextMemoryResult.html)"
- name: display.HaxeContextMemoryResult.leaks
  id: haxe/display/haxecontextmemoryresult#leaks
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.HaxeContextMemoryResult
  description: "### `optional``final``read only`[`leaks`](#leaks)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<{path:`[`String`](../../string \"String - The basic String class.\")`, leaks:`[`Array`](../../array \"Array\")`<{path:`[`String`](../../string \"String - The basic String class.\")`}>}>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HaxeContextMemoryResult.html](https://api.haxe.org/haxe/display/HaxeContextMemoryResult.html)"
- name: display.HaxeContextMemoryResult.moduleCache
  id: haxe/display/haxecontextmemoryresult#moduleCache
  summary: null
  belongs_to: display.HaxeContextMemoryResult
  description: '### `final``read only`[`moduleCache`](#moduleCache)`:{size:`[`Int`](../../int "Int - The standard Int type.")`, list:`[`Array`](../../array "Array")`<{size:`[`Int`](../../int "Int - The standard Int type.")`, path:`[`String`](../../string "String - The basic String class.")`, hasTypes:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`}>}`'
- name: display.HaxeContextMemoryResult.syntaxCache
  id: haxe/display/haxecontextmemoryresult#syntaxCache
  summary: null
  belongs_to: display.HaxeContextMemoryResult
  description: '### `final``read only`[`syntaxCache`](#syntaxCache)`:{size:`[`Int`](../../int "Int - The standard Int type.")`}`'
- name: display.HaxeMemoryResult
  id: haxe/display/haxememoryresult
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HaxeMemoryResult\n\npackage [haxe.display](index)\n\nimport [haxe.display.Server](server)\n\n*Available on all platforms*\n\n## Fields\n\n### `final``read only`[`memory`](#memory)`:{totalCache:`[`Int`](../../int \"Int - The standard Int type.\")`, nativeLibCache:`[`Int`](../../int \"Int - The standard Int type.\")`, haxelibCache:`[`Int`](../../int \"Int - The standard Int type.\")`, directoryCache:`[`Int`](../../int \"Int - The standard Int type.\")`, contextCache:`[`Int`](../../int \"Int - The standard Int type.\")`, additionalSizes:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<{size:`[`Int`](../../int \"Int - The standard Int type.\")`, name:`[`String`](../../string \"String - The basic String class.\")`}>>}`\n\n### `final``read only`[`contexts`](#contexts)`:`[`Array`](../../array \"Array\")`<{size:`[`Int`](../../int \"Int - The standard Int type.\")`, context:`[`HaxeServerContext`](haxeservercontext \"haxe.display.HaxeServerContext\")`}>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HaxeMemoryResult.html](https://api.haxe.org/haxe/display/HaxeMemoryResult.html)"
- name: display.HaxeMemoryResult.contexts
  id: haxe/display/haxememoryresult#contexts
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.HaxeMemoryResult
  description: "### `final``read only`[`contexts`](#contexts)`:`[`Array`](../../array \"Array\")`<{size:`[`Int`](../../int \"Int - The standard Int type.\")`, context:`[`HaxeServerContext`](haxeservercontext \"haxe.display.HaxeServerContext\")`}>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HaxeMemoryResult.html](https://api.haxe.org/haxe/display/HaxeMemoryResult.html)"
- name: display.HaxeMemoryResult.memory
  id: haxe/display/haxememoryresult#memory
  summary: null
  belongs_to: display.HaxeMemoryResult
  description: '### `final``read only`[`memory`](#memory)`:{totalCache:`[`Int`](../../int "Int - The standard Int type.")`, nativeLibCache:`[`Int`](../../int "Int - The standard Int type.")`, haxelibCache:`[`Int`](../../int "Int - The standard Int type.")`, directoryCache:`[`Int`](../../int "Int - The standard Int type.")`, contextCache:`[`Int`](../../int "Int - The standard Int type.")`, additionalSizes:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Array`](../../array "Array")`<{size:`[`Int`](../../int "Int - The standard Int type.")`, name:`[`String`](../../string "String - The basic String class.")`}>>}`'
- name: display.HaxeModuleMemoryResult
  id: haxe/display/haxemodulememoryresult
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HaxeModuleMemoryResult\n\npackage [haxe.display](index)\n\nimport [haxe.display.Server](server)\n\n*Available on all platforms*\n\n## Fields\n\n### `final``read only`[`types`](#types)`:`[`Array`](../../array \"Array\")`<{size:`[`Int`](../../int \"Int - The standard Int type.\")`, pos:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Location`](location \"haxe.display.Location - Represents a location inside a resource, such as a line inside a text file.\")`>, name:`[`String`](../../string \"String - The basic String class.\")`, fields:`[`Array`](../../array \"Array\")`<{size:`[`Int`](../../int \"Int - The standard Int type.\")`, pos:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Location`](location \"haxe.display.Location - Represents a location inside a resource, such as a line inside a text file.\")`>, name:`[`String`](../../string \"String - The basic String class.\")`}>}>`\n\n### `final``read only`[`moduleExtra`](#moduleExtra)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HaxeModuleMemoryResult.html](https://api.haxe.org/haxe/display/HaxeModuleMemoryResult.html)"
- name: display.HaxeModuleMemoryResult.moduleExtra
  id: haxe/display/haxemodulememoryresult#moduleExtra
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.HaxeModuleMemoryResult
  description: "### `final``read only`[`moduleExtra`](#moduleExtra)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HaxeModuleMemoryResult.html](https://api.haxe.org/haxe/display/HaxeModuleMemoryResult.html)"
- name: display.HaxeModuleMemoryResult.types
  id: haxe/display/haxemodulememoryresult#types
  summary: null
  belongs_to: display.HaxeModuleMemoryResult
  description: '### `final``read only`[`types`](#types)`:`[`Array`](../../array "Array")`<{size:`[`Int`](../../int "Int - The standard Int type.")`, pos:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Location`](location "haxe.display.Location - Represents a location inside a resource, such as a line inside a text file.")`>, name:`[`String`](../../string "String - The basic String class.")`, fields:`[`Array`](../../array "Array")`<{size:`[`Int`](../../int "Int - The standard Int type.")`, pos:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Location`](location "haxe.display.Location - Represents a location inside a resource, such as a line inside a text file.")`>, name:`[`String`](../../string "String - The basic String class.")`}>}>`'
- name: display.HaxeNotificationMethod
  id: haxe/display/haxenotificationmethod
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HaxeNotificationMethod\\<TParams\\>([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nto [String](../../string \"String - The basic String class.\")\n\nimport [haxe.display.Protocol](protocol)\n\n*Available on all platforms*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HaxeNotificationMethod.html](https://api.haxe.org/haxe/display/HaxeNotificationMethod.html)"
- name: display.HaxeRequestMethod
  id: haxe/display/haxerequestmethod
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HaxeRequestMethod\\<TParams, TResponse\\>([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nto [String](../../string \"String - The basic String class.\")\n\nimport [haxe.display.Protocol](protocol)\n\n*Available on all platforms*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HaxeRequestMethod.html](https://api.haxe.org/haxe/display/HaxeRequestMethod.html)"
- name: display.HaxeResponseErrorData
  id: haxe/display/haxeresponseerrordata
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HaxeResponseErrorData\n\npackage [haxe.display](index)\n\nimport [haxe.display.Protocol](protocol)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`Array`](../../array \"Array\")`<{severity:`[`haxe.display.HaxeResponseErrorSeverity`](haxeresponseerrorseverity \"haxe.display.HaxeResponseErrorSeverity\")`, message:`[`String`](../../string \"String - The basic String class.\")`, location:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`haxe.display.Location`](location \"haxe.display.Location - Represents a location inside a resource, such as a line inside a text file.\")`>}>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HaxeResponseErrorData.html](https://api.haxe.org/haxe/display/HaxeResponseErrorData.html)"
- name: display.HaxeResponseErrorSeverity
  id: haxe/display/haxeresponseerrorseverity
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HaxeResponseErrorSeverity([Int](../../int \"Int - The standard Int type.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.Protocol](protocol)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Error`](#Error)`:`[`HaxeResponseErrorSeverity`](haxeresponseerrorseverity \"haxe.display.HaxeResponseErrorSeverity\")` = 1`\n\n### `inline``read only`[`Hint`](#Hint)`:`[`HaxeResponseErrorSeverity`](haxeresponseerrorseverity \"haxe.display.HaxeResponseErrorSeverity\")` = 3`\n\n### `inline``read only`[`Warning`](#Warning)`:`[`HaxeResponseErrorSeverity`](haxeresponseerrorseverity \"haxe.display.HaxeResponseErrorSeverity\")` = 2`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HaxeResponseErrorSeverity.html](https://api.haxe.org/haxe/display/HaxeResponseErrorSeverity.html)"
- name: display.HaxeServerContext
  id: haxe/display/haxeservercontext
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HaxeServerContext\n\npackage [haxe.display](index)\n\nimport [haxe.display.Server](server)\n\n*Available on all platforms*\n\n## Fields\n\n### `final``read only`[`signature`](#signature)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `final``read only`[`platform`](#platform)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `final``read only`[`index`](#index)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `final``read only`[`desc`](#desc)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `final``read only`[`defines`](#defines)`:`[`Array`](../../array \"Array\")`<{value:`[`String`](../../string \"String - The basic String class.\")`, key:`[`String`](../../string \"String - The basic String class.\")`}>`\n\n### `final``read only`[`classPaths`](#classPaths)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HaxeServerContext.html](https://api.haxe.org/haxe/display/HaxeServerContext.html)"
- name: display.HaxeServerContext.classPaths
  id: haxe/display/haxeservercontext#classPaths
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.HaxeServerContext
  description: "### `final``read only`[`classPaths`](#classPaths)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HaxeServerContext.html](https://api.haxe.org/haxe/display/HaxeServerContext.html)"
- name: display.HaxeServerContext.defines
  id: haxe/display/haxeservercontext#defines
  summary: null
  belongs_to: display.HaxeServerContext
  description: '### `final``read only`[`defines`](#defines)`:`[`Array`](../../array "Array")`<{value:`[`String`](../../string "String - The basic String class.")`, key:`[`String`](../../string "String - The basic String class.")`}>`'
- name: display.HaxeServerContext.desc
  id: haxe/display/haxeservercontext#desc
  summary: null
  belongs_to: display.HaxeServerContext
  description: '### `final``read only`[`desc`](#desc)`:`[`String`](../../string "String - The basic String class.")'
- name: display.HaxeServerContext.index
  id: haxe/display/haxeservercontext#index
  summary: null
  belongs_to: display.HaxeServerContext
  description: '### `final``read only`[`index`](#index)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: display.HaxeServerContext.platform
  id: haxe/display/haxeservercontext#platform
  summary: null
  belongs_to: display.HaxeServerContext
  description: '### `final``read only`[`platform`](#platform)`:`[`String`](../../string "String - The basic String class.")'
- name: display.HaxeServerContext.signature
  id: haxe/display/haxeservercontext#signature
  summary: null
  belongs_to: display.HaxeServerContext
  description: '### `final``read only`[`signature`](#signature)`:`[`String`](../../string "String - The basic String class.")'
- name: display.HoverDisplayItemOccurence
  id: haxe/display/hoverdisplayitemoccurence
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HoverDisplayItemOccurence\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`range`](#range)`:`[`Range`](range \"haxe.display.Range - A range in a text document expressed as (1-based) start and end positions.\")\n\n### `optional`[`moduleTypeFollowed`](#moduleTypeFollowed)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\n### `optional`[`moduleType`](#moduleType)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\n### [`item`](#item)`:`[`DisplayItem`](displayitem \"haxe.display.DisplayItem\")`<``T``>`\n\n### `optional`[`expected`](#expected)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<{type:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>, name:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<{name:`[`String`](../../string \"String - The basic String class.\")`, kind:`[`HoverExpectedNameKind`](hoverexpectednamekind \"haxe.display.HoverExpectedNameKind\")`}>}>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HoverDisplayItemOccurence.html](https://api.haxe.org/haxe/display/HoverDisplayItemOccurence.html)"
- name: display.HoverDisplayItemOccurence.expected
  id: haxe/display/hoverdisplayitemoccurence#expected
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.HoverDisplayItemOccurence
  description: "### `optional`[`expected`](#expected)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<{type:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>, name:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<{name:`[`String`](../../string \"String - The basic String class.\")`, kind:`[`HoverExpectedNameKind`](hoverexpectednamekind \"haxe.display.HoverExpectedNameKind\")`}>}>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HoverDisplayItemOccurence.html](https://api.haxe.org/haxe/display/HoverDisplayItemOccurence.html)"
- name: display.HoverDisplayItemOccurence.item
  id: haxe/display/hoverdisplayitemoccurence#item
  summary: null
  belongs_to: display.HoverDisplayItemOccurence
  description: '### [`item`](#item)`:`[`DisplayItem`](displayitem "haxe.display.DisplayItem")`<``T``>`'
- name: display.HoverDisplayItemOccurence.moduleType
  id: haxe/display/hoverdisplayitemoccurence#moduleType
  summary: null
  belongs_to: display.HoverDisplayItemOccurence
  description: '### `optional`[`moduleType`](#moduleType)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonModuleType`](jsonmoduletype "haxe.display.JsonModuleType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`'
- name: display.HoverDisplayItemOccurence.moduleTypeFollowed
  id: haxe/display/hoverdisplayitemoccurence#moduleTypeFollowed
  summary: null
  belongs_to: display.HoverDisplayItemOccurence
  description: '### `optional`[`moduleTypeFollowed`](#moduleTypeFollowed)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonModuleType`](jsonmoduletype "haxe.display.JsonModuleType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`'
- name: display.HoverDisplayItemOccurence.range
  id: haxe/display/hoverdisplayitemoccurence#range
  summary: null
  belongs_to: display.HoverDisplayItemOccurence
  description: '### [`range`](#range)`:`[`Range`](range "haxe.display.Range - A range in a text document expressed as (1-based) start and end positions.")'
- name: display.HoverExpectedNameKind
  id: haxe/display/hoverexpectednamekind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HoverExpectedNameKind([Int](../../int \"Int - The standard Int type.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`FunctionArgument`](#FunctionArgument)`:`[`HoverExpectedNameKind`](hoverexpectednamekind \"haxe.display.HoverExpectedNameKind\")` = 0`\n\n### `inline``read only`[`StructureField`](#StructureField)`:`[`HoverExpectedNameKind`](hoverexpectednamekind \"haxe.display.HoverExpectedNameKind\")` = 1`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HoverExpectedNameKind.html](https://api.haxe.org/haxe/display/HoverExpectedNameKind.html)"
- name: display.HoverExpectedNameKind.FunctionArgument
  id: haxe/display/hoverexpectednamekind#FunctionArgument
  summary: null
  belongs_to: display.HoverExpectedNameKind
  description: '### `inline``read only`[`FunctionArgument`](#FunctionArgument)`:`[`HoverExpectedNameKind`](hoverexpectednamekind "haxe.display.HoverExpectedNameKind")` = 0`'
- name: display.HoverExpectedNameKind.StructureField
  id: haxe/display/hoverexpectednamekind#StructureField
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.HoverExpectedNameKind
  description: "### `inline``read only`[`StructureField`](#StructureField)`:`[`HoverExpectedNameKind`](hoverexpectednamekind \"haxe.display.HoverExpectedNameKind\")` = 1`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HoverExpectedNameKind.html](https://api.haxe.org/haxe/display/HoverExpectedNameKind.html)"
- name: display.HoverResult
  id: haxe/display/hoverresult
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HoverResult\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\nHover\n\n## Alias\n\n*alias for* [`haxe.display.Response`](response \"haxe.display.Response\")`<`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`haxe.display.HoverDisplayItemOccurence`](hoverdisplayitemoccurence \"haxe.display.HoverDisplayItemOccurence\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/HoverResult.html](https://api.haxe.org/haxe/display/HoverResult.html)"
- name: display.ImportStatus
  id: haxe/display/importstatus
  summary: A type with the same name is already imported in the module
  description: "# ImportStatus([Int](../../int \"Int - The standard Int type.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Imported`](#Imported)`:`[`ImportStatus`](importstatus \"haxe.display.ImportStatus\")` = 0`\n\nThis type is already available with it's unqualified name for one of these reasons: - it's a toplevel type - it's imported with an `import` in the current module - it's imported in an `import.hx` file\n\n### `inline``read only`[`Shadowed`](#Shadowed)`:`[`ImportStatus`](importstatus \"haxe.display.ImportStatus\")` = 2`\n\nA type with the same name is already imported in the module. The fully qualified name has to be used to access it.\n\n### `inline``read only`[`Unimported`](#Unimported)`:`[`ImportStatus`](importstatus \"haxe.display.ImportStatus\")` = 1`\n\nThe type is currently not imported. It can be accessed either with its fully qualified name or by inserting an import.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ImportStatus.html](https://api.haxe.org/haxe/display/ImportStatus.html)"
- name: display.ImportStatus.Imported
  id: haxe/display/importstatus#Imported
  summary: null
  belongs_to: display.ImportStatus
  description: |-
    ### `inline``read only`[`Imported`](#Imported)`:`[`ImportStatus`](importstatus "haxe.display.ImportStatus")` = 0`

    This type is already available with it's unqualified name for one of these reasons: - it's a toplevel type - it's imported with an `import` in the current module - it's imported in an `import.hx` file
- name: display.ImportStatus.Shadowed
  id: haxe/display/importstatus#Shadowed
  summary: A type with the same name is already imported in the module
  belongs_to: display.ImportStatus
  description: |-
    ### `inline``read only`[`Shadowed`](#Shadowed)`:`[`ImportStatus`](importstatus "haxe.display.ImportStatus")` = 2`

    A type with the same name is already imported in the module. The fully qualified name has to be used to access it.
- name: display.ImportStatus.Unimported
  id: haxe/display/importstatus#Unimported
  summary: The type is currently not imported
  belongs_to: display.ImportStatus
  description: "### `inline``read only`[`Unimported`](#Unimported)`:`[`ImportStatus`](importstatus \"haxe.display.ImportStatus\")` = 1`\n\nThe type is currently not imported. It can be accessed either with its fully qualified name or by inserting an import.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ImportStatus.html](https://api.haxe.org/haxe/display/ImportStatus.html)"
- name: display.InitializeParams
  id: haxe/display/initializeparams
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# InitializeParams\n\npackage [haxe.display](index)\n\nimport [haxe.display.Protocol](protocol)\n\n*Available on all platforms*\n\n## Fields\n\n### `optional``final``read only`[`supportsResolve`](#supportsResolve)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\n### `optional``final``read only`[`maxCompletionItems`](#maxCompletionItems)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>`\n\nThe maximum number of completion items to return\n\n### `optional``final``read only`[`exclude`](#exclude)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>>`\n\ndot paths to exclude from readClassPaths / toplevel completion\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/InitializeParams.html](https://api.haxe.org/haxe/display/InitializeParams.html)"
- name: display.InitializeParams.exclude
  id: haxe/display/initializeparams#exclude
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.InitializeParams
  description: "### `optional``final``read only`[`exclude`](#exclude)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>>`\n\ndot paths to exclude from readClassPaths / toplevel completion\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/InitializeParams.html](https://api.haxe.org/haxe/display/InitializeParams.html)"
- name: display.InitializeParams.maxCompletionItems
  id: haxe/display/initializeparams#maxCompletionItems
  summary: null
  belongs_to: display.InitializeParams
  description: |-
    ### `optional``final``read only`[`maxCompletionItems`](#maxCompletionItems)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Int`](../../int "Int - The standard Int type.")`>`

    The maximum number of completion items to return
- name: display.InitializeParams.supportsResolve
  id: haxe/display/initializeparams#supportsResolve
  summary: null
  belongs_to: display.InitializeParams
  description: '### `optional``final``read only`[`supportsResolve`](#supportsResolve)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`'
- name: display.InitializeResult
  id: haxe/display/initializeresult
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# InitializeResult\n\npackage [haxe.display](index)\n\nimport [haxe.display.Protocol](protocol)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`haxe.display.Response`](response \"haxe.display.Response\")`<{protocolVersion:`[`haxe.display.Version`](version \"haxe.display.Version - Represents a semantic version, see https://semver.\")`, methods:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>, haxeVersion:`[`haxe.display.Version`](version \"haxe.display.Version - Represents a semantic version, see https://semver.\")`}>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/InitializeResult.html](https://api.haxe.org/haxe/display/InitializeResult.html)"
- name: display.JsonAbstract
  id: haxe/display/jsonabstract
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonAbstract\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`unops`](#unops)`:`[`Array`](../../array \"Array\")`<`[`JsonAbstractUnop`](jsonabstractunop \"haxe.display.JsonAbstractUnop\")`>`\n\n### [`type`](#type)`:`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\n### [`to`](#to)`:`[`Array`](../../array \"Array\")`<`[`JsonAbstractCast`](jsonabstractcast \"haxe.display.JsonAbstractCast\")`>`\n\n### [`resolve`](#resolve)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonClassFieldReference`](jsonclassfieldreference \"haxe.display.JsonClassFieldReference\")`>`\n\n### [`impl`](#impl)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonClass`](jsonclass \"haxe.display.JsonClass\")`>`\n\n### [`from`](#from)`:`[`Array`](../../array \"Array\")`<`[`JsonAbstractCast`](jsonabstractcast \"haxe.display.JsonAbstractCast\")`>`\n\n### [`binops`](#binops)`:`[`Array`](../../array \"Array\")`<`[`JsonAbstractBinop`](jsonabstractbinop \"haxe.display.JsonAbstractBinop\")`>`\n\n### [`array`](#array)`:`[`JsonClassFields`](jsonclassfields \"haxe.display.JsonClassFields\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAbstract.html](https://api.haxe.org/haxe/display/JsonAbstract.html)"
- name: display.JsonAbstract.array
  id: haxe/display/jsonabstract#array
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonAbstract
  description: "### [`array`](#array)`:`[`JsonClassFields`](jsonclassfields \"haxe.display.JsonClassFields\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAbstract.html](https://api.haxe.org/haxe/display/JsonAbstract.html)"
- name: display.JsonAbstract.binops
  id: haxe/display/jsonabstract#binops
  summary: null
  belongs_to: display.JsonAbstract
  description: '### [`binops`](#binops)`:`[`Array`](../../array "Array")`<`[`JsonAbstractBinop`](jsonabstractbinop "haxe.display.JsonAbstractBinop")`>`'
- name: display.JsonAbstract.from
  id: haxe/display/jsonabstract#from
  summary: null
  belongs_to: display.JsonAbstract
  description: '### [`from`](#from)`:`[`Array`](../../array "Array")`<`[`JsonAbstractCast`](jsonabstractcast "haxe.display.JsonAbstractCast")`>`'
- name: display.JsonAbstract.impl
  id: haxe/display/jsonabstract#impl
  summary: null
  belongs_to: display.JsonAbstract
  description: '### [`impl`](#impl)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonClass`](jsonclass "haxe.display.JsonClass")`>`'
- name: display.JsonAbstract.resolve
  id: haxe/display/jsonabstract#resolve
  summary: null
  belongs_to: display.JsonAbstract
  description: '### [`resolve`](#resolve)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonClassFieldReference`](jsonclassfieldreference "haxe.display.JsonClassFieldReference")`>`'
- name: display.JsonAbstract.to
  id: haxe/display/jsonabstract#to
  summary: null
  belongs_to: display.JsonAbstract
  description: '### [`to`](#to)`:`[`Array`](../../array "Array")`<`[`JsonAbstractCast`](jsonabstractcast "haxe.display.JsonAbstractCast")`>`'
- name: display.JsonAbstract.type
  id: haxe/display/jsonabstract#type
  summary: null
  belongs_to: display.JsonAbstract
  description: '### [`type`](#type)`:`[`JsonType`](jsontype "haxe.display.JsonType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`'
- name: display.JsonAbstract.unops
  id: haxe/display/jsonabstract#unops
  summary: null
  belongs_to: display.JsonAbstract
  description: '### [`unops`](#unops)`:`[`Array`](../../array "Array")`<`[`JsonAbstractUnop`](jsonabstractunop "haxe.display.JsonAbstractUnop")`>`'
- name: display.JsonAbstractBinop
  id: haxe/display/jsonabstractbinop
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonAbstractBinop\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`op`](#op)`:`[`JsonBinop`](jsonbinop \"haxe.display.JsonBinop\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\n### [`field`](#field)`:`[`JsonClassFieldReference`](jsonclassfieldreference \"haxe.display.JsonClassFieldReference\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAbstractBinop.html](https://api.haxe.org/haxe/display/JsonAbstractBinop.html)"
- name: display.JsonAbstractBinop.field
  id: haxe/display/jsonabstractbinop#field
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonAbstractBinop
  description: "### [`field`](#field)`:`[`JsonClassFieldReference`](jsonclassfieldreference \"haxe.display.JsonClassFieldReference\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAbstractBinop.html](https://api.haxe.org/haxe/display/JsonAbstractBinop.html)"
- name: display.JsonAbstractBinop.op
  id: haxe/display/jsonabstractbinop#op
  summary: null
  belongs_to: display.JsonAbstractBinop
  description: '### [`op`](#op)`:`[`JsonBinop`](jsonbinop "haxe.display.JsonBinop")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`'
- name: display.JsonAbstractCast
  id: haxe/display/jsonabstractcast
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonAbstractCast\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`t`](#t)`:`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\n### [`field`](#field)`:`[`JsonClassFieldReference`](jsonclassfieldreference \"haxe.display.JsonClassFieldReference\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAbstractCast.html](https://api.haxe.org/haxe/display/JsonAbstractCast.html)"
- name: display.JsonAbstractCast.field
  id: haxe/display/jsonabstractcast#field
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonAbstractCast
  description: "### [`field`](#field)`:`[`JsonClassFieldReference`](jsonclassfieldreference \"haxe.display.JsonClassFieldReference\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAbstractCast.html](https://api.haxe.org/haxe/display/JsonAbstractCast.html)"
- name: display.JsonAbstractCast.t
  id: haxe/display/jsonabstractcast#t
  summary: null
  belongs_to: display.JsonAbstractCast
  description: '### [`t`](#t)`:`[`JsonType`](jsontype "haxe.display.JsonType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`'
- name: display.JsonAbstractUnop
  id: haxe/display/jsonabstractunop
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonAbstractUnop\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`postFix`](#postFix)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`op`](#op)`:`[`JsonUnop`](jsonunop \"haxe.display.JsonUnop\")\n\n### [`field`](#field)`:`[`JsonClassFieldReference`](jsonclassfieldreference \"haxe.display.JsonClassFieldReference\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAbstractUnop.html](https://api.haxe.org/haxe/display/JsonAbstractUnop.html)"
- name: display.JsonAbstractUnop.field
  id: haxe/display/jsonabstractunop#field
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonAbstractUnop
  description: "### [`field`](#field)`:`[`JsonClassFieldReference`](jsonclassfieldreference \"haxe.display.JsonClassFieldReference\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAbstractUnop.html](https://api.haxe.org/haxe/display/JsonAbstractUnop.html)"
- name: display.JsonAbstractUnop.op
  id: haxe/display/jsonabstractunop#op
  summary: null
  belongs_to: display.JsonAbstractUnop
  description: '### [`op`](#op)`:`[`JsonUnop`](jsonunop "haxe.display.JsonUnop")'
- name: display.JsonAbstractUnop.postFix
  id: haxe/display/jsonabstractunop#postFix
  summary: null
  belongs_to: display.JsonAbstractUnop
  description: '### [`postFix`](#postFix)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.JsonAnon
  id: haxe/display/jsonanon
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonAnon\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`status`](#status)`:`[`JsonAnonStatus`](jsonanonstatus \"haxe.display.JsonAnonStatus\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\n### [`fields`](#fields)`:`[`JsonClassFields`](jsonclassfields \"haxe.display.JsonClassFields\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAnon.html](https://api.haxe.org/haxe/display/JsonAnon.html)"
- name: display.JsonAnon.fields
  id: haxe/display/jsonanon#fields
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonAnon
  description: "### [`fields`](#fields)`:`[`JsonClassFields`](jsonclassfields \"haxe.display.JsonClassFields\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAnon.html](https://api.haxe.org/haxe/display/JsonAnon.html)"
- name: display.JsonAnon.status
  id: haxe/display/jsonanon#status
  summary: null
  belongs_to: display.JsonAnon
  description: '### [`status`](#status)`:`[`JsonAnonStatus`](jsonanonstatus "haxe.display.JsonAnonStatus")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`'
- name: display.JsonAnonStatus
  id: haxe/display/jsonanonstatus
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonAnonStatus\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`kind`](#kind)`:`[`JsonAnonStatusKind`](jsonanonstatuskind \"haxe.display.JsonAnonStatusKind\")`<``T``>`\n\n### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAnonStatus.html](https://api.haxe.org/haxe/display/JsonAnonStatus.html)"
- name: display.JsonAnonStatus.args
  id: haxe/display/jsonanonstatus#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonAnonStatus
  description: "### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAnonStatus.html](https://api.haxe.org/haxe/display/JsonAnonStatus.html)"
- name: display.JsonAnonStatus.kind
  id: haxe/display/jsonanonstatus#kind
  summary: null
  belongs_to: display.JsonAnonStatus
  description: '### [`kind`](#kind)`:`[`JsonAnonStatusKind`](jsonanonstatuskind "haxe.display.JsonAnonStatusKind")`<``T``>`'
- name: display.JsonAnonStatusKind
  id: haxe/display/jsonanonstatuskind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonAnonStatusKind\\<T\\>([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`AAbstractStatics`](#AAbstractStatics)`:`[`JsonAnonStatusKind`](jsonanonstatuskind \"haxe.display.JsonAnonStatusKind\")`<`[`JsonTypePath`](jsontypepath \"haxe.display.JsonTypePath\")`>`` = \"AAbstractStatics\"`\n\n### `inline``read only`[`AClassStatics`](#AClassStatics)`:`[`JsonAnonStatusKind`](jsonanonstatuskind \"haxe.display.JsonAnonStatusKind\")`<`[`JsonTypePath`](jsontypepath \"haxe.display.JsonTypePath\")`>`` = \"AClassStatics\"`\n\n### `inline``read only`[`AClosed`](#AClosed)`:`[`JsonAnonStatusKind`](jsonanonstatuskind \"haxe.display.JsonAnonStatusKind\")`<``T``>`` = \"AClosed\"`\n\n### `inline``read only`[`AConst`](#AConst)`:`[`JsonAnonStatusKind`](jsonanonstatuskind \"haxe.display.JsonAnonStatusKind\")`<``T``>`` = \"AConst\"`\n\n### `inline``read only`[`AEnumStatics`](#AEnumStatics)`:`[`JsonAnonStatusKind`](jsonanonstatuskind \"haxe.display.JsonAnonStatusKind\")`<`[`JsonTypePath`](jsontypepath \"haxe.display.JsonTypePath\")`>`` = \"AEnumStatics\"`\n\n### `inline``read only`[`AExtend`](#AExtend)`:`[`JsonAnonStatusKind`](jsonanonstatuskind \"haxe.display.JsonAnonStatusKind\")`<`[`JsonTypes`](jsontypes \"haxe.display.JsonTypes\")`>`` = \"AExtend\"`\n\n### `inline``read only`[`AOpened`](#AOpened)`:`[`JsonAnonStatusKind`](jsonanonstatuskind \"haxe.display.JsonAnonStatusKind\")`<``T``>`` = \"AOpened\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAnonStatusKind.html](https://api.haxe.org/haxe/display/JsonAnonStatusKind.html)"
- name: display.JsonAnonStatusKind.AAbstractStatics
  id: haxe/display/jsonanonstatuskind#AAbstractStatics
  summary: null
  belongs_to: display.JsonAnonStatusKind
  description: '### `inline``read only`[`AAbstractStatics`](#AAbstractStatics)`:`[`JsonAnonStatusKind`](jsonanonstatuskind "haxe.display.JsonAnonStatusKind")`<`[`JsonTypePath`](jsontypepath "haxe.display.JsonTypePath")`>`` = "AAbstractStatics"`'
- name: display.JsonAnonStatusKind.AClassStatics
  id: haxe/display/jsonanonstatuskind#AClassStatics
  summary: null
  belongs_to: display.JsonAnonStatusKind
  description: '### `inline``read only`[`AClassStatics`](#AClassStatics)`:`[`JsonAnonStatusKind`](jsonanonstatuskind "haxe.display.JsonAnonStatusKind")`<`[`JsonTypePath`](jsontypepath "haxe.display.JsonTypePath")`>`` = "AClassStatics"`'
- name: display.JsonAnonStatusKind.AClosed
  id: haxe/display/jsonanonstatuskind#AClosed
  summary: null
  belongs_to: display.JsonAnonStatusKind
  description: '### `inline``read only`[`AClosed`](#AClosed)`:`[`JsonAnonStatusKind`](jsonanonstatuskind "haxe.display.JsonAnonStatusKind")`<``T``>`` = "AClosed"`'
- name: display.JsonAnonStatusKind.AConst
  id: haxe/display/jsonanonstatuskind#AConst
  summary: null
  belongs_to: display.JsonAnonStatusKind
  description: '### `inline``read only`[`AConst`](#AConst)`:`[`JsonAnonStatusKind`](jsonanonstatuskind "haxe.display.JsonAnonStatusKind")`<``T``>`` = "AConst"`'
- name: display.JsonAnonStatusKind.AEnumStatics
  id: haxe/display/jsonanonstatuskind#AEnumStatics
  summary: null
  belongs_to: display.JsonAnonStatusKind
  description: '### `inline``read only`[`AEnumStatics`](#AEnumStatics)`:`[`JsonAnonStatusKind`](jsonanonstatuskind "haxe.display.JsonAnonStatusKind")`<`[`JsonTypePath`](jsontypepath "haxe.display.JsonTypePath")`>`` = "AEnumStatics"`'
- name: display.JsonAnonStatusKind.AExtend
  id: haxe/display/jsonanonstatuskind#AExtend
  summary: null
  belongs_to: display.JsonAnonStatusKind
  description: '### `inline``read only`[`AExtend`](#AExtend)`:`[`JsonAnonStatusKind`](jsonanonstatuskind "haxe.display.JsonAnonStatusKind")`<`[`JsonTypes`](jsontypes "haxe.display.JsonTypes")`>`` = "AExtend"`'
- name: display.JsonAnonStatusKind.AOpened
  id: haxe/display/jsonanonstatuskind#AOpened
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonAnonStatusKind
  description: "### `inline``read only`[`AOpened`](#AOpened)`:`[`JsonAnonStatusKind`](jsonanonstatuskind \"haxe.display.JsonAnonStatusKind\")`<``T``>`` = \"AOpened\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonAnonStatusKind.html](https://api.haxe.org/haxe/display/JsonAnonStatusKind.html)"
- name: display.JsonBinop
  id: haxe/display/jsonbinop
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonBinop\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`kind`](#kind)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`\n\n### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonBinop.html](https://api.haxe.org/haxe/display/JsonBinop.html)"
- name: display.JsonBinop.args
  id: haxe/display/jsonbinop#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonBinop
  description: "### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonBinop.html](https://api.haxe.org/haxe/display/JsonBinop.html)"
- name: display.JsonBinop.kind
  id: haxe/display/jsonbinop#kind
  summary: null
  belongs_to: display.JsonBinop
  description: '### [`kind`](#kind)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`'
- name: display.JsonBinopKind
  id: haxe/display/jsonbinopkind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonBinopKind\\<T\\>([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`OpAdd`](#OpAdd)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpAdd\"`\n\n### `inline``read only`[`OpAnd`](#OpAnd)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpAnd\"`\n\n### `inline``read only`[`OpArrow`](#OpArrow)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpArrow\"`\n\n### `inline``read only`[`OpAssign`](#OpAssign)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpAssign\"`\n\n### `inline``read only`[`OpAssignOp`](#OpAssignOp)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<`[`JsonBinop`](jsonbinop \"haxe.display.JsonBinop\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`` = \"OpAssignOp\"`\n\n### `inline``read only`[`OpBoolAnd`](#OpBoolAnd)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpBoolAnd\"`\n\n### `inline``read only`[`OpBoolOr`](#OpBoolOr)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpBoolOr\"`\n\n### `inline``read only`[`OpDiv`](#OpDiv)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpDiv\"`\n\n### `inline``read only`[`OpEq`](#OpEq)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpEq\"`\n\n### `inline``read only`[`OpGt`](#OpGt)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpGt\"`\n\n### `inline``read only`[`OpGte`](#OpGte)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpGte\"`\n\n### `inline``read only`[`OpIn`](#OpIn)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpIn\"`\n\n### `inline``read only`[`OpInterval`](#OpInterval)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpInterval\"`\n\n### `inline``read only`[`OpLt`](#OpLt)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpLt\"`\n\n### `inline``read only`[`OpLte`](#OpLte)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpLte\"`\n\n### `inline``read only`[`OpMod`](#OpMod)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpMod\"`\n\n### `inline``read only`[`OpMult`](#OpMult)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpMult\"`\n\n### `inline``read only`[`OpNotEq`](#OpNotEq)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpNotEq\"`\n\n### `inline``read only`[`OpOr`](#OpOr)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpOr\"`\n\n### `inline``read only`[`OpShl`](#OpShl)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpShl\"`\n\n### `inline``read only`[`OpShr`](#OpShr)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpShr\"`\n\n### `inline``read only`[`OpSub`](#OpSub)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpSub\"`\n\n### `inline``read only`[`OpUShr`](#OpUShr)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpUShr\"`\n\n### `inline``read only`[`OpXor`](#OpXor)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpXor\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonBinopKind.html](https://api.haxe.org/haxe/display/JsonBinopKind.html)"
- name: display.JsonBinopKind.OpAdd
  id: haxe/display/jsonbinopkind#OpAdd
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpAdd`](#OpAdd)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpAdd"`'
- name: display.JsonBinopKind.OpAnd
  id: haxe/display/jsonbinopkind#OpAnd
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpAnd`](#OpAnd)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpAnd"`'
- name: display.JsonBinopKind.OpArrow
  id: haxe/display/jsonbinopkind#OpArrow
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpArrow`](#OpArrow)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpArrow"`'
- name: display.JsonBinopKind.OpAssign
  id: haxe/display/jsonbinopkind#OpAssign
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpAssign`](#OpAssign)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpAssign"`'
- name: display.JsonBinopKind.OpAssignOp
  id: haxe/display/jsonbinopkind#OpAssignOp
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpAssignOp`](#OpAssignOp)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<`[`JsonBinop`](jsonbinop "haxe.display.JsonBinop")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`` = "OpAssignOp"`'
- name: display.JsonBinopKind.OpBoolAnd
  id: haxe/display/jsonbinopkind#OpBoolAnd
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpBoolAnd`](#OpBoolAnd)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpBoolAnd"`'
- name: display.JsonBinopKind.OpBoolOr
  id: haxe/display/jsonbinopkind#OpBoolOr
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpBoolOr`](#OpBoolOr)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpBoolOr"`'
- name: display.JsonBinopKind.OpDiv
  id: haxe/display/jsonbinopkind#OpDiv
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpDiv`](#OpDiv)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpDiv"`'
- name: display.JsonBinopKind.OpEq
  id: haxe/display/jsonbinopkind#OpEq
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpEq`](#OpEq)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpEq"`'
- name: display.JsonBinopKind.OpGt
  id: haxe/display/jsonbinopkind#OpGt
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpGt`](#OpGt)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpGt"`'
- name: display.JsonBinopKind.OpGte
  id: haxe/display/jsonbinopkind#OpGte
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpGte`](#OpGte)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpGte"`'
- name: display.JsonBinopKind.OpIn
  id: haxe/display/jsonbinopkind#OpIn
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpIn`](#OpIn)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpIn"`'
- name: display.JsonBinopKind.OpInterval
  id: haxe/display/jsonbinopkind#OpInterval
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpInterval`](#OpInterval)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpInterval"`'
- name: display.JsonBinopKind.OpLt
  id: haxe/display/jsonbinopkind#OpLt
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpLt`](#OpLt)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpLt"`'
- name: display.JsonBinopKind.OpLte
  id: haxe/display/jsonbinopkind#OpLte
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpLte`](#OpLte)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpLte"`'
- name: display.JsonBinopKind.OpMod
  id: haxe/display/jsonbinopkind#OpMod
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpMod`](#OpMod)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpMod"`'
- name: display.JsonBinopKind.OpMult
  id: haxe/display/jsonbinopkind#OpMult
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpMult`](#OpMult)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpMult"`'
- name: display.JsonBinopKind.OpNotEq
  id: haxe/display/jsonbinopkind#OpNotEq
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpNotEq`](#OpNotEq)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpNotEq"`'
- name: display.JsonBinopKind.OpOr
  id: haxe/display/jsonbinopkind#OpOr
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpOr`](#OpOr)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpOr"`'
- name: display.JsonBinopKind.OpShl
  id: haxe/display/jsonbinopkind#OpShl
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpShl`](#OpShl)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpShl"`'
- name: display.JsonBinopKind.OpShr
  id: haxe/display/jsonbinopkind#OpShr
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpShr`](#OpShr)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpShr"`'
- name: display.JsonBinopKind.OpSub
  id: haxe/display/jsonbinopkind#OpSub
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpSub`](#OpSub)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpSub"`'
- name: display.JsonBinopKind.OpUShr
  id: haxe/display/jsonbinopkind#OpUShr
  summary: null
  belongs_to: display.JsonBinopKind
  description: '### `inline``read only`[`OpUShr`](#OpUShr)`:`[`JsonBinopKind`](jsonbinopkind "haxe.display.JsonBinopKind")`<``T``>`` = "OpUShr"`'
- name: display.JsonBinopKind.OpXor
  id: haxe/display/jsonbinopkind#OpXor
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonBinopKind
  description: "### `inline``read only`[`OpXor`](#OpXor)`:`[`JsonBinopKind`](jsonbinopkind \"haxe.display.JsonBinopKind\")`<``T``>`` = \"OpXor\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonBinopKind.html](https://api.haxe.org/haxe/display/JsonBinopKind.html)"
- name: display.JsonClass
  id: haxe/display/jsonclass
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonClass\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`superClass`](#superClass)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonTypePathWithParams`](jsontypepathwithparams \"haxe.display.JsonTypePathWithParams\")`>`\n\n### [`statics`](#statics)`:`[`JsonClassFields`](jsonclassfields \"haxe.display.JsonClassFields\")\n\n### [`overrides`](#overrides)`:`[`Array`](../../array \"Array\")`<`[`JsonClassFieldReference`](jsonclassfieldreference \"haxe.display.JsonClassFieldReference\")`>`\n\n### [`kind`](#kind)`:`[`JsonClassKind`](jsonclasskind \"haxe.display.JsonClassKind\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\n### [`isInterface`](#isInterface)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`isFinal`](#isFinal)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`isExtern`](#isExtern)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`interfaces`](#interfaces)`:`[`Array`](../../array \"Array\")`<`[`JsonTypePathWithParams`](jsontypepathwithparams \"haxe.display.JsonTypePathWithParams\")`>`\n\n### [`init`](#init)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonTExpr`](jsontexpr \"haxe.display.JsonTExpr\")`>`\n\n### [`fields`](#fields)`:`[`JsonClassFields`](jsonclassfields \"haxe.display.JsonClassFields\")\n\n### [`constructor`](#constructor)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonClassField`](jsonclassfield \"haxe.display.JsonClassField\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonClass.html](https://api.haxe.org/haxe/display/JsonClass.html)"
- name: display.JsonClass.constructor
  id: haxe/display/jsonclass#constructor
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonClass
  description: "### [`constructor`](#constructor)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonClassField`](jsonclassfield \"haxe.display.JsonClassField\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonClass.html](https://api.haxe.org/haxe/display/JsonClass.html)"
- name: display.JsonClass.fields
  id: haxe/display/jsonclass#fields
  summary: null
  belongs_to: display.JsonClass
  description: '### [`fields`](#fields)`:`[`JsonClassFields`](jsonclassfields "haxe.display.JsonClassFields")'
- name: display.JsonClass.init
  id: haxe/display/jsonclass#init
  summary: null
  belongs_to: display.JsonClass
  description: '### [`init`](#init)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonTExpr`](jsontexpr "haxe.display.JsonTExpr")`>`'
- name: display.JsonClass.interfaces
  id: haxe/display/jsonclass#interfaces
  summary: null
  belongs_to: display.JsonClass
  description: '### [`interfaces`](#interfaces)`:`[`Array`](../../array "Array")`<`[`JsonTypePathWithParams`](jsontypepathwithparams "haxe.display.JsonTypePathWithParams")`>`'
- name: display.JsonClass.isExtern
  id: haxe/display/jsonclass#isExtern
  summary: null
  belongs_to: display.JsonClass
  description: '### [`isExtern`](#isExtern)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.JsonClass.isFinal
  id: haxe/display/jsonclass#isFinal
  summary: null
  belongs_to: display.JsonClass
  description: '### [`isFinal`](#isFinal)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.JsonClass.isInterface
  id: haxe/display/jsonclass#isInterface
  summary: null
  belongs_to: display.JsonClass
  description: '### [`isInterface`](#isInterface)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.JsonClass.kind
  id: haxe/display/jsonclass#kind
  summary: null
  belongs_to: display.JsonClass
  description: '### [`kind`](#kind)`:`[`JsonClassKind`](jsonclasskind "haxe.display.JsonClassKind")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`'
- name: display.JsonClass.overrides
  id: haxe/display/jsonclass#overrides
  summary: null
  belongs_to: display.JsonClass
  description: '### [`overrides`](#overrides)`:`[`Array`](../../array "Array")`<`[`JsonClassFieldReference`](jsonclassfieldreference "haxe.display.JsonClassFieldReference")`>`'
- name: display.JsonClass.statics
  id: haxe/display/jsonclass#statics
  summary: null
  belongs_to: display.JsonClass
  description: '### [`statics`](#statics)`:`[`JsonClassFields`](jsonclassfields "haxe.display.JsonClassFields")'
- name: display.JsonClass.superClass
  id: haxe/display/jsonclass#superClass
  summary: null
  belongs_to: display.JsonClass
  description: '### [`superClass`](#superClass)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonTypePathWithParams`](jsontypepathwithparams "haxe.display.JsonTypePathWithParams")`>`'
- name: display.JsonClassField
  id: haxe/display/jsonclassfield
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonClassField\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`type`](#type)`:`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\n### [`scope`](#scope)`:`[`JsonClassFieldScope`](jsonclassfieldscope \"haxe.display.JsonClassFieldScope\")\n\n### [`pos`](#pos)`:`[`JsonPos`](jsonpos \"haxe.display.JsonPos\")\n\n### [`params`](#params)`:`[`JsonTypeParameters`](jsontypeparameters \"haxe.display.JsonTypeParameters\")\n\n### [`overloads`](#overloads)`:`[`JsonClassFields`](jsonclassfields \"haxe.display.JsonClassFields\")\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n### [`meta`](#meta)`:`[`JsonMetadata`](jsonmetadata \"haxe.display.JsonMetadata\")\n\n### [`kind`](#kind)`:`[`JsonFieldKind`](jsonfieldkind \"haxe.display.JsonFieldKind\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\n### [`isPublic`](#isPublic)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`isFinal`](#isFinal)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### `optional`[`expr`](#expr)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<{string:`[`String`](../../string \"String - The basic String class.\")`}>`\n\n### [`doc`](#doc)`:`[`JsonDoc`](jsondoc \"haxe.display.JsonDoc\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonClassField.html](https://api.haxe.org/haxe/display/JsonClassField.html)"
- name: display.JsonClassField.doc
  id: haxe/display/jsonclassfield#doc
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonClassField
  description: "### [`doc`](#doc)`:`[`JsonDoc`](jsondoc \"haxe.display.JsonDoc\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonClassField.html](https://api.haxe.org/haxe/display/JsonClassField.html)"
- name: display.JsonClassField.expr
  id: haxe/display/jsonclassfield#expr
  summary: null
  belongs_to: display.JsonClassField
  description: '### `optional`[`expr`](#expr)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<{string:`[`String`](../../string "String - The basic String class.")`}>`'
- name: display.JsonClassField.isFinal
  id: haxe/display/jsonclassfield#isFinal
  summary: null
  belongs_to: display.JsonClassField
  description: '### [`isFinal`](#isFinal)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.JsonClassField.isPublic
  id: haxe/display/jsonclassfield#isPublic
  summary: null
  belongs_to: display.JsonClassField
  description: '### [`isPublic`](#isPublic)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.JsonClassField.kind
  id: haxe/display/jsonclassfield#kind
  summary: null
  belongs_to: display.JsonClassField
  description: '### [`kind`](#kind)`:`[`JsonFieldKind`](jsonfieldkind "haxe.display.JsonFieldKind")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`'
- name: display.JsonClassField.meta
  id: haxe/display/jsonclassfield#meta
  summary: null
  belongs_to: display.JsonClassField
  description: '### [`meta`](#meta)`:`[`JsonMetadata`](jsonmetadata "haxe.display.JsonMetadata")'
- name: display.JsonClassField.name
  id: haxe/display/jsonclassfield#name
  summary: null
  belongs_to: display.JsonClassField
  description: '### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonClassField.overloads
  id: haxe/display/jsonclassfield#overloads
  summary: null
  belongs_to: display.JsonClassField
  description: '### [`overloads`](#overloads)`:`[`JsonClassFields`](jsonclassfields "haxe.display.JsonClassFields")'
- name: display.JsonClassField.params
  id: haxe/display/jsonclassfield#params
  summary: null
  belongs_to: display.JsonClassField
  description: '### [`params`](#params)`:`[`JsonTypeParameters`](jsontypeparameters "haxe.display.JsonTypeParameters")'
- name: display.JsonClassField.pos
  id: haxe/display/jsonclassfield#pos
  summary: null
  belongs_to: display.JsonClassField
  description: '### [`pos`](#pos)`:`[`JsonPos`](jsonpos "haxe.display.JsonPos")'
- name: display.JsonClassField.scope
  id: haxe/display/jsonclassfield#scope
  summary: null
  belongs_to: display.JsonClassField
  description: '### [`scope`](#scope)`:`[`JsonClassFieldScope`](jsonclassfieldscope "haxe.display.JsonClassFieldScope")'
- name: display.JsonClassField.type
  id: haxe/display/jsonclassfield#type
  summary: null
  belongs_to: display.JsonClassField
  description: '### [`type`](#type)`:`[`JsonType`](jsontype "haxe.display.JsonType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`'
- name: display.JsonClassFieldReference
  id: haxe/display/jsonclassfieldreference
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonClassFieldReference\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonClassFieldReference.html](https://api.haxe.org/haxe/display/JsonClassFieldReference.html)"
- name: display.JsonClassFields
  id: haxe/display/jsonclassfields
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonClassFields\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`Array`](../../array \"Array\")`<`[`haxe.display.JsonClassField`](jsonclassfield \"haxe.display.JsonClassField\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonClassFields.html](https://api.haxe.org/haxe/display/JsonClassFields.html)"
- name: display.JsonClassFieldScope
  id: haxe/display/jsonclassfieldscope
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonClassFieldScope([Int](../../int \"Int - The standard Int type.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Constructor`](#Constructor)`:`[`JsonClassFieldScope`](jsonclassfieldscope \"haxe.display.JsonClassFieldScope\")` = 2`\n\n### `inline``read only`[`Member`](#Member)`:`[`JsonClassFieldScope`](jsonclassfieldscope \"haxe.display.JsonClassFieldScope\")` = 1`\n\n### `inline``read only`[`Static`](#Static)`:`[`JsonClassFieldScope`](jsonclassfieldscope \"haxe.display.JsonClassFieldScope\")` = 0`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonClassFieldScope.html](https://api.haxe.org/haxe/display/JsonClassFieldScope.html)"
- name: display.JsonClassFieldScope.Constructor
  id: haxe/display/jsonclassfieldscope#Constructor
  summary: null
  belongs_to: display.JsonClassFieldScope
  description: '### `inline``read only`[`Constructor`](#Constructor)`:`[`JsonClassFieldScope`](jsonclassfieldscope "haxe.display.JsonClassFieldScope")` = 2`'
- name: display.JsonClassFieldScope.Member
  id: haxe/display/jsonclassfieldscope#Member
  summary: null
  belongs_to: display.JsonClassFieldScope
  description: '### `inline``read only`[`Member`](#Member)`:`[`JsonClassFieldScope`](jsonclassfieldscope "haxe.display.JsonClassFieldScope")` = 1`'
- name: display.JsonClassFieldScope.Static
  id: haxe/display/jsonclassfieldscope#Static
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonClassFieldScope
  description: "### `inline``read only`[`Static`](#Static)`:`[`JsonClassFieldScope`](jsonclassfieldscope \"haxe.display.JsonClassFieldScope\")` = 0`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonClassFieldScope.html](https://api.haxe.org/haxe/display/JsonClassFieldScope.html)"
- name: display.JsonClassKind
  id: haxe/display/jsonclasskind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonClassKind\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`kind`](#kind)`:`[`JsonClassKindKind`](jsonclasskindkind \"haxe.display.JsonClassKindKind\")`<``T``>`\n\n### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonClassKind.html](https://api.haxe.org/haxe/display/JsonClassKind.html)"
- name: display.JsonClassKind.args
  id: haxe/display/jsonclasskind#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonClassKind
  description: "### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonClassKind.html](https://api.haxe.org/haxe/display/JsonClassKind.html)"
- name: display.JsonClassKind.kind
  id: haxe/display/jsonclasskind#kind
  summary: null
  belongs_to: display.JsonClassKind
  description: '### [`kind`](#kind)`:`[`JsonClassKindKind`](jsonclasskindkind "haxe.display.JsonClassKindKind")`<``T``>`'
- name: display.JsonClassKindKind
  id: haxe/display/jsonclasskindkind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonClassKindKind\\<T\\>([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`KAbstractImpl`](#KAbstractImpl)`:`[`JsonClassKindKind`](jsonclasskindkind \"haxe.display.JsonClassKindKind\")`<`[`JsonTypePath`](jsontypepath \"haxe.display.JsonTypePath\")`>`` = \"KAbstractImpl\"`\n\n### `inline``read only`[`KExpr`](#KExpr)`:`[`JsonClassKindKind`](jsonclasskindkind \"haxe.display.JsonClassKindKind\")`<`[`JsonExpr`](jsonexpr \"haxe.display.JsonExpr\")`>`` = \"KExpr\"`\n\n### `inline``read only`[`KExtension`](#KExtension)`:`[`JsonClassKindKind`](jsonclasskindkind \"haxe.display.JsonClassKindKind\")`<`[`JsonTypePathWithParams`](jsontypepathwithparams \"haxe.display.JsonTypePathWithParams\")`>`` = \"KExtension\"`\n\n### `inline``read only`[`KGeneric`](#KGeneric)`:`[`JsonClassKindKind`](jsonclasskindkind \"haxe.display.JsonClassKindKind\")`<``T``>`` = \"KGeneric\"`\n\n### `inline``read only`[`KGenericBuild`](#KGenericBuild)`:`[`JsonClassKindKind`](jsonclasskindkind \"haxe.display.JsonClassKindKind\")`<``T``>`` = \"KGenericBuild\"`\n\n### `inline``read only`[`KGenericInstance`](#KGenericInstance)`:`[`JsonClassKindKind`](jsonclasskindkind \"haxe.display.JsonClassKindKind\")`<`[`JsonTypePathWithParams`](jsontypepathwithparams \"haxe.display.JsonTypePathWithParams\")`>`` = \"KGenericInstance\"`\n\n### `inline``read only`[`KMacroType`](#KMacroType)`:`[`JsonClassKindKind`](jsonclasskindkind \"haxe.display.JsonClassKindKind\")`<``T``>`` = \"KMacroType\"`\n\n### `inline``read only`[`KNormal`](#KNormal)`:`[`JsonClassKindKind`](jsonclasskindkind \"haxe.display.JsonClassKindKind\")`<``T``>`` = \"KNormal\"`\n\n### `inline``read only`[`KTypeParameter`](#KTypeParameter)`:`[`JsonClassKindKind`](jsonclasskindkind \"haxe.display.JsonClassKindKind\")`<`[`JsonTypes`](jsontypes \"haxe.display.JsonTypes\")`>`` = \"KTypeParameter\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonClassKindKind.html](https://api.haxe.org/haxe/display/JsonClassKindKind.html)"
- name: display.JsonClassKindKind.KAbstractImpl
  id: haxe/display/jsonclasskindkind#KAbstractImpl
  summary: null
  belongs_to: display.JsonClassKindKind
  description: '### `inline``read only`[`KAbstractImpl`](#KAbstractImpl)`:`[`JsonClassKindKind`](jsonclasskindkind "haxe.display.JsonClassKindKind")`<`[`JsonTypePath`](jsontypepath "haxe.display.JsonTypePath")`>`` = "KAbstractImpl"`'
- name: display.JsonClassKindKind.KExpr
  id: haxe/display/jsonclasskindkind#KExpr
  summary: null
  belongs_to: display.JsonClassKindKind
  description: '### `inline``read only`[`KExpr`](#KExpr)`:`[`JsonClassKindKind`](jsonclasskindkind "haxe.display.JsonClassKindKind")`<`[`JsonExpr`](jsonexpr "haxe.display.JsonExpr")`>`` = "KExpr"`'
- name: display.JsonClassKindKind.KExtension
  id: haxe/display/jsonclasskindkind#KExtension
  summary: null
  belongs_to: display.JsonClassKindKind
  description: '### `inline``read only`[`KExtension`](#KExtension)`:`[`JsonClassKindKind`](jsonclasskindkind "haxe.display.JsonClassKindKind")`<`[`JsonTypePathWithParams`](jsontypepathwithparams "haxe.display.JsonTypePathWithParams")`>`` = "KExtension"`'
- name: display.JsonClassKindKind.KGeneric
  id: haxe/display/jsonclasskindkind#KGeneric
  summary: null
  belongs_to: display.JsonClassKindKind
  description: '### `inline``read only`[`KGeneric`](#KGeneric)`:`[`JsonClassKindKind`](jsonclasskindkind "haxe.display.JsonClassKindKind")`<``T``>`` = "KGeneric"`'
- name: display.JsonClassKindKind.KGenericBuild
  id: haxe/display/jsonclasskindkind#KGenericBuild
  summary: null
  belongs_to: display.JsonClassKindKind
  description: '### `inline``read only`[`KGenericBuild`](#KGenericBuild)`:`[`JsonClassKindKind`](jsonclasskindkind "haxe.display.JsonClassKindKind")`<``T``>`` = "KGenericBuild"`'
- name: display.JsonClassKindKind.KGenericInstance
  id: haxe/display/jsonclasskindkind#KGenericInstance
  summary: null
  belongs_to: display.JsonClassKindKind
  description: '### `inline``read only`[`KGenericInstance`](#KGenericInstance)`:`[`JsonClassKindKind`](jsonclasskindkind "haxe.display.JsonClassKindKind")`<`[`JsonTypePathWithParams`](jsontypepathwithparams "haxe.display.JsonTypePathWithParams")`>`` = "KGenericInstance"`'
- name: display.JsonClassKindKind.KMacroType
  id: haxe/display/jsonclasskindkind#KMacroType
  summary: null
  belongs_to: display.JsonClassKindKind
  description: '### `inline``read only`[`KMacroType`](#KMacroType)`:`[`JsonClassKindKind`](jsonclasskindkind "haxe.display.JsonClassKindKind")`<``T``>`` = "KMacroType"`'
- name: display.JsonClassKindKind.KNormal
  id: haxe/display/jsonclasskindkind#KNormal
  summary: null
  belongs_to: display.JsonClassKindKind
  description: '### `inline``read only`[`KNormal`](#KNormal)`:`[`JsonClassKindKind`](jsonclasskindkind "haxe.display.JsonClassKindKind")`<``T``>`` = "KNormal"`'
- name: display.JsonClassKindKind.KTypeParameter
  id: haxe/display/jsonclasskindkind#KTypeParameter
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonClassKindKind
  description: "### `inline``read only`[`KTypeParameter`](#KTypeParameter)`:`[`JsonClassKindKind`](jsonclasskindkind \"haxe.display.JsonClassKindKind\")`<`[`JsonTypes`](jsontypes \"haxe.display.JsonTypes\")`>`` = \"KTypeParameter\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonClassKindKind.html](https://api.haxe.org/haxe/display/JsonClassKindKind.html)"
- name: display.JsonDoc
  id: haxe/display/jsondoc
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonDoc\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonDoc.html](https://api.haxe.org/haxe/display/JsonDoc.html)"
- name: display.JsonEnum
  id: haxe/display/jsonenum
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonEnum\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`isExtern`](#isExtern)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`constructors`](#constructors)`:`[`JsonEnumFields`](jsonenumfields \"haxe.display.JsonEnumFields\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonEnum.html](https://api.haxe.org/haxe/display/JsonEnum.html)"
- name: display.JsonEnum.constructors
  id: haxe/display/jsonenum#constructors
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonEnum
  description: "### [`constructors`](#constructors)`:`[`JsonEnumFields`](jsonenumfields \"haxe.display.JsonEnumFields\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonEnum.html](https://api.haxe.org/haxe/display/JsonEnum.html)"
- name: display.JsonEnum.isExtern
  id: haxe/display/jsonenum#isExtern
  summary: null
  belongs_to: display.JsonEnum
  description: '### [`isExtern`](#isExtern)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.JsonEnumField
  id: haxe/display/jsonenumfield
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonEnumField\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`type`](#type)`:`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\n### [`pos`](#pos)`:`[`JsonPos`](jsonpos \"haxe.display.JsonPos\")\n\n### [`params`](#params)`:`[`JsonTypeParameters`](jsontypeparameters \"haxe.display.JsonTypeParameters\")\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n### [`meta`](#meta)`:`[`JsonMetadata`](jsonmetadata \"haxe.display.JsonMetadata\")\n\n### [`index`](#index)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### [`doc`](#doc)`:`[`JsonDoc`](jsondoc \"haxe.display.JsonDoc\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonEnumField.html](https://api.haxe.org/haxe/display/JsonEnumField.html)"
- name: display.JsonEnumField.doc
  id: haxe/display/jsonenumfield#doc
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonEnumField
  description: "### [`doc`](#doc)`:`[`JsonDoc`](jsondoc \"haxe.display.JsonDoc\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonEnumField.html](https://api.haxe.org/haxe/display/JsonEnumField.html)"
- name: display.JsonEnumField.index
  id: haxe/display/jsonenumfield#index
  summary: null
  belongs_to: display.JsonEnumField
  description: '### [`index`](#index)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: display.JsonEnumField.meta
  id: haxe/display/jsonenumfield#meta
  summary: null
  belongs_to: display.JsonEnumField
  description: '### [`meta`](#meta)`:`[`JsonMetadata`](jsonmetadata "haxe.display.JsonMetadata")'
- name: display.JsonEnumField.name
  id: haxe/display/jsonenumfield#name
  summary: null
  belongs_to: display.JsonEnumField
  description: '### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonEnumField.params
  id: haxe/display/jsonenumfield#params
  summary: null
  belongs_to: display.JsonEnumField
  description: '### [`params`](#params)`:`[`JsonTypeParameters`](jsontypeparameters "haxe.display.JsonTypeParameters")'
- name: display.JsonEnumField.pos
  id: haxe/display/jsonenumfield#pos
  summary: null
  belongs_to: display.JsonEnumField
  description: '### [`pos`](#pos)`:`[`JsonPos`](jsonpos "haxe.display.JsonPos")'
- name: display.JsonEnumField.type
  id: haxe/display/jsonenumfield#type
  summary: null
  belongs_to: display.JsonEnumField
  description: '### [`type`](#type)`:`[`JsonType`](jsontype "haxe.display.JsonType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`'
- name: display.JsonEnumFields
  id: haxe/display/jsonenumfields
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonEnumFields\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`Array`](../../array \"Array\")`<`[`haxe.display.JsonEnumField`](jsonenumfield \"haxe.display.JsonEnumField\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonEnumFields.html](https://api.haxe.org/haxe/display/JsonEnumFields.html)"
- name: display.JsonExpr
  id: haxe/display/jsonexpr
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonExpr\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`haxe.display.JsonTodo`](jsontodo \"haxe.display.JsonTodo\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonExpr.html](https://api.haxe.org/haxe/display/JsonExpr.html)"
- name: display.JsonFieldKind
  id: haxe/display/jsonfieldkind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonFieldKind\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`kind`](#kind)`:`[`JsonFieldKindKind`](jsonfieldkindkind \"haxe.display.JsonFieldKindKind\")`<``T``>`\n\n### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonFieldKind.html](https://api.haxe.org/haxe/display/JsonFieldKind.html)"
- name: display.JsonFieldKind.args
  id: haxe/display/jsonfieldkind#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonFieldKind
  description: "### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonFieldKind.html](https://api.haxe.org/haxe/display/JsonFieldKind.html)"
- name: display.JsonFieldKind.kind
  id: haxe/display/jsonfieldkind#kind
  summary: null
  belongs_to: display.JsonFieldKind
  description: '### [`kind`](#kind)`:`[`JsonFieldKindKind`](jsonfieldkindkind "haxe.display.JsonFieldKindKind")`<``T``>`'
- name: display.JsonFieldKindKind
  id: haxe/display/jsonfieldkindkind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonFieldKindKind\\<T\\>([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`FMethod`](#FMethod)`:`[`JsonFieldKindKind`](jsonfieldkindkind \"haxe.display.JsonFieldKindKind\")`<`[`JsonMethodKind`](jsonmethodkind \"haxe.display.JsonMethodKind\")`>`` = \"FMethod\"`\n\n### `inline``read only`[`FVar`](#FVar)`:`[`JsonFieldKindKind`](jsonfieldkindkind \"haxe.display.JsonFieldKindKind\")`<{write:`[`JsonVarAccess`](jsonvaraccess \"haxe.display.JsonVarAccess\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>, read:`[`JsonVarAccess`](jsonvaraccess \"haxe.display.JsonVarAccess\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>}>`` = \"FVar\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonFieldKindKind.html](https://api.haxe.org/haxe/display/JsonFieldKindKind.html)"
- name: display.JsonFieldKindKind.FMethod
  id: haxe/display/jsonfieldkindkind#FMethod
  summary: null
  belongs_to: display.JsonFieldKindKind
  description: '### `inline``read only`[`FMethod`](#FMethod)`:`[`JsonFieldKindKind`](jsonfieldkindkind "haxe.display.JsonFieldKindKind")`<`[`JsonMethodKind`](jsonmethodkind "haxe.display.JsonMethodKind")`>`` = "FMethod"`'
- name: display.JsonFieldKindKind.FVar
  id: haxe/display/jsonfieldkindkind#FVar
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonFieldKindKind
  description: "### `inline``read only`[`FVar`](#FVar)`:`[`JsonFieldKindKind`](jsonfieldkindkind \"haxe.display.JsonFieldKindKind\")`<{write:`[`JsonVarAccess`](jsonvaraccess \"haxe.display.JsonVarAccess\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>, read:`[`JsonVarAccess`](jsonvaraccess \"haxe.display.JsonVarAccess\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>}>`` = \"FVar\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonFieldKindKind.html](https://api.haxe.org/haxe/display/JsonFieldKindKind.html)"
- name: display.JsonFunctionArgument
  id: haxe/display/jsonfunctionargument
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonFunctionArgument\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### `optional`[`value`](#value)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<{string:`[`String`](../../string \"String - The basic String class.\")`}>`\n\n### [`t`](#t)`:`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\n### [`opt`](#opt)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonFunctionArgument.html](https://api.haxe.org/haxe/display/JsonFunctionArgument.html)"
- name: display.JsonFunctionArgument.name
  id: haxe/display/jsonfunctionargument#name
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonFunctionArgument
  description: "### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonFunctionArgument.html](https://api.haxe.org/haxe/display/JsonFunctionArgument.html)"
- name: display.JsonFunctionArgument.opt
  id: haxe/display/jsonfunctionargument#opt
  summary: null
  belongs_to: display.JsonFunctionArgument
  description: '### [`opt`](#opt)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.JsonFunctionArgument.t
  id: haxe/display/jsonfunctionargument#t
  summary: null
  belongs_to: display.JsonFunctionArgument
  description: '### [`t`](#t)`:`[`JsonType`](jsontype "haxe.display.JsonType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`'
- name: display.JsonFunctionArgument.value
  id: haxe/display/jsonfunctionargument#value
  summary: null
  belongs_to: display.JsonFunctionArgument
  description: '### `optional`[`value`](#value)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<{string:`[`String`](../../string "String - The basic String class.")`}>`'
- name: display.JsonFunctionSignature
  id: haxe/display/jsonfunctionsignature
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonFunctionSignature\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`ret`](#ret)`:`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\n### [`args`](#args)`:`[`Array`](../../array \"Array\")`<`[`JsonFunctionArgument`](jsonfunctionargument \"haxe.display.JsonFunctionArgument\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonFunctionSignature.html](https://api.haxe.org/haxe/display/JsonFunctionSignature.html)"
- name: display.JsonFunctionSignature.args
  id: haxe/display/jsonfunctionsignature#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonFunctionSignature
  description: "### [`args`](#args)`:`[`Array`](../../array \"Array\")`<`[`JsonFunctionArgument`](jsonfunctionargument \"haxe.display.JsonFunctionArgument\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonFunctionSignature.html](https://api.haxe.org/haxe/display/JsonFunctionSignature.html)"
- name: display.JsonFunctionSignature.ret
  id: haxe/display/jsonfunctionsignature#ret
  summary: null
  belongs_to: display.JsonFunctionSignature
  description: '### [`ret`](#ret)`:`[`JsonType`](jsontype "haxe.display.JsonType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`'
- name: display.JsonMetadata
  id: haxe/display/jsonmetadata
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonMetadata\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`Array`](../../array \"Array\")`<`[`haxe.display.JsonMetadataEntry`](jsonmetadataentry \"haxe.display.JsonMetadataEntry\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonMetadata.html](https://api.haxe.org/haxe/display/JsonMetadata.html)"
- name: display.JsonMetadataEntry
  id: haxe/display/jsonmetadataentry
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonMetadataEntry\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`pos`](#pos)`:`[`JsonPos`](jsonpos \"haxe.display.JsonPos\")\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n### [`args`](#args)`:`[`Array`](../../array \"Array\")`<`[`JsonExpr`](jsonexpr \"haxe.display.JsonExpr\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonMetadataEntry.html](https://api.haxe.org/haxe/display/JsonMetadataEntry.html)"
- name: display.JsonMetadataEntry.args
  id: haxe/display/jsonmetadataentry#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonMetadataEntry
  description: "### [`args`](#args)`:`[`Array`](../../array \"Array\")`<`[`JsonExpr`](jsonexpr \"haxe.display.JsonExpr\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonMetadataEntry.html](https://api.haxe.org/haxe/display/JsonMetadataEntry.html)"
- name: display.JsonMetadataEntry.name
  id: haxe/display/jsonmetadataentry#name
  summary: null
  belongs_to: display.JsonMetadataEntry
  description: '### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonMetadataEntry.pos
  id: haxe/display/jsonmetadataentry#pos
  summary: null
  belongs_to: display.JsonMetadataEntry
  description: '### [`pos`](#pos)`:`[`JsonPos`](jsonpos "haxe.display.JsonPos")'
- name: display.JsonMethodKind
  id: haxe/display/jsonmethodkind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonMethodKind([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`MethDynamic`](#MethDynamic)`:`[`JsonMethodKind`](jsonmethodkind \"haxe.display.JsonMethodKind\")` = \"MethDynamic\"`\n\n### `inline``read only`[`MethInline`](#MethInline)`:`[`JsonMethodKind`](jsonmethodkind \"haxe.display.JsonMethodKind\")` = \"MethInline\"`\n\n### `inline``read only`[`MethMacro`](#MethMacro)`:`[`JsonMethodKind`](jsonmethodkind \"haxe.display.JsonMethodKind\")` = \"MethMacro\"`\n\n### `inline``read only`[`MethNormal`](#MethNormal)`:`[`JsonMethodKind`](jsonmethodkind \"haxe.display.JsonMethodKind\")` = \"MethNormal\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonMethodKind.html](https://api.haxe.org/haxe/display/JsonMethodKind.html)"
- name: display.JsonMethodKind.MethDynamic
  id: haxe/display/jsonmethodkind#MethDynamic
  summary: null
  belongs_to: display.JsonMethodKind
  description: '### `inline``read only`[`MethDynamic`](#MethDynamic)`:`[`JsonMethodKind`](jsonmethodkind "haxe.display.JsonMethodKind")` = "MethDynamic"`'
- name: display.JsonMethodKind.MethInline
  id: haxe/display/jsonmethodkind#MethInline
  summary: null
  belongs_to: display.JsonMethodKind
  description: '### `inline``read only`[`MethInline`](#MethInline)`:`[`JsonMethodKind`](jsonmethodkind "haxe.display.JsonMethodKind")` = "MethInline"`'
- name: display.JsonMethodKind.MethMacro
  id: haxe/display/jsonmethodkind#MethMacro
  summary: null
  belongs_to: display.JsonMethodKind
  description: '### `inline``read only`[`MethMacro`](#MethMacro)`:`[`JsonMethodKind`](jsonmethodkind "haxe.display.JsonMethodKind")` = "MethMacro"`'
- name: display.JsonMethodKind.MethNormal
  id: haxe/display/jsonmethodkind#MethNormal
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonMethodKind
  description: "### `inline``read only`[`MethNormal`](#MethNormal)`:`[`JsonMethodKind`](jsonmethodkind \"haxe.display.JsonMethodKind\")` = \"MethNormal\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonMethodKind.html](https://api.haxe.org/haxe/display/JsonMethodKind.html)"
- name: display.JsonModule
  id: haxe/display/jsonmodule
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonModule\n\npackage [haxe.display](index)\n\nimport [haxe.display.Server](server)\n\n*Available on all platforms*\n\n## Fields\n\n### `final``read only`[`types`](#types)`:`[`Array`](../../array \"Array\")`<`[`JsonTypePath`](jsontypepath \"haxe.display.JsonTypePath\")`>`\n\n### `final``read only`[`sign`](#sign)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `final``read only`[`path`](#path)`:`[`JsonModulePath`](jsonmodulepath \"haxe.display.JsonModulePath\")\n\n### `final``read only`[`id`](#id)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `final``read only`[`file`](#file)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `final``read only`[`dependencies`](#dependencies)`:`[`Array`](../../array \"Array\")`<`[`ModuleId`](moduleid \"haxe.display.ModuleId\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonModule.html](https://api.haxe.org/haxe/display/JsonModule.html)"
- name: display.JsonModule.dependencies
  id: haxe/display/jsonmodule#dependencies
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonModule
  description: "### `final``read only`[`dependencies`](#dependencies)`:`[`Array`](../../array \"Array\")`<`[`ModuleId`](moduleid \"haxe.display.ModuleId\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonModule.html](https://api.haxe.org/haxe/display/JsonModule.html)"
- name: display.JsonModule.file
  id: haxe/display/jsonmodule#file
  summary: null
  belongs_to: display.JsonModule
  description: '### `final``read only`[`file`](#file)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonModule.id
  id: haxe/display/jsonmodule#id
  summary: null
  belongs_to: display.JsonModule
  description: '### `final``read only`[`id`](#id)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: display.JsonModule.path
  id: haxe/display/jsonmodule#path
  summary: null
  belongs_to: display.JsonModule
  description: '### `final``read only`[`path`](#path)`:`[`JsonModulePath`](jsonmodulepath "haxe.display.JsonModulePath")'
- name: display.JsonModule.sign
  id: haxe/display/jsonmodule#sign
  summary: null
  belongs_to: display.JsonModule
  description: '### `final``read only`[`sign`](#sign)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonModule.types
  id: haxe/display/jsonmodule#types
  summary: null
  belongs_to: display.JsonModule
  description: '### `final``read only`[`types`](#types)`:`[`Array`](../../array "Array")`<`[`JsonTypePath`](jsontypepath "haxe.display.JsonTypePath")`>`'
- name: display.JsonModulePath
  id: haxe/display/jsonmodulepath
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonModulePath\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`pack`](#pack)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### [`moduleName`](#moduleName)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `optional`[`importStatus`](#importStatus)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ImportStatus`](importstatus \"haxe.display.ImportStatus\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonModulePath.html](https://api.haxe.org/haxe/display/JsonModulePath.html)"
- name: display.JsonModulePath.importStatus
  id: haxe/display/jsonmodulepath#importStatus
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonModulePath
  description: "### `optional`[`importStatus`](#importStatus)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ImportStatus`](importstatus \"haxe.display.ImportStatus\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonModulePath.html](https://api.haxe.org/haxe/display/JsonModulePath.html)"
- name: display.JsonModulePath.moduleName
  id: haxe/display/jsonmodulepath#moduleName
  summary: null
  belongs_to: display.JsonModulePath
  description: '### [`moduleName`](#moduleName)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonModulePath.pack
  id: haxe/display/jsonmodulepath#pack
  summary: null
  belongs_to: display.JsonModulePath
  description: '### [`pack`](#pack)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: display.JsonModuleType
  id: haxe/display/jsonmoduletype
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonModuleType\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`pos`](#pos)`:`[`JsonPos`](jsonpos \"haxe.display.JsonPos\")\n\n### [`params`](#params)`:`[`JsonTypeParameters`](jsontypeparameters \"haxe.display.JsonTypeParameters\")\n\n### [`pack`](#pack)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n### [`moduleName`](#moduleName)`:`[`String`](../../string \"String - The basic String class.\")\n\n### [`meta`](#meta)`:`[`JsonMetadata`](jsonmetadata \"haxe.display.JsonMetadata\")\n\n### [`kind`](#kind)`:`[`JsonModuleTypeKind`](jsonmoduletypekind \"haxe.display.JsonModuleTypeKind\")`<``T``>`\n\n### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`doc`](#doc)`:`[`JsonDoc`](jsondoc \"haxe.display.JsonDoc\")\n\n### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonModuleType.html](https://api.haxe.org/haxe/display/JsonModuleType.html)"
- name: display.JsonModuleType.args
  id: haxe/display/jsonmoduletype#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonModuleType
  description: "### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonModuleType.html](https://api.haxe.org/haxe/display/JsonModuleType.html)"
- name: display.JsonModuleType.doc
  id: haxe/display/jsonmoduletype#doc
  summary: null
  belongs_to: display.JsonModuleType
  description: '### [`doc`](#doc)`:`[`JsonDoc`](jsondoc "haxe.display.JsonDoc")'
- name: display.JsonModuleType.isPrivate
  id: haxe/display/jsonmoduletype#isPrivate
  summary: null
  belongs_to: display.JsonModuleType
  description: '### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.JsonModuleType.kind
  id: haxe/display/jsonmoduletype#kind
  summary: null
  belongs_to: display.JsonModuleType
  description: '### [`kind`](#kind)`:`[`JsonModuleTypeKind`](jsonmoduletypekind "haxe.display.JsonModuleTypeKind")`<``T``>`'
- name: display.JsonModuleType.meta
  id: haxe/display/jsonmoduletype#meta
  summary: null
  belongs_to: display.JsonModuleType
  description: '### [`meta`](#meta)`:`[`JsonMetadata`](jsonmetadata "haxe.display.JsonMetadata")'
- name: display.JsonModuleType.moduleName
  id: haxe/display/jsonmoduletype#moduleName
  summary: null
  belongs_to: display.JsonModuleType
  description: '### [`moduleName`](#moduleName)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonModuleType.name
  id: haxe/display/jsonmoduletype#name
  summary: null
  belongs_to: display.JsonModuleType
  description: '### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonModuleType.pack
  id: haxe/display/jsonmoduletype#pack
  summary: null
  belongs_to: display.JsonModuleType
  description: '### [`pack`](#pack)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: display.JsonModuleType.params
  id: haxe/display/jsonmoduletype#params
  summary: null
  belongs_to: display.JsonModuleType
  description: '### [`params`](#params)`:`[`JsonTypeParameters`](jsontypeparameters "haxe.display.JsonTypeParameters")'
- name: display.JsonModuleType.pos
  id: haxe/display/jsonmoduletype#pos
  summary: null
  belongs_to: display.JsonModuleType
  description: '### [`pos`](#pos)`:`[`JsonPos`](jsonpos "haxe.display.JsonPos")'
- name: display.JsonModuleTypeKind
  id: haxe/display/jsonmoduletypekind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonModuleTypeKind\\<T\\>([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Abstract`](#Abstract)`:`[`JsonModuleTypeKind`](jsonmoduletypekind \"haxe.display.JsonModuleTypeKind\")`<`[`JsonAbstract`](jsonabstract \"haxe.display.JsonAbstract\")`>`` = \"abstract\"`\n\n### `inline``read only`[`Class`](#Class)`:`[`JsonModuleTypeKind`](jsonmoduletypekind \"haxe.display.JsonModuleTypeKind\")`<`[`JsonClass`](jsonclass \"haxe.display.JsonClass\")`>`` = \"class\"`\n\n### `inline``read only`[`Enum`](#Enum)`:`[`JsonModuleTypeKind`](jsonmoduletypekind \"haxe.display.JsonModuleTypeKind\")`<`[`JsonEnum`](jsonenum \"haxe.display.JsonEnum\")`>`` = \"enum\"`\n\n### `inline``read only`[`Typedef`](#Typedef)`:`[`JsonModuleTypeKind`](jsonmoduletypekind \"haxe.display.JsonModuleTypeKind\")`<`[`JsonTypedef`](jsontypedef \"haxe.display.JsonTypedef\")`>`` = \"typedef\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonModuleTypeKind.html](https://api.haxe.org/haxe/display/JsonModuleTypeKind.html)"
- name: display.JsonModuleTypeKind.Abstract
  id: haxe/display/jsonmoduletypekind#Abstract
  summary: null
  belongs_to: display.JsonModuleTypeKind
  description: '### `inline``read only`[`Abstract`](#Abstract)`:`[`JsonModuleTypeKind`](jsonmoduletypekind "haxe.display.JsonModuleTypeKind")`<`[`JsonAbstract`](jsonabstract "haxe.display.JsonAbstract")`>`` = "abstract"`'
- name: display.JsonModuleTypeKind.Class
  id: haxe/display/jsonmoduletypekind#Class
  summary: null
  belongs_to: display.JsonModuleTypeKind
  description: '### `inline``read only`[`Class`](#Class)`:`[`JsonModuleTypeKind`](jsonmoduletypekind "haxe.display.JsonModuleTypeKind")`<`[`JsonClass`](jsonclass "haxe.display.JsonClass")`>`` = "class"`'
- name: display.JsonModuleTypeKind.Enum
  id: haxe/display/jsonmoduletypekind#Enum
  summary: null
  belongs_to: display.JsonModuleTypeKind
  description: '### `inline``read only`[`Enum`](#Enum)`:`[`JsonModuleTypeKind`](jsonmoduletypekind "haxe.display.JsonModuleTypeKind")`<`[`JsonEnum`](jsonenum "haxe.display.JsonEnum")`>`` = "enum"`'
- name: display.JsonModuleTypeKind.Typedef
  id: haxe/display/jsonmoduletypekind#Typedef
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonModuleTypeKind
  description: "### `inline``read only`[`Typedef`](#Typedef)`:`[`JsonModuleTypeKind`](jsonmoduletypekind \"haxe.display.JsonModuleTypeKind\")`<`[`JsonTypedef`](jsontypedef \"haxe.display.JsonTypedef\")`>`` = \"typedef\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonModuleTypeKind.html](https://api.haxe.org/haxe/display/JsonModuleTypeKind.html)"
- name: display.JsonModuleTypes
  id: haxe/display/jsonmoduletypes
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonModuleTypes\n\npackage [haxe.display](index)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`Array`](../../array \"Array\")`<`[`haxe.display.JsonModuleType`](jsonmoduletype \"haxe.display.JsonModuleType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonModuleTypes.html](https://api.haxe.org/haxe/display/JsonModuleTypes.html)"
- name: display.JsonPackagePath
  id: haxe/display/jsonpackagepath
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonPackagePath\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`pack`](#pack)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonPackagePath.html](https://api.haxe.org/haxe/display/JsonPackagePath.html)"
- name: display.JsonPackagePath.pack
  id: haxe/display/jsonpackagepath#pack
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonPackagePath
  description: "### [`pack`](#pack)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonPackagePath.html](https://api.haxe.org/haxe/display/JsonPackagePath.html)"
- name: display.JsonPos
  id: haxe/display/jsonpos
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonPos\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`min`](#min)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### [`max`](#max)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### [`file`](#file)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonPos.html](https://api.haxe.org/haxe/display/JsonPos.html)"
- name: display.JsonPos.file
  id: haxe/display/jsonpos#file
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonPos
  description: "### [`file`](#file)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonPos.html](https://api.haxe.org/haxe/display/JsonPos.html)"
- name: display.JsonPos.max
  id: haxe/display/jsonpos#max
  summary: null
  belongs_to: display.JsonPos
  description: '### [`max`](#max)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: display.JsonPos.min
  id: haxe/display/jsonpos#min
  summary: null
  belongs_to: display.JsonPos
  description: '### [`min`](#min)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: display.JsonServerFile
  id: haxe/display/jsonserverfile
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonServerFile\n\npackage [haxe.display](index)\n\nimport [haxe.display.Server](server)\n\n*Available on all platforms*\n\n## Fields\n\n### `final``read only`[`time`](#time)`:`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n### `final``read only`[`pack`](#pack)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `final``read only`[`moduleName`](#moduleName)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### `final``read only`[`file`](#file)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonServerFile.html](https://api.haxe.org/haxe/display/JsonServerFile.html)"
- name: display.JsonServerFile.file
  id: haxe/display/jsonserverfile#file
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonServerFile
  description: "### `final``read only`[`file`](#file)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonServerFile.html](https://api.haxe.org/haxe/display/JsonServerFile.html)"
- name: display.JsonServerFile.moduleName
  id: haxe/display/jsonserverfile#moduleName
  summary: null
  belongs_to: display.JsonServerFile
  description: '### `final``read only`[`moduleName`](#moduleName)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: display.JsonServerFile.pack
  id: haxe/display/jsonserverfile#pack
  summary: null
  belongs_to: display.JsonServerFile
  description: '### `final``read only`[`pack`](#pack)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonServerFile.time
  id: haxe/display/jsonserverfile#time
  summary: null
  belongs_to: display.JsonServerFile
  description: '### `final``read only`[`time`](#time)`:`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")'
- name: display.JsonStaticFieldPath
  id: haxe/display/jsonstaticfieldpath
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonStaticFieldPath\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`typeName`](#typeName)`:`[`String`](../../string \"String - The basic String class.\")\n\n### [`pack`](#pack)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### [`moduleName`](#moduleName)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `optional`[`importStatus`](#importStatus)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ImportStatus`](importstatus \"haxe.display.ImportStatus\")`>`\n\n### [`fieldName`](#fieldName)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonStaticFieldPath.html](https://api.haxe.org/haxe/display/JsonStaticFieldPath.html)"
- name: display.JsonStaticFieldPath.fieldName
  id: haxe/display/jsonstaticfieldpath#fieldName
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonStaticFieldPath
  description: "### [`fieldName`](#fieldName)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonStaticFieldPath.html](https://api.haxe.org/haxe/display/JsonStaticFieldPath.html)"
- name: display.JsonStaticFieldPath.importStatus
  id: haxe/display/jsonstaticfieldpath#importStatus
  summary: null
  belongs_to: display.JsonStaticFieldPath
  description: '### `optional`[`importStatus`](#importStatus)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ImportStatus`](importstatus "haxe.display.ImportStatus")`>`'
- name: display.JsonStaticFieldPath.moduleName
  id: haxe/display/jsonstaticfieldpath#moduleName
  summary: null
  belongs_to: display.JsonStaticFieldPath
  description: '### [`moduleName`](#moduleName)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonStaticFieldPath.pack
  id: haxe/display/jsonstaticfieldpath#pack
  summary: null
  belongs_to: display.JsonStaticFieldPath
  description: '### [`pack`](#pack)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: display.JsonStaticFieldPath.typeName
  id: haxe/display/jsonstaticfieldpath#typeName
  summary: null
  belongs_to: display.JsonStaticFieldPath
  description: '### [`typeName`](#typeName)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonTConstant
  id: haxe/display/jsontconstant
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonTConstant\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`kind`](#kind)`:`[`JsonTConstantKind`](jsontconstantkind \"haxe.display.JsonTConstantKind\")`<``T``>`\n\n### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTConstant.html](https://api.haxe.org/haxe/display/JsonTConstant.html)"
- name: display.JsonTConstant.args
  id: haxe/display/jsontconstant#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonTConstant
  description: "### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTConstant.html](https://api.haxe.org/haxe/display/JsonTConstant.html)"
- name: display.JsonTConstant.kind
  id: haxe/display/jsontconstant#kind
  summary: null
  belongs_to: display.JsonTConstant
  description: '### [`kind`](#kind)`:`[`JsonTConstantKind`](jsontconstantkind "haxe.display.JsonTConstantKind")`<``T``>`'
- name: display.JsonTConstantKind
  id: haxe/display/jsontconstantkind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonTConstantKind\\<T\\>([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`TBool`](#TBool)`:`[`JsonTConstantKind`](jsontconstantkind \"haxe.display.JsonTConstantKind\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`` = \"TBool\"`\n\n### `inline``read only`[`TFloat`](#TFloat)`:`[`JsonTConstantKind`](jsontconstantkind \"haxe.display.JsonTConstantKind\")`<`[`String`](../../string \"String - The basic String class.\")`>`` = \"TFloat\"`\n\n### `inline``read only`[`TInt`](#TInt)`:`[`JsonTConstantKind`](jsontconstantkind \"haxe.display.JsonTConstantKind\")`<`[`String`](../../string \"String - The basic String class.\")`>`` = \"TInt\"`\n\n### `inline``read only`[`TNull`](#TNull)`:`[`JsonTConstantKind`](jsontconstantkind \"haxe.display.JsonTConstantKind\")`<``T``>`` = \"TNull\"`\n\n### `inline``read only`[`TString`](#TString)`:`[`JsonTConstantKind`](jsontconstantkind \"haxe.display.JsonTConstantKind\")`<`[`String`](../../string \"String - The basic String class.\")`>`` = \"TString\"`\n\n### `inline``read only`[`TSuper`](#TSuper)`:`[`JsonTConstantKind`](jsontconstantkind \"haxe.display.JsonTConstantKind\")`<``T``>`` = \"TSuper\"`\n\n### `inline``read only`[`TThis`](#TThis)`:`[`JsonTConstantKind`](jsontconstantkind \"haxe.display.JsonTConstantKind\")`<``T``>`` = \"TThis\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTConstantKind.html](https://api.haxe.org/haxe/display/JsonTConstantKind.html)"
- name: display.JsonTConstantKind.TBool
  id: haxe/display/jsontconstantkind#TBool
  summary: null
  belongs_to: display.JsonTConstantKind
  description: '### `inline``read only`[`TBool`](#TBool)`:`[`JsonTConstantKind`](jsontconstantkind "haxe.display.JsonTConstantKind")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`` = "TBool"`'
- name: display.JsonTConstantKind.TFloat
  id: haxe/display/jsontconstantkind#TFloat
  summary: null
  belongs_to: display.JsonTConstantKind
  description: '### `inline``read only`[`TFloat`](#TFloat)`:`[`JsonTConstantKind`](jsontconstantkind "haxe.display.JsonTConstantKind")`<`[`String`](../../string "String - The basic String class.")`>`` = "TFloat"`'
- name: display.JsonTConstantKind.TInt
  id: haxe/display/jsontconstantkind#TInt
  summary: null
  belongs_to: display.JsonTConstantKind
  description: '### `inline``read only`[`TInt`](#TInt)`:`[`JsonTConstantKind`](jsontconstantkind "haxe.display.JsonTConstantKind")`<`[`String`](../../string "String - The basic String class.")`>`` = "TInt"`'
- name: display.JsonTConstantKind.TNull
  id: haxe/display/jsontconstantkind#TNull
  summary: null
  belongs_to: display.JsonTConstantKind
  description: '### `inline``read only`[`TNull`](#TNull)`:`[`JsonTConstantKind`](jsontconstantkind "haxe.display.JsonTConstantKind")`<``T``>`` = "TNull"`'
- name: display.JsonTConstantKind.TString
  id: haxe/display/jsontconstantkind#TString
  summary: null
  belongs_to: display.JsonTConstantKind
  description: '### `inline``read only`[`TString`](#TString)`:`[`JsonTConstantKind`](jsontconstantkind "haxe.display.JsonTConstantKind")`<`[`String`](../../string "String - The basic String class.")`>`` = "TString"`'
- name: display.JsonTConstantKind.TSuper
  id: haxe/display/jsontconstantkind#TSuper
  summary: null
  belongs_to: display.JsonTConstantKind
  description: '### `inline``read only`[`TSuper`](#TSuper)`:`[`JsonTConstantKind`](jsontconstantkind "haxe.display.JsonTConstantKind")`<``T``>`` = "TSuper"`'
- name: display.JsonTConstantKind.TThis
  id: haxe/display/jsontconstantkind#TThis
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonTConstantKind
  description: "### `inline``read only`[`TThis`](#TThis)`:`[`JsonTConstantKind`](jsontconstantkind \"haxe.display.JsonTConstantKind\")`<``T``>`` = \"TThis\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTConstantKind.html](https://api.haxe.org/haxe/display/JsonTConstantKind.html)"
- name: display.JsonTExpr
  id: haxe/display/jsontexpr
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonTExpr\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`haxe.display.JsonTodo`](jsontodo \"haxe.display.JsonTodo\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTExpr.html](https://api.haxe.org/haxe/display/JsonTExpr.html)"
- name: display.JsonTodo
  id: haxe/display/jsontodo
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonTodo\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTodo.html](https://api.haxe.org/haxe/display/JsonTodo.html)"
- name: display.JsonType
  id: haxe/display/jsontype
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonType\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`kind`](#kind)`:`[`JsonTypeKind`](jsontypekind \"haxe.display.JsonTypeKind\")`<``T``>`\n\n### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonType.html](https://api.haxe.org/haxe/display/JsonType.html)"
- name: display.JsonType.args
  id: haxe/display/jsontype#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonType
  description: "### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonType.html](https://api.haxe.org/haxe/display/JsonType.html)"
- name: display.JsonType.kind
  id: haxe/display/jsontype#kind
  summary: null
  belongs_to: display.JsonType
  description: '### [`kind`](#kind)`:`[`JsonTypeKind`](jsontypekind "haxe.display.JsonTypeKind")`<``T``>`'
- name: display.JsonTypedef
  id: haxe/display/jsontypedef
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonTypedef\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`type`](#type)`:`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTypedef.html](https://api.haxe.org/haxe/display/JsonTypedef.html)"
- name: display.JsonTypedef.type
  id: haxe/display/jsontypedef#type
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonTypedef
  description: "### [`type`](#type)`:`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTypedef.html](https://api.haxe.org/haxe/display/JsonTypedef.html)"
- name: display.JsonTypeKind
  id: haxe/display/jsontypekind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonTypeKind\\<T\\>([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`TAbstract`](#TAbstract)`:`[`JsonTypeKind`](jsontypekind \"haxe.display.JsonTypeKind\")`<`[`JsonTypePathWithParams`](jsontypepathwithparams \"haxe.display.JsonTypePathWithParams\")`>`` = \"TAbstract\"`\n\n### `inline``read only`[`TAnonymous`](#TAnonymous)`:`[`JsonTypeKind`](jsontypekind \"haxe.display.JsonTypeKind\")`<`[`JsonAnon`](jsonanon \"haxe.display.JsonAnon\")`>`` = \"TAnonymous\"`\n\n### `inline``read only`[`TDynamic`](#TDynamic)`:`[`JsonTypeKind`](jsontypekind \"haxe.display.JsonTypeKind\")`<`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>>`` = \"TDynamic\"`\n\n### `inline``read only`[`TEnum`](#TEnum)`:`[`JsonTypeKind`](jsontypekind \"haxe.display.JsonTypeKind\")`<`[`JsonTypePathWithParams`](jsontypepathwithparams \"haxe.display.JsonTypePathWithParams\")`>`` = \"TEnum\"`\n\n### `inline``read only`[`TFun`](#TFun)`:`[`JsonTypeKind`](jsontypekind \"haxe.display.JsonTypeKind\")`<`[`JsonFunctionSignature`](jsonfunctionsignature \"haxe.display.JsonFunctionSignature\")`>`` = \"TFun\"`\n\n### `inline``read only`[`TInst`](#TInst)`:`[`JsonTypeKind`](jsontypekind \"haxe.display.JsonTypeKind\")`<`[`JsonTypePathWithParams`](jsontypepathwithparams \"haxe.display.JsonTypePathWithParams\")`>`` = \"TInst\"`\n\n### `inline``read only`[`TMono`](#TMono)`:`[`JsonTypeKind`](jsontypekind \"haxe.display.JsonTypeKind\")`<``T``>`` = \"TMono\"`\n\n### `inline``read only`[`TType`](#TType)`:`[`JsonTypeKind`](jsontypekind \"haxe.display.JsonTypeKind\")`<`[`JsonTypePathWithParams`](jsontypepathwithparams \"haxe.display.JsonTypePathWithParams\")`>`` = \"TType\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTypeKind.html](https://api.haxe.org/haxe/display/JsonTypeKind.html)"
- name: display.JsonTypeKind.TAbstract
  id: haxe/display/jsontypekind#TAbstract
  summary: null
  belongs_to: display.JsonTypeKind
  description: '### `inline``read only`[`TAbstract`](#TAbstract)`:`[`JsonTypeKind`](jsontypekind "haxe.display.JsonTypeKind")`<`[`JsonTypePathWithParams`](jsontypepathwithparams "haxe.display.JsonTypePathWithParams")`>`` = "TAbstract"`'
- name: display.JsonTypeKind.TAnonymous
  id: haxe/display/jsontypekind#TAnonymous
  summary: null
  belongs_to: display.JsonTypeKind
  description: '### `inline``read only`[`TAnonymous`](#TAnonymous)`:`[`JsonTypeKind`](jsontypekind "haxe.display.JsonTypeKind")`<`[`JsonAnon`](jsonanon "haxe.display.JsonAnon")`>`` = "TAnonymous"`'
- name: display.JsonTypeKind.TDynamic
  id: haxe/display/jsontypekind#TDynamic
  summary: null
  belongs_to: display.JsonTypeKind
  description: '### `inline``read only`[`TDynamic`](#TDynamic)`:`[`JsonTypeKind`](jsontypekind "haxe.display.JsonTypeKind")`<`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonType`](jsontype "haxe.display.JsonType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>>`` = "TDynamic"`'
- name: display.JsonTypeKind.TEnum
  id: haxe/display/jsontypekind#TEnum
  summary: null
  belongs_to: display.JsonTypeKind
  description: '### `inline``read only`[`TEnum`](#TEnum)`:`[`JsonTypeKind`](jsontypekind "haxe.display.JsonTypeKind")`<`[`JsonTypePathWithParams`](jsontypepathwithparams "haxe.display.JsonTypePathWithParams")`>`` = "TEnum"`'
- name: display.JsonTypeKind.TFun
  id: haxe/display/jsontypekind#TFun
  summary: null
  belongs_to: display.JsonTypeKind
  description: '### `inline``read only`[`TFun`](#TFun)`:`[`JsonTypeKind`](jsontypekind "haxe.display.JsonTypeKind")`<`[`JsonFunctionSignature`](jsonfunctionsignature "haxe.display.JsonFunctionSignature")`>`` = "TFun"`'
- name: display.JsonTypeKind.TInst
  id: haxe/display/jsontypekind#TInst
  summary: null
  belongs_to: display.JsonTypeKind
  description: '### `inline``read only`[`TInst`](#TInst)`:`[`JsonTypeKind`](jsontypekind "haxe.display.JsonTypeKind")`<`[`JsonTypePathWithParams`](jsontypepathwithparams "haxe.display.JsonTypePathWithParams")`>`` = "TInst"`'
- name: display.JsonTypeKind.TMono
  id: haxe/display/jsontypekind#TMono
  summary: null
  belongs_to: display.JsonTypeKind
  description: '### `inline``read only`[`TMono`](#TMono)`:`[`JsonTypeKind`](jsontypekind "haxe.display.JsonTypeKind")`<``T``>`` = "TMono"`'
- name: display.JsonTypeKind.TType
  id: haxe/display/jsontypekind#TType
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonTypeKind
  description: "### `inline``read only`[`TType`](#TType)`:`[`JsonTypeKind`](jsontypekind \"haxe.display.JsonTypeKind\")`<`[`JsonTypePathWithParams`](jsontypepathwithparams \"haxe.display.JsonTypePathWithParams\")`>`` = \"TType\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTypeKind.html](https://api.haxe.org/haxe/display/JsonTypeKind.html)"
- name: display.JsonTypeParameter
  id: haxe/display/jsontypeparameter
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonTypeParameter\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n### [`constraints`](#constraints)`:`[`JsonTypes`](jsontypes \"haxe.display.JsonTypes\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTypeParameter.html](https://api.haxe.org/haxe/display/JsonTypeParameter.html)"
- name: display.JsonTypeParameter.constraints
  id: haxe/display/jsontypeparameter#constraints
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonTypeParameter
  description: "### [`constraints`](#constraints)`:`[`JsonTypes`](jsontypes \"haxe.display.JsonTypes\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTypeParameter.html](https://api.haxe.org/haxe/display/JsonTypeParameter.html)"
- name: display.JsonTypeParameter.name
  id: haxe/display/jsontypeparameter#name
  summary: null
  belongs_to: display.JsonTypeParameter
  description: '### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonTypeParameters
  id: haxe/display/jsontypeparameters
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonTypeParameters\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`Array`](../../array \"Array\")`<`[`haxe.display.JsonTypeParameter`](jsontypeparameter \"haxe.display.JsonTypeParameter\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTypeParameters.html](https://api.haxe.org/haxe/display/JsonTypeParameters.html)"
- name: display.JsonTypePath
  id: haxe/display/jsontypepath
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonTypePath\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`typeName`](#typeName)`:`[`String`](../../string \"String - The basic String class.\")\n\n### [`pack`](#pack)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### [`moduleName`](#moduleName)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `optional`[`importStatus`](#importStatus)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ImportStatus`](importstatus \"haxe.display.ImportStatus\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTypePath.html](https://api.haxe.org/haxe/display/JsonTypePath.html)"
- name: display.JsonTypePath.importStatus
  id: haxe/display/jsontypepath#importStatus
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonTypePath
  description: "### `optional`[`importStatus`](#importStatus)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ImportStatus`](importstatus \"haxe.display.ImportStatus\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTypePath.html](https://api.haxe.org/haxe/display/JsonTypePath.html)"
- name: display.JsonTypePath.moduleName
  id: haxe/display/jsontypepath#moduleName
  summary: null
  belongs_to: display.JsonTypePath
  description: '### [`moduleName`](#moduleName)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonTypePath.pack
  id: haxe/display/jsontypepath#pack
  summary: null
  belongs_to: display.JsonTypePath
  description: '### [`pack`](#pack)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: display.JsonTypePath.typeName
  id: haxe/display/jsontypepath#typeName
  summary: null
  belongs_to: display.JsonTypePath
  description: '### [`typeName`](#typeName)`:`[`String`](../../string "String - The basic String class.")'
- name: display.JsonTypePathWithParams
  id: haxe/display/jsontypepathwithparams
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonTypePathWithParams\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`path`](#path)`:`[`JsonTypePath`](jsontypepath \"haxe.display.JsonTypePath\")\n\n### [`params`](#params)`:`[`JsonTypes`](jsontypes \"haxe.display.JsonTypes\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTypePathWithParams.html](https://api.haxe.org/haxe/display/JsonTypePathWithParams.html)"
- name: display.JsonTypePathWithParams.params
  id: haxe/display/jsontypepathwithparams#params
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonTypePathWithParams
  description: "### [`params`](#params)`:`[`JsonTypes`](jsontypes \"haxe.display.JsonTypes\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTypePathWithParams.html](https://api.haxe.org/haxe/display/JsonTypePathWithParams.html)"
- name: display.JsonTypePathWithParams.path
  id: haxe/display/jsontypepathwithparams#path
  summary: null
  belongs_to: display.JsonTypePathWithParams
  description: '### [`path`](#path)`:`[`JsonTypePath`](jsontypepath "haxe.display.JsonTypePath")'
- name: display.JsonTypes
  id: haxe/display/jsontypes
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonTypes\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`Array`](../../array \"Array\")`<`[`haxe.display.JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonTypes.html](https://api.haxe.org/haxe/display/JsonTypes.html)"
- name: display.JsonUnop
  id: haxe/display/jsonunop
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonUnop([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`OpDecrement`](#OpDecrement)`:`[`JsonUnop`](jsonunop \"haxe.display.JsonUnop\")` = \"OpDecrement\"`\n\n### `inline``read only`[`OpIncrement`](#OpIncrement)`:`[`JsonUnop`](jsonunop \"haxe.display.JsonUnop\")` = \"OpIncrement\"`\n\n### `inline``read only`[`OpNeg`](#OpNeg)`:`[`JsonUnop`](jsonunop \"haxe.display.JsonUnop\")` = \"OpNeg\"`\n\n### `inline``read only`[`OpNegBits`](#OpNegBits)`:`[`JsonUnop`](jsonunop \"haxe.display.JsonUnop\")` = \"OpNegBits\"`\n\n### `inline``read only`[`OpNot`](#OpNot)`:`[`JsonUnop`](jsonunop \"haxe.display.JsonUnop\")` = \"OpNot\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonUnop.html](https://api.haxe.org/haxe/display/JsonUnop.html)"
- name: display.JsonUnop.OpDecrement
  id: haxe/display/jsonunop#OpDecrement
  summary: null
  belongs_to: display.JsonUnop
  description: '### `inline``read only`[`OpDecrement`](#OpDecrement)`:`[`JsonUnop`](jsonunop "haxe.display.JsonUnop")` = "OpDecrement"`'
- name: display.JsonUnop.OpIncrement
  id: haxe/display/jsonunop#OpIncrement
  summary: null
  belongs_to: display.JsonUnop
  description: '### `inline``read only`[`OpIncrement`](#OpIncrement)`:`[`JsonUnop`](jsonunop "haxe.display.JsonUnop")` = "OpIncrement"`'
- name: display.JsonUnop.OpNeg
  id: haxe/display/jsonunop#OpNeg
  summary: null
  belongs_to: display.JsonUnop
  description: '### `inline``read only`[`OpNeg`](#OpNeg)`:`[`JsonUnop`](jsonunop "haxe.display.JsonUnop")` = "OpNeg"`'
- name: display.JsonUnop.OpNegBits
  id: haxe/display/jsonunop#OpNegBits
  summary: null
  belongs_to: display.JsonUnop
  description: '### `inline``read only`[`OpNegBits`](#OpNegBits)`:`[`JsonUnop`](jsonunop "haxe.display.JsonUnop")` = "OpNegBits"`'
- name: display.JsonUnop.OpNot
  id: haxe/display/jsonunop#OpNot
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonUnop
  description: "### `inline``read only`[`OpNot`](#OpNot)`:`[`JsonUnop`](jsonunop \"haxe.display.JsonUnop\")` = \"OpNot\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonUnop.html](https://api.haxe.org/haxe/display/JsonUnop.html)"
- name: display.JsonVarAccess
  id: haxe/display/jsonvaraccess
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonVarAccess\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Fields\n\n### [`kind`](#kind)`:`[`JsonVarAccessKind`](jsonvaraccesskind \"haxe.display.JsonVarAccessKind\")`<``T``>`\n\n### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonVarAccess.html](https://api.haxe.org/haxe/display/JsonVarAccess.html)"
- name: display.JsonVarAccess.args
  id: haxe/display/jsonvaraccess#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonVarAccess
  description: "### [`args`](#args)`:``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonVarAccess.html](https://api.haxe.org/haxe/display/JsonVarAccess.html)"
- name: display.JsonVarAccess.kind
  id: haxe/display/jsonvaraccess#kind
  summary: null
  belongs_to: display.JsonVarAccess
  description: '### [`kind`](#kind)`:`[`JsonVarAccessKind`](jsonvaraccesskind "haxe.display.JsonVarAccessKind")`<``T``>`'
- name: display.JsonVarAccessKind
  id: haxe/display/jsonvaraccesskind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# JsonVarAccessKind\\<T\\>([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.JsonModuleTypes](jsonmoduletypes)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`AccCall`](#AccCall)`:`[`JsonVarAccessKind`](jsonvaraccesskind \"haxe.display.JsonVarAccessKind\")`<``T``>`` = \"AccCall\"`\n\n### `inline``read only`[`AccCtor`](#AccCtor)`:`[`JsonVarAccessKind`](jsonvaraccesskind \"haxe.display.JsonVarAccessKind\")`<``T``>`` = \"AccCtor\"`\n\n### `inline``read only`[`AccInline`](#AccInline)`:`[`JsonVarAccessKind`](jsonvaraccesskind \"haxe.display.JsonVarAccessKind\")`<``T``>`` = \"AccInline\"`\n\n### `inline``read only`[`AccNever`](#AccNever)`:`[`JsonVarAccessKind`](jsonvaraccesskind \"haxe.display.JsonVarAccessKind\")`<``T``>`` = \"AccNever\"`\n\n### `inline``read only`[`AccNo`](#AccNo)`:`[`JsonVarAccessKind`](jsonvaraccesskind \"haxe.display.JsonVarAccessKind\")`<``T``>`` = \"AccNo\"`\n\n### `inline``read only`[`AccNormal`](#AccNormal)`:`[`JsonVarAccessKind`](jsonvaraccesskind \"haxe.display.JsonVarAccessKind\")`<``T``>`` = \"AccNormal\"`\n\n### `inline``read only`[`AccRequire`](#AccRequire)`:`[`JsonVarAccessKind`](jsonvaraccesskind \"haxe.display.JsonVarAccessKind\")`<{require:`[`String`](../../string \"String - The basic String class.\")`, message:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>}>`` = \"AccRequire\"`\n\n### `inline``read only`[`AccResolve`](#AccResolve)`:`[`JsonVarAccessKind`](jsonvaraccesskind \"haxe.display.JsonVarAccessKind\")`<``T``>`` = \"AccResolve\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonVarAccessKind.html](https://api.haxe.org/haxe/display/JsonVarAccessKind.html)"
- name: display.JsonVarAccessKind.AccCall
  id: haxe/display/jsonvaraccesskind#AccCall
  summary: null
  belongs_to: display.JsonVarAccessKind
  description: '### `inline``read only`[`AccCall`](#AccCall)`:`[`JsonVarAccessKind`](jsonvaraccesskind "haxe.display.JsonVarAccessKind")`<``T``>`` = "AccCall"`'
- name: display.JsonVarAccessKind.AccCtor
  id: haxe/display/jsonvaraccesskind#AccCtor
  summary: null
  belongs_to: display.JsonVarAccessKind
  description: '### `inline``read only`[`AccCtor`](#AccCtor)`:`[`JsonVarAccessKind`](jsonvaraccesskind "haxe.display.JsonVarAccessKind")`<``T``>`` = "AccCtor"`'
- name: display.JsonVarAccessKind.AccInline
  id: haxe/display/jsonvaraccesskind#AccInline
  summary: null
  belongs_to: display.JsonVarAccessKind
  description: '### `inline``read only`[`AccInline`](#AccInline)`:`[`JsonVarAccessKind`](jsonvaraccesskind "haxe.display.JsonVarAccessKind")`<``T``>`` = "AccInline"`'
- name: display.JsonVarAccessKind.AccNever
  id: haxe/display/jsonvaraccesskind#AccNever
  summary: null
  belongs_to: display.JsonVarAccessKind
  description: '### `inline``read only`[`AccNever`](#AccNever)`:`[`JsonVarAccessKind`](jsonvaraccesskind "haxe.display.JsonVarAccessKind")`<``T``>`` = "AccNever"`'
- name: display.JsonVarAccessKind.AccNo
  id: haxe/display/jsonvaraccesskind#AccNo
  summary: null
  belongs_to: display.JsonVarAccessKind
  description: '### `inline``read only`[`AccNo`](#AccNo)`:`[`JsonVarAccessKind`](jsonvaraccesskind "haxe.display.JsonVarAccessKind")`<``T``>`` = "AccNo"`'
- name: display.JsonVarAccessKind.AccNormal
  id: haxe/display/jsonvaraccesskind#AccNormal
  summary: null
  belongs_to: display.JsonVarAccessKind
  description: '### `inline``read only`[`AccNormal`](#AccNormal)`:`[`JsonVarAccessKind`](jsonvaraccesskind "haxe.display.JsonVarAccessKind")`<``T``>`` = "AccNormal"`'
- name: display.JsonVarAccessKind.AccRequire
  id: haxe/display/jsonvaraccesskind#AccRequire
  summary: null
  belongs_to: display.JsonVarAccessKind
  description: '### `inline``read only`[`AccRequire`](#AccRequire)`:`[`JsonVarAccessKind`](jsonvaraccesskind "haxe.display.JsonVarAccessKind")`<{require:`[`String`](../../string "String - The basic String class.")`, message:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>}>`` = "AccRequire"`'
- name: display.JsonVarAccessKind.AccResolve
  id: haxe/display/jsonvaraccesskind#AccResolve
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.JsonVarAccessKind
  description: "### `inline``read only`[`AccResolve`](#AccResolve)`:`[`JsonVarAccessKind`](jsonvaraccesskind \"haxe.display.JsonVarAccessKind\")`<``T``>`` = \"AccResolve\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/JsonVarAccessKind.html](https://api.haxe.org/haxe/display/JsonVarAccessKind.html)"
- name: display.Keyword
  id: haxe/display/keyword
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Keyword\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`name`](#name)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Keyword.html](https://api.haxe.org/haxe/display/Keyword.html)"
- name: display.Keyword.name
  id: haxe/display/keyword#name
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.Keyword
  description: "### [`name`](#name)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Keyword.html](https://api.haxe.org/haxe/display/Keyword.html)"
- name: display.KeywordKind
  id: haxe/display/keywordkind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# KeywordKind([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nto [String](../../string \"String - The basic String class.\")\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Abstract`](#Abstract)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"abstract\"`\n\n### `inline``read only`[`Break`](#Break)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"break\"`\n\n### `inline``read only`[`Case`](#Case)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"case\"`\n\n### `inline``read only`[`Cast`](#Cast)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"cast\"`\n\n### `inline``read only`[`Catch`](#Catch)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"catch\"`\n\n### `inline``read only`[`Class`](#Class)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"class\"`\n\n### `inline``read only`[`Continue`](#Continue)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"continue\"`\n\n### `inline``read only`[`Default`](#Default)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"default\"`\n\n### `inline``read only`[`Do`](#Do)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"do\"`\n\n### `inline``read only`[`Dynamic`](#Dynamic)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"dynamic\"`\n\n### `inline``read only`[`Else`](#Else)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"else\"`\n\n### `inline``read only`[`Enum`](#Enum)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"enum\"`\n\n### `inline``read only`[`Extends`](#Extends)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"extends\"`\n\n### `inline``read only`[`Extern`](#Extern)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"extern\"`\n\n### `inline``read only`[`Final`](#Final)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"final\"`\n\n### `inline``read only`[`For`](#For)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"for\"`\n\n### `inline``read only`[`Function`](#Function)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"function\"`\n\n### `inline``read only`[`If`](#If)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"if\"`\n\n### `inline``read only`[`Implements`](#Implements)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"implements\"`\n\n### `inline``read only`[`Import`](#Import)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"import\"`\n\n### `inline``read only`[`Inline`](#Inline)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"inline\"`\n\n### `inline``read only`[`Interface`](#Interface)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"interface\"`\n\n### `inline``read only`[`Macro`](#Macro)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"macro\"`\n\n### `inline``read only`[`New`](#New)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"new\"`\n\n### `inline``read only`[`Override`](#Override)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"override\"`\n\n### `inline``read only`[`Package`](#Package)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"package\"`\n\n### `inline``read only`[`Private`](#Private)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"private\"`\n\n### `inline``read only`[`Public`](#Public)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"public\"`\n\n### `inline``read only`[`Return`](#Return)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"return\"`\n\n### `inline``read only`[`Static`](#Static)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"static\"`\n\n### `inline``read only`[`Switch`](#Switch)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"switch\"`\n\n### `inline``read only`[`Throw`](#Throw)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"throw\"`\n\n### `inline``read only`[`Try`](#Try)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"try\"`\n\n### `inline``read only`[`Typedef`](#Typedef)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"typedef\"`\n\n### `inline``read only`[`Untyped`](#Untyped)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"untyped\"`\n\n### `inline``read only`[`Using`](#Using)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"using\"`\n\n### `inline``read only`[`Var`](#Var)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"var\"`\n\n### `inline``read only`[`While`](#While)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"while\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/KeywordKind.html](https://api.haxe.org/haxe/display/KeywordKind.html)"
- name: display.KeywordKind.Abstract
  id: haxe/display/keywordkind#Abstract
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Abstract`](#Abstract)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "abstract"`'
- name: display.KeywordKind.Break
  id: haxe/display/keywordkind#Break
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Break`](#Break)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "break"`'
- name: display.KeywordKind.Case
  id: haxe/display/keywordkind#Case
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Case`](#Case)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "case"`'
- name: display.KeywordKind.Cast
  id: haxe/display/keywordkind#Cast
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Cast`](#Cast)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "cast"`'
- name: display.KeywordKind.Catch
  id: haxe/display/keywordkind#Catch
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Catch`](#Catch)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "catch"`'
- name: display.KeywordKind.Class
  id: haxe/display/keywordkind#Class
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Class`](#Class)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "class"`'
- name: display.KeywordKind.Continue
  id: haxe/display/keywordkind#Continue
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Continue`](#Continue)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "continue"`'
- name: display.KeywordKind.Default
  id: haxe/display/keywordkind#Default
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Default`](#Default)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "default"`'
- name: display.KeywordKind.Do
  id: haxe/display/keywordkind#Do
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Do`](#Do)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "do"`'
- name: display.KeywordKind.Dynamic
  id: haxe/display/keywordkind#Dynamic
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Dynamic`](#Dynamic)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "dynamic"`'
- name: display.KeywordKind.Else
  id: haxe/display/keywordkind#Else
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Else`](#Else)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "else"`'
- name: display.KeywordKind.Enum
  id: haxe/display/keywordkind#Enum
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Enum`](#Enum)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "enum"`'
- name: display.KeywordKind.Extends
  id: haxe/display/keywordkind#Extends
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Extends`](#Extends)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "extends"`'
- name: display.KeywordKind.Extern
  id: haxe/display/keywordkind#Extern
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Extern`](#Extern)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "extern"`'
- name: display.KeywordKind.Final
  id: haxe/display/keywordkind#Final
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Final`](#Final)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "final"`'
- name: display.KeywordKind.For
  id: haxe/display/keywordkind#For
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`For`](#For)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "for"`'
- name: display.KeywordKind.Function
  id: haxe/display/keywordkind#Function
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Function`](#Function)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "function"`'
- name: display.KeywordKind.If
  id: haxe/display/keywordkind#If
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`If`](#If)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "if"`'
- name: display.KeywordKind.Implements
  id: haxe/display/keywordkind#Implements
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Implements`](#Implements)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "implements"`'
- name: display.KeywordKind.Import
  id: haxe/display/keywordkind#Import
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Import`](#Import)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "import"`'
- name: display.KeywordKind.Inline
  id: haxe/display/keywordkind#Inline
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Inline`](#Inline)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "inline"`'
- name: display.KeywordKind.Interface
  id: haxe/display/keywordkind#Interface
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Interface`](#Interface)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "interface"`'
- name: display.KeywordKind.Macro
  id: haxe/display/keywordkind#Macro
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Macro`](#Macro)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "macro"`'
- name: display.KeywordKind.New
  id: haxe/display/keywordkind#New
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`New`](#New)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "new"`'
- name: display.KeywordKind.Override
  id: haxe/display/keywordkind#Override
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Override`](#Override)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "override"`'
- name: display.KeywordKind.Package
  id: haxe/display/keywordkind#Package
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Package`](#Package)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "package"`'
- name: display.KeywordKind.Private
  id: haxe/display/keywordkind#Private
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Private`](#Private)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "private"`'
- name: display.KeywordKind.Public
  id: haxe/display/keywordkind#Public
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Public`](#Public)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "public"`'
- name: display.KeywordKind.Return
  id: haxe/display/keywordkind#Return
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Return`](#Return)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "return"`'
- name: display.KeywordKind.Static
  id: haxe/display/keywordkind#Static
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Static`](#Static)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "static"`'
- name: display.KeywordKind.Switch
  id: haxe/display/keywordkind#Switch
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Switch`](#Switch)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "switch"`'
- name: display.KeywordKind.Throw
  id: haxe/display/keywordkind#Throw
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Throw`](#Throw)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "throw"`'
- name: display.KeywordKind.Try
  id: haxe/display/keywordkind#Try
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Try`](#Try)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "try"`'
- name: display.KeywordKind.Typedef
  id: haxe/display/keywordkind#Typedef
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Typedef`](#Typedef)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "typedef"`'
- name: display.KeywordKind.Untyped
  id: haxe/display/keywordkind#Untyped
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Untyped`](#Untyped)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "untyped"`'
- name: display.KeywordKind.Using
  id: haxe/display/keywordkind#Using
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Using`](#Using)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "using"`'
- name: display.KeywordKind.Var
  id: haxe/display/keywordkind#Var
  summary: null
  belongs_to: display.KeywordKind
  description: '### `inline``read only`[`Var`](#Var)`:`[`KeywordKind`](keywordkind "haxe.display.KeywordKind")` = "var"`'
- name: display.KeywordKind.While
  id: haxe/display/keywordkind#While
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.KeywordKind
  description: "### `inline``read only`[`While`](#While)`:`[`KeywordKind`](keywordkind \"haxe.display.KeywordKind\")` = \"while\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/KeywordKind.html](https://api.haxe.org/haxe/display/KeywordKind.html)"
- name: display.Literal
  id: haxe/display/literal
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Literal([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`False`](#False)`:`[`Literal`](literal \"haxe.display.Literal\")` = \"false\"`\n\n### `inline``read only`[`Null`](#Null)`:`[`Literal`](literal \"haxe.display.Literal\")` = \"null\"`\n\n### `inline``read only`[`This`](#This)`:`[`Literal`](literal \"haxe.display.Literal\")` = \"this\"`\n\n### `inline``read only`[`Trace`](#Trace)`:`[`Literal`](literal \"haxe.display.Literal\")` = \"trace\"`\n\n### `inline``read only`[`True`](#True)`:`[`Literal`](literal \"haxe.display.Literal\")` = \"true\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Literal.html](https://api.haxe.org/haxe/display/Literal.html)"
- name: display.Literal.False
  id: haxe/display/literal#False
  summary: null
  belongs_to: display.Literal
  description: '### `inline``read only`[`False`](#False)`:`[`Literal`](literal "haxe.display.Literal")` = "false"`'
- name: display.Literal.Null
  id: haxe/display/literal#Null
  summary: null
  belongs_to: display.Literal
  description: '### `inline``read only`[`Null`](#Null)`:`[`Literal`](literal "haxe.display.Literal")` = "null"`'
- name: display.Literal.This
  id: haxe/display/literal#This
  summary: null
  belongs_to: display.Literal
  description: '### `inline``read only`[`This`](#This)`:`[`Literal`](literal "haxe.display.Literal")` = "this"`'
- name: display.Literal.Trace
  id: haxe/display/literal#Trace
  summary: null
  belongs_to: display.Literal
  description: '### `inline``read only`[`Trace`](#Trace)`:`[`Literal`](literal "haxe.display.Literal")` = "trace"`'
- name: display.Literal.True
  id: haxe/display/literal#True
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.Literal
  description: "### `inline``read only`[`True`](#True)`:`[`Literal`](literal \"haxe.display.Literal\")` = \"true\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Literal.html](https://api.haxe.org/haxe/display/Literal.html)"
- name: display.LocalOrigin
  id: haxe/display/localorigin
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# LocalOrigin([Int](../../int \"Int - The standard Int type.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Argument`](#Argument)`:`[`LocalOrigin`](localorigin \"haxe.display.LocalOrigin\")` = 1`\n\n### `inline``read only`[`CatchVariable`](#CatchVariable)`:`[`LocalOrigin`](localorigin \"haxe.display.LocalOrigin\")` = 4`\n\n### `inline``read only`[`ForVariable`](#ForVariable)`:`[`LocalOrigin`](localorigin \"haxe.display.LocalOrigin\")` = 2`\n\n### `inline``read only`[`LocalFunction`](#LocalFunction)`:`[`LocalOrigin`](localorigin \"haxe.display.LocalOrigin\")` = 5`\n\n### `inline``read only`[`LocalVariable`](#LocalVariable)`:`[`LocalOrigin`](localorigin \"haxe.display.LocalOrigin\")` = 0`\n\n### `inline``read only`[`PatternVariable`](#PatternVariable)`:`[`LocalOrigin`](localorigin \"haxe.display.LocalOrigin\")` = 3`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/LocalOrigin.html](https://api.haxe.org/haxe/display/LocalOrigin.html)"
- name: display.LocalOrigin.Argument
  id: haxe/display/localorigin#Argument
  summary: null
  belongs_to: display.LocalOrigin
  description: '### `inline``read only`[`Argument`](#Argument)`:`[`LocalOrigin`](localorigin "haxe.display.LocalOrigin")` = 1`'
- name: display.LocalOrigin.CatchVariable
  id: haxe/display/localorigin#CatchVariable
  summary: null
  belongs_to: display.LocalOrigin
  description: '### `inline``read only`[`CatchVariable`](#CatchVariable)`:`[`LocalOrigin`](localorigin "haxe.display.LocalOrigin")` = 4`'
- name: display.LocalOrigin.ForVariable
  id: haxe/display/localorigin#ForVariable
  summary: null
  belongs_to: display.LocalOrigin
  description: '### `inline``read only`[`ForVariable`](#ForVariable)`:`[`LocalOrigin`](localorigin "haxe.display.LocalOrigin")` = 2`'
- name: display.LocalOrigin.LocalFunction
  id: haxe/display/localorigin#LocalFunction
  summary: null
  belongs_to: display.LocalOrigin
  description: '### `inline``read only`[`LocalFunction`](#LocalFunction)`:`[`LocalOrigin`](localorigin "haxe.display.LocalOrigin")` = 5`'
- name: display.LocalOrigin.LocalVariable
  id: haxe/display/localorigin#LocalVariable
  summary: null
  belongs_to: display.LocalOrigin
  description: '### `inline``read only`[`LocalVariable`](#LocalVariable)`:`[`LocalOrigin`](localorigin "haxe.display.LocalOrigin")` = 0`'
- name: display.LocalOrigin.PatternVariable
  id: haxe/display/localorigin#PatternVariable
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.LocalOrigin
  description: "### `inline``read only`[`PatternVariable`](#PatternVariable)`:`[`LocalOrigin`](localorigin \"haxe.display.LocalOrigin\")` = 3`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/LocalOrigin.html](https://api.haxe.org/haxe/display/LocalOrigin.html)"
- name: display.Location
  id: haxe/display/location
  summary: Represents a location inside a resource, such as a line inside a text file
  description: "# Location\n\npackage [haxe.display](index)\n\nimport [haxe.display.Position](position)\n\n*Available on all platforms*\n\nRepresents a location inside a resource, such as a line inside a text file.\n\n## Fields\n\n### [`range`](#range)`:`[`Range`](range \"haxe.display.Range - A range in a text document expressed as (1-based) start and end positions.\")\n\n### [`file`](#file)`:`[`FsPath`](fspath \"haxe.display.FsPath\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Location.html](https://api.haxe.org/haxe/display/Location.html)"
- name: display.Location.file
  id: haxe/display/location#file
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.Location
  description: "### [`file`](#file)`:`[`FsPath`](fspath \"haxe.display.FsPath\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Location.html](https://api.haxe.org/haxe/display/Location.html)"
- name: display.Location.range
  id: haxe/display/location#range
  summary: null
  belongs_to: display.Location
  description: '### [`range`](#range)`:`[`Range`](range "haxe.display.Range - A range in a text document expressed as (1-based) start and end positions.")'
- name: display.Metadata
  id: haxe/display/metadata
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Metadata\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`targets`](#targets)`:`[`Array`](../../array \"Array\")`<`[`MetadataTarget`](metadatatarget \"haxe.display.MetadataTarget\")`>`\n\n### [`platforms`](#platforms)`:`[`Array`](../../array \"Array\")`<`[`Platform`](platform \"haxe.display.Platform\")`>`\n\n### [`parameters`](#parameters)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `optional`[`links`](#links)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>>`\n\n### [`internal`](#internal)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`doc`](#doc)`:`[`JsonDoc`](jsondoc \"haxe.display.JsonDoc\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Metadata.html](https://api.haxe.org/haxe/display/Metadata.html)"
- name: display.Metadata.doc
  id: haxe/display/metadata#doc
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.Metadata
  description: "### [`doc`](#doc)`:`[`JsonDoc`](jsondoc \"haxe.display.JsonDoc\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Metadata.html](https://api.haxe.org/haxe/display/Metadata.html)"
- name: display.Metadata.internal
  id: haxe/display/metadata#internal
  summary: null
  belongs_to: display.Metadata
  description: '### [`internal`](#internal)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.Metadata.links
  id: haxe/display/metadata#links
  summary: null
  belongs_to: display.Metadata
  description: '### `optional`[`links`](#links)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>>`'
- name: display.Metadata.name
  id: haxe/display/metadata#name
  summary: null
  belongs_to: display.Metadata
  description: '### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")'
- name: display.Metadata.parameters
  id: haxe/display/metadata#parameters
  summary: null
  belongs_to: display.Metadata
  description: '### [`parameters`](#parameters)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: display.Metadata.platforms
  id: haxe/display/metadata#platforms
  summary: null
  belongs_to: display.Metadata
  description: '### [`platforms`](#platforms)`:`[`Array`](../../array "Array")`<`[`Platform`](platform "haxe.display.Platform")`>`'
- name: display.Metadata.targets
  id: haxe/display/metadata#targets
  summary: null
  belongs_to: display.Metadata
  description: '### [`targets`](#targets)`:`[`Array`](../../array "Array")`<`[`MetadataTarget`](metadatatarget "haxe.display.MetadataTarget")`>`'
- name: display.MetadataTarget
  id: haxe/display/metadatatarget
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# MetadataTarget([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Abstract`](#Abstract)`:`[`MetadataTarget`](metadatatarget \"haxe.display.MetadataTarget\")` = \"TAbstract\"`\n\n### `inline``read only`[`AbstractField`](#AbstractField)`:`[`MetadataTarget`](metadatatarget \"haxe.display.MetadataTarget\")` = \"TAbstractField\"`\n\n### `inline``read only`[`AnyField`](#AnyField)`:`[`MetadataTarget`](metadatatarget \"haxe.display.MetadataTarget\")` = \"TAnyField\"`\n\n### `inline``read only`[`Class`](#Class)`:`[`MetadataTarget`](metadatatarget \"haxe.display.MetadataTarget\")` = \"TClass\"`\n\n### `inline``read only`[`ClassField`](#ClassField)`:`[`MetadataTarget`](metadatatarget \"haxe.display.MetadataTarget\")` = \"TClassField\"`\n\n### `inline``read only`[`Enum`](#Enum)`:`[`MetadataTarget`](metadatatarget \"haxe.display.MetadataTarget\")` = \"TEnum\"`\n\n### `inline``read only`[`Expr`](#Expr)`:`[`MetadataTarget`](metadatatarget \"haxe.display.MetadataTarget\")` = \"TExpr\"`\n\n### `inline``read only`[`TypeParameter`](#TypeParameter)`:`[`MetadataTarget`](metadatatarget \"haxe.display.MetadataTarget\")` = \"TTypeParameter\"`\n\n### `inline``read only`[`Typedef`](#Typedef)`:`[`MetadataTarget`](metadatatarget \"haxe.display.MetadataTarget\")` = \"TTypedef\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/MetadataTarget.html](https://api.haxe.org/haxe/display/MetadataTarget.html)"
- name: display.MetadataTarget.Abstract
  id: haxe/display/metadatatarget#Abstract
  summary: null
  belongs_to: display.MetadataTarget
  description: '### `inline``read only`[`Abstract`](#Abstract)`:`[`MetadataTarget`](metadatatarget "haxe.display.MetadataTarget")` = "TAbstract"`'
- name: display.MetadataTarget.AbstractField
  id: haxe/display/metadatatarget#AbstractField
  summary: null
  belongs_to: display.MetadataTarget
  description: '### `inline``read only`[`AbstractField`](#AbstractField)`:`[`MetadataTarget`](metadatatarget "haxe.display.MetadataTarget")` = "TAbstractField"`'
- name: display.MetadataTarget.AnyField
  id: haxe/display/metadatatarget#AnyField
  summary: null
  belongs_to: display.MetadataTarget
  description: '### `inline``read only`[`AnyField`](#AnyField)`:`[`MetadataTarget`](metadatatarget "haxe.display.MetadataTarget")` = "TAnyField"`'
- name: display.MetadataTarget.Class
  id: haxe/display/metadatatarget#Class
  summary: null
  belongs_to: display.MetadataTarget
  description: '### `inline``read only`[`Class`](#Class)`:`[`MetadataTarget`](metadatatarget "haxe.display.MetadataTarget")` = "TClass"`'
- name: display.MetadataTarget.ClassField
  id: haxe/display/metadatatarget#ClassField
  summary: null
  belongs_to: display.MetadataTarget
  description: '### `inline``read only`[`ClassField`](#ClassField)`:`[`MetadataTarget`](metadatatarget "haxe.display.MetadataTarget")` = "TClassField"`'
- name: display.MetadataTarget.Enum
  id: haxe/display/metadatatarget#Enum
  summary: null
  belongs_to: display.MetadataTarget
  description: '### `inline``read only`[`Enum`](#Enum)`:`[`MetadataTarget`](metadatatarget "haxe.display.MetadataTarget")` = "TEnum"`'
- name: display.MetadataTarget.Expr
  id: haxe/display/metadatatarget#Expr
  summary: null
  belongs_to: display.MetadataTarget
  description: '### `inline``read only`[`Expr`](#Expr)`:`[`MetadataTarget`](metadatatarget "haxe.display.MetadataTarget")` = "TExpr"`'
- name: display.MetadataTarget.Typedef
  id: haxe/display/metadatatarget#Typedef
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.MetadataTarget
  description: "### `inline``read only`[`Typedef`](#Typedef)`:`[`MetadataTarget`](metadatatarget \"haxe.display.MetadataTarget\")` = \"TTypedef\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/MetadataTarget.html](https://api.haxe.org/haxe/display/MetadataTarget.html)"
- name: display.MetadataTarget.TypeParameter
  id: haxe/display/metadatatarget#TypeParameter
  summary: null
  belongs_to: display.MetadataTarget
  description: '### `inline``read only`[`TypeParameter`](#TypeParameter)`:`[`MetadataTarget`](metadatatarget "haxe.display.MetadataTarget")` = "TTypeParameter"`'
- name: display.Methods
  id: haxe/display/methods
  summary: The initialize request is sent from the client to Haxe to determine the capabilities
  description: "# Methods\n\npackage [haxe.display](index)\n\nimport [haxe.display.Protocol](protocol)\n\n*Available on all platforms*\n\n## Static variables\n\n### `static``inline``read only`[`Initialize`](#Initialize)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`InitializeParams`](initializeparams \"haxe.display.InitializeParams\")`, `[`InitializeResult`](initializeresult \"haxe.display.InitializeResult\")`>`` = new HaxeRequestMethod<InitializeParams,InitializeResult>(\"initialize\")`\n\nThe initialize request is sent from the client to Haxe to determine the capabilities.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Methods.html](https://api.haxe.org/haxe/display/Methods.html)"
- name: display.Methods.Initialize()
  id: haxe/display/methods#Initialize
  summary: The initialize request is sent from the client to Haxe to determine the capabilities
  belongs_to: display.Methods
  description: "### `static``inline``read only`[`Initialize`](#Initialize)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`InitializeParams`](initializeparams \"haxe.display.InitializeParams\")`, `[`InitializeResult`](initializeresult \"haxe.display.InitializeResult\")`>`` = new HaxeRequestMethod<InitializeParams,InitializeResult>(\"initialize\")`\n\nThe initialize request is sent from the client to Haxe to determine the capabilities.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Methods.html](https://api.haxe.org/haxe/display/Methods.html)"
- name: display.Module
  id: haxe/display/module
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Module\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`path`](#path)`:`[`JsonModulePath`](jsonmodulepath \"haxe.display.JsonModulePath\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Module.html](https://api.haxe.org/haxe/display/Module.html)"
- name: display.Module.path
  id: haxe/display/module#path
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.Module
  description: "### [`path`](#path)`:`[`JsonModulePath`](jsonmodulepath \"haxe.display.JsonModulePath\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Module.html](https://api.haxe.org/haxe/display/Module.html)"
- name: display.ModuleId
  id: haxe/display/moduleid
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ModuleId\n\npackage [haxe.display](index)\n\nimport [haxe.display.Server](server)\n\n*Available on all platforms*\n\n## Fields\n\n### `final``read only`[`sign`](#sign)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `final``read only`[`path`](#path)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ModuleId.html](https://api.haxe.org/haxe/display/ModuleId.html)"
- name: display.ModuleId.path
  id: haxe/display/moduleid#path
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.ModuleId
  description: "### `final``read only`[`path`](#path)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ModuleId.html](https://api.haxe.org/haxe/display/ModuleId.html)"
- name: display.ModuleId.sign
  id: haxe/display/moduleid#sign
  summary: null
  belongs_to: display.ModuleId
  description: '### `final``read only`[`sign`](#sign)`:`[`String`](../../string "String - The basic String class.")'
- name: display.ModuleParams
  id: haxe/display/moduleparams
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ModuleParams\n\npackage [haxe.display](index)\n\nimport [haxe.display.Server](server)\n\n*Available on all platforms*\n\n## Fields\n\n### `final``read only`[`signature`](#signature)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `final``read only`[`path`](#path)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ModuleParams.html](https://api.haxe.org/haxe/display/ModuleParams.html)"
- name: display.ModuleParams.path
  id: haxe/display/moduleparams#path
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.ModuleParams
  description: "### `final``read only`[`path`](#path)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ModuleParams.html](https://api.haxe.org/haxe/display/ModuleParams.html)"
- name: display.ModuleParams.signature
  id: haxe/display/moduleparams#signature
  summary: null
  belongs_to: display.ModuleParams
  description: '### `final``read only`[`signature`](#signature)`:`[`String`](../../string "String - The basic String class.")'
- name: display.NoData
  id: haxe/display/nodata
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# NoData\n\npackage [haxe.display](index)\n\nimport [haxe.display.Protocol](protocol)\n\n*Available on all platforms*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/NoData.html](https://api.haxe.org/haxe/display/NoData.html)"
- name: display.Package
  id: haxe/display/package
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Package\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`path`](#path)`:`[`JsonPackagePath`](jsonpackagepath \"haxe.display.JsonPackagePath\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Package.html](https://api.haxe.org/haxe/display/Package.html)"
- name: display.Package.path
  id: haxe/display/package#path
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.Package
  description: "### [`path`](#path)`:`[`JsonPackagePath`](jsonpackagepath \"haxe.display.JsonPackagePath\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Package.html](https://api.haxe.org/haxe/display/Package.html)"
- name: display.PatternCompletion
  id: haxe/display/patterncompletion
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# PatternCompletion\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`isOutermostPattern`](#isOutermostPattern)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### `optional`[`expectedTypeFollowed`](#expectedTypeFollowed)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonType`](jsontype \"haxe.display.JsonType\")`<``T``>>`\n\n### `optional`[`expectedType`](#expectedType)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonType`](jsontype \"haxe.display.JsonType\")`<``T``>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/PatternCompletion.html](https://api.haxe.org/haxe/display/PatternCompletion.html)"
- name: display.PatternCompletion.expectedType
  id: haxe/display/patterncompletion#expectedType
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.PatternCompletion
  description: "### `optional`[`expectedType`](#expectedType)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonType`](jsontype \"haxe.display.JsonType\")`<``T``>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/PatternCompletion.html](https://api.haxe.org/haxe/display/PatternCompletion.html)"
- name: display.PatternCompletion.expectedTypeFollowed
  id: haxe/display/patterncompletion#expectedTypeFollowed
  summary: null
  belongs_to: display.PatternCompletion
  description: '### `optional`[`expectedTypeFollowed`](#expectedTypeFollowed)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonType`](jsontype "haxe.display.JsonType")`<``T``>>`'
- name: display.PatternCompletion.isOutermostPattern
  id: haxe/display/patterncompletion#isOutermostPattern
  summary: null
  belongs_to: display.PatternCompletion
  description: '### [`isOutermostPattern`](#isOutermostPattern)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.Platform
  id: haxe/display/platform
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Platform([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Cpp`](#Cpp)`:`[`Platform`](platform \"haxe.display.Platform\")` = \"cpp\"`\n\n### `inline``read only`[`Cross`](#Cross)`:`[`Platform`](platform \"haxe.display.Platform\")` = \"cross\"`\n\n### `inline``read only`[`Cs`](#Cs)`:`[`Platform`](platform \"haxe.display.Platform\")` = \"cs\"`\n\n### `inline``read only`[`Eval`](#Eval)`:`[`Platform`](platform \"haxe.display.Platform\")` = \"eval\"`\n\n### `inline``read only`[`Flash`](#Flash)`:`[`Platform`](platform \"haxe.display.Platform\")` = \"flash\"`\n\n### `inline``read only`[`Hl`](#Hl)`:`[`Platform`](platform \"haxe.display.Platform\")` = \"hl\"`\n\n### `inline``read only`[`Java`](#Java)`:`[`Platform`](platform \"haxe.display.Platform\")` = \"java\"`\n\n### `inline``read only`[`Js`](#Js)`:`[`Platform`](platform \"haxe.display.Platform\")` = \"js\"`\n\n### `inline``read only`[`Lua`](#Lua)`:`[`Platform`](platform \"haxe.display.Platform\")` = \"lua\"`\n\n### `inline``read only`[`Neko`](#Neko)`:`[`Platform`](platform \"haxe.display.Platform\")` = \"neko\"`\n\n### `inline``read only`[`Php`](#Php)`:`[`Platform`](platform \"haxe.display.Platform\")` = \"php\"`\n\n### `inline``read only`[`Python`](#Python)`:`[`Platform`](platform \"haxe.display.Platform\")` = \"python\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Platform.html](https://api.haxe.org/haxe/display/Platform.html)"
- name: display.Platform.Cpp
  id: haxe/display/platform#Cpp
  summary: null
  belongs_to: display.Platform
  description: '### `inline``read only`[`Cpp`](#Cpp)`:`[`Platform`](platform "haxe.display.Platform")` = "cpp"`'
- name: display.Platform.Cross
  id: haxe/display/platform#Cross
  summary: null
  belongs_to: display.Platform
  description: '### `inline``read only`[`Cross`](#Cross)`:`[`Platform`](platform "haxe.display.Platform")` = "cross"`'
- name: display.Platform.Cs
  id: haxe/display/platform#Cs
  summary: null
  belongs_to: display.Platform
  description: '### `inline``read only`[`Cs`](#Cs)`:`[`Platform`](platform "haxe.display.Platform")` = "cs"`'
- name: display.Platform.Eval
  id: haxe/display/platform#Eval
  summary: null
  belongs_to: display.Platform
  description: '### `inline``read only`[`Eval`](#Eval)`:`[`Platform`](platform "haxe.display.Platform")` = "eval"`'
- name: display.Platform.Flash
  id: haxe/display/platform#Flash
  summary: null
  belongs_to: display.Platform
  description: '### `inline``read only`[`Flash`](#Flash)`:`[`Platform`](platform "haxe.display.Platform")` = "flash"`'
- name: display.Platform.Hl
  id: haxe/display/platform#Hl
  summary: null
  belongs_to: display.Platform
  description: '### `inline``read only`[`Hl`](#Hl)`:`[`Platform`](platform "haxe.display.Platform")` = "hl"`'
- name: display.Platform.Java
  id: haxe/display/platform#Java
  summary: null
  belongs_to: display.Platform
  description: '### `inline``read only`[`Java`](#Java)`:`[`Platform`](platform "haxe.display.Platform")` = "java"`'
- name: display.Platform.Js
  id: haxe/display/platform#Js
  summary: null
  belongs_to: display.Platform
  description: '### `inline``read only`[`Js`](#Js)`:`[`Platform`](platform "haxe.display.Platform")` = "js"`'
- name: display.Platform.Lua
  id: haxe/display/platform#Lua
  summary: null
  belongs_to: display.Platform
  description: '### `inline``read only`[`Lua`](#Lua)`:`[`Platform`](platform "haxe.display.Platform")` = "lua"`'
- name: display.Platform.Neko
  id: haxe/display/platform#Neko
  summary: null
  belongs_to: display.Platform
  description: '### `inline``read only`[`Neko`](#Neko)`:`[`Platform`](platform "haxe.display.Platform")` = "neko"`'
- name: display.Platform.Php
  id: haxe/display/platform#Php
  summary: null
  belongs_to: display.Platform
  description: '### `inline``read only`[`Php`](#Php)`:`[`Platform`](platform "haxe.display.Platform")` = "php"`'
- name: display.Platform.Python
  id: haxe/display/platform#Python
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.Platform
  description: "### `inline``read only`[`Python`](#Python)`:`[`Platform`](platform \"haxe.display.Platform\")` = \"python\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Platform.html](https://api.haxe.org/haxe/display/Platform.html)"
- name: display.Position
  id: haxe/display/position
  summary: Position in a text document expressed as 1-based line and character offset
  description: "# Position\n\npackage [haxe.display](index)\n\n*Available on all platforms*\n\nPosition in a text document expressed as 1-based line and character offset.\n\n## Fields\n\n### [`line`](#line)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nLine position in a document (1-based).\n\n### [`character`](#character)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nCharacter offset on a line in a document (1-based).\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Position.html](https://api.haxe.org/haxe/display/Position.html)"
- name: display.Position.character
  id: haxe/display/position#character
  summary: Character offset on a line in a document (1-based)
  belongs_to: display.Position
  description: "### [`character`](#character)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nCharacter offset on a line in a document (1-based).\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Position.html](https://api.haxe.org/haxe/display/Position.html)"
- name: display.Position.line
  id: haxe/display/position#line
  summary: Line position in a document (1-based)
  belongs_to: display.Position
  description: |-
    ### [`line`](#line)`:`[`Int`](../../int "Int - The standard Int type.")

    Line position in a document (1-based).
- name: display.PositionParams
  id: haxe/display/positionparams
  summary: Unicode character offset in the file
  description: "# PositionParams\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\nGeneral types\n\n## Fields\n\n### [`offset`](#offset)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nUnicode character offset in the file.\n\n### [`file`](#file)`:`[`FsPath`](fspath \"haxe.display.FsPath\")\n\n### `optional`[`contents`](#contents)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/PositionParams.html](https://api.haxe.org/haxe/display/PositionParams.html)"
- name: display.PositionParams.contents
  id: haxe/display/positionparams#contents
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.PositionParams
  description: "### `optional`[`contents`](#contents)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/PositionParams.html](https://api.haxe.org/haxe/display/PositionParams.html)"
- name: display.PositionParams.file
  id: haxe/display/positionparams#file
  summary: null
  belongs_to: display.PositionParams
  description: '### [`file`](#file)`:`[`FsPath`](fspath "haxe.display.FsPath")'
- name: display.PositionParams.offset
  id: haxe/display/positionparams#offset
  summary: Unicode character offset in the file
  belongs_to: display.PositionParams
  description: |-
    ### [`offset`](#offset)`:`[`Int`](../../int "Int - The standard Int type.")

    Unicode character offset in the file.
- name: display.Range
  id: haxe/display/range
  summary: A range in a text document expressed as (1-based) start and end positions
  description: "# Range\n\npackage [haxe.display](index)\n\nimport [haxe.display.Position](position)\n\n*Available on all platforms*\n\nA range in a text document expressed as (1-based) start and end positions.\n\n## Fields\n\n### [`start`](#start)`:`[`Position`](position \"haxe.display.Position - Position in a text document expressed as 1-based line and character offset.\")\n\nThe range's start position\n\n### [`end`](#end)`:`[`Position`](position \"haxe.display.Position - Position in a text document expressed as 1-based line and character offset.\")\n\nThe range's end position\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Range.html](https://api.haxe.org/haxe/display/Range.html)"
- name: display.Range.end
  id: haxe/display/range#end
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.Range
  description: "### [`end`](#end)`:`[`Position`](position \"haxe.display.Position - Position in a text document expressed as 1-based line and character offset.\")\n\nThe range's end position\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Range.html](https://api.haxe.org/haxe/display/Range.html)"
- name: display.Range.start
  id: haxe/display/range#start
  summary: null
  belongs_to: display.Range
  description: |-
    ### [`start`](#start)`:`[`Position`](position "haxe.display.Position - Position in a text document expressed as 1-based line and character offset.")

    The range's start position
- name: display.Response
  id: haxe/display/response
  summary: UNIX timestamp at the moment the data was sent
  description: "# Response\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Protocol](protocol)\n\n*Available on all platforms*\n\n## Fields\n\n### `optional``final``read only`[`timestamp`](#timestamp)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`>`\n\nUNIX timestamp at the moment the data was sent.\n\n### `optional``final``read only`[`timers`](#timers)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Timer`](timer \"haxe.display.Timer\")`>`\n\nOnly sent if \\`--times\\` is enabled.\n\n### `optional``final``read only`[`result`](#result)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Response.html](https://api.haxe.org/haxe/display/Response.html)"
- name: display.Response.result
  id: haxe/display/response#result
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.Response
  description: "### `optional``final``read only`[`result`](#result)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Response.html](https://api.haxe.org/haxe/display/Response.html)"
- name: display.Response.timers
  id: haxe/display/response#timers
  summary: Only sent if `--times` is enabled
  belongs_to: display.Response
  description: |-
    ### `optional``final``read only`[`timers`](#timers)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Timer`](timer "haxe.display.Timer")`>`

    Only sent if \`--times\` is enabled.
- name: display.Response.timestamp
  id: haxe/display/response#timestamp
  summary: UNIX timestamp at the moment the data was sent
  belongs_to: display.Response
  description: |-
    ### `optional``final``read only`[`timestamp`](#timestamp)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`>`

    UNIX timestamp at the moment the data was sent.
- name: display.ServerMethods
  id: haxe/display/servermethods
  summary: This request is sent from the client to Haxe to explore the class paths
  description: "# ServerMethods\n\npackage [haxe.display](index)\n\nimport [haxe.display.Server](server)\n\n*Available on all platforms*\n\n## Static variables\n\n### `static``inline``read only`[`Configure`](#Configure)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`ConfigureParams`](configureparams \"haxe.display.ConfigureParams\")`, `[`Response`](response \"haxe.display.Response\")`<`[`NoData`](nodata \"haxe.display.NoData\")`>>`` = new HaxeRequestMethod<ConfigureParams,Response<NoData>>(\"server/configure\")`\n\n### `static``inline``read only`[`ContextMemory`](#ContextMemory)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`ContextParams`](contextparams \"haxe.display.ContextParams\")`, `[`Response`](response \"haxe.display.Response\")`<`[`HaxeContextMemoryResult`](haxecontextmemoryresult \"haxe.display.HaxeContextMemoryResult\")`>>`` = new HaxeRequestMethod<ContextParams,Response<HaxeContextMemoryResult>>(\"server/memory/context\")`\n\n### `static``inline``read only`[`Contexts`](#Contexts)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`NoData`](nodata \"haxe.display.NoData\")`, `[`Response`](response \"haxe.display.Response\")`<`[`Array`](../../array \"Array\")`<`[`HaxeServerContext`](haxeservercontext \"haxe.display.HaxeServerContext\")`>>>`` = new HaxeRequestMethod<NoData,Response<Array<HaxeServerContext>>>(\"server/contexts\")`\n\n### `static``inline``read only`[`Files`](#Files)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`ContextParams`](contextparams \"haxe.display.ContextParams\")`, `[`Response`](response \"haxe.display.Response\")`<`[`Array`](../../array \"Array\")`<`[`JsonServerFile`](jsonserverfile \"haxe.display.JsonServerFile\")`>>>`` = new HaxeRequestMethod<ContextParams,Response<Array<JsonServerFile>>>(\"server/files\")`\n\n### `static``inline``read only`[`Invalidate`](#Invalidate)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`FileParams`](fileparams \"haxe.display.FileParams\")`, `[`Response`](response \"haxe.display.Response\")`<`[`NoData`](nodata \"haxe.display.NoData\")`>>`` = new HaxeRequestMethod<FileParams,Response<NoData>>(\"server/invalidate\")`\n\n### `static``inline``read only`[`Memory`](#Memory)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`NoData`](nodata \"haxe.display.NoData\")`, `[`Response`](response \"haxe.display.Response\")`<`[`HaxeMemoryResult`](haxememoryresult \"haxe.display.HaxeMemoryResult\")`>>`` = new HaxeRequestMethod<NoData,Response<HaxeMemoryResult>>(\"server/memory\")`\n\n### `static``inline``read only`[`Module`](#Module)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`ModuleParams`](moduleparams \"haxe.display.ModuleParams\")`, `[`Response`](response \"haxe.display.Response\")`<`[`JsonModule`](jsonmodule \"haxe.display.JsonModule\")`>>`` = new HaxeRequestMethod<ModuleParams,Response<JsonModule>>(\"server/module\")`\n\n### `static``inline``read only`[`ModuleCreated`](#ModuleCreated)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`FileParams`](fileparams \"haxe.display.FileParams\")`, `[`Response`](response \"haxe.display.Response\")`<`[`NoData`](nodata \"haxe.display.NoData\")`>>`` = new HaxeRequestMethod<FileParams,Response<NoData>>(\"server/moduleCreated\")`\n\n### `static``inline``read only`[`ModuleMemory`](#ModuleMemory)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`ModuleParams`](moduleparams \"haxe.display.ModuleParams\")`, `[`Response`](response \"haxe.display.Response\")`<`[`HaxeModuleMemoryResult`](haxemodulememoryresult \"haxe.display.HaxeModuleMemoryResult\")`>>`` = new HaxeRequestMethod<ModuleParams,Response<HaxeModuleMemoryResult>>(\"server/memory/module\")`\n\n### `static``inline``read only`[`Modules`](#Modules)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`ContextParams`](contextparams \"haxe.display.ContextParams\")`, `[`Response`](response \"haxe.display.Response\")`<`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>>>`` = new HaxeRequestMethod<ContextParams,Response<Array<String>>>(\"server/modules\")`\n\n### `static``inline``read only`[`ReadClassPaths`](#ReadClassPaths)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`NoData`](nodata \"haxe.display.NoData\")`, `[`Response`](response \"haxe.display.Response\")`<{files:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>}>>`` = new HaxeRequestMethod<NoData,Response<{ var ?files : Int}>>(\"server/readClassPaths\")`\n\nThis request is sent from the client to Haxe to explore the class paths. This effectively creates a cache for toplevel completion.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ServerMethods.html](https://api.haxe.org/haxe/display/ServerMethods.html)"
- name: display.ServerMethods.Configure()
  id: haxe/display/servermethods#Configure
  summary: null
  belongs_to: display.ServerMethods
  description: '### `static``inline``read only`[`Configure`](#Configure)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`ConfigureParams`](configureparams "haxe.display.ConfigureParams")`, `[`Response`](response "haxe.display.Response")`<`[`NoData`](nodata "haxe.display.NoData")`>>`` = new HaxeRequestMethod<ConfigureParams,Response<NoData>>("server/configure")`'
- name: display.ServerMethods.ContextMemory()
  id: haxe/display/servermethods#ContextMemory
  summary: null
  belongs_to: display.ServerMethods
  description: '### `static``inline``read only`[`ContextMemory`](#ContextMemory)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`ContextParams`](contextparams "haxe.display.ContextParams")`, `[`Response`](response "haxe.display.Response")`<`[`HaxeContextMemoryResult`](haxecontextmemoryresult "haxe.display.HaxeContextMemoryResult")`>>`` = new HaxeRequestMethod<ContextParams,Response<HaxeContextMemoryResult>>("server/memory/context")`'
- name: display.ServerMethods.Contexts()
  id: haxe/display/servermethods#Contexts
  summary: null
  belongs_to: display.ServerMethods
  description: '### `static``inline``read only`[`Contexts`](#Contexts)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`NoData`](nodata "haxe.display.NoData")`, `[`Response`](response "haxe.display.Response")`<`[`Array`](../../array "Array")`<`[`HaxeServerContext`](haxeservercontext "haxe.display.HaxeServerContext")`>>>`` = new HaxeRequestMethod<NoData,Response<Array<HaxeServerContext>>>("server/contexts")`'
- name: display.ServerMethods.Files()
  id: haxe/display/servermethods#Files
  summary: null
  belongs_to: display.ServerMethods
  description: '### `static``inline``read only`[`Files`](#Files)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`ContextParams`](contextparams "haxe.display.ContextParams")`, `[`Response`](response "haxe.display.Response")`<`[`Array`](../../array "Array")`<`[`JsonServerFile`](jsonserverfile "haxe.display.JsonServerFile")`>>>`` = new HaxeRequestMethod<ContextParams,Response<Array<JsonServerFile>>>("server/files")`'
- name: display.ServerMethods.Invalidate()
  id: haxe/display/servermethods#Invalidate
  summary: null
  belongs_to: display.ServerMethods
  description: '### `static``inline``read only`[`Invalidate`](#Invalidate)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`FileParams`](fileparams "haxe.display.FileParams")`, `[`Response`](response "haxe.display.Response")`<`[`NoData`](nodata "haxe.display.NoData")`>>`` = new HaxeRequestMethod<FileParams,Response<NoData>>("server/invalidate")`'
- name: display.ServerMethods.Memory()
  id: haxe/display/servermethods#Memory
  summary: null
  belongs_to: display.ServerMethods
  description: '### `static``inline``read only`[`Memory`](#Memory)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`NoData`](nodata "haxe.display.NoData")`, `[`Response`](response "haxe.display.Response")`<`[`HaxeMemoryResult`](haxememoryresult "haxe.display.HaxeMemoryResult")`>>`` = new HaxeRequestMethod<NoData,Response<HaxeMemoryResult>>("server/memory")`'
- name: display.ServerMethods.Module()
  id: haxe/display/servermethods#Module
  summary: null
  belongs_to: display.ServerMethods
  description: '### `static``inline``read only`[`Module`](#Module)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`ModuleParams`](moduleparams "haxe.display.ModuleParams")`, `[`Response`](response "haxe.display.Response")`<`[`JsonModule`](jsonmodule "haxe.display.JsonModule")`>>`` = new HaxeRequestMethod<ModuleParams,Response<JsonModule>>("server/module")`'
- name: display.ServerMethods.ModuleCreated()
  id: haxe/display/servermethods#ModuleCreated
  summary: null
  belongs_to: display.ServerMethods
  description: '### `static``inline``read only`[`ModuleCreated`](#ModuleCreated)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`FileParams`](fileparams "haxe.display.FileParams")`, `[`Response`](response "haxe.display.Response")`<`[`NoData`](nodata "haxe.display.NoData")`>>`` = new HaxeRequestMethod<FileParams,Response<NoData>>("server/moduleCreated")`'
- name: display.ServerMethods.ModuleMemory()
  id: haxe/display/servermethods#ModuleMemory
  summary: null
  belongs_to: display.ServerMethods
  description: '### `static``inline``read only`[`ModuleMemory`](#ModuleMemory)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`ModuleParams`](moduleparams "haxe.display.ModuleParams")`, `[`Response`](response "haxe.display.Response")`<`[`HaxeModuleMemoryResult`](haxemodulememoryresult "haxe.display.HaxeModuleMemoryResult")`>>`` = new HaxeRequestMethod<ModuleParams,Response<HaxeModuleMemoryResult>>("server/memory/module")`'
- name: display.ServerMethods.Modules()
  id: haxe/display/servermethods#Modules
  summary: null
  belongs_to: display.ServerMethods
  description: '### `static``inline``read only`[`Modules`](#Modules)`:`[`HaxeRequestMethod`](haxerequestmethod "haxe.display.HaxeRequestMethod")`<`[`ContextParams`](contextparams "haxe.display.ContextParams")`, `[`Response`](response "haxe.display.Response")`<`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>>>`` = new HaxeRequestMethod<ContextParams,Response<Array<String>>>("server/modules")`'
- name: display.ServerMethods.ReadClassPaths()
  id: haxe/display/servermethods#ReadClassPaths
  summary: This request is sent from the client to Haxe to explore the class paths
  belongs_to: display.ServerMethods
  description: "### `static``inline``read only`[`ReadClassPaths`](#ReadClassPaths)`:`[`HaxeRequestMethod`](haxerequestmethod \"haxe.display.HaxeRequestMethod\")`<`[`NoData`](nodata \"haxe.display.NoData\")`, `[`Response`](response \"haxe.display.Response\")`<{files:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>}>>`` = new HaxeRequestMethod<NoData,Response<{ var ?files : Int}>>(\"server/readClassPaths\")`\n\nThis request is sent from the client to Haxe to explore the class paths. This effectively creates a cache for toplevel completion.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ServerMethods.html](https://api.haxe.org/haxe/display/ServerMethods.html)"
- name: display.SignatureHelpParams
  id: haxe/display/signaturehelpparams
  summary: Unicode character offset in the file
  description: "# SignatureHelpParams\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\nSignatureHelp\n\n## Fields\n\n### [`wasAutoTriggered`](#wasAutoTriggered)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`offset`](#offset)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nUnicode character offset in the file.\n\n### [`file`](#file)`:`[`FsPath`](fspath \"haxe.display.FsPath\")\n\n### `optional`[`contents`](#contents)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/SignatureHelpParams.html](https://api.haxe.org/haxe/display/SignatureHelpParams.html)"
- name: display.SignatureHelpParams.contents
  id: haxe/display/signaturehelpparams#contents
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.SignatureHelpParams
  description: "### `optional`[`contents`](#contents)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/SignatureHelpParams.html](https://api.haxe.org/haxe/display/SignatureHelpParams.html)"
- name: display.SignatureHelpParams.file
  id: haxe/display/signaturehelpparams#file
  summary: null
  belongs_to: display.SignatureHelpParams
  description: '### [`file`](#file)`:`[`FsPath`](fspath "haxe.display.FsPath")'
- name: display.SignatureHelpParams.offset
  id: haxe/display/signaturehelpparams#offset
  summary: Unicode character offset in the file
  belongs_to: display.SignatureHelpParams
  description: |-
    ### [`offset`](#offset)`:`[`Int`](../../int "Int - The standard Int type.")

    Unicode character offset in the file.
- name: display.SignatureHelpParams.wasAutoTriggered
  id: haxe/display/signaturehelpparams#wasAutoTriggered
  summary: null
  belongs_to: display.SignatureHelpParams
  description: '### [`wasAutoTriggered`](#wasAutoTriggered)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: display.SignatureHelpResult
  id: haxe/display/signaturehelpresult
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# SignatureHelpResult\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`haxe.display.Response`](response \"haxe.display.Response\")`<`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`haxe.display.SignatureItem`](signatureitem \"haxe.display.SignatureItem\")`>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/SignatureHelpResult.html](https://api.haxe.org/haxe/display/SignatureHelpResult.html)"
- name: display.SignatureInformation
  id: haxe/display/signatureinformation
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# SignatureInformation\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`ret`](#ret)`:`[`JsonType`](jsontype \"haxe.display.JsonType\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\n### `optional`[`documentation`](#documentation)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### [`args`](#args)`:`[`Array`](../../array \"Array\")`<`[`JsonFunctionArgument`](jsonfunctionargument \"haxe.display.JsonFunctionArgument\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/SignatureInformation.html](https://api.haxe.org/haxe/display/SignatureInformation.html)"
- name: display.SignatureInformation.args
  id: haxe/display/signatureinformation#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.SignatureInformation
  description: "### [`args`](#args)`:`[`Array`](../../array \"Array\")`<`[`JsonFunctionArgument`](jsonfunctionargument \"haxe.display.JsonFunctionArgument\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/SignatureInformation.html](https://api.haxe.org/haxe/display/SignatureInformation.html)"
- name: display.SignatureInformation.documentation
  id: haxe/display/signatureinformation#documentation
  summary: null
  belongs_to: display.SignatureInformation
  description: '### `optional`[`documentation`](#documentation)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: display.SignatureInformation.ret
  id: haxe/display/signatureinformation#ret
  summary: null
  belongs_to: display.SignatureInformation
  description: '### [`ret`](#ret)`:`[`JsonType`](jsontype "haxe.display.JsonType")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`'
- name: display.SignatureItem
  id: haxe/display/signatureitem
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# SignatureItem\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`signatures`](#signatures)`:`[`Array`](../../array \"Array\")`<`[`SignatureInformation`](signatureinformation \"haxe.display.SignatureInformation\")`>`\n\n### [`kind`](#kind)`:`[`SignatureItemKind`](signatureitemkind \"haxe.display.SignatureItemKind\")\n\n### [`activeSignature`](#activeSignature)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### [`activeParameter`](#activeParameter)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/SignatureItem.html](https://api.haxe.org/haxe/display/SignatureItem.html)"
- name: display.SignatureItem.activeParameter
  id: haxe/display/signatureitem#activeParameter
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.SignatureItem
  description: "### [`activeParameter`](#activeParameter)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/SignatureItem.html](https://api.haxe.org/haxe/display/SignatureItem.html)"
- name: display.SignatureItem.activeSignature
  id: haxe/display/signatureitem#activeSignature
  summary: null
  belongs_to: display.SignatureItem
  description: '### [`activeSignature`](#activeSignature)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: display.SignatureItem.kind
  id: haxe/display/signatureitem#kind
  summary: null
  belongs_to: display.SignatureItem
  description: '### [`kind`](#kind)`:`[`SignatureItemKind`](signatureitemkind "haxe.display.SignatureItemKind")'
- name: display.SignatureItem.signatures
  id: haxe/display/signatureitem#signatures
  summary: null
  belongs_to: display.SignatureItem
  description: '### [`signatures`](#signatures)`:`[`Array`](../../array "Array")`<`[`SignatureInformation`](signatureinformation "haxe.display.SignatureInformation")`>`'
- name: display.SignatureItemKind
  id: haxe/display/signatureitemkind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# SignatureItemKind([Int](../../int \"Int - The standard Int type.\"))\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`ArrayAccess`](#ArrayAccess)`:`[`SignatureItemKind`](signatureitemkind \"haxe.display.SignatureItemKind\")` = 1`\n\n### `inline``read only`[`Call`](#Call)`:`[`SignatureItemKind`](signatureitemkind \"haxe.display.SignatureItemKind\")` = 0`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/SignatureItemKind.html](https://api.haxe.org/haxe/display/SignatureItemKind.html)"
- name: display.SignatureItemKind.ArrayAccess
  id: haxe/display/signatureitemkind#ArrayAccess
  summary: null
  belongs_to: display.SignatureItemKind
  description: '### `inline``read only`[`ArrayAccess`](#ArrayAccess)`:`[`SignatureItemKind`](signatureitemkind "haxe.display.SignatureItemKind")` = 1`'
- name: display.SignatureItemKind.Call
  id: haxe/display/signatureitemkind#Call
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.SignatureItemKind
  description: "### `inline``read only`[`Call`](#Call)`:`[`SignatureItemKind`](signatureitemkind \"haxe.display.SignatureItemKind\")` = 0`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/SignatureItemKind.html](https://api.haxe.org/haxe/display/SignatureItemKind.html)"
- name: display.StructExtensionCompletion
  id: haxe/display/structextensioncompletion
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# StructExtensionCompletion\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### [`isIntersectionType`](#isIntersectionType)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/StructExtensionCompletion.html](https://api.haxe.org/haxe/display/StructExtensionCompletion.html)"
- name: display.StructExtensionCompletion.isIntersectionType
  id: haxe/display/structextensioncompletion#isIntersectionType
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.StructExtensionCompletion
  description: "### [`isIntersectionType`](#isIntersectionType)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/StructExtensionCompletion.html](https://api.haxe.org/haxe/display/StructExtensionCompletion.html)"
- name: display.Timer
  id: haxe/display/timer
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Timer\n\npackage [haxe.display](index)\n\nimport [haxe.display.Protocol](protocol)\n\n*Available on all platforms*\n\n## Fields\n\n### `final``read only`[`time`](#time)`:`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n### `optional``final``read only`[`percentTotal`](#percentTotal)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`>`\n\n### `optional``final``read only`[`percentParent`](#percentParent)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`>`\n\n### `optional``final``read only`[`path`](#path)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### `final``read only`[`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `optional``final``read only`[`info`](#info)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### `optional``final``read only`[`children`](#children)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`Timer`](timer \"haxe.display.Timer\")`>>`\n\n### `optional``final``read only`[`calls`](#calls)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Timer.html](https://api.haxe.org/haxe/display/Timer.html)"
- name: display.Timer.calls
  id: haxe/display/timer#calls
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.Timer
  description: "### `optional``final``read only`[`calls`](#calls)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Timer.html](https://api.haxe.org/haxe/display/Timer.html)"
- name: display.Timer.children
  id: haxe/display/timer#children
  summary: null
  belongs_to: display.Timer
  description: '### `optional``final``read only`[`children`](#children)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Array`](../../array "Array")`<`[`Timer`](timer "haxe.display.Timer")`>>`'
- name: display.Timer.info
  id: haxe/display/timer#info
  summary: null
  belongs_to: display.Timer
  description: '### `optional``final``read only`[`info`](#info)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: display.Timer.name
  id: haxe/display/timer#name
  summary: null
  belongs_to: display.Timer
  description: '### `final``read only`[`name`](#name)`:`[`String`](../../string "String - The basic String class.")'
- name: display.Timer.path
  id: haxe/display/timer#path
  summary: null
  belongs_to: display.Timer
  description: '### `optional``final``read only`[`path`](#path)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: display.Timer.percentParent
  id: haxe/display/timer#percentParent
  summary: null
  belongs_to: display.Timer
  description: '### `optional``final``read only`[`percentParent`](#percentParent)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`>`'
- name: display.Timer.percentTotal
  id: haxe/display/timer#percentTotal
  summary: null
  belongs_to: display.Timer
  description: '### `optional``final``read only`[`percentTotal`](#percentTotal)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`>`'
- name: display.Timer.time
  id: haxe/display/timer#time
  summary: null
  belongs_to: display.Timer
  description: '### `final``read only`[`time`](#time)`:`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")'
- name: display.ToplevelCompletion
  id: haxe/display/toplevelcompletion
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ToplevelCompletion\\<T\\>\n\npackage [haxe.display](index)\n\nimport [haxe.display.Display](display)\n\n*Available on all platforms*\n\n## Fields\n\n### `optional`[`expectedTypeFollowed`](#expectedTypeFollowed)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonType`](jsontype \"haxe.display.JsonType\")`<``T``>>`\n\n### `optional`[`expectedType`](#expectedType)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonType`](jsontype \"haxe.display.JsonType\")`<``T``>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ToplevelCompletion.html](https://api.haxe.org/haxe/display/ToplevelCompletion.html)"
- name: display.ToplevelCompletion.expectedType
  id: haxe/display/toplevelcompletion#expectedType
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.ToplevelCompletion
  description: "### `optional`[`expectedType`](#expectedType)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`JsonType`](jsontype \"haxe.display.JsonType\")`<``T``>>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/ToplevelCompletion.html](https://api.haxe.org/haxe/display/ToplevelCompletion.html)"
- name: display.ToplevelCompletion.expectedTypeFollowed
  id: haxe/display/toplevelcompletion#expectedTypeFollowed
  summary: null
  belongs_to: display.ToplevelCompletion
  description: '### `optional`[`expectedTypeFollowed`](#expectedTypeFollowed)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`JsonType`](jsontype "haxe.display.JsonType")`<``T``>>`'
- name: display.Version
  id: haxe/display/version
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Version\n\npackage [haxe.display](index)\n\nimport [haxe.display.Protocol](protocol)\n\n*Available on all platforms*\n\nRepresents a semantic version, see https://semver.org/.\n\n## Fields\n\n### `optional``final``read only`[`pre`](#pre)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### `final``read only`[`patch`](#patch)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `final``read only`[`minor`](#minor)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `final``read only`[`major`](#major)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `optional``final``read only`[`build`](#build)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Version.html](https://api.haxe.org/haxe/display/Version.html)"
- name: display.Version.build
  id: haxe/display/version#build
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: display.Version
  description: "### `optional``final``read only`[`build`](#build)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/display/Version.html](https://api.haxe.org/haxe/display/Version.html)"
- name: display.Version.major
  id: haxe/display/version#major
  summary: null
  belongs_to: display.Version
  description: '### `final``read only`[`major`](#major)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: display.Version.minor
  id: haxe/display/version#minor
  summary: null
  belongs_to: display.Version
  description: '### `final``read only`[`minor`](#minor)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: display.Version.patch
  id: haxe/display/version#patch
  summary: null
  belongs_to: display.Version
  description: '### `final``read only`[`patch`](#patch)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: display.Version.pre
  id: haxe/display/version#pre
  summary: null
  belongs_to: display.Version
  description: '### `optional``final``read only`[`pre`](#pre)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: ds.ArraySort
  id: haxe/ds/arraysort
  summary: ArraySort provides a stable implementation of merge sort through its sort method
  description: "# ArraySort\n\npackage [haxe.ds](index)\n\n*Available on all platforms*\n\nArraySort provides a stable implementation of merge sort through its `sort` method. It should be used instead of [`Array.sort`](../../array#sort) in cases where the order of equal elements has to be retained on all targets.\n\n## Static methods\n\n### `static`[`sort`](#sort)`<``T``>(``a:`[`Array`](../../array \"Array\")`<``T``>,`` ``cmp:(``T``, ``T``) ‑> `[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nSorts Array `a` according to the comparison function `cmp`, where `cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a negative Int if `x < y`.\n\nThis operation modifies Array `a` in place.\n\nThis operation is stable: The order of equal elements is preserved.\n\nIf `a` or `cmp` are null, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/ArraySort.html](https://api.haxe.org/haxe/ds/ArraySort.html)"
- name: ds.ArraySort.sort()
  id: haxe/ds/arraysort#sort
  summary: Sorts Array a according to the comparison function cmp, where cmp(x,y) returns 0 if x == y, a positive Int if x > y and a negative Int if x < y
  belongs_to: ds.ArraySort
  description: "### `static`[`sort`](#sort)`<``T``>(``a:`[`Array`](../../array \"Array\")`<``T``>,``cmp:(``T``, ``T``) ‑> `[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nSorts Array `a` according to the comparison function `cmp`, where `cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a negative Int if `x < y`.\n\nThis operation modifies Array `a` in place.\n\nThis operation is stable: The order of equal elements is preserved.\n\nIf `a` or `cmp` are null, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/ArraySort.html](https://api.haxe.org/haxe/ds/ArraySort.html)"
- name: ds.BalancedTree
  id: haxe/ds/balancedtree
  summary: BalancedTree allows key-value mapping with arbitrary keys, as long as they can be ordered
  description: "# BalancedTree\\<K, V\\>\n\npackage [haxe.ds](index)\n\nimplements [IMap](../imap \"haxe.IMap\")\\<K, V\\>\n\nextended by [EnumValueMap](enumvaluemap \"haxe.ds.EnumValueMap - EnumValueMap allows mapping of enum value keys to arbitrary values.\")\n\n*Available on all platforms*\n\nBalancedTree allows key-value mapping with arbitrary keys, as long as they can be ordered. By default, [`Reflect.compare`](../../reflect#compare) is used in the `compare` method, which can be overridden in subclasses.\n\nOperations have a logarithmic average and worst-case cost.\n\nIteration over keys and values, using `keys` and `iterator` respectively, are in-order.\n\n## Constructor\n\n### [`new`](#new)`()`\n\nCreates a new BalancedTree, which is initially empty.\n\n## Methods\n\n### [`clear`](#clear)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\nRemoves all keys from `this` BalancedTree.\n\n### [`copy`](#copy)`():`[`BalancedTree`](balancedtree \"haxe.ds.BalancedTree - BalancedTree allows key-value mapping with arbitrary keys, as long as they can be ordered.\")`<``K``, ``V``>`\n\n### [`exists`](#exists)`(``key:``K``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `key` is bound to a value.\n\nThis method returns true even if `key` is bound to null.\n\nIf `key` is null, the result is unspecified.\n\n### [`get`](#get)`(``key:``K``):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``V``>`\n\nReturns the value `key` is bound to.\n\nIf `key` is not bound to any value, `null` is returned.\n\nIf `key` is null, the result is unspecified.\n\n### [`iterator`](#iterator)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``V``>`\n\nIterates over the bound values of `this` BalancedTree.\n\nThis operation is performed in-order.\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator \"KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.\")`<``K``, ``V``>`\n\n### See [`Map.keyValueIterator`](../../map#keyValueIterator)\n\n### [`keys`](#keys)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``K``>`\n\nIterates over the keys of `this` BalancedTree.\n\nThis operation is performed in-order.\n\n### [`remove`](#remove)`(``key:``K``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nRemoves the current binding of `key`.\n\nIf `key` has no binding, `this` BalancedTree is unchanged and false is returned.\n\nOtherwise the binding of `key` is removed and true is returned.\n\nIf `key` is null, the result is unspecified.\n\n### [`set`](#set)`(``key:``K``,`` ``value:``V``):`[`Void`](../../void \"Void - The standard Void type.\")\n\nBinds `key` to `value`.\n\nIf `key` is already bound to a value, that binding disappears.\n\nIf `key` is null, the result is unspecified.\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/BalancedTree.html](https://api.haxe.org/haxe/ds/BalancedTree.html)"
- name: ds.BalancedTree.clear()
  id: haxe/ds/balancedtree#clear
  summary: Removes all keys from this BalancedTree
  belongs_to: ds.BalancedTree
  description: |-
    ### [`clear`](#clear)`():`[`Void`](../../void "Void - The standard Void type.")

    Removes all keys from `this` BalancedTree.
- name: ds.BalancedTree.copy()
  id: haxe/ds/balancedtree#copy
  summary: null
  belongs_to: ds.BalancedTree
  description: '### [`copy`](#copy)`():`[`BalancedTree`](balancedtree "haxe.ds.BalancedTree - BalancedTree allows key-value mapping with arbitrary keys, as long as they can be ordered.")`<``K``, ``V``>`'
- name: ds.BalancedTree.exists()
  id: haxe/ds/balancedtree#exists
  summary: Tells if key is bound to a value
  belongs_to: ds.BalancedTree
  description: |-
    ### [`exists`](#exists)`(``key:``K``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if `key` is bound to a value.

    This method returns true even if `key` is bound to null.

    If `key` is null, the result is unspecified.
- name: ds.BalancedTree.get()
  id: haxe/ds/balancedtree#get
  summary: Returns the value key is bound to
  belongs_to: ds.BalancedTree
  description: |-
    ### [`get`](#get)`(``key:``K``):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``V``>`

    Returns the value `key` is bound to.

    If `key` is not bound to any value, `null` is returned.

    If `key` is null, the result is unspecified.
- name: ds.BalancedTree.iterator()
  id: haxe/ds/balancedtree#iterator
  summary: Iterates over the bound values of this BalancedTree
  belongs_to: ds.BalancedTree
  description: |-
    ### [`iterator`](#iterator)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``V``>`

    Iterates over the bound values of `this` BalancedTree.

    This operation is performed in-order.
- name: ds.BalancedTree.keys()
  id: haxe/ds/balancedtree#keys
  summary: Iterates over the keys of this BalancedTree
  belongs_to: ds.BalancedTree
  description: |-
    ### [`keys`](#keys)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``K``>`

    Iterates over the keys of `this` BalancedTree.

    This operation is performed in-order.
- name: ds.BalancedTree.keyValueIterator()
  id: haxe/ds/balancedtree#keyValueIterator
  summary: null
  belongs_to: ds.BalancedTree
  description: |-
    ### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator "KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.")`<``K``, ``V``>`

    ### See [`Map.keyValueIterator`](../../map#keyValueIterator)
- name: ds.BalancedTree.remove()
  id: haxe/ds/balancedtree#remove
  summary: Removes the current binding of key
  belongs_to: ds.BalancedTree
  description: |-
    ### [`remove`](#remove)`(``key:``K``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Removes the current binding of `key`.

    If `key` has no binding, `this` BalancedTree is unchanged and false is returned.

    Otherwise the binding of `key` is removed and true is returned.

    If `key` is null, the result is unspecified.
- name: ds.BalancedTree.set()
  id: haxe/ds/balancedtree#set
  summary: Binds key to value
  belongs_to: ds.BalancedTree
  description: |-
    ### [`set`](#set)`(``key:``K``,``value:``V``):`[`Void`](../../void "Void - The standard Void type.")

    Binds `key` to `value`.

    If `key` is already bound to a value, that binding disappears.

    If `key` is null, the result is unspecified.
- name: ds.BalancedTree.toString()
  id: haxe/ds/balancedtree#toString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: ds.BalancedTree
  description: "### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/BalancedTree.html](https://api.haxe.org/haxe/ds/BalancedTree.html)"
- name: ds.Either
  id: haxe/ds/either
  summary: Either represents values which are either of type L (Left) or type R (Right)
  description: "# Either\\<L, R\\>\n\npackage [haxe.ds](index)\n\n*Available on all platforms*\n\nEither represents values which are either of type `L` (Left) or type `R` (Right).\n\n## Values\n\n### `Left(v:``L``)`\n\n### `Right(v:``R``)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/Either.html](https://api.haxe.org/haxe/ds/Either.html)"
- name: ds.Either.Left()
  id: haxe/ds/either#Left
  summary: null
  belongs_to: ds.Either
  description: '### `Left(v:``L``)`'
- name: ds.Either.Right()
  id: haxe/ds/either#Right
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: ds.Either
  description: "### `Right(v:``R``)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/Either.html](https://api.haxe.org/haxe/ds/Either.html)"
- name: ds.EnumValueMap
  id: haxe/ds/enumvaluemap
  summary: EnumValueMap allows mapping of enum value keys to arbitrary values
  description: "# EnumValueMap\\<K, V\\>\n\npackage [haxe.ds](index)\n\nextends [BalancedTree](balancedtree \"haxe.ds.BalancedTree - BalancedTree allows key-value mapping with arbitrary keys, as long as they can be ordered.\")\n\nimplements [IMap](../imap \"haxe.IMap\")\\<K, V\\>\n\n*Available on all platforms*\n\nEnumValueMap allows mapping of enum value keys to arbitrary values.\n\nKeys are compared by value and recursively over their parameters. If any parameter is not an enum value, [`Reflect.compare`](../../reflect#compare) is used to compare them.\n\n## Constructor\n\n### [`new`](#new)`()`\n\n*Available on php, js, neko, cpp, macro, lua, python, hl, flash*\n\n## Methods\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/EnumValueMap.html](https://api.haxe.org/haxe/ds/EnumValueMap.html)"
- name: ds.GenericCell
  id: haxe/ds/genericcell
  summary: A cell of haxe.ds.GenericStack
  description: "# GenericCell\\<T\\>\n\npackage [haxe.ds](index)\n\nimport [haxe.ds.GenericStack](genericstack)\n\n*Available on all platforms*\n\nA cell of [`haxe.ds.GenericStack`](genericstack#GenericStack).\n\nSee also:\n\n- <https://haxe.org/manual/std-GenericStack.html>\n\n## Constructor\n\n### [`new`](#new)`(``elt:``T``,`` ``next:`[`GenericCell`](genericcell \"haxe.ds.GenericCell - A cell of haxe.\")`<``T``>``)`\n\n## Variables\n\n### [`elt`](#elt)`:``T`\n\n### [`next`](#next)`:`[`GenericCell`](genericcell \"haxe.ds.GenericCell - A cell of haxe.\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/GenericCell.html](https://api.haxe.org/haxe/ds/GenericCell.html)"
- name: ds.GenericCell.elt
  id: haxe/ds/genericcell#elt
  summary: null
  belongs_to: ds.GenericCell
  description: '### [`elt`](#elt)`:``T`'
- name: ds.GenericCell.next
  id: haxe/ds/genericcell#next
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: ds.GenericCell
  description: "### [`next`](#next)`:`[`GenericCell`](genericcell \"haxe.ds.GenericCell - A cell of haxe.\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/GenericCell.html](https://api.haxe.org/haxe/ds/GenericCell.html)"
- name: ds.GenericStack
  id: haxe/ds/genericstack
  summary: A stack of elements
  description: "# GenericStack\\<T\\>\n\npackage [haxe.ds](index)\n\n*Available on all platforms*\n\nA stack of elements.\n\nThis class is generic, which means one type is generated for each type parameter T on static targets. For example:\n\n- `new `[`GenericStack`](genericstack#GenericStack)`<`[`Int`](../../int)`>()` generates `GenericStack_Int`\n- `new `[`GenericStack`](genericstack#GenericStack)`<`[`String`](../../string)`>()` generates `GenericStack_String`\n\nThe generated name is an implementation detail and should not be relied upon.\n\nSee also:\n\n- <https://haxe.org/manual/std-GenericStack.html>\n\n## Constructor\n\n### [`new`](#new)`()`\n\nCreates a new empty GenericStack.\n\n## Variables\n\n### [`head`](#head)`:`[`GenericCell`](genericcell \"haxe.ds.GenericCell - A cell of haxe.\")`<``T``>`\n\n## Methods\n\n### `inline`[`add`](#add)`(``item:``T``):`[`Void`](../../void \"Void - The standard Void type.\")\n\nPushes element `item` onto the stack.\n\n### `inline`[`first`](#first)`():`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\nReturns the topmost stack element without removing it.\n\nIf the stack is empty, null is returned.\n\n### `inline`[`isEmpty`](#isEmpty)`():`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if the stack is empty.\n\n### [`iterator`](#iterator)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``T``>`\n\nReturns an iterator over the elements of `this` GenericStack.\n\n### `inline`[`pop`](#pop)`():`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\nReturns the topmost stack element and removes it.\n\nIf the stack is empty, null is returned.\n\n### [`remove`](#remove)`(``v:``T``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nRemoves the first element which is equal to `v` according to the `==` operator.\n\nThis method traverses the stack until it finds a matching element and unlinks it, returning true.\n\nIf no matching element is found, false is returned.\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\nReturns a String representation of `this` GenericStack.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/GenericStack.html](https://api.haxe.org/haxe/ds/GenericStack.html)"
- name: ds.GenericStack.add()
  id: haxe/ds/genericstack#add
  summary: Pushes element item onto the stack
  belongs_to: ds.GenericStack
  description: |-
    ### `inline`[`add`](#add)`(``item:``T``):`[`Void`](../../void "Void - The standard Void type.")

    Pushes element `item` onto the stack.
- name: ds.GenericStack.first()
  id: haxe/ds/genericstack#first
  summary: Returns the topmost stack element without removing it
  belongs_to: ds.GenericStack
  description: |-
    ### `inline`[`first`](#first)`():`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`

    Returns the topmost stack element without removing it.

    If the stack is empty, null is returned.
- name: ds.GenericStack.head
  id: haxe/ds/genericstack#head
  summary: null
  belongs_to: ds.GenericStack
  description: |-
    ### [`head`](#head)`:`[`GenericCell`](genericcell "haxe.ds.GenericCell - A cell of haxe.")`<``T``>`

    ## Methods
- name: ds.GenericStack.isEmpty()
  id: haxe/ds/genericstack#isEmpty
  summary: Tells if the stack is empty
  belongs_to: ds.GenericStack
  description: |-
    ### `inline`[`isEmpty`](#isEmpty)`():`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if the stack is empty.
- name: ds.GenericStack.iterator()
  id: haxe/ds/genericstack#iterator
  summary: Returns an iterator over the elements of this GenericStack
  belongs_to: ds.GenericStack
  description: |-
    ### [`iterator`](#iterator)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``T``>`

    Returns an iterator over the elements of `this` GenericStack.
- name: ds.GenericStack.pop()
  id: haxe/ds/genericstack#pop
  summary: Returns the topmost stack element and removes it
  belongs_to: ds.GenericStack
  description: |-
    ### `inline`[`pop`](#pop)`():`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`

    Returns the topmost stack element and removes it.

    If the stack is empty, null is returned.
- name: ds.GenericStack.remove()
  id: haxe/ds/genericstack#remove
  summary: Removes the first element which is equal to v according to the == operator
  belongs_to: ds.GenericStack
  description: |-
    ### [`remove`](#remove)`(``v:``T``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Removes the first element which is equal to `v` according to the `==` operator.

    This method traverses the stack until it finds a matching element and unlinks it, returning true.

    If no matching element is found, false is returned.
- name: ds.GenericStack.toString()
  id: haxe/ds/genericstack#toString
  summary: Returns a String representation of this GenericStack
  belongs_to: ds.GenericStack
  description: "### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\nReturns a String representation of `this` GenericStack.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/GenericStack.html](https://api.haxe.org/haxe/ds/GenericStack.html)"
- name: ds.HashMap
  id: haxe/ds/hashmap
  summary: HashMap allows mapping of hashable objects to arbitrary values
  description: "# HashMap\\<K, V\\>(HashMapData\\<K, V\\>)\n\npackage [haxe.ds](index)\n\n*Available on all platforms*\n\nHashMap allows mapping of hashable objects to arbitrary values.\n\nSee [`Map`](../../map) for documentation details.\n\nSee also:\n\n- <https://haxe.org/manual/std-Map.html>\n\n## Methods\n\n### `inline`[`clear`](#clear)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n### See [`Map.clear`](../../map#clear)\n\n### [`copy`](#copy)`():`[`HashMap`](hashmap \"haxe.ds.HashMap - HashMap allows mapping of hashable objects to arbitrary values.\")`<``K``, ``V``>`\n\n### See [`Map.copy`](../../map#copy)\n\n### `inline`[`exists`](#exists)`(``k:``K``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Map.exists`](../../map#exists)\n\n### `inline`[`get`](#get)`(``k:``K``):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``V``>`\n\n### See [`Map.get`](../../map#get)\n\n### `inline`[`iterator`](#iterator)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``V``>`\n\n### See [`Map.iterator`](../../map#iterator)\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`HashMapKeyValueIterator`](../iterators/hashmapkeyvalueiterator \"haxe.iterators.HashMapKeyValueIterator\")`<``K``, ``V``>`\n\n### See [`Map.keyValueIterator`](../../map#keyValueIterator)\n\n### `inline`[`keys`](#keys)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``K``>`\n\n### See [`Map.keys`](../../map#keys)\n\n### `inline`[`remove`](#remove)`(``k:``K``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Map.remove`](../../map#remove)\n\n### `inline`[`set`](#set)`(``k:``K``,`` ``v:``V``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### See [`Map.set`](../../map#set)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/HashMap.html](https://api.haxe.org/haxe/ds/HashMap.html)"
- name: ds.HashMap.clear()
  id: haxe/ds/hashmap#clear
  summary: null
  belongs_to: ds.HashMap
  description: |-
    ### `inline`[`clear`](#clear)`():`[`Void`](../../void "Void - The standard Void type.")

    ### See [`Map.clear`](../../map#clear)
- name: ds.HashMap.copy()
  id: haxe/ds/hashmap#copy
  summary: null
  belongs_to: ds.HashMap
  description: |-
    ### [`copy`](#copy)`():`[`HashMap`](hashmap "haxe.ds.HashMap - HashMap allows mapping of hashable objects to arbitrary values.")`<``K``, ``V``>`

    ### See [`Map.copy`](../../map#copy)
- name: ds.HashMap.exists()
  id: haxe/ds/hashmap#exists
  summary: null
  belongs_to: ds.HashMap
  description: |-
    ### `inline`[`exists`](#exists)`(``k:``K``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Map.exists`](../../map#exists)
- name: ds.HashMap.get()
  id: haxe/ds/hashmap#get
  summary: null
  belongs_to: ds.HashMap
  description: |-
    ### `inline`[`get`](#get)`(``k:``K``):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``V``>`

    ### See [`Map.get`](../../map#get)
- name: ds.HashMap.iterator()
  id: haxe/ds/hashmap#iterator
  summary: null
  belongs_to: ds.HashMap
  description: |-
    ### `inline`[`iterator`](#iterator)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``V``>`

    ### See [`Map.iterator`](../../map#iterator)
- name: ds.HashMap.keys()
  id: haxe/ds/hashmap#keys
  summary: null
  belongs_to: ds.HashMap
  description: |-
    ### `inline`[`keys`](#keys)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``K``>`

    ### See [`Map.keys`](../../map#keys)
- name: ds.HashMap.keyValueIterator()
  id: haxe/ds/hashmap#keyValueIterator
  summary: null
  belongs_to: ds.HashMap
  description: |-
    ### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`HashMapKeyValueIterator`](../iterators/hashmapkeyvalueiterator "haxe.iterators.HashMapKeyValueIterator")`<``K``, ``V``>`

    ### See [`Map.keyValueIterator`](../../map#keyValueIterator)
- name: ds.HashMap.remove()
  id: haxe/ds/hashmap#remove
  summary: null
  belongs_to: ds.HashMap
  description: |-
    ### `inline`[`remove`](#remove)`(``k:``K``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Map.remove`](../../map#remove)
- name: ds.HashMap.set()
  id: haxe/ds/hashmap#set
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: ds.HashMap
  description: "### `inline`[`set`](#set)`(``k:``K``,``v:``V``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### See [`Map.set`](../../map#set)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/HashMap.html](https://api.haxe.org/haxe/ds/HashMap.html)"
- name: ds.IntMap
  id: haxe/ds/intmap
  summary: IntMap allows mapping of Int keys to arbitrary values
  description: "# IntMap\\<T\\>\n\npackage [haxe.ds](index)\n\nimplements [IMap](../imap \"haxe.IMap\")\\<[Int](../../int \"Int - The standard Int type.\"), T\\>\n\n*Available on all platforms*\n\nIntMap allows mapping of Int keys to arbitrary values.\n\nSee [`Map`](../../map) for documentation details.\n\nSee also:\n\n- <https://haxe.org/manual/std-Map.html>\n\n## Constructor\n\n### [`new`](#new)`()`\n\nCreates a new IntMap.\n\n## Methods\n\n### [`clear`](#clear)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n### See [`Map.clear`](../../map#clear)\n\n### [`copy`](#copy)`():`[`IntMap`](intmap \"haxe.ds.IntMap - IntMap allows mapping of Int keys to arbitrary values.\")`<``T``>`\n\n### See [`Map.copy`](../../map#copy)\n\n### [`exists`](#exists)`(``key:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Map.exists`](../../map#exists)\n\n### [`get`](#get)`(``key:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\n### See [`Map.get`](../../map#get)\n\n### [`iterator`](#iterator)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``T``>`\n\n### See [`Map.iterator`](../../map#iterator)\n\n(cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator \"KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.\")`<`[`Int`](../../int \"Int - The standard Int type.\")`, ``T``>`\n\n### See [`Map.keyValueIterator`](../../map#keyValueIterator)\n\n### [`keys`](#keys)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>`\n\n### See [`Map.keys`](../../map#keys)\n\n(cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.\n\n### [`remove`](#remove)`(``key:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Map.remove`](../../map#remove)\n\n### [`set`](#set)`(``key:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``value:``T``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### See [`Map.set`](../../map#set)\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n### See [`Map.toString`](../../map#toString)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/IntMap.html](https://api.haxe.org/haxe/ds/IntMap.html)"
- name: ds.IntMap.clear()
  id: haxe/ds/intmap#clear
  summary: null
  belongs_to: ds.IntMap
  description: |-
    ### [`clear`](#clear)`():`[`Void`](../../void "Void - The standard Void type.")

    ### See [`Map.clear`](../../map#clear)
- name: ds.IntMap.copy()
  id: haxe/ds/intmap#copy
  summary: null
  belongs_to: ds.IntMap
  description: |-
    ### [`copy`](#copy)`():`[`IntMap`](intmap "haxe.ds.IntMap - IntMap allows mapping of Int keys to arbitrary values.")`<``T``>`

    ### See [`Map.copy`](../../map#copy)
- name: ds.IntMap.exists()
  id: haxe/ds/intmap#exists
  summary: null
  belongs_to: ds.IntMap
  description: |-
    ### [`exists`](#exists)`(``key:`[`Int`](../../int "Int - The standard Int type.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Map.exists`](../../map#exists)
- name: ds.IntMap.get()
  id: haxe/ds/intmap#get
  summary: null
  belongs_to: ds.IntMap
  description: |-
    ### [`get`](#get)`(``key:`[`Int`](../../int "Int - The standard Int type.")`):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`

    ### See [`Map.get`](../../map#get)
- name: ds.IntMap.iterator()
  id: haxe/ds/intmap#iterator
  summary: '(cs, java) Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration'
  belongs_to: ds.IntMap
  description: |-
    ### [`iterator`](#iterator)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``T``>`

    ### See [`Map.iterator`](../../map#iterator)

    (cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.
- name: ds.IntMap.keys()
  id: haxe/ds/intmap#keys
  summary: '(cs, java) Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration'
  belongs_to: ds.IntMap
  description: |-
    ### [`keys`](#keys)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<`[`Int`](../../int "Int - The standard Int type.")`>`

    ### See [`Map.keys`](../../map#keys)

    (cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.
- name: ds.IntMap.keyValueIterator()
  id: haxe/ds/intmap#keyValueIterator
  summary: null
  belongs_to: ds.IntMap
  description: |-
    ### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator "KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.")`<`[`Int`](../../int "Int - The standard Int type.")`, ``T``>`

    ### See [`Map.keyValueIterator`](../../map#keyValueIterator)
- name: ds.IntMap.remove()
  id: haxe/ds/intmap#remove
  summary: null
  belongs_to: ds.IntMap
  description: |-
    ### [`remove`](#remove)`(``key:`[`Int`](../../int "Int - The standard Int type.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Map.remove`](../../map#remove)
- name: ds.IntMap.set()
  id: haxe/ds/intmap#set
  summary: null
  belongs_to: ds.IntMap
  description: |-
    ### [`set`](#set)`(``key:`[`Int`](../../int "Int - The standard Int type.")`,``value:``T``):`[`Void`](../../void "Void - The standard Void type.")

    ### See [`Map.set`](../../map#set)
- name: ds.IntMap.toString()
  id: haxe/ds/intmap#toString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: ds.IntMap
  description: "### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n### See [`Map.toString`](../../map#toString)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/IntMap.html](https://api.haxe.org/haxe/ds/IntMap.html)"
- name: ds.List
  id: haxe/ds/list
  summary: A linked-list of elements
  description: "# List\\<T\\>\n\npackage [haxe.ds](index)\n\n*Available on all platforms*\n\nA linked-list of elements. The list is composed of element container objects that are chained together. It is optimized so that adding or removing an element does not imply copying the whole list content every time.\n\nSee also:\n\n- <https://haxe.org/manual/std-List.html>\n\n## Constructor\n\n### [`new`](#new)`()`\n\nCreates a new empty list.\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nThe length of `this` List.\n\n## Methods\n\n### [`add`](#add)`(``item:``T``):`[`Void`](../../void \"Void - The standard Void type.\")\n\nAdds element `item` at the end of `this` List.\n\n`this.`[`length`](#length) increases by 1.\n\n### [`clear`](#clear)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\nEmpties `this` List.\n\nThis function does not traverse the elements, but simply sets the internal references to null and `this.`[`length`](#length) to 0.\n\n### [`filter`](#filter)`(``f:``T`` ‑> `[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`List`](list \"haxe.ds.List - A linked-list of elements.\")`<``T``>`\n\nReturns a list filtered with `f`. The returned list will contain all elements for which `f(x) == `[`true`](../../bool).\n\n### [`first`](#first)`():`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\nReturns the first element of `this` List, or null if no elements exist.\n\nThis function does not modify `this` List.\n\n### [`isEmpty`](#isEmpty)`():`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `this` List is empty.\n\n### `inline`[`iterator`](#iterator)`():``ListIterator``<``T``>`\n\nReturns an iterator on the elements of the list.\n\n### [`join`](#join)`(``sep:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nReturns a string representation of `this` List, with `sep` separating each element.\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():``ListKeyValueIterator``<``T``>`\n\nReturns an iterator of the List indices and values.\n\n### [`last`](#last)`():`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\nReturns the last element of `this` List, or null if no elements exist.\n\nThis function does not modify `this` List.\n\n### [`map`](#map)`<``X``>(``f:``T`` ‑> ``X``):`[`List`](list \"haxe.ds.List - A linked-list of elements.\")`<``X``>`\n\nReturns a new list where all elements have been converted by the function `f`.\n\n### [`pop`](#pop)`():`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\nReturns the first element of `this` List, or null if no elements exist.\n\nThe element is removed from `this` List.\n\n### [`push`](#push)`(``item:``T``):`[`Void`](../../void \"Void - The standard Void type.\")\n\nAdds element `item` at the beginning of `this` List.\n\n`this.`[`length`](#length) increases by 1.\n\n### [`remove`](#remove)`(``v:``T``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nRemoves the first occurrence of `v` in `this` List.\n\nIf `v` is found by checking standard equality, it is removed from `this` List and the function returns true.\n\nOtherwise, false is returned.\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\nReturns a string representation of `this` List.\n\nThe result is enclosed in { } with the individual elements being separated by a comma.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/List.html](https://api.haxe.org/haxe/ds/List.html)"
- name: ds.List.add()
  id: haxe/ds/list#add
  summary: Adds element item at the end of this List
  belongs_to: ds.List
  description: |-
    ### [`add`](#add)`(``item:``T``):`[`Void`](../../void "Void - The standard Void type.")

    Adds element `item` at the end of `this` List.

    `this.`[`length`](#length) increases by 1.
- name: ds.List.clear()
  id: haxe/ds/list#clear
  summary: Empties this List
  belongs_to: ds.List
  description: |-
    ### [`clear`](#clear)`():`[`Void`](../../void "Void - The standard Void type.")

    Empties `this` List.

    This function does not traverse the elements, but simply sets the internal references to null and `this.`[`length`](#length) to 0.
- name: ds.List.filter()
  id: haxe/ds/list#filter
  summary: Returns a list filtered with f
  belongs_to: ds.List
  description: |-
    ### [`filter`](#filter)`(``f:``T`` ‑> `[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`List`](list "haxe.ds.List - A linked-list of elements.")`<``T``>`

    Returns a list filtered with `f`. The returned list will contain all elements for which `f(x) == `[`true`](../../bool).
- name: ds.List.first()
  id: haxe/ds/list#first
  summary: Returns the first element of this List, or null if no elements exist
  belongs_to: ds.List
  description: |-
    ### [`first`](#first)`():`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`

    Returns the first element of `this` List, or null if no elements exist.

    This function does not modify `this` List.
- name: ds.List.isEmpty()
  id: haxe/ds/list#isEmpty
  summary: Tells if this List is empty
  belongs_to: ds.List
  description: |-
    ### [`isEmpty`](#isEmpty)`():`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if `this` List is empty.
- name: ds.List.iterator()
  id: haxe/ds/list#iterator
  summary: Returns an iterator on the elements of the list
  belongs_to: ds.List
  description: |-
    ### `inline`[`iterator`](#iterator)`():``ListIterator``<``T``>`

    Returns an iterator on the elements of the list.
- name: ds.List.join()
  id: haxe/ds/list#join
  summary: Returns a string representation of this List, with sep separating each element
  belongs_to: ds.List
  description: |-
    ### [`join`](#join)`(``sep:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    Returns a string representation of `this` List, with `sep` separating each element.
- name: ds.List.keyValueIterator()
  id: haxe/ds/list#keyValueIterator
  summary: Returns an iterator of the List indices and values
  belongs_to: ds.List
  description: |-
    ### `inline`[`keyValueIterator`](#keyValueIterator)`():``ListKeyValueIterator``<``T``>`

    Returns an iterator of the List indices and values.
- name: ds.List.last()
  id: haxe/ds/list#last
  summary: Returns the last element of this List, or null if no elements exist
  belongs_to: ds.List
  description: |-
    ### [`last`](#last)`():`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`

    Returns the last element of `this` List, or null if no elements exist.

    This function does not modify `this` List.
- name: ds.List.length
  id: haxe/ds/list#length
  summary: The length of this List
  belongs_to: ds.List
  description: |-
    ### `read only`[`length`](#length)`:`[`Int`](../../int "Int - The standard Int type.")

    The length of `this` List.

    ## Methods
- name: ds.List.map()
  id: haxe/ds/list#map
  summary: Returns a new list where all elements have been converted by the function f
  belongs_to: ds.List
  description: |-
    ### [`map`](#map)`<``X``>(``f:``T`` ‑> ``X``):`[`List`](list "haxe.ds.List - A linked-list of elements.")`<``X``>`

    Returns a new list where all elements have been converted by the function `f`.
- name: ds.List.pop()
  id: haxe/ds/list#pop
  summary: Returns the first element of this List, or null if no elements exist
  belongs_to: ds.List
  description: |-
    ### [`pop`](#pop)`():`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`

    Returns the first element of `this` List, or null if no elements exist.

    The element is removed from `this` List.
- name: ds.List.push()
  id: haxe/ds/list#push
  summary: Adds element item at the beginning of this List
  belongs_to: ds.List
  description: |-
    ### [`push`](#push)`(``item:``T``):`[`Void`](../../void "Void - The standard Void type.")

    Adds element `item` at the beginning of `this` List.

    `this.`[`length`](#length) increases by 1.
- name: ds.List.remove()
  id: haxe/ds/list#remove
  summary: Removes the first occurrence of v in this List
  belongs_to: ds.List
  description: |-
    ### [`remove`](#remove)`(``v:``T``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Removes the first occurrence of `v` in `this` List.

    If `v` is found by checking standard equality, it is removed from `this` List and the function returns true.

    Otherwise, false is returned.
- name: ds.List.toString()
  id: haxe/ds/list#toString
  summary: Returns a string representation of this List
  belongs_to: ds.List
  description: "### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\nReturns a string representation of `this` List.\n\nThe result is enclosed in { } with the individual elements being separated by a comma.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/List.html](https://api.haxe.org/haxe/ds/List.html)"
- name: ds.ListSort
  id: haxe/ds/listsort
  summary: ListSort provides a stable implementation of merge sort through its sort method
  description: "# ListSort\n\npackage [haxe.ds](index)\n\n*Available on all platforms*\n\nListSort provides a stable implementation of merge sort through its `sort` method. It has a O(N.log(N)) complexity and does not require additional memory allocation.\n\n## Static methods\n\n### `static``inline`[`sort`](#sort)`<``T``>(``list:``T``,`` ``cmp:(``T``, ``T``) ‑> `[`Int`](../../int \"Int - The standard Int type.\")`):``T`\n\nSorts List `lst` according to the comparison function `cmp`, where `cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a negative Int if `x < y`.\n\nThis operation modifies List `a` in place and returns its head once modified. The `prev` of the head is set to the tail of the sorted list.\n\nIf `list` or `cmp` are null, the result is unspecified.\n\n### `static``inline`[`sortSingleLinked`](#sortSingleLinked)`<``T``>(``list:``T``,`` ``cmp:(``T``, ``T``) ‑> `[`Int`](../../int \"Int - The standard Int type.\")`):``T`\n\nSame as `sort` but on single linked list.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/ListSort.html](https://api.haxe.org/haxe/ds/ListSort.html)"
- name: ds.ListSort.sort()
  id: haxe/ds/listsort#sort
  summary: Sorts List lst according to the comparison function cmp, where cmp(x,y) returns 0 if x == y, a positive Int if x > y and a negative Int if x < y
  belongs_to: ds.ListSort
  description: |-
    ### `static``inline`[`sort`](#sort)`<``T``>(``list:``T``,``cmp:(``T``, ``T``) ‑> `[`Int`](../../int "Int - The standard Int type.")`):``T`

    Sorts List `lst` according to the comparison function `cmp`, where `cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a negative Int if `x < y`.

    This operation modifies List `a` in place and returns its head once modified. The `prev` of the head is set to the tail of the sorted list.

    If `list` or `cmp` are null, the result is unspecified.
- name: ds.ListSort.sortSingleLinked()
  id: haxe/ds/listsort#sortSingleLinked
  summary: Same as sort but on single linked list
  belongs_to: ds.ListSort
  description: "### `static``inline`[`sortSingleLinked`](#sortSingleLinked)`<``T``>(``list:``T``,``cmp:(``T``, ``T``) ‑> `[`Int`](../../int \"Int - The standard Int type.\")`):``T`\n\nSame as `sort` but on single linked list.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/ListSort.html](https://api.haxe.org/haxe/ds/ListSort.html)"
- name: ds.Map
  id: haxe/ds/map
  summary: Map allows key to value mapping for arbitrary value types, and many key types
  description: "# Map\\<K, V\\>([IMap](../imap \"haxe.IMap\")\\<K, V\\>)\n\npackage [haxe.ds](index)\n\n*Available on all platforms*\n\nMap allows key to value mapping for arbitrary value types, and many key types.\n\nThis is a multi-type abstract, it is instantiated as one of its specialization types depending on its type parameters.\n\nA Map can be instantiated without explicit type parameters. Type inference will then determine the type parameters from the usage.\n\nMaps can also be created with `[key1 => value1, key2 => value2]` syntax.\n\nMap is an abstract type, it is not available at runtime.\n\nSee also:\n\n- <https://haxe.org/manual/std-Map.html>\n\n## Methods\n\n### `inline`[`clear`](#clear)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\nRemoves all keys from `this` Map.\n\n### `inline`[`copy`](#copy)`():`[`Map`](map \"haxe.ds.Map - Map allows key to value mapping for arbitrary value types, and many key types.\")`<``K``, ``V``>`\n\nReturns a shallow copy of `this` map.\n\nThe order of values is undefined.\n\n### `inline`[`exists`](#exists)`(``key:``K``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns true if `key` has a mapping, false otherwise.\n\nIf `key` is `null`, the result is unspecified.\n\n### `inline`[`get`](#get)`(``key:``K``):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``V``>`\n\nReturns the current mapping of `key`.\n\nIf no such mapping exists, `null` is returned.\n\nNote that a check like `map.get(key) == null` can hold for two reasons:\n\n1.  the map has no mapping for `key`\n2.  the map has a mapping with a value of `null`\n\nIf it is important to distinguish these cases, `exists()` should be used.\n\nIf `key` is `null`, the result is unspecified.\n\n### `inline`[`iterator`](#iterator)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``V``>`\n\nReturns an Iterator over the values of `this` Map.\n\nThe order of values is undefined.\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator \"KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.\")`<``K``, ``V``>`\n\nReturns an Iterator over the keys and values of `this` Map.\n\nThe order of values is undefined.\n\n### `inline`[`keys`](#keys)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``K``>`\n\nReturns an Iterator over the keys of `this` Map.\n\nThe order of keys is undefined.\n\n### `inline`[`remove`](#remove)`(``key:``K``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nRemoves the mapping of `key` and returns true if such a mapping existed, false otherwise.\n\nIf `key` is `null`, the result is unspecified.\n\n### `inline`[`set`](#set)`(``key:``K``,`` ``value:``V``):`[`Void`](../../void \"Void - The standard Void type.\")\n\nMaps `key` to `value`.\n\nIf `key` already has a mapping, the previous value disappears.\n\nIf `key` is `null`, the result is unspecified.\n\n### `inline`[`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\nReturns a String representation of `this` Map.\n\nThe exact representation depends on the platform and key-type.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/Map.html](https://api.haxe.org/haxe/ds/Map.html)"
- name: ds.Map.clear()
  id: haxe/ds/map#clear
  summary: Removes all keys from this Map
  belongs_to: ds.Map
  description: |-
    ### `inline`[`clear`](#clear)`():`[`Void`](../../void "Void - The standard Void type.")

    Removes all keys from `this` Map.
- name: ds.Map.copy()
  id: haxe/ds/map#copy
  summary: Returns a shallow copy of this map
  belongs_to: ds.Map
  description: |-
    ### `inline`[`copy`](#copy)`():`[`Map`](map "haxe.ds.Map - Map allows key to value mapping for arbitrary value types, and many key types.")`<``K``, ``V``>`

    Returns a shallow copy of `this` map.

    The order of values is undefined.
- name: ds.Map.exists()
  id: haxe/ds/map#exists
  summary: Returns true if key has a mapping, false otherwise
  belongs_to: ds.Map
  description: |-
    ### `inline`[`exists`](#exists)`(``key:``K``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Returns true if `key` has a mapping, false otherwise.

    If `key` is `null`, the result is unspecified.
- name: ds.Map.get()
  id: haxe/ds/map#get
  summary: Returns the current mapping of key
  belongs_to: ds.Map
  description: |-
    ### `inline`[`get`](#get)`(``key:``K``):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``V``>`

    Returns the current mapping of `key`.

    If no such mapping exists, `null` is returned.

    Note that a check like `map.get(key) == null` can hold for two reasons:

    1.  the map has no mapping for `key`
    2.  the map has a mapping with a value of `null`

    If it is important to distinguish these cases, `exists()` should be used.

    If `key` is `null`, the result is unspecified.
- name: ds.Map.iterator()
  id: haxe/ds/map#iterator
  summary: Returns an Iterator over the values of this Map
  belongs_to: ds.Map
  description: |-
    ### `inline`[`iterator`](#iterator)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``V``>`

    Returns an Iterator over the values of `this` Map.

    The order of values is undefined.
- name: ds.Map.keys()
  id: haxe/ds/map#keys
  summary: Returns an Iterator over the keys of this Map
  belongs_to: ds.Map
  description: |-
    ### `inline`[`keys`](#keys)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``K``>`

    Returns an Iterator over the keys of `this` Map.

    The order of keys is undefined.
- name: ds.Map.keyValueIterator()
  id: haxe/ds/map#keyValueIterator
  summary: Returns an Iterator over the keys and values of this Map
  belongs_to: ds.Map
  description: |-
    ### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator "KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.")`<``K``, ``V``>`

    Returns an Iterator over the keys and values of `this` Map.

    The order of values is undefined.
- name: ds.Map.remove()
  id: haxe/ds/map#remove
  summary: Removes the mapping of key and returns true if such a mapping existed, false otherwise
  belongs_to: ds.Map
  description: |-
    ### `inline`[`remove`](#remove)`(``key:``K``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Removes the mapping of `key` and returns true if such a mapping existed, false otherwise.

    If `key` is `null`, the result is unspecified.
- name: ds.Map.set()
  id: haxe/ds/map#set
  summary: Maps key to value
  belongs_to: ds.Map
  description: |-
    ### `inline`[`set`](#set)`(``key:``K``,``value:``V``):`[`Void`](../../void "Void - The standard Void type.")

    Maps `key` to `value`.

    If `key` already has a mapping, the previous value disappears.

    If `key` is `null`, the result is unspecified.
- name: ds.Map.toString()
  id: haxe/ds/map#toString
  summary: Returns a String representation of this Map
  belongs_to: ds.Map
  description: "### `inline`[`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\nReturns a String representation of `this` Map.\n\nThe exact representation depends on the platform and key-type.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/Map.html](https://api.haxe.org/haxe/ds/Map.html)"
- name: ds.ObjectMap
  id: haxe/ds/objectmap
  summary: ObjectMap allows mapping of object keys to arbitrary values
  description: "# ObjectMap\\<K, V\\>\n\npackage [haxe.ds](index)\n\nimplements [IMap](../imap \"haxe.IMap\")\\<K, V\\>\n\n*Available on all platforms*\n\nObjectMap allows mapping of object keys to arbitrary values.\n\nOn static targets, the keys are considered to be strong references. Refer to [`haxe.ds.WeakMap`](weakmap#WeakMap) for a weak reference version.\n\nSee [`Map`](../../map) for documentation details.\n\nSee also:\n\n- <https://haxe.org/manual/std-Map.html>\n\n## Constructor\n\n### [`new`](#new)`()`\n\nCreates a new ObjectMap.\n\n## Methods\n\n### [`clear`](#clear)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n### See [`Map.clear`](../../map#clear)\n\n### [`copy`](#copy)`():`[`ObjectMap`](objectmap \"haxe.ds.ObjectMap - ObjectMap allows mapping of object keys to arbitrary values.\")`<``K``, ``V``>`\n\n*Available on cs, php, js, neko, cpp, macro, java, python, flash*\n\n### See [`Map.copy`](../../map#copy)\n\n### [`copy`](#copy)`():`[`ObjectMap`](objectmap \"haxe.ds.ObjectMap - ObjectMap allows mapping of object keys to arbitrary values.\")`<``A``, ``B``>`\n\n*Available on lua*\n\n### See [`Map.copy`](../../map#copy)\n\n### [`copy`](#copy)`():`[`ObjectMap`](objectmap \"haxe.ds.ObjectMap - ObjectMap allows mapping of object keys to arbitrary values.\")`<``K``, ``T``>`\n\n*Available on hl*\n\n### See [`Map.copy`](../../map#copy)\n\n### [`exists`](#exists)`(``key:``K``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n*Available on cs, php, js, neko, cpp, macro, java, python, hl, flash*\n\n### See [`Map.exists`](../../map#exists)\n\n### [`exists`](#exists)`(``key:``A``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n*Available on lua*\n\n### See [`Map.exists`](../../map#exists)\n\n### [`get`](#get)`(``key:``K``):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``V``>`\n\n*Available on cs, php, js, neko, cpp, macro, java, python, flash*\n\n### See [`Map.get`](../../map#get)\n\n### [`get`](#get)`(``key:``A``):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``B``>`\n\n*Available on lua*\n\n### See [`Map.get`](../../map#get)\n\n### [`get`](#get)`(``key:``K``):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\n*Available on hl*\n\n### See [`Map.get`](../../map#get)\n\n### [`iterator`](#iterator)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``V``>`\n\n*Available on cs, php, js, neko, cpp, macro, java, python, flash*\n\n### See [`Map.iterator`](../../map#iterator)\n\n(cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.\n\n### [`iterator`](#iterator)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``B``>`\n\n*Available on lua*\n\n### See [`Map.iterator`](../../map#iterator)\n\n(cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.\n\n### [`iterator`](#iterator)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``T``>`\n\n*Available on hl*\n\n### See [`Map.iterator`](../../map#iterator)\n\n(cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator \"KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.\")`<``K``, ``V``>`\n\n*Available on cs, php, js, neko, cpp, macro, java, python, flash*\n\n### See [`Map.keyValueIterator`](../../map#keyValueIterator)\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator \"KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.\")`<``A``, ``B``>`\n\n*Available on lua*\n\n### See [`Map.keyValueIterator`](../../map#keyValueIterator)\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator \"KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.\")`<``K``, ``T``>`\n\n*Available on hl*\n\n### See [`Map.keyValueIterator`](../../map#keyValueIterator)\n\n### [`keys`](#keys)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``K``>`\n\n*Available on cs, php, js, neko, cpp, macro, java, python, hl, flash*\n\n### See [`Map.keys`](../../map#keys)\n\n(cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.\n\n### [`keys`](#keys)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``A``>`\n\n*Available on lua*\n\n### See [`Map.keys`](../../map#keys)\n\n(cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.\n\n### [`remove`](#remove)`(``key:``K``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n*Available on cs, php, js, neko, cpp, macro, java, python, hl, flash*\n\n### See [`Map.remove`](../../map#remove)\n\n### [`remove`](#remove)`(``key:``A``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n*Available on lua*\n\n### See [`Map.remove`](../../map#remove)\n\n### [`set`](#set)`(``key:``K``,`` ``value:``V``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on cs, php, js, neko, cpp, macro, java, python, flash*\n\n### See [`Map.set`](../../map#set)\n\n### [`set`](#set)`(``key:``A``,`` ``value:``B``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on lua*\n\n### See [`Map.set`](../../map#set)\n\n### [`set`](#set)`(``key:``K``,`` ``value:``T``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on hl*\n\n### See [`Map.set`](../../map#set)\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n### See [`Map.toString`](../../map#toString)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/ObjectMap.html](https://api.haxe.org/haxe/ds/ObjectMap.html)"
- name: ds.ObjectMap.clear()
  id: haxe/ds/objectmap#clear
  summary: null
  belongs_to: ds.ObjectMap
  description: |-
    ### [`clear`](#clear)`():`[`Void`](../../void "Void - The standard Void type.")

    ### See [`Map.clear`](../../map#clear)
- name: ds.ObjectMap.copy()
  id: haxe/ds/objectmap#copy
  summary: null
  belongs_to: ds.ObjectMap
  description: |-
    ### [`copy`](#copy)`():`[`ObjectMap`](objectmap "haxe.ds.ObjectMap - ObjectMap allows mapping of object keys to arbitrary values.")`<``K``, ``V``>`

    *Available on cs, php, js, neko, cpp, macro, java, python, flash*

    ### See [`Map.copy`](../../map#copy)

    ### [`copy`](#copy)`():`[`ObjectMap`](objectmap "haxe.ds.ObjectMap - ObjectMap allows mapping of object keys to arbitrary values.")`<``A``, ``B``>`

    *Available on lua*

    ### See [`Map.copy`](../../map#copy)

    ### [`copy`](#copy)`():`[`ObjectMap`](objectmap "haxe.ds.ObjectMap - ObjectMap allows mapping of object keys to arbitrary values.")`<``K``, ``T``>`

    *Available on hl*

    ### See [`Map.copy`](../../map#copy)
- name: ds.ObjectMap.exists()
  id: haxe/ds/objectmap#exists
  summary: null
  belongs_to: ds.ObjectMap
  description: |-
    ### [`exists`](#exists)`(``key:``K``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    *Available on cs, php, js, neko, cpp, macro, java, python, hl, flash*

    ### See [`Map.exists`](../../map#exists)

    ### [`exists`](#exists)`(``key:``A``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    *Available on lua*

    ### See [`Map.exists`](../../map#exists)
- name: ds.ObjectMap.get()
  id: haxe/ds/objectmap#get
  summary: null
  belongs_to: ds.ObjectMap
  description: |-
    ### [`get`](#get)`(``key:``K``):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``V``>`

    *Available on cs, php, js, neko, cpp, macro, java, python, flash*

    ### See [`Map.get`](../../map#get)

    ### [`get`](#get)`(``key:``A``):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``B``>`

    *Available on lua*

    ### See [`Map.get`](../../map#get)

    ### [`get`](#get)`(``key:``K``):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`

    *Available on hl*

    ### See [`Map.get`](../../map#get)
- name: ds.ObjectMap.iterator()
  id: haxe/ds/objectmap#iterator
  summary: '(cs, java) Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration'
  belongs_to: ds.ObjectMap
  description: |-
    ### [`iterator`](#iterator)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``V``>`

    *Available on cs, php, js, neko, cpp, macro, java, python, flash*

    ### See [`Map.iterator`](../../map#iterator)

    (cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.

    ### [`iterator`](#iterator)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``B``>`

    *Available on lua*

    ### See [`Map.iterator`](../../map#iterator)

    (cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.

    ### [`iterator`](#iterator)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``T``>`

    *Available on hl*

    ### See [`Map.iterator`](../../map#iterator)

    (cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.
- name: ds.ObjectMap.keys()
  id: haxe/ds/objectmap#keys
  summary: '(cs, java) Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration'
  belongs_to: ds.ObjectMap
  description: |-
    ### [`keys`](#keys)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``K``>`

    *Available on cs, php, js, neko, cpp, macro, java, python, hl, flash*

    ### See [`Map.keys`](../../map#keys)

    (cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.

    ### [`keys`](#keys)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``A``>`

    *Available on lua*

    ### See [`Map.keys`](../../map#keys)

    (cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.
- name: ds.ObjectMap.keyValueIterator()
  id: haxe/ds/objectmap#keyValueIterator
  summary: null
  belongs_to: ds.ObjectMap
  description: |-
    ### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator "KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.")`<``K``, ``V``>`

    *Available on cs, php, js, neko, cpp, macro, java, python, flash*

    ### See [`Map.keyValueIterator`](../../map#keyValueIterator)

    ### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator "KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.")`<``A``, ``B``>`

    *Available on lua*

    ### See [`Map.keyValueIterator`](../../map#keyValueIterator)

    ### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator "KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.")`<``K``, ``T``>`

    *Available on hl*

    ### See [`Map.keyValueIterator`](../../map#keyValueIterator)
- name: ds.ObjectMap.remove()
  id: haxe/ds/objectmap#remove
  summary: null
  belongs_to: ds.ObjectMap
  description: |-
    ### [`remove`](#remove)`(``key:``K``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    *Available on cs, php, js, neko, cpp, macro, java, python, hl, flash*

    ### See [`Map.remove`](../../map#remove)

    ### [`remove`](#remove)`(``key:``A``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    *Available on lua*

    ### See [`Map.remove`](../../map#remove)
- name: ds.ObjectMap.set()
  id: haxe/ds/objectmap#set
  summary: null
  belongs_to: ds.ObjectMap
  description: |-
    ### [`set`](#set)`(``key:``K``,``value:``V``):`[`Void`](../../void "Void - The standard Void type.")

    *Available on cs, php, js, neko, cpp, macro, java, python, flash*

    ### See [`Map.set`](../../map#set)

    ### [`set`](#set)`(``key:``A``,``value:``B``):`[`Void`](../../void "Void - The standard Void type.")

    *Available on lua*

    ### See [`Map.set`](../../map#set)

    ### [`set`](#set)`(``key:``K``,``value:``T``):`[`Void`](../../void "Void - The standard Void type.")

    *Available on hl*

    ### See [`Map.set`](../../map#set)
- name: ds.ObjectMap.toString()
  id: haxe/ds/objectmap#toString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: ds.ObjectMap
  description: "### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n### See [`Map.toString`](../../map#toString)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/ObjectMap.html](https://api.haxe.org/haxe/ds/ObjectMap.html)"
- name: ds.Option
  id: haxe/ds/option
  summary: An Option is a wrapper type which can either have a value (Some) or not a value (None)
  description: "# Option\\<T\\>\n\npackage [haxe.ds](index)\n\n*Available on all platforms*\n\nAn Option is a wrapper type which can either have a value (Some) or not a value (None).\n\nSee also:\n\n- <https://haxe.org/manual/std-Option.html>\n\n## Values\n\n### `Some(v:``T``)`\n\n### `None`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/Option.html](https://api.haxe.org/haxe/ds/Option.html)"
- name: ds.Option.None
  id: haxe/ds/option#None
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: ds.Option
  description: "### `None`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/Option.html](https://api.haxe.org/haxe/ds/Option.html)"
- name: ds.Option.Some()
  id: haxe/ds/option#Some
  summary: null
  belongs_to: ds.Option
  description: '### `Some(v:``T``)`'
- name: ds.ReadOnlyArray
  id: haxe/ds/readonlyarray
  summary: Note that this doesn't necessarily mean that the instance is immutable
  description: "# ReadOnlyArray\\<T\\>([Array](../../array \"Array\")\\<T\\>)\n\npackage [haxe.ds](index)\n\nfrom [Array](../../array \"Array\")\\<T\\> to [Iterable](../../iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")\\<T\\>\n\n*Available on all platforms*\n\n[`ReadOnlyArray`](readonlyarray#ReadOnlyArray) is an abstract over an ordinary [`Array`](../../array) which only exposes APIs that don't modify the instance, hence \"read-only\".\n\nNote that this doesn't necessarily mean that the instance is *immutable*. Other code holding a reference to the underlying [`Array`](../../array) can still modify it, and the reference can be obtained with a `cast`.\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nThe length of `this` Array.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/ReadOnlyArray.html](https://api.haxe.org/haxe/ds/ReadOnlyArray.html)"
- name: ds.ReadOnlyArray.length
  id: haxe/ds/readonlyarray#length
  summary: The length of this Array
  belongs_to: ds.ReadOnlyArray
  description: "### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nThe length of `this` Array.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/ReadOnlyArray.html](https://api.haxe.org/haxe/ds/ReadOnlyArray.html)"
- name: ds.StringMap
  id: haxe/ds/stringmap
  summary: StringMap allows mapping of String keys to arbitrary values
  description: "# StringMap\\<T\\>\n\npackage [haxe.ds](index)\n\nimplements [IMap](../imap \"haxe.IMap\")\\<[String](../../string \"String - The basic String class.\"), T\\>\n\n*Available on all platforms*\n\nStringMap allows mapping of String keys to arbitrary values.\n\nSee [`Map`](../../map) for documentation details.\n\nSee also:\n\n- <https://haxe.org/manual/std-Map.html>\n\n## Constructor\n\n### [`new`](#new)`()`\n\nCreates a new StringMap.\n\n## Methods\n\n### [`clear`](#clear)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n### See [`Map.clear`](../../map#clear)\n\n### [`copy`](#copy)`():`[`StringMap`](stringmap \"haxe.ds.StringMap - StringMap allows mapping of String keys to arbitrary values.\")`<``T``>`\n\n### See [`Map.copy`](../../map#copy)\n\n### [`exists`](#exists)`(``key:`[`String`](../../string \"String - The basic String class.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Map.exists`](../../map#exists)\n\n### [`get`](#get)`(``key:`[`String`](../../string \"String - The basic String class.\")`):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\n### See [`Map.get`](../../map#get)\n\n### [`iterator`](#iterator)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``T``>`\n\n### See [`Map.iterator`](../../map#iterator)\n\n(cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator \"KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.\")`<`[`String`](../../string \"String - The basic String class.\")`, ``T``>`\n\n### See [`Map.keyValueIterator`](../../map#keyValueIterator)\n\n### [`keys`](#keys)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### See [`Map.keys`](../../map#keys)\n\n(cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.\n\n### [`remove`](#remove)`(``key:`[`String`](../../string \"String - The basic String class.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Map.remove`](../../map#remove)\n\n### [`set`](#set)`(``key:`[`String`](../../string \"String - The basic String class.\")`,`` ``value:``T``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### See [`Map.set`](../../map#set)\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n### See [`Map.toString`](../../map#toString)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/StringMap.html](https://api.haxe.org/haxe/ds/StringMap.html)"
- name: ds.StringMap.clear()
  id: haxe/ds/stringmap#clear
  summary: null
  belongs_to: ds.StringMap
  description: |-
    ### [`clear`](#clear)`():`[`Void`](../../void "Void - The standard Void type.")

    ### See [`Map.clear`](../../map#clear)
- name: ds.StringMap.copy()
  id: haxe/ds/stringmap#copy
  summary: null
  belongs_to: ds.StringMap
  description: |-
    ### [`copy`](#copy)`():`[`StringMap`](stringmap "haxe.ds.StringMap - StringMap allows mapping of String keys to arbitrary values.")`<``T``>`

    ### See [`Map.copy`](../../map#copy)
- name: ds.StringMap.exists()
  id: haxe/ds/stringmap#exists
  summary: null
  belongs_to: ds.StringMap
  description: |-
    ### [`exists`](#exists)`(``key:`[`String`](../../string "String - The basic String class.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Map.exists`](../../map#exists)
- name: ds.StringMap.get()
  id: haxe/ds/stringmap#get
  summary: null
  belongs_to: ds.StringMap
  description: |-
    ### [`get`](#get)`(``key:`[`String`](../../string "String - The basic String class.")`):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`

    ### See [`Map.get`](../../map#get)
- name: ds.StringMap.iterator()
  id: haxe/ds/stringmap#iterator
  summary: '(cs, java) Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration'
  belongs_to: ds.StringMap
  description: |-
    ### [`iterator`](#iterator)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``T``>`

    ### See [`Map.iterator`](../../map#iterator)

    (cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.
- name: ds.StringMap.keys()
  id: haxe/ds/stringmap#keys
  summary: '(cs, java) Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration'
  belongs_to: ds.StringMap
  description: |-
    ### [`keys`](#keys)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<`[`String`](../../string "String - The basic String class.")`>`

    ### See [`Map.keys`](../../map#keys)

    (cs, java) Implementation detail: Do not `set()` any new value while iterating, as it may cause a resize, which will break iteration.
- name: ds.StringMap.keyValueIterator()
  id: haxe/ds/stringmap#keyValueIterator
  summary: null
  belongs_to: ds.StringMap
  description: |-
    ### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator "KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.")`<`[`String`](../../string "String - The basic String class.")`, ``T``>`

    ### See [`Map.keyValueIterator`](../../map#keyValueIterator)
- name: ds.StringMap.remove()
  id: haxe/ds/stringmap#remove
  summary: null
  belongs_to: ds.StringMap
  description: |-
    ### [`remove`](#remove)`(``key:`[`String`](../../string "String - The basic String class.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Map.remove`](../../map#remove)
- name: ds.StringMap.set()
  id: haxe/ds/stringmap#set
  summary: null
  belongs_to: ds.StringMap
  description: |-
    ### [`set`](#set)`(``key:`[`String`](../../string "String - The basic String class.")`,``value:``T``):`[`Void`](../../void "Void - The standard Void type.")

    ### See [`Map.set`](../../map#set)
- name: ds.StringMap.toString()
  id: haxe/ds/stringmap#toString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: ds.StringMap
  description: "### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n### See [`Map.toString`](../../map#toString)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/StringMap.html](https://api.haxe.org/haxe/ds/StringMap.html)"
- name: ds.TreeNode
  id: haxe/ds/treenode
  summary: A tree node of haxe.ds.BalancedTree
  description: "# TreeNode\\<K, V\\>\n\npackage [haxe.ds](index)\n\nimport [haxe.ds.BalancedTree](balancedtree)\n\n*Available on all platforms*\n\nA tree node of [`haxe.ds.BalancedTree`](balancedtree#BalancedTree).\n\n## Constructor\n\n### [`new`](#new)`(``l:`[`TreeNode`](treenode \"haxe.ds.TreeNode - A tree node of haxe.\")`<``K``, ``V``>,`` ``k:``K``,`` ``v:``V``,`` ``r:`[`TreeNode`](treenode \"haxe.ds.TreeNode - A tree node of haxe.\")`<``K``, ``V``>,`` ``h:`[`Int`](../../int \"Int - The standard Int type.\")` = -1``)`\n\n## Variables\n\n### [`key`](#key)`:``K`\n\n### [`left`](#left)`:`[`TreeNode`](treenode \"haxe.ds.TreeNode - A tree node of haxe.\")`<``K``, ``V``>`\n\n### [`right`](#right)`:`[`TreeNode`](treenode \"haxe.ds.TreeNode - A tree node of haxe.\")`<``K``, ``V``>`\n\n### [`value`](#value)`:``V`\n\n## Methods\n\n### `inline`[`get_height`](#get_height)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/TreeNode.html](https://api.haxe.org/haxe/ds/TreeNode.html)"
- name: ds.TreeNode.get_height()
  id: haxe/ds/treenode#get_height
  summary: null
  belongs_to: ds.TreeNode
  description: '### `inline`[`get_height`](#get_height)`():`[`Int`](../../int "Int - The standard Int type.")'
- name: ds.TreeNode.key
  id: haxe/ds/treenode#key
  summary: null
  belongs_to: ds.TreeNode
  description: '### [`key`](#key)`:``K`'
- name: ds.TreeNode.left
  id: haxe/ds/treenode#left
  summary: null
  belongs_to: ds.TreeNode
  description: '### [`left`](#left)`:`[`TreeNode`](treenode "haxe.ds.TreeNode - A tree node of haxe.")`<``K``, ``V``>`'
- name: ds.TreeNode.right
  id: haxe/ds/treenode#right
  summary: null
  belongs_to: ds.TreeNode
  description: '### [`right`](#right)`:`[`TreeNode`](treenode "haxe.ds.TreeNode - A tree node of haxe.")`<``K``, ``V``>`'
- name: ds.TreeNode.toString()
  id: haxe/ds/treenode#toString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: ds.TreeNode
  description: "### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/TreeNode.html](https://api.haxe.org/haxe/ds/TreeNode.html)"
- name: ds.TreeNode.value
  id: haxe/ds/treenode#value
  summary: null
  belongs_to: ds.TreeNode
  description: |-
    ### [`value`](#value)`:``V`

    ## Methods
- name: ds.UnsafeStringMap
  id: haxe/ds/unsafestringmap
  summary: This is similar to StringMap excepts that it does not sanitize the keys
  description: "# UnsafeStringMap\\<T\\>\n\npackage [haxe.ds](index)\n\nimplements [IMap](../imap \"haxe.IMap\")\\<[String](../../string \"String - The basic String class.\"), T\\>\n\n*Available on flash*\n\nThis is similar to [`StringMap`](stringmap#StringMap) excepts that it does not sanitize the keys. As a result, it will be faster to access the map for reading, but it might fail with some reserved keys such as `constructor` or `prototype`.\n\n## Constructor\n\n### [`new`](#new)`()`\n\n## Methods\n\n### `inline`[`clear`](#clear)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`copy`](#copy)`():`[`UnsafeStringMap`](unsafestringmap \"haxe.ds.UnsafeStringMap - This is similar to StringMap excepts that it does not sanitize the keys.\")`<``T``>`\n\n### `inline`[`exists`](#exists)`(``key:`[`String`](../../string \"String - The basic String class.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### `inline`[`get`](#get)`(``key:`[`String`](../../string \"String - The basic String class.\")`):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\n### `inline`[`iterator`](#iterator)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``T``>`\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator \"KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.\")`<`[`String`](../../string \"String - The basic String class.\")`, ``T``>`\n\n### `inline`[`keys`](#keys)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### [`remove`](#remove)`(``key:`[`String`](../../string \"String - The basic String class.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### `inline`[`set`](#set)`(``key:`[`String`](../../string \"String - The basic String class.\")`,`` ``value:``T``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/UnsafeStringMap.html](https://api.haxe.org/haxe/ds/UnsafeStringMap.html)"
- name: ds.UnsafeStringMap.clear()
  id: haxe/ds/unsafestringmap#clear
  summary: null
  belongs_to: ds.UnsafeStringMap
  description: '### `inline`[`clear`](#clear)`():`[`Void`](../../void "Void - The standard Void type.")'
- name: ds.UnsafeStringMap.copy()
  id: haxe/ds/unsafestringmap#copy
  summary: null
  belongs_to: ds.UnsafeStringMap
  description: '### [`copy`](#copy)`():`[`UnsafeStringMap`](unsafestringmap "haxe.ds.UnsafeStringMap - This is similar to StringMap excepts that it does not sanitize the keys.")`<``T``>`'
- name: ds.UnsafeStringMap.exists()
  id: haxe/ds/unsafestringmap#exists
  summary: null
  belongs_to: ds.UnsafeStringMap
  description: '### `inline`[`exists`](#exists)`(``key:`[`String`](../../string "String - The basic String class.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: ds.UnsafeStringMap.get()
  id: haxe/ds/unsafestringmap#get
  summary: null
  belongs_to: ds.UnsafeStringMap
  description: '### `inline`[`get`](#get)`(``key:`[`String`](../../string "String - The basic String class.")`):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`'
- name: ds.UnsafeStringMap.iterator()
  id: haxe/ds/unsafestringmap#iterator
  summary: null
  belongs_to: ds.UnsafeStringMap
  description: '### `inline`[`iterator`](#iterator)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``T``>`'
- name: ds.UnsafeStringMap.keys()
  id: haxe/ds/unsafestringmap#keys
  summary: null
  belongs_to: ds.UnsafeStringMap
  description: '### `inline`[`keys`](#keys)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: ds.UnsafeStringMap.keyValueIterator()
  id: haxe/ds/unsafestringmap#keyValueIterator
  summary: null
  belongs_to: ds.UnsafeStringMap
  description: '### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator "KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.")`<`[`String`](../../string "String - The basic String class.")`, ``T``>`'
- name: ds.UnsafeStringMap.remove()
  id: haxe/ds/unsafestringmap#remove
  summary: null
  belongs_to: ds.UnsafeStringMap
  description: '### [`remove`](#remove)`(``key:`[`String`](../../string "String - The basic String class.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: ds.UnsafeStringMap.set()
  id: haxe/ds/unsafestringmap#set
  summary: null
  belongs_to: ds.UnsafeStringMap
  description: '### `inline`[`set`](#set)`(``key:`[`String`](../../string "String - The basic String class.")`,``value:``T``):`[`Void`](../../void "Void - The standard Void type.")'
- name: ds.UnsafeStringMap.toString()
  id: haxe/ds/unsafestringmap#toString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: ds.UnsafeStringMap
  description: "### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/UnsafeStringMap.html](https://api.haxe.org/haxe/ds/UnsafeStringMap.html)"
- name: ds.Vector
  id: haxe/ds/vector
  summary: A Vector is a storage of fixed size
  description: "# Vector\\<T\\>(VectorData\\<T\\>)\n\npackage [haxe.ds](index)\n\n*Available on all platforms*\n\nA Vector is a storage of fixed size. It can be faster than Array on some targets, and is never slower.\n\nSee also:\n\n- <https://haxe.org/manual/std-vector.html>\n\n## Static methods\n\n### `static`[`blit`](#blit)`<``T``>(``src:`[`Vector`](vector \"haxe.ds.Vector - A Vector is a storage of fixed size.\")`<``T``>,`` ``srcPos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``dest:`[`Vector`](vector \"haxe.ds.Vector - A Vector is a storage of fixed size.\")`<``T``>,`` ``destPos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nCopies `length` of elements from `src` Vector, beginning at `srcPos` to `dest` Vector, beginning at `destPos`\n\nThe results are unspecified if `length` results in out-of-bounds access, or if `src` or `dest` are null\n\n### `static``inline`[`fromArrayCopy`](#fromArrayCopy)`<``T``>(``array:`[`Array`](../../array \"Array\")`<``T``>``):`[`Vector`](vector \"haxe.ds.Vector - A Vector is a storage of fixed size.\")`<``T``>`\n\nCreates a new Vector by copying the elements of `array`.\n\nThis always creates a copy, even on platforms where the internal representation is Array.\n\nThe elements are not copied and retain their identity, so `a[i] == `[`Vector.fromArrayCopy`](vector#fromArrayCopy)`(a).get(i)` is true for any valid i.\n\nIf `array` is null, the result is unspecified.\n\n### `static``inline`[`fromData`](#fromData)`<``T``>(``data:``VectorData``<``T``>``):`[`Vector`](vector \"haxe.ds.Vector - A Vector is a storage of fixed size.\")`<``T``>`\n\nInitializes a new Vector from `data`.\n\nSince `data` is the internal representation of Vector, this is a no-op.\n\nIf `data` is null, the corresponding Vector is also `null`.\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nReturns the length of `this` Vector.\n\n## Methods\n\n### `inline`[`copy`](#copy)`<``T``>():`[`Vector`](vector \"haxe.ds.Vector - A Vector is a storage of fixed size.\")`<``T``>`\n\nReturns a shallow copy of `this` Vector.\n\nThe elements are not copied and retain their identity, so `a[i] == a.copy()[i]` is true for any valid `i`. However, `a == a.copy()` is always false.\n\n### `inline`[`get`](#get)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`):``T`\n\nReturns the value at index `index`.\n\nIf `index` is negative or exceeds `this.`[`length`](#length), the result is unspecified.\n\n### [`join`](#join)`<``T``>(``sep:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nReturns a string representation of `this` Vector, with `sep` separating each element.\n\n### The result of this operation is equal to [`Std.string`](../../std#string)`(this[0]) + sep + `[`Std.string`](../../std#string)`(this[1]) + sep + ... + sep + `[`Std.string`](../../std#string)`(this[this.`[`length`](#length)`-1])`\n\nIf `this` Vector has length 0, the result is the empty String `\"\"`. If `this` has exactly one element, the result is equal to a call to [`Std.string`](../../std#string)`(this[0])`.\n\nIf `sep` is null, the result is unspecified.\n\n### `inline`[`map`](#map)`<``S``>(``f:``T`` ‑> ``S``):`[`Vector`](vector \"haxe.ds.Vector - A Vector is a storage of fixed size.\")`<``S``>`\n\nCreates a new Vector by applying function `f` to all elements of `this`.\n\nThe order of elements is preserved.\n\nIf `f` is null, the result is unspecified.\n\n### `inline`[`set`](#set)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``val:``T``):``T`\n\nSets the value at index `index` to `val`.\n\nIf `index` is negative or exceeds `this.`[`length`](#length), the result is unspecified.\n\n### `inline`[`sort`](#sort)`<``T``>(``f:(``T``, ``T``) ‑> `[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nSorts `this` Vector according to the comparison function `f`, where `f(x,y)` returns 0 if x == y, a positive Int if x \\> y and a negative Int if x \\< y.\n\nThis operation modifies `this` Vector in place.\n\nThe sort operation is not guaranteed to be stable, which means that the order of equal elements may not be retained.\n\nIf `f` is null, the result is unspecified.\n\n### [`toArray`](#toArray)`():`[`Array`](../../array \"Array\")`<``T``>`\n\nCreates a new Array, copy the content from the Vector to it, and returns it.\n\n### `inline`[`toData`](#toData)`():``VectorData``<``T``>`\n\nExtracts the data of `this` Vector.\n\nThis returns the internal representation type.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/Vector.html](https://api.haxe.org/haxe/ds/Vector.html)"
- name: ds.Vector.blit()
  id: haxe/ds/vector#blit
  summary: null
  belongs_to: ds.Vector
  description: |-
    ### `static`[`blit`](#blit)`<``T``>(``src:`[`Vector`](vector "haxe.ds.Vector - A Vector is a storage of fixed size.")`<``T``>,``srcPos:`[`Int`](../../int "Int - The standard Int type.")`,``dest:`[`Vector`](vector "haxe.ds.Vector - A Vector is a storage of fixed size.")`<``T``>,``destPos:`[`Int`](../../int "Int - The standard Int type.")`,``len:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Copies `length` of elements from `src` Vector, beginning at `srcPos` to `dest` Vector, beginning at `destPos`

    The results are unspecified if `length` results in out-of-bounds access, or if `src` or `dest` are null
- name: ds.Vector.copy()
  id: haxe/ds/vector#copy
  summary: Returns a shallow copy of this Vector
  belongs_to: ds.Vector
  description: |-
    ### `inline`[`copy`](#copy)`<``T``>():`[`Vector`](vector "haxe.ds.Vector - A Vector is a storage of fixed size.")`<``T``>`

    Returns a shallow copy of `this` Vector.

    The elements are not copied and retain their identity, so `a[i] == a.copy()[i]` is true for any valid `i`. However, `a == a.copy()` is always false.
- name: ds.Vector.fromArrayCopy()
  id: haxe/ds/vector#fromArrayCopy
  summary: Creates a new Vector by copying the elements of array
  belongs_to: ds.Vector
  description: |-
    ### `static``inline`[`fromArrayCopy`](#fromArrayCopy)`<``T``>(``array:`[`Array`](../../array "Array")`<``T``>``):`[`Vector`](vector "haxe.ds.Vector - A Vector is a storage of fixed size.")`<``T``>`

    Creates a new Vector by copying the elements of `array`.

    This always creates a copy, even on platforms where the internal representation is Array.

    The elements are not copied and retain their identity, so `a[i] == `[`Vector.fromArrayCopy`](vector#fromArrayCopy)`(a).get(i)` is true for any valid i.

    If `array` is null, the result is unspecified.
- name: ds.Vector.fromData()
  id: haxe/ds/vector#fromData
  summary: Initializes a new Vector from data
  belongs_to: ds.Vector
  description: |-
    ### `static``inline`[`fromData`](#fromData)`<``T``>(``data:``VectorData``<``T``>``):`[`Vector`](vector "haxe.ds.Vector - A Vector is a storage of fixed size.")`<``T``>`

    Initializes a new Vector from `data`.

    Since `data` is the internal representation of Vector, this is a no-op.

    If `data` is null, the corresponding Vector is also `null`.

    ## Variables
- name: ds.Vector.get()
  id: haxe/ds/vector#get
  summary: Returns the value at index index
  belongs_to: ds.Vector
  description: |-
    ### `inline`[`get`](#get)`(``index:`[`Int`](../../int "Int - The standard Int type.")`):``T`

    Returns the value at index `index`.

    If `index` is negative or exceeds `this.`[`length`](#length), the result is unspecified.
- name: ds.Vector.join()
  id: haxe/ds/vector#join
  summary: Returns a string representation of this Vector, with sep separating each element
  belongs_to: ds.Vector
  description: |-
    ### [`join`](#join)`<``T``>(``sep:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    Returns a string representation of `this` Vector, with `sep` separating each element.

    ### The result of this operation is equal to [`Std.string`](../../std#string)`(this[0]) + sep + `[`Std.string`](../../std#string)`(this[1]) + sep + ... + sep + `[`Std.string`](../../std#string)`(this[this.`[`length`](#length)`-1])`

    If `this` Vector has length 0, the result is the empty String `""`. If `this` has exactly one element, the result is equal to a call to [`Std.string`](../../std#string)`(this[0])`.

    If `sep` is null, the result is unspecified.
- name: ds.Vector.length
  id: haxe/ds/vector#length
  summary: Returns the length of this Vector
  belongs_to: ds.Vector
  description: |-
    ### `read only`[`length`](#length)`:`[`Int`](../../int "Int - The standard Int type.")

    Returns the length of `this` Vector.

    ## Methods
- name: ds.Vector.map()
  id: haxe/ds/vector#map
  summary: Creates a new Vector by applying function f to all elements of this
  belongs_to: ds.Vector
  description: |-
    ### `inline`[`map`](#map)`<``S``>(``f:``T`` ‑> ``S``):`[`Vector`](vector "haxe.ds.Vector - A Vector is a storage of fixed size.")`<``S``>`

    Creates a new Vector by applying function `f` to all elements of `this`.

    The order of elements is preserved.

    If `f` is null, the result is unspecified.
- name: ds.Vector.set()
  id: haxe/ds/vector#set
  summary: Sets the value at index index to val
  belongs_to: ds.Vector
  description: |-
    ### `inline`[`set`](#set)`(``index:`[`Int`](../../int "Int - The standard Int type.")`,``val:``T``):``T`

    Sets the value at index `index` to `val`.

    If `index` is negative or exceeds `this.`[`length`](#length), the result is unspecified.
- name: ds.Vector.sort()
  id: haxe/ds/vector#sort
  summary: Sorts this Vector according to the comparison function f, where f(x,y) returns 0 if x == y, a positive Int if x > y and a negative Int if x < y
  belongs_to: ds.Vector
  description: |-
    ### `inline`[`sort`](#sort)`<``T``>(``f:(``T``, ``T``) ‑> `[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Sorts `this` Vector according to the comparison function `f`, where `f(x,y)` returns 0 if x == y, a positive Int if x \> y and a negative Int if x \< y.

    This operation modifies `this` Vector in place.

    The sort operation is not guaranteed to be stable, which means that the order of equal elements may not be retained.

    If `f` is null, the result is unspecified.
- name: ds.Vector.toArray()
  id: haxe/ds/vector#toArray
  summary: Creates a new Array, copy the content from the Vector to it, and returns it
  belongs_to: ds.Vector
  description: |-
    ### [`toArray`](#toArray)`():`[`Array`](../../array "Array")`<``T``>`

    Creates a new Array, copy the content from the Vector to it, and returns it.
- name: ds.Vector.toData()
  id: haxe/ds/vector#toData
  summary: Extracts the data of this Vector
  belongs_to: ds.Vector
  description: "### `inline`[`toData`](#toData)`():``VectorData``<``T``>`\n\nExtracts the data of `this` Vector.\n\nThis returns the internal representation type.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/Vector.html](https://api.haxe.org/haxe/ds/Vector.html)"
- name: ds.WeakMap
  id: haxe/ds/weakmap
  summary: WeakMap allows mapping of object keys to arbitrary values
  description: "# WeakMap\\<K, V\\>\n\npackage [haxe.ds](index)\n\nimplements [IMap](../imap \"haxe.IMap\")\\<K, V\\>\n\n*Available on all platforms*\n\nWeakMap allows mapping of object keys to arbitrary values.\n\nThe keys are considered to be weak references on static targets.\n\nSee [`Map`](../../map) for documentation details.\n\nSee also:\n\n- <https://haxe.org/manual/std-Map.html>\n\n## Constructor\n\n### [`new`](#new)`()`\n\nCreates a new WeakMap.\n\n## Methods\n\n### [`clear`](#clear)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n### See [`Map.clear`](../../map#clear)\n\n### [`copy`](#copy)`():`[`WeakMap`](weakmap \"haxe.ds.WeakMap - WeakMap allows mapping of object keys to arbitrary values.\")`<``K``, ``V``>`\n\n### See [`Map.copy`](../../map#copy)\n\n### [`exists`](#exists)`(``key:``K``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Map.exists`](../../map#exists)\n\n### [`get`](#get)`(``key:``K``):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``V``>`\n\n### See [`Map.get`](../../map#get)\n\n### [`iterator`](#iterator)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``V``>`\n\n### See [`Map.iterator`](../../map#iterator)\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator \"KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.\")`<``K``, ``V``>`\n\n### See [`Map.keyValueIterator`](../../map#keyValueIterator)\n\n### [`keys`](#keys)`():`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``K``>`\n\n### See [`Map.keys`](../../map#keys)\n\n### [`remove`](#remove)`(``key:``K``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Map.remove`](../../map#remove)\n\n### [`set`](#set)`(``key:``K``,`` ``value:``V``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### See [`Map.set`](../../map#set)\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n### See [`Map.toString`](../../map#toString)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/WeakMap.html](https://api.haxe.org/haxe/ds/WeakMap.html)"
- name: ds.WeakMap.clear()
  id: haxe/ds/weakmap#clear
  summary: null
  belongs_to: ds.WeakMap
  description: |-
    ### [`clear`](#clear)`():`[`Void`](../../void "Void - The standard Void type.")

    ### See [`Map.clear`](../../map#clear)
- name: ds.WeakMap.copy()
  id: haxe/ds/weakmap#copy
  summary: null
  belongs_to: ds.WeakMap
  description: |-
    ### [`copy`](#copy)`():`[`WeakMap`](weakmap "haxe.ds.WeakMap - WeakMap allows mapping of object keys to arbitrary values.")`<``K``, ``V``>`

    ### See [`Map.copy`](../../map#copy)
- name: ds.WeakMap.exists()
  id: haxe/ds/weakmap#exists
  summary: null
  belongs_to: ds.WeakMap
  description: |-
    ### [`exists`](#exists)`(``key:``K``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Map.exists`](../../map#exists)
- name: ds.WeakMap.get()
  id: haxe/ds/weakmap#get
  summary: null
  belongs_to: ds.WeakMap
  description: |-
    ### [`get`](#get)`(``key:``K``):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``V``>`

    ### See [`Map.get`](../../map#get)
- name: ds.WeakMap.iterator()
  id: haxe/ds/weakmap#iterator
  summary: null
  belongs_to: ds.WeakMap
  description: |-
    ### [`iterator`](#iterator)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``V``>`

    ### See [`Map.iterator`](../../map#iterator)
- name: ds.WeakMap.keys()
  id: haxe/ds/weakmap#keys
  summary: null
  belongs_to: ds.WeakMap
  description: |-
    ### [`keys`](#keys)`():`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``K``>`

    ### See [`Map.keys`](../../map#keys)
- name: ds.WeakMap.keyValueIterator()
  id: haxe/ds/weakmap#keyValueIterator
  summary: null
  belongs_to: ds.WeakMap
  description: |-
    ### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../../keyvalueiterator "KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.")`<``K``, ``V``>`

    ### See [`Map.keyValueIterator`](../../map#keyValueIterator)
- name: ds.WeakMap.remove()
  id: haxe/ds/weakmap#remove
  summary: null
  belongs_to: ds.WeakMap
  description: |-
    ### [`remove`](#remove)`(``key:``K``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Map.remove`](../../map#remove)
- name: ds.WeakMap.set()
  id: haxe/ds/weakmap#set
  summary: null
  belongs_to: ds.WeakMap
  description: |-
    ### [`set`](#set)`(``key:``K``,``value:``V``):`[`Void`](../../void "Void - The standard Void type.")

    ### See [`Map.set`](../../map#set)
- name: ds.WeakMap.toString()
  id: haxe/ds/weakmap#toString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: ds.WeakMap
  description: "### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n### See [`Map.toString`](../../map#toString)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ds/WeakMap.html](https://api.haxe.org/haxe/ds/WeakMap.html)"
- name: Dynamic
  id: dynamic
  summary: Dynamic is a special type which is compatible with all other types
  description: "# Dynamic\\<T\\>\n\n[no package](index)\n\n*Available on all platforms*\n\n[`Dynamic`](dynamic) is a special type which is compatible with all other types.\n\nUse of [`Dynamic`](dynamic) should be minimized as it prevents several compiler checks and optimizations. See [`Any`](any) type for a safer alternative for representing values of any type.\n\nSee also:\n\n- <https://haxe.org/manual/types-dynamic.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Dynamic.html](https://api.haxe.org/Dynamic.html)"
- name: DynamicAccess
  id: haxe/dynamicaccess
  summary: DynamicAccess is an abstract type for working with anonymous structures that are intended to hold collections of objects by the string key
  description: "# DynamicAccess\\<T\\>([Dynamic](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\\<T\\>)\n\npackage [haxe](index)\n\nfrom [Dynamic](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\\<T\\> to [Dynamic](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\\<T\\>\n\n*Available on all platforms*\n\nDynamicAccess is an abstract type for working with anonymous structures that are intended to hold collections of objects by the string key.\n\nFor example, these types of structures are often created from JSON.\n\nBasically, it wraps [`Reflect`](../reflect) calls in a [`Map`](../map)-like interface.\n\n## Methods\n\n### `inline`[`copy`](#copy)`():`[`DynamicAccess`](dynamicaccess \"haxe.DynamicAccess - DynamicAccess is an abstract type for working with anonymous structures that are intended to hold collections of objects by the string key.\")`<``T``>`\n\nReturns a shallow copy of the structure\n\n### `inline`[`exists`](#exists)`(``key:`[`String`](../string \"String - The basic String class.\")`):`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if the structure contains a specified `key`.\n\nIf `key` is `null`, the result is unspecified.\n\n### `inline`[`get`](#get)`(``key:`[`String`](../string \"String - The basic String class.\")`):`[`Null`](../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\nReturns a value by specified `key`.\n\nIf the structure does not contain the given key, `null` is returned.\n\nIf `key` is `null`, the result is unspecified.\n\n### `inline`[`iterator`](#iterator)`():`[`DynamicAccessIterator`](iterators/dynamicaccessiterator \"haxe.iterators.DynamicAccessIterator - This iterator can be used to iterate over the values of haxe.\")`<``T``>`\n\nReturns an Iterator over the values of this [`DynamicAccess`](dynamicaccess#DynamicAccess).\n\nThe order of values is undefined.\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`DynamicAccessKeyValueIterator`](iterators/dynamicaccesskeyvalueiterator \"haxe.iterators.DynamicAccessKeyValueIterator - This Key/Value iterator can be used to iterate over haxe.\")`<``T``>`\n\nReturns an Iterator over the keys and values of this [`DynamicAccess`](dynamicaccess#DynamicAccess).\n\nThe order of values is undefined.\n\n### `inline`[`keys`](#keys)`():`[`Array`](../array \"Array\")`<`[`String`](../string \"String - The basic String class.\")`>`\n\nReturns an array of `keys` in a structure.\n\n### `inline`[`remove`](#remove)`(``key:`[`String`](../string \"String - The basic String class.\")`):`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nRemoves a specified `key` from the structure.\n\nReturns true, if `key` was present in structure, or false otherwise.\n\nIf `key` is `null`, the result is unspecified.\n\n### `inline`[`set`](#set)`(``key:`[`String`](../string \"String - The basic String class.\")`,`` ``value:``T``):``T`\n\nSets a `value` for a specified `key`.\n\nIf the structure contains the given key, its value will be overwritten.\n\nReturns the given value.\n\nIf `key` is `null`, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/DynamicAccess.html](https://api.haxe.org/haxe/DynamicAccess.html)"
- name: DynamicAccess.copy()
  id: haxe/dynamicaccess#copy
  summary: null
  belongs_to: DynamicAccess
  description: |-
    ### `inline`[`copy`](#copy)`():`[`DynamicAccess`](dynamicaccess "haxe.DynamicAccess - DynamicAccess is an abstract type for working with anonymous structures that are intended to hold collections of objects by the string key.")`<``T``>`

    Returns a shallow copy of the structure
- name: DynamicAccess.exists()
  id: haxe/dynamicaccess#exists
  summary: Tells if the structure contains a specified key
  belongs_to: DynamicAccess
  description: |-
    ### `inline`[`exists`](#exists)`(``key:`[`String`](../string "String - The basic String class.")`):`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if the structure contains a specified `key`.

    If `key` is `null`, the result is unspecified.
- name: DynamicAccess.get()
  id: haxe/dynamicaccess#get
  summary: Returns a value by specified key
  belongs_to: DynamicAccess
  description: |-
    ### `inline`[`get`](#get)`(``key:`[`String`](../string "String - The basic String class.")`):`[`Null`](../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`

    Returns a value by specified `key`.

    If the structure does not contain the given key, `null` is returned.

    If `key` is `null`, the result is unspecified.
- name: DynamicAccess.iterator()
  id: haxe/dynamicaccess#iterator
  summary: Returns an Iterator over the values of this DynamicAccess
  belongs_to: DynamicAccess
  description: |-
    ### `inline`[`iterator`](#iterator)`():`[`DynamicAccessIterator`](iterators/dynamicaccessiterator "haxe.iterators.DynamicAccessIterator - This iterator can be used to iterate over the values of haxe.")`<``T``>`

    Returns an Iterator over the values of this [`DynamicAccess`](dynamicaccess#DynamicAccess).

    The order of values is undefined.
- name: DynamicAccess.keys()
  id: haxe/dynamicaccess#keys
  summary: Returns an array of keys in a structure
  belongs_to: DynamicAccess
  description: |-
    ### `inline`[`keys`](#keys)`():`[`Array`](../array "Array")`<`[`String`](../string "String - The basic String class.")`>`

    Returns an array of `keys` in a structure.
- name: DynamicAccess.keyValueIterator()
  id: haxe/dynamicaccess#keyValueIterator
  summary: Returns an Iterator over the keys and values of this DynamicAccess
  belongs_to: DynamicAccess
  description: |-
    ### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`DynamicAccessKeyValueIterator`](iterators/dynamicaccesskeyvalueiterator "haxe.iterators.DynamicAccessKeyValueIterator - This Key/Value iterator can be used to iterate over haxe.")`<``T``>`

    Returns an Iterator over the keys and values of this [`DynamicAccess`](dynamicaccess#DynamicAccess).

    The order of values is undefined.
- name: DynamicAccess.remove()
  id: haxe/dynamicaccess#remove
  summary: Removes a specified key from the structure
  belongs_to: DynamicAccess
  description: |-
    ### `inline`[`remove`](#remove)`(``key:`[`String`](../string "String - The basic String class.")`):`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")

    Removes a specified `key` from the structure.

    Returns true, if `key` was present in structure, or false otherwise.

    If `key` is `null`, the result is unspecified.
- name: DynamicAccess.set()
  id: haxe/dynamicaccess#set
  summary: Sets a value for a specified key
  belongs_to: DynamicAccess
  description: "### `inline`[`set`](#set)`(``key:`[`String`](../string \"String - The basic String class.\")`,``value:``T``):``T`\n\nSets a `value` for a specified `key`.\n\nIf the structure contains the given key, its value will be overwritten.\n\nReturns the given value.\n\nIf `key` is `null`, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/DynamicAccess.html](https://api.haxe.org/haxe/DynamicAccess.html)"
- name: Entropy
  id: mbedtls/entropy
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Entropy\n\npackage [mbedtls](index)\n\n*Available on macro*\n\n## Constructor\n\n### [`new`](#new)`()`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/Entropy.html](https://api.haxe.org/mbedtls/Entropy.html)"
- name: EntryPoint
  id: haxe/entrypoint
  summary: If haxe.MainLoop is kept from DCE, then we will insert an haxe.EntryPoint.run() call just at then end of main()
  description: "# EntryPoint\n\npackage [haxe](index)\n\n*Available on all platforms*\n\nIf [`haxe.MainLoop`](mainloop#MainLoop) is kept from DCE, then we will insert an [`haxe.EntryPoint.run`](entrypoint#run)`()` call just at then end of `main()`. This class can be redefined by custom frameworks so they can handle their own main loop logic.\n\n## Static variables\n\n### `static``read only`[`threadCount`](#threadCount)`:`[`Int`](../int \"Int - The standard Int type.\")` = 0`\n\n## Static methods\n\n### `static`[`addThread`](#addThread)`(``f:() ‑> `[`Void`](../void \"Void - The standard Void type.\")`):`[`Void`](../void \"Void - The standard Void type.\")\n\n### `static`[`run`](#run)`():`[`Void`](../void \"Void - The standard Void type.\")\n\nStart the main loop. Depending on the platform, this can return immediately or will only return when the application exits.\n\n### `static`[`runInMainThread`](#runInMainThread)`(``f:() ‑> `[`Void`](../void \"Void - The standard Void type.\")`):`[`Void`](../void \"Void - The standard Void type.\")\n\n### `static`[`wakeup`](#wakeup)`():`[`Void`](../void \"Void - The standard Void type.\")\n\n### Wakeup a sleeping `run()`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/EntryPoint.html](https://api.haxe.org/haxe/EntryPoint.html)"
- name: EntryPoint.addThread()
  id: haxe/entrypoint#addThread
  summary: null
  belongs_to: EntryPoint
  description: '### `static`[`addThread`](#addThread)`(``f:() ‑> `[`Void`](../void "Void - The standard Void type.")`):`[`Void`](../void "Void - The standard Void type.")'
- name: EntryPoint.run()
  id: haxe/entrypoint#run
  summary: Start the main loop
  belongs_to: EntryPoint
  description: |-
    ### `static`[`run`](#run)`():`[`Void`](../void "Void - The standard Void type.")

    Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.
- name: EntryPoint.runInMainThread()
  id: haxe/entrypoint#runInMainThread
  summary: null
  belongs_to: EntryPoint
  description: '### `static`[`runInMainThread`](#runInMainThread)`(``f:() ‑> `[`Void`](../void "Void - The standard Void type.")`):`[`Void`](../void "Void - The standard Void type.")'
- name: EntryPoint.threadCount
  id: haxe/entrypoint#threadCount
  summary: null
  belongs_to: EntryPoint
  description: |-
    ### `static``read only`[`threadCount`](#threadCount)`:`[`Int`](../int "Int - The standard Int type.")` = 0`

    ## Static methods
- name: EntryPoint.wakeup()
  id: haxe/entrypoint#wakeup
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: EntryPoint
  description: "### `static`[`wakeup`](#wakeup)`():`[`Void`](../void \"Void - The standard Void type.\")\n\n### Wakeup a sleeping `run()`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/EntryPoint.html](https://api.haxe.org/haxe/EntryPoint.html)"
- name: Enum
  id: enum
  summary: An abstract type that represents an Enum type
  description: "# Enum\\<T\\>\n\n[no package](index)\n\n*Available on all platforms*\n\nAn abstract type that represents an Enum type.\n\nThe corresponding enum instance type is [`EnumValue`](enumvalue).\n\nSee [`Type`](type) for the Haxe Reflection API.\n\nSee also:\n\n- <https://haxe.org/manual/types-enum-instance.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Enum.html](https://api.haxe.org/Enum.html)"
- name: EnumFlags
  id: haxe/enumflags
  summary: A typed interface for bit flags
  description: "# EnumFlags\\<T\\>([Int](../int \"Int - The standard Int type.\"))\n\npackage [haxe](index)\n\n*Available on all platforms*\n\nA typed interface for bit flags. This is not a real object, only a typed interface for an actual Int. Each flag can be tested/set with the corresponding enum instance. Up to 32 flags can be stored that way.\n\nEnum constructor indices are preserved from Haxe syntax, so the first declared is index 0, the next index 1 etc. The methods are optimized if the enum instance is passed directly, e.g. as `has(EnumCtor)`. Otherwise [`Type.enumIndex`](../type#enumIndex)`()` reflection is used.\n\n## Static methods\n\n### `static``inline`[`ofInt`](#ofInt)`<``T``>(``i:`[`Int`](../int \"Int - The standard Int type.\")`):`[`EnumFlags`](enumflags \"haxe.EnumFlags - A typed interface for bit flags.\")`<``T``>`\n\nConvert a integer bitflag into a typed one (this is a no-op, it does not have any impact on speed).\n\n## Methods\n\n### `inline`[`has`](#has)`(``v:``T``):`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nChecks if the index of enum instance `v` is set.\n\nThis method is optimized if `v` is an enum instance expression such as `SomeEnum.SomeCtor`.\n\nIf `v` is `null`, the result is unspecified.\n\n### `inline`[`set`](#set)`(``v:``T``):`[`Void`](../void \"Void - The standard Void type.\")\n\nSets the index of enum instance `v`.\n\nThis method is optimized if `v` is an enum instance expression such as `SomeEnum.SomeCtor`.\n\nIf `v` is `null`, the result is unspecified.\n\n### `inline`[`toInt`](#toInt)`():`[`Int`](../int \"Int - The standard Int type.\")\n\nConvert the typed bitflag into the corresponding int value (this is a no-op, it doesn't have any impact on speed).\n\n### `inline`[`unset`](#unset)`(``v:``T``):`[`Void`](../void \"Void - The standard Void type.\")\n\nUnsets the index of enum instance `v`.\n\nThis method is optimized if `v` is an enum instance expression such as `SomeEnum.SomeCtor`.\n\nIf `v` is `null`, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/EnumFlags.html](https://api.haxe.org/haxe/EnumFlags.html)"
- name: EnumFlags.has()
  id: haxe/enumflags#has
  summary: Checks if the index of enum instance v is set
  belongs_to: EnumFlags
  description: |-
    ### `inline`[`has`](#has)`(``v:``T``):`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")

    Checks if the index of enum instance `v` is set.

    This method is optimized if `v` is an enum instance expression such as `SomeEnum.SomeCtor`.

    If `v` is `null`, the result is unspecified.
- name: EnumFlags.ofInt()
  id: haxe/enumflags#ofInt
  summary: Convert a integer bitflag into a typed one (this is a no-op, it does not have any impact on speed)
  belongs_to: EnumFlags
  description: |-
    ### `static``inline`[`ofInt`](#ofInt)`<``T``>(``i:`[`Int`](../int "Int - The standard Int type.")`):`[`EnumFlags`](enumflags "haxe.EnumFlags - A typed interface for bit flags.")`<``T``>`

    Convert a integer bitflag into a typed one (this is a no-op, it does not have any impact on speed).

    ## Methods
- name: EnumFlags.set()
  id: haxe/enumflags#set
  summary: Sets the index of enum instance v
  belongs_to: EnumFlags
  description: |-
    ### `inline`[`set`](#set)`(``v:``T``):`[`Void`](../void "Void - The standard Void type.")

    Sets the index of enum instance `v`.

    This method is optimized if `v` is an enum instance expression such as `SomeEnum.SomeCtor`.

    If `v` is `null`, the result is unspecified.
- name: EnumFlags.toInt()
  id: haxe/enumflags#toInt
  summary: Convert the typed bitflag into the corresponding int value (this is a no-op, it doesn't have any impact on speed)
  belongs_to: EnumFlags
  description: |-
    ### `inline`[`toInt`](#toInt)`():`[`Int`](../int "Int - The standard Int type.")

    Convert the typed bitflag into the corresponding int value (this is a no-op, it doesn't have any impact on speed).
- name: EnumFlags.unset()
  id: haxe/enumflags#unset
  summary: Unsets the index of enum instance v
  belongs_to: EnumFlags
  description: "### `inline`[`unset`](#unset)`(``v:``T``):`[`Void`](../void \"Void - The standard Void type.\")\n\nUnsets the index of enum instance `v`.\n\nThis method is optimized if `v` is an enum instance expression such as `SomeEnum.SomeCtor`.\n\nIf `v` is `null`, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/EnumFlags.html](https://api.haxe.org/haxe/EnumFlags.html)"
- name: EnumTools
  id: haxe/enumtools
  summary: This class provides advanced methods on enums
  description: "# EnumTools\n\npackage [haxe](index)\n\n*Available on all platforms*\n\nThis class provides advanced methods on enums. It is ideally used with `using `[`EnumTools`](enumtools#EnumTools) and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html) to the `enum` types.\n\nIf the first argument to any of the methods is `null`, the result is unspecified.\n\n## Static methods\n\n### `static``inline`[`createAll`](#createAll)`<``T``>(``e:`[`Enum`](../enum \"Enum - An abstract type that represents an Enum type.\")`<``T``>``):`[`Array`](../array \"Array\")`<``T``>`\n\nReturns a list of all constructors of enum `e` that require no arguments.\n\nThis may return the empty Array `[]` if all constructors of `e` require arguments.\n\nOtherwise an instance of `e` constructed through each of its non- argument constructors is returned, in the order of the constructor declaration.\n\nIf `e` is `null`, the result is unspecified.\n\n### `static``inline`[`createByIndex`](#createByIndex)`<``T``>(``e:`[`Enum`](../enum \"Enum - An abstract type that represents an Enum type.\")`<``T``>,`` ``index:`[`Int`](../int \"Int - The standard Int type.\")`,`` ``?params:`[`Array`](../array \"Array\")`<`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>``):``T`\n\nCreates an instance of enum `e` by calling its constructor number `index` with arguments `params`.\n\nThe constructor indices are preserved from Haxe syntax, so the first declared is index 0, the next index 1 etc.\n\nIf `e` or `index` is `null`, or if enum `e` has no constructor corresponding to index `index`, or if the number of elements in `params` does not match the expected number of constructor arguments, or if any argument has an invalid type, the result is unspecified.\n\n### `static``inline`[`createByName`](#createByName)`<``T``>(``e:`[`Enum`](../enum \"Enum - An abstract type that represents an Enum type.\")`<``T``>,`` ``constr:`[`String`](../string \"String - The basic String class.\")`,`` ``?params:`[`Array`](../array \"Array\")`<`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>``):``T`\n\nCreates an instance of enum `e` by calling its constructor `constr` with arguments `params`.\n\nIf `e` or `constr` is `null`, or if enum `e` has no constructor named `constr`, or if the number of elements in `params` does not match the expected number of constructor arguments, or if any argument has an invalid type, the result is unspecified.\n\n### `static``inline`[`getConstructors`](#getConstructors)`<``T``>(``e:`[`Enum`](../enum \"Enum - An abstract type that represents an Enum type.\")`<``T``>``):`[`Array`](../array \"Array\")`<`[`String`](../string \"String - The basic String class.\")`>`\n\nReturns a list of the names of all constructors of enum `e`.\n\nThe order of the constructor names in the returned Array is preserved from the original syntax.\n\nIf `c` is `null`, the result is unspecified.\n\n### `static``inline`[`getName`](#getName)`<``T``>(``e:`[`Enum`](../enum \"Enum - An abstract type that represents an Enum type.\")`<``T``>``):`[`String`](../string \"String - The basic String class.\")\n\nReturns the name of enum `e`, including its path.\n\nIf `e` is inside a package, the package structure is returned dot- separated, with another dot separating the enum name:\n\n    pack1.pack2.(...).packN.EnumName\n\nIf `e` is a sub-type of a Haxe module, that module is not part of the package structure.\n\nIf `e` has no package, the enum name is returned.\n\nIf `e` is `null`, the result is unspecified.\n\nThe enum name does not include any type parameters.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/EnumTools.html](https://api.haxe.org/haxe/EnumTools.html)"
- name: EnumTools.createAll()
  id: haxe/enumtools#createAll
  summary: Returns a list of all constructors of enum e that require no arguments
  belongs_to: EnumTools
  description: |-
    ### `static``inline`[`createAll`](#createAll)`<``T``>(``e:`[`Enum`](../enum "Enum - An abstract type that represents an Enum type.")`<``T``>``):`[`Array`](../array "Array")`<``T``>`

    Returns a list of all constructors of enum `e` that require no arguments.

    This may return the empty Array `[]` if all constructors of `e` require arguments.

    Otherwise an instance of `e` constructed through each of its non- argument constructors is returned, in the order of the constructor declaration.

    If `e` is `null`, the result is unspecified.
- name: EnumTools.createByIndex()
  id: haxe/enumtools#createByIndex
  summary: Creates an instance of enum e by calling its constructor number index with arguments params
  belongs_to: EnumTools
  description: |-
    ### `static``inline`[`createByIndex`](#createByIndex)`<``T``>(``e:`[`Enum`](../enum "Enum - An abstract type that represents an Enum type.")`<``T``>,``index:`[`Int`](../int "Int - The standard Int type.")`,``?params:`[`Array`](../array "Array")`<`[`Dynamic`](../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>``):``T`

    Creates an instance of enum `e` by calling its constructor number `index` with arguments `params`.

    The constructor indices are preserved from Haxe syntax, so the first declared is index 0, the next index 1 etc.

    If `e` or `index` is `null`, or if enum `e` has no constructor corresponding to index `index`, or if the number of elements in `params` does not match the expected number of constructor arguments, or if any argument has an invalid type, the result is unspecified.
- name: EnumTools.createByName()
  id: haxe/enumtools#createByName
  summary: Creates an instance of enum e by calling its constructor constr with arguments params
  belongs_to: EnumTools
  description: |-
    ### `static``inline`[`createByName`](#createByName)`<``T``>(``e:`[`Enum`](../enum "Enum - An abstract type that represents an Enum type.")`<``T``>,``constr:`[`String`](../string "String - The basic String class.")`,``?params:`[`Array`](../array "Array")`<`[`Dynamic`](../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>``):``T`

    Creates an instance of enum `e` by calling its constructor `constr` with arguments `params`.

    If `e` or `constr` is `null`, or if enum `e` has no constructor named `constr`, or if the number of elements in `params` does not match the expected number of constructor arguments, or if any argument has an invalid type, the result is unspecified.
- name: EnumTools.getConstructors()
  id: haxe/enumtools#getConstructors
  summary: Returns a list of the names of all constructors of enum e
  belongs_to: EnumTools
  description: |-
    ### `static``inline`[`getConstructors`](#getConstructors)`<``T``>(``e:`[`Enum`](../enum "Enum - An abstract type that represents an Enum type.")`<``T``>``):`[`Array`](../array "Array")`<`[`String`](../string "String - The basic String class.")`>`

    Returns a list of the names of all constructors of enum `e`.

    The order of the constructor names in the returned Array is preserved from the original syntax.

    If `c` is `null`, the result is unspecified.
- name: EnumTools.getName()
  id: haxe/enumtools#getName
  summary: Returns the name of enum e, including its path
  belongs_to: EnumTools
  description: "### `static``inline`[`getName`](#getName)`<``T``>(``e:`[`Enum`](../enum \"Enum - An abstract type that represents an Enum type.\")`<``T``>``):`[`String`](../string \"String - The basic String class.\")\n\nReturns the name of enum `e`, including its path.\n\nIf `e` is inside a package, the package structure is returned dot- separated, with another dot separating the enum name:\n\n          pack1.pack2.(...).packN.EnumName\n\n        \n\nIf `e` is a sub-type of a Haxe module, that module is not part of the package structure.\n\nIf `e` has no package, the enum name is returned.\n\nIf `e` is `null`, the result is unspecified.\n\nThe enum name does not include any type parameters.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/EnumTools.html](https://api.haxe.org/haxe/EnumTools.html)"
- name: EnumValue
  id: enumvalue
  summary: An abstract type that represents any enum value
  description: "# EnumValue\n\n[no package](index)\n\n*Available on all platforms*\n\nAn abstract type that represents any enum value. See [`Type`](type) for the Haxe Reflection API.\n\nSee also:\n\n- <https://haxe.org/manual/types-enum-instance.html>\n\n## Methods\n\n### [`match`](#match)`(``pattern:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nMatches enum instance `e` against pattern `pattern`, returning [`true`](bool) if matching succeeded and [`false`](bool) otherwise.\n\nExample usage:\n\n``` prettyprint\nif (e.match(pattern)) {\n    // codeIfTrue\n} else {\n    // codeIfFalse\n}\n```\n\nThis is equivalent to the following code:\n\n``` prettyprint\nswitch (e) {\n    case pattern:\n        // codeIfTrue\n    case _:\n        // codeIfFalse\n}\n```\n\nThis method is implemented in the compiler. This definition exists only for documentation.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/EnumValue.html](https://api.haxe.org/EnumValue.html)"
- name: EnumValue.match()
  id: enumvalue#match
  summary: Matches enum instance e against pattern pattern, returning true if matching succeeded and false otherwise
  belongs_to: EnumValue
  description: "### [`match`](#match)`(``pattern:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nMatches enum instance `e` against pattern `pattern`, returning [`true`](bool) if matching succeeded and [`false`](bool) otherwise.\n\nExample usage:\n\n          if (e.match(pattern)) {\n        // codeIfTrue\n    } else {\n        // codeIfFalse\n    }\n        \n\nThis is equivalent to the following code:\n\n          switch (e) {\n        case pattern:\n            // codeIfTrue\n        case _:\n            // codeIfFalse\n    }\n        \n\nThis method is implemented in the compiler. This definition exists only for documentation.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/EnumValue.html](https://api.haxe.org/EnumValue.html)"
- name: EnumValueTools
  id: haxe/enumvaluetools
  summary: This class provides advanced methods on enum values
  description: "# EnumValueTools\n\npackage [haxe](index)\n\nimport [haxe.EnumTools](enumtools)\n\n*Available on all platforms*\n\nThis class provides advanced methods on enum values. It is ideally used with `using `[`EnumValueTools`](enumvaluetools#EnumValueTools) and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html) to the [`EnumValue`](../enumvalue) types.\n\nIf the first argument to any of the methods is `null`, the result is unspecified.\n\n## Static methods\n\n### `static``inline`[`equals`](#equals)`<``T``>(``a:``T``,`` ``b:``T``):`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nRecursively compares two enum instances `a` and `b` by value.\n\nUnlike `a == b`, this function performs a deep equality check on the arguments of the constructors (if there are any).\n\nIf `a` or `b` are `null`, the result is unspecified.\n\n### `static``inline`[`getIndex`](#getIndex)`(``e:`[`EnumValue`](../enumvalue \"EnumValue - An abstract type that represents any enum value.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\nReturns the index of enum instance `e`.\n\nThis corresponds to the original syntactic position of `e`. The index of the first declared constructor is 0, the next one is 1 etc.\n\nIf `e` is `null`, the result is unspecified.\n\n### `static``inline`[`getName`](#getName)`(``e:`[`EnumValue`](../enumvalue \"EnumValue - An abstract type that represents any enum value.\")`):`[`String`](../string \"String - The basic String class.\")\n\nReturns the constructor name of enum instance `e`.\n\nThe result String does not contain any constructor arguments.\n\nIf `e` is `null`, the result is unspecified.\n\n### `static``inline`[`getParameters`](#getParameters)`(``e:`[`EnumValue`](../enumvalue \"EnumValue - An abstract type that represents any enum value.\")`):`[`Array`](../array \"Array\")`<`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\nReturns a list of the constructor arguments of enum instance `e`.\n\nIf `e` has no arguments, the result is `[]`.\n\nOtherwise the result are the values that were used as arguments to `e`, in the order of their declaration.\n\nIf `e` is `null`, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/EnumValueTools.html](https://api.haxe.org/haxe/EnumValueTools.html)"
- name: EnumValueTools.equals()
  id: haxe/enumvaluetools#equals
  summary: Recursively compares two enum instances a and b by value
  belongs_to: EnumValueTools
  description: |-
    ### `static``inline`[`equals`](#equals)`<``T``>(``a:``T``,``b:``T``):`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")

    Recursively compares two enum instances `a` and `b` by value.

    Unlike `a == b`, this function performs a deep equality check on the arguments of the constructors (if there are any).

    If `a` or `b` are `null`, the result is unspecified.
- name: EnumValueTools.getIndex()
  id: haxe/enumvaluetools#getIndex
  summary: Returns the index of enum instance e
  belongs_to: EnumValueTools
  description: |-
    ### `static``inline`[`getIndex`](#getIndex)`(``e:`[`EnumValue`](../enumvalue "EnumValue - An abstract type that represents any enum value.")`):`[`Int`](../int "Int - The standard Int type.")

    Returns the index of enum instance `e`.

    This corresponds to the original syntactic position of `e`. The index of the first declared constructor is 0, the next one is 1 etc.

    If `e` is `null`, the result is unspecified.
- name: EnumValueTools.getName()
  id: haxe/enumvaluetools#getName
  summary: Returns the constructor name of enum instance e
  belongs_to: EnumValueTools
  description: |-
    ### `static``inline`[`getName`](#getName)`(``e:`[`EnumValue`](../enumvalue "EnumValue - An abstract type that represents any enum value.")`):`[`String`](../string "String - The basic String class.")

    Returns the constructor name of enum instance `e`.

    The result String does not contain any constructor arguments.

    If `e` is `null`, the result is unspecified.
- name: EnumValueTools.getParameters()
  id: haxe/enumvaluetools#getParameters
  summary: Returns a list of the constructor arguments of enum instance e
  belongs_to: EnumValueTools
  description: "### `static``inline`[`getParameters`](#getParameters)`(``e:`[`EnumValue`](../enumvalue \"EnumValue - An abstract type that represents any enum value.\")`):`[`Array`](../array \"Array\")`<`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\nReturns a list of the constructor arguments of enum instance `e`.\n\nIf `e` has no arguments, the result is `[]`.\n\nOtherwise the result are the values that were used as arguments to `e`, in the order of their declaration.\n\nIf `e` is `null`, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/EnumValueTools.html](https://api.haxe.org/haxe/EnumValueTools.html)"
- name: EReg
  id: ereg
  summary: The EReg class represents regular expressions
  description: "# EReg\n\n[no package](index)\n\n*Available on all platforms*\n\nThe EReg class represents regular expressions.\n\nWhile basic usage and patterns consistently work across platforms, some more complex operations may yield different results. This is a necessary trade- off to retain a certain level of performance.\n\nEReg instances can be created by calling the constructor, or with the special syntax `~/pattern/modifier`\n\nEReg instances maintain an internal state, which is affected by several of its methods.\n\nA detailed explanation of the supported operations is available at <https://haxe.org/manual/std-regex.html>\n\n## Static methods\n\n### `static`[`escape`](#escape)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nEscape the string `s` for use as a part of regular expression.\n\nIf `s` is null, the result is unspecified.\n\n## Constructor\n\n### [`new`](#new)`(``r:`[`String`](string \"String - The basic String class.\")`,`` ``opt:`[`String`](string \"String - The basic String class.\")`)`\n\nCreates a new regular expression with pattern `r` and modifiers `opt`.\n\n### This is equivalent to the shorthand syntax `~/r/opt`\n\nIf `r` or `opt` are null, the result is unspecified.\n\n## Methods\n\n### [`map`](#map)`(``s:`[`String`](string \"String - The basic String class.\")`,`` ``f:`[`EReg`](ereg \"EReg - The EReg class represents regular expressions.\")` ‑> `[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nCalls the function `f` for the substring of `s` which `this` EReg matches and replaces that substring with the result of `f` call.\n\nThe `f` function takes `this` EReg object as its first argument and should return a replacement string for the substring matched.\n\nIf `this` EReg does not match any substring, the result is `s`.\n\nBy default, this method replaces only the first matched substring. If the global g modifier is in place, all matched substrings are replaced.\n\nIf `s` or `f` are null, the result is unspecified.\n\n### [`match`](#match)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `this` regular expression matches String `s`.\n\nThis method modifies the internal state.\n\nIf `s` is `null`, the result is unspecified.\n\n### [`matchSub`](#matchSub)`(``s:`[`String`](string \"String - The basic String class.\")`,`` ``pos:`[`Int`](int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](int \"Int - The standard Int type.\")` = -1``):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `this` regular expression matches a substring of String `s`.\n\nThis function expects `pos` and `len` to describe a valid substring of `s`, or else the result is unspecified. To get more robust behavior, `this.`[`match`](#match)`(s.substr(pos,len))` can be used instead.\n\nThis method modifies the internal state.\n\nIf `s` is null, the result is unspecified.\n\n### [`matched`](#matched)`(``n:`[`Int`](int \"Int - The standard Int type.\")`):`[`String`](string \"String - The basic String class.\")\n\nReturns the matched sub-group `n` of `this` EReg.\n\nThis method should only be called after `this.`[`match`](#match) or `this.`[`matchSub`](#matchSub), and then operates on the String of that operation.\n\nThe index `n` corresponds to the n-th set of parentheses in the pattern of `this` EReg. If no such sub-group exists, the result is unspecified.\n\nIf `n` equals 0, the whole matched substring is returned.\n\n### [`matchedLeft`](#matchedLeft)`():`[`String`](string \"String - The basic String class.\")\n\nReturns the part to the left of the last matched substring.\n\nIf the most recent call to `this.`[`match`](#match) or `this.`[`matchSub`](#matchSub) did not match anything, the result is unspecified.\n\nIf the global g modifier was in place for the matching, only the substring to the left of the leftmost match is returned.\n\nThe result does not include the matched part.\n\n### [`matchedPos`](#matchedPos)`():{pos:`[`Int`](int \"Int - The standard Int type.\")`, len:`[`Int`](int \"Int - The standard Int type.\")`}`\n\nReturns the position and length of the last matched substring, within the String which was last used as argument to `this.`[`match`](#match) or `this.`[`matchSub`](#matchSub).\n\nIf the most recent call to `this.`[`match`](#match) or `this.`[`matchSub`](#matchSub) did not match anything, the result is unspecified.\n\nIf the global g modifier was in place for the matching, the position and length of the leftmost substring is returned.\n\n### [`matchedRight`](#matchedRight)`():`[`String`](string \"String - The basic String class.\")\n\nReturns the part to the right of the last matched substring.\n\nIf the most recent call to `this.`[`match`](#match) or `this.`[`matchSub`](#matchSub) did not match anything, the result is unspecified.\n\nIf the global g modifier was in place for the matching, only the substring to the right of the leftmost match is returned.\n\nThe result does not include the matched part.\n\n### [`replace`](#replace)`(``s:`[`String`](string \"String - The basic String class.\")`,`` ``by:`[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nReplaces the first substring of `s` which `this` EReg matches with `by`.\n\nIf `this` EReg does not match any substring, the result is `s`.\n\nBy default, this method replaces only the first matched substring. If the global g modifier is in place, all matched substrings are replaced.\n\nIf `by` contains `$1` to `$9`, the digit corresponds to number of a matched sub-group and its value is used instead. If no such sub-group exists, the replacement is unspecified. The string `$$` becomes `$`.\n\nIf `s` or `by` are null, the result is unspecified.\n\n### [`split`](#split)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`Array`](array \"Array\")`<`[`String`](string \"String - The basic String class.\")`>`\n\nSplits String `s` at all substrings `this` EReg matches.\n\nIf a match is found at the start of `s`, the result contains a leading empty String \"\" entry.\n\nIf a match is found at the end of `s`, the result contains a trailing empty String \"\" entry.\n\nIf two matching substrings appear next to each other, the result contains the empty String `\"\"` between them.\n\nBy default, this method splits `s` into two parts at the first matched substring. If the global g modifier is in place, `s` is split at each matched substring.\n\nIf `s` is null, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/EReg.html](https://api.haxe.org/EReg.html)"
- name: EReg.escape()
  id: ereg#escape
  summary: Escape the string s for use as a part of regular expression
  belongs_to: EReg
  description: |-
    ### `static`[`escape`](#escape)`(``s:`[`String`](string "String - The basic String class.")`):`[`String`](string "String - The basic String class.")

    Escape the string `s` for use as a part of regular expression.

    If `s` is null, the result is unspecified.

    ## Constructor

    ### [`new`](#new)`(``r:`[`String`](string "String - The basic String class.")`,``opt:`[`String`](string "String - The basic String class.")`)`

    Creates a new regular expression with pattern `r` and modifiers `opt`.

    ### This is equivalent to the shorthand syntax `~/r/opt`

    If `r` or `opt` are null, the result is unspecified.

    ## Methods
- name: EReg.map()
  id: ereg#map
  summary: Calls the function f for the substring of s which this EReg matches and replaces that substring with the result of f call
  belongs_to: EReg
  description: |-
    ### [`map`](#map)`(``s:`[`String`](string "String - The basic String class.")`,``f:`[`EReg`](ereg "EReg - The EReg class represents regular expressions.")` ‑> `[`String`](string "String - The basic String class.")`):`[`String`](string "String - The basic String class.")

    Calls the function `f` for the substring of `s` which `this` EReg matches and replaces that substring with the result of `f` call.

    The `f` function takes `this` EReg object as its first argument and should return a replacement string for the substring matched.

    If `this` EReg does not match any substring, the result is `s`.

    By default, this method replaces only the first matched substring. If the global g modifier is in place, all matched substrings are replaced.

    If `s` or `f` are null, the result is unspecified.
- name: EReg.match()
  id: ereg#match
  summary: Tells if this regular expression matches String s
  belongs_to: EReg
  description: |-
    ### [`match`](#match)`(``s:`[`String`](string "String - The basic String class.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if `this` regular expression matches String `s`.

    This method modifies the internal state.

    If `s` is `null`, the result is unspecified.
- name: EReg.matched()
  id: ereg#matched
  summary: Returns the matched sub-group n of this EReg
  belongs_to: EReg
  description: |-
    ### [`matched`](#matched)`(``n:`[`Int`](int "Int - The standard Int type.")`):`[`String`](string "String - The basic String class.")

    Returns the matched sub-group `n` of `this` EReg.

    This method should only be called after `this.`[`match`](#match) or `this.`[`matchSub`](#matchSub), and then operates on the String of that operation.

    The index `n` corresponds to the n-th set of parentheses in the pattern of `this` EReg. If no such sub-group exists, the result is unspecified.

    If `n` equals 0, the whole matched substring is returned.
- name: EReg.matchedLeft()
  id: ereg#matchedLeft
  summary: Returns the part to the left of the last matched substring
  belongs_to: EReg
  description: |-
    ### [`matchedLeft`](#matchedLeft)`():`[`String`](string "String - The basic String class.")

    Returns the part to the left of the last matched substring.

    If the most recent call to `this.`[`match`](#match) or `this.`[`matchSub`](#matchSub) did not match anything, the result is unspecified.

    If the global g modifier was in place for the matching, only the substring to the left of the leftmost match is returned.

    The result does not include the matched part.
- name: EReg.matchedPos()
  id: ereg#matchedPos
  summary: Returns the position and length of the last matched substring, within the String which was last used as argument to this.match or this.matchSub
  belongs_to: EReg
  description: |-
    ### [`matchedPos`](#matchedPos)`():{pos:`[`Int`](int "Int - The standard Int type.")`, len:`[`Int`](int "Int - The standard Int type.")`}`

    Returns the position and length of the last matched substring, within the String which was last used as argument to `this.`[`match`](#match) or `this.`[`matchSub`](#matchSub).

    If the most recent call to `this.`[`match`](#match) or `this.`[`matchSub`](#matchSub) did not match anything, the result is unspecified.

    If the global g modifier was in place for the matching, the position and length of the leftmost substring is returned.
- name: EReg.matchedRight()
  id: ereg#matchedRight
  summary: Returns the part to the right of the last matched substring
  belongs_to: EReg
  description: |-
    ### [`matchedRight`](#matchedRight)`():`[`String`](string "String - The basic String class.")

    Returns the part to the right of the last matched substring.

    If the most recent call to `this.`[`match`](#match) or `this.`[`matchSub`](#matchSub) did not match anything, the result is unspecified.

    If the global g modifier was in place for the matching, only the substring to the right of the leftmost match is returned.

    The result does not include the matched part.
- name: EReg.matchSub()
  id: ereg#matchSub
  summary: Tells if this regular expression matches a substring of String s
  belongs_to: EReg
  description: |-
    ### [`matchSub`](#matchSub)`(``s:`[`String`](string "String - The basic String class.")`,``pos:`[`Int`](int "Int - The standard Int type.")`,``len:`[`Int`](int "Int - The standard Int type.")` = -1``):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if `this` regular expression matches a substring of String `s`.

    This function expects `pos` and `len` to describe a valid substring of `s`, or else the result is unspecified. To get more robust behavior, `this.`[`match`](#match)`(s.substr(pos,len))` can be used instead.

    This method modifies the internal state.

    If `s` is null, the result is unspecified.
- name: EReg.replace()
  id: ereg#replace
  summary: Replaces the first substring of s which this EReg matches with by
  belongs_to: EReg
  description: |-
    ### [`replace`](#replace)`(``s:`[`String`](string "String - The basic String class.")`,``by:`[`String`](string "String - The basic String class.")`):`[`String`](string "String - The basic String class.")

    Replaces the first substring of `s` which `this` EReg matches with `by`.

    If `this` EReg does not match any substring, the result is `s`.

    By default, this method replaces only the first matched substring. If the global g modifier is in place, all matched substrings are replaced.

    If `by` contains `$1` to `$9`, the digit corresponds to number of a matched sub-group and its value is used instead. If no such sub-group exists, the replacement is unspecified. The string `$$` becomes `$`.

    If `s` or `by` are null, the result is unspecified.
- name: EReg.split()
  id: ereg#split
  summary: Splits String s at all substrings this EReg matches
  belongs_to: EReg
  description: "### [`split`](#split)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`Array`](array \"Array\")`<`[`String`](string \"String - The basic String class.\")`>`\n\nSplits String `s` at all substrings `this` EReg matches.\n\nIf a match is found at the start of `s`, the result contains a leading empty String \"\" entry.\n\nIf a match is found at the end of `s`, the result contains a trailing empty String \"\" entry.\n\nIf two matching substrings appear next to each other, the result contains the empty String `\"\"` between them.\n\nBy default, this method splits `s` into two parts at the first matched substring. If the global g modifier is in place, `s` is split at each matched substring.\n\nIf `s` is null, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/EReg.html](https://api.haxe.org/EReg.html)"
- name: Error
  id: mbedtls/error
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Error\n\npackage [mbedtls](index)\n\n*Available on macro*\n\n## Static methods\n\n### `static`[`strerror`](#strerror)`(``code:`[`Int`](../int \"Int - The standard Int type.\")`):`[`String`](../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/Error.html](https://api.haxe.org/mbedtls/Error.html)"
- name: Exception
  id: haxe/exception
  summary: Base class for exceptions
  description: "# Exception\n\npackage [haxe](index)\n\nextends NativeException\n\nextended by [Error](macro/error \"haxe.macro.Error - This error can be used to handle or produce compilation errors in macros.\"), [ValueException](valueexception \"haxe.ValueException - An exception containing arbitrary value.\")\n\n*Available on all platforms*\n\nBase class for exceptions.\n\nIf this class (or derivatives) is used to catch an exception, then [`haxe.CallStack.exceptionStack`](callstack#exceptionStack)`()` will not return a stack for the exception caught. Use [`haxe.Exception.stack`](exception#stack) property instead:\n\n``` prettyprint\ntry {\n    throwSomething();\n} catch(e:Exception) {\n    trace(e.stack);\n}\n```\n\nCustom exceptions should extend this class:\n\n``` prettyprint\nclass MyException extends haxe.Exception {}\n//...\nthrow new MyException('terrible exception');\n```\n\n[`haxe.Exception`](exception#Exception) is also a wildcard type to catch any exception:\n\n``` prettyprint\ntry {\n    throw 'Catch me!';\n} catch(e:haxe.Exception) {\n    trace(e.message); // Output: Catch me!\n}\n```\n\nTo rethrow an exception just throw it again. Haxe will try to rethrow an original native exception whenever possible.\n\n``` prettyprint\ntry {\n    var a:Array<Int> = null;\n    a.push(1); // generates target-specific null-pointer exception\n} catch(e:haxe.Exception) {\n    throw e; // rethrows native exception instead of haxe.Exception\n}\n```\n\n## Static methods\n\n### `static`[`caught`](#caught)`(``value:`[`Any`](../any \"Any - Any is a type that is compatible with any other in both ways.\")`):`[`Exception`](exception \"haxe.Exception - Base class for exceptions.\")\n\n*Available on cs*\n\n### `static`[`thrown`](#thrown)`(``value:`[`Any`](../any \"Any - Any is a type that is compatible with any other in both ways.\")`):`[`Any`](../any \"Any - Any is a type that is compatible with any other in both ways.\")\n\n*Available on cs*\n\n## Constructor\n\n### [`new`](#new)`(``message:`[`String`](../string \"String - The basic String class.\")`,`` ``?previous:`[`Exception`](exception \"haxe.Exception - Base class for exceptions.\")`,`` ``?native:`[`Any`](../any \"Any - Any is a type that is compatible with any other in both ways.\")`)`\n\nCreate a new Exception instance.\n\nThe `previous` argument could be used for exception chaining.\n\nThe `native` argument is for internal usage only. There is no need to provide `native` argument manually and no need to keep it upon extending [`haxe.Exception`](exception#Exception) unless you know what you're doing.\n\n## Variables\n\n### `read only`[`message`](#message)`:`[`String`](../string \"String - The basic String class.\")\n\nException message.\n\n### `read only`[`native`](#native)`:`[`Any`](../any \"Any - Any is a type that is compatible with any other in both ways.\")\n\nNative exception, which caused this exception.\n\n### `read only`[`previous`](#previous)`:`[`Null`](../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Exception`](exception \"haxe.Exception - Base class for exceptions.\")`>`\n\nContains an exception, which was passed to `previous` constructor argument.\n\n### `read only`[`stack`](#stack)`:`[`CallStack`](callstack \"haxe.CallStack - Get information about the call stack.\")\n\nThe call stack at the moment of the exception creation.\n\n## Methods\n\n### [`details`](#details)`():`[`String`](../string \"String - The basic String class.\")\n\nDetailed exception description.\n\nIncludes message, stack and the chain of previous exceptions (if set).\n\n### [`toString`](#toString)`():`[`String`](../string \"String - The basic String class.\")\n\nReturns exception message.\n\n### [`unwrap`](#unwrap)`():`[`Any`](../any \"Any - Any is a type that is compatible with any other in both ways.\")\n\n*Available on cs*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Exception.html](https://api.haxe.org/haxe/Exception.html)"
- name: Exception.caught()
  id: haxe/exception#caught
  summary: null
  belongs_to: Exception
  description: |-
    ### `static`[`caught`](#caught)`(``value:`[`Any`](../any "Any - Any is a type that is compatible with any other in both ways.")`):`[`Exception`](exception "haxe.Exception - Base class for exceptions.")

    *Available on cs*
- name: Exception.details()
  id: haxe/exception#details
  summary: Detailed exception description
  belongs_to: Exception
  description: |-
    ### [`details`](#details)`():`[`String`](../string "String - The basic String class.")

    Detailed exception description.

    Includes message, stack and the chain of previous exceptions (if set).
- name: Exception.message
  id: haxe/exception#message
  summary: Exception message
  belongs_to: Exception
  description: |-
    ### `read only`[`message`](#message)`:`[`String`](../string "String - The basic String class.")

    Exception message.
- name: Exception.native
  id: haxe/exception#native
  summary: Native exception, which caused this exception
  belongs_to: Exception
  description: |-
    ### `read only`[`native`](#native)`:`[`Any`](../any "Any - Any is a type that is compatible with any other in both ways.")

    Native exception, which caused this exception.
- name: Exception.previous
  id: haxe/exception#previous
  summary: Contains an exception, which was passed to previous constructor argument
  belongs_to: Exception
  description: |-
    ### `read only`[`previous`](#previous)`:`[`Null`](../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Exception`](exception "haxe.Exception - Base class for exceptions.")`>`

    Contains an exception, which was passed to `previous` constructor argument.
- name: Exception.stack
  id: haxe/exception#stack
  summary: The call stack at the moment of the exception creation
  belongs_to: Exception
  description: |-
    ### `read only`[`stack`](#stack)`:`[`CallStack`](callstack "haxe.CallStack - Get information about the call stack.")

    The call stack at the moment of the exception creation.

    ## Methods
- name: Exception.thrown()
  id: haxe/exception#thrown
  summary: Create a new Exception instance
  belongs_to: Exception
  description: |-
    ### `static`[`thrown`](#thrown)`(``value:`[`Any`](../any "Any - Any is a type that is compatible with any other in both ways.")`):`[`Any`](../any "Any - Any is a type that is compatible with any other in both ways.")

    *Available on cs*

    ## Constructor

    ### [`new`](#new)`(``message:`[`String`](../string "String - The basic String class.")`,``?previous:`[`Exception`](exception "haxe.Exception - Base class for exceptions.")`,``?native:`[`Any`](../any "Any - Any is a type that is compatible with any other in both ways.")`)`

    Create a new Exception instance.

    The `previous` argument could be used for exception chaining.

    The `native` argument is for internal usage only. There is no need to provide `native` argument manually and no need to keep it upon extending [`haxe.Exception`](exception#Exception) unless you know what you're doing.

    ## Variables
- name: Exception.toString()
  id: haxe/exception#toString
  summary: Returns exception message
  belongs_to: Exception
  description: |-
    ### [`toString`](#toString)`():`[`String`](../string "String - The basic String class.")

    Returns exception message.
- name: Exception.unwrap()
  id: haxe/exception#unwrap
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: Exception
  description: "### [`unwrap`](#unwrap)`():`[`Any`](../any \"Any - Any is a type that is compatible with any other in both ways.\")\n\n*Available on cs*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Exception.html](https://api.haxe.org/haxe/Exception.html)"
- name: extern.AsVar
  id: haxe/extern/asvar
  summary: If this type is used as an argument type, the compiler ensures that argument expressions are bound to a local variable
  description: "# AsVar\\<T\\>(T)\n\npackage [haxe.extern](index)\n\nfrom T to T\n\n*Available on all platforms*\n\nIf this type is used as an argument type, the compiler ensures that argument expressions are bound to a local variable.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/extern/AsVar.html](https://api.haxe.org/haxe/extern/AsVar.html)"
- name: extern.EitherType
  id: haxe/extern/eithertype
  summary: An abstract type allowing values to be either of T1 or T2 type
  description: "# EitherType\\<T1, T2\\>([Dynamic](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\"))\n\npackage [haxe.extern](index)\n\nfrom T2, T1 to T2, T1\n\n*Available on all platforms*\n\nAn abstract type allowing values to be either of `T1` or `T2` type. Supports implicit casts from/to either types.\n\nIt is useful for interfacing with external code on dynamic platforms such as JavaScript or Python.\n\nOtherwise, use of this type is discouraged.\n\nSee also:\n\n- <https://haxe.org/manual/lf-externs.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/extern/EitherType.html](https://api.haxe.org/haxe/extern/EitherType.html)"
- name: extern.Rest
  id: haxe/extern/rest
  summary: A special abstract type that represents "rest" function argument
  description: "# Rest\\<T\\>([Array](../../array \"Array\")\\<T\\>)\n\npackage [haxe.extern](index)\n\n*Available on all platforms*\n\nA special abstract type that represents \"rest\" function argument.\n\nShould be used as a type for the last argument of an extern method, representing that arbitrary number of arguments of given type can be passed to that method.\n\nSee also:\n\n- <https://haxe.org/manual/lf-externs.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/extern/Rest.html](https://api.haxe.org/haxe/extern/Rest.html)"
- name: FlatEnum
  id: haxe/flatenum
  summary: This type unifies with an enum instance if all constructors of the enum require no arguments
  description: "# FlatEnum([Dynamic](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\"))\n\npackage [haxe](index)\n\nimport [haxe.Constraints](constraints)\n\n*Available on all platforms*\n\nThis type unifies with an enum instance if all constructors of the enum require no arguments.\n\nIt is intended to be used as a type parameter constraint. If used as a real type, the underlying type will be [`Dynamic`](../dynamic).\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/FlatEnum.html](https://api.haxe.org/haxe/FlatEnum.html)"
- name: Float
  id: float
  summary: The standard Float type, this is a double-precision IEEE 64bit float
  description: "# Float\n\n[no package](index)\n\n*Available on all platforms*\n\nThe standard [`Float`](float) type, this is a double-precision IEEE 64bit float.\n\nOn static targets, `null` cannot be assigned to Float. If this is necessary, [`Null`](null)`<`[`Float`](float)`>` can be used instead.\n\n[`Std.int`](std#int) converts a [`Float`](float) to an [`Int`](int), rounded towards 0. [`Std.parseFloat`](std#parseFloat) converts a [`String`](string) to a [`Float`](float).\n\nSee also:\n\n- <https://haxe.org/manual/types-basic-types.html>\n\n- <https://haxe.org/manual/types-nullability.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Float.html](https://api.haxe.org/Float.html)"
- name: format.JsonParser
  id: haxe/format/jsonparser
  summary: An implementation of JSON parser in Haxe
  description: "# JsonParser\n\npackage [haxe.format](index)\n\n*Available on all platforms*\n\nAn implementation of JSON parser in Haxe.\n\nThis class is used by [`haxe.Json`](../json#Json) when native JSON implementation is not available.\n\nSee also:\n\n- <https://haxe.org/manual/std-Json-parsing.html>\n\n## Static methods\n\n### `static``inline`[`parse`](#parse)`(``str:`[`String`](../../string \"String - The basic String class.\")`):`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\nParses given JSON-encoded `str` and returns the resulting object.\n\nJSON objects are parsed into anonymous structures and JSON arrays are parsed into [`Array`](../../array)`<`[`Dynamic`](../../dynamic)`>`.\n\nIf given `str` is not valid JSON, an exception will be thrown.\n\nIf `str` is null, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/format/JsonParser.html](https://api.haxe.org/haxe/format/JsonParser.html)"
- name: format.JsonParser.parse()
  id: haxe/format/jsonparser#parse
  summary: Parses given JSON-encoded str and returns the resulting object
  belongs_to: format.JsonParser
  description: "### `static``inline`[`parse`](#parse)`(``str:`[`String`](../../string \"String - The basic String class.\")`):`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\nParses given JSON-encoded `str` and returns the resulting object.\n\nJSON objects are parsed into anonymous structures and JSON arrays are parsed into [`Array`](../../array)`<`[`Dynamic`](../../dynamic)`>`.\n\nIf given `str` is not valid JSON, an exception will be thrown.\n\nIf `str` is null, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/format/JsonParser.html](https://api.haxe.org/haxe/format/JsonParser.html)"
- name: format.JsonPrinter
  id: haxe/format/jsonprinter
  summary: An implementation of JSON printer in Haxe
  description: "# JsonPrinter\n\npackage [haxe.format](index)\n\n*Available on all platforms*\n\nAn implementation of JSON printer in Haxe.\n\nThis class is used by [`haxe.Json`](../json#Json) when native JSON implementation is not available.\n\nSee also:\n\n- <https://haxe.org/manual/std-Json-encoding.html>\n\n## Static methods\n\n### `static`[`print`](#print)`(``o:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``?replacer:(key:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`, value:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`) ‑> `[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``?space:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nEncodes `o`'s value and returns the resulting JSON string.\n\nIf `replacer` is given and is not null, it is used to retrieve actual object to be encoded. The `replacer` function takes two parameters, the key and the value being encoded. Initial key value is an empty string.\n\nIf `space` is given and is not null, the result will be pretty-printed. Successive levels will be indented by this string.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/format/JsonPrinter.html](https://api.haxe.org/haxe/format/JsonPrinter.html)"
- name: format.JsonPrinter.print()
  id: haxe/format/jsonprinter#print
  summary: Encodes o's value and returns the resulting JSON string
  belongs_to: format.JsonPrinter
  description: "### `static`[`print`](#print)`(``o:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,``?replacer:(key:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`, value:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`) ‑> `[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,``?space:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nEncodes `o`'s value and returns the resulting JSON string.\n\nIf `replacer` is given and is not null, it is used to retrieve actual object to be encoded. The `replacer` function takes two parameters, the key and the value being encoded. Initial key value is an empty string.\n\nIf `space` is given and is not null, the result will be pretty-printed. Successive levels will be indented by this string.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/format/JsonPrinter.html](https://api.haxe.org/haxe/format/JsonPrinter.html)"
- name: Function
  id: haxe/function
  summary: This type unifies with any function type
  description: "# Function([Dynamic](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\"))\n\npackage [haxe](index)\n\nimport [haxe.Constraints](constraints)\n\n*Available on all platforms*\n\nThis type unifies with any function type.\n\nIt is intended to be used as a type parameter constraint. If used as a real type, the underlying type will be [`Dynamic`](../dynamic).\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Function.html](https://api.haxe.org/haxe/Function.html)"
- name: Http
  id: haxe/http
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Http\n\npackage [haxe](index)\n\n*Available on all platforms*\n\n#### lua, php, cs, java, cpp, neko, hl, python, macro\n\n*alias for* [`sys.Http`](https://api.haxe.org/sys/Http.html \"sys.Http\")\n\n#### flash\n\n*alias for* [`haxe.HttpFlash`](httpflash \"haxe.HttpFlash\")\n\n#### js\n\n*alias for* [`haxe.http.HttpJs`](http/httpjs \"haxe.http.HttpJs\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Http.html](https://api.haxe.org/haxe/Http.html)"
- name: http.HttpBase
  id: haxe/http/httpbase
  summary: This class can be used to handle Http requests consistently across platforms
  description: "# HttpBase\n\npackage [haxe.http](index)\n\nextended by [HttpJs](httpjs \"haxe.http.HttpJs\"), [HttpFlash](../httpflash \"haxe.HttpFlash\"), [Http](https://api.haxe.org/sys/Http.html \"sys.Http\")\n\n*Available on all platforms*\n\nThis class can be used to handle Http requests consistently across platforms. There are two intended usages:\n\n- call [`haxe.Http.requestUrl`](../http#requestUrl)`(url)` and receive the result as a [`String`](../../string) (not available on flash)\n- create a `new `[`haxe.Http`](../http#Http)`(url)`, register your callbacks for `onData`, `onError` and `onStatus`, then call `request()`.\n\n## Constructor\n\n### [`new`](#new)`(``url:`[`String`](../../string \"String - The basic String class.\")`)`\n\nCreates a new Http instance with `url` as parameter.\n\nThis does not do a request until `request()` is called.\n\nIf `url` is null, the field url must be set to a value before making the call to `request()`, or the result is unspecified.\n\n(Php) Https (SSL) connections are allowed only if the OpenSSL extension is enabled.\n\n## Variables\n\n### `read only`[`responseBytes`](#responseBytes)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`>`\n\n### `read only`[`responseData`](#responseData)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### [`url`](#url)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe url of `this` request. It is used only by the `request()` method and can be changed in order to send the same request to different target Urls.\n\n## Methods\n\n### [`addHeader`](#addHeader)`(``header:`[`String`](../../string \"String - The basic String class.\")`,`` ``value:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`addParameter`](#addParameter)`(``name:`[`String`](../../string \"String - The basic String class.\")`,`` ``value:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### `dynamic`[`onBytes`](#onBytes)`(``data:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nThis method is called upon a successful request, with `data` containing the result String.\n\n### The intended usage is to bind it to a custom function: `httpInstance.onBytes = function(data) { // handle result }`\n\n### `dynamic`[`onData`](#onData)`(``data:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nThis method is called upon a successful request, with `data` containing the result String.\n\n### The intended usage is to bind it to a custom function: `httpInstance.onData = function(data) { // handle result }`\n\n### `dynamic`[`onError`](#onError)`(``msg:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nThis method is called upon a request error, with `msg` containing the error description.\n\n### The intended usage is to bind it to a custom function: `httpInstance.onError = function(msg) { // handle error }`\n\n### `dynamic`[`onStatus`](#onStatus)`(``status:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nThis method is called upon a Http status change, with `status` being the new status.\n\n### The intended usage is to bind it to a custom function: `httpInstance.onStatus = function(status) { // handle status }`\n\n### [`request`](#request)`(``?post:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nSends `this` Http request to the Url specified by `this.`[`url`](#url).\n\nIf `post` is true, the request is sent as POST request, otherwise it is sent as GET request.\n\nDepending on the outcome of the request, this method calls the `onStatus()`, `onError()`, `onData()` or `onBytes()` callback functions.\n\nIf `this.`[`url`](#url) is null, the result is unspecified.\n\nIf `this.`[`url`](#url) is an invalid or inaccessible Url, the `onError()` callback function is called.\n\n\\[js\\] If `this.`[`async`](#async) is false, the callback functions are called before this method returns.\n\n### [`setHeader`](#setHeader)`(``name:`[`String`](../../string \"String - The basic String class.\")`,`` ``value:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nSets the header identified as `header` to value `value`.\n\nIf `header` or `value` are null, the result is unspecified.\n\nThis method provides a fluent interface.\n\n### [`setParameter`](#setParameter)`(``name:`[`String`](../../string \"String - The basic String class.\")`,`` ``value:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nSets the parameter identified as `param` to value `value`.\n\nIf `header` or `value` are null, the result is unspecified.\n\nThis method provides a fluent interface.\n\n### [`setPostBytes`](#setPostBytes)`(``data:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`>``):`[`Void`](../../void \"Void - The standard Void type.\")\n\nSets the post data of `this` Http request to `data` bytes.\n\nThere can only be one post data per request. Subsequent calls to this method or to `setPostData()` overwrite the previously set value.\n\nIf `data` is null, the post data is considered to be absent.\n\nThis method provides a fluent interface.\n\n### [`setPostData`](#setPostData)`(``data:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>``):`[`Void`](../../void \"Void - The standard Void type.\")\n\nSets the post data of `this` Http request to `data` string.\n\nThere can only be one post data per request. Subsequent calls to this method or to `setPostBytes()` overwrite the previously set value.\n\nIf `data` is null, the post data is considered to be absent.\n\nThis method provides a fluent interface.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/http/HttpBase.html](https://api.haxe.org/haxe/http/HttpBase.html)"
- name: http.HttpBase.addHeader()
  id: haxe/http/httpbase#addHeader
  summary: null
  belongs_to: http.HttpBase
  description: '### [`addHeader`](#addHeader)`(``header:`[`String`](../../string "String - The basic String class.")`,``value:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: http.HttpBase.addParameter()
  id: haxe/http/httpbase#addParameter
  summary: null
  belongs_to: http.HttpBase
  description: '### [`addParameter`](#addParameter)`(``name:`[`String`](../../string "String - The basic String class.")`,``value:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: http.HttpBase.onBytes()
  id: haxe/http/httpbase#onBytes
  summary: This method is called upon a successful request, with data containing the result String
  belongs_to: http.HttpBase
  description: |-
    ### `dynamic`[`onBytes`](#onBytes)`(``data:`[`Bytes`](../io/bytes "haxe.io.Bytes")`):`[`Void`](../../void "Void - The standard Void type.")

    This method is called upon a successful request, with `data` containing the result String.

    ### The intended usage is to bind it to a custom function: `httpInstance.onBytes = function(data) { // handle result }`
- name: http.HttpBase.onData()
  id: haxe/http/httpbase#onData
  summary: This method is called upon a successful request, with data containing the result String
  belongs_to: http.HttpBase
  description: |-
    ### `dynamic`[`onData`](#onData)`(``data:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    This method is called upon a successful request, with `data` containing the result String.

    ### The intended usage is to bind it to a custom function: `httpInstance.onData = function(data) { // handle result }`
- name: http.HttpBase.onError()
  id: haxe/http/httpbase#onError
  summary: This method is called upon a request error, with msg containing the error description
  belongs_to: http.HttpBase
  description: |-
    ### `dynamic`[`onError`](#onError)`(``msg:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    This method is called upon a request error, with `msg` containing the error description.

    ### The intended usage is to bind it to a custom function: `httpInstance.onError = function(msg) { // handle error }`
- name: http.HttpBase.onStatus()
  id: haxe/http/httpbase#onStatus
  summary: This method is called upon a Http status change, with status being the new status
  belongs_to: http.HttpBase
  description: |-
    ### `dynamic`[`onStatus`](#onStatus)`(``status:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    This method is called upon a Http status change, with `status` being the new status.

    ### The intended usage is to bind it to a custom function: `httpInstance.onStatus = function(status) { // handle status }`
- name: http.HttpBase.request()
  id: haxe/http/httpbase#request
  summary: Sends this Http request to the Url specified by this.url
  belongs_to: http.HttpBase
  description: |-
    ### [`request`](#request)`(``?post:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Void`](../../void "Void - The standard Void type.")

    Sends `this` Http request to the Url specified by `this.`[`url`](#url).

    If `post` is true, the request is sent as POST request, otherwise it is sent as GET request.

    Depending on the outcome of the request, this method calls the `onStatus()`, `onError()`, `onData()` or `onBytes()` callback functions.

    If `this.`[`url`](#url) is null, the result is unspecified.

    If `this.`[`url`](#url) is an invalid or inaccessible Url, the `onError()` callback function is called.

    \[js\] If `this.`[`async`](#async) is false, the callback functions are called before this method returns.
- name: http.HttpBase.responseBytes
  id: haxe/http/httpbase#responseBytes
  summary: null
  belongs_to: http.HttpBase
  description: '### `read only`[`responseBytes`](#responseBytes)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bytes`](../io/bytes "haxe.io.Bytes")`>`'
- name: http.HttpBase.responseData
  id: haxe/http/httpbase#responseData
  summary: null
  belongs_to: http.HttpBase
  description: '### `read only`[`responseData`](#responseData)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: http.HttpBase.setHeader()
  id: haxe/http/httpbase#setHeader
  summary: Sets the header identified as header to value value
  belongs_to: http.HttpBase
  description: |-
    ### [`setHeader`](#setHeader)`(``name:`[`String`](../../string "String - The basic String class.")`,``value:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    Sets the header identified as `header` to value `value`.

    If `header` or `value` are null, the result is unspecified.

    This method provides a fluent interface.
- name: http.HttpBase.setParameter()
  id: haxe/http/httpbase#setParameter
  summary: Sets the parameter identified as param to value value
  belongs_to: http.HttpBase
  description: |-
    ### [`setParameter`](#setParameter)`(``name:`[`String`](../../string "String - The basic String class.")`,``value:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    Sets the parameter identified as `param` to value `value`.

    If `header` or `value` are null, the result is unspecified.

    This method provides a fluent interface.
- name: http.HttpBase.setPostBytes()
  id: haxe/http/httpbase#setPostBytes
  summary: Sets the post data of this Http request to data bytes
  belongs_to: http.HttpBase
  description: |-
    ### [`setPostBytes`](#setPostBytes)`(``data:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bytes`](../io/bytes "haxe.io.Bytes")`>``):`[`Void`](../../void "Void - The standard Void type.")

    Sets the post data of `this` Http request to `data` bytes.

    There can only be one post data per request. Subsequent calls to this method or to `setPostData()` overwrite the previously set value.

    If `data` is null, the post data is considered to be absent.

    This method provides a fluent interface.
- name: http.HttpBase.setPostData()
  id: haxe/http/httpbase#setPostData
  summary: Sets the post data of this Http request to data string
  belongs_to: http.HttpBase
  description: "### [`setPostData`](#setPostData)`(``data:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>``):`[`Void`](../../void \"Void - The standard Void type.\")\n\nSets the post data of `this` Http request to `data` string.\n\nThere can only be one post data per request. Subsequent calls to this method or to `setPostBytes()` overwrite the previously set value.\n\nIf `data` is null, the post data is considered to be absent.\n\nThis method provides a fluent interface.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/http/HttpBase.html](https://api.haxe.org/haxe/http/HttpBase.html)"
- name: http.HttpBase.url
  id: haxe/http/httpbase#url
  summary: The url of this request
  belongs_to: http.HttpBase
  description: |-
    ### [`url`](#url)`:`[`String`](../../string "String - The basic String class.")

    The url of `this` request. It is used only by the `request()` method and can be changed in order to send the same request to different target Urls.

    ## Methods
- name: http.HttpJs
  id: haxe/http/httpjs
  summary: Makes a synchronous request to url
  description: "# HttpJs\n\npackage [haxe.http](index)\n\nextends [HttpBase](httpbase \"haxe.http.HttpBase - This class can be used to handle Http requests consistently across platforms.\")\n\n*Available on js*\n\n## Static methods\n\n### `static`[`requestUrl`](#requestUrl)`(``url:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nMakes a synchronous request to `url`.\n\nThis creates a new Http instance and makes a GET request by calling its `request(`[`false`](../../bool)`)` method.\n\nIf `url` is null, the result is unspecified.\n\n## Constructor\n\n### [`new`](#new)`(``url:`[`String`](../../string \"String - The basic String class.\")`)`\n\n## Variables\n\n### [`async`](#async)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`withCredentials`](#withCredentials)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n## Methods\n\n### [`cancel`](#cancel)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\nCancels `this` Http request if `request` has been called and a response has not yet been received.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/http/HttpJs.html](https://api.haxe.org/haxe/http/HttpJs.html)"
- name: http.HttpJs.async
  id: haxe/http/httpjs#async
  summary: null
  belongs_to: http.HttpJs
  description: '### [`async`](#async)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: http.HttpJs.cancel()
  id: haxe/http/httpjs#cancel
  summary: Cancels this Http request if request has been called and a response has not yet been received
  belongs_to: http.HttpJs
  description: "### [`cancel`](#cancel)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\nCancels `this` Http request if `request` has been called and a response has not yet been received.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/http/HttpJs.html](https://api.haxe.org/haxe/http/HttpJs.html)"
- name: http.HttpJs.requestUrl()
  id: haxe/http/httpjs#requestUrl
  summary: Makes a synchronous request to url
  belongs_to: http.HttpJs
  description: |-
    ### `static`[`requestUrl`](#requestUrl)`(``url:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    Makes a synchronous request to `url`.

    This creates a new Http instance and makes a GET request by calling its `request(`[`false`](../../bool)`)` method.

    If `url` is null, the result is unspecified.

    ## Constructor

    ### [`new`](#new)`(``url:`[`String`](../../string "String - The basic String class.")`)`

    ## Variables
- name: http.HttpJs.withCredentials
  id: haxe/http/httpjs#withCredentials
  summary: null
  belongs_to: http.HttpJs
  description: |-
    ### [`withCredentials`](#withCredentials)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ## Methods
- name: http.HttpMethod
  id: haxe/http/httpmethod
  summary: HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource
  description: "# HttpMethod([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.http](index)\n\nfrom [String](../../string \"String - The basic String class.\") to [String](../../string \"String - The basic String class.\")\n\n*Available on all platforms*\n\nHTTP defines methods (sometimes referred to as *verbs*) to indicate the desired action to be performed on the identified resource. What this resource represents, whether pre-existing data or data that is generated dynamically, depends on the implementation of the server.\n\nOften, the resource corresponds to a file or the output of an executable residing on the server. The HTTP/1.0 specification defined the `GET`, `POST` and `HEAD` methods and the HTTP/1.1 specification added 5 new methods: `OPTIONS`, `PUT`, `DELETE`, `TRACE` and `CONNECT`.\n\nBy being specified in these documents their semantics are well known and can be depended upon. Any client can use any method and the server can be configured to support any combination of methods. If a method is unknown to an intermediate it will be treated as an unsafe and non-idempotent method. There is no limit to the number of methods that can be defined and this allows for future methods to be specified without breaking existing infrastructure.\n\n## Variables\n\n### `inline``read only`[`Connect`](#Connect)`:`[`HttpMethod`](httpmethod \"haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.\")` = \"CONNECT\"`\n\nThe `CONNECT` method converts the request connection to a transparent TCP/IP tunnel, usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.\n\n### `inline``read only`[`Delete`](#Delete)`:`[`HttpMethod`](httpmethod \"haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.\")` = \"DELETE\"`\n\nThe `DELETE` method deletes the specified resource.\n\n### `inline``read only`[`Get`](#Get)`:`[`HttpMethod`](httpmethod \"haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.\")` = \"GET\"`\n\nThe `GET` method requests a representation of the specified resource.\n\nRequests using `GET` should only retrieve data and should have no other effect. (This is also true of some other HTTP methods.) The W3C has published guidance principles on this distinction, saying, *\"Web application design should be informed by the above principles, but also by the relevant limitations.\"*\n\nSee safe methods below.\n\n### `inline``read only`[`Head`](#Head)`:`[`HttpMethod`](httpmethod \"haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.\")` = \"HEAD\"`\n\nThe `HEAD` method asks for a response identical to that of a `GET` request, but without the response body. This is useful for retrieving meta-information written in response headers, without having to transport the entire content.\n\n### `inline``read only`[`Options`](#Options)`:`[`HttpMethod`](httpmethod \"haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.\")` = \"OPTIONS\"`\n\nThe `OPTIONS` method returns the HTTP methods that the server supports for the specified URL. This can be used to check the functionality of a web server by requesting `*` instead of a specific resource.\n\n### `inline``read only`[`Patch`](#Patch)`:`[`HttpMethod`](httpmethod \"haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.\")` = \"PATCH\"`\n\nThe `PATCH` method applies partial modifications to a resource.\n\n### `inline``read only`[`Post`](#Post)`:`[`HttpMethod`](httpmethod \"haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.\")` = \"POST\"`\n\nThe `POST` method requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI.\n\nThe data `POST`ed might be, for example, an annotation for existing resources; a message for a bulletin board, newsgroup, mailing list, or comment thread; a block of data that is the result of submitting a web form to a data-handling process; or an item to add to a database.\n\n### `inline``read only`[`Put`](#Put)`:`[`HttpMethod`](httpmethod \"haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.\")` = \"PUT\"`\n\nThe `PUT` method requests that the enclosed entity be stored under the supplied URI. If the URI refers to an already existing resource, it is modified; if the URI does not point to an existing resource, then the server can create the resource with that URI.\n\n### `inline``read only`[`Trace`](#Trace)`:`[`HttpMethod`](httpmethod \"haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.\")` = \"TRACE\"`\n\nThe `TRACE` method echoes the received request so that a client can see what (if any) changes or additions have been made by intermediate servers.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/http/HttpMethod.html](https://api.haxe.org/haxe/http/HttpMethod.html)"
- name: http.HttpMethod.Connect
  id: haxe/http/httpmethod#Connect
  summary: The CONNECT method converts the request connection to a transparent TCP/IP tunnel, usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy
  belongs_to: http.HttpMethod
  description: |-
    ### `inline``read only`[`Connect`](#Connect)`:`[`HttpMethod`](httpmethod "haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.")` = "CONNECT"`

    The `CONNECT` method converts the request connection to a transparent TCP/IP tunnel, usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.
- name: http.HttpMethod.Delete
  id: haxe/http/httpmethod#Delete
  summary: The DELETE method deletes the specified resource
  belongs_to: http.HttpMethod
  description: |-
    ### `inline``read only`[`Delete`](#Delete)`:`[`HttpMethod`](httpmethod "haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.")` = "DELETE"`

    The `DELETE` method deletes the specified resource.
- name: http.HttpMethod.Get
  id: haxe/http/httpmethod#Get
  summary: The GET method requests a representation of the specified resource
  belongs_to: http.HttpMethod
  description: |-
    ### `inline``read only`[`Get`](#Get)`:`[`HttpMethod`](httpmethod "haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.")` = "GET"`

    The `GET` method requests a representation of the specified resource.

    Requests using `GET` should only retrieve data and should have no other effect. (This is also true of some other HTTP methods.) The W3C has published guidance principles on this distinction, saying, *"Web application design should be informed by the above principles, but also by the relevant limitations."*

    See safe methods below.
- name: http.HttpMethod.Head
  id: haxe/http/httpmethod#Head
  summary: The HEAD method asks for a response identical to that of a GET request, but without the response body
  belongs_to: http.HttpMethod
  description: |-
    ### `inline``read only`[`Head`](#Head)`:`[`HttpMethod`](httpmethod "haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.")` = "HEAD"`

    The `HEAD` method asks for a response identical to that of a `GET` request, but without the response body. This is useful for retrieving meta-information written in response headers, without having to transport the entire content.
- name: http.HttpMethod.Options
  id: haxe/http/httpmethod#Options
  summary: The OPTIONS method returns the HTTP methods that the server supports for the specified URL
  belongs_to: http.HttpMethod
  description: |-
    ### `inline``read only`[`Options`](#Options)`:`[`HttpMethod`](httpmethod "haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.")` = "OPTIONS"`

    The `OPTIONS` method returns the HTTP methods that the server supports for the specified URL. This can be used to check the functionality of a web server by requesting `*` instead of a specific resource.
- name: http.HttpMethod.Patch
  id: haxe/http/httpmethod#Patch
  summary: The PATCH method applies partial modifications to a resource
  belongs_to: http.HttpMethod
  description: |-
    ### `inline``read only`[`Patch`](#Patch)`:`[`HttpMethod`](httpmethod "haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.")` = "PATCH"`

    The `PATCH` method applies partial modifications to a resource.
- name: http.HttpMethod.Post
  id: haxe/http/httpmethod#Post
  summary: The POST method requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI
  belongs_to: http.HttpMethod
  description: |-
    ### `inline``read only`[`Post`](#Post)`:`[`HttpMethod`](httpmethod "haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.")` = "POST"`

    The `POST` method requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI.

    The data `POST`ed might be, for example, an annotation for existing resources; a message for a bulletin board, newsgroup, mailing list, or comment thread; a block of data that is the result of submitting a web form to a data-handling process; or an item to add to a database.
- name: http.HttpMethod.Put
  id: haxe/http/httpmethod#Put
  summary: The PUT method requests that the enclosed entity be stored under the supplied URI
  belongs_to: http.HttpMethod
  description: |-
    ### `inline``read only`[`Put`](#Put)`:`[`HttpMethod`](httpmethod "haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.")` = "PUT"`

    The `PUT` method requests that the enclosed entity be stored under the supplied URI. If the URI refers to an already existing resource, it is modified; if the URI does not point to an existing resource, then the server can create the resource with that URI.
- name: http.HttpMethod.Trace
  id: haxe/http/httpmethod#Trace
  summary: The TRACE method echoes the received request so that a client can see what (if any) changes or additions have been made by intermediate servers
  belongs_to: http.HttpMethod
  description: "### `inline``read only`[`Trace`](#Trace)`:`[`HttpMethod`](httpmethod \"haxe.http.HttpMethod - HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource.\")` = \"TRACE\"`\n\nThe `TRACE` method echoes the received request so that a client can see what (if any) changes or additions have been made by intermediate servers.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/http/HttpMethod.html](https://api.haxe.org/haxe/http/HttpMethod.html)"
- name: http.HttpStatus
  id: haxe/http/httpstatus
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HttpStatus([Int](../../int \"Int - The standard Int type.\"))\n\npackage [haxe.http](index)\n\nfrom [Int](../../int \"Int - The standard Int type.\") to [Int](../../int \"Int - The standard Int type.\")\n\n*Available on all platforms*\n\nHTTP Request Status\n\n## Variables\n\n### `inline``read only`[`Accepted`](#Accepted)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 202`\n\n### `inline``read only`[`AlreadyReported`](#AlreadyReported)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 208`\n\n### `inline``read only`[`BadGateway`](#BadGateway)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 502`\n\n### `inline``read only`[`BadRequest`](#BadRequest)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 400`\n\n### `inline``read only`[`Conflict`](#Conflict)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 409`\n\n### `inline``read only`[`Continue`](#Continue)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 100`\n\n### `inline``read only`[`Created`](#Created)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 201`\n\n### `inline``read only`[`ExpectationFailed`](#ExpectationFailed)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 417`\n\n### `inline``read only`[`FailedDependency`](#FailedDependency)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 424`\n\n### `inline``read only`[`Forbidden`](#Forbidden)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 403`\n\n### `inline``read only`[`Found`](#Found)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 302`\n\n### `inline``read only`[`GatewayTimeout`](#GatewayTimeout)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 504`\n\n### `inline``read only`[`Gone`](#Gone)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 410`\n\n### `inline``read only`[`HTTPVersionNotSupported`](#HTTPVersionNotSupported)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 505`\n\n### `inline``read only`[`IMUsed`](#IMUsed)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 226`\n\n### `inline``read only`[`ImATeapot`](#ImATeapot)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 418`\n\n### `inline``read only`[`InsufficientStorage`](#InsufficientStorage)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 507`\n\n### `inline``read only`[`InternalServerError`](#InternalServerError)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 500`\n\n### `inline``read only`[`LengthRequired`](#LengthRequired)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 411`\n\n### `inline``read only`[`Locked`](#Locked)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 423`\n\n### `inline``read only`[`LoopDetected`](#LoopDetected)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 508`\n\n### `inline``read only`[`MethodNotAllowed`](#MethodNotAllowed)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 405`\n\n### `inline``read only`[`MisdirectedRequest`](#MisdirectedRequest)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 421`\n\n### `inline``read only`[`MovedPermanently`](#MovedPermanently)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 301`\n\n### `inline``read only`[`MultiStatus`](#MultiStatus)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 207`\n\n### `inline``read only`[`MultipleChoices`](#MultipleChoices)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 300`\n\n### `inline``read only`[`NetworkAuthenticationRequired`](#NetworkAuthenticationRequired)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 511`\n\n### `inline``read only`[`NoContent`](#NoContent)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 204`\n\n### `inline``read only`[`NonAuthoritativeInformation`](#NonAuthoritativeInformation)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 203`\n\n### `inline``read only`[`NotAcceptable`](#NotAcceptable)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 406`\n\n### `inline``read only`[`NotExtended`](#NotExtended)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 510`\n\n### `inline``read only`[`NotFound`](#NotFound)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 404`\n\n### `inline``read only`[`NotImplemented`](#NotImplemented)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 501`\n\n### `inline``read only`[`NotModified`](#NotModified)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 304`\n\n### `inline``read only`[`OK`](#OK)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 200`\n\n### `inline``read only`[`PartialContent`](#PartialContent)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 206`\n\n### `inline``read only`[`PayloadTooLarge`](#PayloadTooLarge)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 413`\n\n### `inline``read only`[`PaymentRequired`](#PaymentRequired)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 402`\n\n### `inline``read only`[`PermanentRedirect`](#PermanentRedirect)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 308`\n\n### `inline``read only`[`PreconditionFailed`](#PreconditionFailed)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 412`\n\n### `inline``read only`[`PreconditionRequired`](#PreconditionRequired)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 428`\n\n### `inline``read only`[`Processing`](#Processing)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 102`\n\n### `inline``read only`[`ProxyAuthenticationRequired`](#ProxyAuthenticationRequired)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 407`\n\n### `inline``read only`[`RangeNotSatisfiable`](#RangeNotSatisfiable)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 416`\n\n### `inline``read only`[`RequestHeaderFieldsTooLarge`](#RequestHeaderFieldsTooLarge)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 431`\n\n### `inline``read only`[`RequestTimeout`](#RequestTimeout)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 408`\n\n### `inline``read only`[`ResetContent`](#ResetContent)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 205`\n\n### `inline``read only`[`SeeOther`](#SeeOther)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 303`\n\n### `inline``read only`[`ServiceUnavailable`](#ServiceUnavailable)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 503`\n\n### `inline``read only`[`SwitchProxy`](#SwitchProxy)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 306`\n\n### `inline``read only`[`SwitchingProtocols`](#SwitchingProtocols)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 101`\n\n### `inline``read only`[`TemporaryRedirect`](#TemporaryRedirect)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 307`\n\n### `inline``read only`[`TooManyRequests`](#TooManyRequests)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 429`\n\n### `inline``read only`[`URITooLong`](#URITooLong)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 414`\n\n### `inline``read only`[`Unauthorized`](#Unauthorized)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 401`\n\n### `inline``read only`[`UnavailableForLegalReasons`](#UnavailableForLegalReasons)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 451`\n\n### `inline``read only`[`UnprocessableEntity`](#UnprocessableEntity)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 422`\n\n### `inline``read only`[`UnsupportedMediaType`](#UnsupportedMediaType)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 415`\n\n### `inline``read only`[`UpgradeRequired`](#UpgradeRequired)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 426`\n\n### `inline``read only`[`UseProxy`](#UseProxy)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 305`\n\n### `inline``read only`[`VariantAlsoNegotiates`](#VariantAlsoNegotiates)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 506`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/http/HttpStatus.html](https://api.haxe.org/haxe/http/HttpStatus.html)"
- name: http.HttpStatus.Accepted
  id: haxe/http/httpstatus#Accepted
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`Accepted`](#Accepted)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 202`'
- name: http.HttpStatus.AlreadyReported
  id: haxe/http/httpstatus#AlreadyReported
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`AlreadyReported`](#AlreadyReported)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 208`'
- name: http.HttpStatus.BadGateway
  id: haxe/http/httpstatus#BadGateway
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`BadGateway`](#BadGateway)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 502`'
- name: http.HttpStatus.BadRequest
  id: haxe/http/httpstatus#BadRequest
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`BadRequest`](#BadRequest)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 400`'
- name: http.HttpStatus.Conflict
  id: haxe/http/httpstatus#Conflict
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`Conflict`](#Conflict)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 409`'
- name: http.HttpStatus.Continue
  id: haxe/http/httpstatus#Continue
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`Continue`](#Continue)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 100`'
- name: http.HttpStatus.Created
  id: haxe/http/httpstatus#Created
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`Created`](#Created)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 201`'
- name: http.HttpStatus.ExpectationFailed
  id: haxe/http/httpstatus#ExpectationFailed
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`ExpectationFailed`](#ExpectationFailed)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 417`'
- name: http.HttpStatus.FailedDependency
  id: haxe/http/httpstatus#FailedDependency
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`FailedDependency`](#FailedDependency)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 424`'
- name: http.HttpStatus.Forbidden
  id: haxe/http/httpstatus#Forbidden
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`Forbidden`](#Forbidden)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 403`'
- name: http.HttpStatus.Found
  id: haxe/http/httpstatus#Found
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`Found`](#Found)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 302`'
- name: http.HttpStatus.GatewayTimeout
  id: haxe/http/httpstatus#GatewayTimeout
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`GatewayTimeout`](#GatewayTimeout)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 504`'
- name: http.HttpStatus.Gone
  id: haxe/http/httpstatus#Gone
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`Gone`](#Gone)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 410`'
- name: http.HttpStatus.HTTPVersionNotSupported
  id: haxe/http/httpstatus#HTTPVersionNotSupported
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`HTTPVersionNotSupported`](#HTTPVersionNotSupported)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 505`'
- name: http.HttpStatus.ImATeapot
  id: haxe/http/httpstatus#ImATeapot
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`ImATeapot`](#ImATeapot)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 418`'
- name: http.HttpStatus.IMUsed
  id: haxe/http/httpstatus#IMUsed
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`IMUsed`](#IMUsed)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 226`'
- name: http.HttpStatus.InsufficientStorage
  id: haxe/http/httpstatus#InsufficientStorage
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`InsufficientStorage`](#InsufficientStorage)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 507`'
- name: http.HttpStatus.InternalServerError
  id: haxe/http/httpstatus#InternalServerError
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`InternalServerError`](#InternalServerError)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 500`'
- name: http.HttpStatus.LengthRequired
  id: haxe/http/httpstatus#LengthRequired
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`LengthRequired`](#LengthRequired)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 411`'
- name: http.HttpStatus.Locked
  id: haxe/http/httpstatus#Locked
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`Locked`](#Locked)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 423`'
- name: http.HttpStatus.LoopDetected
  id: haxe/http/httpstatus#LoopDetected
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`LoopDetected`](#LoopDetected)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 508`'
- name: http.HttpStatus.MethodNotAllowed
  id: haxe/http/httpstatus#MethodNotAllowed
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`MethodNotAllowed`](#MethodNotAllowed)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 405`'
- name: http.HttpStatus.MisdirectedRequest
  id: haxe/http/httpstatus#MisdirectedRequest
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`MisdirectedRequest`](#MisdirectedRequest)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 421`'
- name: http.HttpStatus.MovedPermanently
  id: haxe/http/httpstatus#MovedPermanently
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`MovedPermanently`](#MovedPermanently)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 301`'
- name: http.HttpStatus.MultipleChoices
  id: haxe/http/httpstatus#MultipleChoices
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`MultipleChoices`](#MultipleChoices)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 300`'
- name: http.HttpStatus.MultiStatus
  id: haxe/http/httpstatus#MultiStatus
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`MultiStatus`](#MultiStatus)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 207`'
- name: http.HttpStatus.NetworkAuthenticationRequired
  id: haxe/http/httpstatus#NetworkAuthenticationRequired
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`NetworkAuthenticationRequired`](#NetworkAuthenticationRequired)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 511`'
- name: http.HttpStatus.NoContent
  id: haxe/http/httpstatus#NoContent
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`NoContent`](#NoContent)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 204`'
- name: http.HttpStatus.NonAuthoritativeInformation
  id: haxe/http/httpstatus#NonAuthoritativeInformation
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`NonAuthoritativeInformation`](#NonAuthoritativeInformation)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 203`'
- name: http.HttpStatus.NotAcceptable
  id: haxe/http/httpstatus#NotAcceptable
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`NotAcceptable`](#NotAcceptable)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 406`'
- name: http.HttpStatus.NotExtended
  id: haxe/http/httpstatus#NotExtended
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`NotExtended`](#NotExtended)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 510`'
- name: http.HttpStatus.NotFound
  id: haxe/http/httpstatus#NotFound
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`NotFound`](#NotFound)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 404`'
- name: http.HttpStatus.NotImplemented
  id: haxe/http/httpstatus#NotImplemented
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`NotImplemented`](#NotImplemented)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 501`'
- name: http.HttpStatus.NotModified
  id: haxe/http/httpstatus#NotModified
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`NotModified`](#NotModified)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 304`'
- name: http.HttpStatus.OK
  id: haxe/http/httpstatus#OK
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`OK`](#OK)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 200`'
- name: http.HttpStatus.PartialContent
  id: haxe/http/httpstatus#PartialContent
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`PartialContent`](#PartialContent)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 206`'
- name: http.HttpStatus.PayloadTooLarge
  id: haxe/http/httpstatus#PayloadTooLarge
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`PayloadTooLarge`](#PayloadTooLarge)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 413`'
- name: http.HttpStatus.PaymentRequired
  id: haxe/http/httpstatus#PaymentRequired
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`PaymentRequired`](#PaymentRequired)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 402`'
- name: http.HttpStatus.PermanentRedirect
  id: haxe/http/httpstatus#PermanentRedirect
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`PermanentRedirect`](#PermanentRedirect)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 308`'
- name: http.HttpStatus.PreconditionFailed
  id: haxe/http/httpstatus#PreconditionFailed
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`PreconditionFailed`](#PreconditionFailed)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 412`'
- name: http.HttpStatus.PreconditionRequired
  id: haxe/http/httpstatus#PreconditionRequired
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`PreconditionRequired`](#PreconditionRequired)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 428`'
- name: http.HttpStatus.Processing
  id: haxe/http/httpstatus#Processing
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`Processing`](#Processing)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 102`'
- name: http.HttpStatus.ProxyAuthenticationRequired
  id: haxe/http/httpstatus#ProxyAuthenticationRequired
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`ProxyAuthenticationRequired`](#ProxyAuthenticationRequired)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 407`'
- name: http.HttpStatus.RangeNotSatisfiable
  id: haxe/http/httpstatus#RangeNotSatisfiable
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`RangeNotSatisfiable`](#RangeNotSatisfiable)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 416`'
- name: http.HttpStatus.RequestHeaderFieldsTooLarge
  id: haxe/http/httpstatus#RequestHeaderFieldsTooLarge
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`RequestHeaderFieldsTooLarge`](#RequestHeaderFieldsTooLarge)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 431`'
- name: http.HttpStatus.RequestTimeout
  id: haxe/http/httpstatus#RequestTimeout
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`RequestTimeout`](#RequestTimeout)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 408`'
- name: http.HttpStatus.ResetContent
  id: haxe/http/httpstatus#ResetContent
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`ResetContent`](#ResetContent)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 205`'
- name: http.HttpStatus.SeeOther
  id: haxe/http/httpstatus#SeeOther
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`SeeOther`](#SeeOther)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 303`'
- name: http.HttpStatus.ServiceUnavailable
  id: haxe/http/httpstatus#ServiceUnavailable
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`ServiceUnavailable`](#ServiceUnavailable)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 503`'
- name: http.HttpStatus.SwitchingProtocols
  id: haxe/http/httpstatus#SwitchingProtocols
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`SwitchingProtocols`](#SwitchingProtocols)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 101`'
- name: http.HttpStatus.SwitchProxy
  id: haxe/http/httpstatus#SwitchProxy
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`SwitchProxy`](#SwitchProxy)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 306`'
- name: http.HttpStatus.TemporaryRedirect
  id: haxe/http/httpstatus#TemporaryRedirect
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`TemporaryRedirect`](#TemporaryRedirect)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 307`'
- name: http.HttpStatus.TooManyRequests
  id: haxe/http/httpstatus#TooManyRequests
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`TooManyRequests`](#TooManyRequests)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 429`'
- name: http.HttpStatus.Unauthorized
  id: haxe/http/httpstatus#Unauthorized
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`Unauthorized`](#Unauthorized)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 401`'
- name: http.HttpStatus.UnavailableForLegalReasons
  id: haxe/http/httpstatus#UnavailableForLegalReasons
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`UnavailableForLegalReasons`](#UnavailableForLegalReasons)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 451`'
- name: http.HttpStatus.UnprocessableEntity
  id: haxe/http/httpstatus#UnprocessableEntity
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`UnprocessableEntity`](#UnprocessableEntity)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 422`'
- name: http.HttpStatus.UnsupportedMediaType
  id: haxe/http/httpstatus#UnsupportedMediaType
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`UnsupportedMediaType`](#UnsupportedMediaType)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 415`'
- name: http.HttpStatus.UpgradeRequired
  id: haxe/http/httpstatus#UpgradeRequired
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`UpgradeRequired`](#UpgradeRequired)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 426`'
- name: http.HttpStatus.URITooLong
  id: haxe/http/httpstatus#URITooLong
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`URITooLong`](#URITooLong)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 414`'
- name: http.HttpStatus.UseProxy
  id: haxe/http/httpstatus#UseProxy
  summary: null
  belongs_to: http.HttpStatus
  description: '### `inline``read only`[`UseProxy`](#UseProxy)`:`[`HttpStatus`](httpstatus "haxe.http.HttpStatus")` = 305`'
- name: http.HttpStatus.VariantAlsoNegotiates
  id: haxe/http/httpstatus#VariantAlsoNegotiates
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: http.HttpStatus
  description: "### `inline``read only`[`VariantAlsoNegotiates`](#VariantAlsoNegotiates)`:`[`HttpStatus`](httpstatus \"haxe.http.HttpStatus\")` = 506`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/http/HttpStatus.html](https://api.haxe.org/haxe/http/HttpStatus.html)"
- name: HttpFlash
  id: haxe/httpflash
  summary: Cancels this Http request if request has been called and a response has not yet been received
  description: "# HttpFlash\n\npackage [haxe](index)\n\nextends [HttpBase](http/httpbase \"haxe.http.HttpBase - This class can be used to handle Http requests consistently across platforms.\")\n\nimport [haxe.Http](http)\n\n*Available on flash*\n\n## Constructor\n\n### [`new`](#new)`(``url:`[`String`](../string \"String - The basic String class.\")`)`\n\n## Methods\n\n### [`cancel`](#cancel)`():`[`Void`](../void \"Void - The standard Void type.\")\n\nCancels `this` Http request if `request` has been called and a response has not yet been received.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/HttpFlash.html](https://api.haxe.org/haxe/HttpFlash.html)"
- name: HttpFlash.cancel()
  id: haxe/httpflash#cancel
  summary: Cancels this Http request if request has been called and a response has not yet been received
  belongs_to: HttpFlash
  description: "### [`cancel`](#cancel)`():`[`Void`](../void \"Void - The standard Void type.\")\n\nCancels `this` Http request if `request` has been called and a response has not yet been received.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/HttpFlash.html](https://api.haxe.org/haxe/HttpFlash.html)"
- name: IMap
  id: haxe/imap
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# IMap\\<K, V\\>\n\npackage [haxe](index)\n\nimport [haxe.Constraints](constraints)\n\nextended by [BalancedTree](ds/balancedtree \"haxe.ds.BalancedTree - BalancedTree allows key-value mapping with arbitrary keys, as long as they can be ordered.\"), [EnumValueMap](ds/enumvaluemap \"haxe.ds.EnumValueMap - EnumValueMap allows mapping of enum value keys to arbitrary values.\"), [IntMap](ds/intmap \"haxe.ds.IntMap - IntMap allows mapping of Int keys to arbitrary values.\"), [ObjectMap](ds/objectmap \"haxe.ds.ObjectMap - ObjectMap allows mapping of object keys to arbitrary values.\"), [StringMap](ds/stringmap \"haxe.ds.StringMap - StringMap allows mapping of String keys to arbitrary values.\"), [UnsafeStringMap](ds/unsafestringmap \"haxe.ds.UnsafeStringMap - This is similar to StringMap excepts that it does not sanitize the keys.\"), [WeakMap](ds/weakmap \"haxe.ds.WeakMap - WeakMap allows mapping of object keys to arbitrary values.\")\n\n*Available on all platforms*\n\n## Methods\n\n### [`clear`](#clear)`():`[`Void`](../void \"Void - The standard Void type.\")\n\n### [`copy`](#copy)`():`[`IMap`](imap \"haxe.IMap\")`<``K``, ``V``>`\n\n### [`exists`](#exists)`(``k:``K``):`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`get`](#get)`(``k:``K``):`[`Null`](../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``V``>`\n\n### [`iterator`](#iterator)`():`[`Iterator`](../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``V``>`\n\n### [`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../keyvalueiterator \"KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.\")`<``K``, ``V``>`\n\n### [`keys`](#keys)`():`[`Iterator`](../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``K``>`\n\n### [`remove`](#remove)`(``k:``K``):`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`set`](#set)`(``k:``K``,`` ``v:``V``):`[`Void`](../void \"Void - The standard Void type.\")\n\n### [`toString`](#toString)`():`[`String`](../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/IMap.html](https://api.haxe.org/haxe/IMap.html)"
- name: IMap.clear()
  id: haxe/imap#clear
  summary: null
  belongs_to: IMap
  description: '### [`clear`](#clear)`():`[`Void`](../void "Void - The standard Void type.")'
- name: IMap.copy()
  id: haxe/imap#copy
  summary: null
  belongs_to: IMap
  description: '### [`copy`](#copy)`():`[`IMap`](imap "haxe.IMap")`<``K``, ``V``>`'
- name: IMap.exists()
  id: haxe/imap#exists
  summary: null
  belongs_to: IMap
  description: '### [`exists`](#exists)`(``k:``K``):`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: IMap.get()
  id: haxe/imap#get
  summary: null
  belongs_to: IMap
  description: '### [`get`](#get)`(``k:``K``):`[`Null`](../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``V``>`'
- name: IMap.iterator()
  id: haxe/imap#iterator
  summary: null
  belongs_to: IMap
  description: '### [`iterator`](#iterator)`():`[`Iterator`](../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``V``>`'
- name: IMap.keys()
  id: haxe/imap#keys
  summary: null
  belongs_to: IMap
  description: '### [`keys`](#keys)`():`[`Iterator`](../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<``K``>`'
- name: IMap.keyValueIterator()
  id: haxe/imap#keyValueIterator
  summary: null
  belongs_to: IMap
  description: '### [`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](../keyvalueiterator "KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.")`<``K``, ``V``>`'
- name: IMap.remove()
  id: haxe/imap#remove
  summary: null
  belongs_to: IMap
  description: '### [`remove`](#remove)`(``k:``K``):`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: IMap.set()
  id: haxe/imap#set
  summary: null
  belongs_to: IMap
  description: '### [`set`](#set)`(``k:``K``,``v:``V``):`[`Void`](../void "Void - The standard Void type.")'
- name: IMap.toString()
  id: haxe/imap#toString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: IMap
  description: "### [`toString`](#toString)`():`[`String`](../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/IMap.html](https://api.haxe.org/haxe/IMap.html)"
- name: Int
  id: int
  summary: The standard Int type
  description: "# Int\n\n[no package](index)\n\nto [Float](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n*Available on all platforms*\n\nThe standard [`Int`](int) type. Its precision depends on the platform.\n\nOn static targets, `null` cannot be assigned to [`Int`](int). If this is necessary, [`Null`](null)`<`[`Int`](int)`>` can be used instead.\n\n[`Std.int`](std#int) converts a [`Float`](float) to an [`Int`](int), rounded towards 0. [`Std.parseInt`](std#parseInt) converts a [`String`](string) to an [`Int`](int).\n\nSee also:\n\n- <https://haxe.org/manual/types-basic-types.html>\n\n- <https://haxe.org/manual/std-math-integer-math.html>\n\n- <https://haxe.org/manual/types-nullability.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Int.html](https://api.haxe.org/Int.html)"
- name: Int32
  id: haxe/int32
  summary: Int32 provides a 32-bit integer with consistent overflow behavior across all platforms
  description: "# Int32([Int](../int \"Int - The standard Int type.\"))\n\npackage [haxe](index)\n\nfrom [Int](../int \"Int - The standard Int type.\") to [Int](../int \"Int - The standard Int type.\"),\n\n*Available on all platforms*\n\nInt32 provides a 32-bit integer with consistent overflow behavior across all platforms.\n\n## Static methods\n\n### `static`[`ucompare`](#ucompare)`(``a:`[`Int32`](int32 \"haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\")`,`` ``b:`[`Int32`](int32 \"haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\nCompare `a` and `b` in unsigned mode.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Int32.html](https://api.haxe.org/haxe/Int32.html)"
- name: Int32.ucompare()
  id: haxe/int32#ucompare
  summary: Compare a and b in unsigned mode
  belongs_to: Int32
  description: "### `static`[`ucompare`](#ucompare)`(``a:`[`Int32`](int32 \"haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\")`,``b:`[`Int32`](int32 \"haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\nCompare `a` and `b` in unsigned mode.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Int32.html](https://api.haxe.org/haxe/Int32.html)"
- name: Int64
  id: haxe/int64
  summary: A cross-platform signed 64-bit integer
  description: "# Int64(\\_\\_Int64)\n\npackage [haxe](index)\n\nfrom \\_\\_Int64, to \\_\\_Int64\n\n*Available on all platforms*\n\nA cross-platform signed 64-bit integer. Int64 instances can be created from two 32-bit words using [`Int64.make`](int64#make)`()`.\n\n## Static methods\n\n### `static``inline`[`add`](#add)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns the sum of `a` and `b`.\n\n### `static``inline`[`and`](#and)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns the bitwise AND of `a` and `b`.\n\n### `static``inline`[`compare`](#compare)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\nCompares `a` and `b` in signed mode. Returns a negative value if `a < b`, positive if `a > b`, or 0 if `a == b`.\n\n### `static``inline`[`div`](#div)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns the quotient of `a` divided by `b`.\n\n### `static`[`divMod`](#divMod)`(``dividend:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``divisor:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):{quotient:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`, modulus:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`}`\n\nPerforms signed integer divison of `dividend` by `divisor`. Returns `{ quotient : `[`Int64`](int64#Int64)`, modulus : `[`Int64`](int64#Int64)` }`.\n\n### `static``inline`[`eq`](#eq)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns [`true`](../bool) if `a` is equal to `b`.\n\n### `static`[`fromFloat`](#fromFloat)`(``f:`[`Float`](../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\n### `static``inline`[`getHigh`](#getHigh)`(``x:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int32`](int32 \"haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\")\n\nReturns the high 32-bit word of `x`.\n\n### `static``inline`[`getLow`](#getLow)`(``x:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int32`](int32 \"haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\")\n\nReturns the low 32-bit word of `x`.\n\n### `static``inline`[`is`](#is)`(``val:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n**Deprecated:** \"haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead\"\n\n### `static``inline`[`isInt64`](#isInt64)`(``val:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns whether the value `val` is of type [`haxe.Int64`](int64#Int64)\n\n### `static``inline`[`isNeg`](#isNeg)`(``x:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns [`true`](../bool) if `x` is less than zero.\n\n### `static``inline`[`isZero`](#isZero)`(``x:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns [`true`](../bool) if `x` is exactly zero.\n\n### `static``inline`[`make`](#make)`(``high:`[`Int32`](int32 \"haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\")`,`` ``low:`[`Int32`](int32 \"haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nConstruct an Int64 from two 32-bit words `high` and `low`.\n\n### `static``inline`[`mod`](#mod)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns the modulus of `a` divided by `b`.\n\n### `static`[`mul`](#mul)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns the product of `a` and `b`.\n\n### `static`[`neg`](#neg)`(``x:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns the negative of `x`.\n\n### `static``inline`[`neq`](#neq)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns [`true`](../bool) if `a` is not equal to `b`.\n\n### `static``inline`[`ofInt`](#ofInt)`(``x:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns an Int64 with the value of the Int `x`. `x` is sign-extended to fill 64 bits.\n\n### `static``inline`[`or`](#or)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns the bitwise OR of `a` and `b`.\n\n### `static`[`parseString`](#parseString)`(``sParam:`[`String`](../string \"String - The basic String class.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\n### `static``inline`[`shl`](#shl)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns `a` left-shifted by `b` bits.\n\n### `static``inline`[`shr`](#shr)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns `a` right-shifted by `b` bits in signed mode. `a` is sign-extended.\n\n### `static``inline`[`sub`](#sub)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns `a` minus `b`.\n\n### `static``inline`[`toInt`](#toInt)`(``x:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\nReturns an Int with the value of the Int64 `x`. Throws an exception if `x` cannot be represented in 32 bits.\n\n### `static``inline`[`toStr`](#toStr)`(``x:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`String`](../string \"String - The basic String class.\")\n\nReturns a signed decimal [`String`](../string) representation of `x`.\n\n### `static``inline`[`ucompare`](#ucompare)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\nCompares `a` and `b` in unsigned mode. Returns a negative value if `a < b`, positive if `a > b`, or 0 if `a == b`.\n\n### `static``inline`[`ushr`](#ushr)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns `a` right-shifted by `b` bits in unsigned mode. `a` is padded with zeroes.\n\n### `static``inline`[`xor`](#xor)`(``a:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`,`` ``b:`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns the bitwise XOR of `a` and `b`.\n\n## Variables\n\n### `read only`[`high`](#high)`:`[`Int32`](int32 \"haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\")\n\n### `read only`[`low`](#low)`:`[`Int32`](int32 \"haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\")\n\n## Methods\n\n### `inline`[`copy`](#copy)`():`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nMakes a copy of `this` Int64.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Int64.html](https://api.haxe.org/haxe/Int64.html)"
- name: Int64.add()
  id: haxe/int64#add
  summary: Returns the sum of a and b
  belongs_to: Int64
  description: |-
    ### `static``inline`[`add`](#add)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns the sum of `a` and `b`.
- name: Int64.and()
  id: haxe/int64#and
  summary: Returns the bitwise AND of a and b
  belongs_to: Int64
  description: |-
    ### `static``inline`[`and`](#and)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns the bitwise AND of `a` and `b`.
- name: Int64.compare()
  id: haxe/int64#compare
  summary: Compares a and b in signed mode
  belongs_to: Int64
  description: |-
    ### `static``inline`[`compare`](#compare)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int`](../int "Int - The standard Int type.")

    Compares `a` and `b` in signed mode. Returns a negative value if `a < b`, positive if `a > b`, or 0 if `a == b`.
- name: Int64.copy()
  id: haxe/int64#copy
  summary: Makes a copy of this Int64
  belongs_to: Int64
  description: "### `inline`[`copy`](#copy)`():`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nMakes a copy of `this` Int64.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Int64.html](https://api.haxe.org/haxe/Int64.html)"
- name: Int64.div()
  id: haxe/int64#div
  summary: Returns the quotient of a divided by b
  belongs_to: Int64
  description: |-
    ### `static``inline`[`div`](#div)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns the quotient of `a` divided by `b`.
- name: Int64.divMod()
  id: haxe/int64#divMod
  summary: Performs signed integer divison of dividend by divisor
  belongs_to: Int64
  description: |-
    ### `static`[`divMod`](#divMod)`(``dividend:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``divisor:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):{quotient:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`, modulus:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`}`

    Performs signed integer divison of `dividend` by `divisor`. Returns `{ quotient : `[`Int64`](int64#Int64)`, modulus : `[`Int64`](int64#Int64)` }`.
- name: Int64.eq()
  id: haxe/int64#eq
  summary: Returns true if a is equal to b
  belongs_to: Int64
  description: |-
    ### `static``inline`[`eq`](#eq)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")

    Returns [`true`](../bool) if `a` is equal to `b`.
- name: Int64.fromFloat()
  id: haxe/int64#fromFloat
  summary: null
  belongs_to: Int64
  description: '### `static`[`fromFloat`](#fromFloat)`(``f:`[`Float`](../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")'
- name: Int64.getHigh()
  id: haxe/int64#getHigh
  summary: Returns the high 32-bit word of x
  belongs_to: Int64
  description: |-
    ### `static``inline`[`getHigh`](#getHigh)`(``x:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int32`](int32 "haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.")

    Returns the high 32-bit word of `x`.
- name: Int64.getLow()
  id: haxe/int64#getLow
  summary: Returns the low 32-bit word of x
  belongs_to: Int64
  description: |-
    ### `static``inline`[`getLow`](#getLow)`(``x:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int32`](int32 "haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.")

    Returns the low 32-bit word of `x`.
- name: Int64.high
  id: haxe/int64#high
  summary: null
  belongs_to: Int64
  description: '### `read only`[`high`](#high)`:`[`Int32`](int32 "haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.")'
- name: Int64.is()
  id: haxe/int64#is
  summary: 'Deprecated: "haxe.Int64.is() is deprecated'
  belongs_to: Int64
  description: |-
    ### `static``inline`[`is`](#is)`(``val:`[`Dynamic`](../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")

    **Deprecated:** "haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead"
- name: Int64.isInt64()
  id: haxe/int64#isInt64
  summary: null
  belongs_to: Int64
  description: |-
    ### `static``inline`[`isInt64`](#isInt64)`(``val:`[`Dynamic`](../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")

    Returns whether the value `val` is of type [`haxe.Int64`](int64#Int64)
- name: Int64.isNeg()
  id: haxe/int64#isNeg
  summary: Returns true if x is less than zero
  belongs_to: Int64
  description: |-
    ### `static``inline`[`isNeg`](#isNeg)`(``x:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")

    Returns [`true`](../bool) if `x` is less than zero.
- name: Int64.isZero()
  id: haxe/int64#isZero
  summary: Returns true if x is exactly zero
  belongs_to: Int64
  description: |-
    ### `static``inline`[`isZero`](#isZero)`(``x:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")

    Returns [`true`](../bool) if `x` is exactly zero.
- name: Int64.low
  id: haxe/int64#low
  summary: null
  belongs_to: Int64
  description: |-
    ### `read only`[`low`](#low)`:`[`Int32`](int32 "haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.")

    ## Methods
- name: Int64.make()
  id: haxe/int64#make
  summary: Construct an Int64 from two 32-bit words high and low
  belongs_to: Int64
  description: |-
    ### `static``inline`[`make`](#make)`(``high:`[`Int32`](int32 "haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.")`,``low:`[`Int32`](int32 "haxe.Int32 - Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Construct an Int64 from two 32-bit words `high` and `low`.
- name: Int64.mod()
  id: haxe/int64#mod
  summary: Returns the modulus of a divided by b
  belongs_to: Int64
  description: |-
    ### `static``inline`[`mod`](#mod)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns the modulus of `a` divided by `b`.
- name: Int64.mul()
  id: haxe/int64#mul
  summary: Returns the product of a and b
  belongs_to: Int64
  description: |-
    ### `static`[`mul`](#mul)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns the product of `a` and `b`.
- name: Int64.neg()
  id: haxe/int64#neg
  summary: Returns the negative of x
  belongs_to: Int64
  description: |-
    ### `static`[`neg`](#neg)`(``x:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns the negative of `x`.
- name: Int64.neq()
  id: haxe/int64#neq
  summary: Returns true if a is not equal to b
  belongs_to: Int64
  description: |-
    ### `static``inline`[`neq`](#neq)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")

    Returns [`true`](../bool) if `a` is not equal to `b`.
- name: Int64.ofInt()
  id: haxe/int64#ofInt
  summary: Returns an Int64 with the value of the Int x
  belongs_to: Int64
  description: |-
    ### `static``inline`[`ofInt`](#ofInt)`(``x:`[`Int`](../int "Int - The standard Int type.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns an Int64 with the value of the Int `x`. `x` is sign-extended to fill 64 bits.
- name: Int64.or()
  id: haxe/int64#or
  summary: Returns the bitwise OR of a and b
  belongs_to: Int64
  description: |-
    ### `static``inline`[`or`](#or)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns the bitwise OR of `a` and `b`.
- name: Int64.parseString()
  id: haxe/int64#parseString
  summary: null
  belongs_to: Int64
  description: '### `static`[`parseString`](#parseString)`(``sParam:`[`String`](../string "String - The basic String class.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")'
- name: Int64.shl()
  id: haxe/int64#shl
  summary: Returns a left-shifted by b bits
  belongs_to: Int64
  description: |-
    ### `static``inline`[`shl`](#shl)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int`](../int "Int - The standard Int type.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns `a` left-shifted by `b` bits.
- name: Int64.shr()
  id: haxe/int64#shr
  summary: Returns a right-shifted by b bits in signed mode
  belongs_to: Int64
  description: |-
    ### `static``inline`[`shr`](#shr)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int`](../int "Int - The standard Int type.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns `a` right-shifted by `b` bits in signed mode. `a` is sign-extended.
- name: Int64.sub()
  id: haxe/int64#sub
  summary: Returns a minus b
  belongs_to: Int64
  description: |-
    ### `static``inline`[`sub`](#sub)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns `a` minus `b`.
- name: Int64.toInt()
  id: haxe/int64#toInt
  summary: Returns an Int with the value of the Int64 x
  belongs_to: Int64
  description: |-
    ### `static``inline`[`toInt`](#toInt)`(``x:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int`](../int "Int - The standard Int type.")

    Returns an Int with the value of the Int64 `x`. Throws an exception if `x` cannot be represented in 32 bits.
- name: Int64.toStr()
  id: haxe/int64#toStr
  summary: Returns a signed decimal String representation of x
  belongs_to: Int64
  description: |-
    ### `static``inline`[`toStr`](#toStr)`(``x:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`String`](../string "String - The basic String class.")

    Returns a signed decimal [`String`](../string) representation of `x`.
- name: Int64.ucompare()
  id: haxe/int64#ucompare
  summary: Compares a and b in unsigned mode
  belongs_to: Int64
  description: |-
    ### `static``inline`[`ucompare`](#ucompare)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int`](../int "Int - The standard Int type.")

    Compares `a` and `b` in unsigned mode. Returns a negative value if `a < b`, positive if `a > b`, or 0 if `a == b`.
- name: Int64.ushr()
  id: haxe/int64#ushr
  summary: Returns a right-shifted by b bits in unsigned mode
  belongs_to: Int64
  description: |-
    ### `static``inline`[`ushr`](#ushr)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int`](../int "Int - The standard Int type.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns `a` right-shifted by `b` bits in unsigned mode. `a` is padded with zeroes.
- name: Int64.xor()
  id: haxe/int64#xor
  summary: Returns the bitwise XOR of a and b
  belongs_to: Int64
  description: |-
    ### `static``inline`[`xor`](#xor)`(``a:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`,``b:`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns the bitwise XOR of `a` and `b`.

    ## Variables
- name: Int64Helper
  id: haxe/int64helper
  summary: Helper for parsing to Int64 instances
  description: "# Int64Helper\n\npackage [haxe](index)\n\n*Available on all platforms*\n\nHelper for parsing to [`Int64`](int64#Int64) instances.\n\n## Static methods\n\n### `static`[`fromFloat`](#fromFloat)`(``f:`[`Float`](../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nCreate [`Int64`](int64#Int64) from given float.\n\n### `static`[`parseString`](#parseString)`(``sParam:`[`String`](../string \"String - The basic String class.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nCreate [`Int64`](int64#Int64) from given string.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Int64Helper.html](https://api.haxe.org/haxe/Int64Helper.html)"
- name: Int64Helper.fromFloat()
  id: haxe/int64helper#fromFloat
  summary: Create Int64 from given float
  belongs_to: Int64Helper
  description: |-
    ### `static`[`fromFloat`](#fromFloat)`(``f:`[`Float`](../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Int64`](int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Create [`Int64`](int64#Int64) from given float.
- name: Int64Helper.parseString()
  id: haxe/int64helper#parseString
  summary: Create Int64 from given string
  belongs_to: Int64Helper
  description: "### `static`[`parseString`](#parseString)`(``sParam:`[`String`](../string \"String - The basic String class.\")`):`[`Int64`](int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nCreate [`Int64`](int64#Int64) from given string.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Int64Helper.html](https://api.haxe.org/haxe/Int64Helper.html)"
- name: IntIterator
  id: intiterator
  summary: IntIterator is used for implementing interval iterations
  description: "# IntIterator\n\n[no package](index)\n\n*Available on all platforms*\n\nIntIterator is used for implementing interval iterations.\n\nIt is usually not used explicitly, but through its special syntax: `min...max`\n\nWhile it is possible to assign an instance of IntIterator to a variable or field, it is worth noting that IntIterator does not reset after being used in a for-loop. Subsequent uses of the same instance will then have no effect.\n\nSee also:\n\n- <https://haxe.org/manual/lf-iterators.html>\n\n## Constructor\n\n### `inline`[`new`](#new)`(``min:`[`Int`](int \"Int - The standard Int type.\")`,`` ``max:`[`Int`](int \"Int - The standard Int type.\")`)`\n\nIterates from `min` (inclusive) to `max` (exclusive).\n\nIf `max <= min`, the iterator will not act as a countdown.\n\n## Methods\n\n### `inline`[`hasNext`](#hasNext)`():`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns true if the iterator has other items, false otherwise.\n\n### `inline`[`next`](#next)`():`[`Int`](int \"Int - The standard Int type.\")\n\nMoves to the next item of the iterator.\n\nIf this is called while hasNext() is false, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/IntIterator.html](https://api.haxe.org/IntIterator.html)"
- name: IntIterator.hasNext()
  id: intiterator#hasNext
  summary: Returns true if the iterator has other items, false otherwise
  belongs_to: IntIterator
  description: |-
    ### `inline`[`hasNext`](#hasNext)`():`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Returns true if the iterator has other items, false otherwise.
- name: IntIterator.next()
  id: intiterator#next
  summary: Moves to the next item of the iterator
  belongs_to: IntIterator
  description: "### `inline`[`next`](#next)`():`[`Int`](int \"Int - The standard Int type.\")\n\nMoves to the next item of the iterator.\n\nIf this is called while hasNext() is false, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/IntIterator.html](https://api.haxe.org/IntIterator.html)"
- name: io.ArrayBufferView
  id: haxe/io/arraybufferview
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ArrayBufferView([ArrayBufferViewData](arraybufferviewdata \"haxe.io.ArrayBufferViewData\"))\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\n## Static methods\n\n### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n*Available on cs, php, neko, cpp, macro, java, lua, python, hl, flash*\n\n### `static``inline`[`fromData`](#fromData)`(``a:`[`ArrayBufferViewData`](arraybufferviewdata \"haxe.io.ArrayBufferViewData\")`):`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n## Variables\n\n### `read only`[`buffer`](#buffer)`:`[`Bytes`](bytes \"haxe.io.Bytes\")\n\n### `read only`[`byteLength`](#byteLength)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `read only`[`byteOffset`](#byteOffset)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n## Methods\n\n### `inline`[`getData`](#getData)`():`[`ArrayBufferViewData`](arraybufferviewdata \"haxe.io.ArrayBufferViewData\")\n\n### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n*Available on cs, php, neko, cpp, macro, java, lua, python, hl, flash*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/ArrayBufferView.html](https://api.haxe.org/haxe/io/ArrayBufferView.html)"
- name: io.ArrayBufferView.buffer
  id: haxe/io/arraybufferview#buffer
  summary: null
  belongs_to: io.ArrayBufferView
  description: '### `read only`[`buffer`](#buffer)`:`[`Bytes`](bytes "haxe.io.Bytes")'
- name: io.ArrayBufferView.byteLength
  id: haxe/io/arraybufferview#byteLength
  summary: null
  belongs_to: io.ArrayBufferView
  description: '### `read only`[`byteLength`](#byteLength)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: io.ArrayBufferView.byteOffset
  id: haxe/io/arraybufferview#byteOffset
  summary: null
  belongs_to: io.ArrayBufferView
  description: |-
    ### `read only`[`byteOffset`](#byteOffset)`:`[`Int`](../../int "Int - The standard Int type.")

    ## Methods
- name: io.ArrayBufferView.fromBytes()
  id: haxe/io/arraybufferview#fromBytes
  summary: null
  belongs_to: io.ArrayBufferView
  description: |-
    ### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes "haxe.io.Bytes")`,``pos:`[`Int`](../../int "Int - The standard Int type.")` = 0,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")

    *Available on cs, php, neko, cpp, macro, java, lua, python, hl, flash*
- name: io.ArrayBufferView.fromData()
  id: haxe/io/arraybufferview#fromData
  summary: null
  belongs_to: io.ArrayBufferView
  description: |-
    ### `static``inline`[`fromData`](#fromData)`(``a:`[`ArrayBufferViewData`](arraybufferviewdata "haxe.io.ArrayBufferViewData")`):`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")

    ## Variables
- name: io.ArrayBufferView.getData()
  id: haxe/io/arraybufferview#getData
  summary: null
  belongs_to: io.ArrayBufferView
  description: '### `inline`[`getData`](#getData)`():`[`ArrayBufferViewData`](arraybufferviewdata "haxe.io.ArrayBufferViewData")'
- name: io.ArrayBufferView.sub()
  id: haxe/io/arraybufferview#sub
  summary: null
  belongs_to: io.ArrayBufferView
  description: '### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int "Int - The standard Int type.")`,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")'
- name: io.ArrayBufferView.subarray()
  id: haxe/io/arraybufferview#subarray
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: io.ArrayBufferView
  description: "### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n*Available on cs, php, neko, cpp, macro, java, lua, python, hl, flash*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/ArrayBufferView.html](https://api.haxe.org/haxe/io/ArrayBufferView.html)"
- name: io.ArrayBufferViewData
  id: haxe/io/arraybufferviewdata
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ArrayBufferViewData\n\npackage [haxe.io](index)\n\nimport [haxe.io.ArrayBufferView](arraybufferview)\n\n*Available on all platforms*\n\n#### flash, lua, php, cs, java, cpp, neko, hl, python, macro\n\n*alias for* [`haxe.io.ArrayBufferViewImpl`](arraybufferviewimpl \"haxe.io.ArrayBufferViewImpl\")\n\n#### js\n\n*alias for* [`js.lib.ArrayBufferView`](https://api.haxe.org/js/lib/ArrayBufferView.html \"js.lib.ArrayBufferView - ArrayBufferView is a helper type representing any of the following JavaScript TypedArray types: Documentation ArrayBufferView by Mozilla Contributors, licensed under CC-BY-SA 2.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/ArrayBufferViewData.html](https://api.haxe.org/haxe/io/ArrayBufferViewData.html)"
- name: io.ArrayBufferViewImpl
  id: haxe/io/arraybufferviewimpl
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ArrayBufferViewImpl\n\npackage [haxe.io](index)\n\nimport [haxe.io.ArrayBufferView](arraybufferview)\n\n*Available on cs, php, neko, cpp, macro, java, lua, python, hl, flash*\n\n## Constructor\n\n### [`new`](#new)`(``bytes:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``length:`[`Int`](../../int \"Int - The standard Int type.\")`)`\n\n## Variables\n\n### [`byteLength`](#byteLength)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### [`byteOffset`](#byteOffset)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### [`bytes`](#bytes)`:`[`Bytes`](bytes \"haxe.io.Bytes\")\n\n## Methods\n\n### [`sub`](#sub)`(``begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`ArrayBufferViewImpl`](arraybufferviewimpl \"haxe.io.ArrayBufferViewImpl\")\n\n### [`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`ArrayBufferViewImpl`](arraybufferviewimpl \"haxe.io.ArrayBufferViewImpl\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/ArrayBufferViewImpl.html](https://api.haxe.org/haxe/io/ArrayBufferViewImpl.html)"
- name: io.ArrayBufferViewImpl.byteLength
  id: haxe/io/arraybufferviewimpl#byteLength
  summary: null
  belongs_to: io.ArrayBufferViewImpl
  description: '### [`byteLength`](#byteLength)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: io.ArrayBufferViewImpl.byteOffset
  id: haxe/io/arraybufferviewimpl#byteOffset
  summary: null
  belongs_to: io.ArrayBufferViewImpl
  description: '### [`byteOffset`](#byteOffset)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: io.ArrayBufferViewImpl.bytes
  id: haxe/io/arraybufferviewimpl#bytes
  summary: null
  belongs_to: io.ArrayBufferViewImpl
  description: |-
    ### [`bytes`](#bytes)`:`[`Bytes`](bytes "haxe.io.Bytes")

    ## Methods
- name: io.ArrayBufferViewImpl.sub()
  id: haxe/io/arraybufferviewimpl#sub
  summary: null
  belongs_to: io.ArrayBufferViewImpl
  description: '### [`sub`](#sub)`(``begin:`[`Int`](../../int "Int - The standard Int type.")`,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`ArrayBufferViewImpl`](arraybufferviewimpl "haxe.io.ArrayBufferViewImpl")'
- name: io.ArrayBufferViewImpl.subarray()
  id: haxe/io/arraybufferviewimpl#subarray
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: io.ArrayBufferViewImpl
  description: "### [`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`ArrayBufferViewImpl`](arraybufferviewimpl \"haxe.io.ArrayBufferViewImpl\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/ArrayBufferViewImpl.html](https://api.haxe.org/haxe/io/ArrayBufferViewImpl.html)"
- name: io.BufferInput
  id: haxe/io/bufferinput
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# BufferInput\n\npackage [haxe.io](index)\n\nextends [Input](input \"haxe.io.Input - An Input is an abstract reader.\")\n\n*Available on all platforms*\n\n## Constructor\n\n### [`new`](#new)`(``i:`[`Input`](input \"haxe.io.Input - An Input is an abstract reader.\")`,`` ``buf:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``available:`[`Int`](../../int \"Int - The standard Int type.\")` = 0``)`\n\n## Variables\n\n### [`available`](#available)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### [`buf`](#buf)`:`[`Bytes`](bytes \"haxe.io.Bytes\")\n\n### [`i`](#i)`:`[`Input`](input \"haxe.io.Input - An Input is an abstract reader.\")\n\n### [`pos`](#pos)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n## Methods\n\n### [`refill`](#refill)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/BufferInput.html](https://api.haxe.org/haxe/io/BufferInput.html)"
- name: io.BufferInput.available
  id: haxe/io/bufferinput#available
  summary: null
  belongs_to: io.BufferInput
  description: '### [`available`](#available)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: io.BufferInput.buf
  id: haxe/io/bufferinput#buf
  summary: null
  belongs_to: io.BufferInput
  description: '### [`buf`](#buf)`:`[`Bytes`](bytes "haxe.io.Bytes")'
- name: io.BufferInput.i
  id: haxe/io/bufferinput#i
  summary: null
  belongs_to: io.BufferInput
  description: '### [`i`](#i)`:`[`Input`](input "haxe.io.Input - An Input is an abstract reader.")'
- name: io.BufferInput.pos
  id: haxe/io/bufferinput#pos
  summary: null
  belongs_to: io.BufferInput
  description: |-
    ### [`pos`](#pos)`:`[`Int`](../../int "Int - The standard Int type.")

    ## Methods
- name: io.BufferInput.refill()
  id: haxe/io/bufferinput#refill
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: io.BufferInput
  description: "### [`refill`](#refill)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/BufferInput.html](https://api.haxe.org/haxe/io/BufferInput.html)"
- name: io.Bytes
  id: haxe/io/bytes
  summary: Returns a new Bytes instance with the given length
  description: "# Bytes\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\n## Static methods\n\n### `static`[`alloc`](#alloc)`(``length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Bytes`](bytes \"haxe.io.Bytes\")\n\nReturns a new [`Bytes`](bytes#Bytes) instance with the given `length`. The values of the bytes are not initialized and may not be zero.\n\n### `static`[`fastGet`](#fastGet)`(``b:`[`BytesData`](bytesdata \"haxe.io.BytesData\")`,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\nReads the `pos`-th byte of the given `b` bytes, in the most efficient way possible. Behavior when reading outside of the available data is unspecified.\n\n### `static`[`ofData`](#ofData)`(``b:`[`BytesData`](bytesdata \"haxe.io.BytesData\")`):`[`Bytes`](bytes \"haxe.io.Bytes\")\n\nReturns the [`Bytes`](bytes#Bytes) representation of the given [`BytesData`](bytesdata#BytesData).\n\n### `static`[`ofHex`](#ofHex)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`Bytes`](bytes \"haxe.io.Bytes\")\n\nConverts the given hexadecimal [`String`](../../string) to [`Bytes`](bytes#Bytes). `s` must be a string of even length consisting only of hexadecimal digits. For example: `\"0FDA14058916052309\"`.\n\n### `static`[`ofString`](#ofString)`(``s:`[`String`](../../string \"String - The basic String class.\")`,`` ``?encoding:`[`Encoding`](encoding \"haxe.io.Encoding\")`):`[`Bytes`](bytes \"haxe.io.Bytes\")\n\nReturns the [`Bytes`](bytes#Bytes) representation of the given [`String`](../../string), using the specified encoding (UTF-8 by default).\n\n## Constructor\n\n### [`new`](#new)`(``length:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``b:`[`BytesData`](bytesdata \"haxe.io.BytesData\")`)`\n\n*Available on macro*\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n## Methods\n\n### [`blit`](#blit)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``src:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``srcpos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nCopies `len` bytes from `src` into this instance.\n\nParameters:\n\n|          |                                                                         |\n|----------|-------------------------------------------------------------------------|\n| `pos`    | Zero-based location in `this` instance at which to start writing bytes. |\n| `src`    | Source [`Bytes`](bytes#Bytes) instance from which to copy bytes.        |\n| `srcpos` | Zero-based location at `src` from which bytes will be copied.           |\n| `len`    | Number of bytes to be copied.                                           |\n\n### [`compare`](#compare)`(``other:`[`Bytes`](bytes \"haxe.io.Bytes\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\nReturns `0` if the bytes of `this` instance and the bytes of `other` are identical.\n\nReturns a negative value if the `length` of `this` instance is less than the `length` of `other`, or a positive value if the `length` of `this` instance is greater than the `length` of `other`.\n\nIn case of equal `length`s, returns a negative value if the first different value in `other` is greater than the corresponding value in `this` instance; otherwise returns a positive value.\n\n### [`fill`](#fill)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``value:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nSets `len` consecutive bytes starting from index `pos` of `this` instance to `value`.\n\n### [`get`](#get)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\nReturns the byte at index `pos`.\n\n### [`getData`](#getData)`():`[`BytesData`](bytesdata \"haxe.io.BytesData\")\n\nReturns the bytes of `this` instance as [`BytesData`](bytesdata#BytesData).\n\n### [`getDouble`](#getDouble)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the IEEE double-precision value at the given position `pos` (in little-endian encoding). Result is unspecified if `pos` is outside the bounds.\n\n### [`getFloat`](#getFloat)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the IEEE single-precision value at the given position `pos` (in little-endian encoding). Result is unspecified if `pos` is outside the bounds.\n\n### [`getInt32`](#getInt32)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\nReturns the 32-bit integer at the given position `pos` (in little-endian encoding).\n\n### [`getInt64`](#getInt64)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int64`](../int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns the 64-bit integer at the given position `pos` (in little-endian encoding).\n\n### [`getString`](#getString)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?encoding:`[`Encoding`](encoding \"haxe.io.Encoding\")`):`[`String`](../../string \"String - The basic String class.\")\n\nReturns the `len`-bytes long string stored at the given position `pos`, interpreted with the given `encoding` (UTF-8 by default).\n\n### [`getUInt16`](#getUInt16)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\nReturns the 16-bit unsigned integer at the given position `pos` (in little-endian encoding).\n\n### [`set`](#set)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``v:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nStores the given byte `v` at the given position `pos`.\n\n### [`setDouble`](#setDouble)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``v:`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nStores the given IEEE double-precision value `v` at the given position `pos` in little-endian encoding. Result is unspecified if writing outside of bounds.\n\n### [`setFloat`](#setFloat)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``v:`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nStores the given IEEE single-precision value `v` at the given position `pos` in little-endian encoding. Result is unspecified if writing outside of bounds.\n\n### [`setInt32`](#setInt32)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``v:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nStores the given 32-bit integer `v` at the given position `pos` (in little-endian encoding).\n\n### [`setInt64`](#setInt64)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``v:`[`Int64`](../int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nStores the given 64-bit integer `v` at the given position `pos` (in little-endian encoding).\n\n### [`setUInt16`](#setUInt16)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``v:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nStores the given 16-bit unsigned integer `v` at the given position `pos` (in little-endian encoding).\n\n### [`sub`](#sub)`(``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Bytes`](bytes \"haxe.io.Bytes\")\n\nReturns a new [`Bytes`](bytes#Bytes) instance that contains a copy of `len` bytes of `this` instance, starting at index `pos`.\n\n### [`toHex`](#toHex)`():`[`String`](../../string \"String - The basic String class.\")\n\nReturns a hexadecimal [`String`](../../string) representation of the bytes of `this` instance.\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\nReturns a [`String`](../../string) representation of the bytes interpreted as UTF-8.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Bytes.html](https://api.haxe.org/haxe/io/Bytes.html)"
- name: io.Bytes.alloc()
  id: haxe/io/bytes#alloc
  summary: Returns a new Bytes instance with the given length
  belongs_to: io.Bytes
  description: |-
    ### `static`[`alloc`](#alloc)`(``length:`[`Int`](../../int "Int - The standard Int type.")`):`[`Bytes`](bytes "haxe.io.Bytes")

    Returns a new [`Bytes`](bytes#Bytes) instance with the given `length`. The values of the bytes are not initialized and may not be zero.
- name: io.Bytes.blit()
  id: haxe/io/bytes#blit
  summary: Copies len bytes from src into this instance
  belongs_to: io.Bytes
  description: |-
    ### [`blit`](#blit)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`,``src:`[`Bytes`](bytes "haxe.io.Bytes")`,``srcpos:`[`Int`](../../int "Int - The standard Int type.")`,``len:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Copies `len` bytes from `src` into this instance.

    Parameters:

    |          |                                                                         |
    |----------|-------------------------------------------------------------------------|
    | `pos`    | Zero-based location in `this` instance at which to start writing bytes. |
    | `src`    | Source [`Bytes`](bytes#Bytes) instance from which to copy bytes.        |
    | `srcpos` | Zero-based location at `src` from which bytes will be copied.           |
    | `len`    | Number of bytes to be copied.                                           |
- name: io.Bytes.compare()
  id: haxe/io/bytes#compare
  summary: Returns 0 if the bytes of this instance and the bytes of other are identical
  belongs_to: io.Bytes
  description: |-
    ### [`compare`](#compare)`(``other:`[`Bytes`](bytes "haxe.io.Bytes")`):`[`Int`](../../int "Int - The standard Int type.")

    Returns `0` if the bytes of `this` instance and the bytes of `other` are identical.

    Returns a negative value if the `length` of `this` instance is less than the `length` of `other`, or a positive value if the `length` of `this` instance is greater than the `length` of `other`.

    In case of equal `length`s, returns a negative value if the first different value in `other` is greater than the corresponding value in `this` instance; otherwise returns a positive value.
- name: io.Bytes.fastGet()
  id: haxe/io/bytes#fastGet
  summary: Reads the pos-th byte of the given b bytes, in the most efficient way possible
  belongs_to: io.Bytes
  description: |-
    ### `static`[`fastGet`](#fastGet)`(``b:`[`BytesData`](bytesdata "haxe.io.BytesData")`,``pos:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int`](../../int "Int - The standard Int type.")

    Reads the `pos`-th byte of the given `b` bytes, in the most efficient way possible. Behavior when reading outside of the available data is unspecified.
- name: io.Bytes.fill()
  id: haxe/io/bytes#fill
  summary: Sets len consecutive bytes starting from index pos of this instance to value
  belongs_to: io.Bytes
  description: |-
    ### [`fill`](#fill)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`,``len:`[`Int`](../../int "Int - The standard Int type.")`,``value:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Sets `len` consecutive bytes starting from index `pos` of `this` instance to `value`.
- name: io.Bytes.get()
  id: haxe/io/bytes#get
  summary: Returns the byte at index pos
  belongs_to: io.Bytes
  description: |-
    ### [`get`](#get)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int`](../../int "Int - The standard Int type.")

    Returns the byte at index `pos`.
- name: io.Bytes.getData()
  id: haxe/io/bytes#getData
  summary: Returns the bytes of this instance as BytesData
  belongs_to: io.Bytes
  description: |-
    ### [`getData`](#getData)`():`[`BytesData`](bytesdata "haxe.io.BytesData")

    Returns the bytes of `this` instance as [`BytesData`](bytesdata#BytesData).
- name: io.Bytes.getDouble()
  id: haxe/io/bytes#getDouble
  summary: Returns the IEEE double-precision value at the given position pos (in little-endian encoding)
  belongs_to: io.Bytes
  description: |-
    ### [`getDouble`](#getDouble)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`):`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the IEEE double-precision value at the given position `pos` (in little-endian encoding). Result is unspecified if `pos` is outside the bounds.
- name: io.Bytes.getFloat()
  id: haxe/io/bytes#getFloat
  summary: Returns the IEEE single-precision value at the given position pos (in little-endian encoding)
  belongs_to: io.Bytes
  description: |-
    ### [`getFloat`](#getFloat)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`):`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the IEEE single-precision value at the given position `pos` (in little-endian encoding). Result is unspecified if `pos` is outside the bounds.
- name: io.Bytes.getInt32()
  id: haxe/io/bytes#getInt32
  summary: Returns the 32-bit integer at the given position pos (in little-endian encoding)
  belongs_to: io.Bytes
  description: |-
    ### [`getInt32`](#getInt32)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int`](../../int "Int - The standard Int type.")

    Returns the 32-bit integer at the given position `pos` (in little-endian encoding).
- name: io.Bytes.getInt64()
  id: haxe/io/bytes#getInt64
  summary: Returns the 64-bit integer at the given position pos (in little-endian encoding)
  belongs_to: io.Bytes
  description: |-
    ### [`getInt64`](#getInt64)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int64`](../int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns the 64-bit integer at the given position `pos` (in little-endian encoding).
- name: io.Bytes.getString()
  id: haxe/io/bytes#getString
  summary: Returns the len-bytes long string stored at the given position pos, interpreted with the given encoding (UTF-8 by default)
  belongs_to: io.Bytes
  description: |-
    ### [`getString`](#getString)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`,``len:`[`Int`](../../int "Int - The standard Int type.")`,``?encoding:`[`Encoding`](encoding "haxe.io.Encoding")`):`[`String`](../../string "String - The basic String class.")

    Returns the `len`-bytes long string stored at the given position `pos`, interpreted with the given `encoding` (UTF-8 by default).
- name: io.Bytes.getUInt16()
  id: haxe/io/bytes#getUInt16
  summary: Returns the 16-bit unsigned integer at the given position pos (in little-endian encoding)
  belongs_to: io.Bytes
  description: |-
    ### [`getUInt16`](#getUInt16)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int`](../../int "Int - The standard Int type.")

    Returns the 16-bit unsigned integer at the given position `pos` (in little-endian encoding).
- name: io.Bytes.length
  id: haxe/io/bytes#length
  summary: null
  belongs_to: io.Bytes
  description: |-
    ### `read only`[`length`](#length)`:`[`Int`](../../int "Int - The standard Int type.")

    ## Methods
- name: io.Bytes.ofData()
  id: haxe/io/bytes#ofData
  summary: Returns the Bytes representation of the given BytesData
  belongs_to: io.Bytes
  description: |-
    ### `static`[`ofData`](#ofData)`(``b:`[`BytesData`](bytesdata "haxe.io.BytesData")`):`[`Bytes`](bytes "haxe.io.Bytes")

    Returns the [`Bytes`](bytes#Bytes) representation of the given [`BytesData`](bytesdata#BytesData).
- name: io.Bytes.ofHex()
  id: haxe/io/bytes#ofHex
  summary: Converts the given hexadecimal String to Bytes
  belongs_to: io.Bytes
  description: |-
    ### `static`[`ofHex`](#ofHex)`(``s:`[`String`](../../string "String - The basic String class.")`):`[`Bytes`](bytes "haxe.io.Bytes")

    Converts the given hexadecimal [`String`](../../string) to [`Bytes`](bytes#Bytes). `s` must be a string of even length consisting only of hexadecimal digits. For example: `"0FDA14058916052309"`.
- name: io.Bytes.ofString()
  id: haxe/io/bytes#ofString
  summary: Returns the Bytes representation of the given String, using the specified encoding (UTF-8 by default)
  belongs_to: io.Bytes
  description: |-
    ### `static`[`ofString`](#ofString)`(``s:`[`String`](../../string "String - The basic String class.")`,``?encoding:`[`Encoding`](encoding "haxe.io.Encoding")`):`[`Bytes`](bytes "haxe.io.Bytes")

    Returns the [`Bytes`](bytes#Bytes) representation of the given [`String`](../../string), using the specified encoding (UTF-8 by default).

    ## Constructor

    ### [`new`](#new)`(``length:`[`Int`](../../int "Int - The standard Int type.")`,``b:`[`BytesData`](bytesdata "haxe.io.BytesData")`)`

    *Available on macro*

    ## Variables
- name: io.Bytes.set()
  id: haxe/io/bytes#set
  summary: Stores the given byte v at the given position pos
  belongs_to: io.Bytes
  description: |-
    ### [`set`](#set)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`,``v:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Stores the given byte `v` at the given position `pos`.
- name: io.Bytes.setDouble()
  id: haxe/io/bytes#setDouble
  summary: Stores the given IEEE double-precision value v at the given position pos in little-endian encoding
  belongs_to: io.Bytes
  description: |-
    ### [`setDouble`](#setDouble)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`,``v:`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Void`](../../void "Void - The standard Void type.")

    Stores the given IEEE double-precision value `v` at the given position `pos` in little-endian encoding. Result is unspecified if writing outside of bounds.
- name: io.Bytes.setFloat()
  id: haxe/io/bytes#setFloat
  summary: Stores the given IEEE single-precision value v at the given position pos in little-endian encoding
  belongs_to: io.Bytes
  description: |-
    ### [`setFloat`](#setFloat)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`,``v:`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Void`](../../void "Void - The standard Void type.")

    Stores the given IEEE single-precision value `v` at the given position `pos` in little-endian encoding. Result is unspecified if writing outside of bounds.
- name: io.Bytes.setInt32()
  id: haxe/io/bytes#setInt32
  summary: Stores the given 32-bit integer v at the given position pos (in little-endian encoding)
  belongs_to: io.Bytes
  description: |-
    ### [`setInt32`](#setInt32)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`,``v:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Stores the given 32-bit integer `v` at the given position `pos` (in little-endian encoding).
- name: io.Bytes.setInt64()
  id: haxe/io/bytes#setInt64
  summary: Stores the given 64-bit integer v at the given position pos (in little-endian encoding)
  belongs_to: io.Bytes
  description: |-
    ### [`setInt64`](#setInt64)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`,``v:`[`Int64`](../int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Void`](../../void "Void - The standard Void type.")

    Stores the given 64-bit integer `v` at the given position `pos` (in little-endian encoding).
- name: io.Bytes.setUInt16()
  id: haxe/io/bytes#setUInt16
  summary: Stores the given 16-bit unsigned integer v at the given position pos (in little-endian encoding)
  belongs_to: io.Bytes
  description: |-
    ### [`setUInt16`](#setUInt16)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`,``v:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Stores the given 16-bit unsigned integer `v` at the given position `pos` (in little-endian encoding).
- name: io.Bytes.sub()
  id: haxe/io/bytes#sub
  summary: Returns a new Bytes instance that contains a copy of len bytes of this instance, starting at index pos
  belongs_to: io.Bytes
  description: |-
    ### [`sub`](#sub)`(``pos:`[`Int`](../../int "Int - The standard Int type.")`,``len:`[`Int`](../../int "Int - The standard Int type.")`):`[`Bytes`](bytes "haxe.io.Bytes")

    Returns a new [`Bytes`](bytes#Bytes) instance that contains a copy of `len` bytes of `this` instance, starting at index `pos`.
- name: io.Bytes.toHex()
  id: haxe/io/bytes#toHex
  summary: Returns a hexadecimal String representation of the bytes of this instance
  belongs_to: io.Bytes
  description: |-
    ### [`toHex`](#toHex)`():`[`String`](../../string "String - The basic String class.")

    Returns a hexadecimal [`String`](../../string) representation of the bytes of `this` instance.
- name: io.Bytes.toString()
  id: haxe/io/bytes#toString
  summary: Returns a String representation of the bytes interpreted as UTF-8
  belongs_to: io.Bytes
  description: "### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\nReturns a [`String`](../../string) representation of the bytes interpreted as UTF-8.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Bytes.html](https://api.haxe.org/haxe/io/Bytes.html)"
- name: io.BytesBuffer
  id: haxe/io/bytesbuffer
  summary: The length of the buffer in bytes
  description: "# BytesBuffer\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\n## Constructor\n\n### [`new`](#new)`()`\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nThe length of the buffer in bytes.\n\n## Methods\n\n### [`add`](#add)`(``src:`[`Bytes`](bytes \"haxe.io.Bytes\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`addByte`](#addByte)`(``byte:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`addBytes`](#addBytes)`(``src:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`addDouble`](#addDouble)`(``v:`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`addFloat`](#addFloat)`(``v:`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`addInt32`](#addInt32)`(``v:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`addInt64`](#addInt64)`(``v:`[`Int64`](../int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`addString`](#addString)`(``v:`[`String`](../../string \"String - The basic String class.\")`,`` ``?encoding:`[`Encoding`](encoding \"haxe.io.Encoding\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`getBytes`](#getBytes)`():`[`Bytes`](bytes \"haxe.io.Bytes\")\n\nReturns either a copy or a reference of the current bytes. Once called, the buffer should no longer be used.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/BytesBuffer.html](https://api.haxe.org/haxe/io/BytesBuffer.html)"
- name: io.BytesBuffer.add()
  id: haxe/io/bytesbuffer#add
  summary: null
  belongs_to: io.BytesBuffer
  description: '### [`add`](#add)`(``src:`[`Bytes`](bytes "haxe.io.Bytes")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: io.BytesBuffer.addByte()
  id: haxe/io/bytesbuffer#addByte
  summary: null
  belongs_to: io.BytesBuffer
  description: '### [`addByte`](#addByte)`(``byte:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: io.BytesBuffer.addBytes()
  id: haxe/io/bytesbuffer#addBytes
  summary: null
  belongs_to: io.BytesBuffer
  description: '### [`addBytes`](#addBytes)`(``src:`[`Bytes`](bytes "haxe.io.Bytes")`,``pos:`[`Int`](../../int "Int - The standard Int type.")`,``len:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: io.BytesBuffer.addDouble()
  id: haxe/io/bytesbuffer#addDouble
  summary: null
  belongs_to: io.BytesBuffer
  description: '### [`addDouble`](#addDouble)`(``v:`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: io.BytesBuffer.addFloat()
  id: haxe/io/bytesbuffer#addFloat
  summary: null
  belongs_to: io.BytesBuffer
  description: '### [`addFloat`](#addFloat)`(``v:`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: io.BytesBuffer.addInt32()
  id: haxe/io/bytesbuffer#addInt32
  summary: null
  belongs_to: io.BytesBuffer
  description: '### [`addInt32`](#addInt32)`(``v:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: io.BytesBuffer.addInt64()
  id: haxe/io/bytesbuffer#addInt64
  summary: null
  belongs_to: io.BytesBuffer
  description: '### [`addInt64`](#addInt64)`(``v:`[`Int64`](../int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: io.BytesBuffer.addString()
  id: haxe/io/bytesbuffer#addString
  summary: null
  belongs_to: io.BytesBuffer
  description: '### [`addString`](#addString)`(``v:`[`String`](../../string "String - The basic String class.")`,``?encoding:`[`Encoding`](encoding "haxe.io.Encoding")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: io.BytesBuffer.getBytes()
  id: haxe/io/bytesbuffer#getBytes
  summary: Returns either a copy or a reference of the current bytes
  belongs_to: io.BytesBuffer
  description: "### [`getBytes`](#getBytes)`():`[`Bytes`](bytes \"haxe.io.Bytes\")\n\nReturns either a copy or a reference of the current bytes. Once called, the buffer should no longer be used.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/BytesBuffer.html](https://api.haxe.org/haxe/io/BytesBuffer.html)"
- name: io.BytesBuffer.length
  id: haxe/io/bytesbuffer#length
  summary: The length of the buffer in bytes
  belongs_to: io.BytesBuffer
  description: |-
    ### `read only`[`length`](#length)`:`[`Int`](../../int "Int - The standard Int type.")

    The length of the buffer in bytes.

    ## Methods
- name: io.BytesData
  id: haxe/io/bytesdata
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# BytesData\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\n#### cs\n\n*alias for* [`cs.NativeArray`](https://api.haxe.org/cs/NativeArray.html \"cs.NativeArray\")`<`[`cs.UInt8`](https://api.haxe.org/cs/UInt8.html \"cs.UInt8\")`>`\n\n#### php\n\n*alias for* `BytesDataAbstract`\n\n#### lua\n\n*alias for* [`Array`](../../array \"Array\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>`\n\n#### flash\n\n*alias for* [`flash.utils.ByteArray`](https://api.haxe.org/flash/utils/ByteArray.html \"flash.utils.ByteArray\")\n\n#### js\n\n*alias for* [`js.lib.ArrayBuffer`](https://api.haxe.org/js/lib/ArrayBuffer.html \"js.lib.ArrayBuffer\")\n\n#### java\n\n*alias for* [`java.NativeArray`](https://api.haxe.org/java/NativeArray.html \"java.NativeArray\")`<`[`java.Int8`](https://api.haxe.org/java/Int8.html \"java.Int8\")`>`\n\n#### neko\n\n*alias for* [`neko.NativeString`](https://api.haxe.org/neko/NativeString.html \"neko.NativeString\")\n\n#### cpp\n\n*alias for* [`Array`](../../array \"Array\")`<`[`cpp.UInt8`](https://api.haxe.org/cpp/UInt8.html \"cpp.UInt8\")`>`\n\n#### macro\n\n*alias for* `NativeBytesDataAbstract`\n\n#### python\n\n*alias for* [`python.Bytearray`](https://api.haxe.org/python/Bytearray.html \"python.Bytearray\")\n\n#### hl\n\n*alias for* [`haxe.io.BytesDataAbstract`](bytesdataabstract \"haxe.io.BytesDataAbstract\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/BytesData.html](https://api.haxe.org/haxe/io/BytesData.html)"
- name: io.BytesDataAbstract
  id: haxe/io/bytesdataabstract
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# BytesDataAbstract([BytesDataImpl](bytesdataimpl \"haxe.io.BytesDataImpl\"))\n\npackage [haxe.io](index)\n\nimport [haxe.io.BytesData](bytesdata)\n\n*Available on hl*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/BytesDataAbstract.html](https://api.haxe.org/haxe/io/BytesDataAbstract.html)"
- name: io.BytesDataImpl
  id: haxe/io/bytesdataimpl
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# BytesDataImpl\n\npackage [haxe.io](index)\n\nimport [haxe.io.BytesData](bytesdata)\n\n*Available on hl*\n\n## Constructor\n\n### [`new`](#new)`(``b:`[`Bytes`](https://api.haxe.org/hl/Bytes.html \"hl.Bytes\")`,`` ``length:`[`Int`](../../int \"Int - The standard Int type.\")`)`\n\n## Variables\n\n### [`bytes`](#bytes)`:`[`Bytes`](https://api.haxe.org/hl/Bytes.html \"hl.Bytes\")\n\n### [`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/BytesDataImpl.html](https://api.haxe.org/haxe/io/BytesDataImpl.html)"
- name: io.BytesDataImpl.bytes
  id: haxe/io/bytesdataimpl#bytes
  summary: null
  belongs_to: io.BytesDataImpl
  description: '### [`bytes`](#bytes)`:`[`Bytes`](https://api.haxe.org/hl/Bytes.html "hl.Bytes")'
- name: io.BytesDataImpl.length
  id: haxe/io/bytesdataimpl#length
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: io.BytesDataImpl
  description: "### [`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/BytesDataImpl.html](https://api.haxe.org/haxe/io/BytesDataImpl.html)"
- name: io.BytesInput
  id: haxe/io/bytesinput
  summary: The length of the stream in bytes
  description: "# BytesInput\n\npackage [haxe.io](index)\n\nextends [Input](input \"haxe.io.Input - An Input is an abstract reader.\")\n\nextended by [StringInput](stringinput \"haxe.io.StringInput\")\n\n*Available on all platforms*\n\n## Constructor\n\n### [`new`](#new)`(``b:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``?pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?len:`[`Int`](../../int \"Int - The standard Int type.\")`)`\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nThe length of the stream in bytes.\n\n### [`position`](#position)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nThe current position in the stream in bytes.\n\n## Methods\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/BytesInput.html](https://api.haxe.org/haxe/io/BytesInput.html)"
- name: io.BytesInput.length
  id: haxe/io/bytesinput#length
  summary: The length of the stream in bytes
  belongs_to: io.BytesInput
  description: |-
    ### `read only`[`length`](#length)`:`[`Int`](../../int "Int - The standard Int type.")

    The length of the stream in bytes.
- name: io.BytesInput.position
  id: haxe/io/bytesinput#position
  summary: The current position in the stream in bytes
  belongs_to: io.BytesInput
  description: "### [`position`](#position)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nThe current position in the stream in bytes.\n\n## Methods\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/BytesInput.html](https://api.haxe.org/haxe/io/BytesInput.html)"
- name: io.BytesOutput
  id: haxe/io/bytesoutput
  summary: The length of the stream in bytes
  description: "# BytesOutput\n\npackage [haxe.io](index)\n\nextends [Output](output \"haxe.io.Output - An Output is an abstract write.\")\n\n*Available on all platforms*\n\n## Constructor\n\n### [`new`](#new)`()`\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nThe length of the stream in bytes.\n\n## Methods\n\n### [`getBytes`](#getBytes)`():`[`Bytes`](bytes \"haxe.io.Bytes\")\n\nReturns the [`Bytes`](bytes#Bytes) of this output.\n\nThis function should not be called more than once on a given [`BytesOutput`](bytesoutput#BytesOutput) instance.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/BytesOutput.html](https://api.haxe.org/haxe/io/BytesOutput.html)"
- name: io.BytesOutput.getBytes()
  id: haxe/io/bytesoutput#getBytes
  summary: Returns the Bytes of this output
  belongs_to: io.BytesOutput
  description: "### [`getBytes`](#getBytes)`():`[`Bytes`](bytes \"haxe.io.Bytes\")\n\nReturns the [`Bytes`](bytes#Bytes) of this output.\n\nThis function should not be called more than once on a given [`BytesOutput`](bytesoutput#BytesOutput) instance.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/BytesOutput.html](https://api.haxe.org/haxe/io/BytesOutput.html)"
- name: io.BytesOutput.length
  id: haxe/io/bytesoutput#length
  summary: The length of the stream in bytes
  belongs_to: io.BytesOutput
  description: |-
    ### `read only`[`length`](#length)`:`[`Int`](../../int "Int - The standard Int type.")

    The length of the stream in bytes.

    ## Methods
- name: io.Encoding
  id: haxe/io/encoding
  summary: Output the string the way the platform represent it in memory
  description: "# Encoding\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\nString binary encoding supported by Haxe I/O\n\n## Values\n\n### `UTF8`\n\n### `RawNative`\n\nOutput the string the way the platform represent it in memory. This is the most efficient but is platform-specific\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Encoding.html](https://api.haxe.org/haxe/io/Encoding.html)"
- name: io.Encoding.RawNative
  id: haxe/io/encoding#RawNative
  summary: Output the string the way the platform represent it in memory
  belongs_to: io.Encoding
  description: "### `RawNative`\n\nOutput the string the way the platform represent it in memory. This is the most efficient but is platform-specific\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Encoding.html](https://api.haxe.org/haxe/io/Encoding.html)"
- name: io.Encoding.UTF8
  id: haxe/io/encoding#UTF8
  summary: null
  belongs_to: io.Encoding
  description: '### `UTF8`'
- name: io.Eof
  id: haxe/io/eof
  summary: This exception is raised when reading while data is no longer available in the haxe.io.Input
  description: "# Eof\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\nThis exception is raised when reading while data is no longer available in the [`haxe.io.Input`](input#Input).\n\n## Constructor\n\n### [`new`](#new)`()`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Eof.html](https://api.haxe.org/haxe/io/Eof.html)"
- name: io.Error
  id: haxe/io/error
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Error\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\nThe possible IO errors that can occur\n\n## Values\n\n### `Blocked`\n\nThe IO is set into nonblocking mode and some data cannot be read or written\n\n### `Overflow`\n\nAn integer value is outside its allowed range\n\n### `OutsideBounds`\n\nAn operation on Bytes is outside of its valid range\n\n### `Custom(e:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`)`\n\nOther errors\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Error.html](https://api.haxe.org/haxe/io/Error.html)"
- name: io.Float32Array
  id: haxe/io/float32array
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Float32Array([Float32ArrayData](float32arraydata \"haxe.io.Float32ArrayData\"))\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\n## Static variables\n\n### `static``inline``read only`[`BYTES_PER_ELEMENT`](#BYTES_PER_ELEMENT)`:`[`Int`](../../int \"Int - The standard Int type.\")` = 4`\n\n## Static methods\n\n### `static`[`fromArray`](#fromArray)`(``a:`[`Array`](../../array \"Array\")`<`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`>,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float32Array`](float32array \"haxe.io.Float32Array\")\n\n### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``bytePos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float32Array`](float32array \"haxe.io.Float32Array\")\n\n### `static`[`fromData`](#fromData)`(``d:`[`Float32ArrayData`](float32arraydata \"haxe.io.Float32ArrayData\")`):`[`Float32Array`](float32array \"haxe.io.Float32Array\")\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `read only`[`view`](#view)`:`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n## Methods\n\n### `inline`[`get`](#get)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n### `inline`[`getData`](#getData)`():`[`Float32ArrayData`](float32arraydata \"haxe.io.Float32ArrayData\")\n\n### `inline`[`get_view`](#get_view)`():`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n### `inline`[`set`](#set)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``value:`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float32Array`](float32array \"haxe.io.Float32Array\")\n\n### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float32Array`](float32array \"haxe.io.Float32Array\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Float32Array.html](https://api.haxe.org/haxe/io/Float32Array.html)"
- name: io.Float32Array.BYTES_PER_ELEMENT
  id: haxe/io/float32array#BYTES_PER_ELEMENT
  summary: null
  belongs_to: io.Float32Array
  description: |-
    ### `static``inline``read only`[`BYTES_PER_ELEMENT`](#BYTES_PER_ELEMENT)`:`[`Int`](../../int "Int - The standard Int type.")` = 4`

    ## Static methods
- name: io.Float32Array.fromArray()
  id: haxe/io/float32array#fromArray
  summary: null
  belongs_to: io.Float32Array
  description: '### `static`[`fromArray`](#fromArray)`(``a:`[`Array`](../../array "Array")`<`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`>,``pos:`[`Int`](../../int "Int - The standard Int type.")` = 0,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`Float32Array`](float32array "haxe.io.Float32Array")'
- name: io.Float32Array.fromBytes()
  id: haxe/io/float32array#fromBytes
  summary: null
  belongs_to: io.Float32Array
  description: '### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes "haxe.io.Bytes")`,``bytePos:`[`Int`](../../int "Int - The standard Int type.")` = 0,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`Float32Array`](float32array "haxe.io.Float32Array")'
- name: io.Float32Array.fromData()
  id: haxe/io/float32array#fromData
  summary: null
  belongs_to: io.Float32Array
  description: |-
    ### `static`[`fromData`](#fromData)`(``d:`[`Float32ArrayData`](float32arraydata "haxe.io.Float32ArrayData")`):`[`Float32Array`](float32array "haxe.io.Float32Array")

    ## Variables
- name: io.Float32Array.get()
  id: haxe/io/float32array#get
  summary: null
  belongs_to: io.Float32Array
  description: '### `inline`[`get`](#get)`(``index:`[`Int`](../../int "Int - The standard Int type.")`):`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")'
- name: io.Float32Array.get_view()
  id: haxe/io/float32array#get_view
  summary: null
  belongs_to: io.Float32Array
  description: '### `inline`[`get_view`](#get_view)`():`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")'
- name: io.Float32Array.getData()
  id: haxe/io/float32array#getData
  summary: null
  belongs_to: io.Float32Array
  description: '### `inline`[`getData`](#getData)`():`[`Float32ArrayData`](float32arraydata "haxe.io.Float32ArrayData")'
- name: io.Float32Array.length
  id: haxe/io/float32array#length
  summary: null
  belongs_to: io.Float32Array
  description: '### `read only`[`length`](#length)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: io.Float32Array.set()
  id: haxe/io/float32array#set
  summary: null
  belongs_to: io.Float32Array
  description: '### `inline`[`set`](#set)`(``index:`[`Int`](../../int "Int - The standard Int type.")`,``value:`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")'
- name: io.Float32Array.sub()
  id: haxe/io/float32array#sub
  summary: null
  belongs_to: io.Float32Array
  description: '### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int "Int - The standard Int type.")`,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`Float32Array`](float32array "haxe.io.Float32Array")'
- name: io.Float32Array.subarray()
  id: haxe/io/float32array#subarray
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: io.Float32Array
  description: "### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float32Array`](float32array \"haxe.io.Float32Array\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Float32Array.html](https://api.haxe.org/haxe/io/Float32Array.html)"
- name: io.Float32Array.view
  id: haxe/io/float32array#view
  summary: null
  belongs_to: io.Float32Array
  description: |-
    ### `read only`[`view`](#view)`:`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")

    ## Methods
- name: io.Float32ArrayData
  id: haxe/io/float32arraydata
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Float32ArrayData\n\npackage [haxe.io](index)\n\nimport [haxe.io.Float32Array](float32array)\n\n*Available on all platforms*\n\n#### flash, lua, php, cs, java, cpp, neko, hl, python, macro\n\n*alias for* [`haxe.io.ArrayBufferViewData`](arraybufferviewdata \"haxe.io.ArrayBufferViewData\")\n\n#### js\n\n*alias for* [`js.lib.Float32Array`](https://api.haxe.org/js/lib/Float32Array.html \"js.lib.Float32Array - The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Float32ArrayData.html](https://api.haxe.org/haxe/io/Float32ArrayData.html)"
- name: io.Float64Array
  id: haxe/io/float64array
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Float64Array([Float64ArrayData](float64arraydata \"haxe.io.Float64ArrayData\"))\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\n## Static variables\n\n### `static``inline``read only`[`BYTES_PER_ELEMENT`](#BYTES_PER_ELEMENT)`:`[`Int`](../../int \"Int - The standard Int type.\")` = 8`\n\n## Static methods\n\n### `static`[`fromArray`](#fromArray)`(``a:`[`Array`](../../array \"Array\")`<`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`>,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float64Array`](float64array \"haxe.io.Float64Array\")\n\n### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``bytePos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float64Array`](float64array \"haxe.io.Float64Array\")\n\n### `static`[`fromData`](#fromData)`(``d:`[`Float64ArrayData`](float64arraydata \"haxe.io.Float64ArrayData\")`):`[`Float64Array`](float64array \"haxe.io.Float64Array\")\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `read only`[`view`](#view)`:`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n## Methods\n\n### `inline`[`get`](#get)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n### `inline`[`getData`](#getData)`():`[`Float64ArrayData`](float64arraydata \"haxe.io.Float64ArrayData\")\n\n### `inline`[`get_view`](#get_view)`():`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n### `inline`[`set`](#set)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``value:`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float64Array`](float64array \"haxe.io.Float64Array\")\n\n### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float64Array`](float64array \"haxe.io.Float64Array\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Float64Array.html](https://api.haxe.org/haxe/io/Float64Array.html)"
- name: io.Float64Array.BYTES_PER_ELEMENT
  id: haxe/io/float64array#BYTES_PER_ELEMENT
  summary: null
  belongs_to: io.Float64Array
  description: |-
    ### `static``inline``read only`[`BYTES_PER_ELEMENT`](#BYTES_PER_ELEMENT)`:`[`Int`](../../int "Int - The standard Int type.")` = 8`

    ## Static methods
- name: io.Float64Array.fromArray()
  id: haxe/io/float64array#fromArray
  summary: null
  belongs_to: io.Float64Array
  description: '### `static`[`fromArray`](#fromArray)`(``a:`[`Array`](../../array "Array")`<`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`>,``pos:`[`Int`](../../int "Int - The standard Int type.")` = 0,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`Float64Array`](float64array "haxe.io.Float64Array")'
- name: io.Float64Array.fromBytes()
  id: haxe/io/float64array#fromBytes
  summary: null
  belongs_to: io.Float64Array
  description: '### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes "haxe.io.Bytes")`,``bytePos:`[`Int`](../../int "Int - The standard Int type.")` = 0,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`Float64Array`](float64array "haxe.io.Float64Array")'
- name: io.Float64Array.fromData()
  id: haxe/io/float64array#fromData
  summary: null
  belongs_to: io.Float64Array
  description: |-
    ### `static`[`fromData`](#fromData)`(``d:`[`Float64ArrayData`](float64arraydata "haxe.io.Float64ArrayData")`):`[`Float64Array`](float64array "haxe.io.Float64Array")

    ## Variables
- name: io.Float64Array.get()
  id: haxe/io/float64array#get
  summary: null
  belongs_to: io.Float64Array
  description: '### `inline`[`get`](#get)`(``index:`[`Int`](../../int "Int - The standard Int type.")`):`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")'
- name: io.Float64Array.get_view()
  id: haxe/io/float64array#get_view
  summary: null
  belongs_to: io.Float64Array
  description: '### `inline`[`get_view`](#get_view)`():`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")'
- name: io.Float64Array.getData()
  id: haxe/io/float64array#getData
  summary: null
  belongs_to: io.Float64Array
  description: '### `inline`[`getData`](#getData)`():`[`Float64ArrayData`](float64arraydata "haxe.io.Float64ArrayData")'
- name: io.Float64Array.length
  id: haxe/io/float64array#length
  summary: null
  belongs_to: io.Float64Array
  description: '### `read only`[`length`](#length)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: io.Float64Array.set()
  id: haxe/io/float64array#set
  summary: null
  belongs_to: io.Float64Array
  description: '### `inline`[`set`](#set)`(``index:`[`Int`](../../int "Int - The standard Int type.")`,``value:`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")'
- name: io.Float64Array.sub()
  id: haxe/io/float64array#sub
  summary: null
  belongs_to: io.Float64Array
  description: '### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int "Int - The standard Int type.")`,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`Float64Array`](float64array "haxe.io.Float64Array")'
- name: io.Float64Array.subarray()
  id: haxe/io/float64array#subarray
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: io.Float64Array
  description: "### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float64Array`](float64array \"haxe.io.Float64Array\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Float64Array.html](https://api.haxe.org/haxe/io/Float64Array.html)"
- name: io.Float64Array.view
  id: haxe/io/float64array#view
  summary: null
  belongs_to: io.Float64Array
  description: |-
    ### `read only`[`view`](#view)`:`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")

    ## Methods
- name: io.Float64ArrayData
  id: haxe/io/float64arraydata
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Float64ArrayData\n\npackage [haxe.io](index)\n\nimport [haxe.io.Float64Array](float64array)\n\n*Available on all platforms*\n\n#### flash, lua, php, cs, java, cpp, neko, hl, python, macro\n\n*alias for* [`haxe.io.ArrayBufferViewData`](arraybufferviewdata \"haxe.io.ArrayBufferViewData\")\n\n#### js\n\n*alias for* [`js.lib.Float64Array`](https://api.haxe.org/js/lib/Float64Array.html \"js.lib.Float64Array - The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Float64ArrayData.html](https://api.haxe.org/haxe/io/Float64ArrayData.html)"
- name: io.FPHelper
  id: haxe/io/fphelper
  summary: Helper that converts between floating point and binary representation
  description: "# FPHelper\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\nHelper that converts between floating point and binary representation. Always works in low-endian encoding.\n\n## Static methods\n\n### `static`[`doubleToI64`](#doubleToI64)`(``v:`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Int64`](../int64 \"haxe.Int64 - A cross-platform signed 64-bit integer.\")\n\nReturns an Int64 representing the bytes representation of the double precision IEEE float value. WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again. We still ensure that this is safe to use in a multithread environment\n\n### `static`[`floatToI32`](#floatToI32)`(``f:`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\n*Available on cs, php, js, neko, cpp, macro, java, lua, python, flash*\n\n### `static`[`floatToI32`](#floatToI32)`(``f:`[`Single`](../../single \"Single - Single-precision IEEE 32bit float (4-byte).\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\n*Available on hl*\n\n### `static`[`i32ToFloat`](#i32ToFloat)`(``i:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n*Available on cs, php, js, neko, cpp, macro, java, lua, python, flash*\n\n### `static`[`i32ToFloat`](#i32ToFloat)`(``i:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Single`](../../single \"Single - Single-precision IEEE 32bit float (4-byte).\")\n\n*Available on hl*\n\n### `static`[`i64ToDouble`](#i64ToDouble)`(``low:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``high:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/FPHelper.html](https://api.haxe.org/haxe/io/FPHelper.html)"
- name: io.FPHelper.doubleToI64()
  id: haxe/io/fphelper#doubleToI64
  summary: Returns an Int64 representing the bytes representation of the double precision IEEE float value
  belongs_to: io.FPHelper
  description: |-
    ### `static`[`doubleToI64`](#doubleToI64)`(``v:`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Int64`](../int64 "haxe.Int64 - A cross-platform signed 64-bit integer.")

    Returns an Int64 representing the bytes representation of the double precision IEEE float value. WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again. We still ensure that this is safe to use in a multithread environment
- name: io.FPHelper.floatToI32()
  id: haxe/io/fphelper#floatToI32
  summary: null
  belongs_to: io.FPHelper
  description: |-
    ### `static`[`floatToI32`](#floatToI32)`(``f:`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Int`](../../int "Int - The standard Int type.")

    *Available on cs, php, js, neko, cpp, macro, java, lua, python, flash*

    ### `static`[`floatToI32`](#floatToI32)`(``f:`[`Single`](../../single "Single - Single-precision IEEE 32bit float (4-byte).")`):`[`Int`](../../int "Int - The standard Int type.")

    *Available on hl*
- name: io.FPHelper.i32ToFloat()
  id: haxe/io/fphelper#i32ToFloat
  summary: null
  belongs_to: io.FPHelper
  description: |-
    ### `static`[`i32ToFloat`](#i32ToFloat)`(``i:`[`Int`](../../int "Int - The standard Int type.")`):`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    *Available on cs, php, js, neko, cpp, macro, java, lua, python, flash*

    ### `static`[`i32ToFloat`](#i32ToFloat)`(``i:`[`Int`](../../int "Int - The standard Int type.")`):`[`Single`](../../single "Single - Single-precision IEEE 32bit float (4-byte).")

    *Available on hl*
- name: io.FPHelper.i64ToDouble()
  id: haxe/io/fphelper#i64ToDouble
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: io.FPHelper
  description: "### `static`[`i64ToDouble`](#i64ToDouble)`(``low:`[`Int`](../../int \"Int - The standard Int type.\")`,``high:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/FPHelper.html](https://api.haxe.org/haxe/io/FPHelper.html)"
- name: io.Input
  id: haxe/io/input
  summary: An Input is an abstract reader
  description: "# Input\n\npackage [haxe.io](index)\n\nextended by [NativeInput](https://api.haxe.org/cs/io/NativeInput.html \"cs.io.NativeInput\"), [BufferInput](bufferinput \"haxe.io.BufferInput\"), [BytesInput](bytesinput \"haxe.io.BytesInput\"), [NativeInput](https://api.haxe.org/java/io/NativeInput.html \"java.io.NativeInput\"), [NativeInput](https://api.haxe.org/python/io/NativeInput.html \"python.io.NativeInput\"), [FileInput](https://api.haxe.org/sys/io/FileInput.html \"sys.io.FileInput - Use sys.\")\n\n*Available on all platforms*\n\nAn Input is an abstract reader. See other classes in the `haxe.io` package for several possible implementations.\n\nAll functions which read data throw [`Eof`](eof#Eof) when the end of the stream is reached.\n\n## Variables\n\n### [`bigEndian`](#bigEndian)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nEndianness (word byte order) used when reading numbers.\n\nIf [`true`](../../bool), big-endian is used, otherwise `little-endian` is used.\n\n## Methods\n\n### [`close`](#close)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\nClose the input source.\n\nBehaviour while reading after calling this method is unspecified.\n\n### [`read`](#read)`(``nbytes:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Bytes`](bytes \"haxe.io.Bytes\")\n\nRead and return `nbytes` bytes.\n\n### [`readAll`](#readAll)`(``?bufsize:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Bytes`](bytes \"haxe.io.Bytes\")\n\nRead and return all available data.\n\nThe `bufsize` optional argument specifies the size of chunks by which data is read. Its default value is target-specific.\n\n### [`readByte`](#readByte)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\nRead and return one byte.\n\n### [`readBytes`](#readBytes)`(``s:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\nRead `len` bytes and write them into `s` to the position specified by `pos`.\n\nReturns the actual length of read data that can be smaller than `len`.\n\nSee `readFullBytes` that tries to read the exact amount of specified bytes.\n\n### [`readDouble`](#readDouble)`():`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nRead a 64-bit double-precision floating point number.\n\nEndianness is specified by the `bigEndian` property.\n\n### [`readFloat`](#readFloat)`():`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nRead a 32-bit floating point number.\n\nEndianness is specified by the `bigEndian` property.\n\n### [`readFullBytes`](#readFullBytes)`(``s:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nRead `len` bytes and write them into `s` to the position specified by `pos`.\n\nUnlike `readBytes`, this method tries to read the exact `len` amount of bytes.\n\n### [`readInt16`](#readInt16)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\nRead a 16-bit signed integer.\n\nEndianness is specified by the `bigEndian` property.\n\n### [`readInt24`](#readInt24)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\nRead a 24-bit signed integer.\n\nEndianness is specified by the `bigEndian` property.\n\n### [`readInt32`](#readInt32)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\nRead a 32-bit signed integer.\n\nEndianness is specified by the `bigEndian` property.\n\n### [`readInt8`](#readInt8)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\nRead a 8-bit signed integer.\n\n### [`readLine`](#readLine)`():`[`String`](../../string \"String - The basic String class.\")\n\nRead a line of text separated by CR and/or LF bytes.\n\nThe CR/LF characters are not included in the resulting string.\n\n### [`readString`](#readString)`(``len:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?encoding:`[`Encoding`](encoding \"haxe.io.Encoding\")`):`[`String`](../../string \"String - The basic String class.\")\n\nRead and `len` bytes as a string.\n\n### [`readUInt16`](#readUInt16)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\nRead a 16-bit unsigned integer.\n\nEndianness is specified by the `bigEndian` property.\n\n### [`readUInt24`](#readUInt24)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\nRead a 24-bit unsigned integer.\n\nEndianness is specified by the `bigEndian` property.\n\n### [`readUntil`](#readUntil)`(``end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nRead a string until a character code specified by `end` is occurred.\n\nThe final character is not included in the resulting string.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Input.html](https://api.haxe.org/haxe/io/Input.html)"
- name: io.Input.bigEndian
  id: haxe/io/input#bigEndian
  summary: Endianness (word byte order) used when reading numbers
  belongs_to: io.Input
  description: |-
    ### [`bigEndian`](#bigEndian)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Endianness (word byte order) used when reading numbers.

    If [`true`](../../bool), big-endian is used, otherwise `little-endian` is used.

    ## Methods
- name: io.Input.close()
  id: haxe/io/input#close
  summary: Close the input source
  belongs_to: io.Input
  description: |-
    ### [`close`](#close)`():`[`Void`](../../void "Void - The standard Void type.")

    Close the input source.

    Behaviour while reading after calling this method is unspecified.
- name: io.Input.read()
  id: haxe/io/input#read
  summary: Read and return nbytes bytes
  belongs_to: io.Input
  description: |-
    ### [`read`](#read)`(``nbytes:`[`Int`](../../int "Int - The standard Int type.")`):`[`Bytes`](bytes "haxe.io.Bytes")

    Read and return `nbytes` bytes.
- name: io.Input.readAll()
  id: haxe/io/input#readAll
  summary: Read and return all available data
  belongs_to: io.Input
  description: |-
    ### [`readAll`](#readAll)`(``?bufsize:`[`Int`](../../int "Int - The standard Int type.")`):`[`Bytes`](bytes "haxe.io.Bytes")

    Read and return all available data.

    The `bufsize` optional argument specifies the size of chunks by which data is read. Its default value is target-specific.
- name: io.Input.readByte()
  id: haxe/io/input#readByte
  summary: Read and return one byte
  belongs_to: io.Input
  description: |-
    ### [`readByte`](#readByte)`():`[`Int`](../../int "Int - The standard Int type.")

    Read and return one byte.
- name: io.Input.readBytes()
  id: haxe/io/input#readBytes
  summary: Read len bytes and write them into s to the position specified by pos
  belongs_to: io.Input
  description: |-
    ### [`readBytes`](#readBytes)`(``s:`[`Bytes`](bytes "haxe.io.Bytes")`,``pos:`[`Int`](../../int "Int - The standard Int type.")`,``len:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int`](../../int "Int - The standard Int type.")

    Read `len` bytes and write them into `s` to the position specified by `pos`.

    Returns the actual length of read data that can be smaller than `len`.

    See `readFullBytes` that tries to read the exact amount of specified bytes.
- name: io.Input.readDouble()
  id: haxe/io/input#readDouble
  summary: Read a 64-bit double-precision floating point number
  belongs_to: io.Input
  description: |-
    ### [`readDouble`](#readDouble)`():`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Read a 64-bit double-precision floating point number.

    Endianness is specified by the `bigEndian` property.
- name: io.Input.readFloat()
  id: haxe/io/input#readFloat
  summary: Read a 32-bit floating point number
  belongs_to: io.Input
  description: |-
    ### [`readFloat`](#readFloat)`():`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Read a 32-bit floating point number.

    Endianness is specified by the `bigEndian` property.
- name: io.Input.readFullBytes()
  id: haxe/io/input#readFullBytes
  summary: Read len bytes and write them into s to the position specified by pos
  belongs_to: io.Input
  description: |-
    ### [`readFullBytes`](#readFullBytes)`(``s:`[`Bytes`](bytes "haxe.io.Bytes")`,``pos:`[`Int`](../../int "Int - The standard Int type.")`,``len:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Read `len` bytes and write them into `s` to the position specified by `pos`.

    Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.
- name: io.Input.readInt16()
  id: haxe/io/input#readInt16
  summary: Read a 16-bit signed integer
  belongs_to: io.Input
  description: |-
    ### [`readInt16`](#readInt16)`():`[`Int`](../../int "Int - The standard Int type.")

    Read a 16-bit signed integer.

    Endianness is specified by the `bigEndian` property.
- name: io.Input.readInt24()
  id: haxe/io/input#readInt24
  summary: Read a 24-bit signed integer
  belongs_to: io.Input
  description: |-
    ### [`readInt24`](#readInt24)`():`[`Int`](../../int "Int - The standard Int type.")

    Read a 24-bit signed integer.

    Endianness is specified by the `bigEndian` property.
- name: io.Input.readInt32()
  id: haxe/io/input#readInt32
  summary: Read a 32-bit signed integer
  belongs_to: io.Input
  description: |-
    ### [`readInt32`](#readInt32)`():`[`Int`](../../int "Int - The standard Int type.")

    Read a 32-bit signed integer.

    Endianness is specified by the `bigEndian` property.
- name: io.Input.readInt8()
  id: haxe/io/input#readInt8
  summary: Read a 8-bit signed integer
  belongs_to: io.Input
  description: |-
    ### [`readInt8`](#readInt8)`():`[`Int`](../../int "Int - The standard Int type.")

    Read a 8-bit signed integer.
- name: io.Input.readLine()
  id: haxe/io/input#readLine
  summary: Read a line of text separated by CR and/or LF bytes
  belongs_to: io.Input
  description: |-
    ### [`readLine`](#readLine)`():`[`String`](../../string "String - The basic String class.")

    Read a line of text separated by CR and/or LF bytes.

    The CR/LF characters are not included in the resulting string.
- name: io.Input.readString()
  id: haxe/io/input#readString
  summary: Read and len bytes as a string
  belongs_to: io.Input
  description: |-
    ### [`readString`](#readString)`(``len:`[`Int`](../../int "Int - The standard Int type.")`,``?encoding:`[`Encoding`](encoding "haxe.io.Encoding")`):`[`String`](../../string "String - The basic String class.")

    Read and `len` bytes as a string.
- name: io.Input.readUInt16()
  id: haxe/io/input#readUInt16
  summary: Read a 16-bit unsigned integer
  belongs_to: io.Input
  description: |-
    ### [`readUInt16`](#readUInt16)`():`[`Int`](../../int "Int - The standard Int type.")

    Read a 16-bit unsigned integer.

    Endianness is specified by the `bigEndian` property.
- name: io.Input.readUInt24()
  id: haxe/io/input#readUInt24
  summary: Read a 24-bit unsigned integer
  belongs_to: io.Input
  description: |-
    ### [`readUInt24`](#readUInt24)`():`[`Int`](../../int "Int - The standard Int type.")

    Read a 24-bit unsigned integer.

    Endianness is specified by the `bigEndian` property.
- name: io.Input.readUntil()
  id: haxe/io/input#readUntil
  summary: Read a string until a character code specified by end is occurred
  belongs_to: io.Input
  description: "### [`readUntil`](#readUntil)`(``end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nRead a string until a character code specified by `end` is occurred.\n\nThe final character is not included in the resulting string.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Input.html](https://api.haxe.org/haxe/io/Input.html)"
- name: io.Int32Array
  id: haxe/io/int32array
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Int32Array([Int32ArrayData](int32arraydata \"haxe.io.Int32ArrayData\"))\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\n## Static variables\n\n### `static``inline``read only`[`BYTES_PER_ELEMENT`](#BYTES_PER_ELEMENT)`:`[`Int`](../../int \"Int - The standard Int type.\")` = 4`\n\n## Static methods\n\n### `static`[`fromArray`](#fromArray)`(``a:`[`Array`](../../array \"Array\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int32Array`](int32array \"haxe.io.Int32Array\")\n\n### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``bytePos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int32Array`](int32array \"haxe.io.Int32Array\")\n\n### `static`[`fromData`](#fromData)`(``d:`[`Int32ArrayData`](int32arraydata \"haxe.io.Int32ArrayData\")`):`[`Int32Array`](int32array \"haxe.io.Int32Array\")\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `read only`[`view`](#view)`:`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n## Methods\n\n### `inline`[`get`](#get)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `inline`[`getData`](#getData)`():`[`Int32ArrayData`](int32arraydata \"haxe.io.Int32ArrayData\")\n\n### `inline`[`get_view`](#get_view)`():`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n### `inline`[`set`](#set)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``value:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int32Array`](int32array \"haxe.io.Int32Array\")\n\n### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int32Array`](int32array \"haxe.io.Int32Array\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Int32Array.html](https://api.haxe.org/haxe/io/Int32Array.html)"
- name: io.Int32Array.BYTES_PER_ELEMENT
  id: haxe/io/int32array#BYTES_PER_ELEMENT
  summary: null
  belongs_to: io.Int32Array
  description: |-
    ### `static``inline``read only`[`BYTES_PER_ELEMENT`](#BYTES_PER_ELEMENT)`:`[`Int`](../../int "Int - The standard Int type.")` = 4`

    ## Static methods
- name: io.Int32Array.fromArray()
  id: haxe/io/int32array#fromArray
  summary: null
  belongs_to: io.Int32Array
  description: '### `static`[`fromArray`](#fromArray)`(``a:`[`Array`](../../array "Array")`<`[`Int`](../../int "Int - The standard Int type.")`>,``pos:`[`Int`](../../int "Int - The standard Int type.")` = 0,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int32Array`](int32array "haxe.io.Int32Array")'
- name: io.Int32Array.fromBytes()
  id: haxe/io/int32array#fromBytes
  summary: null
  belongs_to: io.Int32Array
  description: '### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes "haxe.io.Bytes")`,``bytePos:`[`Int`](../../int "Int - The standard Int type.")` = 0,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int32Array`](int32array "haxe.io.Int32Array")'
- name: io.Int32Array.fromData()
  id: haxe/io/int32array#fromData
  summary: null
  belongs_to: io.Int32Array
  description: |-
    ### `static`[`fromData`](#fromData)`(``d:`[`Int32ArrayData`](int32arraydata "haxe.io.Int32ArrayData")`):`[`Int32Array`](int32array "haxe.io.Int32Array")

    ## Variables
- name: io.Int32Array.get()
  id: haxe/io/int32array#get
  summary: null
  belongs_to: io.Int32Array
  description: '### `inline`[`get`](#get)`(``index:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int`](../../int "Int - The standard Int type.")'
- name: io.Int32Array.get_view()
  id: haxe/io/int32array#get_view
  summary: null
  belongs_to: io.Int32Array
  description: '### `inline`[`get_view`](#get_view)`():`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")'
- name: io.Int32Array.getData()
  id: haxe/io/int32array#getData
  summary: null
  belongs_to: io.Int32Array
  description: '### `inline`[`getData`](#getData)`():`[`Int32ArrayData`](int32arraydata "haxe.io.Int32ArrayData")'
- name: io.Int32Array.length
  id: haxe/io/int32array#length
  summary: null
  belongs_to: io.Int32Array
  description: '### `read only`[`length`](#length)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: io.Int32Array.set()
  id: haxe/io/int32array#set
  summary: null
  belongs_to: io.Int32Array
  description: '### `inline`[`set`](#set)`(``index:`[`Int`](../../int "Int - The standard Int type.")`,``value:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int`](../../int "Int - The standard Int type.")'
- name: io.Int32Array.sub()
  id: haxe/io/int32array#sub
  summary: null
  belongs_to: io.Int32Array
  description: '### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int "Int - The standard Int type.")`,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int32Array`](int32array "haxe.io.Int32Array")'
- name: io.Int32Array.subarray()
  id: haxe/io/int32array#subarray
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: io.Int32Array
  description: "### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int32Array`](int32array \"haxe.io.Int32Array\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Int32Array.html](https://api.haxe.org/haxe/io/Int32Array.html)"
- name: io.Int32Array.view
  id: haxe/io/int32array#view
  summary: null
  belongs_to: io.Int32Array
  description: |-
    ### `read only`[`view`](#view)`:`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")

    ## Methods
- name: io.Int32ArrayData
  id: haxe/io/int32arraydata
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Int32ArrayData\n\npackage [haxe.io](index)\n\nimport [haxe.io.Int32Array](int32array)\n\n*Available on all platforms*\n\n#### flash, lua, php, cs, java, cpp, neko, hl, python, macro\n\n*alias for* [`haxe.io.ArrayBufferViewData`](arraybufferviewdata \"haxe.io.ArrayBufferViewData\")\n\n#### js\n\n*alias for* [`js.lib.Int32Array`](https://api.haxe.org/js/lib/Int32Array.html \"js.lib.Int32Array - The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Int32ArrayData.html](https://api.haxe.org/haxe/io/Int32ArrayData.html)"
- name: io.Mime
  id: haxe/io/mime
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Mime([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.io](index)\n\nfrom [String](../../string \"String - The basic String class.\") to [String](../../string \"String - The basic String class.\")\n\n*Available on all platforms*\n\nHTML MimeType Enum\n\nSee also:\n\n- <http://www.sitepoint.com/web-foundations/mime-types-complete-list>/\n\n## Variables\n\n### `inline``read only`[`ApplicationAcad`](#ApplicationAcad)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/acad\"`\n\n### `inline``read only`[`ApplicationArj`](#ApplicationArj)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/arj\"`\n\n### `inline``read only`[`ApplicationBase64`](#ApplicationBase64)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/base64\"`\n\n### `inline``read only`[`ApplicationBinhex`](#ApplicationBinhex)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/binhex\"`\n\n### `inline``read only`[`ApplicationBook`](#ApplicationBook)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/book\"`\n\n### `inline``read only`[`ApplicationCdf`](#ApplicationCdf)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/cdf\"`\n\n### `inline``read only`[`ApplicationClariscad`](#ApplicationClariscad)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/clariscad\"`\n\n### `inline``read only`[`ApplicationCommonground`](#ApplicationCommonground)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/commonground\"`\n\n### `inline``read only`[`ApplicationDrafting`](#ApplicationDrafting)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/drafting\"`\n\n### `inline``read only`[`ApplicationDsptype`](#ApplicationDsptype)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/dsptype\"`\n\n### `inline``read only`[`ApplicationDxf`](#ApplicationDxf)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/dxf\"`\n\n### `inline``read only`[`ApplicationEnvoy`](#ApplicationEnvoy)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/envoy\"`\n\n### `inline``read only`[`ApplicationExcel`](#ApplicationExcel)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/excel\"`\n\n### `inline``read only`[`ApplicationFreeloader`](#ApplicationFreeloader)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/freeloader\"`\n\n### `inline``read only`[`ApplicationFuturesplash`](#ApplicationFuturesplash)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/futuresplash\"`\n\n### `inline``read only`[`ApplicationGnutar`](#ApplicationGnutar)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/gnutar\"`\n\n### `inline``read only`[`ApplicationGroupwise`](#ApplicationGroupwise)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/groupwise\"`\n\n### `inline``read only`[`ApplicationHlp`](#ApplicationHlp)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/hlp\"`\n\n### `inline``read only`[`ApplicationHta`](#ApplicationHta)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/hta\"`\n\n### `inline``read only`[`ApplicationIDeas`](#ApplicationIDeas)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/i-deas\"`\n\n### `inline``read only`[`ApplicationIges`](#ApplicationIges)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/iges\"`\n\n### `inline``read only`[`ApplicationInf`](#ApplicationInf)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/inf\"`\n\n### `inline``read only`[`ApplicationJava`](#ApplicationJava)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/java\"`\n\n### `inline``read only`[`ApplicationJavaByteCode`](#ApplicationJavaByteCode)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/java-byte-code\"`\n\n### `inline``read only`[`ApplicationJavascript`](#ApplicationJavascript)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/javascript\"`\n\n### `inline``read only`[`ApplicationJson`](#ApplicationJson)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/json\"`\n\n### `inline``read only`[`ApplicationLzx`](#ApplicationLzx)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/lzx\"`\n\n### `inline``read only`[`ApplicationMacBinary`](#ApplicationMacBinary)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/mac-binary\"`\n\n### `inline``read only`[`ApplicationMacCompactpro`](#ApplicationMacCompactpro)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/mac-compactpro\"`\n\n### `inline``read only`[`ApplicationMacbinary`](#ApplicationMacbinary)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/macbinary\"`\n\n### `inline``read only`[`ApplicationMarc`](#ApplicationMarc)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/marc\"`\n\n### `inline``read only`[`ApplicationMbedlet`](#ApplicationMbedlet)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/mbedlet\"`\n\n### `inline``read only`[`ApplicationMcad`](#ApplicationMcad)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/mcad\"`\n\n### `inline``read only`[`ApplicationMime`](#ApplicationMime)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/mime\"`\n\n### `inline``read only`[`ApplicationMspowerpoint`](#ApplicationMspowerpoint)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/mspowerpoint\"`\n\n### `inline``read only`[`ApplicationMsword`](#ApplicationMsword)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/msword\"`\n\n### `inline``read only`[`ApplicationMswrite`](#ApplicationMswrite)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/mswrite\"`\n\n### `inline``read only`[`ApplicationNetmc`](#ApplicationNetmc)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/netmc\"`\n\n### `inline``read only`[`ApplicationOctetStream`](#ApplicationOctetStream)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/octet-stream\"`\n\n### `inline``read only`[`ApplicationOda`](#ApplicationOda)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/oda\"`\n\n### `inline``read only`[`ApplicationPdf`](#ApplicationPdf)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/pdf\"`\n\n### `inline``read only`[`ApplicationPkcs10`](#ApplicationPkcs10)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/pkcs10\"`\n\n### `inline``read only`[`ApplicationPkcs12`](#ApplicationPkcs12)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/pkcs-12\"`\n\n### `inline``read only`[`ApplicationPkcs7Mime`](#ApplicationPkcs7Mime)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/pkcs7-mime\"`\n\n### `inline``read only`[`ApplicationPkcs7Signature`](#ApplicationPkcs7Signature)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/pkcs7-signature\"`\n\n### `inline``read only`[`ApplicationPkcsCrl`](#ApplicationPkcsCrl)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/pkcs-crl\"`\n\n### `inline``read only`[`ApplicationPkixCert`](#ApplicationPkixCert)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/pkix-cert\"`\n\n### `inline``read only`[`ApplicationPostscript`](#ApplicationPostscript)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/postscript\"`\n\n### `inline``read only`[`ApplicationPro_eng`](#ApplicationPro_eng)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/pro_eng\"`\n\n### `inline``read only`[`ApplicationRingingTones`](#ApplicationRingingTones)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/ringing-tones\"`\n\n### `inline``read only`[`ApplicationRtf`](#ApplicationRtf)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/rtf\"`\n\n### `inline``read only`[`ApplicationSdp`](#ApplicationSdp)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/sdp\"`\n\n### `inline``read only`[`ApplicationSea`](#ApplicationSea)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/sea\"`\n\n### `inline``read only`[`ApplicationSet`](#ApplicationSet)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/set\"`\n\n### `inline``read only`[`ApplicationSla`](#ApplicationSla)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/sla\"`\n\n### `inline``read only`[`ApplicationSmil`](#ApplicationSmil)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/smil\"`\n\n### `inline``read only`[`ApplicationSolids`](#ApplicationSolids)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/solids\"`\n\n### `inline``read only`[`ApplicationSounder`](#ApplicationSounder)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/sounder\"`\n\n### `inline``read only`[`ApplicationStep`](#ApplicationStep)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/step\"`\n\n### `inline``read only`[`ApplicationStreamingmedia`](#ApplicationStreamingmedia)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/streamingmedia\"`\n\n### `inline``read only`[`ApplicationToolbook`](#ApplicationToolbook)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/toolbook\"`\n\n### `inline``read only`[`ApplicationVda`](#ApplicationVda)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vda\"`\n\n### `inline``read only`[`ApplicationVndFdf`](#ApplicationVndFdf)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.fdf\"`\n\n### `inline``read only`[`ApplicationVndHpHpgl`](#ApplicationVndHpHpgl)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.hp-hpgl\"`\n\n### `inline``read only`[`ApplicationVndHpPcl`](#ApplicationVndHpPcl)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.hp-pcl\"`\n\n### `inline``read only`[`ApplicationVndMsPkiCertstore`](#ApplicationVndMsPkiCertstore)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.ms-pki.certstore\"`\n\n### `inline``read only`[`ApplicationVndMsPkiPko`](#ApplicationVndMsPkiPko)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.ms-pki.pko\"`\n\n### `inline``read only`[`ApplicationVndMsPkiSeccat`](#ApplicationVndMsPkiSeccat)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.ms-pki.seccat\"`\n\n### `inline``read only`[`ApplicationVndMsPowerpoint`](#ApplicationVndMsPowerpoint)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.ms-powerpoint\"`\n\n### `inline``read only`[`ApplicationVndMsProject`](#ApplicationVndMsProject)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.ms-project\"`\n\n### `inline``read only`[`ApplicationVndNokiaConfigurationMessage`](#ApplicationVndNokiaConfigurationMessage)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.nokia.configuration-message\"`\n\n### `inline``read only`[`ApplicationVndRnRealmedia`](#ApplicationVndRnRealmedia)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.rn-realmedia\"`\n\n### `inline``read only`[`ApplicationVndRnRealplayer`](#ApplicationVndRnRealplayer)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.rn-realplayer\"`\n\n### `inline``read only`[`ApplicationVndWapWmlc`](#ApplicationVndWapWmlc)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.wap.wmlc\"`\n\n### `inline``read only`[`ApplicationVndWapWmlscriptc`](#ApplicationVndWapWmlscriptc)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.wap.wmlscriptc\"`\n\n### `inline``read only`[`ApplicationVndXara`](#ApplicationVndXara)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vnd.xara\"`\n\n### `inline``read only`[`ApplicationVocaltecMediaDesc`](#ApplicationVocaltecMediaDesc)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vocaltec-media-desc\"`\n\n### `inline``read only`[`ApplicationVocaltecMediaFile`](#ApplicationVocaltecMediaFile)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/vocaltec-media-file\"`\n\n### `inline``read only`[`ApplicationWordperfect`](#ApplicationWordperfect)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/wordperfect\"`\n\n### `inline``read only`[`ApplicationWordperfect60`](#ApplicationWordperfect60)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/wordperfect6.0\"`\n\n### `inline``read only`[`ApplicationWordperfect61`](#ApplicationWordperfect61)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/wordperfect6.1\"`\n\n### `inline``read only`[`ApplicationX123`](#ApplicationX123)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-123\"`\n\n### `inline``read only`[`ApplicationXAim`](#ApplicationXAim)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-aim\"`\n\n### `inline``read only`[`ApplicationXAuthorwareBin`](#ApplicationXAuthorwareBin)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-authorware-bin\"`\n\n### `inline``read only`[`ApplicationXAuthorwareMap`](#ApplicationXAuthorwareMap)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-authorware-map\"`\n\n### `inline``read only`[`ApplicationXAuthorwareSeg`](#ApplicationXAuthorwareSeg)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-authorware-seg\"`\n\n### `inline``read only`[`ApplicationXBcpio`](#ApplicationXBcpio)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-bcpio\"`\n\n### `inline``read only`[`ApplicationXBinary`](#ApplicationXBinary)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-binary\"`\n\n### `inline``read only`[`ApplicationXBsh`](#ApplicationXBsh)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-bsh\"`\n\n### `inline``read only`[`ApplicationXBytecodeElisp`](#ApplicationXBytecodeElisp)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-bytecode.elisp (compiled elisp)\"`\n\n### `inline``read only`[`ApplicationXBytecodePython`](#ApplicationXBytecodePython)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-bytecode.python\"`\n\n### `inline``read only`[`ApplicationXBzip`](#ApplicationXBzip)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-bzip\"`\n\n### `inline``read only`[`ApplicationXBzip2`](#ApplicationXBzip2)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-bzip2\"`\n\n### `inline``read only`[`ApplicationXCdf`](#ApplicationXCdf)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-cdf\"`\n\n### `inline``read only`[`ApplicationXCdlink`](#ApplicationXCdlink)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-cdlink\"`\n\n### `inline``read only`[`ApplicationXChat`](#ApplicationXChat)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-chat\"`\n\n### `inline``read only`[`ApplicationXCmuRaster`](#ApplicationXCmuRaster)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-cmu-raster\"`\n\n### `inline``read only`[`ApplicationXCocoa`](#ApplicationXCocoa)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-cocoa\"`\n\n### `inline``read only`[`ApplicationXCompress`](#ApplicationXCompress)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-compress\"`\n\n### `inline``read only`[`ApplicationXCompressed`](#ApplicationXCompressed)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-compressed\"`\n\n### `inline``read only`[`ApplicationXConference`](#ApplicationXConference)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-conference\"`\n\n### `inline``read only`[`ApplicationXCpio`](#ApplicationXCpio)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-cpio\"`\n\n### `inline``read only`[`ApplicationXCsh`](#ApplicationXCsh)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-csh\"`\n\n### `inline``read only`[`ApplicationXDeepv`](#ApplicationXDeepv)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-deepv\"`\n\n### `inline``read only`[`ApplicationXDirector`](#ApplicationXDirector)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-director\"`\n\n### `inline``read only`[`ApplicationXDvi`](#ApplicationXDvi)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-dvi\"`\n\n### `inline``read only`[`ApplicationXEnvoy`](#ApplicationXEnvoy)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-envoy\"`\n\n### `inline``read only`[`ApplicationXEsrehber`](#ApplicationXEsrehber)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-esrehber\"`\n\n### `inline``read only`[`ApplicationXFreelance`](#ApplicationXFreelance)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-freelance\"`\n\n### `inline``read only`[`ApplicationXGsp`](#ApplicationXGsp)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-gsp\"`\n\n### `inline``read only`[`ApplicationXGss`](#ApplicationXGss)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-gss\"`\n\n### `inline``read only`[`ApplicationXGtar`](#ApplicationXGtar)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-gtar\"`\n\n### `inline``read only`[`ApplicationXGzip`](#ApplicationXGzip)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-gzip\"`\n\n### `inline``read only`[`ApplicationXHdf`](#ApplicationXHdf)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-hdf\"`\n\n### `inline``read only`[`ApplicationXHelpfile`](#ApplicationXHelpfile)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-helpfile\"`\n\n### `inline``read only`[`ApplicationXHttpdImap`](#ApplicationXHttpdImap)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-httpd-imap\"`\n\n### `inline``read only`[`ApplicationXIma`](#ApplicationXIma)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-ima\"`\n\n### `inline``read only`[`ApplicationXInternettSignup`](#ApplicationXInternettSignup)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-internett-signup\"`\n\n### `inline``read only`[`ApplicationXInventor`](#ApplicationXInventor)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-inventor\"`\n\n### `inline``read only`[`ApplicationXIp2`](#ApplicationXIp2)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-ip2\"`\n\n### `inline``read only`[`ApplicationXJavaClass`](#ApplicationXJavaClass)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-java-class\"`\n\n### `inline``read only`[`ApplicationXJavaCommerce`](#ApplicationXJavaCommerce)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-java-commerce\"`\n\n### `inline``read only`[`ApplicationXKoan`](#ApplicationXKoan)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-koan\"`\n\n### `inline``read only`[`ApplicationXKsh`](#ApplicationXKsh)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-ksh\"`\n\n### `inline``read only`[`ApplicationXLatex`](#ApplicationXLatex)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-latex\"`\n\n### `inline``read only`[`ApplicationXLisp`](#ApplicationXLisp)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-lisp\"`\n\n### `inline``read only`[`ApplicationXLivescreen`](#ApplicationXLivescreen)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-livescreen\"`\n\n### `inline``read only`[`ApplicationXLotus`](#ApplicationXLotus)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-lotus\"`\n\n### `inline``read only`[`ApplicationXLotusscreencam`](#ApplicationXLotusscreencam)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-lotusscreencam\"`\n\n### `inline``read only`[`ApplicationXMacbinary`](#ApplicationXMacbinary)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-macbinary\"`\n\n### `inline``read only`[`ApplicationXMagicCapPackage10`](#ApplicationXMagicCapPackage10)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-magic-cap-package-1.0\"`\n\n### `inline``read only`[`ApplicationXMif`](#ApplicationXMif)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-mif\"`\n\n### `inline``read only`[`ApplicationXMixTransfer`](#ApplicationXMixTransfer)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-mix-transfer\"`\n\n### `inline``read only`[`ApplicationXMplayer2`](#ApplicationXMplayer2)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-mplayer2\"`\n\n### `inline``read only`[`ApplicationXNaviAnimation`](#ApplicationXNaviAnimation)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-navi-animation\"`\n\n### `inline``read only`[`ApplicationXNavidoc`](#ApplicationXNavidoc)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-navidoc\"`\n\n### `inline``read only`[`ApplicationXNavimap`](#ApplicationXNavimap)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-navimap\"`\n\n### `inline``read only`[`ApplicationXNetcdf`](#ApplicationXNetcdf)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-netcdf\"`\n\n### `inline``read only`[`ApplicationXNewtonCompatiblePkg`](#ApplicationXNewtonCompatiblePkg)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-newton-compatible-pkg\"`\n\n### `inline``read only`[`ApplicationXNokia9000CommunicatorAddOnSoftware`](#ApplicationXNokia9000CommunicatorAddOnSoftware)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-nokia-9000-communicator-add-on-software\"`\n\n### `inline``read only`[`ApplicationXOmc`](#ApplicationXOmc)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-omc\"`\n\n### `inline``read only`[`ApplicationXOmcdatamaker`](#ApplicationXOmcdatamaker)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-omcdatamaker\"`\n\n### `inline``read only`[`ApplicationXOmcregerator`](#ApplicationXOmcregerator)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-omcregerator\"`\n\n### `inline``read only`[`ApplicationXPagemaker`](#ApplicationXPagemaker)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-pagemaker\"`\n\n### `inline``read only`[`ApplicationXPixclscript`](#ApplicationXPixclscript)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-pixclscript\"`\n\n### `inline``read only`[`ApplicationXPkcs7Certificates`](#ApplicationXPkcs7Certificates)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-pkcs7-certificates\"`\n\n### `inline``read only`[`ApplicationXPkcs7Certreqresp`](#ApplicationXPkcs7Certreqresp)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-pkcs7-certreqresp\"`\n\n### `inline``read only`[`ApplicationXPkcs7Signature`](#ApplicationXPkcs7Signature)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-pkcs7-signature\"`\n\n### `inline``read only`[`ApplicationXPortableAnymap`](#ApplicationXPortableAnymap)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-portable-anymap\"`\n\n### `inline``read only`[`ApplicationXProject`](#ApplicationXProject)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-project\"`\n\n### `inline``read only`[`ApplicationXQpro`](#ApplicationXQpro)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-qpro\"`\n\n### `inline``read only`[`ApplicationXSeelogo`](#ApplicationXSeelogo)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-seelogo\"`\n\n### `inline``read only`[`ApplicationXShockwaveFlash`](#ApplicationXShockwaveFlash)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-shockwave-flash\"`\n\n### `inline``read only`[`ApplicationXSit`](#ApplicationXSit)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-sit\"`\n\n### `inline``read only`[`ApplicationXSprite`](#ApplicationXSprite)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-sprite\"`\n\n### `inline``read only`[`ApplicationXSv4cpio`](#ApplicationXSv4cpio)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-sv4cpio\"`\n\n### `inline``read only`[`ApplicationXSv4crc`](#ApplicationXSv4crc)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-sv4crc\"`\n\n### `inline``read only`[`ApplicationXTar`](#ApplicationXTar)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-tar\"`\n\n### `inline``read only`[`ApplicationXTbook`](#ApplicationXTbook)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-tbook\"`\n\n### `inline``read only`[`ApplicationXTcl`](#ApplicationXTcl)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-tcl\"`\n\n### `inline``read only`[`ApplicationXTex`](#ApplicationXTex)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-tex\"`\n\n### `inline``read only`[`ApplicationXTexinfo`](#ApplicationXTexinfo)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-texinfo\"`\n\n### `inline``read only`[`ApplicationXTroff`](#ApplicationXTroff)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-troff\"`\n\n### `inline``read only`[`ApplicationXTroffMan`](#ApplicationXTroffMan)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-troff-man\"`\n\n### `inline``read only`[`ApplicationXTroffMe`](#ApplicationXTroffMe)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-troff-me\"`\n\n### `inline``read only`[`ApplicationXTroffMs`](#ApplicationXTroffMs)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-troff-ms\"`\n\n### `inline``read only`[`ApplicationXTroffMsvideo`](#ApplicationXTroffMsvideo)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-troff-msvideo\"`\n\n### `inline``read only`[`ApplicationXUstar`](#ApplicationXUstar)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-ustar\"`\n\n### `inline``read only`[`ApplicationXVisio`](#ApplicationXVisio)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-visio\"`\n\n### `inline``read only`[`ApplicationXVndAudioexplosionMzz`](#ApplicationXVndAudioexplosionMzz)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-vnd.audioexplosion.mzz\"`\n\n### `inline``read only`[`ApplicationXVndLsXpix`](#ApplicationXVndLsXpix)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-vnd.ls-xpix\"`\n\n### `inline``read only`[`ApplicationXVrml`](#ApplicationXVrml)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-vrml\"`\n\n### `inline``read only`[`ApplicationXWaisSource`](#ApplicationXWaisSource)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-wais-source\"`\n\n### `inline``read only`[`ApplicationXWintalk`](#ApplicationXWintalk)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-wintalk\"`\n\n### `inline``read only`[`ApplicationXWorld`](#ApplicationXWorld)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-world\"`\n\n### `inline``read only`[`ApplicationXX509CaCert`](#ApplicationXX509CaCert)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/x-x509-ca-cert\"`\n\n### `inline``read only`[`ApplicationXml`](#ApplicationXml)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"application/xml\"`\n\n### `inline``read only`[`AudioAiff`](#AudioAiff)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/aiff\"`\n\n### `inline``read only`[`AudioBasic`](#AudioBasic)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/basic\"`\n\n### `inline``read only`[`AudioIt`](#AudioIt)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/it\"`\n\n### `inline``read only`[`AudioMake`](#AudioMake)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/make\"`\n\n### `inline``read only`[`AudioMid`](#AudioMid)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/mid\"`\n\n### `inline``read only`[`AudioMidi`](#AudioMidi)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/midi\"`\n\n### `inline``read only`[`AudioMod`](#AudioMod)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/mod\"`\n\n### `inline``read only`[`AudioMpeg`](#AudioMpeg)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/mpeg\"`\n\n### `inline``read only`[`AudioMpeg3`](#AudioMpeg3)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/mpeg3\"`\n\n### `inline``read only`[`AudioNspaudio`](#AudioNspaudio)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/nspaudio\"`\n\n### `inline``read only`[`AudioS3m`](#AudioS3m)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/s3m\"`\n\n### `inline``read only`[`AudioTspAudio`](#AudioTspAudio)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/tsp-audio\"`\n\n### `inline``read only`[`AudioVndQcelp`](#AudioVndQcelp)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/vnd.qcelp\"`\n\n### `inline``read only`[`AudioVoc`](#AudioVoc)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/voc\"`\n\n### `inline``read only`[`AudioVoxware`](#AudioVoxware)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/voxware\"`\n\n### `inline``read only`[`AudioWav`](#AudioWav)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/wav\"`\n\n### `inline``read only`[`AudioXAiff`](#AudioXAiff)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/x-aiff\"`\n\n### `inline``read only`[`AudioXGsm`](#AudioXGsm)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/x-gsm\"`\n\n### `inline``read only`[`AudioXJam`](#AudioXJam)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/x-jam\"`\n\n### `inline``read only`[`AudioXLiveaudio`](#AudioXLiveaudio)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/x-liveaudio\"`\n\n### `inline``read only`[`AudioXMpequrl`](#AudioXMpequrl)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/x-mpequrl\"`\n\n### `inline``read only`[`AudioXPnRealaudio`](#AudioXPnRealaudio)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/x-pn-realaudio\"`\n\n### `inline``read only`[`AudioXPnRealaudioPlugin`](#AudioXPnRealaudioPlugin)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/x-pn-realaudio-plugin\"`\n\n### `inline``read only`[`AudioXPsid`](#AudioXPsid)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/x-psid\"`\n\n### `inline``read only`[`AudioXTwinvq`](#AudioXTwinvq)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/x-twinvq\"`\n\n### `inline``read only`[`AudioXTwinvqPlugin`](#AudioXTwinvqPlugin)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/x-twinvq-plugin\"`\n\n### `inline``read only`[`AudioXVndAudioexplosionMjuicemediafile`](#AudioXVndAudioexplosionMjuicemediafile)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/x-vnd.audioexplosion.mjuicemediafile\"`\n\n### `inline``read only`[`AudioXm`](#AudioXm)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"audio/xm\"`\n\n### `inline``read only`[`ChemicalXPdb`](#ChemicalXPdb)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"chemical/x-pdb\"`\n\n### `inline``read only`[`DrawingXDwf`](#DrawingXDwf)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"drawing/x-dwf (old)\"`\n\n### `inline``read only`[`IWorldIVrml`](#IWorldIVrml)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"i-world/i-vrml\"`\n\n### `inline``read only`[`ImageBmp`](#ImageBmp)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/bmp\"`\n\n### `inline``read only`[`ImageCmuRaster`](#ImageCmuRaster)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/cmu-raster\"`\n\n### `inline``read only`[`ImageFif`](#ImageFif)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/fif\"`\n\n### `inline``read only`[`ImageFlorian`](#ImageFlorian)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/florian\"`\n\n### `inline``read only`[`ImageG3fax`](#ImageG3fax)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/g3fax\"`\n\n### `inline``read only`[`ImageGif`](#ImageGif)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/gif\"`\n\n### `inline``read only`[`ImageIef`](#ImageIef)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/ief\"`\n\n### `inline``read only`[`ImageJpeg`](#ImageJpeg)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/jpeg\"`\n\n### `inline``read only`[`ImageJutvision`](#ImageJutvision)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/jutvision\"`\n\n### `inline``read only`[`ImageNaplps`](#ImageNaplps)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/naplps\"`\n\n### `inline``read only`[`ImagePict`](#ImagePict)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/pict\"`\n\n### `inline``read only`[`ImagePng`](#ImagePng)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/png\"`\n\n### `inline``read only`[`ImageTiff`](#ImageTiff)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/tiff\"`\n\n### `inline``read only`[`ImageVasa`](#ImageVasa)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/vasa\"`\n\n### `inline``read only`[`ImageVndDwg`](#ImageVndDwg)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/vnd.dwg\"`\n\n### `inline``read only`[`ImageVndFpx`](#ImageVndFpx)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/vnd.fpx\"`\n\n### `inline``read only`[`ImageVndRnRealflash`](#ImageVndRnRealflash)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/vnd.rn-realflash\"`\n\n### `inline``read only`[`ImageVndRnRealpix`](#ImageVndRnRealpix)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/vnd.rn-realpix\"`\n\n### `inline``read only`[`ImageVndWapWbmp`](#ImageVndWapWbmp)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/vnd.wap.wbmp\"`\n\n### `inline``read only`[`ImageVndXiff`](#ImageVndXiff)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/vnd.xiff\"`\n\n### `inline``read only`[`ImageWebp`](#ImageWebp)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/webp\"`\n\n### `inline``read only`[`ImageXIcon`](#ImageXIcon)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-icon\"`\n\n### `inline``read only`[`ImageXJg`](#ImageXJg)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-jg\"`\n\n### `inline``read only`[`ImageXJps`](#ImageXJps)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-jps\"`\n\n### `inline``read only`[`ImageXNiff`](#ImageXNiff)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-niff\"`\n\n### `inline``read only`[`ImageXPcx`](#ImageXPcx)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-pcx\"`\n\n### `inline``read only`[`ImageXPict`](#ImageXPict)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-pict\"`\n\n### `inline``read only`[`ImageXPortableBitmap`](#ImageXPortableBitmap)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-portable-bitmap\"`\n\n### `inline``read only`[`ImageXPortableGraymap`](#ImageXPortableGraymap)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-portable-graymap\"`\n\n### `inline``read only`[`ImageXPortablePixmap`](#ImageXPortablePixmap)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-portable-pixmap\"`\n\n### `inline``read only`[`ImageXQuicktime`](#ImageXQuicktime)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-quicktime\"`\n\n### `inline``read only`[`ImageXRgb`](#ImageXRgb)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-rgb\"`\n\n### `inline``read only`[`ImageXWindowsBmp`](#ImageXWindowsBmp)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-windows-bmp\"`\n\n### `inline``read only`[`ImageXXbitmap`](#ImageXXbitmap)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-xbitmap\"`\n\n### `inline``read only`[`ImageXXpixmap`](#ImageXXpixmap)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-xpixmap\"`\n\n### `inline``read only`[`ImageXXwd`](#ImageXXwd)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"image/x-xwd\"`\n\n### `inline``read only`[`MessageRfc822`](#MessageRfc822)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"message/rfc822\"`\n\n### `inline``read only`[`ModelVrml`](#ModelVrml)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"model/vrml\"`\n\n### `inline``read only`[`ModelXPov`](#ModelXPov)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"model/x-pov\"`\n\n### `inline``read only`[`MultipartXZip`](#MultipartXZip)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"multipart/x-zip\"`\n\n### `inline``read only`[`PaleovuXPv`](#PaleovuXPv)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"paleovu/x-pv\"`\n\n### `inline``read only`[`TextAsp`](#TextAsp)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/asp\"`\n\n### `inline``read only`[`TextCss`](#TextCss)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/css\"`\n\n### `inline``read only`[`TextHtml`](#TextHtml)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/html\"`\n\n### `inline``read only`[`TextJavascript`](#TextJavascript)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/javascript\"`\n\n### `inline``read only`[`TextPascal`](#TextPascal)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/pascal\"`\n\n### `inline``read only`[`TextPlain`](#TextPlain)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/plain\"`\n\n### `inline``read only`[`TextRichtext`](#TextRichtext)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/richtext\"`\n\n### `inline``read only`[`TextScriplet`](#TextScriplet)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/scriplet\"`\n\n### `inline``read only`[`TextTabSeparatedValues`](#TextTabSeparatedValues)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/tab-separated-values\"`\n\n### `inline``read only`[`TextUriList`](#TextUriList)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/uri-list\"`\n\n### `inline``read only`[`TextVndAbc`](#TextVndAbc)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/vnd.abc\"`\n\n### `inline``read only`[`TextVndFmiFlexstor`](#TextVndFmiFlexstor)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/vnd.fmi.flexstor\"`\n\n### `inline``read only`[`TextVndWapWml`](#TextVndWapWml)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/vnd.wap.wml\"`\n\n### `inline``read only`[`TextVndWapWmlscript`](#TextVndWapWmlscript)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/vnd.wap.wmlscript\"`\n\n### `inline``read only`[`TextWebviewhtml`](#TextWebviewhtml)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/webviewhtml\"`\n\n### `inline``read only`[`TextXAsm`](#TextXAsm)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-asm\"`\n\n### `inline``read only`[`TextXAudiosoftIntra`](#TextXAudiosoftIntra)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-audiosoft-intra\"`\n\n### `inline``read only`[`TextXC`](#TextXC)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-c\"`\n\n### `inline``read only`[`TextXComponent`](#TextXComponent)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-component\"`\n\n### `inline``read only`[`TextXFortran`](#TextXFortran)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-fortran\"`\n\n### `inline``read only`[`TextXLaAsf`](#TextXLaAsf)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-la-asf\"`\n\n### `inline``read only`[`TextXPascal`](#TextXPascal)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-pascal\"`\n\n### `inline``read only`[`TextXScript`](#TextXScript)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-script\"`\n\n### `inline``read only`[`TextXScriptElisp`](#TextXScriptElisp)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-script.elisp\"`\n\n### `inline``read only`[`TextXScriptPhyton`](#TextXScriptPhyton)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-script.phyton\"`\n\n### `inline``read only`[`TextXScriptRexx`](#TextXScriptRexx)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-script.rexx\"`\n\n### `inline``read only`[`TextXScriptTcsh`](#TextXScriptTcsh)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-script.tcsh\"`\n\n### `inline``read only`[`TextXScriptZsh`](#TextXScriptZsh)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-script.zsh\"`\n\n### `inline``read only`[`TextXServerParsedHtml`](#TextXServerParsedHtml)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-server-parsed-html\"`\n\n### `inline``read only`[`TextXSetext`](#TextXSetext)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-setext\"`\n\n### `inline``read only`[`TextXSpeech`](#TextXSpeech)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-speech\"`\n\n### `inline``read only`[`TextXUil`](#TextXUil)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-uil\"`\n\n### `inline``read only`[`TextXUuencode`](#TextXUuencode)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-uuencode\"`\n\n### `inline``read only`[`TextXVcalendar`](#TextXVcalendar)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"text/x-vcalendar\"`\n\n### `inline``read only`[`VideoAnimaflex`](#VideoAnimaflex)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/animaflex\"`\n\n### `inline``read only`[`VideoAvi`](#VideoAvi)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/avi\"`\n\n### `inline``read only`[`VideoAvsVideo`](#VideoAvsVideo)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/avs-video\"`\n\n### `inline``read only`[`VideoDl`](#VideoDl)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/dl\"`\n\n### `inline``read only`[`VideoFli`](#VideoFli)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/fli\"`\n\n### `inline``read only`[`VideoGl`](#VideoGl)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/gl\"`\n\n### `inline``read only`[`VideoMpeg`](#VideoMpeg)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/mpeg\"`\n\n### `inline``read only`[`VideoMsvideo`](#VideoMsvideo)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/msvideo\"`\n\n### `inline``read only`[`VideoQuicktime`](#VideoQuicktime)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/quicktime\"`\n\n### `inline``read only`[`VideoVdo`](#VideoVdo)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/vdo\"`\n\n### `inline``read only`[`VideoVivo`](#VideoVivo)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/vivo\"`\n\n### `inline``read only`[`VideoVndRnRealvideo`](#VideoVndRnRealvideo)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/vnd.rn-realvideo\"`\n\n### `inline``read only`[`VideoVosaic`](#VideoVosaic)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/vosaic\"`\n\n### `inline``read only`[`VideoXAmtDemorun`](#VideoXAmtDemorun)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/x-amt-demorun\"`\n\n### `inline``read only`[`VideoXAmtShowrun`](#VideoXAmtShowrun)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/x-amt-showrun\"`\n\n### `inline``read only`[`VideoXAtomic3dFeature`](#VideoXAtomic3dFeature)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/x-atomic3d-feature\"`\n\n### `inline``read only`[`VideoXDv`](#VideoXDv)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/x-dv\"`\n\n### `inline``read only`[`VideoXIsvideo`](#VideoXIsvideo)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/x-isvideo\"`\n\n### `inline``read only`[`VideoXMotionJpeg`](#VideoXMotionJpeg)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/x-motion-jpeg\"`\n\n### `inline``read only`[`VideoXMsAsf`](#VideoXMsAsf)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/x-ms-asf\"`\n\n### `inline``read only`[`VideoXMsvideo`](#VideoXMsvideo)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/x-msvideo\"`\n\n### `inline``read only`[`VideoXQtc`](#VideoXQtc)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/x-qtc\"`\n\n### `inline``read only`[`VideoXSgiMovie`](#VideoXSgiMovie)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"video/x-sgi-movie\"`\n\n### `inline``read only`[`WindowsMetafile`](#WindowsMetafile)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"windows/metafile\"`\n\n### `inline``read only`[`WwwMime`](#WwwMime)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"www/mime\"`\n\n### `inline``read only`[`XConferenceXCooltalk`](#XConferenceXCooltalk)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"x-conference/x-cooltalk\"`\n\n### `inline``read only`[`XWorldX3dmf`](#XWorldX3dmf)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"x-world/x-3dmf\"`\n\n### `inline``read only`[`XWorldXVrt`](#XWorldXVrt)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"x-world/x-vrt\"`\n\n### `inline``read only`[`XglDrawing`](#XglDrawing)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"xgl/drawing\"`\n\n### `inline``read only`[`XglMovie`](#XglMovie)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"xgl/movie\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Mime.html](https://api.haxe.org/haxe/io/Mime.html)"
- name: io.Mime.ApplicationAcad
  id: haxe/io/mime#ApplicationAcad
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationAcad`](#ApplicationAcad)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/acad"`'
- name: io.Mime.ApplicationArj
  id: haxe/io/mime#ApplicationArj
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationArj`](#ApplicationArj)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/arj"`'
- name: io.Mime.ApplicationBase64
  id: haxe/io/mime#ApplicationBase64
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationBase64`](#ApplicationBase64)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/base64"`'
- name: io.Mime.ApplicationBinhex
  id: haxe/io/mime#ApplicationBinhex
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationBinhex`](#ApplicationBinhex)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/binhex"`'
- name: io.Mime.ApplicationBook
  id: haxe/io/mime#ApplicationBook
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationBook`](#ApplicationBook)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/book"`'
- name: io.Mime.ApplicationCdf
  id: haxe/io/mime#ApplicationCdf
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationCdf`](#ApplicationCdf)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/cdf"`'
- name: io.Mime.ApplicationClariscad
  id: haxe/io/mime#ApplicationClariscad
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationClariscad`](#ApplicationClariscad)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/clariscad"`'
- name: io.Mime.ApplicationCommonground
  id: haxe/io/mime#ApplicationCommonground
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationCommonground`](#ApplicationCommonground)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/commonground"`'
- name: io.Mime.ApplicationDrafting
  id: haxe/io/mime#ApplicationDrafting
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationDrafting`](#ApplicationDrafting)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/drafting"`'
- name: io.Mime.ApplicationDsptype
  id: haxe/io/mime#ApplicationDsptype
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationDsptype`](#ApplicationDsptype)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/dsptype"`'
- name: io.Mime.ApplicationDxf
  id: haxe/io/mime#ApplicationDxf
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationDxf`](#ApplicationDxf)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/dxf"`'
- name: io.Mime.ApplicationEnvoy
  id: haxe/io/mime#ApplicationEnvoy
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationEnvoy`](#ApplicationEnvoy)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/envoy"`'
- name: io.Mime.ApplicationExcel
  id: haxe/io/mime#ApplicationExcel
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationExcel`](#ApplicationExcel)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/excel"`'
- name: io.Mime.ApplicationFreeloader
  id: haxe/io/mime#ApplicationFreeloader
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationFreeloader`](#ApplicationFreeloader)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/freeloader"`'
- name: io.Mime.ApplicationFuturesplash
  id: haxe/io/mime#ApplicationFuturesplash
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationFuturesplash`](#ApplicationFuturesplash)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/futuresplash"`'
- name: io.Mime.ApplicationGnutar
  id: haxe/io/mime#ApplicationGnutar
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationGnutar`](#ApplicationGnutar)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/gnutar"`'
- name: io.Mime.ApplicationGroupwise
  id: haxe/io/mime#ApplicationGroupwise
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationGroupwise`](#ApplicationGroupwise)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/groupwise"`'
- name: io.Mime.ApplicationHlp
  id: haxe/io/mime#ApplicationHlp
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationHlp`](#ApplicationHlp)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/hlp"`'
- name: io.Mime.ApplicationHta
  id: haxe/io/mime#ApplicationHta
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationHta`](#ApplicationHta)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/hta"`'
- name: io.Mime.ApplicationIDeas
  id: haxe/io/mime#ApplicationIDeas
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationIDeas`](#ApplicationIDeas)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/i-deas"`'
- name: io.Mime.ApplicationIges
  id: haxe/io/mime#ApplicationIges
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationIges`](#ApplicationIges)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/iges"`'
- name: io.Mime.ApplicationInf
  id: haxe/io/mime#ApplicationInf
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationInf`](#ApplicationInf)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/inf"`'
- name: io.Mime.ApplicationJava
  id: haxe/io/mime#ApplicationJava
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationJava`](#ApplicationJava)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/java"`'
- name: io.Mime.ApplicationJavaByteCode
  id: haxe/io/mime#ApplicationJavaByteCode
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationJavaByteCode`](#ApplicationJavaByteCode)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/java-byte-code"`'
- name: io.Mime.ApplicationJavascript
  id: haxe/io/mime#ApplicationJavascript
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationJavascript`](#ApplicationJavascript)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/javascript"`'
- name: io.Mime.ApplicationJson
  id: haxe/io/mime#ApplicationJson
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationJson`](#ApplicationJson)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/json"`'
- name: io.Mime.ApplicationLzx
  id: haxe/io/mime#ApplicationLzx
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationLzx`](#ApplicationLzx)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/lzx"`'
- name: io.Mime.ApplicationMacBinary
  id: haxe/io/mime#ApplicationMacBinary
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationMacBinary`](#ApplicationMacBinary)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/mac-binary"`'
- name: io.Mime.ApplicationMacbinary
  id: haxe/io/mime#ApplicationMacbinary
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationMacBinary`](#ApplicationMacBinary)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/mac-binary"`'
- name: io.Mime.ApplicationMacCompactpro
  id: haxe/io/mime#ApplicationMacCompactpro
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationMacCompactpro`](#ApplicationMacCompactpro)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/mac-compactpro"`'
- name: io.Mime.ApplicationMarc
  id: haxe/io/mime#ApplicationMarc
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationMarc`](#ApplicationMarc)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/marc"`'
- name: io.Mime.ApplicationMbedlet
  id: haxe/io/mime#ApplicationMbedlet
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationMbedlet`](#ApplicationMbedlet)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/mbedlet"`'
- name: io.Mime.ApplicationMcad
  id: haxe/io/mime#ApplicationMcad
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationMcad`](#ApplicationMcad)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/mcad"`'
- name: io.Mime.ApplicationMime
  id: haxe/io/mime#ApplicationMime
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationMime`](#ApplicationMime)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/mime"`'
- name: io.Mime.ApplicationMspowerpoint
  id: haxe/io/mime#ApplicationMspowerpoint
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationMspowerpoint`](#ApplicationMspowerpoint)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/mspowerpoint"`'
- name: io.Mime.ApplicationMsword
  id: haxe/io/mime#ApplicationMsword
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationMsword`](#ApplicationMsword)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/msword"`'
- name: io.Mime.ApplicationMswrite
  id: haxe/io/mime#ApplicationMswrite
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationMswrite`](#ApplicationMswrite)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/mswrite"`'
- name: io.Mime.ApplicationNetmc
  id: haxe/io/mime#ApplicationNetmc
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationNetmc`](#ApplicationNetmc)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/netmc"`'
- name: io.Mime.ApplicationOctetStream
  id: haxe/io/mime#ApplicationOctetStream
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationOctetStream`](#ApplicationOctetStream)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/octet-stream"`'
- name: io.Mime.ApplicationOda
  id: haxe/io/mime#ApplicationOda
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationOda`](#ApplicationOda)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/oda"`'
- name: io.Mime.ApplicationPdf
  id: haxe/io/mime#ApplicationPdf
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationPdf`](#ApplicationPdf)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/pdf"`'
- name: io.Mime.ApplicationPkcs10
  id: haxe/io/mime#ApplicationPkcs10
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationPkcs10`](#ApplicationPkcs10)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/pkcs10"`'
- name: io.Mime.ApplicationPkcs12
  id: haxe/io/mime#ApplicationPkcs12
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationPkcs12`](#ApplicationPkcs12)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/pkcs-12"`'
- name: io.Mime.ApplicationPkcs7Mime
  id: haxe/io/mime#ApplicationPkcs7Mime
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationPkcs7Mime`](#ApplicationPkcs7Mime)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/pkcs7-mime"`'
- name: io.Mime.ApplicationPkcs7Signature
  id: haxe/io/mime#ApplicationPkcs7Signature
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationPkcs7Signature`](#ApplicationPkcs7Signature)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/pkcs7-signature"`'
- name: io.Mime.ApplicationPkcsCrl
  id: haxe/io/mime#ApplicationPkcsCrl
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationPkcsCrl`](#ApplicationPkcsCrl)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/pkcs-crl"`'
- name: io.Mime.ApplicationPkixCert
  id: haxe/io/mime#ApplicationPkixCert
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationPkixCert`](#ApplicationPkixCert)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/pkix-cert"`'
- name: io.Mime.ApplicationPostscript
  id: haxe/io/mime#ApplicationPostscript
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationPostscript`](#ApplicationPostscript)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/postscript"`'
- name: io.Mime.ApplicationPro_eng
  id: haxe/io/mime#ApplicationPro_eng
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationPro_eng`](#ApplicationPro_eng)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/pro_eng"`'
- name: io.Mime.ApplicationRingingTones
  id: haxe/io/mime#ApplicationRingingTones
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationRingingTones`](#ApplicationRingingTones)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/ringing-tones"`'
- name: io.Mime.ApplicationRtf
  id: haxe/io/mime#ApplicationRtf
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationRtf`](#ApplicationRtf)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/rtf"`'
- name: io.Mime.ApplicationSdp
  id: haxe/io/mime#ApplicationSdp
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationSdp`](#ApplicationSdp)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/sdp"`'
- name: io.Mime.ApplicationSea
  id: haxe/io/mime#ApplicationSea
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationSea`](#ApplicationSea)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/sea"`'
- name: io.Mime.ApplicationSet
  id: haxe/io/mime#ApplicationSet
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationSet`](#ApplicationSet)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/set"`'
- name: io.Mime.ApplicationSla
  id: haxe/io/mime#ApplicationSla
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationSla`](#ApplicationSla)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/sla"`'
- name: io.Mime.ApplicationSmil
  id: haxe/io/mime#ApplicationSmil
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationSmil`](#ApplicationSmil)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/smil"`'
- name: io.Mime.ApplicationSolids
  id: haxe/io/mime#ApplicationSolids
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationSolids`](#ApplicationSolids)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/solids"`'
- name: io.Mime.ApplicationSounder
  id: haxe/io/mime#ApplicationSounder
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationSounder`](#ApplicationSounder)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/sounder"`'
- name: io.Mime.ApplicationStep
  id: haxe/io/mime#ApplicationStep
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationStep`](#ApplicationStep)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/step"`'
- name: io.Mime.ApplicationStreamingmedia
  id: haxe/io/mime#ApplicationStreamingmedia
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationStreamingmedia`](#ApplicationStreamingmedia)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/streamingmedia"`'
- name: io.Mime.ApplicationToolbook
  id: haxe/io/mime#ApplicationToolbook
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationToolbook`](#ApplicationToolbook)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/toolbook"`'
- name: io.Mime.ApplicationVda
  id: haxe/io/mime#ApplicationVda
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVda`](#ApplicationVda)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vda"`'
- name: io.Mime.ApplicationVndFdf
  id: haxe/io/mime#ApplicationVndFdf
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndFdf`](#ApplicationVndFdf)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.fdf"`'
- name: io.Mime.ApplicationVndHpHpgl
  id: haxe/io/mime#ApplicationVndHpHpgl
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndHpHpgl`](#ApplicationVndHpHpgl)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.hp-hpgl"`'
- name: io.Mime.ApplicationVndHpPcl
  id: haxe/io/mime#ApplicationVndHpPcl
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndHpPcl`](#ApplicationVndHpPcl)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.hp-pcl"`'
- name: io.Mime.ApplicationVndMsPkiCertstore
  id: haxe/io/mime#ApplicationVndMsPkiCertstore
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndMsPkiCertstore`](#ApplicationVndMsPkiCertstore)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.ms-pki.certstore"`'
- name: io.Mime.ApplicationVndMsPkiPko
  id: haxe/io/mime#ApplicationVndMsPkiPko
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndMsPkiPko`](#ApplicationVndMsPkiPko)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.ms-pki.pko"`'
- name: io.Mime.ApplicationVndMsPkiSeccat
  id: haxe/io/mime#ApplicationVndMsPkiSeccat
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndMsPkiSeccat`](#ApplicationVndMsPkiSeccat)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.ms-pki.seccat"`'
- name: io.Mime.ApplicationVndMsPowerpoint
  id: haxe/io/mime#ApplicationVndMsPowerpoint
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndMsPowerpoint`](#ApplicationVndMsPowerpoint)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.ms-powerpoint"`'
- name: io.Mime.ApplicationVndMsProject
  id: haxe/io/mime#ApplicationVndMsProject
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndMsProject`](#ApplicationVndMsProject)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.ms-project"`'
- name: io.Mime.ApplicationVndNokiaConfigurationMessage
  id: haxe/io/mime#ApplicationVndNokiaConfigurationMessage
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndNokiaConfigurationMessage`](#ApplicationVndNokiaConfigurationMessage)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.nokia.configuration-message"`'
- name: io.Mime.ApplicationVndRnRealmedia
  id: haxe/io/mime#ApplicationVndRnRealmedia
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndRnRealmedia`](#ApplicationVndRnRealmedia)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.rn-realmedia"`'
- name: io.Mime.ApplicationVndRnRealplayer
  id: haxe/io/mime#ApplicationVndRnRealplayer
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndRnRealplayer`](#ApplicationVndRnRealplayer)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.rn-realplayer"`'
- name: io.Mime.ApplicationVndWapWmlc
  id: haxe/io/mime#ApplicationVndWapWmlc
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndWapWmlc`](#ApplicationVndWapWmlc)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.wap.wmlc"`'
- name: io.Mime.ApplicationVndWapWmlscriptc
  id: haxe/io/mime#ApplicationVndWapWmlscriptc
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndWapWmlscriptc`](#ApplicationVndWapWmlscriptc)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.wap.wmlscriptc"`'
- name: io.Mime.ApplicationVndXara
  id: haxe/io/mime#ApplicationVndXara
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVndXara`](#ApplicationVndXara)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vnd.xara"`'
- name: io.Mime.ApplicationVocaltecMediaDesc
  id: haxe/io/mime#ApplicationVocaltecMediaDesc
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVocaltecMediaDesc`](#ApplicationVocaltecMediaDesc)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vocaltec-media-desc"`'
- name: io.Mime.ApplicationVocaltecMediaFile
  id: haxe/io/mime#ApplicationVocaltecMediaFile
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationVocaltecMediaFile`](#ApplicationVocaltecMediaFile)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/vocaltec-media-file"`'
- name: io.Mime.ApplicationWordperfect
  id: haxe/io/mime#ApplicationWordperfect
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationWordperfect`](#ApplicationWordperfect)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/wordperfect"`'
- name: io.Mime.ApplicationWordperfect60
  id: haxe/io/mime#ApplicationWordperfect60
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationWordperfect60`](#ApplicationWordperfect60)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/wordperfect6.0"`'
- name: io.Mime.ApplicationWordperfect61
  id: haxe/io/mime#ApplicationWordperfect61
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationWordperfect61`](#ApplicationWordperfect61)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/wordperfect6.1"`'
- name: io.Mime.ApplicationX123
  id: haxe/io/mime#ApplicationX123
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationX123`](#ApplicationX123)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-123"`'
- name: io.Mime.ApplicationXAim
  id: haxe/io/mime#ApplicationXAim
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXAim`](#ApplicationXAim)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-aim"`'
- name: io.Mime.ApplicationXAuthorwareBin
  id: haxe/io/mime#ApplicationXAuthorwareBin
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXAuthorwareBin`](#ApplicationXAuthorwareBin)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-authorware-bin"`'
- name: io.Mime.ApplicationXAuthorwareMap
  id: haxe/io/mime#ApplicationXAuthorwareMap
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXAuthorwareMap`](#ApplicationXAuthorwareMap)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-authorware-map"`'
- name: io.Mime.ApplicationXAuthorwareSeg
  id: haxe/io/mime#ApplicationXAuthorwareSeg
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXAuthorwareSeg`](#ApplicationXAuthorwareSeg)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-authorware-seg"`'
- name: io.Mime.ApplicationXBcpio
  id: haxe/io/mime#ApplicationXBcpio
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXBcpio`](#ApplicationXBcpio)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-bcpio"`'
- name: io.Mime.ApplicationXBinary
  id: haxe/io/mime#ApplicationXBinary
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXBinary`](#ApplicationXBinary)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-binary"`'
- name: io.Mime.ApplicationXBsh
  id: haxe/io/mime#ApplicationXBsh
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXBsh`](#ApplicationXBsh)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-bsh"`'
- name: io.Mime.ApplicationXBytecodeElisp()
  id: haxe/io/mime#ApplicationXBytecodeElisp
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXBytecodeElisp`](#ApplicationXBytecodeElisp)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-bytecode.elisp (compiled elisp)"`'
- name: io.Mime.ApplicationXBytecodePython
  id: haxe/io/mime#ApplicationXBytecodePython
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXBytecodePython`](#ApplicationXBytecodePython)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-bytecode.python"`'
- name: io.Mime.ApplicationXBzip
  id: haxe/io/mime#ApplicationXBzip
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXBzip`](#ApplicationXBzip)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-bzip"`'
- name: io.Mime.ApplicationXBzip2
  id: haxe/io/mime#ApplicationXBzip2
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXBzip2`](#ApplicationXBzip2)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-bzip2"`'
- name: io.Mime.ApplicationXCdf
  id: haxe/io/mime#ApplicationXCdf
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXCdf`](#ApplicationXCdf)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-cdf"`'
- name: io.Mime.ApplicationXCdlink
  id: haxe/io/mime#ApplicationXCdlink
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXCdlink`](#ApplicationXCdlink)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-cdlink"`'
- name: io.Mime.ApplicationXChat
  id: haxe/io/mime#ApplicationXChat
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXChat`](#ApplicationXChat)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-chat"`'
- name: io.Mime.ApplicationXCmuRaster
  id: haxe/io/mime#ApplicationXCmuRaster
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXCmuRaster`](#ApplicationXCmuRaster)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-cmu-raster"`'
- name: io.Mime.ApplicationXCocoa
  id: haxe/io/mime#ApplicationXCocoa
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXCocoa`](#ApplicationXCocoa)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-cocoa"`'
- name: io.Mime.ApplicationXCompress
  id: haxe/io/mime#ApplicationXCompress
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXCompress`](#ApplicationXCompress)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-compress"`'
- name: io.Mime.ApplicationXCompressed
  id: haxe/io/mime#ApplicationXCompressed
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXCompressed`](#ApplicationXCompressed)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-compressed"`'
- name: io.Mime.ApplicationXConference
  id: haxe/io/mime#ApplicationXConference
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXConference`](#ApplicationXConference)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-conference"`'
- name: io.Mime.ApplicationXCpio
  id: haxe/io/mime#ApplicationXCpio
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXCpio`](#ApplicationXCpio)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-cpio"`'
- name: io.Mime.ApplicationXCsh
  id: haxe/io/mime#ApplicationXCsh
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXCsh`](#ApplicationXCsh)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-csh"`'
- name: io.Mime.ApplicationXDeepv
  id: haxe/io/mime#ApplicationXDeepv
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXDeepv`](#ApplicationXDeepv)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-deepv"`'
- name: io.Mime.ApplicationXDirector
  id: haxe/io/mime#ApplicationXDirector
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXDirector`](#ApplicationXDirector)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-director"`'
- name: io.Mime.ApplicationXDvi
  id: haxe/io/mime#ApplicationXDvi
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXDvi`](#ApplicationXDvi)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-dvi"`'
- name: io.Mime.ApplicationXEnvoy
  id: haxe/io/mime#ApplicationXEnvoy
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXEnvoy`](#ApplicationXEnvoy)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-envoy"`'
- name: io.Mime.ApplicationXEsrehber
  id: haxe/io/mime#ApplicationXEsrehber
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXEsrehber`](#ApplicationXEsrehber)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-esrehber"`'
- name: io.Mime.ApplicationXFreelance
  id: haxe/io/mime#ApplicationXFreelance
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXFreelance`](#ApplicationXFreelance)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-freelance"`'
- name: io.Mime.ApplicationXGsp
  id: haxe/io/mime#ApplicationXGsp
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXGsp`](#ApplicationXGsp)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-gsp"`'
- name: io.Mime.ApplicationXGss
  id: haxe/io/mime#ApplicationXGss
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXGss`](#ApplicationXGss)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-gss"`'
- name: io.Mime.ApplicationXGtar
  id: haxe/io/mime#ApplicationXGtar
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXGtar`](#ApplicationXGtar)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-gtar"`'
- name: io.Mime.ApplicationXGzip
  id: haxe/io/mime#ApplicationXGzip
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXGzip`](#ApplicationXGzip)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-gzip"`'
- name: io.Mime.ApplicationXHdf
  id: haxe/io/mime#ApplicationXHdf
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXHdf`](#ApplicationXHdf)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-hdf"`'
- name: io.Mime.ApplicationXHelpfile
  id: haxe/io/mime#ApplicationXHelpfile
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXHelpfile`](#ApplicationXHelpfile)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-helpfile"`'
- name: io.Mime.ApplicationXHttpdImap
  id: haxe/io/mime#ApplicationXHttpdImap
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXHttpdImap`](#ApplicationXHttpdImap)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-httpd-imap"`'
- name: io.Mime.ApplicationXIma
  id: haxe/io/mime#ApplicationXIma
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXIma`](#ApplicationXIma)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-ima"`'
- name: io.Mime.ApplicationXInternettSignup
  id: haxe/io/mime#ApplicationXInternettSignup
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXInternettSignup`](#ApplicationXInternettSignup)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-internett-signup"`'
- name: io.Mime.ApplicationXInventor
  id: haxe/io/mime#ApplicationXInventor
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXInventor`](#ApplicationXInventor)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-inventor"`'
- name: io.Mime.ApplicationXIp2
  id: haxe/io/mime#ApplicationXIp2
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXIp2`](#ApplicationXIp2)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-ip2"`'
- name: io.Mime.ApplicationXJavaClass
  id: haxe/io/mime#ApplicationXJavaClass
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXJavaClass`](#ApplicationXJavaClass)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-java-class"`'
- name: io.Mime.ApplicationXJavaCommerce
  id: haxe/io/mime#ApplicationXJavaCommerce
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXJavaCommerce`](#ApplicationXJavaCommerce)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-java-commerce"`'
- name: io.Mime.ApplicationXKoan
  id: haxe/io/mime#ApplicationXKoan
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXKoan`](#ApplicationXKoan)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-koan"`'
- name: io.Mime.ApplicationXKsh
  id: haxe/io/mime#ApplicationXKsh
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXKsh`](#ApplicationXKsh)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-ksh"`'
- name: io.Mime.ApplicationXLatex
  id: haxe/io/mime#ApplicationXLatex
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXLatex`](#ApplicationXLatex)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-latex"`'
- name: io.Mime.ApplicationXLisp
  id: haxe/io/mime#ApplicationXLisp
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXLisp`](#ApplicationXLisp)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-lisp"`'
- name: io.Mime.ApplicationXLivescreen
  id: haxe/io/mime#ApplicationXLivescreen
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXLivescreen`](#ApplicationXLivescreen)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-livescreen"`'
- name: io.Mime.ApplicationXLotus
  id: haxe/io/mime#ApplicationXLotus
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXLotus`](#ApplicationXLotus)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-lotus"`'
- name: io.Mime.ApplicationXLotusscreencam
  id: haxe/io/mime#ApplicationXLotusscreencam
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXLotusscreencam`](#ApplicationXLotusscreencam)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-lotusscreencam"`'
- name: io.Mime.ApplicationXMacbinary
  id: haxe/io/mime#ApplicationXMacbinary
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXMacbinary`](#ApplicationXMacbinary)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-macbinary"`'
- name: io.Mime.ApplicationXMagicCapPackage10
  id: haxe/io/mime#ApplicationXMagicCapPackage10
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXMagicCapPackage10`](#ApplicationXMagicCapPackage10)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-magic-cap-package-1.0"`'
- name: io.Mime.ApplicationXMif
  id: haxe/io/mime#ApplicationXMif
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXMif`](#ApplicationXMif)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-mif"`'
- name: io.Mime.ApplicationXMixTransfer
  id: haxe/io/mime#ApplicationXMixTransfer
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXMixTransfer`](#ApplicationXMixTransfer)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-mix-transfer"`'
- name: io.Mime.ApplicationXml
  id: haxe/io/mime#ApplicationXml
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXml`](#ApplicationXml)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/xml"`'
- name: io.Mime.ApplicationXMplayer2
  id: haxe/io/mime#ApplicationXMplayer2
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXMplayer2`](#ApplicationXMplayer2)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-mplayer2"`'
- name: io.Mime.ApplicationXNaviAnimation
  id: haxe/io/mime#ApplicationXNaviAnimation
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXNaviAnimation`](#ApplicationXNaviAnimation)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-navi-animation"`'
- name: io.Mime.ApplicationXNavidoc
  id: haxe/io/mime#ApplicationXNavidoc
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXNavidoc`](#ApplicationXNavidoc)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-navidoc"`'
- name: io.Mime.ApplicationXNavimap
  id: haxe/io/mime#ApplicationXNavimap
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXNavimap`](#ApplicationXNavimap)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-navimap"`'
- name: io.Mime.ApplicationXNetcdf
  id: haxe/io/mime#ApplicationXNetcdf
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXNetcdf`](#ApplicationXNetcdf)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-netcdf"`'
- name: io.Mime.ApplicationXNewtonCompatiblePkg
  id: haxe/io/mime#ApplicationXNewtonCompatiblePkg
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXNewtonCompatiblePkg`](#ApplicationXNewtonCompatiblePkg)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-newton-compatible-pkg"`'
- name: io.Mime.ApplicationXNokia9000CommunicatorAddOnSoftware
  id: haxe/io/mime#ApplicationXNokia9000CommunicatorAddOnSoftware
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXNokia9000CommunicatorAddOnSoftware`](#ApplicationXNokia9000CommunicatorAddOnSoftware)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-nokia-9000-communicator-add-on-software"`'
- name: io.Mime.ApplicationXOmc
  id: haxe/io/mime#ApplicationXOmc
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXOmc`](#ApplicationXOmc)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-omc"`'
- name: io.Mime.ApplicationXOmcdatamaker
  id: haxe/io/mime#ApplicationXOmcdatamaker
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXOmcdatamaker`](#ApplicationXOmcdatamaker)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-omcdatamaker"`'
- name: io.Mime.ApplicationXOmcregerator
  id: haxe/io/mime#ApplicationXOmcregerator
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXOmcregerator`](#ApplicationXOmcregerator)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-omcregerator"`'
- name: io.Mime.ApplicationXPagemaker
  id: haxe/io/mime#ApplicationXPagemaker
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXPagemaker`](#ApplicationXPagemaker)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-pagemaker"`'
- name: io.Mime.ApplicationXPixclscript
  id: haxe/io/mime#ApplicationXPixclscript
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXPixclscript`](#ApplicationXPixclscript)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-pixclscript"`'
- name: io.Mime.ApplicationXPkcs7Certificates
  id: haxe/io/mime#ApplicationXPkcs7Certificates
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXPkcs7Certificates`](#ApplicationXPkcs7Certificates)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-pkcs7-certificates"`'
- name: io.Mime.ApplicationXPkcs7Certreqresp
  id: haxe/io/mime#ApplicationXPkcs7Certreqresp
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXPkcs7Certreqresp`](#ApplicationXPkcs7Certreqresp)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-pkcs7-certreqresp"`'
- name: io.Mime.ApplicationXPkcs7Signature
  id: haxe/io/mime#ApplicationXPkcs7Signature
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXPkcs7Signature`](#ApplicationXPkcs7Signature)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-pkcs7-signature"`'
- name: io.Mime.ApplicationXPortableAnymap
  id: haxe/io/mime#ApplicationXPortableAnymap
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXPortableAnymap`](#ApplicationXPortableAnymap)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-portable-anymap"`'
- name: io.Mime.ApplicationXProject
  id: haxe/io/mime#ApplicationXProject
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXProject`](#ApplicationXProject)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-project"`'
- name: io.Mime.ApplicationXQpro
  id: haxe/io/mime#ApplicationXQpro
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXQpro`](#ApplicationXQpro)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-qpro"`'
- name: io.Mime.ApplicationXSeelogo
  id: haxe/io/mime#ApplicationXSeelogo
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXSeelogo`](#ApplicationXSeelogo)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-seelogo"`'
- name: io.Mime.ApplicationXShockwaveFlash
  id: haxe/io/mime#ApplicationXShockwaveFlash
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXShockwaveFlash`](#ApplicationXShockwaveFlash)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-shockwave-flash"`'
- name: io.Mime.ApplicationXSit
  id: haxe/io/mime#ApplicationXSit
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXSit`](#ApplicationXSit)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-sit"`'
- name: io.Mime.ApplicationXSprite
  id: haxe/io/mime#ApplicationXSprite
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXSprite`](#ApplicationXSprite)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-sprite"`'
- name: io.Mime.ApplicationXSv4cpio
  id: haxe/io/mime#ApplicationXSv4cpio
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXSv4cpio`](#ApplicationXSv4cpio)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-sv4cpio"`'
- name: io.Mime.ApplicationXSv4crc
  id: haxe/io/mime#ApplicationXSv4crc
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXSv4crc`](#ApplicationXSv4crc)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-sv4crc"`'
- name: io.Mime.ApplicationXTar
  id: haxe/io/mime#ApplicationXTar
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXTar`](#ApplicationXTar)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-tar"`'
- name: io.Mime.ApplicationXTbook
  id: haxe/io/mime#ApplicationXTbook
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXTbook`](#ApplicationXTbook)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-tbook"`'
- name: io.Mime.ApplicationXTcl
  id: haxe/io/mime#ApplicationXTcl
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXTcl`](#ApplicationXTcl)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-tcl"`'
- name: io.Mime.ApplicationXTex
  id: haxe/io/mime#ApplicationXTex
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXTex`](#ApplicationXTex)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-tex"`'
- name: io.Mime.ApplicationXTexinfo
  id: haxe/io/mime#ApplicationXTexinfo
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXTexinfo`](#ApplicationXTexinfo)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-texinfo"`'
- name: io.Mime.ApplicationXTroff
  id: haxe/io/mime#ApplicationXTroff
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXTroff`](#ApplicationXTroff)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-troff"`'
- name: io.Mime.ApplicationXTroffMan
  id: haxe/io/mime#ApplicationXTroffMan
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXTroffMan`](#ApplicationXTroffMan)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-troff-man"`'
- name: io.Mime.ApplicationXTroffMe
  id: haxe/io/mime#ApplicationXTroffMe
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXTroffMe`](#ApplicationXTroffMe)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-troff-me"`'
- name: io.Mime.ApplicationXTroffMs
  id: haxe/io/mime#ApplicationXTroffMs
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXTroffMs`](#ApplicationXTroffMs)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-troff-ms"`'
- name: io.Mime.ApplicationXTroffMsvideo
  id: haxe/io/mime#ApplicationXTroffMsvideo
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXTroffMsvideo`](#ApplicationXTroffMsvideo)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-troff-msvideo"`'
- name: io.Mime.ApplicationXUstar
  id: haxe/io/mime#ApplicationXUstar
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXUstar`](#ApplicationXUstar)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-ustar"`'
- name: io.Mime.ApplicationXVisio
  id: haxe/io/mime#ApplicationXVisio
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXVisio`](#ApplicationXVisio)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-visio"`'
- name: io.Mime.ApplicationXVndAudioexplosionMzz
  id: haxe/io/mime#ApplicationXVndAudioexplosionMzz
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXVndAudioexplosionMzz`](#ApplicationXVndAudioexplosionMzz)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-vnd.audioexplosion.mzz"`'
- name: io.Mime.ApplicationXVndLsXpix
  id: haxe/io/mime#ApplicationXVndLsXpix
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXVndLsXpix`](#ApplicationXVndLsXpix)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-vnd.ls-xpix"`'
- name: io.Mime.ApplicationXVrml
  id: haxe/io/mime#ApplicationXVrml
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXVrml`](#ApplicationXVrml)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-vrml"`'
- name: io.Mime.ApplicationXWaisSource
  id: haxe/io/mime#ApplicationXWaisSource
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXWaisSource`](#ApplicationXWaisSource)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-wais-source"`'
- name: io.Mime.ApplicationXWintalk
  id: haxe/io/mime#ApplicationXWintalk
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXWintalk`](#ApplicationXWintalk)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-wintalk"`'
- name: io.Mime.ApplicationXWorld
  id: haxe/io/mime#ApplicationXWorld
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXWorld`](#ApplicationXWorld)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-world"`'
- name: io.Mime.ApplicationXX509CaCert
  id: haxe/io/mime#ApplicationXX509CaCert
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ApplicationXX509CaCert`](#ApplicationXX509CaCert)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "application/x-x509-ca-cert"`'
- name: io.Mime.AudioAiff
  id: haxe/io/mime#AudioAiff
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioAiff`](#AudioAiff)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/aiff"`'
- name: io.Mime.AudioBasic
  id: haxe/io/mime#AudioBasic
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioBasic`](#AudioBasic)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/basic"`'
- name: io.Mime.AudioIt
  id: haxe/io/mime#AudioIt
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioIt`](#AudioIt)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/it"`'
- name: io.Mime.AudioMake
  id: haxe/io/mime#AudioMake
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioMake`](#AudioMake)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/make"`'
- name: io.Mime.AudioMid
  id: haxe/io/mime#AudioMid
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioMid`](#AudioMid)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/mid"`'
- name: io.Mime.AudioMidi
  id: haxe/io/mime#AudioMidi
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioMidi`](#AudioMidi)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/midi"`'
- name: io.Mime.AudioMod
  id: haxe/io/mime#AudioMod
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioMod`](#AudioMod)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/mod"`'
- name: io.Mime.AudioMpeg
  id: haxe/io/mime#AudioMpeg
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioMpeg`](#AudioMpeg)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/mpeg"`'
- name: io.Mime.AudioMpeg3
  id: haxe/io/mime#AudioMpeg3
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioMpeg3`](#AudioMpeg3)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/mpeg3"`'
- name: io.Mime.AudioNspaudio
  id: haxe/io/mime#AudioNspaudio
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioNspaudio`](#AudioNspaudio)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/nspaudio"`'
- name: io.Mime.AudioS3m
  id: haxe/io/mime#AudioS3m
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioS3m`](#AudioS3m)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/s3m"`'
- name: io.Mime.AudioTspAudio
  id: haxe/io/mime#AudioTspAudio
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioTspAudio`](#AudioTspAudio)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/tsp-audio"`'
- name: io.Mime.AudioVndQcelp
  id: haxe/io/mime#AudioVndQcelp
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioVndQcelp`](#AudioVndQcelp)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/vnd.qcelp"`'
- name: io.Mime.AudioVoc
  id: haxe/io/mime#AudioVoc
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioVoc`](#AudioVoc)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/voc"`'
- name: io.Mime.AudioVoxware
  id: haxe/io/mime#AudioVoxware
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioVoxware`](#AudioVoxware)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/voxware"`'
- name: io.Mime.AudioWav
  id: haxe/io/mime#AudioWav
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioWav`](#AudioWav)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/wav"`'
- name: io.Mime.AudioXAiff
  id: haxe/io/mime#AudioXAiff
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioXAiff`](#AudioXAiff)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/x-aiff"`'
- name: io.Mime.AudioXGsm
  id: haxe/io/mime#AudioXGsm
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioXGsm`](#AudioXGsm)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/x-gsm"`'
- name: io.Mime.AudioXJam
  id: haxe/io/mime#AudioXJam
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioXJam`](#AudioXJam)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/x-jam"`'
- name: io.Mime.AudioXLiveaudio
  id: haxe/io/mime#AudioXLiveaudio
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioXLiveaudio`](#AudioXLiveaudio)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/x-liveaudio"`'
- name: io.Mime.AudioXm
  id: haxe/io/mime#AudioXm
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioXm`](#AudioXm)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/xm"`'
- name: io.Mime.AudioXMpequrl
  id: haxe/io/mime#AudioXMpequrl
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioXMpequrl`](#AudioXMpequrl)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/x-mpequrl"`'
- name: io.Mime.AudioXPnRealaudio
  id: haxe/io/mime#AudioXPnRealaudio
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioXPnRealaudio`](#AudioXPnRealaudio)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/x-pn-realaudio"`'
- name: io.Mime.AudioXPnRealaudioPlugin
  id: haxe/io/mime#AudioXPnRealaudioPlugin
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioXPnRealaudioPlugin`](#AudioXPnRealaudioPlugin)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/x-pn-realaudio-plugin"`'
- name: io.Mime.AudioXPsid
  id: haxe/io/mime#AudioXPsid
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioXPsid`](#AudioXPsid)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/x-psid"`'
- name: io.Mime.AudioXTwinvq
  id: haxe/io/mime#AudioXTwinvq
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioXTwinvq`](#AudioXTwinvq)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/x-twinvq"`'
- name: io.Mime.AudioXTwinvqPlugin
  id: haxe/io/mime#AudioXTwinvqPlugin
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioXTwinvqPlugin`](#AudioXTwinvqPlugin)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/x-twinvq-plugin"`'
- name: io.Mime.AudioXVndAudioexplosionMjuicemediafile
  id: haxe/io/mime#AudioXVndAudioexplosionMjuicemediafile
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`AudioXVndAudioexplosionMjuicemediafile`](#AudioXVndAudioexplosionMjuicemediafile)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "audio/x-vnd.audioexplosion.mjuicemediafile"`'
- name: io.Mime.ChemicalXPdb
  id: haxe/io/mime#ChemicalXPdb
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ChemicalXPdb`](#ChemicalXPdb)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "chemical/x-pdb"`'
- name: io.Mime.DrawingXDwf()
  id: haxe/io/mime#DrawingXDwf
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`DrawingXDwf`](#DrawingXDwf)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "drawing/x-dwf (old)"`'
- name: io.Mime.ImageBmp
  id: haxe/io/mime#ImageBmp
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageBmp`](#ImageBmp)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/bmp"`'
- name: io.Mime.ImageCmuRaster
  id: haxe/io/mime#ImageCmuRaster
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageCmuRaster`](#ImageCmuRaster)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/cmu-raster"`'
- name: io.Mime.ImageFif
  id: haxe/io/mime#ImageFif
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageFif`](#ImageFif)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/fif"`'
- name: io.Mime.ImageFlorian
  id: haxe/io/mime#ImageFlorian
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageFlorian`](#ImageFlorian)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/florian"`'
- name: io.Mime.ImageG3fax
  id: haxe/io/mime#ImageG3fax
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageG3fax`](#ImageG3fax)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/g3fax"`'
- name: io.Mime.ImageGif
  id: haxe/io/mime#ImageGif
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageGif`](#ImageGif)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/gif"`'
- name: io.Mime.ImageIef
  id: haxe/io/mime#ImageIef
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageIef`](#ImageIef)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/ief"`'
- name: io.Mime.ImageJpeg
  id: haxe/io/mime#ImageJpeg
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageJpeg`](#ImageJpeg)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/jpeg"`'
- name: io.Mime.ImageJutvision
  id: haxe/io/mime#ImageJutvision
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageJutvision`](#ImageJutvision)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/jutvision"`'
- name: io.Mime.ImageNaplps
  id: haxe/io/mime#ImageNaplps
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageNaplps`](#ImageNaplps)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/naplps"`'
- name: io.Mime.ImagePict
  id: haxe/io/mime#ImagePict
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImagePict`](#ImagePict)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/pict"`'
- name: io.Mime.ImagePng
  id: haxe/io/mime#ImagePng
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImagePng`](#ImagePng)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/png"`'
- name: io.Mime.ImageTiff
  id: haxe/io/mime#ImageTiff
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageTiff`](#ImageTiff)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/tiff"`'
- name: io.Mime.ImageVasa
  id: haxe/io/mime#ImageVasa
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageVasa`](#ImageVasa)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/vasa"`'
- name: io.Mime.ImageVndDwg
  id: haxe/io/mime#ImageVndDwg
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageVndDwg`](#ImageVndDwg)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/vnd.dwg"`'
- name: io.Mime.ImageVndFpx
  id: haxe/io/mime#ImageVndFpx
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageVndFpx`](#ImageVndFpx)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/vnd.fpx"`'
- name: io.Mime.ImageVndRnRealflash
  id: haxe/io/mime#ImageVndRnRealflash
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageVndRnRealflash`](#ImageVndRnRealflash)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/vnd.rn-realflash"`'
- name: io.Mime.ImageVndRnRealpix
  id: haxe/io/mime#ImageVndRnRealpix
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageVndRnRealpix`](#ImageVndRnRealpix)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/vnd.rn-realpix"`'
- name: io.Mime.ImageVndWapWbmp
  id: haxe/io/mime#ImageVndWapWbmp
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageVndWapWbmp`](#ImageVndWapWbmp)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/vnd.wap.wbmp"`'
- name: io.Mime.ImageVndXiff
  id: haxe/io/mime#ImageVndXiff
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageVndXiff`](#ImageVndXiff)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/vnd.xiff"`'
- name: io.Mime.ImageWebp
  id: haxe/io/mime#ImageWebp
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageWebp`](#ImageWebp)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/webp"`'
- name: io.Mime.ImageXIcon
  id: haxe/io/mime#ImageXIcon
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXIcon`](#ImageXIcon)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-icon"`'
- name: io.Mime.ImageXJg
  id: haxe/io/mime#ImageXJg
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXJg`](#ImageXJg)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-jg"`'
- name: io.Mime.ImageXJps
  id: haxe/io/mime#ImageXJps
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXJps`](#ImageXJps)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-jps"`'
- name: io.Mime.ImageXNiff
  id: haxe/io/mime#ImageXNiff
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXNiff`](#ImageXNiff)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-niff"`'
- name: io.Mime.ImageXPcx
  id: haxe/io/mime#ImageXPcx
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXPcx`](#ImageXPcx)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-pcx"`'
- name: io.Mime.ImageXPict
  id: haxe/io/mime#ImageXPict
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXPict`](#ImageXPict)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-pict"`'
- name: io.Mime.ImageXPortableBitmap
  id: haxe/io/mime#ImageXPortableBitmap
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXPortableBitmap`](#ImageXPortableBitmap)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-portable-bitmap"`'
- name: io.Mime.ImageXPortableGraymap
  id: haxe/io/mime#ImageXPortableGraymap
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXPortableGraymap`](#ImageXPortableGraymap)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-portable-graymap"`'
- name: io.Mime.ImageXPortablePixmap
  id: haxe/io/mime#ImageXPortablePixmap
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXPortablePixmap`](#ImageXPortablePixmap)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-portable-pixmap"`'
- name: io.Mime.ImageXQuicktime
  id: haxe/io/mime#ImageXQuicktime
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXQuicktime`](#ImageXQuicktime)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-quicktime"`'
- name: io.Mime.ImageXRgb
  id: haxe/io/mime#ImageXRgb
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXRgb`](#ImageXRgb)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-rgb"`'
- name: io.Mime.ImageXWindowsBmp
  id: haxe/io/mime#ImageXWindowsBmp
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXWindowsBmp`](#ImageXWindowsBmp)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-windows-bmp"`'
- name: io.Mime.ImageXXbitmap
  id: haxe/io/mime#ImageXXbitmap
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXXbitmap`](#ImageXXbitmap)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-xbitmap"`'
- name: io.Mime.ImageXXpixmap
  id: haxe/io/mime#ImageXXpixmap
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXXpixmap`](#ImageXXpixmap)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-xpixmap"`'
- name: io.Mime.ImageXXwd
  id: haxe/io/mime#ImageXXwd
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ImageXXwd`](#ImageXXwd)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "image/x-xwd"`'
- name: io.Mime.IWorldIVrml
  id: haxe/io/mime#IWorldIVrml
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`IWorldIVrml`](#IWorldIVrml)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "i-world/i-vrml"`'
- name: io.Mime.MessageRfc822
  id: haxe/io/mime#MessageRfc822
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`MessageRfc822`](#MessageRfc822)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "message/rfc822"`'
- name: io.Mime.ModelVrml
  id: haxe/io/mime#ModelVrml
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ModelVrml`](#ModelVrml)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "model/vrml"`'
- name: io.Mime.ModelXPov
  id: haxe/io/mime#ModelXPov
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`ModelXPov`](#ModelXPov)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "model/x-pov"`'
- name: io.Mime.MultipartXZip
  id: haxe/io/mime#MultipartXZip
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`MultipartXZip`](#MultipartXZip)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "multipart/x-zip"`'
- name: io.Mime.PaleovuXPv
  id: haxe/io/mime#PaleovuXPv
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`PaleovuXPv`](#PaleovuXPv)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "paleovu/x-pv"`'
- name: io.Mime.TextAsp
  id: haxe/io/mime#TextAsp
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextAsp`](#TextAsp)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/asp"`'
- name: io.Mime.TextCss
  id: haxe/io/mime#TextCss
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextCss`](#TextCss)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/css"`'
- name: io.Mime.TextHtml
  id: haxe/io/mime#TextHtml
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextHtml`](#TextHtml)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/html"`'
- name: io.Mime.TextJavascript
  id: haxe/io/mime#TextJavascript
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextJavascript`](#TextJavascript)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/javascript"`'
- name: io.Mime.TextPascal
  id: haxe/io/mime#TextPascal
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextPascal`](#TextPascal)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/pascal"`'
- name: io.Mime.TextPlain
  id: haxe/io/mime#TextPlain
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextPlain`](#TextPlain)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/plain"`'
- name: io.Mime.TextRichtext
  id: haxe/io/mime#TextRichtext
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextRichtext`](#TextRichtext)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/richtext"`'
- name: io.Mime.TextScriplet
  id: haxe/io/mime#TextScriplet
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextScriplet`](#TextScriplet)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/scriplet"`'
- name: io.Mime.TextTabSeparatedValues
  id: haxe/io/mime#TextTabSeparatedValues
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextTabSeparatedValues`](#TextTabSeparatedValues)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/tab-separated-values"`'
- name: io.Mime.TextUriList
  id: haxe/io/mime#TextUriList
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextUriList`](#TextUriList)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/uri-list"`'
- name: io.Mime.TextVndAbc
  id: haxe/io/mime#TextVndAbc
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextVndAbc`](#TextVndAbc)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/vnd.abc"`'
- name: io.Mime.TextVndFmiFlexstor
  id: haxe/io/mime#TextVndFmiFlexstor
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextVndFmiFlexstor`](#TextVndFmiFlexstor)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/vnd.fmi.flexstor"`'
- name: io.Mime.TextVndWapWml
  id: haxe/io/mime#TextVndWapWml
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextVndWapWml`](#TextVndWapWml)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/vnd.wap.wml"`'
- name: io.Mime.TextVndWapWmlscript
  id: haxe/io/mime#TextVndWapWmlscript
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextVndWapWmlscript`](#TextVndWapWmlscript)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/vnd.wap.wmlscript"`'
- name: io.Mime.TextWebviewhtml
  id: haxe/io/mime#TextWebviewhtml
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextWebviewhtml`](#TextWebviewhtml)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/webviewhtml"`'
- name: io.Mime.TextXAsm
  id: haxe/io/mime#TextXAsm
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXAsm`](#TextXAsm)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-asm"`'
- name: io.Mime.TextXAudiosoftIntra
  id: haxe/io/mime#TextXAudiosoftIntra
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXAudiosoftIntra`](#TextXAudiosoftIntra)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-audiosoft-intra"`'
- name: io.Mime.TextXC
  id: haxe/io/mime#TextXC
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXC`](#TextXC)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-c"`'
- name: io.Mime.TextXComponent
  id: haxe/io/mime#TextXComponent
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXComponent`](#TextXComponent)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-component"`'
- name: io.Mime.TextXFortran
  id: haxe/io/mime#TextXFortran
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXFortran`](#TextXFortran)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-fortran"`'
- name: io.Mime.TextXLaAsf
  id: haxe/io/mime#TextXLaAsf
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXLaAsf`](#TextXLaAsf)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-la-asf"`'
- name: io.Mime.TextXPascal
  id: haxe/io/mime#TextXPascal
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXPascal`](#TextXPascal)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-pascal"`'
- name: io.Mime.TextXScript
  id: haxe/io/mime#TextXScript
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXScript`](#TextXScript)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-script"`'
- name: io.Mime.TextXScriptElisp
  id: haxe/io/mime#TextXScriptElisp
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXScriptElisp`](#TextXScriptElisp)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-script.elisp"`'
- name: io.Mime.TextXScriptPhyton
  id: haxe/io/mime#TextXScriptPhyton
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXScriptPhyton`](#TextXScriptPhyton)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-script.phyton"`'
- name: io.Mime.TextXScriptRexx
  id: haxe/io/mime#TextXScriptRexx
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXScriptRexx`](#TextXScriptRexx)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-script.rexx"`'
- name: io.Mime.TextXScriptTcsh
  id: haxe/io/mime#TextXScriptTcsh
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXScriptTcsh`](#TextXScriptTcsh)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-script.tcsh"`'
- name: io.Mime.TextXScriptZsh
  id: haxe/io/mime#TextXScriptZsh
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXScriptZsh`](#TextXScriptZsh)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-script.zsh"`'
- name: io.Mime.TextXServerParsedHtml
  id: haxe/io/mime#TextXServerParsedHtml
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXServerParsedHtml`](#TextXServerParsedHtml)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-server-parsed-html"`'
- name: io.Mime.TextXSetext
  id: haxe/io/mime#TextXSetext
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXSetext`](#TextXSetext)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-setext"`'
- name: io.Mime.TextXSpeech
  id: haxe/io/mime#TextXSpeech
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXSpeech`](#TextXSpeech)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-speech"`'
- name: io.Mime.TextXUil
  id: haxe/io/mime#TextXUil
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXUil`](#TextXUil)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-uil"`'
- name: io.Mime.TextXUuencode
  id: haxe/io/mime#TextXUuencode
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXUuencode`](#TextXUuencode)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-uuencode"`'
- name: io.Mime.TextXVcalendar
  id: haxe/io/mime#TextXVcalendar
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`TextXVcalendar`](#TextXVcalendar)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "text/x-vcalendar"`'
- name: io.Mime.VideoAnimaflex
  id: haxe/io/mime#VideoAnimaflex
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoAnimaflex`](#VideoAnimaflex)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/animaflex"`'
- name: io.Mime.VideoAvi
  id: haxe/io/mime#VideoAvi
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoAvi`](#VideoAvi)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/avi"`'
- name: io.Mime.VideoAvsVideo
  id: haxe/io/mime#VideoAvsVideo
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoAvsVideo`](#VideoAvsVideo)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/avs-video"`'
- name: io.Mime.VideoDl
  id: haxe/io/mime#VideoDl
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoDl`](#VideoDl)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/dl"`'
- name: io.Mime.VideoFli
  id: haxe/io/mime#VideoFli
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoFli`](#VideoFli)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/fli"`'
- name: io.Mime.VideoGl
  id: haxe/io/mime#VideoGl
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoGl`](#VideoGl)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/gl"`'
- name: io.Mime.VideoMpeg
  id: haxe/io/mime#VideoMpeg
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoMpeg`](#VideoMpeg)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/mpeg"`'
- name: io.Mime.VideoMsvideo
  id: haxe/io/mime#VideoMsvideo
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoMsvideo`](#VideoMsvideo)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/msvideo"`'
- name: io.Mime.VideoQuicktime
  id: haxe/io/mime#VideoQuicktime
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoQuicktime`](#VideoQuicktime)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/quicktime"`'
- name: io.Mime.VideoVdo
  id: haxe/io/mime#VideoVdo
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoVdo`](#VideoVdo)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/vdo"`'
- name: io.Mime.VideoVivo
  id: haxe/io/mime#VideoVivo
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoVivo`](#VideoVivo)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/vivo"`'
- name: io.Mime.VideoVndRnRealvideo
  id: haxe/io/mime#VideoVndRnRealvideo
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoVndRnRealvideo`](#VideoVndRnRealvideo)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/vnd.rn-realvideo"`'
- name: io.Mime.VideoVosaic
  id: haxe/io/mime#VideoVosaic
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoVosaic`](#VideoVosaic)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/vosaic"`'
- name: io.Mime.VideoXAmtDemorun
  id: haxe/io/mime#VideoXAmtDemorun
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoXAmtDemorun`](#VideoXAmtDemorun)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/x-amt-demorun"`'
- name: io.Mime.VideoXAmtShowrun
  id: haxe/io/mime#VideoXAmtShowrun
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoXAmtShowrun`](#VideoXAmtShowrun)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/x-amt-showrun"`'
- name: io.Mime.VideoXAtomic3dFeature
  id: haxe/io/mime#VideoXAtomic3dFeature
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoXAtomic3dFeature`](#VideoXAtomic3dFeature)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/x-atomic3d-feature"`'
- name: io.Mime.VideoXDv
  id: haxe/io/mime#VideoXDv
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoXDv`](#VideoXDv)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/x-dv"`'
- name: io.Mime.VideoXIsvideo
  id: haxe/io/mime#VideoXIsvideo
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoXIsvideo`](#VideoXIsvideo)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/x-isvideo"`'
- name: io.Mime.VideoXMotionJpeg
  id: haxe/io/mime#VideoXMotionJpeg
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoXMotionJpeg`](#VideoXMotionJpeg)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/x-motion-jpeg"`'
- name: io.Mime.VideoXMsAsf
  id: haxe/io/mime#VideoXMsAsf
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoXMsAsf`](#VideoXMsAsf)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/x-ms-asf"`'
- name: io.Mime.VideoXMsvideo
  id: haxe/io/mime#VideoXMsvideo
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoXMsvideo`](#VideoXMsvideo)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/x-msvideo"`'
- name: io.Mime.VideoXQtc
  id: haxe/io/mime#VideoXQtc
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoXQtc`](#VideoXQtc)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/x-qtc"`'
- name: io.Mime.VideoXSgiMovie
  id: haxe/io/mime#VideoXSgiMovie
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`VideoXSgiMovie`](#VideoXSgiMovie)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "video/x-sgi-movie"`'
- name: io.Mime.WindowsMetafile
  id: haxe/io/mime#WindowsMetafile
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`WindowsMetafile`](#WindowsMetafile)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "windows/metafile"`'
- name: io.Mime.WwwMime
  id: haxe/io/mime#WwwMime
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`WwwMime`](#WwwMime)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "www/mime"`'
- name: io.Mime.XConferenceXCooltalk
  id: haxe/io/mime#XConferenceXCooltalk
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`XConferenceXCooltalk`](#XConferenceXCooltalk)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "x-conference/x-cooltalk"`'
- name: io.Mime.XglDrawing
  id: haxe/io/mime#XglDrawing
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`XglDrawing`](#XglDrawing)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "xgl/drawing"`'
- name: io.Mime.XglMovie
  id: haxe/io/mime#XglMovie
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: io.Mime
  description: "### `inline``read only`[`XglMovie`](#XglMovie)`:`[`Mime`](mime \"haxe.io.Mime - HTML MimeType EnumSee also:http://www.\")` = \"xgl/movie\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Mime.html](https://api.haxe.org/haxe/io/Mime.html)"
- name: io.Mime.XWorldX3dmf
  id: haxe/io/mime#XWorldX3dmf
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`XWorldX3dmf`](#XWorldX3dmf)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "x-world/x-3dmf"`'
- name: io.Mime.XWorldXVrt
  id: haxe/io/mime#XWorldXVrt
  summary: null
  belongs_to: io.Mime
  description: '### `inline``read only`[`XWorldXVrt`](#XWorldXVrt)`:`[`Mime`](mime "haxe.io.Mime - HTML MimeType EnumSee also:http://www.")` = "x-world/x-vrt"`'
- name: io.Output
  id: haxe/io/output
  summary: An Output is an abstract write
  description: "# Output\n\npackage [haxe.io](index)\n\nextended by [NativeOutput](https://api.haxe.org/cs/io/NativeOutput.html \"cs.io.NativeOutput\"), [BytesOutput](bytesoutput \"haxe.io.BytesOutput\"), [NativeOutput](https://api.haxe.org/java/io/NativeOutput.html \"java.io.NativeOutput\"), [NativeOutput](https://api.haxe.org/python/io/NativeOutput.html \"python.io.NativeOutput\"), [FileOutput](https://api.haxe.org/sys/io/FileOutput.html \"sys.io.FileOutput - Use sys.\")\n\n*Available on all platforms*\n\nAn Output is an abstract write. A specific output implementation will only have to override the `writeByte` and maybe the `write`, `flush` and `close` methods. See [`File.write`](https://api.haxe.org/cs/system/io/File.html#write) and [`String.write`](../../string#write) for two ways of creating an Output.\n\n## Variables\n\n### [`bigEndian`](#bigEndian)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nEndianness (word byte order) used when writing numbers.\n\nIf [`true`](../../bool), big-endian is used, otherwise `little-endian` is used.\n\n## Methods\n\n### [`close`](#close)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\nClose the output.\n\nBehaviour while writing after calling this method is unspecified.\n\n### [`flush`](#flush)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\nFlush any buffered data.\n\n### [`prepare`](#prepare)`(``nbytes:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nInform that we are about to write at least `nbytes` bytes.\n\nThe underlying implementation can allocate proper working space depending on this information, or simply ignore it. This is not a mandatory call but a tip and is only used in some specific cases.\n\n### [`write`](#write)`(``s:`[`Bytes`](bytes \"haxe.io.Bytes\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nWrite all bytes stored in `s`.\n\n### [`writeByte`](#writeByte)`(``c:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nWrite one byte.\n\n### [`writeBytes`](#writeBytes)`(``s:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\nWrite `len` bytes from `s` starting by position specified by `pos`.\n\nReturns the actual length of written data that can differ from `len`.\n\nSee `writeFullBytes` that tries to write the exact amount of specified bytes.\n\n### [`writeDouble`](#writeDouble)`(``x:`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nWrite `x` as 64-bit double-precision floating point number.\n\nEndianness is specified by the `bigEndian` property.\n\n### [`writeFloat`](#writeFloat)`(``x:`[`Float`](../../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nWrite `x` as 32-bit floating point number.\n\nEndianness is specified by the `bigEndian` property.\n\n### [`writeFullBytes`](#writeFullBytes)`(``s:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nWrite `len` bytes from `s` starting by position specified by `pos`.\n\nUnlike `writeBytes`, this method tries to write the exact `len` amount of bytes.\n\n### [`writeInput`](#writeInput)`(``i:`[`Input`](input \"haxe.io.Input - An Input is an abstract reader.\")`,`` ``?bufsize:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nRead all available data from `i` and write it.\n\nThe `bufsize` optional argument specifies the size of chunks by which data is read and written. Its default value is 4096.\n\n### [`writeInt16`](#writeInt16)`(``x:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nWrite `x` as 16-bit signed integer.\n\nEndianness is specified by the `bigEndian` property.\n\n### [`writeInt24`](#writeInt24)`(``x:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nWrite `x` as 24-bit signed integer.\n\nEndianness is specified by the `bigEndian` property.\n\n### [`writeInt32`](#writeInt32)`(``x:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nWrite `x` as 32-bit signed integer.\n\nEndianness is specified by the `bigEndian` property.\n\n### [`writeInt8`](#writeInt8)`(``x:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nWrite `x` as 8-bit signed integer.\n\n### [`writeString`](#writeString)`(``s:`[`String`](../../string \"String - The basic String class.\")`,`` ``?encoding:`[`Encoding`](encoding \"haxe.io.Encoding\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nWrite `s` string.\n\n### [`writeUInt16`](#writeUInt16)`(``x:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nWrite `x` as 16-bit unsigned integer.\n\nEndianness is specified by the `bigEndian` property.\n\n### [`writeUInt24`](#writeUInt24)`(``x:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nWrite `x` as 24-bit unsigned integer.\n\nEndianness is specified by the `bigEndian` property.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Output.html](https://api.haxe.org/haxe/io/Output.html)"
- name: io.Output.bigEndian
  id: haxe/io/output#bigEndian
  summary: Endianness (word byte order) used when writing numbers
  belongs_to: io.Output
  description: |-
    ### [`bigEndian`](#bigEndian)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Endianness (word byte order) used when writing numbers.

    If [`true`](../../bool), big-endian is used, otherwise `little-endian` is used.

    ## Methods
- name: io.Output.close()
  id: haxe/io/output#close
  summary: Close the output
  belongs_to: io.Output
  description: |-
    ### [`close`](#close)`():`[`Void`](../../void "Void - The standard Void type.")

    Close the output.

    Behaviour while writing after calling this method is unspecified.
- name: io.Output.flush()
  id: haxe/io/output#flush
  summary: Flush any buffered data
  belongs_to: io.Output
  description: |-
    ### [`flush`](#flush)`():`[`Void`](../../void "Void - The standard Void type.")

    Flush any buffered data.
- name: io.Output.prepare()
  id: haxe/io/output#prepare
  summary: Inform that we are about to write at least nbytes bytes
  belongs_to: io.Output
  description: |-
    ### [`prepare`](#prepare)`(``nbytes:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Inform that we are about to write at least `nbytes` bytes.

    The underlying implementation can allocate proper working space depending on this information, or simply ignore it. This is not a mandatory call but a tip and is only used in some specific cases.
- name: io.Output.write()
  id: haxe/io/output#write
  summary: Write all bytes stored in s
  belongs_to: io.Output
  description: |-
    ### [`write`](#write)`(``s:`[`Bytes`](bytes "haxe.io.Bytes")`):`[`Void`](../../void "Void - The standard Void type.")

    Write all bytes stored in `s`.
- name: io.Output.writeByte()
  id: haxe/io/output#writeByte
  summary: Write one byte
  belongs_to: io.Output
  description: |-
    ### [`writeByte`](#writeByte)`(``c:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Write one byte.
- name: io.Output.writeBytes()
  id: haxe/io/output#writeBytes
  summary: Write len bytes from s starting by position specified by pos
  belongs_to: io.Output
  description: |-
    ### [`writeBytes`](#writeBytes)`(``s:`[`Bytes`](bytes "haxe.io.Bytes")`,``pos:`[`Int`](../../int "Int - The standard Int type.")`,``len:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int`](../../int "Int - The standard Int type.")

    Write `len` bytes from `s` starting by position specified by `pos`.

    Returns the actual length of written data that can differ from `len`.

    See `writeFullBytes` that tries to write the exact amount of specified bytes.
- name: io.Output.writeDouble()
  id: haxe/io/output#writeDouble
  summary: Write x as 64-bit double-precision floating point number
  belongs_to: io.Output
  description: |-
    ### [`writeDouble`](#writeDouble)`(``x:`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Void`](../../void "Void - The standard Void type.")

    Write `x` as 64-bit double-precision floating point number.

    Endianness is specified by the `bigEndian` property.
- name: io.Output.writeFloat()
  id: haxe/io/output#writeFloat
  summary: Write x as 32-bit floating point number
  belongs_to: io.Output
  description: |-
    ### [`writeFloat`](#writeFloat)`(``x:`[`Float`](../../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Void`](../../void "Void - The standard Void type.")

    Write `x` as 32-bit floating point number.

    Endianness is specified by the `bigEndian` property.
- name: io.Output.writeFullBytes()
  id: haxe/io/output#writeFullBytes
  summary: Write len bytes from s starting by position specified by pos
  belongs_to: io.Output
  description: |-
    ### [`writeFullBytes`](#writeFullBytes)`(``s:`[`Bytes`](bytes "haxe.io.Bytes")`,``pos:`[`Int`](../../int "Int - The standard Int type.")`,``len:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Write `len` bytes from `s` starting by position specified by `pos`.

    Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.
- name: io.Output.writeInput()
  id: haxe/io/output#writeInput
  summary: Read all available data from i and write it
  belongs_to: io.Output
  description: |-
    ### [`writeInput`](#writeInput)`(``i:`[`Input`](input "haxe.io.Input - An Input is an abstract reader.")`,``?bufsize:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Read all available data from `i` and write it.

    The `bufsize` optional argument specifies the size of chunks by which data is read and written. Its default value is 4096.
- name: io.Output.writeInt16()
  id: haxe/io/output#writeInt16
  summary: Write x as 16-bit signed integer
  belongs_to: io.Output
  description: |-
    ### [`writeInt16`](#writeInt16)`(``x:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Write `x` as 16-bit signed integer.

    Endianness is specified by the `bigEndian` property.
- name: io.Output.writeInt24()
  id: haxe/io/output#writeInt24
  summary: Write x as 24-bit signed integer
  belongs_to: io.Output
  description: |-
    ### [`writeInt24`](#writeInt24)`(``x:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Write `x` as 24-bit signed integer.

    Endianness is specified by the `bigEndian` property.
- name: io.Output.writeInt32()
  id: haxe/io/output#writeInt32
  summary: Write x as 32-bit signed integer
  belongs_to: io.Output
  description: |-
    ### [`writeInt32`](#writeInt32)`(``x:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Write `x` as 32-bit signed integer.

    Endianness is specified by the `bigEndian` property.
- name: io.Output.writeInt8()
  id: haxe/io/output#writeInt8
  summary: Write x as 8-bit signed integer
  belongs_to: io.Output
  description: |-
    ### [`writeInt8`](#writeInt8)`(``x:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Write `x` as 8-bit signed integer.
- name: io.Output.writeString()
  id: haxe/io/output#writeString
  summary: Write s string
  belongs_to: io.Output
  description: |-
    ### [`writeString`](#writeString)`(``s:`[`String`](../../string "String - The basic String class.")`,``?encoding:`[`Encoding`](encoding "haxe.io.Encoding")`):`[`Void`](../../void "Void - The standard Void type.")

    Write `s` string.
- name: io.Output.writeUInt16()
  id: haxe/io/output#writeUInt16
  summary: Write x as 16-bit unsigned integer
  belongs_to: io.Output
  description: |-
    ### [`writeUInt16`](#writeUInt16)`(``x:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Write `x` as 16-bit unsigned integer.

    Endianness is specified by the `bigEndian` property.
- name: io.Output.writeUInt24()
  id: haxe/io/output#writeUInt24
  summary: Write x as 24-bit unsigned integer
  belongs_to: io.Output
  description: "### [`writeUInt24`](#writeUInt24)`(``x:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nWrite `x` as 24-bit unsigned integer.\n\nEndianness is specified by the `bigEndian` property.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Output.html](https://api.haxe.org/haxe/io/Output.html)"
- name: io.Path
  id: haxe/io/path
  summary: This class provides a convenient way of working with paths
  description: "# Path\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\nThis class provides a convenient way of working with paths. It supports the common path formats:\n\n- `directory1/directory2/filename.extension`\n- `directory1\\directory2\\filename.extension`\n\n## Static methods\n\n### `static`[`addTrailingSlash`](#addTrailingSlash)`(``path:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nAdds a trailing slash to `path`, if it does not have one already.\n\nIf the last slash in `path` is a backslash, a backslash is appended to `path`.\n\nIf the last slash in `path` is a slash, or if no slash is found, a slash is appended to `path`. In particular, this applies to the empty String `\"\"`.\n\nIf `path` is `null`, the result is unspecified.\n\n### `static`[`directory`](#directory)`(``path:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nReturns the directory of `path`.\n\nIf the directory is `null`, the empty String `\"\"` is returned.\n\nIf `path` is `null`, the result is unspecified.\n\n### `static`[`extension`](#extension)`(``path:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nReturns the extension of `path`.\n\nIf `path` has no extension, the empty String `\"\"` is returned.\n\nIf `path` is `null`, the result is unspecified.\n\n### `static`[`isAbsolute`](#isAbsolute)`(``path:`[`String`](../../string \"String - The basic String class.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns [`true`](../../bool) if the path is an absolute path, and [`false`](../../bool) otherwise.\n\n### `static`[`join`](#join)`(``paths:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>``):`[`String`](../../string \"String - The basic String class.\")\n\nJoins all paths in `paths` together.\n\nIf `paths` is empty, the empty String `\"\"` is returned. Otherwise the paths are joined with a slash between them.\n\nIf `paths` is `null`, the result is unspecified.\n\n### `static`[`normalize`](#normalize)`(``path:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nNormalize a given `path` (e.g. turn `'/usr/local/../lib'` into `'/usr/lib'`).\n\nAlso replaces backslashes `\\` with slashes `/` and afterwards turns multiple slashes into a single one.\n\nIf `path` is `null`, the result is unspecified.\n\n### `static`[`removeTrailingSlashes`](#removeTrailingSlashes)`(``path:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nRemoves trailing slashes from `path`.\n\nIf `path` does not end with a `/` or `\\`, `path` is returned unchanged.\n\nOtherwise the substring of `path` excluding the trailing slashes or backslashes is returned.\n\nIf `path` is `null`, the result is unspecified.\n\n### `static`[`withExtension`](#withExtension)`(``path:`[`String`](../../string \"String - The basic String class.\")`,`` ``ext:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>``):`[`String`](../../string \"String - The basic String class.\")\n\nReturns a String representation of `path` where the extension is `ext`.\n\nIf `path` has no extension, `ext` is added as extension.\n\nIf `path` or `ext` are `null`, the result is unspecified.\n\n### `static`[`withoutDirectory`](#withoutDirectory)`(``path:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nReturns the String representation of `path` without the directory.\n\nIf `path` is `null`, the result is unspecified.\n\n### `static`[`withoutExtension`](#withoutExtension)`(``path:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nReturns the String representation of `path` without the file extension.\n\nIf `path` is `null`, the result is unspecified.\n\n## Constructor\n\n### [`new`](#new)`(``path:`[`String`](../../string \"String - The basic String class.\")`)`\n\nCreates a new [`Path`](path#Path) instance by parsing `path`.\n\nPath information can be retrieved by accessing the `dir`, `file` and `ext` properties.\n\n## Variables\n\n### [`backslash`](#backslash)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n[`true`](../../bool) if the last directory separator is a backslash, [`false`](../../bool) otherwise.\n\n### [`dir`](#dir)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe directory.\n\nThis is the leading part of the path that is not part of the file name and the extension.\n\nDoes not end with a `/` or `\\` separator.\n\nIf the path has no directory, the value is `null`.\n\n### [`ext`](#ext)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe file extension.\n\nIt is separated from the file name by a dot. This dot is not part of the extension.\n\nIf the path has no extension, the value is `null`.\n\n### [`file`](#file)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe file name.\n\nThis is the part of the part between the directory and the extension.\n\nIf there is no file name, e.g. for `\".htaccess\"` or `\"/dir/\"`, the value is the empty String `\"\"`.\n\n## Methods\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\nReturns a String representation of `this` path.\n\nIf `this.`[`backslash`](#backslash) is [`true`](../../bool), backslash is used as directory separator, otherwise slash is used. This only affects the separator between `this.`[`dir`](#dir) and `this.`[`file`](#file).\n\nIf `this.`[`directory`](#directory) or `this.`[`extension`](#extension) is `null`, their representation is the empty String `\"\"`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Path.html](https://api.haxe.org/haxe/io/Path.html)"
- name: io.Path.addTrailingSlash()
  id: haxe/io/path#addTrailingSlash
  summary: Adds a trailing slash to path, if it does not have one already
  belongs_to: io.Path
  description: |-
    ### `static`[`addTrailingSlash`](#addTrailingSlash)`(``path:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    Adds a trailing slash to `path`, if it does not have one already.

    If the last slash in `path` is a backslash, a backslash is appended to `path`.

    If the last slash in `path` is a slash, or if no slash is found, a slash is appended to `path`. In particular, this applies to the empty String `""`.

    If `path` is `null`, the result is unspecified.
- name: io.Path.backslash
  id: haxe/io/path#backslash
  summary: true if the last directory separator is a backslash, false otherwise
  belongs_to: io.Path
  description: |-
    ### [`backslash`](#backslash)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    [`true`](../../bool) if the last directory separator is a backslash, [`false`](../../bool) otherwise.
- name: io.Path.dir
  id: haxe/io/path#dir
  summary: The directory
  belongs_to: io.Path
  description: |-
    ### [`dir`](#dir)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The directory.

    This is the leading part of the path that is not part of the file name and the extension.

    Does not end with a `/` or `\` separator.

    If the path has no directory, the value is `null`.
- name: io.Path.directory()
  id: haxe/io/path#directory
  summary: Returns the directory of path
  belongs_to: io.Path
  description: |-
    ### `static`[`directory`](#directory)`(``path:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    Returns the directory of `path`.

    If the directory is `null`, the empty String `""` is returned.

    If `path` is `null`, the result is unspecified.
- name: io.Path.ext
  id: haxe/io/path#ext
  summary: The file extension
  belongs_to: io.Path
  description: |-
    ### [`ext`](#ext)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The file extension.

    It is separated from the file name by a dot. This dot is not part of the extension.

    If the path has no extension, the value is `null`.
- name: io.Path.extension()
  id: haxe/io/path#extension
  summary: Returns the extension of path
  belongs_to: io.Path
  description: |-
    ### `static`[`extension`](#extension)`(``path:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    Returns the extension of `path`.

    If `path` has no extension, the empty String `""` is returned.

    If `path` is `null`, the result is unspecified.
- name: io.Path.file
  id: haxe/io/path#file
  summary: The file name
  belongs_to: io.Path
  description: |-
    ### [`file`](#file)`:`[`String`](../../string "String - The basic String class.")

    The file name.

    This is the part of the part between the directory and the extension.

    If there is no file name, e.g. for `".htaccess"` or `"/dir/"`, the value is the empty String `""`.

    ## Methods
- name: io.Path.isAbsolute()
  id: haxe/io/path#isAbsolute
  summary: Returns true if the path is an absolute path, and false otherwise
  belongs_to: io.Path
  description: |-
    ### `static`[`isAbsolute`](#isAbsolute)`(``path:`[`String`](../../string "String - The basic String class.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Returns [`true`](../../bool) if the path is an absolute path, and [`false`](../../bool) otherwise.
- name: io.Path.join()
  id: haxe/io/path#join
  summary: Joins all paths in paths together
  belongs_to: io.Path
  description: |-
    ### `static`[`join`](#join)`(``paths:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>``):`[`String`](../../string "String - The basic String class.")

    Joins all paths in `paths` together.

    If `paths` is empty, the empty String `""` is returned. Otherwise the paths are joined with a slash between them.

    If `paths` is `null`, the result is unspecified.
- name: io.Path.normalize()
  id: haxe/io/path#normalize
  summary: Normalize a given path (e.g
  belongs_to: io.Path
  description: |-
    ### `static`[`normalize`](#normalize)`(``path:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    Normalize a given `path` (e.g. turn `'/usr/local/../lib'` into `'/usr/lib'`).

    Also replaces backslashes `\` with slashes `/` and afterwards turns multiple slashes into a single one.

    If `path` is `null`, the result is unspecified.
- name: io.Path.removeTrailingSlashes()
  id: haxe/io/path#removeTrailingSlashes
  summary: Removes trailing slashes from path
  belongs_to: io.Path
  description: |-
    ### `static`[`removeTrailingSlashes`](#removeTrailingSlashes)`(``path:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    Removes trailing slashes from `path`.

    If `path` does not end with a `/` or `\`, `path` is returned unchanged.

    Otherwise the substring of `path` excluding the trailing slashes or backslashes is returned.

    If `path` is `null`, the result is unspecified.
- name: io.Path.toString()
  id: haxe/io/path#toString
  summary: Returns a String representation of this path
  belongs_to: io.Path
  description: "### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\nReturns a String representation of `this` path.\n\nIf `this.`[`backslash`](#backslash) is [`true`](../../bool), backslash is used as directory separator, otherwise slash is used. This only affects the separator between `this.`[`dir`](#dir) and `this.`[`file`](#file).\n\nIf `this.`[`directory`](#directory) or `this.`[`extension`](#extension) is `null`, their representation is the empty String `\"\"`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Path.html](https://api.haxe.org/haxe/io/Path.html)"
- name: io.Path.withExtension()
  id: haxe/io/path#withExtension
  summary: Returns a String representation of path where the extension is ext
  belongs_to: io.Path
  description: |-
    ### `static`[`withExtension`](#withExtension)`(``path:`[`String`](../../string "String - The basic String class.")`,``ext:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>``):`[`String`](../../string "String - The basic String class.")

    Returns a String representation of `path` where the extension is `ext`.

    If `path` has no extension, `ext` is added as extension.

    If `path` or `ext` are `null`, the result is unspecified.
- name: io.Path.withoutDirectory()
  id: haxe/io/path#withoutDirectory
  summary: Returns the String representation of path without the directory
  belongs_to: io.Path
  description: |-
    ### `static`[`withoutDirectory`](#withoutDirectory)`(``path:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    Returns the String representation of `path` without the directory.

    If `path` is `null`, the result is unspecified.
- name: io.Path.withoutExtension()
  id: haxe/io/path#withoutExtension
  summary: Returns the String representation of path without the file extension
  belongs_to: io.Path
  description: |-
    ### `static`[`withoutExtension`](#withoutExtension)`(``path:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    Returns the String representation of `path` without the file extension.

    If `path` is `null`, the result is unspecified.

    ## Constructor

    ### [`new`](#new)`(``path:`[`String`](../../string "String - The basic String class.")`)`

    Creates a new [`Path`](path#Path) instance by parsing `path`.

    Path information can be retrieved by accessing the `dir`, `file` and `ext` properties.

    ## Variables
- name: io.Scheme
  id: haxe/io/scheme
  summary: A scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+, period (.), or hyphen (-)
  description: "# Scheme([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.io](index)\n\nfrom [String](../../string \"String - The basic String class.\") to [String](../../string \"String - The basic String class.\")\n\n*Available on all platforms*\n\nA scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (`+`, period (`.`), or hyphen (`-`).\n\nAlthough schemes are case-insensitive, the canonical form is lowercase and documents that specify schemes must do so with lowercase letters. It is followed by a colon (`:`).\n\n## Variables\n\n### `inline``read only`[`Data`](#Data)`:`[`Scheme`](scheme \"haxe.io.Scheme - A scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+, period (.\")` = \"data\"`\n\n### `inline``read only`[`File`](#File)`:`[`Scheme`](scheme \"haxe.io.Scheme - A scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+, period (.\")` = \"file\"`\n\n### `inline``read only`[`Ftp`](#Ftp)`:`[`Scheme`](scheme \"haxe.io.Scheme - A scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+, period (.\")` = \"ftp\"`\n\n### `inline``read only`[`Http`](#Http)`:`[`Scheme`](scheme \"haxe.io.Scheme - A scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+, period (.\")` = \"http\"`\n\n### `inline``read only`[`Https`](#Https)`:`[`Scheme`](scheme \"haxe.io.Scheme - A scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+, period (.\")` = \"https\"`\n\n### `inline``read only`[`MailTo`](#MailTo)`:`[`Scheme`](scheme \"haxe.io.Scheme - A scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+, period (.\")` = \"mailto\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Scheme.html](https://api.haxe.org/haxe/io/Scheme.html)"
- name: io.Scheme.Data
  id: haxe/io/scheme#Data
  summary: null
  belongs_to: io.Scheme
  description: '### `inline``read only`[`Data`](#Data)`:`[`Scheme`](scheme "haxe.io.Scheme - A scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+, period (.")` = "data"`'
- name: io.Scheme.File
  id: haxe/io/scheme#File
  summary: null
  belongs_to: io.Scheme
  description: '### `inline``read only`[`File`](#File)`:`[`Scheme`](scheme "haxe.io.Scheme - A scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+, period (.")` = "file"`'
- name: io.Scheme.Ftp
  id: haxe/io/scheme#Ftp
  summary: null
  belongs_to: io.Scheme
  description: '### `inline``read only`[`Ftp`](#Ftp)`:`[`Scheme`](scheme "haxe.io.Scheme - A scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+, period (.")` = "ftp"`'
- name: io.Scheme.Http
  id: haxe/io/scheme#Http
  summary: null
  belongs_to: io.Scheme
  description: '### `inline``read only`[`Http`](#Http)`:`[`Scheme`](scheme "haxe.io.Scheme - A scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+, period (.")` = "http"`'
- name: io.Scheme.Https
  id: haxe/io/scheme#Https
  summary: null
  belongs_to: io.Scheme
  description: '### `inline``read only`[`Https`](#Https)`:`[`Scheme`](scheme "haxe.io.Scheme - A scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+, period (.")` = "https"`'
- name: io.Scheme.MailTo
  id: haxe/io/scheme#MailTo
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: io.Scheme
  description: "### `inline``read only`[`MailTo`](#MailTo)`:`[`Scheme`](scheme \"haxe.io.Scheme - A scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+, period (.\")` = \"mailto\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/Scheme.html](https://api.haxe.org/haxe/io/Scheme.html)"
- name: io.StringInput
  id: haxe/io/stringinput
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# StringInput\n\npackage [haxe.io](index)\n\nextends [BytesInput](bytesinput \"haxe.io.BytesInput\") › [Input](input \"haxe.io.Input - An Input is an abstract reader.\")\n\n*Available on all platforms*\n\n## Constructor\n\n### [`new`](#new)`(``s:`[`String`](../../string \"String - The basic String class.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/StringInput.html](https://api.haxe.org/haxe/io/StringInput.html)"
- name: io.UInt16Array
  id: haxe/io/uint16array
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# UInt16Array([UInt16ArrayData](uint16arraydata \"haxe.io.UInt16ArrayData\"))\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\n## Static variables\n\n### `static``inline``read only`[`BYTES_PER_ELEMENT`](#BYTES_PER_ELEMENT)`:`[`Int`](../../int \"Int - The standard Int type.\")` = 2`\n\n## Static methods\n\n### `static`[`fromArray`](#fromArray)`(``a:`[`Array`](../../array \"Array\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt16Array`](uint16array \"haxe.io.UInt16Array\")\n\n### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``bytePos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt16Array`](uint16array \"haxe.io.UInt16Array\")\n\n### `static`[`fromData`](#fromData)`(``d:`[`UInt16ArrayData`](uint16arraydata \"haxe.io.UInt16ArrayData\")`):`[`UInt16Array`](uint16array \"haxe.io.UInt16Array\")\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `read only`[`view`](#view)`:`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n## Methods\n\n### `inline`[`get`](#get)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `inline`[`getData`](#getData)`():`[`UInt16ArrayData`](uint16arraydata \"haxe.io.UInt16ArrayData\")\n\n### `inline`[`get_view`](#get_view)`():`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n### `inline`[`set`](#set)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``value:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt16Array`](uint16array \"haxe.io.UInt16Array\")\n\n### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt16Array`](uint16array \"haxe.io.UInt16Array\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/UInt16Array.html](https://api.haxe.org/haxe/io/UInt16Array.html)"
- name: io.UInt16Array.BYTES_PER_ELEMENT
  id: haxe/io/uint16array#BYTES_PER_ELEMENT
  summary: null
  belongs_to: io.UInt16Array
  description: |-
    ### `static``inline``read only`[`BYTES_PER_ELEMENT`](#BYTES_PER_ELEMENT)`:`[`Int`](../../int "Int - The standard Int type.")` = 2`

    ## Static methods
- name: io.UInt16Array.fromArray()
  id: haxe/io/uint16array#fromArray
  summary: null
  belongs_to: io.UInt16Array
  description: '### `static`[`fromArray`](#fromArray)`(``a:`[`Array`](../../array "Array")`<`[`Int`](../../int "Int - The standard Int type.")`>,``pos:`[`Int`](../../int "Int - The standard Int type.")` = 0,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`UInt16Array`](uint16array "haxe.io.UInt16Array")'
- name: io.UInt16Array.fromBytes()
  id: haxe/io/uint16array#fromBytes
  summary: null
  belongs_to: io.UInt16Array
  description: '### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes "haxe.io.Bytes")`,``bytePos:`[`Int`](../../int "Int - The standard Int type.")` = 0,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`UInt16Array`](uint16array "haxe.io.UInt16Array")'
- name: io.UInt16Array.fromData()
  id: haxe/io/uint16array#fromData
  summary: null
  belongs_to: io.UInt16Array
  description: |-
    ### `static`[`fromData`](#fromData)`(``d:`[`UInt16ArrayData`](uint16arraydata "haxe.io.UInt16ArrayData")`):`[`UInt16Array`](uint16array "haxe.io.UInt16Array")

    ## Variables
- name: io.UInt16Array.get()
  id: haxe/io/uint16array#get
  summary: null
  belongs_to: io.UInt16Array
  description: '### `inline`[`get`](#get)`(``index:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int`](../../int "Int - The standard Int type.")'
- name: io.UInt16Array.get_view()
  id: haxe/io/uint16array#get_view
  summary: null
  belongs_to: io.UInt16Array
  description: '### `inline`[`get_view`](#get_view)`():`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")'
- name: io.UInt16Array.getData()
  id: haxe/io/uint16array#getData
  summary: null
  belongs_to: io.UInt16Array
  description: '### `inline`[`getData`](#getData)`():`[`UInt16ArrayData`](uint16arraydata "haxe.io.UInt16ArrayData")'
- name: io.UInt16Array.length
  id: haxe/io/uint16array#length
  summary: null
  belongs_to: io.UInt16Array
  description: '### `read only`[`length`](#length)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: io.UInt16Array.set()
  id: haxe/io/uint16array#set
  summary: null
  belongs_to: io.UInt16Array
  description: '### `inline`[`set`](#set)`(``index:`[`Int`](../../int "Int - The standard Int type.")`,``value:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int`](../../int "Int - The standard Int type.")'
- name: io.UInt16Array.sub()
  id: haxe/io/uint16array#sub
  summary: null
  belongs_to: io.UInt16Array
  description: '### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int "Int - The standard Int type.")`,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`UInt16Array`](uint16array "haxe.io.UInt16Array")'
- name: io.UInt16Array.subarray()
  id: haxe/io/uint16array#subarray
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: io.UInt16Array
  description: "### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt16Array`](uint16array \"haxe.io.UInt16Array\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/UInt16Array.html](https://api.haxe.org/haxe/io/UInt16Array.html)"
- name: io.UInt16Array.view
  id: haxe/io/uint16array#view
  summary: null
  belongs_to: io.UInt16Array
  description: |-
    ### `read only`[`view`](#view)`:`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")

    ## Methods
- name: io.UInt16ArrayData
  id: haxe/io/uint16arraydata
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# UInt16ArrayData\n\npackage [haxe.io](index)\n\nimport [haxe.io.UInt16Array](uint16array)\n\n*Available on all platforms*\n\n#### flash, lua, php, cs, java, cpp, neko, hl, python, macro\n\n*alias for* [`haxe.io.ArrayBufferViewData`](arraybufferviewdata \"haxe.io.ArrayBufferViewData\")\n\n#### js\n\n*alias for* [`js.lib.Uint16Array`](https://api.haxe.org/js/lib/Uint16Array.html \"js.lib.Uint16Array - The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/UInt16ArrayData.html](https://api.haxe.org/haxe/io/UInt16ArrayData.html)"
- name: io.UInt32Array
  id: haxe/io/uint32array
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# UInt32Array([UInt32ArrayData](uint32arraydata \"haxe.io.UInt32ArrayData\"))\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\n## Static variables\n\n### `static``inline``read only`[`BYTES_PER_ELEMENT`](#BYTES_PER_ELEMENT)`:`[`Int`](../../int \"Int - The standard Int type.\")` = 4`\n\n## Static methods\n\n### `static`[`fromArray`](#fromArray)`(``a:`[`Array`](../../array \"Array\")`<`[`UInt`](../../uint \"UInt - The unsigned Int type is only defined for Flash and C#.\")`>,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt32Array`](uint32array \"haxe.io.UInt32Array\")\n\n### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``bytePos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt32Array`](uint32array \"haxe.io.UInt32Array\")\n\n### `static`[`fromData`](#fromData)`(``d:`[`UInt32ArrayData`](uint32arraydata \"haxe.io.UInt32ArrayData\")`):`[`UInt32Array`](uint32array \"haxe.io.UInt32Array\")\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `read only`[`view`](#view)`:`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n## Methods\n\n### `inline`[`get`](#get)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt`](../../uint \"UInt - The unsigned Int type is only defined for Flash and C#.\")\n\n### `inline`[`getData`](#getData)`():`[`UInt32ArrayData`](uint32arraydata \"haxe.io.UInt32ArrayData\")\n\n### `inline`[`get_view`](#get_view)`():`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n### `inline`[`set`](#set)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``value:`[`UInt`](../../uint \"UInt - The unsigned Int type is only defined for Flash and C#.\")`):`[`UInt`](../../uint \"UInt - The unsigned Int type is only defined for Flash and C#.\")\n\n### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt32Array`](uint32array \"haxe.io.UInt32Array\")\n\n### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt32Array`](uint32array \"haxe.io.UInt32Array\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/UInt32Array.html](https://api.haxe.org/haxe/io/UInt32Array.html)"
- name: io.UInt32Array.BYTES_PER_ELEMENT
  id: haxe/io/uint32array#BYTES_PER_ELEMENT
  summary: null
  belongs_to: io.UInt32Array
  description: |-
    ### `static``inline``read only`[`BYTES_PER_ELEMENT`](#BYTES_PER_ELEMENT)`:`[`Int`](../../int "Int - The standard Int type.")` = 4`

    ## Static methods
- name: io.UInt32Array.fromArray()
  id: haxe/io/uint32array#fromArray
  summary: null
  belongs_to: io.UInt32Array
  description: '### `static`[`fromArray`](#fromArray)`(``a:`[`Array`](../../array "Array")`<`[`UInt`](../../uint "UInt - The unsigned Int type is only defined for Flash and C#.")`>,``pos:`[`Int`](../../int "Int - The standard Int type.")` = 0,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`UInt32Array`](uint32array "haxe.io.UInt32Array")'
- name: io.UInt32Array.fromBytes()
  id: haxe/io/uint32array#fromBytes
  summary: null
  belongs_to: io.UInt32Array
  description: '### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes "haxe.io.Bytes")`,``bytePos:`[`Int`](../../int "Int - The standard Int type.")` = 0,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`UInt32Array`](uint32array "haxe.io.UInt32Array")'
- name: io.UInt32Array.fromData()
  id: haxe/io/uint32array#fromData
  summary: null
  belongs_to: io.UInt32Array
  description: |-
    ### `static`[`fromData`](#fromData)`(``d:`[`UInt32ArrayData`](uint32arraydata "haxe.io.UInt32ArrayData")`):`[`UInt32Array`](uint32array "haxe.io.UInt32Array")

    ## Variables
- name: io.UInt32Array.get()
  id: haxe/io/uint32array#get
  summary: null
  belongs_to: io.UInt32Array
  description: '### `inline`[`get`](#get)`(``index:`[`Int`](../../int "Int - The standard Int type.")`):`[`UInt`](../../uint "UInt - The unsigned Int type is only defined for Flash and C#.")'
- name: io.UInt32Array.get_view()
  id: haxe/io/uint32array#get_view
  summary: null
  belongs_to: io.UInt32Array
  description: '### `inline`[`get_view`](#get_view)`():`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")'
- name: io.UInt32Array.getData()
  id: haxe/io/uint32array#getData
  summary: null
  belongs_to: io.UInt32Array
  description: '### `inline`[`getData`](#getData)`():`[`UInt32ArrayData`](uint32arraydata "haxe.io.UInt32ArrayData")'
- name: io.UInt32Array.length
  id: haxe/io/uint32array#length
  summary: null
  belongs_to: io.UInt32Array
  description: '### `read only`[`length`](#length)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: io.UInt32Array.set()
  id: haxe/io/uint32array#set
  summary: null
  belongs_to: io.UInt32Array
  description: '### `inline`[`set`](#set)`(``index:`[`Int`](../../int "Int - The standard Int type.")`,``value:`[`UInt`](../../uint "UInt - The unsigned Int type is only defined for Flash and C#.")`):`[`UInt`](../../uint "UInt - The unsigned Int type is only defined for Flash and C#.")'
- name: io.UInt32Array.sub()
  id: haxe/io/uint32array#sub
  summary: null
  belongs_to: io.UInt32Array
  description: '### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int "Int - The standard Int type.")`,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`UInt32Array`](uint32array "haxe.io.UInt32Array")'
- name: io.UInt32Array.subarray()
  id: haxe/io/uint32array#subarray
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: io.UInt32Array
  description: "### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt32Array`](uint32array \"haxe.io.UInt32Array\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/UInt32Array.html](https://api.haxe.org/haxe/io/UInt32Array.html)"
- name: io.UInt32Array.view
  id: haxe/io/uint32array#view
  summary: null
  belongs_to: io.UInt32Array
  description: |-
    ### `read only`[`view`](#view)`:`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")

    ## Methods
- name: io.UInt32ArrayData
  id: haxe/io/uint32arraydata
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# UInt32ArrayData\n\npackage [haxe.io](index)\n\nimport [haxe.io.UInt32Array](uint32array)\n\n*Available on all platforms*\n\n#### flash, lua, php, cs, java, cpp, neko, hl, python, macro\n\n*alias for* [`haxe.io.ArrayBufferViewData`](arraybufferviewdata \"haxe.io.ArrayBufferViewData\")\n\n#### js\n\n*alias for* [`js.lib.Uint32Array`](https://api.haxe.org/js/lib/Uint32Array.html \"js.lib.Uint32Array - The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/UInt32ArrayData.html](https://api.haxe.org/haxe/io/UInt32ArrayData.html)"
- name: io.UInt8Array
  id: haxe/io/uint8array
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# UInt8Array([UInt8ArrayData](uint8arraydata \"haxe.io.UInt8ArrayData\"))\n\npackage [haxe.io](index)\n\n*Available on all platforms*\n\n## Static variables\n\n### `static``inline``read only`[`BYTES_PER_ELEMENT`](#BYTES_PER_ELEMENT)`:`[`Int`](../../int \"Int - The standard Int type.\")` = 1`\n\n## Static methods\n\n### `static`[`fromArray`](#fromArray)`(``a:`[`Array`](../../array \"Array\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt8Array`](uint8array \"haxe.io.UInt8Array\")\n\n### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes \"haxe.io.Bytes\")`,`` ``bytePos:`[`Int`](../../int \"Int - The standard Int type.\")` = 0,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt8Array`](uint8array \"haxe.io.UInt8Array\")\n\n### `static`[`fromData`](#fromData)`(``d:`[`UInt8ArrayData`](uint8arraydata \"haxe.io.UInt8ArrayData\")`):`[`UInt8Array`](uint8array \"haxe.io.UInt8Array\")\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `read only`[`view`](#view)`:`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n## Methods\n\n### `inline`[`get`](#get)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `inline`[`getData`](#getData)`():`[`UInt8ArrayData`](uint8arraydata \"haxe.io.UInt8ArrayData\")\n\n### `inline`[`get_view`](#get_view)`():`[`ArrayBufferView`](arraybufferview \"haxe.io.ArrayBufferView\")\n\n### `inline`[`set`](#set)`(``index:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``value:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\n### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?length:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt8Array`](uint8array \"haxe.io.UInt8Array\")\n\n### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt8Array`](uint8array \"haxe.io.UInt8Array\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/UInt8Array.html](https://api.haxe.org/haxe/io/UInt8Array.html)"
- name: io.UInt8Array.BYTES_PER_ELEMENT
  id: haxe/io/uint8array#BYTES_PER_ELEMENT
  summary: null
  belongs_to: io.UInt8Array
  description: |-
    ### `static``inline``read only`[`BYTES_PER_ELEMENT`](#BYTES_PER_ELEMENT)`:`[`Int`](../../int "Int - The standard Int type.")` = 1`

    ## Static methods
- name: io.UInt8Array.fromArray()
  id: haxe/io/uint8array#fromArray
  summary: null
  belongs_to: io.UInt8Array
  description: '### `static`[`fromArray`](#fromArray)`(``a:`[`Array`](../../array "Array")`<`[`Int`](../../int "Int - The standard Int type.")`>,``pos:`[`Int`](../../int "Int - The standard Int type.")` = 0,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`UInt8Array`](uint8array "haxe.io.UInt8Array")'
- name: io.UInt8Array.fromBytes()
  id: haxe/io/uint8array#fromBytes
  summary: null
  belongs_to: io.UInt8Array
  description: '### `static`[`fromBytes`](#fromBytes)`(``bytes:`[`Bytes`](bytes "haxe.io.Bytes")`,``bytePos:`[`Int`](../../int "Int - The standard Int type.")` = 0,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`UInt8Array`](uint8array "haxe.io.UInt8Array")'
- name: io.UInt8Array.fromData()
  id: haxe/io/uint8array#fromData
  summary: null
  belongs_to: io.UInt8Array
  description: |-
    ### `static`[`fromData`](#fromData)`(``d:`[`UInt8ArrayData`](uint8arraydata "haxe.io.UInt8ArrayData")`):`[`UInt8Array`](uint8array "haxe.io.UInt8Array")

    ## Variables
- name: io.UInt8Array.get()
  id: haxe/io/uint8array#get
  summary: null
  belongs_to: io.UInt8Array
  description: '### `inline`[`get`](#get)`(``index:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int`](../../int "Int - The standard Int type.")'
- name: io.UInt8Array.get_view()
  id: haxe/io/uint8array#get_view
  summary: null
  belongs_to: io.UInt8Array
  description: '### `inline`[`get_view`](#get_view)`():`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")'
- name: io.UInt8Array.getData()
  id: haxe/io/uint8array#getData
  summary: null
  belongs_to: io.UInt8Array
  description: '### `inline`[`getData`](#getData)`():`[`UInt8ArrayData`](uint8arraydata "haxe.io.UInt8ArrayData")'
- name: io.UInt8Array.length
  id: haxe/io/uint8array#length
  summary: null
  belongs_to: io.UInt8Array
  description: '### `read only`[`length`](#length)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: io.UInt8Array.set()
  id: haxe/io/uint8array#set
  summary: null
  belongs_to: io.UInt8Array
  description: '### `inline`[`set`](#set)`(``index:`[`Int`](../../int "Int - The standard Int type.")`,``value:`[`Int`](../../int "Int - The standard Int type.")`):`[`Int`](../../int "Int - The standard Int type.")'
- name: io.UInt8Array.sub()
  id: haxe/io/uint8array#sub
  summary: null
  belongs_to: io.UInt8Array
  description: '### `inline`[`sub`](#sub)`(``begin:`[`Int`](../../int "Int - The standard Int type.")`,``?length:`[`Int`](../../int "Int - The standard Int type.")`):`[`UInt8Array`](uint8array "haxe.io.UInt8Array")'
- name: io.UInt8Array.subarray()
  id: haxe/io/uint8array#subarray
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: io.UInt8Array
  description: "### `inline`[`subarray`](#subarray)`(``?begin:`[`Int`](../../int \"Int - The standard Int type.\")`,``?end:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`UInt8Array`](uint8array \"haxe.io.UInt8Array\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/UInt8Array.html](https://api.haxe.org/haxe/io/UInt8Array.html)"
- name: io.UInt8Array.view
  id: haxe/io/uint8array#view
  summary: null
  belongs_to: io.UInt8Array
  description: |-
    ### `read only`[`view`](#view)`:`[`ArrayBufferView`](arraybufferview "haxe.io.ArrayBufferView")

    ## Methods
- name: io.UInt8ArrayData
  id: haxe/io/uint8arraydata
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# UInt8ArrayData\n\npackage [haxe.io](index)\n\nimport [haxe.io.UInt8Array](uint8array)\n\n*Available on all platforms*\n\n#### flash, lua, php, cs, java, cpp, neko, hl, python, macro\n\n*alias for* [`haxe.io.ArrayBufferViewData`](arraybufferviewdata \"haxe.io.ArrayBufferViewData\")\n\n#### js\n\n*alias for* [`js.lib.Uint8Array`](https://api.haxe.org/js/lib/Uint8Array.html \"js.lib.Uint8Array - The Uint8Array typed array represents an array of 8-bit unsigned integers.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/io/UInt8ArrayData.html](https://api.haxe.org/haxe/io/UInt8ArrayData.html)"
- name: Iterable
  id: iterable
  summary: An Iterable is a data structure which has an iterator() method
  description: "# Iterable\\<T\\>\n\n[no package](index)\n\n*Available on all platforms*\n\nAn [`Iterable`](iterable) is a data structure which has an `iterator()` method. See [`Lambda`](lambda) for generic functions on iterable structures.\n\nSee also:\n\n- <https://haxe.org/manual/lf-iterators.html>\n\n## Fields\n\n### [`iterator`](#iterator)`():`[`Iterator`](iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Iterable.html](https://api.haxe.org/Iterable.html)"
- name: Iterable.iterator()
  id: iterable#iterator
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: Iterable
  description: "### [`iterator`](#iterator)`():`[`Iterator`](iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Iterable.html](https://api.haxe.org/Iterable.html)"
- name: Iterator
  id: iterator
  summary: An Iterator is a structure that permits iteration over elements of type T
  description: "# Iterator\\<T\\>\n\n[no package](index)\n\n*Available on all platforms*\n\nAn [`Iterator`](iterator) is a structure that permits iteration over elements of type `T`.\n\nAny class with matching `hasNext()` and `next()` fields is considered an [`Iterator`](iterator) and can then be used e.g. in `for`-loops. This makes it easy to implement custom iterators.\n\nSee also:\n\n- <https://haxe.org/manual/lf-iterators.html>\n\n## Fields\n\n### [`next`](#next)`():``T`\n\nReturns the current item of the \\`Iterator\\` and advances to the next one. This method is not required to check \\`hasNext()\\` first. A call to this method while \\`hasNext()\\` is \\`false\\` yields unspecified behavior. On the other hand, iterators should not require a call to \\`hasNext()\\` before the first call to \\`next()\\` if an element is available.\n\n### [`hasNext`](#hasNext)`():`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns \\`false\\` if the iteration is complete, \\`true\\` otherwise. Usually iteration is considered to be complete if all elements of the underlying data structure were handled through calls to \\`next()\\`. However, in custom iterators any logic may be used to determine the completion state.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Iterator.html](https://api.haxe.org/Iterator.html)"
- name: Iterator.hasNext()
  id: iterator#hasNext
  summary: Returns `false` if the iteration is complete, `true` otherwise
  belongs_to: Iterator
  description: "### [`hasNext`](#hasNext)`():`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns \\`false\\` if the iteration is complete, \\`true\\` otherwise. Usually iteration is considered to be complete if all elements of the underlying data structure were handled through calls to \\`next()\\`. However, in custom iterators any logic may be used to determine the completion state.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Iterator.html](https://api.haxe.org/Iterator.html)"
- name: Iterator.next()
  id: iterator#next
  summary: Returns the current item of the `Iterator` and advances to the next one
  belongs_to: Iterator
  description: |-
    ### [`next`](#next)`():``T`

    Returns the current item of the \`Iterator\` and advances to the next one. This method is not required to check \`hasNext()\` first. A call to this method while \`hasNext()\` is \`false\` yields unspecified behavior. On the other hand, iterators should not require a call to \`hasNext()\` before the first call to \`next()\` if an element is available.
- name: iterators.ArrayIterator
  id: haxe/iterators/arrayiterator
  summary: Create a new ArrayIterator
  description: "# ArrayIterator\\<T\\>\n\npackage [haxe.iterators](index)\n\nextended by [ArrayDynIterator](https://api.haxe.org/hl/types/ArrayDynIterator.html \"hl.types.ArrayDynIterator\"), [ArrayObjIterator](https://api.haxe.org/hl/types/ArrayObjIterator.html \"hl.types.ArrayObjIterator\"), [BytesIterator](https://api.haxe.org/hl/types/BytesIterator.html \"hl.types.BytesIterator\")\n\n*Available on all platforms*\n\nThis iterator is used only when [`Array`](../../array)`<T>` is passed to [`Iterable`](../../iterable)`<T>`\n\n## Constructor\n\n### [`new`](#new)`(``array:`[`Array`](../../array \"Array\")`<``T``>``)`\n\nCreate a new [`ArrayIterator`](arrayiterator#ArrayIterator).\n\n## Methods\n\n### [`hasNext`](#hasNext)`():`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Iterator.hasNext`](../../iterator#hasNext)\n\n### [`next`](#next)`():``T`\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/ArrayIterator.html](https://api.haxe.org/haxe/iterators/ArrayIterator.html)"
- name: iterators.ArrayIterator.hasNext()
  id: haxe/iterators/arrayiterator#hasNext
  summary: null
  belongs_to: iterators.ArrayIterator
  description: |-
    ### [`hasNext`](#hasNext)`():`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Iterator.hasNext`](../../iterator#hasNext)
- name: iterators.ArrayIterator.next()
  id: haxe/iterators/arrayiterator#next
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: iterators.ArrayIterator
  description: "### [`next`](#next)`():``T`\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/ArrayIterator.html](https://api.haxe.org/haxe/iterators/ArrayIterator.html)"
- name: iterators.ArrayKeyValueIterator
  id: haxe/iterators/arraykeyvalueiterator
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ArrayKeyValueIterator\\<T\\>\n\npackage [haxe.iterators](index)\n\nextended by [ArrayDynKeyValueIterator](https://api.haxe.org/hl/types/ArrayDynKeyValueIterator.html \"hl.types.ArrayDynKeyValueIterator\"), [ArrayObjKeyValueIterator](https://api.haxe.org/hl/types/ArrayObjKeyValueIterator.html \"hl.types.ArrayObjKeyValueIterator\"), [BytesKeyValueIterator](https://api.haxe.org/hl/types/BytesKeyValueIterator.html \"hl.types.BytesKeyValueIterator\")\n\n*Available on all platforms*\n\n## Constructor\n\n### [`new`](#new)`(``array:`[`Array`](../../array \"Array\")`<``T``>``)`\n\n## Methods\n\n### [`hasNext`](#hasNext)`():`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`next`](#next)`():{value:``T``, key:`[`Int`](../../int \"Int - The standard Int type.\")`}`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/ArrayKeyValueIterator.html](https://api.haxe.org/haxe/iterators/ArrayKeyValueIterator.html)"
- name: iterators.ArrayKeyValueIterator.hasNext()
  id: haxe/iterators/arraykeyvalueiterator#hasNext
  summary: null
  belongs_to: iterators.ArrayKeyValueIterator
  description: '### [`hasNext`](#hasNext)`():`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: iterators.ArrayKeyValueIterator.next()
  id: haxe/iterators/arraykeyvalueiterator#next
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: iterators.ArrayKeyValueIterator
  description: "### [`next`](#next)`():{value:``T``, key:`[`Int`](../../int \"Int - The standard Int type.\")`}`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/ArrayKeyValueIterator.html](https://api.haxe.org/haxe/iterators/ArrayKeyValueIterator.html)"
- name: iterators.DynamicAccessIterator
  id: haxe/iterators/dynamicaccessiterator
  summary: This iterator can be used to iterate over the values of haxe.DynamicAccess
  description: "# DynamicAccessIterator\\<T\\>\n\npackage [haxe.iterators](index)\n\n*Available on all platforms*\n\nThis iterator can be used to iterate over the values of [`haxe.DynamicAccess`](../dynamicaccess#DynamicAccess).\n\n## Constructor\n\n### `inline`[`new`](#new)`(``access:`[`DynamicAccess`](../dynamicaccess \"haxe.DynamicAccess - DynamicAccess is an abstract type for working with anonymous structures that are intended to hold collections of objects by the string key.\")`<``T``>``)`\n\n## Methods\n\n### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Iterator.hasNext`](../../iterator#hasNext)\n\n### `inline`[`next`](#next)`():``T`\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/DynamicAccessIterator.html](https://api.haxe.org/haxe/iterators/DynamicAccessIterator.html)"
- name: iterators.DynamicAccessIterator.hasNext()
  id: haxe/iterators/dynamicaccessiterator#hasNext
  summary: null
  belongs_to: iterators.DynamicAccessIterator
  description: |-
    ### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Iterator.hasNext`](../../iterator#hasNext)
- name: iterators.DynamicAccessIterator.next()
  id: haxe/iterators/dynamicaccessiterator#next
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: iterators.DynamicAccessIterator
  description: "### `inline`[`next`](#next)`():``T`\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/DynamicAccessIterator.html](https://api.haxe.org/haxe/iterators/DynamicAccessIterator.html)"
- name: iterators.DynamicAccessKeyValueIterator
  id: haxe/iterators/dynamicaccesskeyvalueiterator
  summary: This Key/Value iterator can be used to iterate over haxe.DynamicAccess
  description: "# DynamicAccessKeyValueIterator\\<T\\>\n\npackage [haxe.iterators](index)\n\n*Available on all platforms*\n\nThis Key/Value iterator can be used to iterate over [`haxe.DynamicAccess`](../dynamicaccess#DynamicAccess).\n\n## Constructor\n\n### `inline`[`new`](#new)`(``access:`[`DynamicAccess`](../dynamicaccess \"haxe.DynamicAccess - DynamicAccess is an abstract type for working with anonymous structures that are intended to hold collections of objects by the string key.\")`<``T``>``)`\n\n## Methods\n\n### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Iterator.hasNext`](../../iterator#hasNext)\n\n### `inline`[`next`](#next)`():{value:``T``, key:`[`String`](../../string \"String - The basic String class.\")`}`\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/DynamicAccessKeyValueIterator.html](https://api.haxe.org/haxe/iterators/DynamicAccessKeyValueIterator.html)"
- name: iterators.DynamicAccessKeyValueIterator.hasNext()
  id: haxe/iterators/dynamicaccesskeyvalueiterator#hasNext
  summary: null
  belongs_to: iterators.DynamicAccessKeyValueIterator
  description: |-
    ### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Iterator.hasNext`](../../iterator#hasNext)
- name: iterators.DynamicAccessKeyValueIterator.next()
  id: haxe/iterators/dynamicaccesskeyvalueiterator#next
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: iterators.DynamicAccessKeyValueIterator
  description: "### `inline`[`next`](#next)`():{value:``T``, key:`[`String`](../../string \"String - The basic String class.\")`}`\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/DynamicAccessKeyValueIterator.html](https://api.haxe.org/haxe/iterators/DynamicAccessKeyValueIterator.html)"
- name: iterators.HashMapKeyValueIterator
  id: haxe/iterators/hashmapkeyvalueiterator
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HashMapKeyValueIterator\\<K, V\\>\n\npackage [haxe.iterators](index)\n\n*Available on all platforms*\n\n## Constructor\n\n### `inline`[`new`](#new)`(``map:`[`HashMap`](../ds/hashmap \"haxe.ds.HashMap - HashMap allows mapping of hashable objects to arbitrary values.\")`<``K``, ``V``>``)`\n\n## Methods\n\n### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Iterator.hasNext`](../../iterator#hasNext)\n\n### `inline`[`next`](#next)`():{value:``V``, key:``K``}`\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/HashMapKeyValueIterator.html](https://api.haxe.org/haxe/iterators/HashMapKeyValueIterator.html)"
- name: iterators.HashMapKeyValueIterator.hasNext()
  id: haxe/iterators/hashmapkeyvalueiterator#hasNext
  summary: null
  belongs_to: iterators.HashMapKeyValueIterator
  description: |-
    ### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Iterator.hasNext`](../../iterator#hasNext)
- name: iterators.HashMapKeyValueIterator.next()
  id: haxe/iterators/hashmapkeyvalueiterator#next
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: iterators.HashMapKeyValueIterator
  description: "### `inline`[`next`](#next)`():{value:``V``, key:``K``}`\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/HashMapKeyValueIterator.html](https://api.haxe.org/haxe/iterators/HashMapKeyValueIterator.html)"
- name: iterators.MapKeyValueIterator
  id: haxe/iterators/mapkeyvalueiterator
  summary: This Key/Value iterator can be used to iterate across maps
  description: "# MapKeyValueIterator\\<K, V\\>\n\npackage [haxe.iterators](index)\n\n*Available on all platforms*\n\nThis Key/Value iterator can be used to iterate across maps.\n\n## Constructor\n\n### `inline`[`new`](#new)`(``map:`[`IMap`](../imap \"haxe.IMap\")`<``K``, ``V``>``)`\n\n## Methods\n\n### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Iterator.hasNext`](../../iterator#hasNext)\n\n### `inline`[`next`](#next)`():{value:``V``, key:``K``}`\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/MapKeyValueIterator.html](https://api.haxe.org/haxe/iterators/MapKeyValueIterator.html)"
- name: iterators.MapKeyValueIterator.hasNext()
  id: haxe/iterators/mapkeyvalueiterator#hasNext
  summary: null
  belongs_to: iterators.MapKeyValueIterator
  description: |-
    ### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Iterator.hasNext`](../../iterator#hasNext)
- name: iterators.MapKeyValueIterator.next()
  id: haxe/iterators/mapkeyvalueiterator#next
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: iterators.MapKeyValueIterator
  description: "### `inline`[`next`](#next)`():{value:``V``, key:``K``}`\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/MapKeyValueIterator.html](https://api.haxe.org/haxe/iterators/MapKeyValueIterator.html)"
- name: iterators.StringIterator
  id: haxe/iterators/stringiterator
  summary: This iterator can be used to iterate over char codes in a string
  description: "# StringIterator\n\npackage [haxe.iterators](index)\n\n*Available on all platforms*\n\nThis iterator can be used to iterate over char codes in a string.\n\nNote that char codes may differ across platforms because of different internal encoding of strings in different of runtimes.\n\n## Constructor\n\n### `inline`[`new`](#new)`(``s:`[`String`](../../string \"String - The basic String class.\")`)`\n\nCreate a new [`StringIterator`](stringiterator#StringIterator) over String `s`.\n\n## Methods\n\n### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Iterator.hasNext`](../../iterator#hasNext)\n\n### `inline`[`next`](#next)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/StringIterator.html](https://api.haxe.org/haxe/iterators/StringIterator.html)"
- name: iterators.StringIterator.hasNext()
  id: haxe/iterators/stringiterator#hasNext
  summary: null
  belongs_to: iterators.StringIterator
  description: |-
    ### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Iterator.hasNext`](../../iterator#hasNext)
- name: iterators.StringIterator.next()
  id: haxe/iterators/stringiterator#next
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: iterators.StringIterator
  description: "### `inline`[`next`](#next)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/StringIterator.html](https://api.haxe.org/haxe/iterators/StringIterator.html)"
- name: iterators.StringIteratorUnicode
  id: haxe/iterators/stringiteratorunicode
  summary: This iterator can be used to iterate across strings in a cross-platform way
  description: "# StringIteratorUnicode\n\npackage [haxe.iterators](index)\n\n*Available on all platforms*\n\nThis iterator can be used to iterate across strings in a cross-platform way. It handles surrogate pairs on platforms that require it. On each iteration, it returns the next character code.\n\nNote that this has different semantics than a standard for-loop over the String's length due to the fact that it deals with surrogate pairs.\n\n## Static methods\n\n### `static``inline`[`unicodeIterator`](#unicodeIterator)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`StringIteratorUnicode`](stringiteratorunicode \"haxe.iterators.StringIteratorUnicode - This iterator can be used to iterate across strings in a cross-platform way.\")\n\nConvenience function which can be used as a static extension.\n\n## Constructor\n\n### `inline`[`new`](#new)`(``s:`[`String`](../../string \"String - The basic String class.\")`)`\n\nCreate a new [`StringIteratorUnicode`](stringiteratorunicode#StringIteratorUnicode) over String `s`.\n\n## Methods\n\n### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Iterator.hasNext`](../../iterator#hasNext)\n\n### `inline`[`next`](#next)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/StringIteratorUnicode.html](https://api.haxe.org/haxe/iterators/StringIteratorUnicode.html)"
- name: iterators.StringIteratorUnicode.hasNext()
  id: haxe/iterators/stringiteratorunicode#hasNext
  summary: null
  belongs_to: iterators.StringIteratorUnicode
  description: |-
    ### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Iterator.hasNext`](../../iterator#hasNext)
- name: iterators.StringIteratorUnicode.next()
  id: haxe/iterators/stringiteratorunicode#next
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: iterators.StringIteratorUnicode
  description: "### `inline`[`next`](#next)`():`[`Int`](../../int \"Int - The standard Int type.\")\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/StringIteratorUnicode.html](https://api.haxe.org/haxe/iterators/StringIteratorUnicode.html)"
- name: iterators.StringIteratorUnicode.unicodeIterator()
  id: haxe/iterators/stringiteratorunicode#unicodeIterator
  summary: Convenience function which can be used as a static extension
  belongs_to: iterators.StringIteratorUnicode
  description: |-
    ### `static``inline`[`unicodeIterator`](#unicodeIterator)`(``s:`[`String`](../../string "String - The basic String class.")`):`[`StringIteratorUnicode`](stringiteratorunicode "haxe.iterators.StringIteratorUnicode - This iterator can be used to iterate across strings in a cross-platform way.")

    Convenience function which can be used as a static extension.

    ## Constructor

    ### `inline`[`new`](#new)`(``s:`[`String`](../../string "String - The basic String class.")`)`

    Create a new [`StringIteratorUnicode`](stringiteratorunicode#StringIteratorUnicode) over String `s`.

    ## Methods
- name: iterators.StringKeyValueIterator
  id: haxe/iterators/stringkeyvalueiterator
  summary: This iterator can be used to iterate over char indexes and char codes in a string
  description: "# StringKeyValueIterator\n\npackage [haxe.iterators](index)\n\n*Available on all platforms*\n\nThis iterator can be used to iterate over char indexes and char codes in a string.\n\nNote that char codes may differ across platforms because of different internal encoding of strings in different runtimes.\n\n## Constructor\n\n### `inline`[`new`](#new)`(``s:`[`String`](../../string \"String - The basic String class.\")`)`\n\nCreate a new [`StringKeyValueIterator`](stringkeyvalueiterator#StringKeyValueIterator) over String `s`.\n\n## Methods\n\n### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`KeyValueIterator.hasNext`](../../keyvalueiterator#hasNext)\n\n### `inline`[`next`](#next)`():{value:`[`Int`](../../int \"Int - The standard Int type.\")`, key:`[`Int`](../../int \"Int - The standard Int type.\")`}`\n\n### See [`KeyValueIterator.next`](../../keyvalueiterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/StringKeyValueIterator.html](https://api.haxe.org/haxe/iterators/StringKeyValueIterator.html)"
- name: iterators.StringKeyValueIterator.hasNext()
  id: haxe/iterators/stringkeyvalueiterator#hasNext
  summary: null
  belongs_to: iterators.StringKeyValueIterator
  description: |-
    ### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`KeyValueIterator.hasNext`](../../keyvalueiterator#hasNext)
- name: iterators.StringKeyValueIterator.next()
  id: haxe/iterators/stringkeyvalueiterator#next
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: iterators.StringKeyValueIterator
  description: "### `inline`[`next`](#next)`():{value:`[`Int`](../../int \"Int - The standard Int type.\")`, key:`[`Int`](../../int \"Int - The standard Int type.\")`}`\n\n### See [`KeyValueIterator.next`](../../keyvalueiterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/StringKeyValueIterator.html](https://api.haxe.org/haxe/iterators/StringKeyValueIterator.html)"
- name: iterators.StringKeyValueIteratorUnicode
  id: haxe/iterators/stringkeyvalueiteratorunicode
  summary: This iterator can be used to iterate across strings in a cross-platform way
  description: "# StringKeyValueIteratorUnicode\n\npackage [haxe.iterators](index)\n\n*Available on all platforms*\n\nThis iterator can be used to iterate across strings in a cross-platform way. It handles surrogate pairs on platforms that require it. On each iteration, it returns the next character offset as key and the next character code as value.\n\nNote that in the general case, because of surrogate pairs, the key values should not be used as offsets for various String API operations. For the same reason, the last key value returned might be less than `s.length - 1`.\n\n## Static methods\n\n### `static``inline`[`unicodeKeyValueIterator`](#unicodeKeyValueIterator)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`StringKeyValueIteratorUnicode`](stringkeyvalueiteratorunicode \"haxe.iterators.StringKeyValueIteratorUnicode - This iterator can be used to iterate across strings in a cross-platform way.\")\n\nConvenience function which can be used as a static extension.\n\n## Constructor\n\n### `inline`[`new`](#new)`(``s:`[`String`](../../string \"String - The basic String class.\")`)`\n\nCreate a new [`StringKeyValueIteratorUnicode`](stringkeyvalueiteratorunicode#StringKeyValueIteratorUnicode) over String `s`.\n\n## Methods\n\n### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### See [`Iterator.hasNext`](../../iterator#hasNext)\n\n### `inline`[`next`](#next)`():{value:`[`Int`](../../int \"Int - The standard Int type.\")`, key:`[`Int`](../../int \"Int - The standard Int type.\")`}`\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/StringKeyValueIteratorUnicode.html](https://api.haxe.org/haxe/iterators/StringKeyValueIteratorUnicode.html)"
- name: iterators.StringKeyValueIteratorUnicode.hasNext()
  id: haxe/iterators/stringkeyvalueiteratorunicode#hasNext
  summary: null
  belongs_to: iterators.StringKeyValueIteratorUnicode
  description: |-
    ### `inline`[`hasNext`](#hasNext)`():`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    ### See [`Iterator.hasNext`](../../iterator#hasNext)
- name: iterators.StringKeyValueIteratorUnicode.next()
  id: haxe/iterators/stringkeyvalueiteratorunicode#next
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: iterators.StringKeyValueIteratorUnicode
  description: "### `inline`[`next`](#next)`():{value:`[`Int`](../../int \"Int - The standard Int type.\")`, key:`[`Int`](../../int \"Int - The standard Int type.\")`}`\n\n### See [`Iterator.next`](../../iterator#next)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/iterators/StringKeyValueIteratorUnicode.html](https://api.haxe.org/haxe/iterators/StringKeyValueIteratorUnicode.html)"
- name: iterators.StringKeyValueIteratorUnicode.unicodeKeyValueIterator()
  id: haxe/iterators/stringkeyvalueiteratorunicode#unicodeKeyValueIterator
  summary: Convenience function which can be used as a static extension
  belongs_to: iterators.StringKeyValueIteratorUnicode
  description: |-
    ### `static``inline`[`unicodeKeyValueIterator`](#unicodeKeyValueIterator)`(``s:`[`String`](../../string "String - The basic String class.")`):`[`StringKeyValueIteratorUnicode`](stringkeyvalueiteratorunicode "haxe.iterators.StringKeyValueIteratorUnicode - This iterator can be used to iterate across strings in a cross-platform way.")

    Convenience function which can be used as a static extension.

    ## Constructor

    ### `inline`[`new`](#new)`(``s:`[`String`](../../string "String - The basic String class.")`)`

    Create a new [`StringKeyValueIteratorUnicode`](stringkeyvalueiteratorunicode#StringKeyValueIteratorUnicode) over String `s`.

    ## Methods
- name: Json
  id: haxe/json
  summary: 'Cross-platform JSON API: it will automatically use the optimized native API if available'
  description: "# Json\n\npackage [haxe](index)\n\n*Available on all platforms*\n\nCross-platform JSON API: it will automatically use the optimized native API if available. Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found: This will provide extra encoding features such as enums (replaced by their index) and StringMaps.\n\nSee also:\n\n- <https://haxe.org/manual/std-Json.html>\n\n## Static methods\n\n### `static`[`parse`](#parse)`(``text:`[`String`](../string \"String - The basic String class.\")`):`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\nParses given JSON-encoded `text` and returns the resulting object.\n\nJSON objects are parsed into anonymous structures and JSON arrays are parsed into [`Array`](../array)`<`[`Dynamic`](../dynamic)`>`.\n\nIf given `text` is not valid JSON, an exception will be thrown.\n\nSee also:\n\n- <https://haxe.org/manual/std-Json-parsing.html>\n\n### `static`[`stringify`](#stringify)`(``value:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``?replacer:(key:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`, value:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`) ‑> `[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``?space:`[`String`](../string \"String - The basic String class.\")`):`[`String`](../string \"String - The basic String class.\")\n\nEncodes the given `value` and returns the resulting JSON string.\n\nIf `replacer` is given and is not null, it is used to retrieve the actual object to be encoded. The `replacer` function takes two parameters, the key and the value being encoded. Initial key value is an empty string.\n\nIf `space` is given and is not null, the result will be pretty-printed. Successive levels will be indented by this string.\n\nSee also:\n\n- <https://haxe.org/manual/std-Json-encoding.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Json.html](https://api.haxe.org/haxe/Json.html)"
- name: Json.parse()
  id: haxe/json#parse
  summary: Parses given JSON-encoded text and returns the resulting object
  belongs_to: Json
  description: |-
    ### `static`[`parse`](#parse)`(``text:`[`String`](../string "String - The basic String class.")`):`[`Dynamic`](../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")

    Parses given JSON-encoded `text` and returns the resulting object.

    JSON objects are parsed into anonymous structures and JSON arrays are parsed into [`Array`](../array)`<`[`Dynamic`](../dynamic)`>`.

    If given `text` is not valid JSON, an exception will be thrown.

    See also:

    - <https://haxe.org/manual/std-Json-parsing.html>
- name: Json.stringify()
  id: haxe/json#stringify
  summary: Encodes the given value and returns the resulting JSON string
  belongs_to: Json
  description: "### `static`[`stringify`](#stringify)`(``value:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,``?replacer:(key:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`, value:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`) ‑> `[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,``?space:`[`String`](../string \"String - The basic String class.\")`):`[`String`](../string \"String - The basic String class.\")\n\nEncodes the given `value` and returns the resulting JSON string.\n\nIf `replacer` is given and is not null, it is used to retrieve the actual object to be encoded. The `replacer` function takes two parameters, the key and the value being encoded. Initial key value is an empty string.\n\nIf `space` is given and is not null, the result will be pretty-printed. Successive levels will be indented by this string.\n\nSee also:\n\n- <https://haxe.org/manual/std-Json-encoding.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Json.html](https://api.haxe.org/haxe/Json.html)"
- name: KeyValueIterable
  id: keyvalueiterable
  summary: A KeyValueIterable is a data structure which has a keyValueIterator() method to iterate over key-value-pairs
  description: "# KeyValueIterable\\<K, V\\>\n\n[no package](index)\n\n*Available on all platforms*\n\nA [`KeyValueIterable`](keyvalueiterable) is a data structure which has a `keyValueIterator()` method to iterate over key-value-pairs.\n\n## Fields\n\n### [`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](keyvalueiterator \"KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.\")`<``K``, ``V``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/KeyValueIterable.html](https://api.haxe.org/KeyValueIterable.html)"
- name: KeyValueIterable.keyValueIterator()
  id: keyvalueiterable#keyValueIterator
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: KeyValueIterable
  description: "### [`keyValueIterator`](#keyValueIterator)`():`[`KeyValueIterator`](keyvalueiterator \"KeyValueIterator - A KeyValueIterator is an Iterator that has a key and a value.\")`<``K``, ``V``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/KeyValueIterable.html](https://api.haxe.org/KeyValueIterable.html)"
- name: KeyValueIterator
  id: keyvalueiterator
  summary: A KeyValueIterator is an Iterator that has a key and a value
  description: "# KeyValueIterator\\<K, V\\>\n\n[no package](index)\n\n*Available on all platforms*\n\nA [`KeyValueIterator`](keyvalueiterator) is an [`Iterator`](iterator) that has a key and a value.\n\n## Alias\n\n*alias for* [`Iterator`](iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<{value:``V``, key:``K``}>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/KeyValueIterator.html](https://api.haxe.org/KeyValueIterator.html)"
- name: Lambda
  id: lambda
  summary: The Lambda class is a collection of methods to support functional programming
  description: "# Lambda\n\n[no package](index)\n\n*Available on all platforms*\n\nThe [`Lambda`](lambda) class is a collection of methods to support functional programming. It is ideally used with `using `[`Lambda`](lambda) and then acts as an extension to Iterable types.\n\nOn static platforms, working with the Iterable structure might be slower than performing the operations directly on known types, such as Array and List.\n\nIf the first argument to any of the methods is null, the result is unspecified.\n\nSee also:\n\n- <https://haxe.org/manual/std-Lambda.html>\n\n## Static methods\n\n### `static`[`array`](#array)`<``A``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>``):`[`Array`](array \"Array\")`<``A``>`\n\nCreates an Array from Iterable `it`.\n\nIf `it` is an Array, this function returns a copy of it.\n\n### `static`[`concat`](#concat)`<``T``>(``a:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``T``>,`` ``b:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``T``>``):`[`Array`](array \"Array\")`<``T``>`\n\nReturns a new Array containing all elements of Iterable `a` followed by all elements of Iterable `b`.\n\nIf `a` or `b` are null, the result is unspecified.\n\n### `static`[`count`](#count)`<``A``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>,`` ``?pred:(item:``A``) ‑> `[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the number of elements in `it` for which `pred` is true, or the total number of elements in `it` if `pred` is null.\n\nThis function traverses all elements.\n\n### `static`[`empty`](#empty)`<``T``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``T``>``):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if Iterable `it` does not contain any element.\n\n### `static`[`exists`](#exists)`<``A``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>,`` ``f:(item:``A``) ‑> `[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `it` contains an element for which `f` is true.\n\nThis function returns true as soon as an element is found for which a call to `f` returns true.\n\nIf no such element is found, the result is false.\n\nIf `f` is null, the result is unspecified.\n\n### `static`[`filter`](#filter)`<``A``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>,`` ``f:(item:``A``) ‑> `[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Array`](array \"Array\")`<``A``>`\n\nReturns a Array containing those elements of `it` for which `f` returned true. If `it` is empty, the result is the empty Array even if `f` is null. Otherwise if `f` is null, the result is unspecified.\n\n### `static`[`find`](#find)`<``T``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``T``>,`` ``f:(item:``T``) ‑> `[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Null`](null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\nReturns the first element of `it` for which `f` is true.\n\nThis function returns as soon as an element is found for which a call to `f` returns true.\n\nIf no such element is found, the result is null.\n\nIf `f` is null, the result is unspecified.\n\n### `static`[`findIndex`](#findIndex)`<``T``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``T``>,`` ``f:(item:``T``) ‑> `[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the index of the first element of `it` for which `f` is true.\n\nThis function returns as soon as an element is found for which a call to `f` returns true.\n\nIf no such element is found, the result is -1.\n\nIf `f` is null, the result is unspecified.\n\n### `static``inline`[`flatMap`](#flatMap)`<``A``, ``B``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>,`` ``f:(item:``A``) ‑> `[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``B``>``):`[`Array`](array \"Array\")`<``B``>`\n\nA composition of map and flatten. The order of elements is preserved. If `f` is null, the result is unspecified.\n\n### `static``inline`[`flatten`](#flatten)`<``A``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>>``):`[`Array`](array \"Array\")`<``A``>`\n\nConcatenate a list of iterables. The order of elements is preserved.\n\n### `static`[`fold`](#fold)`<``A``, ``B``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>,`` ``f:(item:``A``, result:``B``) ‑> ``B``,`` ``first:``B``):``B`\n\nFunctional fold on Iterable `it`, using function `f` with start argument `first`.\n\nIf `it` has no elements, the result is `first`.\n\nOtherwise the first element of `it` is passed to `f` alongside `first`. The result of that call is then passed to `f` with the next element of `it`, and so on until `it` has no more elements.\n\nIf `it` or `f` are null, the result is unspecified.\n\n### `static`[`foldi`](#foldi)`<``A``, ``B``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>,`` ``f:(item:``A``, result:``B``, index:`[`Int`](int \"Int - The standard Int type.\")`) ‑> ``B``,`` ``first:``B``):``B`\n\nSimilar to fold, but also passes the index of each element to `f`.\n\nIf `it` or `f` are null, the result is unspecified.\n\n### `static`[`foreach`](#foreach)`<``A``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>,`` ``f:(item:``A``) ‑> `[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `f` is true for all elements of `it`.\n\nThis function returns false as soon as an element is found for which a call to `f` returns false.\n\nIf no such element is found, the result is true.\n\nIn particular, this function always returns true if `it` is empty.\n\nIf `f` is null, the result is unspecified.\n\n### `static`[`has`](#has)`<``A``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>,`` ``elt:``A``):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `it` contains `elt`.\n\nThis function returns true as soon as an element is found which is equal to `elt` according to the `==` operator.\n\nIf no such element is found, the result is false.\n\n### `static`[`indexOf`](#indexOf)`<``T``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``T``>,`` ``v:``T``):`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the index of the first element `v` within Iterable `it`.\n\nThis function uses operator `==` to check for equality.\n\nIf `v` does not exist in `it`, the result is -1.\n\n### `static`[`iter`](#iter)`<``A``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>,`` ``f:(item:``A``) ‑> `[`Void`](void \"Void - The standard Void type.\")`):`[`Void`](void \"Void - The standard Void type.\")\n\nCalls `f` on all elements of `it`, in order.\n\nIf `f` is null, the result is unspecified.\n\n### `static`[`list`](#list)`<``A``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>``):`[`List`](haxe/ds/list \"haxe.ds.List - A linked-list of elements.\")`<``A``>`\n\nCreates a List form Iterable `it`.\n\nIf `it` is a List, this function returns a copy of it.\n\n### `static``inline`[`map`](#map)`<``A``, ``B``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>,`` ``f:(item:``A``) ‑> ``B``):`[`Array`](array \"Array\")`<``B``>`\n\nCreates a new Array by applying function `f` to all elements of `it`. The order of elements is preserved. If `f` is null, the result is unspecified.\n\n### `static``inline`[`mapi`](#mapi)`<``A``, ``B``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>,`` ``f:(index:`[`Int`](int \"Int - The standard Int type.\")`, item:``A``) ‑> ``B``):`[`Array`](array \"Array\")`<``B``>`\n\nSimilar to map, but also passes the index of each element to `f`. The order of elements is preserved. If `f` is null, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Lambda.html](https://api.haxe.org/Lambda.html)"
- name: Lambda.array()
  id: lambda#array
  summary: Creates an Array from Iterable it
  belongs_to: Lambda
  description: |-
    ### `static`[`array`](#array)`<``A``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``A``>``):`[`Array`](array "Array")`<``A``>`

    Creates an Array from Iterable `it`.

    If `it` is an Array, this function returns a copy of it.
- name: Lambda.concat()
  id: lambda#concat
  summary: Returns a new Array containing all elements of Iterable a followed by all elements of Iterable b
  belongs_to: Lambda
  description: |-
    ### `static`[`concat`](#concat)`<``T``>(``a:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``T``>,``b:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``T``>``):`[`Array`](array "Array")`<``T``>`

    Returns a new Array containing all elements of Iterable `a` followed by all elements of Iterable `b`.

    If `a` or `b` are null, the result is unspecified.
- name: Lambda.count()
  id: lambda#count
  summary: Returns the number of elements in it for which pred is true, or the total number of elements in it if pred is null
  belongs_to: Lambda
  description: |-
    ### `static`[`count`](#count)`<``A``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``A``>,``?pred:(item:``A``) ‑> `[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Int`](int "Int - The standard Int type.")

    Returns the number of elements in `it` for which `pred` is true, or the total number of elements in `it` if `pred` is null.

    This function traverses all elements.
- name: Lambda.empty()
  id: lambda#empty
  summary: Tells if Iterable it does not contain any element
  belongs_to: Lambda
  description: |-
    ### `static`[`empty`](#empty)`<``T``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``T``>``):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if Iterable `it` does not contain any element.
- name: Lambda.exists()
  id: lambda#exists
  summary: Tells if it contains an element for which f is true
  belongs_to: Lambda
  description: |-
    ### `static`[`exists`](#exists)`<``A``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``A``>,``f:(item:``A``) ‑> `[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if `it` contains an element for which `f` is true.

    This function returns true as soon as an element is found for which a call to `f` returns true.

    If no such element is found, the result is false.

    If `f` is null, the result is unspecified.
- name: Lambda.filter()
  id: lambda#filter
  summary: Returns a Array containing those elements of it for which f returned true
  belongs_to: Lambda
  description: |-
    ### `static`[`filter`](#filter)`<``A``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``A``>,``f:(item:``A``) ‑> `[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Array`](array "Array")`<``A``>`

    Returns a Array containing those elements of `it` for which `f` returned true. If `it` is empty, the result is the empty Array even if `f` is null. Otherwise if `f` is null, the result is unspecified.
- name: Lambda.find()
  id: lambda#find
  summary: Returns the first element of it for which f is true
  belongs_to: Lambda
  description: |-
    ### `static`[`find`](#find)`<``T``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``T``>,``f:(item:``T``) ‑> `[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Null`](null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`

    Returns the first element of `it` for which `f` is true.

    This function returns as soon as an element is found for which a call to `f` returns true.

    If no such element is found, the result is null.

    If `f` is null, the result is unspecified.
- name: Lambda.findIndex()
  id: lambda#findIndex
  summary: Returns the index of the first element of it for which f is true
  belongs_to: Lambda
  description: |-
    ### `static`[`findIndex`](#findIndex)`<``T``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``T``>,``f:(item:``T``) ‑> `[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Int`](int "Int - The standard Int type.")

    Returns the index of the first element of `it` for which `f` is true.

    This function returns as soon as an element is found for which a call to `f` returns true.

    If no such element is found, the result is -1.

    If `f` is null, the result is unspecified.
- name: Lambda.flatMap()
  id: lambda#flatMap
  summary: A composition of map and flatten
  belongs_to: Lambda
  description: |-
    ### `static``inline`[`flatMap`](#flatMap)`<``A``, ``B``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``A``>,``f:(item:``A``) ‑> `[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``B``>``):`[`Array`](array "Array")`<``B``>`

    A composition of map and flatten. The order of elements is preserved. If `f` is null, the result is unspecified.
- name: Lambda.flatten()
  id: lambda#flatten
  summary: Concatenate a list of iterables
  belongs_to: Lambda
  description: |-
    ### `static``inline`[`flatten`](#flatten)`<``A``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``A``>>``):`[`Array`](array "Array")`<``A``>`

    Concatenate a list of iterables. The order of elements is preserved.
- name: Lambda.fold()
  id: lambda#fold
  summary: Functional fold on Iterable it, using function f with start argument first
  belongs_to: Lambda
  description: |-
    ### `static`[`fold`](#fold)`<``A``, ``B``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``A``>,``f:(item:``A``, result:``B``) ‑> ``B``,``first:``B``):``B`

    Functional fold on Iterable `it`, using function `f` with start argument `first`.

    If `it` has no elements, the result is `first`.

    Otherwise the first element of `it` is passed to `f` alongside `first`. The result of that call is then passed to `f` with the next element of `it`, and so on until `it` has no more elements.

    If `it` or `f` are null, the result is unspecified.
- name: Lambda.foldi()
  id: lambda#foldi
  summary: Similar to fold, but also passes the index of each element to f
  belongs_to: Lambda
  description: |-
    ### `static`[`foldi`](#foldi)`<``A``, ``B``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``A``>,``f:(item:``A``, result:``B``, index:`[`Int`](int "Int - The standard Int type.")`) ‑> ``B``,``first:``B``):``B`

    Similar to fold, but also passes the index of each element to `f`.

    If `it` or `f` are null, the result is unspecified.
- name: Lambda.foreach()
  id: lambda#foreach
  summary: Tells if f is true for all elements of it
  belongs_to: Lambda
  description: |-
    ### `static`[`foreach`](#foreach)`<``A``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``A``>,``f:(item:``A``) ‑> `[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if `f` is true for all elements of `it`.

    This function returns false as soon as an element is found for which a call to `f` returns false.

    If no such element is found, the result is true.

    In particular, this function always returns true if `it` is empty.

    If `f` is null, the result is unspecified.
- name: Lambda.has()
  id: lambda#has
  summary: Tells if it contains elt
  belongs_to: Lambda
  description: |-
    ### `static`[`has`](#has)`<``A``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``A``>,``elt:``A``):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if `it` contains `elt`.

    This function returns true as soon as an element is found which is equal to `elt` according to the `==` operator.

    If no such element is found, the result is false.
- name: Lambda.indexOf()
  id: lambda#indexOf
  summary: Returns the index of the first element v within Iterable it
  belongs_to: Lambda
  description: |-
    ### `static`[`indexOf`](#indexOf)`<``T``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``T``>,``v:``T``):`[`Int`](int "Int - The standard Int type.")

    Returns the index of the first element `v` within Iterable `it`.

    This function uses operator `==` to check for equality.

    If `v` does not exist in `it`, the result is -1.
- name: Lambda.iter()
  id: lambda#iter
  summary: Calls f on all elements of it, in order
  belongs_to: Lambda
  description: |-
    ### `static`[`iter`](#iter)`<``A``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``A``>,``f:(item:``A``) ‑> `[`Void`](void "Void - The standard Void type.")`):`[`Void`](void "Void - The standard Void type.")

    Calls `f` on all elements of `it`, in order.

    If `f` is null, the result is unspecified.
- name: Lambda.list()
  id: lambda#list
  summary: Creates a List form Iterable it
  belongs_to: Lambda
  description: |-
    ### `static`[`list`](#list)`<``A``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``A``>``):`[`List`](haxe/ds/list "haxe.ds.List - A linked-list of elements.")`<``A``>`

    Creates a List form Iterable `it`.

    If `it` is a List, this function returns a copy of it.
- name: Lambda.map()
  id: lambda#map
  summary: Creates a new Array by applying function f to all elements of it
  belongs_to: Lambda
  description: |-
    ### `static``inline`[`map`](#map)`<``A``, ``B``>(``it:`[`Iterable`](iterable "Iterable - An Iterable is a data structure which has an iterator() method.")`<``A``>,``f:(item:``A``) ‑> ``B``):`[`Array`](array "Array")`<``B``>`

    Creates a new Array by applying function `f` to all elements of `it`. The order of elements is preserved. If `f` is null, the result is unspecified.
- name: Lambda.mapi()
  id: lambda#mapi
  summary: Similar to map, but also passes the index of each element to f
  belongs_to: Lambda
  description: "### `static``inline`[`mapi`](#mapi)`<``A``, ``B``>(``it:`[`Iterable`](iterable \"Iterable - An Iterable is a data structure which has an iterator() method.\")`<``A``>,``f:(index:`[`Int`](int \"Int - The standard Int type.\")`, item:``A``) ‑> ``B``):`[`Array`](array \"Array\")`<``B``>`\n\nSimilar to map, but also passes the index of each element to `f`. The order of elements is preserved. If `f` is null, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Lambda.html](https://api.haxe.org/Lambda.html)"
- name: List
  id: list
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# List\\<T\\>\n\n[no package](index)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`haxe.ds.List`](haxe/ds/list \"haxe.ds.List - A linked-list of elements.\")`<``T``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/List.html](https://api.haxe.org/List.html)"
- name: Log
  id: haxe/log
  summary: Log primarily provides the trace() method, which is invoked upon a call to trace() in Haxe code
  description: "# Log\n\npackage [haxe](index)\n\n*Available on all platforms*\n\nLog primarily provides the `trace()` method, which is invoked upon a call to `trace()` in Haxe code.\n\n## Static methods\n\n### `static``dynamic`[`clear`](#clear)`():`[`Void`](../void \"Void - The standard Void type.\")\n\n*Available on flash*\n\nClears the trace output.\n\n### `static`[`formatOutput`](#formatOutput)`(``v:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``infos:`[`PosInfos`](posinfos \"haxe.PosInfos - PosInfos is a magic type which can be used to generate position information into the output for debugging use.\")`):`[`String`](../string \"String - The basic String class.\")\n\nFormat the output of `trace` before printing it.\n\n### `static``dynamic`[`setColor`](#setColor)`(``rgb:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Void`](../void \"Void - The standard Void type.\")\n\n*Available on flash*\n\nSets the color of the trace output to `rgb`.\n\n### `static``dynamic`[`trace`](#trace)`(``v:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``?infos:`[`Null`](../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`PosInfos`](posinfos \"haxe.PosInfos - PosInfos is a magic type which can be used to generate position information into the output for debugging use.\")`>``):`[`Void`](../void \"Void - The standard Void type.\")\n\nOutputs `v` in a platform-dependent way.\n\nThe second parameter `infos` is injected by the compiler and contains information about the position where the `trace()` call was made.\n\nThis method can be rebound to a custom function:\n\n    var oldTrace = haxe.Log.trace; // store old function\n    haxe.Log.trace = function(v, ?infos) {\n      // handle trace\n    }\n    ...\n    haxe.Log.trace = oldTrace;\n\nIf it is bound to null, subsequent calls to `trace()` will cause an exception.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Log.html](https://api.haxe.org/haxe/Log.html)"
- name: Log.clear()
  id: haxe/log#clear
  summary: Clears the trace output
  belongs_to: Log
  description: |-
    ### `static``dynamic`[`clear`](#clear)`():`[`Void`](../void "Void - The standard Void type.")

    *Available on flash*

    Clears the trace output.
- name: Log.formatOutput()
  id: haxe/log#formatOutput
  summary: Format the output of trace before printing it
  belongs_to: Log
  description: |-
    ### `static`[`formatOutput`](#formatOutput)`(``v:`[`Dynamic`](../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`,``infos:`[`PosInfos`](posinfos "haxe.PosInfos - PosInfos is a magic type which can be used to generate position information into the output for debugging use.")`):`[`String`](../string "String - The basic String class.")

    Format the output of `trace` before printing it.
- name: Log.setColor()
  id: haxe/log#setColor
  summary: Sets the color of the trace output to rgb
  belongs_to: Log
  description: |-
    ### `static``dynamic`[`setColor`](#setColor)`(``rgb:`[`Int`](../int "Int - The standard Int type.")`):`[`Void`](../void "Void - The standard Void type.")

    *Available on flash*

    Sets the color of the trace output to `rgb`.
- name: Log.trace()
  id: haxe/log#trace
  summary: Outputs v in a platform-dependent way
  belongs_to: Log
  description: "### `static``dynamic`[`trace`](#trace)`(``v:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,``?infos:`[`Null`](../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`PosInfos`](posinfos \"haxe.PosInfos - PosInfos is a magic type which can be used to generate position information into the output for debugging use.\")`>``):`[`Void`](../void \"Void - The standard Void type.\")\n\nOutputs `v` in a platform-dependent way.\n\nThe second parameter `infos` is injected by the compiler and contains information about the position where the `trace()` call was made.\n\nThis method can be rebound to a custom function:\n\n          var oldTrace = haxe.Log.trace; // store old function\n    haxe.Log.trace = function(v, ?infos) {\n      // handle trace\n    }\n    ...\n    haxe.Log.trace = oldTrace;\n\n        \n\nIf it is bound to null, subsequent calls to `trace()` will cause an exception.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Log.html](https://api.haxe.org/haxe/Log.html)"
- name: macro.AbstractType
  id: haxe/macro/abstracttype
  summary: Represents an abstract type
  description: "# AbstractType\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents an abstract type.\n\n## Fields\n\n### [`unops`](#unops)`:`[`Array`](../../array \"Array\")`<{postFix:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`, op:`[`Unop`](unop \"haxe.macro.Unop - A unary operator.\")`, field:`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`}>`\n\nThe defined unary operators of the abstract.\n\n### [`type`](#type)`:`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\nThe underlying type of the abstract.\n\n### [`to`](#to)`:`[`Array`](../../array \"Array\")`<{t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`, field:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>}>`\n\nThe available implicit to-casts of the abstract. @see https://haxe.org/manual/types-abstract-implicit-casts.html\n\n### [`resolveWrite`](#resolveWrite)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>`\n\nThe method used for resolving unknown field access, if available.\n\n### [`resolve`](#resolve)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>`\n\nThe method used for resolving unknown field access, if available.\n\n### [`pos`](#pos)`:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nThe position of the type.\n\n### [`params`](#params)`:`[`Array`](../../array \"Array\")`<`[`TypeParameter`](typeparameter \"haxe.macro.TypeParameter - Represents the declaration of type parameters.\")`>`\n\nThe type parameters of the type.\n\n### [`pack`](#pack)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe package of the type.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the type.\n\n### [`module`](#module)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe module name of the type, which might be different.\n\n### [`meta`](#meta)`:`[`MetaAccess`](metaaccess \"haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.\")\n\nThe metadata of the type.\n\n### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is private.\n\n### [`isExtern`](#isExtern)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is extern.\n\n### [`impl`](#impl)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>>`\n\nThe implementation class of the abstract, if available.\n\n### [`from`](#from)`:`[`Array`](../../array \"Array\")`<{t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`, field:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>}>`\n\nThe available implicit from-casts of the abstract. @see https://haxe.org/manual/types-abstract-implicit-casts.html\n\n### [`exclude`](#exclude)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\nAllows excluding the type from compilation.\n\n### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe associated documentation of the class field.\n\n### [`binops`](#binops)`:`[`Array`](../../array \"Array\")`<{op:`[`Binop`](binop \"haxe.macro.Binop - A binary operator.\")`, field:`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`}>`\n\nThe defined binary operators of the abstract.\n\n### [`array`](#array)`:`[`Array`](../../array \"Array\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>`\n\nThe defined array-access fields of the abstract.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/AbstractType.html](https://api.haxe.org/haxe/macro/AbstractType.html)"
- name: macro.AbstractType.array
  id: haxe/macro/abstracttype#array
  summary: The defined array-access fields of the abstract
  belongs_to: macro.AbstractType
  description: "### [`array`](#array)`:`[`Array`](../../array \"Array\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>`\n\nThe defined array-access fields of the abstract.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/AbstractType.html](https://api.haxe.org/haxe/macro/AbstractType.html)"
- name: macro.AbstractType.binops
  id: haxe/macro/abstracttype#binops
  summary: The defined binary operators of the abstract
  belongs_to: macro.AbstractType
  description: |-
    ### [`binops`](#binops)`:`[`Array`](../../array "Array")`<{op:`[`Binop`](binop "haxe.macro.Binop - A binary operator.")`, field:`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`}>`

    The defined binary operators of the abstract.
- name: macro.AbstractType.doc
  id: haxe/macro/abstracttype#doc
  summary: The associated documentation of the class field
  belongs_to: macro.AbstractType
  description: |-
    ### [`doc`](#doc)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The associated documentation of the class field.
- name: macro.AbstractType.exclude()
  id: haxe/macro/abstracttype#exclude
  summary: Allows excluding the type from compilation
  belongs_to: macro.AbstractType
  description: |-
    ### [`exclude`](#exclude)`():`[`Void`](../../void "Void - The standard Void type.")

    Allows excluding the type from compilation.
- name: macro.AbstractType.from
  id: haxe/macro/abstracttype#from
  summary: The available implicit from-casts of the abstract
  belongs_to: macro.AbstractType
  description: |-
    ### [`from`](#from)`:`[`Array`](../../array "Array")`<{t:`[`Type`](type "haxe.macro.Type - Represents a type.")`, field:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`>}>`

    The available implicit from-casts of the abstract. @see https://haxe.org/manual/types-abstract-implicit-casts.html
- name: macro.AbstractType.impl
  id: haxe/macro/abstracttype#impl
  summary: The implementation class of the abstract, if available
  belongs_to: macro.AbstractType
  description: |-
    ### [`impl`](#impl)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>>`

    The implementation class of the abstract, if available.
- name: macro.AbstractType.isExtern
  id: haxe/macro/abstracttype#isExtern
  summary: Whether or not the type is extern
  belongs_to: macro.AbstractType
  description: |-
    ### [`isExtern`](#isExtern)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is extern.
- name: macro.AbstractType.isPrivate
  id: haxe/macro/abstracttype#isPrivate
  summary: Whether or not the type is private
  belongs_to: macro.AbstractType
  description: |-
    ### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is private.
- name: macro.AbstractType.meta
  id: haxe/macro/abstracttype#meta
  summary: The metadata of the type
  belongs_to: macro.AbstractType
  description: |-
    ### [`meta`](#meta)`:`[`MetaAccess`](metaaccess "haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.")

    The metadata of the type.
- name: macro.AbstractType.module
  id: haxe/macro/abstracttype#module
  summary: The module name of the type, which might be different
  belongs_to: macro.AbstractType
  description: |-
    ### [`module`](#module)`:`[`String`](../../string "String - The basic String class.")

    The module name of the type, which might be different.
- name: macro.AbstractType.name
  id: haxe/macro/abstracttype#name
  summary: The name of the type
  belongs_to: macro.AbstractType
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the type.
- name: macro.AbstractType.pack
  id: haxe/macro/abstracttype#pack
  summary: The package of the type
  belongs_to: macro.AbstractType
  description: |-
    ### [`pack`](#pack)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`

    The package of the type.
- name: macro.AbstractType.params
  id: haxe/macro/abstracttype#params
  summary: The type parameters of the type
  belongs_to: macro.AbstractType
  description: |-
    ### [`params`](#params)`:`[`Array`](../../array "Array")`<`[`TypeParameter`](typeparameter "haxe.macro.TypeParameter - Represents the declaration of type parameters.")`>`

    The type parameters of the type.
- name: macro.AbstractType.pos
  id: haxe/macro/abstracttype#pos
  summary: The position of the type
  belongs_to: macro.AbstractType
  description: |-
    ### [`pos`](#pos)`:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    The position of the type.
- name: macro.AbstractType.resolve
  id: haxe/macro/abstracttype#resolve
  summary: The method used for resolving unknown field access, if available
  belongs_to: macro.AbstractType
  description: |-
    ### [`resolve`](#resolve)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`>`

    The method used for resolving unknown field access, if available.
- name: macro.AbstractType.resolveWrite
  id: haxe/macro/abstracttype#resolveWrite
  summary: The method used for resolving unknown field access, if available
  belongs_to: macro.AbstractType
  description: |-
    ### [`resolveWrite`](#resolveWrite)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`>`

    The method used for resolving unknown field access, if available.
- name: macro.AbstractType.to
  id: haxe/macro/abstracttype#to
  summary: The available implicit to-casts of the abstract
  belongs_to: macro.AbstractType
  description: |-
    ### [`to`](#to)`:`[`Array`](../../array "Array")`<{t:`[`Type`](type "haxe.macro.Type - Represents a type.")`, field:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`>}>`

    The available implicit to-casts of the abstract. @see https://haxe.org/manual/types-abstract-implicit-casts.html
- name: macro.AbstractType.type
  id: haxe/macro/abstracttype#type
  summary: The underlying type of the abstract
  belongs_to: macro.AbstractType
  description: |-
    ### [`type`](#type)`:`[`Type`](type "haxe.macro.Type - Represents a type.")

    The underlying type of the abstract.
- name: macro.AbstractType.unops
  id: haxe/macro/abstracttype#unops
  summary: The defined unary operators of the abstract
  belongs_to: macro.AbstractType
  description: |-
    ### [`unops`](#unops)`:`[`Array`](../../array "Array")`<{postFix:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`, op:`[`Unop`](unop "haxe.macro.Unop - A unary operator.")`, field:`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`}>`

    The defined unary operators of the abstract.
- name: macro.Access
  id: haxe/macro/access
  summary: Represents an access modifier
  description: "# Access\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents an access modifier.\n\nSee also:\n\n- <https://haxe.org/manual/class-field-access-modifier.html>\n\n## Values\n\n### `APublic`\n\nPublic access modifier, grants access from anywhere.\n\nSee also:\n\n- <https://haxe.org/manual/class-field-visibility.html>\n\n### `APrivate`\n\nPrivate access modifier, grants access to class and its sub-classes only.\n\nSee also:\n\n- <https://haxe.org/manual/class-field-visibility.html>\n\n### `AStatic`\n\nStatic access modifier.\n\n### `AOverride`\n\nOverride access modifier.\n\nSee also:\n\n- <https://haxe.org/manual/class-field-override.html>\n\n### `ADynamic`\n\nDynamic (re-)bindable access modifier.\n\nSee also:\n\n- <https://haxe.org/manual/class-field-dynamic.html>\n\n### `AInline`\n\nInline access modifier. Allows expressions to be directly inserted in place of calls to them.\n\nSee also:\n\n- <https://haxe.org/manual/class-field-inline.html>\n\n### `AMacro`\n\nMacro access modifier. Allows expression macro functions. These are normal functions which are executed as soon as they are typed.\n\n### `AFinal`\n\nFinal access modifier. For functions, they can not be overridden. For variables, it means they can be assigned to only once.\n\n### `AExtern`\n\nExtern access modifier.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Access.html](https://api.haxe.org/haxe/macro/Access.html)"
- name: macro.Access.ADynamic
  id: haxe/macro/access#ADynamic
  summary: Dynamic (re-)bindable access modifier
  belongs_to: macro.Access
  description: |-
    ### `ADynamic`

    Dynamic (re-)bindable access modifier.

    See also:

    - <https://haxe.org/manual/class-field-dynamic.html>

    &nbsp;
- name: macro.Access.AExtern
  id: haxe/macro/access#AExtern
  summary: Extern access modifier
  belongs_to: macro.Access
  description: "### `AExtern`\n\nExtern access modifier.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Access.html](https://api.haxe.org/haxe/macro/Access.html)"
- name: macro.Access.AFinal
  id: haxe/macro/access#AFinal
  summary: Final access modifier
  belongs_to: macro.Access
  description: |-
    ### `AFinal`

    Final access modifier. For functions, they can not be overridden. For variables, it means they can be assigned to only once.
- name: macro.Access.AInline
  id: haxe/macro/access#AInline
  summary: Inline access modifier
  belongs_to: macro.Access
  description: |-
    ### `AInline`

    Inline access modifier. Allows expressions to be directly inserted in place of calls to them.

    See also:

    - <https://haxe.org/manual/class-field-inline.html>

    &nbsp;
- name: macro.Access.AMacro
  id: haxe/macro/access#AMacro
  summary: Macro access modifier
  belongs_to: macro.Access
  description: |-
    ### `AMacro`

    Macro access modifier. Allows expression macro functions. These are normal functions which are executed as soon as they are typed.
- name: macro.Access.AOverride
  id: haxe/macro/access#AOverride
  summary: Override access modifier
  belongs_to: macro.Access
  description: |-
    ### `AOverride`

    Override access modifier.

    See also:

    - <https://haxe.org/manual/class-field-override.html>

    &nbsp;
- name: macro.Access.APrivate
  id: haxe/macro/access#APrivate
  summary: Private access modifier, grants access to class and its sub-classes only
  belongs_to: macro.Access
  description: |-
    ### `APrivate`

    Private access modifier, grants access to class and its sub-classes only.

    See also:

    - <https://haxe.org/manual/class-field-visibility.html>

    &nbsp;
- name: macro.Access.APublic
  id: haxe/macro/access#APublic
  summary: Public access modifier, grants access from anywhere
  belongs_to: macro.Access
  description: |-
    ### `APublic`

    Public access modifier, grants access from anywhere.

    See also:

    - <https://haxe.org/manual/class-field-visibility.html>
- name: macro.Access.AStatic
  id: haxe/macro/access#AStatic
  summary: Static access modifier
  belongs_to: macro.Access
  description: |-
    ### `AStatic`

    Static access modifier.
- name: macro.AnonStatus
  id: haxe/macro/anonstatus
  summary: Represents the kind of the anonymous structure type
  description: "# AnonStatus\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents the kind of the anonymous structure type.\n\n## Values\n\n### `AClosed`\n\nA closed structure is considered complete. That is, no further fields can be added to it.\n\n### `AOpened`\n\nAn open structure allows having additional fields added to it, which is used during type inference. It is closed upon unification.\n\n### `AConst`\n\nA const structure is one that appears directly in syntax. It cannot be assigned to a smaller structure type (that is, it does not allow structural sub-typing).\n\n### `AExtend(tl:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>>)`\n\nRepresents a structure which extends one or multiple structures defined in `tl`.\n\nSee also:\n\n- <https://haxe.org/manual/type-system-extensions.html>\n\n### `AClassStatics(t:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>)`\n\nA structure that represents the static fields of a class.\n\n### `AEnumStatics(t:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`EnumType`](enumtype \"haxe.macro.EnumType - Represents an enum type.\")`>)`\n\nA structure that represents the constructors of an enum.\n\n### `AAbstractStatics(t:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`AbstractType`](abstracttype \"haxe.macro.AbstractType - Represents an abstract type.\")`>)`\n\nA structure that represents the static fields of an abstract.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/AnonStatus.html](https://api.haxe.org/haxe/macro/AnonStatus.html)"
- name: macro.AnonStatus.AAbstractStatics()
  id: haxe/macro/anonstatus#AAbstractStatics
  summary: A structure that represents the static fields of an abstract
  belongs_to: macro.AnonStatus
  description: "### `AAbstractStatics(t:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`AbstractType`](abstracttype \"haxe.macro.AbstractType - Represents an abstract type.\")`>)`\n\nA structure that represents the static fields of an abstract.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/AnonStatus.html](https://api.haxe.org/haxe/macro/AnonStatus.html)"
- name: macro.AnonStatus.AClassStatics()
  id: haxe/macro/anonstatus#AClassStatics
  summary: A structure that represents the static fields of a class
  belongs_to: macro.AnonStatus
  description: |-
    ### `AClassStatics(t:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>)`

    A structure that represents the static fields of a class.
- name: macro.AnonStatus.AClosed
  id: haxe/macro/anonstatus#AClosed
  summary: A closed structure is considered complete
  belongs_to: macro.AnonStatus
  description: |-
    ### `AClosed`

    A closed structure is considered complete. That is, no further fields can be added to it.
- name: macro.AnonStatus.AConst
  id: haxe/macro/anonstatus#AConst
  summary: A const structure is one that appears directly in syntax
  belongs_to: macro.AnonStatus
  description: |-
    ### `AConst`

    A const structure is one that appears directly in syntax. It cannot be assigned to a smaller structure type (that is, it does not allow structural sub-typing).
- name: macro.AnonStatus.AEnumStatics()
  id: haxe/macro/anonstatus#AEnumStatics
  summary: A structure that represents the constructors of an enum
  belongs_to: macro.AnonStatus
  description: |-
    ### `AEnumStatics(t:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`EnumType`](enumtype "haxe.macro.EnumType - Represents an enum type.")`>)`

    A structure that represents the constructors of an enum.
- name: macro.AnonStatus.AExtend()
  id: haxe/macro/anonstatus#AExtend
  summary: Represents a structure which extends one or multiple structures defined in tl
  belongs_to: macro.AnonStatus
  description: |-
    ### `AExtend(tl:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>>)`

    Represents a structure which extends one or multiple structures defined in `tl`.

    See also:

    - <https://haxe.org/manual/type-system-extensions.html>
- name: macro.AnonStatus.AOpened
  id: haxe/macro/anonstatus#AOpened
  summary: An open structure allows having additional fields added to it, which is used during type inference
  belongs_to: macro.AnonStatus
  description: |-
    ### `AOpened`

    An open structure allows having additional fields added to it, which is used during type inference. It is closed upon unification.
- name: macro.AnonType
  id: haxe/macro/anontype
  summary: Represents information for anonymous structure types
  description: "# AnonType\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents information for anonymous structure types.\n\n## Fields\n\n### [`status`](#status)`:`[`AnonStatus`](anonstatus \"haxe.macro.AnonStatus - Represents the kind of the anonymous structure type.\")\n\nThe status/kind of the structure.\n\n### [`fields`](#fields)`:`[`Array`](../../array \"Array\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>`\n\nThe class fields of the structure.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/AnonType.html](https://api.haxe.org/haxe/macro/AnonType.html)"
- name: macro.AnonType.fields
  id: haxe/macro/anontype#fields
  summary: The class fields of the structure
  belongs_to: macro.AnonType
  description: "### [`fields`](#fields)`:`[`Array`](../../array \"Array\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>`\n\nThe class fields of the structure.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/AnonType.html](https://api.haxe.org/haxe/macro/AnonType.html)"
- name: macro.AnonType.status
  id: haxe/macro/anontype#status
  summary: The status/kind of the structure
  belongs_to: macro.AnonType
  description: |-
    ### [`status`](#status)`:`[`AnonStatus`](anonstatus "haxe.macro.AnonStatus - Represents the kind of the anonymous structure type.")

    The status/kind of the structure.
- name: macro.BaseType
  id: haxe/macro/basetype
  summary: The information that all types (ClassType, EnumType, DefType, AbstractType) have in common
  description: "# BaseType\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nThe information that all types ([`ClassType`](classtype#ClassType), [`EnumType`](enumtype#EnumType), [`DefType`](deftype#DefType), [`AbstractType`](abstracttype#AbstractType)) have in common.\n\n## Fields\n\n### [`pos`](#pos)`:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nThe position of the type.\n\n### [`params`](#params)`:`[`Array`](../../array \"Array\")`<`[`TypeParameter`](typeparameter \"haxe.macro.TypeParameter - Represents the declaration of type parameters.\")`>`\n\nThe type parameters of the type.\n\n### [`pack`](#pack)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe package of the type.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the type.\n\n### [`module`](#module)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe module name of the type, which might be different.\n\n### [`meta`](#meta)`:`[`MetaAccess`](metaaccess \"haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.\")\n\nThe metadata of the type.\n\n### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is private.\n\n### [`isExtern`](#isExtern)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is extern.\n\n### [`exclude`](#exclude)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\nAllows excluding the type from compilation.\n\n### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe associated documentation of the class field.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/BaseType.html](https://api.haxe.org/haxe/macro/BaseType.html)"
- name: macro.BaseType.doc
  id: haxe/macro/basetype#doc
  summary: The associated documentation of the class field
  belongs_to: macro.BaseType
  description: "### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe associated documentation of the class field.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/BaseType.html](https://api.haxe.org/haxe/macro/BaseType.html)"
- name: macro.BaseType.exclude()
  id: haxe/macro/basetype#exclude
  summary: Allows excluding the type from compilation
  belongs_to: macro.BaseType
  description: |-
    ### [`exclude`](#exclude)`():`[`Void`](../../void "Void - The standard Void type.")

    Allows excluding the type from compilation.
- name: macro.BaseType.isExtern
  id: haxe/macro/basetype#isExtern
  summary: Whether or not the type is extern
  belongs_to: macro.BaseType
  description: |-
    ### [`isExtern`](#isExtern)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is extern.
- name: macro.BaseType.isPrivate
  id: haxe/macro/basetype#isPrivate
  summary: Whether or not the type is private
  belongs_to: macro.BaseType
  description: |-
    ### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is private.
- name: macro.BaseType.meta
  id: haxe/macro/basetype#meta
  summary: The metadata of the type
  belongs_to: macro.BaseType
  description: |-
    ### [`meta`](#meta)`:`[`MetaAccess`](metaaccess "haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.")

    The metadata of the type.
- name: macro.BaseType.module
  id: haxe/macro/basetype#module
  summary: The module name of the type, which might be different
  belongs_to: macro.BaseType
  description: |-
    ### [`module`](#module)`:`[`String`](../../string "String - The basic String class.")

    The module name of the type, which might be different.
- name: macro.BaseType.name
  id: haxe/macro/basetype#name
  summary: The name of the type
  belongs_to: macro.BaseType
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the type.
- name: macro.BaseType.pack
  id: haxe/macro/basetype#pack
  summary: The package of the type
  belongs_to: macro.BaseType
  description: |-
    ### [`pack`](#pack)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`

    The package of the type.
- name: macro.BaseType.params
  id: haxe/macro/basetype#params
  summary: The type parameters of the type
  belongs_to: macro.BaseType
  description: |-
    ### [`params`](#params)`:`[`Array`](../../array "Array")`<`[`TypeParameter`](typeparameter "haxe.macro.TypeParameter - Represents the declaration of type parameters.")`>`

    The type parameters of the type.
- name: macro.BaseType.pos
  id: haxe/macro/basetype#pos
  summary: The position of the type
  belongs_to: macro.BaseType
  description: |-
    ### [`pos`](#pos)`:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    The position of the type.
- name: macro.Binop
  id: haxe/macro/binop
  summary: A binary operator
  description: "# Binop\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nA binary operator.\n\nSee also:\n\n- <https://haxe.org/manual/types-numeric-operators.html>\n\n## Values\n\n### `OpAdd`\n\n### `+`\n\n### `OpMult`\n\n### `*`\n\n### `OpDiv`\n\n### `/`\n\n### `OpSub`\n\n### `-`\n\n### `OpAssign`\n\n### `=`\n\n### `OpEq`\n\n### `==`\n\n### `OpNotEq`\n\n### `!=`\n\n### `OpGt`\n\n### `>`\n\n### `OpGte`\n\n### `>=`\n\n### `OpLt`\n\n### `<`\n\n### `OpLte`\n\n### `<=`\n\n### `OpAnd`\n\n### `&`\n\n### `OpOr`\n\n| \\`  | \\`  |\n|-----|-----|\n\n### `OpXor`\n\n### `^`\n\n### `OpBoolAnd`\n\n### `&&`\n\n### `OpBoolOr`\n\n| \\`  | \\`  |\n|-----|-----|\n\n### `OpShl`\n\n### `<<`\n\n### `OpShr`\n\n### `>>`\n\n### `OpUShr`\n\n### `>>>`\n\n### `OpMod`\n\n### `%`\n\n### `OpAssignOp(op:`[`Binop`](binop \"haxe.macro.Binop - A binary operator.\")`)`\n\n| `+=` `-=` `/=` `*=` `<<=` `>>=` `>>>=` \\` | =&=^=%=\\` |\n|-------------------------------------------|-----------|\n\n### `OpInterval`\n\n### `...`\n\n### `OpArrow`\n\n### `=>`\n\n### `OpIn`\n\n### `in`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Binop.html](https://api.haxe.org/haxe/macro/Binop.html)"
- name: macro.Binop.OpAdd
  id: haxe/macro/binop#OpAdd
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpAdd`

    ### `+`
- name: macro.Binop.OpAnd
  id: haxe/macro/binop#OpAnd
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpAnd`

    ### `&`
- name: macro.Binop.OpArrow
  id: haxe/macro/binop#OpArrow
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpArrow`

    ### `=>`
- name: macro.Binop.OpAssign
  id: haxe/macro/binop#OpAssign
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpAssign`

    ### `=`
- name: macro.Binop.OpAssignOp()
  id: haxe/macro/binop#OpAssignOp
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpAssignOp(op:`[`Binop`](binop "haxe.macro.Binop - A binary operator.")`)`

    | `+=``-=``/=``*=``<<=``>>=``>>>=` \` | =&=^=%=\` |
    |-------------------------------------|-----------|
- name: macro.Binop.OpBoolAnd
  id: haxe/macro/binop#OpBoolAnd
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpBoolAnd`

    ### `&&`
- name: macro.Binop.OpBoolOr
  id: haxe/macro/binop#OpBoolOr
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpBoolOr`

    | \`  | \`  |
    |-----|-----|
- name: macro.Binop.OpDiv
  id: haxe/macro/binop#OpDiv
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpDiv`

    ### `/`
- name: macro.Binop.OpEq
  id: haxe/macro/binop#OpEq
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpEq`

    ### `==`
- name: macro.Binop.OpGt
  id: haxe/macro/binop#OpGt
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpGt`

    ### `>`
- name: macro.Binop.OpGte
  id: haxe/macro/binop#OpGte
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpGte`

    ### `>=`
- name: macro.Binop.OpIn
  id: haxe/macro/binop#OpIn
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.Binop
  description: "### `OpIn`\n\n### `in`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Binop.html](https://api.haxe.org/haxe/macro/Binop.html)"
- name: macro.Binop.OpInterval
  id: haxe/macro/binop#OpInterval
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpInterval`

    ### `...`
- name: macro.Binop.OpLt
  id: haxe/macro/binop#OpLt
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpLt`

    ### `<`
- name: macro.Binop.OpLte
  id: haxe/macro/binop#OpLte
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpLte`

    ### `<=`
- name: macro.Binop.OpMod
  id: haxe/macro/binop#OpMod
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpMod`

    ### `%`
- name: macro.Binop.OpMult
  id: haxe/macro/binop#OpMult
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpMult`

    ### `*`
- name: macro.Binop.OpNotEq
  id: haxe/macro/binop#OpNotEq
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpNotEq`

    ### `!=`
- name: macro.Binop.OpOr
  id: haxe/macro/binop#OpOr
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpOr`

    | \`  | \`  |
    |-----|-----|
- name: macro.Binop.OpShl
  id: haxe/macro/binop#OpShl
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpShl`

    ### `<<`
- name: macro.Binop.OpShr
  id: haxe/macro/binop#OpShr
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpShr`

    ### `>>`
- name: macro.Binop.OpSub
  id: haxe/macro/binop#OpSub
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpSub`

    ### `-`
- name: macro.Binop.OpUShr
  id: haxe/macro/binop#OpUShr
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpUShr`

    ### `>>>`
- name: macro.Binop.OpXor
  id: haxe/macro/binop#OpXor
  summary: null
  belongs_to: macro.Binop
  description: |-
    ### `OpXor`

    ### `^`
- name: macro.Case
  id: haxe/macro/case
  summary: Represents a switch case
  description: "# Case\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a switch case.\n\nSee also:\n\n- <https://haxe.org/manual/expression-switch.html>\n\n## Fields\n\n### [`values`](#values)`:`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>`\n\nThe value expressions of the case.\n\n### `optional`[`guard`](#guard)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>`\n\nThe optional guard expressions of the case, if available.\n\n### [`expr`](#expr)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>`\n\nThe expression of the case, if available.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Case.html](https://api.haxe.org/haxe/macro/Case.html)"
- name: macro.Case.expr
  id: haxe/macro/case#expr
  summary: The expression of the case, if available
  belongs_to: macro.Case
  description: "### [`expr`](#expr)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>`\n\nThe expression of the case, if available.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Case.html](https://api.haxe.org/haxe/macro/Case.html)"
- name: macro.Case.guard
  id: haxe/macro/case#guard
  summary: The optional guard expressions of the case, if available
  belongs_to: macro.Case
  description: |-
    ### `optional`[`guard`](#guard)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>`

    The optional guard expressions of the case, if available.
- name: macro.Case.values
  id: haxe/macro/case#values
  summary: The value expressions of the case
  belongs_to: macro.Case
  description: |-
    ### [`values`](#values)`:`[`Array`](../../array "Array")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>`

    The value expressions of the case.
- name: macro.Catch
  id: haxe/macro/catch
  summary: Represents a catch in the AST
  description: "# Catch\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a catch in the AST.\n\nSee also:\n\n- <https://haxe.org/manual/expression-try-catch.html>\n\n## Fields\n\n### `optional`[`type`](#type)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>`\n\nThe type of the catch.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the catch variable.\n\n### [`expr`](#expr)`:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\nThe expression of the catch.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Catch.html](https://api.haxe.org/haxe/macro/Catch.html)"
- name: macro.Catch.expr
  id: haxe/macro/catch#expr
  summary: The expression of the catch
  belongs_to: macro.Catch
  description: "### [`expr`](#expr)`:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\nThe expression of the catch.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Catch.html](https://api.haxe.org/haxe/macro/Catch.html)"
- name: macro.Catch.name
  id: haxe/macro/catch#name
  summary: The name of the catch variable
  belongs_to: macro.Catch
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the catch variable.
- name: macro.Catch.type
  id: haxe/macro/catch#type
  summary: The type of the catch
  belongs_to: macro.Catch
  description: |-
    ### `optional`[`type`](#type)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`>`

    The type of the catch.
- name: macro.ClassField
  id: haxe/macro/classfield
  summary: Represents a class field
  description: "# ClassField\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents a class field.\n\n## Fields\n\n### [`type`](#type)`:`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\nThe type of the class field.\n\n### [`pos`](#pos)`:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nThe position of the class field.\n\n### [`params`](#params)`:`[`Array`](../../array \"Array\")`<`[`TypeParameter`](typeparameter \"haxe.macro.TypeParameter - Represents the declaration of type parameters.\")`>`\n\nThe type parameters of the class field.\n\n### [`overloads`](#overloads)`:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`Array`](../../array \"Array\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>>`\n\nThe overload fields of the class field.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the class field.\n\n### [`meta`](#meta)`:`[`MetaAccess`](metaaccess \"haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.\")\n\nThe metadata of the class field.\n\n### [`kind`](#kind)`:`[`FieldKind`](fieldkind \"haxe.macro.FieldKind - Represents a field kind.\")\n\nThe class field kind.\n\n### [`isPublic`](#isPublic)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the class field is public.\n\n### [`isFinal`](#isFinal)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the class field is final.\n\n### [`isExtern`](#isExtern)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the class field is extern.\n\n### [`expr`](#expr)`():`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>`\n\nReturns the typed expression of the class field.\n\n### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe associated documentation of the class field.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ClassField.html](https://api.haxe.org/haxe/macro/ClassField.html)"
- name: macro.ClassField.doc
  id: haxe/macro/classfield#doc
  summary: The associated documentation of the class field
  belongs_to: macro.ClassField
  description: "### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe associated documentation of the class field.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ClassField.html](https://api.haxe.org/haxe/macro/ClassField.html)"
- name: macro.ClassField.expr()
  id: haxe/macro/classfield#expr
  summary: Returns the typed expression of the class field
  belongs_to: macro.ClassField
  description: |-
    ### [`expr`](#expr)`():`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>`

    Returns the typed expression of the class field.
- name: macro.ClassField.isExtern
  id: haxe/macro/classfield#isExtern
  summary: Whether or not the class field is extern
  belongs_to: macro.ClassField
  description: |-
    ### [`isExtern`](#isExtern)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the class field is extern.
- name: macro.ClassField.isFinal
  id: haxe/macro/classfield#isFinal
  summary: Whether or not the class field is final
  belongs_to: macro.ClassField
  description: |-
    ### [`isFinal`](#isFinal)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the class field is final.
- name: macro.ClassField.isPublic
  id: haxe/macro/classfield#isPublic
  summary: Whether or not the class field is public
  belongs_to: macro.ClassField
  description: |-
    ### [`isPublic`](#isPublic)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the class field is public.
- name: macro.ClassField.kind
  id: haxe/macro/classfield#kind
  summary: The class field kind
  belongs_to: macro.ClassField
  description: |-
    ### [`kind`](#kind)`:`[`FieldKind`](fieldkind "haxe.macro.FieldKind - Represents a field kind.")

    The class field kind.
- name: macro.ClassField.meta
  id: haxe/macro/classfield#meta
  summary: The metadata of the class field
  belongs_to: macro.ClassField
  description: |-
    ### [`meta`](#meta)`:`[`MetaAccess`](metaaccess "haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.")

    The metadata of the class field.
- name: macro.ClassField.name
  id: haxe/macro/classfield#name
  summary: The name of the class field
  belongs_to: macro.ClassField
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the class field.
- name: macro.ClassField.overloads
  id: haxe/macro/classfield#overloads
  summary: The overload fields of the class field
  belongs_to: macro.ClassField
  description: |-
    ### [`overloads`](#overloads)`:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`Array`](../../array "Array")`<`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`>>`

    The overload fields of the class field.
- name: macro.ClassField.params
  id: haxe/macro/classfield#params
  summary: The type parameters of the class field
  belongs_to: macro.ClassField
  description: |-
    ### [`params`](#params)`:`[`Array`](../../array "Array")`<`[`TypeParameter`](typeparameter "haxe.macro.TypeParameter - Represents the declaration of type parameters.")`>`

    The type parameters of the class field.
- name: macro.ClassField.pos
  id: haxe/macro/classfield#pos
  summary: The position of the class field
  belongs_to: macro.ClassField
  description: |-
    ### [`pos`](#pos)`:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    The position of the class field.
- name: macro.ClassField.type
  id: haxe/macro/classfield#type
  summary: The type of the class field
  belongs_to: macro.ClassField
  description: |-
    ### [`type`](#type)`:`[`Type`](type "haxe.macro.Type - Represents a type.")

    The type of the class field.
- name: macro.ClassKind
  id: haxe/macro/classkind
  summary: Represents the kind of a class
  description: "# ClassKind\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents the kind of a class.\n\n## Values\n\n### `KNormal`\n\nA normal class.\n\n### `KTypeParameter(constraints:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>)`\n\nA type parameter class with a set of constraints.\n\n### `KExtension(cl:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>, params:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>)`\n\nA structurally extended class.\n\n@deprecated\n\n### `KExpr(expr:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nA special kind of class to encode expressions into type parameters.\n\n### `KGeneric`\n\nA `@:generic` base class.\n\n### `KGenericInstance(cl:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>, params:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>)`\n\nA concrete `@:generic` instance, referencing the original class and the applied type parameters.\n\n### `KMacroType`\n\nA special class for [`haxe.macro.MacroType`](macrotype#MacroType).\n\n@deprecated\n\n### `KAbstractImpl(a:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`AbstractType`](abstracttype \"haxe.macro.AbstractType - Represents an abstract type.\")`>)`\n\nAn implementation class of an abstract, i.e. where all its run-time code is.\n\n### `KGenericBuild`\n\nA `@:genericBuild` class\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ClassKind.html](https://api.haxe.org/haxe/macro/ClassKind.html)"
- name: macro.ClassKind.KAbstractImpl()
  id: haxe/macro/classkind#KAbstractImpl
  summary: An implementation class of an abstract, i.e
  belongs_to: macro.ClassKind
  description: |-
    ### `KAbstractImpl(a:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`AbstractType`](abstracttype "haxe.macro.AbstractType - Represents an abstract type.")`>)`

    An implementation class of an abstract, i.e. where all its run-time code is.
- name: macro.ClassKind.KExpr()
  id: haxe/macro/classkind#KExpr
  summary: A special kind of class to encode expressions into type parameters
  belongs_to: macro.ClassKind
  description: |-
    ### `KExpr(expr:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`)`

    A special kind of class to encode expressions into type parameters.
- name: macro.ClassKind.KExtension()
  id: haxe/macro/classkind#KExtension
  summary: A structurally extended class
  belongs_to: macro.ClassKind
  description: |-
    ### `KExtension(cl:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>, params:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>)`

    A structurally extended class.

    @deprecated
- name: macro.ClassKind.KGeneric
  id: haxe/macro/classkind#KGeneric
  summary: A @:generic base class
  belongs_to: macro.ClassKind
  description: |-
    ### `KGeneric`

    A `@:generic` base class.
- name: macro.ClassKind.KGenericBuild
  id: haxe/macro/classkind#KGenericBuild
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.ClassKind
  description: "### `KGenericBuild`\n\nA `@:genericBuild` class\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ClassKind.html](https://api.haxe.org/haxe/macro/ClassKind.html)"
- name: macro.ClassKind.KGenericInstance()
  id: haxe/macro/classkind#KGenericInstance
  summary: A concrete @:generic instance, referencing the original class and the applied type parameters
  belongs_to: macro.ClassKind
  description: |-
    ### `KGenericInstance(cl:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>, params:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>)`

    A concrete `@:generic` instance, referencing the original class and the applied type parameters.
- name: macro.ClassKind.KMacroType
  id: haxe/macro/classkind#KMacroType
  summary: A special class for haxe.macro.MacroType
  belongs_to: macro.ClassKind
  description: |-
    ### `KMacroType`

    A special class for [`haxe.macro.MacroType`](macrotype#MacroType).

    @deprecated
- name: macro.ClassKind.KNormal
  id: haxe/macro/classkind#KNormal
  summary: A normal class
  belongs_to: macro.ClassKind
  description: |-
    ### `KNormal`

    A normal class.
- name: macro.ClassKind.KTypeParameter()
  id: haxe/macro/classkind#KTypeParameter
  summary: A type parameter class with a set of constraints
  belongs_to: macro.ClassKind
  description: |-
    ### `KTypeParameter(constraints:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>)`

    A type parameter class with a set of constraints.
- name: macro.ClassType
  id: haxe/macro/classtype
  summary: Represents a class type
  description: "# ClassType\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents a class type.\n\n## Fields\n\n### [`superClass`](#superClass)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<{t:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>, params:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>}>`\n\nThe parent class and its type parameters, if available.\n\n### [`statics`](#statics)`:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`Array`](../../array \"Array\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>>`\n\nThe static fields of the class.\n\n### [`pos`](#pos)`:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nThe position of the type.\n\n### [`params`](#params)`:`[`Array`](../../array \"Array\")`<`[`TypeParameter`](typeparameter \"haxe.macro.TypeParameter - Represents the declaration of type parameters.\")`>`\n\nThe type parameters of the type.\n\n### [`pack`](#pack)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe package of the type.\n\n### [`overrides`](#overrides)`:`[`Array`](../../array \"Array\")`<`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>>`\n\nThe list of fields that have override status.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the type.\n\n### [`module`](#module)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe module name of the type, which might be different.\n\n### [`meta`](#meta)`:`[`MetaAccess`](metaaccess \"haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.\")\n\nThe metadata of the type.\n\n### [`kind`](#kind)`:`[`ClassKind`](classkind \"haxe.macro.ClassKind - Represents the kind of a class.\")\n\nThe kind of the class.\n\n### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is private.\n\n### [`isInterface`](#isInterface)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nIf true the type is an interface, otherwise it is a class.\n\n### [`isFinal`](#isFinal)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nIf true the class is final and cannot be extended.\n\n### [`isExtern`](#isExtern)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is extern.\n\n### [`interfaces`](#interfaces)`:`[`Array`](../../array \"Array\")`<{t:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>, params:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>}>`\n\nThe implemented interfaces and their type parameters.\n\n### [`init`](#init)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>`\n\nThe \\`\\_\\_init\\_\\_\\` expression of the class, if available.\n\n### [`fields`](#fields)`:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`Array`](../../array \"Array\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>>`\n\nThe member fields of the class.\n\n### [`exclude`](#exclude)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\nAllows excluding the type from compilation.\n\n### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe associated documentation of the class field.\n\n### [`constructor`](#constructor)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>>`\n\nThe constructor of the class, if available.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ClassType.html](https://api.haxe.org/haxe/macro/ClassType.html)"
- name: macro.ClassType.constructor
  id: haxe/macro/classtype#constructor
  summary: The constructor of the class, if available
  belongs_to: macro.ClassType
  description: "### [`constructor`](#constructor)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>>`\n\nThe constructor of the class, if available.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ClassType.html](https://api.haxe.org/haxe/macro/ClassType.html)"
- name: macro.ClassType.doc
  id: haxe/macro/classtype#doc
  summary: The associated documentation of the class field
  belongs_to: macro.ClassType
  description: |-
    ### [`doc`](#doc)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The associated documentation of the class field.
- name: macro.ClassType.exclude()
  id: haxe/macro/classtype#exclude
  summary: Allows excluding the type from compilation
  belongs_to: macro.ClassType
  description: |-
    ### [`exclude`](#exclude)`():`[`Void`](../../void "Void - The standard Void type.")

    Allows excluding the type from compilation.
- name: macro.ClassType.fields
  id: haxe/macro/classtype#fields
  summary: The member fields of the class
  belongs_to: macro.ClassType
  description: |-
    ### [`fields`](#fields)`:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`Array`](../../array "Array")`<`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`>>`

    The member fields of the class.
- name: macro.ClassType.init
  id: haxe/macro/classtype#init
  summary: The `__init__` expression of the class, if available
  belongs_to: macro.ClassType
  description: |-
    ### [`init`](#init)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>`

    The \`\_\_init\_\_\` expression of the class, if available.
- name: macro.ClassType.interfaces
  id: haxe/macro/classtype#interfaces
  summary: The implemented interfaces and their type parameters
  belongs_to: macro.ClassType
  description: |-
    ### [`interfaces`](#interfaces)`:`[`Array`](../../array "Array")`<{t:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>, params:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>}>`

    The implemented interfaces and their type parameters.
- name: macro.ClassType.isExtern
  id: haxe/macro/classtype#isExtern
  summary: Whether or not the type is extern
  belongs_to: macro.ClassType
  description: |-
    ### [`isExtern`](#isExtern)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is extern.
- name: macro.ClassType.isFinal
  id: haxe/macro/classtype#isFinal
  summary: If true the class is final and cannot be extended
  belongs_to: macro.ClassType
  description: |-
    ### [`isFinal`](#isFinal)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    If true the class is final and cannot be extended.
- name: macro.ClassType.isInterface
  id: haxe/macro/classtype#isInterface
  summary: If true the type is an interface, otherwise it is a class
  belongs_to: macro.ClassType
  description: |-
    ### [`isInterface`](#isInterface)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    If true the type is an interface, otherwise it is a class.
- name: macro.ClassType.isPrivate
  id: haxe/macro/classtype#isPrivate
  summary: Whether or not the type is private
  belongs_to: macro.ClassType
  description: |-
    ### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is private.
- name: macro.ClassType.kind
  id: haxe/macro/classtype#kind
  summary: The kind of the class
  belongs_to: macro.ClassType
  description: |-
    ### [`kind`](#kind)`:`[`ClassKind`](classkind "haxe.macro.ClassKind - Represents the kind of a class.")

    The kind of the class.
- name: macro.ClassType.meta
  id: haxe/macro/classtype#meta
  summary: The metadata of the type
  belongs_to: macro.ClassType
  description: |-
    ### [`meta`](#meta)`:`[`MetaAccess`](metaaccess "haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.")

    The metadata of the type.
- name: macro.ClassType.module
  id: haxe/macro/classtype#module
  summary: The module name of the type, which might be different
  belongs_to: macro.ClassType
  description: |-
    ### [`module`](#module)`:`[`String`](../../string "String - The basic String class.")

    The module name of the type, which might be different.
- name: macro.ClassType.name
  id: haxe/macro/classtype#name
  summary: The name of the type
  belongs_to: macro.ClassType
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the type.
- name: macro.ClassType.overrides
  id: haxe/macro/classtype#overrides
  summary: The list of fields that have override status
  belongs_to: macro.ClassType
  description: |-
    ### [`overrides`](#overrides)`:`[`Array`](../../array "Array")`<`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`>>`

    The list of fields that have override status.
- name: macro.ClassType.pack
  id: haxe/macro/classtype#pack
  summary: The package of the type
  belongs_to: macro.ClassType
  description: |-
    ### [`pack`](#pack)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`

    The package of the type.
- name: macro.ClassType.params
  id: haxe/macro/classtype#params
  summary: The type parameters of the type
  belongs_to: macro.ClassType
  description: |-
    ### [`params`](#params)`:`[`Array`](../../array "Array")`<`[`TypeParameter`](typeparameter "haxe.macro.TypeParameter - Represents the declaration of type parameters.")`>`

    The type parameters of the type.
- name: macro.ClassType.pos
  id: haxe/macro/classtype#pos
  summary: The position of the type
  belongs_to: macro.ClassType
  description: |-
    ### [`pos`](#pos)`:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    The position of the type.
- name: macro.ClassType.statics
  id: haxe/macro/classtype#statics
  summary: The static fields of the class
  belongs_to: macro.ClassType
  description: |-
    ### [`statics`](#statics)`:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`Array`](../../array "Array")`<`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`>>`

    The static fields of the class.
- name: macro.ClassType.superClass
  id: haxe/macro/classtype#superClass
  summary: The parent class and its type parameters, if available
  belongs_to: macro.ClassType
  description: |-
    ### [`superClass`](#superClass)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<{t:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>, params:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>}>`

    The parent class and its type parameters, if available.
- name: macro.CompilationServer
  id: haxe/macro/compilationserver
  summary: This class provides some methods which can be invoked from command line using --macro server.field(args)
  description: "# CompilationServer\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nThis class provides some methods which can be invoked from command line using `--macro server.field(args)`.\n\n## Static methods\n\n### `static`[`invalidateFiles`](#invalidateFiles)`(``filePaths:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on macro*\n\nInvalidates all files given in `filePaths`, removing them from the cache.\n\n### `static`[`setModuleCheckPolicy`](#setModuleCheckPolicy)`(``pathFilters:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>,`` ``policy:`[`Array`](../../array \"Array\")`<`[`ModuleCheckPolicy`](modulecheckpolicy \"haxe.macro.ModuleCheckPolicy\")`>,`` ``recursive:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true,`` ``contextOptions:`[`ContextOptions`](contextoptions \"haxe.macro.ContextOptions\")` = NormalContext``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on macro*\n\nSets the [`ModuleCheckPolicy`](modulecheckpolicy#ModuleCheckPolicy) of all files whose dot-path matches an element of `pathFilters`.\n\nIf `recursive` is true, a dot-path is considered matched if it starts with the path filter. This automatically applies to path filters of packages. Otherwise an exact match is required.\n\nIf an element in `pathFilters` is the empty String `\"\"` it matches everything (if `recursive = `[`true`](../../bool)) or only top-level types (if `recursive = `[`false`](../../bool)).\n\nThe argument `contextOptions` determines which context (normal, macro or both) this affects.\n\nIf a call to this function is added to the compilation parameters, the compilation server should be restarted to ensure it takes effect.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/CompilationServer.html](https://api.haxe.org/haxe/macro/CompilationServer.html)"
- name: macro.CompilationServer.invalidateFiles()
  id: haxe/macro/compilationserver#invalidateFiles
  summary: Invalidates all files given in filePaths, removing them from the cache
  belongs_to: macro.CompilationServer
  description: |-
    ### `static`[`invalidateFiles`](#invalidateFiles)`(``filePaths:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>``):`[`Void`](../../void "Void - The standard Void type.")

    *Available on macro*

    Invalidates all files given in `filePaths`, removing them from the cache.
- name: macro.CompilationServer.setModuleCheckPolicy()
  id: haxe/macro/compilationserver#setModuleCheckPolicy
  summary: Sets the ModuleCheckPolicy of all files whose dot-path matches an element of pathFilters
  belongs_to: macro.CompilationServer
  description: "### `static`[`setModuleCheckPolicy`](#setModuleCheckPolicy)`(``pathFilters:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>,``policy:`[`Array`](../../array \"Array\")`<`[`ModuleCheckPolicy`](modulecheckpolicy \"haxe.macro.ModuleCheckPolicy\")`>,``recursive:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true,``contextOptions:`[`ContextOptions`](contextoptions \"haxe.macro.ContextOptions\")` = NormalContext``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on macro*\n\nSets the [`ModuleCheckPolicy`](modulecheckpolicy#ModuleCheckPolicy) of all files whose dot-path matches an element of `pathFilters`.\n\nIf `recursive` is true, a dot-path is considered matched if it starts with the path filter. This automatically applies to path filters of packages. Otherwise an exact match is required.\n\nIf an element in `pathFilters` is the empty String `\"\"` it matches everything (if `recursive = `[`true`](../../bool)) or only top-level types (if `recursive = `[`false`](../../bool)).\n\nThe argument `contextOptions` determines which context (normal, macro or both) this affects.\n\nIf a call to this function is added to the compilation parameters, the compilation server should be restarted to ensure it takes effect.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/CompilationServer.html](https://api.haxe.org/haxe/macro/CompilationServer.html)"
- name: macro.Compiler
  id: haxe/macro/compiler
  summary: All these methods can be called for compiler configuration macros
  description: "# Compiler\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nAll these methods can be called for compiler configuration macros.\n\n## Static methods\n\n### `static`[`addClassPath`](#addClassPath)`(``path:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nAdd a class path where \".hx\" source files or packages (sub-directories) can be found.\n\nUsage of this function outside of initialization macros is deprecated and may cause compilation server issues.\n\n### `static`[`addGlobalMetadata`](#addGlobalMetadata)`(``pathFilter:`[`String`](../../string \"String - The basic String class.\")`,`` ``meta:`[`String`](../../string \"String - The basic String class.\")`,`` ``recursive:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true,`` ``toTypes:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true,`` ``toFields:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nAdds metadata `meta` to all types (if `toTypes = `[`true`](../../bool)) or fields (if `toFields = `[`true`](../../bool)) whose dot-path matches `pathFilter`.\n\nIf `recursive` is true a dot-path is considered matched if it starts with `pathFilter`. This automatically applies to path filters of packages. Otherwise an exact match is required.\n\nIf `pathFilter` is the empty String `\"\"` it matches everything (if `recursive = `[`true`](../../bool)) or only top-level types (if `recursive = `[`false`](../../bool)).\n\nThis operation has no effect if the type has already been loaded, e.g. through [`Context.getType`](context#getType).\n\n### `static`[`addMetadata`](#addMetadata)`(``meta:`[`String`](../../string \"String - The basic String class.\")`,`` ``className:`[`String`](../../string \"String - The basic String class.\")`,`` ``?field:`[`String`](../../string \"String - The basic String class.\")`,`` ``?isStatic:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nAdd metadata to a (static) field or class by name. An error is thrown when `className` or `field` is invalid.\n\n### `static`[`addNativeArg`](#addNativeArg)`(``argument:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nAdds an argument to be passed to the native compiler (e.g. `-javac-arg` for Java).\n\n### `static`[`addNativeLib`](#addNativeLib)`(``name:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nAdds a native library depending on the platform (e.g. `-swf-lib` for Flash).\n\nUsage of this function outside of initialization macros is deprecated and may cause compilation server issues.\n\n### `static`[`allowPackage`](#allowPackage)`(``v:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\n### `static`[`define`](#define)`(``flag:`[`String`](../../string \"String - The basic String class.\")`,`` ``?value:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nSet a conditional compiler flag.\n\nUsage of this function outside of initialization macros is deprecated and may cause compilation server issues.\n\n### `static`[`exclude`](#exclude)`(``pack:`[`String`](../../string \"String - The basic String class.\")`,`` ``rec:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nExclude a specific class, enum, or all classes and enums in a package from being generated. Excluded types become `extern`.\n\nParameters:\n\n|       |                                                 |\n|-------|-------------------------------------------------|\n| `rec` | If true, recursively excludes all sub-packages. |\n\n### `static`[`excludeFile`](#excludeFile)`(``fileName:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nExclude classes and enums listed in an extern file (one per line) from being generated.\n\n### `static`[`flushDiskCache`](#flushDiskCache)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nClears cached results of file lookups\n\n### `static`[`getDefine`](#getDefine)`(``key:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\nA conditional compilation flag can be set on the command line using `-D key=value`.\n\nReturns the value of a compiler flag.\n\nIf the compiler flag is defined but no value is set, [`Compiler.getDefine`](compiler#getDefine) returns `\"1\"` (e.g. `-D key`).\n\nIf the compiler flag is not defined, [`Compiler.getDefine`](compiler#getDefine) returns `null`.\n\nNote: This is a macro and cannot be called from within other macros. Refer to [`haxe.macro.Context.definedValue`](context#definedValue) to obtain defined values in macro context.\n\nSee also:\n\n- <https://haxe.org/manual/lf-condition-compilation.html>\n\n### `static`[`getDisplayPos`](#getDisplayPos)`():`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<{pos:`[`Int`](../../int \"Int - The standard Int type.\")`, file:`[`String`](../../string \"String - The basic String class.\")`}>`\n\n*Available on neko, macro*\n\n### `static`[`getOutput`](#getOutput)`():`[`String`](../../string \"String - The basic String class.\")\n\n*Available on neko, macro*\n\n### `static`[`include`](#include)`(``pack:`[`String`](../../string \"String - The basic String class.\")`,`` ``rec:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true,`` ``?ignore:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>,`` ``?classPaths:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>,`` ``strict:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nIncludes all modules in package `pack` in the compilation.\n\nIn order to include single modules, their paths can be listed directly on command line: `haxe ... ModuleName pack.ModuleName`.\n\nBy default [`Compiler.include`](compiler#include) will search for modules in the directories defined with `-cp`. If you want to specify a different set of paths to search for modules, you can use the optional argument `classPath`.\n\nParameters:\n\n|              |                                                                                                                                                                                    |\n|--------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `rec`        | If true, recursively adds all sub-packages.                                                                                                                                        |\n| `ignore`     | Array of module names to ignore for inclusion. You can use `module*` with a \\* at the end for Wildcard matching                                                                    |\n| `classPaths` | An alternative array of paths (directory names) to use to search for modules to include. Note that if you pass this argument, only the specified paths will be used for inclusion. |\n| `strict`     | If true and given package wasn't found in any of class paths, fail with an error.                                                                                                  |\n\n### `static`[`includeFile`](#includeFile)`(``file:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``position:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\n*Available on js, lua*\n\nEmbed a JavaScript or Lua file at compile time (can be called by `--macro` or within an `__init__` method).\n\n### `static`[`includeFile`](#includeFile)`(``file:`[`String`](../../string \"String - The basic String class.\")`,`` ``position:`[`IncludePosition`](includeposition \"haxe.macro.IncludePosition\")` = Top``):`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\n*Available on macro*\n\nEmbed a JavaScript or Lua file at compile time (can be called by `--macro` or within an `__init__` method).\n\n### `static`[`keep`](#keep)`(``?path:`[`String`](../../string \"String - The basic String class.\")`,`` ``?paths:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>,`` ``recursive:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nMarks types or packages to be kept by DCE.\n\nThis also extends to the sub-types of resolved modules.\n\nIn order to include module sub-types directly, their full dot path including the containing module has to be used (e.g. [`msignal.Signal.Signal0`](https://api.haxe.org/lua/lib/luv/Signal.html#Signal0)).\n\nThis operation has no effect if the type has already been loaded, e.g. through [`Context.getType`](context#getType).\n\nParameters:\n\n|             |                                                            |\n|-------------|------------------------------------------------------------|\n| `path`      | A package, module or sub-type dot path to keep.            |\n| `paths`     | An Array of package, module or sub-type dot paths to keep. |\n| `recursive` | If true, recurses into sub-packages for package paths.     |\n\n### `static`[`nullSafety`](#nullSafety)`(``path:`[`String`](../../string \"String - The basic String class.\")`,`` ``mode:`[`NullSafetyMode`](nullsafetymode \"haxe.macro.NullSafetyMode\")` = Loose,`` ``recursive:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nEnables null safety for a type or a package.\n\nParameters:\n\n|             |                                                                   |\n|-------------|-------------------------------------------------------------------|\n| `path`      | A package, module or sub-type dot path to enable null safety for. |\n| `recursive` | If true, recurses into sub-packages for package paths.            |\n\n### `static`[`patchTypes`](#patchTypes)`(``file:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nLoad a type patch file that can modify the field types within declared classes and enums.\n\n### `static`[`removeField`](#removeField)`(``className:`[`String`](../../string \"String - The basic String class.\")`,`` ``field:`[`String`](../../string \"String - The basic String class.\")`,`` ``?isStatic:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nRemoves a (static) field from a given class by name. An error is thrown when `className` or `field` is invalid.\n\n### `static`[`setCustomJSGenerator`](#setCustomJSGenerator)`(``callb:`[`JSGenApi`](jsgenapi \"haxe.macro.JSGenApi - This is the api that is passed to the custom JS generator.\")` ‑> `[`Void`](../../void \"Void - The standard Void type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nChange the default JS output by using a custom generator callback\n\n### `static`[`setFieldType`](#setFieldType)`(``className:`[`String`](../../string \"String - The basic String class.\")`,`` ``field:`[`String`](../../string \"String - The basic String class.\")`,`` ``type:`[`String`](../../string \"String - The basic String class.\")`,`` ``?isStatic:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nSet the type of a (static) field at a given class by name. An error is thrown when `className` or `field` is invalid.\n\n### `static`[`setOutput`](#setOutput)`(``fileOrDir:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Compiler.html](https://api.haxe.org/haxe/macro/Compiler.html)"
- name: macro.Compiler.addClassPath()
  id: haxe/macro/compiler#addClassPath
  summary: Add a class path where ".hx" source files or packages (sub-directories) can be found
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`addClassPath`](#addClassPath)`(``path:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Add a class path where ".hx" source files or packages (sub-directories) can be found.

    Usage of this function outside of initialization macros is deprecated and may cause compilation server issues.
- name: macro.Compiler.addGlobalMetadata()
  id: haxe/macro/compiler#addGlobalMetadata
  summary: Adds metadata meta to all types (if toTypes = true) or fields (if toFields = true) whose dot-path matches pathFilter
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`addGlobalMetadata`](#addGlobalMetadata)`(``pathFilter:`[`String`](../../string "String - The basic String class.")`,``meta:`[`String`](../../string "String - The basic String class.")`,``recursive:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = true,``toTypes:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = true,``toFields:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = false``):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Adds metadata `meta` to all types (if `toTypes = `[`true`](../../bool)) or fields (if `toFields = `[`true`](../../bool)) whose dot-path matches `pathFilter`.

    If `recursive` is true a dot-path is considered matched if it starts with `pathFilter`. This automatically applies to path filters of packages. Otherwise an exact match is required.

    If `pathFilter` is the empty String `""` it matches everything (if `recursive = `[`true`](../../bool)) or only top-level types (if `recursive = `[`false`](../../bool)).

    This operation has no effect if the type has already been loaded, e.g. through [`Context.getType`](context#getType).
- name: macro.Compiler.addMetadata()
  id: haxe/macro/compiler#addMetadata
  summary: Add metadata to a (static) field or class by name
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`addMetadata`](#addMetadata)`(``meta:`[`String`](../../string "String - The basic String class.")`,``className:`[`String`](../../string "String - The basic String class.")`,``?field:`[`String`](../../string "String - The basic String class.")`,``?isStatic:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Add metadata to a (static) field or class by name. An error is thrown when `className` or `field` is invalid.
- name: macro.Compiler.addNativeArg()
  id: haxe/macro/compiler#addNativeArg
  summary: Adds an argument to be passed to the native compiler (e.g
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`addNativeArg`](#addNativeArg)`(``argument:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Adds an argument to be passed to the native compiler (e.g. `-javac-arg` for Java).
- name: macro.Compiler.addNativeLib()
  id: haxe/macro/compiler#addNativeLib
  summary: Adds a native library depending on the platform (e.g
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`addNativeLib`](#addNativeLib)`(``name:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Adds a native library depending on the platform (e.g. `-swf-lib` for Flash).

    Usage of this function outside of initialization macros is deprecated and may cause compilation server issues.
- name: macro.Compiler.allowPackage()
  id: haxe/macro/compiler#allowPackage
  summary: null
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`allowPackage`](#allowPackage)`(``v:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*
- name: macro.Compiler.define()
  id: haxe/macro/compiler#define
  summary: Set a conditional compiler flag
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`define`](#define)`(``flag:`[`String`](../../string "String - The basic String class.")`,``?value:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Set a conditional compiler flag.

    Usage of this function outside of initialization macros is deprecated and may cause compilation server issues.
- name: macro.Compiler.exclude()
  id: haxe/macro/compiler#exclude
  summary: Exclude a specific class, enum, or all classes and enums in a package from being generated
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`exclude`](#exclude)`(``pack:`[`String`](../../string "String - The basic String class.")`,``rec:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = true``):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Exclude a specific class, enum, or all classes and enums in a package from being generated. Excluded types become `extern`.

    Parameters:

    |       |                                                 |
    |-------|-------------------------------------------------|
    | `rec` | If true, recursively excludes all sub-packages. |
- name: macro.Compiler.excludeFile()
  id: haxe/macro/compiler#excludeFile
  summary: Exclude classes and enums listed in an extern file (one per line) from being generated
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`excludeFile`](#excludeFile)`(``fileName:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Exclude classes and enums listed in an extern file (one per line) from being generated.
- name: macro.Compiler.flushDiskCache()
  id: haxe/macro/compiler#flushDiskCache
  summary: null
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`flushDiskCache`](#flushDiskCache)`():`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Clears cached results of file lookups
- name: macro.Compiler.getDefine()
  id: haxe/macro/compiler#getDefine
  summary: A conditional compilation flag can be set on the command line using -D key=value
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`getDefine`](#getDefine)`(``key:`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")

    A conditional compilation flag can be set on the command line using `-D key=value`.

    Returns the value of a compiler flag.

    If the compiler flag is defined but no value is set, [`Compiler.getDefine`](compiler#getDefine) returns `"1"` (e.g. `-D key`).

    If the compiler flag is not defined, [`Compiler.getDefine`](compiler#getDefine) returns `null`.

    Note: This is a macro and cannot be called from within other macros. Refer to [`haxe.macro.Context.definedValue`](context#definedValue) to obtain defined values in macro context.

    See also:

    - <https://haxe.org/manual/lf-condition-compilation.html>
- name: macro.Compiler.getDisplayPos()
  id: haxe/macro/compiler#getDisplayPos
  summary: null
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`getDisplayPos`](#getDisplayPos)`():`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<{pos:`[`Int`](../../int "Int - The standard Int type.")`, file:`[`String`](../../string "String - The basic String class.")`}>`

    *Available on neko, macro*
- name: macro.Compiler.getOutput()
  id: haxe/macro/compiler#getOutput
  summary: null
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`getOutput`](#getOutput)`():`[`String`](../../string "String - The basic String class.")

    *Available on neko, macro*
- name: macro.Compiler.include()
  id: haxe/macro/compiler#include
  summary: Includes all modules in package pack in the compilation
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`include`](#include)`(``pack:`[`String`](../../string "String - The basic String class.")`,``rec:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = true,``?ignore:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>,``?classPaths:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>,``strict:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = false``):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Includes all modules in package `pack` in the compilation.

    In order to include single modules, their paths can be listed directly on command line: `haxe ... ModuleName pack.ModuleName`.

    By default [`Compiler.include`](compiler#include) will search for modules in the directories defined with `-cp`. If you want to specify a different set of paths to search for modules, you can use the optional argument `classPath`.

    Parameters:

    |              |                                                                                                                                                                                    |
    |--------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `rec`        | If true, recursively adds all sub-packages.                                                                                                                                        |
    | `ignore`     | Array of module names to ignore for inclusion. You can use `module*` with a \* at the end for Wildcard matching                                                                    |
    | `classPaths` | An alternative array of paths (directory names) to use to search for modules to include. Note that if you pass this argument, only the specified paths will be used for inclusion. |
    | `strict`     | If true and given package wasn't found in any of class paths, fail with an error.                                                                                                  |
- name: macro.Compiler.includeFile()
  id: haxe/macro/compiler#includeFile
  summary: Embed a JavaScript or Lua file at compile time (can be called by --macro or within an __init__ method)
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`includeFile`](#includeFile)`(``file:`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`,``position:`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")

    *Available on js, lua*

    Embed a JavaScript or Lua file at compile time (can be called by `--macro` or within an `__init__` method).

    ### `static`[`includeFile`](#includeFile)`(``file:`[`String`](../../string "String - The basic String class.")`,``position:`[`IncludePosition`](includeposition "haxe.macro.IncludePosition")` = Top``):`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")

    *Available on macro*

    Embed a JavaScript or Lua file at compile time (can be called by `--macro` or within an `__init__` method).
- name: macro.Compiler.keep()
  id: haxe/macro/compiler#keep
  summary: Marks types or packages to be kept by DCE
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`keep`](#keep)`(``?path:`[`String`](../../string "String - The basic String class.")`,``?paths:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>,``recursive:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = true``):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Marks types or packages to be kept by DCE.

    This also extends to the sub-types of resolved modules.

    In order to include module sub-types directly, their full dot path including the containing module has to be used (e.g. [`msignal.Signal.Signal0`](https://api.haxe.org/lua/lib/luv/Signal.html#Signal0)).

    This operation has no effect if the type has already been loaded, e.g. through [`Context.getType`](context#getType).

    Parameters:

    |             |                                                            |
    |-------------|------------------------------------------------------------|
    | `path`      | A package, module or sub-type dot path to keep.            |
    | `paths`     | An Array of package, module or sub-type dot paths to keep. |
    | `recursive` | If true, recurses into sub-packages for package paths.     |
- name: macro.Compiler.nullSafety()
  id: haxe/macro/compiler#nullSafety
  summary: Enables null safety for a type or a package
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`nullSafety`](#nullSafety)`(``path:`[`String`](../../string "String - The basic String class.")`,``mode:`[`NullSafetyMode`](nullsafetymode "haxe.macro.NullSafetyMode")` = Loose,``recursive:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = true``):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Enables null safety for a type or a package.

    Parameters:

    |             |                                                                   |
    |-------------|-------------------------------------------------------------------|
    | `path`      | A package, module or sub-type dot path to enable null safety for. |
    | `recursive` | If true, recurses into sub-packages for package paths.            |
- name: macro.Compiler.patchTypes()
  id: haxe/macro/compiler#patchTypes
  summary: Load a type patch file that can modify the field types within declared classes and enums
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`patchTypes`](#patchTypes)`(``file:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Load a type patch file that can modify the field types within declared classes and enums.
- name: macro.Compiler.removeField()
  id: haxe/macro/compiler#removeField
  summary: Removes a (static) field from a given class by name
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`removeField`](#removeField)`(``className:`[`String`](../../string "String - The basic String class.")`,``field:`[`String`](../../string "String - The basic String class.")`,``?isStatic:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Removes a (static) field from a given class by name. An error is thrown when `className` or `field` is invalid.
- name: macro.Compiler.setCustomJSGenerator()
  id: haxe/macro/compiler#setCustomJSGenerator
  summary: null
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`setCustomJSGenerator`](#setCustomJSGenerator)`(``callb:`[`JSGenApi`](jsgenapi "haxe.macro.JSGenApi - This is the api that is passed to the custom JS generator.")` ‑> `[`Void`](../../void "Void - The standard Void type.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Change the default JS output by using a custom generator callback
- name: macro.Compiler.setFieldType()
  id: haxe/macro/compiler#setFieldType
  summary: Set the type of a (static) field at a given class by name
  belongs_to: macro.Compiler
  description: |-
    ### `static`[`setFieldType`](#setFieldType)`(``className:`[`String`](../../string "String - The basic String class.")`,``field:`[`String`](../../string "String - The basic String class.")`,``type:`[`String`](../../string "String - The basic String class.")`,``?isStatic:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Set the type of a (static) field at a given class by name. An error is thrown when `className` or `field` is invalid.
- name: macro.Compiler.setOutput()
  id: haxe/macro/compiler#setOutput
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.Compiler
  description: "### `static`[`setOutput`](#setOutput)`(``fileOrDir:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Compiler.html](https://api.haxe.org/haxe/macro/Compiler.html)"
- name: macro.ComplexType
  id: haxe/macro/complextype
  summary: Represents a type syntax in the AST
  description: "# ComplexType\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a type syntax in the AST.\n\n## Values\n\n### `TPath(p:`[`TypePath`](typepath \"haxe.macro.TypePath - Represents a type path in the AST.\")`)`\n\nRepresents the type path.\n\n### `TFunction(args:`[`Array`](../../array \"Array\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>, ret:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`)`\n\nRepresents a function type.\n\nSee also:\n\n- <https://haxe.org/manual/types-function.html>\n\n### `TAnonymous(fields:`[`Array`](../../array \"Array\")`<`[`Field`](field \"haxe.macro.Field - Represents a field in the AST.\")`>)`\n\nRepresents an anonymous structure type.\n\nSee also:\n\n- <https://haxe.org/manual/types-anonymous-structure.html>\n\n### `TParent(t:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`)`\n\nRepresents parentheses around a type, e.g. the `(`[`Int`](../../int)` -> `[`Void`](../../void)`)` part in `(`[`Int`](../../int)` -> `[`Void`](../../void)`) -> `[`String`](../../string).\n\n### `TExtend(p:`[`Array`](../../array \"Array\")`<`[`TypePath`](typepath \"haxe.macro.TypePath - Represents a type path in the AST.\")`>, fields:`[`Array`](../../array \"Array\")`<`[`Field`](field \"haxe.macro.Field - Represents a field in the AST.\")`>)`\n\nRepresents typedef extensions `> `[`Iterable`](../../iterable)`<T>`. The array `p` holds the type paths to the given types.\n\nSee also:\n\n- <https://haxe.org/manual/type-system-extensions.html>\n\n### `TOptional(t:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`)`\n\nRepresents an optional type.\n\n### `TNamed(n:`[`String`](../../string \"String - The basic String class.\")`, t:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`)`\n\nRepresents a type with a name.\n\n### `TIntersection(tl:`[`Array`](../../array \"Array\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>)`\n\nRepresents an intersection type `T1 & T2 & ... & TN`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ComplexType.html](https://api.haxe.org/haxe/macro/ComplexType.html)"
- name: macro.ComplexType.TAnonymous()
  id: haxe/macro/complextype#TAnonymous
  summary: Represents an anonymous structure type
  belongs_to: macro.ComplexType
  description: |-
    ### `TAnonymous(fields:`[`Array`](../../array "Array")`<`[`Field`](field "haxe.macro.Field - Represents a field in the AST.")`>)`

    Represents an anonymous structure type.

    See also:

    - <https://haxe.org/manual/types-anonymous-structure.html>

    &nbsp;
- name: macro.ComplexType.TExtend()
  id: haxe/macro/complextype#TExtend
  summary: Represents typedef extensions > Iterable<T>. The array p holds the type paths to the given types
  belongs_to: macro.ComplexType
  description: |-
    ### `TExtend(p:`[`Array`](../../array "Array")`<`[`TypePath`](typepath "haxe.macro.TypePath - Represents a type path in the AST.")`>, fields:`[`Array`](../../array "Array")`<`[`Field`](field "haxe.macro.Field - Represents a field in the AST.")`>)`

    Represents typedef extensions `> `[`Iterable`](../../iterable)`<T>`. The array `p` holds the type paths to the given types.

    See also:

    - <https://haxe.org/manual/type-system-extensions.html>

    &nbsp;
- name: macro.ComplexType.TFunction()
  id: haxe/macro/complextype#TFunction
  summary: Represents a function type
  belongs_to: macro.ComplexType
  description: |-
    ### `TFunction(args:`[`Array`](../../array "Array")`<`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`>, ret:`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`)`

    Represents a function type.

    See also:

    - <https://haxe.org/manual/types-function.html>
- name: macro.ComplexType.TIntersection()
  id: haxe/macro/complextype#TIntersection
  summary: Represents an intersection type T1 & T2 & ... & TN
  belongs_to: macro.ComplexType
  description: "### `TIntersection(tl:`[`Array`](../../array \"Array\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>)`\n\nRepresents an intersection type `T1 & T2 & ... & TN`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ComplexType.html](https://api.haxe.org/haxe/macro/ComplexType.html)"
- name: macro.ComplexType.TNamed()
  id: haxe/macro/complextype#TNamed
  summary: Represents a type with a name
  belongs_to: macro.ComplexType
  description: |-
    ### `TNamed(n:`[`String`](../../string "String - The basic String class.")`, t:`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`)`

    Represents a type with a name.
- name: macro.ComplexType.TOptional()
  id: haxe/macro/complextype#TOptional
  summary: Represents an optional type
  belongs_to: macro.ComplexType
  description: |-
    ### `TOptional(t:`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`)`

    Represents an optional type.
- name: macro.ComplexType.TParent()
  id: haxe/macro/complextype#TParent
  summary: Represents parentheses around a type, e.g
  belongs_to: macro.ComplexType
  description: |-
    ### `TParent(t:`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`)`

    Represents parentheses around a type, e.g. the `(`[`Int`](../../int)` -> `[`Void`](../../void)`)` part in `(`[`Int`](../../int)` -> `[`Void`](../../void)`) -> `[`String`](../../string).
- name: macro.ComplexType.TPath()
  id: haxe/macro/complextype#TPath
  summary: Represents the type path
  belongs_to: macro.ComplexType
  description: |-
    ### `TPath(p:`[`TypePath`](typepath "haxe.macro.TypePath - Represents a type path in the AST.")`)`

    Represents the type path.
- name: macro.ComplexTypeTools
  id: haxe/macro/complextypetools
  summary: This class provides some utility methods to work with AST-level types
  description: "# ComplexTypeTools\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nThis class provides some utility methods to work with AST-level types. It is best used through `using `[`haxe.macro.ComplexTypeTools`](complextypetools#ComplexTypeTools) syntax and then provides additional methods on [`haxe.macro.ComplexType`](complextype#ComplexType) instances.\n\n## Static methods\n\n### `static`[`toString`](#toString)`(``c:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nConverts type `c` to a human-readable [`String`](../../string) representation.\n\nThe result is guaranteed to be valid Haxe code, but there may be differences from the original lexical syntax.\n\n### `static`[`toType`](#toType)`(``c:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>`\n\n*Available on macro*\n\nReturns a type corresponding to `c`.\n\nIf `c` is null, the result is null.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ComplexTypeTools.html](https://api.haxe.org/haxe/macro/ComplexTypeTools.html)"
- name: macro.ComplexTypeTools.toString()
  id: haxe/macro/complextypetools#toString
  summary: Converts type c to a human-readable String representation
  belongs_to: macro.ComplexTypeTools
  description: |-
    ### `static`[`toString`](#toString)`(``c:`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`):`[`String`](../../string "String - The basic String class.")

    Converts type `c` to a human-readable [`String`](../../string) representation.

    The result is guaranteed to be valid Haxe code, but there may be differences from the original lexical syntax.
- name: macro.ComplexTypeTools.toType()
  id: haxe/macro/complextypetools#toType
  summary: Returns a type corresponding to c
  belongs_to: macro.ComplexTypeTools
  description: "### `static`[`toType`](#toType)`(``c:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>`\n\n*Available on macro*\n\nReturns a type corresponding to `c`.\n\nIf `c` is null, the result is null.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ComplexTypeTools.html](https://api.haxe.org/haxe/macro/ComplexTypeTools.html)"
- name: macro.Constant
  id: haxe/macro/constant
  summary: Represents a constant
  description: "# Constant\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a constant.\n\nSee also:\n\n- <https://haxe.org/manual/expression-constants.html>\n\n## Values\n\n### `CInt(v:`[`String`](../../string \"String - The basic String class.\")`)`\n\nRepresents an integer literal.\n\n### `CFloat(f:`[`String`](../../string \"String - The basic String class.\")`)`\n\nRepresents a float literal.\n\n### `CString(s:`[`String`](../../string \"String - The basic String class.\")`, kind:`[`StringLiteralKind`](stringliteralkind \"haxe.macro.StringLiteralKind\")`)`\n\nRepresents a string literal.\n\n### `CIdent(s:`[`String`](../../string \"String - The basic String class.\")`)`\n\nRepresents an identifier.\n\n### `CRegexp(r:`[`String`](../../string \"String - The basic String class.\")`, opt:`[`String`](../../string \"String - The basic String class.\")`)`\n\nRepresents a regular expression literal.\n\n### Example: `~/haxe/i`\n\n- The first argument `haxe` is a string with regular expression pattern.\n- The second argument `i` is a string with regular expression flags.\n\nSee also:\n\n- <https://haxe.org/manual/std-regex.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Constant.html](https://api.haxe.org/haxe/macro/Constant.html)"
- name: macro.Constant.CFloat()
  id: haxe/macro/constant#CFloat
  summary: Represents a float literal
  belongs_to: macro.Constant
  description: |-
    ### `CFloat(f:`[`String`](../../string "String - The basic String class.")`)`

    Represents a float literal.
- name: macro.Constant.CIdent()
  id: haxe/macro/constant#CIdent
  summary: Represents an identifier
  belongs_to: macro.Constant
  description: |-
    ### `CIdent(s:`[`String`](../../string "String - The basic String class.")`)`

    Represents an identifier.
- name: macro.Constant.CInt()
  id: haxe/macro/constant#CInt
  summary: Represents an integer literal
  belongs_to: macro.Constant
  description: |-
    ### `CInt(v:`[`String`](../../string "String - The basic String class.")`)`

    Represents an integer literal.
- name: macro.Constant.CRegexp()
  id: haxe/macro/constant#CRegexp
  summary: Represents a regular expression literal
  belongs_to: macro.Constant
  description: "### `CRegexp(r:`[`String`](../../string \"String - The basic String class.\")`, opt:`[`String`](../../string \"String - The basic String class.\")`)`\n\nRepresents a regular expression literal.\n\n### Example: `~/haxe/i`\n\n- The first argument `haxe` is a string with regular expression pattern.\n- The second argument `i` is a string with regular expression flags.\n\nSee also:\n\n- <https://haxe.org/manual/std-regex.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Constant.html](https://api.haxe.org/haxe/macro/Constant.html)"
- name: macro.Constant.CString()
  id: haxe/macro/constant#CString
  summary: Represents a string literal
  belongs_to: macro.Constant
  description: |-
    ### `CString(s:`[`String`](../../string "String - The basic String class.")`, kind:`[`StringLiteralKind`](stringliteralkind "haxe.macro.StringLiteralKind")`)`

    Represents a string literal.
- name: macro.Context
  id: haxe/macro/context
  summary: Context provides an API for macro programming
  description: "# Context\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nContext provides an API for macro programming.\n\nIt contains common functions that interact with the macro interpreter to query or set information. Other API functions are available in the tools classes:\n\n- [`haxe.macro.ComplexTypeTools`](complextypetools#ComplexTypeTools)\n- [`haxe.macro.ExprTools`](exprtools#ExprTools)\n- [`haxe.macro.TypeTools`](typetools#TypeTools)\n\n## Static methods\n\n### `static`[`addResource`](#addResource)`(``name:`[`String`](../../string \"String - The basic String class.\")`,`` ``data:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nMakes resource `data` available as `name`.\n\nThe resource is then available using the [`haxe.macro.Resource`](../resource#Resource) API.\n\nIf a previous resource was bound to `name`, it is overwritten.\n\nCompilation server : when using the compilation server, the resource is bound to the Haxe module which calls the macro, so it will be included again if that module is reused. If this resource concerns several modules, prefix its name with a `$` sign, this will bind it to the macro module instead.\n\n### `static`[`containsDisplayPosition`](#containsDisplayPosition)`(``pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n*Available on neko, macro*\n\nCheck if current display position is within `pos`.\n\n### `static`[`currentPos`](#currentPos)`():`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\n*Available on neko, macro*\n\nReturns the position at which the macro was called.\n\n### `static`[`defineModule`](#defineModule)`(``modulePath:`[`String`](../../string \"String - The basic String class.\")`,`` ``types:`[`Array`](../../array \"Array\")`<`[`TypeDefinition`](typedefinition \"haxe.macro.TypeDefinition - Represents a type definition.\")`>,`` ``?imports:`[`Array`](../../array \"Array\")`<`[`ImportExpr`](importexpr \"haxe.macro.ImportExpr - Represents the import expression.\")`>,`` ``?usings:`[`Array`](../../array \"Array\")`<`[`TypePath`](typepath \"haxe.macro.TypePath - Represents a type path in the AST.\")`>``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nDefines a new module as `modulePath` with several [`TypeDefinition`](typedefinition#TypeDefinition) `types`. This is analogous to defining a .hx file.\n\nThe individual `types` can reference each other and any identifier respects the `imports` and `usings` as usual, expect that imports are not allowed to have `.*` wildcards or `as s` shorthands.\n\n### `static`[`defineType`](#defineType)`(``t:`[`TypeDefinition`](typedefinition \"haxe.macro.TypeDefinition - Represents a type definition.\")`,`` ``?moduleDependency:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nDefines a new type from [`TypeDefinition`](typedefinition#TypeDefinition) `t`.\n\nIf `moduleDependency` is given and is not `null`, it should contain a module path that will be used as a dependency for the newly defined module instead of the current module.\n\n### `static`[`defined`](#defined)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n*Available on neko, macro*\n\nTells if the conditional compilation flag `s` has been set.\n\nCompiler flags are set using the `-D` command line parameter, or by calling [`haxe.macro.Compiler.define`](compiler#define).\n\nSee also:\n\n- <https://haxe.org/manual/lf-condition-compilation.html>\n\n### `static`[`definedValue`](#definedValue)`(``key:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n*Available on neko, macro*\n\nReturns the value defined for the conditional compilation flag `key`.\n\nIf no value is defined for `key`, `null` is returned.\n\nCompiler flags values are set using the `-D key=value` command line parameter, or by calling [`haxe.macro.Compiler.define`](compiler#define).\n\nThe default value is `\"1\"`.\n\nSee also:\n\n- <https://haxe.org/manual/lf-condition-compilation.html>\n\n### `static`[`error`](#error)`(``msg:`[`String`](../../string \"String - The basic String class.\")`,`` ``pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\n*Available on neko, macro*\n\nDisplays a compilation error `msg` at the given [`Position`](position#Position) `pos` and aborts the current macro call.\n\n### `static`[`fatalError`](#fatalError)`(``msg:`[`String`](../../string \"String - The basic String class.\")`,`` ``pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\n*Available on neko, macro*\n\nDisplays a compilation error `msg` at the given [`Position`](position#Position) `pos` and aborts the compilation.\n\n### `static`[`filterMessages`](#filterMessages)`(``predicate:`[`Message`](message \"haxe.macro.Message\")` ‑> `[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nFilters all current info/warning messages. Filtered out messages will not be displayed by the compiler.\n\n### `static`[`follow`](#follow)`(``t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`,`` ``?once:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\n*Available on neko, macro*\n\nFollows a type.\n\nSee [`haxe.macro.TypeTools.follow`](typetools#follow) for details.\n\n### `static`[`followWithAbstracts`](#followWithAbstracts)`(``t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`,`` ``once:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\n*Available on neko, macro*\n\nFollows a type, including abstracts' underlying implementation\n\nSee [`haxe.macro.TypeTools.followWithAbstracts`](typetools#followWithAbstracts) for details.\n\n### `static`[`getBuildFields`](#getBuildFields)`():`[`Array`](../../array \"Array\")`<`[`Field`](field \"haxe.macro.Field - Represents a field in the AST.\")`>`\n\n*Available on neko, macro*\n\nReturns an [`Array`](../../array) of fields of the class which is to be built.\n\nThis is only defined for `@:build/@:autoBuild` macros.\n\n### `static`[`getCallArguments`](#getCallArguments)`():`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>>`\n\n*Available on neko, macro*\n\nReturns the call arguments that lead to the invocation of the current `@:genericBuild` macro, if available.\n\nReturns `null` if the current macro is not a `@:genericBuild` macro.\n\n### `static`[`getClassPath`](#getClassPath)`():`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n*Available on neko, macro*\n\nReturns an [`Array`](../../array) of current class paths in the order of their declaration.\n\nModifying the returned array has no effect on the compiler. Class paths can be added using [`haxe.macro.Compiler.addClassPath`](compiler#addClassPath).\n\n### `static`[`getDefines`](#getDefines)`():`[`Map`](../../map \"Map\")`<`[`String`](../../string \"String - The basic String class.\")`, `[`String`](../../string \"String - The basic String class.\")`>`\n\n*Available on neko, macro*\n\nReturns a map of all conditional compilation flags that have been set.\n\nCompiler flags are set using the `-D` command line parameter, or by calling [`haxe.macro.Compiler.define`](compiler#define).\n\nModifying the returned map has no effect on the compiler.\n\nSee also:\n\n- <https://haxe.org/manual/lf-condition-compilation.html>\n\n### `static`[`getExpectedType`](#getExpectedType)`():`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>`\n\n*Available on neko, macro*\n\nReturns the type which is expected at the place the macro is called.\n\nThis affects usages such as `var x:`[`Int`](../../int)` = macroCall()`, where the expected type will be reported as [`Int`](../../int).\n\nMight return `null` if no specific type is expected or if the calling macro is not an expression-macro.\n\n### `static`[`getLocalClass`](#getLocalClass)`():`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>>`\n\n*Available on neko, macro*\n\nReturns the current class in which the macro was called.\n\nIf no such class exists, `null` is returned.\n\n### `static`[`getLocalImports`](#getLocalImports)`():`[`Array`](../../array \"Array\")`<`[`ImportExpr`](importexpr \"haxe.macro.ImportExpr - Represents the import expression.\")`>`\n\n*Available on neko, macro*\n\nReturns an [`Array`](../../array) of all imports in the context the macro was called.\n\nModifying the returned array has no effect on the compiler.\n\n### `static`[`getLocalMethod`](#getLocalMethod)`():`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n*Available on neko, macro*\n\nReturns the name of the method from which the macro was called.\n\nIf no such method exists, `null` is returned.\n\n### `static`[`getLocalModule`](#getLocalModule)`():`[`String`](../../string \"String - The basic String class.\")\n\n*Available on neko, macro*\n\nReturns the current module path in/on which the macro was called.\n\n### `static`[`getLocalTVars`](#getLocalTVars)`():`[`Map`](../../map \"Map\")`<`[`String`](../../string \"String - The basic String class.\")`, `[`TVar`](tvar \"haxe.macro.TVar - Represents a variable in the typed AST.\")`>`\n\n*Available on neko, macro*\n\nSimilar to `getLocalVars`, but returns elements of type [`TVar`](tvar#TVar) instead of [`Type`](../../type).\n\n### `static`[`getLocalType`](#getLocalType)`():`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>`\n\n*Available on neko, macro*\n\nReturns the current type in/on which the macro was called.\n\nIf no such type exists, `null` is returned.\n\n### `static`[`getLocalUsing`](#getLocalUsing)`():`[`Array`](../../array \"Array\")`<`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>>`\n\n*Available on neko, macro*\n\nReturns an [`Array`](../../array) of classes which are available for `using` usage in the context the macro was called.\n\nModifying the returned array has no effect on the compiler.\n\n### `static`[`getLocalVars`](#getLocalVars)`():`[`Map`](../../map \"Map\")`<`[`String`](../../string \"String - The basic String class.\")`, `[`Type`](type \"haxe.macro.Type - Represents a type.\")`>`\n\n**Deprecated:** \"Use Context.getLocalTVars() instead\"\n\n*Available on neko, macro*\n\nReturns a map of local variables accessible in the context the macro was called.\n\nThe keys of the returned map are the variable names, the values are their types.\n\nModifying the returned map has no effect on the compiler.\n\n### `static`[`getMessages`](#getMessages)`():`[`Array`](../../array \"Array\")`<`[`Message`](message \"haxe.macro.Message\")`>`\n\n*Available on neko, macro*\n\nGets a list of all current compilation info/warning messages.\n\n### `static`[`getModule`](#getModule)`(``name:`[`String`](../../string \"String - The basic String class.\")`):`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>`\n\n*Available on neko, macro*\n\nResolves a module identified by `name` and returns an [`Array`](../../array) of all its contained types.\n\nThe resolution follows the usual class path rules where the last declared class path has priority.\n\nIf no module can be found, an exception of type [`String`](../../string) is thrown.\n\n### `static`[`getPosInfos`](#getPosInfos)`(``p:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):{min:`[`Int`](../../int \"Int - The standard Int type.\")`, max:`[`Int`](../../int \"Int - The standard Int type.\")`, file:`[`String`](../../string \"String - The basic String class.\")`}`\n\n*Available on neko, macro*\n\nReturns the information stored in [`Position`](position#Position) `p`.\n\n### `static`[`getResources`](#getResources)`():`[`Map`](../../map \"Map\")`<`[`String`](../../string \"String - The basic String class.\")`, `[`Bytes`](../io/bytes \"haxe.io.Bytes\")`>`\n\n*Available on neko, macro*\n\nReturns a map of all registered resources for this compilation unit.\n\nModifying the returned map has no effect on the compilation, use [`haxe.macro.Context.addResource`](context#addResource) to add new resources to the compilation unit.\n\n### `static`[`getType`](#getType)`(``name:`[`String`](../../string \"String - The basic String class.\")`):`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\n*Available on neko, macro*\n\nResolves a type identified by `name`.\n\nThe resolution follows the usual class path rules where the last declared class path has priority.\n\nIf no type can be found, an exception of type [`String`](../../string) is thrown.\n\n### `static`[`getTypedExpr`](#getTypedExpr)`(``t:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`):`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\n*Available on neko, macro*\n\nReturns a syntax-level expression corresponding to typed expression `t`.\n\nThis process may lose some information.\n\n### `static`[`info`](#info)`(``msg:`[`String`](../../string \"String - The basic String class.\")`,`` ``pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nDisplays a compilation info `msg` at the given [`Position`](position#Position) `pos`.\n\n### `static`[`makeExpr`](#makeExpr)`(``v:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\n*Available on neko, macro*\n\nBuilds an expression from `v`.\n\nThis method generates AST nodes depending on the macro-runtime value of `v`. As such, only basic types and enums are supported and the behavior for other types is undefined.\n\nThe provided [`Position`](position#Position) `pos` is used for all generated inner AST nodes.\n\n### `static`[`makePosition`](#makePosition)`(``inf:{min:`[`Int`](../../int \"Int - The standard Int type.\")`, max:`[`Int`](../../int \"Int - The standard Int type.\")`, file:`[`String`](../../string \"String - The basic String class.\")`}``):`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\n*Available on neko, macro*\n\nBuilds a [`Position`](position#Position) from `inf`.\n\n### `static`[`onAfterGenerate`](#onAfterGenerate)`(``callback:() ‑> `[`Void`](../../void \"Void - The standard Void type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nAdds a callback function `callback` which is invoked after the compiler generation phase.\n\nCompilation has completed at this point and cannot be influenced anymore. However, contextual information is still available.\n\n*Note*: the callback is still invoked when generation is disabled with `--no-output`.\n\n### `static`[`onAfterTyping`](#onAfterTyping)`(``callback:`[`Array`](../../array \"Array\")`<`[`ModuleType`](moduletype \"haxe.macro.ModuleType - Represents a module type.\")`> ‑> `[`Void`](../../void \"Void - The standard Void type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nAdds a callback function `callback` which is invoked after the compiler is done typing, but before optimization. The callback receives the types which have been typed.\n\nIt is possible to define new types in the callback, in which case it will be called again with the new types as argument.\n\n### `static`[`onGenerate`](#onGenerate)`(``callback:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`> ‑> `[`Void`](../../void \"Void - The standard Void type.\")`,`` ``persistent:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nAdds a callback function `callback` which is invoked after the compiler's typing phase, just before its generation phase.\n\nThe callback receives an [`Array`](../../array) containing all types which are about to be generated. Modifications are limited to metadata, it is mainly intended to obtain information.\n\nBy default, the callback is made before types are stored in the compilation server, if active. This means that any effect persists for the next compilation. If `persistent` is set to [`false`](../../bool), changes to types made by the callback only affect the current compilation. If no compilation server is used, this flag has no effect.\n\n*Note*: the callback is still invoked when generation is disabled with `--no-output`.\n\n### `static`[`onMacroContextReused`](#onMacroContextReused)`(``callb:() ‑> `[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n**Deprecated:**\n\n*Available on neko, macro*\n\n### `static`[`onTypeNotFound`](#onTypeNotFound)`(``callback:`[`String`](../../string \"String - The basic String class.\")` ‑> `[`TypeDefinition`](typedefinition \"haxe.macro.TypeDefinition - Represents a type definition.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nAdds a callback function `callback` which is invoked when a type name cannot be resolved.\n\nThe callback may return a type definition, which is then used for the expected type. If it returns `null`, the type is considered to still not exist.\n\n### `static`[`parse`](#parse)`(``expr:`[`String`](../../string \"String - The basic String class.\")`,`` ``pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\n*Available on neko, macro*\n\nParses `expr` as Haxe code, returning the corresponding AST.\n\nString interpolation of single quote strings within `expr` is not supported.\n\nThe provided [`Position`](position#Position) `pos` is used for all generated inner AST nodes.\n\n### `static`[`parseInlineString`](#parseInlineString)`(``expr:`[`String`](../../string \"String - The basic String class.\")`,`` ``pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\n*Available on neko, macro*\n\nSimilar to `parse`, but error positions are reported within the provided String `expr`.\n\n### `static`[`registerModuleDependency`](#registerModuleDependency)`(``modulePath:`[`String`](../../string \"String - The basic String class.\")`,`` ``externFile:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nManually adds a dependency between module `modulePath` and an external file `externFile`.\n\nThis affects the compilation cache, causing the module to be typed if `externFile` has changed.\n\nHas no effect if the compilation cache is not used.\n\n### `static`[`registerModuleReuseCall`](#registerModuleReuseCall)`(``modulePath:`[`String`](../../string \"String - The basic String class.\")`,`` ``macroCall:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n**Deprecated:**\n\n*Available on neko, macro*\n\n### `static`[`resolvePath`](#resolvePath)`(``file:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n*Available on neko, macro*\n\nResolves a file name `file` based on the current class paths.\n\nThe resolution follows the usual class path rules where the last declared class path has priority.\n\nIf a class path was declared relative, this method returns the relative file path. Otherwise it returns the absolute file path.\n\n### `static`[`resolveType`](#resolveType)`(``t:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`,`` ``p:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\n*Available on neko, macro*\n\nResolve type `t` and returns the corresponding [`Type`](../../type).\n\nResolving the type may result in a compiler error which can be caught using `try ... catch`. Resolution is performed based on the current context in which the macro is called.\n\n### `static`[`signature`](#signature)`(``v:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n*Available on neko, macro*\n\nReturns a hashed MD5 signature of value `v`.\n\n### `static`[`storeExpr`](#storeExpr)`(``e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`):`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\n*Available on neko, macro*\n\nTypes expression `e`, stores the resulting typed expression internally and returns a syntax-level expression that can be returned from a macro and will be replaced by the stored typed expression.\n\nIf `e` is `null` or invalid, an exception is thrown.\n\nA call to `storeExpr(e)` is equivalent to `storeTypedExpr(typeExpr(e))` without the overhead of encoding and decoding between regular and macro runtime.\n\nNOTE: the returned value references an internally stored typed expression that is reset between compilations, so care should be taken when storing the expression returned by this method in a static variable and using the compilation server.\n\n### `static`[`storeTypedExpr`](#storeTypedExpr)`(``t:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`):`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\n*Available on neko, macro*\n\nStore typed expression `t` internally and give a syntax-level expression that can be returned from a macro and will be replaced by the stored typed expression.\n\nIf `t` is `null` or invalid, an exception is thrown.\n\nNOTE: the returned value references an internally stored typed expression that is reset between compilations, so care should be taken when storing the expression returned by this method in a static variable and using the compilation server.\n\n### `static`[`timer`](#timer)`(``id:`[`String`](../../string \"String - The basic String class.\")`):() ‑> `[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nCreates a timer which will be printed in the compilation report if `--times` compilation argument is set.\n\nNote that a timer may be omitted from the report if the amount of time measured is too small.\n\nThis method immediately starts a timer and returns a function to stop it:\n\n    var stopTimer = haxe.macro.Context.timer(\"my heavy task\");\n    runTask();\n    stopTimer();\n\n### `static`[`toComplexType`](#toComplexType)`(``t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>`\n\n*Available on neko, macro*\n\nReturns the [`ComplexType`](complextype#ComplexType) corresponding to the given [`Type`](../../type) `t`.\n\nSee [`haxe.macro.TypeTools.toComplexType`](typetools#toComplexType) for details.\n\n### `static`[`typeExpr`](#typeExpr)`(``e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`):`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")\n\n*Available on neko, macro*\n\nTypes expression `e` and returns the corresponding [`TypedExpr`](typedexpr#TypedExpr).\n\nTyping the expression may result in a compiler error which can be caught using `try ... catch`.\n\n### `static`[`typeof`](#typeof)`(``e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`):`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\n*Available on neko, macro*\n\nTypes expression `e` and returns its type.\n\nTyping the expression may result in a compiler error which can be caught using `try ... catch`.\n\n### `static`[`unify`](#unify)`(``t1:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`,`` ``t2:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n*Available on neko, macro*\n\nTries to unify `t1` and `t2` and returns [`true`](../../bool) if successful.\n\n### `static`[`warning`](#warning)`(``msg:`[`String`](../../string \"String - The basic String class.\")`,`` ``pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nDisplays a compilation warning `msg` at the given [`Position`](position#Position) `pos`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Context.html](https://api.haxe.org/haxe/macro/Context.html)"
- name: macro.Context.addResource()
  id: haxe/macro/context#addResource
  summary: Makes resource data available as name
  belongs_to: macro.Context
  description: |-
    ### `static`[`addResource`](#addResource)`(``name:`[`String`](../../string "String - The basic String class.")`,``data:`[`Bytes`](../io/bytes "haxe.io.Bytes")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Makes resource `data` available as `name`.

    The resource is then available using the [`haxe.macro.Resource`](../resource#Resource) API.

    If a previous resource was bound to `name`, it is overwritten.

    Compilation server : when using the compilation server, the resource is bound to the Haxe module which calls the macro, so it will be included again if that module is reused. If this resource concerns several modules, prefix its name with a `$` sign, this will bind it to the macro module instead.
- name: macro.Context.containsDisplayPosition()
  id: haxe/macro/context#containsDisplayPosition
  summary: Check if current display position is within pos
  belongs_to: macro.Context
  description: |-
    ### `static`[`containsDisplayPosition`](#containsDisplayPosition)`(``pos:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    *Available on neko, macro*

    Check if current display position is within `pos`.
- name: macro.Context.currentPos()
  id: haxe/macro/context#currentPos
  summary: Returns the position at which the macro was called
  belongs_to: macro.Context
  description: |-
    ### `static`[`currentPos`](#currentPos)`():`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    *Available on neko, macro*

    Returns the position at which the macro was called.
- name: macro.Context.defined()
  id: haxe/macro/context#defined
  summary: Tells if the conditional compilation flag s has been set
  belongs_to: macro.Context
  description: |-
    ### `static`[`defined`](#defined)`(``s:`[`String`](../../string "String - The basic String class.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    *Available on neko, macro*

    Tells if the conditional compilation flag `s` has been set.

    Compiler flags are set using the `-D` command line parameter, or by calling [`haxe.macro.Compiler.define`](compiler#define).

    See also:

    - <https://haxe.org/manual/lf-condition-compilation.html>
- name: macro.Context.definedValue()
  id: haxe/macro/context#definedValue
  summary: Returns the value defined for the conditional compilation flag key
  belongs_to: macro.Context
  description: |-
    ### `static`[`definedValue`](#definedValue)`(``key:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    *Available on neko, macro*

    Returns the value defined for the conditional compilation flag `key`.

    If no value is defined for `key`, `null` is returned.

    Compiler flags values are set using the `-D key=value` command line parameter, or by calling [`haxe.macro.Compiler.define`](compiler#define).

    The default value is `"1"`.

    See also:

    - <https://haxe.org/manual/lf-condition-compilation.html>

    &nbsp;
- name: macro.Context.defineModule()
  id: haxe/macro/context#defineModule
  summary: Defines a new module as modulePath with several TypeDefinition types
  belongs_to: macro.Context
  description: |-
    ### `static`[`defineModule`](#defineModule)`(``modulePath:`[`String`](../../string "String - The basic String class.")`,``types:`[`Array`](../../array "Array")`<`[`TypeDefinition`](typedefinition "haxe.macro.TypeDefinition - Represents a type definition.")`>,``?imports:`[`Array`](../../array "Array")`<`[`ImportExpr`](importexpr "haxe.macro.ImportExpr - Represents the import expression.")`>,``?usings:`[`Array`](../../array "Array")`<`[`TypePath`](typepath "haxe.macro.TypePath - Represents a type path in the AST.")`>``):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Defines a new module as `modulePath` with several [`TypeDefinition`](typedefinition#TypeDefinition) `types`. This is analogous to defining a .hx file.

    The individual `types` can reference each other and any identifier respects the `imports` and `usings` as usual, expect that imports are not allowed to have `.*` wildcards or `as s` shorthands.
- name: macro.Context.defineType()
  id: haxe/macro/context#defineType
  summary: Defines a new type from TypeDefinition t
  belongs_to: macro.Context
  description: |-
    ### `static`[`defineType`](#defineType)`(``t:`[`TypeDefinition`](typedefinition "haxe.macro.TypeDefinition - Represents a type definition.")`,``?moduleDependency:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Defines a new type from [`TypeDefinition`](typedefinition#TypeDefinition) `t`.

    If `moduleDependency` is given and is not `null`, it should contain a module path that will be used as a dependency for the newly defined module instead of the current module.
- name: macro.Context.error()
  id: haxe/macro/context#error
  summary: Displays a compilation error msg at the given Position pos and aborts the current macro call
  belongs_to: macro.Context
  description: |-
    ### `static`[`error`](#error)`(``msg:`[`String`](../../string "String - The basic String class.")`,``pos:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")`):`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")

    *Available on neko, macro*

    Displays a compilation error `msg` at the given [`Position`](position#Position) `pos` and aborts the current macro call.
- name: macro.Context.fatalError()
  id: haxe/macro/context#fatalError
  summary: Displays a compilation error msg at the given Position pos and aborts the compilation
  belongs_to: macro.Context
  description: |-
    ### `static`[`fatalError`](#fatalError)`(``msg:`[`String`](../../string "String - The basic String class.")`,``pos:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")`):`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")

    *Available on neko, macro*

    Displays a compilation error `msg` at the given [`Position`](position#Position) `pos` and aborts the compilation.
- name: macro.Context.filterMessages()
  id: haxe/macro/context#filterMessages
  summary: Filters all current info/warning messages
  belongs_to: macro.Context
  description: |-
    ### `static`[`filterMessages`](#filterMessages)`(``predicate:`[`Message`](message "haxe.macro.Message")` ‑> `[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Filters all current info/warning messages. Filtered out messages will not be displayed by the compiler.
- name: macro.Context.follow()
  id: haxe/macro/context#follow
  summary: Follows a type
  belongs_to: macro.Context
  description: |-
    ### `static`[`follow`](#follow)`(``t:`[`Type`](type "haxe.macro.Type - Represents a type.")`,``?once:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Type`](type "haxe.macro.Type - Represents a type.")

    *Available on neko, macro*

    Follows a type.

    See [`haxe.macro.TypeTools.follow`](typetools#follow) for details.
- name: macro.Context.followWithAbstracts()
  id: haxe/macro/context#followWithAbstracts
  summary: See haxe.macro.TypeTools.followWithAbstracts for details
  belongs_to: macro.Context
  description: |-
    ### `static`[`followWithAbstracts`](#followWithAbstracts)`(``t:`[`Type`](type "haxe.macro.Type - Represents a type.")`,``once:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = false``):`[`Type`](type "haxe.macro.Type - Represents a type.")

    *Available on neko, macro*

    Follows a type, including abstracts' underlying implementation

    See [`haxe.macro.TypeTools.followWithAbstracts`](typetools#followWithAbstracts) for details.
- name: macro.Context.getBuildFields()
  id: haxe/macro/context#getBuildFields
  summary: Returns an Array of fields of the class which is to be built
  belongs_to: macro.Context
  description: |-
    ### `static`[`getBuildFields`](#getBuildFields)`():`[`Array`](../../array "Array")`<`[`Field`](field "haxe.macro.Field - Represents a field in the AST.")`>`

    *Available on neko, macro*

    Returns an [`Array`](../../array) of fields of the class which is to be built.

    This is only defined for `@:build/@:autoBuild` macros.
- name: macro.Context.getCallArguments()
  id: haxe/macro/context#getCallArguments
  summary: Returns the call arguments that lead to the invocation of the current @:genericBuild macro, if available
  belongs_to: macro.Context
  description: |-
    ### `static`[`getCallArguments`](#getCallArguments)`():`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Array`](../../array "Array")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>>`

    *Available on neko, macro*

    Returns the call arguments that lead to the invocation of the current `@:genericBuild` macro, if available.

    Returns `null` if the current macro is not a `@:genericBuild` macro.
- name: macro.Context.getClassPath()
  id: haxe/macro/context#getClassPath
  summary: Returns an Array of current class paths in the order of their declaration
  belongs_to: macro.Context
  description: |-
    ### `static`[`getClassPath`](#getClassPath)`():`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`

    *Available on neko, macro*

    Returns an [`Array`](../../array) of current class paths in the order of their declaration.

    Modifying the returned array has no effect on the compiler. Class paths can be added using [`haxe.macro.Compiler.addClassPath`](compiler#addClassPath).
- name: macro.Context.getDefines()
  id: haxe/macro/context#getDefines
  summary: Returns a map of all conditional compilation flags that have been set
  belongs_to: macro.Context
  description: |-
    ### `static`[`getDefines`](#getDefines)`():`[`Map`](../../map "Map")`<`[`String`](../../string "String - The basic String class.")`, `[`String`](../../string "String - The basic String class.")`>`

    *Available on neko, macro*

    Returns a map of all conditional compilation flags that have been set.

    Compiler flags are set using the `-D` command line parameter, or by calling [`haxe.macro.Compiler.define`](compiler#define).

    Modifying the returned map has no effect on the compiler.

    See also:

    - <https://haxe.org/manual/lf-condition-compilation.html>

    &nbsp;
- name: macro.Context.getExpectedType()
  id: haxe/macro/context#getExpectedType
  summary: Returns the type which is expected at the place the macro is called
  belongs_to: macro.Context
  description: |-
    ### `static`[`getExpectedType`](#getExpectedType)`():`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>`

    *Available on neko, macro*

    Returns the type which is expected at the place the macro is called.

    This affects usages such as `var x:`[`Int`](../../int)` = macroCall()`, where the expected type will be reported as [`Int`](../../int).

    Might return `null` if no specific type is expected or if the calling macro is not an expression-macro.
- name: macro.Context.getLocalClass()
  id: haxe/macro/context#getLocalClass
  summary: Returns the current class in which the macro was called
  belongs_to: macro.Context
  description: |-
    ### `static`[`getLocalClass`](#getLocalClass)`():`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>>`

    *Available on neko, macro*

    Returns the current class in which the macro was called.

    If no such class exists, `null` is returned.
- name: macro.Context.getLocalImports()
  id: haxe/macro/context#getLocalImports
  summary: Returns an Array of all imports in the context the macro was called
  belongs_to: macro.Context
  description: |-
    ### `static`[`getLocalImports`](#getLocalImports)`():`[`Array`](../../array "Array")`<`[`ImportExpr`](importexpr "haxe.macro.ImportExpr - Represents the import expression.")`>`

    *Available on neko, macro*

    Returns an [`Array`](../../array) of all imports in the context the macro was called.

    Modifying the returned array has no effect on the compiler.
- name: macro.Context.getLocalMethod()
  id: haxe/macro/context#getLocalMethod
  summary: Returns the name of the method from which the macro was called
  belongs_to: macro.Context
  description: |-
    ### `static`[`getLocalMethod`](#getLocalMethod)`():`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    *Available on neko, macro*

    Returns the name of the method from which the macro was called.

    If no such method exists, `null` is returned.
- name: macro.Context.getLocalModule()
  id: haxe/macro/context#getLocalModule
  summary: Returns the current module path in/on which the macro was called
  belongs_to: macro.Context
  description: |-
    ### `static`[`getLocalModule`](#getLocalModule)`():`[`String`](../../string "String - The basic String class.")

    *Available on neko, macro*

    Returns the current module path in/on which the macro was called.
- name: macro.Context.getLocalTVars()
  id: haxe/macro/context#getLocalTVars
  summary: Similar to getLocalVars, but returns elements of type TVar instead of Type
  belongs_to: macro.Context
  description: |-
    ### `static`[`getLocalTVars`](#getLocalTVars)`():`[`Map`](../../map "Map")`<`[`String`](../../string "String - The basic String class.")`, `[`TVar`](tvar "haxe.macro.TVar - Represents a variable in the typed AST.")`>`

    *Available on neko, macro*

    Similar to `getLocalVars`, but returns elements of type [`TVar`](tvar#TVar) instead of [`Type`](../../type).
- name: macro.Context.getLocalType()
  id: haxe/macro/context#getLocalType
  summary: Returns the current type in/on which the macro was called
  belongs_to: macro.Context
  description: |-
    ### `static`[`getLocalType`](#getLocalType)`():`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>`

    *Available on neko, macro*

    Returns the current type in/on which the macro was called.

    If no such type exists, `null` is returned.
- name: macro.Context.getLocalUsing()
  id: haxe/macro/context#getLocalUsing
  summary: Returns an Array of classes which are available for using usage in the context the macro was called
  belongs_to: macro.Context
  description: |-
    ### `static`[`getLocalUsing`](#getLocalUsing)`():`[`Array`](../../array "Array")`<`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>>`

    *Available on neko, macro*

    Returns an [`Array`](../../array) of classes which are available for `using` usage in the context the macro was called.

    Modifying the returned array has no effect on the compiler.
- name: macro.Context.getLocalVars()
  id: haxe/macro/context#getLocalVars
  summary: Returns a map of local variables accessible in the context the macro was called
  belongs_to: macro.Context
  description: |-
    ### `static`[`getLocalVars`](#getLocalVars)`():`[`Map`](../../map "Map")`<`[`String`](../../string "String - The basic String class.")`, `[`Type`](type "haxe.macro.Type - Represents a type.")`>`

    **Deprecated:** "Use Context.getLocalTVars() instead"

    *Available on neko, macro*

    Returns a map of local variables accessible in the context the macro was called.

    The keys of the returned map are the variable names, the values are their types.

    Modifying the returned map has no effect on the compiler.
- name: macro.Context.getMessages()
  id: haxe/macro/context#getMessages
  summary: Gets a list of all current compilation info/warning messages
  belongs_to: macro.Context
  description: |-
    ### `static`[`getMessages`](#getMessages)`():`[`Array`](../../array "Array")`<`[`Message`](message "haxe.macro.Message")`>`

    *Available on neko, macro*

    Gets a list of all current compilation info/warning messages.
- name: macro.Context.getModule()
  id: haxe/macro/context#getModule
  summary: Resolves a module identified by name and returns an Array of all its contained types
  belongs_to: macro.Context
  description: |-
    ### `static`[`getModule`](#getModule)`(``name:`[`String`](../../string "String - The basic String class.")`):`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>`

    *Available on neko, macro*

    Resolves a module identified by `name` and returns an [`Array`](../../array) of all its contained types.

    The resolution follows the usual class path rules where the last declared class path has priority.

    If no module can be found, an exception of type [`String`](../../string) is thrown.
- name: macro.Context.getPosInfos()
  id: haxe/macro/context#getPosInfos
  summary: Returns the information stored in Position p
  belongs_to: macro.Context
  description: |-
    ### `static`[`getPosInfos`](#getPosInfos)`(``p:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")`):{min:`[`Int`](../../int "Int - The standard Int type.")`, max:`[`Int`](../../int "Int - The standard Int type.")`, file:`[`String`](../../string "String - The basic String class.")`}`

    *Available on neko, macro*

    Returns the information stored in [`Position`](position#Position) `p`.
- name: macro.Context.getResources()
  id: haxe/macro/context#getResources
  summary: Returns a map of all registered resources for this compilation unit
  belongs_to: macro.Context
  description: |-
    ### `static`[`getResources`](#getResources)`():`[`Map`](../../map "Map")`<`[`String`](../../string "String - The basic String class.")`, `[`Bytes`](../io/bytes "haxe.io.Bytes")`>`

    *Available on neko, macro*

    Returns a map of all registered resources for this compilation unit.

    Modifying the returned map has no effect on the compilation, use [`haxe.macro.Context.addResource`](context#addResource) to add new resources to the compilation unit.
- name: macro.Context.getType()
  id: haxe/macro/context#getType
  summary: Resolves a type identified by name
  belongs_to: macro.Context
  description: |-
    ### `static`[`getType`](#getType)`(``name:`[`String`](../../string "String - The basic String class.")`):`[`Type`](type "haxe.macro.Type - Represents a type.")

    *Available on neko, macro*

    Resolves a type identified by `name`.

    The resolution follows the usual class path rules where the last declared class path has priority.

    If no type can be found, an exception of type [`String`](../../string) is thrown.
- name: macro.Context.getTypedExpr()
  id: haxe/macro/context#getTypedExpr
  summary: Returns a syntax-level expression corresponding to typed expression t
  belongs_to: macro.Context
  description: |-
    ### `static`[`getTypedExpr`](#getTypedExpr)`(``t:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`):`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")

    *Available on neko, macro*

    Returns a syntax-level expression corresponding to typed expression `t`.

    This process may lose some information.
- name: macro.Context.info()
  id: haxe/macro/context#info
  summary: Displays a compilation info msg at the given Position pos
  belongs_to: macro.Context
  description: |-
    ### `static`[`info`](#info)`(``msg:`[`String`](../../string "String - The basic String class.")`,``pos:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Displays a compilation info `msg` at the given [`Position`](position#Position) `pos`.
- name: macro.Context.makeExpr()
  id: haxe/macro/context#makeExpr
  summary: Builds an expression from v
  belongs_to: macro.Context
  description: |-
    ### `static`[`makeExpr`](#makeExpr)`(``v:`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`,``pos:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")`):`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")

    *Available on neko, macro*

    Builds an expression from `v`.

    This method generates AST nodes depending on the macro-runtime value of `v`. As such, only basic types and enums are supported and the behavior for other types is undefined.

    The provided [`Position`](position#Position) `pos` is used for all generated inner AST nodes.
- name: macro.Context.makePosition()
  id: haxe/macro/context#makePosition
  summary: Builds a Position from inf
  belongs_to: macro.Context
  description: |-
    ### `static`[`makePosition`](#makePosition)`(``inf:{min:`[`Int`](../../int "Int - The standard Int type.")`, max:`[`Int`](../../int "Int - The standard Int type.")`, file:`[`String`](../../string "String - The basic String class.")`}``):`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    *Available on neko, macro*

    Builds a [`Position`](position#Position) from `inf`.
- name: macro.Context.onAfterGenerate()
  id: haxe/macro/context#onAfterGenerate
  summary: Adds a callback function callback which is invoked after the compiler generation phase
  belongs_to: macro.Context
  description: |-
    ### `static`[`onAfterGenerate`](#onAfterGenerate)`(``callback:() ‑> `[`Void`](../../void "Void - The standard Void type.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Adds a callback function `callback` which is invoked after the compiler generation phase.

    Compilation has completed at this point and cannot be influenced anymore. However, contextual information is still available.

    *Note*: the callback is still invoked when generation is disabled with `--no-output`.
- name: macro.Context.onAfterTyping()
  id: haxe/macro/context#onAfterTyping
  summary: Adds a callback function callback which is invoked after the compiler is done typing, but before optimization
  belongs_to: macro.Context
  description: |-
    ### `static`[`onAfterTyping`](#onAfterTyping)`(``callback:`[`Array`](../../array "Array")`<`[`ModuleType`](moduletype "haxe.macro.ModuleType - Represents a module type.")`> ‑> `[`Void`](../../void "Void - The standard Void type.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Adds a callback function `callback` which is invoked after the compiler is done typing, but before optimization. The callback receives the types which have been typed.

    It is possible to define new types in the callback, in which case it will be called again with the new types as argument.
- name: macro.Context.onGenerate()
  id: haxe/macro/context#onGenerate
  summary: Adds a callback function callback which is invoked after the compiler's typing phase, just before its generation phase
  belongs_to: macro.Context
  description: |-
    ### `static`[`onGenerate`](#onGenerate)`(``callback:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`> ‑> `[`Void`](../../void "Void - The standard Void type.")`,``persistent:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = true``):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Adds a callback function `callback` which is invoked after the compiler's typing phase, just before its generation phase.

    The callback receives an [`Array`](../../array) containing all types which are about to be generated. Modifications are limited to metadata, it is mainly intended to obtain information.

    By default, the callback is made before types are stored in the compilation server, if active. This means that any effect persists for the next compilation. If `persistent` is set to [`false`](../../bool), changes to types made by the callback only affect the current compilation. If no compilation server is used, this flag has no effect.

    *Note*: the callback is still invoked when generation is disabled with `--no-output`.
- name: macro.Context.onMacroContextReused()
  id: haxe/macro/context#onMacroContextReused
  summary: null
  belongs_to: macro.Context
  description: |-
    ### `static`[`onMacroContextReused`](#onMacroContextReused)`(``callb:() ‑> `[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Void`](../../void "Void - The standard Void type.")

    **Deprecated:**

    *Available on neko, macro*
- name: macro.Context.onTypeNotFound()
  id: haxe/macro/context#onTypeNotFound
  summary: Adds a callback function callback which is invoked when a type name cannot be resolved
  belongs_to: macro.Context
  description: |-
    ### `static`[`onTypeNotFound`](#onTypeNotFound)`(``callback:`[`String`](../../string "String - The basic String class.")` ‑> `[`TypeDefinition`](typedefinition "haxe.macro.TypeDefinition - Represents a type definition.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Adds a callback function `callback` which is invoked when a type name cannot be resolved.

    The callback may return a type definition, which is then used for the expected type. If it returns `null`, the type is considered to still not exist.
- name: macro.Context.parse()
  id: haxe/macro/context#parse
  summary: Parses expr as Haxe code, returning the corresponding AST
  belongs_to: macro.Context
  description: |-
    ### `static`[`parse`](#parse)`(``expr:`[`String`](../../string "String - The basic String class.")`,``pos:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")`):`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")

    *Available on neko, macro*

    Parses `expr` as Haxe code, returning the corresponding AST.

    String interpolation of single quote strings within `expr` is not supported.

    The provided [`Position`](position#Position) `pos` is used for all generated inner AST nodes.
- name: macro.Context.parseInlineString()
  id: haxe/macro/context#parseInlineString
  summary: Similar to parse, but error positions are reported within the provided String expr
  belongs_to: macro.Context
  description: |-
    ### `static`[`parseInlineString`](#parseInlineString)`(``expr:`[`String`](../../string "String - The basic String class.")`,``pos:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")`):`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")

    *Available on neko, macro*

    Similar to `parse`, but error positions are reported within the provided String `expr`.
- name: macro.Context.registerModuleDependency()
  id: haxe/macro/context#registerModuleDependency
  summary: Manually adds a dependency between module modulePath and an external file externFile
  belongs_to: macro.Context
  description: |-
    ### `static`[`registerModuleDependency`](#registerModuleDependency)`(``modulePath:`[`String`](../../string "String - The basic String class.")`,``externFile:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Manually adds a dependency between module `modulePath` and an external file `externFile`.

    This affects the compilation cache, causing the module to be typed if `externFile` has changed.

    Has no effect if the compilation cache is not used.
- name: macro.Context.registerModuleReuseCall()
  id: haxe/macro/context#registerModuleReuseCall
  summary: null
  belongs_to: macro.Context
  description: |-
    ### `static`[`registerModuleReuseCall`](#registerModuleReuseCall)`(``modulePath:`[`String`](../../string "String - The basic String class.")`,``macroCall:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    **Deprecated:**

    *Available on neko, macro*
- name: macro.Context.resolvePath()
  id: haxe/macro/context#resolvePath
  summary: Resolves a file name file based on the current class paths
  belongs_to: macro.Context
  description: |-
    ### `static`[`resolvePath`](#resolvePath)`(``file:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    *Available on neko, macro*

    Resolves a file name `file` based on the current class paths.

    The resolution follows the usual class path rules where the last declared class path has priority.

    If a class path was declared relative, this method returns the relative file path. Otherwise it returns the absolute file path.
- name: macro.Context.resolveType()
  id: haxe/macro/context#resolveType
  summary: Resolve type t and returns the corresponding Type
  belongs_to: macro.Context
  description: |-
    ### `static`[`resolveType`](#resolveType)`(``t:`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`,``p:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")`):`[`Type`](type "haxe.macro.Type - Represents a type.")

    *Available on neko, macro*

    Resolve type `t` and returns the corresponding [`Type`](../../type).

    Resolving the type may result in a compiler error which can be caught using `try ... catch`. Resolution is performed based on the current context in which the macro is called.
- name: macro.Context.signature()
  id: haxe/macro/context#signature
  summary: Returns a hashed MD5 signature of value v
  belongs_to: macro.Context
  description: |-
    ### `static`[`signature`](#signature)`(``v:`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`String`](../../string "String - The basic String class.")

    *Available on neko, macro*

    Returns a hashed MD5 signature of value `v`.
- name: macro.Context.storeExpr()
  id: haxe/macro/context#storeExpr
  summary: Types expression e, stores the resulting typed expression internally and returns a syntax-level expression that can be returned from a macro and will be replaced by the stored typed expression
  belongs_to: macro.Context
  description: |-
    ### `static`[`storeExpr`](#storeExpr)`(``e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`):`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")

    *Available on neko, macro*

    Types expression `e`, stores the resulting typed expression internally and returns a syntax-level expression that can be returned from a macro and will be replaced by the stored typed expression.

    If `e` is `null` or invalid, an exception is thrown.

    A call to `storeExpr(e)` is equivalent to `storeTypedExpr(typeExpr(e))` without the overhead of encoding and decoding between regular and macro runtime.

    NOTE: the returned value references an internally stored typed expression that is reset between compilations, so care should be taken when storing the expression returned by this method in a static variable and using the compilation server.
- name: macro.Context.storeTypedExpr()
  id: haxe/macro/context#storeTypedExpr
  summary: Store typed expression t internally and give a syntax-level expression that can be returned from a macro and will be replaced by the stored typed expression
  belongs_to: macro.Context
  description: |-
    ### `static`[`storeTypedExpr`](#storeTypedExpr)`(``t:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`):`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")

    *Available on neko, macro*

    Store typed expression `t` internally and give a syntax-level expression that can be returned from a macro and will be replaced by the stored typed expression.

    If `t` is `null` or invalid, an exception is thrown.

    NOTE: the returned value references an internally stored typed expression that is reset between compilations, so care should be taken when storing the expression returned by this method in a static variable and using the compilation server.
- name: macro.Context.timer()
  id: haxe/macro/context#timer
  summary: Creates a timer which will be printed in the compilation report if --times compilation argument is set
  belongs_to: macro.Context
  description: |-
    ### `static`[`timer`](#timer)`(``id:`[`String`](../../string "String - The basic String class.")`):() ‑> `[`Void`](../../void "Void - The standard Void type.")

    *Available on neko, macro*

    Creates a timer which will be printed in the compilation report if `--times` compilation argument is set.

    Note that a timer may be omitted from the report if the amount of time measured is too small.

    This method immediately starts a timer and returns a function to stop it:

              var stopTimer = haxe.macro.Context.timer("my heavy task");
        runTask();
        stopTimer();
- name: macro.Context.toComplexType()
  id: haxe/macro/context#toComplexType
  summary: Returns the ComplexType corresponding to the given Type t
  belongs_to: macro.Context
  description: |-
    ### `static`[`toComplexType`](#toComplexType)`(``t:`[`Type`](type "haxe.macro.Type - Represents a type.")`):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`>`

    *Available on neko, macro*

    Returns the [`ComplexType`](complextype#ComplexType) corresponding to the given [`Type`](../../type) `t`.

    See [`haxe.macro.TypeTools.toComplexType`](typetools#toComplexType) for details.
- name: macro.Context.typeExpr()
  id: haxe/macro/context#typeExpr
  summary: Types expression e and returns the corresponding TypedExpr
  belongs_to: macro.Context
  description: |-
    ### `static`[`typeExpr`](#typeExpr)`(``e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`):`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")

    *Available on neko, macro*

    Types expression `e` and returns the corresponding [`TypedExpr`](typedexpr#TypedExpr).

    Typing the expression may result in a compiler error which can be caught using `try ... catch`.
- name: macro.Context.typeof()
  id: haxe/macro/context#typeof
  summary: Types expression e and returns its type
  belongs_to: macro.Context
  description: |-
    ### `static`[`typeof`](#typeof)`(``e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`):`[`Type`](type "haxe.macro.Type - Represents a type.")

    *Available on neko, macro*

    Types expression `e` and returns its type.

    Typing the expression may result in a compiler error which can be caught using `try ... catch`.
- name: macro.Context.unify()
  id: haxe/macro/context#unify
  summary: Tries to unify t1 and t2 and returns true if successful
  belongs_to: macro.Context
  description: |-
    ### `static`[`unify`](#unify)`(``t1:`[`Type`](type "haxe.macro.Type - Represents a type.")`,``t2:`[`Type`](type "haxe.macro.Type - Represents a type.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    *Available on neko, macro*

    Tries to unify `t1` and `t2` and returns [`true`](../../bool) if successful.
- name: macro.Context.warning()
  id: haxe/macro/context#warning
  summary: Displays a compilation warning msg at the given Position pos
  belongs_to: macro.Context
  description: "### `static`[`warning`](#warning)`(``msg:`[`String`](../../string \"String - The basic String class.\")`,``pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on neko, macro*\n\nDisplays a compilation warning `msg` at the given [`Position`](position#Position) `pos`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Context.html](https://api.haxe.org/haxe/macro/Context.html)"
- name: macro.ContextOptions
  id: haxe/macro/contextoptions
  summary: Affects only the macro context
  description: "# ContextOptions([Int](../../int \"Int - The standard Int type.\"))\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.CompilationServer](compilationserver)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`MacroContext`](#MacroContext)`:`[`ContextOptions`](contextoptions \"haxe.macro.ContextOptions\")` = 1`\n\nAffects only the macro context.\n\n### `inline``read only`[`NormalAndMacroContext`](#NormalAndMacroContext)`:`[`ContextOptions`](contextoptions \"haxe.macro.ContextOptions\")` = 2`\n\nAffects the normal and macro contexts.\n\n### `inline``read only`[`NormalContext`](#NormalContext)`:`[`ContextOptions`](contextoptions \"haxe.macro.ContextOptions\")` = 0`\n\nAffects only the normal context.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ContextOptions.html](https://api.haxe.org/haxe/macro/ContextOptions.html)"
- name: macro.ContextOptions.MacroContext
  id: haxe/macro/contextoptions#MacroContext
  summary: Affects only the macro context
  belongs_to: macro.ContextOptions
  description: |-
    ### `inline``read only`[`MacroContext`](#MacroContext)`:`[`ContextOptions`](contextoptions "haxe.macro.ContextOptions")` = 1`

    Affects only the macro context.
- name: macro.ContextOptions.NormalAndMacroContext
  id: haxe/macro/contextoptions#NormalAndMacroContext
  summary: Affects the normal and macro contexts
  belongs_to: macro.ContextOptions
  description: |-
    ### `inline``read only`[`NormalAndMacroContext`](#NormalAndMacroContext)`:`[`ContextOptions`](contextoptions "haxe.macro.ContextOptions")` = 2`

    Affects the normal and macro contexts.
- name: macro.ContextOptions.NormalContext
  id: haxe/macro/contextoptions#NormalContext
  summary: Affects only the normal context
  belongs_to: macro.ContextOptions
  description: "### `inline``read only`[`NormalContext`](#NormalContext)`:`[`ContextOptions`](contextoptions \"haxe.macro.ContextOptions\")` = 0`\n\nAffects only the normal context.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ContextOptions.html](https://api.haxe.org/haxe/macro/ContextOptions.html)"
- name: macro.DefType
  id: haxe/macro/deftype
  summary: Represents a typedef
  description: "# DefType\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents a typedef.\n\n## Fields\n\n### [`type`](#type)`:`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\nThe target type of the typedef.\n\n### [`pos`](#pos)`:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nThe position of the type.\n\n### [`params`](#params)`:`[`Array`](../../array \"Array\")`<`[`TypeParameter`](typeparameter \"haxe.macro.TypeParameter - Represents the declaration of type parameters.\")`>`\n\nThe type parameters of the type.\n\n### [`pack`](#pack)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe package of the type.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the type.\n\n### [`module`](#module)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe module name of the type, which might be different.\n\n### [`meta`](#meta)`:`[`MetaAccess`](metaaccess \"haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.\")\n\nThe metadata of the type.\n\n### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is private.\n\n### [`isExtern`](#isExtern)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is extern.\n\n### [`exclude`](#exclude)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\nAllows excluding the type from compilation.\n\n### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe associated documentation of the class field.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/DefType.html](https://api.haxe.org/haxe/macro/DefType.html)"
- name: macro.DefType.doc
  id: haxe/macro/deftype#doc
  summary: The associated documentation of the class field
  belongs_to: macro.DefType
  description: "### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe associated documentation of the class field.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/DefType.html](https://api.haxe.org/haxe/macro/DefType.html)"
- name: macro.DefType.exclude()
  id: haxe/macro/deftype#exclude
  summary: Allows excluding the type from compilation
  belongs_to: macro.DefType
  description: |-
    ### [`exclude`](#exclude)`():`[`Void`](../../void "Void - The standard Void type.")

    Allows excluding the type from compilation.
- name: macro.DefType.isExtern
  id: haxe/macro/deftype#isExtern
  summary: Whether or not the type is extern
  belongs_to: macro.DefType
  description: |-
    ### [`isExtern`](#isExtern)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is extern.
- name: macro.DefType.isPrivate
  id: haxe/macro/deftype#isPrivate
  summary: Whether or not the type is private
  belongs_to: macro.DefType
  description: |-
    ### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is private.
- name: macro.DefType.meta
  id: haxe/macro/deftype#meta
  summary: The metadata of the type
  belongs_to: macro.DefType
  description: |-
    ### [`meta`](#meta)`:`[`MetaAccess`](metaaccess "haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.")

    The metadata of the type.
- name: macro.DefType.module
  id: haxe/macro/deftype#module
  summary: The module name of the type, which might be different
  belongs_to: macro.DefType
  description: |-
    ### [`module`](#module)`:`[`String`](../../string "String - The basic String class.")

    The module name of the type, which might be different.
- name: macro.DefType.name
  id: haxe/macro/deftype#name
  summary: The name of the type
  belongs_to: macro.DefType
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the type.
- name: macro.DefType.pack
  id: haxe/macro/deftype#pack
  summary: The package of the type
  belongs_to: macro.DefType
  description: |-
    ### [`pack`](#pack)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`

    The package of the type.
- name: macro.DefType.params
  id: haxe/macro/deftype#params
  summary: The type parameters of the type
  belongs_to: macro.DefType
  description: |-
    ### [`params`](#params)`:`[`Array`](../../array "Array")`<`[`TypeParameter`](typeparameter "haxe.macro.TypeParameter - Represents the declaration of type parameters.")`>`

    The type parameters of the type.
- name: macro.DefType.pos
  id: haxe/macro/deftype#pos
  summary: The position of the type
  belongs_to: macro.DefType
  description: |-
    ### [`pos`](#pos)`:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    The position of the type.
- name: macro.DefType.type
  id: haxe/macro/deftype#type
  summary: The target type of the typedef
  belongs_to: macro.DefType
  description: |-
    ### [`type`](#type)`:`[`Type`](type "haxe.macro.Type - Represents a type.")

    The target type of the typedef.
- name: macro.DisplayKind
  id: haxe/macro/displaykind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# DisplayKind\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\n## Values\n\n### `DKCall`\n\n### `DKDot`\n\n### `DKStructure`\n\n### `DKMarked`\n\n### `DKPattern(outermost:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/DisplayKind.html](https://api.haxe.org/haxe/macro/DisplayKind.html)"
- name: macro.DisplayKind.DKCall
  id: haxe/macro/displaykind#DKCall
  summary: null
  belongs_to: macro.DisplayKind
  description: '### `DKCall`'
- name: macro.DisplayKind.DKDot
  id: haxe/macro/displaykind#DKDot
  summary: null
  belongs_to: macro.DisplayKind
  description: '### `DKDot`'
- name: macro.DisplayKind.DKMarked
  id: haxe/macro/displaykind#DKMarked
  summary: null
  belongs_to: macro.DisplayKind
  description: '### `DKMarked`'
- name: macro.DisplayKind.DKPattern()
  id: haxe/macro/displaykind#DKPattern
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.DisplayKind
  description: "### `DKPattern(outermost:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/DisplayKind.html](https://api.haxe.org/haxe/macro/DisplayKind.html)"
- name: macro.DisplayKind.DKStructure
  id: haxe/macro/displaykind#DKStructure
  summary: null
  belongs_to: macro.DisplayKind
  description: '### `DKStructure`'
- name: macro.EnumField
  id: haxe/macro/enumfield
  summary: Represents an enum constructor
  description: "# EnumField\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents an enum constructor.\n\n## Fields\n\n### [`type`](#type)`:`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\nThe type of the enum constructor.\n\n### [`pos`](#pos)`:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nThe position of the enum constructor.\n\n### [`params`](#params)`:`[`Array`](../../array \"Array\")`<`[`TypeParameter`](typeparameter \"haxe.macro.TypeParameter - Represents the declaration of type parameters.\")`>`\n\nThe type parameters of the enum constructor.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the enum constructor.\n\n### [`meta`](#meta)`:`[`MetaAccess`](metaaccess \"haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.\")\n\nThe metadata of the enum constructor.\n\n### [`index`](#index)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nThe index of the enum constructor, i.e. in which position it appears in the syntax.\n\n### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe associated documentation of the enum constructor.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/EnumField.html](https://api.haxe.org/haxe/macro/EnumField.html)"
- name: macro.EnumField.doc
  id: haxe/macro/enumfield#doc
  summary: The associated documentation of the enum constructor
  belongs_to: macro.EnumField
  description: "### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe associated documentation of the enum constructor.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/EnumField.html](https://api.haxe.org/haxe/macro/EnumField.html)"
- name: macro.EnumField.index
  id: haxe/macro/enumfield#index
  summary: The index of the enum constructor, i.e
  belongs_to: macro.EnumField
  description: |-
    ### [`index`](#index)`:`[`Int`](../../int "Int - The standard Int type.")

    The index of the enum constructor, i.e. in which position it appears in the syntax.
- name: macro.EnumField.meta
  id: haxe/macro/enumfield#meta
  summary: The metadata of the enum constructor
  belongs_to: macro.EnumField
  description: |-
    ### [`meta`](#meta)`:`[`MetaAccess`](metaaccess "haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.")

    The metadata of the enum constructor.
- name: macro.EnumField.name
  id: haxe/macro/enumfield#name
  summary: The name of the enum constructor
  belongs_to: macro.EnumField
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the enum constructor.
- name: macro.EnumField.params
  id: haxe/macro/enumfield#params
  summary: The type parameters of the enum constructor
  belongs_to: macro.EnumField
  description: |-
    ### [`params`](#params)`:`[`Array`](../../array "Array")`<`[`TypeParameter`](typeparameter "haxe.macro.TypeParameter - Represents the declaration of type parameters.")`>`

    The type parameters of the enum constructor.
- name: macro.EnumField.pos
  id: haxe/macro/enumfield#pos
  summary: The position of the enum constructor
  belongs_to: macro.EnumField
  description: |-
    ### [`pos`](#pos)`:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    The position of the enum constructor.
- name: macro.EnumField.type
  id: haxe/macro/enumfield#type
  summary: The type of the enum constructor
  belongs_to: macro.EnumField
  description: |-
    ### [`type`](#type)`:`[`Type`](type "haxe.macro.Type - Represents a type.")

    The type of the enum constructor.
- name: macro.EnumType
  id: haxe/macro/enumtype
  summary: Represents an enum type
  description: "# EnumType\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents an enum type.\n\n## Fields\n\n### [`pos`](#pos)`:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nThe position of the type.\n\n### [`params`](#params)`:`[`Array`](../../array \"Array\")`<`[`TypeParameter`](typeparameter \"haxe.macro.TypeParameter - Represents the declaration of type parameters.\")`>`\n\nThe type parameters of the type.\n\n### [`pack`](#pack)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe package of the type.\n\n### [`names`](#names)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nAn ordered list of enum constructor names.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the type.\n\n### [`module`](#module)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe module name of the type, which might be different.\n\n### [`meta`](#meta)`:`[`MetaAccess`](metaaccess \"haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.\")\n\nThe metadata of the type.\n\n### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is private.\n\n### [`isExtern`](#isExtern)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is extern.\n\n### [`exclude`](#exclude)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\nAllows excluding the type from compilation.\n\n### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe associated documentation of the class field.\n\n### [`constructs`](#constructs)`:`[`Map`](../../map \"Map\")`<`[`String`](../../string \"String - The basic String class.\")`, `[`EnumField`](enumfield \"haxe.macro.EnumField - Represents an enum constructor.\")`>`\n\nThe available enum constructors.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/EnumType.html](https://api.haxe.org/haxe/macro/EnumType.html)"
- name: macro.EnumType.constructs
  id: haxe/macro/enumtype#constructs
  summary: The available enum constructors
  belongs_to: macro.EnumType
  description: "### [`constructs`](#constructs)`:`[`Map`](../../map \"Map\")`<`[`String`](../../string \"String - The basic String class.\")`, `[`EnumField`](enumfield \"haxe.macro.EnumField - Represents an enum constructor.\")`>`\n\nThe available enum constructors.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/EnumType.html](https://api.haxe.org/haxe/macro/EnumType.html)"
- name: macro.EnumType.doc
  id: haxe/macro/enumtype#doc
  summary: The associated documentation of the class field
  belongs_to: macro.EnumType
  description: |-
    ### [`doc`](#doc)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The associated documentation of the class field.
- name: macro.EnumType.exclude()
  id: haxe/macro/enumtype#exclude
  summary: Allows excluding the type from compilation
  belongs_to: macro.EnumType
  description: |-
    ### [`exclude`](#exclude)`():`[`Void`](../../void "Void - The standard Void type.")

    Allows excluding the type from compilation.
- name: macro.EnumType.isExtern
  id: haxe/macro/enumtype#isExtern
  summary: Whether or not the type is extern
  belongs_to: macro.EnumType
  description: |-
    ### [`isExtern`](#isExtern)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is extern.
- name: macro.EnumType.isPrivate
  id: haxe/macro/enumtype#isPrivate
  summary: Whether or not the type is private
  belongs_to: macro.EnumType
  description: |-
    ### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is private.
- name: macro.EnumType.meta
  id: haxe/macro/enumtype#meta
  summary: The metadata of the type
  belongs_to: macro.EnumType
  description: |-
    ### [`meta`](#meta)`:`[`MetaAccess`](metaaccess "haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.")

    The metadata of the type.
- name: macro.EnumType.module
  id: haxe/macro/enumtype#module
  summary: The module name of the type, which might be different
  belongs_to: macro.EnumType
  description: |-
    ### [`module`](#module)`:`[`String`](../../string "String - The basic String class.")

    The module name of the type, which might be different.
- name: macro.EnumType.name
  id: haxe/macro/enumtype#name
  summary: The name of the type
  belongs_to: macro.EnumType
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the type.
- name: macro.EnumType.names
  id: haxe/macro/enumtype#names
  summary: An ordered list of enum constructor names
  belongs_to: macro.EnumType
  description: |-
    ### [`names`](#names)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`

    An ordered list of enum constructor names.
- name: macro.EnumType.pack
  id: haxe/macro/enumtype#pack
  summary: The package of the type
  belongs_to: macro.EnumType
  description: |-
    ### [`pack`](#pack)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`

    The package of the type.
- name: macro.EnumType.params
  id: haxe/macro/enumtype#params
  summary: The type parameters of the type
  belongs_to: macro.EnumType
  description: |-
    ### [`params`](#params)`:`[`Array`](../../array "Array")`<`[`TypeParameter`](typeparameter "haxe.macro.TypeParameter - Represents the declaration of type parameters.")`>`

    The type parameters of the type.
- name: macro.EnumType.pos
  id: haxe/macro/enumtype#pos
  summary: The position of the type
  belongs_to: macro.EnumType
  description: |-
    ### [`pos`](#pos)`:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    The position of the type.
- name: macro.Error
  id: haxe/macro/error
  summary: This error can be used to handle or produce compilation errors in macros
  description: "# Error\n\npackage [haxe.macro](index)\n\nextends [Exception](../exception \"haxe.Exception - Base class for exceptions.\")\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nThis error can be used to handle or produce compilation errors in macros.\n\n## Constructor\n\n### [`new`](#new)`(``message:`[`String`](../../string \"String - The basic String class.\")`,`` ``pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`,`` ``?previous:`[`Exception`](../exception \"haxe.Exception - Base class for exceptions.\")`)`\n\nInstantiates an error with given message and position.\n\n## Variables\n\n### [`pos`](#pos)`:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nThe position of the error.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Error.html](https://api.haxe.org/haxe/macro/Error.html)"
- name: macro.ExampleJSGenerator
  id: haxe/macro/examplejsgenerator
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ExampleJSGenerator\n\npackage [haxe.macro](index)\n\n*Available on macro*\n\n## Static methods\n\n### `static`[`use`](#use)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n## Constructor\n\n### [`new`](#new)`(``api:`[`JSGenApi`](jsgenapi \"haxe.macro.JSGenApi - This is the api that is passed to the custom JS generator.\")`)`\n\n## Methods\n\n### [`generate`](#generate)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ExampleJSGenerator.html](https://api.haxe.org/haxe/macro/ExampleJSGenerator.html)"
- name: macro.ExampleJSGenerator.generate()
  id: haxe/macro/examplejsgenerator#generate
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.ExampleJSGenerator
  description: "### [`generate`](#generate)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ExampleJSGenerator.html](https://api.haxe.org/haxe/macro/ExampleJSGenerator.html)"
- name: macro.ExampleJSGenerator.use()
  id: haxe/macro/examplejsgenerator#use
  summary: null
  belongs_to: macro.ExampleJSGenerator
  description: |-
    ### `static`[`use`](#use)`():`[`Void`](../../void "Void - The standard Void type.")

    ## Constructor

    ### [`new`](#new)`(``api:`[`JSGenApi`](jsgenapi "haxe.macro.JSGenApi - This is the api that is passed to the custom JS generator.")`)`

    ## Methods
- name: macro.Expr
  id: haxe/macro/expr
  summary: Represents a node in the AST
  description: "# Expr\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nRepresents a node in the AST.\n\nSee also:\n\n- <https://haxe.org/manual/macro-reification-expression.html>\n\n## Fields\n\n### [`pos`](#pos)`:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nThe position of the expression.\n\n### [`expr`](#expr)`:`[`ExprDef`](exprdef \"haxe.macro.ExprDef - Represents the kind of a node in the AST.\")\n\nThe expression kind.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Expr.html](https://api.haxe.org/haxe/macro/Expr.html)"
- name: macro.Expr.expr
  id: haxe/macro/expr#expr
  summary: The expression kind
  belongs_to: macro.Expr
  description: "### [`expr`](#expr)`:`[`ExprDef`](exprdef \"haxe.macro.ExprDef - Represents the kind of a node in the AST.\")\n\nThe expression kind.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Expr.html](https://api.haxe.org/haxe/macro/Expr.html)"
- name: macro.Expr.pos
  id: haxe/macro/expr#pos
  summary: The position of the expression
  belongs_to: macro.Expr
  description: |-
    ### [`pos`](#pos)`:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    The position of the expression.
- name: macro.ExprArrayTools
  id: haxe/macro/exprarraytools
  summary: This class provides functions on expression arrays for convenience
  description: "# ExprArrayTools\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.ExprTools](exprtools)\n\n*Available on all platforms*\n\nThis class provides functions on expression arrays for convenience. For a detailed reference on each method, see the documentation of ExprTools.\n\n## Static methods\n\n### `static`[`iter`](#iter)`(``el:`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>,`` ``f:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")` ‑> `[`Void`](../../void \"Void - The standard Void type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### `static`[`map`](#map)`(``el:`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>,`` ``f:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")` ‑> `[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`):`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ExprArrayTools.html](https://api.haxe.org/haxe/macro/ExprArrayTools.html)"
- name: macro.ExprArrayTools.iter()
  id: haxe/macro/exprarraytools#iter
  summary: null
  belongs_to: macro.ExprArrayTools
  description: '### `static`[`iter`](#iter)`(``el:`[`Array`](../../array "Array")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>,``f:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")` ‑> `[`Void`](../../void "Void - The standard Void type.")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: macro.ExprArrayTools.map()
  id: haxe/macro/exprarraytools#map
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.ExprArrayTools
  description: "### `static`[`map`](#map)`(``el:`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>,``f:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")` ‑> `[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`):`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ExprArrayTools.html](https://api.haxe.org/haxe/macro/ExprArrayTools.html)"
- name: macro.ExprDef
  id: haxe/macro/exprdef
  summary: Represents the kind of a node in the AST
  description: "# ExprDef\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents the kind of a node in the AST.\n\n## Values\n\n### `EConst(c:`[`Constant`](constant \"haxe.macro.Constant - Represents a constant.\")`)`\n\nA constant.\n\n### `EArray(e1:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, e2:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nArray access `e1[e2]`.\n\n### `EBinop(op:`[`Binop`](binop \"haxe.macro.Binop - A binary operator.\")`, e1:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, e2:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nBinary operator `e1 op e2`.\n\n### `EField(e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, field:`[`String`](../../string \"String - The basic String class.\")`)`\n\nField access on `e.field`.\n\n### `EParenthesis(e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nParentheses `(e)`.\n\n### `EObjectDecl(fields:`[`Array`](../../array \"Array\")`<`[`ObjectField`](objectfield \"haxe.macro.ObjectField - Represents the field of an object declaration.\")`>)`\n\nAn object declaration.\n\n### `EArrayDecl(values:`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>)`\n\nAn array declaration `[el]`.\n\n### `ECall(e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, params:`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>)`\n\nA call `e(params)`.\n\n### `ENew(t:`[`TypePath`](typepath \"haxe.macro.TypePath - Represents a type path in the AST.\")`, params:`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>)`\n\nA constructor call `new t(params)`.\n\n### `EUnop(op:`[`Unop`](unop \"haxe.macro.Unop - A unary operator.\")`, postFix:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`, e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nAn unary operator `op` on `e`:\n\n- `e++` (`op = OpIncrement, postFix = `[`true`](../../bool))\n- `e--` (`op = OpDecrement, postFix = `[`true`](../../bool))\n- `++e` (`op = OpIncrement, postFix = `[`false`](../../bool))\n- `--e` (`op = OpDecrement, postFix = `[`false`](../../bool))\n- `-e` (`op = OpNeg, postFix = `[`false`](../../bool))\n- `!e` (`op = OpNot, postFix = `[`false`](../../bool))\n- `~e` (`op = OpNegBits, postFix = `[`false`](../../bool))\n\n### `EVars(vars:`[`Array`](../../array \"Array\")`<`[`Var`](var \"haxe.macro.Var - Represents a variable in the AST.\")`>)`\n\nVariable declarations.\n\n### `EFunction(kind:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`FunctionKind`](functionkind \"haxe.macro.FunctionKind\")`>, f:`[`Function`](function \"haxe.macro.Function - Represents a function in the AST.\")`)`\n\nA function declaration.\n\n### `EBlock(exprs:`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>)`\n\nA block of expressions `{exprs}`.\n\n### `EFor(it:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, expr:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nA `for` expression.\n\n### `EIf(econd:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, eif:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, eelse:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>)`\n\nAn `if (econd) eif` or `if (econd) eif else eelse` expression.\n\n### `EWhile(econd:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, normalWhile:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`)`\n\nRepresents a `while` expression.\n\nWhen `normalWhile` is [`true`](../../bool) it is `while (...)`.\n\nWhen `normalWhile` is [`false`](../../bool) it is `do {...} while (...)`.\n\n### `ESwitch(e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, cases:`[`Array`](../../array \"Array\")`<`[`Case`](case \"haxe.macro.Case - Represents a switch case.\")`>, edef:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>)`\n\nRepresents a `switch` expression with related cases and an optional. `default` case if `edef != null`.\n\n### `ETry(e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, catches:`[`Array`](../../array \"Array\")`<`[`Catch`](catch \"haxe.macro.Catch - Represents a catch in the AST.\")`>)`\n\nRepresents a `try`-expression with related catches.\n\n### `EReturn(e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nA `return` or `return e` expression.\n\n### `EBreak`\n\nA `break` expression.\n\n### `EContinue`\n\nA `continue` expression.\n\n### `EUntyped(e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nAn `untyped e` source code.\n\n### `EThrow(e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nA `throw e` expression.\n\n### `ECast(e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, t:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>)`\n\nA `cast e` or `cast (e, m)` expression.\n\n### `EDisplay(e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, displayKind:`[`DisplayKind`](displaykind \"haxe.macro.DisplayKind\")`)`\n\nUsed internally to provide completion.\n\n### `EDisplayNew(t:`[`TypePath`](typepath \"haxe.macro.TypePath - Represents a type path in the AST.\")`)`\n\nUsed internally to provide completion.\n\n### `ETernary(econd:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, eif:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, eelse:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nA `(econd) ? eif : eelse` expression.\n\n### `ECheckType(e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`, t:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`)`\n\nA `(e:t)` expression.\n\n### `EMeta(s:`[`MetadataEntry`](metadataentry \"haxe.macro.MetadataEntry - Represents a metadata entry in the AST.\")`, e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nA `@m e` expression.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ExprDef.html](https://api.haxe.org/haxe/macro/ExprDef.html)"
- name: macro.ExprDef.EArray()
  id: haxe/macro/exprdef#EArray
  summary: Array access e1[e2]
  belongs_to: macro.ExprDef
  description: |-
    ### `EArray(e1:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, e2:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`)`

    Array access `e1[e2]`.
- name: macro.ExprDef.EArrayDecl()
  id: haxe/macro/exprdef#EArrayDecl
  summary: An array declaration [el]
  belongs_to: macro.ExprDef
  description: |-
    ### `EArrayDecl(values:`[`Array`](../../array "Array")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>)`

    An array declaration `[el]`.
- name: macro.ExprDef.EBinop()
  id: haxe/macro/exprdef#EBinop
  summary: Binary operator e1 op e2
  belongs_to: macro.ExprDef
  description: |-
    ### `EBinop(op:`[`Binop`](binop "haxe.macro.Binop - A binary operator.")`, e1:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, e2:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`)`

    Binary operator `e1 op e2`.
- name: macro.ExprDef.EBlock()
  id: haxe/macro/exprdef#EBlock
  summary: null
  belongs_to: macro.ExprDef
  description: |-
    ### `EBlock(exprs:`[`Array`](../../array "Array")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>)`

    A block of expressions `{exprs}`.
- name: macro.ExprDef.EBreak
  id: haxe/macro/exprdef#EBreak
  summary: A break expression
  belongs_to: macro.ExprDef
  description: |-
    ### `EBreak`

    A `break` expression.
- name: macro.ExprDef.ECall()
  id: haxe/macro/exprdef#ECall
  summary: A call e(params)
  belongs_to: macro.ExprDef
  description: |-
    ### `ECall(e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, params:`[`Array`](../../array "Array")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>)`

    A call `e(params)`.
- name: macro.ExprDef.ECast()
  id: haxe/macro/exprdef#ECast
  summary: A cast e or cast (e, m) expression
  belongs_to: macro.ExprDef
  description: |-
    ### `ECast(e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, t:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`>)`

    A `cast e` or `cast (e, m)` expression.
- name: macro.ExprDef.ECheckType()
  id: haxe/macro/exprdef#ECheckType
  summary: A (e:t) expression
  belongs_to: macro.ExprDef
  description: |-
    ### `ECheckType(e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, t:`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`)`

    A `(e:t)` expression.
- name: macro.ExprDef.EConst()
  id: haxe/macro/exprdef#EConst
  summary: A constant
  belongs_to: macro.ExprDef
  description: |-
    ### `EConst(c:`[`Constant`](constant "haxe.macro.Constant - Represents a constant.")`)`

    A constant.
- name: macro.ExprDef.EContinue
  id: haxe/macro/exprdef#EContinue
  summary: A continue expression
  belongs_to: macro.ExprDef
  description: |-
    ### `EContinue`

    A `continue` expression.
- name: macro.ExprDef.EDisplay()
  id: haxe/macro/exprdef#EDisplay
  summary: Used internally to provide completion
  belongs_to: macro.ExprDef
  description: |-
    ### `EDisplay(e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, displayKind:`[`DisplayKind`](displaykind "haxe.macro.DisplayKind")`)`

    Used internally to provide completion.
- name: macro.ExprDef.EDisplayNew()
  id: haxe/macro/exprdef#EDisplayNew
  summary: Used internally to provide completion
  belongs_to: macro.ExprDef
  description: |-
    ### `EDisplayNew(t:`[`TypePath`](typepath "haxe.macro.TypePath - Represents a type path in the AST.")`)`

    Used internally to provide completion.
- name: macro.ExprDef.EField()
  id: haxe/macro/exprdef#EField
  summary: Field access on e.field
  belongs_to: macro.ExprDef
  description: |-
    ### `EField(e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, field:`[`String`](../../string "String - The basic String class.")`)`

    Field access on `e.field`.
- name: macro.ExprDef.EFor()
  id: haxe/macro/exprdef#EFor
  summary: A for expression
  belongs_to: macro.ExprDef
  description: |-
    ### `EFor(it:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, expr:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`)`

    A `for` expression.
- name: macro.ExprDef.EFunction()
  id: haxe/macro/exprdef#EFunction
  summary: A function declaration
  belongs_to: macro.ExprDef
  description: |-
    ### `EFunction(kind:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`FunctionKind`](functionkind "haxe.macro.FunctionKind")`>, f:`[`Function`](function "haxe.macro.Function - Represents a function in the AST.")`)`

    A function declaration.
- name: macro.ExprDef.EIf()
  id: haxe/macro/exprdef#EIf
  summary: An if (econd) eif or if (econd) eif else eelse expression
  belongs_to: macro.ExprDef
  description: |-
    ### `EIf(econd:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, eif:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, eelse:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>)`

    An `if (econd) eif` or `if (econd) eif else eelse` expression.
- name: macro.ExprDef.EMeta()
  id: haxe/macro/exprdef#EMeta
  summary: A @m e expression
  belongs_to: macro.ExprDef
  description: "### `EMeta(s:`[`MetadataEntry`](metadataentry \"haxe.macro.MetadataEntry - Represents a metadata entry in the AST.\")`, e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nA `@m e` expression.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ExprDef.html](https://api.haxe.org/haxe/macro/ExprDef.html)"
- name: macro.ExprDef.ENew()
  id: haxe/macro/exprdef#ENew
  summary: A constructor call new t(params)
  belongs_to: macro.ExprDef
  description: |-
    ### `ENew(t:`[`TypePath`](typepath "haxe.macro.TypePath - Represents a type path in the AST.")`, params:`[`Array`](../../array "Array")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>)`

    A constructor call `new t(params)`.
- name: macro.ExprDef.EObjectDecl()
  id: haxe/macro/exprdef#EObjectDecl
  summary: An object declaration
  belongs_to: macro.ExprDef
  description: |-
    ### `EObjectDecl(fields:`[`Array`](../../array "Array")`<`[`ObjectField`](objectfield "haxe.macro.ObjectField - Represents the field of an object declaration.")`>)`

    An object declaration.
- name: macro.ExprDef.EParenthesis()
  id: haxe/macro/exprdef#EParenthesis
  summary: Parentheses (e)
  belongs_to: macro.ExprDef
  description: |-
    ### `EParenthesis(e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`)`

    Parentheses `(e)`.
- name: macro.ExprDef.EReturn()
  id: haxe/macro/exprdef#EReturn
  summary: A return or return e expression
  belongs_to: macro.ExprDef
  description: |-
    ### `EReturn(e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`)`

    A `return` or `return e` expression.
- name: macro.ExprDef.ESwitch()
  id: haxe/macro/exprdef#ESwitch
  summary: Represents a switch expression with related cases and an optional
  belongs_to: macro.ExprDef
  description: |-
    ### `ESwitch(e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, cases:`[`Array`](../../array "Array")`<`[`Case`](case "haxe.macro.Case - Represents a switch case.")`>, edef:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>)`

    Represents a `switch` expression with related cases and an optional. `default` case if `edef != null`.
- name: macro.ExprDef.ETernary()
  id: haxe/macro/exprdef#ETernary
  summary: 'A (econd) ? eif : eelse expression'
  belongs_to: macro.ExprDef
  description: |-
    ### `ETernary(econd:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, eif:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, eelse:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`)`

    A `(econd) ? eif : eelse` expression.
- name: macro.ExprDef.EThrow()
  id: haxe/macro/exprdef#EThrow
  summary: A throw e expression
  belongs_to: macro.ExprDef
  description: |-
    ### `EThrow(e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`)`

    A `throw e` expression.
- name: macro.ExprDef.ETry()
  id: haxe/macro/exprdef#ETry
  summary: Represents a try-expression with related catches
  belongs_to: macro.ExprDef
  description: |-
    ### `ETry(e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, catches:`[`Array`](../../array "Array")`<`[`Catch`](catch "haxe.macro.Catch - Represents a catch in the AST.")`>)`

    Represents a `try`-expression with related catches.
- name: macro.ExprDef.EUnop()
  id: haxe/macro/exprdef#EUnop
  summary: null
  belongs_to: macro.ExprDef
  description: |-
    ### `EUnop(op:`[`Unop`](unop "haxe.macro.Unop - A unary operator.")`, postFix:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`, e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`)`

    An unary operator `op` on `e`:

    - `e++` (`op = OpIncrement, postFix = `[`true`](../../bool))
    - `e--` (`op = OpDecrement, postFix = `[`true`](../../bool))
    - `++e` (`op = OpIncrement, postFix = `[`false`](../../bool))
    - `--e` (`op = OpDecrement, postFix = `[`false`](../../bool))
    - `-e` (`op = OpNeg, postFix = `[`false`](../../bool))
    - `!e` (`op = OpNot, postFix = `[`false`](../../bool))
    - `~e` (`op = OpNegBits, postFix = `[`false`](../../bool))
- name: macro.ExprDef.EUntyped()
  id: haxe/macro/exprdef#EUntyped
  summary: An untyped e source code
  belongs_to: macro.ExprDef
  description: |-
    ### `EUntyped(e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`)`

    An `untyped e` source code.
- name: macro.ExprDef.EVars()
  id: haxe/macro/exprdef#EVars
  summary: Variable declarations
  belongs_to: macro.ExprDef
  description: |-
    ### `EVars(vars:`[`Array`](../../array "Array")`<`[`Var`](var "haxe.macro.Var - Represents a variable in the AST.")`>)`

    Variable declarations.
- name: macro.ExprDef.EWhile()
  id: haxe/macro/exprdef#EWhile
  summary: Represents a while expression
  belongs_to: macro.ExprDef
  description: |-
    ### `EWhile(econd:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`, normalWhile:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`)`

    Represents a `while` expression.

    When `normalWhile` is [`true`](../../bool) it is `while (...)`.

    When `normalWhile` is [`false`](../../bool) it is `do {...} while (...)`.
- name: macro.ExprOf
  id: haxe/macro/exprof
  summary: Represents a AST node identical to Expr, but it allows constraining the type of accepted expressions
  description: "# ExprOf\\<T\\>\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a AST node identical to [`Expr`](expr#Expr), but it allows constraining the type of accepted expressions.\n\nSee also:\n\n- <https://haxe.org/manual/macro-ExprOf.html>\n\n## Alias\n\n*alias for* [`haxe.macro.Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ExprOf.html](https://api.haxe.org/haxe/macro/ExprOf.html)"
- name: macro.ExprTools
  id: haxe/macro/exprtools
  summary: This class provides some utility methods to work with expressions
  description: "# ExprTools\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nThis class provides some utility methods to work with expressions. It is best used through 'using haxe.macro.ExprTools' syntax and then provides additional methods on haxe.macro.Expr instances.\n\nWhile mainly intended to be used in macros, it works in non-macro code as well.\n\n## Static methods\n\n### `static`[`getValue`](#getValue)`(``e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`):`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\nReturns the value `e` represents.\n\nSupported expressions are:\n\n- [`Int`](../../int), [`Float`](../../float) and [`String`](../../string) literals\n- identifiers [`true`](../../bool), [`false`](../../bool) and `null`\n- structure declarations if all their fields are values\n- array declarations if all their elements are values\n- unary operators `-`, `!` and `~` if the operand is a value\n- binary operators except `=>`, `...` and assignments\n\nParentheses, metadata and the `untyped` keyword are ignored.\n\nIf any non-value is encountered, an exception of type [`String`](../../string) is thrown.\n\nIf `e` is null, the result is unspecified.\n\n### `static`[`iter`](#iter)`(``e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`,`` ``f:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")` ‑> `[`Void`](../../void \"Void - The standard Void type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nCalls function `f` on each sub-expression of `e`.\n\nIf `e` has no sub-expressions, this operation has no effect.\n\nOtherwise `f` is called once per sub-expression of `e`, with the sub-expression as argument. These calls are done in order of the sub-expression declarations.\n\nThis method does not call itself recursively. It should instead be used in a recursive function which handles the expression nodes of interest.\n\nUsage example:\n\n``` prettyprint\nfunction findStrings(e:Expr) {\n    switch(e.expr) {\n        case EConst(CString(s)):\n            // handle s\n        case _:\n            ExprTools.iter(e, findStrings);\n    }\n}\n```\n\n### `static`[`map`](#map)`(``e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`,`` ``f:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")` ‑> `[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`):`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\nTransforms the sub-expressions of `e` by calling `f` on each of them.\n\nIf `e` has no sub-expressions, this operation returns `e` unchanged.\n\nOtherwise `f` is called once per sub-expression of `e`, with the sub-expression as argument. These calls are done in order of the sub-expression declarations.\n\nThis method does not call itself recursively. It should instead be used in a recursive function which handles the expression nodes of interest.\n\nUsage example:\n\n``` prettyprint\nfunction capitalizeStrings(e:Expr) {\n    return switch(e.expr) {\n        case EConst(CString(s)):\n            { expr: EConst(CString(s.toUpperCase())), pos: e.pos };\n        case _:\n            ExprTools.map(e, capitalizeStrings);\n    }\n}\n```\n\n### `static`[`toString`](#toString)`(``e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nConverts expression `e` to a human-readable String representation.\n\nThe result is guaranteed to be valid Haxe code, but there may be differences from the original lexical syntax.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ExprTools.html](https://api.haxe.org/haxe/macro/ExprTools.html)"
- name: macro.ExprTools.getValue()
  id: haxe/macro/exprtools#getValue
  summary: Returns the value e represents
  belongs_to: macro.ExprTools
  description: |-
    ### `static`[`getValue`](#getValue)`(``e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`):`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")

    Returns the value `e` represents.

    Supported expressions are:

    - [`Int`](../../int), [`Float`](../../float) and [`String`](../../string) literals
    - identifiers [`true`](../../bool), [`false`](../../bool) and `null`
    - structure declarations if all their fields are values
    - array declarations if all their elements are values
    - unary operators `-`, `!` and `~` if the operand is a value
    - binary operators except `=>`, `...` and assignments

    Parentheses, metadata and the `untyped` keyword are ignored.

    If any non-value is encountered, an exception of type [`String`](../../string) is thrown.

    If `e` is null, the result is unspecified.
- name: macro.ExprTools.iter()
  id: haxe/macro/exprtools#iter
  summary: Calls function f on each sub-expression of e
  belongs_to: macro.ExprTools
  description: |-
    ### `static`[`iter`](#iter)`(``e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`,``f:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")` ‑> `[`Void`](../../void "Void - The standard Void type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Calls function `f` on each sub-expression of `e`.

    If `e` has no sub-expressions, this operation has no effect.

    Otherwise `f` is called once per sub-expression of `e`, with the sub-expression as argument. These calls are done in order of the sub-expression declarations.

    This method does not call itself recursively. It should instead be used in a recursive function which handles the expression nodes of interest.

    Usage example:

              function findStrings(e:Expr) {
            switch(e.expr) {
                case EConst(CString(s)):
                    // handle s
                case _:
                    ExprTools.iter(e, findStrings);
            }
        }
- name: macro.ExprTools.map()
  id: haxe/macro/exprtools#map
  summary: Transforms the sub-expressions of e by calling f on each of them
  belongs_to: macro.ExprTools
  description: |-
    ### `static`[`map`](#map)`(``e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`,``f:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")` ‑> `[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`):`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")

    Transforms the sub-expressions of `e` by calling `f` on each of them.

    If `e` has no sub-expressions, this operation returns `e` unchanged.

    Otherwise `f` is called once per sub-expression of `e`, with the sub-expression as argument. These calls are done in order of the sub-expression declarations.

    This method does not call itself recursively. It should instead be used in a recursive function which handles the expression nodes of interest.

    Usage example:

              function capitalizeStrings(e:Expr) {
            return switch(e.expr) {
                case EConst(CString(s)):
                    { expr: EConst(CString(s.toUpperCase())), pos: e.pos };
                case _:
                    ExprTools.map(e, capitalizeStrings);
            }
        }
- name: macro.ExprTools.toString()
  id: haxe/macro/exprtools#toString
  summary: Converts expression e to a human-readable String representation
  belongs_to: macro.ExprTools
  description: "### `static`[`toString`](#toString)`(``e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nConverts expression `e` to a human-readable String representation.\n\nThe result is guaranteed to be valid Haxe code, but there may be differences from the original lexical syntax.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ExprTools.html](https://api.haxe.org/haxe/macro/ExprTools.html)"
- name: macro.Field
  id: haxe/macro/field
  summary: Represents a field in the AST
  description: "# Field\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a field in the AST.\n\n## Fields\n\n### [`pos`](#pos)`:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nThe position of the field.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the field.\n\n### `optional`[`meta`](#meta)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Metadata`](metadata \"haxe.macro.Metadata - Represents metadata in the AST.\")`>`\n\nThe optional metadata of the field.\n\n### [`kind`](#kind)`:`[`FieldType`](fieldtype \"haxe.macro.FieldType - Represents the field type in the AST.\")\n\nThe kind of the field.\n\n### `optional`[`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe documentation of the field, if available. If the field has no documentation, the value is \\`null\\`.\n\n### `optional`[`access`](#access)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`Access`](access \"haxe.macro.Access - Represents an access modifier.\")`>>`\n\nThe access modifiers of the field. By default fields have private access. @see https://haxe.org/manual/class-field-access-modifier.html\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Field.html](https://api.haxe.org/haxe/macro/Field.html)"
- name: macro.Field.access
  id: haxe/macro/field#access
  summary: The access modifiers of the field
  belongs_to: macro.Field
  description: "### `optional`[`access`](#access)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`Access`](access \"haxe.macro.Access - Represents an access modifier.\")`>>`\n\nThe access modifiers of the field. By default fields have private access. @see https://haxe.org/manual/class-field-access-modifier.html\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Field.html](https://api.haxe.org/haxe/macro/Field.html)"
- name: macro.Field.doc
  id: haxe/macro/field#doc
  summary: The documentation of the field, if available
  belongs_to: macro.Field
  description: |-
    ### `optional`[`doc`](#doc)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The documentation of the field, if available. If the field has no documentation, the value is \`null\`.
- name: macro.Field.kind
  id: haxe/macro/field#kind
  summary: The kind of the field
  belongs_to: macro.Field
  description: |-
    ### [`kind`](#kind)`:`[`FieldType`](fieldtype "haxe.macro.FieldType - Represents the field type in the AST.")

    The kind of the field.
- name: macro.Field.meta
  id: haxe/macro/field#meta
  summary: The optional metadata of the field
  belongs_to: macro.Field
  description: |-
    ### `optional`[`meta`](#meta)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Metadata`](metadata "haxe.macro.Metadata - Represents metadata in the AST.")`>`

    The optional metadata of the field.
- name: macro.Field.name
  id: haxe/macro/field#name
  summary: The name of the field
  belongs_to: macro.Field
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the field.
- name: macro.Field.pos
  id: haxe/macro/field#pos
  summary: The position of the field
  belongs_to: macro.Field
  description: |-
    ### [`pos`](#pos)`:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    The position of the field.
- name: macro.FieldAccess
  id: haxe/macro/fieldaccess
  summary: Represents the kind of field access in the typed AST
  description: "# FieldAccess\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents the kind of field access in the typed AST.\n\n## Values\n\n### `FInstance(c:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>, params:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>, cf:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>)`\n\nAccess of field `cf` on a class instance `c` with type parameters `params`.\n\n### `FStatic(c:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>, cf:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>)`\n\nStatic access of a field `cf` on a class `c`.\n\n### `FAnon(cf:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>)`\n\nAccess of field `cf` on an anonymous structure.\n\n### `FDynamic(s:`[`String`](../../string \"String - The basic String class.\")`)`\n\nDynamic field access of a field named `s`.\n\n### `FClosure(c:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<{params:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>, c:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>}>, cf:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>)`\n\nClosure field access of field `cf` on a class instance `c` with type parameters `params`.\n\n### `FEnum(e:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`EnumType`](enumtype \"haxe.macro.EnumType - Represents an enum type.\")`>, ef:`[`EnumField`](enumfield \"haxe.macro.EnumField - Represents an enum constructor.\")`)`\n\nField access to an enum constructor `ef` of enum `e`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/FieldAccess.html](https://api.haxe.org/haxe/macro/FieldAccess.html)"
- name: macro.FieldAccess.FAnon()
  id: haxe/macro/fieldaccess#FAnon
  summary: Access of field cf on an anonymous structure
  belongs_to: macro.FieldAccess
  description: |-
    ### `FAnon(cf:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`>)`

    Access of field `cf` on an anonymous structure.
- name: macro.FieldAccess.FClosure()
  id: haxe/macro/fieldaccess#FClosure
  summary: Closure field access of field cf on a class instance c with type parameters params
  belongs_to: macro.FieldAccess
  description: |-
    ### `FClosure(c:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<{params:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>, c:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>}>, cf:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`>)`

    Closure field access of field `cf` on a class instance `c` with type parameters `params`.
- name: macro.FieldAccess.FDynamic()
  id: haxe/macro/fieldaccess#FDynamic
  summary: Dynamic field access of a field named s
  belongs_to: macro.FieldAccess
  description: |-
    ### `FDynamic(s:`[`String`](../../string "String - The basic String class.")`)`

    Dynamic field access of a field named `s`.
- name: macro.FieldAccess.FEnum()
  id: haxe/macro/fieldaccess#FEnum
  summary: Field access to an enum constructor ef of enum e
  belongs_to: macro.FieldAccess
  description: "### `FEnum(e:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`EnumType`](enumtype \"haxe.macro.EnumType - Represents an enum type.\")`>, ef:`[`EnumField`](enumfield \"haxe.macro.EnumField - Represents an enum constructor.\")`)`\n\nField access to an enum constructor `ef` of enum `e`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/FieldAccess.html](https://api.haxe.org/haxe/macro/FieldAccess.html)"
- name: macro.FieldAccess.FInstance()
  id: haxe/macro/fieldaccess#FInstance
  summary: Access of field cf on a class instance c with type parameters params
  belongs_to: macro.FieldAccess
  description: |-
    ### `FInstance(c:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>, params:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>, cf:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`>)`

    Access of field `cf` on a class instance `c` with type parameters `params`.
- name: macro.FieldAccess.FStatic()
  id: haxe/macro/fieldaccess#FStatic
  summary: Static access of a field cf on a class c
  belongs_to: macro.FieldAccess
  description: |-
    ### `FStatic(c:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>, cf:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`>)`

    Static access of a field `cf` on a class `c`.
- name: macro.FieldKind
  id: haxe/macro/fieldkind
  summary: Represents a field kind
  description: "# FieldKind\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents a field kind.\n\n## Values\n\n### `FVar(read:`[`VarAccess`](varaccess \"haxe.macro.VarAccess - Represents the variable accessor.\")`, write:`[`VarAccess`](varaccess \"haxe.macro.VarAccess - Represents the variable accessor.\")`)`\n\nA variable of property, depending on the `read` and `write` values.\n\n### `FMethod(k:`[`MethodKind`](methodkind \"haxe.macro.MethodKind - Represents the method kind.\")`)`\n\nA method\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/FieldKind.html](https://api.haxe.org/haxe/macro/FieldKind.html)"
- name: macro.FieldKind.FMethod()
  id: haxe/macro/fieldkind#FMethod
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.FieldKind
  description: "### `FMethod(k:`[`MethodKind`](methodkind \"haxe.macro.MethodKind - Represents the method kind.\")`)`\n\nA method\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/FieldKind.html](https://api.haxe.org/haxe/macro/FieldKind.html)"
- name: macro.FieldKind.FVar()
  id: haxe/macro/fieldkind#FVar
  summary: A variable of property, depending on the read and write values
  belongs_to: macro.FieldKind
  description: |-
    ### `FVar(read:`[`VarAccess`](varaccess "haxe.macro.VarAccess - Represents the variable accessor.")`, write:`[`VarAccess`](varaccess "haxe.macro.VarAccess - Represents the variable accessor.")`)`

    A variable of property, depending on the `read` and `write` values.
- name: macro.FieldType
  id: haxe/macro/fieldtype
  summary: Represents the field type in the AST
  description: "# FieldType\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents the field type in the AST.\n\n## Values\n\n### `FVar(t:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>, e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nRepresents a variable field type.\n\n### `FFun(f:`[`Function`](function \"haxe.macro.Function - Represents a function in the AST.\")`)`\n\nRepresents a function field type.\n\n### `FProp(get:`[`String`](../../string \"String - The basic String class.\")`, set:`[`String`](../../string \"String - The basic String class.\")`, t:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`, e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nRepresents a property with getter and setter field type.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/FieldType.html](https://api.haxe.org/haxe/macro/FieldType.html)"
- name: macro.FieldType.FFun()
  id: haxe/macro/fieldtype#FFun
  summary: Represents a function field type
  belongs_to: macro.FieldType
  description: |-
    ### `FFun(f:`[`Function`](function "haxe.macro.Function - Represents a function in the AST.")`)`

    Represents a function field type.
- name: macro.FieldType.FProp()
  id: haxe/macro/fieldtype#FProp
  summary: Represents a property with getter and setter field type
  belongs_to: macro.FieldType
  description: "### `FProp(get:`[`String`](../../string \"String - The basic String class.\")`, set:`[`String`](../../string \"String - The basic String class.\")`, t:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`, e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\nRepresents a property with getter and setter field type.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/FieldType.html](https://api.haxe.org/haxe/macro/FieldType.html)"
- name: macro.FieldType.FVar()
  id: haxe/macro/fieldtype#FVar
  summary: Represents a variable field type
  belongs_to: macro.FieldType
  description: |-
    ### `FVar(t:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`>, e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`)`

    Represents a variable field type.
- name: macro.Format
  id: haxe/macro/format
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Format\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nThe actual macro implemented for Std.format\n\n## Static methods\n\n### `static`[`format`](#format)`(``estr:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`):{pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`, expr:`[`ExprDef`](exprdef \"haxe.macro.ExprDef - Represents the kind of a node in the AST.\")`}`\n\n*Available on macro*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Format.html](https://api.haxe.org/haxe/macro/Format.html)"
- name: macro.Format.format()
  id: haxe/macro/format#format
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.Format
  description: "### `static`[`format`](#format)`(``estr:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`):{pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`, expr:`[`ExprDef`](exprdef \"haxe.macro.ExprDef - Represents the kind of a node in the AST.\")`}`\n\n*Available on macro*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Format.html](https://api.haxe.org/haxe/macro/Format.html)"
- name: macro.Function
  id: haxe/macro/function
  summary: Represents a function in the AST
  description: "# Function\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a function in the AST.\n\n## Fields\n\n### [`ret`](#ret)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>`\n\nThe return type-hint of the function, if available.\n\n### `optional`[`params`](#params)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`TypeParamDecl`](typeparamdecl \"haxe.macro.TypeParamDecl - Represents a type parameter declaration in the AST.\")`>>`\n\nAn optional list of function parameter type declarations.\n\n### [`expr`](#expr)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>`\n\nThe expression of the function body, if available.\n\n### [`args`](#args)`:`[`Array`](../../array \"Array\")`<`[`FunctionArg`](functionarg \"haxe.macro.FunctionArg - Represents a function argument in the AST.\")`>`\n\nA list of function arguments.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Function.html](https://api.haxe.org/haxe/macro/Function.html)"
- name: macro.Function.args
  id: haxe/macro/function#args
  summary: A list of function arguments
  belongs_to: macro.Function
  description: "### [`args`](#args)`:`[`Array`](../../array \"Array\")`<`[`FunctionArg`](functionarg \"haxe.macro.FunctionArg - Represents a function argument in the AST.\")`>`\n\nA list of function arguments.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Function.html](https://api.haxe.org/haxe/macro/Function.html)"
- name: macro.Function.expr
  id: haxe/macro/function#expr
  summary: The expression of the function body, if available
  belongs_to: macro.Function
  description: |-
    ### [`expr`](#expr)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>`

    The expression of the function body, if available.
- name: macro.Function.params
  id: haxe/macro/function#params
  summary: An optional list of function parameter type declarations
  belongs_to: macro.Function
  description: |-
    ### `optional`[`params`](#params)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Array`](../../array "Array")`<`[`TypeParamDecl`](typeparamdecl "haxe.macro.TypeParamDecl - Represents a type parameter declaration in the AST.")`>>`

    An optional list of function parameter type declarations.
- name: macro.Function.ret
  id: haxe/macro/function#ret
  summary: The return type-hint of the function, if available
  belongs_to: macro.Function
  description: |-
    ### [`ret`](#ret)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`>`

    The return type-hint of the function, if available.
- name: macro.FunctionArg
  id: haxe/macro/functionarg
  summary: Represents a function argument in the AST
  description: "# FunctionArg\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a function argument in the AST.\n\n## Fields\n\n### `optional`[`value`](#value)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>`\n\nThe optional value of the function argument, if available.\n\n### [`type`](#type)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>`\n\nThe type-hint of the function argument, if available.\n\n### `optional`[`opt`](#opt)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\nWhether or not the function argument is optional.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the function argument.\n\n### `optional`[`meta`](#meta)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Metadata`](metadata \"haxe.macro.Metadata - Represents metadata in the AST.\")`>`\n\nThe metadata of the function argument.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/FunctionArg.html](https://api.haxe.org/haxe/macro/FunctionArg.html)"
- name: macro.FunctionArg.meta
  id: haxe/macro/functionarg#meta
  summary: The metadata of the function argument
  belongs_to: macro.FunctionArg
  description: "### `optional`[`meta`](#meta)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Metadata`](metadata \"haxe.macro.Metadata - Represents metadata in the AST.\")`>`\n\nThe metadata of the function argument.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/FunctionArg.html](https://api.haxe.org/haxe/macro/FunctionArg.html)"
- name: macro.FunctionArg.name
  id: haxe/macro/functionarg#name
  summary: The name of the function argument
  belongs_to: macro.FunctionArg
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the function argument.
- name: macro.FunctionArg.opt
  id: haxe/macro/functionarg#opt
  summary: Whether or not the function argument is optional
  belongs_to: macro.FunctionArg
  description: |-
    ### `optional`[`opt`](#opt)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`

    Whether or not the function argument is optional.
- name: macro.FunctionArg.type
  id: haxe/macro/functionarg#type
  summary: The type-hint of the function argument, if available
  belongs_to: macro.FunctionArg
  description: |-
    ### [`type`](#type)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`>`

    The type-hint of the function argument, if available.
- name: macro.FunctionArg.value
  id: haxe/macro/functionarg#value
  summary: The optional value of the function argument, if available
  belongs_to: macro.FunctionArg
  description: |-
    ### `optional`[`value`](#value)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>`

    The optional value of the function argument, if available.
- name: macro.FunctionKind
  id: haxe/macro/functionkind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# FunctionKind\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents function kind in the AST\n\n## Values\n\n### `FAnonymous`\n\nAnonymous function\n\n### `FNamed(name:`[`String`](../../string \"String - The basic String class.\")`, inlined:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`)`\n\nNamed function\n\n### `FArrow`\n\nArrow function\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/FunctionKind.html](https://api.haxe.org/haxe/macro/FunctionKind.html)"
- name: macro.FunctionKind.FAnonymous
  id: haxe/macro/functionkind#FAnonymous
  summary: null
  belongs_to: macro.FunctionKind
  description: |-
    ### `FAnonymous`

    Anonymous function
- name: macro.FunctionKind.FArrow
  id: haxe/macro/functionkind#FArrow
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.FunctionKind
  description: "### `FArrow`\n\nArrow function\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/FunctionKind.html](https://api.haxe.org/haxe/macro/FunctionKind.html)"
- name: macro.FunctionKind.FNamed()
  id: haxe/macro/functionkind#FNamed
  summary: null
  belongs_to: macro.FunctionKind
  description: |-
    ### `FNamed(name:`[`String`](../../string "String - The basic String class.")`, inlined:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`)`

    Named function
- name: macro.ImportExpr
  id: haxe/macro/importexpr
  summary: Represents the import expression
  description: "# ImportExpr\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents the import expression.\n\n## Fields\n\n### [`path`](#path)`:`[`Array`](../../array \"Array\")`<{pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`, name:`[`String`](../../string \"String - The basic String class.\")`}>`\n\nThe path to the import expression.\n\n### [`mode`](#mode)`:`[`ImportMode`](importmode \"haxe.macro.ImportMode - Represents the import mode.\")\n\nThe mode of the import expression.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ImportExpr.html](https://api.haxe.org/haxe/macro/ImportExpr.html)"
- name: macro.ImportExpr.mode
  id: haxe/macro/importexpr#mode
  summary: The mode of the import expression
  belongs_to: macro.ImportExpr
  description: "### [`mode`](#mode)`:`[`ImportMode`](importmode \"haxe.macro.ImportMode - Represents the import mode.\")\n\nThe mode of the import expression.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ImportExpr.html](https://api.haxe.org/haxe/macro/ImportExpr.html)"
- name: macro.ImportExpr.path
  id: haxe/macro/importexpr#path
  summary: The path to the import expression
  belongs_to: macro.ImportExpr
  description: |-
    ### [`path`](#path)`:`[`Array`](../../array "Array")`<{pos:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")`, name:`[`String`](../../string "String - The basic String class.")`}>`

    The path to the import expression.
- name: macro.ImportMode
  id: haxe/macro/importmode
  summary: Represents the import mode
  description: "# ImportMode\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents the import mode.\n\nSee also:\n\n- <https://haxe.org/manual/type-system-import.html>\n\n## Values\n\n### `INormal`\n\nRepresents a default import `import c`.\n\n### `IAsName(alias:`[`String`](../../string \"String - The basic String class.\")`)`\n\nRepresents the alias import `import c as alias`.\n\n### `IAll`\n\nRepresents the wildcard import `import *`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ImportMode.html](https://api.haxe.org/haxe/macro/ImportMode.html)"
- name: macro.ImportMode.IAll
  id: haxe/macro/importmode#IAll
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.ImportMode
  description: "### `IAll`\n\nRepresents the wildcard import `import *`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ImportMode.html](https://api.haxe.org/haxe/macro/ImportMode.html)"
- name: macro.ImportMode.IAsName()
  id: haxe/macro/importmode#IAsName
  summary: Represents the alias import import c as alias
  belongs_to: macro.ImportMode
  description: |-
    ### `IAsName(alias:`[`String`](../../string "String - The basic String class.")`)`

    Represents the alias import `import c as alias`.
- name: macro.ImportMode.INormal
  id: haxe/macro/importmode#INormal
  summary: Represents a default import import c
  belongs_to: macro.ImportMode
  description: |-
    ### `INormal`

    Represents a default import `import c`.
- name: macro.IncludePosition
  id: haxe/macro/includeposition
  summary: Prepend the file content to the body of the top-level closure
  description: "# IncludePosition([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.macro](index)\n\nfrom [String](../../string \"String - The basic String class.\") to [String](../../string \"String - The basic String class.\")\n\nimport [haxe.macro.Compiler](compiler)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Closure`](#Closure)`:`[`IncludePosition`](includeposition \"haxe.macro.IncludePosition\")` = \"closure\"`\n\nPrepend the file content to the body of the top-level closure.\n\nSince the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.\n\n### `inline``read only`[`Inline`](#Inline)`:`[`IncludePosition`](includeposition \"haxe.macro.IncludePosition\")` = \"inline\"`\n\nDirectly inject the file content at the call site.\n\n### `inline``read only`[`Top`](#Top)`:`[`IncludePosition`](includeposition \"haxe.macro.IncludePosition\")` = \"top\"`\n\nPrepend the file content to the output file.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/IncludePosition.html](https://api.haxe.org/haxe/macro/IncludePosition.html)"
- name: macro.IncludePosition.Closure
  id: haxe/macro/includeposition#Closure
  summary: Prepend the file content to the body of the top-level closure
  belongs_to: macro.IncludePosition
  description: |-
    ### `inline``read only`[`Closure`](#Closure)`:`[`IncludePosition`](includeposition "haxe.macro.IncludePosition")` = "closure"`

    Prepend the file content to the body of the top-level closure.

    Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.
- name: macro.IncludePosition.Inline
  id: haxe/macro/includeposition#Inline
  summary: Directly inject the file content at the call site
  belongs_to: macro.IncludePosition
  description: |-
    ### `inline``read only`[`Inline`](#Inline)`:`[`IncludePosition`](includeposition "haxe.macro.IncludePosition")` = "inline"`

    Directly inject the file content at the call site.
- name: macro.IncludePosition.Top
  id: haxe/macro/includeposition#Top
  summary: Prepend the file content to the output file
  belongs_to: macro.IncludePosition
  description: "### `inline``read only`[`Top`](#Top)`:`[`IncludePosition`](includeposition \"haxe.macro.IncludePosition\")` = \"top\"`\n\nPrepend the file content to the output file.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/IncludePosition.html](https://api.haxe.org/haxe/macro/IncludePosition.html)"
- name: macro.JSGenApi
  id: haxe/macro/jsgenapi
  summary: This is the api that is passed to the custom JS generator
  description: "# JSGenApi\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nThis is the api that is passed to the custom JS generator.\n\n## Fields\n\n### [`types`](#types)`:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>`\n\nall the types that were compiled by Haxe\n\n### [`setTypeAccessor`](#setTypeAccessor)`(``callb:`[`Type`](type \"haxe.macro.Type - Represents a type.\")` ‑> `[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\ndefine the JS code that gets generated when a class or enum is accessed in a typed expression\n\n### [`setCurrentClass`](#setCurrentClass)`(``c:`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nselect the current classe\n\n### [`quoteString`](#quoteString)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nquote and escape the given string constant\n\n### [`outputFile`](#outputFile)`:`[`String`](../../string \"String - The basic String class.\")\n\nthe file in which the JS code can be generated\n\n### [`main`](#main)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>`\n\nthe main call expression, if a -main class is defined\n\n### [`isKeyword`](#isKeyword)`(``ident:`[`String`](../../string \"String - The basic String class.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\ntells if the given identifier is a JS keyword\n\n### [`hasFeature`](#hasFeature)`(``f:`[`String`](../../string \"String - The basic String class.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\ncheck if a feature is used\n\n### [`generateValue`](#generateValue)`(``e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`):`[`String`](../../string \"String - The basic String class.\")\n\ngenerate the JS code for a given typed expression-value\n\n### [`generateStatement`](#generateStatement)`(``e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`):`[`String`](../../string \"String - The basic String class.\")\n\ngenerate the JS code for any given typed expression\n\n### [`buildMetaData`](#buildMetaData)`(``t:`[`BaseType`](basetype \"haxe.macro.BaseType - The information that all types (ClassType, EnumType, DefType, AbstractType) have in common.\")`):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>`\n\ncreate the metadata expression for the given type\n\n### [`addFeature`](#addFeature)`(``f:`[`String`](../../string \"String - The basic String class.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nadd a feature\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/JSGenApi.html](https://api.haxe.org/haxe/macro/JSGenApi.html)"
- name: macro.JSGenApi.addFeature()
  id: haxe/macro/jsgenapi#addFeature
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.JSGenApi
  description: "### [`addFeature`](#addFeature)`(``f:`[`String`](../../string \"String - The basic String class.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nadd a feature\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/JSGenApi.html](https://api.haxe.org/haxe/macro/JSGenApi.html)"
- name: macro.JSGenApi.buildMetaData()
  id: haxe/macro/jsgenapi#buildMetaData
  summary: null
  belongs_to: macro.JSGenApi
  description: |-
    ### [`buildMetaData`](#buildMetaData)`(``t:`[`BaseType`](basetype "haxe.macro.BaseType - The information that all types (ClassType, EnumType, DefType, AbstractType) have in common.")`):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>`

    create the metadata expression for the given type
- name: macro.JSGenApi.generateStatement()
  id: haxe/macro/jsgenapi#generateStatement
  summary: null
  belongs_to: macro.JSGenApi
  description: |-
    ### [`generateStatement`](#generateStatement)`(``e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`):`[`String`](../../string "String - The basic String class.")

    generate the JS code for any given typed expression
- name: macro.JSGenApi.generateValue()
  id: haxe/macro/jsgenapi#generateValue
  summary: null
  belongs_to: macro.JSGenApi
  description: |-
    ### [`generateValue`](#generateValue)`(``e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`):`[`String`](../../string "String - The basic String class.")

    generate the JS code for a given typed expression-value
- name: macro.JSGenApi.hasFeature()
  id: haxe/macro/jsgenapi#hasFeature
  summary: null
  belongs_to: macro.JSGenApi
  description: |-
    ### [`hasFeature`](#hasFeature)`(``f:`[`String`](../../string "String - The basic String class.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    check if a feature is used
- name: macro.JSGenApi.isKeyword()
  id: haxe/macro/jsgenapi#isKeyword
  summary: null
  belongs_to: macro.JSGenApi
  description: |-
    ### [`isKeyword`](#isKeyword)`(``ident:`[`String`](../../string "String - The basic String class.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    tells if the given identifier is a JS keyword
- name: macro.JSGenApi.main
  id: haxe/macro/jsgenapi#main
  summary: null
  belongs_to: macro.JSGenApi
  description: |-
    ### [`main`](#main)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>`

    the main call expression, if a -main class is defined
- name: macro.JSGenApi.outputFile
  id: haxe/macro/jsgenapi#outputFile
  summary: null
  belongs_to: macro.JSGenApi
  description: |-
    ### [`outputFile`](#outputFile)`:`[`String`](../../string "String - The basic String class.")

    the file in which the JS code can be generated
- name: macro.JSGenApi.quoteString()
  id: haxe/macro/jsgenapi#quoteString
  summary: null
  belongs_to: macro.JSGenApi
  description: |-
    ### [`quoteString`](#quoteString)`(``s:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    quote and escape the given string constant
- name: macro.JSGenApi.setCurrentClass()
  id: haxe/macro/jsgenapi#setCurrentClass
  summary: null
  belongs_to: macro.JSGenApi
  description: |-
    ### [`setCurrentClass`](#setCurrentClass)`(``c:`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`):`[`Void`](../../void "Void - The standard Void type.")

    select the current classe
- name: macro.JSGenApi.setTypeAccessor()
  id: haxe/macro/jsgenapi#setTypeAccessor
  summary: null
  belongs_to: macro.JSGenApi
  description: |-
    ### [`setTypeAccessor`](#setTypeAccessor)`(``callb:`[`Type`](type "haxe.macro.Type - Represents a type.")` ‑> `[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    define the JS code that gets generated when a class or enum is accessed in a typed expression
- name: macro.JSGenApi.types
  id: haxe/macro/jsgenapi#types
  summary: null
  belongs_to: macro.JSGenApi
  description: |-
    ### [`types`](#types)`:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>`

    all the types that were compiled by Haxe
- name: macro.MacroStringTools
  id: haxe/macro/macrostringtools
  summary: This class provides some utility methods to work with strings in macro context
  description: "# MacroStringTools\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nThis class provides some utility methods to work with strings in macro context.\n\n## Static methods\n\n### `static`[`formatString`](#formatString)`(``s:`[`String`](../../string \"String - The basic String class.\")`,`` ``pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):Unknown`\n\n*Available on macro*\n\nFormats [`String`](../../string) `s` using the usual interpolation rules.\n\nThe returned expression is a concatenation of string parts and escaped elements.\n\n### `static`[`isFormatExpr`](#isFormatExpr)`(``e:`[`ExprOf`](exprof \"haxe.macro.ExprOf - Represents a AST node identical to Expr, but it allows constraining the type of accepted expressions.\")`<`[`String`](../../string \"String - The basic String class.\")`>``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n*Available on macro*\n\nTells if `e` is a format string, i.e. uses single quotes `'` as delimiters.\n\nThis only works if `e` has a position which the compiler can find. While this is true for any expressions appearing in real Haxe code (i.e. some .hx file), it might not work for expressions generated by macros.\n\nThis operation depends on the position of `e`.\n\n### `static`[`toComplex`](#toComplex)`(``path:`[`String`](../../string \"String - The basic String class.\")`):`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")\n\n### `static`[`toDotPath`](#toDotPath)`(``pack:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>,`` ``name:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nConverts a path given by package `pack` and name `name` to a [`String`](../../string) separated by dots.\n\nIf `pack` has no elements, the result is `name`.\n\nIf `pack` is null, the result is unspecified.\n\nOtherwise the elements of `pack` are joined with a separating dot, with an appended dot separating the result from `name`.\n\n### `static`[`toFieldExpr`](#toFieldExpr)`(``sl:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>,`` ``?pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\nConverts an array of Strings `sl` to a field expression.\n\nIf `sl` has no elements, the result is null.\n\nIf `sl` has one element, the result is `EConst(CIdent(sl[0])`.\n\nOtherwise the result is a chain of `EField` nodes.\n\nIf `sl` is null, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/MacroStringTools.html](https://api.haxe.org/haxe/macro/MacroStringTools.html)"
- name: macro.MacroStringTools.formatString()
  id: haxe/macro/macrostringtools#formatString
  summary: Formats String s using the usual interpolation rules
  belongs_to: macro.MacroStringTools
  description: |-
    ### `static`[`formatString`](#formatString)`(``s:`[`String`](../../string "String - The basic String class.")`,``pos:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")`):Unknown`

    *Available on macro*

    Formats [`String`](../../string) `s` using the usual interpolation rules.

    The returned expression is a concatenation of string parts and escaped elements.
- name: macro.MacroStringTools.isFormatExpr()
  id: haxe/macro/macrostringtools#isFormatExpr
  summary: Tells if e is a format string, i.e
  belongs_to: macro.MacroStringTools
  description: |-
    ### `static`[`isFormatExpr`](#isFormatExpr)`(``e:`[`ExprOf`](exprof "haxe.macro.ExprOf - Represents a AST node identical to Expr, but it allows constraining the type of accepted expressions.")`<`[`String`](../../string "String - The basic String class.")`>``):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    *Available on macro*

    Tells if `e` is a format string, i.e. uses single quotes `'` as delimiters.

    This only works if `e` has a position which the compiler can find. While this is true for any expressions appearing in real Haxe code (i.e. some .hx file), it might not work for expressions generated by macros.

    This operation depends on the position of `e`.
- name: macro.MacroStringTools.toComplex()
  id: haxe/macro/macrostringtools#toComplex
  summary: null
  belongs_to: macro.MacroStringTools
  description: '### `static`[`toComplex`](#toComplex)`(``path:`[`String`](../../string "String - The basic String class.")`):`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")'
- name: macro.MacroStringTools.toDotPath()
  id: haxe/macro/macrostringtools#toDotPath
  summary: Converts a path given by package pack and name name to a String separated by dots
  belongs_to: macro.MacroStringTools
  description: |-
    ### `static`[`toDotPath`](#toDotPath)`(``pack:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>,``name:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")

    Converts a path given by package `pack` and name `name` to a [`String`](../../string) separated by dots.

    If `pack` has no elements, the result is `name`.

    If `pack` is null, the result is unspecified.

    Otherwise the elements of `pack` are joined with a separating dot, with an appended dot separating the result from `name`.
- name: macro.MacroStringTools.toFieldExpr()
  id: haxe/macro/macrostringtools#toFieldExpr
  summary: Converts an array of Strings sl to a field expression
  belongs_to: macro.MacroStringTools
  description: "### `static`[`toFieldExpr`](#toFieldExpr)`(``sl:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>,``?pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\nConverts an array of Strings `sl` to a field expression.\n\nIf `sl` has no elements, the result is null.\n\nIf `sl` has one element, the result is `EConst(CIdent(sl[0])`.\n\nOtherwise the result is a chain of `EField` nodes.\n\nIf `sl` is null, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/MacroStringTools.html](https://api.haxe.org/haxe/macro/MacroStringTools.html)"
- name: macro.MacroType
  id: haxe/macro/macrotype
  summary: This type is meant to be used to generate custom types using a macro
  description: "# MacroType\\<Const\\>\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nThis type is meant to be used to generate custom types using a macro. For instance by doing MacroType\\<\\[my.Class.myMacro(55)\\]\\>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/MacroType.html](https://api.haxe.org/haxe/macro/MacroType.html)"
- name: macro.Message
  id: haxe/macro/message
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Message\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Context](context)\n\n*Available on all platforms*\n\n## Values\n\n### `Info(msg:`[`String`](../../string \"String - The basic String class.\")`, pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`)`\n\n### `Warning(msg:`[`String`](../../string \"String - The basic String class.\")`, pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Message.html](https://api.haxe.org/haxe/macro/Message.html)"
- name: macro.Message.Info()
  id: haxe/macro/message#Info
  summary: null
  belongs_to: macro.Message
  description: '### `Info(msg:`[`String`](../../string "String - The basic String class.")`, pos:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")`)`'
- name: macro.Message.Warning()
  id: haxe/macro/message#Warning
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.Message
  description: "### `Warning(msg:`[`String`](../../string \"String - The basic String class.\")`, pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Message.html](https://api.haxe.org/haxe/macro/Message.html)"
- name: macro.MetaAccess
  id: haxe/macro/metaaccess
  summary: MetaAccess is a wrapper for the Metadata array
  description: "# MetaAccess\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nMetaAccess is a wrapper for the [`Metadata`](metadata#Metadata) array. It can be used to add metadata to and remove metadata from its origin.\n\n## Fields\n\n### [`remove`](#remove)`(``name:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nRemoves all \\`name\\` metadata entries from the origin of \\`this\\` MetaAccess. This method might clear several metadata entries of the same name. If a \\`Metadata\\` array is obtained through a call to \\`get\\`, a subsequent call to \\`remove\\` has no effect on that array. If \\`name\\` is null, compilation fails with an error.\n\n### [`has`](#has)`(``name:`[`String`](../../string \"String - The basic String class.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if the origin of \\`this\\` MetaAccess has a \\`name\\` metadata entry. If \\`name\\` is null, compilation fails with an error.\n\n### [`get`](#get)`():`[`Metadata`](metadata \"haxe.macro.Metadata - Represents metadata in the AST.\")\n\nReturn the wrapped \\`Metadata\\` array. Modifying this array has no effect on the origin of \\`this\\` MetaAccess. The \\`add\\` and \\`remove\\` methods can be used for that.\n\n### [`extract`](#extract)`(``name:`[`String`](../../string \"String - The basic String class.\")`):`[`Array`](../../array \"Array\")`<`[`MetadataEntry`](metadataentry \"haxe.macro.MetadataEntry - Represents a metadata entry in the AST.\")`>`\n\nExtract metadata entries by given \\`name\\`. If there's no metadata with such name, empty array \\`\\[\\]\\` is returned. If \\`name\\` is null, compilation fails with an error.\n\n### [`add`](#add)`(``name:`[`String`](../../string \"String - The basic String class.\")`,`` ``params:`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>,`` ``pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nAdds the metadata specified by \\`name\\`, \\`params\\` and \\`pos\\` to the origin of \\`this\\` MetaAccess. Metadata names are not unique during compilation, so this method never overwrites a previous metadata. If a \\`Metadata\\` array is obtained through a call to \\`get\\`, a subsequent call to \\`add\\` has no effect on that array. If any argument is null, compilation fails with an error.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/MetaAccess.html](https://api.haxe.org/haxe/macro/MetaAccess.html)"
- name: macro.MetaAccess.add()
  id: haxe/macro/metaaccess#add
  summary: Adds the metadata specified by `name`, `params` and `pos` to the origin of `this` MetaAccess
  belongs_to: macro.MetaAccess
  description: "### [`add`](#add)`(``name:`[`String`](../../string \"String - The basic String class.\")`,``params:`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>,``pos:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nAdds the metadata specified by \\`name\\`, \\`params\\` and \\`pos\\` to the origin of \\`this\\` MetaAccess. Metadata names are not unique during compilation, so this method never overwrites a previous metadata. If a \\`Metadata\\` array is obtained through a call to \\`get\\`, a subsequent call to \\`add\\` has no effect on that array. If any argument is null, compilation fails with an error.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/MetaAccess.html](https://api.haxe.org/haxe/macro/MetaAccess.html)"
- name: macro.MetaAccess.extract()
  id: haxe/macro/metaaccess#extract
  summary: Extract metadata entries by given `name`. If there's no metadata with such name, empty array `[]` is returned
  belongs_to: macro.MetaAccess
  description: |-
    ### [`extract`](#extract)`(``name:`[`String`](../../string "String - The basic String class.")`):`[`Array`](../../array "Array")`<`[`MetadataEntry`](metadataentry "haxe.macro.MetadataEntry - Represents a metadata entry in the AST.")`>`

    Extract metadata entries by given \`name\`. If there's no metadata with such name, empty array \`\[\]\` is returned. If \`name\` is null, compilation fails with an error.
- name: macro.MetaAccess.get()
  id: haxe/macro/metaaccess#get
  summary: Return the wrapped `Metadata` array
  belongs_to: macro.MetaAccess
  description: |-
    ### [`get`](#get)`():`[`Metadata`](metadata "haxe.macro.Metadata - Represents metadata in the AST.")

    Return the wrapped \`Metadata\` array. Modifying this array has no effect on the origin of \`this\` MetaAccess. The \`add\` and \`remove\` methods can be used for that.
- name: macro.MetaAccess.has()
  id: haxe/macro/metaaccess#has
  summary: Tells if the origin of `this` MetaAccess has a `name` metadata entry
  belongs_to: macro.MetaAccess
  description: |-
    ### [`has`](#has)`(``name:`[`String`](../../string "String - The basic String class.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if the origin of \`this\` MetaAccess has a \`name\` metadata entry. If \`name\` is null, compilation fails with an error.
- name: macro.MetaAccess.remove()
  id: haxe/macro/metaaccess#remove
  summary: Removes all `name` metadata entries from the origin of `this` MetaAccess
  belongs_to: macro.MetaAccess
  description: |-
    ### [`remove`](#remove)`(``name:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")

    Removes all \`name\` metadata entries from the origin of \`this\` MetaAccess. This method might clear several metadata entries of the same name. If a \`Metadata\` array is obtained through a call to \`get\`, a subsequent call to \`remove\` has no effect on that array. If \`name\` is null, compilation fails with an error.
- name: macro.Metadata
  id: haxe/macro/metadata
  summary: Represents metadata in the AST
  description: "# Metadata\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents metadata in the AST.\n\n## Alias\n\n*alias for* [`Array`](../../array \"Array\")`<`[`haxe.macro.MetadataEntry`](metadataentry \"haxe.macro.MetadataEntry - Represents a metadata entry in the AST.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Metadata.html](https://api.haxe.org/haxe/macro/Metadata.html)"
- name: macro.MetadataEntry
  id: haxe/macro/metadataentry
  summary: Represents a metadata entry in the AST
  description: "# MetadataEntry\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a metadata entry in the AST.\n\n## Fields\n\n### [`pos`](#pos)`:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nThe position of the metadata entry.\n\n### `optional`[`params`](#params)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>>`\n\nThe optional parameters of the metadata entry.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the metadata entry.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/MetadataEntry.html](https://api.haxe.org/haxe/macro/MetadataEntry.html)"
- name: macro.MetadataEntry.name
  id: haxe/macro/metadataentry#name
  summary: The name of the metadata entry
  belongs_to: macro.MetadataEntry
  description: "### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the metadata entry.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/MetadataEntry.html](https://api.haxe.org/haxe/macro/MetadataEntry.html)"
- name: macro.MetadataEntry.params
  id: haxe/macro/metadataentry#params
  summary: The optional parameters of the metadata entry
  belongs_to: macro.MetadataEntry
  description: |-
    ### `optional`[`params`](#params)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Array`](../../array "Array")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>>`

    The optional parameters of the metadata entry.
- name: macro.MetadataEntry.pos
  id: haxe/macro/metadataentry#pos
  summary: The position of the metadata entry
  belongs_to: macro.MetadataEntry
  description: |-
    ### [`pos`](#pos)`:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    The position of the metadata entry.
- name: macro.MethodKind
  id: haxe/macro/methodkind
  summary: Represents the method kind
  description: "# MethodKind\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents the method kind.\n\n## Values\n\n### `MethNormal`\n\nA normal method.\n\n### `MethInline`\n\nAn inline method.\n\nSee also:\n\n- <https://haxe.org/manual/class-field-inline.html>\n\n### `MethDynamic`\n\nA dynamic, rebindable method.\n\nSee also:\n\n- <https://haxe.org/manual/class-field-dynamic.html>\n\n### `MethMacro`\n\nA macro method.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/MethodKind.html](https://api.haxe.org/haxe/macro/MethodKind.html)"
- name: macro.MethodKind.MethDynamic
  id: haxe/macro/methodkind#MethDynamic
  summary: A dynamic, rebindable method
  belongs_to: macro.MethodKind
  description: |-
    ### `MethDynamic`

    A dynamic, rebindable method.

    See also:

    - <https://haxe.org/manual/class-field-dynamic.html>

    &nbsp;
- name: macro.MethodKind.MethInline
  id: haxe/macro/methodkind#MethInline
  summary: An inline method
  belongs_to: macro.MethodKind
  description: |-
    ### `MethInline`

    An inline method.

    See also:

    - <https://haxe.org/manual/class-field-inline.html>
- name: macro.MethodKind.MethMacro
  id: haxe/macro/methodkind#MethMacro
  summary: A macro method
  belongs_to: macro.MethodKind
  description: "### `MethMacro`\n\nA macro method.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/MethodKind.html](https://api.haxe.org/haxe/macro/MethodKind.html)"
- name: macro.MethodKind.MethNormal
  id: haxe/macro/methodkind#MethNormal
  summary: A normal method
  belongs_to: macro.MethodKind
  description: |-
    ### `MethNormal`

    A normal method.
- name: macro.ModuleCheckPolicy
  id: haxe/macro/modulecheckpolicy
  summary: If a file is modified, also checks if its content changed
  description: "# ModuleCheckPolicy([Int](../../int \"Int - The standard Int type.\"))\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.CompilationServer](compilationserver)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`CheckFileContentModification`](#CheckFileContentModification)`:`[`ModuleCheckPolicy`](modulecheckpolicy \"haxe.macro.ModuleCheckPolicy\")` = 1`\n\nIf a file is modified, also checks if its content changed. This check is not free, but useful when .hx files are auto-generated.\n\n### `inline``read only`[`NoCheckDependencies`](#NoCheckDependencies)`:`[`ModuleCheckPolicy`](modulecheckpolicy \"haxe.macro.ModuleCheckPolicy\")` = 2`\n\nDisables dependency checks of the module.\n\nThis should only be used for modules that don't depend on any module that might change. It is effectively a promise to the compiler that the module is unaffected by changes made to other modules. If that promise is broken, the compiler is sad and things probably stop working.\n\n### `inline``read only`[`NoCheckFileTimeModification`](#NoCheckFileTimeModification)`:`[`ModuleCheckPolicy`](modulecheckpolicy \"haxe.macro.ModuleCheckPolicy\")` = 0`\n\nDisables file modification checks, avoiding some filesystem operations.\n\n### `inline``read only`[`NoCheckShadowing`](#NoCheckShadowing)`:`[`ModuleCheckPolicy`](modulecheckpolicy \"haxe.macro.ModuleCheckPolicy\")` = 3`\n\nDisables file shadowing checks. Shadowing can occur when a new file is added to a class-path that has higher priority than the class-path of the current module file.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ModuleCheckPolicy.html](https://api.haxe.org/haxe/macro/ModuleCheckPolicy.html)"
- name: macro.ModuleCheckPolicy.CheckFileContentModification
  id: haxe/macro/modulecheckpolicy#CheckFileContentModification
  summary: If a file is modified, also checks if its content changed
  belongs_to: macro.ModuleCheckPolicy
  description: |-
    ### `inline``read only`[`CheckFileContentModification`](#CheckFileContentModification)`:`[`ModuleCheckPolicy`](modulecheckpolicy "haxe.macro.ModuleCheckPolicy")` = 1`

    If a file is modified, also checks if its content changed. This check is not free, but useful when .hx files are auto-generated.
- name: macro.ModuleCheckPolicy.NoCheckDependencies
  id: haxe/macro/modulecheckpolicy#NoCheckDependencies
  summary: Disables dependency checks of the module
  belongs_to: macro.ModuleCheckPolicy
  description: |-
    ### `inline``read only`[`NoCheckDependencies`](#NoCheckDependencies)`:`[`ModuleCheckPolicy`](modulecheckpolicy "haxe.macro.ModuleCheckPolicy")` = 2`

    Disables dependency checks of the module.

    This should only be used for modules that don't depend on any module that might change. It is effectively a promise to the compiler that the module is unaffected by changes made to other modules. If that promise is broken, the compiler is sad and things probably stop working.
- name: macro.ModuleCheckPolicy.NoCheckFileTimeModification
  id: haxe/macro/modulecheckpolicy#NoCheckFileTimeModification
  summary: Disables file modification checks, avoiding some filesystem operations
  belongs_to: macro.ModuleCheckPolicy
  description: |-
    ### `inline``read only`[`NoCheckFileTimeModification`](#NoCheckFileTimeModification)`:`[`ModuleCheckPolicy`](modulecheckpolicy "haxe.macro.ModuleCheckPolicy")` = 0`

    Disables file modification checks, avoiding some filesystem operations.
- name: macro.ModuleCheckPolicy.NoCheckShadowing
  id: haxe/macro/modulecheckpolicy#NoCheckShadowing
  summary: Disables file shadowing checks
  belongs_to: macro.ModuleCheckPolicy
  description: "### `inline``read only`[`NoCheckShadowing`](#NoCheckShadowing)`:`[`ModuleCheckPolicy`](modulecheckpolicy \"haxe.macro.ModuleCheckPolicy\")` = 3`\n\nDisables file shadowing checks. Shadowing can occur when a new file is added to a class-path that has higher priority than the class-path of the current module file.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ModuleCheckPolicy.html](https://api.haxe.org/haxe/macro/ModuleCheckPolicy.html)"
- name: macro.ModuleType
  id: haxe/macro/moduletype
  summary: Represents a module type
  description: "# ModuleType\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents a module type. These are the types that can be declared in a Haxe module and which are passed to the generators (except `TTypeDecl`).\n\n## Values\n\n### `TClassDecl(c:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>)`\n\nA class.\n\n### `TEnumDecl(e:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`EnumType`](enumtype \"haxe.macro.EnumType - Represents an enum type.\")`>)`\n\nAn enum.\n\n### `TTypeDecl(t:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`DefType`](deftype \"haxe.macro.DefType - Represents a typedef.\")`>)`\n\nA typedef.\n\n### `TAbstract(a:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`AbstractType`](abstracttype \"haxe.macro.AbstractType - Represents an abstract type.\")`>)`\n\nAn abstract.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ModuleType.html](https://api.haxe.org/haxe/macro/ModuleType.html)"
- name: macro.ModuleType.TAbstract()
  id: haxe/macro/moduletype#TAbstract
  summary: An abstract
  belongs_to: macro.ModuleType
  description: "### `TAbstract(a:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`AbstractType`](abstracttype \"haxe.macro.AbstractType - Represents an abstract type.\")`>)`\n\nAn abstract.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ModuleType.html](https://api.haxe.org/haxe/macro/ModuleType.html)"
- name: macro.ModuleType.TClassDecl()
  id: haxe/macro/moduletype#TClassDecl
  summary: A class
  belongs_to: macro.ModuleType
  description: |-
    ### `TClassDecl(c:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>)`

    A class.
- name: macro.ModuleType.TEnumDecl()
  id: haxe/macro/moduletype#TEnumDecl
  summary: An enum
  belongs_to: macro.ModuleType
  description: |-
    ### `TEnumDecl(e:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`EnumType`](enumtype "haxe.macro.EnumType - Represents an enum type.")`>)`

    An enum.
- name: macro.ModuleType.TTypeDecl()
  id: haxe/macro/moduletype#TTypeDecl
  summary: A typedef
  belongs_to: macro.ModuleType
  description: |-
    ### `TTypeDecl(t:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`DefType`](deftype "haxe.macro.DefType - Represents a typedef.")`>)`

    A typedef.
- name: macro.NullSafetyMode
  id: haxe/macro/nullsafetymode
  summary: Loose safety
  description: "# NullSafetyMode([String](../../string \"String - The basic String class.\"))\n\npackage [haxe.macro](index)\n\nto [String](../../string \"String - The basic String class.\")\n\nimport [haxe.macro.Compiler](compiler)\n\n*Available on all platforms*\n\n## Variables\n\n### `inline``read only`[`Loose`](#Loose)`:`[`NullSafetyMode`](nullsafetymode \"haxe.macro.NullSafetyMode\")` = \"Loose\"`\n\nLoose safety. If an expression is checked `!= null`, then it's considered safe even if it could be modified after the check. E.g.\n\n``` prettyprint\nfunction example(o:{field:Null<String>}) {\n    if(o.field != null) {\n        mutate(o);\n        var notNullable:String = o.field; //no error\n    }\n}\n\nfunction mutate(o:{field:Null<String>}) {\n    o.field = null;\n}\n```\n\n### `inline``read only`[`Off`](#Off)`:`[`NullSafetyMode`](nullsafetymode \"haxe.macro.NullSafetyMode\")` = \"Off\"`\n\nDisable null safety.\n\n### `inline``read only`[`Strict`](#Strict)`:`[`NullSafetyMode`](nullsafetymode \"haxe.macro.NullSafetyMode\")` = \"Strict\"`\n\nFull scale null safety. If a field is checked `!= null` it stays safe until a call is made or any field of any object is reassigned, because that could potentially alter an object of the checked field. E.g.\n\n``` prettyprint\nfunction example(o:{field:Null<String>}, b:{o:{field:Null<String>}}) {\n    if(o.field != null) {\n        var notNullable:String = o.field; //no error\n        someCall();\n        var notNullable:String = o.field; // Error!\n    }\n    if(o.field != null) {\n        var notNullable:String = o.field; //no error\n        b.o = {field:null};\n        var notNullable:String = o.field; // Error!\n    }\n}\n```\n\n### `inline``read only`[`StrictThreaded`](#StrictThreaded)`:`[`NullSafetyMode`](nullsafetymode \"haxe.macro.NullSafetyMode\")` = \"StrictThreaded\"`\n\nFull scale null safety for a multi-threaded environment. With this mode checking a field `!= null` does not make it safe, because it could be changed from another thread at the same time or immediately after the check. The only nullable thing could be safe are local variables.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/NullSafetyMode.html](https://api.haxe.org/haxe/macro/NullSafetyMode.html)"
- name: macro.NullSafetyMode.Loose
  id: haxe/macro/nullsafetymode#Loose
  summary: Loose safety
  belongs_to: macro.NullSafetyMode
  description: |-
    ### `inline``read only`[`Loose`](#Loose)`:`[`NullSafetyMode`](nullsafetymode "haxe.macro.NullSafetyMode")` = "Loose"`

    Loose safety. If an expression is checked `!= null`, then it's considered safe even if it could be modified after the check. E.g.

              function example(o:{field:Null<String>}) {
            if(o.field != null) {
                mutate(o);
                var notNullable:String = o.field; //no error
            }
        }

        function mutate(o:{field:Null<String>}) {
            o.field = null;
        }
- name: macro.NullSafetyMode.Off
  id: haxe/macro/nullsafetymode#Off
  summary: Disable null safety
  belongs_to: macro.NullSafetyMode
  description: |-
    ### `inline``read only`[`Off`](#Off)`:`[`NullSafetyMode`](nullsafetymode "haxe.macro.NullSafetyMode")` = "Off"`

    Disable null safety.
- name: macro.NullSafetyMode.Strict
  id: haxe/macro/nullsafetymode#Strict
  summary: Full scale null safety
  belongs_to: macro.NullSafetyMode
  description: |-
    ### `inline``read only`[`Strict`](#Strict)`:`[`NullSafetyMode`](nullsafetymode "haxe.macro.NullSafetyMode")` = "Strict"`

    Full scale null safety. If a field is checked `!= null` it stays safe until a call is made or any field of any object is reassigned, because that could potentially alter an object of the checked field. E.g.

              function example(o:{field:Null<String>}, b:{o:{field:Null<String>}}) {
            if(o.field != null) {
                var notNullable:String = o.field; //no error
                someCall();
                var notNullable:String = o.field; // Error!
            }
            if(o.field != null) {
                var notNullable:String = o.field; //no error
                b.o = {field:null};
                var notNullable:String = o.field; // Error!
            }
        }
- name: macro.NullSafetyMode.StrictThreaded
  id: haxe/macro/nullsafetymode#StrictThreaded
  summary: Full scale null safety for a multi-threaded environment
  belongs_to: macro.NullSafetyMode
  description: "### `inline``read only`[`StrictThreaded`](#StrictThreaded)`:`[`NullSafetyMode`](nullsafetymode \"haxe.macro.NullSafetyMode\")` = \"StrictThreaded\"`\n\nFull scale null safety for a multi-threaded environment. With this mode checking a field `!= null` does not make it safe, because it could be changed from another thread at the same time or immediately after the check. The only nullable thing could be safe are local variables.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/NullSafetyMode.html](https://api.haxe.org/haxe/macro/NullSafetyMode.html)"
- name: macro.ObjectField
  id: haxe/macro/objectfield
  summary: Represents the field of an object declaration
  description: "# ObjectField\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents the field of an object declaration.\n\n## Fields\n\n### `optional`[`quotes`](#quotes)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`QuoteStatus`](quotestatus \"haxe.macro.QuoteStatus - Represents the way something is quoted.\")`>`\n\nHow the field name is quoted.\n\n### [`field`](#field)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the field.\n\n### [`expr`](#expr)`:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\nThe field expression.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ObjectField.html](https://api.haxe.org/haxe/macro/ObjectField.html)"
- name: macro.ObjectField.expr
  id: haxe/macro/objectfield#expr
  summary: The field expression
  belongs_to: macro.ObjectField
  description: "### [`expr`](#expr)`:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")\n\nThe field expression.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/ObjectField.html](https://api.haxe.org/haxe/macro/ObjectField.html)"
- name: macro.ObjectField.field
  id: haxe/macro/objectfield#field
  summary: The name of the field
  belongs_to: macro.ObjectField
  description: |-
    ### [`field`](#field)`:`[`String`](../../string "String - The basic String class.")

    The name of the field.
- name: macro.ObjectField.quotes
  id: haxe/macro/objectfield#quotes
  summary: How the field name is quoted
  belongs_to: macro.ObjectField
  description: |-
    ### `optional`[`quotes`](#quotes)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`QuoteStatus`](quotestatus "haxe.macro.QuoteStatus - Represents the way something is quoted.")`>`

    How the field name is quoted.
- name: macro.Position
  id: haxe/macro/position
  summary: Represents a position in a file
  description: "# Position\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a position in a file.\n\n## Fields\n\n### [`min`](#min)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nPosition of the first character.\n\n### [`max`](#max)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nPosition of the last character.\n\n### [`file`](#file)`:`[`String`](../../string \"String - The basic String class.\")\n\nReference to the filename.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Position.html](https://api.haxe.org/haxe/macro/Position.html)"
- name: macro.Position.file
  id: haxe/macro/position#file
  summary: Reference to the filename
  belongs_to: macro.Position
  description: "### [`file`](#file)`:`[`String`](../../string \"String - The basic String class.\")\n\nReference to the filename.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Position.html](https://api.haxe.org/haxe/macro/Position.html)"
- name: macro.Position.max
  id: haxe/macro/position#max
  summary: Position of the last character
  belongs_to: macro.Position
  description: |-
    ### [`max`](#max)`:`[`Int`](../../int "Int - The standard Int type.")

    Position of the last character.
- name: macro.Position.min
  id: haxe/macro/position#min
  summary: Position of the first character
  belongs_to: macro.Position
  description: |-
    ### [`min`](#min)`:`[`Int`](../../int "Int - The standard Int type.")

    Position of the first character.
- name: macro.PositionTools
  id: haxe/macro/positiontools
  summary: Like Context.getPosInfos, except this method is available on all platforms
  description: "# PositionTools\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\n## Static methods\n\n### `static`[`getInfos`](#getInfos)`(``p:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):{min:`[`Int`](../../int \"Int - The standard Int type.\")`, max:`[`Int`](../../int \"Int - The standard Int type.\")`, file:`[`String`](../../string \"String - The basic String class.\")`}`\n\nLike [`Context.getPosInfos`](context#getPosInfos), except this method is available on all platforms.\n\n### `static`[`here`](#here)`():`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nReturns the [`Position`](position#Position) where the caller of `here` is.\n\n### `static`[`make`](#make)`(``inf:{min:`[`Int`](../../int \"Int - The standard Int type.\")`, max:`[`Int`](../../int \"Int - The standard Int type.\")`, file:`[`String`](../../string \"String - The basic String class.\")`}``):`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nLike [`Context.makePosition`](context#makePosition), except this method is available on all platforms.\n\n### `static`[`toLocation`](#toLocation)`(``p:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Location`](../display/location \"haxe.display.Location - Represents a location inside a resource, such as a line inside a text file.\")\n\n*Available on macro*\n\nConverts a [`haxe.macro.Position`](position#Position) to a [`haxe.display.Position.Location`](position#Location).\n\nThis operation requires the source file the be known to the Haxe lexer in order to determine line breaks. It is thus only available in macro context.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/PositionTools.html](https://api.haxe.org/haxe/macro/PositionTools.html)"
- name: macro.PositionTools.getInfos()
  id: haxe/macro/positiontools#getInfos
  summary: Like Context.getPosInfos, except this method is available on all platforms
  belongs_to: macro.PositionTools
  description: |-
    ### `static`[`getInfos`](#getInfos)`(``p:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")`):{min:`[`Int`](../../int "Int - The standard Int type.")`, max:`[`Int`](../../int "Int - The standard Int type.")`, file:`[`String`](../../string "String - The basic String class.")`}`

    Like [`Context.getPosInfos`](context#getPosInfos), except this method is available on all platforms.
- name: macro.PositionTools.here()
  id: haxe/macro/positiontools#here
  summary: Returns the Position where the caller of here is
  belongs_to: macro.PositionTools
  description: |-
    ### `static`[`here`](#here)`():`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    Returns the [`Position`](position#Position) where the caller of `here` is.
- name: macro.PositionTools.make()
  id: haxe/macro/positiontools#make
  summary: Like Context.makePosition, except this method is available on all platforms
  belongs_to: macro.PositionTools
  description: |-
    ### `static`[`make`](#make)`(``inf:{min:`[`Int`](../../int "Int - The standard Int type.")`, max:`[`Int`](../../int "Int - The standard Int type.")`, file:`[`String`](../../string "String - The basic String class.")`}``):`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    Like [`Context.makePosition`](context#makePosition), except this method is available on all platforms.
- name: macro.PositionTools.toLocation()
  id: haxe/macro/positiontools#toLocation
  summary: Converts a haxe.macro.Position to a haxe.display.Position.Location
  belongs_to: macro.PositionTools
  description: "### `static`[`toLocation`](#toLocation)`(``p:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")`):`[`Location`](../display/location \"haxe.display.Location - Represents a location inside a resource, such as a line inside a text file.\")\n\n*Available on macro*\n\nConverts a [`haxe.macro.Position`](position#Position) to a [`haxe.display.Position.Location`](position#Location).\n\nThis operation requires the source file the be known to the Haxe lexer in order to determine line breaks. It is thus only available in macro context.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/PositionTools.html](https://api.haxe.org/haxe/macro/PositionTools.html)"
- name: macro.Printer
  id: haxe/macro/printer
  summary: This class provides some utility methods to convert elements from the macro context to a human-readable String representation
  description: "# Printer\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nThis class provides some utility methods to convert elements from the macro context to a human-readable String representation.\n\n## Constructor\n\n### [`new`](#new)`(``tabString:`[`String`](../../string \"String - The basic String class.\")` = \"\\t\"``)`\n\n## Methods\n\n### [`printAccess`](#printAccess)`(``access:`[`Access`](access \"haxe.macro.Access - Represents an access modifier.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printBinop`](#printBinop)`(``op:`[`Binop`](binop \"haxe.macro.Binop - A binary operator.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printComplexType`](#printComplexType)`(``ct:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printConstant`](#printConstant)`(``c:`[`Constant`](constant \"haxe.macro.Constant - Represents a constant.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printExpr`](#printExpr)`(``e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printExprWithPositions`](#printExprWithPositions)`(``e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printExprs`](#printExprs)`(``el:`[`Array`](../../array \"Array\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>,`` ``sep:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printField`](#printField)`(``field:`[`Field`](field \"haxe.macro.Field - Represents a field in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printFormatString`](#printFormatString)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printFunction`](#printFunction)`(``func:`[`Function`](function \"haxe.macro.Function - Represents a function in the AST.\")`,`` ``?kind:`[`FunctionKind`](functionkind \"haxe.macro.FunctionKind\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printFunctionArg`](#printFunctionArg)`(``arg:`[`FunctionArg`](functionarg \"haxe.macro.FunctionArg - Represents a function argument in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printMetadata`](#printMetadata)`(``meta:`[`MetadataEntry`](metadataentry \"haxe.macro.MetadataEntry - Represents a metadata entry in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printObjectField`](#printObjectField)`(``of:`[`ObjectField`](objectfield \"haxe.macro.ObjectField - Represents the field of an object declaration.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printObjectFieldKey`](#printObjectFieldKey)`(``of:`[`ObjectField`](objectfield \"haxe.macro.ObjectField - Represents the field of an object declaration.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printString`](#printString)`(``s:`[`String`](../../string \"String - The basic String class.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printTypeDefinition`](#printTypeDefinition)`(``t:`[`TypeDefinition`](typedefinition \"haxe.macro.TypeDefinition - Represents a type definition.\")`,`` ``printPackage:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true``):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printTypeParam`](#printTypeParam)`(``param:`[`TypeParam`](typeparam \"haxe.macro.TypeParam - Represents a concrete type parameter in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printTypeParamDecl`](#printTypeParamDecl)`(``tpd:`[`TypeParamDecl`](typeparamdecl \"haxe.macro.TypeParamDecl - Represents a type parameter declaration in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printTypePath`](#printTypePath)`(``tp:`[`TypePath`](typepath \"haxe.macro.TypePath - Represents a type path in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printUnop`](#printUnop)`(``op:`[`Unop`](unop \"haxe.macro.Unop - A unary operator.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n### [`printVar`](#printVar)`(``v:`[`Var`](var \"haxe.macro.Var - Represents a variable in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Printer.html](https://api.haxe.org/haxe/macro/Printer.html)"
- name: macro.Printer.printAccess()
  id: haxe/macro/printer#printAccess
  summary: null
  belongs_to: macro.Printer
  description: '### [`printAccess`](#printAccess)`(``access:`[`Access`](access "haxe.macro.Access - Represents an access modifier.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printBinop()
  id: haxe/macro/printer#printBinop
  summary: null
  belongs_to: macro.Printer
  description: '### [`printBinop`](#printBinop)`(``op:`[`Binop`](binop "haxe.macro.Binop - A binary operator.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printComplexType()
  id: haxe/macro/printer#printComplexType
  summary: null
  belongs_to: macro.Printer
  description: '### [`printComplexType`](#printComplexType)`(``ct:`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printConstant()
  id: haxe/macro/printer#printConstant
  summary: null
  belongs_to: macro.Printer
  description: '### [`printConstant`](#printConstant)`(``c:`[`Constant`](constant "haxe.macro.Constant - Represents a constant.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printExpr()
  id: haxe/macro/printer#printExpr
  summary: null
  belongs_to: macro.Printer
  description: '### [`printExpr`](#printExpr)`(``e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printExprs()
  id: haxe/macro/printer#printExprs
  summary: null
  belongs_to: macro.Printer
  description: '### [`printExprs`](#printExprs)`(``el:`[`Array`](../../array "Array")`<`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`>,``sep:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printExprWithPositions()
  id: haxe/macro/printer#printExprWithPositions
  summary: null
  belongs_to: macro.Printer
  description: '### [`printExprWithPositions`](#printExprWithPositions)`(``e:`[`Expr`](expr "haxe.macro.Expr - Represents a node in the AST.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printField()
  id: haxe/macro/printer#printField
  summary: null
  belongs_to: macro.Printer
  description: '### [`printField`](#printField)`(``field:`[`Field`](field "haxe.macro.Field - Represents a field in the AST.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printFormatString()
  id: haxe/macro/printer#printFormatString
  summary: null
  belongs_to: macro.Printer
  description: '### [`printFormatString`](#printFormatString)`(``s:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printFunction()
  id: haxe/macro/printer#printFunction
  summary: null
  belongs_to: macro.Printer
  description: '### [`printFunction`](#printFunction)`(``func:`[`Function`](function "haxe.macro.Function - Represents a function in the AST.")`,``?kind:`[`FunctionKind`](functionkind "haxe.macro.FunctionKind")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printFunctionArg()
  id: haxe/macro/printer#printFunctionArg
  summary: null
  belongs_to: macro.Printer
  description: '### [`printFunctionArg`](#printFunctionArg)`(``arg:`[`FunctionArg`](functionarg "haxe.macro.FunctionArg - Represents a function argument in the AST.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printMetadata()
  id: haxe/macro/printer#printMetadata
  summary: null
  belongs_to: macro.Printer
  description: '### [`printMetadata`](#printMetadata)`(``meta:`[`MetadataEntry`](metadataentry "haxe.macro.MetadataEntry - Represents a metadata entry in the AST.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printObjectField()
  id: haxe/macro/printer#printObjectField
  summary: null
  belongs_to: macro.Printer
  description: '### [`printObjectField`](#printObjectField)`(``of:`[`ObjectField`](objectfield "haxe.macro.ObjectField - Represents the field of an object declaration.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printObjectFieldKey()
  id: haxe/macro/printer#printObjectFieldKey
  summary: null
  belongs_to: macro.Printer
  description: '### [`printObjectFieldKey`](#printObjectFieldKey)`(``of:`[`ObjectField`](objectfield "haxe.macro.ObjectField - Represents the field of an object declaration.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printString()
  id: haxe/macro/printer#printString
  summary: null
  belongs_to: macro.Printer
  description: '### [`printString`](#printString)`(``s:`[`String`](../../string "String - The basic String class.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printTypeDefinition()
  id: haxe/macro/printer#printTypeDefinition
  summary: null
  belongs_to: macro.Printer
  description: '### [`printTypeDefinition`](#printTypeDefinition)`(``t:`[`TypeDefinition`](typedefinition "haxe.macro.TypeDefinition - Represents a type definition.")`,``printPackage:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = true``):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printTypeParam()
  id: haxe/macro/printer#printTypeParam
  summary: null
  belongs_to: macro.Printer
  description: '### [`printTypeParam`](#printTypeParam)`(``param:`[`TypeParam`](typeparam "haxe.macro.TypeParam - Represents a concrete type parameter in the AST.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printTypeParamDecl()
  id: haxe/macro/printer#printTypeParamDecl
  summary: null
  belongs_to: macro.Printer
  description: '### [`printTypeParamDecl`](#printTypeParamDecl)`(``tpd:`[`TypeParamDecl`](typeparamdecl "haxe.macro.TypeParamDecl - Represents a type parameter declaration in the AST.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printTypePath()
  id: haxe/macro/printer#printTypePath
  summary: null
  belongs_to: macro.Printer
  description: '### [`printTypePath`](#printTypePath)`(``tp:`[`TypePath`](typepath "haxe.macro.TypePath - Represents a type path in the AST.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printUnop()
  id: haxe/macro/printer#printUnop
  summary: null
  belongs_to: macro.Printer
  description: '### [`printUnop`](#printUnop)`(``op:`[`Unop`](unop "haxe.macro.Unop - A unary operator.")`):`[`String`](../../string "String - The basic String class.")'
- name: macro.Printer.printVar()
  id: haxe/macro/printer#printVar
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.Printer
  description: "### [`printVar`](#printVar)`(``v:`[`Var`](var \"haxe.macro.Var - Represents a variable in the AST.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Printer.html](https://api.haxe.org/haxe/macro/Printer.html)"
- name: macro.QuoteStatus
  id: haxe/macro/quotestatus
  summary: Represents the way something is quoted
  description: "# QuoteStatus\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents the way something is quoted.\n\n## Values\n\n### `Unquoted`\n\nNo quotes\n\n### `Quoted`\n\n### Double quotes `\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/QuoteStatus.html](https://api.haxe.org/haxe/macro/QuoteStatus.html)"
- name: macro.QuoteStatus.Quoted
  id: haxe/macro/quotestatus#Quoted
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.QuoteStatus
  description: "### `Quoted`\n\n### Double quotes `\"`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/QuoteStatus.html](https://api.haxe.org/haxe/macro/QuoteStatus.html)"
- name: macro.QuoteStatus.Unquoted
  id: haxe/macro/quotestatus#Unquoted
  summary: null
  belongs_to: macro.QuoteStatus
  description: |-
    ### `Unquoted`

    No quotes
- name: macro.Ref
  id: haxe/macro/ref
  summary: Represents a reference to internal compiler structure
  description: "# Ref\\<T\\>\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents a reference to internal compiler structure. It exists to avoid expensive encoding if it is not required and to ensure that physical equality remains intact.\n\nA structure is only encoded when user requests it through `ref.get()`.\n\n## Fields\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n### [`get`](#get)`():``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Ref.html](https://api.haxe.org/haxe/macro/Ref.html)"
- name: macro.Ref.get()
  id: haxe/macro/ref#get
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.Ref
  description: "### [`get`](#get)`():``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Ref.html](https://api.haxe.org/haxe/macro/Ref.html)"
- name: macro.Ref.toString()
  id: haxe/macro/ref#toString
  summary: null
  belongs_to: macro.Ref
  description: '### [`toString`](#toString)`():`[`String`](../../string "String - The basic String class.")'
- name: macro.StringLiteralKind
  id: haxe/macro/stringliteralkind
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# StringLiteralKind\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\n## Values\n\n### `DoubleQuotes`\n\n### `SingleQuotes`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/StringLiteralKind.html](https://api.haxe.org/haxe/macro/StringLiteralKind.html)"
- name: macro.StringLiteralKind.DoubleQuotes
  id: haxe/macro/stringliteralkind#DoubleQuotes
  summary: null
  belongs_to: macro.StringLiteralKind
  description: '### `DoubleQuotes`'
- name: macro.StringLiteralKind.SingleQuotes
  id: haxe/macro/stringliteralkind#SingleQuotes
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.StringLiteralKind
  description: "### `SingleQuotes`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/StringLiteralKind.html](https://api.haxe.org/haxe/macro/StringLiteralKind.html)"
- name: macro.TConstant
  id: haxe/macro/tconstant
  summary: Represents typed constant
  description: "# TConstant\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents typed constant.\n\n## Values\n\n### `TInt(i:`[`Int`](../../int \"Int - The standard Int type.\")`)`\n\nAn [`Int`](../../int) literal.\n\n### `TFloat(s:`[`String`](../../string \"String - The basic String class.\")`)`\n\nA [`Float`](../../float) literal, represented as String to avoid precision loss.\n\n### `TString(s:`[`String`](../../string \"String - The basic String class.\")`)`\n\nA [`String`](../../string) literal.\n\n### `TBool(b:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`)`\n\nA [`Bool`](../../bool) literal.\n\n### `TNull`\n\nThe constant `null`.\n\n### `TThis`\n\nThe constant `this`.\n\n### `TSuper`\n\nThe constant `super`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TConstant.html](https://api.haxe.org/haxe/macro/TConstant.html)"
- name: macro.TConstant.TBool()
  id: haxe/macro/tconstant#TBool
  summary: A Bool literal
  belongs_to: macro.TConstant
  description: |-
    ### `TBool(b:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`)`

    A [`Bool`](../../bool) literal.
- name: macro.TConstant.TFloat()
  id: haxe/macro/tconstant#TFloat
  summary: A Float literal, represented as String to avoid precision loss
  belongs_to: macro.TConstant
  description: |-
    ### `TFloat(s:`[`String`](../../string "String - The basic String class.")`)`

    A [`Float`](../../float) literal, represented as String to avoid precision loss.
- name: macro.TConstant.TInt()
  id: haxe/macro/tconstant#TInt
  summary: An Int literal
  belongs_to: macro.TConstant
  description: |-
    ### `TInt(i:`[`Int`](../../int "Int - The standard Int type.")`)`

    An [`Int`](../../int) literal.
- name: macro.TConstant.TNull
  id: haxe/macro/tconstant#TNull
  summary: The constant null
  belongs_to: macro.TConstant
  description: |-
    ### `TNull`

    The constant `null`.
- name: macro.TConstant.TString()
  id: haxe/macro/tconstant#TString
  summary: A String literal
  belongs_to: macro.TConstant
  description: |-
    ### `TString(s:`[`String`](../../string "String - The basic String class.")`)`

    A [`String`](../../string) literal.
- name: macro.TConstant.TSuper
  id: haxe/macro/tconstant#TSuper
  summary: The constant super
  belongs_to: macro.TConstant
  description: "### `TSuper`\n\nThe constant `super`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TConstant.html](https://api.haxe.org/haxe/macro/TConstant.html)"
- name: macro.TConstant.TThis
  id: haxe/macro/tconstant#TThis
  summary: The constant this
  belongs_to: macro.TConstant
  description: |-
    ### `TThis`

    The constant `this`.
- name: macro.TFunc
  id: haxe/macro/tfunc
  summary: Represents a function in the typed AST
  description: "# TFunc\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents a function in the typed AST.\n\n## Fields\n\n### [`t`](#t)`:`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\nThe return type of the function.\n\n### [`expr`](#expr)`:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")\n\nThe expression of the function body.\n\n### [`args`](#args)`:`[`Array`](../../array \"Array\")`<{value:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>, v:`[`TVar`](tvar \"haxe.macro.TVar - Represents a variable in the typed AST.\")`}>`\n\nA list of function arguments identified by an argument variable \\`v\\` and an optional initialization \\`value\\`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TFunc.html](https://api.haxe.org/haxe/macro/TFunc.html)"
- name: macro.TFunc.args
  id: haxe/macro/tfunc#args
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.TFunc
  description: "### [`args`](#args)`:`[`Array`](../../array \"Array\")`<{value:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>, v:`[`TVar`](tvar \"haxe.macro.TVar - Represents a variable in the typed AST.\")`}>`\n\nA list of function arguments identified by an argument variable \\`v\\` and an optional initialization \\`value\\`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TFunc.html](https://api.haxe.org/haxe/macro/TFunc.html)"
- name: macro.TFunc.expr
  id: haxe/macro/tfunc#expr
  summary: The expression of the function body
  belongs_to: macro.TFunc
  description: |-
    ### [`expr`](#expr)`:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")

    The expression of the function body.
- name: macro.TFunc.t
  id: haxe/macro/tfunc#t
  summary: The return type of the function
  belongs_to: macro.TFunc
  description: |-
    ### [`t`](#t)`:`[`Type`](type "haxe.macro.Type - Represents a type.")

    The return type of the function.
- name: macro.TVar
  id: haxe/macro/tvar
  summary: Represents a variable in the typed AST
  description: "# TVar\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents a variable in the typed AST.\n\n## Fields\n\n### `read only`[`t`](#t)`:`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\nThe type of the variable.\n\n### `read only`[`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the variable.\n\n### `read only`[`meta`](#meta)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`MetaAccess`](metaaccess \"haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.\")`>`\n\nThe metadata of the variable.\n\n### `read only`[`id`](#id)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nThe unique ID of the variable.\n\n### `read only`[`extra`](#extra)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<{params:`[`Array`](../../array \"Array\")`<`[`TypeParameter`](typeparameter \"haxe.macro.TypeParameter - Represents the declaration of type parameters.\")`>, expr:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>}>`\n\nSpecial information which is internally used to keep track of closure. information\n\n### `read only`[`capture`](#capture)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the variable has been captured by a closure.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TVar.html](https://api.haxe.org/haxe/macro/TVar.html)"
- name: macro.TVar.capture
  id: haxe/macro/tvar#capture
  summary: Whether or not the variable has been captured by a closure
  belongs_to: macro.TVar
  description: "### `read only`[`capture`](#capture)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the variable has been captured by a closure.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TVar.html](https://api.haxe.org/haxe/macro/TVar.html)"
- name: macro.TVar.extra
  id: haxe/macro/tvar#extra
  summary: Special information which is internally used to keep track of closure
  belongs_to: macro.TVar
  description: |-
    ### `read only`[`extra`](#extra)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<{params:`[`Array`](../../array "Array")`<`[`TypeParameter`](typeparameter "haxe.macro.TypeParameter - Represents the declaration of type parameters.")`>, expr:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>}>`

    Special information which is internally used to keep track of closure. information
- name: macro.TVar.id
  id: haxe/macro/tvar#id
  summary: The unique ID of the variable
  belongs_to: macro.TVar
  description: |-
    ### `read only`[`id`](#id)`:`[`Int`](../../int "Int - The standard Int type.")

    The unique ID of the variable.
- name: macro.TVar.meta
  id: haxe/macro/tvar#meta
  summary: The metadata of the variable
  belongs_to: macro.TVar
  description: |-
    ### `read only`[`meta`](#meta)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`MetaAccess`](metaaccess "haxe.macro.MetaAccess - MetaAccess is a wrapper for the Metadata array.")`>`

    The metadata of the variable.
- name: macro.TVar.name
  id: haxe/macro/tvar#name
  summary: The name of the variable
  belongs_to: macro.TVar
  description: |-
    ### `read only`[`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the variable.
- name: macro.TVar.t
  id: haxe/macro/tvar#t
  summary: The type of the variable
  belongs_to: macro.TVar
  description: |-
    ### `read only`[`t`](#t)`:`[`Type`](type "haxe.macro.Type - Represents a type.")

    The type of the variable.
- name: macro.Type
  id: haxe/macro/type
  summary: Represents a type
  description: "# Type\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nRepresents a type.\n\n## Values\n\n### `TMono(t:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>>)`\n\nRepresents a monomorph.\n\nSee also:\n\n- <https://haxe.org/manual/types-monomorph.html>\n\n### `TEnum(t:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`EnumType`](enumtype \"haxe.macro.EnumType - Represents an enum type.\")`>, params:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>)`\n\nRepresents an enum instance.\n\nSee also:\n\n- <https://haxe.org/manual/types-enum-instance.html>\n\n### `TInst(t:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>, params:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>)`\n\nRepresents a class instance.\n\nSee also:\n\n- <https://haxe.org/manual/types-class-instance.html>\n\n### `TType(t:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`DefType`](deftype \"haxe.macro.DefType - Represents a typedef.\")`>, params:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>)`\n\nRepresents a typedef.\n\nSee also:\n\n- <https://haxe.org/manual/type-system-typedef.html>\n\n### `TFun(args:`[`Array`](../../array \"Array\")`<{t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`, opt:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`, name:`[`String`](../../string \"String - The basic String class.\")`}>, ret:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`)`\n\nRepresents a function type.\n\nSee also:\n\n- <https://haxe.org/manual/types-function.html>\n\n### `TAnonymous(a:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`AnonType`](anontype \"haxe.macro.AnonType - Represents information for anonymous structure types.\")`>)`\n\nRepresents an anonymous structure type.\n\nSee also:\n\n- <https://haxe.org/manual/types-anonymous-structure.html>\n\n### `TDynamic(t:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>)`\n\nRepresents Dynamic.\n\nSee also:\n\n- <https://haxe.org/manual/types-dynamic.html>\n\n### `TLazy(f:() ‑> `[`Type`](type \"haxe.macro.Type - Represents a type.\")`)`\n\nUsed internally by the compiler to delay some typing.\n\n### `TAbstract(t:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`AbstractType`](abstracttype \"haxe.macro.AbstractType - Represents an abstract type.\")`>, params:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>)`\n\nRepresents an abstract type.\n\nSee also:\n\n- <https://haxe.org/manual/types-abstract.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Type.html](https://api.haxe.org/haxe/macro/Type.html)"
- name: macro.Type.TAbstract()
  id: haxe/macro/type#TAbstract
  summary: Represents an abstract type
  belongs_to: macro.Type
  description: "### `TAbstract(t:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`AbstractType`](abstracttype \"haxe.macro.AbstractType - Represents an abstract type.\")`>, params:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>)`\n\nRepresents an abstract type.\n\nSee also:\n\n- <https://haxe.org/manual/types-abstract.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Type.html](https://api.haxe.org/haxe/macro/Type.html)"
- name: macro.Type.TAnonymous()
  id: haxe/macro/type#TAnonymous
  summary: Represents an anonymous structure type
  belongs_to: macro.Type
  description: |-
    ### `TAnonymous(a:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`AnonType`](anontype "haxe.macro.AnonType - Represents information for anonymous structure types.")`>)`

    Represents an anonymous structure type.

    See also:

    - <https://haxe.org/manual/types-anonymous-structure.html>

    &nbsp;
- name: macro.Type.TDynamic()
  id: haxe/macro/type#TDynamic
  summary: Represents Dynamic
  belongs_to: macro.Type
  description: |-
    ### `TDynamic(t:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>)`

    Represents Dynamic.

    See also:

    - <https://haxe.org/manual/types-dynamic.html>

    &nbsp;
- name: macro.Type.TEnum()
  id: haxe/macro/type#TEnum
  summary: Represents an enum instance
  belongs_to: macro.Type
  description: |-
    ### `TEnum(t:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`EnumType`](enumtype "haxe.macro.EnumType - Represents an enum type.")`>, params:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>)`

    Represents an enum instance.

    See also:

    - <https://haxe.org/manual/types-enum-instance.html>

    &nbsp;
- name: macro.Type.TFun()
  id: haxe/macro/type#TFun
  summary: Represents a function type
  belongs_to: macro.Type
  description: |-
    ### `TFun(args:`[`Array`](../../array "Array")`<{t:`[`Type`](type "haxe.macro.Type - Represents a type.")`, opt:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`, name:`[`String`](../../string "String - The basic String class.")`}>, ret:`[`Type`](type "haxe.macro.Type - Represents a type.")`)`

    Represents a function type.

    See also:

    - <https://haxe.org/manual/types-function.html>

    &nbsp;
- name: macro.Type.TInst()
  id: haxe/macro/type#TInst
  summary: Represents a class instance
  belongs_to: macro.Type
  description: |-
    ### `TInst(t:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>, params:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>)`

    Represents a class instance.

    See also:

    - <https://haxe.org/manual/types-class-instance.html>

    &nbsp;
- name: macro.Type.TLazy()
  id: haxe/macro/type#TLazy
  summary: Used internally by the compiler to delay some typing
  belongs_to: macro.Type
  description: |-
    ### `TLazy(f:() ‑> `[`Type`](type "haxe.macro.Type - Represents a type.")`)`

    Used internally by the compiler to delay some typing.
- name: macro.Type.TMono()
  id: haxe/macro/type#TMono
  summary: Represents a monomorph
  belongs_to: macro.Type
  description: |-
    ### `TMono(t:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>>)`

    Represents a monomorph.

    See also:

    - <https://haxe.org/manual/types-monomorph.html>
- name: macro.Type.TType()
  id: haxe/macro/type#TType
  summary: Represents a typedef
  belongs_to: macro.Type
  description: |-
    ### `TType(t:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`DefType`](deftype "haxe.macro.DefType - Represents a typedef.")`>, params:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>)`

    Represents a typedef.

    See also:

    - <https://haxe.org/manual/type-system-typedef.html>

    &nbsp;
- name: macro.TypeDefinition
  id: haxe/macro/typedefinition
  summary: Represents a type definition
  description: "# TypeDefinition\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a type definition.\n\n## Fields\n\n### [`pos`](#pos)`:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nThe position to the type definition.\n\n### `optional`[`params`](#params)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`TypeParamDecl`](typeparamdecl \"haxe.macro.TypeParamDecl - Represents a type parameter declaration in the AST.\")`>>`\n\nThe parameter type declarations of the type definition.\n\n### [`pack`](#pack)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe package of the type definition.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the type definition.\n\n### `optional`[`meta`](#meta)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Metadata`](metadata \"haxe.macro.Metadata - Represents metadata in the AST.\")`>`\n\nThe optional metadata of the type definition.\n\n### [`kind`](#kind)`:`[`TypeDefKind`](typedefkind \"haxe.macro.TypeDefKind - Represents a type definition kind.\")\n\nThe kind of the type definition.\n\n### `optional`[`isExtern`](#isExtern)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\nWhether or not the type is extern.\n\n### [`fields`](#fields)`:`[`Array`](../../array \"Array\")`<`[`Field`](field \"haxe.macro.Field - Represents a field in the AST.\")`>`\n\nThe fields of the type definition.\n\n### `optional`[`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe documentation of the type, if available. If the type has no documentation, the value is \\`null\\`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypeDefinition.html](https://api.haxe.org/haxe/macro/TypeDefinition.html)"
- name: macro.TypeDefinition.doc
  id: haxe/macro/typedefinition#doc
  summary: The documentation of the type, if available
  belongs_to: macro.TypeDefinition
  description: "### `optional`[`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe documentation of the type, if available. If the type has no documentation, the value is \\`null\\`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypeDefinition.html](https://api.haxe.org/haxe/macro/TypeDefinition.html)"
- name: macro.TypeDefinition.fields
  id: haxe/macro/typedefinition#fields
  summary: The fields of the type definition
  belongs_to: macro.TypeDefinition
  description: |-
    ### [`fields`](#fields)`:`[`Array`](../../array "Array")`<`[`Field`](field "haxe.macro.Field - Represents a field in the AST.")`>`

    The fields of the type definition.
- name: macro.TypeDefinition.isExtern
  id: haxe/macro/typedefinition#isExtern
  summary: Whether or not the type is extern
  belongs_to: macro.TypeDefinition
  description: |-
    ### `optional`[`isExtern`](#isExtern)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`

    Whether or not the type is extern.
- name: macro.TypeDefinition.kind
  id: haxe/macro/typedefinition#kind
  summary: The kind of the type definition
  belongs_to: macro.TypeDefinition
  description: |-
    ### [`kind`](#kind)`:`[`TypeDefKind`](typedefkind "haxe.macro.TypeDefKind - Represents a type definition kind.")

    The kind of the type definition.
- name: macro.TypeDefinition.meta
  id: haxe/macro/typedefinition#meta
  summary: The optional metadata of the type definition
  belongs_to: macro.TypeDefinition
  description: |-
    ### `optional`[`meta`](#meta)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Metadata`](metadata "haxe.macro.Metadata - Represents metadata in the AST.")`>`

    The optional metadata of the type definition.
- name: macro.TypeDefinition.name
  id: haxe/macro/typedefinition#name
  summary: The name of the type definition
  belongs_to: macro.TypeDefinition
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the type definition.
- name: macro.TypeDefinition.pack
  id: haxe/macro/typedefinition#pack
  summary: The package of the type definition
  belongs_to: macro.TypeDefinition
  description: |-
    ### [`pack`](#pack)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`

    The package of the type definition.
- name: macro.TypeDefinition.params
  id: haxe/macro/typedefinition#params
  summary: The parameter type declarations of the type definition
  belongs_to: macro.TypeDefinition
  description: |-
    ### `optional`[`params`](#params)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Array`](../../array "Array")`<`[`TypeParamDecl`](typeparamdecl "haxe.macro.TypeParamDecl - Represents a type parameter declaration in the AST.")`>>`

    The parameter type declarations of the type definition.
- name: macro.TypeDefinition.pos
  id: haxe/macro/typedefinition#pos
  summary: The position to the type definition
  belongs_to: macro.TypeDefinition
  description: |-
    ### [`pos`](#pos)`:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    The position to the type definition.
- name: macro.TypeDefKind
  id: haxe/macro/typedefkind
  summary: Represents a type definition kind
  description: "# TypeDefKind\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a type definition kind.\n\n## Values\n\n### `TDEnum`\n\nRepresents an enum kind.\n\n### `TDStructure`\n\nRepresents a structure kind.\n\n### `TDClass(superClass:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypePath`](typepath \"haxe.macro.TypePath - Represents a type path in the AST.\")`>, interfaces:`[`Array`](../../array \"Array\")`<`[`TypePath`](typepath \"haxe.macro.TypePath - Represents a type path in the AST.\")`>, isInterface:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`, isFinal:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`)`\n\nRepresents a class kind.\n\n### `TDAlias(t:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`)`\n\nRepresents an alias/typedef kind.\n\n### `TDAbstract(tthis:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>, from:`[`Array`](../../array \"Array\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>, to:`[`Array`](../../array \"Array\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>)`\n\nRepresents an abstract kind.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypeDefKind.html](https://api.haxe.org/haxe/macro/TypeDefKind.html)"
- name: macro.TypeDefKind.TDAbstract()
  id: haxe/macro/typedefkind#TDAbstract
  summary: Represents an abstract kind
  belongs_to: macro.TypeDefKind
  description: "### `TDAbstract(tthis:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>, from:`[`Array`](../../array \"Array\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>, to:`[`Array`](../../array \"Array\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>)`\n\nRepresents an abstract kind.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypeDefKind.html](https://api.haxe.org/haxe/macro/TypeDefKind.html)"
- name: macro.TypeDefKind.TDAlias()
  id: haxe/macro/typedefkind#TDAlias
  summary: Represents an alias/typedef kind
  belongs_to: macro.TypeDefKind
  description: |-
    ### `TDAlias(t:`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`)`

    Represents an alias/typedef kind.
- name: macro.TypeDefKind.TDClass()
  id: haxe/macro/typedefkind#TDClass
  summary: Represents a class kind
  belongs_to: macro.TypeDefKind
  description: |-
    ### `TDClass(superClass:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`TypePath`](typepath "haxe.macro.TypePath - Represents a type path in the AST.")`>, interfaces:`[`Array`](../../array "Array")`<`[`TypePath`](typepath "haxe.macro.TypePath - Represents a type path in the AST.")`>, isInterface:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`, isFinal:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`)`

    Represents a class kind.
- name: macro.TypeDefKind.TDEnum
  id: haxe/macro/typedefkind#TDEnum
  summary: Represents an enum kind
  belongs_to: macro.TypeDefKind
  description: |-
    ### `TDEnum`

    Represents an enum kind.
- name: macro.TypeDefKind.TDStructure
  id: haxe/macro/typedefkind#TDStructure
  summary: Represents a structure kind
  belongs_to: macro.TypeDefKind
  description: |-
    ### `TDStructure`

    Represents a structure kind.
- name: macro.TypedExpr
  id: haxe/macro/typedexpr
  summary: Represents a typed AST node
  description: "# TypedExpr\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents a typed AST node.\n\n## Fields\n\n### [`t`](#t)`:`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\nThe type of the expression.\n\n### [`pos`](#pos)`:`[`Position`](position \"haxe.macro.Position - Represents a position in a file.\")\n\nThe position of the expression.\n\n### [`expr`](#expr)`:`[`TypedExprDef`](typedexprdef \"haxe.macro.TypedExprDef - Represents kind of a node in the typed AST.\")\n\nThe expression kind.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypedExpr.html](https://api.haxe.org/haxe/macro/TypedExpr.html)"
- name: macro.TypedExpr.expr
  id: haxe/macro/typedexpr#expr
  summary: The expression kind
  belongs_to: macro.TypedExpr
  description: "### [`expr`](#expr)`:`[`TypedExprDef`](typedexprdef \"haxe.macro.TypedExprDef - Represents kind of a node in the typed AST.\")\n\nThe expression kind.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypedExpr.html](https://api.haxe.org/haxe/macro/TypedExpr.html)"
- name: macro.TypedExpr.pos
  id: haxe/macro/typedexpr#pos
  summary: The position of the expression
  belongs_to: macro.TypedExpr
  description: |-
    ### [`pos`](#pos)`:`[`Position`](position "haxe.macro.Position - Represents a position in a file.")

    The position of the expression.
- name: macro.TypedExpr.t
  id: haxe/macro/typedexpr#t
  summary: The type of the expression
  belongs_to: macro.TypedExpr
  description: |-
    ### [`t`](#t)`:`[`Type`](type "haxe.macro.Type - Represents a type.")

    The type of the expression.
- name: macro.TypedExprDef
  id: haxe/macro/typedexprdef
  summary: Represents kind of a node in the typed AST
  description: "# TypedExprDef\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents kind of a node in the typed AST.\n\n## Values\n\n### `TConst(c:`[`TConstant`](tconstant \"haxe.macro.TConstant - Represents typed constant.\")`)`\n\nA constant.\n\n### `TLocal(v:`[`TVar`](tvar \"haxe.macro.TVar - Represents a variable in the typed AST.\")`)`\n\nReference to a local variable `v`.\n\n### `TArray(e1:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`, e2:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`)`\n\nArray access `e1[e2]`.\n\n### `TBinop(op:`[`Binop`](binop \"haxe.macro.Binop - A binary operator.\")`, e1:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`, e2:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`)`\n\nBinary operator `e1 op e2`.\n\n### `TField(e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`, fa:`[`FieldAccess`](fieldaccess \"haxe.macro.FieldAccess - Represents the kind of field access in the typed AST.\")`)`\n\nField access on `e` according to `fa`.\n\n### `TTypeExpr(m:`[`ModuleType`](moduletype \"haxe.macro.ModuleType - Represents a module type.\")`)`\n\nReference to a module type `m`.\n\n### `TParenthesis(e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`)`\n\nParentheses `(e)`.\n\n### `TObjectDecl(fields:`[`Array`](../../array \"Array\")`<{name:`[`String`](../../string \"String - The basic String class.\")`, expr:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`}>)`\n\nAn object declaration.\n\n### `TArrayDecl(el:`[`Array`](../../array \"Array\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>)`\n\nAn array declaration `[el]`.\n\n### `TCall(e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`, el:`[`Array`](../../array \"Array\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>)`\n\nA call `e(el)`.\n\n### `TNew(c:`[`Ref`](ref \"haxe.macro.Ref - Represents a reference to internal compiler structure.\")`<`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`>, params:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>, el:`[`Array`](../../array \"Array\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>)`\n\nA constructor call `new c<params>(el)`.\n\n### `TUnop(op:`[`Unop`](unop \"haxe.macro.Unop - A unary operator.\")`, postFix:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`, e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`)`\n\nAn unary operator `op` on `e`:\n\ne++ (op = OpIncrement, postFix = true) e-- (op = OpDecrement, postFix = true) ++e (op = OpIncrement, postFix = false) --e (op = OpDecrement, postFix = false) -e (op = OpNeg, postFix = false) !e (op = OpNot, postFix = false) ~e (op = OpNegBits, postFix = false)\n\n### `TFunction(tfunc:`[`TFunc`](tfunc \"haxe.macro.TFunc - Represents a function in the typed AST.\")`)`\n\nA function declaration.\n\n### `TVar(v:`[`TVar`](tvar \"haxe.macro.TVar - Represents a variable in the typed AST.\")`, expr:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>)`\n\nA variable declaration `var v` or `var v = expr`.\n\n### `TBlock(el:`[`Array`](../../array \"Array\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>)`\n\nA block declaration `{el}`.\n\n### `TFor(v:`[`TVar`](tvar \"haxe.macro.TVar - Represents a variable in the typed AST.\")`, e1:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`, e2:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`)`\n\nA `for` expression.\n\n### `TIf(econd:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`, eif:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`, eelse:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>)`\n\nAn `if(econd) eif` or `if(econd) eif else eelse` expression.\n\n### `TWhile(econd:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`, e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`, normalWhile:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`)`\n\nRepresents a `while` expression. When `normalWhile` is [`true`](../../bool) it is `while (...)`. When `normalWhile` is [`false`](../../bool) it is `do {...} while (...)`.\n\n### `TSwitch(e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`, cases:`[`Array`](../../array \"Array\")`<{values:`[`Array`](../../array \"Array\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>, expr:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`}>, edef:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>)`\n\nRepresents a `switch` expression with related cases and an optional `default` case if edef != null.\n\n### `TTry(e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`, catches:`[`Array`](../../array \"Array\")`<{v:`[`TVar`](tvar \"haxe.macro.TVar - Represents a variable in the typed AST.\")`, expr:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`}>)`\n\nRepresents a `try`-expression with related catches.\n\n### `TReturn(e:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`>)`\n\nA `return` or `return e` expression.\n\n### `TBreak`\n\nA `break` expression.\n\n### `TContinue`\n\nA `continue` expression.\n\n### `TThrow(e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`)`\n\nA `throw e` expression.\n\n### `TCast(e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`, m:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ModuleType`](moduletype \"haxe.macro.ModuleType - Represents a module type.\")`>)`\n\nA `cast e` or `cast (e, m)` expression.\n\n### `TMeta(m:`[`MetadataEntry`](metadataentry \"haxe.macro.MetadataEntry - Represents a metadata entry in the AST.\")`, e1:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`)`\n\nA `@m e1` expression.\n\n### `TEnumParameter(e1:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`, ef:`[`EnumField`](enumfield \"haxe.macro.EnumField - Represents an enum constructor.\")`, index:`[`Int`](../../int \"Int - The standard Int type.\")`)`\n\nAccess to an enum parameter (generated by the pattern matcher).\n\n### `TEnumIndex(e1:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`)`\n\nAccess to an enum index (generated by the pattern matcher).\n\n### `TIdent(s:`[`String`](../../string \"String - The basic String class.\")`)`\n\nAn unknown identifier.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypedExprDef.html](https://api.haxe.org/haxe/macro/TypedExprDef.html)"
- name: macro.TypedExprDef.TArray()
  id: haxe/macro/typedexprdef#TArray
  summary: Array access e1[e2]
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TArray(e1:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`, e2:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`)`

    Array access `e1[e2]`.
- name: macro.TypedExprDef.TArrayDecl()
  id: haxe/macro/typedexprdef#TArrayDecl
  summary: An array declaration [el]
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TArrayDecl(el:`[`Array`](../../array "Array")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>)`

    An array declaration `[el]`.
- name: macro.TypedExprDef.TBinop()
  id: haxe/macro/typedexprdef#TBinop
  summary: Binary operator e1 op e2
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TBinop(op:`[`Binop`](binop "haxe.macro.Binop - A binary operator.")`, e1:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`, e2:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`)`

    Binary operator `e1 op e2`.
- name: macro.TypedExprDef.TBlock()
  id: haxe/macro/typedexprdef#TBlock
  summary: null
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TBlock(el:`[`Array`](../../array "Array")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>)`

    A block declaration `{el}`.
- name: macro.TypedExprDef.TBreak
  id: haxe/macro/typedexprdef#TBreak
  summary: A break expression
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TBreak`

    A `break` expression.
- name: macro.TypedExprDef.TCall()
  id: haxe/macro/typedexprdef#TCall
  summary: A call e(el)
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TCall(e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`, el:`[`Array`](../../array "Array")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>)`

    A call `e(el)`.
- name: macro.TypedExprDef.TCast()
  id: haxe/macro/typedexprdef#TCast
  summary: A cast e or cast (e, m) expression
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TCast(e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`, m:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ModuleType`](moduletype "haxe.macro.ModuleType - Represents a module type.")`>)`

    A `cast e` or `cast (e, m)` expression.
- name: macro.TypedExprDef.TConst()
  id: haxe/macro/typedexprdef#TConst
  summary: A constant
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TConst(c:`[`TConstant`](tconstant "haxe.macro.TConstant - Represents typed constant.")`)`

    A constant.
- name: macro.TypedExprDef.TContinue
  id: haxe/macro/typedexprdef#TContinue
  summary: A continue expression
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TContinue`

    A `continue` expression.
- name: macro.TypedExprDef.TEnumIndex()
  id: haxe/macro/typedexprdef#TEnumIndex
  summary: Access to an enum index (generated by the pattern matcher)
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TEnumIndex(e1:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`)`

    Access to an enum index (generated by the pattern matcher).
- name: macro.TypedExprDef.TEnumParameter()
  id: haxe/macro/typedexprdef#TEnumParameter
  summary: Access to an enum parameter (generated by the pattern matcher)
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TEnumParameter(e1:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`, ef:`[`EnumField`](enumfield "haxe.macro.EnumField - Represents an enum constructor.")`, index:`[`Int`](../../int "Int - The standard Int type.")`)`

    Access to an enum parameter (generated by the pattern matcher).
- name: macro.TypedExprDef.TField()
  id: haxe/macro/typedexprdef#TField
  summary: Field access on e according to fa
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TField(e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`, fa:`[`FieldAccess`](fieldaccess "haxe.macro.FieldAccess - Represents the kind of field access in the typed AST.")`)`

    Field access on `e` according to `fa`.
- name: macro.TypedExprDef.TFor()
  id: haxe/macro/typedexprdef#TFor
  summary: A for expression
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TFor(v:`[`TVar`](tvar "haxe.macro.TVar - Represents a variable in the typed AST.")`, e1:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`, e2:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`)`

    A `for` expression.
- name: macro.TypedExprDef.TFunction()
  id: haxe/macro/typedexprdef#TFunction
  summary: A function declaration
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TFunction(tfunc:`[`TFunc`](tfunc "haxe.macro.TFunc - Represents a function in the typed AST.")`)`

    A function declaration.
- name: macro.TypedExprDef.TIdent()
  id: haxe/macro/typedexprdef#TIdent
  summary: An unknown identifier
  belongs_to: macro.TypedExprDef
  description: "### `TIdent(s:`[`String`](../../string \"String - The basic String class.\")`)`\n\nAn unknown identifier.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypedExprDef.html](https://api.haxe.org/haxe/macro/TypedExprDef.html)"
- name: macro.TypedExprDef.TIf()
  id: haxe/macro/typedexprdef#TIf
  summary: An if(econd) eif or if(econd) eif else eelse expression
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TIf(econd:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`, eif:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`, eelse:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>)`

    An `if(econd) eif` or `if(econd) eif else eelse` expression.
- name: macro.TypedExprDef.TLocal()
  id: haxe/macro/typedexprdef#TLocal
  summary: Reference to a local variable v
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TLocal(v:`[`TVar`](tvar "haxe.macro.TVar - Represents a variable in the typed AST.")`)`

    Reference to a local variable `v`.
- name: macro.TypedExprDef.TMeta()
  id: haxe/macro/typedexprdef#TMeta
  summary: A @m e1 expression
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TMeta(m:`[`MetadataEntry`](metadataentry "haxe.macro.MetadataEntry - Represents a metadata entry in the AST.")`, e1:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`)`

    A `@m e1` expression.
- name: macro.TypedExprDef.TNew()
  id: haxe/macro/typedexprdef#TNew
  summary: A constructor call new c<params>(el)
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TNew(c:`[`Ref`](ref "haxe.macro.Ref - Represents a reference to internal compiler structure.")`<`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`>, params:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>, el:`[`Array`](../../array "Array")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>)`

    A constructor call `new c<params>(el)`.
- name: macro.TypedExprDef.TObjectDecl()
  id: haxe/macro/typedexprdef#TObjectDecl
  summary: An object declaration
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TObjectDecl(fields:`[`Array`](../../array "Array")`<{name:`[`String`](../../string "String - The basic String class.")`, expr:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`}>)`

    An object declaration.
- name: macro.TypedExprDef.TParenthesis()
  id: haxe/macro/typedexprdef#TParenthesis
  summary: Parentheses (e)
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TParenthesis(e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`)`

    Parentheses `(e)`.
- name: macro.TypedExprDef.TReturn()
  id: haxe/macro/typedexprdef#TReturn
  summary: A return or return e expression
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TReturn(e:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>)`

    A `return` or `return e` expression.
- name: macro.TypedExprDef.TSwitch()
  id: haxe/macro/typedexprdef#TSwitch
  summary: Represents a switch expression with related cases and an optional default case if edef != null
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TSwitch(e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`, cases:`[`Array`](../../array "Array")`<{values:`[`Array`](../../array "Array")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>, expr:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`}>, edef:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>)`

    Represents a `switch` expression with related cases and an optional `default` case if edef != null.
- name: macro.TypedExprDef.TThrow()
  id: haxe/macro/typedexprdef#TThrow
  summary: A throw e expression
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TThrow(e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`)`

    A `throw e` expression.
- name: macro.TypedExprDef.TTry()
  id: haxe/macro/typedexprdef#TTry
  summary: Represents a try-expression with related catches
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TTry(e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`, catches:`[`Array`](../../array "Array")`<{v:`[`TVar`](tvar "haxe.macro.TVar - Represents a variable in the typed AST.")`, expr:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`}>)`

    Represents a `try`-expression with related catches.
- name: macro.TypedExprDef.TTypeExpr()
  id: haxe/macro/typedexprdef#TTypeExpr
  summary: Reference to a module type m
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TTypeExpr(m:`[`ModuleType`](moduletype "haxe.macro.ModuleType - Represents a module type.")`)`

    Reference to a module type `m`.
- name: macro.TypedExprDef.TUnop()
  id: haxe/macro/typedexprdef#TUnop
  summary: null
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TUnop(op:`[`Unop`](unop "haxe.macro.Unop - A unary operator.")`, postFix:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`, e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`)`

    An unary operator `op` on `e`:

    e++ (op = OpIncrement, postFix = true) e-- (op = OpDecrement, postFix = true) ++e (op = OpIncrement, postFix = false) --e (op = OpDecrement, postFix = false) -e (op = OpNeg, postFix = false) !e (op = OpNot, postFix = false) ~e (op = OpNegBits, postFix = false)
- name: macro.TypedExprDef.TVar()
  id: haxe/macro/typedexprdef#TVar
  summary: A variable declaration var v or var v = expr
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TVar(v:`[`TVar`](tvar "haxe.macro.TVar - Represents a variable in the typed AST.")`, expr:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`>)`

    A variable declaration `var v` or `var v = expr`.
- name: macro.TypedExprDef.TWhile()
  id: haxe/macro/typedexprdef#TWhile
  summary: Represents a while expression
  belongs_to: macro.TypedExprDef
  description: |-
    ### `TWhile(econd:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`, e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`, normalWhile:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`)`

    Represents a `while` expression. When `normalWhile` is [`true`](../../bool) it is `while (...)`. When `normalWhile` is [`false`](../../bool) it is `do {...} while (...)`.
- name: macro.TypedExprTools
  id: haxe/macro/typedexprtools
  summary: This class provides some utility methods to work with typed expressions
  description: "# TypedExprTools\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nThis class provides some utility methods to work with typed expressions. It is best used through 'using haxe.macro.TypedExprTools' syntax and then provides additional methods on [`haxe.macro.TypedExpr`](typedexpr#TypedExpr) instances.\n\n## Static methods\n\n### `static`[`iter`](#iter)`(``e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`,`` ``f:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")` ‑> `[`Void`](../../void \"Void - The standard Void type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\nCalls function `f` on each sub-expression of `e`.\n\nSee [`haxe.macro.ExprTools.iter`](exprtools#iter) for details on iterating expressions in general. This function works the same way, but with a different data structure.\n\n### `static`[`map`](#map)`(``e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`,`` ``f:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")` ‑> `[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`):`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")\n\nTransforms the sub-expressions of `e` by calling `f` on each of them.\n\nSee [`haxe.macro.ExprTools.map`](exprtools#map) for details on expression mapping in general. This function works the same way, but with a different data structure.\n\n### `static`[`mapWithType`](#mapWithType)`(``e:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`,`` ``f:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")` ‑> `[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`,`` ``ft:`[`Type`](type \"haxe.macro.Type - Represents a type.\")` ‑> `[`Type`](type \"haxe.macro.Type - Represents a type.\")`,`` ``fv:`[`TVar`](tvar \"haxe.macro.TVar - Represents a variable in the typed AST.\")` ‑> `[`TVar`](tvar \"haxe.macro.TVar - Represents a variable in the typed AST.\")`):`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")\n\nTransforms the sub-expressions of `e` by calling `f` on each of them. Additionally, types are mapped using `ft` and variables are mapped using `fv`.\n\nSee [`haxe.macro.ExprTools.map`](exprtools#map) for details on expression mapping in general. This function works the same way, but with a different data structure.\n\n### `static`[`toString`](#toString)`(``t:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`,`` ``pretty:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`String`](../../string \"String - The basic String class.\")\n\n*Available on macro*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypedExprTools.html](https://api.haxe.org/haxe/macro/TypedExprTools.html)"
- name: macro.TypedExprTools.iter()
  id: haxe/macro/typedexprtools#iter
  summary: Calls function f on each sub-expression of e
  belongs_to: macro.TypedExprTools
  description: |-
    ### `static`[`iter`](#iter)`(``e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`,``f:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")` ‑> `[`Void`](../../void "Void - The standard Void type.")`):`[`Void`](../../void "Void - The standard Void type.")

    Calls function `f` on each sub-expression of `e`.

    See [`haxe.macro.ExprTools.iter`](exprtools#iter) for details on iterating expressions in general. This function works the same way, but with a different data structure.
- name: macro.TypedExprTools.map()
  id: haxe/macro/typedexprtools#map
  summary: Transforms the sub-expressions of e by calling f on each of them
  belongs_to: macro.TypedExprTools
  description: |-
    ### `static`[`map`](#map)`(``e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`,``f:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")` ‑> `[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`):`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")

    Transforms the sub-expressions of `e` by calling `f` on each of them.

    See [`haxe.macro.ExprTools.map`](exprtools#map) for details on expression mapping in general. This function works the same way, but with a different data structure.
- name: macro.TypedExprTools.mapWithType()
  id: haxe/macro/typedexprtools#mapWithType
  summary: Transforms the sub-expressions of e by calling f on each of them
  belongs_to: macro.TypedExprTools
  description: |-
    ### `static`[`mapWithType`](#mapWithType)`(``e:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`,``f:`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")` ‑> `[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")`,``ft:`[`Type`](type "haxe.macro.Type - Represents a type.")` ‑> `[`Type`](type "haxe.macro.Type - Represents a type.")`,``fv:`[`TVar`](tvar "haxe.macro.TVar - Represents a variable in the typed AST.")` ‑> `[`TVar`](tvar "haxe.macro.TVar - Represents a variable in the typed AST.")`):`[`TypedExpr`](typedexpr "haxe.macro.TypedExpr - Represents a typed AST node.")

    Transforms the sub-expressions of `e` by calling `f` on each of them. Additionally, types are mapped using `ft` and variables are mapped using `fv`.

    See [`haxe.macro.ExprTools.map`](exprtools#map) for details on expression mapping in general. This function works the same way, but with a different data structure.
- name: macro.TypedExprTools.toString()
  id: haxe/macro/typedexprtools#toString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.TypedExprTools
  description: "### `static`[`toString`](#toString)`(``t:`[`TypedExpr`](typedexpr \"haxe.macro.TypedExpr - Represents a typed AST node.\")`,``pretty:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`String`](../../string \"String - The basic String class.\")\n\n*Available on macro*\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypedExprTools.html](https://api.haxe.org/haxe/macro/TypedExprTools.html)"
- name: macro.TypeParam
  id: haxe/macro/typeparam
  summary: Represents a concrete type parameter in the AST
  description: "# TypeParam\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a concrete type parameter in the AST.\n\nHaxe allows expressions in concrete type parameters, e.g. `new YourType<[\"hello\", \"world\"]>`. In that case the value is `TPExpr` while in the normal case it's `TPType`.\n\n## Values\n\n### `TPType(t:`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`)`\n\n### `TPExpr(e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypeParam.html](https://api.haxe.org/haxe/macro/TypeParam.html)"
- name: macro.TypeParam.TPExpr()
  id: haxe/macro/typeparam#TPExpr
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.TypeParam
  description: "### `TPExpr(e:`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypeParam.html](https://api.haxe.org/haxe/macro/TypeParam.html)"
- name: macro.TypeParam.TPType()
  id: haxe/macro/typeparam#TPType
  summary: null
  belongs_to: macro.TypeParam
  description: '### `TPType(t:`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`)`'
- name: macro.TypeParamDecl
  id: haxe/macro/typeparamdecl
  summary: Represents a type parameter declaration in the AST
  description: "# TypeParamDecl\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a type parameter declaration in the AST.\n\n## Fields\n\n### `optional`[`params`](#params)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`TypeParamDecl`](typeparamdecl \"haxe.macro.TypeParamDecl - Represents a type parameter declaration in the AST.\")`>>`\n\nThe optional parameters of the type parameter.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the type parameter.\n\n### `optional`[`meta`](#meta)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Metadata`](metadata \"haxe.macro.Metadata - Represents metadata in the AST.\")`>`\n\nThe metadata of the type parameter.\n\n### `optional`[`constraints`](#constraints)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>>`\n\nThe optional constraints of the type parameter.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypeParamDecl.html](https://api.haxe.org/haxe/macro/TypeParamDecl.html)"
- name: macro.TypeParamDecl.constraints
  id: haxe/macro/typeparamdecl#constraints
  summary: The optional constraints of the type parameter
  belongs_to: macro.TypeParamDecl
  description: "### `optional`[`constraints`](#constraints)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>>`\n\nThe optional constraints of the type parameter.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypeParamDecl.html](https://api.haxe.org/haxe/macro/TypeParamDecl.html)"
- name: macro.TypeParamDecl.meta
  id: haxe/macro/typeparamdecl#meta
  summary: The metadata of the type parameter
  belongs_to: macro.TypeParamDecl
  description: |-
    ### `optional`[`meta`](#meta)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Metadata`](metadata "haxe.macro.Metadata - Represents metadata in the AST.")`>`

    The metadata of the type parameter.
- name: macro.TypeParamDecl.name
  id: haxe/macro/typeparamdecl#name
  summary: The name of the type parameter
  belongs_to: macro.TypeParamDecl
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the type parameter.
- name: macro.TypeParamDecl.params
  id: haxe/macro/typeparamdecl#params
  summary: The optional parameters of the type parameter
  belongs_to: macro.TypeParamDecl
  description: |-
    ### `optional`[`params`](#params)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Array`](../../array "Array")`<`[`TypeParamDecl`](typeparamdecl "haxe.macro.TypeParamDecl - Represents a type parameter declaration in the AST.")`>>`

    The optional parameters of the type parameter.
- name: macro.TypeParameter
  id: haxe/macro/typeparameter
  summary: Represents the declaration of type parameters
  description: "# TypeParameter\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents the declaration of type parameters.\n\n## Fields\n\n### [`t`](#t)`:`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\nThe type of the type parameter. It is guaranteed to be a \\`TInst\\` with a \\`KTypeParameter\\` kind.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the type parameter.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypeParameter.html](https://api.haxe.org/haxe/macro/TypeParameter.html)"
- name: macro.TypeParameter.name
  id: haxe/macro/typeparameter#name
  summary: The name of the type parameter
  belongs_to: macro.TypeParameter
  description: "### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the type parameter.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypeParameter.html](https://api.haxe.org/haxe/macro/TypeParameter.html)"
- name: macro.TypeParameter.t
  id: haxe/macro/typeparameter#t
  summary: The type of the type parameter
  belongs_to: macro.TypeParameter
  description: |-
    ### [`t`](#t)`:`[`Type`](type "haxe.macro.Type - Represents a type.")

    The type of the type parameter. It is guaranteed to be a \`TInst\` with a \`KTypeParameter\` kind.
- name: macro.TypePath
  id: haxe/macro/typepath
  summary: Represents a type path in the AST
  description: "# TypePath\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a type path in the AST.\n\n## Fields\n\n### `optional`[`sub`](#sub)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nSub is set on module sub-type access: \\`pack.Module.Type\\` has \\`name = \"Module\"\\`, \\`sub = \"Type\"\\`, if available.\n\n### `optional`[`params`](#params)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`TypeParam`](typeparam \"haxe.macro.TypeParam - Represents a concrete type parameter in the AST.\")`>>`\n\nOptional parameters of the type path.\n\n### [`pack`](#pack)`:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nRepresents the package of the type path.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the type path.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypePath.html](https://api.haxe.org/haxe/macro/TypePath.html)"
- name: macro.TypePath.name
  id: haxe/macro/typepath#name
  summary: The name of the type path
  belongs_to: macro.TypePath
  description: "### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the type path.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypePath.html](https://api.haxe.org/haxe/macro/TypePath.html)"
- name: macro.TypePath.pack
  id: haxe/macro/typepath#pack
  summary: Represents the package of the type path
  belongs_to: macro.TypePath
  description: |-
    ### [`pack`](#pack)`:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>`

    Represents the package of the type path.
- name: macro.TypePath.params
  id: haxe/macro/typepath#params
  summary: Optional parameters of the type path
  belongs_to: macro.TypePath
  description: |-
    ### `optional`[`params`](#params)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Array`](../../array "Array")`<`[`TypeParam`](typeparam "haxe.macro.TypeParam - Represents a concrete type parameter in the AST.")`>>`

    Optional parameters of the type path.
- name: macro.TypePath.sub
  id: haxe/macro/typepath#sub
  summary: 'Sub is set on module sub-type access: `pack.Module.Type` has `name = "Module"`, `sub = "Type"`, if available'
  belongs_to: macro.TypePath
  description: |-
    ### `optional`[`sub`](#sub)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    Sub is set on module sub-type access: \`pack.Module.Type\` has \`name = "Module"\`, \`sub = "Type"\`, if available.
- name: macro.TypeTools
  id: haxe/macro/typetools
  summary: This class provides some utility methods to work with types
  description: "# TypeTools\n\npackage [haxe.macro](index)\n\n*Available on all platforms*\n\nThis class provides some utility methods to work with types. It is best used through 'using haxe.macro.TypeTools' syntax and then provides additional methods on haxe.macro.Type instances.\n\n## Static methods\n\n### `static`[`applyTypeParameters`](#applyTypeParameters)`(``t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`,`` ``typeParameters:`[`Array`](../../array \"Array\")`<`[`TypeParameter`](typeparameter \"haxe.macro.TypeParameter - Represents the declaration of type parameters.\")`>,`` ``concreteTypes:`[`Array`](../../array \"Array\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>``):`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\n*Available on macro*\n\nApplies the type parameters `typeParameters` to type `t` with the given types `concreteTypes`.\n\nThis function replaces occurrences of type parameters in `t` if they are part of `typeParameters`. The array index of such a type parameter is then used to lookup the concrete type in `concreteTypes`.\n\nIf `typeParameters.length` is not equal to `concreteTypes.length`, an exception of type [`String`](../../string) is thrown.\n\nIf `typeParameters.length` is 0, `t` is returned unchanged.\n\nIf either argument is `null`, the result is unspecified.\n\n### `static`[`findField`](#findField)`(``c:`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")`,`` ``name:`[`String`](../../string \"String - The basic String class.\")`,`` ``isStatic:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ClassField`](classfield \"haxe.macro.ClassField - Represents a class field.\")`>`\n\nResolves the field named `name` on class `c`.\n\nIf `isStatic` is true, the classes' static fields are checked. Otherwise the classes' member fields are checked.\n\nIf the field is found, it is returned. Otherwise if `c` has a super class, `findField` recursively checks that super class. Otherwise null is returned.\n\nIf any argument is null, the result is unspecified.\n\n### `static``inline`[`follow`](#follow)`(``t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`,`` ``?once:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\n*Available on macro*\n\nFollows all typedefs of `t` to reach the actual type.\n\nIf `once` is true, this function does not call itself recursively, otherwise it does. This can be useful in cases where intermediate typedefs might be of interest.\n\nAffected types are monomorphs `TMono` and typedefs `TType(t,pl)`.\n\nIf `t` is null, an internal exception is thrown.\n\nUsage example:\n\n    var t = Context.typeof(macro null); // TMono(<mono>)\n    var ts = Context.typeof(macro \"foo\"); //TInst(String,[])\n    Context.unify(t, ts);\n    trace(t); // TMono(<mono>)\n    trace(t.follow()); //TInst(String,[])\n\n### `static``inline`[`followWithAbstracts`](#followWithAbstracts)`(``t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`,`` ``once:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\n*Available on macro*\n\nLike `follow`, follows all typedefs of `t` to reach the actual type.\n\nWill however follow also abstracts to their underlying implementation, if they are not a @:coreType abstract\n\nIf `t` is null, an internal exception is thrown.\n\nUsage example:\n\n    var t = Context.typeof(macro new Map<String, String>());\n    trace(t); // TAbstract(Map,[TInst(String,[]),TInst(String,[])])\n    trace(t.followWithAbstracts()); // TInst(haxe.ds.StringMap, [TInst(String,[])])\n\n### `static`[`getClass`](#getClass)`(``t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`):`[`ClassType`](classtype \"haxe.macro.ClassType - Represents a class type.\")\n\n*Available on macro*\n\nTries to extract the class instance stored inside `t`.\n\nIf `t` is a class instance `TInst(c,pl)`, c is returned.\n\nIf `t` is of a different type, an exception of type String is thrown.\n\nIf `t` is null, the result is null.\n\n### `static`[`getEnum`](#getEnum)`(``t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`):`[`EnumType`](enumtype \"haxe.macro.EnumType - Represents an enum type.\")\n\n*Available on macro*\n\nTries to extract the enum instance stored inside `t`.\n\nIf `t` is an enum instance `TEnum(e,pl)`, e is returned.\n\nIf `t` is of a different type, an exception of type String is thrown.\n\nIf `t` is null, the result is null.\n\n### `static`[`iter`](#iter)`(``t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`,`` ``f:`[`Type`](type \"haxe.macro.Type - Represents a type.\")` ‑> `[`Void`](../../void \"Void - The standard Void type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on macro*\n\nCalls function `f` on each component of type `t`.\n\nIf `t` is not a compound type, this operation has no effect.\n\nThe following types are considered compound:\n\n    - TInst, TEnum, TType and TAbstract with type parameters\n    - TFun\n    - TAnonymous\n\nIf `t` or `f` are null, the result is unspecified.\n\n### `static`[`map`](#map)`(``t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`,`` ``f:`[`Type`](type \"haxe.macro.Type - Represents a type.\")` ‑> `[`Type`](type \"haxe.macro.Type - Represents a type.\")`):`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\n*Available on macro*\n\nTransforms `t` by calling `f` on each of its subtypes.\n\nIf `t` is a compound type, `f` is called on each of its components.\n\nOtherwise `t` is returned unchanged.\n\nThe following types are considered compound:\n\n    - TInst, TEnum, TType and TAbstract with type parameters\n    - TFun\n    - TAnonymous\n\nIf `t` or `f` are null, the result is unspecified.\n\n### `static`[`toComplexType`](#toComplexType)`(``type:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Type`](type \"haxe.macro.Type - Represents a type.\")`>``):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>`\n\nReturns a syntax-level type corresponding to Type `t`.\n\nThis function is mostly inverse to [`ComplexTypeTools.toType`](complextypetools#toType), but may lose some information on types that do not have a corresponding syntax version, such as monomorphs. In these cases, the result is null.\n\nIf `t` is null, an internal exception is thrown.\n\n### `static`[`toString`](#toString)`(``t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`):`[`String`](../../string \"String - The basic String class.\")\n\n*Available on macro*\n\nConverts type `t` to a human-readable String representation.\n\n### `static``inline`[`unify`](#unify)`(``t1:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`,`` ``t2:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n*Available on macro*\n\nReturns true if `t1` and `t2` unify, false otherwise.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypeTools.html](https://api.haxe.org/haxe/macro/TypeTools.html)"
- name: macro.TypeTools.applyTypeParameters()
  id: haxe/macro/typetools#applyTypeParameters
  summary: Applies the type parameters typeParameters to type t with the given types concreteTypes
  belongs_to: macro.TypeTools
  description: |-
    ### `static`[`applyTypeParameters`](#applyTypeParameters)`(``t:`[`Type`](type "haxe.macro.Type - Represents a type.")`,``typeParameters:`[`Array`](../../array "Array")`<`[`TypeParameter`](typeparameter "haxe.macro.TypeParameter - Represents the declaration of type parameters.")`>,``concreteTypes:`[`Array`](../../array "Array")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>``):`[`Type`](type "haxe.macro.Type - Represents a type.")

    *Available on macro*

    Applies the type parameters `typeParameters` to type `t` with the given types `concreteTypes`.

    This function replaces occurrences of type parameters in `t` if they are part of `typeParameters`. The array index of such a type parameter is then used to lookup the concrete type in `concreteTypes`.

    If `typeParameters.length` is not equal to `concreteTypes.length`, an exception of type [`String`](../../string) is thrown.

    If `typeParameters.length` is 0, `t` is returned unchanged.

    If either argument is `null`, the result is unspecified.
- name: macro.TypeTools.findField()
  id: haxe/macro/typetools#findField
  summary: Resolves the field named name on class c
  belongs_to: macro.TypeTools
  description: |-
    ### `static`[`findField`](#findField)`(``c:`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")`,``name:`[`String`](../../string "String - The basic String class.")`,``isStatic:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = false``):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ClassField`](classfield "haxe.macro.ClassField - Represents a class field.")`>`

    Resolves the field named `name` on class `c`.

    If `isStatic` is true, the classes' static fields are checked. Otherwise the classes' member fields are checked.

    If the field is found, it is returned. Otherwise if `c` has a super class, `findField` recursively checks that super class. Otherwise null is returned.

    If any argument is null, the result is unspecified.
- name: macro.TypeTools.follow()
  id: haxe/macro/typetools#follow
  summary: Follows all typedefs of t to reach the actual type
  belongs_to: macro.TypeTools
  description: |-
    ### `static``inline`[`follow`](#follow)`(``t:`[`Type`](type "haxe.macro.Type - Represents a type.")`,``?once:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`Type`](type "haxe.macro.Type - Represents a type.")

    *Available on macro*

    Follows all typedefs of `t` to reach the actual type.

    If `once` is true, this function does not call itself recursively, otherwise it does. This can be useful in cases where intermediate typedefs might be of interest.

    Affected types are monomorphs `TMono` and typedefs `TType(t,pl)`.

    If `t` is null, an internal exception is thrown.

    Usage example:

              var t = Context.typeof(macro null); // TMono(<mono>)
        var ts = Context.typeof(macro "foo"); //TInst(String,[])
        Context.unify(t, ts);
        trace(t); // TMono(<mono>)
        trace(t.follow()); //TInst(String,[])
- name: macro.TypeTools.followWithAbstracts()
  id: haxe/macro/typetools#followWithAbstracts
  summary: Like follow, follows all typedefs of t to reach the actual type
  belongs_to: macro.TypeTools
  description: |-
    ### `static``inline`[`followWithAbstracts`](#followWithAbstracts)`(``t:`[`Type`](type "haxe.macro.Type - Represents a type.")`,``once:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = false``):`[`Type`](type "haxe.macro.Type - Represents a type.")

    *Available on macro*

    Like `follow`, follows all typedefs of `t` to reach the actual type.

    Will however follow also abstracts to their underlying implementation, if they are not a @:coreType abstract

    If `t` is null, an internal exception is thrown.

    Usage example:

              var t = Context.typeof(macro new Map<String, String>());
        trace(t); // TAbstract(Map,[TInst(String,[]),TInst(String,[])])
        trace(t.followWithAbstracts()); // TInst(haxe.ds.StringMap, [TInst(String,[])])
- name: macro.TypeTools.getClass()
  id: haxe/macro/typetools#getClass
  summary: Tries to extract the class instance stored inside t
  belongs_to: macro.TypeTools
  description: |-
    ### `static`[`getClass`](#getClass)`(``t:`[`Type`](type "haxe.macro.Type - Represents a type.")`):`[`ClassType`](classtype "haxe.macro.ClassType - Represents a class type.")

    *Available on macro*

    Tries to extract the class instance stored inside `t`.

    If `t` is a class instance `TInst(c,pl)`, c is returned.

    If `t` is of a different type, an exception of type String is thrown.

    If `t` is null, the result is null.
- name: macro.TypeTools.getEnum()
  id: haxe/macro/typetools#getEnum
  summary: Tries to extract the enum instance stored inside t
  belongs_to: macro.TypeTools
  description: |-
    ### `static`[`getEnum`](#getEnum)`(``t:`[`Type`](type "haxe.macro.Type - Represents a type.")`):`[`EnumType`](enumtype "haxe.macro.EnumType - Represents an enum type.")

    *Available on macro*

    Tries to extract the enum instance stored inside `t`.

    If `t` is an enum instance `TEnum(e,pl)`, e is returned.

    If `t` is of a different type, an exception of type String is thrown.

    If `t` is null, the result is null.
- name: macro.TypeTools.iter()
  id: haxe/macro/typetools#iter
  summary: Calls function f on each component of type t
  belongs_to: macro.TypeTools
  description: "### `static`[`iter`](#iter)`(``t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`,``f:`[`Type`](type \"haxe.macro.Type - Represents a type.\")` ‑> `[`Void`](../../void \"Void - The standard Void type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n*Available on macro*\n\nCalls function `f` on each component of type `t`.\n\nIf `t` is not a compound type, this operation has no effect.\n\nThe following types are considered compound:\n\n          - TInst, TEnum, TType and TAbstract with type parameters\n    - TFun\n    - TAnonymous\n\n        \n\nIf `t` or `f` are null, the result is unspecified."
- name: macro.TypeTools.map()
  id: haxe/macro/typetools#map
  summary: Transforms t by calling f on each of its subtypes
  belongs_to: macro.TypeTools
  description: "### `static`[`map`](#map)`(``t:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`,``f:`[`Type`](type \"haxe.macro.Type - Represents a type.\")` ‑> `[`Type`](type \"haxe.macro.Type - Represents a type.\")`):`[`Type`](type \"haxe.macro.Type - Represents a type.\")\n\n*Available on macro*\n\nTransforms `t` by calling `f` on each of its subtypes.\n\nIf `t` is a compound type, `f` is called on each of its components.\n\nOtherwise `t` is returned unchanged.\n\nThe following types are considered compound:\n\n          - TInst, TEnum, TType and TAbstract with type parameters\n    - TFun\n    - TAnonymous\n\n        \n\nIf `t` or `f` are null, the result is unspecified."
- name: macro.TypeTools.toComplexType()
  id: haxe/macro/typetools#toComplexType
  summary: Returns a syntax-level type corresponding to Type t
  belongs_to: macro.TypeTools
  description: |-
    ### `static`[`toComplexType`](#toComplexType)`(``type:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Type`](type "haxe.macro.Type - Represents a type.")`>``):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`>`

    Returns a syntax-level type corresponding to Type `t`.

    This function is mostly inverse to [`ComplexTypeTools.toType`](complextypetools#toType), but may lose some information on types that do not have a corresponding syntax version, such as monomorphs. In these cases, the result is null.

    If `t` is null, an internal exception is thrown.
- name: macro.TypeTools.toString()
  id: haxe/macro/typetools#toString
  summary: Converts type t to a human-readable String representation
  belongs_to: macro.TypeTools
  description: |-
    ### `static`[`toString`](#toString)`(``t:`[`Type`](type "haxe.macro.Type - Represents a type.")`):`[`String`](../../string "String - The basic String class.")

    *Available on macro*

    Converts type `t` to a human-readable String representation.
- name: macro.TypeTools.unify()
  id: haxe/macro/typetools#unify
  summary: Returns true if t1 and t2 unify, false otherwise
  belongs_to: macro.TypeTools
  description: "### `static``inline`[`unify`](#unify)`(``t1:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`,``t2:`[`Type`](type \"haxe.macro.Type - Represents a type.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n*Available on macro*\n\nReturns true if `t1` and `t2` unify, false otherwise.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/TypeTools.html](https://api.haxe.org/haxe/macro/TypeTools.html)"
- name: macro.Unop
  id: haxe/macro/unop
  summary: A unary operator
  description: "# Unop\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nA unary operator.\n\nSee also:\n\n- <https://haxe.org/manual/types-numeric-operators.html>\n\n## Values\n\n### `OpIncrement`\n\n### `++`\n\n### `OpDecrement`\n\n### `--`\n\n### `OpNot`\n\n### `!`\n\n### `OpNeg`\n\n### `-`\n\n### `OpNegBits`\n\n### `~`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Unop.html](https://api.haxe.org/haxe/macro/Unop.html)"
- name: macro.Unop.OpDecrement
  id: haxe/macro/unop#OpDecrement
  summary: null
  belongs_to: macro.Unop
  description: |-
    ### `OpDecrement`

    ### `--`
- name: macro.Unop.OpIncrement
  id: haxe/macro/unop#OpIncrement
  summary: null
  belongs_to: macro.Unop
  description: |-
    ### `OpIncrement`

    ### `++`
- name: macro.Unop.OpNeg
  id: haxe/macro/unop#OpNeg
  summary: null
  belongs_to: macro.Unop
  description: |-
    ### `OpNeg`

    ### `-`
- name: macro.Unop.OpNegBits
  id: haxe/macro/unop#OpNegBits
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: macro.Unop
  description: "### `OpNegBits`\n\n### `~`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Unop.html](https://api.haxe.org/haxe/macro/Unop.html)"
- name: macro.Unop.OpNot
  id: haxe/macro/unop#OpNot
  summary: null
  belongs_to: macro.Unop
  description: |-
    ### `OpNot`

    ### `!`
- name: macro.Var
  id: haxe/macro/var
  summary: Represents a variable in the AST
  description: "# Var\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Expr](expr)\n\n*Available on all platforms*\n\nRepresents a variable in the AST.\n\nSee also:\n\n- <https://haxe.org/manual/expression-var.html>\n\n## Fields\n\n### [`type`](#type)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`ComplexType`](complextype \"haxe.macro.ComplexType - Represents a type syntax in the AST.\")`>`\n\nThe type-hint of the variable, if available.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the variable.\n\n### `optional`[`isFinal`](#isFinal)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`>`\n\nWhether or not the variable can be assigned to.\n\n### [`expr`](#expr)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>`\n\nThe expression of the variable, if available.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Var.html](https://api.haxe.org/haxe/macro/Var.html)"
- name: macro.Var.expr
  id: haxe/macro/var#expr
  summary: The expression of the variable, if available
  belongs_to: macro.Var
  description: "### [`expr`](#expr)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Expr`](expr \"haxe.macro.Expr - Represents a node in the AST.\")`>`\n\nThe expression of the variable, if available.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/Var.html](https://api.haxe.org/haxe/macro/Var.html)"
- name: macro.Var.isFinal
  id: haxe/macro/var#isFinal
  summary: Whether or not the variable can be assigned to
  belongs_to: macro.Var
  description: |-
    ### `optional`[`isFinal`](#isFinal)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`>`

    Whether or not the variable can be assigned to.
- name: macro.Var.name
  id: haxe/macro/var#name
  summary: The name of the variable
  belongs_to: macro.Var
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the variable.
- name: macro.Var.type
  id: haxe/macro/var#type
  summary: The type-hint of the variable, if available
  belongs_to: macro.Var
  description: |-
    ### [`type`](#type)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`ComplexType`](complextype "haxe.macro.ComplexType - Represents a type syntax in the AST.")`>`

    The type-hint of the variable, if available.
- name: macro.VarAccess
  id: haxe/macro/varaccess
  summary: Represents the variable accessor
  description: "# VarAccess\n\npackage [haxe.macro](index)\n\nimport [haxe.macro.Type](type)\n\n*Available on all platforms*\n\nRepresents the variable accessor.\n\n## Values\n\n### `AccNormal`\n\nNormal access (`default`).\n\n### `AccNo`\n\nPrivate access (`null`).\n\n### `AccNever`\n\nNo access (`never`).\n\n### `AccResolve`\n\nUnused.\n\n### `AccCall`\n\nAccess through accessor function (`get`, `set`, `dynamic`).\n\n### `AccInline`\n\nInline access (`inline`).\n\n### `AccRequire(r:`[`String`](../../string \"String - The basic String class.\")`, msg:`[`String`](../../string \"String - The basic String class.\")`)`\n\nFailed access due to a `@:require` metadata.\n\n### `AccCtor`\n\nAccess is only allowed from the constructor.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/VarAccess.html](https://api.haxe.org/haxe/macro/VarAccess.html)"
- name: macro.VarAccess.AccCall
  id: haxe/macro/varaccess#AccCall
  summary: Access through accessor function (get, set, dynamic)
  belongs_to: macro.VarAccess
  description: |-
    ### `AccCall`

    Access through accessor function (`get`, `set`, `dynamic`).
- name: macro.VarAccess.AccCtor
  id: haxe/macro/varaccess#AccCtor
  summary: Access is only allowed from the constructor
  belongs_to: macro.VarAccess
  description: "### `AccCtor`\n\nAccess is only allowed from the constructor.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/macro/VarAccess.html](https://api.haxe.org/haxe/macro/VarAccess.html)"
- name: macro.VarAccess.AccInline
  id: haxe/macro/varaccess#AccInline
  summary: Inline access (inline)
  belongs_to: macro.VarAccess
  description: |-
    ### `AccInline`

    Inline access (`inline`).
- name: macro.VarAccess.AccNever
  id: haxe/macro/varaccess#AccNever
  summary: No access (never)
  belongs_to: macro.VarAccess
  description: |-
    ### `AccNever`

    No access (`never`).
- name: macro.VarAccess.AccNo
  id: haxe/macro/varaccess#AccNo
  summary: Private access (null)
  belongs_to: macro.VarAccess
  description: |-
    ### `AccNo`

    Private access (`null`).
- name: macro.VarAccess.AccNormal
  id: haxe/macro/varaccess#AccNormal
  summary: Normal access (default)
  belongs_to: macro.VarAccess
  description: |-
    ### `AccNormal`

    Normal access (`default`).
- name: macro.VarAccess.AccRequire()
  id: haxe/macro/varaccess#AccRequire
  summary: Failed access due to a @:require metadata
  belongs_to: macro.VarAccess
  description: |-
    ### `AccRequire(r:`[`String`](../../string "String - The basic String class.")`, msg:`[`String`](../../string "String - The basic String class.")`)`

    Failed access due to a `@:require` metadata.
- name: macro.VarAccess.AccResolve
  id: haxe/macro/varaccess#AccResolve
  summary: Unused
  belongs_to: macro.VarAccess
  description: |-
    ### `AccResolve`

    Unused.
- name: MainEvent
  id: haxe/mainevent
  summary: Call the event
  description: "# MainEvent\n\npackage [haxe](index)\n\nimport [haxe.MainLoop](mainloop)\n\n*Available on all platforms*\n\n## Variables\n\n### [`isBlocking`](#isBlocking)`:`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true`\n\nTells if the event can lock the process from exiting (default:true)\n\n### `read only`[`nextRun`](#nextRun)`:`[`Float`](../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n### `read only`[`priority`](#priority)`:`[`Int`](../int \"Int - The standard Int type.\")\n\n## Methods\n\n### `inline`[`call`](#call)`():`[`Void`](../void \"Void - The standard Void type.\")\n\nCall the event. Will do nothing if the event has been stopped.\n\n### [`delay`](#delay)`(``t:`[`Null`](../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Float`](../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`>``):`[`Void`](../void \"Void - The standard Void type.\")\n\nDelay the execution of the event for the given time, in seconds. If t is null, the event will be run at tick() time.\n\n### [`stop`](#stop)`():`[`Void`](../void \"Void - The standard Void type.\")\n\nStop the event from firing anymore.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/MainEvent.html](https://api.haxe.org/haxe/MainEvent.html)"
- name: MainEvent.call()
  id: haxe/mainevent#call
  summary: Call the event
  belongs_to: MainEvent
  description: |-
    ### `inline`[`call`](#call)`():`[`Void`](../void "Void - The standard Void type.")

    Call the event. Will do nothing if the event has been stopped.
- name: MainEvent.delay()
  id: haxe/mainevent#delay
  summary: Delay the execution of the event for the given time, in seconds
  belongs_to: MainEvent
  description: |-
    ### [`delay`](#delay)`(``t:`[`Null`](../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Float`](../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`>``):`[`Void`](../void "Void - The standard Void type.")

    Delay the execution of the event for the given time, in seconds. If t is null, the event will be run at tick() time.
- name: MainEvent.isBlocking
  id: haxe/mainevent#isBlocking
  summary: null
  belongs_to: MainEvent
  description: |-
    ### [`isBlocking`](#isBlocking)`:`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")` = true`

    Tells if the event can lock the process from exiting (default:true)
- name: MainEvent.nextRun
  id: haxe/mainevent#nextRun
  summary: null
  belongs_to: MainEvent
  description: '### `read only`[`nextRun`](#nextRun)`:`[`Float`](../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")'
- name: MainEvent.priority
  id: haxe/mainevent#priority
  summary: null
  belongs_to: MainEvent
  description: |-
    ### `read only`[`priority`](#priority)`:`[`Int`](../int "Int - The standard Int type.")

    ## Methods
- name: MainEvent.stop()
  id: haxe/mainevent#stop
  summary: Stop the event from firing anymore
  belongs_to: MainEvent
  description: "### [`stop`](#stop)`():`[`Void`](../void \"Void - The standard Void type.\")\n\nStop the event from firing anymore.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/MainEvent.html](https://api.haxe.org/haxe/MainEvent.html)"
- name: MainLoop
  id: haxe/mainloop
  summary: Add a pending event to be run into the main loop
  description: "# MainLoop\n\npackage [haxe](index)\n\n*Available on all platforms*\n\n## Static variables\n\n### `static``read only`[`threadCount`](#threadCount)`:`[`Int`](../int \"Int - The standard Int type.\")\n\n## Static methods\n\n### `static`[`add`](#add)`(``f:() ‑> `[`Void`](../void \"Void - The standard Void type.\")`,`` ``priority:`[`Int`](../int \"Int - The standard Int type.\")` = 0``):`[`MainEvent`](mainevent \"haxe.MainEvent\")\n\nAdd a pending event to be run into the main loop.\n\n### `static`[`addThread`](#addThread)`(``f:() ‑> `[`Void`](../void \"Void - The standard Void type.\")`):`[`Void`](../void \"Void - The standard Void type.\")\n\n### `static`[`hasEvents`](#hasEvents)`():`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### `static`[`runInMainThread`](#runInMainThread)`(``f:() ‑> `[`Void`](../void \"Void - The standard Void type.\")`):`[`Void`](../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/MainLoop.html](https://api.haxe.org/haxe/MainLoop.html)"
- name: MainLoop.add()
  id: haxe/mainloop#add
  summary: Add a pending event to be run into the main loop
  belongs_to: MainLoop
  description: |-
    ### `static`[`add`](#add)`(``f:() ‑> `[`Void`](../void "Void - The standard Void type.")`,``priority:`[`Int`](../int "Int - The standard Int type.")` = 0``):`[`MainEvent`](mainevent "haxe.MainEvent")

    Add a pending event to be run into the main loop.
- name: MainLoop.addThread()
  id: haxe/mainloop#addThread
  summary: null
  belongs_to: MainLoop
  description: '### `static`[`addThread`](#addThread)`(``f:() ‑> `[`Void`](../void "Void - The standard Void type.")`):`[`Void`](../void "Void - The standard Void type.")'
- name: MainLoop.hasEvents()
  id: haxe/mainloop#hasEvents
  summary: null
  belongs_to: MainLoop
  description: '### `static`[`hasEvents`](#hasEvents)`():`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: MainLoop.runInMainThread()
  id: haxe/mainloop#runInMainThread
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: MainLoop
  description: "### `static`[`runInMainThread`](#runInMainThread)`(``f:() ‑> `[`Void`](../void \"Void - The standard Void type.\")`):`[`Void`](../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/MainLoop.html](https://api.haxe.org/haxe/MainLoop.html)"
- name: MainLoop.threadCount
  id: haxe/mainloop#threadCount
  summary: null
  belongs_to: MainLoop
  description: |-
    ### `static``read only`[`threadCount`](#threadCount)`:`[`Int`](../int "Int - The standard Int type.")

    ## Static methods
- name: Map
  id: map
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Map\\<K, V\\>\n\n[no package](index)\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`haxe.ds.Map`](haxe/ds/map \"haxe.ds.Map - Map allows key to value mapping for arbitrary value types, and many key types.\")`<``K``, ``V``>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Map.html](https://api.haxe.org/Map.html)"
- name: Math
  id: math
  summary: This class defines mathematical functions and constants
  description: "# Math\n\n[no package](index)\n\n*Available on all platforms*\n\nThis class defines mathematical functions and constants.\n\nSee also:\n\n- <https://haxe.org/manual/std-math.html>\n\n## Static variables\n\n### `static``read only`[`NEGATIVE_INFINITY`](#NEGATIVE_INFINITY)`:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")` = cs.system.Double.NegativeInfinity`\n\n*Available on cs, php, neko, cpp, macro, java, python, hl, flash*\n\nA special [`Float`](float) constant which denotes negative infinity.\n\nFor example, this is the result of `-1.0 / 0.0`.\n\nOperations with `NEGATIVE_INFINITY` as an operand may result in `NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.\n\nIf this constant is converted to an [`Int`](int), e.g. through [`Std.int`](std#int)`()`, the result is unspecified.\n\n### `static``read only`[`NEGATIVE_INFINITY`](#NEGATIVE_INFINITY)`:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n*Available on js, lua*\n\n### `static``read only`[`NaN`](#NaN)`:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")` = cs.system.Double.NaN`\n\n*Available on cs, php, neko, cpp, macro, java, python, hl, flash*\n\nA special [`Float`](float) constant which denotes an invalid number.\n\n`NaN` stands for \"Not a Number\". It occurs when a mathematically incorrect operation is executed, such as taking the square root of a negative number: [`Math.sqrt`](math#sqrt)`(-1)`.\n\nAll further operations with `NaN` as an operand will result in `NaN`.\n\nIf this constant is converted to an [`Int`](int), e.g. through [`Std.int`](std#int)`()`, the result is unspecified.\n\nIn order to test if a value is `NaN`, you should use [`Math.isNaN`](math#isNaN)`()` function.\n\n### `static``read only`[`NaN`](#NaN)`:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n*Available on js, lua*\n\n### `static``read only`[`PI`](#PI)`:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")` = cs.system.Math.PI`\n\n*Available on cs, php, js, neko, cpp, macro, java, python, hl, flash*\n\nRepresents the ratio of the circumference of a circle to its diameter, specified by the constant, π. `PI` is approximately `3.141592653589793`.\n\n### `static``read only`[`PI`](#PI)`:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n*Available on lua*\n\n### `static``read only`[`POSITIVE_INFINITY`](#POSITIVE_INFINITY)`:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")` = cs.system.Double.PositiveInfinity`\n\n*Available on cs, php, neko, cpp, macro, java, python, hl, flash*\n\nA special [`Float`](float) constant which denotes positive infinity.\n\nFor example, this is the result of `1.0 / 0.0`.\n\nOperations with `POSITIVE_INFINITY` as an operand may result in `NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.\n\nIf this constant is converted to an [`Int`](int), e.g. through [`Std.int`](std#int)`()`, the result is unspecified.\n\n### `static``read only`[`POSITIVE_INFINITY`](#POSITIVE_INFINITY)`:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n*Available on js, lua*\n\n## Static methods\n\n### `static`[`abs`](#abs)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the absolute value of `v`.\n\n- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.\n- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.\n- If `v` is `NaN`, the result is `NaN`.\n\n### `static`[`acos`](#acos)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the trigonometric arc cosine of the specified angle `v`, in radians.\n\nIf `v` is `NaN` or infinite, the result is `NaN`.\n\n### `static`[`asin`](#asin)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the trigonometric arc of the specified angle `v`, in radians.\n\nIf `v` is `NaN` or infinite, the result is `NaN`.\n\n### `static`[`atan`](#atan)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the trigonometric arc tangent of the specified angle `v`, in radians.\n\nIf `v` is `NaN` or infinite, the result is `NaN`.\n\n### `static`[`atan2`](#atan2)`(``y:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`,`` ``x:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the trigonometric arc tangent whose tangent is the quotient of two specified numbers, in radians.\n\nIf parameter `x` or `y` is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `NaN`.\n\n### `static`[`ceil`](#ceil)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the smallest integer value that is not less than `v`.\n\nIf `v` is outside of the signed [`Int32`](https://api.haxe.org/cs/system/Int32.html#Int32) range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.\n\n### `static`[`cos`](#cos)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the trigonometric cosine of the specified angle `v`, in radians.\n\nIf `v` is `NaN` or infinite, the result is `NaN`.\n\n### `static`[`exp`](#exp)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns Euler's number, raised to the power of `v`.\n\n`exp(1.0)` is approximately `2.718281828459`.\n\n- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.\n- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.\n- If `v` is `NaN`, the result is `NaN`.\n\n### `static`[`fceil`](#fceil)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the smallest integer value that is not less than `v`, as a [`Float`](float).\n\nIf `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.\n\n### `static`[`ffloor`](#ffloor)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the largest integer value that is not greater than `v`, as a [`Float`](float).\n\nIf `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.\n\n### `static`[`floor`](#floor)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the largest integer value that is not greater than `v`.\n\nIf `v` is outside of the signed [`Int32`](https://api.haxe.org/cs/system/Int32.html#Int32) range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.\n\n### `static`[`fround`](#fround)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nRounds `v` to the nearest integer value, as a Float.\n\nTies are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.\n\nIf `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.\n\n### `static`[`isFinite`](#isFinite)`(``f:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `f` is a finite number.\n\nIf `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result is [`false`](bool), otherwise the result is [`true`](bool).\n\n### `static`[`isNaN`](#isNaN)`(``f:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `f` is not a valid number.\n\nIf `f` is `NaN`, the result is [`true`](bool), otherwise the result is [`false`](bool). In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are not considered `NaN`.\n\n### `static`[`log`](#log)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the natural logarithm of `v`.\n\nThis is the mathematical inverse operation of exp, i.e. `log(exp(v)) == v` always holds.\n\n- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.\n- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.\n- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.\n\n### `static`[`max`](#max)`(``a:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`,`` ``b:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the greater of values `a` and `b`.\n\n- If `a` or `b` are `NaN`, the result is `NaN`.\n- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.\n- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.\n\n### `static`[`min`](#min)`(``a:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`,`` ``b:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the smaller of values `a` and `b`.\n\n- If `a` or `b` are `NaN`, the result is `NaN`.\n- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.\n- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.\n\n### `static`[`pow`](#pow)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`,`` ``exp:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns a specified base `v` raised to the specified power `exp`.\n\n### `static`[`random`](#random)`():`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns a pseudo-random number which is greater than or equal to `0.0`, and less than `1.0`.\n\n### `static`[`round`](#round)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nRounds `v` to the nearest integer value.\n\nTies are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.\n\nIf `v` is outside of the signed [`Int32`](https://api.haxe.org/cs/system/Int32.html#Int32) range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.\n\n### `static`[`sin`](#sin)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the trigonometric sine of the specified angle `v`, in radians.\n\nIf `v` is `NaN` or infinite, the result is `NaN`.\n\n### `static`[`sqrt`](#sqrt)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the square root of `v`.\n\n- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.\n- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.\n- If `v` is `0.0`, the result is `0.0`.\n\n### `static`[`tan`](#tan)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the trigonometric tangent of the specified angle `v`, in radians.\n\nIf `v` is `NaN` or infinite, the result is `NaN`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Math.html](https://api.haxe.org/Math.html)"
- name: Math.abs()
  id: math#abs
  summary: Returns the absolute value of v
  belongs_to: Math
  description: |-
    ### `static`[`abs`](#abs)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the absolute value of `v`.

    - If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
    - If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
    - If `v` is `NaN`, the result is `NaN`.
- name: Math.acos()
  id: math#acos
  summary: Returns the trigonometric arc cosine of the specified angle v, in radians
  belongs_to: Math
  description: |-
    ### `static`[`acos`](#acos)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the trigonometric arc cosine of the specified angle `v`, in radians.

    If `v` is `NaN` or infinite, the result is `NaN`.
- name: Math.asin()
  id: math#asin
  summary: Returns the trigonometric arc of the specified angle v, in radians
  belongs_to: Math
  description: |-
    ### `static`[`asin`](#asin)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the trigonometric arc of the specified angle `v`, in radians.

    If `v` is `NaN` or infinite, the result is `NaN`.
- name: Math.atan()
  id: math#atan
  summary: Returns the trigonometric arc tangent of the specified angle v, in radians
  belongs_to: Math
  description: |-
    ### `static`[`atan`](#atan)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the trigonometric arc tangent of the specified angle `v`, in radians.

    If `v` is `NaN` or infinite, the result is `NaN`.
- name: Math.atan2()
  id: math#atan2
  summary: Returns the trigonometric arc tangent whose tangent is the quotient of two specified numbers, in radians
  belongs_to: Math
  description: |-
    ### `static`[`atan2`](#atan2)`(``y:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`,``x:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the trigonometric arc tangent whose tangent is the quotient of two specified numbers, in radians.

    If parameter `x` or `y` is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `NaN`.
- name: Math.ceil()
  id: math#ceil
  summary: Returns the smallest integer value that is not less than v
  belongs_to: Math
  description: |-
    ### `static`[`ceil`](#ceil)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Int`](int "Int - The standard Int type.")

    Returns the smallest integer value that is not less than `v`.

    If `v` is outside of the signed [`Int32`](https://api.haxe.org/cs/system/Int32.html#Int32) range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.
- name: Math.cos()
  id: math#cos
  summary: Returns the trigonometric cosine of the specified angle v, in radians
  belongs_to: Math
  description: |-
    ### `static`[`cos`](#cos)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the trigonometric cosine of the specified angle `v`, in radians.

    If `v` is `NaN` or infinite, the result is `NaN`.
- name: Math.exp()
  id: math#exp
  summary: Returns Euler's number, raised to the power of v
  belongs_to: Math
  description: |-
    ### `static`[`exp`](#exp)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns Euler's number, raised to the power of `v`.

    `exp(1.0)` is approximately `2.718281828459`.

    - If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
    - If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
    - If `v` is `NaN`, the result is `NaN`.

    &nbsp;
- name: Math.fceil()
  id: math#fceil
  summary: Returns the smallest integer value that is not less than v, as a Float
  belongs_to: Math
  description: |-
    ### `static`[`fceil`](#fceil)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the smallest integer value that is not less than `v`, as a [`Float`](float).

    If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.
- name: Math.ffloor()
  id: math#ffloor
  summary: Returns the largest integer value that is not greater than v, as a Float
  belongs_to: Math
  description: |-
    ### `static`[`ffloor`](#ffloor)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the largest integer value that is not greater than `v`, as a [`Float`](float).

    If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.
- name: Math.floor()
  id: math#floor
  summary: Returns the largest integer value that is not greater than v
  belongs_to: Math
  description: |-
    ### `static`[`floor`](#floor)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Int`](int "Int - The standard Int type.")

    Returns the largest integer value that is not greater than `v`.

    If `v` is outside of the signed [`Int32`](https://api.haxe.org/cs/system/Int32.html#Int32) range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.
- name: Math.fround()
  id: math#fround
  summary: Rounds v to the nearest integer value, as a Float
  belongs_to: Math
  description: |-
    ### `static`[`fround`](#fround)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Rounds `v` to the nearest integer value, as a Float.

    Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

    If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.
- name: Math.isFinite()
  id: math#isFinite
  summary: Tells if f is a finite number
  belongs_to: Math
  description: |-
    ### `static`[`isFinite`](#isFinite)`(``f:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if `f` is a finite number.

    If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result is [`false`](bool), otherwise the result is [`true`](bool).
- name: Math.isNaN()
  id: math#isNaN
  summary: Tells if f is not a valid number
  belongs_to: Math
  description: |-
    ### `static`[`isNaN`](#isNaN)`(``f:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if `f` is not a valid number.

    If `f` is `NaN`, the result is [`true`](bool), otherwise the result is [`false`](bool). In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are not considered `NaN`.
- name: Math.log()
  id: math#log
  summary: Returns the natural logarithm of v
  belongs_to: Math
  description: |-
    ### `static`[`log`](#log)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the natural logarithm of `v`.

    This is the mathematical inverse operation of exp, i.e. `log(exp(v)) == v` always holds.

    - If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
    - If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
    - If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.

    &nbsp;
- name: Math.max()
  id: math#max
  summary: Returns the greater of values a and b
  belongs_to: Math
  description: |-
    ### `static`[`max`](#max)`(``a:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`,``b:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the greater of values `a` and `b`.

    - If `a` or `b` are `NaN`, the result is `NaN`.
    - If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
    - If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.

    &nbsp;
- name: Math.min()
  id: math#min
  summary: Returns the smaller of values a and b
  belongs_to: Math
  description: |-
    ### `static`[`min`](#min)`(``a:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`,``b:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the smaller of values `a` and `b`.

    - If `a` or `b` are `NaN`, the result is `NaN`.
    - If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
    - If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.

    &nbsp;
- name: Math.NaN
  id: math#NaN
  summary: A special Float constant which denotes an invalid number
  belongs_to: Math
  description: |-
    ### `static``read only`[`NaN`](#NaN)`:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")` = cs.system.Double.NaN`

    *Available on cs, php, neko, cpp, macro, java, python, hl, flash*

    A special [`Float`](float) constant which denotes an invalid number.

    `NaN` stands for "Not a Number". It occurs when a mathematically incorrect operation is executed, such as taking the square root of a negative number: [`Math.sqrt`](math#sqrt)`(-1)`.

    All further operations with `NaN` as an operand will result in `NaN`.

    If this constant is converted to an [`Int`](int), e.g. through [`Std.int`](std#int)`()`, the result is unspecified.

    In order to test if a value is `NaN`, you should use [`Math.isNaN`](math#isNaN)`()` function.

    ### `static``read only`[`NaN`](#NaN)`:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    *Available on js, lua*
- name: Math.NEGATIVE_INFINITY
  id: math#NEGATIVE_INFINITY
  summary: A special Float constant which denotes negative infinity
  belongs_to: Math
  description: |-
    ### `static``read only`[`NEGATIVE_INFINITY`](#NEGATIVE_INFINITY)`:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")` = cs.system.Double.NegativeInfinity`

    *Available on cs, php, neko, cpp, macro, java, python, hl, flash*

    A special [`Float`](float) constant which denotes negative infinity.

    For example, this is the result of `-1.0 / 0.0`.

    Operations with `NEGATIVE_INFINITY` as an operand may result in `NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

    If this constant is converted to an [`Int`](int), e.g. through [`Std.int`](std#int)`()`, the result is unspecified.

    ### `static``read only`[`NEGATIVE_INFINITY`](#NEGATIVE_INFINITY)`:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    *Available on js, lua*
- name: Math.PI
  id: math#PI
  summary: Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π. PI is approximately 3.141592653589793
  belongs_to: Math
  description: |-
    ### `static``read only`[`PI`](#PI)`:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")` = cs.system.Math.PI`

    *Available on cs, php, js, neko, cpp, macro, java, python, hl, flash*

    Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π. `PI` is approximately `3.141592653589793`.

    ### `static``read only`[`PI`](#PI)`:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    *Available on lua*
- name: Math.POSITIVE_INFINITY
  id: math#POSITIVE_INFINITY
  summary: A special Float constant which denotes positive infinity
  belongs_to: Math
  description: |-
    ### `static``read only`[`POSITIVE_INFINITY`](#POSITIVE_INFINITY)`:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")` = cs.system.Double.PositiveInfinity`

    *Available on cs, php, neko, cpp, macro, java, python, hl, flash*

    A special [`Float`](float) constant which denotes positive infinity.

    For example, this is the result of `1.0 / 0.0`.

    Operations with `POSITIVE_INFINITY` as an operand may result in `NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

    If this constant is converted to an [`Int`](int), e.g. through [`Std.int`](std#int)`()`, the result is unspecified.

    ### `static``read only`[`POSITIVE_INFINITY`](#POSITIVE_INFINITY)`:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    *Available on js, lua*

    ## Static methods
- name: Math.pow()
  id: math#pow
  summary: Returns a specified base v raised to the specified power exp
  belongs_to: Math
  description: |-
    ### `static`[`pow`](#pow)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`,``exp:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns a specified base `v` raised to the specified power `exp`.
- name: Math.random()
  id: math#random
  summary: Returns a pseudo-random number which is greater than or equal to 0.0, and less than 1.0
  belongs_to: Math
  description: |-
    ### `static`[`random`](#random)`():`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns a pseudo-random number which is greater than or equal to `0.0`, and less than `1.0`.
- name: Math.round()
  id: math#round
  summary: Rounds v to the nearest integer value
  belongs_to: Math
  description: |-
    ### `static`[`round`](#round)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Int`](int "Int - The standard Int type.")

    Rounds `v` to the nearest integer value.

    Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

    If `v` is outside of the signed [`Int32`](https://api.haxe.org/cs/system/Int32.html#Int32) range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.
- name: Math.sin()
  id: math#sin
  summary: Returns the trigonometric sine of the specified angle v, in radians
  belongs_to: Math
  description: |-
    ### `static`[`sin`](#sin)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the trigonometric sine of the specified angle `v`, in radians.

    If `v` is `NaN` or infinite, the result is `NaN`.
- name: Math.sqrt()
  id: math#sqrt
  summary: Returns the square root of v
  belongs_to: Math
  description: |-
    ### `static`[`sqrt`](#sqrt)`(``v:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns the square root of `v`.

    - If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
    - If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
    - If `v` is `0.0`, the result is `0.0`.

    &nbsp;
- name: Math.tan()
  id: math#tan
  summary: Returns the trigonometric tangent of the specified angle v, in radians
  belongs_to: Math
  description: "### `static`[`tan`](#tan)`(``v:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns the trigonometric tangent of the specified angle `v`, in radians.\n\nIf `v` is `NaN` or infinite, the result is `NaN`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Math.html](https://api.haxe.org/Math.html)"
- name: NotVoid
  id: haxe/notvoid
  summary: This type unifies with anything but Void
  description: "# NotVoid([Dynamic](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\"))\n\npackage [haxe](index)\n\nimport [haxe.Constraints](constraints)\n\n*Available on all platforms*\n\nThis type unifies with anything but [`Void`](../void).\n\nIt is intended to be used as a type parameter constraint. If used as a real type, the underlying type will be [`Dynamic`](../dynamic).\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/NotVoid.html](https://api.haxe.org/haxe/NotVoid.html)"
- name: 'Null'
  id: 'null'
  summary: Null<T> is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets
  description: "# Null\\<T\\>\n\n[no package](index)\n\nfrom T to T\n\n*Available on all platforms*\n\n[`Null`](null)`<T>` is a wrapper that can be used to make the basic types [`Int`](int), [`Float`](float) and [`Bool`](bool) nullable on static targets.\n\nIf null safety is enabled, only types wrapped in [`Null`](null)`<T>` are nullable.\n\nOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document that `null` is an acceptable value for a method argument, return value or variable.\n\nSee also:\n\n- <https://haxe.org/manual/types-nullability.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Null.html](https://api.haxe.org/Null.html)"
- name: PkContext
  id: mbedtls/pkcontext
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# PkContext\n\npackage [mbedtls](index)\n\n*Available on macro*\n\n## Constructor\n\n### [`new`](#new)`()`\n\n## Methods\n\n### [`parse_key`](#parse_key)`(``key:`[`Bytes`](../haxe/io/bytes \"haxe.io.Bytes\")`,`` ``?pwd:`[`String`](../string \"String - The basic String class.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n### [`parse_keyfile`](#parse_keyfile)`(``path:`[`String`](../string \"String - The basic String class.\")`,`` ``?password:`[`String`](../string \"String - The basic String class.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n### [`parse_public_key`](#parse_public_key)`(``key:`[`Bytes`](../haxe/io/bytes \"haxe.io.Bytes\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n### [`parse_public_keyfile`](#parse_public_keyfile)`(``path:`[`String`](../string \"String - The basic String class.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/PkContext.html](https://api.haxe.org/mbedtls/PkContext.html)"
- name: PkContext.parse_key()
  id: mbedtls/pkcontext#parse_key
  summary: null
  belongs_to: PkContext
  description: '### [`parse_key`](#parse_key)`(``key:`[`Bytes`](../haxe/io/bytes "haxe.io.Bytes")`,``?pwd:`[`String`](../string "String - The basic String class.")`):`[`Int`](../int "Int - The standard Int type.")'
- name: PkContext.parse_keyfile()
  id: mbedtls/pkcontext#parse_keyfile
  summary: null
  belongs_to: PkContext
  description: '### [`parse_keyfile`](#parse_keyfile)`(``path:`[`String`](../string "String - The basic String class.")`,``?password:`[`String`](../string "String - The basic String class.")`):`[`Int`](../int "Int - The standard Int type.")'
- name: PkContext.parse_public_key()
  id: mbedtls/pkcontext#parse_public_key
  summary: null
  belongs_to: PkContext
  description: '### [`parse_public_key`](#parse_public_key)`(``key:`[`Bytes`](../haxe/io/bytes "haxe.io.Bytes")`):`[`Int`](../int "Int - The standard Int type.")'
- name: PkContext.parse_public_keyfile()
  id: mbedtls/pkcontext#parse_public_keyfile
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: PkContext
  description: "### [`parse_public_keyfile`](#parse_public_keyfile)`(``path:`[`String`](../string \"String - The basic String class.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/PkContext.html](https://api.haxe.org/mbedtls/PkContext.html)"
- name: PosInfos
  id: haxe/posinfos
  summary: PosInfos is a magic type which can be used to generate position information into the output for debugging use
  description: "# PosInfos\n\npackage [haxe](index)\n\n*Available on all platforms*\n\n[`PosInfos`](posinfos#PosInfos) is a magic type which can be used to generate position information into the output for debugging use.\n\nIf a function has a final optional argument of this type, i.e. `(..., ?pos:`[`haxe.PosInfos`](posinfos#PosInfos)`)`, each call to that function which does not assign a value to that argument has its position added as call argument.\n\nThis can be used to track positions of calls in e.g. a unit testing framework.\n\n## Fields\n\n### [`methodName`](#methodName)`:`[`String`](../string \"String - The basic String class.\")\n\n### [`lineNumber`](#lineNumber)`:`[`Int`](../int \"Int - The standard Int type.\")\n\n### [`fileName`](#fileName)`:`[`String`](../string \"String - The basic String class.\")\n\n### `optional`[`customParams`](#customParams)`:`[`Null`](../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../array \"Array\")`<`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\n### [`className`](#className)`:`[`String`](../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/PosInfos.html](https://api.haxe.org/haxe/PosInfos.html)"
- name: PosInfos.className
  id: haxe/posinfos#className
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: PosInfos
  description: "### [`className`](#className)`:`[`String`](../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/PosInfos.html](https://api.haxe.org/haxe/PosInfos.html)"
- name: PosInfos.customParams
  id: haxe/posinfos#customParams
  summary: null
  belongs_to: PosInfos
  description: '### `optional`[`customParams`](#customParams)`:`[`Null`](../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Array`](../array "Array")`<`[`Dynamic`](../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>`'
- name: PosInfos.fileName
  id: haxe/posinfos#fileName
  summary: null
  belongs_to: PosInfos
  description: '### [`fileName`](#fileName)`:`[`String`](../string "String - The basic String class.")'
- name: PosInfos.lineNumber
  id: haxe/posinfos#lineNumber
  summary: null
  belongs_to: PosInfos
  description: '### [`lineNumber`](#lineNumber)`:`[`Int`](../int "Int - The standard Int type.")'
- name: PosInfos.methodName
  id: haxe/posinfos#methodName
  summary: null
  belongs_to: PosInfos
  description: '### [`methodName`](#methodName)`:`[`String`](../string "String - The basic String class.")'
- name: Reflect
  id: reflect
  summary: The Reflect API is a way to manipulate values dynamically through an abstract interface in an untyped manner
  description: "# Reflect\n\n[no package](index)\n\n*Available on all platforms*\n\nThe Reflect API is a way to manipulate values dynamically through an abstract interface in an untyped manner. Use with care.\n\nSee also:\n\n- <https://haxe.org/manual/std-reflection.html>\n\n## Static methods\n\n### `static`[`callMethod`](#callMethod)`(``o:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``func:`[`Function`](haxe/function \"haxe.Function - This type unifies with any function type.\")`,`` ``args:`[`Array`](array \"Array\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>``):`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\nCall a method `func` with the given arguments `args`.\n\nThe object `o` is ignored in most cases. It serves as the `this`-context in the following situations:\n\n- (neko) Allows switching the context to `o` in all cases.\n- (macro) Same as neko for Haxe 3. No context switching in Haxe 4.\n- (js, lua) Require the `o` argument if `func` does not, but should have a context. This can occur by accessing a function field natively, e.g. through [`Reflect.field`](reflect#field) or by using `(object : `[`Dynamic`](dynamic)`).field`. However, if `func` has a context, `o` is ignored like on other targets.\n\n### `static`[`compare`](#compare)`<``T``>(``a:``T``,`` ``b:``T``):`[`Int`](int \"Int - The standard Int type.\")\n\nCompares `a` and `b`.\n\nIf `a` is less than `b`, the result is negative. If `b` is less than `a`, the result is positive. If `a` and `b` are equal, the result is 0.\n\nThis function is only defined if `a` and `b` are of the same type.\n\nIf that type is a function, the result is unspecified and [`Reflect.compareMethods`](reflect#compareMethods) should be used instead.\n\nFor all other types, the result is 0 if `a` and `b` are equal. If they are not equal, the result depends on the type and is negative if:\n\n- Numeric types: a is less than b\n- String: a is lexicographically less than b\n- Other: unspecified\n\nIf `a` and `b` are null, the result is 0. If only one of them is null, the result is unspecified.\n\n### `static`[`compareMethods`](#compareMethods)`(``f1:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``f2:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nCompares the functions `f1` and `f2`.\n\nIf `f1` or `f2` are null, the result is false. If `f1` or `f2` are not functions, the result is unspecified.\n\nOtherwise the result is true if `f1` and the `f2` are physically equal, false otherwise.\n\nIf `f1` or `f2` are member method closures, the result is true if they are closures of the same method on the same object value, false otherwise.\n\n### `static`[`copy`](#copy)`<``T``>(``o:`[`Null`](null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>``):`[`Null`](null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<``T``>`\n\nCopies the fields of structure `o`.\n\nThis is only guaranteed to work on anonymous structures.\n\nIf `o` is null, the result is `null`.\n\n### `static`[`deleteField`](#deleteField)`(``o:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``field:`[`String`](string \"String - The basic String class.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nRemoves the field named `field` from structure `o`.\n\nThis method is only guaranteed to work on anonymous structures.\n\nIf `o` or `field` are null, the result is unspecified.\n\n### `static`[`field`](#field)`(``o:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``field:`[`String`](string \"String - The basic String class.\")`):`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\nReturns the value of the field named `field` on object `o`.\n\nIf `o` is not an object or has no field named `field`, the result is null.\n\nIf the field is defined as a property, its accessors are ignored. Refer to [`Reflect.getProperty`](reflect#getProperty) for a function supporting property accessors.\n\nIf `field` is null, the result is unspecified.\n\n### `static`[`fields`](#fields)`(``o:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Array`](array \"Array\")`<`[`String`](string \"String - The basic String class.\")`>`\n\nReturns the fields of structure `o`.\n\nThis method is only guaranteed to work on anonymous structures. Refer to [`Type.getInstanceFields`](type#getInstanceFields) for a function supporting class instances.\n\nIf `o` is null, the result is unspecified.\n\n### `static`[`getProperty`](#getProperty)`(``o:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``field:`[`String`](string \"String - The basic String class.\")`):`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\nReturns the value of the field named `field` on object `o`, taking property getter functions into account.\n\nIf the field is not a property, this function behaves like [`Reflect.field`](reflect#field), but might be slower.\n\nIf `o` or `field` are null, the result is unspecified.\n\n### `static`[`hasField`](#hasField)`(``o:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``field:`[`String`](string \"String - The basic String class.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if structure `o` has a field named `field`.\n\nThis is only guaranteed to work for anonymous structures. Refer to [`Type.getInstanceFields`](type#getInstanceFields) for a function supporting class instances.\n\nIf `o` or `field` are null, the result is unspecified.\n\n### `static`[`isEnumValue`](#isEnumValue)`(``v:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `v` is an enum value.\n\nThe result is true if `v` is of type EnumValue, i.e. an enum constructor.\n\nOtherwise, including if `v` is null, the result is false.\n\n### `static`[`isFunction`](#isFunction)`(``f:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns true if `f` is a function, false otherwise.\n\nIf `f` is null, the result is false.\n\n### `static`[`isObject`](#isObject)`(``v:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `v` is an object.\n\nThe result is true if `v` is one of the following:\n\n- class instance\n- structure\n- [`Class`](class)`<T>`\n- [`Enum`](enum)`<T>`\n\nOtherwise, including if `v` is null, the result is false.\n\n### `static`[`makeVarArgs`](#makeVarArgs)`(``f:`[`Array`](array \"Array\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`> ‑> `[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\n### `static`[`makeVarArgs`](#makeVarArgs)`(``f:`[`Array`](array \"Array\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`> ‑> `[`Void`](void \"Void - The standard Void type.\")`):`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\nTransform a function taking an array of arguments into a function that can be called with any number of arguments.\n\n### `static`[`setField`](#setField)`(``o:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``field:`[`String`](string \"String - The basic String class.\")`,`` ``value:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Void`](void \"Void - The standard Void type.\")\n\nSets the field named `field` of object `o` to value `value`.\n\nIf `o` has no field named `field`, this function is only guaranteed to work for anonymous structures.\n\nIf `o` or `field` are null, the result is unspecified.\n\n### `static`[`setProperty`](#setProperty)`(``o:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``field:`[`String`](string \"String - The basic String class.\")`,`` ``value:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Void`](void \"Void - The standard Void type.\")\n\nSets the field named `field` of object `o` to value `value`, taking property setter functions into account.\n\nIf the field is not a property, this function behaves like [`Reflect.setField`](reflect#setField), but might be slower.\n\nIf `field` is null, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Reflect.html](https://api.haxe.org/Reflect.html)"
- name: Reflect.callMethod()
  id: reflect#callMethod
  summary: Call a method func with the given arguments args
  belongs_to: Reflect
  description: |-
    ### `static`[`callMethod`](#callMethod)`(``o:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`,``func:`[`Function`](haxe/function "haxe.Function - This type unifies with any function type.")`,``args:`[`Array`](array "Array")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>``):`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")

    Call a method `func` with the given arguments `args`.

    The object `o` is ignored in most cases. It serves as the `this`-context in the following situations:

    - (neko) Allows switching the context to `o` in all cases.
    - (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
    - (js, lua) Require the `o` argument if `func` does not, but should have a context. This can occur by accessing a function field natively, e.g. through [`Reflect.field`](reflect#field) or by using `(object : `[`Dynamic`](dynamic)`).field`. However, if `func` has a context, `o` is ignored like on other targets.
- name: Reflect.compare()
  id: reflect#compare
  summary: Compares a and b
  belongs_to: Reflect
  description: |-
    ### `static`[`compare`](#compare)`<``T``>(``a:``T``,``b:``T``):`[`Int`](int "Int - The standard Int type.")

    Compares `a` and `b`.

    If `a` is less than `b`, the result is negative. If `b` is less than `a`, the result is positive. If `a` and `b` are equal, the result is 0.

    This function is only defined if `a` and `b` are of the same type.

    If that type is a function, the result is unspecified and [`Reflect.compareMethods`](reflect#compareMethods) should be used instead.

    For all other types, the result is 0 if `a` and `b` are equal. If they are not equal, the result depends on the type and is negative if:

    - Numeric types: a is less than b
    - String: a is lexicographically less than b
    - Other: unspecified

    If `a` and `b` are null, the result is 0. If only one of them is null, the result is unspecified.
- name: Reflect.compareMethods()
  id: reflect#compareMethods
  summary: Compares the functions f1 and f2
  belongs_to: Reflect
  description: |-
    ### `static`[`compareMethods`](#compareMethods)`(``f1:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`,``f2:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Compares the functions `f1` and `f2`.

    If `f1` or `f2` are null, the result is false. If `f1` or `f2` are not functions, the result is unspecified.

    Otherwise the result is true if `f1` and the `f2` are physically equal, false otherwise.

    If `f1` or `f2` are member method closures, the result is true if they are closures of the same method on the same object value, false otherwise.
- name: Reflect.copy()
  id: reflect#copy
  summary: Copies the fields of structure o
  belongs_to: Reflect
  description: |-
    ### `static`[`copy`](#copy)`<``T``>(``o:`[`Null`](null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>``):`[`Null`](null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<``T``>`

    Copies the fields of structure `o`.

    This is only guaranteed to work on anonymous structures.

    If `o` is null, the result is `null`.
- name: Reflect.deleteField()
  id: reflect#deleteField
  summary: Removes the field named field from structure o
  belongs_to: Reflect
  description: |-
    ### `static`[`deleteField`](#deleteField)`(``o:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`,``field:`[`String`](string "String - The basic String class.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Removes the field named `field` from structure `o`.

    This method is only guaranteed to work on anonymous structures.

    If `o` or `field` are null, the result is unspecified.
- name: Reflect.field()
  id: reflect#field
  summary: Returns the value of the field named field on object o
  belongs_to: Reflect
  description: |-
    ### `static`[`field`](#field)`(``o:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`,``field:`[`String`](string "String - The basic String class.")`):`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")

    Returns the value of the field named `field` on object `o`.

    If `o` is not an object or has no field named `field`, the result is null.

    If the field is defined as a property, its accessors are ignored. Refer to [`Reflect.getProperty`](reflect#getProperty) for a function supporting property accessors.

    If `field` is null, the result is unspecified.
- name: Reflect.fields()
  id: reflect#fields
  summary: Returns the fields of structure o
  belongs_to: Reflect
  description: |-
    ### `static`[`fields`](#fields)`(``o:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Array`](array "Array")`<`[`String`](string "String - The basic String class.")`>`

    Returns the fields of structure `o`.

    This method is only guaranteed to work on anonymous structures. Refer to [`Type.getInstanceFields`](type#getInstanceFields) for a function supporting class instances.

    If `o` is null, the result is unspecified.
- name: Reflect.getProperty()
  id: reflect#getProperty
  summary: Returns the value of the field named field on object o, taking property getter functions into account
  belongs_to: Reflect
  description: |-
    ### `static`[`getProperty`](#getProperty)`(``o:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`,``field:`[`String`](string "String - The basic String class.")`):`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")

    Returns the value of the field named `field` on object `o`, taking property getter functions into account.

    If the field is not a property, this function behaves like [`Reflect.field`](reflect#field), but might be slower.

    If `o` or `field` are null, the result is unspecified.
- name: Reflect.hasField()
  id: reflect#hasField
  summary: Tells if structure o has a field named field
  belongs_to: Reflect
  description: |-
    ### `static`[`hasField`](#hasField)`(``o:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`,``field:`[`String`](string "String - The basic String class.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if structure `o` has a field named `field`.

    This is only guaranteed to work for anonymous structures. Refer to [`Type.getInstanceFields`](type#getInstanceFields) for a function supporting class instances.

    If `o` or `field` are null, the result is unspecified.
- name: Reflect.isEnumValue()
  id: reflect#isEnumValue
  summary: Tells if v is an enum value
  belongs_to: Reflect
  description: |-
    ### `static`[`isEnumValue`](#isEnumValue)`(``v:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if `v` is an enum value.

    The result is true if `v` is of type EnumValue, i.e. an enum constructor.

    Otherwise, including if `v` is null, the result is false.
- name: Reflect.isFunction()
  id: reflect#isFunction
  summary: Returns true if f is a function, false otherwise
  belongs_to: Reflect
  description: |-
    ### `static`[`isFunction`](#isFunction)`(``f:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Returns true if `f` is a function, false otherwise.

    If `f` is null, the result is false.
- name: Reflect.isObject()
  id: reflect#isObject
  summary: Tells if v is an object
  belongs_to: Reflect
  description: |-
    ### `static`[`isObject`](#isObject)`(``v:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if `v` is an object.

    The result is true if `v` is one of the following:

    - class instance
    - structure
    - [`Class`](class)`<T>`
    - [`Enum`](enum)`<T>`

    Otherwise, including if `v` is null, the result is false.
- name: Reflect.makeVarArgs()
  id: reflect#makeVarArgs
  summary: Transform a function taking an array of arguments into a function that can be called with any number of arguments
  belongs_to: Reflect
  description: |-
    ### `static`[`makeVarArgs`](#makeVarArgs)`(``f:`[`Array`](array "Array")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`> ‑> `[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")

    ### `static`[`makeVarArgs`](#makeVarArgs)`(``f:`[`Array`](array "Array")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`> ‑> `[`Void`](void "Void - The standard Void type.")`):`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")

    Transform a function taking an array of arguments into a function that can be called with any number of arguments.
- name: Reflect.setField()
  id: reflect#setField
  summary: Sets the field named field of object o to value value
  belongs_to: Reflect
  description: |-
    ### `static`[`setField`](#setField)`(``o:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`,``field:`[`String`](string "String - The basic String class.")`,``value:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Void`](void "Void - The standard Void type.")

    Sets the field named `field` of object `o` to value `value`.

    If `o` has no field named `field`, this function is only guaranteed to work for anonymous structures.

    If `o` or `field` are null, the result is unspecified.
- name: Reflect.setProperty()
  id: reflect#setProperty
  summary: Sets the field named field of object o to value value, taking property setter functions into account
  belongs_to: Reflect
  description: "### `static`[`setProperty`](#setProperty)`(``o:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,``field:`[`String`](string \"String - The basic String class.\")`,``value:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Void`](void \"Void - The standard Void type.\")\n\nSets the field named `field` of object `o` to value `value`, taking property setter functions into account.\n\nIf the field is not a property, this function behaves like [`Reflect.setField`](reflect#setField), but might be slower.\n\nIf `field` is null, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Reflect.html](https://api.haxe.org/Reflect.html)"
- name: Resource
  id: haxe/resource
  summary: Resource can be used to access resources that were added through the --resource file@name command line parameter
  description: "# Resource\n\npackage [haxe](index)\n\n*Available on all platforms*\n\nResource can be used to access resources that were added through the `--resource file@name` command line parameter.\n\nDepending on their type they can be obtained as [`String`](../string) through `getString(name)`, or as binary data through `getBytes(name)`.\n\nA list of all available resource names can be obtained from `listNames()`.\n\n## Static methods\n\n### `static`[`getBytes`](#getBytes)`(``name:`[`String`](../string \"String - The basic String class.\")`):`[`Bytes`](io/bytes \"haxe.io.Bytes\")\n\nRetrieves the resource identified by `name` as an instance of haxe.io.Bytes.\n\nIf `name` does not match any resource name, `null` is returned.\n\n### `static`[`getString`](#getString)`(``name:`[`String`](../string \"String - The basic String class.\")`):`[`String`](../string \"String - The basic String class.\")\n\nRetrieves the resource identified by `name` as a [`String`](../string).\n\nIf `name` does not match any resource name, `null` is returned.\n\n### `static`[`listNames`](#listNames)`():`[`Array`](../array \"Array\")`<`[`String`](../string \"String - The basic String class.\")`>`\n\nLists all available resource names. The resource name is the name part of the `--resource file@name` command line parameter.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Resource.html](https://api.haxe.org/haxe/Resource.html)"
- name: Resource.getBytes()
  id: haxe/resource#getBytes
  summary: Retrieves the resource identified by name as an instance of haxe.io.Bytes
  belongs_to: Resource
  description: |-
    ### `static`[`getBytes`](#getBytes)`(``name:`[`String`](../string "String - The basic String class.")`):`[`Bytes`](io/bytes "haxe.io.Bytes")

    Retrieves the resource identified by `name` as an instance of haxe.io.Bytes.

    If `name` does not match any resource name, `null` is returned.
- name: Resource.getString()
  id: haxe/resource#getString
  summary: Retrieves the resource identified by name as a String
  belongs_to: Resource
  description: |-
    ### `static`[`getString`](#getString)`(``name:`[`String`](../string "String - The basic String class.")`):`[`String`](../string "String - The basic String class.")

    Retrieves the resource identified by `name` as a [`String`](../string).

    If `name` does not match any resource name, `null` is returned.
- name: Resource.listNames()
  id: haxe/resource#listNames
  summary: Lists all available resource names
  belongs_to: Resource
  description: "### `static`[`listNames`](#listNames)`():`[`Array`](../array \"Array\")`<`[`String`](../string \"String - The basic String class.\")`>`\n\nLists all available resource names. The resource name is the name part of the `--resource file@name` command line parameter.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Resource.html](https://api.haxe.org/haxe/Resource.html)"
- name: rtti.Abstractdef
  id: haxe/rtti/abstractdef
  summary: The abstract type runtime information
  description: "# Abstractdef\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nThe abstract type runtime information.\n\nSee also:\n\n- <https://haxe.org/manual/cr-rtti-structure.html#abstract-type-information>\n\n## Fields\n\n### [`to`](#to)`:`[`Array`](../../array \"Array\")`<{t:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`, field:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>}>`\n\n### [`platforms`](#platforms)`:`[`Platforms`](platforms \"haxe.rtti.Platforms - A list of strings representing the targets where the type is available.\")\n\nA list of strings representing the targets where the type is available.\n\n### [`path`](#path)`:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")\n\nThe type path of the type.\n\n### [`params`](#params)`:`[`TypeParams`](typeparams \"haxe.rtti.TypeParams - An array of strings representing the names of the type parameters the type has.\")\n\nAn array of strings representing the names of the type parameters the type has.\n\n### [`module`](#module)`:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")\n\nThe type path of the module containing the type.\n\n### [`meta`](#meta)`:`[`MetaData`](metadata \"haxe.rtti.MetaData - The list of runtime metadata.\")\n\nThe \\[metadata\\](https://haxe.org/manual/lf-metadata.html) the type was annotated with.\n\n### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is \\[\\`private\\`\\](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).\n\n### [`impl`](#impl)`:`[`Classdef`](classdef \"haxe.rtti.Classdef - The runtime class definition information.\")\n\n### [`from`](#from)`:`[`Array`](../../array \"Array\")`<{t:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`, field:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>}>`\n\n### [`file`](#file)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe full slash path of the .hx file containing the type. This might be \\`null\\` in case there is no such file, e.g. if the type is defined through a macro.\n\n### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe documentation of the type. This information is only available if the compiler flag \\`-D use_rtti_doc\\` was in place. Otherwise, or if the constructor has no documentation, the value is \\`null\\`.\n\n### [`athis`](#athis)`:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Abstractdef.html](https://api.haxe.org/haxe/rtti/Abstractdef.html)"
- name: rtti.Abstractdef.athis
  id: haxe/rtti/abstractdef#athis
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: rtti.Abstractdef
  description: "### [`athis`](#athis)`:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Abstractdef.html](https://api.haxe.org/haxe/rtti/Abstractdef.html)"
- name: rtti.Abstractdef.doc
  id: haxe/rtti/abstractdef#doc
  summary: The documentation of the type
  belongs_to: rtti.Abstractdef
  description: |-
    ### [`doc`](#doc)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The documentation of the type. This information is only available if the compiler flag \`-D use_rtti_doc\` was in place. Otherwise, or if the constructor has no documentation, the value is \`null\`.
- name: rtti.Abstractdef.file
  id: haxe/rtti/abstractdef#file
  summary: The full slash path of the .hx file containing the type
  belongs_to: rtti.Abstractdef
  description: |-
    ### [`file`](#file)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The full slash path of the .hx file containing the type. This might be \`null\` in case there is no such file, e.g. if the type is defined through a macro.
- name: rtti.Abstractdef.from
  id: haxe/rtti/abstractdef#from
  summary: null
  belongs_to: rtti.Abstractdef
  description: '### [`from`](#from)`:`[`Array`](../../array "Array")`<{t:`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")`, field:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>}>`'
- name: rtti.Abstractdef.impl
  id: haxe/rtti/abstractdef#impl
  summary: null
  belongs_to: rtti.Abstractdef
  description: '### [`impl`](#impl)`:`[`Classdef`](classdef "haxe.rtti.Classdef - The runtime class definition information.")'
- name: rtti.Abstractdef.isPrivate
  id: haxe/rtti/abstractdef#isPrivate
  summary: Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type)
  belongs_to: rtti.Abstractdef
  description: |-
    ### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is \[\`private\`\](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).
- name: rtti.Abstractdef.meta
  id: haxe/rtti/abstractdef#meta
  summary: The [metadata](https://haxe.org/manual/lf-metadata.html) the type was annotated with
  belongs_to: rtti.Abstractdef
  description: |-
    ### [`meta`](#meta)`:`[`MetaData`](metadata "haxe.rtti.MetaData - The list of runtime metadata.")

    The \[metadata\](https://haxe.org/manual/lf-metadata.html) the type was annotated with.
- name: rtti.Abstractdef.module
  id: haxe/rtti/abstractdef#module
  summary: The type path of the module containing the type
  belongs_to: rtti.Abstractdef
  description: |-
    ### [`module`](#module)`:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")

    The type path of the module containing the type.
- name: rtti.Abstractdef.params
  id: haxe/rtti/abstractdef#params
  summary: An array of strings representing the names of the type parameters the type has
  belongs_to: rtti.Abstractdef
  description: |-
    ### [`params`](#params)`:`[`TypeParams`](typeparams "haxe.rtti.TypeParams - An array of strings representing the names of the type parameters the type has.")

    An array of strings representing the names of the type parameters the type has.
- name: rtti.Abstractdef.path
  id: haxe/rtti/abstractdef#path
  summary: The type path of the type
  belongs_to: rtti.Abstractdef
  description: |-
    ### [`path`](#path)`:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")

    The type path of the type.
- name: rtti.Abstractdef.platforms
  id: haxe/rtti/abstractdef#platforms
  summary: A list of strings representing the targets where the type is available
  belongs_to: rtti.Abstractdef
  description: |-
    ### [`platforms`](#platforms)`:`[`Platforms`](platforms "haxe.rtti.Platforms - A list of strings representing the targets where the type is available.")

    A list of strings representing the targets where the type is available.
- name: rtti.Abstractdef.to
  id: haxe/rtti/abstractdef#to
  summary: null
  belongs_to: rtti.Abstractdef
  description: '### [`to`](#to)`:`[`Array`](../../array "Array")`<{t:`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")`, field:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>}>`'
- name: rtti.Classdef
  id: haxe/rtti/classdef
  summary: The runtime class definition information
  description: "# Classdef\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nThe runtime class definition information.\n\n## Fields\n\n### [`tdynamic`](#tdynamic)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`>`\n\nThe type which is dynamically implemented by the class or \\`null\\` if no such type exists.\n\n### [`superClass`](#superClass)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`PathParams`](pathparams \"haxe.rtti.PathParams - The type parameters in the runtime type information.\")`>`\n\nThe class' parent class defined by its type path and list of type parameters.\n\n### [`statics`](#statics)`:`[`Array`](../../array \"Array\")`<`[`ClassField`](classfield \"haxe.rtti.ClassField - The runtime class field information.\")`>`\n\nThe list of static class fields.\n\n### [`platforms`](#platforms)`:`[`Platforms`](platforms \"haxe.rtti.Platforms - A list of strings representing the targets where the type is available.\")\n\nA list of strings representing the targets where the type is available.\n\n### [`path`](#path)`:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")\n\nThe type path of the type.\n\n### [`params`](#params)`:`[`TypeParams`](typeparams \"haxe.rtti.TypeParams - An array of strings representing the names of the type parameters the type has.\")\n\nAn array of strings representing the names of the type parameters the type has.\n\n### [`module`](#module)`:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")\n\nThe type path of the module containing the type.\n\n### [`meta`](#meta)`:`[`MetaData`](metadata \"haxe.rtti.MetaData - The list of runtime metadata.\")\n\nThe \\[metadata\\](https://haxe.org/manual/lf-metadata.html) the type was annotated with.\n\n### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is \\[\\`private\\`\\](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).\n\n### [`isInterface`](#isInterface)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the class is actually an \\[interface\\](https://haxe.org/manual/types-interfaces.html).\n\n### [`isFinal`](#isFinal)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the class is \\`final\\`.\n\n### [`isExtern`](#isExtern)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the class is \\[extern\\](https://haxe.org/manual/lf-externs.html).\n\n### [`interfaces`](#interfaces)`:`[`Array`](../../array \"Array\")`<`[`PathParams`](pathparams \"haxe.rtti.PathParams - The type parameters in the runtime type information.\")`>`\n\nThe list of interfaces defined by their type path and list of type parameters.\n\n### [`file`](#file)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe full slash path of the .hx file containing the type. This might be \\`null\\` in case there is no such file, e.g. if the type is defined through a macro.\n\n### [`fields`](#fields)`:`[`Array`](../../array \"Array\")`<`[`ClassField`](classfield \"haxe.rtti.ClassField - The runtime class field information.\")`>`\n\nThe list of member \\[class fields\\](https://haxe.org/manual/class-field.html).\n\n### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe documentation of the type. This information is only available if the compiler flag \\`-D use_rtti_doc\\` was in place. Otherwise, or if the constructor has no documentation, the value is \\`null\\`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Classdef.html](https://api.haxe.org/haxe/rtti/Classdef.html)"
- name: rtti.Classdef.doc
  id: haxe/rtti/classdef#doc
  summary: The documentation of the type
  belongs_to: rtti.Classdef
  description: "### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe documentation of the type. This information is only available if the compiler flag \\`-D use_rtti_doc\\` was in place. Otherwise, or if the constructor has no documentation, the value is \\`null\\`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Classdef.html](https://api.haxe.org/haxe/rtti/Classdef.html)"
- name: rtti.Classdef.fields
  id: haxe/rtti/classdef#fields
  summary: The list of member [class fields](https://haxe.org/manual/class-field.html)
  belongs_to: rtti.Classdef
  description: |-
    ### [`fields`](#fields)`:`[`Array`](../../array "Array")`<`[`ClassField`](classfield "haxe.rtti.ClassField - The runtime class field information.")`>`

    The list of member \[class fields\](https://haxe.org/manual/class-field.html).
- name: rtti.Classdef.file
  id: haxe/rtti/classdef#file
  summary: The full slash path of the .hx file containing the type
  belongs_to: rtti.Classdef
  description: |-
    ### [`file`](#file)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The full slash path of the .hx file containing the type. This might be \`null\` in case there is no such file, e.g. if the type is defined through a macro.
- name: rtti.Classdef.interfaces
  id: haxe/rtti/classdef#interfaces
  summary: The list of interfaces defined by their type path and list of type parameters
  belongs_to: rtti.Classdef
  description: |-
    ### [`interfaces`](#interfaces)`:`[`Array`](../../array "Array")`<`[`PathParams`](pathparams "haxe.rtti.PathParams - The type parameters in the runtime type information.")`>`

    The list of interfaces defined by their type path and list of type parameters.
- name: rtti.Classdef.isExtern
  id: haxe/rtti/classdef#isExtern
  summary: Whether or not the class is [extern](https://haxe.org/manual/lf-externs.html)
  belongs_to: rtti.Classdef
  description: |-
    ### [`isExtern`](#isExtern)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the class is \[extern\](https://haxe.org/manual/lf-externs.html).
- name: rtti.Classdef.isFinal
  id: haxe/rtti/classdef#isFinal
  summary: null
  belongs_to: rtti.Classdef
  description: |-
    ### [`isFinal`](#isFinal)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the class is \`final\`.
- name: rtti.Classdef.isInterface
  id: haxe/rtti/classdef#isInterface
  summary: Whether or not the class is actually an [interface](https://haxe.org/manual/types-interfaces.html)
  belongs_to: rtti.Classdef
  description: |-
    ### [`isInterface`](#isInterface)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the class is actually an \[interface\](https://haxe.org/manual/types-interfaces.html).
- name: rtti.Classdef.isPrivate
  id: haxe/rtti/classdef#isPrivate
  summary: Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type)
  belongs_to: rtti.Classdef
  description: |-
    ### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is \[\`private\`\](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).
- name: rtti.Classdef.meta
  id: haxe/rtti/classdef#meta
  summary: The [metadata](https://haxe.org/manual/lf-metadata.html) the type was annotated with
  belongs_to: rtti.Classdef
  description: |-
    ### [`meta`](#meta)`:`[`MetaData`](metadata "haxe.rtti.MetaData - The list of runtime metadata.")

    The \[metadata\](https://haxe.org/manual/lf-metadata.html) the type was annotated with.
- name: rtti.Classdef.module
  id: haxe/rtti/classdef#module
  summary: The type path of the module containing the type
  belongs_to: rtti.Classdef
  description: |-
    ### [`module`](#module)`:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")

    The type path of the module containing the type.
- name: rtti.Classdef.params
  id: haxe/rtti/classdef#params
  summary: An array of strings representing the names of the type parameters the type has
  belongs_to: rtti.Classdef
  description: |-
    ### [`params`](#params)`:`[`TypeParams`](typeparams "haxe.rtti.TypeParams - An array of strings representing the names of the type parameters the type has.")

    An array of strings representing the names of the type parameters the type has.
- name: rtti.Classdef.path
  id: haxe/rtti/classdef#path
  summary: The type path of the type
  belongs_to: rtti.Classdef
  description: |-
    ### [`path`](#path)`:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")

    The type path of the type.
- name: rtti.Classdef.platforms
  id: haxe/rtti/classdef#platforms
  summary: A list of strings representing the targets where the type is available
  belongs_to: rtti.Classdef
  description: |-
    ### [`platforms`](#platforms)`:`[`Platforms`](platforms "haxe.rtti.Platforms - A list of strings representing the targets where the type is available.")

    A list of strings representing the targets where the type is available.
- name: rtti.Classdef.statics
  id: haxe/rtti/classdef#statics
  summary: The list of static class fields
  belongs_to: rtti.Classdef
  description: |-
    ### [`statics`](#statics)`:`[`Array`](../../array "Array")`<`[`ClassField`](classfield "haxe.rtti.ClassField - The runtime class field information.")`>`

    The list of static class fields.
- name: rtti.Classdef.superClass
  id: haxe/rtti/classdef#superClass
  summary: The class' parent class defined by its type path and list of type parameters
  belongs_to: rtti.Classdef
  description: |-
    ### [`superClass`](#superClass)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`PathParams`](pathparams "haxe.rtti.PathParams - The type parameters in the runtime type information.")`>`

    The class' parent class defined by its type path and list of type parameters.
- name: rtti.Classdef.tdynamic
  id: haxe/rtti/classdef#tdynamic
  summary: The type which is dynamically implemented by the class or `null` if no such type exists
  belongs_to: rtti.Classdef
  description: |-
    ### [`tdynamic`](#tdynamic)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")`>`

    The type which is dynamically implemented by the class or \`null\` if no such type exists.
- name: rtti.ClassField
  id: haxe/rtti/classfield
  summary: The runtime class field information
  description: "# ClassField\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nThe runtime class field information.\n\nSee also:\n\n- <https://haxe.org/manual/cr-rtti-structure.html#class-field-information>\n\n## Fields\n\n### [`type`](#type)`:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")\n\nThe type of the field.\n\n### [`set`](#set)`:`[`Rights`](rights \"haxe.rtti.Rights - Represents the runtime rights of a type.\")\n\nThe \\[write access\\](https://haxe.org/manual/class-field-property.html#define-write-access) behavior of the field.\n\n### [`platforms`](#platforms)`:`[`Platforms`](platforms \"haxe.rtti.Platforms - A list of strings representing the targets where the type is available.\")\n\nA list of strings representing the targets where the field is available.\n\n### [`params`](#params)`:`[`TypeParams`](typeparams \"haxe.rtti.TypeParams - An array of strings representing the names of the type parameters the type has.\")\n\nAn array of strings representing the names of the type parameters the field has.\n\n### [`overloads`](#overloads)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<`[`ClassField`](classfield \"haxe.rtti.ClassField - The runtime class field information.\")`>>`\n\nThe list of available overloads for the fields or \\`null\\` if no overloads exists.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the field.\n\n### [`meta`](#meta)`:`[`MetaData`](metadata \"haxe.rtti.MetaData - The list of runtime metadata.\")\n\nThe meta data the field was annotated with.\n\n### [`line`](#line)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>`\n\nThe line number where the field is defined. This information is only available if the field has an expression. Otherwise the value is \\`null\\`.\n\n### [`isPublic`](#isPublic)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the field is \\`public\\`.\n\n### [`isOverride`](#isOverride)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the field overrides another field.\n\n### [`isFinal`](#isFinal)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the field is \\`final\\`.\n\n### [`get`](#get)`:`[`Rights`](rights \"haxe.rtti.Rights - Represents the runtime rights of a type.\")\n\nThe \\[read access\\](https://haxe.org/manual/class-field-property.html#define-read-access) behavior of the field.\n\n### [`expr`](#expr)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe actual expression of the field or \\`null\\` if there is no expression.\n\n### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe documentation of the field. This information is only available if the compiler flag \\`-D use_rtti_doc\\` was in place. Otherwise, or if the field has no documentation, the value is \\`null\\`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/ClassField.html](https://api.haxe.org/haxe/rtti/ClassField.html)"
- name: rtti.ClassField.doc
  id: haxe/rtti/classfield#doc
  summary: The documentation of the field
  belongs_to: rtti.ClassField
  description: "### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe documentation of the field. This information is only available if the compiler flag \\`-D use_rtti_doc\\` was in place. Otherwise, or if the field has no documentation, the value is \\`null\\`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/ClassField.html](https://api.haxe.org/haxe/rtti/ClassField.html)"
- name: rtti.ClassField.expr
  id: haxe/rtti/classfield#expr
  summary: The actual expression of the field or `null` if there is no expression
  belongs_to: rtti.ClassField
  description: |-
    ### [`expr`](#expr)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The actual expression of the field or \`null\` if there is no expression.
- name: rtti.ClassField.get
  id: haxe/rtti/classfield#get
  summary: The [read access](https://haxe.org/manual/class-field-property.html#define-read-access) behavior of the field
  belongs_to: rtti.ClassField
  description: |-
    ### [`get`](#get)`:`[`Rights`](rights "haxe.rtti.Rights - Represents the runtime rights of a type.")

    The \[read access\](https://haxe.org/manual/class-field-property.html#define-read-access) behavior of the field.
- name: rtti.ClassField.isFinal
  id: haxe/rtti/classfield#isFinal
  summary: null
  belongs_to: rtti.ClassField
  description: |-
    ### [`isFinal`](#isFinal)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the field is \`final\`.
- name: rtti.ClassField.isOverride
  id: haxe/rtti/classfield#isOverride
  summary: Whether or not the field overrides another field
  belongs_to: rtti.ClassField
  description: |-
    ### [`isOverride`](#isOverride)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the field overrides another field.
- name: rtti.ClassField.isPublic
  id: haxe/rtti/classfield#isPublic
  summary: null
  belongs_to: rtti.ClassField
  description: |-
    ### [`isPublic`](#isPublic)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the field is \`public\`.
- name: rtti.ClassField.line
  id: haxe/rtti/classfield#line
  summary: The line number where the field is defined
  belongs_to: rtti.ClassField
  description: |-
    ### [`line`](#line)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Int`](../../int "Int - The standard Int type.")`>`

    The line number where the field is defined. This information is only available if the field has an expression. Otherwise the value is \`null\`.
- name: rtti.ClassField.meta
  id: haxe/rtti/classfield#meta
  summary: The meta data the field was annotated with
  belongs_to: rtti.ClassField
  description: |-
    ### [`meta`](#meta)`:`[`MetaData`](metadata "haxe.rtti.MetaData - The list of runtime metadata.")

    The meta data the field was annotated with.
- name: rtti.ClassField.name
  id: haxe/rtti/classfield#name
  summary: The name of the field
  belongs_to: rtti.ClassField
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the field.
- name: rtti.ClassField.overloads
  id: haxe/rtti/classfield#overloads
  summary: The list of available overloads for the fields or `null` if no overloads exists
  belongs_to: rtti.ClassField
  description: |-
    ### [`overloads`](#overloads)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Array`](../../array "Array")`<`[`ClassField`](classfield "haxe.rtti.ClassField - The runtime class field information.")`>>`

    The list of available overloads for the fields or \`null\` if no overloads exists.
- name: rtti.ClassField.params
  id: haxe/rtti/classfield#params
  summary: An array of strings representing the names of the type parameters the field has
  belongs_to: rtti.ClassField
  description: |-
    ### [`params`](#params)`:`[`TypeParams`](typeparams "haxe.rtti.TypeParams - An array of strings representing the names of the type parameters the type has.")

    An array of strings representing the names of the type parameters the field has.
- name: rtti.ClassField.platforms
  id: haxe/rtti/classfield#platforms
  summary: A list of strings representing the targets where the field is available
  belongs_to: rtti.ClassField
  description: |-
    ### [`platforms`](#platforms)`:`[`Platforms`](platforms "haxe.rtti.Platforms - A list of strings representing the targets where the type is available.")

    A list of strings representing the targets where the field is available.
- name: rtti.ClassField.set
  id: haxe/rtti/classfield#set
  summary: The [write access](https://haxe.org/manual/class-field-property.html#define-write-access) behavior of the field
  belongs_to: rtti.ClassField
  description: |-
    ### [`set`](#set)`:`[`Rights`](rights "haxe.rtti.Rights - Represents the runtime rights of a type.")

    The \[write access\](https://haxe.org/manual/class-field-property.html#define-write-access) behavior of the field.
- name: rtti.ClassField.type
  id: haxe/rtti/classfield#type
  summary: The type of the field
  belongs_to: rtti.ClassField
  description: |-
    ### [`type`](#type)`:`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")

    The type of the field.
- name: rtti.CType
  id: haxe/rtti/ctype
  summary: The runtime member types
  description: "# CType\n\npackage [haxe.rtti](index)\n\n*Available on all platforms*\n\nThe runtime member types.\n\n## Values\n\n### `CUnknown`\n\n### `CEnum(name:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")`, params:`[`Array`](../../array \"Array\")`<`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`>)`\n\n### `CClass(name:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")`, params:`[`Array`](../../array \"Array\")`<`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`>)`\n\n### `CTypedef(name:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")`, params:`[`Array`](../../array \"Array\")`<`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`>)`\n\n### `CFunction(args:`[`Array`](../../array \"Array\")`<`[`FunctionArgument`](functionargument \"haxe.rtti.FunctionArgument - The function argument runtime type information.\")`>, ret:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`)`\n\n### `CAnonymous(fields:`[`Array`](../../array \"Array\")`<`[`ClassField`](classfield \"haxe.rtti.ClassField - The runtime class field information.\")`>)`\n\n### `CDynamic(t:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`)`\n\n### `CAbstract(name:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")`, params:`[`Array`](../../array \"Array\")`<`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`>)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/CType.html](https://api.haxe.org/haxe/rtti/CType.html)"
- name: rtti.CType.CAbstract()
  id: haxe/rtti/ctype#CAbstract
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: rtti.CType
  description: "### `CAbstract(name:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")`, params:`[`Array`](../../array \"Array\")`<`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`>)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/CType.html](https://api.haxe.org/haxe/rtti/CType.html)"
- name: rtti.CType.CAnonymous()
  id: haxe/rtti/ctype#CAnonymous
  summary: null
  belongs_to: rtti.CType
  description: '### `CAnonymous(fields:`[`Array`](../../array "Array")`<`[`ClassField`](classfield "haxe.rtti.ClassField - The runtime class field information.")`>)`'
- name: rtti.CType.CClass()
  id: haxe/rtti/ctype#CClass
  summary: null
  belongs_to: rtti.CType
  description: '### `CClass(name:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")`, params:`[`Array`](../../array "Array")`<`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")`>)`'
- name: rtti.CType.CDynamic()
  id: haxe/rtti/ctype#CDynamic
  summary: null
  belongs_to: rtti.CType
  description: '### `CDynamic(t:`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")`)`'
- name: rtti.CType.CEnum()
  id: haxe/rtti/ctype#CEnum
  summary: null
  belongs_to: rtti.CType
  description: '### `CEnum(name:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")`, params:`[`Array`](../../array "Array")`<`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")`>)`'
- name: rtti.CType.CFunction()
  id: haxe/rtti/ctype#CFunction
  summary: null
  belongs_to: rtti.CType
  description: '### `CFunction(args:`[`Array`](../../array "Array")`<`[`FunctionArgument`](functionargument "haxe.rtti.FunctionArgument - The function argument runtime type information.")`>, ret:`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")`)`'
- name: rtti.CType.CTypedef()
  id: haxe/rtti/ctype#CTypedef
  summary: null
  belongs_to: rtti.CType
  description: '### `CTypedef(name:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")`, params:`[`Array`](../../array "Array")`<`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")`>)`'
- name: rtti.CType.CUnknown
  id: haxe/rtti/ctype#CUnknown
  summary: null
  belongs_to: rtti.CType
  description: '### `CUnknown`'
- name: rtti.CTypeTools
  id: haxe/rtti/ctypetools
  summary: The CTypeTools class contains some extra functionalities for handling CType instances
  description: "# CTypeTools\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nThe [`CTypeTools`](ctypetools#CTypeTools) class contains some extra functionalities for handling [`CType`](ctype#CType) instances.\n\n## Static methods\n\n### `static`[`toString`](#toString)`(``t:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nGet the string representation of [`CType`](ctype#CType).\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/CTypeTools.html](https://api.haxe.org/haxe/rtti/CTypeTools.html)"
- name: rtti.CTypeTools.toString()
  id: haxe/rtti/ctypetools#toString
  summary: Get the string representation of CType
  belongs_to: rtti.CTypeTools
  description: "### `static`[`toString`](#toString)`(``t:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`):`[`String`](../../string \"String - The basic String class.\")\n\nGet the string representation of [`CType`](ctype#CType).\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/CTypeTools.html](https://api.haxe.org/haxe/rtti/CTypeTools.html)"
- name: rtti.Enumdef
  id: haxe/rtti/enumdef
  summary: The enum runtime type information
  description: "# Enumdef\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nThe enum runtime type information.\n\nSee also:\n\n- <https://haxe.org/manual/cr-rtti-structure.html#enum-type-information>\n\n## Fields\n\n### [`platforms`](#platforms)`:`[`Platforms`](platforms \"haxe.rtti.Platforms - A list of strings representing the targets where the type is available.\")\n\nA list of strings representing the targets where the type is available.\n\n### [`path`](#path)`:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")\n\nThe type path of the type.\n\n### [`params`](#params)`:`[`TypeParams`](typeparams \"haxe.rtti.TypeParams - An array of strings representing the names of the type parameters the type has.\")\n\nAn array of strings representing the names of the type parameters the type has.\n\n### [`module`](#module)`:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")\n\nThe type path of the module containing the type.\n\n### [`meta`](#meta)`:`[`MetaData`](metadata \"haxe.rtti.MetaData - The list of runtime metadata.\")\n\nThe \\[metadata\\](https://haxe.org/manual/lf-metadata.html) the type was annotated with.\n\n### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is \\[\\`private\\`\\](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).\n\n### [`isExtern`](#isExtern)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the enum is \\[extern\\](https://haxe.org/manual/lf-externs.html).\n\n### [`file`](#file)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe full slash path of the .hx file containing the type. This might be \\`null\\` in case there is no such file, e.g. if the type is defined through a macro.\n\n### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe documentation of the type. This information is only available if the compiler flag \\`-D use_rtti_doc\\` was in place. Otherwise, or if the constructor has no documentation, the value is \\`null\\`.\n\n### [`constructors`](#constructors)`:`[`Array`](../../array \"Array\")`<`[`EnumField`](enumfield \"haxe.rtti.EnumField - The runtime enum constructor information.\")`>`\n\nThe list of enum constructors.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Enumdef.html](https://api.haxe.org/haxe/rtti/Enumdef.html)"
- name: rtti.Enumdef.constructors
  id: haxe/rtti/enumdef#constructors
  summary: The list of enum constructors
  belongs_to: rtti.Enumdef
  description: "### [`constructors`](#constructors)`:`[`Array`](../../array \"Array\")`<`[`EnumField`](enumfield \"haxe.rtti.EnumField - The runtime enum constructor information.\")`>`\n\nThe list of enum constructors.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Enumdef.html](https://api.haxe.org/haxe/rtti/Enumdef.html)"
- name: rtti.Enumdef.doc
  id: haxe/rtti/enumdef#doc
  summary: The documentation of the type
  belongs_to: rtti.Enumdef
  description: |-
    ### [`doc`](#doc)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The documentation of the type. This information is only available if the compiler flag \`-D use_rtti_doc\` was in place. Otherwise, or if the constructor has no documentation, the value is \`null\`.
- name: rtti.Enumdef.file
  id: haxe/rtti/enumdef#file
  summary: The full slash path of the .hx file containing the type
  belongs_to: rtti.Enumdef
  description: |-
    ### [`file`](#file)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The full slash path of the .hx file containing the type. This might be \`null\` in case there is no such file, e.g. if the type is defined through a macro.
- name: rtti.Enumdef.isExtern
  id: haxe/rtti/enumdef#isExtern
  summary: Whether or not the enum is [extern](https://haxe.org/manual/lf-externs.html)
  belongs_to: rtti.Enumdef
  description: |-
    ### [`isExtern`](#isExtern)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the enum is \[extern\](https://haxe.org/manual/lf-externs.html).
- name: rtti.Enumdef.isPrivate
  id: haxe/rtti/enumdef#isPrivate
  summary: Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type)
  belongs_to: rtti.Enumdef
  description: |-
    ### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is \[\`private\`\](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).
- name: rtti.Enumdef.meta
  id: haxe/rtti/enumdef#meta
  summary: The [metadata](https://haxe.org/manual/lf-metadata.html) the type was annotated with
  belongs_to: rtti.Enumdef
  description: |-
    ### [`meta`](#meta)`:`[`MetaData`](metadata "haxe.rtti.MetaData - The list of runtime metadata.")

    The \[metadata\](https://haxe.org/manual/lf-metadata.html) the type was annotated with.
- name: rtti.Enumdef.module
  id: haxe/rtti/enumdef#module
  summary: The type path of the module containing the type
  belongs_to: rtti.Enumdef
  description: |-
    ### [`module`](#module)`:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")

    The type path of the module containing the type.
- name: rtti.Enumdef.params
  id: haxe/rtti/enumdef#params
  summary: An array of strings representing the names of the type parameters the type has
  belongs_to: rtti.Enumdef
  description: |-
    ### [`params`](#params)`:`[`TypeParams`](typeparams "haxe.rtti.TypeParams - An array of strings representing the names of the type parameters the type has.")

    An array of strings representing the names of the type parameters the type has.
- name: rtti.Enumdef.path
  id: haxe/rtti/enumdef#path
  summary: The type path of the type
  belongs_to: rtti.Enumdef
  description: |-
    ### [`path`](#path)`:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")

    The type path of the type.
- name: rtti.Enumdef.platforms
  id: haxe/rtti/enumdef#platforms
  summary: A list of strings representing the targets where the type is available
  belongs_to: rtti.Enumdef
  description: |-
    ### [`platforms`](#platforms)`:`[`Platforms`](platforms "haxe.rtti.Platforms - A list of strings representing the targets where the type is available.")

    A list of strings representing the targets where the type is available.
- name: rtti.EnumField
  id: haxe/rtti/enumfield
  summary: The runtime enum constructor information
  description: "# EnumField\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nThe runtime enum constructor information.\n\nSee also:\n\n- <https://haxe.org/manual/cr-rtti-structure.html#enum-constructor-information>\n\n## Fields\n\n### [`platforms`](#platforms)`:`[`Platforms`](platforms \"haxe.rtti.Platforms - A list of strings representing the targets where the type is available.\")\n\nA list of strings representing the targets where the constructor is available.\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the constructor.\n\n### [`meta`](#meta)`:`[`MetaData`](metadata \"haxe.rtti.MetaData - The list of runtime metadata.\")\n\nThe meta data the constructor was annotated with.\n\n### [`doc`](#doc)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe documentation of the constructor. This information is only available if the compiler flag \\`-D use_rtti_doc\\` was in place. Otherwise, or if the constructor has no documentation, the value is \\`null\\`.\n\n### [`args`](#args)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<{t:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`, opt:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`, name:`[`String`](../../string \"String - The basic String class.\")`}>>`\n\nThe list of arguments the constructor has or \\`null\\` if no arguments are available.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/EnumField.html](https://api.haxe.org/haxe/rtti/EnumField.html)"
- name: rtti.EnumField.args
  id: haxe/rtti/enumfield#args
  summary: The list of arguments the constructor has or `null` if no arguments are available
  belongs_to: rtti.EnumField
  description: "### [`args`](#args)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Array`](../../array \"Array\")`<{t:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`, opt:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`, name:`[`String`](../../string \"String - The basic String class.\")`}>>`\n\nThe list of arguments the constructor has or \\`null\\` if no arguments are available.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/EnumField.html](https://api.haxe.org/haxe/rtti/EnumField.html)"
- name: rtti.EnumField.doc
  id: haxe/rtti/enumfield#doc
  summary: The documentation of the constructor
  belongs_to: rtti.EnumField
  description: |-
    ### [`doc`](#doc)`:`[`String`](../../string "String - The basic String class.")

    The documentation of the constructor. This information is only available if the compiler flag \`-D use_rtti_doc\` was in place. Otherwise, or if the constructor has no documentation, the value is \`null\`.
- name: rtti.EnumField.meta
  id: haxe/rtti/enumfield#meta
  summary: The meta data the constructor was annotated with
  belongs_to: rtti.EnumField
  description: |-
    ### [`meta`](#meta)`:`[`MetaData`](metadata "haxe.rtti.MetaData - The list of runtime metadata.")

    The meta data the constructor was annotated with.
- name: rtti.EnumField.name
  id: haxe/rtti/enumfield#name
  summary: The name of the constructor
  belongs_to: rtti.EnumField
  description: |-
    ### [`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the constructor.
- name: rtti.EnumField.platforms
  id: haxe/rtti/enumfield#platforms
  summary: A list of strings representing the targets where the constructor is available
  belongs_to: rtti.EnumField
  description: |-
    ### [`platforms`](#platforms)`:`[`Platforms`](platforms "haxe.rtti.Platforms - A list of strings representing the targets where the type is available.")

    A list of strings representing the targets where the constructor is available.
- name: rtti.FunctionArgument
  id: haxe/rtti/functionargument
  summary: The function argument runtime type information
  description: "# FunctionArgument\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nThe function argument runtime type information.\n\n## Fields\n\n### `optional`[`value`](#value)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n### [`t`](#t)`:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")\n\n### [`opt`](#opt)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/FunctionArgument.html](https://api.haxe.org/haxe/rtti/FunctionArgument.html)"
- name: rtti.FunctionArgument.name
  id: haxe/rtti/functionargument#name
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: rtti.FunctionArgument
  description: "### [`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/FunctionArgument.html](https://api.haxe.org/haxe/rtti/FunctionArgument.html)"
- name: rtti.FunctionArgument.opt
  id: haxe/rtti/functionargument#opt
  summary: null
  belongs_to: rtti.FunctionArgument
  description: '### [`opt`](#opt)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")'
- name: rtti.FunctionArgument.t
  id: haxe/rtti/functionargument#t
  summary: null
  belongs_to: rtti.FunctionArgument
  description: '### [`t`](#t)`:`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")'
- name: rtti.FunctionArgument.value
  id: haxe/rtti/functionargument#value
  summary: null
  belongs_to: rtti.FunctionArgument
  description: '### `optional`[`value`](#value)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`'
- name: rtti.Meta
  id: haxe/rtti/meta
  summary: An API to access classes and enums metadata at runtime
  description: "# Meta\n\npackage [haxe.rtti](index)\n\n*Available on all platforms*\n\nAn API to access classes and enums metadata at runtime.\n\nSee also:\n\n- <https://haxe.org/manual/cr-rtti.html>\n\n## Static methods\n\n### `static`[`getFields`](#getFields)`(``t:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`<`[`Array`](../../array \"Array\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>>`\n\nReturns the metadata that were declared for the given class fields or enum constructors\n\n### `static`[`getStatics`](#getStatics)`(``t:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`<`[`Array`](../../array \"Array\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>>`\n\nReturns the metadata that were declared for the given class static fields\n\n### `static`[`getType`](#getType)`(``t:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`<`[`Array`](../../array \"Array\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\nReturns the metadata that were declared for the given type (class or enum)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Meta.html](https://api.haxe.org/haxe/rtti/Meta.html)"
- name: rtti.Meta.getFields()
  id: haxe/rtti/meta#getFields
  summary: null
  belongs_to: rtti.Meta
  description: |-
    ### `static`[`getFields`](#getFields)`(``t:`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`<`[`Array`](../../array "Array")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>>`

    Returns the metadata that were declared for the given class fields or enum constructors
- name: rtti.Meta.getStatics()
  id: haxe/rtti/meta#getStatics
  summary: null
  belongs_to: rtti.Meta
  description: |-
    ### `static`[`getStatics`](#getStatics)`(``t:`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`<`[`Array`](../../array "Array")`<`[`Dynamic`](../../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>>>`

    Returns the metadata that were declared for the given class static fields
- name: rtti.Meta.getType()
  id: haxe/rtti/meta#getType
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: rtti.Meta
  description: "### `static`[`getType`](#getType)`(``t:`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`<`[`Array`](../../array \"Array\")`<`[`Dynamic`](../../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>>`\n\nReturns the metadata that were declared for the given type (class or enum)\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Meta.html](https://api.haxe.org/haxe/rtti/Meta.html)"
- name: rtti.MetaData
  id: haxe/rtti/metadata
  summary: The list of runtime metadata
  description: "# MetaData\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nThe list of runtime metadata.\n\n## Alias\n\n*alias for* [`Array`](../../array \"Array\")`<{params:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>, name:`[`String`](../../string \"String - The basic String class.\")`}>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/MetaData.html](https://api.haxe.org/haxe/rtti/MetaData.html)"
- name: rtti.Path
  id: haxe/rtti/path
  summary: The (dot-)path of the runtime type
  description: "# Path\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nThe (dot-)path of the runtime type.\n\n## Alias\n\n*alias for* [`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Path.html](https://api.haxe.org/haxe/rtti/Path.html)"
- name: rtti.PathParams
  id: haxe/rtti/pathparams
  summary: The type parameters in the runtime type information
  description: "# PathParams\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nThe type parameters in the runtime type information.\n\n## Fields\n\n### [`path`](#path)`:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")\n\nThe path of the type.\n\n### [`params`](#params)`:`[`Array`](../../array \"Array\")`<`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`>`\n\nThe array of parameters types.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/PathParams.html](https://api.haxe.org/haxe/rtti/PathParams.html)"
- name: rtti.PathParams.params
  id: haxe/rtti/pathparams#params
  summary: The array of parameters types
  belongs_to: rtti.PathParams
  description: "### [`params`](#params)`:`[`Array`](../../array \"Array\")`<`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`>`\n\nThe array of parameters types.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/PathParams.html](https://api.haxe.org/haxe/rtti/PathParams.html)"
- name: rtti.PathParams.path
  id: haxe/rtti/pathparams#path
  summary: The path of the type
  belongs_to: rtti.PathParams
  description: |-
    ### [`path`](#path)`:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")

    The path of the type.
- name: rtti.Platforms
  id: haxe/rtti/platforms
  summary: A list of strings representing the targets where the type is available
  description: "# Platforms\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nA list of strings representing the targets where the type is available.\n\n## Alias\n\n*alias for* [`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Platforms.html](https://api.haxe.org/haxe/rtti/Platforms.html)"
- name: rtti.Rights
  id: haxe/rtti/rights
  summary: Represents the runtime rights of a type
  description: "# Rights\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nRepresents the runtime rights of a type.\n\n## Values\n\n### `RNormal`\n\n### `RNo`\n\n### `RCall(m:`[`String`](../../string \"String - The basic String class.\")`)`\n\n### `RMethod`\n\n### `RDynamic`\n\n### `RInline`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Rights.html](https://api.haxe.org/haxe/rtti/Rights.html)"
- name: rtti.Rights.RCall()
  id: haxe/rtti/rights#RCall
  summary: null
  belongs_to: rtti.Rights
  description: '### `RCall(m:`[`String`](../../string "String - The basic String class.")`)`'
- name: rtti.Rights.RDynamic
  id: haxe/rtti/rights#RDynamic
  summary: null
  belongs_to: rtti.Rights
  description: '### `RDynamic`'
- name: rtti.Rights.RInline
  id: haxe/rtti/rights#RInline
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: rtti.Rights
  description: "### `RInline`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Rights.html](https://api.haxe.org/haxe/rtti/Rights.html)"
- name: rtti.Rights.RMethod
  id: haxe/rtti/rights#RMethod
  summary: null
  belongs_to: rtti.Rights
  description: '### `RMethod`'
- name: rtti.Rights.RNo
  id: haxe/rtti/rights#RNo
  summary: null
  belongs_to: rtti.Rights
  description: '### `RNo`'
- name: rtti.Rights.RNormal
  id: haxe/rtti/rights#RNormal
  summary: null
  belongs_to: rtti.Rights
  description: '### `RNormal`'
- name: rtti.Rtti
  id: haxe/rtti/rtti
  summary: Rtti is a helper class which supplements the @:rtti metadata
  description: "# Rtti\n\npackage [haxe.rtti](index)\n\n*Available on all platforms*\n\nRtti is a helper class which supplements the `@:rtti` metadata.\n\nSee also:\n\n- <https://haxe.org/manual/cr-rtti.html>\n\n## Static methods\n\n### `static`[`getRtti`](#getRtti)`<``T``>(``c:`[`Class`](../../class \"Class - An abstract type that represents a Class.\")`<``T``>``):`[`Classdef`](classdef \"haxe.rtti.Classdef - The runtime class definition information.\")\n\nReturns the [`haxe.rtti.CType.Classdef`](ctype#Classdef) corresponding to class `c`.\n\nIf `c` has no runtime type information, e.g. because no `@:rtti` was added, an exception of type [`String`](../../string) is thrown.\n\nIf `c` is `null`, the result is unspecified.\n\n### `static`[`hasRtti`](#hasRtti)`<``T``>(``c:`[`Class`](../../class \"Class - An abstract type that represents a Class.\")`<``T``>``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `c` has runtime type information.\n\nIf `c` is `null`, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Rtti.html](https://api.haxe.org/haxe/rtti/Rtti.html)"
- name: rtti.Rtti.getRtti()
  id: haxe/rtti/rtti#getRtti
  summary: Returns the haxe.rtti.CType.Classdef corresponding to class c
  belongs_to: rtti.Rtti
  description: |-
    ### `static`[`getRtti`](#getRtti)`<``T``>(``c:`[`Class`](../../class "Class - An abstract type that represents a Class.")`<``T``>``):`[`Classdef`](classdef "haxe.rtti.Classdef - The runtime class definition information.")

    Returns the [`haxe.rtti.CType.Classdef`](ctype#Classdef) corresponding to class `c`.

    If `c` has no runtime type information, e.g. because no `@:rtti` was added, an exception of type [`String`](../../string) is thrown.

    If `c` is `null`, the result is unspecified.
- name: rtti.Rtti.hasRtti()
  id: haxe/rtti/rtti#hasRtti
  summary: Tells if c has runtime type information
  belongs_to: rtti.Rtti
  description: "### `static`[`hasRtti`](#hasRtti)`<``T``>(``c:`[`Class`](../../class \"Class - An abstract type that represents a Class.\")`<``T``>``):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `c` has runtime type information.\n\nIf `c` is `null`, the result is unspecified.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Rtti.html](https://api.haxe.org/haxe/rtti/Rtti.html)"
- name: rtti.TypeApi
  id: haxe/rtti/typeapi
  summary: Contains type and equality checks functionalities for RTTI
  description: "# TypeApi\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nContains type and equality checks functionalities for RTTI.\n\n## Static methods\n\n### `static`[`constructorEq`](#constructorEq)`(``c1:`[`EnumField`](enumfield \"haxe.rtti.EnumField - The runtime enum constructor information.\")`,`` ``c2:`[`EnumField`](enumfield \"haxe.rtti.EnumField - The runtime enum constructor information.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nUnlike `c1 == c2`, this function performs a deep equality check on the arguments of the enum constructors, if exists.\n\nIf `c1` or `c2` are `null`, the result is unspecified.\n\n### `static`[`fieldEq`](#fieldEq)`(``f1:`[`ClassField`](classfield \"haxe.rtti.ClassField - The runtime class field information.\")`,`` ``f2:`[`ClassField`](classfield \"haxe.rtti.ClassField - The runtime class field information.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nUnlike `f1 == f2`, this function performs a deep equality check on the given [`ClassField`](classfield#ClassField) instances.\n\nIf `f1` or `f2` are `null`, the result is unspecified.\n\n### `static`[`isVar`](#isVar)`(``t:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns [`true`](../../bool) if the given [`CType`](ctype#CType) is a variable or [`false`](../../bool) if it is a function.\n\n### `static`[`rightsEq`](#rightsEq)`(``r1:`[`Rights`](rights \"haxe.rtti.Rights - Represents the runtime rights of a type.\")`,`` ``r2:`[`Rights`](rights \"haxe.rtti.Rights - Represents the runtime rights of a type.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nUnlike `r1 == r2`, this function performs a deep equality check on the given [`Rights`](rights#Rights) instances.\n\nIf `r1` or `r2` are `null`, the result is unspecified.\n\n### `static`[`typeEq`](#typeEq)`(``t1:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`,`` ``t2:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`):`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nUnlike `t1 == t2`, this function performs a deep equality check on the given [`CType`](ctype#CType) instances.\n\nIf `t1` or `t2` are `null`, the result is unspecified.\n\n### `static`[`typeInfos`](#typeInfos)`(``t:`[`TypeTree`](typetree \"haxe.rtti.TypeTree - The tree types of the runtime type.\")`):`[`TypeInfos`](typeinfos \"haxe.rtti.TypeInfos - The general runtime type information.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/TypeApi.html](https://api.haxe.org/haxe/rtti/TypeApi.html)"
- name: rtti.TypeApi.constructorEq()
  id: haxe/rtti/typeapi#constructorEq
  summary: Unlike c1 == c2, this function performs a deep equality check on the arguments of the enum constructors, if exists
  belongs_to: rtti.TypeApi
  description: |-
    ### `static`[`constructorEq`](#constructorEq)`(``c1:`[`EnumField`](enumfield "haxe.rtti.EnumField - The runtime enum constructor information.")`,``c2:`[`EnumField`](enumfield "haxe.rtti.EnumField - The runtime enum constructor information.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Unlike `c1 == c2`, this function performs a deep equality check on the arguments of the enum constructors, if exists.

    If `c1` or `c2` are `null`, the result is unspecified.
- name: rtti.TypeApi.fieldEq()
  id: haxe/rtti/typeapi#fieldEq
  summary: Unlike f1 == f2, this function performs a deep equality check on the given ClassField instances
  belongs_to: rtti.TypeApi
  description: |-
    ### `static`[`fieldEq`](#fieldEq)`(``f1:`[`ClassField`](classfield "haxe.rtti.ClassField - The runtime class field information.")`,``f2:`[`ClassField`](classfield "haxe.rtti.ClassField - The runtime class field information.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Unlike `f1 == f2`, this function performs a deep equality check on the given [`ClassField`](classfield#ClassField) instances.

    If `f1` or `f2` are `null`, the result is unspecified.
- name: rtti.TypeApi.isVar()
  id: haxe/rtti/typeapi#isVar
  summary: Returns true if the given CType is a variable or false if it is a function
  belongs_to: rtti.TypeApi
  description: |-
    ### `static`[`isVar`](#isVar)`(``t:`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Returns [`true`](../../bool) if the given [`CType`](ctype#CType) is a variable or [`false`](../../bool) if it is a function.
- name: rtti.TypeApi.rightsEq()
  id: haxe/rtti/typeapi#rightsEq
  summary: Unlike r1 == r2, this function performs a deep equality check on the given Rights instances
  belongs_to: rtti.TypeApi
  description: |-
    ### `static`[`rightsEq`](#rightsEq)`(``r1:`[`Rights`](rights "haxe.rtti.Rights - Represents the runtime rights of a type.")`,``r2:`[`Rights`](rights "haxe.rtti.Rights - Represents the runtime rights of a type.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Unlike `r1 == r2`, this function performs a deep equality check on the given [`Rights`](rights#Rights) instances.

    If `r1` or `r2` are `null`, the result is unspecified.
- name: rtti.TypeApi.typeEq()
  id: haxe/rtti/typeapi#typeEq
  summary: Unlike t1 == t2, this function performs a deep equality check on the given CType instances
  belongs_to: rtti.TypeApi
  description: |-
    ### `static`[`typeEq`](#typeEq)`(``t1:`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")`,``t2:`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")`):`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Unlike `t1 == t2`, this function performs a deep equality check on the given [`CType`](ctype#CType) instances.

    If `t1` or `t2` are `null`, the result is unspecified.
- name: rtti.TypeApi.typeInfos()
  id: haxe/rtti/typeapi#typeInfos
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: rtti.TypeApi
  description: "### `static`[`typeInfos`](#typeInfos)`(``t:`[`TypeTree`](typetree \"haxe.rtti.TypeTree - The tree types of the runtime type.\")`):`[`TypeInfos`](typeinfos \"haxe.rtti.TypeInfos - The general runtime type information.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/TypeApi.html](https://api.haxe.org/haxe/rtti/TypeApi.html)"
- name: rtti.Typedef
  id: haxe/rtti/typedef
  summary: The typedef runtime information
  description: "# Typedef\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nThe typedef runtime information.\n\n## Fields\n\n### [`types`](#types)`:`[`Map`](../../map \"Map\")`<`[`String`](../../string \"String - The basic String class.\")`, `[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")`>`\n\nThe types of the typedef, by platform.\n\n### [`type`](#type)`:`[`CType`](ctype \"haxe.rtti.CType - The runtime member types.\")\n\nThe type of the typedef.\n\n### [`platforms`](#platforms)`:`[`Platforms`](platforms \"haxe.rtti.Platforms - A list of strings representing the targets where the type is available.\")\n\nA list of strings representing the targets where the type is available.\n\n### [`path`](#path)`:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")\n\nThe type path of the type.\n\n### [`params`](#params)`:`[`TypeParams`](typeparams \"haxe.rtti.TypeParams - An array of strings representing the names of the type parameters the type has.\")\n\nAn array of strings representing the names of the type parameters the type has.\n\n### [`module`](#module)`:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")\n\nThe type path of the module containing the type.\n\n### [`meta`](#meta)`:`[`MetaData`](metadata \"haxe.rtti.MetaData - The list of runtime metadata.\")\n\nThe \\[metadata\\](https://haxe.org/manual/lf-metadata.html) the type was annotated with.\n\n### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is \\[\\`private\\`\\](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).\n\n### [`file`](#file)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe full slash path of the .hx file containing the type. This might be \\`null\\` in case there is no such file, e.g. if the type is defined through a macro.\n\n### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe documentation of the type. This information is only available if the compiler flag \\`-D use_rtti_doc\\` was in place. Otherwise, or if the constructor has no documentation, the value is \\`null\\`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Typedef.html](https://api.haxe.org/haxe/rtti/Typedef.html)"
- name: rtti.Typedef.doc
  id: haxe/rtti/typedef#doc
  summary: The documentation of the type
  belongs_to: rtti.Typedef
  description: "### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe documentation of the type. This information is only available if the compiler flag \\`-D use_rtti_doc\\` was in place. Otherwise, or if the constructor has no documentation, the value is \\`null\\`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/Typedef.html](https://api.haxe.org/haxe/rtti/Typedef.html)"
- name: rtti.Typedef.file
  id: haxe/rtti/typedef#file
  summary: The full slash path of the .hx file containing the type
  belongs_to: rtti.Typedef
  description: |-
    ### [`file`](#file)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The full slash path of the .hx file containing the type. This might be \`null\` in case there is no such file, e.g. if the type is defined through a macro.
- name: rtti.Typedef.isPrivate
  id: haxe/rtti/typedef#isPrivate
  summary: Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type)
  belongs_to: rtti.Typedef
  description: |-
    ### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is \[\`private\`\](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).
- name: rtti.Typedef.meta
  id: haxe/rtti/typedef#meta
  summary: The [metadata](https://haxe.org/manual/lf-metadata.html) the type was annotated with
  belongs_to: rtti.Typedef
  description: |-
    ### [`meta`](#meta)`:`[`MetaData`](metadata "haxe.rtti.MetaData - The list of runtime metadata.")

    The \[metadata\](https://haxe.org/manual/lf-metadata.html) the type was annotated with.
- name: rtti.Typedef.module
  id: haxe/rtti/typedef#module
  summary: The type path of the module containing the type
  belongs_to: rtti.Typedef
  description: |-
    ### [`module`](#module)`:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")

    The type path of the module containing the type.
- name: rtti.Typedef.params
  id: haxe/rtti/typedef#params
  summary: An array of strings representing the names of the type parameters the type has
  belongs_to: rtti.Typedef
  description: |-
    ### [`params`](#params)`:`[`TypeParams`](typeparams "haxe.rtti.TypeParams - An array of strings representing the names of the type parameters the type has.")

    An array of strings representing the names of the type parameters the type has.
- name: rtti.Typedef.path
  id: haxe/rtti/typedef#path
  summary: The type path of the type
  belongs_to: rtti.Typedef
  description: |-
    ### [`path`](#path)`:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")

    The type path of the type.
- name: rtti.Typedef.platforms
  id: haxe/rtti/typedef#platforms
  summary: A list of strings representing the targets where the type is available
  belongs_to: rtti.Typedef
  description: |-
    ### [`platforms`](#platforms)`:`[`Platforms`](platforms "haxe.rtti.Platforms - A list of strings representing the targets where the type is available.")

    A list of strings representing the targets where the type is available.
- name: rtti.Typedef.type
  id: haxe/rtti/typedef#type
  summary: The type of the typedef
  belongs_to: rtti.Typedef
  description: |-
    ### [`type`](#type)`:`[`CType`](ctype "haxe.rtti.CType - The runtime member types.")

    The type of the typedef.
- name: rtti.Typedef.types
  id: haxe/rtti/typedef#types
  summary: The types of the typedef, by platform
  belongs_to: rtti.Typedef
  description: |-
    ### [`types`](#types)`:`[`Map`](../../map "Map")`<`[`String`](../../string "String - The basic String class.")`, `[`CType`](ctype "haxe.rtti.CType - The runtime member types.")`>`

    The types of the typedef, by platform.
- name: rtti.TypeInfos
  id: haxe/rtti/typeinfos
  summary: The general runtime type information
  description: "# TypeInfos\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nThe general runtime type information.\n\n## Fields\n\n### [`platforms`](#platforms)`:`[`Platforms`](platforms \"haxe.rtti.Platforms - A list of strings representing the targets where the type is available.\")\n\nA list of strings representing the targets where the type is available.\n\n### [`path`](#path)`:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")\n\nThe type path of the type.\n\n### [`params`](#params)`:`[`TypeParams`](typeparams \"haxe.rtti.TypeParams - An array of strings representing the names of the type parameters the type has.\")\n\nAn array of strings representing the names of the type parameters the type has.\n\n### [`module`](#module)`:`[`Path`](path \"haxe.rtti.Path - The (dot-)path of the runtime type.\")\n\nThe type path of the module containing the type.\n\n### [`meta`](#meta)`:`[`MetaData`](metadata \"haxe.rtti.MetaData - The list of runtime metadata.\")\n\nThe \\[metadata\\](https://haxe.org/manual/lf-metadata.html) the type was annotated with.\n\n### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nWhether or not the type is \\[\\`private\\`\\](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).\n\n### [`file`](#file)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe full slash path of the .hx file containing the type. This might be \\`null\\` in case there is no such file, e.g. if the type is defined through a macro.\n\n### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe documentation of the type. This information is only available if the compiler flag \\`-D use_rtti_doc\\` was in place. Otherwise, or if the constructor has no documentation, the value is \\`null\\`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/TypeInfos.html](https://api.haxe.org/haxe/rtti/TypeInfos.html)"
- name: rtti.TypeInfos.doc
  id: haxe/rtti/typeinfos#doc
  summary: The documentation of the type
  belongs_to: rtti.TypeInfos
  description: "### [`doc`](#doc)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\nThe documentation of the type. This information is only available if the compiler flag \\`-D use_rtti_doc\\` was in place. Otherwise, or if the constructor has no documentation, the value is \\`null\\`.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/TypeInfos.html](https://api.haxe.org/haxe/rtti/TypeInfos.html)"
- name: rtti.TypeInfos.file
  id: haxe/rtti/typeinfos#file
  summary: The full slash path of the .hx file containing the type
  belongs_to: rtti.TypeInfos
  description: |-
    ### [`file`](#file)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../../string "String - The basic String class.")`>`

    The full slash path of the .hx file containing the type. This might be \`null\` in case there is no such file, e.g. if the type is defined through a macro.
- name: rtti.TypeInfos.isPrivate
  id: haxe/rtti/typeinfos#isPrivate
  summary: Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type)
  belongs_to: rtti.TypeInfos
  description: |-
    ### [`isPrivate`](#isPrivate)`:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")

    Whether or not the type is \[\`private\`\](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).
- name: rtti.TypeInfos.meta
  id: haxe/rtti/typeinfos#meta
  summary: The [metadata](https://haxe.org/manual/lf-metadata.html) the type was annotated with
  belongs_to: rtti.TypeInfos
  description: |-
    ### [`meta`](#meta)`:`[`MetaData`](metadata "haxe.rtti.MetaData - The list of runtime metadata.")

    The \[metadata\](https://haxe.org/manual/lf-metadata.html) the type was annotated with.
- name: rtti.TypeInfos.module
  id: haxe/rtti/typeinfos#module
  summary: The type path of the module containing the type
  belongs_to: rtti.TypeInfos
  description: |-
    ### [`module`](#module)`:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")

    The type path of the module containing the type.
- name: rtti.TypeInfos.params
  id: haxe/rtti/typeinfos#params
  summary: An array of strings representing the names of the type parameters the type has
  belongs_to: rtti.TypeInfos
  description: |-
    ### [`params`](#params)`:`[`TypeParams`](typeparams "haxe.rtti.TypeParams - An array of strings representing the names of the type parameters the type has.")

    An array of strings representing the names of the type parameters the type has.
- name: rtti.TypeInfos.path
  id: haxe/rtti/typeinfos#path
  summary: The type path of the type
  belongs_to: rtti.TypeInfos
  description: |-
    ### [`path`](#path)`:`[`Path`](path "haxe.rtti.Path - The (dot-)path of the runtime type.")

    The type path of the type.
- name: rtti.TypeInfos.platforms
  id: haxe/rtti/typeinfos#platforms
  summary: A list of strings representing the targets where the type is available
  belongs_to: rtti.TypeInfos
  description: |-
    ### [`platforms`](#platforms)`:`[`Platforms`](platforms "haxe.rtti.Platforms - A list of strings representing the targets where the type is available.")

    A list of strings representing the targets where the type is available.
- name: rtti.TypeParams
  id: haxe/rtti/typeparams
  summary: An array of strings representing the names of the type parameters the type has
  description: "# TypeParams\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nAn array of strings representing the names of the type parameters the type has. As of Haxe 3.2.0, this does not include the constraints.\n\n## Alias\n\n*alias for* [`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/TypeParams.html](https://api.haxe.org/haxe/rtti/TypeParams.html)"
- name: rtti.TypeRoot
  id: haxe/rtti/typeroot
  summary: Array of TypeTree
  description: "# TypeRoot\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nArray of [`TypeTree`](typetree#TypeTree).\n\n## Alias\n\n*alias for* [`Array`](../../array \"Array\")`<`[`haxe.rtti.TypeTree`](typetree \"haxe.rtti.TypeTree - The tree types of the runtime type.\")`>`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/TypeRoot.html](https://api.haxe.org/haxe/rtti/TypeRoot.html)"
- name: rtti.TypeTree
  id: haxe/rtti/typetree
  summary: The tree types of the runtime type
  description: "# TypeTree\n\npackage [haxe.rtti](index)\n\nimport [haxe.rtti.CType](ctype)\n\n*Available on all platforms*\n\nThe tree types of the runtime type.\n\n## Values\n\n### `TPackage(name:`[`String`](../../string \"String - The basic String class.\")`, full:`[`String`](../../string \"String - The basic String class.\")`, subs:`[`Array`](../../array \"Array\")`<`[`TypeTree`](typetree \"haxe.rtti.TypeTree - The tree types of the runtime type.\")`>)`\n\n### `TClassdecl(c:`[`Classdef`](classdef \"haxe.rtti.Classdef - The runtime class definition information.\")`)`\n\n### `TEnumdecl(e:`[`Enumdef`](enumdef \"haxe.rtti.Enumdef - The enum runtime type information.\")`)`\n\n### `TTypedecl(t:`[`Typedef`](typedef \"haxe.rtti.Typedef - The typedef runtime information.\")`)`\n\n### `TAbstractdecl(a:`[`Abstractdef`](abstractdef \"haxe.rtti.Abstractdef - The abstract type runtime information.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/TypeTree.html](https://api.haxe.org/haxe/rtti/TypeTree.html)"
- name: rtti.TypeTree.TAbstractdecl()
  id: haxe/rtti/typetree#TAbstractdecl
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: rtti.TypeTree
  description: "### `TAbstractdecl(a:`[`Abstractdef`](abstractdef \"haxe.rtti.Abstractdef - The abstract type runtime information.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/TypeTree.html](https://api.haxe.org/haxe/rtti/TypeTree.html)"
- name: rtti.TypeTree.TClassdecl()
  id: haxe/rtti/typetree#TClassdecl
  summary: null
  belongs_to: rtti.TypeTree
  description: '### `TClassdecl(c:`[`Classdef`](classdef "haxe.rtti.Classdef - The runtime class definition information.")`)`'
- name: rtti.TypeTree.TEnumdecl()
  id: haxe/rtti/typetree#TEnumdecl
  summary: null
  belongs_to: rtti.TypeTree
  description: '### `TEnumdecl(e:`[`Enumdef`](enumdef "haxe.rtti.Enumdef - The enum runtime type information.")`)`'
- name: rtti.TypeTree.TPackage()
  id: haxe/rtti/typetree#TPackage
  summary: null
  belongs_to: rtti.TypeTree
  description: '### `TPackage(name:`[`String`](../../string "String - The basic String class.")`, full:`[`String`](../../string "String - The basic String class.")`, subs:`[`Array`](../../array "Array")`<`[`TypeTree`](typetree "haxe.rtti.TypeTree - The tree types of the runtime type.")`>)`'
- name: rtti.TypeTree.TTypedecl()
  id: haxe/rtti/typetree#TTypedecl
  summary: null
  belongs_to: rtti.TypeTree
  description: '### `TTypedecl(t:`[`Typedef`](typedef "haxe.rtti.Typedef - The typedef runtime information.")`)`'
- name: rtti.XmlParser
  id: haxe/rtti/xmlparser
  summary: XmlParser processes the runtime type information (RTTI) which is stored as a XML string in a static field __rtti
  description: "# XmlParser\n\npackage [haxe.rtti](index)\n\n*Available on all platforms*\n\nXmlParser processes the runtime type information (RTTI) which is stored as a XML string in a static field `__rtti`.\n\nSee also:\n\n- <https://haxe.org/manual/cr-rtti.html>\n\n## Constructor\n\n### [`new`](#new)`()`\n\n## Variables\n\n### [`root`](#root)`:`[`TypeRoot`](typeroot \"haxe.rtti.TypeRoot - Array of TypeTree.\")\n\n## Methods\n\n### `dynamic`[`newField`](#newField)`(``c:`[`Classdef`](classdef \"haxe.rtti.Classdef - The runtime class definition information.\")`,`` ``f:`[`ClassField`](classfield \"haxe.rtti.ClassField - The runtime class field information.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`process`](#process)`(``x:`[`Xml`](../../xml \"Xml - Cross-platform Xml API.\")`,`` ``platform:`[`String`](../../string \"String - The basic String class.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`processElement`](#processElement)`(``x:`[`Xml`](../../xml \"Xml - Cross-platform Xml API.\")`):`[`TypeTree`](typetree \"haxe.rtti.TypeTree - The tree types of the runtime type.\")\n\n### [`sort`](#sort)`(``?l:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypeRoot`](typeroot \"haxe.rtti.TypeRoot - Array of TypeTree.\")`>``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/XmlParser.html](https://api.haxe.org/haxe/rtti/XmlParser.html)"
- name: rtti.XmlParser.newField()
  id: haxe/rtti/xmlparser#newField
  summary: null
  belongs_to: rtti.XmlParser
  description: '### `dynamic`[`newField`](#newField)`(``c:`[`Classdef`](classdef "haxe.rtti.Classdef - The runtime class definition information.")`,``f:`[`ClassField`](classfield "haxe.rtti.ClassField - The runtime class field information.")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: rtti.XmlParser.process()
  id: haxe/rtti/xmlparser#process
  summary: null
  belongs_to: rtti.XmlParser
  description: '### [`process`](#process)`(``x:`[`Xml`](../../xml "Xml - Cross-platform Xml API.")`,``platform:`[`String`](../../string "String - The basic String class.")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: rtti.XmlParser.processElement()
  id: haxe/rtti/xmlparser#processElement
  summary: null
  belongs_to: rtti.XmlParser
  description: '### [`processElement`](#processElement)`(``x:`[`Xml`](../../xml "Xml - Cross-platform Xml API.")`):`[`TypeTree`](typetree "haxe.rtti.TypeTree - The tree types of the runtime type.")'
- name: rtti.XmlParser.root
  id: haxe/rtti/xmlparser#root
  summary: null
  belongs_to: rtti.XmlParser
  description: |-
    ### [`root`](#root)`:`[`TypeRoot`](typeroot "haxe.rtti.TypeRoot - Array of TypeTree.")

    ## Methods
- name: rtti.XmlParser.sort()
  id: haxe/rtti/xmlparser#sort
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: rtti.XmlParser
  description: "### [`sort`](#sort)`(``?l:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`TypeRoot`](typeroot \"haxe.rtti.TypeRoot - Array of TypeTree.\")`>``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/rtti/XmlParser.html](https://api.haxe.org/haxe/rtti/XmlParser.html)"
- name: Serializer
  id: haxe/serializer
  summary: The Serializer class can be used to encode values and objects into a String, from which the Unserializer class can recreate the original representation
  description: "# Serializer\n\npackage [haxe](index)\n\n*Available on all platforms*\n\nThe Serializer class can be used to encode values and objects into a [`String`](../string), from which the [`Unserializer`](unserializer#Unserializer) class can recreate the original representation.\n\nThis class can be used in two ways:\n\n- create a `new `[`Serializer`](serializer#Serializer)`()` instance, call its `serialize()` method with any argument and finally retrieve the String representation from `toString()`\n- call [`Serializer.run`](serializer#run)`()` to obtain the serialized representation of a single argument\n\nSerialization is guaranteed to work for all haxe-defined classes, but may or may not work for instances of external/native classes.\n\nThe specification of the serialization format can be found here: <https://haxe.org/manual/std-serialization-format.html>\n\n## Static variables\n\n### `static`[`USE_CACHE`](#USE_CACHE)`:`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false`\n\nIf the values you are serializing can contain circular references or objects repetitions, you should set `USE_CACHE` to true to prevent infinite loops.\n\nThis may also reduce the size of serialization Strings at the expense of performance.\n\nThis value can be changed for individual instances of [`Serializer`](serializer#Serializer) by setting their `useCache` field.\n\n### `static`[`USE_ENUM_INDEX`](#USE_ENUM_INDEX)`:`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false`\n\nUse constructor indexes for enums instead of names.\n\nThis may reduce the size of serialization Strings, but makes them less suited for long-term storage: If constructors are removed or added from the enum, the indices may no longer match.\n\nThis value can be changed for individual instances of [`Serializer`](serializer#Serializer) by setting their `useEnumIndex` field.\n\n## Static methods\n\n### `static`[`run`](#run)`(``v:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`String`](../string \"String - The basic String class.\")\n\nSerializes `v` and returns the String representation.\n\nThis is a convenience function for creating a new instance of Serializer, serialize `v` into it and obtain the result through a call to `toString()`.\n\n## Constructor\n\n### [`new`](#new)`()`\n\nCreates a new Serializer instance.\n\nSubsequent calls to `this.`[`serialize`](#serialize) will append values to the internal buffer of this String. Once complete, the contents can be retrieved through a call to `this.`[`toString`](#toString).\n\nEach [`Serializer`](serializer#Serializer) instance maintains its own cache if `this.`[`useCache`](#useCache) is [`true`](../bool).\n\n## Variables\n\n### [`useCache`](#useCache)`:`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nThe individual cache setting for `this` Serializer instance.\n\nSee `USE_CACHE` for a complete description.\n\n### [`useEnumIndex`](#useEnumIndex)`:`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nThe individual enum index setting for `this` Serializer instance.\n\nSee `USE_ENUM_INDEX` for a complete description.\n\n## Methods\n\n### [`serialize`](#serialize)`(``v:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Void`](../void \"Void - The standard Void type.\")\n\nSerializes `v`.\n\nAll haxe-defined values and objects with the exception of functions can be serialized. Serialization of external/native objects is not guaranteed to work.\n\nThe values of `this.`[`useCache`](#useCache) and `this.`[`useEnumIndex`](#useEnumIndex) may affect serialization output.\n\n### [`serializeException`](#serializeException)`(``e:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Void`](../void \"Void - The standard Void type.\")\n\n### [`toString`](#toString)`():`[`String`](../string \"String - The basic String class.\")\n\nReturn the String representation of `this` Serializer.\n\nThe exact format specification can be found here: https://haxe.org/manual/serialization/format\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Serializer.html](https://api.haxe.org/haxe/Serializer.html)"
- name: Serializer.run()
  id: haxe/serializer#run
  summary: Serializes v and returns the String representation
  belongs_to: Serializer
  description: |-
    ### `static`[`run`](#run)`(``v:`[`Dynamic`](../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`String`](../string "String - The basic String class.")

    Serializes `v` and returns the String representation.

    This is a convenience function for creating a new instance of Serializer, serialize `v` into it and obtain the result through a call to `toString()`.

    ## Constructor

    ### [`new`](#new)`()`

    Creates a new Serializer instance.

    Subsequent calls to `this.`[`serialize`](#serialize) will append values to the internal buffer of this String. Once complete, the contents can be retrieved through a call to `this.`[`toString`](#toString).

    Each [`Serializer`](serializer#Serializer) instance maintains its own cache if `this.`[`useCache`](#useCache) is [`true`](../bool).

    ## Variables
- name: Serializer.serialize()
  id: haxe/serializer#serialize
  summary: Serializes v
  belongs_to: Serializer
  description: |-
    ### [`serialize`](#serialize)`(``v:`[`Dynamic`](../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Void`](../void "Void - The standard Void type.")

    Serializes `v`.

    All haxe-defined values and objects with the exception of functions can be serialized. Serialization of external/native objects is not guaranteed to work.

    The values of `this.`[`useCache`](#useCache) and `this.`[`useEnumIndex`](#useEnumIndex) may affect serialization output.
- name: Serializer.serializeException()
  id: haxe/serializer#serializeException
  summary: null
  belongs_to: Serializer
  description: '### [`serializeException`](#serializeException)`(``e:`[`Dynamic`](../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Void`](../void "Void - The standard Void type.")'
- name: Serializer.toString()
  id: haxe/serializer#toString
  summary: Return the String representation of this Serializer
  belongs_to: Serializer
  description: "### [`toString`](#toString)`():`[`String`](../string \"String - The basic String class.\")\n\nReturn the String representation of `this` Serializer.\n\nThe exact format specification can be found here: https://haxe.org/manual/serialization/format\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Serializer.html](https://api.haxe.org/haxe/Serializer.html)"
- name: Serializer.USE_CACHE
  id: haxe/serializer#USE_CACHE
  summary: If the values you are serializing can contain circular references or objects repetitions, you should set USE_CACHE to true to prevent infinite loops
  belongs_to: Serializer
  description: |-
    ### `static`[`USE_CACHE`](#USE_CACHE)`:`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")` = false`

    If the values you are serializing can contain circular references or objects repetitions, you should set `USE_CACHE` to true to prevent infinite loops.

    This may also reduce the size of serialization Strings at the expense of performance.

    This value can be changed for individual instances of [`Serializer`](serializer#Serializer) by setting their `useCache` field.
- name: Serializer.USE_ENUM_INDEX
  id: haxe/serializer#USE_ENUM_INDEX
  summary: Use constructor indexes for enums instead of names
  belongs_to: Serializer
  description: |-
    ### `static`[`USE_ENUM_INDEX`](#USE_ENUM_INDEX)`:`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")` = false`

    Use constructor indexes for enums instead of names.

    This may reduce the size of serialization Strings, but makes them less suited for long-term storage: If constructors are removed or added from the enum, the indices may no longer match.

    This value can be changed for individual instances of [`Serializer`](serializer#Serializer) by setting their `useEnumIndex` field.

    ## Static methods
- name: Serializer.useCache
  id: haxe/serializer#useCache
  summary: The individual cache setting for this Serializer instance
  belongs_to: Serializer
  description: |-
    ### [`useCache`](#useCache)`:`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")

    The individual cache setting for `this` Serializer instance.

    See `USE_CACHE` for a complete description.
- name: Serializer.useEnumIndex
  id: haxe/serializer#useEnumIndex
  summary: The individual enum index setting for this Serializer instance
  belongs_to: Serializer
  description: |-
    ### [`useEnumIndex`](#useEnumIndex)`:`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")

    The individual enum index setting for `this` Serializer instance.

    See `USE_ENUM_INDEX` for a complete description.

    ## Methods
- name: Single
  id: single
  summary: Single-precision IEEE 32bit float (4-byte)
  description: "# Single\n\n[no package](index)\n\nfrom [Float](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\") to [Float](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\n*Available on cs, cpp, java, hl*\n\nSingle-precision IEEE 32bit float (4-byte).\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Single.html](https://api.haxe.org/Single.html)"
- name: Ssl
  id: mbedtls/ssl
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Ssl\n\npackage [mbedtls](index)\n\n*Available on macro*\n\n## Constructor\n\n### [`new`](#new)`()`\n\n## Methods\n\n### [`get_peer_cert`](#get_peer_cert)`():`[`Null`](../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`X509Crt`](x509crt \"mbedtls.X509Crt\")`>`\n\n### [`handshake`](#handshake)`():`[`Int`](../int \"Int - The standard Int type.\")\n\n### [`read`](#read)`(``buf:`[`Bytes`](../haxe/io/bytes \"haxe.io.Bytes\")`,`` ``pos:`[`Int`](../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n### [`set_hostname`](#set_hostname)`(``hostname:`[`String`](../string \"String - The basic String class.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n### [`setup`](#setup)`(``conf:`[`Config`](config \"mbedtls.Config\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n### [`write`](#write)`(``buf:`[`Bytes`](../haxe/io/bytes \"haxe.io.Bytes\")`,`` ``pos:`[`Int`](../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/Ssl.html](https://api.haxe.org/mbedtls/Ssl.html)"
- name: Ssl.get_peer_cert()
  id: mbedtls/ssl#get_peer_cert
  summary: null
  belongs_to: Ssl
  description: '### [`get_peer_cert`](#get_peer_cert)`():`[`Null`](../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`X509Crt`](x509crt "mbedtls.X509Crt")`>`'
- name: Ssl.handshake()
  id: mbedtls/ssl#handshake
  summary: null
  belongs_to: Ssl
  description: '### [`handshake`](#handshake)`():`[`Int`](../int "Int - The standard Int type.")'
- name: Ssl.read()
  id: mbedtls/ssl#read
  summary: null
  belongs_to: Ssl
  description: '### [`read`](#read)`(``buf:`[`Bytes`](../haxe/io/bytes "haxe.io.Bytes")`,``pos:`[`Int`](../int "Int - The standard Int type.")`,``len:`[`Int`](../int "Int - The standard Int type.")`):`[`Int`](../int "Int - The standard Int type.")'
- name: Ssl.set_hostname()
  id: mbedtls/ssl#set_hostname
  summary: null
  belongs_to: Ssl
  description: '### [`set_hostname`](#set_hostname)`(``hostname:`[`String`](../string "String - The basic String class.")`):`[`Int`](../int "Int - The standard Int type.")'
- name: Ssl.setup()
  id: mbedtls/ssl#setup
  summary: null
  belongs_to: Ssl
  description: '### [`setup`](#setup)`(``conf:`[`Config`](config "mbedtls.Config")`):`[`Int`](../int "Int - The standard Int type.")'
- name: Ssl.write()
  id: mbedtls/ssl#write
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: Ssl
  description: "### [`write`](#write)`(``buf:`[`Bytes`](../haxe/io/bytes \"haxe.io.Bytes\")`,``pos:`[`Int`](../int \"Int - The standard Int type.\")`,``len:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/Ssl.html](https://api.haxe.org/mbedtls/Ssl.html)"
- name: SslAuthmode
  id: mbedtls/sslauthmode
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# SslAuthmode([Int](../int \"Int - The standard Int type.\"))\n\npackage [mbedtls](index)\n\n*Available on macro*\n\n## Variables\n\n### `read only`[`SSL_VERIFY_NONE`](#SSL_VERIFY_NONE)`:`[`SslAuthmode`](sslauthmode \"mbedtls.SslAuthmode\")\n\n### `read only`[`SSL_VERIFY_OPTIONAL`](#SSL_VERIFY_OPTIONAL)`:`[`SslAuthmode`](sslauthmode \"mbedtls.SslAuthmode\")\n\n### `read only`[`SSL_VERIFY_REQUIRED`](#SSL_VERIFY_REQUIRED)`:`[`SslAuthmode`](sslauthmode \"mbedtls.SslAuthmode\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/SslAuthmode.html](https://api.haxe.org/mbedtls/SslAuthmode.html)"
- name: SslAuthmode.SSL_VERIFY_NONE
  id: mbedtls/sslauthmode#SSL_VERIFY_NONE
  summary: null
  belongs_to: SslAuthmode
  description: '### `read only`[`SSL_VERIFY_NONE`](#SSL_VERIFY_NONE)`:`[`SslAuthmode`](sslauthmode "mbedtls.SslAuthmode")'
- name: SslAuthmode.SSL_VERIFY_OPTIONAL
  id: mbedtls/sslauthmode#SSL_VERIFY_OPTIONAL
  summary: null
  belongs_to: SslAuthmode
  description: '### `read only`[`SSL_VERIFY_OPTIONAL`](#SSL_VERIFY_OPTIONAL)`:`[`SslAuthmode`](sslauthmode "mbedtls.SslAuthmode")'
- name: SslAuthmode.SSL_VERIFY_REQUIRED
  id: mbedtls/sslauthmode#SSL_VERIFY_REQUIRED
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: SslAuthmode
  description: "### `read only`[`SSL_VERIFY_REQUIRED`](#SSL_VERIFY_REQUIRED)`:`[`SslAuthmode`](sslauthmode \"mbedtls.SslAuthmode\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/SslAuthmode.html](https://api.haxe.org/mbedtls/SslAuthmode.html)"
- name: SslEndpoint
  id: mbedtls/sslendpoint
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# SslEndpoint([Int](../int \"Int - The standard Int type.\"))\n\npackage [mbedtls](index)\n\n*Available on macro*\n\n## Variables\n\n### `read only`[`SSL_IS_CLIENT`](#SSL_IS_CLIENT)`:`[`SslEndpoint`](sslendpoint \"mbedtls.SslEndpoint\")\n\n### `read only`[`SSL_IS_SERVER`](#SSL_IS_SERVER)`:`[`SslEndpoint`](sslendpoint \"mbedtls.SslEndpoint\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/SslEndpoint.html](https://api.haxe.org/mbedtls/SslEndpoint.html)"
- name: SslEndpoint.SSL_IS_CLIENT
  id: mbedtls/sslendpoint#SSL_IS_CLIENT
  summary: null
  belongs_to: SslEndpoint
  description: '### `read only`[`SSL_IS_CLIENT`](#SSL_IS_CLIENT)`:`[`SslEndpoint`](sslendpoint "mbedtls.SslEndpoint")'
- name: SslEndpoint.SSL_IS_SERVER
  id: mbedtls/sslendpoint#SSL_IS_SERVER
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: SslEndpoint
  description: "### `read only`[`SSL_IS_SERVER`](#SSL_IS_SERVER)`:`[`SslEndpoint`](sslendpoint \"mbedtls.SslEndpoint\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/SslEndpoint.html](https://api.haxe.org/mbedtls/SslEndpoint.html)"
- name: SslPreset
  id: mbedtls/sslpreset
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# SslPreset([Int](../int \"Int - The standard Int type.\"))\n\npackage [mbedtls](index)\n\n*Available on macro*\n\n## Variables\n\n### `read only`[`SSL_PRESET_DEFAULT`](#SSL_PRESET_DEFAULT)`:`[`SslPreset`](sslpreset \"mbedtls.SslPreset\")\n\n### `read only`[`SSL_PRESET_SUITEB`](#SSL_PRESET_SUITEB)`:`[`SslPreset`](sslpreset \"mbedtls.SslPreset\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/SslPreset.html](https://api.haxe.org/mbedtls/SslPreset.html)"
- name: SslPreset.SSL_PRESET_DEFAULT
  id: mbedtls/sslpreset#SSL_PRESET_DEFAULT
  summary: null
  belongs_to: SslPreset
  description: '### `read only`[`SSL_PRESET_DEFAULT`](#SSL_PRESET_DEFAULT)`:`[`SslPreset`](sslpreset "mbedtls.SslPreset")'
- name: SslPreset.SSL_PRESET_SUITEB
  id: mbedtls/sslpreset#SSL_PRESET_SUITEB
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: SslPreset
  description: "### `read only`[`SSL_PRESET_SUITEB`](#SSL_PRESET_SUITEB)`:`[`SslPreset`](sslpreset \"mbedtls.SslPreset\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/SslPreset.html](https://api.haxe.org/mbedtls/SslPreset.html)"
- name: SslTransport
  id: mbedtls/ssltransport
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# SslTransport([Int](../int \"Int - The standard Int type.\"))\n\npackage [mbedtls](index)\n\n*Available on macro*\n\n## Variables\n\n### `read only`[`SSL_TRANSPORT_DATAGRAM`](#SSL_TRANSPORT_DATAGRAM)`:`[`SslTransport`](ssltransport \"mbedtls.SslTransport\")\n\n### `read only`[`SSL_TRANSPORT_STREAM`](#SSL_TRANSPORT_STREAM)`:`[`SslTransport`](ssltransport \"mbedtls.SslTransport\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/SslTransport.html](https://api.haxe.org/mbedtls/SslTransport.html)"
- name: SslTransport.SSL_TRANSPORT_DATAGRAM
  id: mbedtls/ssltransport#SSL_TRANSPORT_DATAGRAM
  summary: null
  belongs_to: SslTransport
  description: '### `read only`[`SSL_TRANSPORT_DATAGRAM`](#SSL_TRANSPORT_DATAGRAM)`:`[`SslTransport`](ssltransport "mbedtls.SslTransport")'
- name: SslTransport.SSL_TRANSPORT_STREAM
  id: mbedtls/ssltransport#SSL_TRANSPORT_STREAM
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: SslTransport
  description: "### `read only`[`SSL_TRANSPORT_STREAM`](#SSL_TRANSPORT_STREAM)`:`[`SslTransport`](ssltransport \"mbedtls.SslTransport\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/SslTransport.html](https://api.haxe.org/mbedtls/SslTransport.html)"
- name: StackItem
  id: haxe/stackitem
  summary: Elements return by CallStack methods
  description: "# StackItem\n\npackage [haxe](index)\n\nimport [haxe.CallStack](callstack)\n\n*Available on all platforms*\n\nElements return by [`CallStack`](callstack#CallStack) methods.\n\n## Values\n\n### `CFunction`\n\n### `Module(m:`[`String`](../string \"String - The basic String class.\")`)`\n\n### `FilePos(s:`[`Null`](../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`StackItem`](stackitem \"haxe.StackItem - Elements return by CallStack methods.\")`>, file:`[`String`](../string \"String - The basic String class.\")`, line:`[`Int`](../int \"Int - The standard Int type.\")`, column:`[`Int`](../int \"Int - The standard Int type.\")`)`\n\n### `Method(classname:`[`Null`](../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`String`](../string \"String - The basic String class.\")`>, method:`[`String`](../string \"String - The basic String class.\")`)`\n\n### `LocalFunction(v:`[`Int`](../int \"Int - The standard Int type.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/StackItem.html](https://api.haxe.org/haxe/StackItem.html)"
- name: StackItem.CFunction
  id: haxe/stackitem#CFunction
  summary: null
  belongs_to: StackItem
  description: '### `CFunction`'
- name: StackItem.FilePos()
  id: haxe/stackitem#FilePos
  summary: null
  belongs_to: StackItem
  description: '### `FilePos(s:`[`Null`](../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`StackItem`](stackitem "haxe.StackItem - Elements return by CallStack methods.")`>, file:`[`String`](../string "String - The basic String class.")`, line:`[`Int`](../int "Int - The standard Int type.")`, column:`[`Int`](../int "Int - The standard Int type.")`)`'
- name: StackItem.LocalFunction()
  id: haxe/stackitem#LocalFunction
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: StackItem
  description: "### `LocalFunction(v:`[`Int`](../int \"Int - The standard Int type.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/StackItem.html](https://api.haxe.org/haxe/StackItem.html)"
- name: StackItem.Method()
  id: haxe/stackitem#Method
  summary: null
  belongs_to: StackItem
  description: '### `Method(classname:`[`Null`](../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`String`](../string "String - The basic String class.")`>, method:`[`String`](../string "String - The basic String class.")`)`'
- name: StackItem.Module()
  id: haxe/stackitem#Module
  summary: null
  belongs_to: StackItem
  description: '### `Module(m:`[`String`](../string "String - The basic String class.")`)`'
- name: Std
  id: std
  summary: The Std class provides standard methods for manipulating basic types
  description: "# Std\n\n[no package](index)\n\n*Available on all platforms*\n\nThe Std class provides standard methods for manipulating basic types.\n\n## Static methods\n\n### `static`[`downcast`](#downcast)`<``T``, ``S``>(``value:``T``,`` ``c:`[`Class`](class \"Class - An abstract type that represents a Class.\")`<``S``>``):``S`\n\nChecks if object `value` is an instance of class or interface `c`.\n\nCompiles only if the type specified by `c` can be assigned to the type of `value`.\n\nThis method checks if a downcast is possible. That is, if the runtime type of `value` is assignable to the type specified by `c`, `value` is returned. Otherwise null is returned.\n\nThis method is not guaranteed to work with core types such as [`String`](string), [`Array`](array) and [`Date`](date).\n\nIf `value` is null, the result is null. If `c` is null, the result is unspecified.\n\n### `static`[`instance`](#instance)`<``T``, ``S``>(``value:``T``,`` ``c:`[`Class`](class \"Class - An abstract type that represents a Class.\")`<``S``>``):``S`\n\n**Deprecated:** \"Std.instance() is deprecated. Use Std.downcast() instead.\"\n\n### `static`[`int`](#int)`(``x:`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nConverts a [`Float`](float) to an [`Int`](int), rounded towards 0.\n\nIf `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.\n\n### `static`[`is`](#is)`(``v:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``t:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nDEPRECATED. Use [`Std.isOfType`](std#isOfType)`(v, t)` instead.\n\nTells if a value `v` is of the type `t`. Returns [`false`](bool) if `v` or `t` are null.\n\nIf `t` is a class or interface with `@:generic` meta, the result is [`false`](bool).\n\n### `static`[`isOfType`](#isOfType)`(``v:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``t:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if a value `v` is of the type `t`. Returns [`false`](bool) if `v` or `t` are null.\n\nIf `t` is a class or interface with `@:generic` meta, the result is [`false`](bool).\n\n### `static`[`parseFloat`](#parseFloat)`(``x:`[`String`](string \"String - The basic String class.\")`):`[`Float`](float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nConverts a [`String`](string) to a [`Float`](float).\n\nThe parsing rules for `parseInt` apply here as well, with the exception of invalid input resulting in a `NaN` value instead of null.\n\nAdditionally, decimal notation may contain a single `.` to denote the start of the fractions.\n\n### `static`[`parseInt`](#parseInt)`(``x:`[`String`](string \"String - The basic String class.\")`):`[`Null`](null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Int`](int \"Int - The standard Int type.\")`>`\n\nConverts a [`String`](string) to an [`Int`](int).\n\nLeading whitespaces are ignored.\n\nIf `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may contain 0-9 and A-F.\n\nOtherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with a - to denote a negative value.\n\nIn decimal mode, parsing continues until an invalid character is detected, in which case the result up to that point is returned. For hexadecimal notation, the effect of invalid characters is unspecified.\n\nLeading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal notation is not supported.\n\nIf `x` is null, the result is unspecified. If `x` cannot be parsed as integer, the result is `null`.\n\n### `static`[`random`](#random)`(``x:`[`Int`](int \"Int - The standard Int type.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nReturn a random integer between 0 included and `x` excluded.\n\nIf `x <= 1`, the result is always 0.\n\n### `static`[`string`](#string)`(``s:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`String`](string \"String - The basic String class.\")\n\nConverts any value to a String.\n\nIf `s` is of [`String`](string), [`Int`](int), [`Float`](float) or [`Bool`](bool), its value is returned.\n\nIf `s` is an instance of a class and that class or one of its parent classes has a `toString` method, that method is called. If no such method is present, the result is unspecified.\n\nIf `s` is an enum constructor without argument, the constructor's name is returned. If arguments exists, the constructor's name followed by the String representations of the arguments is returned.\n\nIf `s` is a structure, the field names along with their values are returned. The field order and the operator separating field names and values are unspecified.\n\nIf s is null, \"null\" is returned.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Std.html](https://api.haxe.org/Std.html)"
- name: Std.downcast()
  id: std#downcast
  summary: Checks if object value is an instance of class or interface c
  belongs_to: Std
  description: |-
    ### `static`[`downcast`](#downcast)`<``T``, ``S``>(``value:``T``,``c:`[`Class`](class "Class - An abstract type that represents a Class.")`<``S``>``):``S`

    Checks if object `value` is an instance of class or interface `c`.

    Compiles only if the type specified by `c` can be assigned to the type of `value`.

    This method checks if a downcast is possible. That is, if the runtime type of `value` is assignable to the type specified by `c`, `value` is returned. Otherwise null is returned.

    This method is not guaranteed to work with core types such as [`String`](string), [`Array`](array) and [`Date`](date).

    If `value` is null, the result is null. If `c` is null, the result is unspecified.
- name: Std.instance()
  id: std#instance
  summary: 'Deprecated: "Std.instance() is deprecated'
  belongs_to: Std
  description: |-
    ### `static`[`instance`](#instance)`<``T``, ``S``>(``value:``T``,``c:`[`Class`](class "Class - An abstract type that represents a Class.")`<``S``>``):``S`

    **Deprecated:** "Std.instance() is deprecated. Use Std.downcast() instead."
- name: Std.int()
  id: std#int
  summary: Converts a Float to an Int, rounded towards 0
  belongs_to: Std
  description: |-
    ### `static`[`int`](#int)`(``x:`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")`):`[`Int`](int "Int - The standard Int type.")

    Converts a [`Float`](float) to an [`Int`](int), rounded towards 0.

    If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.
- name: Std.is()
  id: std#is
  summary: DEPRECATED
  belongs_to: Std
  description: |-
    ### `static`[`is`](#is)`(``v:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`,``t:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    DEPRECATED. Use [`Std.isOfType`](std#isOfType)`(v, t)` instead.

    Tells if a value `v` is of the type `t`. Returns [`false`](bool) if `v` or `t` are null.

    If `t` is a class or interface with `@:generic` meta, the result is [`false`](bool).
- name: Std.isOfType()
  id: std#isOfType
  summary: Tells if a value v is of the type t
  belongs_to: Std
  description: |-
    ### `static`[`isOfType`](#isOfType)`(``v:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`,``t:`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if a value `v` is of the type `t`. Returns [`false`](bool) if `v` or `t` are null.

    If `t` is a class or interface with `@:generic` meta, the result is [`false`](bool).
- name: Std.parseFloat()
  id: std#parseFloat
  summary: Converts a String to a Float
  belongs_to: Std
  description: |-
    ### `static`[`parseFloat`](#parseFloat)`(``x:`[`String`](string "String - The basic String class.")`):`[`Float`](float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Converts a [`String`](string) to a [`Float`](float).

    The parsing rules for `parseInt` apply here as well, with the exception of invalid input resulting in a `NaN` value instead of null.

    Additionally, decimal notation may contain a single `.` to denote the start of the fractions.
- name: Std.parseInt()
  id: std#parseInt
  summary: Converts a String to an Int
  belongs_to: Std
  description: |-
    ### `static`[`parseInt`](#parseInt)`(``x:`[`String`](string "String - The basic String class.")`):`[`Null`](null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Int`](int "Int - The standard Int type.")`>`

    Converts a [`String`](string) to an [`Int`](int).

    Leading whitespaces are ignored.

    If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may contain 0-9 and A-F.

    Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with a - to denote a negative value.

    In decimal mode, parsing continues until an invalid character is detected, in which case the result up to that point is returned. For hexadecimal notation, the effect of invalid characters is unspecified.

    Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal notation is not supported.

    If `x` is null, the result is unspecified. If `x` cannot be parsed as integer, the result is `null`.
- name: Std.random()
  id: std#random
  summary: Return a random integer between 0 included and x excluded
  belongs_to: Std
  description: |-
    ### `static`[`random`](#random)`(``x:`[`Int`](int "Int - The standard Int type.")`):`[`Int`](int "Int - The standard Int type.")

    Return a random integer between 0 included and `x` excluded.

    If `x <= 1`, the result is always 0.
- name: Std.string()
  id: std#string
  summary: Converts any value to a String
  belongs_to: Std
  description: "### `static`[`string`](#string)`(``s:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`String`](string \"String - The basic String class.\")\n\nConverts any value to a String.\n\nIf `s` is of [`String`](string), [`Int`](int), [`Float`](float) or [`Bool`](bool), its value is returned.\n\nIf `s` is an instance of a class and that class or one of its parent classes has a `toString` method, that method is called. If no such method is present, the result is unspecified.\n\nIf `s` is an enum constructor without argument, the constructor's name is returned. If arguments exists, the constructor's name followed by the String representations of the arguments is returned.\n\nIf `s` is a structure, the field names along with their values are returned. The field order and the operator separating field names and values are unspecified.\n\nIf s is null, \"null\" is returned.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Std.html](https://api.haxe.org/Std.html)"
- name: String
  id: string
  summary: The basic String class
  description: "# String\n\n[no package](index)\n\n*Available on all platforms*\n\nThe basic String class.\n\nA Haxe String is immutable, it is not possible to modify individual characters. No method of this class changes the state of `this` String.\n\nStrings can be constructed using the String literal syntax `\"string value\"`.\n\nString can be concatenated by using the `+` operator. If an operand is not a String, it is passed through [`Std.string`](std#string)`()` first.\n\nSee also:\n\n- <https://haxe.org/manual/std-String.html>\n\n## Static methods\n\n### `static`[`fromCharCode`](#fromCharCode)`(``code:`[`Int`](int \"Int - The standard Int type.\")`):`[`String`](string \"String - The basic String class.\")\n\nReturns the String corresponding to the character code `code`.\n\nIf `code` is negative or has another invalid value, the result is unspecified.\n\n## Constructor\n\n### [`new`](#new)`(``string:`[`String`](string \"String - The basic String class.\")`)`\n\nCreates a copy from a given String.\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](int \"Int - The standard Int type.\")\n\nThe number of characters in `this` String.\n\n## Methods\n\n### [`charAt`](#charAt)`(``index:`[`Int`](int \"Int - The standard Int type.\")`):`[`String`](string \"String - The basic String class.\")\n\nReturns the character at position `index` of `this` String.\n\nIf `index` is negative or exceeds `this.`[`length`](#length), the empty String `\"\"` is returned.\n\n### [`charCodeAt`](#charCodeAt)`(``index:`[`Int`](int \"Int - The standard Int type.\")`):`[`Null`](null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Int`](int \"Int - The standard Int type.\")`>`\n\nReturns the character code at position `index` of `this` String.\n\nIf `index` is negative or exceeds `this.`[`length`](#length), `null` is returned.\n\nTo obtain the character code of a single character, `\"x\".code` can be used instead to inline the character code at compile time. Note that this only works on String literals of length 1.\n\n### [`indexOf`](#indexOf)`(``str:`[`String`](string \"String - The basic String class.\")`,`` ``?startIndex:`[`Int`](int \"Int - The standard Int type.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the position of the leftmost occurrence of `str` within `this` String.\n\nIf `startIndex` is given, the search is performed within the substring of `this` String starting from `startIndex`.\n\nIf `startIndex` exceeds `this.`[`length`](#length), -1 is returned.\n\nIf `startIndex` is negative, the result is unspecifed.\n\nOtherwise the search is performed within `this` String. In either case, the returned position is relative to the beginning of `this` String.\n\nIf `str` cannot be found, -1 is returned.\n\n### [`lastIndexOf`](#lastIndexOf)`(``str:`[`String`](string \"String - The basic String class.\")`,`` ``?startIndex:`[`Int`](int \"Int - The standard Int type.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the position of the rightmost occurrence of `str` within `this` String.\n\nIf `startIndex` is given, the search is performed within the substring of `this` String from 0 to `startIndex + str.length`. Otherwise the search is performed within `this` String. In either case, the returned position is relative to the beginning of `this` String.\n\nIf `startIndex` is negative, the result is unspecifed.\n\nIf `str` cannot be found, -1 is returned.\n\n### [`split`](#split)`(``delimiter:`[`String`](string \"String - The basic String class.\")`):`[`Array`](array \"Array\")`<`[`String`](string \"String - The basic String class.\")`>`\n\nSplits `this` String at each occurrence of `delimiter`.\n\nIf `this` String is the empty String `\"\"`, the result is not consistent across targets and may either be `[]` (on Js, Cpp) or `[\"\"]`.\n\nIf `delimiter` is the empty String `\"\"`, `this` String is split into an Array of `this.`[`length`](#length) elements, where the elements correspond to the characters of `this` String.\n\nIf `delimiter` is not found within `this` String, the result is an Array with one element, which equals `this` String.\n\nIf `delimiter` is null, the result is unspecified.\n\nOtherwise, `this` String is split into parts at each occurrence of `delimiter`. If `this` String starts (or ends) with `delimiter`, the result [`Array`](array) contains a leading (or trailing) empty String `\"\"` element. Two subsequent delimiters also result in an empty String `\"\"` element.\n\n### [`substr`](#substr)`(``pos:`[`Int`](int \"Int - The standard Int type.\")`,`` ``?len:`[`Int`](int \"Int - The standard Int type.\")`):`[`String`](string \"String - The basic String class.\")\n\nReturns `len` characters of `this` String, starting at position `pos`.\n\nIf `len` is omitted, all characters from position `pos` to the end of `this` String are included.\n\nIf `pos` is negative, its value is calculated from the end of `this` String by `this.`[`length`](#length)` + pos`. If this yields a negative value, 0 is used instead.\n\nIf the calculated position + `len` exceeds `this.`[`length`](#length), the characters from that position to the end of `this` String are returned.\n\nIf `len` is negative, the result is unspecified.\n\n### [`substring`](#substring)`(``startIndex:`[`Int`](int \"Int - The standard Int type.\")`,`` ``?endIndex:`[`Int`](int \"Int - The standard Int type.\")`):`[`String`](string \"String - The basic String class.\")\n\nReturns the part of `this` String from `startIndex` to but not including `endIndex`.\n\nIf `startIndex` or `endIndex` are negative, 0 is used instead.\n\nIf `startIndex` exceeds `endIndex`, they are swapped.\n\nIf the (possibly swapped) `endIndex` is omitted or exceeds `this.`[`length`](#length), `this.`[`length`](#length) is used instead.\n\nIf the (possibly swapped) `startIndex` exceeds `this.`[`length`](#length), the empty String `\"\"` is returned.\n\n### [`toLowerCase`](#toLowerCase)`():`[`String`](string \"String - The basic String class.\")\n\nReturns a String where all characters of `this` String are lower case.\n\n### [`toString`](#toString)`():`[`String`](string \"String - The basic String class.\")\n\nReturns the String itself.\n\n### [`toUpperCase`](#toUpperCase)`():`[`String`](string \"String - The basic String class.\")\n\nReturns a String where all characters of `this` String are upper case.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/String.html](https://api.haxe.org/String.html)"
- name: String.charAt()
  id: string#charAt
  summary: Returns the character at position index of this String
  belongs_to: String
  description: |-
    ### [`charAt`](#charAt)`(``index:`[`Int`](int "Int - The standard Int type.")`):`[`String`](string "String - The basic String class.")

    Returns the character at position `index` of `this` String.

    If `index` is negative or exceeds `this.`[`length`](#length), the empty String `""` is returned.
- name: String.charCodeAt()
  id: string#charCodeAt
  summary: Returns the character code at position index of this String
  belongs_to: String
  description: |-
    ### [`charCodeAt`](#charCodeAt)`(``index:`[`Int`](int "Int - The standard Int type.")`):`[`Null`](null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Int`](int "Int - The standard Int type.")`>`

    Returns the character code at position `index` of `this` String.

    If `index` is negative or exceeds `this.`[`length`](#length), `null` is returned.

    To obtain the character code of a single character, `"x".code` can be used instead to inline the character code at compile time. Note that this only works on String literals of length 1.
- name: String.fromCharCode()
  id: string#fromCharCode
  summary: Returns the String corresponding to the character code code
  belongs_to: String
  description: |-
    ### `static`[`fromCharCode`](#fromCharCode)`(``code:`[`Int`](int "Int - The standard Int type.")`):`[`String`](string "String - The basic String class.")

    Returns the String corresponding to the character code `code`.

    If `code` is negative or has another invalid value, the result is unspecified.

    ## Constructor

    ### [`new`](#new)`(``string:`[`String`](string "String - The basic String class.")`)`

    Creates a copy from a given String.

    ## Variables
- name: String.indexOf()
  id: string#indexOf
  summary: Returns the position of the leftmost occurrence of str within this String
  belongs_to: String
  description: |-
    ### [`indexOf`](#indexOf)`(``str:`[`String`](string "String - The basic String class.")`,``?startIndex:`[`Int`](int "Int - The standard Int type.")`):`[`Int`](int "Int - The standard Int type.")

    Returns the position of the leftmost occurrence of `str` within `this` String.

    If `startIndex` is given, the search is performed within the substring of `this` String starting from `startIndex`.

    If `startIndex` exceeds `this.`[`length`](#length), -1 is returned.

    If `startIndex` is negative, the result is unspecifed.

    Otherwise the search is performed within `this` String. In either case, the returned position is relative to the beginning of `this` String.

    If `str` cannot be found, -1 is returned.
- name: String.lastIndexOf()
  id: string#lastIndexOf
  summary: Returns the position of the rightmost occurrence of str within this String
  belongs_to: String
  description: |-
    ### [`lastIndexOf`](#lastIndexOf)`(``str:`[`String`](string "String - The basic String class.")`,``?startIndex:`[`Int`](int "Int - The standard Int type.")`):`[`Int`](int "Int - The standard Int type.")

    Returns the position of the rightmost occurrence of `str` within `this` String.

    If `startIndex` is given, the search is performed within the substring of `this` String from 0 to `startIndex + str.length`. Otherwise the search is performed within `this` String. In either case, the returned position is relative to the beginning of `this` String.

    If `startIndex` is negative, the result is unspecifed.

    If `str` cannot be found, -1 is returned.
- name: String.length
  id: string#length
  summary: The number of characters in this String
  belongs_to: String
  description: |-
    ### `read only`[`length`](#length)`:`[`Int`](int "Int - The standard Int type.")

    The number of characters in `this` String.

    ## Methods
- name: String.split()
  id: string#split
  summary: Splits this String at each occurrence of delimiter
  belongs_to: String
  description: |-
    ### [`split`](#split)`(``delimiter:`[`String`](string "String - The basic String class.")`):`[`Array`](array "Array")`<`[`String`](string "String - The basic String class.")`>`

    Splits `this` String at each occurrence of `delimiter`.

    If `this` String is the empty String `""`, the result is not consistent across targets and may either be `[]` (on Js, Cpp) or `[""]`.

    If `delimiter` is the empty String `""`, `this` String is split into an Array of `this.`[`length`](#length) elements, where the elements correspond to the characters of `this` String.

    If `delimiter` is not found within `this` String, the result is an Array with one element, which equals `this` String.

    If `delimiter` is null, the result is unspecified.

    Otherwise, `this` String is split into parts at each occurrence of `delimiter`. If `this` String starts (or ends) with `delimiter`, the result [`Array`](array) contains a leading (or trailing) empty String `""` element. Two subsequent delimiters also result in an empty String `""` element.
- name: String.substr()
  id: string#substr
  summary: Returns len characters of this String, starting at position pos
  belongs_to: String
  description: |-
    ### [`substr`](#substr)`(``pos:`[`Int`](int "Int - The standard Int type.")`,``?len:`[`Int`](int "Int - The standard Int type.")`):`[`String`](string "String - The basic String class.")

    Returns `len` characters of `this` String, starting at position `pos`.

    If `len` is omitted, all characters from position `pos` to the end of `this` String are included.

    If `pos` is negative, its value is calculated from the end of `this` String by `this.`[`length`](#length)` + pos`. If this yields a negative value, 0 is used instead.

    If the calculated position + `len` exceeds `this.`[`length`](#length), the characters from that position to the end of `this` String are returned.

    If `len` is negative, the result is unspecified.
- name: String.substring()
  id: string#substring
  summary: Returns the part of this String from startIndex to but not including endIndex
  belongs_to: String
  description: |-
    ### [`substring`](#substring)`(``startIndex:`[`Int`](int "Int - The standard Int type.")`,``?endIndex:`[`Int`](int "Int - The standard Int type.")`):`[`String`](string "String - The basic String class.")

    Returns the part of `this` String from `startIndex` to but not including `endIndex`.

    If `startIndex` or `endIndex` are negative, 0 is used instead.

    If `startIndex` exceeds `endIndex`, they are swapped.

    If the (possibly swapped) `endIndex` is omitted or exceeds `this.`[`length`](#length), `this.`[`length`](#length) is used instead.

    If the (possibly swapped) `startIndex` exceeds `this.`[`length`](#length), the empty String `""` is returned.
- name: String.toLowerCase()
  id: string#toLowerCase
  summary: Returns a String where all characters of this String are lower case
  belongs_to: String
  description: |-
    ### [`toLowerCase`](#toLowerCase)`():`[`String`](string "String - The basic String class.")

    Returns a String where all characters of `this` String are lower case.
- name: String.toString()
  id: string#toString
  summary: Returns the String itself
  belongs_to: String
  description: |-
    ### [`toString`](#toString)`():`[`String`](string "String - The basic String class.")

    Returns the String itself.
- name: String.toUpperCase()
  id: string#toUpperCase
  summary: Returns a String where all characters of this String are upper case
  belongs_to: String
  description: "### [`toUpperCase`](#toUpperCase)`():`[`String`](string \"String - The basic String class.\")\n\nReturns a String where all characters of `this` String are upper case.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/String.html](https://api.haxe.org/String.html)"
- name: StringBuf
  id: stringbuf
  summary: A String buffer is an efficient way to build a big string by appending small elements together
  description: "# StringBuf\n\n[no package](index)\n\n*Available on all platforms*\n\nA String buffer is an efficient way to build a big string by appending small elements together.\n\nUnlike String, an instance of StringBuf is not immutable in the sense that it can be passed as argument to functions which modify it by appending more values.\n\n## Constructor\n\n### [`new`](#new)`()`\n\nCreates a new StringBuf instance.\n\nThis may involve initialization of the internal buffer.\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](int \"Int - The standard Int type.\")\n\nThe length of `this` StringBuf in characters.\n\n## Methods\n\n### [`add`](#add)`<``T``>(``x:``T``):`[`Void`](void \"Void - The standard Void type.\")\n\nAppends the representation of `x` to `this` StringBuf.\n\nThe exact representation of `x` may vary per platform. To get more consistent behavior, this function should be called with Std.string(x).\n\nIf `x` is null, the String \"null\" is appended.\n\n### [`addChar`](#addChar)`(``c:`[`Int`](int \"Int - The standard Int type.\")`):`[`Void`](void \"Void - The standard Void type.\")\n\nAppends the character identified by `c` to `this` StringBuf.\n\nIf `c` is negative or has another invalid value, the result is unspecified.\n\n### [`addSub`](#addSub)`(``s:`[`String`](string \"String - The basic String class.\")`,`` ``pos:`[`Int`](int \"Int - The standard Int type.\")`,`` ``?len:`[`Int`](int \"Int - The standard Int type.\")`):`[`Void`](void \"Void - The standard Void type.\")\n\nAppends a substring of `s` to `this` StringBuf.\n\nThis function expects `pos` and `len` to describe a valid substring of `s`, or else the result is unspecified. To get more robust behavior, `this.`[`add`](#add)`(s.substr(pos,len))` can be used instead.\n\nIf `s` or `pos` are null, the result is unspecified.\n\nIf `len` is omitted or null, the substring ranges from `pos` to the end of `s`.\n\n### [`toString`](#toString)`():`[`String`](string \"String - The basic String class.\")\n\nReturns the content of `this` StringBuf as String.\n\nThe buffer is not emptied by this operation.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/StringBuf.html](https://api.haxe.org/StringBuf.html)"
- name: StringBuf.add()
  id: stringbuf#add
  summary: Appends the representation of x to this StringBuf
  belongs_to: StringBuf
  description: |-
    ### [`add`](#add)`<``T``>(``x:``T``):`[`Void`](void "Void - The standard Void type.")

    Appends the representation of `x` to `this` StringBuf.

    The exact representation of `x` may vary per platform. To get more consistent behavior, this function should be called with Std.string(x).

    If `x` is null, the String "null" is appended.
- name: StringBuf.addChar()
  id: stringbuf#addChar
  summary: Appends the character identified by c to this StringBuf
  belongs_to: StringBuf
  description: |-
    ### [`addChar`](#addChar)`(``c:`[`Int`](int "Int - The standard Int type.")`):`[`Void`](void "Void - The standard Void type.")

    Appends the character identified by `c` to `this` StringBuf.

    If `c` is negative or has another invalid value, the result is unspecified.
- name: StringBuf.addSub()
  id: stringbuf#addSub
  summary: Appends a substring of s to this StringBuf
  belongs_to: StringBuf
  description: |-
    ### [`addSub`](#addSub)`(``s:`[`String`](string "String - The basic String class.")`,``pos:`[`Int`](int "Int - The standard Int type.")`,``?len:`[`Int`](int "Int - The standard Int type.")`):`[`Void`](void "Void - The standard Void type.")

    Appends a substring of `s` to `this` StringBuf.

    This function expects `pos` and `len` to describe a valid substring of `s`, or else the result is unspecified. To get more robust behavior, `this.`[`add`](#add)`(s.substr(pos,len))` can be used instead.

    If `s` or `pos` are null, the result is unspecified.

    If `len` is omitted or null, the substring ranges from `pos` to the end of `s`.
- name: StringBuf.length
  id: stringbuf#length
  summary: The length of this StringBuf in characters
  belongs_to: StringBuf
  description: |-
    ### `read only`[`length`](#length)`:`[`Int`](int "Int - The standard Int type.")

    The length of `this` StringBuf in characters.

    ## Methods
- name: StringBuf.toString()
  id: stringbuf#toString
  summary: Returns the content of this StringBuf as String
  belongs_to: StringBuf
  description: "### [`toString`](#toString)`():`[`String`](string \"String - The basic String class.\")\n\nReturns the content of `this` StringBuf as String.\n\nThe buffer is not emptied by this operation.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/StringBuf.html](https://api.haxe.org/StringBuf.html)"
- name: StringTools
  id: stringtools
  summary: This class provides advanced methods on Strings
  description: "# StringTools\n\n[no package](index)\n\n*Available on all platforms*\n\nThis class provides advanced methods on Strings. It is ideally used with `using `[`StringTools`](stringtools) and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html) to the [`String`](string) class.\n\nIf the first argument to any of the methods is null, the result is unspecified.\n\n## Static methods\n\n### `static``inline`[`contains`](#contains)`(``s:`[`String`](string \"String - The basic String class.\")`,`` ``value:`[`String`](string \"String - The basic String class.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nReturns [`true`](bool) if `s` contains `value` and [`false`](bool) otherwise.\n\nWhen `value` is `null`, the result is unspecified.\n\n### `static`[`endsWith`](#endsWith)`(``s:`[`String`](string \"String - The basic String class.\")`,`` ``end:`[`String`](string \"String - The basic String class.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if the string `s` ends with the string `end`.\n\nIf `end` is `null`, the result is unspecified.\n\nIf `end` is the empty String `\"\"`, the result is true.\n\n### `static`[`fastCodeAt`](#fastCodeAt)`(``s:`[`String`](string \"String - The basic String class.\")`,`` ``index:`[`Int`](int \"Int - The standard Int type.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the character code at position `index` of String `s`, or an end-of-file indicator at if `position` equals `s.length`.\n\nThis method is faster than [`String.charCodeAt`](string#charCodeAt)`()` on some platforms, but the result is unspecified if `index` is negative or greater than `s.length`.\n\nEnd of file status can be checked by calling [`StringTools.isEof`](stringtools#isEof)`()` with the returned value as argument.\n\nThis operation is not guaranteed to work if `s` contains the `\\0` character.\n\n### `static`[`hex`](#hex)`(``n:`[`Int`](int \"Int - The standard Int type.\")`,`` ``?digits:`[`Int`](int \"Int - The standard Int type.\")`):`[`String`](string \"String - The basic String class.\")\n\nEncodes `n` into a hexadecimal representation.\n\nIf `digits` is specified, the resulting String is padded with \"0\" until its `length` equals `digits`.\n\n### `static`[`htmlEscape`](#htmlEscape)`(``s:`[`String`](string \"String - The basic String class.\")`,`` ``?quotes:`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`String`](string \"String - The basic String class.\")\n\nEscapes HTML special characters of the string `s`.\n\nThe following replacements are made:\n\n- `&` becomes `&amp`;\n- `<` becomes `&lt`;\n- `>` becomes `&gt`;\n\nIf `quotes` is true, the following characters are also replaced:\n\n- `\"` becomes `&quot`;\n- `'` becomes `&#039`;\n\n### `static`[`htmlUnescape`](#htmlUnescape)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nUnescapes HTML special characters of the string `s`.\n\n### This is the inverse operation to htmlEscape, i.e. the following always holds: `htmlUnescape(htmlEscape(s)) == s`\n\nThe replacements follow:\n\n- `&amp;` becomes `&`\n- `&lt;` becomes `<`\n- `&gt;` becomes `>`\n- `&quot;` becomes `\"`\n- `&#039;` becomes `'`\n\n### `static``inline`[`isEof`](#isEof)`(``c:`[`Int`](int \"Int - The standard Int type.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `c` represents the end-of-file (EOF) character.\n\n### `static`[`isSpace`](#isSpace)`(``s:`[`String`](string \"String - The basic String class.\")`,`` ``pos:`[`Int`](int \"Int - The standard Int type.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if the character in the string `s` at position `pos` is a space.\n\nA character is considered to be a space character if its character code is 9,10,11,12,13 or 32.\n\nIf `s` is the empty String `\"\"`, or if pos is not a valid position within `s`, the result is false.\n\n### `static``inline`[`iterator`](#iterator)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`StringIterator`](haxe/iterators/stringiterator \"haxe.iterators.StringIterator - This iterator can be used to iterate over char codes in a string.\")\n\nReturns an iterator of the char codes.\n\nNote that char codes may differ across platforms because of different internal encoding of strings in different runtimes. For the consistent cross-platform UTF8 char codes see [`haxe.iterators.StringIteratorUnicode`](haxe/iterators/stringiteratorunicode#StringIteratorUnicode).\n\n### `static``inline`[`keyValueIterator`](#keyValueIterator)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`StringKeyValueIterator`](haxe/iterators/stringkeyvalueiterator \"haxe.iterators.StringKeyValueIterator - This iterator can be used to iterate over char indexes and char codes in a string.\")\n\nReturns an iterator of the char indexes and codes.\n\nNote that char codes may differ across platforms because of different internal encoding of strings in different of runtimes. For the consistent cross-platform UTF8 char codes see [`haxe.iterators.StringKeyValueIteratorUnicode`](haxe/iterators/stringkeyvalueiteratorunicode#StringKeyValueIteratorUnicode).\n\n### `static`[`lpad`](#lpad)`(``s:`[`String`](string \"String - The basic String class.\")`,`` ``c:`[`String`](string \"String - The basic String class.\")`,`` ``l:`[`Int`](int \"Int - The standard Int type.\")`):`[`String`](string \"String - The basic String class.\")\n\nConcatenates `c` to `s` until `s.length` is at least `l`.\n\nIf `c` is the empty String `\"\"` or if `l` does not exceed `s.length`, `s` is returned unchanged.\n\nIf `c.length` is 1, the resulting String length is exactly `l`.\n\nOtherwise the length may exceed `l`.\n\nIf `c` is null, the result is unspecified.\n\n### `static`[`ltrim`](#ltrim)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nRemoves leading space characters of `s`.\n\nThis function internally calls `isSpace()` to decide which characters to remove.\n\nIf `s` is the empty String `\"\"` or consists only of space characters, the result is the empty String `\"\"`.\n\n### `static`[`replace`](#replace)`(``s:`[`String`](string \"String - The basic String class.\")`,`` ``sub:`[`String`](string \"String - The basic String class.\")`,`` ``by:`[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nReplace all occurrences of the String `sub` in the String `s` by the String `by`.\n\nIf `sub` is the empty String `\"\"`, `by` is inserted after each character of `s` except the last one. If `by` is also the empty String `\"\"`, `s` remains unchanged.\n\nIf `sub` or `by` are null, the result is unspecified.\n\n### `static`[`rpad`](#rpad)`(``s:`[`String`](string \"String - The basic String class.\")`,`` ``c:`[`String`](string \"String - The basic String class.\")`,`` ``l:`[`Int`](int \"Int - The standard Int type.\")`):`[`String`](string \"String - The basic String class.\")\n\nAppends `c` to `s` until `s.length` is at least `l`.\n\nIf `c` is the empty String `\"\"` or if `l` does not exceed `s.length`, `s` is returned unchanged.\n\nIf `c.length` is 1, the resulting String length is exactly `l`.\n\nOtherwise the length may exceed `l`.\n\nIf `c` is null, the result is unspecified.\n\n### `static`[`rtrim`](#rtrim)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nRemoves trailing space characters of `s`.\n\nThis function internally calls `isSpace()` to decide which characters to remove.\n\nIf `s` is the empty String `\"\"` or consists only of space characters, the result is the empty String `\"\"`.\n\n### `static`[`startsWith`](#startsWith)`(``s:`[`String`](string \"String - The basic String class.\")`,`` ``start:`[`String`](string \"String - The basic String class.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if the string `s` starts with the string `start`.\n\nIf `start` is `null`, the result is unspecified.\n\nIf `start` is the empty String `\"\"`, the result is true.\n\n### `static`[`trim`](#trim)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nRemoves leading and trailing space characters of `s`.\n\nThis is a convenience function for `ltrim(rtrim(s))`.\n\n### `static`[`urlDecode`](#urlDecode)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nDecode an URL using the standard format.\n\n### `static`[`urlEncode`](#urlEncode)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nEncode an URL by using the standard format.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/StringTools.html](https://api.haxe.org/StringTools.html)"
- name: StringTools.contains()
  id: stringtools#contains
  summary: Returns true if s contains value and false otherwise
  belongs_to: StringTools
  description: |-
    ### `static``inline`[`contains`](#contains)`(``s:`[`String`](string "String - The basic String class.")`,``value:`[`String`](string "String - The basic String class.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Returns [`true`](bool) if `s` contains `value` and [`false`](bool) otherwise.

    When `value` is `null`, the result is unspecified.
- name: StringTools.endsWith()
  id: stringtools#endsWith
  summary: Tells if the string s ends with the string end
  belongs_to: StringTools
  description: |-
    ### `static`[`endsWith`](#endsWith)`(``s:`[`String`](string "String - The basic String class.")`,``end:`[`String`](string "String - The basic String class.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if the string `s` ends with the string `end`.

    If `end` is `null`, the result is unspecified.

    If `end` is the empty String `""`, the result is true.
- name: StringTools.fastCodeAt()
  id: stringtools#fastCodeAt
  summary: Returns the character code at position index of String s, or an end-of-file indicator at if position equals s.length
  belongs_to: StringTools
  description: |-
    ### `static`[`fastCodeAt`](#fastCodeAt)`(``s:`[`String`](string "String - The basic String class.")`,``index:`[`Int`](int "Int - The standard Int type.")`):`[`Int`](int "Int - The standard Int type.")

    Returns the character code at position `index` of String `s`, or an end-of-file indicator at if `position` equals `s.length`.

    This method is faster than [`String.charCodeAt`](string#charCodeAt)`()` on some platforms, but the result is unspecified if `index` is negative or greater than `s.length`.

    End of file status can be checked by calling [`StringTools.isEof`](stringtools#isEof)`()` with the returned value as argument.

    This operation is not guaranteed to work if `s` contains the `\0` character.
- name: StringTools.hex()
  id: stringtools#hex
  summary: Encodes n into a hexadecimal representation
  belongs_to: StringTools
  description: |-
    ### `static`[`hex`](#hex)`(``n:`[`Int`](int "Int - The standard Int type.")`,``?digits:`[`Int`](int "Int - The standard Int type.")`):`[`String`](string "String - The basic String class.")

    Encodes `n` into a hexadecimal representation.

    If `digits` is specified, the resulting String is padded with "0" until its `length` equals `digits`.
- name: StringTools.htmlEscape()
  id: stringtools#htmlEscape
  summary: Escapes HTML special characters of the string s
  belongs_to: StringTools
  description: |-
    ### `static`[`htmlEscape`](#htmlEscape)`(``s:`[`String`](string "String - The basic String class.")`,``?quotes:`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")`):`[`String`](string "String - The basic String class.")

    Escapes HTML special characters of the string `s`.

    The following replacements are made:

    - `&` becomes `&amp`;
    - `<` becomes `&lt`;
    - `>` becomes `&gt`;

    If `quotes` is true, the following characters are also replaced:

    - `"` becomes `&quot`;
    - `'` becomes `&#039`;
- name: StringTools.htmlUnescape()
  id: stringtools#htmlUnescape
  summary: Unescapes HTML special characters of the string s
  belongs_to: StringTools
  description: |-
    ### `static`[`htmlUnescape`](#htmlUnescape)`(``s:`[`String`](string "String - The basic String class.")`):`[`String`](string "String - The basic String class.")

    Unescapes HTML special characters of the string `s`.

    ### This is the inverse operation to htmlEscape, i.e. the following always holds: `htmlUnescape(htmlEscape(s)) == s`

    The replacements follow:

    - `&amp;` becomes `&`
    - `&lt;` becomes `<`
    - `&gt;` becomes `>`
    - `&quot;` becomes `"`
    - `&#039;` becomes `'`

    &nbsp;
- name: StringTools.isEof()
  id: stringtools#isEof
  summary: Tells if c represents the end-of-file (EOF) character
  belongs_to: StringTools
  description: |-
    ### `static``inline`[`isEof`](#isEof)`(``c:`[`Int`](int "Int - The standard Int type.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if `c` represents the end-of-file (EOF) character.
- name: StringTools.isSpace()
  id: stringtools#isSpace
  summary: Tells if the character in the string s at position pos is a space
  belongs_to: StringTools
  description: |-
    ### `static`[`isSpace`](#isSpace)`(``s:`[`String`](string "String - The basic String class.")`,``pos:`[`Int`](int "Int - The standard Int type.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if the character in the string `s` at position `pos` is a space.

    A character is considered to be a space character if its character code is 9,10,11,12,13 or 32.

    If `s` is the empty String `""`, or if pos is not a valid position within `s`, the result is false.
- name: StringTools.iterator()
  id: stringtools#iterator
  summary: Returns an iterator of the char codes
  belongs_to: StringTools
  description: |-
    ### `static``inline`[`iterator`](#iterator)`(``s:`[`String`](string "String - The basic String class.")`):`[`StringIterator`](haxe/iterators/stringiterator "haxe.iterators.StringIterator - This iterator can be used to iterate over char codes in a string.")

    Returns an iterator of the char codes.

    Note that char codes may differ across platforms because of different internal encoding of strings in different runtimes. For the consistent cross-platform UTF8 char codes see [`haxe.iterators.StringIteratorUnicode`](haxe/iterators/stringiteratorunicode#StringIteratorUnicode).
- name: StringTools.keyValueIterator()
  id: stringtools#keyValueIterator
  summary: Returns an iterator of the char indexes and codes
  belongs_to: StringTools
  description: |-
    ### `static``inline`[`keyValueIterator`](#keyValueIterator)`(``s:`[`String`](string "String - The basic String class.")`):`[`StringKeyValueIterator`](haxe/iterators/stringkeyvalueiterator "haxe.iterators.StringKeyValueIterator - This iterator can be used to iterate over char indexes and char codes in a string.")

    Returns an iterator of the char indexes and codes.

    Note that char codes may differ across platforms because of different internal encoding of strings in different of runtimes. For the consistent cross-platform UTF8 char codes see [`haxe.iterators.StringKeyValueIteratorUnicode`](haxe/iterators/stringkeyvalueiteratorunicode#StringKeyValueIteratorUnicode).
- name: StringTools.lpad()
  id: stringtools#lpad
  summary: Concatenates c to s until s.length is at least l
  belongs_to: StringTools
  description: |-
    ### `static`[`lpad`](#lpad)`(``s:`[`String`](string "String - The basic String class.")`,``c:`[`String`](string "String - The basic String class.")`,``l:`[`Int`](int "Int - The standard Int type.")`):`[`String`](string "String - The basic String class.")

    Concatenates `c` to `s` until `s.length` is at least `l`.

    If `c` is the empty String `""` or if `l` does not exceed `s.length`, `s` is returned unchanged.

    If `c.length` is 1, the resulting String length is exactly `l`.

    Otherwise the length may exceed `l`.

    If `c` is null, the result is unspecified.
- name: StringTools.ltrim()
  id: stringtools#ltrim
  summary: Removes leading space characters of s
  belongs_to: StringTools
  description: |-
    ### `static`[`ltrim`](#ltrim)`(``s:`[`String`](string "String - The basic String class.")`):`[`String`](string "String - The basic String class.")

    Removes leading space characters of `s`.

    This function internally calls `isSpace()` to decide which characters to remove.

    If `s` is the empty String `""` or consists only of space characters, the result is the empty String `""`.
- name: StringTools.replace()
  id: stringtools#replace
  summary: Replace all occurrences of the String sub in the String s by the String by
  belongs_to: StringTools
  description: |-
    ### `static`[`replace`](#replace)`(``s:`[`String`](string "String - The basic String class.")`,``sub:`[`String`](string "String - The basic String class.")`,``by:`[`String`](string "String - The basic String class.")`):`[`String`](string "String - The basic String class.")

    Replace all occurrences of the String `sub` in the String `s` by the String `by`.

    If `sub` is the empty String `""`, `by` is inserted after each character of `s` except the last one. If `by` is also the empty String `""`, `s` remains unchanged.

    If `sub` or `by` are null, the result is unspecified.
- name: StringTools.rpad()
  id: stringtools#rpad
  summary: Appends c to s until s.length is at least l
  belongs_to: StringTools
  description: |-
    ### `static`[`rpad`](#rpad)`(``s:`[`String`](string "String - The basic String class.")`,``c:`[`String`](string "String - The basic String class.")`,``l:`[`Int`](int "Int - The standard Int type.")`):`[`String`](string "String - The basic String class.")

    Appends `c` to `s` until `s.length` is at least `l`.

    If `c` is the empty String `""` or if `l` does not exceed `s.length`, `s` is returned unchanged.

    If `c.length` is 1, the resulting String length is exactly `l`.

    Otherwise the length may exceed `l`.

    If `c` is null, the result is unspecified.
- name: StringTools.rtrim()
  id: stringtools#rtrim
  summary: Removes trailing space characters of s
  belongs_to: StringTools
  description: |-
    ### `static`[`rtrim`](#rtrim)`(``s:`[`String`](string "String - The basic String class.")`):`[`String`](string "String - The basic String class.")

    Removes trailing space characters of `s`.

    This function internally calls `isSpace()` to decide which characters to remove.

    If `s` is the empty String `""` or consists only of space characters, the result is the empty String `""`.
- name: StringTools.startsWith()
  id: stringtools#startsWith
  summary: Tells if the string s starts with the string start
  belongs_to: StringTools
  description: |-
    ### `static`[`startsWith`](#startsWith)`(``s:`[`String`](string "String - The basic String class.")`,``start:`[`String`](string "String - The basic String class.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if the string `s` starts with the string `start`.

    If `start` is `null`, the result is unspecified.

    If `start` is the empty String `""`, the result is true.
- name: StringTools.trim()
  id: stringtools#trim
  summary: Removes leading and trailing space characters of s
  belongs_to: StringTools
  description: |-
    ### `static`[`trim`](#trim)`(``s:`[`String`](string "String - The basic String class.")`):`[`String`](string "String - The basic String class.")

    Removes leading and trailing space characters of `s`.

    This is a convenience function for `ltrim(rtrim(s))`.
- name: StringTools.urlDecode()
  id: stringtools#urlDecode
  summary: Decode an URL using the standard format
  belongs_to: StringTools
  description: |-
    ### `static`[`urlDecode`](#urlDecode)`(``s:`[`String`](string "String - The basic String class.")`):`[`String`](string "String - The basic String class.")

    Decode an URL using the standard format.
- name: StringTools.urlEncode()
  id: stringtools#urlEncode
  summary: Encode an URL by using the standard format
  belongs_to: StringTools
  description: "### `static`[`urlEncode`](#urlEncode)`(``s:`[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nEncode an URL by using the standard format.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/StringTools.html](https://api.haxe.org/StringTools.html)"
- name: SysTools
  id: haxe/systools
  summary: Character codes of the characters that will be escaped by quoteWinArg(_, true)
  description: "# SysTools\n\npackage [haxe](index)\n\n*Available on all platforms*\n\n## Static variables\n\n### `static``final``read only`[`winMetaCharacters`](#winMetaCharacters)`:`[`ReadOnlyArray`](ds/readonlyarray \"haxe.ds.ReadOnlyArray - ReadOnlyArray is an abstract over an ordinary Array which only exposes APIs that don't modify the instance, hence \"read-only\".\")`<`[`Int`](../int \"Int - The standard Int type.\")`>`` = [\" \".code, \"(\".code, \")\".code, \"%\".code, \"!\".code, \"^\".code, \"\\\"\".code, \"<\".code, \">\".code, \"&\".code, \"|\".code, \"\\n\".code, \"\\r\".code, \",\".code, \";\".code]`\n\nCharacter codes of the characters that will be escaped by `quoteWinArg(_, `[`true`](../bool)`)`.\n\n## Static methods\n\n### `static`[`quoteUnixArg`](#quoteUnixArg)`(``argument:`[`String`](../string \"String - The basic String class.\")`):`[`String`](../string \"String - The basic String class.\")\n\nReturns a String that can be used as a single command line argument on Unix. The input will be quoted, or escaped if necessary.\n\n### `static`[`quoteWinArg`](#quoteWinArg)`(``argument:`[`String`](../string \"String - The basic String class.\")`,`` ``escapeMetaCharacters:`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`String`](../string \"String - The basic String class.\")\n\nReturns a String that can be used as a single command line argument on Windows. The input will be quoted, or escaped if necessary, such that the output will be parsed as a single argument using the rule specified in http://msdn.microsoft.com/en-us/library/ms880421\n\nExamples:\n\n``` prettyprint\nquoteWinArg(\"abc\") == \"abc\";\nquoteWinArg(\"ab c\") == '\"ab c\"';\n```\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/SysTools.html](https://api.haxe.org/haxe/SysTools.html)"
- name: SysTools.quoteUnixArg()
  id: haxe/systools#quoteUnixArg
  summary: Returns a String that can be used as a single command line argument on Unix
  belongs_to: SysTools
  description: |-
    ### `static`[`quoteUnixArg`](#quoteUnixArg)`(``argument:`[`String`](../string "String - The basic String class.")`):`[`String`](../string "String - The basic String class.")

    Returns a String that can be used as a single command line argument on Unix. The input will be quoted, or escaped if necessary.
- name: SysTools.quoteWinArg()
  id: haxe/systools#quoteWinArg
  summary: Returns a String that can be used as a single command line argument on Windows
  belongs_to: SysTools
  description: "### `static`[`quoteWinArg`](#quoteWinArg)`(``argument:`[`String`](../string \"String - The basic String class.\")`,``escapeMetaCharacters:`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")`):`[`String`](../string \"String - The basic String class.\")\n\nReturns a String that can be used as a single command line argument on Windows. The input will be quoted, or escaped if necessary, such that the output will be parsed as a single argument using the rule specified in http://msdn.microsoft.com/en-us/library/ms880421\n\nExamples:\n\n          quoteWinArg(\"abc\") == \"abc\";\n    quoteWinArg(\"ab c\") == '\"ab c\"';\n        \n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/SysTools.html](https://api.haxe.org/haxe/SysTools.html)"
- name: SysTools.winMetaCharacters()
  id: haxe/systools#winMetaCharacters
  summary: Character codes of the characters that will be escaped by quoteWinArg(_, true)
  belongs_to: SysTools
  description: |-
    ### `static``final``read only`[`winMetaCharacters`](#winMetaCharacters)`:`[`ReadOnlyArray`](ds/readonlyarray "haxe.ds.ReadOnlyArray - ReadOnlyArray is an abstract over an ordinary Array which only exposes APIs that don't modify the instance, hence "read-only".")`<`[`Int`](../int "Int - The standard Int type.")`>`` = [" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code, ",".code, ";".code]`

    Character codes of the characters that will be escaped by `quoteWinArg(_, `[`true`](../bool)`)`.

    ## Static methods
- name: Template
  id: haxe/template
  summary: Template provides a basic templating mechanism to replace values in a source String, and to have some basic logic
  description: "# Template\n\npackage [haxe](index)\n\n*Available on all platforms*\n\n[`Template`](template#Template) provides a basic templating mechanism to replace values in a source String, and to have some basic logic.\n\nA complete documentation of the supported syntax is available at: <https://haxe.org/manual/std-template.html>\n\n## Static variables\n\n### `static`[`globals`](#globals)`:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")` = { }`\n\nGlobal replacements which are used across all [`Template`](template#Template) instances. This has lower priority than the context argument of `execute()`.\n\n## Constructor\n\n### [`new`](#new)`(``str:`[`String`](../string \"String - The basic String class.\")`)`\n\nCreates a new [`Template`](template#Template) instance from `str`.\n\n`str` is parsed into tokens, which are stored for internal use. This means that multiple `execute()` operations on a single [`Template`](template#Template) instance are more efficient than one `execute()` operations on multiple [`Template`](template#Template) instances.\n\nIf `str` is `null`, the result is unspecified.\n\n## Methods\n\n### [`execute`](#execute)`(``context:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,`` ``?macros:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`String`](../string \"String - The basic String class.\")\n\nExecutes `this` [`Template`](template#Template), taking into account `context` for replacements and `macros` for callback functions.\n\nIf `context` has a field `name`, its value replaces all occurrences of `::name::` in the [`Template`](template#Template). Otherwise [`Template.globals`](template#globals) is checked instead, If `name` is not a field of that either, `::name::` is replaced with `null`.\n\nIf `macros` has a field `name`, all occurrences of `$$name(args)` are replaced with the result of calling that field. The first argument is always the `resolve()` method, followed by the given arguments. If `macros` has no such field, the result is unspecified.\n\nIf `context` is `null`, the result is unspecified. If `macros` is `null`, no macros are used.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Template.html](https://api.haxe.org/haxe/Template.html)"
- name: Template.execute()
  id: haxe/template#execute
  summary: Executes this Template, taking into account context for replacements and macros for callback functions
  belongs_to: Template
  description: "### [`execute`](#execute)`(``context:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`,``?macros:`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`String`](../string \"String - The basic String class.\")\n\nExecutes `this` [`Template`](template#Template), taking into account `context` for replacements and `macros` for callback functions.\n\nIf `context` has a field `name`, its value replaces all occurrences of `::name::` in the [`Template`](template#Template). Otherwise [`Template.globals`](template#globals) is checked instead, If `name` is not a field of that either, `::name::` is replaced with `null`.\n\nIf `macros` has a field `name`, all occurrences of `$$name(args)` are replaced with the result of calling that field. The first argument is always the `resolve()` method, followed by the given arguments. If `macros` has no such field, the result is unspecified.\n\nIf `context` is `null`, the result is unspecified. If `macros` is `null`, no macros are used.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Template.html](https://api.haxe.org/haxe/Template.html)"
- name: Template.globals
  id: haxe/template#globals
  summary: Global replacements which are used across all Template instances
  belongs_to: Template
  description: |-
    ### `static`[`globals`](#globals)`:`[`Dynamic`](../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")` = { }`

    Global replacements which are used across all [`Template`](template#Template) instances. This has lower priority than the context argument of `execute()`.

    ## Constructor

    ### [`new`](#new)`(``str:`[`String`](../string "String - The basic String class.")`)`

    Creates a new [`Template`](template#Template) instance from `str`.

    `str` is parsed into tokens, which are stored for internal use. This means that multiple `execute()` operations on a single [`Template`](template#Template) instance are more efficient than one `execute()` operations on multiple [`Template`](template#Template) instances.

    If `str` is `null`, the result is unspecified.

    ## Methods
- name: Timer
  id: haxe/timer
  summary: The Timer class allows you to create asynchronous timers on platforms that support events
  description: "# Timer\n\npackage [haxe](index)\n\n*Available on all platforms*\n\nThe [`Timer`](timer#Timer) class allows you to create asynchronous timers on platforms that support events.\n\nThe intended usage is to create an instance of the [`Timer`](timer#Timer) class with a given interval, set its `run()` method to a custom function to be invoked and eventually call `stop()` to stop the [`Timer`](timer#Timer).\n\nNote that a running [`Timer`](timer#Timer) may or may not prevent the program to exit automatically when `main()` returns.\n\nIt is also possible to extend this class and override its `run()` method in the child class.\n\n## Static methods\n\n### `static`[`delay`](#delay)`(``f:() ‑> `[`Void`](../void \"Void - The standard Void type.\")`,`` ``time_ms:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Timer`](timer \"haxe.Timer - The Timer class allows you to create asynchronous timers on platforms that support events.\")\n\nInvokes `f` after `time_ms` milliseconds.\n\nThis is a convenience function for creating a new Timer instance with `time_ms` as argument, binding its `run()` method to `f` and then stopping `this` Timer upon the first invocation.\n\nIf `f` is `null`, the result is unspecified.\n\n### `static`[`measure`](#measure)`<``T``>(``f:() ‑> ``T``,`` ``?pos:`[`Null`](../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`PosInfos`](posinfos \"haxe.PosInfos - PosInfos is a magic type which can be used to generate position information into the output for debugging use.\")`>``):``T`\n\nMeasures the time it takes to execute `f`, in seconds with fractions.\n\nThis is a convenience function for calculating the difference between [`Timer.stamp`](timer#stamp)`()` before and after the invocation of `f`.\n\nThe difference is passed as argument to [`Log.trace`](log#trace)`()`, with `\"s\"` appended to denote the unit. The optional `pos` argument is passed through.\n\nIf `f` is `null`, the result is unspecified.\n\n### `static``inline`[`stamp`](#stamp)`():`[`Float`](../float \"Float - The standard Float type, this is a double-precision IEEE 64bit float.\")\n\nReturns a timestamp, in seconds with fractions.\n\nThe value itself might differ depending on platforms, only differences between two values make sense.\n\n## Constructor\n\n### [`new`](#new)`(``time_ms:`[`Int`](../int \"Int - The standard Int type.\")`)`\n\nCreates a new timer that will run every `time_ms` milliseconds.\n\nAfter creating the Timer instance, it calls `this.`[`run`](#run) repeatedly, with delays of `time_ms` milliseconds, until `this.`[`stop`](#stop) is called.\n\nThe first invocation occurs after `time_ms` milliseconds, not immediately.\n\nThe accuracy of this may be platform-dependent.\n\n## Methods\n\n### `dynamic`[`run`](#run)`():`[`Void`](../void \"Void - The standard Void type.\")\n\nThis method is invoked repeatedly on `this` Timer.\n\nIt can be overridden in a subclass, or rebound directly to a custom function:\n\n``` prettyprint\nvar timer = new haxe.Timer(1000); // 1000ms delay\ntimer.run = function() { ... }\n```\n\nOnce bound, it can still be rebound to different functions until `this` Timer is stopped through a call to `this.`[`stop`](#stop).\n\n### [`stop`](#stop)`():`[`Void`](../void \"Void - The standard Void type.\")\n\nStops `this` Timer.\n\nAfter calling this method, no additional invocations of `this.`[`run`](#run) will occur.\n\nIt is not possible to restart `this` Timer once stopped.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Timer.html](https://api.haxe.org/haxe/Timer.html)"
- name: Timer.delay()
  id: haxe/timer#delay
  summary: Invokes f after time_ms milliseconds
  belongs_to: Timer
  description: |-
    ### `static`[`delay`](#delay)`(``f:() ‑> `[`Void`](../void "Void - The standard Void type.")`,``time_ms:`[`Int`](../int "Int - The standard Int type.")`):`[`Timer`](timer "haxe.Timer - The Timer class allows you to create asynchronous timers on platforms that support events.")

    Invokes `f` after `time_ms` milliseconds.

    This is a convenience function for creating a new Timer instance with `time_ms` as argument, binding its `run()` method to `f` and then stopping `this` Timer upon the first invocation.

    If `f` is `null`, the result is unspecified.
- name: Timer.measure()
  id: haxe/timer#measure
  summary: Measures the time it takes to execute f, in seconds with fractions
  belongs_to: Timer
  description: |-
    ### `static`[`measure`](#measure)`<``T``>(``f:() ‑> ``T``,``?pos:`[`Null`](../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`PosInfos`](posinfos "haxe.PosInfos - PosInfos is a magic type which can be used to generate position information into the output for debugging use.")`>``):``T`

    Measures the time it takes to execute `f`, in seconds with fractions.

    This is a convenience function for calculating the difference between [`Timer.stamp`](timer#stamp)`()` before and after the invocation of `f`.

    The difference is passed as argument to [`Log.trace`](log#trace)`()`, with `"s"` appended to denote the unit. The optional `pos` argument is passed through.

    If `f` is `null`, the result is unspecified.
- name: Timer.run()
  id: haxe/timer#run
  summary: This method is invoked repeatedly on this Timer
  belongs_to: Timer
  description: "### `dynamic`[`run`](#run)`():`[`Void`](../void \"Void - The standard Void type.\")\n\nThis method is invoked repeatedly on `this` Timer.\n\nIt can be overridden in a subclass, or rebound directly to a custom function:\n\n          var timer = new haxe.Timer(1000); // 1000ms delay\n    timer.run = function() { ... }\n        \n\nOnce bound, it can still be rebound to different functions until `this` Timer is stopped through a call to `this.`[`stop`](#stop)."
- name: Timer.stamp()
  id: haxe/timer#stamp
  summary: Returns a timestamp, in seconds with fractions
  belongs_to: Timer
  description: |-
    ### `static``inline`[`stamp`](#stamp)`():`[`Float`](../float "Float - The standard Float type, this is a double-precision IEEE 64bit float.")

    Returns a timestamp, in seconds with fractions.

    The value itself might differ depending on platforms, only differences between two values make sense.

    ## Constructor

    ### [`new`](#new)`(``time_ms:`[`Int`](../int "Int - The standard Int type.")`)`

    Creates a new timer that will run every `time_ms` milliseconds.

    After creating the Timer instance, it calls `this.`[`run`](#run) repeatedly, with delays of `time_ms` milliseconds, until `this.`[`stop`](#stop) is called.

    The first invocation occurs after `time_ms` milliseconds, not immediately.

    The accuracy of this may be platform-dependent.

    ## Methods
- name: Timer.stop()
  id: haxe/timer#stop
  summary: Stops this Timer
  belongs_to: Timer
  description: "### [`stop`](#stop)`():`[`Void`](../void \"Void - The standard Void type.\")\n\nStops `this` Timer.\n\nAfter calling this method, no additional invocations of `this.`[`run`](#run) will occur.\n\nIt is not possible to restart `this` Timer once stopped.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Timer.html](https://api.haxe.org/haxe/Timer.html)"
- name: Type
  id: type
  summary: The Haxe Reflection API allows retrieval of type information at runtime
  description: "# Type\n\n[no package](index)\n\n*Available on all platforms*\n\nThe Haxe Reflection API allows retrieval of type information at runtime.\n\nThis class complements the more lightweight Reflect class, with a focus on class and enum instances.\n\nSee also:\n\n- <https://haxe.org/manual/types.html>\n\n- <https://haxe.org/manual/std-reflection.html>\n\n## Static methods\n\n### `static`[`allEnums`](#allEnums)`<``T``>(``e:`[`Enum`](enum \"Enum - An abstract type that represents an Enum type.\")`<``T``>``):`[`Array`](array \"Array\")`<``T``>`\n\nReturns a list of all constructors of enum `e` that require no arguments.\n\nThis may return the empty Array `[]` if all constructors of `e` require arguments.\n\nOtherwise an instance of `e` constructed through each of its non- argument constructors is returned, in the order of the constructor declaration.\n\nIf `e` is null, the result is unspecified.\n\n### `static`[`createEmptyInstance`](#createEmptyInstance)`<``T``>(``cl:`[`Class`](class \"Class - An abstract type that represents a Class.\")`<``T``>``):``T`\n\nCreates an instance of class `cl`.\n\nThis function guarantees that the class constructor is not called.\n\nIf `cl` is null, the result is unspecified.\n\n### `static`[`createEnum`](#createEnum)`<``T``>(``e:`[`Enum`](enum \"Enum - An abstract type that represents an Enum type.\")`<``T``>,`` ``constr:`[`String`](string \"String - The basic String class.\")`,`` ``?params:`[`Array`](array \"Array\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>``):``T`\n\nCreates an instance of enum `e` by calling its constructor `constr` with arguments `params`.\n\nIf `e` or `constr` is null, or if enum `e` has no constructor named `constr`, or if the number of elements in `params` does not match the expected number of constructor arguments, or if any argument has an invalid type, the result is unspecified.\n\n### `static`[`createEnumIndex`](#createEnumIndex)`<``T``>(``e:`[`Enum`](enum \"Enum - An abstract type that represents an Enum type.\")`<``T``>,`` ``index:`[`Int`](int \"Int - The standard Int type.\")`,`` ``?params:`[`Array`](array \"Array\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>``):``T`\n\nCreates an instance of enum `e` by calling its constructor number `index` with arguments `params`.\n\nThe constructor indices are preserved from Haxe syntax, so the first declared is index 0, the next index 1 etc.\n\nIf `e` or `constr` is null, or if enum `e` has no constructor named `constr`, or if the number of elements in `params` does not match the expected number of constructor arguments, or if any argument has an invalid type, the result is unspecified.\n\n### `static`[`createInstance`](#createInstance)`<``T``>(``cl:`[`Class`](class \"Class - An abstract type that represents a Class.\")`<``T``>,`` ``args:`[`Array`](array \"Array\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>``):``T`\n\nCreates an instance of class `cl`, using `args` as arguments to the class constructor.\n\nThis function guarantees that the class constructor is called.\n\nDefault values of constructors arguments are not guaranteed to be taken into account.\n\nIf `cl` or `args` are null, or if the number of elements in `args` does not match the expected number of constructor arguments, or if any argument has an invalid type, or if `cl` has no own constructor, the result is unspecified.\n\nIn particular, default values of constructor arguments are not guaranteed to be taken into account.\n\n### `static`[`enumConstructor`](#enumConstructor)`(``e:`[`EnumValue`](enumvalue \"EnumValue - An abstract type that represents any enum value.\")`):`[`String`](string \"String - The basic String class.\")\n\nReturns the constructor name of enum instance `e`.\n\nThe result String does not contain any constructor arguments.\n\nIf `e` is null, the result is unspecified.\n\n### `static`[`enumEq`](#enumEq)`<``T``>(``a:``T``,`` ``b:``T``):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nRecursively compares two enum instances `a` and `b` by value.\n\nUnlike `a == b`, this function performs a deep equality check on the arguments of the constructors, if exists.\n\nIf `a` or `b` are null, the result is unspecified.\n\n### `static`[`enumIndex`](#enumIndex)`(``e:`[`EnumValue`](enumvalue \"EnumValue - An abstract type that represents any enum value.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\nReturns the index of enum instance `e`.\n\nThis corresponds to the original syntactic position of `e`. The index of the first declared constructor is 0, the next one is 1 etc.\n\nIf `e` is null, the result is unspecified.\n\n### `static`[`enumParameters`](#enumParameters)`(``e:`[`EnumValue`](enumvalue \"EnumValue - An abstract type that represents any enum value.\")`):`[`Array`](array \"Array\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\nReturns a list of the constructor arguments of enum instance `e`.\n\nIf `e` has no arguments, the result is \\[\\].\n\nOtherwise the result are the values that were used as arguments to `e`, in the order of their declaration.\n\nIf `e` is null, the result is unspecified.\n\n### `static`[`getClass`](#getClass)`<``T``>(``o:``T``):`[`Class`](class \"Class - An abstract type that represents a Class.\")`<``T``>`\n\nReturns the class of `o`, if `o` is a class instance.\n\nIf `o` is null or of a different type, null is returned.\n\nIn general, type parameter information cannot be obtained at runtime.\n\n### `static`[`getClassFields`](#getClassFields)`(``c:`[`Class`](class \"Class - An abstract type that represents a Class.\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>``):`[`Array`](array \"Array\")`<`[`String`](string \"String - The basic String class.\")`>`\n\nReturns a list of static fields of class `c`.\n\nThis does not include static fields of parent classes.\n\nThe order of the fields in the returned Array is unspecified.\n\nIf `c` is null, the result is unspecified.\n\n### `static`[`getClassName`](#getClassName)`(``c:`[`Class`](class \"Class - An abstract type that represents a Class.\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>``):`[`String`](string \"String - The basic String class.\")\n\nReturns the name of class `c`, including its path.\n\nIf `c` is inside a package, the package structure is returned dot- separated, with another dot separating the class name: `pack1.pack2.(...).packN.ClassName` If `c` is a sub-type of a Haxe module, that module is not part of the package structure.\n\nIf `c` has no package, the class name is returned.\n\nIf `c` is null, the result is unspecified.\n\nThe class name does not include any type parameters.\n\n### `static`[`getEnum`](#getEnum)`(``o:`[`EnumValue`](enumvalue \"EnumValue - An abstract type that represents any enum value.\")`):`[`Enum`](enum \"Enum - An abstract type that represents an Enum type.\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\nReturns the enum of enum instance `o`.\n\nAn enum instance is the result of using an enum constructor. Given an `enum Color { Red; }`, `getEnum(Red)` returns [`Enum`](enum)`<Color>`.\n\nIf `o` is null, null is returned.\n\nIn general, type parameter information cannot be obtained at runtime.\n\n### `static`[`getEnumConstructs`](#getEnumConstructs)`(``e:`[`Enum`](enum \"Enum - An abstract type that represents an Enum type.\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>``):`[`Array`](array \"Array\")`<`[`String`](string \"String - The basic String class.\")`>`\n\nReturns a list of the names of all constructors of enum `e`.\n\nThe order of the constructor names in the returned Array is preserved from the original syntax.\n\nIf `e` is null, the result is unspecified.\n\n### `static`[`getEnumName`](#getEnumName)`(``e:`[`Enum`](enum \"Enum - An abstract type that represents an Enum type.\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>``):`[`String`](string \"String - The basic String class.\")\n\nReturns the name of enum `e`, including its path.\n\nIf `e` is inside a package, the package structure is returned dot- separated, with another dot separating the enum name: `pack1.pack2.(...).packN.EnumName` If `e` is a sub-type of a Haxe module, that module is not part of the package structure.\n\nIf `e` has no package, the enum name is returned.\n\nIf `e` is null, the result is unspecified.\n\nThe enum name does not include any type parameters.\n\n### `static`[`getInstanceFields`](#getInstanceFields)`(``c:`[`Class`](class \"Class - An abstract type that represents a Class.\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>``):`[`Array`](array \"Array\")`<`[`String`](string \"String - The basic String class.\")`>`\n\nReturns a list of the instance fields of class `c`, including inherited fields.\n\nThis only includes fields which are known at compile-time. In particular, using `getInstanceFields(getClass(obj))` will not include any fields which were added to `obj` at runtime.\n\nThe order of the fields in the returned Array is unspecified.\n\nIf `c` is null, the result is unspecified.\n\n### `static`[`getSuperClass`](#getSuperClass)`(``c:`[`Class`](class \"Class - An abstract type that represents a Class.\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>``):`[`Class`](class \"Class - An abstract type that represents a Class.\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\nReturns the super-class of class `c`.\n\nIf `c` has no super class, null is returned.\n\nIf `c` is null, the result is unspecified.\n\nIn general, type parameter information cannot be obtained at runtime.\n\n### `static`[`resolveClass`](#resolveClass)`(``name:`[`String`](string \"String - The basic String class.\")`):`[`Class`](class \"Class - An abstract type that represents a Class.\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\nResolves a class by name.\n\nIf `name` is the path of an existing class, that class is returned.\n\nOtherwise null is returned.\n\nIf `name` is null or the path to a different type, the result is unspecified.\n\nThe class name must not include any type parameters.\n\n### `static`[`resolveEnum`](#resolveEnum)`(``name:`[`String`](string \"String - The basic String class.\")`):`[`Enum`](enum \"Enum - An abstract type that represents an Enum type.\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>`\n\nResolves an enum by name.\n\nIf `name` is the path of an existing enum, that enum is returned.\n\nOtherwise null is returned.\n\nIf `name` is null the result is unspecified.\n\nIf `name` is the path to a different type, null is returned.\n\nThe enum name must not include any type parameters.\n\n### `static`[`typeof`](#typeof)`(``v:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`ValueType`](valuetype \"ValueType - The different possible runtime types of a value.\")\n\nReturns the runtime type of value `v`.\n\nThe result corresponds to the type `v` has at runtime, which may vary per platform. Assumptions regarding this should be minimized to avoid surprises.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Type.html](https://api.haxe.org/Type.html)"
- name: Type.allEnums()
  id: type#allEnums
  summary: Returns a list of all constructors of enum e that require no arguments
  belongs_to: Type
  description: |-
    ### `static`[`allEnums`](#allEnums)`<``T``>(``e:`[`Enum`](enum "Enum - An abstract type that represents an Enum type.")`<``T``>``):`[`Array`](array "Array")`<``T``>`

    Returns a list of all constructors of enum `e` that require no arguments.

    This may return the empty Array `[]` if all constructors of `e` require arguments.

    Otherwise an instance of `e` constructed through each of its non- argument constructors is returned, in the order of the constructor declaration.

    If `e` is null, the result is unspecified.
- name: Type.createEmptyInstance()
  id: type#createEmptyInstance
  summary: Creates an instance of class cl
  belongs_to: Type
  description: |-
    ### `static`[`createEmptyInstance`](#createEmptyInstance)`<``T``>(``cl:`[`Class`](class "Class - An abstract type that represents a Class.")`<``T``>``):``T`

    Creates an instance of class `cl`.

    This function guarantees that the class constructor is not called.

    If `cl` is null, the result is unspecified.
- name: Type.createEnum()
  id: type#createEnum
  summary: Creates an instance of enum e by calling its constructor constr with arguments params
  belongs_to: Type
  description: |-
    ### `static`[`createEnum`](#createEnum)`<``T``>(``e:`[`Enum`](enum "Enum - An abstract type that represents an Enum type.")`<``T``>,``constr:`[`String`](string "String - The basic String class.")`,``?params:`[`Array`](array "Array")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>``):``T`

    Creates an instance of enum `e` by calling its constructor `constr` with arguments `params`.

    If `e` or `constr` is null, or if enum `e` has no constructor named `constr`, or if the number of elements in `params` does not match the expected number of constructor arguments, or if any argument has an invalid type, the result is unspecified.
- name: Type.createEnumIndex()
  id: type#createEnumIndex
  summary: Creates an instance of enum e by calling its constructor number index with arguments params
  belongs_to: Type
  description: |-
    ### `static`[`createEnumIndex`](#createEnumIndex)`<``T``>(``e:`[`Enum`](enum "Enum - An abstract type that represents an Enum type.")`<``T``>,``index:`[`Int`](int "Int - The standard Int type.")`,``?params:`[`Array`](array "Array")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>``):``T`

    Creates an instance of enum `e` by calling its constructor number `index` with arguments `params`.

    The constructor indices are preserved from Haxe syntax, so the first declared is index 0, the next index 1 etc.

    If `e` or `constr` is null, or if enum `e` has no constructor named `constr`, or if the number of elements in `params` does not match the expected number of constructor arguments, or if any argument has an invalid type, the result is unspecified.
- name: Type.createInstance()
  id: type#createInstance
  summary: Creates an instance of class cl, using args as arguments to the class constructor
  belongs_to: Type
  description: |-
    ### `static`[`createInstance`](#createInstance)`<``T``>(``cl:`[`Class`](class "Class - An abstract type that represents a Class.")`<``T``>,``args:`[`Array`](array "Array")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>``):``T`

    Creates an instance of class `cl`, using `args` as arguments to the class constructor.

    This function guarantees that the class constructor is called.

    Default values of constructors arguments are not guaranteed to be taken into account.

    If `cl` or `args` are null, or if the number of elements in `args` does not match the expected number of constructor arguments, or if any argument has an invalid type, or if `cl` has no own constructor, the result is unspecified.

    In particular, default values of constructor arguments are not guaranteed to be taken into account.
- name: Type.enumConstructor()
  id: type#enumConstructor
  summary: Returns the constructor name of enum instance e
  belongs_to: Type
  description: |-
    ### `static`[`enumConstructor`](#enumConstructor)`(``e:`[`EnumValue`](enumvalue "EnumValue - An abstract type that represents any enum value.")`):`[`String`](string "String - The basic String class.")

    Returns the constructor name of enum instance `e`.

    The result String does not contain any constructor arguments.

    If `e` is null, the result is unspecified.
- name: Type.enumEq()
  id: type#enumEq
  summary: Recursively compares two enum instances a and b by value
  belongs_to: Type
  description: |-
    ### `static`[`enumEq`](#enumEq)`<``T``>(``a:``T``,``b:``T``):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Recursively compares two enum instances `a` and `b` by value.

    Unlike `a == b`, this function performs a deep equality check on the arguments of the constructors, if exists.

    If `a` or `b` are null, the result is unspecified.
- name: Type.enumIndex()
  id: type#enumIndex
  summary: Returns the index of enum instance e
  belongs_to: Type
  description: |-
    ### `static`[`enumIndex`](#enumIndex)`(``e:`[`EnumValue`](enumvalue "EnumValue - An abstract type that represents any enum value.")`):`[`Int`](int "Int - The standard Int type.")

    Returns the index of enum instance `e`.

    This corresponds to the original syntactic position of `e`. The index of the first declared constructor is 0, the next one is 1 etc.

    If `e` is null, the result is unspecified.
- name: Type.enumParameters()
  id: type#enumParameters
  summary: Returns a list of the constructor arguments of enum instance e
  belongs_to: Type
  description: |-
    ### `static`[`enumParameters`](#enumParameters)`(``e:`[`EnumValue`](enumvalue "EnumValue - An abstract type that represents any enum value.")`):`[`Array`](array "Array")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`

    Returns a list of the constructor arguments of enum instance `e`.

    If `e` has no arguments, the result is \[\].

    Otherwise the result are the values that were used as arguments to `e`, in the order of their declaration.

    If `e` is null, the result is unspecified.
- name: Type.getClass()
  id: type#getClass
  summary: Returns the class of o, if o is a class instance
  belongs_to: Type
  description: |-
    ### `static`[`getClass`](#getClass)`<``T``>(``o:``T``):`[`Class`](class "Class - An abstract type that represents a Class.")`<``T``>`

    Returns the class of `o`, if `o` is a class instance.

    If `o` is null or of a different type, null is returned.

    In general, type parameter information cannot be obtained at runtime.
- name: Type.getClassFields()
  id: type#getClassFields
  summary: Returns a list of static fields of class c
  belongs_to: Type
  description: |-
    ### `static`[`getClassFields`](#getClassFields)`(``c:`[`Class`](class "Class - An abstract type that represents a Class.")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>``):`[`Array`](array "Array")`<`[`String`](string "String - The basic String class.")`>`

    Returns a list of static fields of class `c`.

    This does not include static fields of parent classes.

    The order of the fields in the returned Array is unspecified.

    If `c` is null, the result is unspecified.
- name: Type.getClassName()
  id: type#getClassName
  summary: Returns the name of class c, including its path
  belongs_to: Type
  description: |-
    ### `static`[`getClassName`](#getClassName)`(``c:`[`Class`](class "Class - An abstract type that represents a Class.")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>``):`[`String`](string "String - The basic String class.")

    Returns the name of class `c`, including its path.

    If `c` is inside a package, the package structure is returned dot- separated, with another dot separating the class name: `pack1.pack2.(...).packN.ClassName` If `c` is a sub-type of a Haxe module, that module is not part of the package structure.

    If `c` has no package, the class name is returned.

    If `c` is null, the result is unspecified.

    The class name does not include any type parameters.
- name: Type.getEnum()
  id: type#getEnum
  summary: Returns the enum of enum instance o
  belongs_to: Type
  description: |-
    ### `static`[`getEnum`](#getEnum)`(``o:`[`EnumValue`](enumvalue "EnumValue - An abstract type that represents any enum value.")`):`[`Enum`](enum "Enum - An abstract type that represents an Enum type.")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`

    Returns the enum of enum instance `o`.

    An enum instance is the result of using an enum constructor. Given an `enum Color { Red; }`, `getEnum(Red)` returns [`Enum`](enum)`<Color>`.

    If `o` is null, null is returned.

    In general, type parameter information cannot be obtained at runtime.
- name: Type.getEnumConstructs()
  id: type#getEnumConstructs
  summary: Returns a list of the names of all constructors of enum e
  belongs_to: Type
  description: |-
    ### `static`[`getEnumConstructs`](#getEnumConstructs)`(``e:`[`Enum`](enum "Enum - An abstract type that represents an Enum type.")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>``):`[`Array`](array "Array")`<`[`String`](string "String - The basic String class.")`>`

    Returns a list of the names of all constructors of enum `e`.

    The order of the constructor names in the returned Array is preserved from the original syntax.

    If `e` is null, the result is unspecified.
- name: Type.getEnumName()
  id: type#getEnumName
  summary: Returns the name of enum e, including its path
  belongs_to: Type
  description: |-
    ### `static`[`getEnumName`](#getEnumName)`(``e:`[`Enum`](enum "Enum - An abstract type that represents an Enum type.")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>``):`[`String`](string "String - The basic String class.")

    Returns the name of enum `e`, including its path.

    If `e` is inside a package, the package structure is returned dot- separated, with another dot separating the enum name: `pack1.pack2.(...).packN.EnumName` If `e` is a sub-type of a Haxe module, that module is not part of the package structure.

    If `e` has no package, the enum name is returned.

    If `e` is null, the result is unspecified.

    The enum name does not include any type parameters.
- name: Type.getInstanceFields()
  id: type#getInstanceFields
  summary: Returns a list of the instance fields of class c, including inherited fields
  belongs_to: Type
  description: |-
    ### `static`[`getInstanceFields`](#getInstanceFields)`(``c:`[`Class`](class "Class - An abstract type that represents a Class.")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>``):`[`Array`](array "Array")`<`[`String`](string "String - The basic String class.")`>`

    Returns a list of the instance fields of class `c`, including inherited fields.

    This only includes fields which are known at compile-time. In particular, using `getInstanceFields(getClass(obj))` will not include any fields which were added to `obj` at runtime.

    The order of the fields in the returned Array is unspecified.

    If `c` is null, the result is unspecified.
- name: Type.getSuperClass()
  id: type#getSuperClass
  summary: Returns the super-class of class c
  belongs_to: Type
  description: |-
    ### `static`[`getSuperClass`](#getSuperClass)`(``c:`[`Class`](class "Class - An abstract type that represents a Class.")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>``):`[`Class`](class "Class - An abstract type that represents a Class.")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`

    Returns the super-class of class `c`.

    If `c` has no super class, null is returned.

    If `c` is null, the result is unspecified.

    In general, type parameter information cannot be obtained at runtime.
- name: Type.resolveClass()
  id: type#resolveClass
  summary: Resolves a class by name
  belongs_to: Type
  description: |-
    ### `static`[`resolveClass`](#resolveClass)`(``name:`[`String`](string "String - The basic String class.")`):`[`Class`](class "Class - An abstract type that represents a Class.")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`

    Resolves a class by name.

    If `name` is the path of an existing class, that class is returned.

    Otherwise null is returned.

    If `name` is null or the path to a different type, the result is unspecified.

    The class name must not include any type parameters.
- name: Type.resolveEnum()
  id: type#resolveEnum
  summary: Resolves an enum by name
  belongs_to: Type
  description: |-
    ### `static`[`resolveEnum`](#resolveEnum)`(``name:`[`String`](string "String - The basic String class.")`):`[`Enum`](enum "Enum - An abstract type that represents an Enum type.")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>`

    Resolves an enum by name.

    If `name` is the path of an existing enum, that enum is returned.

    Otherwise null is returned.

    If `name` is null the result is unspecified.

    If `name` is the path to a different type, null is returned.

    The enum name must not include any type parameters.
- name: Type.typeof()
  id: type#typeof
  summary: Returns the runtime type of value v
  belongs_to: Type
  description: "### `static`[`typeof`](#typeof)`(``v:`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`):`[`ValueType`](valuetype \"ValueType - The different possible runtime types of a value.\")\n\nReturns the runtime type of value `v`.\n\nThe result corresponds to the type `v` has at runtime, which may vary per platform. Assumptions regarding this should be minimized to avoid surprises.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Type.html](https://api.haxe.org/Type.html)"
- name: Ucs2
  id: haxe/ucs2
  summary: Cross platform UCS2 string API
  description: "# Ucs2([String](../string \"String - The basic String class.\"))\n\npackage [haxe](index)\n\n*Available on all platforms*\n\nCross platform UCS2 string API.\n\n## Static methods\n\n### `static``inline`[`fromCharCode`](#fromCharCode)`(``code:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Ucs2`](ucs2 \"haxe.Ucs2 - Cross platform UCS2 string API.\")\n\nReturns the Ucs2 corresponding to the character code `code`.\n\nIf `code` is negative or has another invalid value, the result is unspecified.\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](../int \"Int - The standard Int type.\")\n\n## Methods\n\n### `inline`[`charAt`](#charAt)`(``index:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Ucs2`](ucs2 \"haxe.Ucs2 - Cross platform UCS2 string API.\")\n\nReturns the character at position `index` of `this` Ucs2.\n\nIf `index` is negative or exceeds `this.`[`length`](#length), the empty Ucs2 \"\" is returned.\n\n### `inline`[`charCodeAt`](#charCodeAt)`(``index:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Null`](../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Int`](../int \"Int - The standard Int type.\")`>`\n\nReturns the character code at position `index` of `this` Ucs2.\n\nIf `index` is negative or exceeds `this.`[`length`](#length), `null` is returned.\n\nTo obtain the character code of a single character, `\"x\".code` can be used instead to extern public inline the character code at compile time. Note that this only works on Ucs2 literals of length 1.\n\n### `inline`[`indexOf`](#indexOf)`(``str:`[`Ucs2`](ucs2 \"haxe.Ucs2 - Cross platform UCS2 string API.\")`,`` ``?startIndex:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\nReturns the position of the leftmost occurrence of `str` within `this` Ucs2.\n\nIf `startIndex` is given, the search is performed within the substring of `this` Ucs2 starting from `startIndex`. Otherwise the search is performed within `this` Ucs2. In either case, the returned position is relative to the beginning of `this` Ucs2.\n\nIf `str` cannot be found, -1 is returned.\n\n### `inline`[`lastIndexOf`](#lastIndexOf)`(``str:`[`Ucs2`](ucs2 \"haxe.Ucs2 - Cross platform UCS2 string API.\")`,`` ``?startIndex:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\nReturns the position of the rightmost occurrence of `str` within `this` Ucs2.\n\nIf `startIndex` is given, the search is performed within the substring of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is performed within `this` Ucs2. In either case, the returned position is relative to the beginning of `this` Ucs2.\n\nIf `str` cannot be found, -1 is returned.\n\n### `inline`[`split`](#split)`(``delimiter:`[`Ucs2`](ucs2 \"haxe.Ucs2 - Cross platform UCS2 string API.\")`):`[`Array`](../array \"Array\")`<`[`Ucs2`](ucs2 \"haxe.Ucs2 - Cross platform UCS2 string API.\")`>`\n\nSplits `this` Ucs2 at each occurrence of `delimiter`.\n\nIf `this` Ucs2 is the empty Ucs2 \"\", the result is not consistent across targets and may either be `[]` (on Js, Cpp) or `[\"\"]`.\n\nIf `delimiter` is the empty Ucs2 \"\", `this` Ucs2 is split into an Array of `this.`[`length`](#length) elements, where the elements correspond to the characters of `this` Ucs2.\n\nIf `delimiter` is not found within `this` Ucs2, the result is an Array with one element, which equals `this` Ucs2.\n\nIf `delimiter` is null, the result is unspecified.\n\nOtherwise, `this` Ucs2 is split into parts at each occurrence of `delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the result Array contains a leading (or trailing) empty Ucs2 \"\" element. Two subsequent delimiters also result in an empty Ucs2 \"\" element.\n\n### `inline`[`substr`](#substr)`(``pos:`[`Int`](../int \"Int - The standard Int type.\")`,`` ``?len:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Ucs2`](ucs2 \"haxe.Ucs2 - Cross platform UCS2 string API.\")\n\nReturns `len` characters of `this` Ucs2, starting at position `pos`.\n\nIf `len` is omitted, all characters from position `pos` to the end of `this` Ucs2 are included.\n\nIf `pos` is negative, its value is calculated from the end of `this` Ucs2 by `this.`[`length`](#length)` + pos`. If this yields a negative value, 0 is used instead.\n\nIf the calculated position + `len` exceeds `this.`[`length`](#length), the characters from that position to the end of `this` Ucs2 are returned.\n\nIf `len` is negative, the result is unspecified.\n\n### `inline`[`substring`](#substring)`(``startIndex:`[`Int`](../int \"Int - The standard Int type.\")`,`` ``?endIndex:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Ucs2`](ucs2 \"haxe.Ucs2 - Cross platform UCS2 string API.\")\n\nReturns the part of `this` Ucs2 from `startIndex` to `endIndex`.\n\nIf `startIndex` or `endIndex` are negative, 0 is used instead.\n\nIf `startIndex` exceeds `endIndex`, they are swapped.\n\nIf the (possibly swapped) `endIndex` is omitted or exceeds `this.`[`length`](#length), `this.`[`length`](#length) is used instead.\n\nIf the (possibly swapped) `startIndex` exceeds `this.`[`length`](#length), the empty Ucs2 \"\" is returned.\n\n### `inline`[`toLowerCase`](#toLowerCase)`():`[`Ucs2`](ucs2 \"haxe.Ucs2 - Cross platform UCS2 string API.\")\n\nReturns a Ucs2 where all characters of `this` Ucs2 are lower case.\n\nAffects the characters `A-Z`. Other characters remain unchanged.\n\n### `inline`[`toNativeString`](#toNativeString)`():`[`String`](../string \"String - The basic String class.\")\n\nReturns the native underlying String.\n\n### `inline`[`toUpperCase`](#toUpperCase)`():`[`Ucs2`](ucs2 \"haxe.Ucs2 - Cross platform UCS2 string API.\")\n\nReturns a Ucs2 where all characters of `this` Ucs2 are upper case.\n\nAffects the characters `a-z`. Other characters remain unchanged.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Ucs2.html](https://api.haxe.org/haxe/Ucs2.html)"
- name: Ucs2.charAt()
  id: haxe/ucs2#charAt
  summary: Returns the character at position index of this Ucs2
  belongs_to: Ucs2
  description: |-
    ### `inline`[`charAt`](#charAt)`(``index:`[`Int`](../int "Int - The standard Int type.")`):`[`Ucs2`](ucs2 "haxe.Ucs2 - Cross platform UCS2 string API.")

    Returns the character at position `index` of `this` Ucs2.

    If `index` is negative or exceeds `this.`[`length`](#length), the empty Ucs2 "" is returned.
- name: Ucs2.charCodeAt()
  id: haxe/ucs2#charCodeAt
  summary: Returns the character code at position index of this Ucs2
  belongs_to: Ucs2
  description: |-
    ### `inline`[`charCodeAt`](#charCodeAt)`(``index:`[`Int`](../int "Int - The standard Int type.")`):`[`Null`](../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Int`](../int "Int - The standard Int type.")`>`

    Returns the character code at position `index` of `this` Ucs2.

    If `index` is negative or exceeds `this.`[`length`](#length), `null` is returned.

    To obtain the character code of a single character, `"x".code` can be used instead to extern public inline the character code at compile time. Note that this only works on Ucs2 literals of length 1.
- name: Ucs2.fromCharCode()
  id: haxe/ucs2#fromCharCode
  summary: Returns the Ucs2 corresponding to the character code code
  belongs_to: Ucs2
  description: |-
    ### `static``inline`[`fromCharCode`](#fromCharCode)`(``code:`[`Int`](../int "Int - The standard Int type.")`):`[`Ucs2`](ucs2 "haxe.Ucs2 - Cross platform UCS2 string API.")

    Returns the Ucs2 corresponding to the character code `code`.

    If `code` is negative or has another invalid value, the result is unspecified.

    ## Variables
- name: Ucs2.indexOf()
  id: haxe/ucs2#indexOf
  summary: Returns the position of the leftmost occurrence of str within this Ucs2
  belongs_to: Ucs2
  description: |-
    ### `inline`[`indexOf`](#indexOf)`(``str:`[`Ucs2`](ucs2 "haxe.Ucs2 - Cross platform UCS2 string API.")`,``?startIndex:`[`Int`](../int "Int - The standard Int type.")`):`[`Int`](../int "Int - The standard Int type.")

    Returns the position of the leftmost occurrence of `str` within `this` Ucs2.

    If `startIndex` is given, the search is performed within the substring of `this` Ucs2 starting from `startIndex`. Otherwise the search is performed within `this` Ucs2. In either case, the returned position is relative to the beginning of `this` Ucs2.

    If `str` cannot be found, -1 is returned.
- name: Ucs2.lastIndexOf()
  id: haxe/ucs2#lastIndexOf
  summary: Returns the position of the rightmost occurrence of str within this Ucs2
  belongs_to: Ucs2
  description: |-
    ### `inline`[`lastIndexOf`](#lastIndexOf)`(``str:`[`Ucs2`](ucs2 "haxe.Ucs2 - Cross platform UCS2 string API.")`,``?startIndex:`[`Int`](../int "Int - The standard Int type.")`):`[`Int`](../int "Int - The standard Int type.")

    Returns the position of the rightmost occurrence of `str` within `this` Ucs2.

    If `startIndex` is given, the search is performed within the substring of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is performed within `this` Ucs2. In either case, the returned position is relative to the beginning of `this` Ucs2.

    If `str` cannot be found, -1 is returned.
- name: Ucs2.length
  id: haxe/ucs2#length
  summary: null
  belongs_to: Ucs2
  description: |-
    ### `read only`[`length`](#length)`:`[`Int`](../int "Int - The standard Int type.")

    ## Methods
- name: Ucs2.split()
  id: haxe/ucs2#split
  summary: Splits this Ucs2 at each occurrence of delimiter
  belongs_to: Ucs2
  description: |-
    ### `inline`[`split`](#split)`(``delimiter:`[`Ucs2`](ucs2 "haxe.Ucs2 - Cross platform UCS2 string API.")`):`[`Array`](../array "Array")`<`[`Ucs2`](ucs2 "haxe.Ucs2 - Cross platform UCS2 string API.")`>`

    Splits `this` Ucs2 at each occurrence of `delimiter`.

    If `this` Ucs2 is the empty Ucs2 "", the result is not consistent across targets and may either be `[]` (on Js, Cpp) or `[""]`.

    If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an Array of `this.`[`length`](#length) elements, where the elements correspond to the characters of `this` Ucs2.

    If `delimiter` is not found within `this` Ucs2, the result is an Array with one element, which equals `this` Ucs2.

    If `delimiter` is null, the result is unspecified.

    Otherwise, `this` Ucs2 is split into parts at each occurrence of `delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the result Array contains a leading (or trailing) empty Ucs2 "" element. Two subsequent delimiters also result in an empty Ucs2 "" element.
- name: Ucs2.substr()
  id: haxe/ucs2#substr
  summary: Returns len characters of this Ucs2, starting at position pos
  belongs_to: Ucs2
  description: |-
    ### `inline`[`substr`](#substr)`(``pos:`[`Int`](../int "Int - The standard Int type.")`,``?len:`[`Int`](../int "Int - The standard Int type.")`):`[`Ucs2`](ucs2 "haxe.Ucs2 - Cross platform UCS2 string API.")

    Returns `len` characters of `this` Ucs2, starting at position `pos`.

    If `len` is omitted, all characters from position `pos` to the end of `this` Ucs2 are included.

    If `pos` is negative, its value is calculated from the end of `this` Ucs2 by `this.`[`length`](#length)` + pos`. If this yields a negative value, 0 is used instead.

    If the calculated position + `len` exceeds `this.`[`length`](#length), the characters from that position to the end of `this` Ucs2 are returned.

    If `len` is negative, the result is unspecified.
- name: Ucs2.substring()
  id: haxe/ucs2#substring
  summary: Returns the part of this Ucs2 from startIndex to endIndex
  belongs_to: Ucs2
  description: |-
    ### `inline`[`substring`](#substring)`(``startIndex:`[`Int`](../int "Int - The standard Int type.")`,``?endIndex:`[`Int`](../int "Int - The standard Int type.")`):`[`Ucs2`](ucs2 "haxe.Ucs2 - Cross platform UCS2 string API.")

    Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

    If `startIndex` or `endIndex` are negative, 0 is used instead.

    If `startIndex` exceeds `endIndex`, they are swapped.

    If the (possibly swapped) `endIndex` is omitted or exceeds `this.`[`length`](#length), `this.`[`length`](#length) is used instead.

    If the (possibly swapped) `startIndex` exceeds `this.`[`length`](#length), the empty Ucs2 "" is returned.
- name: Ucs2.toLowerCase()
  id: haxe/ucs2#toLowerCase
  summary: Returns a Ucs2 where all characters of this Ucs2 are lower case
  belongs_to: Ucs2
  description: |-
    ### `inline`[`toLowerCase`](#toLowerCase)`():`[`Ucs2`](ucs2 "haxe.Ucs2 - Cross platform UCS2 string API.")

    Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

    Affects the characters `A-Z`. Other characters remain unchanged.
- name: Ucs2.toNativeString()
  id: haxe/ucs2#toNativeString
  summary: Returns the native underlying String
  belongs_to: Ucs2
  description: |-
    ### `inline`[`toNativeString`](#toNativeString)`():`[`String`](../string "String - The basic String class.")

    Returns the native underlying String.
- name: Ucs2.toUpperCase()
  id: haxe/ucs2#toUpperCase
  summary: Returns a Ucs2 where all characters of this Ucs2 are upper case
  belongs_to: Ucs2
  description: "### `inline`[`toUpperCase`](#toUpperCase)`():`[`Ucs2`](ucs2 \"haxe.Ucs2 - Cross platform UCS2 string API.\")\n\nReturns a Ucs2 where all characters of `this` Ucs2 are upper case.\n\nAffects the characters `a-z`. Other characters remain unchanged.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Ucs2.html](https://api.haxe.org/haxe/Ucs2.html)"
- name: UInt
  id: uint
  summary: The unsigned Int type is only defined for Flash and C#. Simulate it for other platforms
  description: "# UInt([Int](int \"Int - The standard Int type.\"))\n\n[no package](index)\n\nfrom [Int](int \"Int - The standard Int type.\") to [Int](int \"Int - The standard Int type.\"),\n\n*Available on all platforms*\n\nThe unsigned [`Int`](int) type is only defined for Flash and C#. Simulate it for other platforms.\n\nSee also:\n\n- <https://haxe.org/manual/types-basic-types.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/UInt.html](https://api.haxe.org/UInt.html)"
- name: UnicodeString
  id: unicodestring
  summary: This abstract provides consistent cross-target unicode support
  description: "# UnicodeString([String](string \"String - The basic String class.\"))\n\n[no package](index)\n\nfrom [String](string \"String - The basic String class.\") to [String](string \"String - The basic String class.\")\n\n*Available on all platforms*\n\nThis abstract provides consistent cross-target unicode support.\n\nSee also:\n\n- <https://haxe.org/manual/std-UnicodeString.html>\n\n## Static methods\n\n### `static`[`validate`](#validate)`(``b:`[`Bytes`](haxe/io/bytes \"haxe.io.Bytes\")`,`` ``encoding:`[`Encoding`](haxe/io/encoding \"haxe.io.Encoding\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if `b` is a correctly encoded UTF8 byte sequence.\n\n## Variables\n\n### `read only`[`length`](#length)`:`[`Int`](int \"Int - The standard Int type.\")\n\n*Available on cs, js, cpp, java, hl, flash*\n\nThe number of characters in `this` String.\n\n## Methods\n\n### [`charAt`](#charAt)`(``index:`[`Int`](int \"Int - The standard Int type.\")`):`[`String`](string \"String - The basic String class.\")\n\n*Available on cs, js, cpp, java, hl, flash*\n\nReturns the character at position `index` of `this` String.\n\nIf `index` is negative or exceeds `this.`[`length`](#length), the empty String `\"\"` is returned.\n\n### [`charCodeAt`](#charCodeAt)`(``index:`[`Int`](int \"Int - The standard Int type.\")`):`[`Null`](null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Int`](int \"Int - The standard Int type.\")`>`\n\n*Available on cs, js, cpp, java, hl, flash*\n\nReturns the character code at position `index` of `this` String.\n\nIf `index` is negative or exceeds `this.`[`length`](#length), `null` is returned.\n\n### [`indexOf`](#indexOf)`(``str:`[`String`](string \"String - The basic String class.\")`,`` ``?startIndex:`[`Int`](int \"Int - The standard Int type.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\n*Available on cs, js, cpp, java, hl, flash*\n\nReturns the position of the leftmost occurrence of `str` within `this` String.\n\nIf `startIndex` is given, the search is performed within the substring of `this` String starting from `startIndex` (if `startIndex` is posivite or 0) or `max(this.`[`length`](#length)` + startIndex, 0)` (if `startIndex` is negative).\n\nIf `startIndex` exceeds `this.`[`length`](#length), -1 is returned.\n\nOtherwise the search is performed within `this` String. In either case, the returned position is relative to the beginning of `this` String.\n\nIf `str` cannot be found, -1 is returned.\n\n### `inline`[`iterator`](#iterator)`():`[`StringIteratorUnicode`](haxe/iterators/stringiteratorunicode \"haxe.iterators.StringIteratorUnicode - This iterator can be used to iterate across strings in a cross-platform way.\")\n\n*Available on cs, php, js, cpp, macro, java, lua, python, hl, flash*\n\nReturns an iterator of the unicode code points.\n\n### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`StringKeyValueIteratorUnicode`](haxe/iterators/stringkeyvalueiteratorunicode \"haxe.iterators.StringKeyValueIteratorUnicode - This iterator can be used to iterate across strings in a cross-platform way.\")\n\n*Available on cs, php, js, cpp, macro, java, lua, python, hl, flash*\n\nReturns an iterator of the code point indices and unicode code points.\n\n### [`lastIndexOf`](#lastIndexOf)`(``str:`[`String`](string \"String - The basic String class.\")`,`` ``?startIndex:`[`Int`](int \"Int - The standard Int type.\")`):`[`Int`](int \"Int - The standard Int type.\")\n\n*Available on cs, js, cpp, java, hl, flash*\n\nReturns the position of the rightmost occurrence of `str` within `this` String.\n\nIf `startIndex` is given, the search is performed within the substring of `this` String from 0 to `startIndex + str.length`. Otherwise the search is performed within `this` String. In either case, the returned position is relative to the beginning of `this` String.\n\nIf `str` cannot be found, -1 is returned.\n\n### [`substr`](#substr)`(``pos:`[`Int`](int \"Int - The standard Int type.\")`,`` ``?len:`[`Int`](int \"Int - The standard Int type.\")`):`[`String`](string \"String - The basic String class.\")\n\n*Available on cs, js, cpp, java, hl, flash*\n\nReturns `len` characters of `this` String, starting at position `pos`.\n\nIf `len` is omitted, all characters from position `pos` to the end of `this` String are included.\n\nIf `pos` is negative, its value is calculated from the end of `this` String by `this.`[`length`](#length)` + pos`. If this yields a negative value, 0 is used instead.\n\nIf the calculated position + `len` exceeds `this.`[`length`](#length), the characters from that position to the end of `this` String are returned.\n\nIf `len` is negative, the result is unspecified.\n\n### [`substring`](#substring)`(``startIndex:`[`Int`](int \"Int - The standard Int type.\")`,`` ``?endIndex:`[`Int`](int \"Int - The standard Int type.\")`):`[`String`](string \"String - The basic String class.\")\n\n*Available on cs, js, cpp, java, hl, flash*\n\nReturns the part of `this` String from `startIndex` to but not including `endIndex`.\n\nIf `startIndex` or `endIndex` are negative, 0 is used instead.\n\nIf `startIndex` exceeds `endIndex`, they are swapped.\n\nIf the (possibly swapped) `endIndex` is omitted or exceeds `this.`[`length`](#length), `this.`[`length`](#length) is used instead.\n\nIf the (possibly swapped) `startIndex` exceeds `this.`[`length`](#length), the empty String `\"\"` is returned.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/UnicodeString.html](https://api.haxe.org/UnicodeString.html)"
- name: UnicodeString.charAt()
  id: unicodestring#charAt
  summary: Returns the character at position index of this String
  belongs_to: UnicodeString
  description: |-
    ### [`charAt`](#charAt)`(``index:`[`Int`](int "Int - The standard Int type.")`):`[`String`](string "String - The basic String class.")

    *Available on cs, js, cpp, java, hl, flash*

    Returns the character at position `index` of `this` String.

    If `index` is negative or exceeds `this.`[`length`](#length), the empty String `""` is returned.
- name: UnicodeString.charCodeAt()
  id: unicodestring#charCodeAt
  summary: Returns the character code at position index of this String
  belongs_to: UnicodeString
  description: |-
    ### [`charCodeAt`](#charCodeAt)`(``index:`[`Int`](int "Int - The standard Int type.")`):`[`Null`](null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Int`](int "Int - The standard Int type.")`>`

    *Available on cs, js, cpp, java, hl, flash*

    Returns the character code at position `index` of `this` String.

    If `index` is negative or exceeds `this.`[`length`](#length), `null` is returned.
- name: UnicodeString.indexOf()
  id: unicodestring#indexOf
  summary: Returns the position of the leftmost occurrence of str within this String
  belongs_to: UnicodeString
  description: |-
    ### [`indexOf`](#indexOf)`(``str:`[`String`](string "String - The basic String class.")`,``?startIndex:`[`Int`](int "Int - The standard Int type.")`):`[`Int`](int "Int - The standard Int type.")

    *Available on cs, js, cpp, java, hl, flash*

    Returns the position of the leftmost occurrence of `str` within `this` String.

    If `startIndex` is given, the search is performed within the substring of `this` String starting from `startIndex` (if `startIndex` is posivite or 0) or `max(this.`[`length`](#length)` + startIndex, 0)` (if `startIndex` is negative).

    If `startIndex` exceeds `this.`[`length`](#length), -1 is returned.

    Otherwise the search is performed within `this` String. In either case, the returned position is relative to the beginning of `this` String.

    If `str` cannot be found, -1 is returned.
- name: UnicodeString.iterator()
  id: unicodestring#iterator
  summary: Returns an iterator of the unicode code points
  belongs_to: UnicodeString
  description: |-
    ### `inline`[`iterator`](#iterator)`():`[`StringIteratorUnicode`](haxe/iterators/stringiteratorunicode "haxe.iterators.StringIteratorUnicode - This iterator can be used to iterate across strings in a cross-platform way.")

    *Available on cs, php, js, cpp, macro, java, lua, python, hl, flash*

    Returns an iterator of the unicode code points.
- name: UnicodeString.keyValueIterator()
  id: unicodestring#keyValueIterator
  summary: Returns an iterator of the code point indices and unicode code points
  belongs_to: UnicodeString
  description: |-
    ### `inline`[`keyValueIterator`](#keyValueIterator)`():`[`StringKeyValueIteratorUnicode`](haxe/iterators/stringkeyvalueiteratorunicode "haxe.iterators.StringKeyValueIteratorUnicode - This iterator can be used to iterate across strings in a cross-platform way.")

    *Available on cs, php, js, cpp, macro, java, lua, python, hl, flash*

    Returns an iterator of the code point indices and unicode code points.
- name: UnicodeString.lastIndexOf()
  id: unicodestring#lastIndexOf
  summary: Returns the position of the rightmost occurrence of str within this String
  belongs_to: UnicodeString
  description: |-
    ### [`lastIndexOf`](#lastIndexOf)`(``str:`[`String`](string "String - The basic String class.")`,``?startIndex:`[`Int`](int "Int - The standard Int type.")`):`[`Int`](int "Int - The standard Int type.")

    *Available on cs, js, cpp, java, hl, flash*

    Returns the position of the rightmost occurrence of `str` within `this` String.

    If `startIndex` is given, the search is performed within the substring of `this` String from 0 to `startIndex + str.length`. Otherwise the search is performed within `this` String. In either case, the returned position is relative to the beginning of `this` String.

    If `str` cannot be found, -1 is returned.
- name: UnicodeString.length
  id: unicodestring#length
  summary: The number of characters in this String
  belongs_to: UnicodeString
  description: |-
    ### `read only`[`length`](#length)`:`[`Int`](int "Int - The standard Int type.")

    *Available on cs, js, cpp, java, hl, flash*

    The number of characters in `this` String.

    ## Methods
- name: UnicodeString.substr()
  id: unicodestring#substr
  summary: Returns len characters of this String, starting at position pos
  belongs_to: UnicodeString
  description: |-
    ### [`substr`](#substr)`(``pos:`[`Int`](int "Int - The standard Int type.")`,``?len:`[`Int`](int "Int - The standard Int type.")`):`[`String`](string "String - The basic String class.")

    *Available on cs, js, cpp, java, hl, flash*

    Returns `len` characters of `this` String, starting at position `pos`.

    If `len` is omitted, all characters from position `pos` to the end of `this` String are included.

    If `pos` is negative, its value is calculated from the end of `this` String by `this.`[`length`](#length)` + pos`. If this yields a negative value, 0 is used instead.

    If the calculated position + `len` exceeds `this.`[`length`](#length), the characters from that position to the end of `this` String are returned.

    If `len` is negative, the result is unspecified.
- name: UnicodeString.substring()
  id: unicodestring#substring
  summary: Returns the part of this String from startIndex to but not including endIndex
  belongs_to: UnicodeString
  description: "### [`substring`](#substring)`(``startIndex:`[`Int`](int \"Int - The standard Int type.\")`,``?endIndex:`[`Int`](int \"Int - The standard Int type.\")`):`[`String`](string \"String - The basic String class.\")\n\n*Available on cs, js, cpp, java, hl, flash*\n\nReturns the part of `this` String from `startIndex` to but not including `endIndex`.\n\nIf `startIndex` or `endIndex` are negative, 0 is used instead.\n\nIf `startIndex` exceeds `endIndex`, they are swapped.\n\nIf the (possibly swapped) `endIndex` is omitted or exceeds `this.`[`length`](#length), `this.`[`length`](#length) is used instead.\n\nIf the (possibly swapped) `startIndex` exceeds `this.`[`length`](#length), the empty String `\"\"` is returned.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/UnicodeString.html](https://api.haxe.org/UnicodeString.html)"
- name: UnicodeString.validate()
  id: unicodestring#validate
  summary: Tells if b is a correctly encoded UTF8 byte sequence
  belongs_to: UnicodeString
  description: |-
    ### `static`[`validate`](#validate)`(``b:`[`Bytes`](haxe/io/bytes "haxe.io.Bytes")`,``encoding:`[`Encoding`](haxe/io/encoding "haxe.io.Encoding")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if `b` is a correctly encoded UTF8 byte sequence.

    ## Variables
- name: Unserializer
  id: haxe/unserializer
  summary: The Unserializer class is the complement to the Serializer class
  description: "# Unserializer\n\npackage [haxe](index)\n\n*Available on all platforms*\n\nThe [`Unserializer`](unserializer#Unserializer) class is the complement to the [`Serializer`](serializer#Serializer) class. It parses a serialization [`String`](../string) and creates objects from the contained data.\n\nThis class can be used in two ways:\n\n- create a `new `[`Unserializer`](unserializer#Unserializer)`()` instance with a given serialization String, then call its `unserialize()` method until all values are extracted\n- call [`Unserializer.run`](unserializer#run)`()` to unserialize a single value from a given String\n\nThe specification of the serialization format can be found here: <https://haxe.org/manual/serialization/format>\n\n## Static variables\n\n### `static`[`DEFAULT_RESOLVER`](#DEFAULT_RESOLVER)`:``TypeResolver`` = new DefaultResolver()`\n\nThis value can be set to use custom type resolvers.\n\nA type resolver finds a [`Class`](../class) or [`Enum`](../enum) instance from a given [`String`](../string). By default, the Haxe [`Type`](../type) Api is used.\n\nA type resolver must provide two methods:\n\n1.  `resolveClass(name:`[`String`](../string)`):`[`Class`](../class)`<`[`Dynamic`](../dynamic)`>` is called to determine a\n\n        `Class` from a class name\n\n2.  `resolveEnum(name:`[`String`](../string)`):`[`Enum`](../enum)`<`[`Dynamic`](../dynamic)`>` is called to determine an\n\n        `Enum` from an enum name\n\nThis value is applied when a new [`Unserializer`](unserializer#Unserializer) instance is created. Changing it afterwards has no effect on previously created instances.\n\n## Static methods\n\n### `static`[`run`](#run)`(``v:`[`String`](../string \"String - The basic String class.\")`):`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\nUnserializes `v` and returns the according value.\n\nThis is a convenience function for creating a new instance of Unserializer with `v` as buffer and calling its `unserialize()` method once.\n\n## Constructor\n\n### [`new`](#new)`(``buf:`[`String`](../string \"String - The basic String class.\")`)`\n\nCreates a new Unserializer instance, with its internal buffer initialized to `buf`.\n\nThis does not parse `buf` immediately. It is parsed only when calls to `this.`[`unserialize`](#unserialize) are made.\n\nEach Unserializer instance maintains its own cache.\n\n## Methods\n\n### [`getResolver`](#getResolver)`():``TypeResolver`\n\nGets the type resolver of `this` Unserializer instance.\n\nSee `DEFAULT_RESOLVER` for more information on type resolvers.\n\n### [`setResolver`](#setResolver)`(``r:``TypeResolver``):`[`Void`](../void \"Void - The standard Void type.\")\n\nSets the type resolver of `this` Unserializer instance to `r`.\n\nIf `r` is `null`, a special resolver is used which returns `null` for all input values.\n\nSee `DEFAULT_RESOLVER` for more information on type resolvers.\n\n### [`unserialize`](#unserialize)`():`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\nUnserializes the next part of `this` Unserializer instance and returns the according value.\n\nThis function may call `this.`[`resolver`](#resolver)`.resolveClass` to determine a Class from a String, and `this.`[`resolver`](#resolver)`.resolveEnum` to determine an Enum from a String.\n\nIf `this` Unserializer instance contains no more or invalid data, an exception is thrown.\n\nThis operation may fail on structurally valid data if a type cannot be resolved or if a field cannot be set. This can happen when unserializing Strings that were serialized on a different Haxe target, in which the serialization side has to make sure not to include platform-specific data.\n\nClasses are created from [`Type.createEmptyInstance`](../type#createEmptyInstance), which means their constructors are not called.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Unserializer.html](https://api.haxe.org/haxe/Unserializer.html)"
- name: Unserializer.DEFAULT_RESOLVER()
  id: haxe/unserializer#DEFAULT_RESOLVER
  summary: This value can be set to use custom type resolvers
  belongs_to: Unserializer
  description: "### `static`[`DEFAULT_RESOLVER`](#DEFAULT_RESOLVER)`:``TypeResolver`` = new DefaultResolver()`\n\nThis value can be set to use custom type resolvers.\n\nA type resolver finds a [`Class`](../class) or [`Enum`](../enum) instance from a given [`String`](../string). By default, the Haxe [`Type`](../type) Api is used.\n\nA type resolver must provide two methods:\n\n1.  `resolveClass(name:`[`String`](../string)`):`[`Class`](../class)`<`[`Dynamic`](../dynamic)`>` is called to determine a\n\n                  `Class` from a class name\n\n                \n\n2.  `resolveEnum(name:`[`String`](../string)`):`[`Enum`](../enum)`<`[`Dynamic`](../dynamic)`>` is called to determine an\n\n                  `Enum` from an enum name\n\n                \n\nThis value is applied when a new [`Unserializer`](unserializer#Unserializer) instance is created. Changing it afterwards has no effect on previously created instances.\n\n## Static methods"
- name: Unserializer.getResolver()
  id: haxe/unserializer#getResolver
  summary: Gets the type resolver of this Unserializer instance
  belongs_to: Unserializer
  description: |-
    ### [`getResolver`](#getResolver)`():``TypeResolver`

    Gets the type resolver of `this` Unserializer instance.

    See `DEFAULT_RESOLVER` for more information on type resolvers.
- name: Unserializer.run()
  id: haxe/unserializer#run
  summary: Unserializes v and returns the according value
  belongs_to: Unserializer
  description: |-
    ### `static`[`run`](#run)`(``v:`[`String`](../string "String - The basic String class.")`):`[`Dynamic`](../dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")

    Unserializes `v` and returns the according value.

    This is a convenience function for creating a new instance of Unserializer with `v` as buffer and calling its `unserialize()` method once.

    ## Constructor

    ### [`new`](#new)`(``buf:`[`String`](../string "String - The basic String class.")`)`

    Creates a new Unserializer instance, with its internal buffer initialized to `buf`.

    This does not parse `buf` immediately. It is parsed only when calls to `this.`[`unserialize`](#unserialize) are made.

    Each Unserializer instance maintains its own cache.

    ## Methods
- name: Unserializer.setResolver()
  id: haxe/unserializer#setResolver
  summary: Sets the type resolver of this Unserializer instance to r
  belongs_to: Unserializer
  description: |-
    ### [`setResolver`](#setResolver)`(``r:``TypeResolver``):`[`Void`](../void "Void - The standard Void type.")

    Sets the type resolver of `this` Unserializer instance to `r`.

    If `r` is `null`, a special resolver is used which returns `null` for all input values.

    See `DEFAULT_RESOLVER` for more information on type resolvers.
- name: Unserializer.unserialize()
  id: haxe/unserializer#unserialize
  summary: Unserializes the next part of this Unserializer instance and returns the according value
  belongs_to: Unserializer
  description: "### [`unserialize`](#unserialize)`():`[`Dynamic`](../dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")\n\nUnserializes the next part of `this` Unserializer instance and returns the according value.\n\nThis function may call `this.`[`resolver`](#resolver)`.resolveClass` to determine a Class from a String, and `this.`[`resolver`](#resolver)`.resolveEnum` to determine an Enum from a String.\n\nIf `this` Unserializer instance contains no more or invalid data, an exception is thrown.\n\nThis operation may fail on structurally valid data if a type cannot be resolved or if a field cannot be set. This can happen when unserializing Strings that were serialized on a different Haxe target, in which the serialization side has to make sure not to include platform-specific data.\n\nClasses are created from [`Type.createEmptyInstance`](../type#createEmptyInstance), which means their constructors are not called.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Unserializer.html](https://api.haxe.org/haxe/Unserializer.html)"
- name: Utf8
  id: haxe/utf8
  summary: 'Deprecated: "haxe.Utf8 is deprecated'
  description: "# Utf8\n\npackage [haxe](index)\n\n**Deprecated:** \"haxe.Utf8 is deprecated. Use UnicodeString instead.\"\n\n*Available on all platforms*\n\nSince not all platforms guarantee that [`String`](../string) always uses UTF-8 encoding, you can use this cross-platform API to perform operations on such strings.\n\n## Static methods\n\n### `static`[`charCodeAt`](#charCodeAt)`(``s:`[`String`](../string \"String - The basic String class.\")`,`` ``index:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\nSimilar to [`String.charCodeAt`](../string#charCodeAt) but uses the UTF8 character position.\n\n### `static`[`compare`](#compare)`(``a:`[`String`](../string \"String - The basic String class.\")`,`` ``b:`[`String`](../string \"String - The basic String class.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\nCompare two UTF8 strings, character by character.\n\n### `static`[`decode`](#decode)`(``s:`[`String`](../string \"String - The basic String class.\")`):`[`String`](../string \"String - The basic String class.\")\n\nDecode an UTF8 string back to an ISO string. Throw an exception if a given UTF8 character is not supported by the decoder.\n\n### `static`[`encode`](#encode)`(``s:`[`String`](../string \"String - The basic String class.\")`):`[`String`](../string \"String - The basic String class.\")\n\nEncode the input ISO string into the corresponding UTF8 one.\n\n### `static`[`iter`](#iter)`(``s:`[`String`](../string \"String - The basic String class.\")`,`` ``chars:`[`Int`](../int \"Int - The standard Int type.\")` ‑> `[`Void`](../void \"Void - The standard Void type.\")`):`[`Void`](../void \"Void - The standard Void type.\")\n\nCall the `chars` function for each UTF8 char of the string.\n\n### `static`[`length`](#length)`(``s:`[`String`](../string \"String - The basic String class.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\nReturns the number of UTF8 chars of the String.\n\n### `static`[`sub`](#sub)`(``s:`[`String`](../string \"String - The basic String class.\")`,`` ``pos:`[`Int`](../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../int \"Int - The standard Int type.\")`):`[`String`](../string \"String - The basic String class.\")\n\nThis is similar to [`String.substr`](../string#substr) but the `pos` and `len` parts are considering UTF8 characters.\n\n### `static`[`validate`](#validate)`(``s:`[`String`](../string \"String - The basic String class.\")`):`[`Bool`](../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if the String is correctly encoded as UTF8.\n\n## Constructor\n\n### [`new`](#new)`(``?size:`[`Int`](../int \"Int - The standard Int type.\")`)`\n\nAllocate a new Utf8 buffer using an optional bytes size.\n\n## Methods\n\n### [`addChar`](#addChar)`(``c:`[`Int`](../int \"Int - The standard Int type.\")`):`[`Void`](../void \"Void - The standard Void type.\")\n\nAdd the given UTF8 character code to the buffer.\n\n### [`toString`](#toString)`():`[`String`](../string \"String - The basic String class.\")\n\nReturns the buffer converted to a String.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Utf8.html](https://api.haxe.org/haxe/Utf8.html)"
- name: Utf8.addChar()
  id: haxe/utf8#addChar
  summary: Add the given UTF8 character code to the buffer
  belongs_to: Utf8
  description: |-
    ### [`addChar`](#addChar)`(``c:`[`Int`](../int "Int - The standard Int type.")`):`[`Void`](../void "Void - The standard Void type.")

    Add the given UTF8 character code to the buffer.
- name: Utf8.charCodeAt()
  id: haxe/utf8#charCodeAt
  summary: Similar to String.charCodeAt but uses the UTF8 character position
  belongs_to: Utf8
  description: |-
    ### `static`[`charCodeAt`](#charCodeAt)`(``s:`[`String`](../string "String - The basic String class.")`,``index:`[`Int`](../int "Int - The standard Int type.")`):`[`Int`](../int "Int - The standard Int type.")

    Similar to [`String.charCodeAt`](../string#charCodeAt) but uses the UTF8 character position.
- name: Utf8.compare()
  id: haxe/utf8#compare
  summary: Compare two UTF8 strings, character by character
  belongs_to: Utf8
  description: |-
    ### `static`[`compare`](#compare)`(``a:`[`String`](../string "String - The basic String class.")`,``b:`[`String`](../string "String - The basic String class.")`):`[`Int`](../int "Int - The standard Int type.")

    Compare two UTF8 strings, character by character.
- name: Utf8.decode()
  id: haxe/utf8#decode
  summary: Decode an UTF8 string back to an ISO string
  belongs_to: Utf8
  description: |-
    ### `static`[`decode`](#decode)`(``s:`[`String`](../string "String - The basic String class.")`):`[`String`](../string "String - The basic String class.")

    Decode an UTF8 string back to an ISO string. Throw an exception if a given UTF8 character is not supported by the decoder.
- name: Utf8.encode()
  id: haxe/utf8#encode
  summary: Encode the input ISO string into the corresponding UTF8 one
  belongs_to: Utf8
  description: |-
    ### `static`[`encode`](#encode)`(``s:`[`String`](../string "String - The basic String class.")`):`[`String`](../string "String - The basic String class.")

    Encode the input ISO string into the corresponding UTF8 one.
- name: Utf8.iter()
  id: haxe/utf8#iter
  summary: Call the chars function for each UTF8 char of the string
  belongs_to: Utf8
  description: |-
    ### `static`[`iter`](#iter)`(``s:`[`String`](../string "String - The basic String class.")`,``chars:`[`Int`](../int "Int - The standard Int type.")` ‑> `[`Void`](../void "Void - The standard Void type.")`):`[`Void`](../void "Void - The standard Void type.")

    Call the `chars` function for each UTF8 char of the string.
- name: Utf8.length()
  id: haxe/utf8#length
  summary: Returns the number of UTF8 chars of the String
  belongs_to: Utf8
  description: |-
    ### `static`[`length`](#length)`(``s:`[`String`](../string "String - The basic String class.")`):`[`Int`](../int "Int - The standard Int type.")

    Returns the number of UTF8 chars of the String.
- name: Utf8.sub()
  id: haxe/utf8#sub
  summary: This is similar to String.substr but the pos and len parts are considering UTF8 characters
  belongs_to: Utf8
  description: |-
    ### `static`[`sub`](#sub)`(``s:`[`String`](../string "String - The basic String class.")`,``pos:`[`Int`](../int "Int - The standard Int type.")`,``len:`[`Int`](../int "Int - The standard Int type.")`):`[`String`](../string "String - The basic String class.")

    This is similar to [`String.substr`](../string#substr) but the `pos` and `len` parts are considering UTF8 characters.
- name: Utf8.toString()
  id: haxe/utf8#toString
  summary: Returns the buffer converted to a String
  belongs_to: Utf8
  description: "### [`toString`](#toString)`():`[`String`](../string \"String - The basic String class.\")\n\nReturns the buffer converted to a String.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/Utf8.html](https://api.haxe.org/haxe/Utf8.html)"
- name: Utf8.validate()
  id: haxe/utf8#validate
  summary: Tells if the String is correctly encoded as UTF8
  belongs_to: Utf8
  description: |-
    ### `static`[`validate`](#validate)`(``s:`[`String`](../string "String - The basic String class.")`):`[`Bool`](../bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if the String is correctly encoded as UTF8.

    ## Constructor

    ### [`new`](#new)`(``?size:`[`Int`](../int "Int - The standard Int type.")`)`

    Allocate a new Utf8 buffer using an optional bytes size.

    ## Methods
- name: V8CallSite
  id: haxe/v8callsite
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# V8CallSite\n\npackage [haxe](index)\n\nimport [haxe.NativeStackTrace](nativestacktrace)\n\n*Available on js*\n\n## Fields\n\n### [`getLineNumber`](#getLineNumber)`():`[`Int`](../int \"Int - The standard Int type.\")\n\n### [`getFunctionName`](#getFunctionName)`():`[`String`](../string \"String - The basic String class.\")\n\n### [`getFileName`](#getFileName)`():`[`String`](../string \"String - The basic String class.\")\n\n### [`getColumnNumber`](#getColumnNumber)`():`[`Int`](../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/V8CallSite.html](https://api.haxe.org/haxe/V8CallSite.html)"
- name: V8CallSite.getColumnNumber()
  id: haxe/v8callsite#getColumnNumber
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: V8CallSite
  description: "### [`getColumnNumber`](#getColumnNumber)`():`[`Int`](../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/V8CallSite.html](https://api.haxe.org/haxe/V8CallSite.html)"
- name: V8CallSite.getFileName()
  id: haxe/v8callsite#getFileName
  summary: null
  belongs_to: V8CallSite
  description: '### [`getFileName`](#getFileName)`():`[`String`](../string "String - The basic String class.")'
- name: V8CallSite.getFunctionName()
  id: haxe/v8callsite#getFunctionName
  summary: null
  belongs_to: V8CallSite
  description: '### [`getFunctionName`](#getFunctionName)`():`[`String`](../string "String - The basic String class.")'
- name: V8CallSite.getLineNumber()
  id: haxe/v8callsite#getLineNumber
  summary: null
  belongs_to: V8CallSite
  description: '### [`getLineNumber`](#getLineNumber)`():`[`Int`](../int "Int - The standard Int type.")'
- name: ValueException
  id: haxe/valueexception
  summary: An exception containing arbitrary value
  description: "# ValueException\n\npackage [haxe](index)\n\nextends [Exception](exception \"haxe.Exception - Base class for exceptions.\")\n\n*Available on all platforms*\n\nAn exception containing arbitrary value.\n\nThis class is automatically used for throwing values, which don't extend [`haxe.Exception`](exception#Exception) or native exception type. For example:\n\n``` prettyprint\nthrow \"Terrible error\";\n```\n\nwill be compiled to\n\n``` prettyprint\nthrow new ValueException(\"Terrible error\");\n```\n\n## Constructor\n\n### [`new`](#new)`(``value:`[`Any`](../any \"Any - Any is a type that is compatible with any other in both ways.\")`,`` ``?previous:`[`Exception`](exception \"haxe.Exception - Base class for exceptions.\")`,`` ``?native:`[`Any`](../any \"Any - Any is a type that is compatible with any other in both ways.\")`)`\n\n## Variables\n\n### `read only`[`value`](#value)`:`[`Any`](../any \"Any - Any is a type that is compatible with any other in both ways.\")\n\nThrown value.\n\n## Methods\n\n### [`unwrap`](#unwrap)`():`[`Any`](../any \"Any - Any is a type that is compatible with any other in both ways.\")\n\n*Available on cs*\n\nExtract an originally thrown value.\n\nThis method must return the same value on subsequent calls. Used internally for catching non-native exceptions. Do *not* override unless you know what you are doing.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ValueException.html](https://api.haxe.org/haxe/ValueException.html)"
- name: ValueException.unwrap()
  id: haxe/valueexception#unwrap
  summary: Extract an originally thrown value
  belongs_to: ValueException
  description: "### [`unwrap`](#unwrap)`():`[`Any`](../any \"Any - Any is a type that is compatible with any other in both ways.\")\n\n*Available on cs*\n\nExtract an originally thrown value.\n\nThis method must return the same value on subsequent calls. Used internally for catching non-native exceptions. Do *not* override unless you know what you are doing.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/ValueException.html](https://api.haxe.org/haxe/ValueException.html)"
- name: ValueException.value
  id: haxe/valueexception#value
  summary: Thrown value
  belongs_to: ValueException
  description: |-
    ### `read only`[`value`](#value)`:`[`Any`](../any "Any - Any is a type that is compatible with any other in both ways.")

    Thrown value.

    ## Methods
- name: ValueType
  id: valuetype
  summary: The different possible runtime types of a value
  description: "# ValueType\n\n[no package](index)\n\nimport [Type](type)\n\n*Available on all platforms*\n\nThe different possible runtime types of a value.\n\n## Values\n\n### `TNull`\n\n### `TInt`\n\n### `TFloat`\n\n### `TBool`\n\n### `TObject`\n\n### `TFunction`\n\n### `TClass(c:`[`Class`](class \"Class - An abstract type that represents a Class.\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>)`\n\n### `TEnum(e:`[`Enum`](enum \"Enum - An abstract type that represents an Enum type.\")`<`[`Dynamic`](dynamic \"Dynamic - Dynamic is a special type which is compatible with all other types.\")`>)`\n\n### `TUnknown`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/ValueType.html](https://api.haxe.org/ValueType.html)"
- name: ValueType.TBool
  id: valuetype#TBool
  summary: null
  belongs_to: ValueType
  description: '### `TBool`'
- name: ValueType.TClass()
  id: valuetype#TClass
  summary: null
  belongs_to: ValueType
  description: '### `TClass(c:`[`Class`](class "Class - An abstract type that represents a Class.")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>)`'
- name: ValueType.TEnum()
  id: valuetype#TEnum
  summary: null
  belongs_to: ValueType
  description: '### `TEnum(e:`[`Enum`](enum "Enum - An abstract type that represents an Enum type.")`<`[`Dynamic`](dynamic "Dynamic - Dynamic is a special type which is compatible with all other types.")`>)`'
- name: ValueType.TFloat
  id: valuetype#TFloat
  summary: null
  belongs_to: ValueType
  description: '### `TFloat`'
- name: ValueType.TFunction
  id: valuetype#TFunction
  summary: null
  belongs_to: ValueType
  description: '### `TFunction`'
- name: ValueType.TInt
  id: valuetype#TInt
  summary: null
  belongs_to: ValueType
  description: '### `TInt`'
- name: ValueType.TNull
  id: valuetype#TNull
  summary: null
  belongs_to: ValueType
  description: '### `TNull`'
- name: ValueType.TObject
  id: valuetype#TObject
  summary: null
  belongs_to: ValueType
  description: '### `TObject`'
- name: ValueType.TUnknown
  id: valuetype#TUnknown
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: ValueType
  description: "### `TUnknown`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/ValueType.html](https://api.haxe.org/ValueType.html)"
- name: Void
  id: void
  summary: The standard Void type
  description: "# Void\n\n[no package](index)\n\n*Available on all platforms*\n\nThe standard [`Void`](void) type. Only `null` values can be of the type [`Void`](void).\n\nSee also:\n\n- <https://haxe.org/manual/types-void.html>\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Void.html](https://api.haxe.org/Void.html)"
- name: X509Crt
  id: mbedtls/x509crt
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# X509Crt\n\npackage [mbedtls](index)\n\n*Available on macro*\n\n## Constructor\n\n### [`new`](#new)`()`\n\n## Methods\n\n### [`next`](#next)`():`[`Null`](../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`X509Crt`](x509crt \"mbedtls.X509Crt\")`>`\n\n### [`parse`](#parse)`(``buf:`[`Bytes`](../haxe/io/bytes \"haxe.io.Bytes\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n### [`parse_file`](#parse_file)`(``path:`[`String`](../string \"String - The basic String class.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n### [`parse_path`](#parse_path)`(``path:`[`String`](../string \"String - The basic String class.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/X509Crt.html](https://api.haxe.org/mbedtls/X509Crt.html)"
- name: X509Crt.next()
  id: mbedtls/x509crt#next
  summary: null
  belongs_to: X509Crt
  description: '### [`next`](#next)`():`[`Null`](../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`X509Crt`](x509crt "mbedtls.X509Crt")`>`'
- name: X509Crt.parse()
  id: mbedtls/x509crt#parse
  summary: null
  belongs_to: X509Crt
  description: '### [`parse`](#parse)`(``buf:`[`Bytes`](../haxe/io/bytes "haxe.io.Bytes")`):`[`Int`](../int "Int - The standard Int type.")'
- name: X509Crt.parse_file()
  id: mbedtls/x509crt#parse_file
  summary: null
  belongs_to: X509Crt
  description: '### [`parse_file`](#parse_file)`(``path:`[`String`](../string "String - The basic String class.")`):`[`Int`](../int "Int - The standard Int type.")'
- name: X509Crt.parse_path()
  id: mbedtls/x509crt#parse_path
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: X509Crt
  description: "### [`parse_path`](#parse_path)`(``path:`[`String`](../string \"String - The basic String class.\")`):`[`Int`](../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/mbedtls/X509Crt.html](https://api.haxe.org/mbedtls/X509Crt.html)"
- name: Xml
  id: xml
  summary: Cross-platform Xml API
  description: "# Xml\n\n[no package](index)\n\n*Available on all platforms*\n\nCross-platform Xml API.\n\nSee also:\n\n- <https://haxe.org/manual/std-Xml.html>\n\n## Static variables\n\n### `static``read only`[`CData`](#CData)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = XmlType.CData`\n\nXML character data type.\n\n### `static``read only`[`Comment`](#Comment)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = XmlType.Comment`\n\nXML comment type.\n\n### `static``read only`[`DocType`](#DocType)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = XmlType.DocType`\n\nXML doctype element type.\n\n### `static``read only`[`Document`](#Document)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = XmlType.Document`\n\nXML document type.\n\n### `static``read only`[`Element`](#Element)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = XmlType.Element`\n\nXML element type.\n\n### `static``read only`[`PCData`](#PCData)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = XmlType.PCData`\n\nXML parsed character data type.\n\n### `static``read only`[`ProcessingInstruction`](#ProcessingInstruction)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = XmlType.ProcessingInstruction`\n\nXML processing instruction type.\n\n## Static methods\n\n### `static`[`createCData`](#createCData)`(``data:`[`String`](string \"String - The basic String class.\")`):`[`Xml`](xml \"Xml - Cross-platform Xml API.\")\n\nCreates a node of the given type.\n\n### `static`[`createComment`](#createComment)`(``data:`[`String`](string \"String - The basic String class.\")`):`[`Xml`](xml \"Xml - Cross-platform Xml API.\")\n\nCreates a node of the given type.\n\n### `static`[`createDocType`](#createDocType)`(``data:`[`String`](string \"String - The basic String class.\")`):`[`Xml`](xml \"Xml - Cross-platform Xml API.\")\n\nCreates a node of the given type.\n\n### `static`[`createDocument`](#createDocument)`():`[`Xml`](xml \"Xml - Cross-platform Xml API.\")\n\nCreates a node of the given type.\n\n### `static`[`createElement`](#createElement)`(``name:`[`String`](string \"String - The basic String class.\")`):`[`Xml`](xml \"Xml - Cross-platform Xml API.\")\n\nCreates a node of the given type.\n\n### `static`[`createPCData`](#createPCData)`(``data:`[`String`](string \"String - The basic String class.\")`):`[`Xml`](xml \"Xml - Cross-platform Xml API.\")\n\nCreates a node of the given type.\n\n### `static`[`createProcessingInstruction`](#createProcessingInstruction)`(``data:`[`String`](string \"String - The basic String class.\")`):`[`Xml`](xml \"Xml - Cross-platform Xml API.\")\n\nCreates a node of the given type.\n\n### `static`[`parse`](#parse)`(``str:`[`String`](string \"String - The basic String class.\")`):`[`Xml`](xml \"Xml - Cross-platform Xml API.\")\n\nParses the String into an Xml document.\n\n## Variables\n\n### [`nodeName`](#nodeName)`:`[`String`](string \"String - The basic String class.\")\n\nReturns the node name of an Element.\n\n### `read only`[`nodeType`](#nodeType)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")\n\nReturns the type of the Xml Node. This should be used before accessing other functions since some might raise an exception if the node type is not correct.\n\n### [`nodeValue`](#nodeValue)`:`[`String`](string \"String - The basic String class.\")\n\nReturns the node value. Only works if the Xml node is not an Element or a Document.\n\n### `read only`[`parent`](#parent)`:`[`Xml`](xml \"Xml - Cross-platform Xml API.\")\n\nReturns the parent object in the Xml hierarchy. The parent can be `null`, an Element or a Document.\n\n## Methods\n\n### [`addChild`](#addChild)`(``x:`[`Xml`](xml \"Xml - Cross-platform Xml API.\")`):`[`Void`](void \"Void - The standard Void type.\")\n\nAdds a child node to the Document or Element. A child node can only be inside one given parent node, which is indicated by the `parent` property. If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children. If the child node was previously inside a different node, it will be moved to this Document or Element.\n\n### [`attributes`](#attributes)`():`[`Iterator`](iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<`[`String`](string \"String - The basic String class.\")`>`\n\nReturns an [`Iterator`](iterator) on all the attribute names.\n\n### [`elements`](#elements)`():`[`Iterator`](iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<`[`Xml`](xml \"Xml - Cross-platform Xml API.\")`>`\n\nReturns an iterator of all child nodes which are Elements. Only works if the current node is an Element or a Document.\n\n### [`elementsNamed`](#elementsNamed)`(``name:`[`String`](string \"String - The basic String class.\")`):`[`Iterator`](iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<`[`Xml`](xml \"Xml - Cross-platform Xml API.\")`>`\n\nReturns an iterator of all child nodes which are Elements with the given nodeName. Only works if the current node is an Element or a Document.\n\n### [`exists`](#exists)`(``att:`[`String`](string \"String - The basic String class.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nTells if the Element node has a given attribute. Attributes are case-sensitive.\n\n### `inline`[`firstChild`](#firstChild)`():`[`Xml`](xml \"Xml - Cross-platform Xml API.\")\n\nReturns the first child node.\n\n### [`firstElement`](#firstElement)`():`[`Xml`](xml \"Xml - Cross-platform Xml API.\")\n\nReturns the first child node which is an Element.\n\n### [`get`](#get)`(``att:`[`String`](string \"String - The basic String class.\")`):`[`String`](string \"String - The basic String class.\")\n\nGet the given attribute of an Element node. Returns `null` if not found. Attributes are case-sensitive.\n\n### [`insertChild`](#insertChild)`(``x:`[`Xml`](xml \"Xml - Cross-platform Xml API.\")`,`` ``pos:`[`Int`](int \"Int - The standard Int type.\")`):`[`Void`](void \"Void - The standard Void type.\")\n\nInserts a child at the given position among the other childs. A child node can only be inside one given parent node, which is indicated by the \\[parent\\] property. If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children. If the child node was previously inside a different node, it will be moved to this Document or Element.\n\n### `inline`[`iterator`](#iterator)`():`[`Iterator`](iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<`[`Xml`](xml \"Xml - Cross-platform Xml API.\")`>`\n\nReturns an iterator of all child nodes. Only works if the current node is an Element or a Document.\n\n### [`remove`](#remove)`(``att:`[`String`](string \"String - The basic String class.\")`):`[`Void`](void \"Void - The standard Void type.\")\n\nRemoves an attribute for an Element node. Attributes are case-sensitive.\n\n### [`removeChild`](#removeChild)`(``x:`[`Xml`](xml \"Xml - Cross-platform Xml API.\")`):`[`Bool`](bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\nRemoves a child from the Document or Element. Returns true if the child was successfuly removed.\n\n### [`set`](#set)`(``att:`[`String`](string \"String - The basic String class.\")`,`` ``value:`[`String`](string \"String - The basic String class.\")`):`[`Void`](void \"Void - The standard Void type.\")\n\nSet the given attribute value for an Element node. Attributes are case-sensitive.\n\n### `inline`[`toString`](#toString)`():`[`String`](string \"String - The basic String class.\")\n\nReturns a String representation of the Xml node.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Xml.html](https://api.haxe.org/Xml.html)"
- name: xml.Access
  id: haxe/xml/access
  summary: The haxe.xml.Access API helps providing a fast dot-syntax access to the most common Xml methods
  description: "# Access([Xml](../../xml \"Xml - Cross-platform Xml API.\"))\n\npackage [haxe.xml](index)\n\n*Available on all platforms*\n\nThe [`haxe.xml.Access`](access#Access) API helps providing a fast dot-syntax access to the most common [`Xml`](../../xml) methods.\n\n## Variables\n\n### `read only`[`att`](#att)`:``AttribAccess`\n\nAccess to a given attribute.\n\nAn exception is thrown if the attribute doesn't exists. Use `has` to check the existence of an attribute.\n\n``` prettyprint\nvar f = new haxe.xml.Access(Xml.parse(\"<user name='Mark'></user>\"));\nvar user = f.node.user;\nif (user.has.name) {\n    trace(user.att.name); // Mark\n}\n```\n\n### `read only`[`elements`](#elements)`:`[`Iterator`](../../iterator \"Iterator - An Iterator is a structure that permits iteration over elements of type T.\")`<`[`Access`](access \"haxe.xml.Access - The haxe.\")`>`\n\nThe list of all sub-elements which are the nodes with type [`Xml.Element`](../../xml#Element).\n\n### `read only`[`has`](#has)`:``HasAttribAccess`\n\nCheck the existence of an attribute with the given name.\n\n### `read only`[`hasNode`](#hasNode)`:``HasNodeAccess`\n\nCheck the existence of a sub node with the given name.\n\n``` prettyprint\nvar f = new haxe.xml.Access(Xml.parse(\"<user><age>31</age></user>\"));\nvar user = f.node.user;\nif (user.hasNode.age) {\n    trace(user.node.age.innerData); // 31\n}\n```\n\n### `read only`[`innerData`](#innerData)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe inner PCDATA or CDATA of the node.\n\nAn exception is thrown if there is no data or if there not only data but also other nodes.\n\n### `read only`[`innerHTML`](#innerHTML)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe XML string built with all the sub nodes, excluding the current one.\n\n### `read only`[`name`](#name)`:`[`String`](../../string \"String - The basic String class.\")\n\nThe name of the current element. This is the same as [`Xml.nodeName`](../../xml#nodeName).\n\n### `read only`[`node`](#node)`:``NodeAccess`\n\nAccess to the first sub element with the given name.\n\nAn exception is thrown if the element doesn't exists. Use `hasNode` to check the existence of a node.\n\n``` prettyprint\nvar access = new haxe.xml.Access(Xml.parse(\"<user><name>John</name></user>\"));\nvar user = access.node.user;\nvar name = user.node.name;\ntrace(name.innerData); // John\n\n// Uncaught Error: Document is missing element password\nvar password = user.node.password;\n```\n\n### `read only`[`nodes`](#nodes)`:``NodeListAccess`\n\nAccess to the List of elements with the given name.\n\n``` prettyprint\nvar fast = new haxe.xml.Access(Xml.parse(\"\n    <users>\n        <user name='John'/>\n        <user name='Andy'/>\n        <user name='Dan'/>\n    </users>\"\n));\n\nvar users = fast.node.users;\nfor (user in users.nodes.user) {\n    trace(user.att.name);\n}\n```\n\n### `read only`[`x`](#x)`:`[`Xml`](../../xml \"Xml - Cross-platform Xml API.\")\n\n## Methods\n\n### `inline`[`get_x`](#get_x)`():`[`Xml`](../../xml \"Xml - Cross-platform Xml API.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Access.html](https://api.haxe.org/haxe/xml/Access.html)"
- name: xml.Access.att
  id: haxe/xml/access#att
  summary: Access to a given attribute
  belongs_to: xml.Access
  description: |-
    ### `read only`[`att`](#att)`:``AttribAccess`

    Access to a given attribute.

    An exception is thrown if the attribute doesn't exists. Use `has` to check the existence of an attribute.

              var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
        var user = f.node.user;
        if (user.has.name) {
            trace(user.att.name); // Mark
        }
- name: xml.Access.elements
  id: haxe/xml/access#elements
  summary: The list of all sub-elements which are the nodes with type Xml.Element
  belongs_to: xml.Access
  description: |-
    ### `read only`[`elements`](#elements)`:`[`Iterator`](../../iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<`[`Access`](access "haxe.xml.Access - The haxe.")`>`

    The list of all sub-elements which are the nodes with type [`Xml.Element`](../../xml#Element).
- name: xml.Access.get_x()
  id: haxe/xml/access#get_x
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: xml.Access
  description: "### `inline`[`get_x`](#get_x)`():`[`Xml`](../../xml \"Xml - Cross-platform Xml API.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Access.html](https://api.haxe.org/haxe/xml/Access.html)"
- name: xml.Access.has
  id: haxe/xml/access#has
  summary: Check the existence of an attribute with the given name
  belongs_to: xml.Access
  description: |-
    ### `read only`[`has`](#has)`:``HasAttribAccess`

    Check the existence of an attribute with the given name.
- name: xml.Access.hasNode
  id: haxe/xml/access#hasNode
  summary: Check the existence of a sub node with the given name
  belongs_to: xml.Access
  description: |-
    ### `read only`[`hasNode`](#hasNode)`:``HasNodeAccess`

    Check the existence of a sub node with the given name.

              var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
        var user = f.node.user;
        if (user.hasNode.age) {
            trace(user.node.age.innerData); // 31
        }
- name: xml.Access.innerData
  id: haxe/xml/access#innerData
  summary: The inner PCDATA or CDATA of the node
  belongs_to: xml.Access
  description: |-
    ### `read only`[`innerData`](#innerData)`:`[`String`](../../string "String - The basic String class.")

    The inner PCDATA or CDATA of the node.

    An exception is thrown if there is no data or if there not only data but also other nodes.
- name: xml.Access.innerHTML
  id: haxe/xml/access#innerHTML
  summary: The XML string built with all the sub nodes, excluding the current one
  belongs_to: xml.Access
  description: |-
    ### `read only`[`innerHTML`](#innerHTML)`:`[`String`](../../string "String - The basic String class.")

    The XML string built with all the sub nodes, excluding the current one.
- name: xml.Access.name
  id: haxe/xml/access#name
  summary: The name of the current element
  belongs_to: xml.Access
  description: |-
    ### `read only`[`name`](#name)`:`[`String`](../../string "String - The basic String class.")

    The name of the current element. This is the same as [`Xml.nodeName`](../../xml#nodeName).
- name: xml.Access.node
  id: haxe/xml/access#node
  summary: Access to the first sub element with the given name
  belongs_to: xml.Access
  description: |-
    ### `read only`[`node`](#node)`:``NodeAccess`

    Access to the first sub element with the given name.

    An exception is thrown if the element doesn't exists. Use `hasNode` to check the existence of a node.

              var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
        var user = access.node.user;
        var name = user.node.name;
        trace(name.innerData); // John

        // Uncaught Error: Document is missing element password
        var password = user.node.password;
- name: xml.Access.nodes
  id: haxe/xml/access#nodes
  summary: Access to the List of elements with the given name
  belongs_to: xml.Access
  description: |-
    ### `read only`[`nodes`](#nodes)`:``NodeListAccess`

    Access to the List of elements with the given name.

              var fast = new haxe.xml.Access(Xml.parse("
            <users>
                <user name='John'/>
                <user name='Andy'/>
                <user name='Dan'/>
            </users>"
        ));

        var users = fast.node.users;
        for (user in users.nodes.user) {
            trace(user.att.name);
        }
- name: xml.Access.x
  id: haxe/xml/access#x
  summary: null
  belongs_to: xml.Access
  description: |-
    ### `read only`[`x`](#x)`:`[`Xml`](../../xml "Xml - Cross-platform Xml API.")

    ## Methods
- name: Xml.addChild()
  id: xml#addChild
  summary: Adds a child node to the Document or Element
  belongs_to: Xml
  description: |-
    ### [`addChild`](#addChild)`(``x:`[`Xml`](xml "Xml - Cross-platform Xml API.")`):`[`Void`](void "Void - The standard Void type.")

    Adds a child node to the Document or Element. A child node can only be inside one given parent node, which is indicated by the `parent` property. If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children. If the child node was previously inside a different node, it will be moved to this Document or Element.
- name: xml.Attrib
  id: haxe/xml/attrib
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Attrib\n\npackage [haxe.xml](index)\n\nimport [haxe.xml.Check](check)\n\n*Available on all platforms*\n\n## Values\n\n### `Att(name:`[`String`](../../string \"String - The basic String class.\")`, filter:`[`Filter`](filter \"haxe.xml.Filter\")`, defvalue:`[`String`](../../string \"String - The basic String class.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Attrib.html](https://api.haxe.org/haxe/xml/Attrib.html)"
- name: xml.Attrib.Att()
  id: haxe/xml/attrib#Att
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: xml.Attrib
  description: "### `Att(name:`[`String`](../../string \"String - The basic String class.\")`, filter:`[`Filter`](filter \"haxe.xml.Filter\")`, defvalue:`[`String`](../../string \"String - The basic String class.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Attrib.html](https://api.haxe.org/haxe/xml/Attrib.html)"
- name: Xml.attributes()
  id: xml#attributes
  summary: Returns an Iterator on all the attribute names
  belongs_to: Xml
  description: |-
    ### [`attributes`](#attributes)`():`[`Iterator`](iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<`[`String`](string "String - The basic String class.")`>`

    Returns an [`Iterator`](iterator) on all the attribute names.
- name: Xml.CData
  id: xml#CData
  summary: XML character data type
  belongs_to: Xml
  description: |-
    ### `static``read only`[`CData`](#CData)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = XmlType.CData`

    XML character data type.
- name: xml.Check
  id: haxe/xml/check
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Check\n\npackage [haxe.xml](index)\n\n*Available on all platforms*\n\n## Static methods\n\n### `static`[`checkDocument`](#checkDocument)`(``x:`[`Xml`](../../xml \"Xml - Cross-platform Xml API.\")`,`` ``r:`[`Rule`](rule \"haxe.xml.Rule\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### `static`[`checkNode`](#checkNode)`(``x:`[`Xml`](../../xml \"Xml - Cross-platform Xml API.\")`,`` ``r:`[`Rule`](rule \"haxe.xml.Rule\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Check.html](https://api.haxe.org/haxe/xml/Check.html)"
- name: xml.Check.checkDocument()
  id: haxe/xml/check#checkDocument
  summary: null
  belongs_to: xml.Check
  description: '### `static`[`checkDocument`](#checkDocument)`(``x:`[`Xml`](../../xml "Xml - Cross-platform Xml API.")`,``r:`[`Rule`](rule "haxe.xml.Rule")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: xml.Check.checkNode()
  id: haxe/xml/check#checkNode
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: xml.Check
  description: "### `static`[`checkNode`](#checkNode)`(``x:`[`Xml`](../../xml \"Xml - Cross-platform Xml API.\")`,``r:`[`Rule`](rule \"haxe.xml.Rule\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Check.html](https://api.haxe.org/haxe/xml/Check.html)"
- name: Xml.Comment
  id: xml#Comment
  summary: XML comment type
  belongs_to: Xml
  description: |-
    ### `static``read only`[`Comment`](#Comment)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = XmlType.Comment`

    XML comment type.
- name: Xml.createCData()
  id: xml#createCData
  summary: Creates a node of the given type
  belongs_to: Xml
  description: |-
    ### `static`[`createCData`](#createCData)`(``data:`[`String`](string "String - The basic String class.")`):`[`Xml`](xml "Xml - Cross-platform Xml API.")

    Creates a node of the given type.
- name: Xml.createComment()
  id: xml#createComment
  summary: Creates a node of the given type
  belongs_to: Xml
  description: |-
    ### `static`[`createComment`](#createComment)`(``data:`[`String`](string "String - The basic String class.")`):`[`Xml`](xml "Xml - Cross-platform Xml API.")

    Creates a node of the given type.
- name: Xml.createDocType()
  id: xml#createDocType
  summary: Creates a node of the given type
  belongs_to: Xml
  description: |-
    ### `static`[`createDocType`](#createDocType)`(``data:`[`String`](string "String - The basic String class.")`):`[`Xml`](xml "Xml - Cross-platform Xml API.")

    Creates a node of the given type.
- name: Xml.createDocument()
  id: xml#createDocument
  summary: Creates a node of the given type
  belongs_to: Xml
  description: |-
    ### `static`[`createDocument`](#createDocument)`():`[`Xml`](xml "Xml - Cross-platform Xml API.")

    Creates a node of the given type.
- name: Xml.createElement()
  id: xml#createElement
  summary: Creates a node of the given type
  belongs_to: Xml
  description: |-
    ### `static`[`createElement`](#createElement)`(``name:`[`String`](string "String - The basic String class.")`):`[`Xml`](xml "Xml - Cross-platform Xml API.")

    Creates a node of the given type.
- name: Xml.createPCData()
  id: xml#createPCData
  summary: Creates a node of the given type
  belongs_to: Xml
  description: |-
    ### `static`[`createPCData`](#createPCData)`(``data:`[`String`](string "String - The basic String class.")`):`[`Xml`](xml "Xml - Cross-platform Xml API.")

    Creates a node of the given type.
- name: Xml.createProcessingInstruction()
  id: xml#createProcessingInstruction
  summary: Creates a node of the given type
  belongs_to: Xml
  description: |-
    ### `static`[`createProcessingInstruction`](#createProcessingInstruction)`(``data:`[`String`](string "String - The basic String class.")`):`[`Xml`](xml "Xml - Cross-platform Xml API.")

    Creates a node of the given type.
- name: Xml.DocType
  id: xml#DocType
  summary: XML doctype element type
  belongs_to: Xml
  description: |-
    ### `static``read only`[`DocType`](#DocType)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = XmlType.DocType`

    XML doctype element type.
- name: Xml.Document
  id: xml#Document
  summary: XML document type
  belongs_to: Xml
  description: |-
    ### `static``read only`[`Document`](#Document)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = XmlType.Document`

    XML document type.
- name: Xml.Element
  id: xml#Element
  summary: XML element type
  belongs_to: Xml
  description: |-
    ### `static``read only`[`Element`](#Element)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = XmlType.Element`

    XML element type.
- name: Xml.elements()
  id: xml#elements
  summary: Returns an iterator of all child nodes which are Elements
  belongs_to: Xml
  description: |-
    ### [`elements`](#elements)`():`[`Iterator`](iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<`[`Xml`](xml "Xml - Cross-platform Xml API.")`>`

    Returns an iterator of all child nodes which are Elements. Only works if the current node is an Element or a Document.
- name: Xml.elementsNamed()
  id: xml#elementsNamed
  summary: Returns an iterator of all child nodes which are Elements with the given nodeName
  belongs_to: Xml
  description: |-
    ### [`elementsNamed`](#elementsNamed)`(``name:`[`String`](string "String - The basic String class.")`):`[`Iterator`](iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<`[`Xml`](xml "Xml - Cross-platform Xml API.")`>`

    Returns an iterator of all child nodes which are Elements with the given nodeName. Only works if the current node is an Element or a Document.
- name: Xml.exists()
  id: xml#exists
  summary: Tells if the Element node has a given attribute
  belongs_to: Xml
  description: |-
    ### [`exists`](#exists)`(``att:`[`String`](string "String - The basic String class.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Tells if the Element node has a given attribute. Attributes are case-sensitive.
- name: xml.Fast
  id: haxe/xml/fast
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Fast\n\npackage [haxe.xml](index)\n\n**Deprecated:**\n\n*Available on all platforms*\n\n## Alias\n\n*alias for* [`haxe.xml.Access`](access \"haxe.xml.Access - The haxe.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Fast.html](https://api.haxe.org/haxe/xml/Fast.html)"
- name: xml.Filter
  id: haxe/xml/filter
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Filter\n\npackage [haxe.xml](index)\n\nimport [haxe.xml.Check](check)\n\n*Available on all platforms*\n\n## Values\n\n### `FInt`\n\n### `FBool`\n\n### `FEnum(values:`[`Array`](../../array \"Array\")`<`[`String`](../../string \"String - The basic String class.\")`>)`\n\n### `FReg(matcher:`[`EReg`](../../ereg \"EReg - The EReg class represents regular expressions.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Filter.html](https://api.haxe.org/haxe/xml/Filter.html)"
- name: xml.Filter.FBool
  id: haxe/xml/filter#FBool
  summary: null
  belongs_to: xml.Filter
  description: '### `FBool`'
- name: xml.Filter.FEnum()
  id: haxe/xml/filter#FEnum
  summary: null
  belongs_to: xml.Filter
  description: '### `FEnum(values:`[`Array`](../../array "Array")`<`[`String`](../../string "String - The basic String class.")`>)`'
- name: xml.Filter.FInt
  id: haxe/xml/filter#FInt
  summary: null
  belongs_to: xml.Filter
  description: '### `FInt`'
- name: xml.Filter.FReg()
  id: haxe/xml/filter#FReg
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: xml.Filter
  description: "### `FReg(matcher:`[`EReg`](../../ereg \"EReg - The EReg class represents regular expressions.\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Filter.html](https://api.haxe.org/haxe/xml/Filter.html)"
- name: Xml.firstChild()
  id: xml#firstChild
  summary: Returns the first child node
  belongs_to: Xml
  description: |-
    ### `inline`[`firstChild`](#firstChild)`():`[`Xml`](xml "Xml - Cross-platform Xml API.")

    Returns the first child node.
- name: Xml.firstElement()
  id: xml#firstElement
  summary: Returns the first child node which is an Element
  belongs_to: Xml
  description: |-
    ### [`firstElement`](#firstElement)`():`[`Xml`](xml "Xml - Cross-platform Xml API.")

    Returns the first child node which is an Element.
- name: Xml.get()
  id: xml#get
  summary: Get the given attribute of an Element node
  belongs_to: Xml
  description: |-
    ### [`get`](#get)`(``att:`[`String`](string "String - The basic String class.")`):`[`String`](string "String - The basic String class.")

    Get the given attribute of an Element node. Returns `null` if not found. Attributes are case-sensitive.
- name: Xml.insertChild()
  id: xml#insertChild
  summary: Inserts a child at the given position among the other childs
  belongs_to: Xml
  description: |-
    ### [`insertChild`](#insertChild)`(``x:`[`Xml`](xml "Xml - Cross-platform Xml API.")`,``pos:`[`Int`](int "Int - The standard Int type.")`):`[`Void`](void "Void - The standard Void type.")

    Inserts a child at the given position among the other childs. A child node can only be inside one given parent node, which is indicated by the \[parent\] property. If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children. If the child node was previously inside a different node, it will be moved to this Document or Element.
- name: Xml.iterator()
  id: xml#iterator
  summary: Returns an iterator of all child nodes
  belongs_to: Xml
  description: |-
    ### `inline`[`iterator`](#iterator)`():`[`Iterator`](iterator "Iterator - An Iterator is a structure that permits iteration over elements of type T.")`<`[`Xml`](xml "Xml - Cross-platform Xml API.")`>`

    Returns an iterator of all child nodes. Only works if the current node is an Element or a Document.
- name: Xml.nodeName
  id: xml#nodeName
  summary: Returns the node name of an Element
  belongs_to: Xml
  description: |-
    ### [`nodeName`](#nodeName)`:`[`String`](string "String - The basic String class.")

    Returns the node name of an Element.
- name: Xml.nodeType
  id: xml#nodeType
  summary: Returns the type of the Xml Node
  belongs_to: Xml
  description: |-
    ### `read only`[`nodeType`](#nodeType)`:`[`XmlType`](xmltype "XmlType - Xml node types.")

    Returns the type of the Xml Node. This should be used before accessing other functions since some might raise an exception if the node type is not correct.
- name: Xml.nodeValue
  id: xml#nodeValue
  summary: Returns the node value
  belongs_to: Xml
  description: |-
    ### [`nodeValue`](#nodeValue)`:`[`String`](string "String - The basic String class.")

    Returns the node value. Only works if the Xml node is not an Element or a Document.
- name: Xml.parent
  id: xml#parent
  summary: Returns the parent object in the Xml hierarchy
  belongs_to: Xml
  description: |-
    ### `read only`[`parent`](#parent)`:`[`Xml`](xml "Xml - Cross-platform Xml API.")

    Returns the parent object in the Xml hierarchy. The parent can be `null`, an Element or a Document.

    ## Methods
- name: Xml.parse()
  id: xml#parse
  summary: Parses the String into an Xml document
  belongs_to: Xml
  description: |-
    ### `static`[`parse`](#parse)`(``str:`[`String`](string "String - The basic String class.")`):`[`Xml`](xml "Xml - Cross-platform Xml API.")

    Parses the String into an Xml document.

    ## Variables
- name: xml.Parser
  id: haxe/xml/parser
  summary: Parses the String into an XML Document
  description: "# Parser\n\npackage [haxe.xml](index)\n\n*Available on all platforms*\n\n## Static methods\n\n### `static`[`parse`](#parse)`(``str:`[`String`](../../string \"String - The basic String class.\")`,`` ``strict:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`Xml`](../../xml \"Xml - Cross-platform Xml API.\")\n\nParses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.\n\nThrows:\n\n|        |                             |\n|--------|-----------------------------|\n| `null` | haxe.xml.XmlParserException |\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Parser.html](https://api.haxe.org/haxe/xml/Parser.html)"
- name: xml.Parser.parse()
  id: haxe/xml/parser#parse
  summary: Parses the String into an XML Document
  belongs_to: xml.Parser
  description: "### `static`[`parse`](#parse)`(``str:`[`String`](../../string \"String - The basic String class.\")`,``strict:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`Xml`](../../xml \"Xml - Cross-platform Xml API.\")\n\nParses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.\n\nThrows:\n\n|        |                             |\n|--------|-----------------------------|\n| `null` | haxe.xml.XmlParserException |\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Parser.html](https://api.haxe.org/haxe/xml/Parser.html)"
- name: Xml.PCData
  id: xml#PCData
  summary: XML parsed character data type
  belongs_to: Xml
  description: |-
    ### `static``read only`[`PCData`](#PCData)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = XmlType.PCData`

    XML parsed character data type.
- name: xml.Printer
  id: haxe/xml/printer
  summary: This class provides utility methods to convert Xml instances to String representation
  description: "# Printer\n\npackage [haxe.xml](index)\n\n*Available on all platforms*\n\nThis class provides utility methods to convert Xml instances to String representation.\n\n## Static methods\n\n### `static`[`print`](#print)`(``xml:`[`Xml`](../../xml \"Xml - Cross-platform Xml API.\")`,`` ``pretty:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`String`](../../string \"String - The basic String class.\")\n\nConvert [`Xml`](../../xml) to string representation.\n\nSet `pretty` to [`true`](../../bool) to prettify the result.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Printer.html](https://api.haxe.org/haxe/xml/Printer.html)"
- name: xml.Printer.print()
  id: haxe/xml/printer#print
  summary: Convert Xml to string representation
  belongs_to: xml.Printer
  description: "### `static`[`print`](#print)`(``xml:`[`Xml`](../../xml \"Xml - Cross-platform Xml API.\")`,``pretty:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = false``):`[`String`](../../string \"String - The basic String class.\")\n\nConvert [`Xml`](../../xml) to string representation.\n\nSet `pretty` to [`true`](../../bool) to prettify the result.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Printer.html](https://api.haxe.org/haxe/xml/Printer.html)"
- name: Xml.ProcessingInstruction
  id: xml#ProcessingInstruction
  summary: XML processing instruction type
  belongs_to: Xml
  description: |-
    ### `static``read only`[`ProcessingInstruction`](#ProcessingInstruction)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = XmlType.ProcessingInstruction`

    XML processing instruction type.

    ## Static methods
- name: xml.Proxy
  id: haxe/xml/proxy
  summary: This proxy can be inherited with an XML file name parameter
  description: "# Proxy\\<Const, T\\>\n\npackage [haxe.xml](index)\n\n*Available on all platforms*\n\nThis proxy can be inherited with an XML file name parameter. It will only allow access to fields which corresponds to an \"id\" attribute value in the XML file :\n\n``` prettyprint\nclass MyXml extends haxe.xml.Proxy<\"my.xml\", MyStructure> {\n}\n\nvar h = new haxe.ds.StringMap<MyStructure>();\n// ... fill h with \"my.xml\" content\nvar m = new MyXml(h.get);\ntrace(m.myNode.structField);\n// Access to \"myNode\" is only possible if you have an id=\"myNode\" attribute\n// in your XML, and completion works as well.\n```\n\n## Constructor\n\n### [`new`](#new)`(``f:`[`String`](../../string \"String - The basic String class.\")` ‑> ``T``)`\n\n## Methods\n\n### [`resolve`](#resolve)`(``k:`[`String`](../../string \"String - The basic String class.\")`):``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Proxy.html](https://api.haxe.org/haxe/xml/Proxy.html)"
- name: xml.Proxy.resolve()
  id: haxe/xml/proxy#resolve
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: xml.Proxy
  description: "### [`resolve`](#resolve)`(``k:`[`String`](../../string \"String - The basic String class.\")`):``T`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Proxy.html](https://api.haxe.org/haxe/xml/Proxy.html)"
- name: Xml.remove()
  id: xml#remove
  summary: Removes an attribute for an Element node
  belongs_to: Xml
  description: |-
    ### [`remove`](#remove)`(``att:`[`String`](string "String - The basic String class.")`):`[`Void`](void "Void - The standard Void type.")

    Removes an attribute for an Element node. Attributes are case-sensitive.
- name: Xml.removeChild()
  id: xml#removeChild
  summary: Removes a child from the Document or Element
  belongs_to: Xml
  description: |-
    ### [`removeChild`](#removeChild)`(``x:`[`Xml`](xml "Xml - Cross-platform Xml API.")`):`[`Bool`](bool "Bool - The standard Boolean type, which can either be true or false.")

    Removes a child from the Document or Element. Returns true if the child was successfuly removed.
- name: xml.Rule
  id: haxe/xml/rule
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Rule\n\npackage [haxe.xml](index)\n\nimport [haxe.xml.Check](check)\n\n*Available on all platforms*\n\n## Values\n\n### `RNode(name:`[`String`](../../string \"String - The basic String class.\")`, attribs:`[`Array`](../../array \"Array\")`<`[`Attrib`](attrib \"haxe.xml.Attrib\")`>, childs:`[`Rule`](rule \"haxe.xml.Rule\")`)`\n\n### `RData(filter:`[`Filter`](filter \"haxe.xml.Filter\")`)`\n\n### `RMulti(rule:`[`Rule`](rule \"haxe.xml.Rule\")`, atLeastOne:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`)`\n\n### `RList(rules:`[`Array`](../../array \"Array\")`<`[`Rule`](rule \"haxe.xml.Rule\")`>, ordered:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`)`\n\n### `RChoice(choices:`[`Array`](../../array \"Array\")`<`[`Rule`](rule \"haxe.xml.Rule\")`>)`\n\n### `ROptional(rule:`[`Rule`](rule \"haxe.xml.Rule\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Rule.html](https://api.haxe.org/haxe/xml/Rule.html)"
- name: xml.Rule.RChoice()
  id: haxe/xml/rule#RChoice
  summary: null
  belongs_to: xml.Rule
  description: '### `RChoice(choices:`[`Array`](../../array "Array")`<`[`Rule`](rule "haxe.xml.Rule")`>)`'
- name: xml.Rule.RData()
  id: haxe/xml/rule#RData
  summary: null
  belongs_to: xml.Rule
  description: '### `RData(filter:`[`Filter`](filter "haxe.xml.Filter")`)`'
- name: xml.Rule.RList()
  id: haxe/xml/rule#RList
  summary: null
  belongs_to: xml.Rule
  description: '### `RList(rules:`[`Array`](../../array "Array")`<`[`Rule`](rule "haxe.xml.Rule")`>, ordered:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`)`'
- name: xml.Rule.RMulti()
  id: haxe/xml/rule#RMulti
  summary: null
  belongs_to: xml.Rule
  description: '### `RMulti(rule:`[`Rule`](rule "haxe.xml.Rule")`, atLeastOne:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`)`'
- name: xml.Rule.RNode()
  id: haxe/xml/rule#RNode
  summary: null
  belongs_to: xml.Rule
  description: '### `RNode(name:`[`String`](../../string "String - The basic String class.")`, attribs:`[`Array`](../../array "Array")`<`[`Attrib`](attrib "haxe.xml.Attrib")`>, childs:`[`Rule`](rule "haxe.xml.Rule")`)`'
- name: xml.Rule.ROptional()
  id: haxe/xml/rule#ROptional
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: xml.Rule
  description: "### `ROptional(rule:`[`Rule`](rule \"haxe.xml.Rule\")`)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/Rule.html](https://api.haxe.org/haxe/xml/Rule.html)"
- name: Xml.set()
  id: xml#set
  summary: Set the given attribute value for an Element node
  belongs_to: Xml
  description: |-
    ### [`set`](#set)`(``att:`[`String`](string "String - The basic String class.")`,``value:`[`String`](string "String - The basic String class.")`):`[`Void`](void "Void - The standard Void type.")

    Set the given attribute value for an Element node. Attributes are case-sensitive.
- name: Xml.toString()
  id: xml#toString
  summary: Returns a String representation of the Xml node
  belongs_to: Xml
  description: "### `inline`[`toString`](#toString)`():`[`String`](string \"String - The basic String class.\")\n\nReturns a String representation of the Xml node.\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/Xml.html](https://api.haxe.org/Xml.html)"
- name: xml.XmlParserException
  id: haxe/xml/xmlparserexception
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# XmlParserException\n\npackage [haxe.xml](index)\n\nimport [haxe.xml.Parser](parser)\n\n*Available on all platforms*\n\n## Constructor\n\n### [`new`](#new)`(``message:`[`String`](../../string \"String - The basic String class.\")`,`` ``xml:`[`String`](../../string \"String - The basic String class.\")`,`` ``position:`[`Int`](../../int \"Int - The standard Int type.\")`)`\n\n## Variables\n\n### [`lineNumber`](#lineNumber)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nthe line number at which the XML parsing error occurred\n\n### [`message`](#message)`:`[`String`](../../string \"String - The basic String class.\")\n\nthe XML parsing error message\n\n### [`position`](#position)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nthe character position in the XML string at which the parsing error occurred\n\n### [`positionAtLine`](#positionAtLine)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\nthe character position in the reported line at which the parsing error occurred\n\n### [`xml`](#xml)`:`[`String`](../../string \"String - The basic String class.\")\n\nthe invalid XML string\n\n## Methods\n\n### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/XmlParserException.html](https://api.haxe.org/haxe/xml/XmlParserException.html)"
- name: xml.XmlParserException.lineNumber
  id: haxe/xml/xmlparserexception#lineNumber
  summary: null
  belongs_to: xml.XmlParserException
  description: |-
    ### [`lineNumber`](#lineNumber)`:`[`Int`](../../int "Int - The standard Int type.")

    the line number at which the XML parsing error occurred
- name: xml.XmlParserException.message
  id: haxe/xml/xmlparserexception#message
  summary: null
  belongs_to: xml.XmlParserException
  description: |-
    ### [`message`](#message)`:`[`String`](../../string "String - The basic String class.")

    the XML parsing error message
- name: xml.XmlParserException.position
  id: haxe/xml/xmlparserexception#position
  summary: null
  belongs_to: xml.XmlParserException
  description: |-
    ### [`position`](#position)`:`[`Int`](../../int "Int - The standard Int type.")

    the character position in the XML string at which the parsing error occurred
- name: xml.XmlParserException.positionAtLine
  id: haxe/xml/xmlparserexception#positionAtLine
  summary: null
  belongs_to: xml.XmlParserException
  description: |-
    ### [`positionAtLine`](#positionAtLine)`:`[`Int`](../../int "Int - The standard Int type.")

    the character position in the reported line at which the parsing error occurred
- name: xml.XmlParserException.toString()
  id: haxe/xml/xmlparserexception#toString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: xml.XmlParserException
  description: "### [`toString`](#toString)`():`[`String`](../../string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/xml/XmlParserException.html](https://api.haxe.org/haxe/xml/XmlParserException.html)"
- name: xml.XmlParserException.xml
  id: haxe/xml/xmlparserexception#xml
  summary: null
  belongs_to: xml.XmlParserException
  description: |-
    ### [`xml`](#xml)`:`[`String`](../../string "String - The basic String class.")

    the invalid XML string

    ## Methods
- name: XmlType
  id: xmltype
  summary: Xml node types
  description: "# XmlType([Int](int \"Int - The standard Int type.\"))\n\n[no package](index)\n\nimport [Xml](xml)\n\n*Available on all platforms*\n\nXml node types.\n\nSee also:\n\n- <https://haxe.org/manual/std-Xml.html>\n\n## Variables\n\n### `inline``read only`[`CData`](#CData)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = 2`\n\nRepresents XML character data type.\n\n### `inline``read only`[`Comment`](#Comment)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = 3`\n\nRepresents an XML comment type.\n\n### `inline``read only`[`DocType`](#DocType)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = 4`\n\nRepresents an XML doctype element type.\n\n### `inline``read only`[`Document`](#Document)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = 6`\n\nRepresents an XML document type.\n\n### `inline``read only`[`Element`](#Element)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = 0`\n\nRepresents an XML element type.\n\n### `inline``read only`[`PCData`](#PCData)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = 1`\n\nRepresents XML parsed character data type.\n\n### `inline``read only`[`ProcessingInstruction`](#ProcessingInstruction)`:`[`XmlType`](xmltype \"XmlType - Xml node types.\")` = 5`\n\nRepresents an XML processing instruction type.\n\n## Methods\n\n### [`toString`](#toString)`():`[`String`](string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/XmlType.html](https://api.haxe.org/XmlType.html)"
- name: XmlType.CData
  id: xmltype#CData
  summary: Represents XML character data type
  belongs_to: XmlType
  description: |-
    ### `inline``read only`[`CData`](#CData)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = 2`

    Represents XML character data type.
- name: XmlType.Comment
  id: xmltype#Comment
  summary: Represents an XML comment type
  belongs_to: XmlType
  description: |-
    ### `inline``read only`[`Comment`](#Comment)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = 3`

    Represents an XML comment type.
- name: XmlType.DocType
  id: xmltype#DocType
  summary: Represents an XML doctype element type
  belongs_to: XmlType
  description: |-
    ### `inline``read only`[`DocType`](#DocType)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = 4`

    Represents an XML doctype element type.
- name: XmlType.Document
  id: xmltype#Document
  summary: Represents an XML document type
  belongs_to: XmlType
  description: |-
    ### `inline``read only`[`Document`](#Document)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = 6`

    Represents an XML document type.
- name: XmlType.Element
  id: xmltype#Element
  summary: Represents an XML element type
  belongs_to: XmlType
  description: |-
    ### `inline``read only`[`Element`](#Element)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = 0`

    Represents an XML element type.
- name: XmlType.PCData
  id: xmltype#PCData
  summary: Represents XML parsed character data type
  belongs_to: XmlType
  description: |-
    ### `inline``read only`[`PCData`](#PCData)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = 1`

    Represents XML parsed character data type.
- name: XmlType.ProcessingInstruction
  id: xmltype#ProcessingInstruction
  summary: Represents an XML processing instruction type
  belongs_to: XmlType
  description: |-
    ### `inline``read only`[`ProcessingInstruction`](#ProcessingInstruction)`:`[`XmlType`](xmltype "XmlType - Xml node types.")` = 5`

    Represents an XML processing instruction type.

    ## Methods
- name: XmlType.toString()
  id: xmltype#toString
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: XmlType
  description: "### [`toString`](#toString)`():`[`String`](string \"String - The basic String class.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/XmlType.html](https://api.haxe.org/XmlType.html)"
- name: zip.Compress
  id: haxe/zip/compress
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Compress\n\npackage [haxe.zip](index)\n\n*Available on all platforms*\n\n## Static methods\n\n### `static`[`run`](#run)`(``s:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``level:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n## Constructor\n\n### [`new`](#new)`(``level:`[`Int`](../../int \"Int - The standard Int type.\")`)`\n\n## Methods\n\n### [`close`](#close)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`execute`](#execute)`(``src:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``srcPos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``dst:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``dstPos:`[`Int`](../../int \"Int - The standard Int type.\")`):{write:`[`Int`](../../int \"Int - The standard Int type.\")`, read:`[`Int`](../../int \"Int - The standard Int type.\")`, done:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`}`\n\n*Available on cs, php, js, neko, cpp, java, lua, python, hl, flash*\n\n### [`execute`](#execute)`(``src:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``srcPos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``dst:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``dstPos:`[`Int`](../../int \"Int - The standard Int type.\")`):{wriet:`[`Int`](../../int \"Int - The standard Int type.\")`, read:`[`Int`](../../int \"Int - The standard Int type.\")`, done:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`}`\n\n*Available on macro*\n\n### [`setFlushMode`](#setFlushMode)`(``f:`[`FlushMode`](flushmode \"haxe.zip.FlushMode\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Compress.html](https://api.haxe.org/haxe/zip/Compress.html)"
- name: zip.Compress.close()
  id: haxe/zip/compress#close
  summary: null
  belongs_to: zip.Compress
  description: '### [`close`](#close)`():`[`Void`](../../void "Void - The standard Void type.")'
- name: zip.Compress.execute()
  id: haxe/zip/compress#execute
  summary: null
  belongs_to: zip.Compress
  description: |-
    ### [`execute`](#execute)`(``src:`[`Bytes`](../io/bytes "haxe.io.Bytes")`,``srcPos:`[`Int`](../../int "Int - The standard Int type.")`,``dst:`[`Bytes`](../io/bytes "haxe.io.Bytes")`,``dstPos:`[`Int`](../../int "Int - The standard Int type.")`):{write:`[`Int`](../../int "Int - The standard Int type.")`, read:`[`Int`](../../int "Int - The standard Int type.")`, done:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`}`

    *Available on cs, php, js, neko, cpp, java, lua, python, hl, flash*

    ### [`execute`](#execute)`(``src:`[`Bytes`](../io/bytes "haxe.io.Bytes")`,``srcPos:`[`Int`](../../int "Int - The standard Int type.")`,``dst:`[`Bytes`](../io/bytes "haxe.io.Bytes")`,``dstPos:`[`Int`](../../int "Int - The standard Int type.")`):{wriet:`[`Int`](../../int "Int - The standard Int type.")`, read:`[`Int`](../../int "Int - The standard Int type.")`, done:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`}`

    *Available on macro*
- name: zip.Compress.run()
  id: haxe/zip/compress#run
  summary: null
  belongs_to: zip.Compress
  description: |-
    ### `static`[`run`](#run)`(``s:`[`Bytes`](../io/bytes "haxe.io.Bytes")`,``level:`[`Int`](../../int "Int - The standard Int type.")`):`[`Bytes`](../io/bytes "haxe.io.Bytes")

    ## Constructor

    ### [`new`](#new)`(``level:`[`Int`](../../int "Int - The standard Int type.")`)`

    ## Methods
- name: zip.Compress.setFlushMode()
  id: haxe/zip/compress#setFlushMode
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: zip.Compress
  description: "### [`setFlushMode`](#setFlushMode)`(``f:`[`FlushMode`](flushmode \"haxe.zip.FlushMode\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Compress.html](https://api.haxe.org/haxe/zip/Compress.html)"
- name: zip.Entry
  id: haxe/zip/entry
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Entry\n\npackage [haxe.zip](index)\n\n*Available on all platforms*\n\n## Fields\n\n### [`fileTime`](#fileTime)`:`[`Date`](../../date \"Date - The Date class provides a basic structure for date and time related information.\")\n\n### [`fileSize`](#fileSize)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### [`fileName`](#fileName)`:`[`String`](../../string \"String - The basic String class.\")\n\n### `optional`[`extraFields`](#extraFields)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`List`](../ds/list \"haxe.ds.List - A linked-list of elements.\")`<`[`ExtraField`](extrafield \"haxe.zip.ExtraField\")`>>`\n\n### [`dataSize`](#dataSize)`:`[`Int`](../../int \"Int - The standard Int type.\")\n\n### [`data`](#data)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`>`\n\n### [`crc32`](#crc32)`:`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>`\n\n### [`compressed`](#compressed)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Entry.html](https://api.haxe.org/haxe/zip/Entry.html)"
- name: zip.Entry.compressed
  id: haxe/zip/entry#compressed
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: zip.Entry
  description: "### [`compressed`](#compressed)`:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Entry.html](https://api.haxe.org/haxe/zip/Entry.html)"
- name: zip.Entry.crc32
  id: haxe/zip/entry#crc32
  summary: null
  belongs_to: zip.Entry
  description: '### [`crc32`](#crc32)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Int`](../../int "Int - The standard Int type.")`>`'
- name: zip.Entry.data
  id: haxe/zip/entry#data
  summary: null
  belongs_to: zip.Entry
  description: '### [`data`](#data)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bytes`](../io/bytes "haxe.io.Bytes")`>`'
- name: zip.Entry.dataSize
  id: haxe/zip/entry#dataSize
  summary: null
  belongs_to: zip.Entry
  description: '### [`dataSize`](#dataSize)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: zip.Entry.extraFields
  id: haxe/zip/entry#extraFields
  summary: null
  belongs_to: zip.Entry
  description: '### `optional`[`extraFields`](#extraFields)`:`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`List`](../ds/list "haxe.ds.List - A linked-list of elements.")`<`[`ExtraField`](extrafield "haxe.zip.ExtraField")`>>`'
- name: zip.Entry.fileName
  id: haxe/zip/entry#fileName
  summary: null
  belongs_to: zip.Entry
  description: '### [`fileName`](#fileName)`:`[`String`](../../string "String - The basic String class.")'
- name: zip.Entry.fileSize
  id: haxe/zip/entry#fileSize
  summary: null
  belongs_to: zip.Entry
  description: '### [`fileSize`](#fileSize)`:`[`Int`](../../int "Int - The standard Int type.")'
- name: zip.Entry.fileTime
  id: haxe/zip/entry#fileTime
  summary: null
  belongs_to: zip.Entry
  description: '### [`fileTime`](#fileTime)`:`[`Date`](../../date "Date - The Date class provides a basic structure for date and time related information.")'
- name: zip.ExtraField
  id: haxe/zip/extrafield
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# ExtraField\n\npackage [haxe.zip](index)\n\nimport [haxe.zip.Entry](entry)\n\n*Available on all platforms*\n\n## Values\n\n### `FUnknown(tag:`[`Int`](../../int \"Int - The standard Int type.\")`, bytes:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`)`\n\n### `FInfoZipUnicodePath(name:`[`String`](../../string \"String - The basic String class.\")`, crc:`[`Int`](../../int \"Int - The standard Int type.\")`)`\n\n### `FUtf8`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/ExtraField.html](https://api.haxe.org/haxe/zip/ExtraField.html)"
- name: zip.ExtraField.FInfoZipUnicodePath()
  id: haxe/zip/extrafield#FInfoZipUnicodePath
  summary: null
  belongs_to: zip.ExtraField
  description: '### `FInfoZipUnicodePath(name:`[`String`](../../string "String - The basic String class.")`, crc:`[`Int`](../../int "Int - The standard Int type.")`)`'
- name: zip.ExtraField.FUnknown()
  id: haxe/zip/extrafield#FUnknown
  summary: null
  belongs_to: zip.ExtraField
  description: '### `FUnknown(tag:`[`Int`](../../int "Int - The standard Int type.")`, bytes:`[`Bytes`](../io/bytes "haxe.io.Bytes")`)`'
- name: zip.ExtraField.FUtf8
  id: haxe/zip/extrafield#FUtf8
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: zip.ExtraField
  description: "### `FUtf8`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/ExtraField.html](https://api.haxe.org/haxe/zip/ExtraField.html)"
- name: zip.FlushMode
  id: haxe/zip/flushmode
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# FlushMode\n\npackage [haxe.zip](index)\n\n*Available on all platforms*\n\n## Values\n\n### `NO`\n\n### `SYNC`\n\n### `FULL`\n\n### `FINISH`\n\n### `BLOCK`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/FlushMode.html](https://api.haxe.org/haxe/zip/FlushMode.html)"
- name: zip.FlushMode.BLOCK
  id: haxe/zip/flushmode#BLOCK
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: zip.FlushMode
  description: "### `BLOCK`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/FlushMode.html](https://api.haxe.org/haxe/zip/FlushMode.html)"
- name: zip.FlushMode.FINISH
  id: haxe/zip/flushmode#FINISH
  summary: null
  belongs_to: zip.FlushMode
  description: '### `FINISH`'
- name: zip.FlushMode.FULL
  id: haxe/zip/flushmode#FULL
  summary: null
  belongs_to: zip.FlushMode
  description: '### `FULL`'
- name: zip.FlushMode.NO
  id: haxe/zip/flushmode#NO
  summary: null
  belongs_to: zip.FlushMode
  description: '### `NO`'
- name: zip.FlushMode.SYNC
  id: haxe/zip/flushmode#SYNC
  summary: null
  belongs_to: zip.FlushMode
  description: '### `SYNC`'
- name: zip.Huffman
  id: haxe/zip/huffman
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Huffman\n\npackage [haxe.zip](index)\n\n*Available on all platforms*\n\n## Values\n\n### `Found(i:`[`Int`](../../int \"Int - The standard Int type.\")`)`\n\n### `NeedBit(left:`[`Huffman`](huffman \"haxe.zip.Huffman\")`, right:`[`Huffman`](huffman \"haxe.zip.Huffman\")`)`\n\n### `NeedBits(n:`[`Int`](../../int \"Int - The standard Int type.\")`, table:`[`Array`](../../array \"Array\")`<`[`Huffman`](huffman \"haxe.zip.Huffman\")`>)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Huffman.html](https://api.haxe.org/haxe/zip/Huffman.html)"
- name: zip.Huffman.Found()
  id: haxe/zip/huffman#Found
  summary: null
  belongs_to: zip.Huffman
  description: '### `Found(i:`[`Int`](../../int "Int - The standard Int type.")`)`'
- name: zip.Huffman.NeedBit()
  id: haxe/zip/huffman#NeedBit
  summary: null
  belongs_to: zip.Huffman
  description: '### `NeedBit(left:`[`Huffman`](huffman "haxe.zip.Huffman")`, right:`[`Huffman`](huffman "haxe.zip.Huffman")`)`'
- name: zip.Huffman.NeedBits()
  id: haxe/zip/huffman#NeedBits
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: zip.Huffman
  description: "### `NeedBits(n:`[`Int`](../../int \"Int - The standard Int type.\")`, table:`[`Array`](../../array \"Array\")`<`[`Huffman`](huffman \"haxe.zip.Huffman\")`>)`\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Huffman.html](https://api.haxe.org/haxe/zip/Huffman.html)"
- name: zip.HuffTools
  id: haxe/zip/hufftools
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# HuffTools\n\npackage [haxe.zip](index)\n\nimport [haxe.zip.Huffman](huffman)\n\n*Available on all platforms*\n\n## Constructor\n\n### [`new`](#new)`()`\n\n## Methods\n\n### [`make`](#make)`(``lengths:`[`Array`](../../array \"Array\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``nlengths:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``maxbits:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Huffman`](huffman \"haxe.zip.Huffman\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/HuffTools.html](https://api.haxe.org/haxe/zip/HuffTools.html)"
- name: zip.HuffTools.make()
  id: haxe/zip/hufftools#make
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: zip.HuffTools
  description: "### [`make`](#make)`(``lengths:`[`Array`](../../array \"Array\")`<`[`Int`](../../int \"Int - The standard Int type.\")`>,``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,``nlengths:`[`Int`](../../int \"Int - The standard Int type.\")`,``maxbits:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Huffman`](huffman \"haxe.zip.Huffman\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/HuffTools.html](https://api.haxe.org/haxe/zip/HuffTools.html)"
- name: zip.InflateImpl
  id: haxe/zip/inflateimpl
  summary: A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support
  description: "# InflateImpl\n\npackage [haxe.zip](index)\n\n*Available on all platforms*\n\nA pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.\n\n## Static methods\n\n### `static`[`run`](#run)`(``i:`[`Input`](../io/input \"haxe.io.Input - An Input is an abstract reader.\")`,`` ``bufsize:`[`Int`](../../int \"Int - The standard Int type.\")` = 65536``):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n## Constructor\n\n### [`new`](#new)`(``i:`[`Input`](../io/input \"haxe.io.Input - An Input is an abstract reader.\")`,`` ``header:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true,`` ``crc:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")` = true``)`\n\n## Methods\n\n### [`readBytes`](#readBytes)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/InflateImpl.html](https://api.haxe.org/haxe/zip/InflateImpl.html)"
- name: zip.InflateImpl.readBytes()
  id: haxe/zip/inflateimpl#readBytes
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: zip.InflateImpl
  description: "### [`readBytes`](#readBytes)`(``b:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,``pos:`[`Int`](../../int \"Int - The standard Int type.\")`,``len:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Int`](../../int \"Int - The standard Int type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/InflateImpl.html](https://api.haxe.org/haxe/zip/InflateImpl.html)"
- name: zip.InflateImpl.run()
  id: haxe/zip/inflateimpl#run
  summary: null
  belongs_to: zip.InflateImpl
  description: |-
    ### `static`[`run`](#run)`(``i:`[`Input`](../io/input "haxe.io.Input - An Input is an abstract reader.")`,``bufsize:`[`Int`](../../int "Int - The standard Int type.")` = 65536``):`[`Bytes`](../io/bytes "haxe.io.Bytes")

    ## Constructor

    ### [`new`](#new)`(``i:`[`Input`](../io/input "haxe.io.Input - An Input is an abstract reader.")`,``header:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = true,``crc:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")` = true``)`

    ## Methods
- name: zip.Reader
  id: haxe/zip/reader
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Reader\n\npackage [haxe.zip](index)\n\n*Available on all platforms*\n\n## Static methods\n\n### `static`[`readZip`](#readZip)`(``i:`[`Input`](../io/input \"haxe.io.Input - An Input is an abstract reader.\")`):`[`List`](../ds/list \"haxe.ds.List - A linked-list of elements.\")`<`[`Entry`](entry \"haxe.zip.Entry\")`>`\n\n### `static`[`unzip`](#unzip)`(``f:`[`Entry`](entry \"haxe.zip.Entry\")`):`[`Null`](../../null \"Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.\")`<`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`>`\n\n## Constructor\n\n### [`new`](#new)`(``i:`[`Input`](../io/input \"haxe.io.Input - An Input is an abstract reader.\")`)`\n\n## Methods\n\n### [`read`](#read)`():`[`List`](../ds/list \"haxe.ds.List - A linked-list of elements.\")`<`[`Entry`](entry \"haxe.zip.Entry\")`>`\n\n### [`readEntryHeader`](#readEntryHeader)`():`[`Entry`](entry \"haxe.zip.Entry\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Reader.html](https://api.haxe.org/haxe/zip/Reader.html)"
- name: zip.Reader.read()
  id: haxe/zip/reader#read
  summary: null
  belongs_to: zip.Reader
  description: '### [`read`](#read)`():`[`List`](../ds/list "haxe.ds.List - A linked-list of elements.")`<`[`Entry`](entry "haxe.zip.Entry")`>`'
- name: zip.Reader.readEntryHeader()
  id: haxe/zip/reader#readEntryHeader
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: zip.Reader
  description: "### [`readEntryHeader`](#readEntryHeader)`():`[`Entry`](entry \"haxe.zip.Entry\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Reader.html](https://api.haxe.org/haxe/zip/Reader.html)"
- name: zip.Reader.readZip()
  id: haxe/zip/reader#readZip
  summary: null
  belongs_to: zip.Reader
  description: '### `static`[`readZip`](#readZip)`(``i:`[`Input`](../io/input "haxe.io.Input - An Input is an abstract reader.")`):`[`List`](../ds/list "haxe.ds.List - A linked-list of elements.")`<`[`Entry`](entry "haxe.zip.Entry")`>`'
- name: zip.Reader.unzip()
  id: haxe/zip/reader#unzip
  summary: null
  belongs_to: zip.Reader
  description: |-
    ### `static`[`unzip`](#unzip)`(``f:`[`Entry`](entry "haxe.zip.Entry")`):`[`Null`](../../null "Null - Null&lt;T&gt; is a wrapper that can be used to make the basic types Int, Float and Bool nullable on static targets.")`<`[`Bytes`](../io/bytes "haxe.io.Bytes")`>`

    ## Constructor

    ### [`new`](#new)`(``i:`[`Input`](../io/input "haxe.io.Input - An Input is an abstract reader.")`)`

    ## Methods
- name: zip.Tools
  id: haxe/zip/tools
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Tools\n\npackage [haxe.zip](index)\n\n*Available on all platforms*\n\n## Static methods\n\n### `static`[`compress`](#compress)`(``f:`[`Entry`](entry \"haxe.zip.Entry\")`,`` ``level:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### `static`[`uncompress`](#uncompress)`(``f:`[`Entry`](entry \"haxe.zip.Entry\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Tools.html](https://api.haxe.org/haxe/zip/Tools.html)"
- name: zip.Tools.compress()
  id: haxe/zip/tools#compress
  summary: null
  belongs_to: zip.Tools
  description: '### `static`[`compress`](#compress)`(``f:`[`Entry`](entry "haxe.zip.Entry")`,``level:`[`Int`](../../int "Int - The standard Int type.")`):`[`Void`](../../void "Void - The standard Void type.")'
- name: zip.Tools.uncompress()
  id: haxe/zip/tools#uncompress
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: zip.Tools
  description: "### `static`[`uncompress`](#uncompress)`(``f:`[`Entry`](entry \"haxe.zip.Entry\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Tools.html](https://api.haxe.org/haxe/zip/Tools.html)"
- name: zip.Uncompress
  id: haxe/zip/uncompress
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Uncompress\n\npackage [haxe.zip](index)\n\n*Available on all platforms*\n\n## Static methods\n\n### `static`[`run`](#run)`(``src:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``?bufsize:`[`Int`](../../int \"Int - The standard Int type.\")`):`[`Bytes`](../io/bytes \"haxe.io.Bytes\")\n\n## Constructor\n\n### [`new`](#new)`(``?windowBits:`[`Int`](../../int \"Int - The standard Int type.\")`)`\n\n## Methods\n\n### [`close`](#close)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`execute`](#execute)`(``src:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``srcPos:`[`Int`](../../int \"Int - The standard Int type.\")`,`` ``dst:`[`Bytes`](../io/bytes \"haxe.io.Bytes\")`,`` ``dstPos:`[`Int`](../../int \"Int - The standard Int type.\")`):{write:`[`Int`](../../int \"Int - The standard Int type.\")`, read:`[`Int`](../../int \"Int - The standard Int type.\")`, done:`[`Bool`](../../bool \"Bool - The standard Boolean type, which can either be true or false.\")`}`\n\n### [`setFlushMode`](#setFlushMode)`(``f:`[`FlushMode`](flushmode \"haxe.zip.FlushMode\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Uncompress.html](https://api.haxe.org/haxe/zip/Uncompress.html)"
- name: zip.Uncompress.close()
  id: haxe/zip/uncompress#close
  summary: null
  belongs_to: zip.Uncompress
  description: '### [`close`](#close)`():`[`Void`](../../void "Void - The standard Void type.")'
- name: zip.Uncompress.execute()
  id: haxe/zip/uncompress#execute
  summary: null
  belongs_to: zip.Uncompress
  description: '### [`execute`](#execute)`(``src:`[`Bytes`](../io/bytes "haxe.io.Bytes")`,``srcPos:`[`Int`](../../int "Int - The standard Int type.")`,``dst:`[`Bytes`](../io/bytes "haxe.io.Bytes")`,``dstPos:`[`Int`](../../int "Int - The standard Int type.")`):{write:`[`Int`](../../int "Int - The standard Int type.")`, read:`[`Int`](../../int "Int - The standard Int type.")`, done:`[`Bool`](../../bool "Bool - The standard Boolean type, which can either be true or false.")`}`'
- name: zip.Uncompress.run()
  id: haxe/zip/uncompress#run
  summary: null
  belongs_to: zip.Uncompress
  description: |-
    ### `static`[`run`](#run)`(``src:`[`Bytes`](../io/bytes "haxe.io.Bytes")`,``?bufsize:`[`Int`](../../int "Int - The standard Int type.")`):`[`Bytes`](../io/bytes "haxe.io.Bytes")

    ## Constructor

    ### [`new`](#new)`(``?windowBits:`[`Int`](../../int "Int - The standard Int type.")`)`

    ## Methods
- name: zip.Uncompress.setFlushMode()
  id: haxe/zip/uncompress#setFlushMode
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: zip.Uncompress
  description: "### [`setFlushMode`](#setFlushMode)`(``f:`[`FlushMode`](flushmode \"haxe.zip.FlushMode\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Uncompress.html](https://api.haxe.org/haxe/zip/Uncompress.html)"
- name: zip.Writer
  id: haxe/zip/writer
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  description: "# Writer\n\npackage [haxe.zip](index)\n\n*Available on all platforms*\n\n## Constructor\n\n### [`new`](#new)`(``o:`[`Output`](../io/output \"haxe.io.Output - An Output is an abstract write.\")`)`\n\n## Methods\n\n### [`write`](#write)`(``files:`[`List`](../ds/list \"haxe.ds.List - A linked-list of elements.\")`<`[`Entry`](entry \"haxe.zip.Entry\")`>``):`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`writeCDR`](#writeCDR)`():`[`Void`](../../void \"Void - The standard Void type.\")\n\n### [`writeEntryHeader`](#writeEntryHeader)`(``f:`[`Entry`](entry \"haxe.zip.Entry\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Writer.html](https://api.haxe.org/haxe/zip/Writer.html)"
- name: zip.Writer.write()
  id: haxe/zip/writer#write
  summary: null
  belongs_to: zip.Writer
  description: '### [`write`](#write)`(``files:`[`List`](../ds/list "haxe.ds.List - A linked-list of elements.")`<`[`Entry`](entry "haxe.zip.Entry")`>``):`[`Void`](../../void "Void - The standard Void type.")'
- name: zip.Writer.writeCDR()
  id: haxe/zip/writer#writeCDR
  summary: null
  belongs_to: zip.Writer
  description: '### [`writeCDR`](#writeCDR)`():`[`Void`](../../void "Void - The standard Void type.")'
- name: zip.Writer.writeEntryHeader()
  id: haxe/zip/writer#writeEntryHeader
  summary: © 2005–2020 Haxe Foundation Licensed under a MIT license
  belongs_to: zip.Writer
  description: "### [`writeEntryHeader`](#writeEntryHeader)`(``f:`[`Entry`](entry \"haxe.zip.Entry\")`):`[`Void`](../../void \"Void - The standard Void type.\")\n\n© 2005–2020 Haxe Foundation  \nLicensed under a MIT license.  \n[https://api.haxe.org/haxe/zip/Writer.html](https://api.haxe.org/haxe/zip/Writer.html)"
